
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ceb8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001044  0800d09c  0800d09c  0001d09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0e0  0800e0e0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e0e0  0800e0e0  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e0e0  0800e0e0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0e0  0800e0e0  0001e0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0e4  0800e0e4  0001e0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800e0e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000fc  0800e1e4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800e1e4  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016894  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ff  00000000  00000000  000369fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  00039f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e58  00000000  00000000  0003b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003bfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c26e  00000000  00000000  0005867d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee3c  00000000  00000000  000748eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005224  00000000  00000000  00113728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011894c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d084 	.word	0x0800d084

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800d084 	.word	0x0800d084

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fd18 	bl	8009c84 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fb90 	bl	800897c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	200003a8 	.word	0x200003a8
 80004c0:	200001f9 	.word	0x200001f9
 80004c4:	20000221 	.word	0x20000221
 80004c8:	20000224 	.word	0x20000224
 80004cc:	20000225 	.word	0x20000225
 80004d0:	20000226 	.word	0x20000226
 80004d4:	20000227 	.word	0x20000227
 80004d8:	20000228 	.word	0x20000228
 80004dc:	20000229 	.word	0x20000229
 80004e0:	20000239 	.word	0x20000239
 80004e4:	2000022a 	.word	0x2000022a
 80004e8:	2000023a 	.word	0x2000023a
 80004ec:	2000022b 	.word	0x2000022b
 80004f0:	2000023b 	.word	0x2000023b
 80004f4:	2000022e 	.word	0x2000022e
 80004f8:	2000022f 	.word	0x2000022f
 80004fc:	20000230 	.word	0x20000230
 8000500:	20000231 	.word	0x20000231
 8000504:	20000232 	.word	0x20000232
 8000508:	20000233 	.word	0x20000233
 800050c:	20000234 	.word	0x20000234
 8000510:	20000235 	.word	0x20000235
 8000514:	20000236 	.word	0x20000236
 8000518:	20000237 	.word	0x20000237
 800051c:	20000238 	.word	0x20000238
 8000520:	2000023c 	.word	0x2000023c
 8000524:	2000023e 	.word	0x2000023e
 8000528:	2000021c 	.word	0x2000021c
 800052c:	2000021d 	.word	0x2000021d
 8000530:	2000021e 	.word	0x2000021e
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	2000021f 	.word	0x2000021f
 8000540:	20000241 	.word	0x20000241
 8000544:	2000023f 	.word	0x2000023f
 8000548:	2000022d 	.word	0x2000022d
 800054c:	20000240 	.word	0x20000240
 8000550:	2000022c 	.word	0x2000022c
 8000554:	20000242 	.word	0x20000242
 8000558:	20000243 	.word	0x20000243
 800055c:	20000244 	.word	0x20000244
 8000560:	20000245 	.word	0x20000245
 8000564:	20000246 	.word	0x20000246
 8000568:	20000247 	.word	0x20000247
 800056c:	20000248 	.word	0x20000248
 8000570:	20000249 	.word	0x20000249
 8000574:	2000024a 	.word	0x2000024a
 8000578:	2000024b 	.word	0x2000024b
 800057c:	200001f8 	.word	0x200001f8
	}

	if(kapi1AcSure>5) {
 8000580:	4b57      	ldr	r3, [pc, #348]	; (80006e0 <eepromKontrol+0x4ac>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b55      	ldr	r3, [pc, #340]	; (80006e0 <eepromKontrol+0x4ac>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b55      	ldr	r3, [pc, #340]	; (80006e4 <eepromKontrol+0x4b0>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b53      	ldr	r3, [pc, #332]	; (80006e4 <eepromKontrol+0x4b0>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b52      	ldr	r3, [pc, #328]	; (80006e8 <eepromKontrol+0x4b4>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b50      	ldr	r3, [pc, #320]	; (80006e8 <eepromKontrol+0x4b4>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b50      	ldr	r3, [pc, #320]	; (80006ec <eepromKontrol+0x4b8>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4e      	ldr	r3, [pc, #312]	; (80006ec <eepromKontrol+0x4b8>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4d      	ldr	r3, [pc, #308]	; (80006f0 <eepromKontrol+0x4bc>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4b      	ldr	r3, [pc, #300]	; (80006f0 <eepromKontrol+0x4bc>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4b      	ldr	r3, [pc, #300]	; (80006f4 <eepromKontrol+0x4c0>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b49      	ldr	r3, [pc, #292]	; (80006f4 <eepromKontrol+0x4c0>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b48      	ldr	r3, [pc, #288]	; (80006f8 <eepromKontrol+0x4c4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <eepromKontrol+0x4c4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b46      	ldr	r3, [pc, #280]	; (80006fc <eepromKontrol+0x4c8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b44      	ldr	r3, [pc, #272]	; (80006fc <eepromKontrol+0x4c8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <eepromKontrol+0x4cc>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b41      	ldr	r3, [pc, #260]	; (8000700 <eepromKontrol+0x4cc>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b41      	ldr	r3, [pc, #260]	; (8000704 <eepromKontrol+0x4d0>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <eepromKontrol+0x4d0>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3e      	ldr	r3, [pc, #248]	; (8000708 <eepromKontrol+0x4d4>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3c      	ldr	r3, [pc, #240]	; (8000708 <eepromKontrol+0x4d4>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3c      	ldr	r3, [pc, #240]	; (800070c <eepromKontrol+0x4d8>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3a      	ldr	r3, [pc, #232]	; (800070c <eepromKontrol+0x4d8>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <eepromKontrol+0x4dc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b37      	ldr	r3, [pc, #220]	; (8000710 <eepromKontrol+0x4dc>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <eepromKontrol+0x4e0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <eepromKontrol+0x4e0>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b34      	ldr	r3, [pc, #208]	; (8000718 <eepromKontrol+0x4e4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b32      	ldr	r3, [pc, #200]	; (8000718 <eepromKontrol+0x4e4>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <eepromKontrol+0x4e8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <eepromKontrol+0x4e8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <eepromKontrol+0x4ec>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <eepromKontrol+0x4ec>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <eepromKontrol+0x4f0>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <eepromKontrol+0x4f0>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <eepromKontrol+0x4f4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <eepromKontrol+0x4f4>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <eepromKontrol+0x4f8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <eepromKontrol+0x4f8>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <eepromKontrol+0x4fc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <eepromKontrol+0x4fc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <eepromKontrol+0x500>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <eepromKontrol+0x500>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	//memcpy(machineIDInt, &eepromData[idStartPos], 12);
	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f83f 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	; 0xfa
 80006bc:	f008 f95e 	bl	800897c <HAL_Delay>
	//memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f839 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	; 0xfa
 80006c8:	f008 f958 	bl	800897c <HAL_Delay>
	//memcpy(wifiPassInt, &eepromData[passStartPos], 20);
	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f833 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	; 0xfa
 80006d4:	f008 f952 	bl	800897c <HAL_Delay>
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000239 	.word	0x20000239
 80006e4:	2000022a 	.word	0x2000022a
 80006e8:	2000023a 	.word	0x2000023a
 80006ec:	2000022b 	.word	0x2000022b
 80006f0:	2000022d 	.word	0x2000022d
 80006f4:	2000023b 	.word	0x2000023b
 80006f8:	2000022e 	.word	0x2000022e
 80006fc:	2000022f 	.word	0x2000022f
 8000700:	20000230 	.word	0x20000230
 8000704:	20000231 	.word	0x20000231
 8000708:	20000232 	.word	0x20000232
 800070c:	20000233 	.word	0x20000233
 8000710:	20000234 	.word	0x20000234
 8000714:	20000235 	.word	0x20000235
 8000718:	20000236 	.word	0x20000236
 800071c:	20000237 	.word	0x20000237
 8000720:	20000238 	.word	0x20000238
 8000724:	2000023c 	.word	0x2000023c
 8000728:	2000023e 	.word	0x2000023e
 800072c:	20000240 	.word	0x20000240
 8000730:	20000241 	.word	0x20000241
 8000734:	2000023f 	.word	0x2000023f

08000738 <convertArrays>:

void convertArrays(int state) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d122      	bne.n	800078c <convertArrays+0x54>
		memset(machineID, 0, machineID[0]);
 8000746:	4b37      	ldr	r3, [pc, #220]	; (8000824 <convertArrays+0xec>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	4835      	ldr	r0, [pc, #212]	; (8000824 <convertArrays+0xec>)
 8000750:	f00c f8a9 	bl	800c8a6 <memset>
		int eepromVal = idStartPos;
 8000754:	4b34      	ldr	r3, [pc, #208]	; (8000828 <convertArrays+0xf0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<12; i++) {
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	e011      	b.n	8000784 <convertArrays+0x4c>
			machineID[i] = idCharactersArray[eepromData[eepromVal]];
 8000760:	4a32      	ldr	r2, [pc, #200]	; (800082c <convertArrays+0xf4>)
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <convertArrays+0xf8>)
 800076c:	5c99      	ldrb	r1, [r3, r2]
 800076e:	4a2d      	ldr	r2, [pc, #180]	; (8000824 <convertArrays+0xec>)
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	4413      	add	r3, r2
 8000774:	460a      	mov	r2, r1
 8000776:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	3301      	adds	r3, #1
 800077c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<12; i++) {
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	3301      	adds	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	2b0b      	cmp	r3, #11
 8000788:	ddea      	ble.n	8000760 <convertArrays+0x28>
			wifiPass[i] = charactersArray[eepromData[eepromVal]];

			eepromVal++;
		}
	}
}
 800078a:	e047      	b.n	800081c <convertArrays+0xe4>
	} else if(state == 2) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d122      	bne.n	80007d8 <convertArrays+0xa0>
		memset(wifiSSID, 0, wifiSSID[0]);
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <convertArrays+0xfc>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	4826      	ldr	r0, [pc, #152]	; (8000834 <convertArrays+0xfc>)
 800079c:	f00c f883 	bl	800c8a6 <memset>
		int eepromVal = ssidStartPos;
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <convertArrays+0x100>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	617b      	str	r3, [r7, #20]
		for(int i=0; i<20; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	e011      	b.n	80007d0 <convertArrays+0x98>
			wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007ac:	4a1f      	ldr	r2, [pc, #124]	; (800082c <convertArrays+0xf4>)
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <convertArrays+0x104>)
 80007b8:	5c99      	ldrb	r1, [r3, r2]
 80007ba:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <convertArrays+0xfc>)
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	4413      	add	r3, r2
 80007c0:	460a      	mov	r2, r1
 80007c2:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3301      	adds	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<20; i++) {
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	3301      	adds	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	2b13      	cmp	r3, #19
 80007d4:	ddea      	ble.n	80007ac <convertArrays+0x74>
}
 80007d6:	e021      	b.n	800081c <convertArrays+0xe4>
		memset(wifiPass, 0, wifiPass[0]);
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <convertArrays+0x108>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	2100      	movs	r1, #0
 80007e0:	4817      	ldr	r0, [pc, #92]	; (8000840 <convertArrays+0x108>)
 80007e2:	f00c f860 	bl	800c8a6 <memset>
		int eepromVal = passStartPos;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <convertArrays+0x10c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<20; i++) {
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	e011      	b.n	8000816 <convertArrays+0xde>
			wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <convertArrays+0xf4>)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <convertArrays+0x104>)
 80007fe:	5c99      	ldrb	r1, [r3, r2]
 8000800:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <convertArrays+0x108>)
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	4413      	add	r3, r2
 8000806:	460a      	mov	r2, r1
 8000808:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3301      	adds	r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<20; i++) {
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	3301      	adds	r3, #1
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	2b13      	cmp	r3, #19
 800081a:	ddea      	ble.n	80007f2 <convertArrays+0xba>
}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000190 	.word	0x20000190
 8000828:	20000004 	.word	0x20000004
 800082c:	20000118 	.word	0x20000118
 8000830:	20000010 	.word	0x20000010
 8000834:	2000019c 	.word	0x2000019c
 8000838:	20000008 	.word	0x20000008
 800083c:	2000001c 	.word	0x2000001c
 8000840:	200001b0 	.word	0x200001b0
 8000844:	2000000c 	.word	0x2000000c

08000848 <resetEEPROM4Wifi>:

void resetEEPROM4Wifi(int state) {
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d11e      	bne.n	8000894 <resetEEPROM4Wifi+0x4c>
		int eepromVal = idStartPos;
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <resetEEPROM4Wifi+0xd8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<machineIDCharacterLimit; i++) {
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	e014      	b.n	800088c <resetEEPROM4Wifi+0x44>
			machineID[i] = '\0';
 8000862:	4a30      	ldr	r2, [pc, #192]	; (8000924 <resetEEPROM4Wifi+0xdc>)
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	4413      	add	r3, r2
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
			machineIDInt[i] = '\0';
 800086c:	4a2e      	ldr	r2, [pc, #184]	; (8000928 <resetEEPROM4Wifi+0xe0>)
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	4413      	add	r3, r2
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 8000876:	4a2d      	ldr	r2, [pc, #180]	; (800092c <resetEEPROM4Wifi+0xe4>)
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	4413      	add	r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	3301      	adds	r3, #1
 8000884:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	3301      	adds	r3, #1
 800088a:	61bb      	str	r3, [r7, #24]
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	2b0b      	cmp	r3, #11
 8000890:	dde7      	ble.n	8000862 <resetEEPROM4Wifi+0x1a>
			wifiPassInt[i] = '\0';
			eepromData[eepromVal] = '\0';
			eepromVal++;
		}
	}
}
 8000892:	e03f      	b.n	8000914 <resetEEPROM4Wifi+0xcc>
	} else if(state == 2) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d11e      	bne.n	80008d8 <resetEEPROM4Wifi+0x90>
		int eepromVal = ssidStartPos;
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <resetEEPROM4Wifi+0xe8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	e014      	b.n	80008d0 <resetEEPROM4Wifi+0x88>
			wifiSSID[i] = '\0';
 80008a6:	4a23      	ldr	r2, [pc, #140]	; (8000934 <resetEEPROM4Wifi+0xec>)
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	4413      	add	r3, r2
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
			wifiSSIDInt[i] = '\0';
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <resetEEPROM4Wifi+0xf0>)
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	4413      	add	r3, r2
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <resetEEPROM4Wifi+0xe4>)
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	4413      	add	r3, r2
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	3301      	adds	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	3301      	adds	r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	2b13      	cmp	r3, #19
 80008d4:	dde7      	ble.n	80008a6 <resetEEPROM4Wifi+0x5e>
}
 80008d6:	e01d      	b.n	8000914 <resetEEPROM4Wifi+0xcc>
		int eepromVal = passStartPos;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <resetEEPROM4Wifi+0xf4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	e014      	b.n	800090e <resetEEPROM4Wifi+0xc6>
			wifiPass[i] = '\0';
 80008e4:	4a16      	ldr	r2, [pc, #88]	; (8000940 <resetEEPROM4Wifi+0xf8>)
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	4413      	add	r3, r2
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
			wifiPassInt[i] = '\0';
 80008ee:	4a15      	ldr	r2, [pc, #84]	; (8000944 <resetEEPROM4Wifi+0xfc>)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4413      	add	r3, r2
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 80008f8:	4a0c      	ldr	r2, [pc, #48]	; (800092c <resetEEPROM4Wifi+0xe4>)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4413      	add	r3, r2
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	3301      	adds	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	3301      	adds	r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b13      	cmp	r3, #19
 8000912:	dde7      	ble.n	80008e4 <resetEEPROM4Wifi+0x9c>
}
 8000914:	bf00      	nop
 8000916:	3724      	adds	r7, #36	; 0x24
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000004 	.word	0x20000004
 8000924:	20000190 	.word	0x20000190
 8000928:	200001c4 	.word	0x200001c4
 800092c:	20000118 	.word	0x20000118
 8000930:	20000008 	.word	0x20000008
 8000934:	2000019c 	.word	0x2000019c
 8000938:	200001d0 	.word	0x200001d0
 800093c:	2000000c 	.word	0x2000000c
 8000940:	200001b0 	.word	0x200001b0
 8000944:	200001e4 	.word	0x200001e4

08000948 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b09f      	sub	sp, #124	; 0x7c
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000954:	4948      	ldr	r1, [pc, #288]	; (8000a78 <ESP8266_Init+0x130>)
 8000956:	4849      	ldr	r0, [pc, #292]	; (8000a7c <ESP8266_Init+0x134>)
 8000958:	f00b ff1e 	bl	800c798 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800095c:	4847      	ldr	r0, [pc, #284]	; (8000a7c <ESP8266_Init+0x134>)
 800095e:	f7ff fc61 	bl	8000224 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	b29b      	uxth	r3, r3
 8000966:	461a      	mov	r2, r3
 8000968:	4944      	ldr	r1, [pc, #272]	; (8000a7c <ESP8266_Init+0x134>)
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f00b f8d2 	bl	800bb14 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000974:	f008 f802 	bl	800897c <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000978:	4941      	ldr	r1, [pc, #260]	; (8000a80 <ESP8266_Init+0x138>)
 800097a:	4840      	ldr	r0, [pc, #256]	; (8000a7c <ESP8266_Init+0x134>)
 800097c:	f00b ff0c 	bl	800c798 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000980:	483e      	ldr	r0, [pc, #248]	; (8000a7c <ESP8266_Init+0x134>)
 8000982:	f7ff fc4f 	bl	8000224 <strlen>
 8000986:	4603      	mov	r3, r0
 8000988:	b29b      	uxth	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	493b      	ldr	r1, [pc, #236]	; (8000a7c <ESP8266_Init+0x134>)
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f00b f8c0 	bl	800bb14 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000998:	f007 fff0 	bl	800897c <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 800099c:	4939      	ldr	r1, [pc, #228]	; (8000a84 <ESP8266_Init+0x13c>)
 800099e:	4837      	ldr	r0, [pc, #220]	; (8000a7c <ESP8266_Init+0x134>)
 80009a0:	f00b fefa 	bl	800c798 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009a4:	4835      	ldr	r0, [pc, #212]	; (8000a7c <ESP8266_Init+0x134>)
 80009a6:	f7ff fc3d 	bl	8000224 <strlen>
 80009aa:	4603      	mov	r3, r0
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	461a      	mov	r2, r3
 80009b0:	4932      	ldr	r1, [pc, #200]	; (8000a7c <ESP8266_Init+0x134>)
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f00b f8ae 	bl	800bb14 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80009b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009bc:	f007 ffde 	bl	800897c <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80009c0:	4931      	ldr	r1, [pc, #196]	; (8000a88 <ESP8266_Init+0x140>)
 80009c2:	482e      	ldr	r0, [pc, #184]	; (8000a7c <ESP8266_Init+0x134>)
 80009c4:	f00b fee8 	bl	800c798 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009c8:	482c      	ldr	r0, [pc, #176]	; (8000a7c <ESP8266_Init+0x134>)
 80009ca:	f7ff fc2b 	bl	8000224 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	4929      	ldr	r1, [pc, #164]	; (8000a7c <ESP8266_Init+0x134>)
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f00b f89c 	bl	800bb14 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80009dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009e0:	f007 ffcc 	bl	800897c <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4a28      	ldr	r2, [pc, #160]	; (8000a8c <ESP8266_Init+0x144>)
 80009ea:	461c      	mov	r4, r3
 80009ec:	4613      	mov	r3, r2
 80009ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009f0:	c407      	stmia	r4!, {r0, r1, r2}
 80009f2:	8023      	strh	r3, [r4, #0]
 80009f4:	3402      	adds	r4, #2
 80009f6:	0c1b      	lsrs	r3, r3, #16
 80009f8:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	68b9      	ldr	r1, [r7, #8]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f00b ff2b 	bl	800c85c <strcat>
	strcat(str, "\",\"");
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fc0a 	bl	8000224 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	461a      	mov	r2, r3
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <ESP8266_Init+0x148>)
 8000a1c:	6810      	ldr	r0, [r2, #0]
 8000a1e:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00b ff18 	bl	800c85c <strcat>
	strcat(str, "\"\r\n");
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fbf7 	bl	8000224 <strlen>
 8000a36:	4603      	mov	r3, r0
 8000a38:	461a      	mov	r2, r3
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <ESP8266_Init+0x14c>)
 8000a42:	6810      	ldr	r0, [r2, #0]
 8000a44:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4912      	ldr	r1, [pc, #72]	; (8000a98 <ESP8266_Init+0x150>)
 8000a4e:	480b      	ldr	r0, [pc, #44]	; (8000a7c <ESP8266_Init+0x134>)
 8000a50:	f00b fea2 	bl	800c798 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <ESP8266_Init+0x134>)
 8000a56:	f7ff fbe5 	bl	8000224 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4906      	ldr	r1, [pc, #24]	; (8000a7c <ESP8266_Init+0x134>)
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f00b f856 	bl	800bb14 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a6c:	f007 ff86 	bl	800897c <HAL_Delay>
}
 8000a70:	bf00      	nop
 8000a72:	377c      	adds	r7, #124	; 0x7c
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	0800d09c 	.word	0x0800d09c
 8000a7c:	20000284 	.word	0x20000284
 8000a80:	0800d0ac 	.word	0x0800d0ac
 8000a84:	0800d0b8 	.word	0x0800d0b8
 8000a88:	0800d0c0 	.word	0x0800d0c0
 8000a8c:	0800d0d0 	.word	0x0800d0d0
 8000a90:	0800d0e0 	.word	0x0800d0e0
 8000a94:	0800d0e4 	.word	0x0800d0e4
 8000a98:	0800d0e8 	.word	0x0800d0e8

08000a9c <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b0c9      	sub	sp, #292	; 0x124
 8000aa0:	af04      	add	r7, sp, #16
 8000aa2:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8000aa6:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8000aaa:	6020      	str	r0, [r4, #0]
 8000aac:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8000ab0:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8000ab4:	6001      	str	r1, [r0, #0]
 8000ab6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000aba:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8000abe:	600a      	str	r2, [r1, #0]
 8000ac0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ac4:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000ac8:	6013      	str	r3, [r2, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000aca:	4a36      	ldr	r2, [pc, #216]	; (8000ba4 <sendMachineData+0x108>)
 8000acc:	4936      	ldr	r1, [pc, #216]	; (8000ba8 <sendMachineData+0x10c>)
 8000ace:	4837      	ldr	r0, [pc, #220]	; (8000bac <sendMachineData+0x110>)
 8000ad0:	f00b fe62 	bl	800c798 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000ad4:	4835      	ldr	r0, [pc, #212]	; (8000bac <sendMachineData+0x110>)
 8000ad6:	f7ff fba5 	bl	8000224 <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ae6:	4931      	ldr	r1, [pc, #196]	; (8000bac <sendMachineData+0x110>)
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	f00b f813 	bl	800bb14 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000aee:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000af2:	f007 ff43 	bl	800897c <HAL_Delay>

	sprintf(local_txA,
 8000af6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000afa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000afe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b02:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000b06:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000b0a:	4929      	ldr	r1, [pc, #164]	; (8000bb0 <sendMachineData+0x114>)
 8000b0c:	9102      	str	r1, [sp, #8]
 8000b0e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8000b12:	9101      	str	r1, [sp, #4]
 8000b14:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000b18:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000b1c:	6809      	ldr	r1, [r1, #0]
 8000b1e:	9100      	str	r1, [sp, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6812      	ldr	r2, [r2, #0]
 8000b24:	4923      	ldr	r1, [pc, #140]	; (8000bb4 <sendMachineData+0x118>)
 8000b26:	f00b fe37 	bl	800c798 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000b2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fb78 	bl	8000224 <strlen>
 8000b34:	4603      	mov	r3, r0
 8000b36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000b42:	491d      	ldr	r1, [pc, #116]	; (8000bb8 <sendMachineData+0x11c>)
 8000b44:	4618      	mov	r0, r3
 8000b46:	f00b fe27 	bl	800c798 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fb68 	bl	8000224 <strlen>
 8000b54:	4603      	mov	r3, r0
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	f107 0110 	add.w	r1, r7, #16
 8000b5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b64:	6818      	ldr	r0, [r3, #0]
 8000b66:	f00a ffd5 	bl	800bb14 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000b6a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b6e:	f007 ff05 	bl	800897c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000b72:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fb54 	bl	8000224 <strlen>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000b84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	f00a ffc1 	bl	800bb14 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000b92:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b96:	f007 fef1 	bl	800897c <HAL_Delay>
}
 8000b9a:	bf00      	nop
 8000b9c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	0800d0ec 	.word	0x0800d0ec
 8000ba8:	0800d0fc 	.word	0x0800d0fc
 8000bac:	20000284 	.word	0x20000284
 8000bb0:	0800d190 	.word	0x0800d190
 8000bb4:	0800d11c 	.word	0x0800d11c
 8000bb8:	0800d1a4 	.word	0x0800d1a4

08000bbc <checkMachineID>:

int checkMachineID(UART_HandleTypeDef *huart1, const char *machineID) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0f4      	sub	sp, #464	; 0x1d0
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000bc6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000bca:	6018      	str	r0, [r3, #0]
 8000bcc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000bd0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8000bd4:	6019      	str	r1, [r3, #0]
	char local_txB[50];
	int len;

	char bufferRX[200];

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000bd6:	4a40      	ldr	r2, [pc, #256]	; (8000cd8 <checkMachineID+0x11c>)
 8000bd8:	4940      	ldr	r1, [pc, #256]	; (8000cdc <checkMachineID+0x120>)
 8000bda:	4841      	ldr	r0, [pc, #260]	; (8000ce0 <checkMachineID+0x124>)
 8000bdc:	f00b fddc 	bl	800c798 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000be0:	483f      	ldr	r0, [pc, #252]	; (8000ce0 <checkMachineID+0x124>)
 8000be2:	f7ff fb1f 	bl	8000224 <strlen>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000bee:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000bf2:	493b      	ldr	r1, [pc, #236]	; (8000ce0 <checkMachineID+0x124>)
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	f00a ff8d 	bl	800bb14 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000bfa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bfe:	f007 febd 	bl	800897c <HAL_Delay>

	sprintf(local_txA,
 8000c02:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000c06:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 8000c0a:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000c0e:	4b35      	ldr	r3, [pc, #212]	; (8000ce4 <checkMachineID+0x128>)
 8000c10:	6812      	ldr	r2, [r2, #0]
 8000c12:	4935      	ldr	r1, [pc, #212]	; (8000ce8 <checkMachineID+0x12c>)
 8000c14:	f00b fdc0 	bl	800c798 <siprintf>
			"GET /api/machine/checkMachineID?machineID=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, mainServerWithPort);
	len = strlen(local_txA);
 8000c18:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fb01 	bl	8000224 <strlen>
 8000c22:	4603      	mov	r3, r0
 8000c24:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000c28:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000c2c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8000c30:	492e      	ldr	r1, [pc, #184]	; (8000cec <checkMachineID+0x130>)
 8000c32:	4618      	mov	r0, r3
 8000c34:	f00b fdb0 	bl	800c798 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000c38:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff faf1 	bl	8000224 <strlen>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000c4a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000c4e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	f00a ff5e 	bl	800bb14 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000c58:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000c5c:	f007 fe8e 	bl	800897c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000c60:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fadd 	bl	8000224 <strlen>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8000c72:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000c76:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000c7a:	6818      	ldr	r0, [r3, #0]
 8000c7c:	f00a ff4a 	bl	800bb14 <HAL_UART_Transmit_IT>
	HAL_Delay(6000);
 8000c80:	f241 7070 	movw	r0, #6000	; 0x1770
 8000c84:	f007 fe7a 	bl	800897c <HAL_Delay>

	HAL_UART_Receive_IT(huart1, (uint8_t*) bufferRX, sizeof(bufferRX));
 8000c88:	f107 0108 	add.w	r1, r7, #8
 8000c8c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000c90:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000c94:	22c8      	movs	r2, #200	; 0xc8
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	f00a ff71 	bl	800bb7e <HAL_UART_Receive_IT>
	HAL_Delay(5000);
 8000c9c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ca0:	f007 fe6c 	bl	800897c <HAL_Delay>

	if (strstr(bufferRX, "HTTP/1.1 200 OK") != NULL && strstr(bufferRX, "\"message\": \"Machine ID is available.\"") != NULL) {
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	4911      	ldr	r1, [pc, #68]	; (8000cf0 <checkMachineID+0x134>)
 8000caa:	4618      	mov	r0, r3
 8000cac:	f00b fde5 	bl	800c87a <strstr>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00a      	beq.n	8000ccc <checkMachineID+0x110>
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	490e      	ldr	r1, [pc, #56]	; (8000cf4 <checkMachineID+0x138>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f00b fddc 	bl	800c87a <strstr>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <checkMachineID+0x110>
	    return 1; // Success
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e000      	b.n	8000cce <checkMachineID+0x112>
	}

	return 0; // Yanıt başarısız
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	0800d0ec 	.word	0x0800d0ec
 8000cdc:	0800d0fc 	.word	0x0800d0fc
 8000ce0:	20000284 	.word	0x20000284
 8000ce4:	0800d190 	.word	0x0800d190
 8000ce8:	0800d1b4 	.word	0x0800d1b4
 8000cec:	0800d1a4 	.word	0x0800d1a4
 8000cf0:	0800d1f8 	.word	0x0800d1f8
 8000cf4:	0800d208 	.word	0x0800d208

08000cf8 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af04      	add	r7, sp, #16
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <hata2EEPROM+0xa4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	1e5a      	subs	r2, r3, #1
 8000d08:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <hata2EEPROM+0xa8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4a25      	ldr	r2, [pc, #148]	; (8000da4 <hata2EEPROM+0xac>)
 8000d10:	5cd3      	ldrb	r3, [r2, r3]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d002      	beq.n	8000d1c <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000d16:	f000 f92b 	bl	8000f70 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000d1a:	e000      	b.n	8000d1e <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000d1c:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	e012      	b.n	8000d4a <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <hata2EEPROM+0xa8>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <hata2EEPROM+0xac>)
 8000d2e:	5cd3      	ldrb	r3, [r2, r3]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d107      	bne.n	8000d44 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <hata2EEPROM+0xa8>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4919      	ldr	r1, [pc, #100]	; (8000da4 <hata2EEPROM+0xac>)
 8000d3e:	79fa      	ldrb	r2, [r7, #7]
 8000d40:	54ca      	strb	r2, [r1, r3]
					break;
 8000d42:	e007      	b.n	8000d54 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3301      	adds	r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <hata2EEPROM+0xa4>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbe7      	blt.n	8000d24 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <hata2EEPROM+0xa8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	b299      	uxth	r1, r3
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <hata2EEPROM+0xa4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	b298      	uxth	r0, r3
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <hata2EEPROM+0xa8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <hata2EEPROM+0xac>)
 8000d66:	4413      	add	r3, r2
 8000d68:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <hata2EEPROM+0xa4>)
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	b292      	uxth	r2, r2
 8000d6e:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000d72:	9402      	str	r4, [sp, #8]
 8000d74:	9201      	str	r2, [sp, #4]
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	4603      	mov	r3, r0
 8000d7a:	460a      	mov	r2, r1
 8000d7c:	21a0      	movs	r1, #160	; 0xa0
 8000d7e:	480a      	ldr	r0, [pc, #40]	; (8000da8 <hata2EEPROM+0xb0>)
 8000d80:	f008 fe86 	bl	8009a90 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000d84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d88:	f007 fdf8 	bl	800897c <HAL_Delay>
	eepromKontrol(1);
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff fa51 	bl	8000234 <eepromKontrol>
}
 8000d92:	bf00      	nop
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd90      	pop	{r4, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000098 	.word	0x20000098
 8000da0:	2000009c 	.word	0x2000009c
 8000da4:	20000118 	.word	0x20000118
 8000da8:	200003a8 	.word	0x200003a8

08000dac <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d11d      	bne.n	8000df8 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000dbc:	4b62      	ldr	r3, [pc, #392]	; (8000f48 <hataKoduLcdGoster+0x19c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d105      	bne.n	8000dd0 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000dc4:	4a61      	ldr	r2, [pc, #388]	; (8000f4c <hataKoduLcdGoster+0x1a0>)
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f007 f881 	bl	8007ed0 <lcd_print>
 8000dce:	e008      	b.n	8000de2 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000dd0:	4b5d      	ldr	r3, [pc, #372]	; (8000f48 <hataKoduLcdGoster+0x19c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d104      	bne.n	8000de2 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000dd8:	4a5d      	ldr	r2, [pc, #372]	; (8000f50 <hataKoduLcdGoster+0x1a4>)
 8000dda:	2101      	movs	r1, #1
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f007 f877 	bl	8007ed0 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000de2:	4a5c      	ldr	r2, [pc, #368]	; (8000f54 <hataKoduLcdGoster+0x1a8>)
 8000de4:	2101      	movs	r1, #1
 8000de6:	2002      	movs	r0, #2
 8000de8:	f007 f872 	bl	8007ed0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000dec:	4a5a      	ldr	r2, [pc, #360]	; (8000f58 <hataKoduLcdGoster+0x1ac>)
 8000dee:	2107      	movs	r1, #7
 8000df0:	2002      	movs	r0, #2
 8000df2:	f007 f86d 	bl	8007ed0 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000df6:	e0a3      	b.n	8000f40 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d11d      	bne.n	8000e3a <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000dfe:	4b52      	ldr	r3, [pc, #328]	; (8000f48 <hataKoduLcdGoster+0x19c>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d105      	bne.n	8000e12 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000e06:	4a51      	ldr	r2, [pc, #324]	; (8000f4c <hataKoduLcdGoster+0x1a0>)
 8000e08:	2101      	movs	r1, #1
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f007 f860 	bl	8007ed0 <lcd_print>
 8000e10:	e008      	b.n	8000e24 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000e12:	4b4d      	ldr	r3, [pc, #308]	; (8000f48 <hataKoduLcdGoster+0x19c>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d104      	bne.n	8000e24 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000e1a:	4a4d      	ldr	r2, [pc, #308]	; (8000f50 <hataKoduLcdGoster+0x1a4>)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f007 f856 	bl	8007ed0 <lcd_print>
		lcd_print(2, 2, "2");
 8000e24:	4a4d      	ldr	r2, [pc, #308]	; (8000f5c <hataKoduLcdGoster+0x1b0>)
 8000e26:	2102      	movs	r1, #2
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f007 f851 	bl	8007ed0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e2e:	4a4a      	ldr	r2, [pc, #296]	; (8000f58 <hataKoduLcdGoster+0x1ac>)
 8000e30:	2107      	movs	r1, #7
 8000e32:	2002      	movs	r0, #2
 8000e34:	f007 f84c 	bl	8007ed0 <lcd_print>
}
 8000e38:	e082      	b.n	8000f40 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d11d      	bne.n	8000e7c <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000e40:	4b41      	ldr	r3, [pc, #260]	; (8000f48 <hataKoduLcdGoster+0x19c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d105      	bne.n	8000e54 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000e48:	4a40      	ldr	r2, [pc, #256]	; (8000f4c <hataKoduLcdGoster+0x1a0>)
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f007 f83f 	bl	8007ed0 <lcd_print>
 8000e52:	e008      	b.n	8000e66 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000e54:	4b3c      	ldr	r3, [pc, #240]	; (8000f48 <hataKoduLcdGoster+0x19c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d104      	bne.n	8000e66 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000e5c:	4a3c      	ldr	r2, [pc, #240]	; (8000f50 <hataKoduLcdGoster+0x1a4>)
 8000e5e:	2101      	movs	r1, #1
 8000e60:	2001      	movs	r0, #1
 8000e62:	f007 f835 	bl	8007ed0 <lcd_print>
		lcd_print(2, 3, "3");
 8000e66:	4a3e      	ldr	r2, [pc, #248]	; (8000f60 <hataKoduLcdGoster+0x1b4>)
 8000e68:	2103      	movs	r1, #3
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f007 f830 	bl	8007ed0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e70:	4a39      	ldr	r2, [pc, #228]	; (8000f58 <hataKoduLcdGoster+0x1ac>)
 8000e72:	2107      	movs	r1, #7
 8000e74:	2002      	movs	r0, #2
 8000e76:	f007 f82b 	bl	8007ed0 <lcd_print>
}
 8000e7a:	e061      	b.n	8000f40 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	d11d      	bne.n	8000ebe <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000e82:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <hataKoduLcdGoster+0x19c>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d105      	bne.n	8000e96 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000e8a:	4a30      	ldr	r2, [pc, #192]	; (8000f4c <hataKoduLcdGoster+0x1a0>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f007 f81e 	bl	8007ed0 <lcd_print>
 8000e94:	e008      	b.n	8000ea8 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000e96:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <hataKoduLcdGoster+0x19c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d104      	bne.n	8000ea8 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000e9e:	4a2c      	ldr	r2, [pc, #176]	; (8000f50 <hataKoduLcdGoster+0x1a4>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f007 f814 	bl	8007ed0 <lcd_print>
		lcd_print(2, 4, "4");
 8000ea8:	4a2e      	ldr	r2, [pc, #184]	; (8000f64 <hataKoduLcdGoster+0x1b8>)
 8000eaa:	2104      	movs	r1, #4
 8000eac:	2002      	movs	r0, #2
 8000eae:	f007 f80f 	bl	8007ed0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000eb2:	4a29      	ldr	r2, [pc, #164]	; (8000f58 <hataKoduLcdGoster+0x1ac>)
 8000eb4:	2107      	movs	r1, #7
 8000eb6:	2002      	movs	r0, #2
 8000eb8:	f007 f80a 	bl	8007ed0 <lcd_print>
}
 8000ebc:	e040      	b.n	8000f40 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	d11d      	bne.n	8000f00 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <hataKoduLcdGoster+0x19c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d105      	bne.n	8000ed8 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000ecc:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <hataKoduLcdGoster+0x1a0>)
 8000ece:	2101      	movs	r1, #1
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f006 fffd 	bl	8007ed0 <lcd_print>
 8000ed6:	e008      	b.n	8000eea <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <hataKoduLcdGoster+0x19c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d104      	bne.n	8000eea <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	; (8000f50 <hataKoduLcdGoster+0x1a4>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f006 fff3 	bl	8007ed0 <lcd_print>
		lcd_print(2, 5, "5");
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <hataKoduLcdGoster+0x1bc>)
 8000eec:	2105      	movs	r1, #5
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f006 ffee 	bl	8007ed0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ef4:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <hataKoduLcdGoster+0x1ac>)
 8000ef6:	2107      	movs	r1, #7
 8000ef8:	2002      	movs	r0, #2
 8000efa:	f006 ffe9 	bl	8007ed0 <lcd_print>
}
 8000efe:	e01f      	b.n	8000f40 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d11c      	bne.n	8000f40 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <hataKoduLcdGoster+0x19c>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d105      	bne.n	8000f1a <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <hataKoduLcdGoster+0x1a0>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	2001      	movs	r0, #1
 8000f14:	f006 ffdc 	bl	8007ed0 <lcd_print>
 8000f18:	e008      	b.n	8000f2c <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <hataKoduLcdGoster+0x19c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d104      	bne.n	8000f2c <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <hataKoduLcdGoster+0x1a4>)
 8000f24:	2101      	movs	r1, #1
 8000f26:	2001      	movs	r0, #1
 8000f28:	f006 ffd2 	bl	8007ed0 <lcd_print>
		lcd_print(2, 6, "6");
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <hataKoduLcdGoster+0x1c0>)
 8000f2e:	2106      	movs	r1, #6
 8000f30:	2002      	movs	r0, #2
 8000f32:	f006 ffcd 	bl	8007ed0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <hataKoduLcdGoster+0x1ac>)
 8000f38:	2107      	movs	r1, #7
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f006 ffc8 	bl	8007ed0 <lcd_print>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000241 	.word	0x20000241
 8000f4c:	0800d230 	.word	0x0800d230
 8000f50:	0800d240 	.word	0x0800d240
 8000f54:	0800d250 	.word	0x0800d250
 8000f58:	0800d254 	.word	0x0800d254
 8000f5c:	0800d260 	.word	0x0800d260
 8000f60:	0800d264 	.word	0x0800d264
 8000f64:	0800d268 	.word	0x0800d268
 8000f68:	0800d26c 	.word	0x0800d26c
 8000f6c:	0800d270 	.word	0x0800d270

08000f70 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	e009      	b.n	8000f90 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <eepromDataFillWithEmpty+0x38>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f84:	4a09      	ldr	r2, [pc, #36]	; (8000fac <eepromDataFillWithEmpty+0x3c>)
 8000f86:	2100      	movs	r1, #0
 8000f88:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <eepromDataFillWithEmpty+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dbf0      	blt.n	8000f7c <eepromDataFillWithEmpty+0xc>
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000070 	.word	0x20000070
 8000fac:	20000118 	.word	0x20000118
 8000fb0:	20000098 	.word	0x20000098

08000fb4 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000fc6:	4b50      	ldr	r3, [pc, #320]	; (8001108 <i2cTest+0x154>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b4e      	ldr	r3, [pc, #312]	; (8001108 <i2cTest+0x154>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0201 	bic.w	r2, r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000fd6:	484c      	ldr	r0, [pc, #304]	; (8001108 <i2cTest+0x154>)
 8000fd8:	f008 fc2c 	bl	8009834 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fdc:	23c0      	movs	r3, #192	; 0xc0
 8000fde:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000fe0:	2311      	movs	r3, #17
 8000fe2:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4846      	ldr	r0, [pc, #280]	; (800110c <i2cTest+0x158>)
 8000ff2:	f008 f833 	bl	800905c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2140      	movs	r1, #64	; 0x40
 8000ffa:	4844      	ldr	r0, [pc, #272]	; (800110c <i2cTest+0x158>)
 8000ffc:	f008 faa5 	bl	800954a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	4841      	ldr	r0, [pc, #260]	; (800110c <i2cTest+0x158>)
 8001006:	f008 faa0 	bl	800954a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800100a:	200a      	movs	r0, #10
 800100c:	f007 fcb6 	bl	800897c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8001010:	bf00      	nop
 8001012:	2140      	movs	r1, #64	; 0x40
 8001014:	483d      	ldr	r0, [pc, #244]	; (800110c <i2cTest+0x158>)
 8001016:	f008 fa81 	bl	800951c <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	2b01      	cmp	r3, #1
 800101e:	d006      	beq.n	800102e <i2cTest+0x7a>
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	483a      	ldr	r0, [pc, #232]	; (800110c <i2cTest+0x158>)
 8001024:	f008 fa7a 	bl	800951c <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d1f1      	bne.n	8001012 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	4836      	ldr	r0, [pc, #216]	; (800110c <i2cTest+0x158>)
 8001034:	f008 fa89 	bl	800954a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8001038:	200a      	movs	r0, #10
 800103a:	f007 fc9f 	bl	800897c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800103e:	bf00      	nop
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	4832      	ldr	r0, [pc, #200]	; (800110c <i2cTest+0x158>)
 8001044:	f008 fa6a 	bl	800951c <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	2b01      	cmp	r3, #1
 800104c:	d0f8      	beq.n	8001040 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2140      	movs	r1, #64	; 0x40
 8001052:	482e      	ldr	r0, [pc, #184]	; (800110c <i2cTest+0x158>)
 8001054:	f008 fa79 	bl	800954a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001058:	200a      	movs	r0, #10
 800105a:	f007 fc8f 	bl	800897c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800105e:	bf00      	nop
 8001060:	2140      	movs	r1, #64	; 0x40
 8001062:	482a      	ldr	r0, [pc, #168]	; (800110c <i2cTest+0x158>)
 8001064:	f008 fa5a 	bl	800951c <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b01      	cmp	r3, #1
 800106c:	d0f8      	beq.n	8001060 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800106e:	2201      	movs	r2, #1
 8001070:	2140      	movs	r1, #64	; 0x40
 8001072:	4826      	ldr	r0, [pc, #152]	; (800110c <i2cTest+0x158>)
 8001074:	f008 fa69 	bl	800954a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001078:	200a      	movs	r0, #10
 800107a:	f007 fc7f 	bl	800897c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800107e:	bf00      	nop
 8001080:	2140      	movs	r1, #64	; 0x40
 8001082:	4822      	ldr	r0, [pc, #136]	; (800110c <i2cTest+0x158>)
 8001084:	f008 fa4a 	bl	800951c <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b01      	cmp	r3, #1
 800108c:	d1f8      	bne.n	8001080 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	481e      	ldr	r0, [pc, #120]	; (800110c <i2cTest+0x158>)
 8001094:	f008 fa59 	bl	800954a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001098:	200a      	movs	r0, #10
 800109a:	f007 fc6f 	bl	800897c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800109e:	bf00      	nop
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	481a      	ldr	r0, [pc, #104]	; (800110c <i2cTest+0x158>)
 80010a4:	f008 fa3a 	bl	800951c <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d1f8      	bne.n	80010a0 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ae:	23c0      	movs	r3, #192	; 0xc0
 80010b0:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80010b2:	2312      	movs	r3, #18
 80010b4:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	4812      	ldr	r0, [pc, #72]	; (800110c <i2cTest+0x158>)
 80010c4:	f007 ffca 	bl	800905c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <i2cTest+0x154>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <i2cTest+0x154>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010d6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <i2cTest+0x154>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <i2cTest+0x154>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010e6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <i2cTest+0x154>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <i2cTest+0x154>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0201 	orr.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <i2cTest+0x154>)
 80010fa:	f008 fa57 	bl	80095ac <HAL_I2C_Init>
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200003a8 	.word	0x200003a8
 800110c:	40010c00 	.word	0x40010c00

08001110 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 800111a:	20c8      	movs	r0, #200	; 0xc8
 800111c:	f007 fc2e 	bl	800897c <HAL_Delay>
	lcd_clear();
 8001120:	f006 ff02 	bl	8007f28 <lcd_clear>
	if(type == 1 && page == 0) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d143      	bne.n	80011b2 <printTemplate+0xa2>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d140      	bne.n	80011b2 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8001130:	4a9d      	ldr	r2, [pc, #628]	; (80013a8 <printTemplate+0x298>)
 8001132:	2101      	movs	r1, #1
 8001134:	2001      	movs	r0, #1
 8001136:	f006 fecb 	bl	8007ed0 <lcd_print>
		lcd_print(2, 3, "0");
 800113a:	4a9c      	ldr	r2, [pc, #624]	; (80013ac <printTemplate+0x29c>)
 800113c:	2103      	movs	r1, #3
 800113e:	2002      	movs	r0, #2
 8001140:	f006 fec6 	bl	8007ed0 <lcd_print>
		lcd_print(2, 4, "1");
 8001144:	4a9a      	ldr	r2, [pc, #616]	; (80013b0 <printTemplate+0x2a0>)
 8001146:	2104      	movs	r1, #4
 8001148:	2002      	movs	r0, #2
 800114a:	f006 fec1 	bl	8007ed0 <lcd_print>
		lcd_print(2, 5, "2");
 800114e:	4a99      	ldr	r2, [pc, #612]	; (80013b4 <printTemplate+0x2a4>)
 8001150:	2105      	movs	r1, #5
 8001152:	2002      	movs	r0, #2
 8001154:	f006 febc 	bl	8007ed0 <lcd_print>
		lcd_print(2, 6, "3");
 8001158:	4a97      	ldr	r2, [pc, #604]	; (80013b8 <printTemplate+0x2a8>)
 800115a:	2106      	movs	r1, #6
 800115c:	2002      	movs	r0, #2
 800115e:	f006 feb7 	bl	8007ed0 <lcd_print>
		lcd_print(2, 7, "4");
 8001162:	4a96      	ldr	r2, [pc, #600]	; (80013bc <printTemplate+0x2ac>)
 8001164:	2107      	movs	r1, #7
 8001166:	2002      	movs	r0, #2
 8001168:	f006 feb2 	bl	8007ed0 <lcd_print>
		lcd_print(2, 10, "5");
 800116c:	4a94      	ldr	r2, [pc, #592]	; (80013c0 <printTemplate+0x2b0>)
 800116e:	210a      	movs	r1, #10
 8001170:	2002      	movs	r0, #2
 8001172:	f006 fead 	bl	8007ed0 <lcd_print>
		lcd_print(2, 11, "6");
 8001176:	4a93      	ldr	r2, [pc, #588]	; (80013c4 <printTemplate+0x2b4>)
 8001178:	210b      	movs	r1, #11
 800117a:	2002      	movs	r0, #2
 800117c:	f006 fea8 	bl	8007ed0 <lcd_print>
		lcd_print(2, 12, "7");
 8001180:	4a91      	ldr	r2, [pc, #580]	; (80013c8 <printTemplate+0x2b8>)
 8001182:	210c      	movs	r1, #12
 8001184:	2002      	movs	r0, #2
 8001186:	f006 fea3 	bl	8007ed0 <lcd_print>
		lcd_print(2, 13, "8");
 800118a:	4a90      	ldr	r2, [pc, #576]	; (80013cc <printTemplate+0x2bc>)
 800118c:	210d      	movs	r1, #13
 800118e:	2002      	movs	r0, #2
 8001190:	f006 fe9e 	bl	8007ed0 <lcd_print>
		lcd_print(2, 14, "9");
 8001194:	4a8e      	ldr	r2, [pc, #568]	; (80013d0 <printTemplate+0x2c0>)
 8001196:	210e      	movs	r1, #14
 8001198:	2002      	movs	r0, #2
 800119a:	f006 fe99 	bl	8007ed0 <lcd_print>
		lcd_print(1, 5, machineID);
 800119e:	4a8d      	ldr	r2, [pc, #564]	; (80013d4 <printTemplate+0x2c4>)
 80011a0:	2105      	movs	r1, #5
 80011a2:	2001      	movs	r0, #1
 80011a4:	f006 fe94 	bl	8007ed0 <lcd_print>
		lcd_gotoxy(2, 3);
 80011a8:	2103      	movs	r1, #3
 80011aa:	2002      	movs	r0, #2
 80011ac:	f006 fe71 	bl	8007e92 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 80011b0:	e0f5      	b.n	800139e <printTemplate+0x28e>
	} else if(type == 2) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d178      	bne.n	80012aa <printTemplate+0x19a>
		if(page == 1) {
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d114      	bne.n	80011e8 <printTemplate+0xd8>
			lcd_clear();
 80011be:	f006 feb3 	bl	8007f28 <lcd_clear>
			HAL_Delay(100);
 80011c2:	2064      	movs	r0, #100	; 0x64
 80011c4:	f007 fbda 	bl	800897c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80011c8:	4a83      	ldr	r2, [pc, #524]	; (80013d8 <printTemplate+0x2c8>)
 80011ca:	2101      	movs	r1, #1
 80011cc:	2001      	movs	r0, #1
 80011ce:	f006 fe7f 	bl	8007ed0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80011d2:	4a82      	ldr	r2, [pc, #520]	; (80013dc <printTemplate+0x2cc>)
 80011d4:	2107      	movs	r1, #7
 80011d6:	2001      	movs	r0, #1
 80011d8:	f006 fe7a 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80011dc:	4a80      	ldr	r2, [pc, #512]	; (80013e0 <printTemplate+0x2d0>)
 80011de:	2101      	movs	r1, #1
 80011e0:	2002      	movs	r0, #2
 80011e2:	f006 fe75 	bl	8007ed0 <lcd_print>
}
 80011e6:	e0da      	b.n	800139e <printTemplate+0x28e>
		} else if(page == 2) {
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d114      	bne.n	8001218 <printTemplate+0x108>
			lcd_clear();
 80011ee:	f006 fe9b 	bl	8007f28 <lcd_clear>
			HAL_Delay(100);
 80011f2:	2064      	movs	r0, #100	; 0x64
 80011f4:	f007 fbc2 	bl	800897c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80011f8:	4a77      	ldr	r2, [pc, #476]	; (80013d8 <printTemplate+0x2c8>)
 80011fa:	2101      	movs	r1, #1
 80011fc:	2001      	movs	r0, #1
 80011fe:	f006 fe67 	bl	8007ed0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001202:	4a76      	ldr	r2, [pc, #472]	; (80013dc <printTemplate+0x2cc>)
 8001204:	2107      	movs	r1, #7
 8001206:	2001      	movs	r0, #1
 8001208:	f006 fe62 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800120c:	4a75      	ldr	r2, [pc, #468]	; (80013e4 <printTemplate+0x2d4>)
 800120e:	2101      	movs	r1, #1
 8001210:	2002      	movs	r0, #2
 8001212:	f006 fe5d 	bl	8007ed0 <lcd_print>
}
 8001216:	e0c2      	b.n	800139e <printTemplate+0x28e>
		} else if(page == 3) {
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d114      	bne.n	8001248 <printTemplate+0x138>
			lcd_clear();
 800121e:	f006 fe83 	bl	8007f28 <lcd_clear>
			HAL_Delay(100);
 8001222:	2064      	movs	r0, #100	; 0x64
 8001224:	f007 fbaa 	bl	800897c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001228:	4a6b      	ldr	r2, [pc, #428]	; (80013d8 <printTemplate+0x2c8>)
 800122a:	2101      	movs	r1, #1
 800122c:	2001      	movs	r0, #1
 800122e:	f006 fe4f 	bl	8007ed0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001232:	4a6a      	ldr	r2, [pc, #424]	; (80013dc <printTemplate+0x2cc>)
 8001234:	2107      	movs	r1, #7
 8001236:	2001      	movs	r0, #1
 8001238:	f006 fe4a 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 800123c:	4a6a      	ldr	r2, [pc, #424]	; (80013e8 <printTemplate+0x2d8>)
 800123e:	2101      	movs	r1, #1
 8001240:	2002      	movs	r0, #2
 8001242:	f006 fe45 	bl	8007ed0 <lcd_print>
}
 8001246:	e0aa      	b.n	800139e <printTemplate+0x28e>
		} else if(page == 4) {
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2b04      	cmp	r3, #4
 800124c:	d114      	bne.n	8001278 <printTemplate+0x168>
			lcd_clear();
 800124e:	f006 fe6b 	bl	8007f28 <lcd_clear>
			HAL_Delay(100);
 8001252:	2064      	movs	r0, #100	; 0x64
 8001254:	f007 fb92 	bl	800897c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001258:	4a5f      	ldr	r2, [pc, #380]	; (80013d8 <printTemplate+0x2c8>)
 800125a:	2101      	movs	r1, #1
 800125c:	2001      	movs	r0, #1
 800125e:	f006 fe37 	bl	8007ed0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001262:	4a5e      	ldr	r2, [pc, #376]	; (80013dc <printTemplate+0x2cc>)
 8001264:	2107      	movs	r1, #7
 8001266:	2001      	movs	r0, #1
 8001268:	f006 fe32 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 800126c:	4a5f      	ldr	r2, [pc, #380]	; (80013ec <printTemplate+0x2dc>)
 800126e:	2101      	movs	r1, #1
 8001270:	2002      	movs	r0, #2
 8001272:	f006 fe2d 	bl	8007ed0 <lcd_print>
}
 8001276:	e092      	b.n	800139e <printTemplate+0x28e>
		} else if(page == 5) {
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	2b05      	cmp	r3, #5
 800127c:	f040 808f 	bne.w	800139e <printTemplate+0x28e>
			lcd_clear();
 8001280:	f006 fe52 	bl	8007f28 <lcd_clear>
			HAL_Delay(100);
 8001284:	2064      	movs	r0, #100	; 0x64
 8001286:	f007 fb79 	bl	800897c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800128a:	4a53      	ldr	r2, [pc, #332]	; (80013d8 <printTemplate+0x2c8>)
 800128c:	2101      	movs	r1, #1
 800128e:	2001      	movs	r0, #1
 8001290:	f006 fe1e 	bl	8007ed0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001294:	4a51      	ldr	r2, [pc, #324]	; (80013dc <printTemplate+0x2cc>)
 8001296:	2107      	movs	r1, #7
 8001298:	2001      	movs	r0, #1
 800129a:	f006 fe19 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800129e:	4a54      	ldr	r2, [pc, #336]	; (80013f0 <printTemplate+0x2e0>)
 80012a0:	2101      	movs	r1, #1
 80012a2:	2002      	movs	r0, #2
 80012a4:	f006 fe14 	bl	8007ed0 <lcd_print>
}
 80012a8:	e079      	b.n	800139e <printTemplate+0x28e>
	} else if(type == 3) {
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d176      	bne.n	800139e <printTemplate+0x28e>
		if(page == 1) {
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d114      	bne.n	80012e0 <printTemplate+0x1d0>
			lcd_clear();
 80012b6:	f006 fe37 	bl	8007f28 <lcd_clear>
			HAL_Delay(100);
 80012ba:	2064      	movs	r0, #100	; 0x64
 80012bc:	f007 fb5e 	bl	800897c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80012c0:	4a4c      	ldr	r2, [pc, #304]	; (80013f4 <printTemplate+0x2e4>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	2001      	movs	r0, #1
 80012c6:	f006 fe03 	bl	8007ed0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80012ca:	4a4b      	ldr	r2, [pc, #300]	; (80013f8 <printTemplate+0x2e8>)
 80012cc:	2107      	movs	r1, #7
 80012ce:	2001      	movs	r0, #1
 80012d0:	f006 fdfe 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80012d4:	4a42      	ldr	r2, [pc, #264]	; (80013e0 <printTemplate+0x2d0>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	2002      	movs	r0, #2
 80012da:	f006 fdf9 	bl	8007ed0 <lcd_print>
}
 80012de:	e05e      	b.n	800139e <printTemplate+0x28e>
		} else if(page == 2) {
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d114      	bne.n	8001310 <printTemplate+0x200>
			lcd_clear();
 80012e6:	f006 fe1f 	bl	8007f28 <lcd_clear>
			HAL_Delay(100);
 80012ea:	2064      	movs	r0, #100	; 0x64
 80012ec:	f007 fb46 	bl	800897c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80012f0:	4a40      	ldr	r2, [pc, #256]	; (80013f4 <printTemplate+0x2e4>)
 80012f2:	2101      	movs	r1, #1
 80012f4:	2001      	movs	r0, #1
 80012f6:	f006 fdeb 	bl	8007ed0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80012fa:	4a3f      	ldr	r2, [pc, #252]	; (80013f8 <printTemplate+0x2e8>)
 80012fc:	2107      	movs	r1, #7
 80012fe:	2001      	movs	r0, #1
 8001300:	f006 fde6 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001304:	4a37      	ldr	r2, [pc, #220]	; (80013e4 <printTemplate+0x2d4>)
 8001306:	2101      	movs	r1, #1
 8001308:	2002      	movs	r0, #2
 800130a:	f006 fde1 	bl	8007ed0 <lcd_print>
}
 800130e:	e046      	b.n	800139e <printTemplate+0x28e>
		} else if(page == 3) {
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b03      	cmp	r3, #3
 8001314:	d114      	bne.n	8001340 <printTemplate+0x230>
			lcd_clear();
 8001316:	f006 fe07 	bl	8007f28 <lcd_clear>
			HAL_Delay(100);
 800131a:	2064      	movs	r0, #100	; 0x64
 800131c:	f007 fb2e 	bl	800897c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001320:	4a34      	ldr	r2, [pc, #208]	; (80013f4 <printTemplate+0x2e4>)
 8001322:	2101      	movs	r1, #1
 8001324:	2001      	movs	r0, #1
 8001326:	f006 fdd3 	bl	8007ed0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800132a:	4a33      	ldr	r2, [pc, #204]	; (80013f8 <printTemplate+0x2e8>)
 800132c:	2107      	movs	r1, #7
 800132e:	2001      	movs	r0, #1
 8001330:	f006 fdce 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001334:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <printTemplate+0x2d8>)
 8001336:	2101      	movs	r1, #1
 8001338:	2002      	movs	r0, #2
 800133a:	f006 fdc9 	bl	8007ed0 <lcd_print>
}
 800133e:	e02e      	b.n	800139e <printTemplate+0x28e>
		} else if(page == 4) {
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	2b04      	cmp	r3, #4
 8001344:	d114      	bne.n	8001370 <printTemplate+0x260>
			lcd_clear();
 8001346:	f006 fdef 	bl	8007f28 <lcd_clear>
			HAL_Delay(100);
 800134a:	2064      	movs	r0, #100	; 0x64
 800134c:	f007 fb16 	bl	800897c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001350:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <printTemplate+0x2e4>)
 8001352:	2101      	movs	r1, #1
 8001354:	2001      	movs	r0, #1
 8001356:	f006 fdbb 	bl	8007ed0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800135a:	4a27      	ldr	r2, [pc, #156]	; (80013f8 <printTemplate+0x2e8>)
 800135c:	2107      	movs	r1, #7
 800135e:	2001      	movs	r0, #1
 8001360:	f006 fdb6 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001364:	4a21      	ldr	r2, [pc, #132]	; (80013ec <printTemplate+0x2dc>)
 8001366:	2101      	movs	r1, #1
 8001368:	2002      	movs	r0, #2
 800136a:	f006 fdb1 	bl	8007ed0 <lcd_print>
}
 800136e:	e016      	b.n	800139e <printTemplate+0x28e>
		} else if(page == 5) {
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2b05      	cmp	r3, #5
 8001374:	d113      	bne.n	800139e <printTemplate+0x28e>
			lcd_clear();
 8001376:	f006 fdd7 	bl	8007f28 <lcd_clear>
			HAL_Delay(100);
 800137a:	2064      	movs	r0, #100	; 0x64
 800137c:	f007 fafe 	bl	800897c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001380:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <printTemplate+0x2e4>)
 8001382:	2101      	movs	r1, #1
 8001384:	2001      	movs	r0, #1
 8001386:	f006 fda3 	bl	8007ed0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800138a:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <printTemplate+0x2e8>)
 800138c:	2107      	movs	r1, #7
 800138e:	2001      	movs	r0, #1
 8001390:	f006 fd9e 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001394:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <printTemplate+0x2e0>)
 8001396:	2101      	movs	r1, #1
 8001398:	2002      	movs	r0, #2
 800139a:	f006 fd99 	bl	8007ed0 <lcd_print>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	0800d274 	.word	0x0800d274
 80013ac:	0800d27c 	.word	0x0800d27c
 80013b0:	0800d280 	.word	0x0800d280
 80013b4:	0800d284 	.word	0x0800d284
 80013b8:	0800d288 	.word	0x0800d288
 80013bc:	0800d28c 	.word	0x0800d28c
 80013c0:	0800d290 	.word	0x0800d290
 80013c4:	0800d294 	.word	0x0800d294
 80013c8:	0800d298 	.word	0x0800d298
 80013cc:	0800d29c 	.word	0x0800d29c
 80013d0:	0800d2a0 	.word	0x0800d2a0
 80013d4:	20000190 	.word	0x20000190
 80013d8:	0800d2a4 	.word	0x0800d2a4
 80013dc:	2000019c 	.word	0x2000019c
 80013e0:	0800d2ac 	.word	0x0800d2ac
 80013e4:	0800d2c0 	.word	0x0800d2c0
 80013e8:	0800d2d4 	.word	0x0800d2d4
 80013ec:	0800d2e8 	.word	0x0800d2e8
 80013f0:	0800d2fc 	.word	0x0800d2fc
 80013f4:	0800d310 	.word	0x0800d310
 80013f8:	200001b0 	.word	0x200001b0

080013fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001400:	f3bf 8f4f 	dsb	sy
}
 8001404:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <__NVIC_SystemReset+0x24>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800140e:	4904      	ldr	r1, [pc, #16]	; (8001420 <__NVIC_SystemReset+0x24>)
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <__NVIC_SystemReset+0x28>)
 8001412:	4313      	orrs	r3, r2
 8001414:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001416:	f3bf 8f4f 	dsb	sy
}
 800141a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <__NVIC_SystemReset+0x20>
 8001420:	e000ed00 	.word	0xe000ed00
 8001424:	05fa0004 	.word	0x05fa0004

08001428 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001428:	b580      	push	{r7, lr}
 800142a:	b092      	sub	sp, #72	; 0x48
 800142c:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800142e:	2101      	movs	r1, #1
 8001430:	488e      	ldr	r0, [pc, #568]	; (800166c <menu+0x244>)
 8001432:	f008 f873 	bl	800951c <HAL_GPIO_ReadPin>
 8001436:	4603      	mov	r3, r0
 8001438:	2b01      	cmp	r3, #1
 800143a:	f040 808e 	bne.w	800155a <menu+0x132>
 800143e:	4b8c      	ldr	r3, [pc, #560]	; (8001670 <menu+0x248>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	f083 0301 	eor.w	r3, r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 8086 	beq.w	800155a <menu+0x132>
		menuSayac = menuSayac+1;
 800144e:	4b89      	ldr	r3, [pc, #548]	; (8001674 <menu+0x24c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b87      	ldr	r3, [pc, #540]	; (8001674 <menu+0x24c>)
 8001458:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800145a:	4b86      	ldr	r3, [pc, #536]	; (8001674 <menu+0x24c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b24      	cmp	r3, #36	; 0x24
 8001460:	d102      	bne.n	8001468 <menu+0x40>
			menuSayac = 1;
 8001462:	4b84      	ldr	r3, [pc, #528]	; (8001674 <menu+0x24c>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001468:	4b82      	ldr	r3, [pc, #520]	; (8001674 <menu+0x24c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b12      	cmp	r3, #18
 800146e:	d106      	bne.n	800147e <menu+0x56>
 8001470:	4b81      	ldr	r3, [pc, #516]	; (8001678 <menu+0x250>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <menu+0x56>
			menuSayac = 21;
 8001478:	4b7e      	ldr	r3, [pc, #504]	; (8001674 <menu+0x24c>)
 800147a:	2215      	movs	r2, #21
 800147c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800147e:	4b7d      	ldr	r3, [pc, #500]	; (8001674 <menu+0x24c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b08      	cmp	r3, #8
 8001484:	d106      	bne.n	8001494 <menu+0x6c>
 8001486:	4b7d      	ldr	r3, [pc, #500]	; (800167c <menu+0x254>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <menu+0x6c>
			menuSayac = 16;
 800148e:	4b79      	ldr	r3, [pc, #484]	; (8001674 <menu+0x24c>)
 8001490:	2210      	movs	r2, #16
 8001492:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001494:	4b77      	ldr	r3, [pc, #476]	; (8001674 <menu+0x24c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b0d      	cmp	r3, #13
 800149a:	d106      	bne.n	80014aa <menu+0x82>
 800149c:	4b77      	ldr	r3, [pc, #476]	; (800167c <menu+0x254>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d102      	bne.n	80014aa <menu+0x82>
			menuSayac = 16;
 80014a4:	4b73      	ldr	r3, [pc, #460]	; (8001674 <menu+0x24c>)
 80014a6:	2210      	movs	r2, #16
 80014a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80014aa:	4b72      	ldr	r3, [pc, #456]	; (8001674 <menu+0x24c>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b09      	cmp	r3, #9
 80014b0:	d106      	bne.n	80014c0 <menu+0x98>
 80014b2:	4b72      	ldr	r3, [pc, #456]	; (800167c <menu+0x254>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d102      	bne.n	80014c0 <menu+0x98>
			menuSayac = 13;
 80014ba:	4b6e      	ldr	r3, [pc, #440]	; (8001674 <menu+0x24c>)
 80014bc:	220d      	movs	r2, #13
 80014be:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80014c0:	4b6c      	ldr	r3, [pc, #432]	; (8001674 <menu+0x24c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b0a      	cmp	r3, #10
 80014c6:	d10a      	bne.n	80014de <menu+0xb6>
 80014c8:	4b6d      	ldr	r3, [pc, #436]	; (8001680 <menu+0x258>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d003      	beq.n	80014d8 <menu+0xb0>
 80014d0:	4b6b      	ldr	r3, [pc, #428]	; (8001680 <menu+0x258>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d102      	bne.n	80014de <menu+0xb6>
			menuSayac = 11;
 80014d8:	4b66      	ldr	r3, [pc, #408]	; (8001674 <menu+0x24c>)
 80014da:	220b      	movs	r2, #11
 80014dc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80014de:	4b65      	ldr	r3, [pc, #404]	; (8001674 <menu+0x24c>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d10e      	bne.n	8001504 <menu+0xdc>
 80014e6:	4b67      	ldr	r3, [pc, #412]	; (8001684 <menu+0x25c>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d003      	beq.n	80014f6 <menu+0xce>
 80014ee:	4b65      	ldr	r3, [pc, #404]	; (8001684 <menu+0x25c>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d106      	bne.n	8001504 <menu+0xdc>
 80014f6:	4b61      	ldr	r3, [pc, #388]	; (800167c <menu+0x254>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d102      	bne.n	8001504 <menu+0xdc>
			menuSayac = 16;
 80014fe:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <menu+0x24c>)
 8001500:	2210      	movs	r2, #16
 8001502:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001504:	4b5b      	ldr	r3, [pc, #364]	; (8001674 <menu+0x24c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b0c      	cmp	r3, #12
 800150a:	d10e      	bne.n	800152a <menu+0x102>
 800150c:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <menu+0x25c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d003      	beq.n	800151c <menu+0xf4>
 8001514:	4b5b      	ldr	r3, [pc, #364]	; (8001684 <menu+0x25c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d106      	bne.n	800152a <menu+0x102>
 800151c:	4b57      	ldr	r3, [pc, #348]	; (800167c <menu+0x254>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b03      	cmp	r3, #3
 8001522:	d102      	bne.n	800152a <menu+0x102>
			menuSayac = 13;
 8001524:	4b53      	ldr	r3, [pc, #332]	; (8001674 <menu+0x24c>)
 8001526:	220d      	movs	r2, #13
 8001528:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800152a:	4b52      	ldr	r3, [pc, #328]	; (8001674 <menu+0x24c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b0f      	cmp	r3, #15
 8001530:	d106      	bne.n	8001540 <menu+0x118>
 8001532:	4b55      	ldr	r3, [pc, #340]	; (8001688 <menu+0x260>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d102      	bne.n	8001540 <menu+0x118>
			menuSayac = 16;
 800153a:	4b4e      	ldr	r3, [pc, #312]	; (8001674 <menu+0x24c>)
 800153c:	2210      	movs	r2, #16
 800153e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001540:	4b4c      	ldr	r3, [pc, #304]	; (8001674 <menu+0x24c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b18      	cmp	r3, #24
 8001546:	d106      	bne.n	8001556 <menu+0x12e>
 8001548:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <menu+0x250>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <menu+0x12e>
			menuSayac = 26;
 8001550:	4b48      	ldr	r3, [pc, #288]	; (8001674 <menu+0x24c>)
 8001552:	221a      	movs	r2, #26
 8001554:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001556:	f003 fbff 	bl	8004d58 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 800155a:	2108      	movs	r1, #8
 800155c:	484b      	ldr	r0, [pc, #300]	; (800168c <menu+0x264>)
 800155e:	f007 ffdd 	bl	800951c <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	2b01      	cmp	r3, #1
 8001566:	d175      	bne.n	8001654 <menu+0x22c>
 8001568:	4b41      	ldr	r3, [pc, #260]	; (8001670 <menu+0x248>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	f083 0301 	eor.w	r3, r3, #1
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d06e      	beq.n	8001654 <menu+0x22c>
		if (menuSayac <= 1) {
 8001576:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <menu+0x24c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d802      	bhi.n	8001584 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800157e:	4b3d      	ldr	r3, [pc, #244]	; (8001674 <menu+0x24c>)
 8001580:	2224      	movs	r2, #36	; 0x24
 8001582:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001584:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <menu+0x24c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	3b01      	subs	r3, #1
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b39      	ldr	r3, [pc, #228]	; (8001674 <menu+0x24c>)
 800158e:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001590:	4b38      	ldr	r3, [pc, #224]	; (8001674 <menu+0x24c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b14      	cmp	r3, #20
 8001596:	d106      	bne.n	80015a6 <menu+0x17e>
 8001598:	4b37      	ldr	r3, [pc, #220]	; (8001678 <menu+0x250>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <menu+0x17e>
			menuSayac = 17;
 80015a0:	4b34      	ldr	r3, [pc, #208]	; (8001674 <menu+0x24c>)
 80015a2:	2211      	movs	r2, #17
 80015a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80015a6:	4b33      	ldr	r3, [pc, #204]	; (8001674 <menu+0x24c>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b0f      	cmp	r3, #15
 80015ac:	d106      	bne.n	80015bc <menu+0x194>
 80015ae:	4b33      	ldr	r3, [pc, #204]	; (800167c <menu+0x254>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <menu+0x194>
			menuSayac = 7;
 80015b6:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <menu+0x24c>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80015bc:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <menu+0x24c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d106      	bne.n	80015d2 <menu+0x1aa>
 80015c4:	4b2d      	ldr	r3, [pc, #180]	; (800167c <menu+0x254>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d102      	bne.n	80015d2 <menu+0x1aa>
			menuSayac = 12;
 80015cc:	4b29      	ldr	r3, [pc, #164]	; (8001674 <menu+0x24c>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80015d2:	4b28      	ldr	r3, [pc, #160]	; (8001674 <menu+0x24c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	d106      	bne.n	80015e8 <menu+0x1c0>
 80015da:	4b28      	ldr	r3, [pc, #160]	; (800167c <menu+0x254>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d102      	bne.n	80015e8 <menu+0x1c0>
			menuSayac = 8;
 80015e2:	4b24      	ldr	r3, [pc, #144]	; (8001674 <menu+0x24c>)
 80015e4:	2208      	movs	r2, #8
 80015e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <menu+0x24c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b0a      	cmp	r3, #10
 80015ee:	d10a      	bne.n	8001606 <menu+0x1de>
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <menu+0x258>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d003      	beq.n	8001600 <menu+0x1d8>
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <menu+0x258>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d102      	bne.n	8001606 <menu+0x1de>
			menuSayac = 9;
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <menu+0x24c>)
 8001602:	2209      	movs	r2, #9
 8001604:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <menu+0x24c>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b0c      	cmp	r3, #12
 800160c:	d10a      	bne.n	8001624 <menu+0x1fc>
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <menu+0x25c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d003      	beq.n	800161e <menu+0x1f6>
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <menu+0x25c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d102      	bne.n	8001624 <menu+0x1fc>
			menuSayac = 11;
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <menu+0x24c>)
 8001620:	220b      	movs	r2, #11
 8001622:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <menu+0x24c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d106      	bne.n	800163a <menu+0x212>
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <menu+0x260>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d102      	bne.n	800163a <menu+0x212>
			menuSayac = 14;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <menu+0x24c>)
 8001636:	220e      	movs	r2, #14
 8001638:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <menu+0x24c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b19      	cmp	r3, #25
 8001640:	d106      	bne.n	8001650 <menu+0x228>
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <menu+0x250>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <menu+0x228>
			menuSayac = 23;
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <menu+0x24c>)
 800164c:	2217      	movs	r2, #23
 800164e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001650:	f003 fb82 	bl	8004d58 <bekle>
	}

	if (menuSayac == 0) {
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <menu+0x24c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d133      	bne.n	80016c4 <menu+0x29c>
		if(dilSecim == 0) {
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <menu+0x268>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d121      	bne.n	80016a8 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001664:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <menu+0x26c>)
 8001666:	2101      	movs	r1, #1
 8001668:	2001      	movs	r0, #1
 800166a:	e015      	b.n	8001698 <menu+0x270>
 800166c:	40010800 	.word	0x40010800
 8001670:	2000024f 	.word	0x2000024f
 8001674:	20000220 	.word	0x20000220
 8001678:	2000022f 	.word	0x2000022f
 800167c:	20000228 	.word	0x20000228
 8001680:	20000229 	.word	0x20000229
 8001684:	2000022a 	.word	0x2000022a
 8001688:	2000022b 	.word	0x2000022b
 800168c:	40011000 	.word	0x40011000
 8001690:	20000241 	.word	0x20000241
 8001694:	0800d318 	.word	0x0800d318
 8001698:	f006 fc1a 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 800169c:	4a94      	ldr	r2, [pc, #592]	; (80018f0 <menu+0x4c8>)
 800169e:	2101      	movs	r1, #1
 80016a0:	2002      	movs	r0, #2
 80016a2:	f006 fc15 	bl	8007ed0 <lcd_print>
 80016a6:	e00d      	b.n	80016c4 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80016a8:	4b92      	ldr	r3, [pc, #584]	; (80018f4 <menu+0x4cc>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d109      	bne.n	80016c4 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80016b0:	4a91      	ldr	r2, [pc, #580]	; (80018f8 <menu+0x4d0>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	2001      	movs	r0, #1
 80016b6:	f006 fc0b 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80016ba:	4a90      	ldr	r2, [pc, #576]	; (80018fc <menu+0x4d4>)
 80016bc:	2101      	movs	r1, #1
 80016be:	2002      	movs	r0, #2
 80016c0:	f006 fc06 	bl	8007ed0 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80016c4:	4b8e      	ldr	r3, [pc, #568]	; (8001900 <menu+0x4d8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 82b5 	bne.w	8001c38 <menu+0x810>
		if(dilSecim == 0) {
 80016ce:	4b89      	ldr	r3, [pc, #548]	; (80018f4 <menu+0x4cc>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d105      	bne.n	80016e2 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80016d6:	4a8b      	ldr	r2, [pc, #556]	; (8001904 <menu+0x4dc>)
 80016d8:	2101      	movs	r1, #1
 80016da:	2001      	movs	r0, #1
 80016dc:	f006 fbf8 	bl	8007ed0 <lcd_print>
 80016e0:	e008      	b.n	80016f4 <menu+0x2cc>
		} else if(dilSecim == 1) {
 80016e2:	4b84      	ldr	r3, [pc, #528]	; (80018f4 <menu+0x4cc>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d104      	bne.n	80016f4 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80016ea:	4a87      	ldr	r2, [pc, #540]	; (8001908 <menu+0x4e0>)
 80016ec:	2101      	movs	r1, #1
 80016ee:	2001      	movs	r0, #1
 80016f0:	f006 fbee 	bl	8007ed0 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80016f4:	4b85      	ldr	r3, [pc, #532]	; (800190c <menu+0x4e4>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d123      	bne.n	8001744 <menu+0x31c>
			if(dilSecim == 0) {
 80016fc:	4b7d      	ldr	r3, [pc, #500]	; (80018f4 <menu+0x4cc>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001704:	4a82      	ldr	r2, [pc, #520]	; (8001910 <menu+0x4e8>)
 8001706:	2101      	movs	r1, #1
 8001708:	2002      	movs	r0, #2
 800170a:	f006 fbe1 	bl	8007ed0 <lcd_print>
 800170e:	e008      	b.n	8001722 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001710:	4b78      	ldr	r3, [pc, #480]	; (80018f4 <menu+0x4cc>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d104      	bne.n	8001722 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001718:	4a7e      	ldr	r2, [pc, #504]	; (8001914 <menu+0x4ec>)
 800171a:	2101      	movs	r1, #1
 800171c:	2002      	movs	r0, #2
 800171e:	f006 fbd7 	bl	8007ed0 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001722:	4a7d      	ldr	r2, [pc, #500]	; (8001918 <menu+0x4f0>)
 8001724:	210f      	movs	r1, #15
 8001726:	2002      	movs	r0, #2
 8001728:	f006 fbd2 	bl	8007ed0 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800172c:	4b7b      	ldr	r3, [pc, #492]	; (800191c <menu+0x4f4>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	220a      	movs	r2, #10
 8001732:	497b      	ldr	r1, [pc, #492]	; (8001920 <menu+0x4f8>)
 8001734:	4618      	mov	r0, r3
 8001736:	f00a ff79 	bl	800c62c <itoa>
			lcd_print(2, 14, snum);
 800173a:	4a79      	ldr	r2, [pc, #484]	; (8001920 <menu+0x4f8>)
 800173c:	210e      	movs	r1, #14
 800173e:	2002      	movs	r0, #2
 8001740:	f006 fbc6 	bl	8007ed0 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001744:	4b71      	ldr	r3, [pc, #452]	; (800190c <menu+0x4e4>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d123      	bne.n	8001794 <menu+0x36c>
			if(dilSecim == 0) {
 800174c:	4b69      	ldr	r3, [pc, #420]	; (80018f4 <menu+0x4cc>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d105      	bne.n	8001760 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001754:	4a73      	ldr	r2, [pc, #460]	; (8001924 <menu+0x4fc>)
 8001756:	2101      	movs	r1, #1
 8001758:	2002      	movs	r0, #2
 800175a:	f006 fbb9 	bl	8007ed0 <lcd_print>
 800175e:	e008      	b.n	8001772 <menu+0x34a>
			} else if(dilSecim == 1) {
 8001760:	4b64      	ldr	r3, [pc, #400]	; (80018f4 <menu+0x4cc>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d104      	bne.n	8001772 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001768:	4a6f      	ldr	r2, [pc, #444]	; (8001928 <menu+0x500>)
 800176a:	2101      	movs	r1, #1
 800176c:	2002      	movs	r0, #2
 800176e:	f006 fbaf 	bl	8007ed0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001772:	4a6e      	ldr	r2, [pc, #440]	; (800192c <menu+0x504>)
 8001774:	210f      	movs	r1, #15
 8001776:	2002      	movs	r0, #2
 8001778:	f006 fbaa 	bl	8007ed0 <lcd_print>
			itoa(hataKayit2, snum, 10);
 800177c:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <menu+0x508>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	220a      	movs	r2, #10
 8001782:	4967      	ldr	r1, [pc, #412]	; (8001920 <menu+0x4f8>)
 8001784:	4618      	mov	r0, r3
 8001786:	f00a ff51 	bl	800c62c <itoa>
			lcd_print(2, 14, snum);
 800178a:	4a65      	ldr	r2, [pc, #404]	; (8001920 <menu+0x4f8>)
 800178c:	210e      	movs	r1, #14
 800178e:	2002      	movs	r0, #2
 8001790:	f006 fb9e 	bl	8007ed0 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001794:	4b5d      	ldr	r3, [pc, #372]	; (800190c <menu+0x4e4>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d123      	bne.n	80017e4 <menu+0x3bc>
			if(dilSecim == 0) {
 800179c:	4b55      	ldr	r3, [pc, #340]	; (80018f4 <menu+0x4cc>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d105      	bne.n	80017b0 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80017a4:	4a63      	ldr	r2, [pc, #396]	; (8001934 <menu+0x50c>)
 80017a6:	2101      	movs	r1, #1
 80017a8:	2002      	movs	r0, #2
 80017aa:	f006 fb91 	bl	8007ed0 <lcd_print>
 80017ae:	e008      	b.n	80017c2 <menu+0x39a>
			} else if(dilSecim == 1) {
 80017b0:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <menu+0x4cc>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d104      	bne.n	80017c2 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80017b8:	4a5f      	ldr	r2, [pc, #380]	; (8001938 <menu+0x510>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	2002      	movs	r0, #2
 80017be:	f006 fb87 	bl	8007ed0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017c2:	4a5a      	ldr	r2, [pc, #360]	; (800192c <menu+0x504>)
 80017c4:	210f      	movs	r1, #15
 80017c6:	2002      	movs	r0, #2
 80017c8:	f006 fb82 	bl	8007ed0 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80017cc:	4b5b      	ldr	r3, [pc, #364]	; (800193c <menu+0x514>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	220a      	movs	r2, #10
 80017d2:	4953      	ldr	r1, [pc, #332]	; (8001920 <menu+0x4f8>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00a ff29 	bl	800c62c <itoa>
			lcd_print(2, 14, snum);
 80017da:	4a51      	ldr	r2, [pc, #324]	; (8001920 <menu+0x4f8>)
 80017dc:	210e      	movs	r1, #14
 80017de:	2002      	movs	r0, #2
 80017e0:	f006 fb76 	bl	8007ed0 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80017e4:	4b49      	ldr	r3, [pc, #292]	; (800190c <menu+0x4e4>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d123      	bne.n	8001834 <menu+0x40c>
			if(dilSecim == 0) {
 80017ec:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <menu+0x4cc>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d105      	bne.n	8001800 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80017f4:	4a52      	ldr	r2, [pc, #328]	; (8001940 <menu+0x518>)
 80017f6:	2101      	movs	r1, #1
 80017f8:	2002      	movs	r0, #2
 80017fa:	f006 fb69 	bl	8007ed0 <lcd_print>
 80017fe:	e008      	b.n	8001812 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001800:	4b3c      	ldr	r3, [pc, #240]	; (80018f4 <menu+0x4cc>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d104      	bne.n	8001812 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001808:	4a4e      	ldr	r2, [pc, #312]	; (8001944 <menu+0x51c>)
 800180a:	2101      	movs	r1, #1
 800180c:	2002      	movs	r0, #2
 800180e:	f006 fb5f 	bl	8007ed0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001812:	4a46      	ldr	r2, [pc, #280]	; (800192c <menu+0x504>)
 8001814:	210f      	movs	r1, #15
 8001816:	2002      	movs	r0, #2
 8001818:	f006 fb5a 	bl	8007ed0 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800181c:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <menu+0x520>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	220a      	movs	r2, #10
 8001822:	493f      	ldr	r1, [pc, #252]	; (8001920 <menu+0x4f8>)
 8001824:	4618      	mov	r0, r3
 8001826:	f00a ff01 	bl	800c62c <itoa>
			lcd_print(2, 14, snum);
 800182a:	4a3d      	ldr	r2, [pc, #244]	; (8001920 <menu+0x4f8>)
 800182c:	210e      	movs	r1, #14
 800182e:	2002      	movs	r0, #2
 8001830:	f006 fb4e 	bl	8007ed0 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <menu+0x4e4>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d123      	bne.n	8001884 <menu+0x45c>
			if(dilSecim == 0) {
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <menu+0x4cc>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001844:	4a41      	ldr	r2, [pc, #260]	; (800194c <menu+0x524>)
 8001846:	2101      	movs	r1, #1
 8001848:	2002      	movs	r0, #2
 800184a:	f006 fb41 	bl	8007ed0 <lcd_print>
 800184e:	e008      	b.n	8001862 <menu+0x43a>
			} else if(dilSecim == 1) {
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <menu+0x4cc>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d104      	bne.n	8001862 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001858:	4a3d      	ldr	r2, [pc, #244]	; (8001950 <menu+0x528>)
 800185a:	2101      	movs	r1, #1
 800185c:	2002      	movs	r0, #2
 800185e:	f006 fb37 	bl	8007ed0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001862:	4a32      	ldr	r2, [pc, #200]	; (800192c <menu+0x504>)
 8001864:	210f      	movs	r1, #15
 8001866:	2002      	movs	r0, #2
 8001868:	f006 fb32 	bl	8007ed0 <lcd_print>
			itoa(hataKayit5, snum, 10);
 800186c:	4b39      	ldr	r3, [pc, #228]	; (8001954 <menu+0x52c>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	220a      	movs	r2, #10
 8001872:	492b      	ldr	r1, [pc, #172]	; (8001920 <menu+0x4f8>)
 8001874:	4618      	mov	r0, r3
 8001876:	f00a fed9 	bl	800c62c <itoa>
			lcd_print(2, 14, snum);
 800187a:	4a29      	ldr	r2, [pc, #164]	; (8001920 <menu+0x4f8>)
 800187c:	210e      	movs	r1, #14
 800187e:	2002      	movs	r0, #2
 8001880:	f006 fb26 	bl	8007ed0 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <menu+0x4e4>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d123      	bne.n	80018d4 <menu+0x4ac>
			if(dilSecim == 0) {
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <menu+0x4cc>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d105      	bne.n	80018a0 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001894:	4a30      	ldr	r2, [pc, #192]	; (8001958 <menu+0x530>)
 8001896:	2101      	movs	r1, #1
 8001898:	2002      	movs	r0, #2
 800189a:	f006 fb19 	bl	8007ed0 <lcd_print>
 800189e:	e008      	b.n	80018b2 <menu+0x48a>
			} else if(dilSecim == 1) {
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <menu+0x4cc>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d104      	bne.n	80018b2 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 80018a8:	4a2c      	ldr	r2, [pc, #176]	; (800195c <menu+0x534>)
 80018aa:	2101      	movs	r1, #1
 80018ac:	2002      	movs	r0, #2
 80018ae:	f006 fb0f 	bl	8007ed0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018b2:	4a1e      	ldr	r2, [pc, #120]	; (800192c <menu+0x504>)
 80018b4:	210f      	movs	r1, #15
 80018b6:	2002      	movs	r0, #2
 80018b8:	f006 fb0a 	bl	8007ed0 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <menu+0x538>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	220a      	movs	r2, #10
 80018c2:	4917      	ldr	r1, [pc, #92]	; (8001920 <menu+0x4f8>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f00a feb1 	bl	800c62c <itoa>
			lcd_print(2, 14, snum);
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <menu+0x4f8>)
 80018cc:	210e      	movs	r1, #14
 80018ce:	2002      	movs	r0, #2
 80018d0:	f006 fafe 	bl	8007ed0 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <menu+0x4e4>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b06      	cmp	r3, #6
 80018da:	d15f      	bne.n	800199c <menu+0x574>
			if(dilSecim == 0) {
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <menu+0x4cc>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d141      	bne.n	8001968 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80018e4:	4a1f      	ldr	r2, [pc, #124]	; (8001964 <menu+0x53c>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	2002      	movs	r0, #2
 80018ea:	f006 faf1 	bl	8007ed0 <lcd_print>
 80018ee:	e044      	b.n	800197a <menu+0x552>
 80018f0:	0800d32c 	.word	0x0800d32c
 80018f4:	20000241 	.word	0x20000241
 80018f8:	0800d340 	.word	0x0800d340
 80018fc:	0800d354 	.word	0x0800d354
 8001900:	20000220 	.word	0x20000220
 8001904:	0800d368 	.word	0x0800d368
 8001908:	0800d37c 	.word	0x0800d37c
 800190c:	20000222 	.word	0x20000222
 8001910:	0800d390 	.word	0x0800d390
 8001914:	0800d3a0 	.word	0x0800d3a0
 8001918:	0800d3b0 	.word	0x0800d3b0
 800191c:	20000242 	.word	0x20000242
 8001920:	20000188 	.word	0x20000188
 8001924:	0800d3b4 	.word	0x0800d3b4
 8001928:	0800d3c4 	.word	0x0800d3c4
 800192c:	0800d3d4 	.word	0x0800d3d4
 8001930:	20000243 	.word	0x20000243
 8001934:	0800d3d8 	.word	0x0800d3d8
 8001938:	0800d3e8 	.word	0x0800d3e8
 800193c:	20000244 	.word	0x20000244
 8001940:	0800d3f8 	.word	0x0800d3f8
 8001944:	0800d408 	.word	0x0800d408
 8001948:	20000245 	.word	0x20000245
 800194c:	0800d418 	.word	0x0800d418
 8001950:	0800d428 	.word	0x0800d428
 8001954:	20000246 	.word	0x20000246
 8001958:	0800d438 	.word	0x0800d438
 800195c:	0800d448 	.word	0x0800d448
 8001960:	20000247 	.word	0x20000247
 8001964:	0800d458 	.word	0x0800d458
			} else if(dilSecim == 1) {
 8001968:	4b4f      	ldr	r3, [pc, #316]	; (8001aa8 <menu+0x680>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d104      	bne.n	800197a <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001970:	4a4e      	ldr	r2, [pc, #312]	; (8001aac <menu+0x684>)
 8001972:	2101      	movs	r1, #1
 8001974:	2002      	movs	r0, #2
 8001976:	f006 faab 	bl	8007ed0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800197a:	4a4d      	ldr	r2, [pc, #308]	; (8001ab0 <menu+0x688>)
 800197c:	210f      	movs	r1, #15
 800197e:	2002      	movs	r0, #2
 8001980:	f006 faa6 	bl	8007ed0 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <menu+0x68c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	220a      	movs	r2, #10
 800198a:	494b      	ldr	r1, [pc, #300]	; (8001ab8 <menu+0x690>)
 800198c:	4618      	mov	r0, r3
 800198e:	f00a fe4d 	bl	800c62c <itoa>
			lcd_print(2, 14, snum);
 8001992:	4a49      	ldr	r2, [pc, #292]	; (8001ab8 <menu+0x690>)
 8001994:	210e      	movs	r1, #14
 8001996:	2002      	movs	r0, #2
 8001998:	f006 fa9a 	bl	8007ed0 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800199c:	4b47      	ldr	r3, [pc, #284]	; (8001abc <menu+0x694>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b07      	cmp	r3, #7
 80019a2:	d123      	bne.n	80019ec <menu+0x5c4>
			if(dilSecim == 0) {
 80019a4:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <menu+0x680>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d105      	bne.n	80019b8 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80019ac:	4a44      	ldr	r2, [pc, #272]	; (8001ac0 <menu+0x698>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	2002      	movs	r0, #2
 80019b2:	f006 fa8d 	bl	8007ed0 <lcd_print>
 80019b6:	e008      	b.n	80019ca <menu+0x5a2>
			} else if(dilSecim == 1) {
 80019b8:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <menu+0x680>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d104      	bne.n	80019ca <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 80019c0:	4a40      	ldr	r2, [pc, #256]	; (8001ac4 <menu+0x69c>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	2002      	movs	r0, #2
 80019c6:	f006 fa83 	bl	8007ed0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019ca:	4a39      	ldr	r2, [pc, #228]	; (8001ab0 <menu+0x688>)
 80019cc:	210f      	movs	r1, #15
 80019ce:	2002      	movs	r0, #2
 80019d0:	f006 fa7e 	bl	8007ed0 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80019d4:	4b3c      	ldr	r3, [pc, #240]	; (8001ac8 <menu+0x6a0>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	220a      	movs	r2, #10
 80019da:	4937      	ldr	r1, [pc, #220]	; (8001ab8 <menu+0x690>)
 80019dc:	4618      	mov	r0, r3
 80019de:	f00a fe25 	bl	800c62c <itoa>
			lcd_print(2, 14, snum);
 80019e2:	4a35      	ldr	r2, [pc, #212]	; (8001ab8 <menu+0x690>)
 80019e4:	210e      	movs	r1, #14
 80019e6:	2002      	movs	r0, #2
 80019e8:	f006 fa72 	bl	8007ed0 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80019ec:	4b33      	ldr	r3, [pc, #204]	; (8001abc <menu+0x694>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d123      	bne.n	8001a3c <menu+0x614>
			if(dilSecim == 0) {
 80019f4:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <menu+0x680>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 80019fc:	4a33      	ldr	r2, [pc, #204]	; (8001acc <menu+0x6a4>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	2002      	movs	r0, #2
 8001a02:	f006 fa65 	bl	8007ed0 <lcd_print>
 8001a06:	e008      	b.n	8001a1a <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <menu+0x680>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d104      	bne.n	8001a1a <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001a10:	4a2f      	ldr	r2, [pc, #188]	; (8001ad0 <menu+0x6a8>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	2002      	movs	r0, #2
 8001a16:	f006 fa5b 	bl	8007ed0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a1a:	4a25      	ldr	r2, [pc, #148]	; (8001ab0 <menu+0x688>)
 8001a1c:	210f      	movs	r1, #15
 8001a1e:	2002      	movs	r0, #2
 8001a20:	f006 fa56 	bl	8007ed0 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001a24:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <menu+0x6ac>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	220a      	movs	r2, #10
 8001a2a:	4923      	ldr	r1, [pc, #140]	; (8001ab8 <menu+0x690>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f00a fdfd 	bl	800c62c <itoa>
			lcd_print(2, 14, snum);
 8001a32:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <menu+0x690>)
 8001a34:	210e      	movs	r1, #14
 8001a36:	2002      	movs	r0, #2
 8001a38:	f006 fa4a 	bl	8007ed0 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <menu+0x694>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b09      	cmp	r3, #9
 8001a42:	d123      	bne.n	8001a8c <menu+0x664>
			if(dilSecim == 0) {
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <menu+0x680>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d105      	bne.n	8001a58 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001a4c:	4a22      	ldr	r2, [pc, #136]	; (8001ad8 <menu+0x6b0>)
 8001a4e:	2101      	movs	r1, #1
 8001a50:	2002      	movs	r0, #2
 8001a52:	f006 fa3d 	bl	8007ed0 <lcd_print>
 8001a56:	e008      	b.n	8001a6a <menu+0x642>
			} else if(dilSecim == 1) {
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <menu+0x680>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d104      	bne.n	8001a6a <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001a60:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <menu+0x6b4>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	2002      	movs	r0, #2
 8001a66:	f006 fa33 	bl	8007ed0 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001a6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ae0 <menu+0x6b8>)
 8001a6c:	2110      	movs	r1, #16
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f006 fa2e 	bl	8007ed0 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <menu+0x6bc>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	220a      	movs	r2, #10
 8001a7a:	490f      	ldr	r1, [pc, #60]	; (8001ab8 <menu+0x690>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00a fdd5 	bl	800c62c <itoa>
			lcd_print(2, 15, snum);
 8001a82:	4a0d      	ldr	r2, [pc, #52]	; (8001ab8 <menu+0x690>)
 8001a84:	210f      	movs	r1, #15
 8001a86:	2002      	movs	r0, #2
 8001a88:	f006 fa22 	bl	8007ed0 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <menu+0x694>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b0a      	cmp	r3, #10
 8001a92:	d134      	bne.n	8001afe <menu+0x6d6>
			if(dilSecim == 0) {
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <menu+0x680>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d127      	bne.n	8001aec <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001a9c:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <menu+0x6c0>)
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f006 fa15 	bl	8007ed0 <lcd_print>
 8001aa6:	e02a      	b.n	8001afe <menu+0x6d6>
 8001aa8:	20000241 	.word	0x20000241
 8001aac:	0800d468 	.word	0x0800d468
 8001ab0:	0800d3d4 	.word	0x0800d3d4
 8001ab4:	20000248 	.word	0x20000248
 8001ab8:	20000188 	.word	0x20000188
 8001abc:	20000222 	.word	0x20000222
 8001ac0:	0800d478 	.word	0x0800d478
 8001ac4:	0800d488 	.word	0x0800d488
 8001ac8:	20000249 	.word	0x20000249
 8001acc:	0800d498 	.word	0x0800d498
 8001ad0:	0800d4a8 	.word	0x0800d4a8
 8001ad4:	2000024a 	.word	0x2000024a
 8001ad8:	0800d4b8 	.word	0x0800d4b8
 8001adc:	0800d4c8 	.word	0x0800d4c8
 8001ae0:	0800d4d8 	.word	0x0800d4d8
 8001ae4:	2000024b 	.word	0x2000024b
 8001ae8:	0800d4dc 	.word	0x0800d4dc
			} else if(dilSecim == 1) {
 8001aec:	4b82      	ldr	r3, [pc, #520]	; (8001cf8 <menu+0x8d0>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d104      	bne.n	8001afe <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001af4:	4a81      	ldr	r2, [pc, #516]	; (8001cfc <menu+0x8d4>)
 8001af6:	2101      	movs	r1, #1
 8001af8:	2002      	movs	r0, #2
 8001afa:	f006 f9e9 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001afe:	2102      	movs	r1, #2
 8001b00:	487f      	ldr	r0, [pc, #508]	; (8001d00 <menu+0x8d8>)
 8001b02:	f007 fd0b 	bl	800951c <HAL_GPIO_ReadPin>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d119      	bne.n	8001b40 <menu+0x718>
 8001b0c:	4b7d      	ldr	r3, [pc, #500]	; (8001d04 <menu+0x8dc>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	f083 0301 	eor.w	r3, r3, #1
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d012      	beq.n	8001b40 <menu+0x718>
 8001b1a:	4b7b      	ldr	r3, [pc, #492]	; (8001d08 <menu+0x8e0>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10e      	bne.n	8001b40 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001b22:	4b7a      	ldr	r3, [pc, #488]	; (8001d0c <menu+0x8e4>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b78      	ldr	r3, [pc, #480]	; (8001d0c <menu+0x8e4>)
 8001b2c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001b2e:	4b77      	ldr	r3, [pc, #476]	; (8001d0c <menu+0x8e4>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b0a      	cmp	r3, #10
 8001b34:	d902      	bls.n	8001b3c <menu+0x714>
				hataGostermeSirasi = 0;
 8001b36:	4b75      	ldr	r3, [pc, #468]	; (8001d0c <menu+0x8e4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b3c:	f003 f90c 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b40:	2104      	movs	r1, #4
 8001b42:	486f      	ldr	r0, [pc, #444]	; (8001d00 <menu+0x8d8>)
 8001b44:	f007 fcea 	bl	800951c <HAL_GPIO_ReadPin>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d119      	bne.n	8001b82 <menu+0x75a>
 8001b4e:	4b6d      	ldr	r3, [pc, #436]	; (8001d04 <menu+0x8dc>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	f083 0301 	eor.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d012      	beq.n	8001b82 <menu+0x75a>
 8001b5c:	4b6a      	ldr	r3, [pc, #424]	; (8001d08 <menu+0x8e0>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10e      	bne.n	8001b82 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001b64:	4b69      	ldr	r3, [pc, #420]	; (8001d0c <menu+0x8e4>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	4b67      	ldr	r3, [pc, #412]	; (8001d0c <menu+0x8e4>)
 8001b6e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001b70:	4b66      	ldr	r3, [pc, #408]	; (8001d0c <menu+0x8e4>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b0b      	cmp	r3, #11
 8001b76:	d902      	bls.n	8001b7e <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001b78:	4b64      	ldr	r3, [pc, #400]	; (8001d0c <menu+0x8e4>)
 8001b7a:	220a      	movs	r2, #10
 8001b7c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b7e:	f003 f8eb 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001b82:	2108      	movs	r1, #8
 8001b84:	485e      	ldr	r0, [pc, #376]	; (8001d00 <menu+0x8d8>)
 8001b86:	f007 fcc9 	bl	800951c <HAL_GPIO_ReadPin>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d153      	bne.n	8001c38 <menu+0x810>
 8001b90:	4b5c      	ldr	r3, [pc, #368]	; (8001d04 <menu+0x8dc>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	f083 0301 	eor.w	r3, r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d04c      	beq.n	8001c38 <menu+0x810>
 8001b9e:	4b5b      	ldr	r3, [pc, #364]	; (8001d0c <menu+0x8e4>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b0a      	cmp	r3, #10
 8001ba4:	d148      	bne.n	8001c38 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001ba6:	4b5a      	ldr	r3, [pc, #360]	; (8001d10 <menu+0x8e8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
 8001bac:	4b59      	ldr	r3, [pc, #356]	; (8001d14 <menu+0x8ec>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001bb4:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <menu+0x8f0>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
 8001bba:	4b56      	ldr	r3, [pc, #344]	; (8001d14 <menu+0x8ec>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001bc2:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <menu+0x8f4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	4b52      	ldr	r3, [pc, #328]	; (8001d14 <menu+0x8ec>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001bd0:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <menu+0x8f8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	4b4f      	ldr	r3, [pc, #316]	; (8001d14 <menu+0x8ec>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001bde:	4b51      	ldr	r3, [pc, #324]	; (8001d24 <menu+0x8fc>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
 8001be4:	4b4b      	ldr	r3, [pc, #300]	; (8001d14 <menu+0x8ec>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001bec:	4b4e      	ldr	r3, [pc, #312]	; (8001d28 <menu+0x900>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	4b48      	ldr	r3, [pc, #288]	; (8001d14 <menu+0x8ec>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001bfa:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <menu+0x904>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <menu+0x8ec>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001c08:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <menu+0x908>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
 8001c0e:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <menu+0x8ec>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001c16:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <menu+0x90c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
 8001c1c:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <menu+0x8ec>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001c24:	4b44      	ldr	r3, [pc, #272]	; (8001d38 <menu+0x910>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <menu+0x8ec>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001c32:	4b42      	ldr	r3, [pc, #264]	; (8001d3c <menu+0x914>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001c38:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <menu+0x918>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	f040 80fc 	bne.w	8001e3a <menu+0xa12>
		if(dilSecim == 0) {
 8001c42:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <menu+0x8d0>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001c4a:	4a3e      	ldr	r2, [pc, #248]	; (8001d44 <menu+0x91c>)
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f006 f93e 	bl	8007ed0 <lcd_print>
 8001c54:	e008      	b.n	8001c68 <menu+0x840>
		} else if(dilSecim == 1) {
 8001c56:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <menu+0x8d0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d104      	bne.n	8001c68 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001c5e:	4a3a      	ldr	r2, [pc, #232]	; (8001d48 <menu+0x920>)
 8001c60:	2101      	movs	r1, #1
 8001c62:	2001      	movs	r0, #1
 8001c64:	f006 f934 	bl	8007ed0 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <menu+0x8e0>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d003      	beq.n	8001c78 <menu+0x850>
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <menu+0x8e0>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d112      	bne.n	8001c9e <menu+0x876>
			if(dilSecim == 0) {
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <menu+0x8d0>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001c80:	4a32      	ldr	r2, [pc, #200]	; (8001d4c <menu+0x924>)
 8001c82:	2101      	movs	r1, #1
 8001c84:	2002      	movs	r0, #2
 8001c86:	f006 f923 	bl	8007ed0 <lcd_print>
 8001c8a:	e008      	b.n	8001c9e <menu+0x876>
			} else if(dilSecim == 1) {
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <menu+0x8d0>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d104      	bne.n	8001c9e <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001c94:	4a2e      	ldr	r2, [pc, #184]	; (8001d50 <menu+0x928>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f006 f919 	bl	8007ed0 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <menu+0x92c>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d116      	bne.n	8001cd4 <menu+0x8ac>
 8001ca6:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <menu+0x8e0>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d112      	bne.n	8001cd4 <menu+0x8ac>
			if(dilSecim == 0) {
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <menu+0x8d0>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d105      	bne.n	8001cc2 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001cb6:	4a28      	ldr	r2, [pc, #160]	; (8001d58 <menu+0x930>)
 8001cb8:	2101      	movs	r1, #1
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f006 f908 	bl	8007ed0 <lcd_print>
 8001cc0:	e008      	b.n	8001cd4 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <menu+0x8d0>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d104      	bne.n	8001cd4 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001cca:	4a24      	ldr	r2, [pc, #144]	; (8001d5c <menu+0x934>)
 8001ccc:	2101      	movs	r1, #1
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f006 f8fe 	bl	8007ed0 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <menu+0x92c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d14c      	bne.n	8001d76 <menu+0x94e>
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <menu+0x8e0>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d148      	bne.n	8001d76 <menu+0x94e>
			if(dilSecim == 0) {
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <menu+0x8d0>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d13b      	bne.n	8001d64 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001cec:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <menu+0x938>)
 8001cee:	2101      	movs	r1, #1
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	f006 f8ed 	bl	8007ed0 <lcd_print>
 8001cf6:	e03e      	b.n	8001d76 <menu+0x94e>
 8001cf8:	20000241 	.word	0x20000241
 8001cfc:	0800d4f0 	.word	0x0800d4f0
 8001d00:	40010800 	.word	0x40010800
 8001d04:	2000024f 	.word	0x2000024f
 8001d08:	2000022f 	.word	0x2000022f
 8001d0c:	20000222 	.word	0x20000222
 8001d10:	20000242 	.word	0x20000242
 8001d14:	20000118 	.word	0x20000118
 8001d18:	20000243 	.word	0x20000243
 8001d1c:	20000244 	.word	0x20000244
 8001d20:	20000245 	.word	0x20000245
 8001d24:	20000246 	.word	0x20000246
 8001d28:	20000247 	.word	0x20000247
 8001d2c:	20000248 	.word	0x20000248
 8001d30:	20000249 	.word	0x20000249
 8001d34:	2000024a 	.word	0x2000024a
 8001d38:	2000024b 	.word	0x2000024b
 8001d3c:	2000024c 	.word	0x2000024c
 8001d40:	20000220 	.word	0x20000220
 8001d44:	0800d504 	.word	0x0800d504
 8001d48:	0800d518 	.word	0x0800d518
 8001d4c:	0800d52c 	.word	0x0800d52c
 8001d50:	0800d540 	.word	0x0800d540
 8001d54:	20000221 	.word	0x20000221
 8001d58:	0800d554 	.word	0x0800d554
 8001d5c:	0800d564 	.word	0x0800d564
 8001d60:	0800d574 	.word	0x0800d574
			} else if(dilSecim == 1) {
 8001d64:	4b98      	ldr	r3, [pc, #608]	; (8001fc8 <menu+0xba0>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d104      	bne.n	8001d76 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001d6c:	4a97      	ldr	r2, [pc, #604]	; (8001fcc <menu+0xba4>)
 8001d6e:	2101      	movs	r1, #1
 8001d70:	2002      	movs	r0, #2
 8001d72:	f006 f8ad 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d76:	2102      	movs	r1, #2
 8001d78:	4895      	ldr	r0, [pc, #596]	; (8001fd0 <menu+0xba8>)
 8001d7a:	f007 fbcf 	bl	800951c <HAL_GPIO_ReadPin>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d119      	bne.n	8001db8 <menu+0x990>
 8001d84:	4b93      	ldr	r3, [pc, #588]	; (8001fd4 <menu+0xbac>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	f083 0301 	eor.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d012      	beq.n	8001db8 <menu+0x990>
 8001d92:	4b91      	ldr	r3, [pc, #580]	; (8001fd8 <menu+0xbb0>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10e      	bne.n	8001db8 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001d9a:	4b90      	ldr	r3, [pc, #576]	; (8001fdc <menu+0xbb4>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4b8e      	ldr	r3, [pc, #568]	; (8001fdc <menu+0xbb4>)
 8001da4:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001da6:	4b8d      	ldr	r3, [pc, #564]	; (8001fdc <menu+0xbb4>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d902      	bls.n	8001db4 <menu+0x98c>
				calismaSekli = 0;
 8001dae:	4b8b      	ldr	r3, [pc, #556]	; (8001fdc <menu+0xbb4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001db4:	f002 ffd0 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001db8:	2104      	movs	r1, #4
 8001dba:	4885      	ldr	r0, [pc, #532]	; (8001fd0 <menu+0xba8>)
 8001dbc:	f007 fbae 	bl	800951c <HAL_GPIO_ReadPin>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d119      	bne.n	8001dfa <menu+0x9d2>
 8001dc6:	4b83      	ldr	r3, [pc, #524]	; (8001fd4 <menu+0xbac>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	f083 0301 	eor.w	r3, r3, #1
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d012      	beq.n	8001dfa <menu+0x9d2>
 8001dd4:	4b80      	ldr	r3, [pc, #512]	; (8001fd8 <menu+0xbb0>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10e      	bne.n	8001dfa <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001ddc:	4b7f      	ldr	r3, [pc, #508]	; (8001fdc <menu+0xbb4>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4b7d      	ldr	r3, [pc, #500]	; (8001fdc <menu+0xbb4>)
 8001de6:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001de8:	4b7c      	ldr	r3, [pc, #496]	; (8001fdc <menu+0xbb4>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <menu+0x9ce>
	    		calismaSekli = 1;
 8001df0:	4b7a      	ldr	r3, [pc, #488]	; (8001fdc <menu+0xbb4>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001df6:	f002 ffaf 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dfa:	2108      	movs	r1, #8
 8001dfc:	4874      	ldr	r0, [pc, #464]	; (8001fd0 <menu+0xba8>)
 8001dfe:	f007 fb8d 	bl	800951c <HAL_GPIO_ReadPin>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d118      	bne.n	8001e3a <menu+0xa12>
 8001e08:	4b72      	ldr	r3, [pc, #456]	; (8001fd4 <menu+0xbac>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	f083 0301 	eor.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d011      	beq.n	8001e3a <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001e16:	4b71      	ldr	r3, [pc, #452]	; (8001fdc <menu+0xbb4>)
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	4b71      	ldr	r3, [pc, #452]	; (8001fe0 <menu+0xbb8>)
 8001e1c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001e1e:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <menu+0xbb4>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d106      	bne.n	8001e34 <menu+0xa0c>
				altLimit = 1;
 8001e26:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <menu+0xbbc>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001e2c:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <menu+0xbbc>)
 8001e2e:	781a      	ldrb	r2, [r3, #0]
 8001e30:	4b6b      	ldr	r3, [pc, #428]	; (8001fe0 <menu+0xbb8>)
 8001e32:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001e34:	4b6c      	ldr	r3, [pc, #432]	; (8001fe8 <menu+0xbc0>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001e3a:	4b6c      	ldr	r3, [pc, #432]	; (8001fec <menu+0xbc4>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	f040 8083 	bne.w	8001f4a <menu+0xb22>
		if(dilSecim == 0) {
 8001e44:	4b60      	ldr	r3, [pc, #384]	; (8001fc8 <menu+0xba0>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001e4c:	4a68      	ldr	r2, [pc, #416]	; (8001ff0 <menu+0xbc8>)
 8001e4e:	2101      	movs	r1, #1
 8001e50:	2001      	movs	r0, #1
 8001e52:	f006 f83d 	bl	8007ed0 <lcd_print>
 8001e56:	e008      	b.n	8001e6a <menu+0xa42>
		} else if(dilSecim == 1) {
 8001e58:	4b5b      	ldr	r3, [pc, #364]	; (8001fc8 <menu+0xba0>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d104      	bne.n	8001e6a <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001e60:	4a64      	ldr	r2, [pc, #400]	; (8001ff4 <menu+0xbcc>)
 8001e62:	2101      	movs	r1, #1
 8001e64:	2001      	movs	r0, #1
 8001e66:	f006 f833 	bl	8007ed0 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001e6a:	4b63      	ldr	r3, [pc, #396]	; (8001ff8 <menu+0xbd0>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d113      	bne.n	8001e9a <menu+0xa72>
			if(dilSecim == 0) {
 8001e72:	4b55      	ldr	r3, [pc, #340]	; (8001fc8 <menu+0xba0>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d105      	bne.n	8001e86 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001e7a:	4a60      	ldr	r2, [pc, #384]	; (8001ffc <menu+0xbd4>)
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f006 f826 	bl	8007ed0 <lcd_print>
 8001e84:	e012      	b.n	8001eac <menu+0xa84>
			} else if(dilSecim == 1) {
 8001e86:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <menu+0xba0>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d10e      	bne.n	8001eac <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001e8e:	4a5c      	ldr	r2, [pc, #368]	; (8002000 <menu+0xbd8>)
 8001e90:	2101      	movs	r1, #1
 8001e92:	2002      	movs	r0, #2
 8001e94:	f006 f81c 	bl	8007ed0 <lcd_print>
 8001e98:	e008      	b.n	8001eac <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001e9a:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <menu+0xbd0>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d104      	bne.n	8001eac <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001ea2:	4a58      	ldr	r2, [pc, #352]	; (8002004 <menu+0xbdc>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	2002      	movs	r0, #2
 8001ea8:	f006 f812 	bl	8007ed0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eac:	2102      	movs	r1, #2
 8001eae:	4848      	ldr	r0, [pc, #288]	; (8001fd0 <menu+0xba8>)
 8001eb0:	f007 fb34 	bl	800951c <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d115      	bne.n	8001ee6 <menu+0xabe>
 8001eba:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <menu+0xbac>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	f083 0301 	eor.w	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00e      	beq.n	8001ee6 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001ec8:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <menu+0xbd0>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	4b49      	ldr	r3, [pc, #292]	; (8001ff8 <menu+0xbd0>)
 8001ed2:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001ed4:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <menu+0xbd0>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d902      	bls.n	8001ee2 <menu+0xaba>
				emniyetCercevesi = 0;
 8001edc:	4b46      	ldr	r3, [pc, #280]	; (8001ff8 <menu+0xbd0>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ee2:	f002 ff39 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	4839      	ldr	r0, [pc, #228]	; (8001fd0 <menu+0xba8>)
 8001eea:	f007 fb17 	bl	800951c <HAL_GPIO_ReadPin>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d115      	bne.n	8001f20 <menu+0xaf8>
 8001ef4:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <menu+0xbac>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	f083 0301 	eor.w	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00e      	beq.n	8001f20 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <menu+0xbd0>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <menu+0xbd0>)
 8001f0c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001f0e:	4b3a      	ldr	r3, [pc, #232]	; (8001ff8 <menu+0xbd0>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001f16:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <menu+0xbd0>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f1c:	f002 ff1c 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001f20:	2108      	movs	r1, #8
 8001f22:	482b      	ldr	r0, [pc, #172]	; (8001fd0 <menu+0xba8>)
 8001f24:	f007 fafa 	bl	800951c <HAL_GPIO_ReadPin>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d10d      	bne.n	8001f4a <menu+0xb22>
 8001f2e:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <menu+0xbac>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	f083 0301 	eor.w	r3, r3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <menu+0xbd0>)
 8001f3e:	781a      	ldrb	r2, [r3, #0]
 8001f40:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <menu+0xbb8>)
 8001f42:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001f44:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <menu+0xbc0>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001f4a:	4b28      	ldr	r3, [pc, #160]	; (8001fec <menu+0xbc4>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	f040 80ba 	bne.w	80020c8 <menu+0xca0>
		if(dilSecim == 0) {
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <menu+0xba0>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001f5c:	4a2a      	ldr	r2, [pc, #168]	; (8002008 <menu+0xbe0>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	2001      	movs	r0, #1
 8001f62:	f005 ffb5 	bl	8007ed0 <lcd_print>
 8001f66:	e008      	b.n	8001f7a <menu+0xb52>
		} else if(dilSecim == 1) {
 8001f68:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <menu+0xba0>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d104      	bne.n	8001f7a <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001f70:	4a26      	ldr	r2, [pc, #152]	; (800200c <menu+0xbe4>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	2001      	movs	r0, #1
 8001f76:	f005 ffab 	bl	8007ed0 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <menu+0xbe8>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d113      	bne.n	8001faa <menu+0xb82>
			if(dilSecim == 0) {
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <menu+0xba0>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d105      	bne.n	8001f96 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001f8a:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <menu+0xbd4>)
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	2002      	movs	r0, #2
 8001f90:	f005 ff9e 	bl	8007ed0 <lcd_print>
 8001f94:	e049      	b.n	800202a <menu+0xc02>
			} else if(dilSecim == 1) {
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <menu+0xba0>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d145      	bne.n	800202a <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001f9e:	4a18      	ldr	r2, [pc, #96]	; (8002000 <menu+0xbd8>)
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	f005 ff94 	bl	8007ed0 <lcd_print>
 8001fa8:	e03f      	b.n	800202a <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <menu+0xbe8>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d13b      	bne.n	800202a <menu+0xc02>
			if(dilSecim == 0) {
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <menu+0xba0>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d12e      	bne.n	8002018 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001fba:	4a16      	ldr	r2, [pc, #88]	; (8002014 <menu+0xbec>)
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	2002      	movs	r0, #2
 8001fc0:	f005 ff86 	bl	8007ed0 <lcd_print>
 8001fc4:	e031      	b.n	800202a <menu+0xc02>
 8001fc6:	bf00      	nop
 8001fc8:	20000241 	.word	0x20000241
 8001fcc:	0800d584 	.word	0x0800d584
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	2000024f 	.word	0x2000024f
 8001fd8:	2000022f 	.word	0x2000022f
 8001fdc:	20000221 	.word	0x20000221
 8001fe0:	20000118 	.word	0x20000118
 8001fe4:	20000226 	.word	0x20000226
 8001fe8:	2000024c 	.word	0x2000024c
 8001fec:	20000220 	.word	0x20000220
 8001ff0:	0800d594 	.word	0x0800d594
 8001ff4:	0800d5a8 	.word	0x0800d5a8
 8001ff8:	20000224 	.word	0x20000224
 8001ffc:	0800d5bc 	.word	0x0800d5bc
 8002000:	0800d5d0 	.word	0x0800d5d0
 8002004:	0800d5e4 	.word	0x0800d5e4
 8002008:	0800d5f4 	.word	0x0800d5f4
 800200c:	0800d608 	.word	0x0800d608
 8002010:	20000225 	.word	0x20000225
 8002014:	0800d61c 	.word	0x0800d61c
			} else if(dilSecim == 1) {
 8002018:	4b92      	ldr	r3, [pc, #584]	; (8002264 <menu+0xe3c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d104      	bne.n	800202a <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8002020:	4a91      	ldr	r2, [pc, #580]	; (8002268 <menu+0xe40>)
 8002022:	2101      	movs	r1, #1
 8002024:	2002      	movs	r0, #2
 8002026:	f005 ff53 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800202a:	2102      	movs	r1, #2
 800202c:	488f      	ldr	r0, [pc, #572]	; (800226c <menu+0xe44>)
 800202e:	f007 fa75 	bl	800951c <HAL_GPIO_ReadPin>
 8002032:	4603      	mov	r3, r0
 8002034:	2b01      	cmp	r3, #1
 8002036:	d115      	bne.n	8002064 <menu+0xc3c>
 8002038:	4b8d      	ldr	r3, [pc, #564]	; (8002270 <menu+0xe48>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	f083 0301 	eor.w	r3, r3, #1
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00e      	beq.n	8002064 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002046:	4b8b      	ldr	r3, [pc, #556]	; (8002274 <menu+0xe4c>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	3301      	adds	r3, #1
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b89      	ldr	r3, [pc, #548]	; (8002274 <menu+0xe4c>)
 8002050:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8002052:	4b88      	ldr	r3, [pc, #544]	; (8002274 <menu+0xe4c>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d902      	bls.n	8002060 <menu+0xc38>
				yavaslamaLimit = 0;
 800205a:	4b86      	ldr	r3, [pc, #536]	; (8002274 <menu+0xe4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002060:	f002 fe7a 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002064:	2104      	movs	r1, #4
 8002066:	4881      	ldr	r0, [pc, #516]	; (800226c <menu+0xe44>)
 8002068:	f007 fa58 	bl	800951c <HAL_GPIO_ReadPin>
 800206c:	4603      	mov	r3, r0
 800206e:	2b01      	cmp	r3, #1
 8002070:	d115      	bne.n	800209e <menu+0xc76>
 8002072:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <menu+0xe48>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	f083 0301 	eor.w	r3, r3, #1
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00e      	beq.n	800209e <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002080:	4b7c      	ldr	r3, [pc, #496]	; (8002274 <menu+0xe4c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	3b01      	subs	r3, #1
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b7a      	ldr	r3, [pc, #488]	; (8002274 <menu+0xe4c>)
 800208a:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800208c:	4b79      	ldr	r3, [pc, #484]	; (8002274 <menu+0xe4c>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <menu+0xc72>
		   		yavaslamaLimit = 1;
 8002094:	4b77      	ldr	r3, [pc, #476]	; (8002274 <menu+0xe4c>)
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800209a:	f002 fe5d 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800209e:	2108      	movs	r1, #8
 80020a0:	4872      	ldr	r0, [pc, #456]	; (800226c <menu+0xe44>)
 80020a2:	f007 fa3b 	bl	800951c <HAL_GPIO_ReadPin>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d10d      	bne.n	80020c8 <menu+0xca0>
 80020ac:	4b70      	ldr	r3, [pc, #448]	; (8002270 <menu+0xe48>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	f083 0301 	eor.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 80020ba:	4b6e      	ldr	r3, [pc, #440]	; (8002274 <menu+0xe4c>)
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	4b6e      	ldr	r3, [pc, #440]	; (8002278 <menu+0xe50>)
 80020c0:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80020c2:	4b6e      	ldr	r3, [pc, #440]	; (800227c <menu+0xe54>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80020c8:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <menu+0xe58>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	f040 80b9 	bne.w	8002244 <menu+0xe1c>
		if(dilSecim == 0) {
 80020d2:	4b64      	ldr	r3, [pc, #400]	; (8002264 <menu+0xe3c>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d105      	bne.n	80020e6 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 80020da:	4a6a      	ldr	r2, [pc, #424]	; (8002284 <menu+0xe5c>)
 80020dc:	2101      	movs	r1, #1
 80020de:	2001      	movs	r0, #1
 80020e0:	f005 fef6 	bl	8007ed0 <lcd_print>
 80020e4:	e008      	b.n	80020f8 <menu+0xcd0>
		} else if(dilSecim == 1) {
 80020e6:	4b5f      	ldr	r3, [pc, #380]	; (8002264 <menu+0xe3c>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d104      	bne.n	80020f8 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80020ee:	4a66      	ldr	r2, [pc, #408]	; (8002288 <menu+0xe60>)
 80020f0:	2101      	movs	r1, #1
 80020f2:	2001      	movs	r0, #1
 80020f4:	f005 feec 	bl	8007ed0 <lcd_print>
		}

		if(altLimit == 0) {
 80020f8:	4b64      	ldr	r3, [pc, #400]	; (800228c <menu+0xe64>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d113      	bne.n	8002128 <menu+0xd00>
			if(dilSecim == 0) {
 8002100:	4b58      	ldr	r3, [pc, #352]	; (8002264 <menu+0xe3c>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d105      	bne.n	8002114 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002108:	4a61      	ldr	r2, [pc, #388]	; (8002290 <menu+0xe68>)
 800210a:	2101      	movs	r1, #1
 800210c:	2002      	movs	r0, #2
 800210e:	f005 fedf 	bl	8007ed0 <lcd_print>
 8002112:	e020      	b.n	8002156 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8002114:	4b53      	ldr	r3, [pc, #332]	; (8002264 <menu+0xe3c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d11c      	bne.n	8002156 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 800211c:	4a5d      	ldr	r2, [pc, #372]	; (8002294 <menu+0xe6c>)
 800211e:	2101      	movs	r1, #1
 8002120:	2002      	movs	r0, #2
 8002122:	f005 fed5 	bl	8007ed0 <lcd_print>
 8002126:	e016      	b.n	8002156 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8002128:	4b58      	ldr	r3, [pc, #352]	; (800228c <menu+0xe64>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d112      	bne.n	8002156 <menu+0xd2e>
			if(dilSecim == 0){
 8002130:	4b4c      	ldr	r3, [pc, #304]	; (8002264 <menu+0xe3c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d105      	bne.n	8002144 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002138:	4a57      	ldr	r2, [pc, #348]	; (8002298 <menu+0xe70>)
 800213a:	2101      	movs	r1, #1
 800213c:	2002      	movs	r0, #2
 800213e:	f005 fec7 	bl	8007ed0 <lcd_print>
 8002142:	e008      	b.n	8002156 <menu+0xd2e>
			} else if(dilSecim == 1){
 8002144:	4b47      	ldr	r3, [pc, #284]	; (8002264 <menu+0xe3c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d104      	bne.n	8002156 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 800214c:	4a46      	ldr	r2, [pc, #280]	; (8002268 <menu+0xe40>)
 800214e:	2101      	movs	r1, #1
 8002150:	2002      	movs	r0, #2
 8002152:	f005 febd 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002156:	2102      	movs	r1, #2
 8002158:	4844      	ldr	r0, [pc, #272]	; (800226c <menu+0xe44>)
 800215a:	f007 f9df 	bl	800951c <HAL_GPIO_ReadPin>
 800215e:	4603      	mov	r3, r0
 8002160:	2b01      	cmp	r3, #1
 8002162:	d119      	bne.n	8002198 <menu+0xd70>
 8002164:	4b42      	ldr	r3, [pc, #264]	; (8002270 <menu+0xe48>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	f083 0301 	eor.w	r3, r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d012      	beq.n	8002198 <menu+0xd70>
 8002172:	4b4a      	ldr	r3, [pc, #296]	; (800229c <menu+0xe74>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10e      	bne.n	8002198 <menu+0xd70>
			altLimit = altLimit + 1;
 800217a:	4b44      	ldr	r3, [pc, #272]	; (800228c <menu+0xe64>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b42      	ldr	r3, [pc, #264]	; (800228c <menu+0xe64>)
 8002184:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8002186:	4b41      	ldr	r3, [pc, #260]	; (800228c <menu+0xe64>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d902      	bls.n	8002194 <menu+0xd6c>
				altLimit = 0;
 800218e:	4b3f      	ldr	r3, [pc, #252]	; (800228c <menu+0xe64>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002194:	f002 fde0 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002198:	2104      	movs	r1, #4
 800219a:	4834      	ldr	r0, [pc, #208]	; (800226c <menu+0xe44>)
 800219c:	f007 f9be 	bl	800951c <HAL_GPIO_ReadPin>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d119      	bne.n	80021da <menu+0xdb2>
 80021a6:	4b32      	ldr	r3, [pc, #200]	; (8002270 <menu+0xe48>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	f083 0301 	eor.w	r3, r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d012      	beq.n	80021da <menu+0xdb2>
 80021b4:	4b39      	ldr	r3, [pc, #228]	; (800229c <menu+0xe74>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10e      	bne.n	80021da <menu+0xdb2>
			altLimit = altLimit - 1;
 80021bc:	4b33      	ldr	r3, [pc, #204]	; (800228c <menu+0xe64>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	4b31      	ldr	r3, [pc, #196]	; (800228c <menu+0xe64>)
 80021c6:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80021c8:	4b30      	ldr	r3, [pc, #192]	; (800228c <menu+0xe64>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <menu+0xdae>
		   		altLimit = 1;
 80021d0:	4b2e      	ldr	r3, [pc, #184]	; (800228c <menu+0xe64>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021d6:	f002 fdbf 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021da:	2108      	movs	r1, #8
 80021dc:	4823      	ldr	r0, [pc, #140]	; (800226c <menu+0xe44>)
 80021de:	f007 f99d 	bl	800951c <HAL_GPIO_ReadPin>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d12d      	bne.n	8002244 <menu+0xe1c>
 80021e8:	4b21      	ldr	r3, [pc, #132]	; (8002270 <menu+0xe48>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	f083 0301 	eor.w	r3, r3, #1
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d026      	beq.n	8002244 <menu+0xe1c>
			eepromData[5] = altLimit;
 80021f6:	4b25      	ldr	r3, [pc, #148]	; (800228c <menu+0xe64>)
 80021f8:	781a      	ldrb	r2, [r3, #0]
 80021fa:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <menu+0xe50>)
 80021fc:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80021fe:	4b23      	ldr	r3, [pc, #140]	; (800228c <menu+0xe64>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d110      	bne.n	8002228 <menu+0xe00>
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <menu+0xe78>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <menu+0xdee>
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <menu+0xe78>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d108      	bne.n	8002228 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8002216:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <menu+0xe78>)
 8002218:	2203      	movs	r2, #3
 800221a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800221c:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <menu+0xe78>)
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	4b15      	ldr	r3, [pc, #84]	; (8002278 <menu+0xe50>)
 8002222:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002226:	e00a      	b.n	800223e <menu+0xe16>
			} else if(altLimit == 0) {
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <menu+0xe64>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d106      	bne.n	800223e <menu+0xe16>
				platformSilindirTipi = 0;
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <menu+0xe7c>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002236:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <menu+0xe7c>)
 8002238:	781a      	ldrb	r2, [r3, #0]
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <menu+0xe50>)
 800223c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <menu+0xe54>)
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002244:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <menu+0xe58>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b06      	cmp	r3, #6
 800224a:	f040 80b6 	bne.w	80023ba <menu+0xf92>
		if(dilSecim == 0) {
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <menu+0xe3c>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d12a      	bne.n	80022ac <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002256:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <menu+0xe80>)
 8002258:	2101      	movs	r1, #1
 800225a:	2001      	movs	r0, #1
 800225c:	f005 fe38 	bl	8007ed0 <lcd_print>
 8002260:	e02d      	b.n	80022be <menu+0xe96>
 8002262:	bf00      	nop
 8002264:	20000241 	.word	0x20000241
 8002268:	0800d630 	.word	0x0800d630
 800226c:	40010800 	.word	0x40010800
 8002270:	2000024f 	.word	0x2000024f
 8002274:	20000225 	.word	0x20000225
 8002278:	20000118 	.word	0x20000118
 800227c:	2000024c 	.word	0x2000024c
 8002280:	20000220 	.word	0x20000220
 8002284:	0800d644 	.word	0x0800d644
 8002288:	0800d658 	.word	0x0800d658
 800228c:	20000226 	.word	0x20000226
 8002290:	0800d5bc 	.word	0x0800d5bc
 8002294:	0800d5d0 	.word	0x0800d5d0
 8002298:	0800d61c 	.word	0x0800d61c
 800229c:	20000221 	.word	0x20000221
 80022a0:	2000022d 	.word	0x2000022d
 80022a4:	20000233 	.word	0x20000233
 80022a8:	0800d66c 	.word	0x0800d66c
		} else if(dilSecim == 1){
 80022ac:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <menu+0x1070>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d104      	bne.n	80022be <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80022b4:	4a79      	ldr	r2, [pc, #484]	; (800249c <menu+0x1074>)
 80022b6:	2101      	movs	r1, #1
 80022b8:	2001      	movs	r0, #1
 80022ba:	f005 fe09 	bl	8007ed0 <lcd_print>
		}
		if(basincSalteri == 0){
 80022be:	4b78      	ldr	r3, [pc, #480]	; (80024a0 <menu+0x1078>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d113      	bne.n	80022ee <menu+0xec6>
			if(dilSecim == 0) {
 80022c6:	4b74      	ldr	r3, [pc, #464]	; (8002498 <menu+0x1070>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80022ce:	4a75      	ldr	r2, [pc, #468]	; (80024a4 <menu+0x107c>)
 80022d0:	2101      	movs	r1, #1
 80022d2:	2002      	movs	r0, #2
 80022d4:	f005 fdfc 	bl	8007ed0 <lcd_print>
 80022d8:	e020      	b.n	800231c <menu+0xef4>
			} else if(dilSecim == 1){
 80022da:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <menu+0x1070>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d11c      	bne.n	800231c <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80022e2:	4a71      	ldr	r2, [pc, #452]	; (80024a8 <menu+0x1080>)
 80022e4:	2101      	movs	r1, #1
 80022e6:	2002      	movs	r0, #2
 80022e8:	f005 fdf2 	bl	8007ed0 <lcd_print>
 80022ec:	e016      	b.n	800231c <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80022ee:	4b6c      	ldr	r3, [pc, #432]	; (80024a0 <menu+0x1078>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d112      	bne.n	800231c <menu+0xef4>
			if(dilSecim == 0) {
 80022f6:	4b68      	ldr	r3, [pc, #416]	; (8002498 <menu+0x1070>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80022fe:	4a6b      	ldr	r2, [pc, #428]	; (80024ac <menu+0x1084>)
 8002300:	2101      	movs	r1, #1
 8002302:	2002      	movs	r0, #2
 8002304:	f005 fde4 	bl	8007ed0 <lcd_print>
 8002308:	e008      	b.n	800231c <menu+0xef4>
			} else if(dilSecim == 1) {
 800230a:	4b63      	ldr	r3, [pc, #396]	; (8002498 <menu+0x1070>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d104      	bne.n	800231c <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8002312:	4a67      	ldr	r2, [pc, #412]	; (80024b0 <menu+0x1088>)
 8002314:	2101      	movs	r1, #1
 8002316:	2002      	movs	r0, #2
 8002318:	f005 fdda 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800231c:	2102      	movs	r1, #2
 800231e:	4865      	ldr	r0, [pc, #404]	; (80024b4 <menu+0x108c>)
 8002320:	f007 f8fc 	bl	800951c <HAL_GPIO_ReadPin>
 8002324:	4603      	mov	r3, r0
 8002326:	2b01      	cmp	r3, #1
 8002328:	d115      	bne.n	8002356 <menu+0xf2e>
 800232a:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <menu+0x1090>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	f083 0301 	eor.w	r3, r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00e      	beq.n	8002356 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002338:	4b59      	ldr	r3, [pc, #356]	; (80024a0 <menu+0x1078>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b57      	ldr	r3, [pc, #348]	; (80024a0 <menu+0x1078>)
 8002342:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002344:	4b56      	ldr	r3, [pc, #344]	; (80024a0 <menu+0x1078>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d902      	bls.n	8002352 <menu+0xf2a>
				basincSalteri = 0;
 800234c:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <menu+0x1078>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002352:	f002 fd01 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002356:	2104      	movs	r1, #4
 8002358:	4856      	ldr	r0, [pc, #344]	; (80024b4 <menu+0x108c>)
 800235a:	f007 f8df 	bl	800951c <HAL_GPIO_ReadPin>
 800235e:	4603      	mov	r3, r0
 8002360:	2b01      	cmp	r3, #1
 8002362:	d115      	bne.n	8002390 <menu+0xf68>
 8002364:	4b54      	ldr	r3, [pc, #336]	; (80024b8 <menu+0x1090>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	f083 0301 	eor.w	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00e      	beq.n	8002390 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8002372:	4b4b      	ldr	r3, [pc, #300]	; (80024a0 <menu+0x1078>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	3b01      	subs	r3, #1
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <menu+0x1078>)
 800237c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800237e:	4b48      	ldr	r3, [pc, #288]	; (80024a0 <menu+0x1078>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <menu+0xf64>
		   		basincSalteri = 1;
 8002386:	4b46      	ldr	r3, [pc, #280]	; (80024a0 <menu+0x1078>)
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800238c:	f002 fce4 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002390:	2108      	movs	r1, #8
 8002392:	4848      	ldr	r0, [pc, #288]	; (80024b4 <menu+0x108c>)
 8002394:	f007 f8c2 	bl	800951c <HAL_GPIO_ReadPin>
 8002398:	4603      	mov	r3, r0
 800239a:	2b01      	cmp	r3, #1
 800239c:	d10d      	bne.n	80023ba <menu+0xf92>
 800239e:	4b46      	ldr	r3, [pc, #280]	; (80024b8 <menu+0x1090>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	f083 0301 	eor.w	r3, r3, #1
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <menu+0xf92>
			eepromData[6] = basincSalteri;
 80023ac:	4b3c      	ldr	r3, [pc, #240]	; (80024a0 <menu+0x1078>)
 80023ae:	781a      	ldrb	r2, [r3, #0]
 80023b0:	4b42      	ldr	r3, [pc, #264]	; (80024bc <menu+0x1094>)
 80023b2:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80023b4:	4b42      	ldr	r3, [pc, #264]	; (80024c0 <menu+0x1098>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80023ba:	4b42      	ldr	r3, [pc, #264]	; (80024c4 <menu+0x109c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b07      	cmp	r3, #7
 80023c0:	f040 80f5 	bne.w	80025ae <menu+0x1186>
		if(dilSecim == 0) {
 80023c4:	4b34      	ldr	r3, [pc, #208]	; (8002498 <menu+0x1070>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80023cc:	4a3e      	ldr	r2, [pc, #248]	; (80024c8 <menu+0x10a0>)
 80023ce:	2101      	movs	r1, #1
 80023d0:	2001      	movs	r0, #1
 80023d2:	f005 fd7d 	bl	8007ed0 <lcd_print>
 80023d6:	e008      	b.n	80023ea <menu+0xfc2>
		} else if(dilSecim == 1){
 80023d8:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <menu+0x1070>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d104      	bne.n	80023ea <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80023e0:	4a3a      	ldr	r2, [pc, #232]	; (80024cc <menu+0x10a4>)
 80023e2:	2101      	movs	r1, #1
 80023e4:	2001      	movs	r0, #1
 80023e6:	f005 fd73 	bl	8007ed0 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80023ea:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <menu+0x10a8>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d113      	bne.n	800241a <menu+0xff2>
			if(dilSecim == 0) {
 80023f2:	4b29      	ldr	r3, [pc, #164]	; (8002498 <menu+0x1070>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80023fa:	4a2a      	ldr	r2, [pc, #168]	; (80024a4 <menu+0x107c>)
 80023fc:	2101      	movs	r1, #1
 80023fe:	2002      	movs	r0, #2
 8002400:	f005 fd66 	bl	8007ed0 <lcd_print>
 8002404:	e079      	b.n	80024fa <menu+0x10d2>
			} else if(dilSecim == 1){
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <menu+0x1070>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d175      	bne.n	80024fa <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800240e:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <menu+0x1080>)
 8002410:	2101      	movs	r1, #1
 8002412:	2002      	movs	r0, #2
 8002414:	f005 fd5c 	bl	8007ed0 <lcd_print>
 8002418:	e06f      	b.n	80024fa <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <menu+0x10a8>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d113      	bne.n	800244a <menu+0x1022>
			if(dilSecim == 0) {
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <menu+0x1070>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d105      	bne.n	8002436 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800242a:	4a2a      	ldr	r2, [pc, #168]	; (80024d4 <menu+0x10ac>)
 800242c:	2101      	movs	r1, #1
 800242e:	2002      	movs	r0, #2
 8002430:	f005 fd4e 	bl	8007ed0 <lcd_print>
 8002434:	e061      	b.n	80024fa <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002436:	4b18      	ldr	r3, [pc, #96]	; (8002498 <menu+0x1070>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d15d      	bne.n	80024fa <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800243e:	4a26      	ldr	r2, [pc, #152]	; (80024d8 <menu+0x10b0>)
 8002440:	2101      	movs	r1, #1
 8002442:	2002      	movs	r0, #2
 8002444:	f005 fd44 	bl	8007ed0 <lcd_print>
 8002448:	e057      	b.n	80024fa <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 800244a:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <menu+0x10a8>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d113      	bne.n	800247a <menu+0x1052>
			if(dilSecim == 0) {
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <menu+0x1070>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 800245a:	4a20      	ldr	r2, [pc, #128]	; (80024dc <menu+0x10b4>)
 800245c:	2101      	movs	r1, #1
 800245e:	2002      	movs	r0, #2
 8002460:	f005 fd36 	bl	8007ed0 <lcd_print>
 8002464:	e049      	b.n	80024fa <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <menu+0x1070>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d145      	bne.n	80024fa <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800246e:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <menu+0x10b8>)
 8002470:	2101      	movs	r1, #1
 8002472:	2002      	movs	r0, #2
 8002474:	f005 fd2c 	bl	8007ed0 <lcd_print>
 8002478:	e03f      	b.n	80024fa <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <menu+0x10a8>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d13b      	bne.n	80024fa <menu+0x10d2>
			if(dilSecim == 0) {
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <menu+0x1070>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d12e      	bne.n	80024e8 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800248a:	4a16      	ldr	r2, [pc, #88]	; (80024e4 <menu+0x10bc>)
 800248c:	2101      	movs	r1, #1
 800248e:	2002      	movs	r0, #2
 8002490:	f005 fd1e 	bl	8007ed0 <lcd_print>
 8002494:	e031      	b.n	80024fa <menu+0x10d2>
 8002496:	bf00      	nop
 8002498:	20000241 	.word	0x20000241
 800249c:	0800d67c 	.word	0x0800d67c
 80024a0:	20000227 	.word	0x20000227
 80024a4:	0800d5bc 	.word	0x0800d5bc
 80024a8:	0800d5d0 	.word	0x0800d5d0
 80024ac:	0800d61c 	.word	0x0800d61c
 80024b0:	0800d630 	.word	0x0800d630
 80024b4:	40010800 	.word	0x40010800
 80024b8:	2000024f 	.word	0x2000024f
 80024bc:	20000118 	.word	0x20000118
 80024c0:	2000024c 	.word	0x2000024c
 80024c4:	20000220 	.word	0x20000220
 80024c8:	0800d68c 	.word	0x0800d68c
 80024cc:	0800d6a0 	.word	0x0800d6a0
 80024d0:	20000228 	.word	0x20000228
 80024d4:	0800d6b4 	.word	0x0800d6b4
 80024d8:	0800d6c8 	.word	0x0800d6c8
 80024dc:	0800d6dc 	.word	0x0800d6dc
 80024e0:	0800d6f0 	.word	0x0800d6f0
 80024e4:	0800d704 	.word	0x0800d704
			} else if(dilSecim == 1){
 80024e8:	4b99      	ldr	r3, [pc, #612]	; (8002750 <menu+0x1328>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d104      	bne.n	80024fa <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80024f0:	4a98      	ldr	r2, [pc, #608]	; (8002754 <menu+0x132c>)
 80024f2:	2101      	movs	r1, #1
 80024f4:	2002      	movs	r0, #2
 80024f6:	f005 fceb 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024fa:	2102      	movs	r1, #2
 80024fc:	4896      	ldr	r0, [pc, #600]	; (8002758 <menu+0x1330>)
 80024fe:	f007 f80d 	bl	800951c <HAL_GPIO_ReadPin>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	d115      	bne.n	8002534 <menu+0x110c>
 8002508:	4b94      	ldr	r3, [pc, #592]	; (800275c <menu+0x1334>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	f083 0301 	eor.w	r3, r3, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00e      	beq.n	8002534 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002516:	4b92      	ldr	r3, [pc, #584]	; (8002760 <menu+0x1338>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	3301      	adds	r3, #1
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4b90      	ldr	r3, [pc, #576]	; (8002760 <menu+0x1338>)
 8002520:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002522:	4b8f      	ldr	r3, [pc, #572]	; (8002760 <menu+0x1338>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d902      	bls.n	8002530 <menu+0x1108>
				kapiSecimleri = 0;
 800252a:	4b8d      	ldr	r3, [pc, #564]	; (8002760 <menu+0x1338>)
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002530:	f002 fc12 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002534:	2104      	movs	r1, #4
 8002536:	4888      	ldr	r0, [pc, #544]	; (8002758 <menu+0x1330>)
 8002538:	f006 fff0 	bl	800951c <HAL_GPIO_ReadPin>
 800253c:	4603      	mov	r3, r0
 800253e:	2b01      	cmp	r3, #1
 8002540:	d115      	bne.n	800256e <menu+0x1146>
 8002542:	4b86      	ldr	r3, [pc, #536]	; (800275c <menu+0x1334>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	f083 0301 	eor.w	r3, r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00e      	beq.n	800256e <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002550:	4b83      	ldr	r3, [pc, #524]	; (8002760 <menu+0x1338>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	3b01      	subs	r3, #1
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b81      	ldr	r3, [pc, #516]	; (8002760 <menu+0x1338>)
 800255a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 800255c:	4b80      	ldr	r3, [pc, #512]	; (8002760 <menu+0x1338>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b04      	cmp	r3, #4
 8002562:	d902      	bls.n	800256a <menu+0x1142>
		   		kapiSecimleri = 3;
 8002564:	4b7e      	ldr	r3, [pc, #504]	; (8002760 <menu+0x1338>)
 8002566:	2203      	movs	r2, #3
 8002568:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800256a:	f002 fbf5 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800256e:	2108      	movs	r1, #8
 8002570:	4879      	ldr	r0, [pc, #484]	; (8002758 <menu+0x1330>)
 8002572:	f006 ffd3 	bl	800951c <HAL_GPIO_ReadPin>
 8002576:	4603      	mov	r3, r0
 8002578:	2b01      	cmp	r3, #1
 800257a:	d118      	bne.n	80025ae <menu+0x1186>
 800257c:	4b77      	ldr	r3, [pc, #476]	; (800275c <menu+0x1334>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	f083 0301 	eor.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d011      	beq.n	80025ae <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 800258a:	4b75      	ldr	r3, [pc, #468]	; (8002760 <menu+0x1338>)
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	4b75      	ldr	r3, [pc, #468]	; (8002764 <menu+0x133c>)
 8002590:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002592:	4b73      	ldr	r3, [pc, #460]	; (8002760 <menu+0x1338>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d006      	beq.n	80025a8 <menu+0x1180>
				altLimit = 1;
 800259a:	4b73      	ldr	r3, [pc, #460]	; (8002768 <menu+0x1340>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80025a0:	4b71      	ldr	r3, [pc, #452]	; (8002768 <menu+0x1340>)
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	4b6f      	ldr	r3, [pc, #444]	; (8002764 <menu+0x133c>)
 80025a6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80025a8:	4b70      	ldr	r3, [pc, #448]	; (800276c <menu+0x1344>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80025ae:	4b70      	ldr	r3, [pc, #448]	; (8002770 <menu+0x1348>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	f040 8092 	bne.w	80026dc <menu+0x12b4>
		if(dilSecim == 0) {
 80025b8:	4b65      	ldr	r3, [pc, #404]	; (8002750 <menu+0x1328>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d105      	bne.n	80025cc <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80025c0:	4a6c      	ldr	r2, [pc, #432]	; (8002774 <menu+0x134c>)
 80025c2:	2101      	movs	r1, #1
 80025c4:	2001      	movs	r0, #1
 80025c6:	f005 fc83 	bl	8007ed0 <lcd_print>
 80025ca:	e008      	b.n	80025de <menu+0x11b6>
		} else if(dilSecim == 1) {
 80025cc:	4b60      	ldr	r3, [pc, #384]	; (8002750 <menu+0x1328>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d104      	bne.n	80025de <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80025d4:	4a68      	ldr	r2, [pc, #416]	; (8002778 <menu+0x1350>)
 80025d6:	2101      	movs	r1, #1
 80025d8:	2001      	movs	r0, #1
 80025da:	f005 fc79 	bl	8007ed0 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80025de:	4b67      	ldr	r3, [pc, #412]	; (800277c <menu+0x1354>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d113      	bne.n	800260e <menu+0x11e6>
			if(dilSecim == 0) {
 80025e6:	4b5a      	ldr	r3, [pc, #360]	; (8002750 <menu+0x1328>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d105      	bne.n	80025fa <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80025ee:	4a64      	ldr	r2, [pc, #400]	; (8002780 <menu+0x1358>)
 80025f0:	2101      	movs	r1, #1
 80025f2:	2002      	movs	r0, #2
 80025f4:	f005 fc6c 	bl	8007ed0 <lcd_print>
 80025f8:	e020      	b.n	800263c <menu+0x1214>
			} else if(dilSecim == 1) {
 80025fa:	4b55      	ldr	r3, [pc, #340]	; (8002750 <menu+0x1328>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d11c      	bne.n	800263c <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002602:	4a60      	ldr	r2, [pc, #384]	; (8002784 <menu+0x135c>)
 8002604:	2101      	movs	r1, #1
 8002606:	2002      	movs	r0, #2
 8002608:	f005 fc62 	bl	8007ed0 <lcd_print>
 800260c:	e016      	b.n	800263c <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800260e:	4b5b      	ldr	r3, [pc, #364]	; (800277c <menu+0x1354>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d112      	bne.n	800263c <menu+0x1214>
			if(dilSecim == 0){
 8002616:	4b4e      	ldr	r3, [pc, #312]	; (8002750 <menu+0x1328>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d105      	bne.n	800262a <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800261e:	4a5a      	ldr	r2, [pc, #360]	; (8002788 <menu+0x1360>)
 8002620:	2101      	movs	r1, #1
 8002622:	2002      	movs	r0, #2
 8002624:	f005 fc54 	bl	8007ed0 <lcd_print>
 8002628:	e008      	b.n	800263c <menu+0x1214>
			} else if(dilSecim == 1){
 800262a:	4b49      	ldr	r3, [pc, #292]	; (8002750 <menu+0x1328>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d104      	bne.n	800263c <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8002632:	4a56      	ldr	r2, [pc, #344]	; (800278c <menu+0x1364>)
 8002634:	2101      	movs	r1, #1
 8002636:	2002      	movs	r0, #2
 8002638:	f005 fc4a 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800263c:	2102      	movs	r1, #2
 800263e:	4846      	ldr	r0, [pc, #280]	; (8002758 <menu+0x1330>)
 8002640:	f006 ff6c 	bl	800951c <HAL_GPIO_ReadPin>
 8002644:	4603      	mov	r3, r0
 8002646:	2b01      	cmp	r3, #1
 8002648:	d115      	bne.n	8002676 <menu+0x124e>
 800264a:	4b44      	ldr	r3, [pc, #272]	; (800275c <menu+0x1334>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f083 0301 	eor.w	r3, r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00e      	beq.n	8002676 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002658:	4b48      	ldr	r3, [pc, #288]	; (800277c <menu+0x1354>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	3301      	adds	r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	4b46      	ldr	r3, [pc, #280]	; (800277c <menu+0x1354>)
 8002662:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002664:	4b45      	ldr	r3, [pc, #276]	; (800277c <menu+0x1354>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d902      	bls.n	8002672 <menu+0x124a>
				kapiAcTipi = 0;
 800266c:	4b43      	ldr	r3, [pc, #268]	; (800277c <menu+0x1354>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002672:	f002 fb71 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002676:	2104      	movs	r1, #4
 8002678:	4837      	ldr	r0, [pc, #220]	; (8002758 <menu+0x1330>)
 800267a:	f006 ff4f 	bl	800951c <HAL_GPIO_ReadPin>
 800267e:	4603      	mov	r3, r0
 8002680:	2b01      	cmp	r3, #1
 8002682:	d115      	bne.n	80026b0 <menu+0x1288>
 8002684:	4b35      	ldr	r3, [pc, #212]	; (800275c <menu+0x1334>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	f083 0301 	eor.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00e      	beq.n	80026b0 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002692:	4b3a      	ldr	r3, [pc, #232]	; (800277c <menu+0x1354>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	3b01      	subs	r3, #1
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4b38      	ldr	r3, [pc, #224]	; (800277c <menu+0x1354>)
 800269c:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800269e:	4b37      	ldr	r3, [pc, #220]	; (800277c <menu+0x1354>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <menu+0x1284>
		   		kapiAcTipi = 1;
 80026a6:	4b35      	ldr	r3, [pc, #212]	; (800277c <menu+0x1354>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026ac:	f002 fb54 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026b0:	2108      	movs	r1, #8
 80026b2:	4829      	ldr	r0, [pc, #164]	; (8002758 <menu+0x1330>)
 80026b4:	f006 ff32 	bl	800951c <HAL_GPIO_ReadPin>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d10e      	bne.n	80026dc <menu+0x12b4>
 80026be:	4b27      	ldr	r3, [pc, #156]	; (800275c <menu+0x1334>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	f083 0301 	eor.w	r3, r3, #1
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <menu+0x1354>)
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	4b24      	ldr	r3, [pc, #144]	; (8002764 <menu+0x133c>)
 80026d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80026d6:	4b25      	ldr	r3, [pc, #148]	; (800276c <menu+0x1344>)
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80026dc:	4b24      	ldr	r3, [pc, #144]	; (8002770 <menu+0x1348>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b09      	cmp	r3, #9
 80026e2:	f040 80b9 	bne.w	8002858 <menu+0x1430>
		if(dilSecim == 0){
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <menu+0x1328>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d105      	bne.n	80026fa <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80026ee:	4a28      	ldr	r2, [pc, #160]	; (8002790 <menu+0x1368>)
 80026f0:	2101      	movs	r1, #1
 80026f2:	2001      	movs	r0, #1
 80026f4:	f005 fbec 	bl	8007ed0 <lcd_print>
 80026f8:	e008      	b.n	800270c <menu+0x12e4>
		} else if(dilSecim == 1) {
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <menu+0x1328>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d104      	bne.n	800270c <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002702:	4a24      	ldr	r2, [pc, #144]	; (8002794 <menu+0x136c>)
 8002704:	2101      	movs	r1, #1
 8002706:	2001      	movs	r0, #1
 8002708:	f005 fbe2 	bl	8007ed0 <lcd_print>
		}

		if(kapi1Tip == 0) {
 800270c:	4b22      	ldr	r3, [pc, #136]	; (8002798 <menu+0x1370>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002714:	4a21      	ldr	r2, [pc, #132]	; (800279c <menu+0x1374>)
 8002716:	2101      	movs	r1, #1
 8002718:	2002      	movs	r0, #2
 800271a:	f005 fbd9 	bl	8007ed0 <lcd_print>
 800271e:	e04c      	b.n	80027ba <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <menu+0x1370>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d13f      	bne.n	80027a8 <menu+0x1380>
			if(dilSecim == 0){
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <menu+0x1328>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d105      	bne.n	800273c <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002730:	4a1b      	ldr	r2, [pc, #108]	; (80027a0 <menu+0x1378>)
 8002732:	2101      	movs	r1, #1
 8002734:	2002      	movs	r0, #2
 8002736:	f005 fbcb 	bl	8007ed0 <lcd_print>
 800273a:	e03e      	b.n	80027ba <menu+0x1392>
			} else if(dilSecim == 1) {
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <menu+0x1328>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d13a      	bne.n	80027ba <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002744:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <menu+0x137c>)
 8002746:	2101      	movs	r1, #1
 8002748:	2002      	movs	r0, #2
 800274a:	f005 fbc1 	bl	8007ed0 <lcd_print>
 800274e:	e034      	b.n	80027ba <menu+0x1392>
 8002750:	20000241 	.word	0x20000241
 8002754:	0800d718 	.word	0x0800d718
 8002758:	40010800 	.word	0x40010800
 800275c:	2000024f 	.word	0x2000024f
 8002760:	20000228 	.word	0x20000228
 8002764:	20000118 	.word	0x20000118
 8002768:	20000226 	.word	0x20000226
 800276c:	2000024c 	.word	0x2000024c
 8002770:	20000220 	.word	0x20000220
 8002774:	0800d72c 	.word	0x0800d72c
 8002778:	0800d740 	.word	0x0800d740
 800277c:	2000022c 	.word	0x2000022c
 8002780:	0800d754 	.word	0x0800d754
 8002784:	0800d764 	.word	0x0800d764
 8002788:	0800d774 	.word	0x0800d774
 800278c:	0800d788 	.word	0x0800d788
 8002790:	0800d79c 	.word	0x0800d79c
 8002794:	0800d7b0 	.word	0x0800d7b0
 8002798:	20000229 	.word	0x20000229
 800279c:	0800d7c4 	.word	0x0800d7c4
 80027a0:	0800d7d8 	.word	0x0800d7d8
 80027a4:	0800d7e8 	.word	0x0800d7e8
			}
		} else if(kapi1Tip == 2) {
 80027a8:	4b8a      	ldr	r3, [pc, #552]	; (80029d4 <menu+0x15ac>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d104      	bne.n	80027ba <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 80027b0:	4a89      	ldr	r2, [pc, #548]	; (80029d8 <menu+0x15b0>)
 80027b2:	2101      	movs	r1, #1
 80027b4:	2002      	movs	r0, #2
 80027b6:	f005 fb8b 	bl	8007ed0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ba:	2102      	movs	r1, #2
 80027bc:	4887      	ldr	r0, [pc, #540]	; (80029dc <menu+0x15b4>)
 80027be:	f006 fead 	bl	800951c <HAL_GPIO_ReadPin>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d115      	bne.n	80027f4 <menu+0x13cc>
 80027c8:	4b85      	ldr	r3, [pc, #532]	; (80029e0 <menu+0x15b8>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	f083 0301 	eor.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00e      	beq.n	80027f4 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80027d6:	4b7f      	ldr	r3, [pc, #508]	; (80029d4 <menu+0x15ac>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	3301      	adds	r3, #1
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4b7d      	ldr	r3, [pc, #500]	; (80029d4 <menu+0x15ac>)
 80027e0:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80027e2:	4b7c      	ldr	r3, [pc, #496]	; (80029d4 <menu+0x15ac>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d902      	bls.n	80027f0 <menu+0x13c8>
				kapi1Tip = 0;
 80027ea:	4b7a      	ldr	r3, [pc, #488]	; (80029d4 <menu+0x15ac>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027f0:	f002 fab2 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027f4:	2104      	movs	r1, #4
 80027f6:	4879      	ldr	r0, [pc, #484]	; (80029dc <menu+0x15b4>)
 80027f8:	f006 fe90 	bl	800951c <HAL_GPIO_ReadPin>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d115      	bne.n	800282e <menu+0x1406>
 8002802:	4b77      	ldr	r3, [pc, #476]	; (80029e0 <menu+0x15b8>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	f083 0301 	eor.w	r3, r3, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00e      	beq.n	800282e <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002810:	4b70      	ldr	r3, [pc, #448]	; (80029d4 <menu+0x15ac>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	3b01      	subs	r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b6e      	ldr	r3, [pc, #440]	; (80029d4 <menu+0x15ac>)
 800281a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 800281c:	4b6d      	ldr	r3, [pc, #436]	; (80029d4 <menu+0x15ac>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d902      	bls.n	800282a <menu+0x1402>
		   		kapi1Tip = 2;
 8002824:	4b6b      	ldr	r3, [pc, #428]	; (80029d4 <menu+0x15ac>)
 8002826:	2202      	movs	r2, #2
 8002828:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800282a:	f002 fa95 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800282e:	2108      	movs	r1, #8
 8002830:	486a      	ldr	r0, [pc, #424]	; (80029dc <menu+0x15b4>)
 8002832:	f006 fe73 	bl	800951c <HAL_GPIO_ReadPin>
 8002836:	4603      	mov	r3, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10d      	bne.n	8002858 <menu+0x1430>
 800283c:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <menu+0x15b8>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	f083 0301 	eor.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 800284a:	4b62      	ldr	r3, [pc, #392]	; (80029d4 <menu+0x15ac>)
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	4b65      	ldr	r3, [pc, #404]	; (80029e4 <menu+0x15bc>)
 8002850:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002852:	4b65      	ldr	r3, [pc, #404]	; (80029e8 <menu+0x15c0>)
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002858:	4b64      	ldr	r3, [pc, #400]	; (80029ec <menu+0x15c4>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b0a      	cmp	r3, #10
 800285e:	d17f      	bne.n	8002960 <menu+0x1538>
		if(dilSecim == 0) {
 8002860:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <menu+0x15c8>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002868:	4a62      	ldr	r2, [pc, #392]	; (80029f4 <menu+0x15cc>)
 800286a:	2101      	movs	r1, #1
 800286c:	2001      	movs	r0, #1
 800286e:	f005 fb2f 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002872:	4a61      	ldr	r2, [pc, #388]	; (80029f8 <menu+0x15d0>)
 8002874:	2101      	movs	r1, #1
 8002876:	2002      	movs	r0, #2
 8002878:	f005 fb2a 	bl	8007ed0 <lcd_print>
 800287c:	e00d      	b.n	800289a <menu+0x1472>
		} else if(dilSecim == 1) {
 800287e:	4b5c      	ldr	r3, [pc, #368]	; (80029f0 <menu+0x15c8>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d109      	bne.n	800289a <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002886:	4a5d      	ldr	r2, [pc, #372]	; (80029fc <menu+0x15d4>)
 8002888:	2101      	movs	r1, #1
 800288a:	2001      	movs	r0, #1
 800288c:	f005 fb20 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002890:	4a5b      	ldr	r2, [pc, #364]	; (8002a00 <menu+0x15d8>)
 8002892:	2101      	movs	r1, #1
 8002894:	2002      	movs	r0, #2
 8002896:	f005 fb1b 	bl	8007ed0 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800289a:	4b5a      	ldr	r3, [pc, #360]	; (8002a04 <menu+0x15dc>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	220a      	movs	r2, #10
 80028a0:	4959      	ldr	r1, [pc, #356]	; (8002a08 <menu+0x15e0>)
 80028a2:	4618      	mov	r0, r3
 80028a4:	f009 fec2 	bl	800c62c <itoa>
		lcd_print(2,16,snum);
 80028a8:	4a57      	ldr	r2, [pc, #348]	; (8002a08 <menu+0x15e0>)
 80028aa:	2110      	movs	r1, #16
 80028ac:	2002      	movs	r0, #2
 80028ae:	f005 fb0f 	bl	8007ed0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80028b2:	2102      	movs	r1, #2
 80028b4:	4849      	ldr	r0, [pc, #292]	; (80029dc <menu+0x15b4>)
 80028b6:	f006 fe31 	bl	800951c <HAL_GPIO_ReadPin>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d119      	bne.n	80028f4 <menu+0x14cc>
 80028c0:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <menu+0x15b8>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	f083 0301 	eor.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d012      	beq.n	80028f4 <menu+0x14cc>
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <menu+0x15ac>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10e      	bne.n	80028f4 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80028d6:	4b4b      	ldr	r3, [pc, #300]	; (8002a04 <menu+0x15dc>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	3301      	adds	r3, #1
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4b49      	ldr	r3, [pc, #292]	; (8002a04 <menu+0x15dc>)
 80028e0:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80028e2:	4b48      	ldr	r3, [pc, #288]	; (8002a04 <menu+0x15dc>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d902      	bls.n	80028f0 <menu+0x14c8>
				kapi1AcSure = 0;
 80028ea:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <menu+0x15dc>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028f0:	f002 fa32 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80028f4:	2104      	movs	r1, #4
 80028f6:	4839      	ldr	r0, [pc, #228]	; (80029dc <menu+0x15b4>)
 80028f8:	f006 fe10 	bl	800951c <HAL_GPIO_ReadPin>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d119      	bne.n	8002936 <menu+0x150e>
 8002902:	4b37      	ldr	r3, [pc, #220]	; (80029e0 <menu+0x15b8>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	f083 0301 	eor.w	r3, r3, #1
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d012      	beq.n	8002936 <menu+0x150e>
 8002910:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <menu+0x15ac>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10e      	bne.n	8002936 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002918:	4b3a      	ldr	r3, [pc, #232]	; (8002a04 <menu+0x15dc>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	3b01      	subs	r3, #1
 800291e:	b2da      	uxtb	r2, r3
 8002920:	4b38      	ldr	r3, [pc, #224]	; (8002a04 <menu+0x15dc>)
 8002922:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002924:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <menu+0x15dc>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b06      	cmp	r3, #6
 800292a:	d902      	bls.n	8002932 <menu+0x150a>
		   		kapi1AcSure = 5;
 800292c:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <menu+0x15dc>)
 800292e:	2205      	movs	r2, #5
 8002930:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002932:	f002 fa11 	bl	8004d58 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002936:	2108      	movs	r1, #8
 8002938:	4828      	ldr	r0, [pc, #160]	; (80029dc <menu+0x15b4>)
 800293a:	f006 fdef 	bl	800951c <HAL_GPIO_ReadPin>
 800293e:	4603      	mov	r3, r0
 8002940:	2b01      	cmp	r3, #1
 8002942:	d10d      	bne.n	8002960 <menu+0x1538>
 8002944:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <menu+0x15b8>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	f083 0301 	eor.w	r3, r3, #1
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d006      	beq.n	8002960 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002952:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <menu+0x15dc>)
 8002954:	781a      	ldrb	r2, [r3, #0]
 8002956:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <menu+0x15bc>)
 8002958:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 800295a:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <menu+0x15c0>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002960:	4b22      	ldr	r3, [pc, #136]	; (80029ec <menu+0x15c4>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b0b      	cmp	r3, #11
 8002966:	f040 80b5 	bne.w	8002ad4 <menu+0x16ac>
		if(dilSecim == 0) {
 800296a:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <menu+0x15c8>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d105      	bne.n	800297e <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002972:	4a26      	ldr	r2, [pc, #152]	; (8002a0c <menu+0x15e4>)
 8002974:	2101      	movs	r1, #1
 8002976:	2001      	movs	r0, #1
 8002978:	f005 faaa 	bl	8007ed0 <lcd_print>
 800297c:	e008      	b.n	8002990 <menu+0x1568>
		} else if(dilSecim == 1) {
 800297e:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <menu+0x15c8>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d104      	bne.n	8002990 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002986:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <menu+0x15e8>)
 8002988:	2101      	movs	r1, #1
 800298a:	2001      	movs	r0, #1
 800298c:	f005 faa0 	bl	8007ed0 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002990:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <menu+0x15ec>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002998:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <menu+0x15f0>)
 800299a:	2101      	movs	r1, #1
 800299c:	2002      	movs	r0, #2
 800299e:	f005 fa97 	bl	8007ed0 <lcd_print>
 80029a2:	e048      	b.n	8002a36 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <menu+0x15ec>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d13b      	bne.n	8002a24 <menu+0x15fc>
			if(dilSecim == 0) {
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <menu+0x15c8>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d105      	bne.n	80029c0 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 80029b4:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <menu+0x15f4>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	2002      	movs	r0, #2
 80029ba:	f005 fa89 	bl	8007ed0 <lcd_print>
 80029be:	e03a      	b.n	8002a36 <menu+0x160e>
			} else if(dilSecim == 1) {
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <menu+0x15c8>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d136      	bne.n	8002a36 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80029c8:	4a15      	ldr	r2, [pc, #84]	; (8002a20 <menu+0x15f8>)
 80029ca:	2101      	movs	r1, #1
 80029cc:	2002      	movs	r0, #2
 80029ce:	f005 fa7f 	bl	8007ed0 <lcd_print>
 80029d2:	e030      	b.n	8002a36 <menu+0x160e>
 80029d4:	20000229 	.word	0x20000229
 80029d8:	0800d7fc 	.word	0x0800d7fc
 80029dc:	40010800 	.word	0x40010800
 80029e0:	2000024f 	.word	0x2000024f
 80029e4:	20000118 	.word	0x20000118
 80029e8:	2000024c 	.word	0x2000024c
 80029ec:	20000220 	.word	0x20000220
 80029f0:	20000241 	.word	0x20000241
 80029f4:	0800d80c 	.word	0x0800d80c
 80029f8:	0800d820 	.word	0x0800d820
 80029fc:	0800d830 	.word	0x0800d830
 8002a00:	0800d844 	.word	0x0800d844
 8002a04:	20000239 	.word	0x20000239
 8002a08:	20000188 	.word	0x20000188
 8002a0c:	0800d854 	.word	0x0800d854
 8002a10:	0800d868 	.word	0x0800d868
 8002a14:	2000022a 	.word	0x2000022a
 8002a18:	0800d7c4 	.word	0x0800d7c4
 8002a1c:	0800d7d8 	.word	0x0800d7d8
 8002a20:	0800d7e8 	.word	0x0800d7e8
			}
		} else if(kapi2Tip == 2) {
 8002a24:	4b8a      	ldr	r3, [pc, #552]	; (8002c50 <menu+0x1828>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d104      	bne.n	8002a36 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002a2c:	4a89      	ldr	r2, [pc, #548]	; (8002c54 <menu+0x182c>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	2002      	movs	r0, #2
 8002a32:	f005 fa4d 	bl	8007ed0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a36:	2102      	movs	r1, #2
 8002a38:	4887      	ldr	r0, [pc, #540]	; (8002c58 <menu+0x1830>)
 8002a3a:	f006 fd6f 	bl	800951c <HAL_GPIO_ReadPin>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d115      	bne.n	8002a70 <menu+0x1648>
 8002a44:	4b85      	ldr	r3, [pc, #532]	; (8002c5c <menu+0x1834>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	f083 0301 	eor.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00e      	beq.n	8002a70 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002a52:	4b7f      	ldr	r3, [pc, #508]	; (8002c50 <menu+0x1828>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	3301      	adds	r3, #1
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b7d      	ldr	r3, [pc, #500]	; (8002c50 <menu+0x1828>)
 8002a5c:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002a5e:	4b7c      	ldr	r3, [pc, #496]	; (8002c50 <menu+0x1828>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d902      	bls.n	8002a6c <menu+0x1644>
				kapi2Tip = 0;
 8002a66:	4b7a      	ldr	r3, [pc, #488]	; (8002c50 <menu+0x1828>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a6c:	f002 f974 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a70:	2104      	movs	r1, #4
 8002a72:	4879      	ldr	r0, [pc, #484]	; (8002c58 <menu+0x1830>)
 8002a74:	f006 fd52 	bl	800951c <HAL_GPIO_ReadPin>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d115      	bne.n	8002aaa <menu+0x1682>
 8002a7e:	4b77      	ldr	r3, [pc, #476]	; (8002c5c <menu+0x1834>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	f083 0301 	eor.w	r3, r3, #1
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00e      	beq.n	8002aaa <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002a8c:	4b70      	ldr	r3, [pc, #448]	; (8002c50 <menu+0x1828>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	4b6e      	ldr	r3, [pc, #440]	; (8002c50 <menu+0x1828>)
 8002a96:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002a98:	4b6d      	ldr	r3, [pc, #436]	; (8002c50 <menu+0x1828>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d902      	bls.n	8002aa6 <menu+0x167e>
		   		kapi2Tip = 2;
 8002aa0:	4b6b      	ldr	r3, [pc, #428]	; (8002c50 <menu+0x1828>)
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aa6:	f002 f957 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aaa:	2108      	movs	r1, #8
 8002aac:	486a      	ldr	r0, [pc, #424]	; (8002c58 <menu+0x1830>)
 8002aae:	f006 fd35 	bl	800951c <HAL_GPIO_ReadPin>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10d      	bne.n	8002ad4 <menu+0x16ac>
 8002ab8:	4b68      	ldr	r3, [pc, #416]	; (8002c5c <menu+0x1834>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	f083 0301 	eor.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d006      	beq.n	8002ad4 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002ac6:	4b62      	ldr	r3, [pc, #392]	; (8002c50 <menu+0x1828>)
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <menu+0x1838>)
 8002acc:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002ace:	4b65      	ldr	r3, [pc, #404]	; (8002c64 <menu+0x183c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002ad4:	4b64      	ldr	r3, [pc, #400]	; (8002c68 <menu+0x1840>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	d17f      	bne.n	8002bdc <menu+0x17b4>
		if(dilSecim == 0) {
 8002adc:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <menu+0x1844>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002ae4:	4a62      	ldr	r2, [pc, #392]	; (8002c70 <menu+0x1848>)
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	2001      	movs	r0, #1
 8002aea:	f005 f9f1 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002aee:	4a61      	ldr	r2, [pc, #388]	; (8002c74 <menu+0x184c>)
 8002af0:	2101      	movs	r1, #1
 8002af2:	2002      	movs	r0, #2
 8002af4:	f005 f9ec 	bl	8007ed0 <lcd_print>
 8002af8:	e00d      	b.n	8002b16 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002afa:	4b5c      	ldr	r3, [pc, #368]	; (8002c6c <menu+0x1844>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d109      	bne.n	8002b16 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002b02:	4a5d      	ldr	r2, [pc, #372]	; (8002c78 <menu+0x1850>)
 8002b04:	2101      	movs	r1, #1
 8002b06:	2001      	movs	r0, #1
 8002b08:	f005 f9e2 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002b0c:	4a5b      	ldr	r2, [pc, #364]	; (8002c7c <menu+0x1854>)
 8002b0e:	2101      	movs	r1, #1
 8002b10:	2002      	movs	r0, #2
 8002b12:	f005 f9dd 	bl	8007ed0 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002b16:	4b5a      	ldr	r3, [pc, #360]	; (8002c80 <menu+0x1858>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	220a      	movs	r2, #10
 8002b1c:	4959      	ldr	r1, [pc, #356]	; (8002c84 <menu+0x185c>)
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f009 fd84 	bl	800c62c <itoa>
		lcd_print(2,16,snum);
 8002b24:	4a57      	ldr	r2, [pc, #348]	; (8002c84 <menu+0x185c>)
 8002b26:	2110      	movs	r1, #16
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f005 f9d1 	bl	8007ed0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002b2e:	2102      	movs	r1, #2
 8002b30:	4849      	ldr	r0, [pc, #292]	; (8002c58 <menu+0x1830>)
 8002b32:	f006 fcf3 	bl	800951c <HAL_GPIO_ReadPin>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d119      	bne.n	8002b70 <menu+0x1748>
 8002b3c:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <menu+0x1834>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	f083 0301 	eor.w	r3, r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d012      	beq.n	8002b70 <menu+0x1748>
 8002b4a:	4b41      	ldr	r3, [pc, #260]	; (8002c50 <menu+0x1828>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10e      	bne.n	8002b70 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002b52:	4b4b      	ldr	r3, [pc, #300]	; (8002c80 <menu+0x1858>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4b49      	ldr	r3, [pc, #292]	; (8002c80 <menu+0x1858>)
 8002b5c:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002b5e:	4b48      	ldr	r3, [pc, #288]	; (8002c80 <menu+0x1858>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	d902      	bls.n	8002b6c <menu+0x1744>
				kapi2AcSure = 0;
 8002b66:	4b46      	ldr	r3, [pc, #280]	; (8002c80 <menu+0x1858>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b6c:	f002 f8f4 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002b70:	2104      	movs	r1, #4
 8002b72:	4839      	ldr	r0, [pc, #228]	; (8002c58 <menu+0x1830>)
 8002b74:	f006 fcd2 	bl	800951c <HAL_GPIO_ReadPin>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d119      	bne.n	8002bb2 <menu+0x178a>
 8002b7e:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <menu+0x1834>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	f083 0301 	eor.w	r3, r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d012      	beq.n	8002bb2 <menu+0x178a>
 8002b8c:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <menu+0x1828>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10e      	bne.n	8002bb2 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002b94:	4b3a      	ldr	r3, [pc, #232]	; (8002c80 <menu+0x1858>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	4b38      	ldr	r3, [pc, #224]	; (8002c80 <menu+0x1858>)
 8002b9e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002ba0:	4b37      	ldr	r3, [pc, #220]	; (8002c80 <menu+0x1858>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b06      	cmp	r3, #6
 8002ba6:	d902      	bls.n	8002bae <menu+0x1786>
		   		kapi2AcSure = 5;
 8002ba8:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <menu+0x1858>)
 8002baa:	2205      	movs	r2, #5
 8002bac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bae:	f002 f8d3 	bl	8004d58 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bb2:	2108      	movs	r1, #8
 8002bb4:	4828      	ldr	r0, [pc, #160]	; (8002c58 <menu+0x1830>)
 8002bb6:	f006 fcb1 	bl	800951c <HAL_GPIO_ReadPin>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10d      	bne.n	8002bdc <menu+0x17b4>
 8002bc0:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <menu+0x1834>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	f083 0301 	eor.w	r3, r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002bce:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <menu+0x1858>)
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <menu+0x1838>)
 8002bd4:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002bd6:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <menu+0x183c>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002bdc:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <menu+0x1840>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b0d      	cmp	r3, #13
 8002be2:	f040 80b5 	bne.w	8002d50 <menu+0x1928>
		if(dilSecim == 0) {
 8002be6:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <menu+0x1844>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d105      	bne.n	8002bfa <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002bee:	4a26      	ldr	r2, [pc, #152]	; (8002c88 <menu+0x1860>)
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f005 f96c 	bl	8007ed0 <lcd_print>
 8002bf8:	e008      	b.n	8002c0c <menu+0x17e4>
		} else if(dilSecim == 1){
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <menu+0x1844>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d104      	bne.n	8002c0c <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002c02:	4a22      	ldr	r2, [pc, #136]	; (8002c8c <menu+0x1864>)
 8002c04:	2101      	movs	r1, #1
 8002c06:	2001      	movs	r0, #1
 8002c08:	f005 f962 	bl	8007ed0 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002c0c:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <menu+0x1868>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d105      	bne.n	8002c20 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002c14:	4a1f      	ldr	r2, [pc, #124]	; (8002c94 <menu+0x186c>)
 8002c16:	2101      	movs	r1, #1
 8002c18:	2002      	movs	r0, #2
 8002c1a:	f005 f959 	bl	8007ed0 <lcd_print>
 8002c1e:	e048      	b.n	8002cb2 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <menu+0x1868>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d13b      	bne.n	8002ca0 <menu+0x1878>
			if(dilSecim == 0) {
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <menu+0x1844>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002c30:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <menu+0x1870>)
 8002c32:	2101      	movs	r1, #1
 8002c34:	2002      	movs	r0, #2
 8002c36:	f005 f94b 	bl	8007ed0 <lcd_print>
 8002c3a:	e03a      	b.n	8002cb2 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <menu+0x1844>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d136      	bne.n	8002cb2 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002c44:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <menu+0x1874>)
 8002c46:	2101      	movs	r1, #1
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f005 f941 	bl	8007ed0 <lcd_print>
 8002c4e:	e030      	b.n	8002cb2 <menu+0x188a>
 8002c50:	2000022a 	.word	0x2000022a
 8002c54:	0800d7fc 	.word	0x0800d7fc
 8002c58:	40010800 	.word	0x40010800
 8002c5c:	2000024f 	.word	0x2000024f
 8002c60:	20000118 	.word	0x20000118
 8002c64:	2000024c 	.word	0x2000024c
 8002c68:	20000220 	.word	0x20000220
 8002c6c:	20000241 	.word	0x20000241
 8002c70:	0800d87c 	.word	0x0800d87c
 8002c74:	0800d820 	.word	0x0800d820
 8002c78:	0800d890 	.word	0x0800d890
 8002c7c:	0800d844 	.word	0x0800d844
 8002c80:	2000023a 	.word	0x2000023a
 8002c84:	20000188 	.word	0x20000188
 8002c88:	0800d8a4 	.word	0x0800d8a4
 8002c8c:	0800d8b8 	.word	0x0800d8b8
 8002c90:	2000022b 	.word	0x2000022b
 8002c94:	0800d7c4 	.word	0x0800d7c4
 8002c98:	0800d7d8 	.word	0x0800d7d8
 8002c9c:	0800d7e8 	.word	0x0800d7e8
			}
		} else if(kapitablaTip == 2) {
 8002ca0:	4b5b      	ldr	r3, [pc, #364]	; (8002e10 <menu+0x19e8>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d104      	bne.n	8002cb2 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002ca8:	4a5a      	ldr	r2, [pc, #360]	; (8002e14 <menu+0x19ec>)
 8002caa:	2101      	movs	r1, #1
 8002cac:	2002      	movs	r0, #2
 8002cae:	f005 f90f 	bl	8007ed0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	4858      	ldr	r0, [pc, #352]	; (8002e18 <menu+0x19f0>)
 8002cb6:	f006 fc31 	bl	800951c <HAL_GPIO_ReadPin>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d115      	bne.n	8002cec <menu+0x18c4>
 8002cc0:	4b56      	ldr	r3, [pc, #344]	; (8002e1c <menu+0x19f4>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f083 0301 	eor.w	r3, r3, #1
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00e      	beq.n	8002cec <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002cce:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <menu+0x19e8>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	4b4e      	ldr	r3, [pc, #312]	; (8002e10 <menu+0x19e8>)
 8002cd8:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002cda:	4b4d      	ldr	r3, [pc, #308]	; (8002e10 <menu+0x19e8>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d902      	bls.n	8002ce8 <menu+0x18c0>
				kapitablaTip = 0;
 8002ce2:	4b4b      	ldr	r3, [pc, #300]	; (8002e10 <menu+0x19e8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ce8:	f002 f836 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cec:	2104      	movs	r1, #4
 8002cee:	484a      	ldr	r0, [pc, #296]	; (8002e18 <menu+0x19f0>)
 8002cf0:	f006 fc14 	bl	800951c <HAL_GPIO_ReadPin>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d115      	bne.n	8002d26 <menu+0x18fe>
 8002cfa:	4b48      	ldr	r3, [pc, #288]	; (8002e1c <menu+0x19f4>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	f083 0301 	eor.w	r3, r3, #1
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002d08:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <menu+0x19e8>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	4b3f      	ldr	r3, [pc, #252]	; (8002e10 <menu+0x19e8>)
 8002d12:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002d14:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <menu+0x19e8>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d902      	bls.n	8002d22 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002d1c:	4b3c      	ldr	r3, [pc, #240]	; (8002e10 <menu+0x19e8>)
 8002d1e:	2202      	movs	r2, #2
 8002d20:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d22:	f002 f819 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d26:	2108      	movs	r1, #8
 8002d28:	483b      	ldr	r0, [pc, #236]	; (8002e18 <menu+0x19f0>)
 8002d2a:	f006 fbf7 	bl	800951c <HAL_GPIO_ReadPin>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d10d      	bne.n	8002d50 <menu+0x1928>
 8002d34:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <menu+0x19f4>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	f083 0301 	eor.w	r3, r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002d42:	4b33      	ldr	r3, [pc, #204]	; (8002e10 <menu+0x19e8>)
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <menu+0x19f8>)
 8002d48:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002d4a:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <menu+0x19fc>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002d50:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <menu+0x1a00>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b0e      	cmp	r3, #14
 8002d56:	f040 80f2 	bne.w	8002f3e <menu+0x1b16>
		if(dilSecim == 0) {
 8002d5a:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <menu+0x1a04>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002d62:	4a33      	ldr	r2, [pc, #204]	; (8002e30 <menu+0x1a08>)
 8002d64:	2101      	movs	r1, #1
 8002d66:	2001      	movs	r0, #1
 8002d68:	f005 f8b2 	bl	8007ed0 <lcd_print>
 8002d6c:	e008      	b.n	8002d80 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002d6e:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <menu+0x1a04>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d104      	bne.n	8002d80 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002d76:	4a2f      	ldr	r2, [pc, #188]	; (8002e34 <menu+0x1a0c>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f005 f8a8 	bl	8007ed0 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002d80:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <menu+0x1a10>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d113      	bne.n	8002db0 <menu+0x1988>
			if(dilSecim == 0){
 8002d88:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <menu+0x1a04>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002d90:	4a2a      	ldr	r2, [pc, #168]	; (8002e3c <menu+0x1a14>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	2002      	movs	r0, #2
 8002d96:	f005 f89b 	bl	8007ed0 <lcd_print>
 8002d9a:	e071      	b.n	8002e80 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d9c:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <menu+0x1a04>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d16d      	bne.n	8002e80 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002da4:	4a26      	ldr	r2, [pc, #152]	; (8002e40 <menu+0x1a18>)
 8002da6:	2101      	movs	r1, #1
 8002da8:	2002      	movs	r0, #2
 8002daa:	f005 f891 	bl	8007ed0 <lcd_print>
 8002dae:	e067      	b.n	8002e80 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <menu+0x1a10>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d112      	bne.n	8002dde <menu+0x19b6>
			if(dilSecim == 0){
 8002db8:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <menu+0x1a04>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d104      	bne.n	8002dca <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002dc0:	4a20      	ldr	r2, [pc, #128]	; (8002e44 <menu+0x1a1c>)
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	2002      	movs	r0, #2
 8002dc6:	f005 f883 	bl	8007ed0 <lcd_print>
			}
			if(dilSecim == 1){
 8002dca:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <menu+0x1a04>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d156      	bne.n	8002e80 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002dd2:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <menu+0x1a20>)
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	2002      	movs	r0, #2
 8002dd8:	f005 f87a 	bl	8007ed0 <lcd_print>
 8002ddc:	e050      	b.n	8002e80 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <menu+0x1a10>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d136      	bne.n	8002e54 <menu+0x1a2c>
			if(dilSecim == 0){
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <menu+0x1a04>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d105      	bne.n	8002dfa <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002dee:	4a17      	ldr	r2, [pc, #92]	; (8002e4c <menu+0x1a24>)
 8002df0:	2101      	movs	r1, #1
 8002df2:	2002      	movs	r0, #2
 8002df4:	f005 f86c 	bl	8007ed0 <lcd_print>
 8002df8:	e042      	b.n	8002e80 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <menu+0x1a04>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d13e      	bne.n	8002e80 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002e02:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <menu+0x1a28>)
 8002e04:	2101      	movs	r1, #1
 8002e06:	2002      	movs	r0, #2
 8002e08:	f005 f862 	bl	8007ed0 <lcd_print>
 8002e0c:	e038      	b.n	8002e80 <menu+0x1a58>
 8002e0e:	bf00      	nop
 8002e10:	2000022b 	.word	0x2000022b
 8002e14:	0800d7fc 	.word	0x0800d7fc
 8002e18:	40010800 	.word	0x40010800
 8002e1c:	2000024f 	.word	0x2000024f
 8002e20:	20000118 	.word	0x20000118
 8002e24:	2000024c 	.word	0x2000024c
 8002e28:	20000220 	.word	0x20000220
 8002e2c:	20000241 	.word	0x20000241
 8002e30:	0800d8cc 	.word	0x0800d8cc
 8002e34:	0800d8e0 	.word	0x0800d8e0
 8002e38:	2000022d 	.word	0x2000022d
 8002e3c:	0800d8f4 	.word	0x0800d8f4
 8002e40:	0800d904 	.word	0x0800d904
 8002e44:	0800d914 	.word	0x0800d914
 8002e48:	0800d924 	.word	0x0800d924
 8002e4c:	0800d934 	.word	0x0800d934
 8002e50:	0800d948 	.word	0x0800d948
			}
		} else if(kapiTablaAcKonum == 3) {
 8002e54:	4b9b      	ldr	r3, [pc, #620]	; (80030c4 <menu+0x1c9c>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d111      	bne.n	8002e80 <menu+0x1a58>
			if(dilSecim == 0) {
 8002e5c:	4b9a      	ldr	r3, [pc, #616]	; (80030c8 <menu+0x1ca0>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d104      	bne.n	8002e6e <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002e64:	4a99      	ldr	r2, [pc, #612]	; (80030cc <menu+0x1ca4>)
 8002e66:	2101      	movs	r1, #1
 8002e68:	2002      	movs	r0, #2
 8002e6a:	f005 f831 	bl	8007ed0 <lcd_print>
			}
			if(dilSecim == 1) {
 8002e6e:	4b96      	ldr	r3, [pc, #600]	; (80030c8 <menu+0x1ca0>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d104      	bne.n	8002e80 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002e76:	4a96      	ldr	r2, [pc, #600]	; (80030d0 <menu+0x1ca8>)
 8002e78:	2101      	movs	r1, #1
 8002e7a:	2002      	movs	r0, #2
 8002e7c:	f005 f828 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e80:	2102      	movs	r1, #2
 8002e82:	4894      	ldr	r0, [pc, #592]	; (80030d4 <menu+0x1cac>)
 8002e84:	f006 fb4a 	bl	800951c <HAL_GPIO_ReadPin>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d115      	bne.n	8002eba <menu+0x1a92>
 8002e8e:	4b92      	ldr	r3, [pc, #584]	; (80030d8 <menu+0x1cb0>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	f083 0301 	eor.w	r3, r3, #1
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00e      	beq.n	8002eba <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002e9c:	4b89      	ldr	r3, [pc, #548]	; (80030c4 <menu+0x1c9c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	4b87      	ldr	r3, [pc, #540]	; (80030c4 <menu+0x1c9c>)
 8002ea6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002ea8:	4b86      	ldr	r3, [pc, #536]	; (80030c4 <menu+0x1c9c>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d902      	bls.n	8002eb6 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002eb0:	4b84      	ldr	r3, [pc, #528]	; (80030c4 <menu+0x1c9c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002eb6:	f001 ff4f 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eba:	2104      	movs	r1, #4
 8002ebc:	4885      	ldr	r0, [pc, #532]	; (80030d4 <menu+0x1cac>)
 8002ebe:	f006 fb2d 	bl	800951c <HAL_GPIO_ReadPin>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d115      	bne.n	8002ef4 <menu+0x1acc>
 8002ec8:	4b83      	ldr	r3, [pc, #524]	; (80030d8 <menu+0x1cb0>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	f083 0301 	eor.w	r3, r3, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00e      	beq.n	8002ef4 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002ed6:	4b7b      	ldr	r3, [pc, #492]	; (80030c4 <menu+0x1c9c>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4b79      	ldr	r3, [pc, #484]	; (80030c4 <menu+0x1c9c>)
 8002ee0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002ee2:	4b78      	ldr	r3, [pc, #480]	; (80030c4 <menu+0x1c9c>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d902      	bls.n	8002ef0 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002eea:	4b76      	ldr	r3, [pc, #472]	; (80030c4 <menu+0x1c9c>)
 8002eec:	2202      	movs	r2, #2
 8002eee:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ef0:	f001 ff32 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ef4:	2108      	movs	r1, #8
 8002ef6:	4877      	ldr	r0, [pc, #476]	; (80030d4 <menu+0x1cac>)
 8002ef8:	f006 fb10 	bl	800951c <HAL_GPIO_ReadPin>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d11d      	bne.n	8002f3e <menu+0x1b16>
 8002f02:	4b75      	ldr	r3, [pc, #468]	; (80030d8 <menu+0x1cb0>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	f083 0301 	eor.w	r3, r3, #1
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d016      	beq.n	8002f3e <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002f10:	4b6c      	ldr	r3, [pc, #432]	; (80030c4 <menu+0x1c9c>)
 8002f12:	781a      	ldrb	r2, [r3, #0]
 8002f14:	4b71      	ldr	r3, [pc, #452]	; (80030dc <menu+0x1cb4>)
 8002f16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002f1a:	4b6a      	ldr	r3, [pc, #424]	; (80030c4 <menu+0x1c9c>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <menu+0x1b02>
 8002f22:	4b68      	ldr	r3, [pc, #416]	; (80030c4 <menu+0x1c9c>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d106      	bne.n	8002f38 <menu+0x1b10>
				altLimit = 1;
 8002f2a:	4b6d      	ldr	r3, [pc, #436]	; (80030e0 <menu+0x1cb8>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002f30:	4b6b      	ldr	r3, [pc, #428]	; (80030e0 <menu+0x1cb8>)
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	4b69      	ldr	r3, [pc, #420]	; (80030dc <menu+0x1cb4>)
 8002f36:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002f38:	4b6a      	ldr	r3, [pc, #424]	; (80030e4 <menu+0x1cbc>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002f3e:	4b6a      	ldr	r3, [pc, #424]	; (80030e8 <menu+0x1cc0>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b0f      	cmp	r3, #15
 8002f44:	d17f      	bne.n	8003046 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002f46:	4b60      	ldr	r3, [pc, #384]	; (80030c8 <menu+0x1ca0>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002f4e:	4a67      	ldr	r2, [pc, #412]	; (80030ec <menu+0x1cc4>)
 8002f50:	2101      	movs	r1, #1
 8002f52:	2001      	movs	r0, #1
 8002f54:	f004 ffbc 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002f58:	4a65      	ldr	r2, [pc, #404]	; (80030f0 <menu+0x1cc8>)
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	2002      	movs	r0, #2
 8002f5e:	f004 ffb7 	bl	8007ed0 <lcd_print>
 8002f62:	e00d      	b.n	8002f80 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002f64:	4b58      	ldr	r3, [pc, #352]	; (80030c8 <menu+0x1ca0>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d109      	bne.n	8002f80 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002f6c:	4a61      	ldr	r2, [pc, #388]	; (80030f4 <menu+0x1ccc>)
 8002f6e:	2101      	movs	r1, #1
 8002f70:	2001      	movs	r0, #1
 8002f72:	f004 ffad 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002f76:	4a60      	ldr	r2, [pc, #384]	; (80030f8 <menu+0x1cd0>)
 8002f78:	2101      	movs	r1, #1
 8002f7a:	2002      	movs	r0, #2
 8002f7c:	f004 ffa8 	bl	8007ed0 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002f80:	4b5e      	ldr	r3, [pc, #376]	; (80030fc <menu+0x1cd4>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	220a      	movs	r2, #10
 8002f86:	495e      	ldr	r1, [pc, #376]	; (8003100 <menu+0x1cd8>)
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f009 fb4f 	bl	800c62c <itoa>
		lcd_print(2,16,snum);
 8002f8e:	4a5c      	ldr	r2, [pc, #368]	; (8003100 <menu+0x1cd8>)
 8002f90:	2110      	movs	r1, #16
 8002f92:	2002      	movs	r0, #2
 8002f94:	f004 ff9c 	bl	8007ed0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f98:	2102      	movs	r1, #2
 8002f9a:	484e      	ldr	r0, [pc, #312]	; (80030d4 <menu+0x1cac>)
 8002f9c:	f006 fabe 	bl	800951c <HAL_GPIO_ReadPin>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d119      	bne.n	8002fda <menu+0x1bb2>
 8002fa6:	4b4c      	ldr	r3, [pc, #304]	; (80030d8 <menu+0x1cb0>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	f083 0301 	eor.w	r3, r3, #1
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d012      	beq.n	8002fda <menu+0x1bb2>
 8002fb4:	4b53      	ldr	r3, [pc, #332]	; (8003104 <menu+0x1cdc>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10e      	bne.n	8002fda <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002fbc:	4b4f      	ldr	r3, [pc, #316]	; (80030fc <menu+0x1cd4>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	4b4d      	ldr	r3, [pc, #308]	; (80030fc <menu+0x1cd4>)
 8002fc6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002fc8:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <menu+0x1cd4>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b05      	cmp	r3, #5
 8002fce:	d902      	bls.n	8002fd6 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002fd0:	4b4a      	ldr	r3, [pc, #296]	; (80030fc <menu+0x1cd4>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fd6:	f001 febf 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002fda:	2104      	movs	r1, #4
 8002fdc:	483d      	ldr	r0, [pc, #244]	; (80030d4 <menu+0x1cac>)
 8002fde:	f006 fa9d 	bl	800951c <HAL_GPIO_ReadPin>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d119      	bne.n	800301c <menu+0x1bf4>
 8002fe8:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <menu+0x1cb0>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	f083 0301 	eor.w	r3, r3, #1
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d012      	beq.n	800301c <menu+0x1bf4>
 8002ff6:	4b43      	ldr	r3, [pc, #268]	; (8003104 <menu+0x1cdc>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10e      	bne.n	800301c <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002ffe:	4b3f      	ldr	r3, [pc, #252]	; (80030fc <menu+0x1cd4>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	3b01      	subs	r3, #1
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <menu+0x1cd4>)
 8003008:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800300a:	4b3c      	ldr	r3, [pc, #240]	; (80030fc <menu+0x1cd4>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b06      	cmp	r3, #6
 8003010:	d902      	bls.n	8003018 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8003012:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <menu+0x1cd4>)
 8003014:	2205      	movs	r2, #5
 8003016:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003018:	f001 fe9e 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800301c:	2108      	movs	r1, #8
 800301e:	482d      	ldr	r0, [pc, #180]	; (80030d4 <menu+0x1cac>)
 8003020:	f006 fa7c 	bl	800951c <HAL_GPIO_ReadPin>
 8003024:	4603      	mov	r3, r0
 8003026:	2b01      	cmp	r3, #1
 8003028:	d10d      	bne.n	8003046 <menu+0x1c1e>
 800302a:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <menu+0x1cb0>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	f083 0301 	eor.w	r3, r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d006      	beq.n	8003046 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8003038:	4b30      	ldr	r3, [pc, #192]	; (80030fc <menu+0x1cd4>)
 800303a:	781a      	ldrb	r2, [r3, #0]
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <menu+0x1cb4>)
 800303e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8003040:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <menu+0x1cbc>)
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8003046:	4b28      	ldr	r3, [pc, #160]	; (80030e8 <menu+0x1cc0>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b10      	cmp	r3, #16
 800304c:	f040 80bc 	bne.w	80031c8 <menu+0x1da0>
		if(dilSecim == 0) {
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <menu+0x1ca0>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d105      	bne.n	8003064 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003058:	4a2b      	ldr	r2, [pc, #172]	; (8003108 <menu+0x1ce0>)
 800305a:	2101      	movs	r1, #1
 800305c:	2001      	movs	r0, #1
 800305e:	f004 ff37 	bl	8007ed0 <lcd_print>
 8003062:	e008      	b.n	8003076 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8003064:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <menu+0x1ca0>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d104      	bne.n	8003076 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 800306c:	4a27      	ldr	r2, [pc, #156]	; (800310c <menu+0x1ce4>)
 800306e:	2101      	movs	r1, #1
 8003070:	2001      	movs	r0, #1
 8003072:	f004 ff2d 	bl	8007ed0 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8003076:	4b26      	ldr	r3, [pc, #152]	; (8003110 <menu+0x1ce8>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d113      	bne.n	80030a6 <menu+0x1c7e>
			if(dilSecim == 0) {
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <menu+0x1ca0>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d105      	bne.n	8003092 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8003086:	4a11      	ldr	r2, [pc, #68]	; (80030cc <menu+0x1ca4>)
 8003088:	2101      	movs	r1, #1
 800308a:	2002      	movs	r0, #2
 800308c:	f004 ff20 	bl	8007ed0 <lcd_print>
 8003090:	e04b      	b.n	800312a <menu+0x1d02>
			} else if(dilSecim == 1) {
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <menu+0x1ca0>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d147      	bne.n	800312a <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 800309a:	4a0d      	ldr	r2, [pc, #52]	; (80030d0 <menu+0x1ca8>)
 800309c:	2101      	movs	r1, #1
 800309e:	2002      	movs	r0, #2
 80030a0:	f004 ff16 	bl	8007ed0 <lcd_print>
 80030a4:	e041      	b.n	800312a <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 80030a6:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <menu+0x1ce8>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d13d      	bne.n	800312a <menu+0x1d02>
			if(dilSecim == 0) {
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <menu+0x1ca0>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d130      	bne.n	8003118 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 80030b6:	4a17      	ldr	r2, [pc, #92]	; (8003114 <menu+0x1cec>)
 80030b8:	2101      	movs	r1, #1
 80030ba:	2002      	movs	r0, #2
 80030bc:	f004 ff08 	bl	8007ed0 <lcd_print>
 80030c0:	e033      	b.n	800312a <menu+0x1d02>
 80030c2:	bf00      	nop
 80030c4:	2000022d 	.word	0x2000022d
 80030c8:	20000241 	.word	0x20000241
 80030cc:	0800d5bc 	.word	0x0800d5bc
 80030d0:	0800d5d0 	.word	0x0800d5d0
 80030d4:	40010800 	.word	0x40010800
 80030d8:	2000024f 	.word	0x2000024f
 80030dc:	20000118 	.word	0x20000118
 80030e0:	20000226 	.word	0x20000226
 80030e4:	2000024c 	.word	0x2000024c
 80030e8:	20000220 	.word	0x20000220
 80030ec:	0800d95c 	.word	0x0800d95c
 80030f0:	0800d820 	.word	0x0800d820
 80030f4:	0800d970 	.word	0x0800d970
 80030f8:	0800d844 	.word	0x0800d844
 80030fc:	2000023b 	.word	0x2000023b
 8003100:	20000188 	.word	0x20000188
 8003104:	2000022b 	.word	0x2000022b
 8003108:	0800d984 	.word	0x0800d984
 800310c:	0800d998 	.word	0x0800d998
 8003110:	2000022e 	.word	0x2000022e
 8003114:	0800d61c 	.word	0x0800d61c
			} else if(dilSecim == 1) {
 8003118:	4b99      	ldr	r3, [pc, #612]	; (8003380 <menu+0x1f58>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d104      	bne.n	800312a <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8003120:	4a98      	ldr	r2, [pc, #608]	; (8003384 <menu+0x1f5c>)
 8003122:	2101      	movs	r1, #1
 8003124:	2002      	movs	r0, #2
 8003126:	f004 fed3 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800312a:	2102      	movs	r1, #2
 800312c:	4896      	ldr	r0, [pc, #600]	; (8003388 <menu+0x1f60>)
 800312e:	f006 f9f5 	bl	800951c <HAL_GPIO_ReadPin>
 8003132:	4603      	mov	r3, r0
 8003134:	2b01      	cmp	r3, #1
 8003136:	d115      	bne.n	8003164 <menu+0x1d3c>
 8003138:	4b94      	ldr	r3, [pc, #592]	; (800338c <menu+0x1f64>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	f083 0301 	eor.w	r3, r3, #1
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00e      	beq.n	8003164 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8003146:	4b92      	ldr	r3, [pc, #584]	; (8003390 <menu+0x1f68>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	3301      	adds	r3, #1
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4b90      	ldr	r3, [pc, #576]	; (8003390 <menu+0x1f68>)
 8003150:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8003152:	4b8f      	ldr	r3, [pc, #572]	; (8003390 <menu+0x1f68>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d902      	bls.n	8003160 <menu+0x1d38>
				yukariYavasLimit = 0;
 800315a:	4b8d      	ldr	r3, [pc, #564]	; (8003390 <menu+0x1f68>)
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003160:	f001 fdfa 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003164:	2104      	movs	r1, #4
 8003166:	4888      	ldr	r0, [pc, #544]	; (8003388 <menu+0x1f60>)
 8003168:	f006 f9d8 	bl	800951c <HAL_GPIO_ReadPin>
 800316c:	4603      	mov	r3, r0
 800316e:	2b01      	cmp	r3, #1
 8003170:	d115      	bne.n	800319e <menu+0x1d76>
 8003172:	4b86      	ldr	r3, [pc, #536]	; (800338c <menu+0x1f64>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	f083 0301 	eor.w	r3, r3, #1
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00e      	beq.n	800319e <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003180:	4b83      	ldr	r3, [pc, #524]	; (8003390 <menu+0x1f68>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	3b01      	subs	r3, #1
 8003186:	b2da      	uxtb	r2, r3
 8003188:	4b81      	ldr	r3, [pc, #516]	; (8003390 <menu+0x1f68>)
 800318a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 800318c:	4b80      	ldr	r3, [pc, #512]	; (8003390 <menu+0x1f68>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003194:	4b7e      	ldr	r3, [pc, #504]	; (8003390 <menu+0x1f68>)
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800319a:	f001 fddd 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800319e:	2108      	movs	r1, #8
 80031a0:	4879      	ldr	r0, [pc, #484]	; (8003388 <menu+0x1f60>)
 80031a2:	f006 f9bb 	bl	800951c <HAL_GPIO_ReadPin>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d10d      	bne.n	80031c8 <menu+0x1da0>
 80031ac:	4b77      	ldr	r3, [pc, #476]	; (800338c <menu+0x1f64>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	f083 0301 	eor.w	r3, r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d006      	beq.n	80031c8 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80031ba:	4b75      	ldr	r3, [pc, #468]	; (8003390 <menu+0x1f68>)
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	4b75      	ldr	r3, [pc, #468]	; (8003394 <menu+0x1f6c>)
 80031c0:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80031c2:	4b75      	ldr	r3, [pc, #468]	; (8003398 <menu+0x1f70>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80031c8:	4b74      	ldr	r3, [pc, #464]	; (800339c <menu+0x1f74>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b11      	cmp	r3, #17
 80031ce:	f040 80c3 	bne.w	8003358 <menu+0x1f30>
		if(dilSecim == 0) {
 80031d2:	4b6b      	ldr	r3, [pc, #428]	; (8003380 <menu+0x1f58>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d105      	bne.n	80031e6 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80031da:	4a71      	ldr	r2, [pc, #452]	; (80033a0 <menu+0x1f78>)
 80031dc:	2101      	movs	r1, #1
 80031de:	2001      	movs	r0, #1
 80031e0:	f004 fe76 	bl	8007ed0 <lcd_print>
 80031e4:	e008      	b.n	80031f8 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 80031e6:	4b66      	ldr	r3, [pc, #408]	; (8003380 <menu+0x1f58>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d104      	bne.n	80031f8 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80031ee:	4a6d      	ldr	r2, [pc, #436]	; (80033a4 <menu+0x1f7c>)
 80031f0:	2101      	movs	r1, #1
 80031f2:	2001      	movs	r0, #1
 80031f4:	f004 fe6c 	bl	8007ed0 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80031f8:	4b6b      	ldr	r3, [pc, #428]	; (80033a8 <menu+0x1f80>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d113      	bne.n	8003228 <menu+0x1e00>
			if(dilSecim == 0){
 8003200:	4b5f      	ldr	r3, [pc, #380]	; (8003380 <menu+0x1f58>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003208:	4a68      	ldr	r2, [pc, #416]	; (80033ac <menu+0x1f84>)
 800320a:	2101      	movs	r1, #1
 800320c:	2002      	movs	r0, #2
 800320e:	f004 fe5f 	bl	8007ed0 <lcd_print>
 8003212:	e038      	b.n	8003286 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003214:	4b5a      	ldr	r3, [pc, #360]	; (8003380 <menu+0x1f58>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d134      	bne.n	8003286 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 800321c:	4a64      	ldr	r2, [pc, #400]	; (80033b0 <menu+0x1f88>)
 800321e:	2101      	movs	r1, #1
 8003220:	2002      	movs	r0, #2
 8003222:	f004 fe55 	bl	8007ed0 <lcd_print>
 8003226:	e02e      	b.n	8003286 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003228:	4b5f      	ldr	r3, [pc, #380]	; (80033a8 <menu+0x1f80>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d113      	bne.n	8003258 <menu+0x1e30>
			if(dilSecim == 0){
 8003230:	4b53      	ldr	r3, [pc, #332]	; (8003380 <menu+0x1f58>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003238:	4a5e      	ldr	r2, [pc, #376]	; (80033b4 <menu+0x1f8c>)
 800323a:	2101      	movs	r1, #1
 800323c:	2002      	movs	r0, #2
 800323e:	f004 fe47 	bl	8007ed0 <lcd_print>
 8003242:	e020      	b.n	8003286 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003244:	4b4e      	ldr	r3, [pc, #312]	; (8003380 <menu+0x1f58>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d11c      	bne.n	8003286 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 800324c:	4a5a      	ldr	r2, [pc, #360]	; (80033b8 <menu+0x1f90>)
 800324e:	2101      	movs	r1, #1
 8003250:	2002      	movs	r0, #2
 8003252:	f004 fe3d 	bl	8007ed0 <lcd_print>
 8003256:	e016      	b.n	8003286 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003258:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <menu+0x1f80>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d112      	bne.n	8003286 <menu+0x1e5e>
			if(dilSecim == 0) {
 8003260:	4b47      	ldr	r3, [pc, #284]	; (8003380 <menu+0x1f58>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003268:	4a54      	ldr	r2, [pc, #336]	; (80033bc <menu+0x1f94>)
 800326a:	2101      	movs	r1, #1
 800326c:	2002      	movs	r0, #2
 800326e:	f004 fe2f 	bl	8007ed0 <lcd_print>
 8003272:	e008      	b.n	8003286 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003274:	4b42      	ldr	r3, [pc, #264]	; (8003380 <menu+0x1f58>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d104      	bne.n	8003286 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 800327c:	4a50      	ldr	r2, [pc, #320]	; (80033c0 <menu+0x1f98>)
 800327e:	2101      	movs	r1, #1
 8003280:	2002      	movs	r0, #2
 8003282:	f004 fe25 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003286:	2102      	movs	r1, #2
 8003288:	483f      	ldr	r0, [pc, #252]	; (8003388 <menu+0x1f60>)
 800328a:	f006 f947 	bl	800951c <HAL_GPIO_ReadPin>
 800328e:	4603      	mov	r3, r0
 8003290:	2b01      	cmp	r3, #1
 8003292:	d115      	bne.n	80032c0 <menu+0x1e98>
 8003294:	4b3d      	ldr	r3, [pc, #244]	; (800338c <menu+0x1f64>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	f083 0301 	eor.w	r3, r3, #1
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00e      	beq.n	80032c0 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80032a2:	4b41      	ldr	r3, [pc, #260]	; (80033a8 <menu+0x1f80>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	3301      	adds	r3, #1
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <menu+0x1f80>)
 80032ac:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80032ae:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <menu+0x1f80>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d902      	bls.n	80032bc <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80032b6:	4b3c      	ldr	r3, [pc, #240]	; (80033a8 <menu+0x1f80>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032bc:	f001 fd4c 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032c0:	2104      	movs	r1, #4
 80032c2:	4831      	ldr	r0, [pc, #196]	; (8003388 <menu+0x1f60>)
 80032c4:	f006 f92a 	bl	800951c <HAL_GPIO_ReadPin>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d115      	bne.n	80032fa <menu+0x1ed2>
 80032ce:	4b2f      	ldr	r3, [pc, #188]	; (800338c <menu+0x1f64>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	f083 0301 	eor.w	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00e      	beq.n	80032fa <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80032dc:	4b32      	ldr	r3, [pc, #200]	; (80033a8 <menu+0x1f80>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	4b30      	ldr	r3, [pc, #192]	; (80033a8 <menu+0x1f80>)
 80032e6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80032e8:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <menu+0x1f80>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d902      	bls.n	80032f6 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80032f0:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <menu+0x1f80>)
 80032f2:	2202      	movs	r2, #2
 80032f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032f6:	f001 fd2f 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032fa:	2108      	movs	r1, #8
 80032fc:	4822      	ldr	r0, [pc, #136]	; (8003388 <menu+0x1f60>)
 80032fe:	f006 f90d 	bl	800951c <HAL_GPIO_ReadPin>
 8003302:	4603      	mov	r3, r0
 8003304:	2b01      	cmp	r3, #1
 8003306:	d127      	bne.n	8003358 <menu+0x1f30>
 8003308:	4b20      	ldr	r3, [pc, #128]	; (800338c <menu+0x1f64>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	f083 0301 	eor.w	r3, r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d020      	beq.n	8003358 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <menu+0x1f80>)
 8003318:	781a      	ldrb	r2, [r3, #0]
 800331a:	4b1e      	ldr	r3, [pc, #120]	; (8003394 <menu+0x1f6c>)
 800331c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800331e:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <menu+0x1f80>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d003      	beq.n	800332e <menu+0x1f06>
 8003326:	4b20      	ldr	r3, [pc, #128]	; (80033a8 <menu+0x1f80>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d106      	bne.n	800333c <menu+0x1f14>
				calismaSekli = 0;
 800332e:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <menu+0x1f9c>)
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003334:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <menu+0x1f9c>)
 8003336:	781a      	ldrb	r2, [r3, #0]
 8003338:	4b16      	ldr	r3, [pc, #88]	; (8003394 <menu+0x1f6c>)
 800333a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <menu+0x1f80>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d106      	bne.n	8003352 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003344:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <menu+0x1fa0>)
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800334a:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <menu+0x1fa0>)
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <menu+0x1f6c>)
 8003350:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <menu+0x1f70>)
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <menu+0x1f74>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b12      	cmp	r3, #18
 800335e:	f040 80d5 	bne.w	800350c <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <menu+0x1f80>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d13c      	bne.n	80033e4 <menu+0x1fbc>
			if(dilSecim == 0) {
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <menu+0x1f58>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d12e      	bne.n	80033d0 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003372:	4a16      	ldr	r2, [pc, #88]	; (80033cc <menu+0x1fa4>)
 8003374:	2101      	movs	r1, #1
 8003376:	2001      	movs	r0, #1
 8003378:	f004 fdaa 	bl	8007ed0 <lcd_print>
 800337c:	e048      	b.n	8003410 <menu+0x1fe8>
 800337e:	bf00      	nop
 8003380:	20000241 	.word	0x20000241
 8003384:	0800d630 	.word	0x0800d630
 8003388:	40010800 	.word	0x40010800
 800338c:	2000024f 	.word	0x2000024f
 8003390:	2000022e 	.word	0x2000022e
 8003394:	20000118 	.word	0x20000118
 8003398:	2000024c 	.word	0x2000024c
 800339c:	20000220 	.word	0x20000220
 80033a0:	0800d9ac 	.word	0x0800d9ac
 80033a4:	0800d9c0 	.word	0x0800d9c0
 80033a8:	2000022f 	.word	0x2000022f
 80033ac:	0800d9d4 	.word	0x0800d9d4
 80033b0:	0800d9e4 	.word	0x0800d9e4
 80033b4:	0800d9f4 	.word	0x0800d9f4
 80033b8:	0800da04 	.word	0x0800da04
 80033bc:	0800d5bc 	.word	0x0800d5bc
 80033c0:	0800d5d0 	.word	0x0800d5d0
 80033c4:	20000221 	.word	0x20000221
 80033c8:	20000232 	.word	0x20000232
 80033cc:	0800da14 	.word	0x0800da14
			} else if(dilSecim == 1) {
 80033d0:	4b7b      	ldr	r3, [pc, #492]	; (80035c0 <menu+0x2198>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d11b      	bne.n	8003410 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80033d8:	4a7a      	ldr	r2, [pc, #488]	; (80035c4 <menu+0x219c>)
 80033da:	2101      	movs	r1, #1
 80033dc:	2001      	movs	r0, #1
 80033de:	f004 fd77 	bl	8007ed0 <lcd_print>
 80033e2:	e015      	b.n	8003410 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80033e4:	4b78      	ldr	r3, [pc, #480]	; (80035c8 <menu+0x21a0>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d111      	bne.n	8003410 <menu+0x1fe8>
			if(dilSecim == 0){
 80033ec:	4b74      	ldr	r3, [pc, #464]	; (80035c0 <menu+0x2198>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d104      	bne.n	80033fe <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80033f4:	4a75      	ldr	r2, [pc, #468]	; (80035cc <menu+0x21a4>)
 80033f6:	2101      	movs	r1, #1
 80033f8:	2001      	movs	r0, #1
 80033fa:	f004 fd69 	bl	8007ed0 <lcd_print>
			}
			if(dilSecim == 1){
 80033fe:	4b70      	ldr	r3, [pc, #448]	; (80035c0 <menu+0x2198>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d104      	bne.n	8003410 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003406:	4a72      	ldr	r2, [pc, #456]	; (80035d0 <menu+0x21a8>)
 8003408:	2101      	movs	r1, #1
 800340a:	2001      	movs	r0, #1
 800340c:	f004 fd60 	bl	8007ed0 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003410:	4b70      	ldr	r3, [pc, #448]	; (80035d4 <menu+0x21ac>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d113      	bne.n	8003440 <menu+0x2018>
			if(dilSecim == 0) {
 8003418:	4b69      	ldr	r3, [pc, #420]	; (80035c0 <menu+0x2198>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d105      	bne.n	800342c <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003420:	4a6d      	ldr	r2, [pc, #436]	; (80035d8 <menu+0x21b0>)
 8003422:	2101      	movs	r1, #1
 8003424:	2002      	movs	r0, #2
 8003426:	f004 fd53 	bl	8007ed0 <lcd_print>
 800342a:	e020      	b.n	800346e <menu+0x2046>
			} else if(dilSecim == 1){
 800342c:	4b64      	ldr	r3, [pc, #400]	; (80035c0 <menu+0x2198>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d11c      	bne.n	800346e <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003434:	4a69      	ldr	r2, [pc, #420]	; (80035dc <menu+0x21b4>)
 8003436:	2101      	movs	r1, #1
 8003438:	2002      	movs	r0, #2
 800343a:	f004 fd49 	bl	8007ed0 <lcd_print>
 800343e:	e016      	b.n	800346e <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003440:	4b64      	ldr	r3, [pc, #400]	; (80035d4 <menu+0x21ac>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d112      	bne.n	800346e <menu+0x2046>
			if(dilSecim == 0){
 8003448:	4b5d      	ldr	r3, [pc, #372]	; (80035c0 <menu+0x2198>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003450:	4a63      	ldr	r2, [pc, #396]	; (80035e0 <menu+0x21b8>)
 8003452:	2101      	movs	r1, #1
 8003454:	2002      	movs	r0, #2
 8003456:	f004 fd3b 	bl	8007ed0 <lcd_print>
 800345a:	e008      	b.n	800346e <menu+0x2046>
			} else if(dilSecim == 1){
 800345c:	4b58      	ldr	r3, [pc, #352]	; (80035c0 <menu+0x2198>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d104      	bne.n	800346e <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003464:	4a5f      	ldr	r2, [pc, #380]	; (80035e4 <menu+0x21bc>)
 8003466:	2101      	movs	r1, #1
 8003468:	2002      	movs	r0, #2
 800346a:	f004 fd31 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800346e:	2102      	movs	r1, #2
 8003470:	485d      	ldr	r0, [pc, #372]	; (80035e8 <menu+0x21c0>)
 8003472:	f006 f853 	bl	800951c <HAL_GPIO_ReadPin>
 8003476:	4603      	mov	r3, r0
 8003478:	2b01      	cmp	r3, #1
 800347a:	d115      	bne.n	80034a8 <menu+0x2080>
 800347c:	4b5b      	ldr	r3, [pc, #364]	; (80035ec <menu+0x21c4>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	f083 0301 	eor.w	r3, r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00e      	beq.n	80034a8 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800348a:	4b52      	ldr	r3, [pc, #328]	; (80035d4 <menu+0x21ac>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	3301      	adds	r3, #1
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4b50      	ldr	r3, [pc, #320]	; (80035d4 <menu+0x21ac>)
 8003494:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003496:	4b4f      	ldr	r3, [pc, #316]	; (80035d4 <menu+0x21ac>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d902      	bls.n	80034a4 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800349e:	4b4d      	ldr	r3, [pc, #308]	; (80035d4 <menu+0x21ac>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034a4:	f001 fc58 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034a8:	2104      	movs	r1, #4
 80034aa:	484f      	ldr	r0, [pc, #316]	; (80035e8 <menu+0x21c0>)
 80034ac:	f006 f836 	bl	800951c <HAL_GPIO_ReadPin>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d115      	bne.n	80034e2 <menu+0x20ba>
 80034b6:	4b4d      	ldr	r3, [pc, #308]	; (80035ec <menu+0x21c4>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	f083 0301 	eor.w	r3, r3, #1
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00e      	beq.n	80034e2 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80034c4:	4b43      	ldr	r3, [pc, #268]	; (80035d4 <menu+0x21ac>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	4b41      	ldr	r3, [pc, #260]	; (80035d4 <menu+0x21ac>)
 80034ce:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80034d0:	4b40      	ldr	r3, [pc, #256]	; (80035d4 <menu+0x21ac>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80034d8:	4b3e      	ldr	r3, [pc, #248]	; (80035d4 <menu+0x21ac>)
 80034da:	2201      	movs	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034de:	f001 fc3b 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034e2:	2108      	movs	r1, #8
 80034e4:	4840      	ldr	r0, [pc, #256]	; (80035e8 <menu+0x21c0>)
 80034e6:	f006 f819 	bl	800951c <HAL_GPIO_ReadPin>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d10d      	bne.n	800350c <menu+0x20e4>
 80034f0:	4b3e      	ldr	r3, [pc, #248]	; (80035ec <menu+0x21c4>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	f083 0301 	eor.w	r3, r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d006      	beq.n	800350c <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80034fe:	4b35      	ldr	r3, [pc, #212]	; (80035d4 <menu+0x21ac>)
 8003500:	781a      	ldrb	r2, [r3, #0]
 8003502:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <menu+0x21c8>)
 8003504:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003506:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <menu+0x21cc>)
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800350c:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <menu+0x21d0>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b13      	cmp	r3, #19
 8003512:	f040 80d5 	bne.w	80036c0 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003516:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <menu+0x21a0>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d113      	bne.n	8003546 <menu+0x211e>
			if(dilSecim == 0) {
 800351e:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <menu+0x2198>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d105      	bne.n	8003532 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003526:	4a35      	ldr	r2, [pc, #212]	; (80035fc <menu+0x21d4>)
 8003528:	2101      	movs	r1, #1
 800352a:	2001      	movs	r0, #1
 800352c:	f004 fcd0 	bl	8007ed0 <lcd_print>
 8003530:	e01f      	b.n	8003572 <menu+0x214a>
			} else if(dilSecim == 1) {
 8003532:	4b23      	ldr	r3, [pc, #140]	; (80035c0 <menu+0x2198>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d11b      	bne.n	8003572 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800353a:	4a31      	ldr	r2, [pc, #196]	; (8003600 <menu+0x21d8>)
 800353c:	2101      	movs	r1, #1
 800353e:	2001      	movs	r0, #1
 8003540:	f004 fcc6 	bl	8007ed0 <lcd_print>
 8003544:	e015      	b.n	8003572 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003546:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <menu+0x21a0>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d111      	bne.n	8003572 <menu+0x214a>
			if(dilSecim == 0) {
 800354e:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <menu+0x2198>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d104      	bne.n	8003560 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003556:	4a2b      	ldr	r2, [pc, #172]	; (8003604 <menu+0x21dc>)
 8003558:	2101      	movs	r1, #1
 800355a:	2001      	movs	r0, #1
 800355c:	f004 fcb8 	bl	8007ed0 <lcd_print>
			}
			if(dilSecim == 1) {
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <menu+0x2198>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d104      	bne.n	8003572 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003568:	4a27      	ldr	r2, [pc, #156]	; (8003608 <menu+0x21e0>)
 800356a:	2101      	movs	r1, #1
 800356c:	2001      	movs	r0, #1
 800356e:	f004 fcaf 	bl	8007ed0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <menu+0x21e4>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d113      	bne.n	80035a2 <menu+0x217a>
			if(dilSecim == 0) {
 800357a:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <menu+0x2198>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d105      	bne.n	800358e <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8003582:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <menu+0x21b0>)
 8003584:	2101      	movs	r1, #1
 8003586:	2002      	movs	r0, #2
 8003588:	f004 fca2 	bl	8007ed0 <lcd_print>
 800358c:	e049      	b.n	8003622 <menu+0x21fa>
			} else if(dilSecim == 1) {
 800358e:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <menu+0x2198>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d145      	bne.n	8003622 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003596:	4a11      	ldr	r2, [pc, #68]	; (80035dc <menu+0x21b4>)
 8003598:	2101      	movs	r1, #1
 800359a:	2002      	movs	r0, #2
 800359c:	f004 fc98 	bl	8007ed0 <lcd_print>
 80035a0:	e03f      	b.n	8003622 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80035a2:	4b1a      	ldr	r3, [pc, #104]	; (800360c <menu+0x21e4>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d13b      	bne.n	8003622 <menu+0x21fa>
			if(dilSecim == 0) {
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <menu+0x2198>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d12e      	bne.n	8003610 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80035b2:	4a0b      	ldr	r2, [pc, #44]	; (80035e0 <menu+0x21b8>)
 80035b4:	2101      	movs	r1, #1
 80035b6:	2002      	movs	r0, #2
 80035b8:	f004 fc8a 	bl	8007ed0 <lcd_print>
 80035bc:	e031      	b.n	8003622 <menu+0x21fa>
 80035be:	bf00      	nop
 80035c0:	20000241 	.word	0x20000241
 80035c4:	0800da28 	.word	0x0800da28
 80035c8:	2000022f 	.word	0x2000022f
 80035cc:	0800da38 	.word	0x0800da38
 80035d0:	0800da4c 	.word	0x0800da4c
 80035d4:	20000230 	.word	0x20000230
 80035d8:	0800d5bc 	.word	0x0800d5bc
 80035dc:	0800d5d0 	.word	0x0800d5d0
 80035e0:	0800d61c 	.word	0x0800d61c
 80035e4:	0800d630 	.word	0x0800d630
 80035e8:	40010800 	.word	0x40010800
 80035ec:	2000024f 	.word	0x2000024f
 80035f0:	20000118 	.word	0x20000118
 80035f4:	2000024c 	.word	0x2000024c
 80035f8:	20000220 	.word	0x20000220
 80035fc:	0800da60 	.word	0x0800da60
 8003600:	0800da74 	.word	0x0800da74
 8003604:	0800da88 	.word	0x0800da88
 8003608:	0800da9c 	.word	0x0800da9c
 800360c:	20000231 	.word	0x20000231
			} else if(dilSecim == 1) {
 8003610:	4b90      	ldr	r3, [pc, #576]	; (8003854 <menu+0x242c>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d104      	bne.n	8003622 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003618:	4a8f      	ldr	r2, [pc, #572]	; (8003858 <menu+0x2430>)
 800361a:	2101      	movs	r1, #1
 800361c:	2002      	movs	r0, #2
 800361e:	f004 fc57 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003622:	2102      	movs	r1, #2
 8003624:	488d      	ldr	r0, [pc, #564]	; (800385c <menu+0x2434>)
 8003626:	f005 ff79 	bl	800951c <HAL_GPIO_ReadPin>
 800362a:	4603      	mov	r3, r0
 800362c:	2b01      	cmp	r3, #1
 800362e:	d115      	bne.n	800365c <menu+0x2234>
 8003630:	4b8b      	ldr	r3, [pc, #556]	; (8003860 <menu+0x2438>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	f083 0301 	eor.w	r3, r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00e      	beq.n	800365c <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800363e:	4b89      	ldr	r3, [pc, #548]	; (8003864 <menu+0x243c>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	b2da      	uxtb	r2, r3
 8003646:	4b87      	ldr	r3, [pc, #540]	; (8003864 <menu+0x243c>)
 8003648:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800364a:	4b86      	ldr	r3, [pc, #536]	; (8003864 <menu+0x243c>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d902      	bls.n	8003658 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8003652:	4b84      	ldr	r3, [pc, #528]	; (8003864 <menu+0x243c>)
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003658:	f001 fb7e 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800365c:	2104      	movs	r1, #4
 800365e:	487f      	ldr	r0, [pc, #508]	; (800385c <menu+0x2434>)
 8003660:	f005 ff5c 	bl	800951c <HAL_GPIO_ReadPin>
 8003664:	4603      	mov	r3, r0
 8003666:	2b01      	cmp	r3, #1
 8003668:	d115      	bne.n	8003696 <menu+0x226e>
 800366a:	4b7d      	ldr	r3, [pc, #500]	; (8003860 <menu+0x2438>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	f083 0301 	eor.w	r3, r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00e      	beq.n	8003696 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003678:	4b7a      	ldr	r3, [pc, #488]	; (8003864 <menu+0x243c>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	3b01      	subs	r3, #1
 800367e:	b2da      	uxtb	r2, r3
 8003680:	4b78      	ldr	r3, [pc, #480]	; (8003864 <menu+0x243c>)
 8003682:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003684:	4b77      	ldr	r3, [pc, #476]	; (8003864 <menu+0x243c>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 800368c:	4b75      	ldr	r3, [pc, #468]	; (8003864 <menu+0x243c>)
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003692:	f001 fb61 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003696:	2108      	movs	r1, #8
 8003698:	4870      	ldr	r0, [pc, #448]	; (800385c <menu+0x2434>)
 800369a:	f005 ff3f 	bl	800951c <HAL_GPIO_ReadPin>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10d      	bne.n	80036c0 <menu+0x2298>
 80036a4:	4b6e      	ldr	r3, [pc, #440]	; (8003860 <menu+0x2438>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	f083 0301 	eor.w	r3, r3, #1
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 80036b2:	4b6c      	ldr	r3, [pc, #432]	; (8003864 <menu+0x243c>)
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	4b6c      	ldr	r3, [pc, #432]	; (8003868 <menu+0x2440>)
 80036b8:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80036ba:	4b6c      	ldr	r3, [pc, #432]	; (800386c <menu+0x2444>)
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80036c0:	4b6b      	ldr	r3, [pc, #428]	; (8003870 <menu+0x2448>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b14      	cmp	r3, #20
 80036c6:	f040 80b5 	bne.w	8003834 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80036ca:	4b6a      	ldr	r3, [pc, #424]	; (8003874 <menu+0x244c>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d113      	bne.n	80036fa <menu+0x22d2>
			if(dilSecim == 0) {
 80036d2:	4b60      	ldr	r3, [pc, #384]	; (8003854 <menu+0x242c>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d105      	bne.n	80036e6 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80036da:	4a67      	ldr	r2, [pc, #412]	; (8003878 <menu+0x2450>)
 80036dc:	2101      	movs	r1, #1
 80036de:	2001      	movs	r0, #1
 80036e0:	f004 fbf6 	bl	8007ed0 <lcd_print>
 80036e4:	e020      	b.n	8003728 <menu+0x2300>
			} else if(dilSecim == 1) {
 80036e6:	4b5b      	ldr	r3, [pc, #364]	; (8003854 <menu+0x242c>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d11c      	bne.n	8003728 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80036ee:	4a63      	ldr	r2, [pc, #396]	; (800387c <menu+0x2454>)
 80036f0:	2101      	movs	r1, #1
 80036f2:	2001      	movs	r0, #1
 80036f4:	f004 fbec 	bl	8007ed0 <lcd_print>
 80036f8:	e016      	b.n	8003728 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80036fa:	4b5e      	ldr	r3, [pc, #376]	; (8003874 <menu+0x244c>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d112      	bne.n	8003728 <menu+0x2300>
			if(dilSecim == 0) {
 8003702:	4b54      	ldr	r3, [pc, #336]	; (8003854 <menu+0x242c>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d105      	bne.n	8003716 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800370a:	4a5d      	ldr	r2, [pc, #372]	; (8003880 <menu+0x2458>)
 800370c:	2101      	movs	r1, #1
 800370e:	2001      	movs	r0, #1
 8003710:	f004 fbde 	bl	8007ed0 <lcd_print>
 8003714:	e008      	b.n	8003728 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003716:	4b4f      	ldr	r3, [pc, #316]	; (8003854 <menu+0x242c>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d104      	bne.n	8003728 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800371e:	4a59      	ldr	r2, [pc, #356]	; (8003884 <menu+0x245c>)
 8003720:	2101      	movs	r1, #1
 8003722:	2001      	movs	r0, #1
 8003724:	f004 fbd4 	bl	8007ed0 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003728:	4b57      	ldr	r3, [pc, #348]	; (8003888 <menu+0x2460>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d113      	bne.n	8003758 <menu+0x2330>
			if(dilSecim == 0) {
 8003730:	4b48      	ldr	r3, [pc, #288]	; (8003854 <menu+0x242c>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d105      	bne.n	8003744 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003738:	4a54      	ldr	r2, [pc, #336]	; (800388c <menu+0x2464>)
 800373a:	2101      	movs	r1, #1
 800373c:	2002      	movs	r0, #2
 800373e:	f004 fbc7 	bl	8007ed0 <lcd_print>
 8003742:	e020      	b.n	8003786 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003744:	4b43      	ldr	r3, [pc, #268]	; (8003854 <menu+0x242c>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d11c      	bne.n	8003786 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 800374c:	4a50      	ldr	r2, [pc, #320]	; (8003890 <menu+0x2468>)
 800374e:	2101      	movs	r1, #1
 8003750:	2002      	movs	r0, #2
 8003752:	f004 fbbd 	bl	8007ed0 <lcd_print>
 8003756:	e016      	b.n	8003786 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003758:	4b4b      	ldr	r3, [pc, #300]	; (8003888 <menu+0x2460>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d112      	bne.n	8003786 <menu+0x235e>
			if(dilSecim == 0) {
 8003760:	4b3c      	ldr	r3, [pc, #240]	; (8003854 <menu+0x242c>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d105      	bne.n	8003774 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003768:	4a4a      	ldr	r2, [pc, #296]	; (8003894 <menu+0x246c>)
 800376a:	2101      	movs	r1, #1
 800376c:	2002      	movs	r0, #2
 800376e:	f004 fbaf 	bl	8007ed0 <lcd_print>
 8003772:	e008      	b.n	8003786 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003774:	4b37      	ldr	r3, [pc, #220]	; (8003854 <menu+0x242c>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d104      	bne.n	8003786 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 800377c:	4a46      	ldr	r2, [pc, #280]	; (8003898 <menu+0x2470>)
 800377e:	2101      	movs	r1, #1
 8003780:	2002      	movs	r0, #2
 8003782:	f004 fba5 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003786:	2102      	movs	r1, #2
 8003788:	4834      	ldr	r0, [pc, #208]	; (800385c <menu+0x2434>)
 800378a:	f005 fec7 	bl	800951c <HAL_GPIO_ReadPin>
 800378e:	4603      	mov	r3, r0
 8003790:	2b01      	cmp	r3, #1
 8003792:	d119      	bne.n	80037c8 <menu+0x23a0>
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <menu+0x2438>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	f083 0301 	eor.w	r3, r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d012      	beq.n	80037c8 <menu+0x23a0>
 80037a2:	4b34      	ldr	r3, [pc, #208]	; (8003874 <menu+0x244c>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d10e      	bne.n	80037c8 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80037aa:	4b37      	ldr	r3, [pc, #220]	; (8003888 <menu+0x2460>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	3301      	adds	r3, #1
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	4b35      	ldr	r3, [pc, #212]	; (8003888 <menu+0x2460>)
 80037b4:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80037b6:	4b34      	ldr	r3, [pc, #208]	; (8003888 <menu+0x2460>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d902      	bls.n	80037c4 <menu+0x239c>
				devirmeSilindirTipi = 0;
 80037be:	4b32      	ldr	r3, [pc, #200]	; (8003888 <menu+0x2460>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037c4:	f001 fac8 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80037c8:	2104      	movs	r1, #4
 80037ca:	4824      	ldr	r0, [pc, #144]	; (800385c <menu+0x2434>)
 80037cc:	f005 fea6 	bl	800951c <HAL_GPIO_ReadPin>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d119      	bne.n	800380a <menu+0x23e2>
 80037d6:	4b22      	ldr	r3, [pc, #136]	; (8003860 <menu+0x2438>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	f083 0301 	eor.w	r3, r3, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d012      	beq.n	800380a <menu+0x23e2>
 80037e4:	4b23      	ldr	r3, [pc, #140]	; (8003874 <menu+0x244c>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d10e      	bne.n	800380a <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80037ec:	4b26      	ldr	r3, [pc, #152]	; (8003888 <menu+0x2460>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	4b24      	ldr	r3, [pc, #144]	; (8003888 <menu+0x2460>)
 80037f6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80037f8:	4b23      	ldr	r3, [pc, #140]	; (8003888 <menu+0x2460>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003800:	4b21      	ldr	r3, [pc, #132]	; (8003888 <menu+0x2460>)
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003806:	f001 faa7 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800380a:	2108      	movs	r1, #8
 800380c:	4813      	ldr	r0, [pc, #76]	; (800385c <menu+0x2434>)
 800380e:	f005 fe85 	bl	800951c <HAL_GPIO_ReadPin>
 8003812:	4603      	mov	r3, r0
 8003814:	2b01      	cmp	r3, #1
 8003816:	d10d      	bne.n	8003834 <menu+0x240c>
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <menu+0x2438>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	f083 0301 	eor.w	r3, r3, #1
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d006      	beq.n	8003834 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003826:	4b18      	ldr	r3, [pc, #96]	; (8003888 <menu+0x2460>)
 8003828:	781a      	ldrb	r2, [r3, #0]
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <menu+0x2440>)
 800382c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800382e:	4b0f      	ldr	r3, [pc, #60]	; (800386c <menu+0x2444>)
 8003830:	2201      	movs	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003834:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <menu+0x2448>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b15      	cmp	r3, #21
 800383a:	f040 80c2 	bne.w	80039c2 <menu+0x259a>
		if(dilSecim == 0) {
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <menu+0x242c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d12c      	bne.n	80038a0 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003846:	4a15      	ldr	r2, [pc, #84]	; (800389c <menu+0x2474>)
 8003848:	2101      	movs	r1, #1
 800384a:	2001      	movs	r0, #1
 800384c:	f004 fb40 	bl	8007ed0 <lcd_print>
 8003850:	e02f      	b.n	80038b2 <menu+0x248a>
 8003852:	bf00      	nop
 8003854:	20000241 	.word	0x20000241
 8003858:	0800d630 	.word	0x0800d630
 800385c:	40010800 	.word	0x40010800
 8003860:	2000024f 	.word	0x2000024f
 8003864:	20000231 	.word	0x20000231
 8003868:	20000118 	.word	0x20000118
 800386c:	2000024c 	.word	0x2000024c
 8003870:	20000220 	.word	0x20000220
 8003874:	2000022f 	.word	0x2000022f
 8003878:	0800dab0 	.word	0x0800dab0
 800387c:	0800dac4 	.word	0x0800dac4
 8003880:	0800dad8 	.word	0x0800dad8
 8003884:	0800daec 	.word	0x0800daec
 8003888:	20000232 	.word	0x20000232
 800388c:	0800db00 	.word	0x0800db00
 8003890:	0800db14 	.word	0x0800db14
 8003894:	0800db24 	.word	0x0800db24
 8003898:	0800db38 	.word	0x0800db38
 800389c:	0800db48 	.word	0x0800db48
		} else if(dilSecim == 1) {
 80038a0:	4b9c      	ldr	r3, [pc, #624]	; (8003b14 <menu+0x26ec>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d104      	bne.n	80038b2 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80038a8:	4a9b      	ldr	r2, [pc, #620]	; (8003b18 <menu+0x26f0>)
 80038aa:	2101      	movs	r1, #1
 80038ac:	2001      	movs	r0, #1
 80038ae:	f004 fb0f 	bl	8007ed0 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80038b2:	4b9a      	ldr	r3, [pc, #616]	; (8003b1c <menu+0x26f4>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d112      	bne.n	80038e0 <menu+0x24b8>
			if(dilSecim == 0) {
 80038ba:	4b96      	ldr	r3, [pc, #600]	; (8003b14 <menu+0x26ec>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80038c2:	4a97      	ldr	r2, [pc, #604]	; (8003b20 <menu+0x26f8>)
 80038c4:	2101      	movs	r1, #1
 80038c6:	2002      	movs	r0, #2
 80038c8:	f004 fb02 	bl	8007ed0 <lcd_print>
			}
			if(dilSecim == 1) {
 80038cc:	4b91      	ldr	r3, [pc, #580]	; (8003b14 <menu+0x26ec>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d11c      	bne.n	800390e <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80038d4:	4a93      	ldr	r2, [pc, #588]	; (8003b24 <menu+0x26fc>)
 80038d6:	2101      	movs	r1, #1
 80038d8:	2002      	movs	r0, #2
 80038da:	f004 faf9 	bl	8007ed0 <lcd_print>
 80038de:	e016      	b.n	800390e <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80038e0:	4b8e      	ldr	r3, [pc, #568]	; (8003b1c <menu+0x26f4>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d112      	bne.n	800390e <menu+0x24e6>
			if(dilSecim == 0) {
 80038e8:	4b8a      	ldr	r3, [pc, #552]	; (8003b14 <menu+0x26ec>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d105      	bne.n	80038fc <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80038f0:	4a8d      	ldr	r2, [pc, #564]	; (8003b28 <menu+0x2700>)
 80038f2:	2101      	movs	r1, #1
 80038f4:	2002      	movs	r0, #2
 80038f6:	f004 faeb 	bl	8007ed0 <lcd_print>
 80038fa:	e008      	b.n	800390e <menu+0x24e6>
			} else if(dilSecim == 1) {
 80038fc:	4b85      	ldr	r3, [pc, #532]	; (8003b14 <menu+0x26ec>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d104      	bne.n	800390e <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003904:	4a89      	ldr	r2, [pc, #548]	; (8003b2c <menu+0x2704>)
 8003906:	2101      	movs	r1, #1
 8003908:	2002      	movs	r0, #2
 800390a:	f004 fae1 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800390e:	2102      	movs	r1, #2
 8003910:	4887      	ldr	r0, [pc, #540]	; (8003b30 <menu+0x2708>)
 8003912:	f005 fe03 	bl	800951c <HAL_GPIO_ReadPin>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d115      	bne.n	8003948 <menu+0x2520>
 800391c:	4b85      	ldr	r3, [pc, #532]	; (8003b34 <menu+0x270c>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	f083 0301 	eor.w	r3, r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00e      	beq.n	8003948 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 800392a:	4b7c      	ldr	r3, [pc, #496]	; (8003b1c <menu+0x26f4>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	3301      	adds	r3, #1
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b7a      	ldr	r3, [pc, #488]	; (8003b1c <menu+0x26f4>)
 8003934:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003936:	4b79      	ldr	r3, [pc, #484]	; (8003b1c <menu+0x26f4>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d902      	bls.n	8003944 <menu+0x251c>
				platformSilindirTipi = 0;
 800393e:	4b77      	ldr	r3, [pc, #476]	; (8003b1c <menu+0x26f4>)
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003944:	f001 fa08 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003948:	2104      	movs	r1, #4
 800394a:	4879      	ldr	r0, [pc, #484]	; (8003b30 <menu+0x2708>)
 800394c:	f005 fde6 	bl	800951c <HAL_GPIO_ReadPin>
 8003950:	4603      	mov	r3, r0
 8003952:	2b01      	cmp	r3, #1
 8003954:	d115      	bne.n	8003982 <menu+0x255a>
 8003956:	4b77      	ldr	r3, [pc, #476]	; (8003b34 <menu+0x270c>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	f083 0301 	eor.w	r3, r3, #1
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00e      	beq.n	8003982 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003964:	4b6d      	ldr	r3, [pc, #436]	; (8003b1c <menu+0x26f4>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	3b01      	subs	r3, #1
 800396a:	b2da      	uxtb	r2, r3
 800396c:	4b6b      	ldr	r3, [pc, #428]	; (8003b1c <menu+0x26f4>)
 800396e:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003970:	4b6a      	ldr	r3, [pc, #424]	; (8003b1c <menu+0x26f4>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003978:	4b68      	ldr	r3, [pc, #416]	; (8003b1c <menu+0x26f4>)
 800397a:	2201      	movs	r2, #1
 800397c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800397e:	f001 f9eb 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003982:	2108      	movs	r1, #8
 8003984:	486a      	ldr	r0, [pc, #424]	; (8003b30 <menu+0x2708>)
 8003986:	f005 fdc9 	bl	800951c <HAL_GPIO_ReadPin>
 800398a:	4603      	mov	r3, r0
 800398c:	2b01      	cmp	r3, #1
 800398e:	d118      	bne.n	80039c2 <menu+0x259a>
 8003990:	4b68      	ldr	r3, [pc, #416]	; (8003b34 <menu+0x270c>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	f083 0301 	eor.w	r3, r3, #1
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d011      	beq.n	80039c2 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 800399e:	4b5f      	ldr	r3, [pc, #380]	; (8003b1c <menu+0x26f4>)
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	4b65      	ldr	r3, [pc, #404]	; (8003b38 <menu+0x2710>)
 80039a4:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80039a6:	4b5d      	ldr	r3, [pc, #372]	; (8003b1c <menu+0x26f4>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d106      	bne.n	80039bc <menu+0x2594>
				altLimit = 1;
 80039ae:	4b63      	ldr	r3, [pc, #396]	; (8003b3c <menu+0x2714>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80039b4:	4b61      	ldr	r3, [pc, #388]	; (8003b3c <menu+0x2714>)
 80039b6:	781a      	ldrb	r2, [r3, #0]
 80039b8:	4b5f      	ldr	r3, [pc, #380]	; (8003b38 <menu+0x2710>)
 80039ba:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80039bc:	4b60      	ldr	r3, [pc, #384]	; (8003b40 <menu+0x2718>)
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80039c2:	4b60      	ldr	r3, [pc, #384]	; (8003b44 <menu+0x271c>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b16      	cmp	r3, #22
 80039c8:	f040 8081 	bne.w	8003ace <menu+0x26a6>
		if(dilSecim == 0) {
 80039cc:	4b51      	ldr	r3, [pc, #324]	; (8003b14 <menu+0x26ec>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80039d4:	4a5c      	ldr	r2, [pc, #368]	; (8003b48 <menu+0x2720>)
 80039d6:	2101      	movs	r1, #1
 80039d8:	2001      	movs	r0, #1
 80039da:	f004 fa79 	bl	8007ed0 <lcd_print>
 80039de:	e008      	b.n	80039f2 <menu+0x25ca>
		} else if(dilSecim == 1) {
 80039e0:	4b4c      	ldr	r3, [pc, #304]	; (8003b14 <menu+0x26ec>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d104      	bne.n	80039f2 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80039e8:	4a58      	ldr	r2, [pc, #352]	; (8003b4c <menu+0x2724>)
 80039ea:	2101      	movs	r1, #1
 80039ec:	2001      	movs	r0, #1
 80039ee:	f004 fa6f 	bl	8007ed0 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80039f2:	4b48      	ldr	r3, [pc, #288]	; (8003b14 <menu+0x26ec>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 80039fa:	4a55      	ldr	r2, [pc, #340]	; (8003b50 <menu+0x2728>)
 80039fc:	2101      	movs	r1, #1
 80039fe:	2002      	movs	r0, #2
 8003a00:	f004 fa66 	bl	8007ed0 <lcd_print>
 8003a04:	e008      	b.n	8003a18 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003a06:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <menu+0x26ec>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d104      	bne.n	8003a18 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003a0e:	4a51      	ldr	r2, [pc, #324]	; (8003b54 <menu+0x272c>)
 8003a10:	2101      	movs	r1, #1
 8003a12:	2002      	movs	r0, #2
 8003a14:	f004 fa5c 	bl	8007ed0 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003a18:	4b4f      	ldr	r3, [pc, #316]	; (8003b58 <menu+0x2730>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	220a      	movs	r2, #10
 8003a1e:	494f      	ldr	r1, [pc, #316]	; (8003b5c <menu+0x2734>)
 8003a20:	4618      	mov	r0, r3
 8003a22:	f008 fe03 	bl	800c62c <itoa>
		lcd_print(2,16,snum);
 8003a26:	4a4d      	ldr	r2, [pc, #308]	; (8003b5c <menu+0x2734>)
 8003a28:	2110      	movs	r1, #16
 8003a2a:	2002      	movs	r0, #2
 8003a2c:	f004 fa50 	bl	8007ed0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a30:	2102      	movs	r1, #2
 8003a32:	483f      	ldr	r0, [pc, #252]	; (8003b30 <menu+0x2708>)
 8003a34:	f005 fd72 	bl	800951c <HAL_GPIO_ReadPin>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d115      	bne.n	8003a6a <menu+0x2642>
 8003a3e:	4b3d      	ldr	r3, [pc, #244]	; (8003b34 <menu+0x270c>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	f083 0301 	eor.w	r3, r3, #1
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00e      	beq.n	8003a6a <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003a4c:	4b42      	ldr	r3, [pc, #264]	; (8003b58 <menu+0x2730>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	3301      	adds	r3, #1
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	4b40      	ldr	r3, [pc, #256]	; (8003b58 <menu+0x2730>)
 8003a56:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003a58:	4b3f      	ldr	r3, [pc, #252]	; (8003b58 <menu+0x2730>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d902      	bls.n	8003a66 <menu+0x263e>
				yukariValfTmr = 0;
 8003a60:	4b3d      	ldr	r3, [pc, #244]	; (8003b58 <menu+0x2730>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a66:	f001 f977 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a6a:	2104      	movs	r1, #4
 8003a6c:	4830      	ldr	r0, [pc, #192]	; (8003b30 <menu+0x2708>)
 8003a6e:	f005 fd55 	bl	800951c <HAL_GPIO_ReadPin>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d115      	bne.n	8003aa4 <menu+0x267c>
 8003a78:	4b2e      	ldr	r3, [pc, #184]	; (8003b34 <menu+0x270c>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	f083 0301 	eor.w	r3, r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00e      	beq.n	8003aa4 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003a86:	4b34      	ldr	r3, [pc, #208]	; (8003b58 <menu+0x2730>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <menu+0x2730>)
 8003a90:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003a92:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <menu+0x2730>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d902      	bls.n	8003aa0 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003a9a:	4b2f      	ldr	r3, [pc, #188]	; (8003b58 <menu+0x2730>)
 8003a9c:	2205      	movs	r2, #5
 8003a9e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003aa0:	f001 f95a 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aa4:	2108      	movs	r1, #8
 8003aa6:	4822      	ldr	r0, [pc, #136]	; (8003b30 <menu+0x2708>)
 8003aa8:	f005 fd38 	bl	800951c <HAL_GPIO_ReadPin>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d10d      	bne.n	8003ace <menu+0x26a6>
 8003ab2:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <menu+0x270c>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	f083 0301 	eor.w	r3, r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d006      	beq.n	8003ace <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003ac0:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <menu+0x2730>)
 8003ac2:	781a      	ldrb	r2, [r3, #0]
 8003ac4:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <menu+0x2710>)
 8003ac6:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <menu+0x2718>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003ace:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <menu+0x271c>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b17      	cmp	r3, #23
 8003ad4:	f040 80ac 	bne.w	8003c30 <menu+0x2808>
		if(dilSecim == 0) {
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <menu+0x26ec>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003ae0:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <menu+0x2738>)
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f004 f9f3 	bl	8007ed0 <lcd_print>
 8003aea:	e008      	b.n	8003afe <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <menu+0x26ec>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d104      	bne.n	8003afe <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003af4:	4a1b      	ldr	r2, [pc, #108]	; (8003b64 <menu+0x273c>)
 8003af6:	2101      	movs	r1, #1
 8003af8:	2001      	movs	r0, #1
 8003afa:	f004 f9e9 	bl	8007ed0 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <menu+0x26ec>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d130      	bne.n	8003b68 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b06:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <menu+0x2728>)
 8003b08:	2101      	movs	r1, #1
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f004 f9e0 	bl	8007ed0 <lcd_print>
 8003b10:	e033      	b.n	8003b7a <menu+0x2752>
 8003b12:	bf00      	nop
 8003b14:	20000241 	.word	0x20000241
 8003b18:	0800db5c 	.word	0x0800db5c
 8003b1c:	20000233 	.word	0x20000233
 8003b20:	0800db00 	.word	0x0800db00
 8003b24:	0800db14 	.word	0x0800db14
 8003b28:	0800db24 	.word	0x0800db24
 8003b2c:	0800db38 	.word	0x0800db38
 8003b30:	40010800 	.word	0x40010800
 8003b34:	2000024f 	.word	0x2000024f
 8003b38:	20000118 	.word	0x20000118
 8003b3c:	20000226 	.word	0x20000226
 8003b40:	2000024c 	.word	0x2000024c
 8003b44:	20000220 	.word	0x20000220
 8003b48:	0800db6c 	.word	0x0800db6c
 8003b4c:	0800db80 	.word	0x0800db80
 8003b50:	0800d820 	.word	0x0800d820
 8003b54:	0800db94 	.word	0x0800db94
 8003b58:	20000234 	.word	0x20000234
 8003b5c:	20000188 	.word	0x20000188
 8003b60:	0800dba4 	.word	0x0800dba4
 8003b64:	0800dbb8 	.word	0x0800dbb8
			} else if(dilSecim == 1) {
 8003b68:	4b98      	ldr	r3, [pc, #608]	; (8003dcc <menu+0x29a4>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d104      	bne.n	8003b7a <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003b70:	4a97      	ldr	r2, [pc, #604]	; (8003dd0 <menu+0x29a8>)
 8003b72:	2101      	movs	r1, #1
 8003b74:	2002      	movs	r0, #2
 8003b76:	f004 f9ab 	bl	8007ed0 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003b7a:	4b96      	ldr	r3, [pc, #600]	; (8003dd4 <menu+0x29ac>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	220a      	movs	r2, #10
 8003b80:	4995      	ldr	r1, [pc, #596]	; (8003dd8 <menu+0x29b0>)
 8003b82:	4618      	mov	r0, r3
 8003b84:	f008 fd52 	bl	800c62c <itoa>
		lcd_print(2,16,snum);
 8003b88:	4a93      	ldr	r2, [pc, #588]	; (8003dd8 <menu+0x29b0>)
 8003b8a:	2110      	movs	r1, #16
 8003b8c:	2002      	movs	r0, #2
 8003b8e:	f004 f99f 	bl	8007ed0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b92:	2102      	movs	r1, #2
 8003b94:	4891      	ldr	r0, [pc, #580]	; (8003ddc <menu+0x29b4>)
 8003b96:	f005 fcc1 	bl	800951c <HAL_GPIO_ReadPin>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d115      	bne.n	8003bcc <menu+0x27a4>
 8003ba0:	4b8f      	ldr	r3, [pc, #572]	; (8003de0 <menu+0x29b8>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	f083 0301 	eor.w	r3, r3, #1
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00e      	beq.n	8003bcc <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003bae:	4b89      	ldr	r3, [pc, #548]	; (8003dd4 <menu+0x29ac>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	4b87      	ldr	r3, [pc, #540]	; (8003dd4 <menu+0x29ac>)
 8003bb8:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003bba:	4b86      	ldr	r3, [pc, #536]	; (8003dd4 <menu+0x29ac>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b05      	cmp	r3, #5
 8003bc0:	d902      	bls.n	8003bc8 <menu+0x27a0>
				asagiValfTmr = 0;
 8003bc2:	4b84      	ldr	r3, [pc, #528]	; (8003dd4 <menu+0x29ac>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003bc8:	f001 f8c6 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bcc:	2104      	movs	r1, #4
 8003bce:	4883      	ldr	r0, [pc, #524]	; (8003ddc <menu+0x29b4>)
 8003bd0:	f005 fca4 	bl	800951c <HAL_GPIO_ReadPin>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d115      	bne.n	8003c06 <menu+0x27de>
 8003bda:	4b81      	ldr	r3, [pc, #516]	; (8003de0 <menu+0x29b8>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	f083 0301 	eor.w	r3, r3, #1
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00e      	beq.n	8003c06 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003be8:	4b7a      	ldr	r3, [pc, #488]	; (8003dd4 <menu+0x29ac>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	4b78      	ldr	r3, [pc, #480]	; (8003dd4 <menu+0x29ac>)
 8003bf2:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003bf4:	4b77      	ldr	r3, [pc, #476]	; (8003dd4 <menu+0x29ac>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b06      	cmp	r3, #6
 8003bfa:	d902      	bls.n	8003c02 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003bfc:	4b75      	ldr	r3, [pc, #468]	; (8003dd4 <menu+0x29ac>)
 8003bfe:	2205      	movs	r2, #5
 8003c00:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c02:	f001 f8a9 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c06:	2108      	movs	r1, #8
 8003c08:	4874      	ldr	r0, [pc, #464]	; (8003ddc <menu+0x29b4>)
 8003c0a:	f005 fc87 	bl	800951c <HAL_GPIO_ReadPin>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d10d      	bne.n	8003c30 <menu+0x2808>
 8003c14:	4b72      	ldr	r3, [pc, #456]	; (8003de0 <menu+0x29b8>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	f083 0301 	eor.w	r3, r3, #1
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d006      	beq.n	8003c30 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003c22:	4b6c      	ldr	r3, [pc, #432]	; (8003dd4 <menu+0x29ac>)
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	4b6f      	ldr	r3, [pc, #444]	; (8003de4 <menu+0x29bc>)
 8003c28:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003c2a:	4b6f      	ldr	r3, [pc, #444]	; (8003de8 <menu+0x29c0>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003c30:	4b6e      	ldr	r3, [pc, #440]	; (8003dec <menu+0x29c4>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b18      	cmp	r3, #24
 8003c36:	f040 809d 	bne.w	8003d74 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003c3a:	4b6d      	ldr	r3, [pc, #436]	; (8003df0 <menu+0x29c8>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d113      	bne.n	8003c6a <menu+0x2842>
			if(dilSecim == 0) {
 8003c42:	4b62      	ldr	r3, [pc, #392]	; (8003dcc <menu+0x29a4>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d105      	bne.n	8003c56 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003c4a:	4a6a      	ldr	r2, [pc, #424]	; (8003df4 <menu+0x29cc>)
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	2001      	movs	r0, #1
 8003c50:	f004 f93e 	bl	8007ed0 <lcd_print>
 8003c54:	e020      	b.n	8003c98 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003c56:	4b5d      	ldr	r3, [pc, #372]	; (8003dcc <menu+0x29a4>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d11c      	bne.n	8003c98 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003c5e:	4a66      	ldr	r2, [pc, #408]	; (8003df8 <menu+0x29d0>)
 8003c60:	2101      	movs	r1, #1
 8003c62:	2001      	movs	r0, #1
 8003c64:	f004 f934 	bl	8007ed0 <lcd_print>
 8003c68:	e016      	b.n	8003c98 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003c6a:	4b61      	ldr	r3, [pc, #388]	; (8003df0 <menu+0x29c8>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d112      	bne.n	8003c98 <menu+0x2870>
			if(dilSecim == 0) {
 8003c72:	4b56      	ldr	r3, [pc, #344]	; (8003dcc <menu+0x29a4>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d105      	bne.n	8003c86 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003c7a:	4a60      	ldr	r2, [pc, #384]	; (8003dfc <menu+0x29d4>)
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	2001      	movs	r0, #1
 8003c80:	f004 f926 	bl	8007ed0 <lcd_print>
 8003c84:	e008      	b.n	8003c98 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003c86:	4b51      	ldr	r3, [pc, #324]	; (8003dcc <menu+0x29a4>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d104      	bne.n	8003c98 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003c8e:	4a5c      	ldr	r2, [pc, #368]	; (8003e00 <menu+0x29d8>)
 8003c90:	2101      	movs	r1, #1
 8003c92:	2001      	movs	r0, #1
 8003c94:	f004 f91c 	bl	8007ed0 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003c98:	4b4c      	ldr	r3, [pc, #304]	; (8003dcc <menu+0x29a4>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d105      	bne.n	8003cac <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ca0:	4a58      	ldr	r2, [pc, #352]	; (8003e04 <menu+0x29dc>)
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2002      	movs	r0, #2
 8003ca6:	f004 f913 	bl	8007ed0 <lcd_print>
 8003caa:	e008      	b.n	8003cbe <menu+0x2896>
			} else if(dilSecim == 1) {
 8003cac:	4b47      	ldr	r3, [pc, #284]	; (8003dcc <menu+0x29a4>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d104      	bne.n	8003cbe <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003cb4:	4a46      	ldr	r2, [pc, #280]	; (8003dd0 <menu+0x29a8>)
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	2002      	movs	r0, #2
 8003cba:	f004 f909 	bl	8007ed0 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003cbe:	4b52      	ldr	r3, [pc, #328]	; (8003e08 <menu+0x29e0>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	220a      	movs	r2, #10
 8003cc4:	4944      	ldr	r1, [pc, #272]	; (8003dd8 <menu+0x29b0>)
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f008 fcb0 	bl	800c62c <itoa>
		lcd_print(2, 16, snum);
 8003ccc:	4a42      	ldr	r2, [pc, #264]	; (8003dd8 <menu+0x29b0>)
 8003cce:	2110      	movs	r1, #16
 8003cd0:	2002      	movs	r0, #2
 8003cd2:	f004 f8fd 	bl	8007ed0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cd6:	2102      	movs	r1, #2
 8003cd8:	4840      	ldr	r0, [pc, #256]	; (8003ddc <menu+0x29b4>)
 8003cda:	f005 fc1f 	bl	800951c <HAL_GPIO_ReadPin>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d115      	bne.n	8003d10 <menu+0x28e8>
 8003ce4:	4b3e      	ldr	r3, [pc, #248]	; (8003de0 <menu+0x29b8>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	f083 0301 	eor.w	r3, r3, #1
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00e      	beq.n	8003d10 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003cf2:	4b45      	ldr	r3, [pc, #276]	; (8003e08 <menu+0x29e0>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <menu+0x29e0>)
 8003cfc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003cfe:	4b42      	ldr	r3, [pc, #264]	; (8003e08 <menu+0x29e0>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b05      	cmp	r3, #5
 8003d04:	d902      	bls.n	8003d0c <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003d06:	4b40      	ldr	r3, [pc, #256]	; (8003e08 <menu+0x29e0>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d0c:	f001 f824 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d10:	2104      	movs	r1, #4
 8003d12:	4832      	ldr	r0, [pc, #200]	; (8003ddc <menu+0x29b4>)
 8003d14:	f005 fc02 	bl	800951c <HAL_GPIO_ReadPin>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d115      	bne.n	8003d4a <menu+0x2922>
 8003d1e:	4b30      	ldr	r3, [pc, #192]	; (8003de0 <menu+0x29b8>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	f083 0301 	eor.w	r3, r3, #1
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00e      	beq.n	8003d4a <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003d2c:	4b36      	ldr	r3, [pc, #216]	; (8003e08 <menu+0x29e0>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	4b34      	ldr	r3, [pc, #208]	; (8003e08 <menu+0x29e0>)
 8003d36:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003d38:	4b33      	ldr	r3, [pc, #204]	; (8003e08 <menu+0x29e0>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b06      	cmp	r3, #6
 8003d3e:	d902      	bls.n	8003d46 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003d40:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <menu+0x29e0>)
 8003d42:	2205      	movs	r2, #5
 8003d44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d46:	f001 f807 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d4a:	2108      	movs	r1, #8
 8003d4c:	4823      	ldr	r0, [pc, #140]	; (8003ddc <menu+0x29b4>)
 8003d4e:	f005 fbe5 	bl	800951c <HAL_GPIO_ReadPin>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d10d      	bne.n	8003d74 <menu+0x294c>
 8003d58:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <menu+0x29b8>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	f083 0301 	eor.w	r3, r3, #1
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d006      	beq.n	8003d74 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003d66:	4b28      	ldr	r3, [pc, #160]	; (8003e08 <menu+0x29e0>)
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <menu+0x29bc>)
 8003d6c:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003d6e:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <menu+0x29c0>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003d74:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <menu+0x29c4>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b19      	cmp	r3, #25
 8003d7a:	f040 80c4 	bne.w	8003f06 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003d7e:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <menu+0x29c8>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d113      	bne.n	8003dae <menu+0x2986>
			if(dilSecim == 0) {
 8003d86:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <menu+0x29a4>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d105      	bne.n	8003d9a <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003d8e:	4a1f      	ldr	r2, [pc, #124]	; (8003e0c <menu+0x29e4>)
 8003d90:	2101      	movs	r1, #1
 8003d92:	2001      	movs	r0, #1
 8003d94:	f004 f89c 	bl	8007ed0 <lcd_print>
 8003d98:	e047      	b.n	8003e2a <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <menu+0x29a4>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d143      	bne.n	8003e2a <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003da2:	4a1b      	ldr	r2, [pc, #108]	; (8003e10 <menu+0x29e8>)
 8003da4:	2101      	movs	r1, #1
 8003da6:	2001      	movs	r0, #1
 8003da8:	f004 f892 	bl	8007ed0 <lcd_print>
 8003dac:	e03d      	b.n	8003e2a <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <menu+0x29c8>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d139      	bne.n	8003e2a <menu+0x2a02>
			if(dilSecim == 0) {
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <menu+0x29a4>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d12c      	bne.n	8003e18 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003dbe:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <menu+0x29ec>)
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	f004 f884 	bl	8007ed0 <lcd_print>
 8003dc8:	e02f      	b.n	8003e2a <menu+0x2a02>
 8003dca:	bf00      	nop
 8003dcc:	20000241 	.word	0x20000241
 8003dd0:	0800db94 	.word	0x0800db94
 8003dd4:	20000235 	.word	0x20000235
 8003dd8:	20000188 	.word	0x20000188
 8003ddc:	40010800 	.word	0x40010800
 8003de0:	2000024f 	.word	0x2000024f
 8003de4:	20000118 	.word	0x20000118
 8003de8:	2000024c 	.word	0x2000024c
 8003dec:	20000220 	.word	0x20000220
 8003df0:	2000022f 	.word	0x2000022f
 8003df4:	0800dbcc 	.word	0x0800dbcc
 8003df8:	0800dbe0 	.word	0x0800dbe0
 8003dfc:	0800dbf4 	.word	0x0800dbf4
 8003e00:	0800dc08 	.word	0x0800dc08
 8003e04:	0800d820 	.word	0x0800d820
 8003e08:	20000236 	.word	0x20000236
 8003e0c:	0800dc1c 	.word	0x0800dc1c
 8003e10:	0800dc30 	.word	0x0800dc30
 8003e14:	0800dc44 	.word	0x0800dc44
			} else if(dilSecim == 1) {
 8003e18:	4b73      	ldr	r3, [pc, #460]	; (8003fe8 <menu+0x2bc0>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d104      	bne.n	8003e2a <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003e20:	4a72      	ldr	r2, [pc, #456]	; (8003fec <menu+0x2bc4>)
 8003e22:	2101      	movs	r1, #1
 8003e24:	2001      	movs	r0, #1
 8003e26:	f004 f853 	bl	8007ed0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003e2a:	4b6f      	ldr	r3, [pc, #444]	; (8003fe8 <menu+0x2bc0>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d105      	bne.n	8003e3e <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e32:	4a6f      	ldr	r2, [pc, #444]	; (8003ff0 <menu+0x2bc8>)
 8003e34:	2101      	movs	r1, #1
 8003e36:	2002      	movs	r0, #2
 8003e38:	f004 f84a 	bl	8007ed0 <lcd_print>
 8003e3c:	e008      	b.n	8003e50 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003e3e:	4b6a      	ldr	r3, [pc, #424]	; (8003fe8 <menu+0x2bc0>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d104      	bne.n	8003e50 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003e46:	4a6b      	ldr	r2, [pc, #428]	; (8003ff4 <menu+0x2bcc>)
 8003e48:	2101      	movs	r1, #1
 8003e4a:	2002      	movs	r0, #2
 8003e4c:	f004 f840 	bl	8007ed0 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003e50:	4b69      	ldr	r3, [pc, #420]	; (8003ff8 <menu+0x2bd0>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	220a      	movs	r2, #10
 8003e56:	4969      	ldr	r1, [pc, #420]	; (8003ffc <menu+0x2bd4>)
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f008 fbe7 	bl	800c62c <itoa>
		lcd_print(2,16,snum);
 8003e5e:	4a67      	ldr	r2, [pc, #412]	; (8003ffc <menu+0x2bd4>)
 8003e60:	2110      	movs	r1, #16
 8003e62:	2002      	movs	r0, #2
 8003e64:	f004 f834 	bl	8007ed0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e68:	2102      	movs	r1, #2
 8003e6a:	4865      	ldr	r0, [pc, #404]	; (8004000 <menu+0x2bd8>)
 8003e6c:	f005 fb56 	bl	800951c <HAL_GPIO_ReadPin>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d115      	bne.n	8003ea2 <menu+0x2a7a>
 8003e76:	4b63      	ldr	r3, [pc, #396]	; (8004004 <menu+0x2bdc>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	f083 0301 	eor.w	r3, r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00e      	beq.n	8003ea2 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003e84:	4b5c      	ldr	r3, [pc, #368]	; (8003ff8 <menu+0x2bd0>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	4b5a      	ldr	r3, [pc, #360]	; (8003ff8 <menu+0x2bd0>)
 8003e8e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003e90:	4b59      	ldr	r3, [pc, #356]	; (8003ff8 <menu+0x2bd0>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b05      	cmp	r3, #5
 8003e96:	d902      	bls.n	8003e9e <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003e98:	4b57      	ldr	r3, [pc, #348]	; (8003ff8 <menu+0x2bd0>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e9e:	f000 ff5b 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	4856      	ldr	r0, [pc, #344]	; (8004000 <menu+0x2bd8>)
 8003ea6:	f005 fb39 	bl	800951c <HAL_GPIO_ReadPin>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d115      	bne.n	8003edc <menu+0x2ab4>
 8003eb0:	4b54      	ldr	r3, [pc, #336]	; (8004004 <menu+0x2bdc>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	f083 0301 	eor.w	r3, r3, #1
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00e      	beq.n	8003edc <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003ebe:	4b4e      	ldr	r3, [pc, #312]	; (8003ff8 <menu+0x2bd0>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	4b4c      	ldr	r3, [pc, #304]	; (8003ff8 <menu+0x2bd0>)
 8003ec8:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003eca:	4b4b      	ldr	r3, [pc, #300]	; (8003ff8 <menu+0x2bd0>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	d902      	bls.n	8003ed8 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003ed2:	4b49      	ldr	r3, [pc, #292]	; (8003ff8 <menu+0x2bd0>)
 8003ed4:	2205      	movs	r2, #5
 8003ed6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ed8:	f000 ff3e 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003edc:	2108      	movs	r1, #8
 8003ede:	4848      	ldr	r0, [pc, #288]	; (8004000 <menu+0x2bd8>)
 8003ee0:	f005 fb1c 	bl	800951c <HAL_GPIO_ReadPin>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d10d      	bne.n	8003f06 <menu+0x2ade>
 8003eea:	4b46      	ldr	r3, [pc, #280]	; (8004004 <menu+0x2bdc>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	f083 0301 	eor.w	r3, r3, #1
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d006      	beq.n	8003f06 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003ef8:	4b3f      	ldr	r3, [pc, #252]	; (8003ff8 <menu+0x2bd0>)
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	4b42      	ldr	r3, [pc, #264]	; (8004008 <menu+0x2be0>)
 8003efe:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003f00:	4b42      	ldr	r3, [pc, #264]	; (800400c <menu+0x2be4>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003f06:	4b42      	ldr	r3, [pc, #264]	; (8004010 <menu+0x2be8>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b1a      	cmp	r3, #26
 8003f0c:	f040 80ec 	bne.w	80040e8 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003f10:	4b35      	ldr	r3, [pc, #212]	; (8003fe8 <menu+0x2bc0>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003f18:	4a3e      	ldr	r2, [pc, #248]	; (8004014 <menu+0x2bec>)
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	f003 ffd7 	bl	8007ed0 <lcd_print>
 8003f22:	e008      	b.n	8003f36 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003f24:	4b30      	ldr	r3, [pc, #192]	; (8003fe8 <menu+0x2bc0>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d104      	bne.n	8003f36 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003f2c:	4a3a      	ldr	r2, [pc, #232]	; (8004018 <menu+0x2bf0>)
 8003f2e:	2101      	movs	r1, #1
 8003f30:	2001      	movs	r0, #1
 8003f32:	f003 ffcd 	bl	8007ed0 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003f36:	4b39      	ldr	r3, [pc, #228]	; (800401c <menu+0x2bf4>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b63      	cmp	r3, #99	; 0x63
 8003f3c:	d91e      	bls.n	8003f7c <menu+0x2b54>
			if(dilSecim == 0) {
 8003f3e:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <menu+0x2bc0>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d104      	bne.n	8003f50 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f46:	4a2a      	ldr	r2, [pc, #168]	; (8003ff0 <menu+0x2bc8>)
 8003f48:	2101      	movs	r1, #1
 8003f4a:	2002      	movs	r0, #2
 8003f4c:	f003 ffc0 	bl	8007ed0 <lcd_print>
			}
			if(dilSecim == 1) {
 8003f50:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <menu+0x2bc0>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d104      	bne.n	8003f62 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003f58:	4a26      	ldr	r2, [pc, #152]	; (8003ff4 <menu+0x2bcc>)
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	2002      	movs	r0, #2
 8003f5e:	f003 ffb7 	bl	8007ed0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f62:	4b2e      	ldr	r3, [pc, #184]	; (800401c <menu+0x2bf4>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	220a      	movs	r2, #10
 8003f68:	4924      	ldr	r1, [pc, #144]	; (8003ffc <menu+0x2bd4>)
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f008 fb5e 	bl	800c62c <itoa>
			lcd_print(2,14,snum);
 8003f70:	4a22      	ldr	r2, [pc, #136]	; (8003ffc <menu+0x2bd4>)
 8003f72:	210e      	movs	r1, #14
 8003f74:	2002      	movs	r0, #2
 8003f76:	f003 ffab 	bl	8007ed0 <lcd_print>
 8003f7a:	e066      	b.n	800404a <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003f7c:	4b27      	ldr	r3, [pc, #156]	; (800401c <menu+0x2bf4>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b09      	cmp	r3, #9
 8003f82:	d923      	bls.n	8003fcc <menu+0x2ba4>
 8003f84:	4b25      	ldr	r3, [pc, #148]	; (800401c <menu+0x2bf4>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b63      	cmp	r3, #99	; 0x63
 8003f8a:	d81f      	bhi.n	8003fcc <menu+0x2ba4>
			if(dilSecim == 0) {
 8003f8c:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <menu+0x2bc0>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d105      	bne.n	8003fa0 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f94:	4a16      	ldr	r2, [pc, #88]	; (8003ff0 <menu+0x2bc8>)
 8003f96:	2101      	movs	r1, #1
 8003f98:	2002      	movs	r0, #2
 8003f9a:	f003 ff99 	bl	8007ed0 <lcd_print>
 8003f9e:	e008      	b.n	8003fb2 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <menu+0x2bc0>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d104      	bne.n	8003fb2 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003fa8:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <menu+0x2bcc>)
 8003faa:	2101      	movs	r1, #1
 8003fac:	2002      	movs	r0, #2
 8003fae:	f003 ff8f 	bl	8007ed0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	; (800401c <menu+0x2bf4>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	220a      	movs	r2, #10
 8003fb8:	4910      	ldr	r1, [pc, #64]	; (8003ffc <menu+0x2bd4>)
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f008 fb36 	bl	800c62c <itoa>
			lcd_print(2, 15, snum);
 8003fc0:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <menu+0x2bd4>)
 8003fc2:	210f      	movs	r1, #15
 8003fc4:	2002      	movs	r0, #2
 8003fc6:	f003 ff83 	bl	8007ed0 <lcd_print>
 8003fca:	e03e      	b.n	800404a <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003fcc:	4b13      	ldr	r3, [pc, #76]	; (800401c <menu+0x2bf4>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b09      	cmp	r3, #9
 8003fd2:	d83a      	bhi.n	800404a <menu+0x2c22>
			if(dilSecim == 0) {
 8003fd4:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <menu+0x2bc0>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d121      	bne.n	8004020 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fdc:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <menu+0x2bc8>)
 8003fde:	2101      	movs	r1, #1
 8003fe0:	2002      	movs	r0, #2
 8003fe2:	f003 ff75 	bl	8007ed0 <lcd_print>
 8003fe6:	e024      	b.n	8004032 <menu+0x2c0a>
 8003fe8:	20000241 	.word	0x20000241
 8003fec:	0800dc58 	.word	0x0800dc58
 8003ff0:	0800d820 	.word	0x0800d820
 8003ff4:	0800db94 	.word	0x0800db94
 8003ff8:	20000237 	.word	0x20000237
 8003ffc:	20000188 	.word	0x20000188
 8004000:	40010800 	.word	0x40010800
 8004004:	2000024f 	.word	0x2000024f
 8004008:	20000118 	.word	0x20000118
 800400c:	2000024c 	.word	0x2000024c
 8004010:	20000220 	.word	0x20000220
 8004014:	0800dc6c 	.word	0x0800dc6c
 8004018:	0800dc80 	.word	0x0800dc80
 800401c:	20000238 	.word	0x20000238
			} else if(dilSecim == 1) {
 8004020:	4b8f      	ldr	r3, [pc, #572]	; (8004260 <menu+0x2e38>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d104      	bne.n	8004032 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8004028:	4a8e      	ldr	r2, [pc, #568]	; (8004264 <menu+0x2e3c>)
 800402a:	2101      	movs	r1, #1
 800402c:	2002      	movs	r0, #2
 800402e:	f003 ff4f 	bl	8007ed0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004032:	4b8d      	ldr	r3, [pc, #564]	; (8004268 <menu+0x2e40>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	220a      	movs	r2, #10
 8004038:	498c      	ldr	r1, [pc, #560]	; (800426c <menu+0x2e44>)
 800403a:	4618      	mov	r0, r3
 800403c:	f008 faf6 	bl	800c62c <itoa>
			lcd_print(2, 16, snum);
 8004040:	4a8a      	ldr	r2, [pc, #552]	; (800426c <menu+0x2e44>)
 8004042:	2110      	movs	r1, #16
 8004044:	2002      	movs	r0, #2
 8004046:	f003 ff43 	bl	8007ed0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800404a:	2102      	movs	r1, #2
 800404c:	4888      	ldr	r0, [pc, #544]	; (8004270 <menu+0x2e48>)
 800404e:	f005 fa65 	bl	800951c <HAL_GPIO_ReadPin>
 8004052:	4603      	mov	r3, r0
 8004054:	2b01      	cmp	r3, #1
 8004056:	d115      	bne.n	8004084 <menu+0x2c5c>
 8004058:	4b86      	ldr	r3, [pc, #536]	; (8004274 <menu+0x2e4c>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	f083 0301 	eor.w	r3, r3, #1
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00e      	beq.n	8004084 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8004066:	4b80      	ldr	r3, [pc, #512]	; (8004268 <menu+0x2e40>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	3301      	adds	r3, #1
 800406c:	b2da      	uxtb	r2, r3
 800406e:	4b7e      	ldr	r3, [pc, #504]	; (8004268 <menu+0x2e40>)
 8004070:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8004072:	4b7d      	ldr	r3, [pc, #500]	; (8004268 <menu+0x2e40>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2bb4      	cmp	r3, #180	; 0xb4
 8004078:	d902      	bls.n	8004080 <menu+0x2c58>
				makineCalismaTmr = 0;
 800407a:	4b7b      	ldr	r3, [pc, #492]	; (8004268 <menu+0x2e40>)
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004080:	f000 fe6a 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004084:	2104      	movs	r1, #4
 8004086:	487a      	ldr	r0, [pc, #488]	; (8004270 <menu+0x2e48>)
 8004088:	f005 fa48 	bl	800951c <HAL_GPIO_ReadPin>
 800408c:	4603      	mov	r3, r0
 800408e:	2b01      	cmp	r3, #1
 8004090:	d115      	bne.n	80040be <menu+0x2c96>
 8004092:	4b78      	ldr	r3, [pc, #480]	; (8004274 <menu+0x2e4c>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	f083 0301 	eor.w	r3, r3, #1
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00e      	beq.n	80040be <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 80040a0:	4b71      	ldr	r3, [pc, #452]	; (8004268 <menu+0x2e40>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	4b6f      	ldr	r3, [pc, #444]	; (8004268 <menu+0x2e40>)
 80040aa:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80040ac:	4b6e      	ldr	r3, [pc, #440]	; (8004268 <menu+0x2e40>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2bb5      	cmp	r3, #181	; 0xb5
 80040b2:	d902      	bls.n	80040ba <menu+0x2c92>
		   		makineCalismaTmr = 180;
 80040b4:	4b6c      	ldr	r3, [pc, #432]	; (8004268 <menu+0x2e40>)
 80040b6:	22b4      	movs	r2, #180	; 0xb4
 80040b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80040ba:	f000 fe4d 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80040be:	2108      	movs	r1, #8
 80040c0:	486b      	ldr	r0, [pc, #428]	; (8004270 <menu+0x2e48>)
 80040c2:	f005 fa2b 	bl	800951c <HAL_GPIO_ReadPin>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d10d      	bne.n	80040e8 <menu+0x2cc0>
 80040cc:	4b69      	ldr	r3, [pc, #420]	; (8004274 <menu+0x2e4c>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	f083 0301 	eor.w	r3, r3, #1
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d006      	beq.n	80040e8 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 80040da:	4b63      	ldr	r3, [pc, #396]	; (8004268 <menu+0x2e40>)
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	4b66      	ldr	r3, [pc, #408]	; (8004278 <menu+0x2e50>)
 80040e0:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80040e2:	4b66      	ldr	r3, [pc, #408]	; (800427c <menu+0x2e54>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80040e8:	4b65      	ldr	r3, [pc, #404]	; (8004280 <menu+0x2e58>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b1b      	cmp	r3, #27
 80040ee:	f040 8083 	bne.w	80041f8 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 80040f2:	4a64      	ldr	r2, [pc, #400]	; (8004284 <menu+0x2e5c>)
 80040f4:	2101      	movs	r1, #1
 80040f6:	2001      	movs	r0, #1
 80040f8:	f003 feea 	bl	8007ed0 <lcd_print>

		if(buzzer == 0) {
 80040fc:	4b62      	ldr	r3, [pc, #392]	; (8004288 <menu+0x2e60>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d113      	bne.n	800412c <menu+0x2d04>
			if(dilSecim == 0) {
 8004104:	4b56      	ldr	r3, [pc, #344]	; (8004260 <menu+0x2e38>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d105      	bne.n	8004118 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 800410c:	4a5f      	ldr	r2, [pc, #380]	; (800428c <menu+0x2e64>)
 800410e:	2101      	movs	r1, #1
 8004110:	2002      	movs	r0, #2
 8004112:	f003 fedd 	bl	8007ed0 <lcd_print>
 8004116:	e020      	b.n	800415a <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004118:	4b51      	ldr	r3, [pc, #324]	; (8004260 <menu+0x2e38>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d11c      	bne.n	800415a <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8004120:	4a5b      	ldr	r2, [pc, #364]	; (8004290 <menu+0x2e68>)
 8004122:	2101      	movs	r1, #1
 8004124:	2002      	movs	r0, #2
 8004126:	f003 fed3 	bl	8007ed0 <lcd_print>
 800412a:	e016      	b.n	800415a <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 800412c:	4b56      	ldr	r3, [pc, #344]	; (8004288 <menu+0x2e60>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d112      	bne.n	800415a <menu+0x2d32>
			if(dilSecim == 0) {
 8004134:	4b4a      	ldr	r3, [pc, #296]	; (8004260 <menu+0x2e38>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 800413c:	4a55      	ldr	r2, [pc, #340]	; (8004294 <menu+0x2e6c>)
 800413e:	2101      	movs	r1, #1
 8004140:	2002      	movs	r0, #2
 8004142:	f003 fec5 	bl	8007ed0 <lcd_print>
 8004146:	e008      	b.n	800415a <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004148:	4b45      	ldr	r3, [pc, #276]	; (8004260 <menu+0x2e38>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d104      	bne.n	800415a <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8004150:	4a51      	ldr	r2, [pc, #324]	; (8004298 <menu+0x2e70>)
 8004152:	2101      	movs	r1, #1
 8004154:	2002      	movs	r0, #2
 8004156:	f003 febb 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800415a:	2102      	movs	r1, #2
 800415c:	4844      	ldr	r0, [pc, #272]	; (8004270 <menu+0x2e48>)
 800415e:	f005 f9dd 	bl	800951c <HAL_GPIO_ReadPin>
 8004162:	4603      	mov	r3, r0
 8004164:	2b01      	cmp	r3, #1
 8004166:	d115      	bne.n	8004194 <menu+0x2d6c>
 8004168:	4b42      	ldr	r3, [pc, #264]	; (8004274 <menu+0x2e4c>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	f083 0301 	eor.w	r3, r3, #1
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00e      	beq.n	8004194 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8004176:	4b44      	ldr	r3, [pc, #272]	; (8004288 <menu+0x2e60>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4b42      	ldr	r3, [pc, #264]	; (8004288 <menu+0x2e60>)
 8004180:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8004182:	4b41      	ldr	r3, [pc, #260]	; (8004288 <menu+0x2e60>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d902      	bls.n	8004190 <menu+0x2d68>
				buzzer = 0;
 800418a:	4b3f      	ldr	r3, [pc, #252]	; (8004288 <menu+0x2e60>)
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004190:	f000 fde2 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004194:	2104      	movs	r1, #4
 8004196:	4836      	ldr	r0, [pc, #216]	; (8004270 <menu+0x2e48>)
 8004198:	f005 f9c0 	bl	800951c <HAL_GPIO_ReadPin>
 800419c:	4603      	mov	r3, r0
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d115      	bne.n	80041ce <menu+0x2da6>
 80041a2:	4b34      	ldr	r3, [pc, #208]	; (8004274 <menu+0x2e4c>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	f083 0301 	eor.w	r3, r3, #1
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00e      	beq.n	80041ce <menu+0x2da6>
			buzzer = buzzer - 1;
 80041b0:	4b35      	ldr	r3, [pc, #212]	; (8004288 <menu+0x2e60>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	4b33      	ldr	r3, [pc, #204]	; (8004288 <menu+0x2e60>)
 80041ba:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80041bc:	4b32      	ldr	r3, [pc, #200]	; (8004288 <menu+0x2e60>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <menu+0x2da2>
		   		buzzer = 1;
 80041c4:	4b30      	ldr	r3, [pc, #192]	; (8004288 <menu+0x2e60>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80041ca:	f000 fdc5 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80041ce:	2108      	movs	r1, #8
 80041d0:	4827      	ldr	r0, [pc, #156]	; (8004270 <menu+0x2e48>)
 80041d2:	f005 f9a3 	bl	800951c <HAL_GPIO_ReadPin>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d10d      	bne.n	80041f8 <menu+0x2dd0>
 80041dc:	4b25      	ldr	r3, [pc, #148]	; (8004274 <menu+0x2e4c>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	f083 0301 	eor.w	r3, r3, #1
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d006      	beq.n	80041f8 <menu+0x2dd0>
			eepromData[25] = buzzer;
 80041ea:	4b27      	ldr	r3, [pc, #156]	; (8004288 <menu+0x2e60>)
 80041ec:	781a      	ldrb	r2, [r3, #0]
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <menu+0x2e50>)
 80041f0:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80041f2:	4b22      	ldr	r3, [pc, #136]	; (800427c <menu+0x2e54>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80041f8:	4b21      	ldr	r3, [pc, #132]	; (8004280 <menu+0x2e58>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b1c      	cmp	r3, #28
 80041fe:	f040 80ab 	bne.w	8004358 <menu+0x2f30>
		calismaSayModu = 0;
 8004202:	4b26      	ldr	r3, [pc, #152]	; (800429c <menu+0x2e74>)
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004208:	4a25      	ldr	r2, [pc, #148]	; (80042a0 <menu+0x2e78>)
 800420a:	2101      	movs	r1, #1
 800420c:	2001      	movs	r0, #1
 800420e:	f003 fe5f 	bl	8007ed0 <lcd_print>

		if(demoMode == 0) {
 8004212:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <menu+0x2e7c>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d113      	bne.n	8004242 <menu+0x2e1a>
			if(dilSecim == 0) {
 800421a:	4b11      	ldr	r3, [pc, #68]	; (8004260 <menu+0x2e38>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d105      	bne.n	800422e <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8004222:	4a1a      	ldr	r2, [pc, #104]	; (800428c <menu+0x2e64>)
 8004224:	2101      	movs	r1, #1
 8004226:	2002      	movs	r0, #2
 8004228:	f003 fe52 	bl	8007ed0 <lcd_print>
 800422c:	e045      	b.n	80042ba <menu+0x2e92>
			} else if(dilSecim == 1) {
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <menu+0x2e38>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d141      	bne.n	80042ba <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8004236:	4a16      	ldr	r2, [pc, #88]	; (8004290 <menu+0x2e68>)
 8004238:	2101      	movs	r1, #1
 800423a:	2002      	movs	r0, #2
 800423c:	f003 fe48 	bl	8007ed0 <lcd_print>
 8004240:	e03b      	b.n	80042ba <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8004242:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <menu+0x2e7c>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d137      	bne.n	80042ba <menu+0x2e92>
			if(dilSecim == 0){
 800424a:	4b05      	ldr	r3, [pc, #20]	; (8004260 <menu+0x2e38>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d12a      	bne.n	80042a8 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8004252:	4a10      	ldr	r2, [pc, #64]	; (8004294 <menu+0x2e6c>)
 8004254:	2101      	movs	r1, #1
 8004256:	2002      	movs	r0, #2
 8004258:	f003 fe3a 	bl	8007ed0 <lcd_print>
 800425c:	e02d      	b.n	80042ba <menu+0x2e92>
 800425e:	bf00      	nop
 8004260:	20000241 	.word	0x20000241
 8004264:	0800db94 	.word	0x0800db94
 8004268:	20000238 	.word	0x20000238
 800426c:	20000188 	.word	0x20000188
 8004270:	40010800 	.word	0x40010800
 8004274:	2000024f 	.word	0x2000024f
 8004278:	20000118 	.word	0x20000118
 800427c:	2000024c 	.word	0x2000024c
 8004280:	20000220 	.word	0x20000220
 8004284:	0800dc94 	.word	0x0800dc94
 8004288:	2000023c 	.word	0x2000023c
 800428c:	0800d5bc 	.word	0x0800d5bc
 8004290:	0800d5d0 	.word	0x0800d5d0
 8004294:	0800d61c 	.word	0x0800d61c
 8004298:	0800d630 	.word	0x0800d630
 800429c:	20000240 	.word	0x20000240
 80042a0:	0800dca8 	.word	0x0800dca8
 80042a4:	2000023e 	.word	0x2000023e
			} else if(dilSecim == 1) {
 80042a8:	4b71      	ldr	r3, [pc, #452]	; (8004470 <menu+0x3048>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d104      	bne.n	80042ba <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80042b0:	4a70      	ldr	r2, [pc, #448]	; (8004474 <menu+0x304c>)
 80042b2:	2101      	movs	r1, #1
 80042b4:	2002      	movs	r0, #2
 80042b6:	f003 fe0b 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80042ba:	2102      	movs	r1, #2
 80042bc:	486e      	ldr	r0, [pc, #440]	; (8004478 <menu+0x3050>)
 80042be:	f005 f92d 	bl	800951c <HAL_GPIO_ReadPin>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d115      	bne.n	80042f4 <menu+0x2ecc>
 80042c8:	4b6c      	ldr	r3, [pc, #432]	; (800447c <menu+0x3054>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	f083 0301 	eor.w	r3, r3, #1
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00e      	beq.n	80042f4 <menu+0x2ecc>
			demoMode = demoMode + 1;
 80042d6:	4b6a      	ldr	r3, [pc, #424]	; (8004480 <menu+0x3058>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	3301      	adds	r3, #1
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	4b68      	ldr	r3, [pc, #416]	; (8004480 <menu+0x3058>)
 80042e0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80042e2:	4b67      	ldr	r3, [pc, #412]	; (8004480 <menu+0x3058>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d902      	bls.n	80042f0 <menu+0x2ec8>
				demoMode = 0;
 80042ea:	4b65      	ldr	r3, [pc, #404]	; (8004480 <menu+0x3058>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042f0:	f000 fd32 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80042f4:	2104      	movs	r1, #4
 80042f6:	4860      	ldr	r0, [pc, #384]	; (8004478 <menu+0x3050>)
 80042f8:	f005 f910 	bl	800951c <HAL_GPIO_ReadPin>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d115      	bne.n	800432e <menu+0x2f06>
 8004302:	4b5e      	ldr	r3, [pc, #376]	; (800447c <menu+0x3054>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	f083 0301 	eor.w	r3, r3, #1
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00e      	beq.n	800432e <menu+0x2f06>
			demoMode = demoMode - 1;
 8004310:	4b5b      	ldr	r3, [pc, #364]	; (8004480 <menu+0x3058>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	3b01      	subs	r3, #1
 8004316:	b2da      	uxtb	r2, r3
 8004318:	4b59      	ldr	r3, [pc, #356]	; (8004480 <menu+0x3058>)
 800431a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800431c:	4b58      	ldr	r3, [pc, #352]	; (8004480 <menu+0x3058>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <menu+0x2f02>
		   		demoMode = 1;
 8004324:	4b56      	ldr	r3, [pc, #344]	; (8004480 <menu+0x3058>)
 8004326:	2201      	movs	r2, #1
 8004328:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800432a:	f000 fd15 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800432e:	2108      	movs	r1, #8
 8004330:	4851      	ldr	r0, [pc, #324]	; (8004478 <menu+0x3050>)
 8004332:	f005 f8f3 	bl	800951c <HAL_GPIO_ReadPin>
 8004336:	4603      	mov	r3, r0
 8004338:	2b01      	cmp	r3, #1
 800433a:	d10d      	bne.n	8004358 <menu+0x2f30>
 800433c:	4b4f      	ldr	r3, [pc, #316]	; (800447c <menu+0x3054>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	f083 0301 	eor.w	r3, r3, #1
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d006      	beq.n	8004358 <menu+0x2f30>
			eepromData[26] = demoMode;
 800434a:	4b4d      	ldr	r3, [pc, #308]	; (8004480 <menu+0x3058>)
 800434c:	781a      	ldrb	r2, [r3, #0]
 800434e:	4b4d      	ldr	r3, [pc, #308]	; (8004484 <menu+0x305c>)
 8004350:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004352:	4b4d      	ldr	r3, [pc, #308]	; (8004488 <menu+0x3060>)
 8004354:	2201      	movs	r2, #1
 8004356:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004358:	4b4c      	ldr	r3, [pc, #304]	; (800448c <menu+0x3064>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b1d      	cmp	r3, #29
 800435e:	f040 8132 	bne.w	80045c6 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004362:	4b4b      	ldr	r3, [pc, #300]	; (8004490 <menu+0x3068>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d113      	bne.n	8004392 <menu+0x2f6a>
 800436a:	4b4a      	ldr	r3, [pc, #296]	; (8004494 <menu+0x306c>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10f      	bne.n	8004392 <menu+0x2f6a>
 8004372:	4b49      	ldr	r3, [pc, #292]	; (8004498 <menu+0x3070>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10b      	bne.n	8004392 <menu+0x2f6a>
 800437a:	4b48      	ldr	r3, [pc, #288]	; (800449c <menu+0x3074>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d107      	bne.n	8004392 <menu+0x2f6a>
 8004382:	4b47      	ldr	r3, [pc, #284]	; (80044a0 <menu+0x3078>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800438a:	4b46      	ldr	r3, [pc, #280]	; (80044a4 <menu+0x307c>)
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	e002      	b.n	8004398 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004392:	4b44      	ldr	r3, [pc, #272]	; (80044a4 <menu+0x307c>)
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004398:	4b43      	ldr	r3, [pc, #268]	; (80044a8 <menu+0x3080>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d154      	bne.n	800444a <menu+0x3022>
			if(dilSecim == 0) {
 80043a0:	4b33      	ldr	r3, [pc, #204]	; (8004470 <menu+0x3048>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80043a8:	4a40      	ldr	r2, [pc, #256]	; (80044ac <menu+0x3084>)
 80043aa:	2101      	movs	r1, #1
 80043ac:	2001      	movs	r0, #1
 80043ae:	f003 fd8f 	bl	8007ed0 <lcd_print>
 80043b2:	e008      	b.n	80043c6 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80043b4:	4b2e      	ldr	r3, [pc, #184]	; (8004470 <menu+0x3048>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d104      	bne.n	80043c6 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80043bc:	4a3c      	ldr	r2, [pc, #240]	; (80044b0 <menu+0x3088>)
 80043be:	2101      	movs	r1, #1
 80043c0:	2001      	movs	r0, #1
 80043c2:	f003 fd85 	bl	8007ed0 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80043c6:	4b36      	ldr	r3, [pc, #216]	; (80044a0 <menu+0x3078>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	220a      	movs	r2, #10
 80043cc:	4939      	ldr	r1, [pc, #228]	; (80044b4 <menu+0x308c>)
 80043ce:	4618      	mov	r0, r3
 80043d0:	f008 f92c 	bl	800c62c <itoa>
			lcd_print(2, 12, snum);
 80043d4:	4a37      	ldr	r2, [pc, #220]	; (80044b4 <menu+0x308c>)
 80043d6:	210c      	movs	r1, #12
 80043d8:	2002      	movs	r0, #2
 80043da:	f003 fd79 	bl	8007ed0 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80043de:	4b2f      	ldr	r3, [pc, #188]	; (800449c <menu+0x3074>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	220a      	movs	r2, #10
 80043e4:	4933      	ldr	r1, [pc, #204]	; (80044b4 <menu+0x308c>)
 80043e6:	4618      	mov	r0, r3
 80043e8:	f008 f920 	bl	800c62c <itoa>
			lcd_print(2, 13, snum);
 80043ec:	4a31      	ldr	r2, [pc, #196]	; (80044b4 <menu+0x308c>)
 80043ee:	210d      	movs	r1, #13
 80043f0:	2002      	movs	r0, #2
 80043f2:	f003 fd6d 	bl	8007ed0 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80043f6:	4b28      	ldr	r3, [pc, #160]	; (8004498 <menu+0x3070>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	220a      	movs	r2, #10
 80043fc:	492d      	ldr	r1, [pc, #180]	; (80044b4 <menu+0x308c>)
 80043fe:	4618      	mov	r0, r3
 8004400:	f008 f914 	bl	800c62c <itoa>
			lcd_print(2, 14, snum);
 8004404:	4a2b      	ldr	r2, [pc, #172]	; (80044b4 <menu+0x308c>)
 8004406:	210e      	movs	r1, #14
 8004408:	2002      	movs	r0, #2
 800440a:	f003 fd61 	bl	8007ed0 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800440e:	4b21      	ldr	r3, [pc, #132]	; (8004494 <menu+0x306c>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	220a      	movs	r2, #10
 8004414:	4927      	ldr	r1, [pc, #156]	; (80044b4 <menu+0x308c>)
 8004416:	4618      	mov	r0, r3
 8004418:	f008 f908 	bl	800c62c <itoa>
			lcd_print(2, 15, snum);
 800441c:	4a25      	ldr	r2, [pc, #148]	; (80044b4 <menu+0x308c>)
 800441e:	210f      	movs	r1, #15
 8004420:	2002      	movs	r0, #2
 8004422:	f003 fd55 	bl	8007ed0 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004426:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <menu+0x3068>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	220a      	movs	r2, #10
 800442c:	4921      	ldr	r1, [pc, #132]	; (80044b4 <menu+0x308c>)
 800442e:	4618      	mov	r0, r3
 8004430:	f008 f8fc 	bl	800c62c <itoa>
			lcd_print(2, 16, snum);
 8004434:	4a1f      	ldr	r2, [pc, #124]	; (80044b4 <menu+0x308c>)
 8004436:	2110      	movs	r1, #16
 8004438:	2002      	movs	r0, #2
 800443a:	f003 fd49 	bl	8007ed0 <lcd_print>

			lcd_print(2, 1, "           ");
 800443e:	4a1e      	ldr	r2, [pc, #120]	; (80044b8 <menu+0x3090>)
 8004440:	2101      	movs	r1, #1
 8004442:	2002      	movs	r0, #2
 8004444:	f003 fd44 	bl	8007ed0 <lcd_print>
 8004448:	e048      	b.n	80044dc <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 800444a:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <menu+0x3080>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d144      	bne.n	80044dc <menu+0x30b4>
			if(dilSecim == 0) {
 8004452:	4b07      	ldr	r3, [pc, #28]	; (8004470 <menu+0x3048>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d132      	bne.n	80044c0 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800445a:	4a14      	ldr	r2, [pc, #80]	; (80044ac <menu+0x3084>)
 800445c:	2101      	movs	r1, #1
 800445e:	2001      	movs	r0, #1
 8004460:	f003 fd36 	bl	8007ed0 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <menu+0x3094>)
 8004466:	2101      	movs	r1, #1
 8004468:	2002      	movs	r0, #2
 800446a:	f003 fd31 	bl	8007ed0 <lcd_print>
 800446e:	e035      	b.n	80044dc <menu+0x30b4>
 8004470:	20000241 	.word	0x20000241
 8004474:	0800d630 	.word	0x0800d630
 8004478:	40010800 	.word	0x40010800
 800447c:	2000024f 	.word	0x2000024f
 8004480:	2000023e 	.word	0x2000023e
 8004484:	20000118 	.word	0x20000118
 8004488:	2000024c 	.word	0x2000024c
 800448c:	20000220 	.word	0x20000220
 8004490:	2000021d 	.word	0x2000021d
 8004494:	2000021e 	.word	0x2000021e
 8004498:	20000000 	.word	0x20000000
 800449c:	20000001 	.word	0x20000001
 80044a0:	2000021f 	.word	0x2000021f
 80044a4:	20000261 	.word	0x20000261
 80044a8:	20000240 	.word	0x20000240
 80044ac:	0800dcb8 	.word	0x0800dcb8
 80044b0:	0800dccc 	.word	0x0800dccc
 80044b4:	20000188 	.word	0x20000188
 80044b8:	0800dce0 	.word	0x0800dce0
 80044bc:	0800dcec 	.word	0x0800dcec
			} else if(dilSecim == 1) {
 80044c0:	4b94      	ldr	r3, [pc, #592]	; (8004714 <menu+0x32ec>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d109      	bne.n	80044dc <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80044c8:	4a93      	ldr	r2, [pc, #588]	; (8004718 <menu+0x32f0>)
 80044ca:	2101      	movs	r1, #1
 80044cc:	2001      	movs	r0, #1
 80044ce:	f003 fcff 	bl	8007ed0 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80044d2:	4a92      	ldr	r2, [pc, #584]	; (800471c <menu+0x32f4>)
 80044d4:	2101      	movs	r1, #1
 80044d6:	2002      	movs	r0, #2
 80044d8:	f003 fcfa 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80044dc:	2102      	movs	r1, #2
 80044de:	4890      	ldr	r0, [pc, #576]	; (8004720 <menu+0x32f8>)
 80044e0:	f005 f81c 	bl	800951c <HAL_GPIO_ReadPin>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d119      	bne.n	800451e <menu+0x30f6>
 80044ea:	4b8e      	ldr	r3, [pc, #568]	; (8004724 <menu+0x32fc>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	f083 0301 	eor.w	r3, r3, #1
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d012      	beq.n	800451e <menu+0x30f6>
 80044f8:	4b8b      	ldr	r3, [pc, #556]	; (8004728 <menu+0x3300>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00e      	beq.n	800451e <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004500:	4b8a      	ldr	r3, [pc, #552]	; (800472c <menu+0x3304>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	3301      	adds	r3, #1
 8004506:	b2da      	uxtb	r2, r3
 8004508:	4b88      	ldr	r3, [pc, #544]	; (800472c <menu+0x3304>)
 800450a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800450c:	4b87      	ldr	r3, [pc, #540]	; (800472c <menu+0x3304>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d902      	bls.n	800451a <menu+0x30f2>
				calismaSayModu = 0;
 8004514:	4b85      	ldr	r3, [pc, #532]	; (800472c <menu+0x3304>)
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800451a:	f000 fc1d 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800451e:	2104      	movs	r1, #4
 8004520:	487f      	ldr	r0, [pc, #508]	; (8004720 <menu+0x32f8>)
 8004522:	f004 fffb 	bl	800951c <HAL_GPIO_ReadPin>
 8004526:	4603      	mov	r3, r0
 8004528:	2b01      	cmp	r3, #1
 800452a:	d119      	bne.n	8004560 <menu+0x3138>
 800452c:	4b7d      	ldr	r3, [pc, #500]	; (8004724 <menu+0x32fc>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	f083 0301 	eor.w	r3, r3, #1
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d012      	beq.n	8004560 <menu+0x3138>
 800453a:	4b7b      	ldr	r3, [pc, #492]	; (8004728 <menu+0x3300>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00e      	beq.n	8004560 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 8004542:	4b7a      	ldr	r3, [pc, #488]	; (800472c <menu+0x3304>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	3b01      	subs	r3, #1
 8004548:	b2da      	uxtb	r2, r3
 800454a:	4b78      	ldr	r3, [pc, #480]	; (800472c <menu+0x3304>)
 800454c:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800454e:	4b77      	ldr	r3, [pc, #476]	; (800472c <menu+0x3304>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <menu+0x3134>
		   		calismaSayModu = 1;
 8004556:	4b75      	ldr	r3, [pc, #468]	; (800472c <menu+0x3304>)
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800455c:	f000 fbfc 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004560:	2108      	movs	r1, #8
 8004562:	486f      	ldr	r0, [pc, #444]	; (8004720 <menu+0x32f8>)
 8004564:	f004 ffda 	bl	800951c <HAL_GPIO_ReadPin>
 8004568:	4603      	mov	r3, r0
 800456a:	2b01      	cmp	r3, #1
 800456c:	d12b      	bne.n	80045c6 <menu+0x319e>
 800456e:	4b6d      	ldr	r3, [pc, #436]	; (8004724 <menu+0x32fc>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	f083 0301 	eor.w	r3, r3, #1
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d024      	beq.n	80045c6 <menu+0x319e>
			eepromData[32] = 0;
 800457c:	4b6c      	ldr	r3, [pc, #432]	; (8004730 <menu+0x3308>)
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004584:	4b6a      	ldr	r3, [pc, #424]	; (8004730 <menu+0x3308>)
 8004586:	2200      	movs	r2, #0
 8004588:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800458a:	4b69      	ldr	r3, [pc, #420]	; (8004730 <menu+0x3308>)
 800458c:	2200      	movs	r2, #0
 800458e:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004590:	4b67      	ldr	r3, [pc, #412]	; (8004730 <menu+0x3308>)
 8004592:	2200      	movs	r2, #0
 8004594:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004596:	4b66      	ldr	r3, [pc, #408]	; (8004730 <menu+0x3308>)
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 800459c:	4b65      	ldr	r3, [pc, #404]	; (8004734 <menu+0x330c>)
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80045a2:	4b65      	ldr	r3, [pc, #404]	; (8004738 <menu+0x3310>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80045a8:	4b64      	ldr	r3, [pc, #400]	; (800473c <menu+0x3314>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80045ae:	4b64      	ldr	r3, [pc, #400]	; (8004740 <menu+0x3318>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80045b4:	4b63      	ldr	r3, [pc, #396]	; (8004744 <menu+0x331c>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80045ba:	4b5c      	ldr	r3, [pc, #368]	; (800472c <menu+0x3304>)
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80045c0:	4b61      	ldr	r3, [pc, #388]	; (8004748 <menu+0x3320>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80045c6:	4b61      	ldr	r3, [pc, #388]	; (800474c <menu+0x3324>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b1e      	cmp	r3, #30
 80045cc:	d16f      	bne.n	80046ae <menu+0x3286>
		calismaSayModu = 0;
 80045ce:	4b57      	ldr	r3, [pc, #348]	; (800472c <menu+0x3304>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80045d4:	4b4f      	ldr	r3, [pc, #316]	; (8004714 <menu+0x32ec>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80045dc:	4a5c      	ldr	r2, [pc, #368]	; (8004750 <menu+0x3328>)
 80045de:	2101      	movs	r1, #1
 80045e0:	2001      	movs	r0, #1
 80045e2:	f003 fc75 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80045e6:	4a5b      	ldr	r2, [pc, #364]	; (8004754 <menu+0x332c>)
 80045e8:	2101      	movs	r1, #1
 80045ea:	2002      	movs	r0, #2
 80045ec:	f003 fc70 	bl	8007ed0 <lcd_print>
 80045f0:	e00d      	b.n	800460e <menu+0x31e6>
		} else if(dilSecim == 1) {
 80045f2:	4b48      	ldr	r3, [pc, #288]	; (8004714 <menu+0x32ec>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d109      	bne.n	800460e <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80045fa:	4a57      	ldr	r2, [pc, #348]	; (8004758 <menu+0x3330>)
 80045fc:	2101      	movs	r1, #1
 80045fe:	2001      	movs	r0, #1
 8004600:	f003 fc66 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004604:	4a55      	ldr	r2, [pc, #340]	; (800475c <menu+0x3334>)
 8004606:	2101      	movs	r1, #1
 8004608:	2002      	movs	r0, #2
 800460a:	f003 fc61 	bl	8007ed0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800460e:	2102      	movs	r1, #2
 8004610:	4843      	ldr	r0, [pc, #268]	; (8004720 <menu+0x32f8>)
 8004612:	f004 ff83 	bl	800951c <HAL_GPIO_ReadPin>
 8004616:	4603      	mov	r3, r0
 8004618:	2b01      	cmp	r3, #1
 800461a:	d115      	bne.n	8004648 <menu+0x3220>
 800461c:	4b41      	ldr	r3, [pc, #260]	; (8004724 <menu+0x32fc>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	f083 0301 	eor.w	r3, r3, #1
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00e      	beq.n	8004648 <menu+0x3220>
			dilSecim = dilSecim + 1;
 800462a:	4b3a      	ldr	r3, [pc, #232]	; (8004714 <menu+0x32ec>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	3301      	adds	r3, #1
 8004630:	b2da      	uxtb	r2, r3
 8004632:	4b38      	ldr	r3, [pc, #224]	; (8004714 <menu+0x32ec>)
 8004634:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004636:	4b37      	ldr	r3, [pc, #220]	; (8004714 <menu+0x32ec>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d902      	bls.n	8004644 <menu+0x321c>
				dilSecim = 0;
 800463e:	4b35      	ldr	r3, [pc, #212]	; (8004714 <menu+0x32ec>)
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004644:	f000 fb88 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004648:	2104      	movs	r1, #4
 800464a:	4835      	ldr	r0, [pc, #212]	; (8004720 <menu+0x32f8>)
 800464c:	f004 ff66 	bl	800951c <HAL_GPIO_ReadPin>
 8004650:	4603      	mov	r3, r0
 8004652:	2b01      	cmp	r3, #1
 8004654:	d115      	bne.n	8004682 <menu+0x325a>
 8004656:	4b33      	ldr	r3, [pc, #204]	; (8004724 <menu+0x32fc>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	f083 0301 	eor.w	r3, r3, #1
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00e      	beq.n	8004682 <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004664:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <menu+0x32ec>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	3b01      	subs	r3, #1
 800466a:	b2da      	uxtb	r2, r3
 800466c:	4b29      	ldr	r3, [pc, #164]	; (8004714 <menu+0x32ec>)
 800466e:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004670:	4b28      	ldr	r3, [pc, #160]	; (8004714 <menu+0x32ec>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <menu+0x3256>
		   		dilSecim = 1;
 8004678:	4b26      	ldr	r3, [pc, #152]	; (8004714 <menu+0x32ec>)
 800467a:	2201      	movs	r2, #1
 800467c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800467e:	f000 fb6b 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004682:	2108      	movs	r1, #8
 8004684:	4826      	ldr	r0, [pc, #152]	; (8004720 <menu+0x32f8>)
 8004686:	f004 ff49 	bl	800951c <HAL_GPIO_ReadPin>
 800468a:	4603      	mov	r3, r0
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10e      	bne.n	80046ae <menu+0x3286>
 8004690:	4b24      	ldr	r3, [pc, #144]	; (8004724 <menu+0x32fc>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	f083 0301 	eor.w	r3, r3, #1
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <menu+0x3286>
			eepromData[33] = dilSecim;
 800469e:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <menu+0x32ec>)
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	4b23      	ldr	r3, [pc, #140]	; (8004730 <menu+0x3308>)
 80046a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80046a8:	4b27      	ldr	r3, [pc, #156]	; (8004748 <menu+0x3320>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80046ae:	4b27      	ldr	r3, [pc, #156]	; (800474c <menu+0x3324>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b1f      	cmp	r3, #31
 80046b4:	f040 80b7 	bne.w	8004826 <menu+0x33fe>
		calismaSayModu = 0;
 80046b8:	4b1c      	ldr	r3, [pc, #112]	; (800472c <menu+0x3304>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80046be:	4a28      	ldr	r2, [pc, #160]	; (8004760 <menu+0x3338>)
 80046c0:	2101      	movs	r1, #1
 80046c2:	2001      	movs	r0, #1
 80046c4:	f003 fc04 	bl	8007ed0 <lcd_print>

		if(iotMode == 0) {
 80046c8:	4b26      	ldr	r3, [pc, #152]	; (8004764 <menu+0x333c>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d113      	bne.n	80046f8 <menu+0x32d0>
			if(dilSecim == 0) {
 80046d0:	4b10      	ldr	r3, [pc, #64]	; (8004714 <menu+0x32ec>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d105      	bne.n	80046e4 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80046d8:	4a23      	ldr	r2, [pc, #140]	; (8004768 <menu+0x3340>)
 80046da:	2101      	movs	r1, #1
 80046dc:	2002      	movs	r0, #2
 80046de:	f003 fbf7 	bl	8007ed0 <lcd_print>
 80046e2:	e050      	b.n	8004786 <menu+0x335e>
			} else if(dilSecim == 1) {
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <menu+0x32ec>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d14c      	bne.n	8004786 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80046ec:	4a1f      	ldr	r2, [pc, #124]	; (800476c <menu+0x3344>)
 80046ee:	2101      	movs	r1, #1
 80046f0:	2002      	movs	r0, #2
 80046f2:	f003 fbed 	bl	8007ed0 <lcd_print>
 80046f6:	e046      	b.n	8004786 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <menu+0x333c>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d142      	bne.n	8004786 <menu+0x335e>
			if(dilSecim == 0) {
 8004700:	4b04      	ldr	r3, [pc, #16]	; (8004714 <menu+0x32ec>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d135      	bne.n	8004774 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004708:	4a19      	ldr	r2, [pc, #100]	; (8004770 <menu+0x3348>)
 800470a:	2101      	movs	r1, #1
 800470c:	2002      	movs	r0, #2
 800470e:	f003 fbdf 	bl	8007ed0 <lcd_print>
 8004712:	e038      	b.n	8004786 <menu+0x335e>
 8004714:	20000241 	.word	0x20000241
 8004718:	0800dccc 	.word	0x0800dccc
 800471c:	0800dd00 	.word	0x0800dd00
 8004720:	40010800 	.word	0x40010800
 8004724:	2000024f 	.word	0x2000024f
 8004728:	20000261 	.word	0x20000261
 800472c:	20000240 	.word	0x20000240
 8004730:	20000118 	.word	0x20000118
 8004734:	2000021f 	.word	0x2000021f
 8004738:	20000001 	.word	0x20000001
 800473c:	20000000 	.word	0x20000000
 8004740:	2000021e 	.word	0x2000021e
 8004744:	2000021d 	.word	0x2000021d
 8004748:	2000024c 	.word	0x2000024c
 800474c:	20000220 	.word	0x20000220
 8004750:	0800dd14 	.word	0x0800dd14
 8004754:	0800dd28 	.word	0x0800dd28
 8004758:	0800dd3c 	.word	0x0800dd3c
 800475c:	0800dd50 	.word	0x0800dd50
 8004760:	0800dd64 	.word	0x0800dd64
 8004764:	2000023f 	.word	0x2000023f
 8004768:	0800d5bc 	.word	0x0800d5bc
 800476c:	0800d5d0 	.word	0x0800d5d0
 8004770:	0800d61c 	.word	0x0800d61c
			} else if(dilSecim == 1) {
 8004774:	4ba3      	ldr	r3, [pc, #652]	; (8004a04 <menu+0x35dc>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d104      	bne.n	8004786 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 800477c:	4aa2      	ldr	r2, [pc, #648]	; (8004a08 <menu+0x35e0>)
 800477e:	2101      	movs	r1, #1
 8004780:	2002      	movs	r0, #2
 8004782:	f003 fba5 	bl	8007ed0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004786:	2102      	movs	r1, #2
 8004788:	48a0      	ldr	r0, [pc, #640]	; (8004a0c <menu+0x35e4>)
 800478a:	f004 fec7 	bl	800951c <HAL_GPIO_ReadPin>
 800478e:	4603      	mov	r3, r0
 8004790:	2b01      	cmp	r3, #1
 8004792:	d115      	bne.n	80047c0 <menu+0x3398>
 8004794:	4b9e      	ldr	r3, [pc, #632]	; (8004a10 <menu+0x35e8>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	f083 0301 	eor.w	r3, r3, #1
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00e      	beq.n	80047c0 <menu+0x3398>
			iotMode = iotMode + 1;
 80047a2:	4b9c      	ldr	r3, [pc, #624]	; (8004a14 <menu+0x35ec>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	3301      	adds	r3, #1
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	4b9a      	ldr	r3, [pc, #616]	; (8004a14 <menu+0x35ec>)
 80047ac:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80047ae:	4b99      	ldr	r3, [pc, #612]	; (8004a14 <menu+0x35ec>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d902      	bls.n	80047bc <menu+0x3394>
				iotMode = 0;
 80047b6:	4b97      	ldr	r3, [pc, #604]	; (8004a14 <menu+0x35ec>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80047bc:	f000 facc 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047c0:	2104      	movs	r1, #4
 80047c2:	4892      	ldr	r0, [pc, #584]	; (8004a0c <menu+0x35e4>)
 80047c4:	f004 feaa 	bl	800951c <HAL_GPIO_ReadPin>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d115      	bne.n	80047fa <menu+0x33d2>
 80047ce:	4b90      	ldr	r3, [pc, #576]	; (8004a10 <menu+0x35e8>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	f083 0301 	eor.w	r3, r3, #1
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00e      	beq.n	80047fa <menu+0x33d2>
			iotMode = iotMode - 1;
 80047dc:	4b8d      	ldr	r3, [pc, #564]	; (8004a14 <menu+0x35ec>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	4b8b      	ldr	r3, [pc, #556]	; (8004a14 <menu+0x35ec>)
 80047e6:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80047e8:	4b8a      	ldr	r3, [pc, #552]	; (8004a14 <menu+0x35ec>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <menu+0x33ce>
		   		iotMode = 1;
 80047f0:	4b88      	ldr	r3, [pc, #544]	; (8004a14 <menu+0x35ec>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80047f6:	f000 faaf 	bl	8004d58 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80047fa:	2108      	movs	r1, #8
 80047fc:	4883      	ldr	r0, [pc, #524]	; (8004a0c <menu+0x35e4>)
 80047fe:	f004 fe8d 	bl	800951c <HAL_GPIO_ReadPin>
 8004802:	4603      	mov	r3, r0
 8004804:	2b01      	cmp	r3, #1
 8004806:	d10e      	bne.n	8004826 <menu+0x33fe>
 8004808:	4b81      	ldr	r3, [pc, #516]	; (8004a10 <menu+0x35e8>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f083 0301 	eor.w	r3, r3, #1
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004816:	4b7f      	ldr	r3, [pc, #508]	; (8004a14 <menu+0x35ec>)
 8004818:	781a      	ldrb	r2, [r3, #0]
 800481a:	4b7f      	ldr	r3, [pc, #508]	; (8004a18 <menu+0x35f0>)
 800481c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004820:	4b7e      	ldr	r3, [pc, #504]	; (8004a1c <menu+0x35f4>)
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004826:	4b7e      	ldr	r3, [pc, #504]	; (8004a20 <menu+0x35f8>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b20      	cmp	r3, #32
 800482c:	d14b      	bne.n	80048c6 <menu+0x349e>
		calismaSayModu = 0;
 800482e:	4b7d      	ldr	r3, [pc, #500]	; (8004a24 <menu+0x35fc>)
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8004834:	2001      	movs	r0, #1
 8004836:	f7fb ff7f 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 800483a:	2032      	movs	r0, #50	; 0x32
 800483c:	f004 f89e 	bl	800897c <HAL_Delay>

		if(dilSecim == 0) {
 8004840:	4b70      	ldr	r3, [pc, #448]	; (8004a04 <menu+0x35dc>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d105      	bne.n	8004854 <menu+0x342c>
			lcd_print(1, 1, "MAKINE ID       ");
 8004848:	4a77      	ldr	r2, [pc, #476]	; (8004a28 <menu+0x3600>)
 800484a:	2101      	movs	r1, #1
 800484c:	2001      	movs	r0, #1
 800484e:	f003 fb3f 	bl	8007ed0 <lcd_print>
 8004852:	e004      	b.n	800485e <menu+0x3436>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004854:	4a75      	ldr	r2, [pc, #468]	; (8004a2c <menu+0x3604>)
 8004856:	2101      	movs	r1, #1
 8004858:	2001      	movs	r0, #1
 800485a:	f003 fb39 	bl	8007ed0 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 800485e:	4a74      	ldr	r2, [pc, #464]	; (8004a30 <menu+0x3608>)
 8004860:	2101      	movs	r1, #1
 8004862:	2002      	movs	r0, #2
 8004864:	f003 fb34 	bl	8007ed0 <lcd_print>
		lcd_print(2, 13, "    ");
 8004868:	4a72      	ldr	r2, [pc, #456]	; (8004a34 <menu+0x360c>)
 800486a:	210d      	movs	r1, #13
 800486c:	2002      	movs	r0, #2
 800486e:	f003 fb2f 	bl	8007ed0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004872:	2102      	movs	r1, #2
 8004874:	4865      	ldr	r0, [pc, #404]	; (8004a0c <menu+0x35e4>)
 8004876:	f004 fe51 	bl	800951c <HAL_GPIO_ReadPin>
 800487a:	4603      	mov	r3, r0
 800487c:	2b01      	cmp	r3, #1
 800487e:	d122      	bne.n	80048c6 <menu+0x349e>
 8004880:	2104      	movs	r1, #4
 8004882:	4862      	ldr	r0, [pc, #392]	; (8004a0c <menu+0x35e4>)
 8004884:	f004 fe4a 	bl	800951c <HAL_GPIO_ReadPin>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d11b      	bne.n	80048c6 <menu+0x349e>
 800488e:	4b60      	ldr	r3, [pc, #384]	; (8004a10 <menu+0x35e8>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	f083 0301 	eor.w	r3, r3, #1
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d014      	beq.n	80048c6 <menu+0x349e>
			takeMachineID();
 800489c:	f002 fb68 	bl	8006f70 <takeMachineID>

			convertArrays(1);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f7fb ff49 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 80048a6:	2032      	movs	r0, #50	; 0x32
 80048a8:	f004 f868 	bl	800897c <HAL_Delay>

			HAL_Delay(250);
 80048ac:	20fa      	movs	r0, #250	; 0xfa
 80048ae:	f004 f865 	bl	800897c <HAL_Delay>
			lcd_print(2, 1, machineID);
 80048b2:	4a5f      	ldr	r2, [pc, #380]	; (8004a30 <menu+0x3608>)
 80048b4:	2101      	movs	r1, #1
 80048b6:	2002      	movs	r0, #2
 80048b8:	f003 fb0a 	bl	8007ed0 <lcd_print>
			lcd_print(2, 13, "    ");
 80048bc:	4a5d      	ldr	r2, [pc, #372]	; (8004a34 <menu+0x360c>)
 80048be:	210d      	movs	r1, #13
 80048c0:	2002      	movs	r0, #2
 80048c2:	f003 fb05 	bl	8007ed0 <lcd_print>
		}
	}

	if (menuSayac == 33) {
 80048c6:	4b56      	ldr	r3, [pc, #344]	; (8004a20 <menu+0x35f8>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b21      	cmp	r3, #33	; 0x21
 80048cc:	f040 80cb 	bne.w	8004a66 <menu+0x363e>
		calismaSayModu = 0;
 80048d0:	4b54      	ldr	r3, [pc, #336]	; (8004a24 <menu+0x35fc>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
		int ssidLength = strlen(wifiSSID);
 80048d6:	4858      	ldr	r0, [pc, #352]	; (8004a38 <menu+0x3610>)
 80048d8:	f7fb fca4 	bl	8000224 <strlen>
 80048dc:	4603      	mov	r3, r0
 80048de:	637b      	str	r3, [r7, #52]	; 0x34

		convertArrays(2);
 80048e0:	2002      	movs	r0, #2
 80048e2:	f7fb ff29 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 80048e6:	2032      	movs	r0, #50	; 0x32
 80048e8:	f004 f848 	bl	800897c <HAL_Delay>

		lcd_print(1, 1, "WIFI SSID       ");
 80048ec:	4a53      	ldr	r2, [pc, #332]	; (8004a3c <menu+0x3614>)
 80048ee:	2101      	movs	r1, #1
 80048f0:	2001      	movs	r0, #1
 80048f2:	f003 faed 	bl	8007ed0 <lcd_print>
		if(ssidLength == 16) {
 80048f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d105      	bne.n	8004908 <menu+0x34e0>
			lcd_print(2, 1, wifiSSID);
 80048fc:	4a4e      	ldr	r2, [pc, #312]	; (8004a38 <menu+0x3610>)
 80048fe:	2101      	movs	r1, #1
 8004900:	2002      	movs	r0, #2
 8004902:	f003 fae5 	bl	8007ed0 <lcd_print>
 8004906:	e030      	b.n	800496a <menu+0x3542>
		} else if(ssidLength < 16) {
 8004908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490a:	2b0f      	cmp	r3, #15
 800490c:	dc15      	bgt.n	800493a <menu+0x3512>
			for(int i=0; i<16-ssidLength; i++) {
 800490e:	2300      	movs	r3, #0
 8004910:	633b      	str	r3, [r7, #48]	; 0x30
 8004912:	e00b      	b.n	800492c <menu+0x3504>
				lcd_delete_char(2, ssidLength);
 8004914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004916:	b2db      	uxtb	r3, r3
 8004918:	4619      	mov	r1, r3
 800491a:	2002      	movs	r0, #2
 800491c:	f003 fb0e 	bl	8007f3c <lcd_delete_char>
				ssidLength++;
 8004920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004922:	3301      	adds	r3, #1
 8004924:	637b      	str	r3, [r7, #52]	; 0x34
			for(int i=0; i<16-ssidLength; i++) {
 8004926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004928:	3301      	adds	r3, #1
 800492a:	633b      	str	r3, [r7, #48]	; 0x30
 800492c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492e:	f1c3 0310 	rsb	r3, r3, #16
 8004932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004934:	429a      	cmp	r2, r3
 8004936:	dbed      	blt.n	8004914 <menu+0x34ec>
 8004938:	e017      	b.n	800496a <menu+0x3542>
			}
		} else {
			int lcdVal = 1;
 800493a:	2301      	movs	r3, #1
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c

			//Eğer ssid 16'dan büyükse buraya ekle
			for(int i=0; i<16; i++) {
 800493e:	2300      	movs	r3, #0
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
 8004942:	e00f      	b.n	8004964 <menu+0x353c>
				lcd_print_char(2, lcdVal, wifiSSID[i]);
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	b2d9      	uxtb	r1, r3
 8004948:	4a3b      	ldr	r2, [pc, #236]	; (8004a38 <menu+0x3610>)
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	4413      	add	r3, r2
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	2002      	movs	r0, #2
 8004954:	f003 fad1 	bl	8007efa <lcd_print_char>
				lcdVal++;
 8004958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495a:	3301      	adds	r3, #1
 800495c:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(int i=0; i<16; i++) {
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	3301      	adds	r3, #1
 8004962:	62bb      	str	r3, [r7, #40]	; 0x28
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	2b0f      	cmp	r3, #15
 8004968:	ddec      	ble.n	8004944 <menu+0x351c>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800496a:	2102      	movs	r1, #2
 800496c:	4827      	ldr	r0, [pc, #156]	; (8004a0c <menu+0x35e4>)
 800496e:	f004 fdd5 	bl	800951c <HAL_GPIO_ReadPin>
 8004972:	4603      	mov	r3, r0
 8004974:	2b01      	cmp	r3, #1
 8004976:	d176      	bne.n	8004a66 <menu+0x363e>
 8004978:	2104      	movs	r1, #4
 800497a:	4824      	ldr	r0, [pc, #144]	; (8004a0c <menu+0x35e4>)
 800497c:	f004 fdce 	bl	800951c <HAL_GPIO_ReadPin>
 8004980:	4603      	mov	r3, r0
 8004982:	2b01      	cmp	r3, #1
 8004984:	d16f      	bne.n	8004a66 <menu+0x363e>
 8004986:	4b22      	ldr	r3, [pc, #136]	; (8004a10 <menu+0x35e8>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	f083 0301 	eor.w	r3, r3, #1
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d068      	beq.n	8004a66 <menu+0x363e>
			takeWifiSSID();
 8004994:	f002 fc3c 	bl	8007210 <takeWifiSSID>

			convertArrays(2);
 8004998:	2002      	movs	r0, #2
 800499a:	f7fb fecd 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 800499e:	2032      	movs	r0, #50	; 0x32
 80049a0:	f003 ffec 	bl	800897c <HAL_Delay>

			ssidLength = strlen(wifiSSID);
 80049a4:	4824      	ldr	r0, [pc, #144]	; (8004a38 <menu+0x3610>)
 80049a6:	f7fb fc3d 	bl	8000224 <strlen>
 80049aa:	4603      	mov	r3, r0
 80049ac:	637b      	str	r3, [r7, #52]	; 0x34

			HAL_Delay(250);
 80049ae:	20fa      	movs	r0, #250	; 0xfa
 80049b0:	f003 ffe4 	bl	800897c <HAL_Delay>
			if(ssidLength == 16) {
 80049b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d105      	bne.n	80049c6 <menu+0x359e>
				lcd_print(2, 1, wifiSSID);
 80049ba:	4a1f      	ldr	r2, [pc, #124]	; (8004a38 <menu+0x3610>)
 80049bc:	2101      	movs	r1, #1
 80049be:	2002      	movs	r0, #2
 80049c0:	f003 fa86 	bl	8007ed0 <lcd_print>
 80049c4:	e04f      	b.n	8004a66 <menu+0x363e>
			} else if(ssidLength < 16) {
 80049c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c8:	2b0f      	cmp	r3, #15
 80049ca:	dc15      	bgt.n	80049f8 <menu+0x35d0>
				for(int i=0; i<16-ssidLength; i++) {
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
 80049d0:	e00b      	b.n	80049ea <menu+0x35c2>
					lcd_delete_char(2, ssidLength);
 80049d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	4619      	mov	r1, r3
 80049d8:	2002      	movs	r0, #2
 80049da:	f003 faaf 	bl	8007f3c <lcd_delete_char>
					ssidLength++;
 80049de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e0:	3301      	adds	r3, #1
 80049e2:	637b      	str	r3, [r7, #52]	; 0x34
				for(int i=0; i<16-ssidLength; i++) {
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	3301      	adds	r3, #1
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ec:	f1c3 0310 	rsb	r3, r3, #16
 80049f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f2:	429a      	cmp	r2, r3
 80049f4:	dbed      	blt.n	80049d2 <menu+0x35aa>
 80049f6:	e036      	b.n	8004a66 <menu+0x363e>
				}
			} else {
				int lcdVal = 1;
 80049f8:	2301      	movs	r3, #1
 80049fa:	623b      	str	r3, [r7, #32]

				//Eğer ssid 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 80049fc:	2300      	movs	r3, #0
 80049fe:	61fb      	str	r3, [r7, #28]
 8004a00:	e02e      	b.n	8004a60 <menu+0x3638>
 8004a02:	bf00      	nop
 8004a04:	20000241 	.word	0x20000241
 8004a08:	0800d630 	.word	0x0800d630
 8004a0c:	40010800 	.word	0x40010800
 8004a10:	2000024f 	.word	0x2000024f
 8004a14:	2000023f 	.word	0x2000023f
 8004a18:	20000118 	.word	0x20000118
 8004a1c:	2000024c 	.word	0x2000024c
 8004a20:	20000220 	.word	0x20000220
 8004a24:	20000240 	.word	0x20000240
 8004a28:	0800dd78 	.word	0x0800dd78
 8004a2c:	0800dd8c 	.word	0x0800dd8c
 8004a30:	20000190 	.word	0x20000190
 8004a34:	0800dda0 	.word	0x0800dda0
 8004a38:	2000019c 	.word	0x2000019c
 8004a3c:	0800dda8 	.word	0x0800dda8
					lcd_print_char(2, lcdVal, wifiSSID[i]);
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	b2d9      	uxtb	r1, r3
 8004a44:	4a8b      	ldr	r2, [pc, #556]	; (8004c74 <menu+0x384c>)
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	4413      	add	r3, r2
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2002      	movs	r0, #2
 8004a50:	f003 fa53 	bl	8007efa <lcd_print_char>
					lcdVal++;
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	3301      	adds	r3, #1
 8004a58:	623b      	str	r3, [r7, #32]
				for(int i=0; i<16; i++) {
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	61fb      	str	r3, [r7, #28]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	2b0f      	cmp	r3, #15
 8004a64:	ddec      	ble.n	8004a40 <menu+0x3618>
				}
			}
		}
	}

	if (menuSayac == 34) {
 8004a66:	4b84      	ldr	r3, [pc, #528]	; (8004c78 <menu+0x3850>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b22      	cmp	r3, #34	; 0x22
 8004a6c:	f040 80ac 	bne.w	8004bc8 <menu+0x37a0>
		calismaSayModu = 0;
 8004a70:	4b82      	ldr	r3, [pc, #520]	; (8004c7c <menu+0x3854>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]
		int passLength = strlen(wifiPass);
 8004a76:	4882      	ldr	r0, [pc, #520]	; (8004c80 <menu+0x3858>)
 8004a78:	f7fb fbd4 	bl	8000224 <strlen>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	61bb      	str	r3, [r7, #24]

		convertArrays(3);
 8004a80:	2003      	movs	r0, #3
 8004a82:	f7fb fe59 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 8004a86:	2032      	movs	r0, #50	; 0x32
 8004a88:	f003 ff78 	bl	800897c <HAL_Delay>

		lcd_print(1, 1, "WIFI PASS       ");
 8004a8c:	4a7d      	ldr	r2, [pc, #500]	; (8004c84 <menu+0x385c>)
 8004a8e:	2101      	movs	r1, #1
 8004a90:	2001      	movs	r0, #1
 8004a92:	f003 fa1d 	bl	8007ed0 <lcd_print>
		if(passLength == 16) {
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d105      	bne.n	8004aa8 <menu+0x3680>
			lcd_print(2, 1, wifiPass);
 8004a9c:	4a78      	ldr	r2, [pc, #480]	; (8004c80 <menu+0x3858>)
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	2002      	movs	r0, #2
 8004aa2:	f003 fa15 	bl	8007ed0 <lcd_print>
 8004aa6:	e030      	b.n	8004b0a <menu+0x36e2>
		} else if(passLength < 16) {
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b0f      	cmp	r3, #15
 8004aac:	dc15      	bgt.n	8004ada <menu+0x36b2>
			for(int i=0; i<16-passLength; i++) {
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e00b      	b.n	8004acc <menu+0x36a4>
				lcd_delete_char(2, passLength);
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	4619      	mov	r1, r3
 8004aba:	2002      	movs	r0, #2
 8004abc:	f003 fa3e 	bl	8007f3c <lcd_delete_char>
				passLength++;
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	61bb      	str	r3, [r7, #24]
			for(int i=0; i<16-passLength; i++) {
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	f1c3 0310 	rsb	r3, r3, #16
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	dbed      	blt.n	8004ab4 <menu+0x368c>
 8004ad8:	e017      	b.n	8004b0a <menu+0x36e2>
			}
		} else {
			int lcdVal = 1;
 8004ada:	2301      	movs	r3, #1
 8004adc:	613b      	str	r3, [r7, #16]

			//Eğer pass 16'dan büyükse buraya ekle
			for(int i=0; i<16; i++) {
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	e00f      	b.n	8004b04 <menu+0x36dc>
				lcd_print_char(2, lcdVal, wifiPass[i]);
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	b2d9      	uxtb	r1, r3
 8004ae8:	4a65      	ldr	r2, [pc, #404]	; (8004c80 <menu+0x3858>)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4413      	add	r3, r2
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	2002      	movs	r0, #2
 8004af4:	f003 fa01 	bl	8007efa <lcd_print_char>
				lcdVal++;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	3301      	adds	r3, #1
 8004afc:	613b      	str	r3, [r7, #16]
			for(int i=0; i<16; i++) {
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3301      	adds	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b0f      	cmp	r3, #15
 8004b08:	ddec      	ble.n	8004ae4 <menu+0x36bc>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	485e      	ldr	r0, [pc, #376]	; (8004c88 <menu+0x3860>)
 8004b0e:	f004 fd05 	bl	800951c <HAL_GPIO_ReadPin>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d157      	bne.n	8004bc8 <menu+0x37a0>
 8004b18:	2104      	movs	r1, #4
 8004b1a:	485b      	ldr	r0, [pc, #364]	; (8004c88 <menu+0x3860>)
 8004b1c:	f004 fcfe 	bl	800951c <HAL_GPIO_ReadPin>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d150      	bne.n	8004bc8 <menu+0x37a0>
 8004b26:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <menu+0x3864>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	f083 0301 	eor.w	r3, r3, #1
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d049      	beq.n	8004bc8 <menu+0x37a0>
			takeWifiPass();
 8004b34:	f002 fce2 	bl	80074fc <takeWifiPass>

			convertArrays(3);
 8004b38:	2003      	movs	r0, #3
 8004b3a:	f7fb fdfd 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 8004b3e:	2032      	movs	r0, #50	; 0x32
 8004b40:	f003 ff1c 	bl	800897c <HAL_Delay>

			passLength = strlen(wifiPass);
 8004b44:	484e      	ldr	r0, [pc, #312]	; (8004c80 <menu+0x3858>)
 8004b46:	f7fb fb6d 	bl	8000224 <strlen>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	61bb      	str	r3, [r7, #24]

			HAL_Delay(250);
 8004b4e:	20fa      	movs	r0, #250	; 0xfa
 8004b50:	f003 ff14 	bl	800897c <HAL_Delay>
			if(passLength == 16) {
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b10      	cmp	r3, #16
 8004b58:	d105      	bne.n	8004b66 <menu+0x373e>
				lcd_print(2, 1, wifiPass);
 8004b5a:	4a49      	ldr	r2, [pc, #292]	; (8004c80 <menu+0x3858>)
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	2002      	movs	r0, #2
 8004b60:	f003 f9b6 	bl	8007ed0 <lcd_print>
 8004b64:	e030      	b.n	8004bc8 <menu+0x37a0>
			} else if(passLength < 16) {
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	2b0f      	cmp	r3, #15
 8004b6a:	dc15      	bgt.n	8004b98 <menu+0x3770>
				for(int i=0; i<16-passLength; i++) {
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	e00b      	b.n	8004b8a <menu+0x3762>
					lcd_delete_char(2, passLength);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	4619      	mov	r1, r3
 8004b78:	2002      	movs	r0, #2
 8004b7a:	f003 f9df 	bl	8007f3c <lcd_delete_char>
					passLength++;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	3301      	adds	r3, #1
 8004b82:	61bb      	str	r3, [r7, #24]
				for(int i=0; i<16-passLength; i++) {
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	3301      	adds	r3, #1
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	f1c3 0310 	rsb	r3, r3, #16
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	dbed      	blt.n	8004b72 <menu+0x374a>
 8004b96:	e017      	b.n	8004bc8 <menu+0x37a0>
				}
			} else {
				int lcdVal = 1;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	607b      	str	r3, [r7, #4]

				//Eğer pass 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	e00f      	b.n	8004bc2 <menu+0x379a>
					lcd_print_char(2, lcdVal, wifiPass[i]);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	b2d9      	uxtb	r1, r3
 8004ba6:	4a36      	ldr	r2, [pc, #216]	; (8004c80 <menu+0x3858>)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	4413      	add	r3, r2
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	2002      	movs	r0, #2
 8004bb2:	f003 f9a2 	bl	8007efa <lcd_print_char>
					lcdVal++;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	607b      	str	r3, [r7, #4]
				for(int i=0; i<16; i++) {
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b0f      	cmp	r3, #15
 8004bc6:	ddec      	ble.n	8004ba2 <menu+0x377a>
				}
			}
		}
	}

	if (menuSayac == 35) {
 8004bc8:	4b2b      	ldr	r3, [pc, #172]	; (8004c78 <menu+0x3850>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b23      	cmp	r3, #35	; 0x23
 8004bce:	d14d      	bne.n	8004c6c <menu+0x3844>
		if(dilSecim == 0) {
 8004bd0:	4b2f      	ldr	r3, [pc, #188]	; (8004c90 <menu+0x3868>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <menu+0x37c6>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004bd8:	4a2e      	ldr	r2, [pc, #184]	; (8004c94 <menu+0x386c>)
 8004bda:	2101      	movs	r1, #1
 8004bdc:	2001      	movs	r0, #1
 8004bde:	f003 f977 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004be2:	4a2d      	ldr	r2, [pc, #180]	; (8004c98 <menu+0x3870>)
 8004be4:	2101      	movs	r1, #1
 8004be6:	2002      	movs	r0, #2
 8004be8:	f003 f972 	bl	8007ed0 <lcd_print>
 8004bec:	e00d      	b.n	8004c0a <menu+0x37e2>
		} else if(dilSecim == 1) {
 8004bee:	4b28      	ldr	r3, [pc, #160]	; (8004c90 <menu+0x3868>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d109      	bne.n	8004c0a <menu+0x37e2>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004bf6:	4a29      	ldr	r2, [pc, #164]	; (8004c9c <menu+0x3874>)
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	2001      	movs	r0, #1
 8004bfc:	f003 f968 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004c00:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <menu+0x3878>)
 8004c02:	2101      	movs	r1, #1
 8004c04:	2002      	movs	r0, #2
 8004c06:	f003 f963 	bl	8007ed0 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004c0a:	2108      	movs	r1, #8
 8004c0c:	481e      	ldr	r0, [pc, #120]	; (8004c88 <menu+0x3860>)
 8004c0e:	f004 fc85 	bl	800951c <HAL_GPIO_ReadPin>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d129      	bne.n	8004c6c <menu+0x3844>
			menuGiris = 0;
 8004c18:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <menu+0x387c>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004c1e:	bf00      	nop
 8004c20:	4821      	ldr	r0, [pc, #132]	; (8004ca8 <menu+0x3880>)
 8004c22:	f005 faa4 	bl	800a16e <HAL_I2C_GetError>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d0f9      	beq.n	8004c20 <menu+0x37f8>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004c2c:	bf00      	nop
 8004c2e:	481e      	ldr	r0, [pc, #120]	; (8004ca8 <menu+0x3880>)
 8004c30:	f005 fa90 	bl	800a154 <HAL_I2C_GetState>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d1f9      	bne.n	8004c2e <menu+0x3806>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004c3a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004c3e:	9302      	str	r3, [sp, #8]
 8004c40:	236e      	movs	r3, #110	; 0x6e
 8004c42:	9301      	str	r3, [sp, #4]
 8004c44:	4b19      	ldr	r3, [pc, #100]	; (8004cac <menu+0x3884>)
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	236e      	movs	r3, #110	; 0x6e
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	21a0      	movs	r1, #160	; 0xa0
 8004c4e:	4816      	ldr	r0, [pc, #88]	; (8004ca8 <menu+0x3880>)
 8004c50:	f004 ff1e 	bl	8009a90 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004c54:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004c58:	f003 fe90 	bl	800897c <HAL_Delay>

			lcd_clear();
 8004c5c:	f003 f964 	bl	8007f28 <lcd_clear>
			HAL_Delay(500);
 8004c60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c64:	f003 fe8a 	bl	800897c <HAL_Delay>
			NVIC_SystemReset();
 8004c68:	f7fc fbc8 	bl	80013fc <__NVIC_SystemReset>
		}
	}
}
 8004c6c:	bf00      	nop
 8004c6e:	3738      	adds	r7, #56	; 0x38
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	2000019c 	.word	0x2000019c
 8004c78:	20000220 	.word	0x20000220
 8004c7c:	20000240 	.word	0x20000240
 8004c80:	200001b0 	.word	0x200001b0
 8004c84:	0800ddbc 	.word	0x0800ddbc
 8004c88:	40010800 	.word	0x40010800
 8004c8c:	2000024f 	.word	0x2000024f
 8004c90:	20000241 	.word	0x20000241
 8004c94:	0800ddd0 	.word	0x0800ddd0
 8004c98:	0800dde4 	.word	0x0800dde4
 8004c9c:	0800ddf8 	.word	0x0800ddf8
 8004ca0:	0800de0c 	.word	0x0800de0c
 8004ca4:	2000023d 	.word	0x2000023d
 8004ca8:	200003a8 	.word	0x200003a8
 8004cac:	20000118 	.word	0x20000118

08004cb0 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d105      	bne.n	8004ccc <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004cc0:	4a22      	ldr	r2, [pc, #136]	; (8004d4c <lcdUpdate+0x9c>)
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	2002      	movs	r0, #2
 8004cc6:	f003 f903 	bl	8007ed0 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004cca:	e03b      	b.n	8004d44 <lcdUpdate+0x94>
	} else if(y==2) {
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d105      	bne.n	8004cde <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004cd2:	4a1e      	ldr	r2, [pc, #120]	; (8004d4c <lcdUpdate+0x9c>)
 8004cd4:	2102      	movs	r1, #2
 8004cd6:	2002      	movs	r0, #2
 8004cd8:	f003 f8fa 	bl	8007ed0 <lcd_print>
}
 8004cdc:	e032      	b.n	8004d44 <lcdUpdate+0x94>
	} else if(y==3) {
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d105      	bne.n	8004cf0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004ce4:	4a19      	ldr	r2, [pc, #100]	; (8004d4c <lcdUpdate+0x9c>)
 8004ce6:	2103      	movs	r1, #3
 8004ce8:	2002      	movs	r0, #2
 8004cea:	f003 f8f1 	bl	8007ed0 <lcd_print>
}
 8004cee:	e029      	b.n	8004d44 <lcdUpdate+0x94>
	} else if(y==4) {
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d105      	bne.n	8004d02 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004cf6:	4a15      	ldr	r2, [pc, #84]	; (8004d4c <lcdUpdate+0x9c>)
 8004cf8:	2104      	movs	r1, #4
 8004cfa:	2002      	movs	r0, #2
 8004cfc:	f003 f8e8 	bl	8007ed0 <lcd_print>
}
 8004d00:	e020      	b.n	8004d44 <lcdUpdate+0x94>
	} else if(y==5) {
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	2b05      	cmp	r3, #5
 8004d06:	d105      	bne.n	8004d14 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004d08:	4a10      	ldr	r2, [pc, #64]	; (8004d4c <lcdUpdate+0x9c>)
 8004d0a:	2105      	movs	r1, #5
 8004d0c:	2002      	movs	r0, #2
 8004d0e:	f003 f8df 	bl	8007ed0 <lcd_print>
}
 8004d12:	e017      	b.n	8004d44 <lcdUpdate+0x94>
	} else if(y==6) {
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d105      	bne.n	8004d26 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004d1a:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <lcdUpdate+0x9c>)
 8004d1c:	2106      	movs	r1, #6
 8004d1e:	2002      	movs	r0, #2
 8004d20:	f003 f8d6 	bl	8007ed0 <lcd_print>
}
 8004d24:	e00e      	b.n	8004d44 <lcdUpdate+0x94>
	} else if (y==7) {
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	2b07      	cmp	r3, #7
 8004d2a:	d10b      	bne.n	8004d44 <lcdUpdate+0x94>
		lcd_clear();
 8004d2c:	f003 f8fc 	bl	8007f28 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004d30:	4a07      	ldr	r2, [pc, #28]	; (8004d50 <lcdUpdate+0xa0>)
 8004d32:	2104      	movs	r1, #4
 8004d34:	2001      	movs	r0, #1
 8004d36:	f003 f8cb 	bl	8007ed0 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004d3a:	4a06      	ldr	r2, [pc, #24]	; (8004d54 <lcdUpdate+0xa4>)
 8004d3c:	2106      	movs	r1, #6
 8004d3e:	2002      	movs	r0, #2
 8004d40:	f003 f8c6 	bl	8007ed0 <lcd_print>
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	0800de20 	.word	0x0800de20
 8004d50:	0800de24 	.word	0x0800de24
 8004d54:	0800de2c 	.word	0x0800de2c

08004d58 <bekle>:

void bekle() {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
	timer1=millis;
 8004d5c:	4b47      	ldr	r3, [pc, #284]	; (8004e7c <bekle+0x124>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a47      	ldr	r2, [pc, #284]	; (8004e80 <bekle+0x128>)
 8004d62:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004d64:	e002      	b.n	8004d6c <bekle+0x14>
    	butonKontrol = 1;
 8004d66:	4b47      	ldr	r3, [pc, #284]	; (8004e84 <bekle+0x12c>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4846      	ldr	r0, [pc, #280]	; (8004e88 <bekle+0x130>)
 8004d70:	f004 fbd4 	bl	800951c <HAL_GPIO_ReadPin>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d109      	bne.n	8004d8e <bekle+0x36>
 8004d7a:	4b40      	ldr	r3, [pc, #256]	; (8004e7c <bekle+0x124>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4b40      	ldr	r3, [pc, #256]	; (8004e80 <bekle+0x128>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d0ef      	beq.n	8004d66 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004d86:	e002      	b.n	8004d8e <bekle+0x36>
    	butonKontrol = 1;
 8004d88:	4b3e      	ldr	r3, [pc, #248]	; (8004e84 <bekle+0x12c>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004d8e:	2108      	movs	r1, #8
 8004d90:	483e      	ldr	r0, [pc, #248]	; (8004e8c <bekle+0x134>)
 8004d92:	f004 fbc3 	bl	800951c <HAL_GPIO_ReadPin>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d109      	bne.n	8004db0 <bekle+0x58>
 8004d9c:	4b37      	ldr	r3, [pc, #220]	; (8004e7c <bekle+0x124>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4b37      	ldr	r3, [pc, #220]	; (8004e80 <bekle+0x128>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d0ef      	beq.n	8004d88 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004da8:	e002      	b.n	8004db0 <bekle+0x58>
    	butonKontrol = 1;
 8004daa:	4b36      	ldr	r3, [pc, #216]	; (8004e84 <bekle+0x12c>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004db0:	2102      	movs	r1, #2
 8004db2:	4835      	ldr	r0, [pc, #212]	; (8004e88 <bekle+0x130>)
 8004db4:	f004 fbb2 	bl	800951c <HAL_GPIO_ReadPin>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d109      	bne.n	8004dd2 <bekle+0x7a>
 8004dbe:	4b2f      	ldr	r3, [pc, #188]	; (8004e7c <bekle+0x124>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b2f      	ldr	r3, [pc, #188]	; (8004e80 <bekle+0x128>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d0ef      	beq.n	8004daa <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004dca:	e002      	b.n	8004dd2 <bekle+0x7a>
    	butonKontrol = 1;
 8004dcc:	4b2d      	ldr	r3, [pc, #180]	; (8004e84 <bekle+0x12c>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004dd2:	2104      	movs	r1, #4
 8004dd4:	482c      	ldr	r0, [pc, #176]	; (8004e88 <bekle+0x130>)
 8004dd6:	f004 fba1 	bl	800951c <HAL_GPIO_ReadPin>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d109      	bne.n	8004df4 <bekle+0x9c>
 8004de0:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <bekle+0x124>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <bekle+0x128>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d0ef      	beq.n	8004dcc <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004dec:	e002      	b.n	8004df4 <bekle+0x9c>
    	butonKontrol = 1;
 8004dee:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <bekle+0x12c>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004df4:	2108      	movs	r1, #8
 8004df6:	4824      	ldr	r0, [pc, #144]	; (8004e88 <bekle+0x130>)
 8004df8:	f004 fb90 	bl	800951c <HAL_GPIO_ReadPin>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d109      	bne.n	8004e16 <bekle+0xbe>
 8004e02:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <bekle+0x124>)
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4b1e      	ldr	r3, [pc, #120]	; (8004e80 <bekle+0x128>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d0ef      	beq.n	8004dee <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004e0e:	e002      	b.n	8004e16 <bekle+0xbe>
    	butonKontrol = 1;
 8004e10:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <bekle+0x12c>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004e16:	2180      	movs	r1, #128	; 0x80
 8004e18:	481c      	ldr	r0, [pc, #112]	; (8004e8c <bekle+0x134>)
 8004e1a:	f004 fb7f 	bl	800951c <HAL_GPIO_ReadPin>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d109      	bne.n	8004e38 <bekle+0xe0>
 8004e24:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <bekle+0x124>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <bekle+0x128>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d0ef      	beq.n	8004e10 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004e30:	e002      	b.n	8004e38 <bekle+0xe0>
    	butonKontrol = 1;
 8004e32:	4b14      	ldr	r3, [pc, #80]	; (8004e84 <bekle+0x12c>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e3c:	4813      	ldr	r0, [pc, #76]	; (8004e8c <bekle+0x134>)
 8004e3e:	f004 fb6d 	bl	800951c <HAL_GPIO_ReadPin>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <bekle+0x104>
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <bekle+0x124>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <bekle+0x128>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d0ee      	beq.n	8004e32 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004e54:	e002      	b.n	8004e5c <bekle+0x104>
    	butonKontrol = 1;
 8004e56:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <bekle+0x12c>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e60:	480a      	ldr	r0, [pc, #40]	; (8004e8c <bekle+0x134>)
 8004e62:	f004 fb5b 	bl	800951c <HAL_GPIO_ReadPin>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d105      	bne.n	8004e78 <bekle+0x120>
 8004e6c:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <bekle+0x124>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	4b03      	ldr	r3, [pc, #12]	; (8004e80 <bekle+0x128>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d0ee      	beq.n	8004e56 <bekle+0xfe>
    }

}
 8004e78:	bf00      	nop
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	200001fc 	.word	0x200001fc
 8004e80:	20000204 	.word	0x20000204
 8004e84:	2000024f 	.word	0x2000024f
 8004e88:	40010800 	.word	0x40010800
 8004e8c:	40011000 	.word	0x40011000

08004e90 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004e94:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <checkLCDBacklight+0x24>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <checkLCDBacklight+0x28>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b3b      	cmp	r3, #59	; 0x3b
 8004ea0:	d903      	bls.n	8004eaa <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	f003 f860 	bl	8007f68 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004ea8:	e002      	b.n	8004eb0 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004eaa:	2001      	movs	r0, #1
 8004eac:	f003 f85c 	bl	8007f68 <lcd_backlight>
}
 8004eb0:	bf00      	nop
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	200001fc 	.word	0x200001fc
 8004eb8:	20000218 	.word	0x20000218

08004ebc <checkBasincSalteri>:

void checkBasincSalteri() {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004ec0:	4b13      	ldr	r3, [pc, #76]	; (8004f10 <checkBasincSalteri+0x54>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <checkBasincSalteri+0x12>
		basincVar=1;
 8004ec8:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <checkBasincSalteri+0x58>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004ece:	4b10      	ldr	r3, [pc, #64]	; (8004f10 <checkBasincSalteri+0x54>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d119      	bne.n	8004f0a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004ed6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eda:	480f      	ldr	r0, [pc, #60]	; (8004f18 <checkBasincSalteri+0x5c>)
 8004edc:	f004 fb1e 	bl	800951c <HAL_GPIO_ReadPin>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <checkBasincSalteri+0x60>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <checkBasincSalteri+0x64>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d90a      	bls.n	8004f0a <checkBasincSalteri+0x4e>
				basincVar=1;
 8004ef4:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <checkBasincSalteri+0x58>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004efa:	e006      	b.n	8004f0a <checkBasincSalteri+0x4e>
			timer5=millis;
 8004efc:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <checkBasincSalteri+0x60>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a07      	ldr	r2, [pc, #28]	; (8004f20 <checkBasincSalteri+0x64>)
 8004f02:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004f04:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <checkBasincSalteri+0x58>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]
}
 8004f0a:	bf00      	nop
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000227 	.word	0x20000227
 8004f14:	20000223 	.word	0x20000223
 8004f18:	40011000 	.word	0x40011000
 8004f1c:	200001fc 	.word	0x200001fc
 8004f20:	20000214 	.word	0x20000214

08004f24 <checkBasGonder>:

void checkBasGonder() {
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004f28:	4b1b      	ldr	r3, [pc, #108]	; (8004f98 <checkBasGonder+0x74>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10b      	bne.n	8004f48 <checkBasGonder+0x24>
 8004f30:	4b1a      	ldr	r3, [pc, #104]	; (8004f9c <checkBasGonder+0x78>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <checkBasGonder+0x24>
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <checkBasGonder+0x7c>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004f40:	4b18      	ldr	r3, [pc, #96]	; (8004fa4 <checkBasGonder+0x80>)
 8004f42:	2201      	movs	r2, #1
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e009      	b.n	8004f5c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004f48:	4b14      	ldr	r3, [pc, #80]	; (8004f9c <checkBasGonder+0x78>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	f083 0301 	eor.w	r3, r3, #1
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004f56:	4b13      	ldr	r3, [pc, #76]	; (8004fa4 <checkBasGonder+0x80>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004f5c:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <checkBasGonder+0x74>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d10b      	bne.n	8004f7c <checkBasGonder+0x58>
 8004f64:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <checkBasGonder+0x84>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <checkBasGonder+0x58>
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <checkBasGonder+0x7c>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d103      	bne.n	8004f7c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004f74:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <checkBasGonder+0x88>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004f7a:	e009      	b.n	8004f90 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004f7c:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <checkBasGonder+0x84>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f083 0301 	eor.w	r3, r3, #1
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004f8a:	4b08      	ldr	r3, [pc, #32]	; (8004fac <checkBasGonder+0x88>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
}
 8004f90:	bf00      	nop
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr
 8004f98:	20000221 	.word	0x20000221
 8004f9c:	20000255 	.word	0x20000255
 8004fa0:	2000022f 	.word	0x2000022f
 8004fa4:	2000025c 	.word	0x2000025c
 8004fa8:	20000258 	.word	0x20000258
 8004fac:	2000025d 	.word	0x2000025d

08004fb0 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004fb4:	4b24      	ldr	r3, [pc, #144]	; (8005048 <checkKapiSecimleri+0x98>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d102      	bne.n	8004fc2 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004fbc:	4b23      	ldr	r3, [pc, #140]	; (800504c <checkKapiSecimleri+0x9c>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004fc2:	4b21      	ldr	r3, [pc, #132]	; (8005048 <checkKapiSecimleri+0x98>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d10e      	bne.n	8004fe8 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004fca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fce:	4820      	ldr	r0, [pc, #128]	; (8005050 <checkKapiSecimleri+0xa0>)
 8004fd0:	f004 faa4 	bl	800951c <HAL_GPIO_ReadPin>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004fda:	4b1c      	ldr	r3, [pc, #112]	; (800504c <checkKapiSecimleri+0x9c>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e002      	b.n	8004fe8 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004fe2:	4b1a      	ldr	r3, [pc, #104]	; (800504c <checkKapiSecimleri+0x9c>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004fe8:	4b17      	ldr	r3, [pc, #92]	; (8005048 <checkKapiSecimleri+0x98>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d10e      	bne.n	800500e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ff4:	4816      	ldr	r0, [pc, #88]	; (8005050 <checkKapiSecimleri+0xa0>)
 8004ff6:	f004 fa91 	bl	800951c <HAL_GPIO_ReadPin>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d103      	bne.n	8005008 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8005000:	4b12      	ldr	r3, [pc, #72]	; (800504c <checkKapiSecimleri+0x9c>)
 8005002:	2201      	movs	r2, #1
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	e002      	b.n	800500e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8005008:	4b10      	ldr	r3, [pc, #64]	; (800504c <checkKapiSecimleri+0x9c>)
 800500a:	2200      	movs	r2, #0
 800500c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800500e:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <checkKapiSecimleri+0x98>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b03      	cmp	r3, #3
 8005014:	d116      	bne.n	8005044 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8005016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800501a:	480d      	ldr	r0, [pc, #52]	; (8005050 <checkKapiSecimleri+0xa0>)
 800501c:	f004 fa7e 	bl	800951c <HAL_GPIO_ReadPin>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10b      	bne.n	800503e <checkKapiSecimleri+0x8e>
 8005026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800502a:	4809      	ldr	r0, [pc, #36]	; (8005050 <checkKapiSecimleri+0xa0>)
 800502c:	f004 fa76 	bl	800951c <HAL_GPIO_ReadPin>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d103      	bne.n	800503e <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8005036:	4b05      	ldr	r3, [pc, #20]	; (800504c <checkKapiSecimleri+0x9c>)
 8005038:	2201      	movs	r2, #1
 800503a:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 800503c:	e002      	b.n	8005044 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800503e:	4b03      	ldr	r3, [pc, #12]	; (800504c <checkKapiSecimleri+0x9c>)
 8005040:	2200      	movs	r2, #0
 8005042:	701a      	strb	r2, [r3, #0]
}
 8005044:	bf00      	nop
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20000228 	.word	0x20000228
 800504c:	20000273 	.word	0x20000273
 8005050:	40010800 	.word	0x40010800

08005054 <checkAktifCalisma>:

void checkAktifCalisma() {
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005058:	4b62      	ldr	r3, [pc, #392]	; (80051e4 <checkAktifCalisma+0x190>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f041 833e 	bne.w	80066de <checkAktifCalisma+0x168a>
 8005062:	4b61      	ldr	r3, [pc, #388]	; (80051e8 <checkAktifCalisma+0x194>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f041 8339 	bne.w	80066de <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 800506c:	4b5f      	ldr	r3, [pc, #380]	; (80051ec <checkAktifCalisma+0x198>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d11a      	bne.n	80050aa <checkAktifCalisma+0x56>
 8005074:	4b5e      	ldr	r3, [pc, #376]	; (80051f0 <checkAktifCalisma+0x19c>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d116      	bne.n	80050aa <checkAktifCalisma+0x56>
 800507c:	4b5d      	ldr	r3, [pc, #372]	; (80051f4 <checkAktifCalisma+0x1a0>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <checkAktifCalisma+0x46>
 8005084:	4b5c      	ldr	r3, [pc, #368]	; (80051f8 <checkAktifCalisma+0x1a4>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f083 0301 	eor.w	r3, r3, #1
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <checkAktifCalisma+0x46>
 8005092:	4b5a      	ldr	r3, [pc, #360]	; (80051fc <checkAktifCalisma+0x1a8>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d007      	beq.n	80050aa <checkAktifCalisma+0x56>
 800509a:	4b59      	ldr	r3, [pc, #356]	; (8005200 <checkAktifCalisma+0x1ac>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d018      	beq.n	80050d4 <checkAktifCalisma+0x80>
 80050a2:	4b58      	ldr	r3, [pc, #352]	; (8005204 <checkAktifCalisma+0x1b0>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d114      	bne.n	80050d4 <checkAktifCalisma+0x80>
 80050aa:	4b57      	ldr	r3, [pc, #348]	; (8005208 <checkAktifCalisma+0x1b4>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d010      	beq.n	80050d4 <checkAktifCalisma+0x80>
 80050b2:	4b56      	ldr	r3, [pc, #344]	; (800520c <checkAktifCalisma+0x1b8>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00c      	beq.n	80050d4 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80050ba:	2201      	movs	r2, #1
 80050bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050c0:	4853      	ldr	r0, [pc, #332]	; (8005210 <checkAktifCalisma+0x1bc>)
 80050c2:	f004 fa42 	bl	800954a <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 80050c6:	4b53      	ldr	r3, [pc, #332]	; (8005214 <checkAktifCalisma+0x1c0>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80050cc:	4b52      	ldr	r3, [pc, #328]	; (8005218 <checkAktifCalisma+0x1c4>)
 80050ce:	2201      	movs	r2, #1
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	e008      	b.n	80050e6 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80050d4:	2200      	movs	r2, #0
 80050d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050da:	484d      	ldr	r0, [pc, #308]	; (8005210 <checkAktifCalisma+0x1bc>)
 80050dc:	f004 fa35 	bl	800954a <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80050e0:	4b4c      	ldr	r3, [pc, #304]	; (8005214 <checkAktifCalisma+0x1c0>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80050e6:	4b40      	ldr	r3, [pc, #256]	; (80051e8 <checkAktifCalisma+0x194>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d160      	bne.n	80051b0 <checkAktifCalisma+0x15c>
 80050ee:	4b46      	ldr	r3, [pc, #280]	; (8005208 <checkAktifCalisma+0x1b4>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d05c      	beq.n	80051b0 <checkAktifCalisma+0x15c>
 80050f6:	4b45      	ldr	r3, [pc, #276]	; (800520c <checkAktifCalisma+0x1b8>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d058      	beq.n	80051b0 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80050fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005102:	4843      	ldr	r0, [pc, #268]	; (8005210 <checkAktifCalisma+0x1bc>)
 8005104:	f004 fa0a 	bl	800951c <HAL_GPIO_ReadPin>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <checkAktifCalisma+0xc2>
 800510e:	4b43      	ldr	r3, [pc, #268]	; (800521c <checkAktifCalisma+0x1c8>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d04c      	beq.n	80051b0 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005116:	2102      	movs	r1, #2
 8005118:	4841      	ldr	r0, [pc, #260]	; (8005220 <checkAktifCalisma+0x1cc>)
 800511a:	f004 f9ff 	bl	800951c <HAL_GPIO_ReadPin>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d145      	bne.n	80051b0 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8005124:	4b3f      	ldr	r3, [pc, #252]	; (8005224 <checkAktifCalisma+0x1d0>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d041      	beq.n	80051b0 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 800512c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005130:	4837      	ldr	r0, [pc, #220]	; (8005210 <checkAktifCalisma+0x1bc>)
 8005132:	f004 f9f3 	bl	800951c <HAL_GPIO_ReadPin>
 8005136:	4603      	mov	r3, r0
 8005138:	2b01      	cmp	r3, #1
 800513a:	d10e      	bne.n	800515a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800513c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005140:	4833      	ldr	r0, [pc, #204]	; (8005210 <checkAktifCalisma+0x1bc>)
 8005142:	f004 f9eb 	bl	800951c <HAL_GPIO_ReadPin>
 8005146:	4603      	mov	r3, r0
 8005148:	2b01      	cmp	r3, #1
 800514a:	d106      	bne.n	800515a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 800514c:	2140      	movs	r1, #64	; 0x40
 800514e:	4834      	ldr	r0, [pc, #208]	; (8005220 <checkAktifCalisma+0x1cc>)
 8005150:	f004 f9e4 	bl	800951c <HAL_GPIO_ReadPin>
 8005154:	4603      	mov	r3, r0
 8005156:	2b01      	cmp	r3, #1
 8005158:	d003      	beq.n	8005162 <checkAktifCalisma+0x10e>
 800515a:	4b24      	ldr	r3, [pc, #144]	; (80051ec <checkAktifCalisma+0x198>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d026      	beq.n	80051b0 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8005162:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <checkAktifCalisma+0x1a0>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	f083 0301 	eor.w	r3, r3, #1
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01f      	beq.n	80051b0 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8005170:	4b1f      	ldr	r3, [pc, #124]	; (80051f0 <checkAktifCalisma+0x19c>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	f083 0301 	eor.w	r3, r3, #1
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d018      	beq.n	80051b0 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800517e:	4b20      	ldr	r3, [pc, #128]	; (8005200 <checkAktifCalisma+0x1ac>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	f083 0301 	eor.w	r3, r3, #1
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d011      	beq.n	80051b0 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 800518c:	4b26      	ldr	r3, [pc, #152]	; (8005228 <checkAktifCalisma+0x1d4>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	f083 0301 	eor.w	r3, r3, #1
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800519a:	4b24      	ldr	r3, [pc, #144]	; (800522c <checkAktifCalisma+0x1d8>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	f083 0301 	eor.w	r3, r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 80051a8:	4b10      	ldr	r3, [pc, #64]	; (80051ec <checkAktifCalisma+0x198>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	e002      	b.n	80051b6 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80051b0:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <checkAktifCalisma+0x198>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80051b6:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <checkAktifCalisma+0x198>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d03a      	beq.n	8005234 <checkAktifCalisma+0x1e0>
 80051be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051c2:	4817      	ldr	r0, [pc, #92]	; (8005220 <checkAktifCalisma+0x1cc>)
 80051c4:	f004 f9aa 	bl	800951c <HAL_GPIO_ReadPin>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d132      	bne.n	8005234 <checkAktifCalisma+0x1e0>
 80051ce:	4b18      	ldr	r3, [pc, #96]	; (8005230 <checkAktifCalisma+0x1dc>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d02e      	beq.n	8005234 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80051d6:	2201      	movs	r2, #1
 80051d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80051dc:	480c      	ldr	r0, [pc, #48]	; (8005210 <checkAktifCalisma+0x1bc>)
 80051de:	f004 f9b4 	bl	800954a <HAL_GPIO_WritePin>
 80051e2:	e02d      	b.n	8005240 <checkAktifCalisma+0x1ec>
 80051e4:	2000023e 	.word	0x2000023e
 80051e8:	2000023d 	.word	0x2000023d
 80051ec:	20000255 	.word	0x20000255
 80051f0:	20000256 	.word	0x20000256
 80051f4:	20000258 	.word	0x20000258
 80051f8:	20000250 	.word	0x20000250
 80051fc:	20000233 	.word	0x20000233
 8005200:	20000257 	.word	0x20000257
 8005204:	20000232 	.word	0x20000232
 8005208:	20000272 	.word	0x20000272
 800520c:	20000273 	.word	0x20000273
 8005210:	40010c00 	.word	0x40010c00
 8005214:	20000274 	.word	0x20000274
 8005218:	2000025f 	.word	0x2000025f
 800521c:	2000025c 	.word	0x2000025c
 8005220:	40011000 	.word	0x40011000
 8005224:	20000223 	.word	0x20000223
 8005228:	2000025a 	.word	0x2000025a
 800522c:	2000025b 	.word	0x2000025b
 8005230:	2000022e 	.word	0x2000022e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005234:	2200      	movs	r2, #0
 8005236:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800523a:	4860      	ldr	r0, [pc, #384]	; (80053bc <checkAktifCalisma+0x368>)
 800523c:	f004 f985 	bl	800954a <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005240:	4b5f      	ldr	r3, [pc, #380]	; (80053c0 <checkAktifCalisma+0x36c>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d013      	beq.n	8005270 <checkAktifCalisma+0x21c>
 8005248:	4b5e      	ldr	r3, [pc, #376]	; (80053c4 <checkAktifCalisma+0x370>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d007      	beq.n	8005260 <checkAktifCalisma+0x20c>
 8005250:	4b5c      	ldr	r3, [pc, #368]	; (80053c4 <checkAktifCalisma+0x370>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d003      	beq.n	8005260 <checkAktifCalisma+0x20c>
 8005258:	4b5b      	ldr	r3, [pc, #364]	; (80053c8 <checkAktifCalisma+0x374>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d107      	bne.n	8005270 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005260:	2201      	movs	r2, #1
 8005262:	2104      	movs	r1, #4
 8005264:	4855      	ldr	r0, [pc, #340]	; (80053bc <checkAktifCalisma+0x368>)
 8005266:	f004 f970 	bl	800954a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800526a:	4b58      	ldr	r3, [pc, #352]	; (80053cc <checkAktifCalisma+0x378>)
 800526c:	2201      	movs	r2, #1
 800526e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005270:	4b56      	ldr	r3, [pc, #344]	; (80053cc <checkAktifCalisma+0x378>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d02f      	beq.n	80052d8 <checkAktifCalisma+0x284>
 8005278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800527c:	484f      	ldr	r0, [pc, #316]	; (80053bc <checkAktifCalisma+0x368>)
 800527e:	f004 f94d 	bl	800951c <HAL_GPIO_ReadPin>
 8005282:	4603      	mov	r3, r0
 8005284:	2b01      	cmp	r3, #1
 8005286:	d106      	bne.n	8005296 <checkAktifCalisma+0x242>
 8005288:	4b51      	ldr	r3, [pc, #324]	; (80053d0 <checkAktifCalisma+0x37c>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f083 0301 	eor.w	r3, r3, #1
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <checkAktifCalisma+0x250>
 8005296:	2102      	movs	r1, #2
 8005298:	484e      	ldr	r0, [pc, #312]	; (80053d4 <checkAktifCalisma+0x380>)
 800529a:	f004 f93f 	bl	800951c <HAL_GPIO_ReadPin>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d119      	bne.n	80052d8 <checkAktifCalisma+0x284>
 80052a4:	4b4c      	ldr	r3, [pc, #304]	; (80053d8 <checkAktifCalisma+0x384>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d015      	beq.n	80052d8 <checkAktifCalisma+0x284>
 80052ac:	4b4b      	ldr	r3, [pc, #300]	; (80053dc <checkAktifCalisma+0x388>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d011      	beq.n	80052d8 <checkAktifCalisma+0x284>
 80052b4:	4b4a      	ldr	r3, [pc, #296]	; (80053e0 <checkAktifCalisma+0x38c>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <checkAktifCalisma+0x284>
 80052bc:	4b49      	ldr	r3, [pc, #292]	; (80053e4 <checkAktifCalisma+0x390>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	f083 0301 	eor.w	r3, r3, #1
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d006      	beq.n	80052d8 <checkAktifCalisma+0x284>
			timer2=millis;
 80052ca:	4b47      	ldr	r3, [pc, #284]	; (80053e8 <checkAktifCalisma+0x394>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a47      	ldr	r2, [pc, #284]	; (80053ec <checkAktifCalisma+0x398>)
 80052d0:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80052d2:	4b44      	ldr	r3, [pc, #272]	; (80053e4 <checkAktifCalisma+0x390>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80052d8:	4b43      	ldr	r3, [pc, #268]	; (80053e8 <checkAktifCalisma+0x394>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4b43      	ldr	r3, [pc, #268]	; (80053ec <checkAktifCalisma+0x398>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	4a43      	ldr	r2, [pc, #268]	; (80053f0 <checkAktifCalisma+0x39c>)
 80052e4:	7812      	ldrb	r2, [r2, #0]
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d303      	bcc.n	80052f2 <checkAktifCalisma+0x29e>
 80052ea:	4b3e      	ldr	r3, [pc, #248]	; (80053e4 <checkAktifCalisma+0x390>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d111      	bne.n	8005316 <checkAktifCalisma+0x2c2>
 80052f2:	4b39      	ldr	r3, [pc, #228]	; (80053d8 <checkAktifCalisma+0x384>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	f083 0301 	eor.w	r3, r3, #1
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <checkAktifCalisma+0x2c2>
 8005300:	4b36      	ldr	r3, [pc, #216]	; (80053dc <checkAktifCalisma+0x388>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	f083 0301 	eor.w	r3, r3, #1
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <checkAktifCalisma+0x2c2>
 800530e:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <checkAktifCalisma+0x38c>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10a      	bne.n	800532c <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005316:	2200      	movs	r2, #0
 8005318:	2104      	movs	r1, #4
 800531a:	4828      	ldr	r0, [pc, #160]	; (80053bc <checkAktifCalisma+0x368>)
 800531c:	f004 f915 	bl	800954a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005320:	4b2a      	ldr	r3, [pc, #168]	; (80053cc <checkAktifCalisma+0x378>)
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005326:	4b2f      	ldr	r3, [pc, #188]	; (80053e4 <checkAktifCalisma+0x390>)
 8005328:	2200      	movs	r2, #0
 800532a:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 800532c:	4b31      	ldr	r3, [pc, #196]	; (80053f4 <checkAktifCalisma+0x3a0>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005334:	4b30      	ldr	r3, [pc, #192]	; (80053f8 <checkAktifCalisma+0x3a4>)
 8005336:	2201      	movs	r2, #1
 8005338:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800533a:	4b2e      	ldr	r3, [pc, #184]	; (80053f4 <checkAktifCalisma+0x3a0>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d116      	bne.n	8005370 <checkAktifCalisma+0x31c>
 8005342:	4b2e      	ldr	r3, [pc, #184]	; (80053fc <checkAktifCalisma+0x3a8>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d112      	bne.n	8005370 <checkAktifCalisma+0x31c>
 800534a:	2101      	movs	r1, #1
 800534c:	4821      	ldr	r0, [pc, #132]	; (80053d4 <checkAktifCalisma+0x380>)
 800534e:	f004 f8e5 	bl	800951c <HAL_GPIO_ReadPin>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10b      	bne.n	8005370 <checkAktifCalisma+0x31c>
 8005358:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800535c:	4817      	ldr	r0, [pc, #92]	; (80053bc <checkAktifCalisma+0x368>)
 800535e:	f004 f8dd 	bl	800951c <HAL_GPIO_ReadPin>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d103      	bne.n	8005370 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005368:	4b23      	ldr	r3, [pc, #140]	; (80053f8 <checkAktifCalisma+0x3a4>)
 800536a:	2201      	movs	r2, #1
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	e011      	b.n	8005394 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005370:	4b20      	ldr	r3, [pc, #128]	; (80053f4 <checkAktifCalisma+0x3a0>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d10d      	bne.n	8005394 <checkAktifCalisma+0x340>
 8005378:	2101      	movs	r1, #1
 800537a:	4816      	ldr	r0, [pc, #88]	; (80053d4 <checkAktifCalisma+0x380>)
 800537c:	f004 f8ce 	bl	800951c <HAL_GPIO_ReadPin>
 8005380:	4603      	mov	r3, r0
 8005382:	2b01      	cmp	r3, #1
 8005384:	d106      	bne.n	8005394 <checkAktifCalisma+0x340>
 8005386:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <checkAktifCalisma+0x3a8>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d102      	bne.n	8005394 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800538e:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <checkAktifCalisma+0x3a4>)
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005394:	4b17      	ldr	r3, [pc, #92]	; (80053f4 <checkAktifCalisma+0x3a0>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d134      	bne.n	8005406 <checkAktifCalisma+0x3b2>
 800539c:	4b17      	ldr	r3, [pc, #92]	; (80053fc <checkAktifCalisma+0x3a8>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d130      	bne.n	8005406 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80053a4:	2101      	movs	r1, #1
 80053a6:	480b      	ldr	r0, [pc, #44]	; (80053d4 <checkAktifCalisma+0x380>)
 80053a8:	f004 f8b8 	bl	800951c <HAL_GPIO_ReadPin>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d126      	bne.n	8005400 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80053b2:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <checkAktifCalisma+0x3a4>)
 80053b4:	2201      	movs	r2, #1
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	e025      	b.n	8005406 <checkAktifCalisma+0x3b2>
 80053ba:	bf00      	nop
 80053bc:	40010c00 	.word	0x40010c00
 80053c0:	20000255 	.word	0x20000255
 80053c4:	2000022f 	.word	0x2000022f
 80053c8:	20000233 	.word	0x20000233
 80053cc:	20000259 	.word	0x20000259
 80053d0:	2000025c 	.word	0x2000025c
 80053d4:	40011000 	.word	0x40011000
 80053d8:	20000272 	.word	0x20000272
 80053dc:	20000273 	.word	0x20000273
 80053e0:	20000223 	.word	0x20000223
 80053e4:	20000251 	.word	0x20000251
 80053e8:	200001fc 	.word	0x200001fc
 80053ec:	20000208 	.word	0x20000208
 80053f0:	20000234 	.word	0x20000234
 80053f4:	20000224 	.word	0x20000224
 80053f8:	20000277 	.word	0x20000277
 80053fc:	20000221 	.word	0x20000221
			} else {
				cerceveVar=0;
 8005400:	4b7f      	ldr	r3, [pc, #508]	; (8005600 <checkAktifCalisma+0x5ac>)
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005406:	4b7f      	ldr	r3, [pc, #508]	; (8005604 <checkAktifCalisma+0x5b0>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d17c      	bne.n	8005508 <checkAktifCalisma+0x4b4>
 800540e:	4b7e      	ldr	r3, [pc, #504]	; (8005608 <checkAktifCalisma+0x5b4>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d078      	beq.n	8005508 <checkAktifCalisma+0x4b4>
 8005416:	4b7d      	ldr	r3, [pc, #500]	; (800560c <checkAktifCalisma+0x5b8>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d074      	beq.n	8005508 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800541e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005422:	487b      	ldr	r0, [pc, #492]	; (8005610 <checkAktifCalisma+0x5bc>)
 8005424:	f004 f87a 	bl	800951c <HAL_GPIO_ReadPin>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <checkAktifCalisma+0x3e2>
 800542e:	4b79      	ldr	r3, [pc, #484]	; (8005614 <checkAktifCalisma+0x5c0>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d068      	beq.n	8005508 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005436:	4b72      	ldr	r3, [pc, #456]	; (8005600 <checkAktifCalisma+0x5ac>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d064      	beq.n	8005508 <checkAktifCalisma+0x4b4>
 800543e:	4b76      	ldr	r3, [pc, #472]	; (8005618 <checkAktifCalisma+0x5c4>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	f083 0301 	eor.w	r3, r3, #1
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d05d      	beq.n	8005508 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800544c:	2104      	movs	r1, #4
 800544e:	4873      	ldr	r0, [pc, #460]	; (800561c <checkAktifCalisma+0x5c8>)
 8005450:	f004 f864 	bl	800951c <HAL_GPIO_ReadPin>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <checkAktifCalisma+0x40e>
 800545a:	4b71      	ldr	r3, [pc, #452]	; (8005620 <checkAktifCalisma+0x5cc>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d152      	bne.n	8005508 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005466:	486a      	ldr	r0, [pc, #424]	; (8005610 <checkAktifCalisma+0x5bc>)
 8005468:	f004 f858 	bl	800951c <HAL_GPIO_ReadPin>
 800546c:	4603      	mov	r3, r0
 800546e:	2b01      	cmp	r3, #1
 8005470:	d10e      	bne.n	8005490 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005476:	4866      	ldr	r0, [pc, #408]	; (8005610 <checkAktifCalisma+0x5bc>)
 8005478:	f004 f850 	bl	800951c <HAL_GPIO_ReadPin>
 800547c:	4603      	mov	r3, r0
 800547e:	2b01      	cmp	r3, #1
 8005480:	d106      	bne.n	8005490 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005482:	2140      	movs	r1, #64	; 0x40
 8005484:	4865      	ldr	r0, [pc, #404]	; (800561c <checkAktifCalisma+0x5c8>)
 8005486:	f004 f849 	bl	800951c <HAL_GPIO_ReadPin>
 800548a:	4603      	mov	r3, r0
 800548c:	2b01      	cmp	r3, #1
 800548e:	d003      	beq.n	8005498 <checkAktifCalisma+0x444>
 8005490:	4b64      	ldr	r3, [pc, #400]	; (8005624 <checkAktifCalisma+0x5d0>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d037      	beq.n	8005508 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005498:	4b63      	ldr	r3, [pc, #396]	; (8005628 <checkAktifCalisma+0x5d4>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	f083 0301 	eor.w	r3, r3, #1
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d030      	beq.n	8005508 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80054a6:	4b61      	ldr	r3, [pc, #388]	; (800562c <checkAktifCalisma+0x5d8>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	f083 0301 	eor.w	r3, r3, #1
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d029      	beq.n	8005508 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80054b4:	4b5e      	ldr	r3, [pc, #376]	; (8005630 <checkAktifCalisma+0x5dc>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	f083 0301 	eor.w	r3, r3, #1
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d022      	beq.n	8005508 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80054c2:	4b5c      	ldr	r3, [pc, #368]	; (8005634 <checkAktifCalisma+0x5e0>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	f083 0301 	eor.w	r3, r3, #1
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01b      	beq.n	8005508 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80054d0:	4b59      	ldr	r3, [pc, #356]	; (8005638 <checkAktifCalisma+0x5e4>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	f083 0301 	eor.w	r3, r3, #1
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d014      	beq.n	8005508 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80054de:	4b57      	ldr	r3, [pc, #348]	; (800563c <checkAktifCalisma+0x5e8>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	f083 0301 	eor.w	r3, r3, #1
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00d      	beq.n	8005508 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80054ec:	2201      	movs	r2, #1
 80054ee:	2102      	movs	r1, #2
 80054f0:	4847      	ldr	r0, [pc, #284]	; (8005610 <checkAktifCalisma+0x5bc>)
 80054f2:	f004 f82a 	bl	800954a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80054f6:	4b4b      	ldr	r3, [pc, #300]	; (8005624 <checkAktifCalisma+0x5d0>)
 80054f8:	2201      	movs	r2, #1
 80054fa:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80054fc:	4b50      	ldr	r3, [pc, #320]	; (8005640 <checkAktifCalisma+0x5ec>)
 80054fe:	2201      	movs	r2, #1
 8005500:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8005502:	4b50      	ldr	r3, [pc, #320]	; (8005644 <checkAktifCalisma+0x5f0>)
 8005504:	2201      	movs	r2, #1
 8005506:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005508:	4b46      	ldr	r3, [pc, #280]	; (8005624 <checkAktifCalisma+0x5d0>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d033      	beq.n	8005578 <checkAktifCalisma+0x524>
 8005510:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005514:	483e      	ldr	r0, [pc, #248]	; (8005610 <checkAktifCalisma+0x5bc>)
 8005516:	f004 f801 	bl	800951c <HAL_GPIO_ReadPin>
 800551a:	4603      	mov	r3, r0
 800551c:	2b01      	cmp	r3, #1
 800551e:	d106      	bne.n	800552e <checkAktifCalisma+0x4da>
 8005520:	4b3c      	ldr	r3, [pc, #240]	; (8005614 <checkAktifCalisma+0x5c0>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	f083 0301 	eor.w	r3, r3, #1
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <checkAktifCalisma+0x4f0>
 800552e:	2104      	movs	r1, #4
 8005530:	483a      	ldr	r0, [pc, #232]	; (800561c <checkAktifCalisma+0x5c8>)
 8005532:	f003 fff3 	bl	800951c <HAL_GPIO_ReadPin>
 8005536:	4603      	mov	r3, r0
 8005538:	2b01      	cmp	r3, #1
 800553a:	d11d      	bne.n	8005578 <checkAktifCalisma+0x524>
 800553c:	4b38      	ldr	r3, [pc, #224]	; (8005620 <checkAktifCalisma+0x5cc>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d019      	beq.n	8005578 <checkAktifCalisma+0x524>
 8005544:	4b30      	ldr	r3, [pc, #192]	; (8005608 <checkAktifCalisma+0x5b4>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d015      	beq.n	8005578 <checkAktifCalisma+0x524>
 800554c:	4b2f      	ldr	r3, [pc, #188]	; (800560c <checkAktifCalisma+0x5b8>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d011      	beq.n	8005578 <checkAktifCalisma+0x524>
 8005554:	4b2a      	ldr	r3, [pc, #168]	; (8005600 <checkAktifCalisma+0x5ac>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00d      	beq.n	8005578 <checkAktifCalisma+0x524>
 800555c:	4b3a      	ldr	r3, [pc, #232]	; (8005648 <checkAktifCalisma+0x5f4>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	f083 0301 	eor.w	r3, r3, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d006      	beq.n	8005578 <checkAktifCalisma+0x524>
			timer2=millis;
 800556a:	4b38      	ldr	r3, [pc, #224]	; (800564c <checkAktifCalisma+0x5f8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a38      	ldr	r2, [pc, #224]	; (8005650 <checkAktifCalisma+0x5fc>)
 8005570:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005572:	4b35      	ldr	r3, [pc, #212]	; (8005648 <checkAktifCalisma+0x5f4>)
 8005574:	2201      	movs	r2, #1
 8005576:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005578:	4b34      	ldr	r3, [pc, #208]	; (800564c <checkAktifCalisma+0x5f8>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	4b34      	ldr	r3, [pc, #208]	; (8005650 <checkAktifCalisma+0x5fc>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	4a34      	ldr	r2, [pc, #208]	; (8005654 <checkAktifCalisma+0x600>)
 8005584:	7812      	ldrb	r2, [r2, #0]
 8005586:	4293      	cmp	r3, r2
 8005588:	d303      	bcc.n	8005592 <checkAktifCalisma+0x53e>
 800558a:	4b2f      	ldr	r3, [pc, #188]	; (8005648 <checkAktifCalisma+0x5f4>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d114      	bne.n	80055bc <checkAktifCalisma+0x568>
 8005592:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <checkAktifCalisma+0x5b4>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	f083 0301 	eor.w	r3, r3, #1
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10d      	bne.n	80055bc <checkAktifCalisma+0x568>
 80055a0:	4b1a      	ldr	r3, [pc, #104]	; (800560c <checkAktifCalisma+0x5b8>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f083 0301 	eor.w	r3, r3, #1
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <checkAktifCalisma+0x568>
 80055ae:	4b14      	ldr	r3, [pc, #80]	; (8005600 <checkAktifCalisma+0x5ac>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	f083 0301 	eor.w	r3, r3, #1
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80055bc:	2200      	movs	r2, #0
 80055be:	2102      	movs	r1, #2
 80055c0:	4813      	ldr	r0, [pc, #76]	; (8005610 <checkAktifCalisma+0x5bc>)
 80055c2:	f003 ffc2 	bl	800954a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80055c6:	4b17      	ldr	r3, [pc, #92]	; (8005624 <checkAktifCalisma+0x5d0>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80055cc:	4b1e      	ldr	r3, [pc, #120]	; (8005648 <checkAktifCalisma+0x5f4>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80055d2:	4b14      	ldr	r3, [pc, #80]	; (8005624 <checkAktifCalisma+0x5d0>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d040      	beq.n	800565c <checkAktifCalisma+0x608>
 80055da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055de:	480f      	ldr	r0, [pc, #60]	; (800561c <checkAktifCalisma+0x5c8>)
 80055e0:	f003 ff9c 	bl	800951c <HAL_GPIO_ReadPin>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d138      	bne.n	800565c <checkAktifCalisma+0x608>
 80055ea:	4b1b      	ldr	r3, [pc, #108]	; (8005658 <checkAktifCalisma+0x604>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d034      	beq.n	800565c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80055f2:	2201      	movs	r2, #1
 80055f4:	2101      	movs	r1, #1
 80055f6:	4806      	ldr	r0, [pc, #24]	; (8005610 <checkAktifCalisma+0x5bc>)
 80055f8:	f003 ffa7 	bl	800954a <HAL_GPIO_WritePin>
 80055fc:	e033      	b.n	8005666 <checkAktifCalisma+0x612>
 80055fe:	bf00      	nop
 8005600:	20000277 	.word	0x20000277
 8005604:	2000023d 	.word	0x2000023d
 8005608:	20000272 	.word	0x20000272
 800560c:	20000273 	.word	0x20000273
 8005610:	40010c00 	.word	0x40010c00
 8005614:	2000025d 	.word	0x2000025d
 8005618:	20000271 	.word	0x20000271
 800561c:	40011000 	.word	0x40011000
 8005620:	20000226 	.word	0x20000226
 8005624:	20000258 	.word	0x20000258
 8005628:	20000255 	.word	0x20000255
 800562c:	20000259 	.word	0x20000259
 8005630:	20000256 	.word	0x20000256
 8005634:	20000257 	.word	0x20000257
 8005638:	2000025a 	.word	0x2000025a
 800563c:	2000025b 	.word	0x2000025b
 8005640:	20000260 	.word	0x20000260
 8005644:	20000281 	.word	0x20000281
 8005648:	20000250 	.word	0x20000250
 800564c:	200001fc 	.word	0x200001fc
 8005650:	20000208 	.word	0x20000208
 8005654:	20000235 	.word	0x20000235
 8005658:	20000225 	.word	0x20000225
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800565c:	2200      	movs	r2, #0
 800565e:	2101      	movs	r1, #1
 8005660:	4836      	ldr	r0, [pc, #216]	; (800573c <checkAktifCalisma+0x6e8>)
 8005662:	f003 ff72 	bl	800954a <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005666:	4b36      	ldr	r3, [pc, #216]	; (8005740 <checkAktifCalisma+0x6ec>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	f040 8080 	bne.w	8005770 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005670:	4b34      	ldr	r3, [pc, #208]	; (8005744 <checkAktifCalisma+0x6f0>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d003      	beq.n	8005680 <checkAktifCalisma+0x62c>
 8005678:	4b32      	ldr	r3, [pc, #200]	; (8005744 <checkAktifCalisma+0x6f0>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d177      	bne.n	8005770 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005680:	4b31      	ldr	r3, [pc, #196]	; (8005748 <checkAktifCalisma+0x6f4>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d073      	beq.n	8005770 <checkAktifCalisma+0x71c>
 8005688:	4b30      	ldr	r3, [pc, #192]	; (800574c <checkAktifCalisma+0x6f8>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d06f      	beq.n	8005770 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005690:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005694:	4829      	ldr	r0, [pc, #164]	; (800573c <checkAktifCalisma+0x6e8>)
 8005696:	f003 ff41 	bl	800951c <HAL_GPIO_ReadPin>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d167      	bne.n	8005770 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80056a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056a4:	482a      	ldr	r0, [pc, #168]	; (8005750 <checkAktifCalisma+0x6fc>)
 80056a6:	f003 ff39 	bl	800951c <HAL_GPIO_ReadPin>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <checkAktifCalisma+0x664>
 80056b0:	4b28      	ldr	r3, [pc, #160]	; (8005754 <checkAktifCalisma+0x700>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d15b      	bne.n	8005770 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80056b8:	2140      	movs	r1, #64	; 0x40
 80056ba:	4825      	ldr	r0, [pc, #148]	; (8005750 <checkAktifCalisma+0x6fc>)
 80056bc:	f003 ff2e 	bl	800951c <HAL_GPIO_ReadPin>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d10f      	bne.n	80056e6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80056c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056ca:	481c      	ldr	r0, [pc, #112]	; (800573c <checkAktifCalisma+0x6e8>)
 80056cc:	f003 ff26 	bl	800951c <HAL_GPIO_ReadPin>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d107      	bne.n	80056e6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80056d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056da:	4818      	ldr	r0, [pc, #96]	; (800573c <checkAktifCalisma+0x6e8>)
 80056dc:	f003 ff1e 	bl	800951c <HAL_GPIO_ReadPin>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d003      	beq.n	80056ee <checkAktifCalisma+0x69a>
 80056e6:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <checkAktifCalisma+0x704>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d040      	beq.n	8005770 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80056ee:	4b1b      	ldr	r3, [pc, #108]	; (800575c <checkAktifCalisma+0x708>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	f083 0301 	eor.w	r3, r3, #1
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d039      	beq.n	8005770 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80056fc:	4b18      	ldr	r3, [pc, #96]	; (8005760 <checkAktifCalisma+0x70c>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	f083 0301 	eor.w	r3, r3, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d032      	beq.n	8005770 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 800570a:	4b16      	ldr	r3, [pc, #88]	; (8005764 <checkAktifCalisma+0x710>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	f083 0301 	eor.w	r3, r3, #1
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d02b      	beq.n	8005770 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005718:	4b13      	ldr	r3, [pc, #76]	; (8005768 <checkAktifCalisma+0x714>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	f083 0301 	eor.w	r3, r3, #1
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d024      	beq.n	8005770 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005726:	4b11      	ldr	r3, [pc, #68]	; (800576c <checkAktifCalisma+0x718>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	f083 0301 	eor.w	r3, r3, #1
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01d      	beq.n	8005770 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005734:	4b08      	ldr	r3, [pc, #32]	; (8005758 <checkAktifCalisma+0x704>)
 8005736:	2201      	movs	r2, #1
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	e01c      	b.n	8005776 <checkAktifCalisma+0x722>
 800573c:	40010c00 	.word	0x40010c00
 8005740:	2000023d 	.word	0x2000023d
 8005744:	2000022f 	.word	0x2000022f
 8005748:	20000272 	.word	0x20000272
 800574c:	20000273 	.word	0x20000273
 8005750:	40011000 	.word	0x40011000
 8005754:	20000230 	.word	0x20000230
 8005758:	20000256 	.word	0x20000256
 800575c:	20000255 	.word	0x20000255
 8005760:	20000259 	.word	0x20000259
 8005764:	20000258 	.word	0x20000258
 8005768:	20000257 	.word	0x20000257
 800576c:	2000025b 	.word	0x2000025b
		} else {
			devmotoryukaricalisiyor=0;
 8005770:	4b64      	ldr	r3, [pc, #400]	; (8005904 <checkAktifCalisma+0x8b0>)
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005776:	4b63      	ldr	r3, [pc, #396]	; (8005904 <checkAktifCalisma+0x8b0>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d007      	beq.n	800578e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800577e:	2201      	movs	r2, #1
 8005780:	2120      	movs	r1, #32
 8005782:	4861      	ldr	r0, [pc, #388]	; (8005908 <checkAktifCalisma+0x8b4>)
 8005784:	f003 fee1 	bl	800954a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005788:	4b60      	ldr	r3, [pc, #384]	; (800590c <checkAktifCalisma+0x8b8>)
 800578a:	2201      	movs	r2, #1
 800578c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800578e:	4b5f      	ldr	r3, [pc, #380]	; (800590c <checkAktifCalisma+0x8b8>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d025      	beq.n	80057e2 <checkAktifCalisma+0x78e>
 8005796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800579a:	485d      	ldr	r0, [pc, #372]	; (8005910 <checkAktifCalisma+0x8bc>)
 800579c:	f003 febe 	bl	800951c <HAL_GPIO_ReadPin>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d007      	beq.n	80057b6 <checkAktifCalisma+0x762>
 80057a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057aa:	4857      	ldr	r0, [pc, #348]	; (8005908 <checkAktifCalisma+0x8b4>)
 80057ac:	f003 feb6 	bl	800951c <HAL_GPIO_ReadPin>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d115      	bne.n	80057e2 <checkAktifCalisma+0x78e>
 80057b6:	4b57      	ldr	r3, [pc, #348]	; (8005914 <checkAktifCalisma+0x8c0>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d011      	beq.n	80057e2 <checkAktifCalisma+0x78e>
 80057be:	4b56      	ldr	r3, [pc, #344]	; (8005918 <checkAktifCalisma+0x8c4>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00d      	beq.n	80057e2 <checkAktifCalisma+0x78e>
 80057c6:	4b55      	ldr	r3, [pc, #340]	; (800591c <checkAktifCalisma+0x8c8>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	f083 0301 	eor.w	r3, r3, #1
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d006      	beq.n	80057e2 <checkAktifCalisma+0x78e>
			timer2=millis;
 80057d4:	4b52      	ldr	r3, [pc, #328]	; (8005920 <checkAktifCalisma+0x8cc>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a52      	ldr	r2, [pc, #328]	; (8005924 <checkAktifCalisma+0x8d0>)
 80057da:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80057dc:	4b4f      	ldr	r3, [pc, #316]	; (800591c <checkAktifCalisma+0x8c8>)
 80057de:	2201      	movs	r2, #1
 80057e0:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80057e2:	4b4f      	ldr	r3, [pc, #316]	; (8005920 <checkAktifCalisma+0x8cc>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	4b4f      	ldr	r3, [pc, #316]	; (8005924 <checkAktifCalisma+0x8d0>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	4a4e      	ldr	r2, [pc, #312]	; (8005928 <checkAktifCalisma+0x8d4>)
 80057ee:	7812      	ldrb	r2, [r2, #0]
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d303      	bcc.n	80057fc <checkAktifCalisma+0x7a8>
 80057f4:	4b49      	ldr	r3, [pc, #292]	; (800591c <checkAktifCalisma+0x8c8>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10d      	bne.n	8005818 <checkAktifCalisma+0x7c4>
 80057fc:	4b45      	ldr	r3, [pc, #276]	; (8005914 <checkAktifCalisma+0x8c0>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	f083 0301 	eor.w	r3, r3, #1
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <checkAktifCalisma+0x7c4>
 800580a:	4b43      	ldr	r3, [pc, #268]	; (8005918 <checkAktifCalisma+0x8c4>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	f083 0301 	eor.w	r3, r3, #1
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005818:	2200      	movs	r2, #0
 800581a:	2120      	movs	r1, #32
 800581c:	483a      	ldr	r0, [pc, #232]	; (8005908 <checkAktifCalisma+0x8b4>)
 800581e:	f003 fe94 	bl	800954a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8005822:	4b3a      	ldr	r3, [pc, #232]	; (800590c <checkAktifCalisma+0x8b8>)
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005828:	4b3c      	ldr	r3, [pc, #240]	; (800591c <checkAktifCalisma+0x8c8>)
 800582a:	2200      	movs	r2, #0
 800582c:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800582e:	4b3f      	ldr	r3, [pc, #252]	; (800592c <checkAktifCalisma+0x8d8>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	f040 8088 	bne.w	8005948 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005838:	4b3d      	ldr	r3, [pc, #244]	; (8005930 <checkAktifCalisma+0x8dc>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d003      	beq.n	8005848 <checkAktifCalisma+0x7f4>
 8005840:	4b3b      	ldr	r3, [pc, #236]	; (8005930 <checkAktifCalisma+0x8dc>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b02      	cmp	r3, #2
 8005846:	d17f      	bne.n	8005948 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005848:	4b32      	ldr	r3, [pc, #200]	; (8005914 <checkAktifCalisma+0x8c0>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d07b      	beq.n	8005948 <checkAktifCalisma+0x8f4>
 8005850:	4b31      	ldr	r3, [pc, #196]	; (8005918 <checkAktifCalisma+0x8c4>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d077      	beq.n	8005948 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005858:	2140      	movs	r1, #64	; 0x40
 800585a:	482b      	ldr	r0, [pc, #172]	; (8005908 <checkAktifCalisma+0x8b4>)
 800585c:	f003 fe5e 	bl	800951c <HAL_GPIO_ReadPin>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d170      	bne.n	8005948 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005866:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800586a:	4827      	ldr	r0, [pc, #156]	; (8005908 <checkAktifCalisma+0x8b4>)
 800586c:	f003 fe56 	bl	800951c <HAL_GPIO_ReadPin>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <checkAktifCalisma+0x82a>
 8005876:	4b2f      	ldr	r3, [pc, #188]	; (8005934 <checkAktifCalisma+0x8e0>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d164      	bne.n	8005948 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800587e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005882:	4823      	ldr	r0, [pc, #140]	; (8005910 <checkAktifCalisma+0x8bc>)
 8005884:	f003 fe4a 	bl	800951c <HAL_GPIO_ReadPin>
 8005888:	4603      	mov	r3, r0
 800588a:	2b01      	cmp	r3, #1
 800588c:	d10f      	bne.n	80058ae <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800588e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005892:	481f      	ldr	r0, [pc, #124]	; (8005910 <checkAktifCalisma+0x8bc>)
 8005894:	f003 fe42 	bl	800951c <HAL_GPIO_ReadPin>
 8005898:	4603      	mov	r3, r0
 800589a:	2b01      	cmp	r3, #1
 800589c:	d107      	bne.n	80058ae <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800589e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058a2:	481b      	ldr	r0, [pc, #108]	; (8005910 <checkAktifCalisma+0x8bc>)
 80058a4:	f003 fe3a 	bl	800951c <HAL_GPIO_ReadPin>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d003      	beq.n	80058b6 <checkAktifCalisma+0x862>
 80058ae:	4b22      	ldr	r3, [pc, #136]	; (8005938 <checkAktifCalisma+0x8e4>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d048      	beq.n	8005948 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80058b6:	4b21      	ldr	r3, [pc, #132]	; (800593c <checkAktifCalisma+0x8e8>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	f083 0301 	eor.w	r3, r3, #1
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d041      	beq.n	8005948 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80058c4:	4b1e      	ldr	r3, [pc, #120]	; (8005940 <checkAktifCalisma+0x8ec>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	f083 0301 	eor.w	r3, r3, #1
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d03a      	beq.n	8005948 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80058d2:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <checkAktifCalisma+0x8f0>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	f083 0301 	eor.w	r3, r3, #1
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d033      	beq.n	8005948 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80058e0:	4b0a      	ldr	r3, [pc, #40]	; (800590c <checkAktifCalisma+0x8b8>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	f083 0301 	eor.w	r3, r3, #1
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d02c      	beq.n	8005948 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80058ee:	4b05      	ldr	r3, [pc, #20]	; (8005904 <checkAktifCalisma+0x8b0>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	f083 0301 	eor.w	r3, r3, #1
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d025      	beq.n	8005948 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80058fc:	4b0e      	ldr	r3, [pc, #56]	; (8005938 <checkAktifCalisma+0x8e4>)
 80058fe:	2201      	movs	r2, #1
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	e024      	b.n	800594e <checkAktifCalisma+0x8fa>
 8005904:	20000256 	.word	0x20000256
 8005908:	40011000 	.word	0x40011000
 800590c:	2000025a 	.word	0x2000025a
 8005910:	40010c00 	.word	0x40010c00
 8005914:	20000272 	.word	0x20000272
 8005918:	20000273 	.word	0x20000273
 800591c:	20000252 	.word	0x20000252
 8005920:	200001fc 	.word	0x200001fc
 8005924:	20000208 	.word	0x20000208
 8005928:	20000236 	.word	0x20000236
 800592c:	2000023d 	.word	0x2000023d
 8005930:	2000022f 	.word	0x2000022f
 8005934:	20000231 	.word	0x20000231
 8005938:	20000257 	.word	0x20000257
 800593c:	20000255 	.word	0x20000255
 8005940:	20000259 	.word	0x20000259
 8005944:	20000258 	.word	0x20000258
		} else {
			devmotorasagicalisiyor=0;
 8005948:	4b96      	ldr	r3, [pc, #600]	; (8005ba4 <checkAktifCalisma+0xb50>)
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800594e:	4b95      	ldr	r3, [pc, #596]	; (8005ba4 <checkAktifCalisma+0xb50>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d007      	beq.n	8005966 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005956:	2201      	movs	r2, #1
 8005958:	2110      	movs	r1, #16
 800595a:	4893      	ldr	r0, [pc, #588]	; (8005ba8 <checkAktifCalisma+0xb54>)
 800595c:	f003 fdf5 	bl	800954a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005960:	4b92      	ldr	r3, [pc, #584]	; (8005bac <checkAktifCalisma+0xb58>)
 8005962:	2201      	movs	r2, #1
 8005964:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005966:	4b91      	ldr	r3, [pc, #580]	; (8005bac <checkAktifCalisma+0xb58>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d024      	beq.n	80059b8 <checkAktifCalisma+0x964>
 800596e:	2140      	movs	r1, #64	; 0x40
 8005970:	488d      	ldr	r0, [pc, #564]	; (8005ba8 <checkAktifCalisma+0xb54>)
 8005972:	f003 fdd3 	bl	800951c <HAL_GPIO_ReadPin>
 8005976:	4603      	mov	r3, r0
 8005978:	2b01      	cmp	r3, #1
 800597a:	d007      	beq.n	800598c <checkAktifCalisma+0x938>
 800597c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005980:	4889      	ldr	r0, [pc, #548]	; (8005ba8 <checkAktifCalisma+0xb54>)
 8005982:	f003 fdcb 	bl	800951c <HAL_GPIO_ReadPin>
 8005986:	4603      	mov	r3, r0
 8005988:	2b01      	cmp	r3, #1
 800598a:	d115      	bne.n	80059b8 <checkAktifCalisma+0x964>
 800598c:	4b88      	ldr	r3, [pc, #544]	; (8005bb0 <checkAktifCalisma+0xb5c>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d011      	beq.n	80059b8 <checkAktifCalisma+0x964>
 8005994:	4b87      	ldr	r3, [pc, #540]	; (8005bb4 <checkAktifCalisma+0xb60>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00d      	beq.n	80059b8 <checkAktifCalisma+0x964>
 800599c:	4b86      	ldr	r3, [pc, #536]	; (8005bb8 <checkAktifCalisma+0xb64>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f083 0301 	eor.w	r3, r3, #1
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d006      	beq.n	80059b8 <checkAktifCalisma+0x964>
			timer2=millis;
 80059aa:	4b84      	ldr	r3, [pc, #528]	; (8005bbc <checkAktifCalisma+0xb68>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a84      	ldr	r2, [pc, #528]	; (8005bc0 <checkAktifCalisma+0xb6c>)
 80059b0:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80059b2:	4b81      	ldr	r3, [pc, #516]	; (8005bb8 <checkAktifCalisma+0xb64>)
 80059b4:	2201      	movs	r2, #1
 80059b6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80059b8:	4b80      	ldr	r3, [pc, #512]	; (8005bbc <checkAktifCalisma+0xb68>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	4b80      	ldr	r3, [pc, #512]	; (8005bc0 <checkAktifCalisma+0xb6c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	4a80      	ldr	r2, [pc, #512]	; (8005bc4 <checkAktifCalisma+0xb70>)
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d303      	bcc.n	80059d2 <checkAktifCalisma+0x97e>
 80059ca:	4b7b      	ldr	r3, [pc, #492]	; (8005bb8 <checkAktifCalisma+0xb64>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10d      	bne.n	80059ee <checkAktifCalisma+0x99a>
 80059d2:	4b77      	ldr	r3, [pc, #476]	; (8005bb0 <checkAktifCalisma+0xb5c>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	f083 0301 	eor.w	r3, r3, #1
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d106      	bne.n	80059ee <checkAktifCalisma+0x99a>
 80059e0:	4b74      	ldr	r3, [pc, #464]	; (8005bb4 <checkAktifCalisma+0xb60>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	f083 0301 	eor.w	r3, r3, #1
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80059ee:	2200      	movs	r2, #0
 80059f0:	2110      	movs	r1, #16
 80059f2:	486d      	ldr	r0, [pc, #436]	; (8005ba8 <checkAktifCalisma+0xb54>)
 80059f4:	f003 fda9 	bl	800954a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80059f8:	4b6c      	ldr	r3, [pc, #432]	; (8005bac <checkAktifCalisma+0xb58>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80059fe:	4b6e      	ldr	r3, [pc, #440]	; (8005bb8 <checkAktifCalisma+0xb64>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005a04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a08:	486f      	ldr	r0, [pc, #444]	; (8005bc8 <checkAktifCalisma+0xb74>)
 8005a0a:	f003 fd87 	bl	800951c <HAL_GPIO_ReadPin>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d120      	bne.n	8005a56 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a18:	486b      	ldr	r0, [pc, #428]	; (8005bc8 <checkAktifCalisma+0xb74>)
 8005a1a:	f003 fd7f 	bl	800951c <HAL_GPIO_ReadPin>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d118      	bne.n	8005a56 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005a24:	2104      	movs	r1, #4
 8005a26:	4868      	ldr	r0, [pc, #416]	; (8005bc8 <checkAktifCalisma+0xb74>)
 8005a28:	f003 fd78 	bl	800951c <HAL_GPIO_ReadPin>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d111      	bne.n	8005a56 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005a32:	2102      	movs	r1, #2
 8005a34:	4864      	ldr	r0, [pc, #400]	; (8005bc8 <checkAktifCalisma+0xb74>)
 8005a36:	f003 fd71 	bl	800951c <HAL_GPIO_ReadPin>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005a40:	2101      	movs	r1, #1
 8005a42:	4861      	ldr	r0, [pc, #388]	; (8005bc8 <checkAktifCalisma+0xb74>)
 8005a44:	f003 fd6a 	bl	800951c <HAL_GPIO_ReadPin>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <checkAktifCalisma+0xa02>
			makineStop=1;
 8005a4e:	4b5f      	ldr	r3, [pc, #380]	; (8005bcc <checkAktifCalisma+0xb78>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	e002      	b.n	8005a5c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8005a56:	4b5d      	ldr	r3, [pc, #372]	; (8005bcc <checkAktifCalisma+0xb78>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a5c:	4b5c      	ldr	r3, [pc, #368]	; (8005bd0 <checkAktifCalisma+0xb7c>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d144      	bne.n	8005aee <checkAktifCalisma+0xa9a>
 8005a64:	4b5b      	ldr	r3, [pc, #364]	; (8005bd4 <checkAktifCalisma+0xb80>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d003      	beq.n	8005a74 <checkAktifCalisma+0xa20>
 8005a6c:	4b59      	ldr	r3, [pc, #356]	; (8005bd4 <checkAktifCalisma+0xb80>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d13c      	bne.n	8005aee <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a74:	2180      	movs	r1, #128	; 0x80
 8005a76:	484c      	ldr	r0, [pc, #304]	; (8005ba8 <checkAktifCalisma+0xb54>)
 8005a78:	f003 fd50 	bl	800951c <HAL_GPIO_ReadPin>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d103      	bne.n	8005a8a <checkAktifCalisma+0xa36>
 8005a82:	4b55      	ldr	r3, [pc, #340]	; (8005bd8 <checkAktifCalisma+0xb84>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00b      	beq.n	8005aa2 <checkAktifCalisma+0xa4e>
 8005a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a8e:	484e      	ldr	r0, [pc, #312]	; (8005bc8 <checkAktifCalisma+0xb74>)
 8005a90:	f003 fd44 	bl	800951c <HAL_GPIO_ReadPin>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d129      	bne.n	8005aee <checkAktifCalisma+0xa9a>
 8005a9a:	4b4f      	ldr	r3, [pc, #316]	; (8005bd8 <checkAktifCalisma+0xb84>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d125      	bne.n	8005aee <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005aa2:	2104      	movs	r1, #4
 8005aa4:	4840      	ldr	r0, [pc, #256]	; (8005ba8 <checkAktifCalisma+0xb54>)
 8005aa6:	f003 fd39 	bl	800951c <HAL_GPIO_ReadPin>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d003      	beq.n	8005ab8 <checkAktifCalisma+0xa64>
 8005ab0:	4b4a      	ldr	r3, [pc, #296]	; (8005bdc <checkAktifCalisma+0xb88>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d11a      	bne.n	8005aee <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005ab8:	2102      	movs	r1, #2
 8005aba:	483b      	ldr	r0, [pc, #236]	; (8005ba8 <checkAktifCalisma+0xb54>)
 8005abc:	f003 fd2e 	bl	800951c <HAL_GPIO_ReadPin>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d113      	bne.n	8005aee <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005ac6:	4b46      	ldr	r3, [pc, #280]	; (8005be0 <checkAktifCalisma+0xb8c>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	f083 0301 	eor.w	r3, r3, #1
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00c      	beq.n	8005aee <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005ad4:	4b3d      	ldr	r3, [pc, #244]	; (8005bcc <checkAktifCalisma+0xb78>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005adc:	4b41      	ldr	r3, [pc, #260]	; (8005be4 <checkAktifCalisma+0xb90>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005ae2:	4b36      	ldr	r3, [pc, #216]	; (8005bbc <checkAktifCalisma+0xb68>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a40      	ldr	r2, [pc, #256]	; (8005be8 <checkAktifCalisma+0xb94>)
 8005ae8:	6013      	str	r3, [r2, #0]
			bekle();
 8005aea:	f7ff f935 	bl	8004d58 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005aee:	4b33      	ldr	r3, [pc, #204]	; (8005bbc <checkAktifCalisma+0xb68>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b3d      	ldr	r3, [pc, #244]	; (8005be8 <checkAktifCalisma+0xb94>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	4a3c      	ldr	r2, [pc, #240]	; (8005bec <checkAktifCalisma+0xb98>)
 8005afa:	7812      	ldrb	r2, [r2, #0]
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d211      	bcs.n	8005b24 <checkAktifCalisma+0xad0>
 8005b00:	2104      	movs	r1, #4
 8005b02:	4829      	ldr	r0, [pc, #164]	; (8005ba8 <checkAktifCalisma+0xb54>)
 8005b04:	f003 fd0a 	bl	800951c <HAL_GPIO_ReadPin>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <checkAktifCalisma+0xad0>
 8005b0e:	4b33      	ldr	r3, [pc, #204]	; (8005bdc <checkAktifCalisma+0xb88>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d006      	beq.n	8005b24 <checkAktifCalisma+0xad0>
 8005b16:	4b2d      	ldr	r3, [pc, #180]	; (8005bcc <checkAktifCalisma+0xb78>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	f083 0301 	eor.w	r3, r3, #1
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005b24:	4b2f      	ldr	r3, [pc, #188]	; (8005be4 <checkAktifCalisma+0xb90>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b2a:	4b29      	ldr	r3, [pc, #164]	; (8005bd0 <checkAktifCalisma+0xb7c>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d160      	bne.n	8005bf4 <checkAktifCalisma+0xba0>
 8005b32:	4b28      	ldr	r3, [pc, #160]	; (8005bd4 <checkAktifCalisma+0xb80>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d003      	beq.n	8005b42 <checkAktifCalisma+0xaee>
 8005b3a:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <checkAktifCalisma+0xb80>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d158      	bne.n	8005bf4 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005b42:	2104      	movs	r1, #4
 8005b44:	4818      	ldr	r0, [pc, #96]	; (8005ba8 <checkAktifCalisma+0xb54>)
 8005b46:	f003 fce9 	bl	800951c <HAL_GPIO_ReadPin>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d003      	beq.n	8005b58 <checkAktifCalisma+0xb04>
 8005b50:	4b22      	ldr	r3, [pc, #136]	; (8005bdc <checkAktifCalisma+0xb88>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d14d      	bne.n	8005bf4 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005b58:	2102      	movs	r1, #2
 8005b5a:	4813      	ldr	r0, [pc, #76]	; (8005ba8 <checkAktifCalisma+0xb54>)
 8005b5c:	f003 fcde 	bl	800951c <HAL_GPIO_ReadPin>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d146      	bne.n	8005bf4 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005b66:	2180      	movs	r1, #128	; 0x80
 8005b68:	480f      	ldr	r0, [pc, #60]	; (8005ba8 <checkAktifCalisma+0xb54>)
 8005b6a:	f003 fcd7 	bl	800951c <HAL_GPIO_ReadPin>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d103      	bne.n	8005b7c <checkAktifCalisma+0xb28>
 8005b74:	4b18      	ldr	r3, [pc, #96]	; (8005bd8 <checkAktifCalisma+0xb84>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00b      	beq.n	8005b94 <checkAktifCalisma+0xb40>
 8005b7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b80:	4811      	ldr	r0, [pc, #68]	; (8005bc8 <checkAktifCalisma+0xb74>)
 8005b82:	f003 fccb 	bl	800951c <HAL_GPIO_ReadPin>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d133      	bne.n	8005bf4 <checkAktifCalisma+0xba0>
 8005b8c:	4b12      	ldr	r3, [pc, #72]	; (8005bd8 <checkAktifCalisma+0xb84>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d12f      	bne.n	8005bf4 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005b94:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <checkAktifCalisma+0xb78>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d02b      	beq.n	8005bf4 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005b9c:	4b14      	ldr	r3, [pc, #80]	; (8005bf0 <checkAktifCalisma+0xb9c>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	e02a      	b.n	8005bfa <checkAktifCalisma+0xba6>
 8005ba4:	20000257 	.word	0x20000257
 8005ba8:	40011000 	.word	0x40011000
 8005bac:	2000025b 	.word	0x2000025b
 8005bb0:	20000272 	.word	0x20000272
 8005bb4:	20000273 	.word	0x20000273
 8005bb8:	20000253 	.word	0x20000253
 8005bbc:	200001fc 	.word	0x200001fc
 8005bc0:	20000208 	.word	0x20000208
 8005bc4:	20000236 	.word	0x20000236
 8005bc8:	40010c00 	.word	0x40010c00
 8005bcc:	20000262 	.word	0x20000262
 8005bd0:	20000229 	.word	0x20000229
 8005bd4:	20000228 	.word	0x20000228
 8005bd8:	2000022c 	.word	0x2000022c
 8005bdc:	20000226 	.word	0x20000226
 8005be0:	2000024f 	.word	0x2000024f
 8005be4:	20000263 	.word	0x20000263
 8005be8:	20000200 	.word	0x20000200
 8005bec:	20000239 	.word	0x20000239
 8005bf0:	20000264 	.word	0x20000264
		} else {
			kapi1butonkontrol=0;
 8005bf4:	4b8b      	ldr	r3, [pc, #556]	; (8005e24 <checkAktifCalisma+0xdd0>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005bfa:	4b8b      	ldr	r3, [pc, #556]	; (8005e28 <checkAktifCalisma+0xdd4>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d121      	bne.n	8005c46 <checkAktifCalisma+0xbf2>
 8005c02:	4b8a      	ldr	r3, [pc, #552]	; (8005e2c <checkAktifCalisma+0xdd8>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d003      	beq.n	8005c12 <checkAktifCalisma+0xbbe>
 8005c0a:	4b88      	ldr	r3, [pc, #544]	; (8005e2c <checkAktifCalisma+0xdd8>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d119      	bne.n	8005c46 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005c12:	2104      	movs	r1, #4
 8005c14:	4886      	ldr	r0, [pc, #536]	; (8005e30 <checkAktifCalisma+0xddc>)
 8005c16:	f003 fc81 	bl	800951c <HAL_GPIO_ReadPin>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d003      	beq.n	8005c28 <checkAktifCalisma+0xbd4>
 8005c20:	4b84      	ldr	r3, [pc, #528]	; (8005e34 <checkAktifCalisma+0xde0>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10e      	bne.n	8005c46 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005c28:	2102      	movs	r1, #2
 8005c2a:	4881      	ldr	r0, [pc, #516]	; (8005e30 <checkAktifCalisma+0xddc>)
 8005c2c:	f003 fc76 	bl	800951c <HAL_GPIO_ReadPin>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d107      	bne.n	8005c46 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005c36:	4b80      	ldr	r3, [pc, #512]	; (8005e38 <checkAktifCalisma+0xde4>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005c3e:	4b7f      	ldr	r3, [pc, #508]	; (8005e3c <checkAktifCalisma+0xde8>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	e002      	b.n	8005c4c <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005c46:	4b7d      	ldr	r3, [pc, #500]	; (8005e3c <checkAktifCalisma+0xde8>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005c4c:	4b75      	ldr	r3, [pc, #468]	; (8005e24 <checkAktifCalisma+0xdd0>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d107      	bne.n	8005c64 <checkAktifCalisma+0xc10>
 8005c54:	4b79      	ldr	r3, [pc, #484]	; (8005e3c <checkAktifCalisma+0xde8>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <checkAktifCalisma+0xc10>
 8005c5c:	4b78      	ldr	r3, [pc, #480]	; (8005e40 <checkAktifCalisma+0xdec>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005c64:	2201      	movs	r2, #1
 8005c66:	2180      	movs	r1, #128	; 0x80
 8005c68:	4876      	ldr	r0, [pc, #472]	; (8005e44 <checkAktifCalisma+0xdf0>)
 8005c6a:	f003 fc6e 	bl	800954a <HAL_GPIO_WritePin>
 8005c6e:	e004      	b.n	8005c7a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005c70:	2200      	movs	r2, #0
 8005c72:	2180      	movs	r1, #128	; 0x80
 8005c74:	4873      	ldr	r0, [pc, #460]	; (8005e44 <checkAktifCalisma+0xdf0>)
 8005c76:	f003 fc68 	bl	800954a <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005c7a:	4b73      	ldr	r3, [pc, #460]	; (8005e48 <checkAktifCalisma+0xdf4>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d141      	bne.n	8005d06 <checkAktifCalisma+0xcb2>
 8005c82:	4b6a      	ldr	r3, [pc, #424]	; (8005e2c <checkAktifCalisma+0xdd8>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d003      	beq.n	8005c92 <checkAktifCalisma+0xc3e>
 8005c8a:	4b68      	ldr	r3, [pc, #416]	; (8005e2c <checkAktifCalisma+0xdd8>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d139      	bne.n	8005d06 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005c92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c96:	4866      	ldr	r0, [pc, #408]	; (8005e30 <checkAktifCalisma+0xddc>)
 8005c98:	f003 fc40 	bl	800951c <HAL_GPIO_ReadPin>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d103      	bne.n	8005caa <checkAktifCalisma+0xc56>
 8005ca2:	4b6a      	ldr	r3, [pc, #424]	; (8005e4c <checkAktifCalisma+0xdf8>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <checkAktifCalisma+0xc6e>
 8005caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cae:	4868      	ldr	r0, [pc, #416]	; (8005e50 <checkAktifCalisma+0xdfc>)
 8005cb0:	f003 fc34 	bl	800951c <HAL_GPIO_ReadPin>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d125      	bne.n	8005d06 <checkAktifCalisma+0xcb2>
 8005cba:	4b64      	ldr	r3, [pc, #400]	; (8005e4c <checkAktifCalisma+0xdf8>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d121      	bne.n	8005d06 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	485a      	ldr	r0, [pc, #360]	; (8005e30 <checkAktifCalisma+0xddc>)
 8005cc6:	f003 fc29 	bl	800951c <HAL_GPIO_ReadPin>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d11a      	bne.n	8005d06 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005cd0:	2104      	movs	r1, #4
 8005cd2:	4857      	ldr	r0, [pc, #348]	; (8005e30 <checkAktifCalisma+0xddc>)
 8005cd4:	f003 fc22 	bl	800951c <HAL_GPIO_ReadPin>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d113      	bne.n	8005d06 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005cde:	4b56      	ldr	r3, [pc, #344]	; (8005e38 <checkAktifCalisma+0xde4>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00f      	beq.n	8005d06 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005ce6:	4b5b      	ldr	r3, [pc, #364]	; (8005e54 <checkAktifCalisma+0xe00>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f083 0301 	eor.w	r3, r3, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005cf4:	4b58      	ldr	r3, [pc, #352]	; (8005e58 <checkAktifCalisma+0xe04>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005cfa:	4b58      	ldr	r3, [pc, #352]	; (8005e5c <checkAktifCalisma+0xe08>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a58      	ldr	r2, [pc, #352]	; (8005e60 <checkAktifCalisma+0xe0c>)
 8005d00:	6013      	str	r3, [r2, #0]
			bekle();
 8005d02:	f7ff f829 	bl	8004d58 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005d06:	4b55      	ldr	r3, [pc, #340]	; (8005e5c <checkAktifCalisma+0xe08>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	4b55      	ldr	r3, [pc, #340]	; (8005e60 <checkAktifCalisma+0xe0c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	4a54      	ldr	r2, [pc, #336]	; (8005e64 <checkAktifCalisma+0xe10>)
 8005d12:	7812      	ldrb	r2, [r2, #0]
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d20d      	bcs.n	8005d34 <checkAktifCalisma+0xce0>
 8005d18:	2102      	movs	r1, #2
 8005d1a:	4845      	ldr	r0, [pc, #276]	; (8005e30 <checkAktifCalisma+0xddc>)
 8005d1c:	f003 fbfe 	bl	800951c <HAL_GPIO_ReadPin>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d006      	beq.n	8005d34 <checkAktifCalisma+0xce0>
 8005d26:	4b44      	ldr	r3, [pc, #272]	; (8005e38 <checkAktifCalisma+0xde4>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	f083 0301 	eor.w	r3, r3, #1
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005d34:	4b48      	ldr	r3, [pc, #288]	; (8005e58 <checkAktifCalisma+0xe04>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005d3a:	4b43      	ldr	r3, [pc, #268]	; (8005e48 <checkAktifCalisma+0xdf4>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d135      	bne.n	8005dae <checkAktifCalisma+0xd5a>
 8005d42:	4b3a      	ldr	r3, [pc, #232]	; (8005e2c <checkAktifCalisma+0xdd8>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d003      	beq.n	8005d52 <checkAktifCalisma+0xcfe>
 8005d4a:	4b38      	ldr	r3, [pc, #224]	; (8005e2c <checkAktifCalisma+0xdd8>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d12d      	bne.n	8005dae <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d56:	4836      	ldr	r0, [pc, #216]	; (8005e30 <checkAktifCalisma+0xddc>)
 8005d58:	f003 fbe0 	bl	800951c <HAL_GPIO_ReadPin>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d103      	bne.n	8005d6a <checkAktifCalisma+0xd16>
 8005d62:	4b3a      	ldr	r3, [pc, #232]	; (8005e4c <checkAktifCalisma+0xdf8>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00b      	beq.n	8005d82 <checkAktifCalisma+0xd2e>
 8005d6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d6e:	4838      	ldr	r0, [pc, #224]	; (8005e50 <checkAktifCalisma+0xdfc>)
 8005d70:	f003 fbd4 	bl	800951c <HAL_GPIO_ReadPin>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d119      	bne.n	8005dae <checkAktifCalisma+0xd5a>
 8005d7a:	4b34      	ldr	r3, [pc, #208]	; (8005e4c <checkAktifCalisma+0xdf8>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d115      	bne.n	8005dae <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005d82:	2102      	movs	r1, #2
 8005d84:	482a      	ldr	r0, [pc, #168]	; (8005e30 <checkAktifCalisma+0xddc>)
 8005d86:	f003 fbc9 	bl	800951c <HAL_GPIO_ReadPin>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d10e      	bne.n	8005dae <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005d90:	2104      	movs	r1, #4
 8005d92:	4827      	ldr	r0, [pc, #156]	; (8005e30 <checkAktifCalisma+0xddc>)
 8005d94:	f003 fbc2 	bl	800951c <HAL_GPIO_ReadPin>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d107      	bne.n	8005dae <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005d9e:	4b26      	ldr	r3, [pc, #152]	; (8005e38 <checkAktifCalisma+0xde4>)
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005da6:	4b30      	ldr	r3, [pc, #192]	; (8005e68 <checkAktifCalisma+0xe14>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e002      	b.n	8005db4 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005dae:	4b2e      	ldr	r3, [pc, #184]	; (8005e68 <checkAktifCalisma+0xe14>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005db4:	4b24      	ldr	r3, [pc, #144]	; (8005e48 <checkAktifCalisma+0xdf4>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d11d      	bne.n	8005df8 <checkAktifCalisma+0xda4>
 8005dbc:	4b1b      	ldr	r3, [pc, #108]	; (8005e2c <checkAktifCalisma+0xdd8>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d003      	beq.n	8005dcc <checkAktifCalisma+0xd78>
 8005dc4:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <checkAktifCalisma+0xdd8>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d115      	bne.n	8005df8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005dcc:	2102      	movs	r1, #2
 8005dce:	4818      	ldr	r0, [pc, #96]	; (8005e30 <checkAktifCalisma+0xddc>)
 8005dd0:	f003 fba4 	bl	800951c <HAL_GPIO_ReadPin>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d10e      	bne.n	8005df8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005dda:	2104      	movs	r1, #4
 8005ddc:	4814      	ldr	r0, [pc, #80]	; (8005e30 <checkAktifCalisma+0xddc>)
 8005dde:	f003 fb9d 	bl	800951c <HAL_GPIO_ReadPin>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d107      	bne.n	8005df8 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005de8:	4b13      	ldr	r3, [pc, #76]	; (8005e38 <checkAktifCalisma+0xde4>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005df0:	4b1e      	ldr	r3, [pc, #120]	; (8005e6c <checkAktifCalisma+0xe18>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	e002      	b.n	8005dfe <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005df8:	4b1c      	ldr	r3, [pc, #112]	; (8005e6c <checkAktifCalisma+0xe18>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005dfe:	4b1a      	ldr	r3, [pc, #104]	; (8005e68 <checkAktifCalisma+0xe14>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d107      	bne.n	8005e16 <checkAktifCalisma+0xdc2>
 8005e06:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <checkAktifCalisma+0xe18>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d103      	bne.n	8005e16 <checkAktifCalisma+0xdc2>
 8005e0e:	4b12      	ldr	r3, [pc, #72]	; (8005e58 <checkAktifCalisma+0xe04>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d02c      	beq.n	8005e70 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005e16:	2201      	movs	r2, #1
 8005e18:	2140      	movs	r1, #64	; 0x40
 8005e1a:	480a      	ldr	r0, [pc, #40]	; (8005e44 <checkAktifCalisma+0xdf0>)
 8005e1c:	f003 fb95 	bl	800954a <HAL_GPIO_WritePin>
 8005e20:	e02b      	b.n	8005e7a <checkAktifCalisma+0xe26>
 8005e22:	bf00      	nop
 8005e24:	20000264 	.word	0x20000264
 8005e28:	20000229 	.word	0x20000229
 8005e2c:	20000228 	.word	0x20000228
 8005e30:	40011000 	.word	0x40011000
 8005e34:	20000226 	.word	0x20000226
 8005e38:	20000262 	.word	0x20000262
 8005e3c:	20000265 	.word	0x20000265
 8005e40:	20000263 	.word	0x20000263
 8005e44:	40010800 	.word	0x40010800
 8005e48:	2000022a 	.word	0x2000022a
 8005e4c:	2000022c 	.word	0x2000022c
 8005e50:	40010c00 	.word	0x40010c00
 8005e54:	2000024f 	.word	0x2000024f
 8005e58:	20000266 	.word	0x20000266
 8005e5c:	200001fc 	.word	0x200001fc
 8005e60:	20000200 	.word	0x20000200
 8005e64:	2000023a 	.word	0x2000023a
 8005e68:	20000267 	.word	0x20000267
 8005e6c:	20000268 	.word	0x20000268
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005e70:	2200      	movs	r2, #0
 8005e72:	2140      	movs	r1, #64	; 0x40
 8005e74:	488d      	ldr	r0, [pc, #564]	; (80060ac <checkAktifCalisma+0x1058>)
 8005e76:	f003 fb68 	bl	800954a <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005e7a:	4b8d      	ldr	r3, [pc, #564]	; (80060b0 <checkAktifCalisma+0x105c>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <checkAktifCalisma+0xe36>
 8005e82:	4b8b      	ldr	r3, [pc, #556]	; (80060b0 <checkAktifCalisma+0x105c>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d115      	bne.n	8005eb6 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005e8a:	2104      	movs	r1, #4
 8005e8c:	4889      	ldr	r0, [pc, #548]	; (80060b4 <checkAktifCalisma+0x1060>)
 8005e8e:	f003 fb45 	bl	800951c <HAL_GPIO_ReadPin>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d003      	beq.n	8005ea0 <checkAktifCalisma+0xe4c>
 8005e98:	4b87      	ldr	r3, [pc, #540]	; (80060b8 <checkAktifCalisma+0x1064>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005ea0:	2102      	movs	r1, #2
 8005ea2:	4884      	ldr	r0, [pc, #528]	; (80060b4 <checkAktifCalisma+0x1060>)
 8005ea4:	f003 fb3a 	bl	800951c <HAL_GPIO_ReadPin>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005eae:	4b83      	ldr	r3, [pc, #524]	; (80060bc <checkAktifCalisma+0x1068>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	e002      	b.n	8005ebc <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005eb6:	4b81      	ldr	r3, [pc, #516]	; (80060bc <checkAktifCalisma+0x1068>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005ebc:	4b7c      	ldr	r3, [pc, #496]	; (80060b0 <checkAktifCalisma+0x105c>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d003      	beq.n	8005ecc <checkAktifCalisma+0xe78>
 8005ec4:	4b7a      	ldr	r3, [pc, #488]	; (80060b0 <checkAktifCalisma+0x105c>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d111      	bne.n	8005ef0 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ecc:	2102      	movs	r1, #2
 8005ece:	4879      	ldr	r0, [pc, #484]	; (80060b4 <checkAktifCalisma+0x1060>)
 8005ed0:	f003 fb24 	bl	800951c <HAL_GPIO_ReadPin>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d10a      	bne.n	8005ef0 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005eda:	2104      	movs	r1, #4
 8005edc:	4875      	ldr	r0, [pc, #468]	; (80060b4 <checkAktifCalisma+0x1060>)
 8005ede:	f003 fb1d 	bl	800951c <HAL_GPIO_ReadPin>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d103      	bne.n	8005ef0 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005ee8:	4b75      	ldr	r3, [pc, #468]	; (80060c0 <checkAktifCalisma+0x106c>)
 8005eea:	2201      	movs	r2, #1
 8005eec:	701a      	strb	r2, [r3, #0]
 8005eee:	e002      	b.n	8005ef6 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005ef0:	4b73      	ldr	r3, [pc, #460]	; (80060c0 <checkAktifCalisma+0x106c>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005ef6:	4b71      	ldr	r3, [pc, #452]	; (80060bc <checkAktifCalisma+0x1068>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00f      	beq.n	8005f1e <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005efe:	4b71      	ldr	r3, [pc, #452]	; (80060c4 <checkAktifCalisma+0x1070>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d10b      	bne.n	8005f1e <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005f06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f0a:	486f      	ldr	r0, [pc, #444]	; (80060c8 <checkAktifCalisma+0x1074>)
 8005f0c:	f003 fb06 	bl	800951c <HAL_GPIO_ReadPin>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d103      	bne.n	8005f1e <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005f16:	4b6d      	ldr	r3, [pc, #436]	; (80060cc <checkAktifCalisma+0x1078>)
 8005f18:	2201      	movs	r2, #1
 8005f1a:	701a      	strb	r2, [r3, #0]
 8005f1c:	e002      	b.n	8005f24 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005f1e:	4b6b      	ldr	r3, [pc, #428]	; (80060cc <checkAktifCalisma+0x1078>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005f24:	4b66      	ldr	r3, [pc, #408]	; (80060c0 <checkAktifCalisma+0x106c>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00f      	beq.n	8005f4c <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005f2c:	4b65      	ldr	r3, [pc, #404]	; (80060c4 <checkAktifCalisma+0x1070>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d10b      	bne.n	8005f4c <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005f34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f38:	4863      	ldr	r0, [pc, #396]	; (80060c8 <checkAktifCalisma+0x1074>)
 8005f3a:	f003 faef 	bl	800951c <HAL_GPIO_ReadPin>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d103      	bne.n	8005f4c <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005f44:	4b62      	ldr	r3, [pc, #392]	; (80060d0 <checkAktifCalisma+0x107c>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	e002      	b.n	8005f52 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005f4c:	4b60      	ldr	r3, [pc, #384]	; (80060d0 <checkAktifCalisma+0x107c>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005f52:	4b60      	ldr	r3, [pc, #384]	; (80060d4 <checkAktifCalisma+0x1080>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d137      	bne.n	8005fca <checkAktifCalisma+0xf76>
 8005f5a:	4b5f      	ldr	r3, [pc, #380]	; (80060d8 <checkAktifCalisma+0x1084>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d003      	beq.n	8005f6a <checkAktifCalisma+0xf16>
 8005f62:	4b5d      	ldr	r3, [pc, #372]	; (80060d8 <checkAktifCalisma+0x1084>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d12f      	bne.n	8005fca <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005f6a:	4b54      	ldr	r3, [pc, #336]	; (80060bc <checkAktifCalisma+0x1068>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d103      	bne.n	8005f7a <checkAktifCalisma+0xf26>
 8005f72:	4b53      	ldr	r3, [pc, #332]	; (80060c0 <checkAktifCalisma+0x106c>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d027      	beq.n	8005fca <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005f7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f7e:	484d      	ldr	r0, [pc, #308]	; (80060b4 <checkAktifCalisma+0x1060>)
 8005f80:	f003 facc 	bl	800951c <HAL_GPIO_ReadPin>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d103      	bne.n	8005f92 <checkAktifCalisma+0xf3e>
 8005f8a:	4b4e      	ldr	r3, [pc, #312]	; (80060c4 <checkAktifCalisma+0x1070>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d007      	beq.n	8005fa2 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005f92:	4b4e      	ldr	r3, [pc, #312]	; (80060cc <checkAktifCalisma+0x1078>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d103      	bne.n	8005fa2 <checkAktifCalisma+0xf4e>
 8005f9a:	4b4d      	ldr	r3, [pc, #308]	; (80060d0 <checkAktifCalisma+0x107c>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d013      	beq.n	8005fca <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005fa2:	4b4e      	ldr	r3, [pc, #312]	; (80060dc <checkAktifCalisma+0x1088>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00f      	beq.n	8005fca <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005faa:	4b4d      	ldr	r3, [pc, #308]	; (80060e0 <checkAktifCalisma+0x108c>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	f083 0301 	eor.w	r3, r3, #1
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d008      	beq.n	8005fca <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005fb8:	4b4a      	ldr	r3, [pc, #296]	; (80060e4 <checkAktifCalisma+0x1090>)
 8005fba:	2201      	movs	r2, #1
 8005fbc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005fbe:	4b4a      	ldr	r3, [pc, #296]	; (80060e8 <checkAktifCalisma+0x1094>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a4a      	ldr	r2, [pc, #296]	; (80060ec <checkAktifCalisma+0x1098>)
 8005fc4:	6013      	str	r3, [r2, #0]
			bekle();
 8005fc6:	f7fe fec7 	bl	8004d58 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005fca:	4b47      	ldr	r3, [pc, #284]	; (80060e8 <checkAktifCalisma+0x1094>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4b47      	ldr	r3, [pc, #284]	; (80060ec <checkAktifCalisma+0x1098>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	4a46      	ldr	r2, [pc, #280]	; (80060f0 <checkAktifCalisma+0x109c>)
 8005fd6:	7812      	ldrb	r2, [r2, #0]
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d214      	bcs.n	8006006 <checkAktifCalisma+0xfb2>
 8005fdc:	4b37      	ldr	r3, [pc, #220]	; (80060bc <checkAktifCalisma+0x1068>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f083 0301 	eor.w	r3, r3, #1
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d006      	beq.n	8005ff8 <checkAktifCalisma+0xfa4>
 8005fea:	4b35      	ldr	r3, [pc, #212]	; (80060c0 <checkAktifCalisma+0x106c>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	f083 0301 	eor.w	r3, r3, #1
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d106      	bne.n	8006006 <checkAktifCalisma+0xfb2>
 8005ff8:	4b38      	ldr	r3, [pc, #224]	; (80060dc <checkAktifCalisma+0x1088>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	f083 0301 	eor.w	r3, r3, #1
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8006006:	4b37      	ldr	r3, [pc, #220]	; (80060e4 <checkAktifCalisma+0x1090>)
 8006008:	2200      	movs	r2, #0
 800600a:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800600c:	4b31      	ldr	r3, [pc, #196]	; (80060d4 <checkAktifCalisma+0x1080>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d12b      	bne.n	800606c <checkAktifCalisma+0x1018>
 8006014:	4b30      	ldr	r3, [pc, #192]	; (80060d8 <checkAktifCalisma+0x1084>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b02      	cmp	r3, #2
 800601a:	d003      	beq.n	8006024 <checkAktifCalisma+0xfd0>
 800601c:	4b2e      	ldr	r3, [pc, #184]	; (80060d8 <checkAktifCalisma+0x1084>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b03      	cmp	r3, #3
 8006022:	d123      	bne.n	800606c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006024:	4b25      	ldr	r3, [pc, #148]	; (80060bc <checkAktifCalisma+0x1068>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d103      	bne.n	8006034 <checkAktifCalisma+0xfe0>
 800602c:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <checkAktifCalisma+0x106c>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01b      	beq.n	800606c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006038:	481e      	ldr	r0, [pc, #120]	; (80060b4 <checkAktifCalisma+0x1060>)
 800603a:	f003 fa6f 	bl	800951c <HAL_GPIO_ReadPin>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d103      	bne.n	800604c <checkAktifCalisma+0xff8>
 8006044:	4b1f      	ldr	r3, [pc, #124]	; (80060c4 <checkAktifCalisma+0x1070>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800604c:	4b1f      	ldr	r3, [pc, #124]	; (80060cc <checkAktifCalisma+0x1078>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d103      	bne.n	800605c <checkAktifCalisma+0x1008>
 8006054:	4b1e      	ldr	r3, [pc, #120]	; (80060d0 <checkAktifCalisma+0x107c>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 800605c:	4b1f      	ldr	r3, [pc, #124]	; (80060dc <checkAktifCalisma+0x1088>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8006064:	4b23      	ldr	r3, [pc, #140]	; (80060f4 <checkAktifCalisma+0x10a0>)
 8006066:	2201      	movs	r2, #1
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e002      	b.n	8006072 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 800606c:	4b21      	ldr	r3, [pc, #132]	; (80060f4 <checkAktifCalisma+0x10a0>)
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006072:	4b18      	ldr	r3, [pc, #96]	; (80060d4 <checkAktifCalisma+0x1080>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d140      	bne.n	80060fc <checkAktifCalisma+0x10a8>
 800607a:	4b17      	ldr	r3, [pc, #92]	; (80060d8 <checkAktifCalisma+0x1084>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d003      	beq.n	800608a <checkAktifCalisma+0x1036>
 8006082:	4b15      	ldr	r3, [pc, #84]	; (80060d8 <checkAktifCalisma+0x1084>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b03      	cmp	r3, #3
 8006088:	d138      	bne.n	80060fc <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800608a:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <checkAktifCalisma+0x1068>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d103      	bne.n	800609a <checkAktifCalisma+0x1046>
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <checkAktifCalisma+0x106c>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d030      	beq.n	80060fc <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 800609a:	4b10      	ldr	r3, [pc, #64]	; (80060dc <checkAktifCalisma+0x1088>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d02c      	beq.n	80060fc <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 80060a2:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <checkAktifCalisma+0x10a4>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	e02b      	b.n	8006102 <checkAktifCalisma+0x10ae>
 80060aa:	bf00      	nop
 80060ac:	40010800 	.word	0x40010800
 80060b0:	2000022d 	.word	0x2000022d
 80060b4:	40011000 	.word	0x40011000
 80060b8:	20000226 	.word	0x20000226
 80060bc:	2000026c 	.word	0x2000026c
 80060c0:	2000026d 	.word	0x2000026d
 80060c4:	2000022c 	.word	0x2000022c
 80060c8:	40010c00 	.word	0x40010c00
 80060cc:	2000027c 	.word	0x2000027c
 80060d0:	2000027d 	.word	0x2000027d
 80060d4:	2000022b 	.word	0x2000022b
 80060d8:	20000228 	.word	0x20000228
 80060dc:	20000262 	.word	0x20000262
 80060e0:	2000024f 	.word	0x2000024f
 80060e4:	20000269 	.word	0x20000269
 80060e8:	200001fc 	.word	0x200001fc
 80060ec:	20000200 	.word	0x20000200
 80060f0:	2000023b 	.word	0x2000023b
 80060f4:	2000026a 	.word	0x2000026a
 80060f8:	2000026b 	.word	0x2000026b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80060fc:	4b8b      	ldr	r3, [pc, #556]	; (800632c <checkAktifCalisma+0x12d8>)
 80060fe:	2200      	movs	r2, #0
 8006100:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8006102:	4b8b      	ldr	r3, [pc, #556]	; (8006330 <checkAktifCalisma+0x12dc>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d107      	bne.n	800611a <checkAktifCalisma+0x10c6>
 800610a:	4b8a      	ldr	r3, [pc, #552]	; (8006334 <checkAktifCalisma+0x12e0>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d103      	bne.n	800611a <checkAktifCalisma+0x10c6>
 8006112:	4b86      	ldr	r3, [pc, #536]	; (800632c <checkAktifCalisma+0x12d8>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800611a:	2201      	movs	r2, #1
 800611c:	2120      	movs	r1, #32
 800611e:	4886      	ldr	r0, [pc, #536]	; (8006338 <checkAktifCalisma+0x12e4>)
 8006120:	f003 fa13 	bl	800954a <HAL_GPIO_WritePin>
 8006124:	e004      	b.n	8006130 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006126:	2200      	movs	r2, #0
 8006128:	2120      	movs	r1, #32
 800612a:	4883      	ldr	r0, [pc, #524]	; (8006338 <checkAktifCalisma+0x12e4>)
 800612c:	f003 fa0d 	bl	800954a <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006130:	4b82      	ldr	r3, [pc, #520]	; (800633c <checkAktifCalisma+0x12e8>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00e      	beq.n	8006156 <checkAktifCalisma+0x1102>
 8006138:	2102      	movs	r1, #2
 800613a:	4881      	ldr	r0, [pc, #516]	; (8006340 <checkAktifCalisma+0x12ec>)
 800613c:	f003 f9ee 	bl	800951c <HAL_GPIO_ReadPin>
 8006140:	4603      	mov	r3, r0
 8006142:	2b01      	cmp	r3, #1
 8006144:	d107      	bne.n	8006156 <checkAktifCalisma+0x1102>
 8006146:	4b7f      	ldr	r3, [pc, #508]	; (8006344 <checkAktifCalisma+0x12f0>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d103      	bne.n	8006156 <checkAktifCalisma+0x1102>
 800614e:	4b7e      	ldr	r3, [pc, #504]	; (8006348 <checkAktifCalisma+0x12f4>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d112      	bne.n	800617c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006156:	4b7d      	ldr	r3, [pc, #500]	; (800634c <checkAktifCalisma+0x12f8>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d066      	beq.n	800622c <checkAktifCalisma+0x11d8>
 800615e:	2104      	movs	r1, #4
 8006160:	4877      	ldr	r0, [pc, #476]	; (8006340 <checkAktifCalisma+0x12ec>)
 8006162:	f003 f9db 	bl	800951c <HAL_GPIO_ReadPin>
 8006166:	4603      	mov	r3, r0
 8006168:	2b01      	cmp	r3, #1
 800616a:	d15f      	bne.n	800622c <checkAktifCalisma+0x11d8>
 800616c:	4b75      	ldr	r3, [pc, #468]	; (8006344 <checkAktifCalisma+0x12f0>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d05b      	beq.n	800622c <checkAktifCalisma+0x11d8>
 8006174:	4b74      	ldr	r3, [pc, #464]	; (8006348 <checkAktifCalisma+0x12f4>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d057      	beq.n	800622c <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 800617c:	4b74      	ldr	r3, [pc, #464]	; (8006350 <checkAktifCalisma+0x12fc>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	3301      	adds	r3, #1
 8006182:	b2da      	uxtb	r2, r3
 8006184:	4b72      	ldr	r3, [pc, #456]	; (8006350 <checkAktifCalisma+0x12fc>)
 8006186:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8006188:	4b71      	ldr	r3, [pc, #452]	; (8006350 <checkAktifCalisma+0x12fc>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b09      	cmp	r3, #9
 800618e:	d908      	bls.n	80061a2 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8006190:	4b6f      	ldr	r3, [pc, #444]	; (8006350 <checkAktifCalisma+0x12fc>)
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8006196:	4b6f      	ldr	r3, [pc, #444]	; (8006354 <checkAktifCalisma+0x1300>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	3301      	adds	r3, #1
 800619c:	b2da      	uxtb	r2, r3
 800619e:	4b6d      	ldr	r3, [pc, #436]	; (8006354 <checkAktifCalisma+0x1300>)
 80061a0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 80061a2:	4b6c      	ldr	r3, [pc, #432]	; (8006354 <checkAktifCalisma+0x1300>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b09      	cmp	r3, #9
 80061a8:	d908      	bls.n	80061bc <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 80061aa:	4b6a      	ldr	r3, [pc, #424]	; (8006354 <checkAktifCalisma+0x1300>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80061b0:	4b69      	ldr	r3, [pc, #420]	; (8006358 <checkAktifCalisma+0x1304>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	3301      	adds	r3, #1
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	4b67      	ldr	r3, [pc, #412]	; (8006358 <checkAktifCalisma+0x1304>)
 80061ba:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80061bc:	4b66      	ldr	r3, [pc, #408]	; (8006358 <checkAktifCalisma+0x1304>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b09      	cmp	r3, #9
 80061c2:	d908      	bls.n	80061d6 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80061c4:	4b64      	ldr	r3, [pc, #400]	; (8006358 <checkAktifCalisma+0x1304>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80061ca:	4b64      	ldr	r3, [pc, #400]	; (800635c <checkAktifCalisma+0x1308>)
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	3301      	adds	r3, #1
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	4b62      	ldr	r3, [pc, #392]	; (800635c <checkAktifCalisma+0x1308>)
 80061d4:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80061d6:	4b61      	ldr	r3, [pc, #388]	; (800635c <checkAktifCalisma+0x1308>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b09      	cmp	r3, #9
 80061dc:	d908      	bls.n	80061f0 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80061de:	4b5f      	ldr	r3, [pc, #380]	; (800635c <checkAktifCalisma+0x1308>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80061e4:	4b5e      	ldr	r3, [pc, #376]	; (8006360 <checkAktifCalisma+0x130c>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	3301      	adds	r3, #1
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	4b5c      	ldr	r3, [pc, #368]	; (8006360 <checkAktifCalisma+0x130c>)
 80061ee:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80061f0:	4b5b      	ldr	r3, [pc, #364]	; (8006360 <checkAktifCalisma+0x130c>)
 80061f2:	781a      	ldrb	r2, [r3, #0]
 80061f4:	4b5b      	ldr	r3, [pc, #364]	; (8006364 <checkAktifCalisma+0x1310>)
 80061f6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80061fa:	4b58      	ldr	r3, [pc, #352]	; (800635c <checkAktifCalisma+0x1308>)
 80061fc:	781a      	ldrb	r2, [r3, #0]
 80061fe:	4b59      	ldr	r3, [pc, #356]	; (8006364 <checkAktifCalisma+0x1310>)
 8006200:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006202:	4b55      	ldr	r3, [pc, #340]	; (8006358 <checkAktifCalisma+0x1304>)
 8006204:	781a      	ldrb	r2, [r3, #0]
 8006206:	4b57      	ldr	r3, [pc, #348]	; (8006364 <checkAktifCalisma+0x1310>)
 8006208:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800620a:	4b52      	ldr	r3, [pc, #328]	; (8006354 <checkAktifCalisma+0x1300>)
 800620c:	781a      	ldrb	r2, [r3, #0]
 800620e:	4b55      	ldr	r3, [pc, #340]	; (8006364 <checkAktifCalisma+0x1310>)
 8006210:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006212:	4b4f      	ldr	r3, [pc, #316]	; (8006350 <checkAktifCalisma+0x12fc>)
 8006214:	781a      	ldrb	r2, [r3, #0]
 8006216:	4b53      	ldr	r3, [pc, #332]	; (8006364 <checkAktifCalisma+0x1310>)
 8006218:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 800621a:	4b53      	ldr	r3, [pc, #332]	; (8006368 <checkAktifCalisma+0x1314>)
 800621c:	2201      	movs	r2, #1
 800621e:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006220:	4b46      	ldr	r3, [pc, #280]	; (800633c <checkAktifCalisma+0x12e8>)
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8006226:	4b49      	ldr	r3, [pc, #292]	; (800634c <checkAktifCalisma+0x12f8>)
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 800622c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006230:	484e      	ldr	r0, [pc, #312]	; (800636c <checkAktifCalisma+0x1318>)
 8006232:	f003 f973 	bl	800951c <HAL_GPIO_ReadPin>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d016      	beq.n	800626a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800623c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006240:	484a      	ldr	r0, [pc, #296]	; (800636c <checkAktifCalisma+0x1318>)
 8006242:	f003 f96b 	bl	800951c <HAL_GPIO_ReadPin>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00e      	beq.n	800626a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800624c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006250:	4846      	ldr	r0, [pc, #280]	; (800636c <checkAktifCalisma+0x1318>)
 8006252:	f003 f963 	bl	800951c <HAL_GPIO_ReadPin>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d006      	beq.n	800626a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800625c:	2140      	movs	r1, #64	; 0x40
 800625e:	4838      	ldr	r0, [pc, #224]	; (8006340 <checkAktifCalisma+0x12ec>)
 8006260:	f003 f95c 	bl	800951c <HAL_GPIO_ReadPin>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d103      	bne.n	8006272 <checkAktifCalisma+0x121e>
			startBasili=1;
 800626a:	4b41      	ldr	r3, [pc, #260]	; (8006370 <checkAktifCalisma+0x131c>)
 800626c:	2201      	movs	r2, #1
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	e002      	b.n	8006278 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006272:	4b3f      	ldr	r3, [pc, #252]	; (8006370 <checkAktifCalisma+0x131c>)
 8006274:	2200      	movs	r2, #0
 8006276:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006278:	4b3d      	ldr	r3, [pc, #244]	; (8006370 <checkAktifCalisma+0x131c>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d016      	beq.n	80062ae <checkAktifCalisma+0x125a>
 8006280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006284:	4839      	ldr	r0, [pc, #228]	; (800636c <checkAktifCalisma+0x1318>)
 8006286:	f003 f949 	bl	800951c <HAL_GPIO_ReadPin>
 800628a:	4603      	mov	r3, r0
 800628c:	2b01      	cmp	r3, #1
 800628e:	d10e      	bne.n	80062ae <checkAktifCalisma+0x125a>
			hataVar=1;
 8006290:	4b38      	ldr	r3, [pc, #224]	; (8006374 <checkAktifCalisma+0x1320>)
 8006292:	2201      	movs	r2, #1
 8006294:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8006296:	2001      	movs	r0, #1
 8006298:	f7fa fd88 	bl	8000dac <hataKoduLcdGoster>
			hata2EEPROM(1);
 800629c:	2001      	movs	r0, #1
 800629e:	f7fa fd2b 	bl	8000cf8 <hata2EEPROM>
			convertAndSendData();
 80062a2:	f001 fbaf 	bl	8007a04 <convertAndSendData>
			acilstophatasi=1;
 80062a6:	4b34      	ldr	r3, [pc, #208]	; (8006378 <checkAktifCalisma+0x1324>)
 80062a8:	2201      	movs	r2, #1
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	e018      	b.n	80062e0 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80062ae:	4b32      	ldr	r3, [pc, #200]	; (8006378 <checkAktifCalisma+0x1324>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d014      	beq.n	80062e0 <checkAktifCalisma+0x128c>
 80062b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062ba:	482c      	ldr	r0, [pc, #176]	; (800636c <checkAktifCalisma+0x1318>)
 80062bc:	f003 f92e 	bl	800951c <HAL_GPIO_ReadPin>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10c      	bne.n	80062e0 <checkAktifCalisma+0x128c>
 80062c6:	4b2a      	ldr	r3, [pc, #168]	; (8006370 <checkAktifCalisma+0x131c>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f083 0301 	eor.w	r3, r3, #1
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 80062d4:	4b28      	ldr	r3, [pc, #160]	; (8006378 <checkAktifCalisma+0x1324>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80062da:	2001      	movs	r0, #1
 80062dc:	f7fe fce8 	bl	8004cb0 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80062e0:	4b26      	ldr	r3, [pc, #152]	; (800637c <checkAktifCalisma+0x1328>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	f083 0301 	eor.w	r3, r3, #1
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d04e      	beq.n	800638c <checkAktifCalisma+0x1338>
 80062ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062f2:	481e      	ldr	r0, [pc, #120]	; (800636c <checkAktifCalisma+0x1318>)
 80062f4:	f003 f912 	bl	800951c <HAL_GPIO_ReadPin>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <checkAktifCalisma+0x12b2>
 80062fe:	4b20      	ldr	r3, [pc, #128]	; (8006380 <checkAktifCalisma+0x132c>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d042      	beq.n	800638c <checkAktifCalisma+0x1338>
 8006306:	4b1f      	ldr	r3, [pc, #124]	; (8006384 <checkAktifCalisma+0x1330>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d13e      	bne.n	800638c <checkAktifCalisma+0x1338>
			hataVar=1;
 800630e:	4b19      	ldr	r3, [pc, #100]	; (8006374 <checkAktifCalisma+0x1320>)
 8006310:	2201      	movs	r2, #1
 8006312:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006314:	2002      	movs	r0, #2
 8006316:	f7fa fd49 	bl	8000dac <hataKoduLcdGoster>
			hata2EEPROM(2);
 800631a:	2002      	movs	r0, #2
 800631c:	f7fa fcec 	bl	8000cf8 <hata2EEPROM>
			convertAndSendData();
 8006320:	f001 fb70 	bl	8007a04 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006324:	4b18      	ldr	r3, [pc, #96]	; (8006388 <checkAktifCalisma+0x1334>)
 8006326:	2201      	movs	r2, #1
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	e047      	b.n	80063bc <checkAktifCalisma+0x1368>
 800632c:	2000026b 	.word	0x2000026b
 8006330:	2000026a 	.word	0x2000026a
 8006334:	20000269 	.word	0x20000269
 8006338:	40010800 	.word	0x40010800
 800633c:	2000025f 	.word	0x2000025f
 8006340:	40011000 	.word	0x40011000
 8006344:	20000226 	.word	0x20000226
 8006348:	20000262 	.word	0x20000262
 800634c:	20000260 	.word	0x20000260
 8006350:	2000021d 	.word	0x2000021d
 8006354:	2000021e 	.word	0x2000021e
 8006358:	20000000 	.word	0x20000000
 800635c:	20000001 	.word	0x20000001
 8006360:	2000021f 	.word	0x2000021f
 8006364:	20000118 	.word	0x20000118
 8006368:	2000024c 	.word	0x2000024c
 800636c:	40010c00 	.word	0x40010c00
 8006370:	2000026e 	.word	0x2000026e
 8006374:	20000275 	.word	0x20000275
 8006378:	20000270 	.word	0x20000270
 800637c:	20000277 	.word	0x20000277
 8006380:	20000281 	.word	0x20000281
 8006384:	20000224 	.word	0x20000224
 8006388:	20000271 	.word	0x20000271
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800638c:	4b9b      	ldr	r3, [pc, #620]	; (80065fc <checkAktifCalisma+0x15a8>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d013      	beq.n	80063bc <checkAktifCalisma+0x1368>
 8006394:	4b9a      	ldr	r3, [pc, #616]	; (8006600 <checkAktifCalisma+0x15ac>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00f      	beq.n	80063bc <checkAktifCalisma+0x1368>
 800639c:	4b99      	ldr	r3, [pc, #612]	; (8006604 <checkAktifCalisma+0x15b0>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	f083 0301 	eor.w	r3, r3, #1
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d008      	beq.n	80063bc <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 80063aa:	4b94      	ldr	r3, [pc, #592]	; (80065fc <checkAktifCalisma+0x15a8>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80063b0:	4b95      	ldr	r3, [pc, #596]	; (8006608 <checkAktifCalisma+0x15b4>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80063b6:	2002      	movs	r0, #2
 80063b8:	f7fe fc7a 	bl	8004cb0 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80063bc:	4b93      	ldr	r3, [pc, #588]	; (800660c <checkAktifCalisma+0x15b8>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d11e      	bne.n	8006402 <checkAktifCalisma+0x13ae>
 80063c4:	4b92      	ldr	r3, [pc, #584]	; (8006610 <checkAktifCalisma+0x15bc>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d11a      	bne.n	8006402 <checkAktifCalisma+0x13ae>
 80063cc:	4b91      	ldr	r3, [pc, #580]	; (8006614 <checkAktifCalisma+0x15c0>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d016      	beq.n	8006402 <checkAktifCalisma+0x13ae>
 80063d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063d8:	488f      	ldr	r0, [pc, #572]	; (8006618 <checkAktifCalisma+0x15c4>)
 80063da:	f003 f89f 	bl	800951c <HAL_GPIO_ReadPin>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d10e      	bne.n	8006402 <checkAktifCalisma+0x13ae>
			hataVar=1;
 80063e4:	4b8d      	ldr	r3, [pc, #564]	; (800661c <checkAktifCalisma+0x15c8>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80063ea:	2003      	movs	r0, #3
 80063ec:	f7fa fcde 	bl	8000dac <hataKoduLcdGoster>
			hata2EEPROM(3);
 80063f0:	2003      	movs	r0, #3
 80063f2:	f7fa fc81 	bl	8000cf8 <hata2EEPROM>
			convertAndSendData();
 80063f6:	f001 fb05 	bl	8007a04 <convertAndSendData>
			basinchatasi=1;
 80063fa:	4b89      	ldr	r3, [pc, #548]	; (8006620 <checkAktifCalisma+0x15cc>)
 80063fc:	2201      	movs	r2, #1
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	e015      	b.n	800642e <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006402:	4b87      	ldr	r3, [pc, #540]	; (8006620 <checkAktifCalisma+0x15cc>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d011      	beq.n	800642e <checkAktifCalisma+0x13da>
 800640a:	4b80      	ldr	r3, [pc, #512]	; (800660c <checkAktifCalisma+0x15b8>)
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d10d      	bne.n	800642e <checkAktifCalisma+0x13da>
 8006412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006416:	4883      	ldr	r0, [pc, #524]	; (8006624 <checkAktifCalisma+0x15d0>)
 8006418:	f003 f880 	bl	800951c <HAL_GPIO_ReadPin>
 800641c:	4603      	mov	r3, r0
 800641e:	2b01      	cmp	r3, #1
 8006420:	d105      	bne.n	800642e <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8006422:	4b7f      	ldr	r3, [pc, #508]	; (8006620 <checkAktifCalisma+0x15cc>)
 8006424:	2200      	movs	r2, #0
 8006426:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006428:	2003      	movs	r0, #3
 800642a:	f7fe fc41 	bl	8004cb0 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800642e:	4b7e      	ldr	r3, [pc, #504]	; (8006628 <checkAktifCalisma+0x15d4>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <checkAktifCalisma+0x13ea>
 8006436:	4b7d      	ldr	r3, [pc, #500]	; (800662c <checkAktifCalisma+0x15d8>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d01e      	beq.n	800647c <checkAktifCalisma+0x1428>
 800643e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006442:	487b      	ldr	r0, [pc, #492]	; (8006630 <checkAktifCalisma+0x15dc>)
 8006444:	f003 f86a 	bl	800951c <HAL_GPIO_ReadPin>
 8006448:	4603      	mov	r3, r0
 800644a:	2b01      	cmp	r3, #1
 800644c:	d116      	bne.n	800647c <checkAktifCalisma+0x1428>
 800644e:	4b79      	ldr	r3, [pc, #484]	; (8006634 <checkAktifCalisma+0x15e0>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d003      	beq.n	800645e <checkAktifCalisma+0x140a>
 8006456:	4b77      	ldr	r3, [pc, #476]	; (8006634 <checkAktifCalisma+0x15e0>)
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2b03      	cmp	r3, #3
 800645c:	d10e      	bne.n	800647c <checkAktifCalisma+0x1428>
			hataVar=1;
 800645e:	4b6f      	ldr	r3, [pc, #444]	; (800661c <checkAktifCalisma+0x15c8>)
 8006460:	2201      	movs	r2, #1
 8006462:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006464:	2004      	movs	r0, #4
 8006466:	f7fa fca1 	bl	8000dac <hataKoduLcdGoster>
			hata2EEPROM(4);
 800646a:	2004      	movs	r0, #4
 800646c:	f7fa fc44 	bl	8000cf8 <hata2EEPROM>
			convertAndSendData();
 8006470:	f001 fac8 	bl	8007a04 <convertAndSendData>
			katkapisivicihatasi=1;
 8006474:	4b70      	ldr	r3, [pc, #448]	; (8006638 <checkAktifCalisma+0x15e4>)
 8006476:	2201      	movs	r2, #1
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	e01f      	b.n	80064bc <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800647c:	4b6e      	ldr	r3, [pc, #440]	; (8006638 <checkAktifCalisma+0x15e4>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01b      	beq.n	80064bc <checkAktifCalisma+0x1468>
 8006484:	4b6d      	ldr	r3, [pc, #436]	; (800663c <checkAktifCalisma+0x15e8>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d017      	beq.n	80064bc <checkAktifCalisma+0x1468>
 800648c:	4b66      	ldr	r3, [pc, #408]	; (8006628 <checkAktifCalisma+0x15d4>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	f083 0301 	eor.w	r3, r3, #1
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d010      	beq.n	80064bc <checkAktifCalisma+0x1468>
 800649a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800649e:	4864      	ldr	r0, [pc, #400]	; (8006630 <checkAktifCalisma+0x15dc>)
 80064a0:	f003 f83c 	bl	800951c <HAL_GPIO_ReadPin>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d108      	bne.n	80064bc <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 80064aa:	4b63      	ldr	r3, [pc, #396]	; (8006638 <checkAktifCalisma+0x15e4>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80064b0:	4b5e      	ldr	r3, [pc, #376]	; (800662c <checkAktifCalisma+0x15d8>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80064b6:	2004      	movs	r0, #4
 80064b8:	f7fe fbfa 	bl	8004cb0 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80064bc:	4b5a      	ldr	r3, [pc, #360]	; (8006628 <checkAktifCalisma+0x15d4>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d103      	bne.n	80064cc <checkAktifCalisma+0x1478>
 80064c4:	4b5e      	ldr	r3, [pc, #376]	; (8006640 <checkAktifCalisma+0x15ec>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01e      	beq.n	800650a <checkAktifCalisma+0x14b6>
 80064cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064d0:	4857      	ldr	r0, [pc, #348]	; (8006630 <checkAktifCalisma+0x15dc>)
 80064d2:	f003 f823 	bl	800951c <HAL_GPIO_ReadPin>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d116      	bne.n	800650a <checkAktifCalisma+0x14b6>
 80064dc:	4b55      	ldr	r3, [pc, #340]	; (8006634 <checkAktifCalisma+0x15e0>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d003      	beq.n	80064ec <checkAktifCalisma+0x1498>
 80064e4:	4b53      	ldr	r3, [pc, #332]	; (8006634 <checkAktifCalisma+0x15e0>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d10e      	bne.n	800650a <checkAktifCalisma+0x14b6>
			hataVar=1;
 80064ec:	4b4b      	ldr	r3, [pc, #300]	; (800661c <checkAktifCalisma+0x15c8>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80064f2:	2005      	movs	r0, #5
 80064f4:	f7fa fc5a 	bl	8000dac <hataKoduLcdGoster>
			hata2EEPROM(5);
 80064f8:	2005      	movs	r0, #5
 80064fa:	f7fa fbfd 	bl	8000cf8 <hata2EEPROM>
			convertAndSendData();
 80064fe:	f001 fa81 	bl	8007a04 <convertAndSendData>
			tablakapisivicihatasi=1;
 8006502:	4b50      	ldr	r3, [pc, #320]	; (8006644 <checkAktifCalisma+0x15f0>)
 8006504:	2201      	movs	r2, #1
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	e023      	b.n	8006552 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 800650a:	4b4e      	ldr	r3, [pc, #312]	; (8006644 <checkAktifCalisma+0x15f0>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d01f      	beq.n	8006552 <checkAktifCalisma+0x14fe>
 8006512:	4b4a      	ldr	r3, [pc, #296]	; (800663c <checkAktifCalisma+0x15e8>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d01b      	beq.n	8006552 <checkAktifCalisma+0x14fe>
 800651a:	4b43      	ldr	r3, [pc, #268]	; (8006628 <checkAktifCalisma+0x15d4>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	f083 0301 	eor.w	r3, r3, #1
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d014      	beq.n	8006552 <checkAktifCalisma+0x14fe>
 8006528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800652c:	4840      	ldr	r0, [pc, #256]	; (8006630 <checkAktifCalisma+0x15dc>)
 800652e:	f002 fff5 	bl	800951c <HAL_GPIO_ReadPin>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10c      	bne.n	8006552 <checkAktifCalisma+0x14fe>
 8006538:	4b40      	ldr	r3, [pc, #256]	; (800663c <checkAktifCalisma+0x15e8>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006540:	4b40      	ldr	r3, [pc, #256]	; (8006644 <checkAktifCalisma+0x15f0>)
 8006542:	2200      	movs	r2, #0
 8006544:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006546:	4b3e      	ldr	r3, [pc, #248]	; (8006640 <checkAktifCalisma+0x15ec>)
 8006548:	2200      	movs	r2, #0
 800654a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 800654c:	2005      	movs	r0, #5
 800654e:	f7fe fbaf 	bl	8004cb0 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006552:	4b30      	ldr	r3, [pc, #192]	; (8006614 <checkAktifCalisma+0x15c0>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d107      	bne.n	800656a <checkAktifCalisma+0x1516>
 800655a:	4b2a      	ldr	r3, [pc, #168]	; (8006604 <checkAktifCalisma+0x15b0>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d103      	bne.n	800656a <checkAktifCalisma+0x1516>
 8006562:	4b39      	ldr	r3, [pc, #228]	; (8006648 <checkAktifCalisma+0x15f4>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800656a:	4b38      	ldr	r3, [pc, #224]	; (800664c <checkAktifCalisma+0x15f8>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4b38      	ldr	r3, [pc, #224]	; (8006650 <checkAktifCalisma+0x15fc>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	4a37      	ldr	r2, [pc, #220]	; (8006654 <checkAktifCalisma+0x1600>)
 8006576:	7812      	ldrb	r2, [r2, #0]
 8006578:	4293      	cmp	r3, r2
 800657a:	d30d      	bcc.n	8006598 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 800657c:	4b27      	ldr	r3, [pc, #156]	; (800661c <checkAktifCalisma+0x15c8>)
 800657e:	2201      	movs	r2, #1
 8006580:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006582:	2006      	movs	r0, #6
 8006584:	f7fa fc12 	bl	8000dac <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006588:	2006      	movs	r0, #6
 800658a:	f7fa fbb5 	bl	8000cf8 <hata2EEPROM>
			  	convertAndSendData();
 800658e:	f001 fa39 	bl	8007a04 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006592:	4b31      	ldr	r3, [pc, #196]	; (8006658 <checkAktifCalisma+0x1604>)
 8006594:	2201      	movs	r2, #1
 8006596:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006598:	4b2f      	ldr	r3, [pc, #188]	; (8006658 <checkAktifCalisma+0x1604>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d013      	beq.n	80065c8 <checkAktifCalisma+0x1574>
 80065a0:	2108      	movs	r1, #8
 80065a2:	4823      	ldr	r0, [pc, #140]	; (8006630 <checkAktifCalisma+0x15dc>)
 80065a4:	f002 ffba 	bl	800951c <HAL_GPIO_ReadPin>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00c      	beq.n	80065c8 <checkAktifCalisma+0x1574>
 80065ae:	4b1e      	ldr	r3, [pc, #120]	; (8006628 <checkAktifCalisma+0x15d4>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	f083 0301 	eor.w	r3, r3, #1
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80065bc:	4b26      	ldr	r3, [pc, #152]	; (8006658 <checkAktifCalisma+0x1604>)
 80065be:	2200      	movs	r2, #0
 80065c0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80065c2:	2006      	movs	r0, #6
 80065c4:	f7fe fb74 	bl	8004cb0 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80065c8:	4b24      	ldr	r3, [pc, #144]	; (800665c <checkAktifCalisma+0x1608>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10b      	bne.n	80065e8 <checkAktifCalisma+0x1594>
 80065d0:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <checkAktifCalisma+0x15b0>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d107      	bne.n	80065e8 <checkAktifCalisma+0x1594>
 80065d8:	4b21      	ldr	r3, [pc, #132]	; (8006660 <checkAktifCalisma+0x160c>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d103      	bne.n	80065e8 <checkAktifCalisma+0x1594>
 80065e0:	4b19      	ldr	r3, [pc, #100]	; (8006648 <checkAktifCalisma+0x15f4>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d03f      	beq.n	8006668 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80065e8:	4b1e      	ldr	r3, [pc, #120]	; (8006664 <checkAktifCalisma+0x1610>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80065ee:	4b0f      	ldr	r3, [pc, #60]	; (800662c <checkAktifCalisma+0x15d8>)
 80065f0:	2201      	movs	r2, #1
 80065f2:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80065f4:	4b12      	ldr	r3, [pc, #72]	; (8006640 <checkAktifCalisma+0x15ec>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	701a      	strb	r2, [r3, #0]
 80065fa:	e03c      	b.n	8006676 <checkAktifCalisma+0x1622>
 80065fc:	20000271 	.word	0x20000271
 8006600:	20000277 	.word	0x20000277
 8006604:	20000258 	.word	0x20000258
 8006608:	20000281 	.word	0x20000281
 800660c:	20000223 	.word	0x20000223
 8006610:	20000227 	.word	0x20000227
 8006614:	20000274 	.word	0x20000274
 8006618:	40011000 	.word	0x40011000
 800661c:	20000275 	.word	0x20000275
 8006620:	2000027e 	.word	0x2000027e
 8006624:	40010c00 	.word	0x40010c00
 8006628:	2000026e 	.word	0x2000026e
 800662c:	20000282 	.word	0x20000282
 8006630:	40010800 	.word	0x40010800
 8006634:	20000228 	.word	0x20000228
 8006638:	2000027f 	.word	0x2000027f
 800663c:	20000262 	.word	0x20000262
 8006640:	20000283 	.word	0x20000283
 8006644:	20000280 	.word	0x20000280
 8006648:	20000257 	.word	0x20000257
 800664c:	200001fc 	.word	0x200001fc
 8006650:	20000210 	.word	0x20000210
 8006654:	20000238 	.word	0x20000238
 8006658:	2000026f 	.word	0x2000026f
 800665c:	20000255 	.word	0x20000255
 8006660:	20000256 	.word	0x20000256
 8006664:	20000276 	.word	0x20000276
		} else {
			makineCalisiyor=1;
 8006668:	4b1e      	ldr	r3, [pc, #120]	; (80066e4 <checkAktifCalisma+0x1690>)
 800666a:	2201      	movs	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800666e:	4b1e      	ldr	r3, [pc, #120]	; (80066e8 <checkAktifCalisma+0x1694>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1e      	ldr	r2, [pc, #120]	; (80066ec <checkAktifCalisma+0x1698>)
 8006674:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006676:	4b1e      	ldr	r3, [pc, #120]	; (80066f0 <checkAktifCalisma+0x169c>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d02f      	beq.n	80066de <checkAktifCalisma+0x168a>
 800667e:	4b1d      	ldr	r3, [pc, #116]	; (80066f4 <checkAktifCalisma+0x16a0>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	f083 0301 	eor.w	r3, r3, #1
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	d028      	beq.n	80066de <checkAktifCalisma+0x168a>
 800668c:	4b1a      	ldr	r3, [pc, #104]	; (80066f8 <checkAktifCalisma+0x16a4>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	f083 0301 	eor.w	r3, r3, #1
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d021      	beq.n	80066de <checkAktifCalisma+0x168a>
 800669a:	4b18      	ldr	r3, [pc, #96]	; (80066fc <checkAktifCalisma+0x16a8>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	f083 0301 	eor.w	r3, r3, #1
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01a      	beq.n	80066de <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80066a8:	4b15      	ldr	r3, [pc, #84]	; (8006700 <checkAktifCalisma+0x16ac>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	f083 0301 	eor.w	r3, r3, #1
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d013      	beq.n	80066de <checkAktifCalisma+0x168a>
 80066b6:	4b13      	ldr	r3, [pc, #76]	; (8006704 <checkAktifCalisma+0x16b0>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	f083 0301 	eor.w	r3, r3, #1
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00c      	beq.n	80066de <checkAktifCalisma+0x168a>
 80066c4:	4b10      	ldr	r3, [pc, #64]	; (8006708 <checkAktifCalisma+0x16b4>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	f083 0301 	eor.w	r3, r3, #1
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <checkAktifCalisma+0x168a>
			hataVar=0;
 80066d2:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <checkAktifCalisma+0x169c>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80066d8:	2007      	movs	r0, #7
 80066da:	f7fe fae9 	bl	8004cb0 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80066de:	bf00      	nop
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000276 	.word	0x20000276
 80066e8:	200001fc 	.word	0x200001fc
 80066ec:	20000210 	.word	0x20000210
 80066f0:	20000275 	.word	0x20000275
 80066f4:	20000270 	.word	0x20000270
 80066f8:	20000271 	.word	0x20000271
 80066fc:	2000027e 	.word	0x2000027e
 8006700:	2000027f 	.word	0x2000027f
 8006704:	20000280 	.word	0x20000280
 8006708:	2000026f 	.word	0x2000026f

0800670c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006710:	4b8b      	ldr	r3, [pc, #556]	; (8006940 <checkDemoModCalisma+0x234>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b01      	cmp	r3, #1
 8006716:	f040 8229 	bne.w	8006b6c <checkDemoModCalisma+0x460>
 800671a:	4b8a      	ldr	r3, [pc, #552]	; (8006944 <checkDemoModCalisma+0x238>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 8224 	beq.w	8006b6c <checkDemoModCalisma+0x460>
 8006724:	4b88      	ldr	r3, [pc, #544]	; (8006948 <checkDemoModCalisma+0x23c>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f040 821f 	bne.w	8006b6c <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800672e:	2102      	movs	r1, #2
 8006730:	4886      	ldr	r0, [pc, #536]	; (800694c <checkDemoModCalisma+0x240>)
 8006732:	f002 fef3 	bl	800951c <HAL_GPIO_ReadPin>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d11d      	bne.n	8006778 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 800673c:	4b84      	ldr	r3, [pc, #528]	; (8006950 <checkDemoModCalisma+0x244>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	f083 0301 	eor.w	r3, r3, #1
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d016      	beq.n	8006778 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800674a:	4b82      	ldr	r3, [pc, #520]	; (8006954 <checkDemoModCalisma+0x248>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	f083 0301 	eor.w	r3, r3, #1
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00f      	beq.n	8006778 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006758:	4b7f      	ldr	r3, [pc, #508]	; (8006958 <checkDemoModCalisma+0x24c>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	f083 0301 	eor.w	r3, r3, #1
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d008      	beq.n	8006778 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006766:	2201      	movs	r2, #1
 8006768:	2104      	movs	r1, #4
 800676a:	487c      	ldr	r0, [pc, #496]	; (800695c <checkDemoModCalisma+0x250>)
 800676c:	f002 feed 	bl	800954a <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006770:	4b7b      	ldr	r3, [pc, #492]	; (8006960 <checkDemoModCalisma+0x254>)
 8006772:	2201      	movs	r2, #1
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	e00e      	b.n	8006796 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006778:	2102      	movs	r1, #2
 800677a:	4874      	ldr	r0, [pc, #464]	; (800694c <checkDemoModCalisma+0x240>)
 800677c:	f002 fece 	bl	800951c <HAL_GPIO_ReadPin>
 8006780:	4603      	mov	r3, r0
 8006782:	2b01      	cmp	r3, #1
 8006784:	d107      	bne.n	8006796 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006786:	2200      	movs	r2, #0
 8006788:	2104      	movs	r1, #4
 800678a:	4874      	ldr	r0, [pc, #464]	; (800695c <checkDemoModCalisma+0x250>)
 800678c:	f002 fedd 	bl	800954a <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006790:	4b73      	ldr	r3, [pc, #460]	; (8006960 <checkDemoModCalisma+0x254>)
 8006792:	2200      	movs	r2, #0
 8006794:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006796:	4b72      	ldr	r3, [pc, #456]	; (8006960 <checkDemoModCalisma+0x254>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10b      	bne.n	80067b6 <checkDemoModCalisma+0xaa>
 800679e:	4b6d      	ldr	r3, [pc, #436]	; (8006954 <checkDemoModCalisma+0x248>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d107      	bne.n	80067b6 <checkDemoModCalisma+0xaa>
 80067a6:	4b6c      	ldr	r3, [pc, #432]	; (8006958 <checkDemoModCalisma+0x24c>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <checkDemoModCalisma+0xaa>
 80067ae:	4b68      	ldr	r3, [pc, #416]	; (8006950 <checkDemoModCalisma+0x244>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00c      	beq.n	80067d0 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80067b6:	2201      	movs	r2, #1
 80067b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067bc:	4867      	ldr	r0, [pc, #412]	; (800695c <checkDemoModCalisma+0x250>)
 80067be:	f002 fec4 	bl	800954a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80067c2:	2201      	movs	r2, #1
 80067c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067c8:	4864      	ldr	r0, [pc, #400]	; (800695c <checkDemoModCalisma+0x250>)
 80067ca:	f002 febe 	bl	800954a <HAL_GPIO_WritePin>
 80067ce:	e00b      	b.n	80067e8 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80067d0:	2200      	movs	r2, #0
 80067d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067d6:	4861      	ldr	r0, [pc, #388]	; (800695c <checkDemoModCalisma+0x250>)
 80067d8:	f002 feb7 	bl	800954a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80067dc:	2200      	movs	r2, #0
 80067de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067e2:	485e      	ldr	r0, [pc, #376]	; (800695c <checkDemoModCalisma+0x250>)
 80067e4:	f002 feb1 	bl	800954a <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80067e8:	2102      	movs	r1, #2
 80067ea:	4858      	ldr	r0, [pc, #352]	; (800694c <checkDemoModCalisma+0x240>)
 80067ec:	f002 fe96 	bl	800951c <HAL_GPIO_ReadPin>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d10d      	bne.n	8006812 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80067f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067fa:	4854      	ldr	r0, [pc, #336]	; (800694c <checkDemoModCalisma+0x240>)
 80067fc:	f002 fe8e 	bl	800951c <HAL_GPIO_ReadPin>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d105      	bne.n	8006812 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006806:	4b56      	ldr	r3, [pc, #344]	; (8006960 <checkDemoModCalisma+0x254>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	f083 0301 	eor.w	r3, r3, #1
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006812:	2102      	movs	r1, #2
 8006814:	484d      	ldr	r0, [pc, #308]	; (800694c <checkDemoModCalisma+0x240>)
 8006816:	f002 fe81 	bl	800951c <HAL_GPIO_ReadPin>
 800681a:	4603      	mov	r3, r0
 800681c:	2b01      	cmp	r3, #1
 800681e:	d125      	bne.n	800686c <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006824:	4849      	ldr	r0, [pc, #292]	; (800694c <checkDemoModCalisma+0x240>)
 8006826:	f002 fe79 	bl	800951c <HAL_GPIO_ReadPin>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d11d      	bne.n	800686c <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006830:	4b4b      	ldr	r3, [pc, #300]	; (8006960 <checkDemoModCalisma+0x254>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	f083 0301 	eor.w	r3, r3, #1
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d016      	beq.n	800686c <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800683e:	4b44      	ldr	r3, [pc, #272]	; (8006950 <checkDemoModCalisma+0x244>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	f083 0301 	eor.w	r3, r3, #1
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00f      	beq.n	800686c <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 800684c:	4b42      	ldr	r3, [pc, #264]	; (8006958 <checkDemoModCalisma+0x24c>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	f083 0301 	eor.w	r3, r3, #1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d008      	beq.n	800686c <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800685a:	2201      	movs	r2, #1
 800685c:	2120      	movs	r1, #32
 800685e:	483b      	ldr	r0, [pc, #236]	; (800694c <checkDemoModCalisma+0x240>)
 8006860:	f002 fe73 	bl	800954a <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006864:	4b3b      	ldr	r3, [pc, #236]	; (8006954 <checkDemoModCalisma+0x248>)
 8006866:	2201      	movs	r2, #1
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	e007      	b.n	800687c <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800686c:	2200      	movs	r2, #0
 800686e:	2120      	movs	r1, #32
 8006870:	4836      	ldr	r0, [pc, #216]	; (800694c <checkDemoModCalisma+0x240>)
 8006872:	f002 fe6a 	bl	800954a <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006876:	4b37      	ldr	r3, [pc, #220]	; (8006954 <checkDemoModCalisma+0x248>)
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800687c:	2102      	movs	r1, #2
 800687e:	4833      	ldr	r0, [pc, #204]	; (800694c <checkDemoModCalisma+0x240>)
 8006880:	f002 fe4c 	bl	800951c <HAL_GPIO_ReadPin>
 8006884:	4603      	mov	r3, r0
 8006886:	2b01      	cmp	r3, #1
 8006888:	d125      	bne.n	80068d6 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800688a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800688e:	482f      	ldr	r0, [pc, #188]	; (800694c <checkDemoModCalisma+0x240>)
 8006890:	f002 fe44 	bl	800951c <HAL_GPIO_ReadPin>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d11d      	bne.n	80068d6 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800689a:	4b31      	ldr	r3, [pc, #196]	; (8006960 <checkDemoModCalisma+0x254>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	f083 0301 	eor.w	r3, r3, #1
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d016      	beq.n	80068d6 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80068a8:	4b2a      	ldr	r3, [pc, #168]	; (8006954 <checkDemoModCalisma+0x248>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	f083 0301 	eor.w	r3, r3, #1
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00f      	beq.n	80068d6 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80068b6:	4b26      	ldr	r3, [pc, #152]	; (8006950 <checkDemoModCalisma+0x244>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	f083 0301 	eor.w	r3, r3, #1
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d008      	beq.n	80068d6 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80068c4:	2201      	movs	r2, #1
 80068c6:	2110      	movs	r1, #16
 80068c8:	4820      	ldr	r0, [pc, #128]	; (800694c <checkDemoModCalisma+0x240>)
 80068ca:	f002 fe3e 	bl	800954a <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80068ce:	4b22      	ldr	r3, [pc, #136]	; (8006958 <checkDemoModCalisma+0x24c>)
 80068d0:	2201      	movs	r2, #1
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	e007      	b.n	80068e6 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80068d6:	2200      	movs	r2, #0
 80068d8:	2110      	movs	r1, #16
 80068da:	481c      	ldr	r0, [pc, #112]	; (800694c <checkDemoModCalisma+0x240>)
 80068dc:	f002 fe35 	bl	800954a <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80068e0:	4b1d      	ldr	r3, [pc, #116]	; (8006958 <checkDemoModCalisma+0x24c>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80068e6:	2104      	movs	r1, #4
 80068e8:	4818      	ldr	r0, [pc, #96]	; (800694c <checkDemoModCalisma+0x240>)
 80068ea:	f002 fe17 	bl	800951c <HAL_GPIO_ReadPin>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d139      	bne.n	8006968 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80068f4:	4b1a      	ldr	r3, [pc, #104]	; (8006960 <checkDemoModCalisma+0x254>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	f083 0301 	eor.w	r3, r3, #1
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d032      	beq.n	8006968 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8006902:	4b15      	ldr	r3, [pc, #84]	; (8006958 <checkDemoModCalisma+0x24c>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	f083 0301 	eor.w	r3, r3, #1
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d02b      	beq.n	8006968 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006910:	4b10      	ldr	r3, [pc, #64]	; (8006954 <checkDemoModCalisma+0x248>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	f083 0301 	eor.w	r3, r3, #1
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d024      	beq.n	8006968 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800691e:	2201      	movs	r2, #1
 8006920:	2102      	movs	r1, #2
 8006922:	480e      	ldr	r0, [pc, #56]	; (800695c <checkDemoModCalisma+0x250>)
 8006924:	f002 fe11 	bl	800954a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006928:	2201      	movs	r2, #1
 800692a:	2101      	movs	r1, #1
 800692c:	480b      	ldr	r0, [pc, #44]	; (800695c <checkDemoModCalisma+0x250>)
 800692e:	f002 fe0c 	bl	800954a <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8006932:	4b07      	ldr	r3, [pc, #28]	; (8006950 <checkDemoModCalisma+0x244>)
 8006934:	2201      	movs	r2, #1
 8006936:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006938:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <checkDemoModCalisma+0x258>)
 800693a:	2201      	movs	r2, #1
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	e027      	b.n	8006990 <checkDemoModCalisma+0x284>
 8006940:	2000023e 	.word	0x2000023e
 8006944:	20000272 	.word	0x20000272
 8006948:	2000023d 	.word	0x2000023d
 800694c:	40011000 	.word	0x40011000
 8006950:	20000279 	.word	0x20000279
 8006954:	2000027a 	.word	0x2000027a
 8006958:	2000027b 	.word	0x2000027b
 800695c:	40010c00 	.word	0x40010c00
 8006960:	20000278 	.word	0x20000278
 8006964:	2000025e 	.word	0x2000025e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006968:	2104      	movs	r1, #4
 800696a:	48a0      	ldr	r0, [pc, #640]	; (8006bec <checkDemoModCalisma+0x4e0>)
 800696c:	f002 fdd6 	bl	800951c <HAL_GPIO_ReadPin>
 8006970:	4603      	mov	r3, r0
 8006972:	2b01      	cmp	r3, #1
 8006974:	d10c      	bne.n	8006990 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006976:	2200      	movs	r2, #0
 8006978:	2102      	movs	r1, #2
 800697a:	489d      	ldr	r0, [pc, #628]	; (8006bf0 <checkDemoModCalisma+0x4e4>)
 800697c:	f002 fde5 	bl	800954a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006980:	2200      	movs	r2, #0
 8006982:	2101      	movs	r1, #1
 8006984:	489a      	ldr	r0, [pc, #616]	; (8006bf0 <checkDemoModCalisma+0x4e4>)
 8006986:	f002 fde0 	bl	800954a <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800698a:	4b9a      	ldr	r3, [pc, #616]	; (8006bf4 <checkDemoModCalisma+0x4e8>)
 800698c:	2200      	movs	r2, #0
 800698e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006990:	2104      	movs	r1, #4
 8006992:	4896      	ldr	r0, [pc, #600]	; (8006bec <checkDemoModCalisma+0x4e0>)
 8006994:	f002 fdc2 	bl	800951c <HAL_GPIO_ReadPin>
 8006998:	4603      	mov	r3, r0
 800699a:	2b01      	cmp	r3, #1
 800699c:	d10d      	bne.n	80069ba <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800699e:	2201      	movs	r2, #1
 80069a0:	2180      	movs	r1, #128	; 0x80
 80069a2:	4895      	ldr	r0, [pc, #596]	; (8006bf8 <checkDemoModCalisma+0x4ec>)
 80069a4:	f002 fdd1 	bl	800954a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80069a8:	2201      	movs	r2, #1
 80069aa:	2120      	movs	r1, #32
 80069ac:	4892      	ldr	r0, [pc, #584]	; (8006bf8 <checkDemoModCalisma+0x4ec>)
 80069ae:	f002 fdcc 	bl	800954a <HAL_GPIO_WritePin>
			timer3 = millis;
 80069b2:	4b92      	ldr	r3, [pc, #584]	; (8006bfc <checkDemoModCalisma+0x4f0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a92      	ldr	r2, [pc, #584]	; (8006c00 <checkDemoModCalisma+0x4f4>)
 80069b8:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80069ba:	4b90      	ldr	r3, [pc, #576]	; (8006bfc <checkDemoModCalisma+0x4f0>)
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	4b90      	ldr	r3, [pc, #576]	; (8006c00 <checkDemoModCalisma+0x4f4>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d909      	bls.n	80069dc <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80069c8:	2200      	movs	r2, #0
 80069ca:	2180      	movs	r1, #128	; 0x80
 80069cc:	488a      	ldr	r0, [pc, #552]	; (8006bf8 <checkDemoModCalisma+0x4ec>)
 80069ce:	f002 fdbc 	bl	800954a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80069d2:	2200      	movs	r2, #0
 80069d4:	2120      	movs	r1, #32
 80069d6:	4888      	ldr	r0, [pc, #544]	; (8006bf8 <checkDemoModCalisma+0x4ec>)
 80069d8:	f002 fdb7 	bl	800954a <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80069dc:	2102      	movs	r1, #2
 80069de:	4883      	ldr	r0, [pc, #524]	; (8006bec <checkDemoModCalisma+0x4e0>)
 80069e0:	f002 fd9c 	bl	800951c <HAL_GPIO_ReadPin>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d108      	bne.n	80069fc <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80069ea:	2201      	movs	r2, #1
 80069ec:	2140      	movs	r1, #64	; 0x40
 80069ee:	4882      	ldr	r0, [pc, #520]	; (8006bf8 <checkDemoModCalisma+0x4ec>)
 80069f0:	f002 fdab 	bl	800954a <HAL_GPIO_WritePin>
			timer3 = millis;
 80069f4:	4b81      	ldr	r3, [pc, #516]	; (8006bfc <checkDemoModCalisma+0x4f0>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a81      	ldr	r2, [pc, #516]	; (8006c00 <checkDemoModCalisma+0x4f4>)
 80069fa:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80069fc:	4b7f      	ldr	r3, [pc, #508]	; (8006bfc <checkDemoModCalisma+0x4f0>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	4b7f      	ldr	r3, [pc, #508]	; (8006c00 <checkDemoModCalisma+0x4f4>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d904      	bls.n	8006a14 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2140      	movs	r1, #64	; 0x40
 8006a0e:	487a      	ldr	r0, [pc, #488]	; (8006bf8 <checkDemoModCalisma+0x4ec>)
 8006a10:	f002 fd9b 	bl	800954a <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006a14:	4b7b      	ldr	r3, [pc, #492]	; (8006c04 <checkDemoModCalisma+0x4f8>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d058      	beq.n	8006ace <checkDemoModCalisma+0x3c2>
 8006a1c:	4b7a      	ldr	r3, [pc, #488]	; (8006c08 <checkDemoModCalisma+0x4fc>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d054      	beq.n	8006ace <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006a24:	4b79      	ldr	r3, [pc, #484]	; (8006c0c <checkDemoModCalisma+0x500>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	4b77      	ldr	r3, [pc, #476]	; (8006c0c <checkDemoModCalisma+0x500>)
 8006a2e:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006a30:	4b76      	ldr	r3, [pc, #472]	; (8006c0c <checkDemoModCalisma+0x500>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b09      	cmp	r3, #9
 8006a36:	d908      	bls.n	8006a4a <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006a38:	4b74      	ldr	r3, [pc, #464]	; (8006c0c <checkDemoModCalisma+0x500>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006a3e:	4b74      	ldr	r3, [pc, #464]	; (8006c10 <checkDemoModCalisma+0x504>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	3301      	adds	r3, #1
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	4b72      	ldr	r3, [pc, #456]	; (8006c10 <checkDemoModCalisma+0x504>)
 8006a48:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006a4a:	4b71      	ldr	r3, [pc, #452]	; (8006c10 <checkDemoModCalisma+0x504>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b09      	cmp	r3, #9
 8006a50:	d908      	bls.n	8006a64 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8006a52:	4b6f      	ldr	r3, [pc, #444]	; (8006c10 <checkDemoModCalisma+0x504>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006a58:	4b6e      	ldr	r3, [pc, #440]	; (8006c14 <checkDemoModCalisma+0x508>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	4b6c      	ldr	r3, [pc, #432]	; (8006c14 <checkDemoModCalisma+0x508>)
 8006a62:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006a64:	4b6b      	ldr	r3, [pc, #428]	; (8006c14 <checkDemoModCalisma+0x508>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b09      	cmp	r3, #9
 8006a6a:	d908      	bls.n	8006a7e <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006a6c:	4b69      	ldr	r3, [pc, #420]	; (8006c14 <checkDemoModCalisma+0x508>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006a72:	4b69      	ldr	r3, [pc, #420]	; (8006c18 <checkDemoModCalisma+0x50c>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	3301      	adds	r3, #1
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	4b67      	ldr	r3, [pc, #412]	; (8006c18 <checkDemoModCalisma+0x50c>)
 8006a7c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006a7e:	4b66      	ldr	r3, [pc, #408]	; (8006c18 <checkDemoModCalisma+0x50c>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b09      	cmp	r3, #9
 8006a84:	d908      	bls.n	8006a98 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8006a86:	4b64      	ldr	r3, [pc, #400]	; (8006c18 <checkDemoModCalisma+0x50c>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006a8c:	4b63      	ldr	r3, [pc, #396]	; (8006c1c <checkDemoModCalisma+0x510>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	3301      	adds	r3, #1
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	4b61      	ldr	r3, [pc, #388]	; (8006c1c <checkDemoModCalisma+0x510>)
 8006a96:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006a98:	4b60      	ldr	r3, [pc, #384]	; (8006c1c <checkDemoModCalisma+0x510>)
 8006a9a:	781a      	ldrb	r2, [r3, #0]
 8006a9c:	4b60      	ldr	r3, [pc, #384]	; (8006c20 <checkDemoModCalisma+0x514>)
 8006a9e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006aa2:	4b5d      	ldr	r3, [pc, #372]	; (8006c18 <checkDemoModCalisma+0x50c>)
 8006aa4:	781a      	ldrb	r2, [r3, #0]
 8006aa6:	4b5e      	ldr	r3, [pc, #376]	; (8006c20 <checkDemoModCalisma+0x514>)
 8006aa8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006aaa:	4b5a      	ldr	r3, [pc, #360]	; (8006c14 <checkDemoModCalisma+0x508>)
 8006aac:	781a      	ldrb	r2, [r3, #0]
 8006aae:	4b5c      	ldr	r3, [pc, #368]	; (8006c20 <checkDemoModCalisma+0x514>)
 8006ab0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006ab2:	4b57      	ldr	r3, [pc, #348]	; (8006c10 <checkDemoModCalisma+0x504>)
 8006ab4:	781a      	ldrb	r2, [r3, #0]
 8006ab6:	4b5a      	ldr	r3, [pc, #360]	; (8006c20 <checkDemoModCalisma+0x514>)
 8006ab8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006aba:	4b54      	ldr	r3, [pc, #336]	; (8006c0c <checkDemoModCalisma+0x500>)
 8006abc:	781a      	ldrb	r2, [r3, #0]
 8006abe:	4b58      	ldr	r3, [pc, #352]	; (8006c20 <checkDemoModCalisma+0x514>)
 8006ac0:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006ac2:	4b58      	ldr	r3, [pc, #352]	; (8006c24 <checkDemoModCalisma+0x518>)
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006ac8:	4b4f      	ldr	r3, [pc, #316]	; (8006c08 <checkDemoModCalisma+0x4fc>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006ace:	4b56      	ldr	r3, [pc, #344]	; (8006c28 <checkDemoModCalisma+0x51c>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f040 8087 	bne.w	8006be6 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006ad8:	4a54      	ldr	r2, [pc, #336]	; (8006c2c <checkDemoModCalisma+0x520>)
 8006ada:	2101      	movs	r1, #1
 8006adc:	2002      	movs	r0, #2
 8006ade:	f001 f9f7 	bl	8007ed0 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006ae2:	4a53      	ldr	r2, [pc, #332]	; (8006c30 <checkDemoModCalisma+0x524>)
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	2001      	movs	r0, #1
 8006ae8:	f001 f9f2 	bl	8007ed0 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006aec:	4b4b      	ldr	r3, [pc, #300]	; (8006c1c <checkDemoModCalisma+0x510>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	220a      	movs	r2, #10
 8006af2:	4950      	ldr	r1, [pc, #320]	; (8006c34 <checkDemoModCalisma+0x528>)
 8006af4:	4618      	mov	r0, r3
 8006af6:	f005 fd99 	bl	800c62c <itoa>
			lcd_print(2,12,snum);
 8006afa:	4a4e      	ldr	r2, [pc, #312]	; (8006c34 <checkDemoModCalisma+0x528>)
 8006afc:	210c      	movs	r1, #12
 8006afe:	2002      	movs	r0, #2
 8006b00:	f001 f9e6 	bl	8007ed0 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006b04:	4b44      	ldr	r3, [pc, #272]	; (8006c18 <checkDemoModCalisma+0x50c>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	220a      	movs	r2, #10
 8006b0a:	494a      	ldr	r1, [pc, #296]	; (8006c34 <checkDemoModCalisma+0x528>)
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f005 fd8d 	bl	800c62c <itoa>
			lcd_print(2,13,snum);
 8006b12:	4a48      	ldr	r2, [pc, #288]	; (8006c34 <checkDemoModCalisma+0x528>)
 8006b14:	210d      	movs	r1, #13
 8006b16:	2002      	movs	r0, #2
 8006b18:	f001 f9da 	bl	8007ed0 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006b1c:	4b3d      	ldr	r3, [pc, #244]	; (8006c14 <checkDemoModCalisma+0x508>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	220a      	movs	r2, #10
 8006b22:	4944      	ldr	r1, [pc, #272]	; (8006c34 <checkDemoModCalisma+0x528>)
 8006b24:	4618      	mov	r0, r3
 8006b26:	f005 fd81 	bl	800c62c <itoa>
			lcd_print(2,14,snum);
 8006b2a:	4a42      	ldr	r2, [pc, #264]	; (8006c34 <checkDemoModCalisma+0x528>)
 8006b2c:	210e      	movs	r1, #14
 8006b2e:	2002      	movs	r0, #2
 8006b30:	f001 f9ce 	bl	8007ed0 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006b34:	4b36      	ldr	r3, [pc, #216]	; (8006c10 <checkDemoModCalisma+0x504>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	220a      	movs	r2, #10
 8006b3a:	493e      	ldr	r1, [pc, #248]	; (8006c34 <checkDemoModCalisma+0x528>)
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f005 fd75 	bl	800c62c <itoa>
			lcd_print(2,15,snum);
 8006b42:	4a3c      	ldr	r2, [pc, #240]	; (8006c34 <checkDemoModCalisma+0x528>)
 8006b44:	210f      	movs	r1, #15
 8006b46:	2002      	movs	r0, #2
 8006b48:	f001 f9c2 	bl	8007ed0 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006b4c:	4b2f      	ldr	r3, [pc, #188]	; (8006c0c <checkDemoModCalisma+0x500>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	220a      	movs	r2, #10
 8006b52:	4938      	ldr	r1, [pc, #224]	; (8006c34 <checkDemoModCalisma+0x528>)
 8006b54:	4618      	mov	r0, r3
 8006b56:	f005 fd69 	bl	800c62c <itoa>
			lcd_print(2,16,snum);
 8006b5a:	4a36      	ldr	r2, [pc, #216]	; (8006c34 <checkDemoModCalisma+0x528>)
 8006b5c:	2110      	movs	r1, #16
 8006b5e:	2002      	movs	r0, #2
 8006b60:	f001 f9b6 	bl	8007ed0 <lcd_print>
			mesajYazildi=1;
 8006b64:	4b34      	ldr	r3, [pc, #208]	; (8006c38 <checkDemoModCalisma+0x52c>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006b6a:	e03c      	b.n	8006be6 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006b6c:	4b33      	ldr	r3, [pc, #204]	; (8006c3c <checkDemoModCalisma+0x530>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d003      	beq.n	8006b7c <checkDemoModCalisma+0x470>
 8006b74:	4b2c      	ldr	r3, [pc, #176]	; (8006c28 <checkDemoModCalisma+0x51c>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d134      	bne.n	8006be6 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b82:	481b      	ldr	r0, [pc, #108]	; (8006bf0 <checkDemoModCalisma+0x4e4>)
 8006b84:	f002 fce1 	bl	800954a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b8e:	4818      	ldr	r0, [pc, #96]	; (8006bf0 <checkDemoModCalisma+0x4e4>)
 8006b90:	f002 fcdb 	bl	800954a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006b94:	2200      	movs	r2, #0
 8006b96:	2104      	movs	r1, #4
 8006b98:	4815      	ldr	r0, [pc, #84]	; (8006bf0 <checkDemoModCalisma+0x4e4>)
 8006b9a:	f002 fcd6 	bl	800954a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2102      	movs	r1, #2
 8006ba2:	4813      	ldr	r0, [pc, #76]	; (8006bf0 <checkDemoModCalisma+0x4e4>)
 8006ba4:	f002 fcd1 	bl	800954a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2101      	movs	r1, #1
 8006bac:	4810      	ldr	r0, [pc, #64]	; (8006bf0 <checkDemoModCalisma+0x4e4>)
 8006bae:	f002 fccc 	bl	800954a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2120      	movs	r1, #32
 8006bb6:	480d      	ldr	r0, [pc, #52]	; (8006bec <checkDemoModCalisma+0x4e0>)
 8006bb8:	f002 fcc7 	bl	800954a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2110      	movs	r1, #16
 8006bc0:	480a      	ldr	r0, [pc, #40]	; (8006bec <checkDemoModCalisma+0x4e0>)
 8006bc2:	f002 fcc2 	bl	800954a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2180      	movs	r1, #128	; 0x80
 8006bca:	480b      	ldr	r0, [pc, #44]	; (8006bf8 <checkDemoModCalisma+0x4ec>)
 8006bcc:	f002 fcbd 	bl	800954a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2140      	movs	r1, #64	; 0x40
 8006bd4:	4808      	ldr	r0, [pc, #32]	; (8006bf8 <checkDemoModCalisma+0x4ec>)
 8006bd6:	f002 fcb8 	bl	800954a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2120      	movs	r1, #32
 8006bde:	4806      	ldr	r0, [pc, #24]	; (8006bf8 <checkDemoModCalisma+0x4ec>)
 8006be0:	f002 fcb3 	bl	800954a <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006be4:	e7ff      	b.n	8006be6 <checkDemoModCalisma+0x4da>
 8006be6:	bf00      	nop
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	40011000 	.word	0x40011000
 8006bf0:	40010c00 	.word	0x40010c00
 8006bf4:	20000279 	.word	0x20000279
 8006bf8:	40010800 	.word	0x40010800
 8006bfc:	200001fc 	.word	0x200001fc
 8006c00:	2000020c 	.word	0x2000020c
 8006c04:	20000278 	.word	0x20000278
 8006c08:	2000025e 	.word	0x2000025e
 8006c0c:	2000021d 	.word	0x2000021d
 8006c10:	2000021e 	.word	0x2000021e
 8006c14:	20000000 	.word	0x20000000
 8006c18:	20000001 	.word	0x20000001
 8006c1c:	2000021f 	.word	0x2000021f
 8006c20:	20000118 	.word	0x20000118
 8006c24:	2000024c 	.word	0x2000024c
 8006c28:	2000023d 	.word	0x2000023d
 8006c2c:	0800de30 	.word	0x0800de30
 8006c30:	0800de3c 	.word	0x0800de3c
 8006c34:	20000188 	.word	0x20000188
 8006c38:	20000254 	.word	0x20000254
 8006c3c:	2000023e 	.word	0x2000023e

08006c40 <mainLoop>:

void mainLoop() {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006c46:	f7fe f923 	bl	8004e90 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	48ac      	ldr	r0, [pc, #688]	; (8006f00 <mainLoop+0x2c0>)
 8006c4e:	f002 fc65 	bl	800951c <HAL_GPIO_ReadPin>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d136      	bne.n	8006cc6 <mainLoop+0x86>
 8006c58:	2108      	movs	r1, #8
 8006c5a:	48aa      	ldr	r0, [pc, #680]	; (8006f04 <mainLoop+0x2c4>)
 8006c5c:	f002 fc5e 	bl	800951c <HAL_GPIO_ReadPin>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d12f      	bne.n	8006cc6 <mainLoop+0x86>
 8006c66:	2102      	movs	r1, #2
 8006c68:	48a5      	ldr	r0, [pc, #660]	; (8006f00 <mainLoop+0x2c0>)
 8006c6a:	f002 fc57 	bl	800951c <HAL_GPIO_ReadPin>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d128      	bne.n	8006cc6 <mainLoop+0x86>
 8006c74:	2104      	movs	r1, #4
 8006c76:	48a2      	ldr	r0, [pc, #648]	; (8006f00 <mainLoop+0x2c0>)
 8006c78:	f002 fc50 	bl	800951c <HAL_GPIO_ReadPin>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d121      	bne.n	8006cc6 <mainLoop+0x86>
 8006c82:	2108      	movs	r1, #8
 8006c84:	489e      	ldr	r0, [pc, #632]	; (8006f00 <mainLoop+0x2c0>)
 8006c86:	f002 fc49 	bl	800951c <HAL_GPIO_ReadPin>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d11a      	bne.n	8006cc6 <mainLoop+0x86>
 8006c90:	2180      	movs	r1, #128	; 0x80
 8006c92:	489c      	ldr	r0, [pc, #624]	; (8006f04 <mainLoop+0x2c4>)
 8006c94:	f002 fc42 	bl	800951c <HAL_GPIO_ReadPin>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d113      	bne.n	8006cc6 <mainLoop+0x86>
 8006c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ca2:	4898      	ldr	r0, [pc, #608]	; (8006f04 <mainLoop+0x2c4>)
 8006ca4:	f002 fc3a 	bl	800951c <HAL_GPIO_ReadPin>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d10b      	bne.n	8006cc6 <mainLoop+0x86>
 8006cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cb2:	4894      	ldr	r0, [pc, #592]	; (8006f04 <mainLoop+0x2c4>)
 8006cb4:	f002 fc32 	bl	800951c <HAL_GPIO_ReadPin>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d103      	bne.n	8006cc6 <mainLoop+0x86>
			butonKontrol=0;
 8006cbe:	4b92      	ldr	r3, [pc, #584]	; (8006f08 <mainLoop+0x2c8>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	e003      	b.n	8006cce <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006cc6:	4b91      	ldr	r3, [pc, #580]	; (8006f0c <mainLoop+0x2cc>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a91      	ldr	r2, [pc, #580]	; (8006f10 <mainLoop+0x2d0>)
 8006ccc:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006cce:	4b91      	ldr	r3, [pc, #580]	; (8006f14 <mainLoop+0x2d4>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d03a      	beq.n	8006d4c <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006cd6:	bf00      	nop
 8006cd8:	488f      	ldr	r0, [pc, #572]	; (8006f18 <mainLoop+0x2d8>)
 8006cda:	f003 fa48 	bl	800a16e <HAL_I2C_GetError>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d0f9      	beq.n	8006cd8 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006ce4:	bf00      	nop
 8006ce6:	488c      	ldr	r0, [pc, #560]	; (8006f18 <mainLoop+0x2d8>)
 8006ce8:	f003 fa34 	bl	800a154 <HAL_I2C_GetState>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b20      	cmp	r3, #32
 8006cf0:	d1f9      	bne.n	8006ce6 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006cf2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006cf6:	9302      	str	r3, [sp, #8]
 8006cf8:	236e      	movs	r3, #110	; 0x6e
 8006cfa:	9301      	str	r3, [sp, #4]
 8006cfc:	4b87      	ldr	r3, [pc, #540]	; (8006f1c <mainLoop+0x2dc>)
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	236e      	movs	r3, #110	; 0x6e
 8006d02:	2200      	movs	r2, #0
 8006d04:	21a0      	movs	r1, #160	; 0xa0
 8006d06:	4884      	ldr	r0, [pc, #528]	; (8006f18 <mainLoop+0x2d8>)
 8006d08:	f002 fec2 	bl	8009a90 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006d0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d10:	f001 fe34 	bl	800897c <HAL_Delay>

		  hafizaYaz=0;
 8006d14:	4b7f      	ldr	r3, [pc, #508]	; (8006f14 <mainLoop+0x2d4>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006d1a:	4b81      	ldr	r3, [pc, #516]	; (8006f20 <mainLoop+0x2e0>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d105      	bne.n	8006d2e <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006d22:	4a80      	ldr	r2, [pc, #512]	; (8006f24 <mainLoop+0x2e4>)
 8006d24:	2101      	movs	r1, #1
 8006d26:	2002      	movs	r0, #2
 8006d28:	f001 f8d2 	bl	8007ed0 <lcd_print>
 8006d2c:	e008      	b.n	8006d40 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006d2e:	4b7c      	ldr	r3, [pc, #496]	; (8006f20 <mainLoop+0x2e0>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d104      	bne.n	8006d40 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006d36:	4a7c      	ldr	r2, [pc, #496]	; (8006f28 <mainLoop+0x2e8>)
 8006d38:	2101      	movs	r1, #1
 8006d3a:	2002      	movs	r0, #2
 8006d3c:	f001 f8c8 	bl	8007ed0 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006d40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d44:	f001 fe1a 	bl	800897c <HAL_Delay>
		  lcd_clear();
 8006d48:	f001 f8ee 	bl	8007f28 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006d4c:	4b77      	ldr	r3, [pc, #476]	; (8006f2c <mainLoop+0x2ec>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	f083 0301 	eor.w	r3, r3, #1
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d06d      	beq.n	8006e36 <mainLoop+0x1f6>
 8006d5a:	486f      	ldr	r0, [pc, #444]	; (8006f18 <mainLoop+0x2d8>)
 8006d5c:	f003 f9fa 	bl	800a154 <HAL_I2C_GetState>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d167      	bne.n	8006e36 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006d66:	4b72      	ldr	r3, [pc, #456]	; (8006f30 <mainLoop+0x2f0>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	f083 0301 	eor.w	r3, r3, #1
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d044      	beq.n	8006dfe <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006d74:	4a6f      	ldr	r2, [pc, #444]	; (8006f34 <mainLoop+0x2f4>)
 8006d76:	2101      	movs	r1, #1
 8006d78:	2001      	movs	r0, #1
 8006d7a:	f001 f8a9 	bl	8007ed0 <lcd_print>
			  if(dilSecim==0) {
 8006d7e:	4b68      	ldr	r3, [pc, #416]	; (8006f20 <mainLoop+0x2e0>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006d86:	4a6c      	ldr	r2, [pc, #432]	; (8006f38 <mainLoop+0x2f8>)
 8006d88:	2101      	movs	r1, #1
 8006d8a:	2002      	movs	r0, #2
 8006d8c:	f001 f8a0 	bl	8007ed0 <lcd_print>
 8006d90:	e008      	b.n	8006da4 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006d92:	4b63      	ldr	r3, [pc, #396]	; (8006f20 <mainLoop+0x2e0>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d104      	bne.n	8006da4 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006d9a:	4a68      	ldr	r2, [pc, #416]	; (8006f3c <mainLoop+0x2fc>)
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	2002      	movs	r0, #2
 8006da0:	f001 f896 	bl	8007ed0 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006da4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006da8:	f001 fde8 	bl	800897c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006dac:	bf00      	nop
 8006dae:	485a      	ldr	r0, [pc, #360]	; (8006f18 <mainLoop+0x2d8>)
 8006db0:	f003 f9dd 	bl	800a16e <HAL_I2C_GetError>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d0f9      	beq.n	8006dae <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006dba:	e003      	b.n	8006dc4 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006dbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006dc0:	f001 fddc 	bl	800897c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006dc4:	4854      	ldr	r0, [pc, #336]	; (8006f18 <mainLoop+0x2d8>)
 8006dc6:	f003 f9c5 	bl	800a154 <HAL_I2C_GetState>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	d1f5      	bne.n	8006dbc <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006dd0:	4b53      	ldr	r3, [pc, #332]	; (8006f20 <mainLoop+0x2e0>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d105      	bne.n	8006de4 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006dd8:	4a59      	ldr	r2, [pc, #356]	; (8006f40 <mainLoop+0x300>)
 8006dda:	2101      	movs	r1, #1
 8006ddc:	2002      	movs	r0, #2
 8006dde:	f001 f877 	bl	8007ed0 <lcd_print>
 8006de2:	e008      	b.n	8006df6 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006de4:	4b4e      	ldr	r3, [pc, #312]	; (8006f20 <mainLoop+0x2e0>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d104      	bne.n	8006df6 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006dec:	4a55      	ldr	r2, [pc, #340]	; (8006f44 <mainLoop+0x304>)
 8006dee:	2101      	movs	r1, #1
 8006df0:	2002      	movs	r0, #2
 8006df2:	f001 f86d 	bl	8007ed0 <lcd_print>
			  }

			  ilkOkuma=1;
 8006df6:	4b4e      	ldr	r3, [pc, #312]	; (8006f30 <mainLoop+0x2f0>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	e014      	b.n	8006e28 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006dfe:	4b48      	ldr	r3, [pc, #288]	; (8006f20 <mainLoop+0x2e0>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d105      	bne.n	8006e12 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006e06:	4a50      	ldr	r2, [pc, #320]	; (8006f48 <mainLoop+0x308>)
 8006e08:	2101      	movs	r1, #1
 8006e0a:	2002      	movs	r0, #2
 8006e0c:	f001 f860 	bl	8007ed0 <lcd_print>
 8006e10:	e008      	b.n	8006e24 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006e12:	4b43      	ldr	r3, [pc, #268]	; (8006f20 <mainLoop+0x2e0>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d104      	bne.n	8006e24 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006e1a:	4a4c      	ldr	r2, [pc, #304]	; (8006f4c <mainLoop+0x30c>)
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	2002      	movs	r0, #2
 8006e20:	f001 f856 	bl	8007ed0 <lcd_print>
			  }
			  lcd_clear();
 8006e24:	f001 f880 	bl	8007f28 <lcd_clear>
		  }

		  lcd_clear();
 8006e28:	f001 f87e 	bl	8007f28 <lcd_clear>

		  eepromKontrol();
 8006e2c:	f7f9 fa02 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006e30:	4b3e      	ldr	r3, [pc, #248]	; (8006f2c <mainLoop+0x2ec>)
 8006e32:	2201      	movs	r2, #1
 8006e34:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006e36:	4b46      	ldr	r3, [pc, #280]	; (8006f50 <mainLoop+0x310>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d11c      	bne.n	8006e78 <mainLoop+0x238>
 8006e3e:	4b45      	ldr	r3, [pc, #276]	; (8006f54 <mainLoop+0x314>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	f083 0301 	eor.w	r3, r3, #1
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d015      	beq.n	8006e78 <mainLoop+0x238>
 8006e4c:	4b42      	ldr	r3, [pc, #264]	; (8006f58 <mainLoop+0x318>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d111      	bne.n	8006e78 <mainLoop+0x238>
			lcd_clear();
 8006e54:	f001 f868 	bl	8007f28 <lcd_clear>
			HAL_Delay(10);
 8006e58:	200a      	movs	r0, #10
 8006e5a:	f001 fd8f 	bl	800897c <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006e5e:	4a3f      	ldr	r2, [pc, #252]	; (8006f5c <mainLoop+0x31c>)
 8006e60:	2101      	movs	r1, #1
 8006e62:	2001      	movs	r0, #1
 8006e64:	f001 f834 	bl	8007ed0 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006e68:	4a3d      	ldr	r2, [pc, #244]	; (8006f60 <mainLoop+0x320>)
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	2002      	movs	r0, #2
 8006e6e:	f001 f82f 	bl	8007ed0 <lcd_print>
			mesajYazildi=1;
 8006e72:	4b38      	ldr	r3, [pc, #224]	; (8006f54 <mainLoop+0x314>)
 8006e74:	2201      	movs	r2, #1
 8006e76:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006e78:	4b35      	ldr	r3, [pc, #212]	; (8006f50 <mainLoop+0x310>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d112      	bne.n	8006ea6 <mainLoop+0x266>
 8006e80:	2102      	movs	r1, #2
 8006e82:	481f      	ldr	r0, [pc, #124]	; (8006f00 <mainLoop+0x2c0>)
 8006e84:	f002 fb4a 	bl	800951c <HAL_GPIO_ReadPin>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d10b      	bne.n	8006ea6 <mainLoop+0x266>
 8006e8e:	2104      	movs	r1, #4
 8006e90:	481b      	ldr	r0, [pc, #108]	; (8006f00 <mainLoop+0x2c0>)
 8006e92:	f002 fb43 	bl	800951c <HAL_GPIO_ReadPin>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d104      	bne.n	8006ea6 <mainLoop+0x266>
			menuGiris=1;
 8006e9c:	4b2c      	ldr	r3, [pc, #176]	; (8006f50 <mainLoop+0x310>)
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006ea2:	f001 f841 	bl	8007f28 <lcd_clear>
		}

		if(menuGiris==1) {
 8006ea6:	4b2a      	ldr	r3, [pc, #168]	; (8006f50 <mainLoop+0x310>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d101      	bne.n	8006eb2 <mainLoop+0x272>
			menu();
 8006eae:	f7fa fabb 	bl	8001428 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006eb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006eb6:	4813      	ldr	r0, [pc, #76]	; (8006f04 <mainLoop+0x2c4>)
 8006eb8:	f002 fb5f 	bl	800957a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ec0:	4828      	ldr	r0, [pc, #160]	; (8006f64 <mainLoop+0x324>)
 8006ec2:	f002 fb2b 	bl	800951c <HAL_GPIO_ReadPin>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <mainLoop+0x2a2>
 8006ecc:	4b26      	ldr	r3, [pc, #152]	; (8006f68 <mainLoop+0x328>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f083 0301 	eor.w	r3, r3, #1
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <mainLoop+0x2a2>
			stopVar=1;
 8006eda:	4b24      	ldr	r3, [pc, #144]	; (8006f6c <mainLoop+0x32c>)
 8006edc:	2201      	movs	r2, #1
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e002      	b.n	8006ee8 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006ee2:	4b22      	ldr	r3, [pc, #136]	; (8006f6c <mainLoop+0x32c>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006ee8:	f7fd ffe8 	bl	8004ebc <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006eec:	f7fe f81a 	bl	8004f24 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006ef0:	f7fe f85e 	bl	8004fb0 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006ef4:	f7fe f8ae 	bl	8005054 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006ef8:	f7ff fc08 	bl	800670c <checkDemoModCalisma>
		checkLCDBacklight();
 8006efc:	e6a3      	b.n	8006c46 <mainLoop+0x6>
 8006efe:	bf00      	nop
 8006f00:	40010800 	.word	0x40010800
 8006f04:	40011000 	.word	0x40011000
 8006f08:	2000024f 	.word	0x2000024f
 8006f0c:	200001fc 	.word	0x200001fc
 8006f10:	20000218 	.word	0x20000218
 8006f14:	2000024c 	.word	0x2000024c
 8006f18:	200003a8 	.word	0x200003a8
 8006f1c:	20000118 	.word	0x20000118
 8006f20:	20000241 	.word	0x20000241
 8006f24:	0800de50 	.word	0x0800de50
 8006f28:	0800de64 	.word	0x0800de64
 8006f2c:	2000024d 	.word	0x2000024d
 8006f30:	2000024e 	.word	0x2000024e
 8006f34:	0800de78 	.word	0x0800de78
 8006f38:	0800de8c 	.word	0x0800de8c
 8006f3c:	0800dea0 	.word	0x0800dea0
 8006f40:	0800deb4 	.word	0x0800deb4
 8006f44:	0800dec8 	.word	0x0800dec8
 8006f48:	0800dedc 	.word	0x0800dedc
 8006f4c:	0800def0 	.word	0x0800def0
 8006f50:	2000023d 	.word	0x2000023d
 8006f54:	20000254 	.word	0x20000254
 8006f58:	2000023e 	.word	0x2000023e
 8006f5c:	0800df04 	.word	0x0800df04
 8006f60:	0800df18 	.word	0x0800df18
 8006f64:	40010c00 	.word	0x40010c00
 8006f68:	20000275 	.word	0x20000275
 8006f6c:	20000272 	.word	0x20000272

08006f70 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006f76:	2001      	movs	r0, #1
 8006f78:	f001 f808 	bl	8007f8c <lcd_cursor>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006f7c:	2305      	movs	r3, #5
 8006f7e:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006f80:	2303      	movs	r3, #3
 8006f82:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006f84:	2300      	movs	r3, #0
 8006f86:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006f88:	4b99      	ldr	r3, [pc, #612]	; (80071f0 <takeMachineID+0x280>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	603b      	str	r3, [r7, #0]

    resetEEPROM4Wifi(1);
 8006f8e:	2001      	movs	r0, #1
 8006f90:	f7f9 fc5a 	bl	8000848 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8006f94:	2064      	movs	r0, #100	; 0x64
 8006f96:	f001 fcf1 	bl	800897c <HAL_Delay>

    printTemplate(1, 0);
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	f7fa f8b7 	bl	8001110 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006fa2:	2108      	movs	r1, #8
 8006fa4:	4893      	ldr	r0, [pc, #588]	; (80071f4 <takeMachineID+0x284>)
 8006fa6:	f002 fab9 	bl	800951c <HAL_GPIO_ReadPin>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d12b      	bne.n	8007008 <takeMachineID+0x98>
        	lcd_cursor(0);
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	f000 ffeb 	bl	8007f8c <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006fb6:	4890      	ldr	r0, [pc, #576]	; (80071f8 <takeMachineID+0x288>)
 8006fb8:	f7f9 f934 	bl	8000224 <strlen>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b0c      	cmp	r3, #12
 8006fc0:	d010      	beq.n	8006fe4 <takeMachineID+0x74>
        		lcd_clear();
 8006fc2:	f000 ffb1 	bl	8007f28 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006fc6:	4a8d      	ldr	r2, [pc, #564]	; (80071fc <takeMachineID+0x28c>)
 8006fc8:	2101      	movs	r1, #1
 8006fca:	2001      	movs	r0, #1
 8006fcc:	f000 ff80 	bl	8007ed0 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006fd0:	4a8b      	ldr	r2, [pc, #556]	; (8007200 <takeMachineID+0x290>)
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	2002      	movs	r0, #2
 8006fd6:	f000 ff7b 	bl	8007ed0 <lcd_print>
        		HAL_Delay(1200);
 8006fda:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006fde:	f001 fccd 	bl	800897c <HAL_Delay>
        		goto mainSection;
 8006fe2:	e7c8      	b.n	8006f76 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006fe4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006fe8:	9302      	str	r3, [sp, #8]
 8006fea:	236e      	movs	r3, #110	; 0x6e
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	4b85      	ldr	r3, [pc, #532]	; (8007204 <takeMachineID+0x294>)
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	236e      	movs	r3, #110	; 0x6e
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	21a0      	movs	r1, #160	; 0xa0
 8006ff8:	4883      	ldr	r0, [pc, #524]	; (8007208 <takeMachineID+0x298>)
 8006ffa:	f002 fd49 	bl	8009a90 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006ffe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007002:	f001 fcbb 	bl	800897c <HAL_Delay>

            	break;
 8007006:	e0ef      	b.n	80071e8 <takeMachineID+0x278>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007008:	2101      	movs	r1, #1
 800700a:	487a      	ldr	r0, [pc, #488]	; (80071f4 <takeMachineID+0x284>)
 800700c:	f002 fa86 	bl	800951c <HAL_GPIO_ReadPin>
 8007010:	4603      	mov	r3, r0
 8007012:	2b01      	cmp	r3, #1
 8007014:	d111      	bne.n	800703a <takeMachineID+0xca>
        	if(cursorPosition == 7) {
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2b07      	cmp	r3, #7
 800701a:	d102      	bne.n	8007022 <takeMachineID+0xb2>
        		cursorPosition = 10;
 800701c:	230a      	movs	r3, #10
 800701e:	60bb      	str	r3, [r7, #8]
 8007020:	e008      	b.n	8007034 <takeMachineID+0xc4>
        	} else if (cursorPosition == 14) {
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b0e      	cmp	r3, #14
 8007026:	d102      	bne.n	800702e <takeMachineID+0xbe>
                cursorPosition = 3;
 8007028:	2303      	movs	r3, #3
 800702a:	60bb      	str	r3, [r7, #8]
 800702c:	e002      	b.n	8007034 <takeMachineID+0xc4>
            } else {
            	cursorPosition++;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	3301      	adds	r3, #1
 8007032:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8007034:	2096      	movs	r0, #150	; 0x96
 8007036:	f001 fca1 	bl	800897c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800703a:	2108      	movs	r1, #8
 800703c:	4873      	ldr	r0, [pc, #460]	; (800720c <takeMachineID+0x29c>)
 800703e:	f002 fa6d 	bl	800951c <HAL_GPIO_ReadPin>
 8007042:	4603      	mov	r3, r0
 8007044:	2b01      	cmp	r3, #1
 8007046:	d111      	bne.n	800706c <takeMachineID+0xfc>
            if (cursorPosition == 3) {
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b03      	cmp	r3, #3
 800704c:	d102      	bne.n	8007054 <takeMachineID+0xe4>
                cursorPosition = 14;
 800704e:	230e      	movs	r3, #14
 8007050:	60bb      	str	r3, [r7, #8]
 8007052:	e008      	b.n	8007066 <takeMachineID+0xf6>
            } else if(cursorPosition == 10) {
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2b0a      	cmp	r3, #10
 8007058:	d102      	bne.n	8007060 <takeMachineID+0xf0>
            	cursorPosition = 7;
 800705a:	2307      	movs	r3, #7
 800705c:	60bb      	str	r3, [r7, #8]
 800705e:	e002      	b.n	8007066 <takeMachineID+0xf6>
            } else {
            	cursorPosition--;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	3b01      	subs	r3, #1
 8007064:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8007066:	2096      	movs	r0, #150	; 0x96
 8007068:	f001 fc88 	bl	800897c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800706c:	2102      	movs	r1, #2
 800706e:	4861      	ldr	r0, [pc, #388]	; (80071f4 <takeMachineID+0x284>)
 8007070:	f002 fa54 	bl	800951c <HAL_GPIO_ReadPin>
 8007074:	4603      	mov	r3, r0
 8007076:	2b01      	cmp	r3, #1
 8007078:	d173      	bne.n	8007162 <takeMachineID+0x1f2>
        	if(cursorPosition == 3) {
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b03      	cmp	r3, #3
 800707e:	d105      	bne.n	800708c <takeMachineID+0x11c>
        		//machineID[arrayPos] = '0';
        		eepromData[eepromVal] = 0;
 8007080:	4a60      	ldr	r2, [pc, #384]	; (8007204 <takeMachineID+0x294>)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	4413      	add	r3, r2
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
 800708a:	e04f      	b.n	800712c <takeMachineID+0x1bc>
        	} else if(cursorPosition == 4) {
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2b04      	cmp	r3, #4
 8007090:	d105      	bne.n	800709e <takeMachineID+0x12e>
        		//machineID[arrayPos] = '1';
        		eepromData[eepromVal] = 1;
 8007092:	4a5c      	ldr	r2, [pc, #368]	; (8007204 <takeMachineID+0x294>)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	4413      	add	r3, r2
 8007098:	2201      	movs	r2, #1
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	e046      	b.n	800712c <takeMachineID+0x1bc>
        	} else if(cursorPosition == 5) {
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b05      	cmp	r3, #5
 80070a2:	d105      	bne.n	80070b0 <takeMachineID+0x140>
        		//machineID[arrayPos] = '2';
        		eepromData[eepromVal] = 2;
 80070a4:	4a57      	ldr	r2, [pc, #348]	; (8007204 <takeMachineID+0x294>)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	4413      	add	r3, r2
 80070aa:	2202      	movs	r2, #2
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	e03d      	b.n	800712c <takeMachineID+0x1bc>
        	} else if(cursorPosition == 6) {
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2b06      	cmp	r3, #6
 80070b4:	d105      	bne.n	80070c2 <takeMachineID+0x152>
        		//machineID[arrayPos] = '3';
        		eepromData[eepromVal] = 3;
 80070b6:	4a53      	ldr	r2, [pc, #332]	; (8007204 <takeMachineID+0x294>)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	4413      	add	r3, r2
 80070bc:	2203      	movs	r2, #3
 80070be:	701a      	strb	r2, [r3, #0]
 80070c0:	e034      	b.n	800712c <takeMachineID+0x1bc>
        	} else if(cursorPosition == 7) {
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b07      	cmp	r3, #7
 80070c6:	d105      	bne.n	80070d4 <takeMachineID+0x164>
        		//machineID[arrayPos] = '4';
        		eepromData[eepromVal] = 4;
 80070c8:	4a4e      	ldr	r2, [pc, #312]	; (8007204 <takeMachineID+0x294>)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	4413      	add	r3, r2
 80070ce:	2204      	movs	r2, #4
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	e02b      	b.n	800712c <takeMachineID+0x1bc>
        	} else if(cursorPosition == 10) {
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2b0a      	cmp	r3, #10
 80070d8:	d105      	bne.n	80070e6 <takeMachineID+0x176>
        		//machineID[arrayPos] = '5';
        		eepromData[eepromVal] = 5;
 80070da:	4a4a      	ldr	r2, [pc, #296]	; (8007204 <takeMachineID+0x294>)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	4413      	add	r3, r2
 80070e0:	2205      	movs	r2, #5
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	e022      	b.n	800712c <takeMachineID+0x1bc>
        	} else if(cursorPosition == 11) {
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b0b      	cmp	r3, #11
 80070ea:	d105      	bne.n	80070f8 <takeMachineID+0x188>
        		//machineID[arrayPos] = '6';
        		eepromData[eepromVal] = 6;
 80070ec:	4a45      	ldr	r2, [pc, #276]	; (8007204 <takeMachineID+0x294>)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	4413      	add	r3, r2
 80070f2:	2206      	movs	r2, #6
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	e019      	b.n	800712c <takeMachineID+0x1bc>
        	} else if(cursorPosition == 12) {
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b0c      	cmp	r3, #12
 80070fc:	d105      	bne.n	800710a <takeMachineID+0x19a>
        		//machineID[arrayPos] = '7';
        		eepromData[eepromVal] = 7;
 80070fe:	4a41      	ldr	r2, [pc, #260]	; (8007204 <takeMachineID+0x294>)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	4413      	add	r3, r2
 8007104:	2207      	movs	r2, #7
 8007106:	701a      	strb	r2, [r3, #0]
 8007108:	e010      	b.n	800712c <takeMachineID+0x1bc>
        	} else if(cursorPosition == 13) {
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b0d      	cmp	r3, #13
 800710e:	d105      	bne.n	800711c <takeMachineID+0x1ac>
        		//machineID[arrayPos] = '8';
        		eepromData[eepromVal] = 8;
 8007110:	4a3c      	ldr	r2, [pc, #240]	; (8007204 <takeMachineID+0x294>)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	4413      	add	r3, r2
 8007116:	2208      	movs	r2, #8
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	e007      	b.n	800712c <takeMachineID+0x1bc>
        	} else if(cursorPosition == 14) {
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2b0e      	cmp	r3, #14
 8007120:	d104      	bne.n	800712c <takeMachineID+0x1bc>
        		//machineID[arrayPos] = '9';
        		eepromData[eepromVal] = 9;
 8007122:	4a38      	ldr	r2, [pc, #224]	; (8007204 <takeMachineID+0x294>)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	4413      	add	r3, r2
 8007128:	2209      	movs	r2, #9
 800712a:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	b2d9      	uxtb	r1, r3
 8007130:	4a31      	ldr	r2, [pc, #196]	; (80071f8 <takeMachineID+0x288>)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4413      	add	r3, r2
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	2001      	movs	r0, #1
 800713c:	f000 fedd 	bl	8007efa <lcd_print_char>

        	writeLoc++;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	3301      	adds	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	3301      	adds	r3, #1
 800714a:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	3301      	adds	r3, #1
 8007150:	603b      	str	r3, [r7, #0]

        	//machineID[machineIDCharacterLimit] = '\0';
        	eepromData[eepromVal] = '\0';
 8007152:	4a2c      	ldr	r2, [pc, #176]	; (8007204 <takeMachineID+0x294>)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	4413      	add	r3, r2
 8007158:	2200      	movs	r2, #0
 800715a:	701a      	strb	r2, [r3, #0]

        	HAL_Delay(150);
 800715c:	2096      	movs	r0, #150	; 0x96
 800715e:	f001 fc0d 	bl	800897c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007162:	2104      	movs	r1, #4
 8007164:	4823      	ldr	r0, [pc, #140]	; (80071f4 <takeMachineID+0x284>)
 8007166:	f002 f9d9 	bl	800951c <HAL_GPIO_ReadPin>
 800716a:	4603      	mov	r3, r0
 800716c:	2b01      	cmp	r3, #1
 800716e:	d134      	bne.n	80071da <takeMachineID+0x26a>
            if(strlen(machineID) >= 1) {
 8007170:	4b21      	ldr	r3, [pc, #132]	; (80071f8 <takeMachineID+0x288>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d02d      	beq.n	80071d4 <takeMachineID+0x264>
                //machineID[arrayPos] = '\0';
                eepromData[eepromVal] = '\0';
 8007178:	4a22      	ldr	r2, [pc, #136]	; (8007204 <takeMachineID+0x294>)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	4413      	add	r3, r2
 800717e:	2200      	movs	r2, #0
 8007180:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b05      	cmp	r3, #5
 8007186:	dd03      	ble.n	8007190 <takeMachineID+0x220>
                	writeLoc--;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3b01      	subs	r3, #1
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	e004      	b.n	800719a <takeMachineID+0x22a>
                } else if(writeLoc < 5) {
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b04      	cmp	r3, #4
 8007194:	dc01      	bgt.n	800719a <takeMachineID+0x22a>
                	writeLoc = 5;
 8007196:	2305      	movs	r3, #5
 8007198:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	dd06      	ble.n	80071ae <takeMachineID+0x23e>
                	arrayPos--;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	603b      	str	r3, [r7, #0]
 80071ac:	e007      	b.n	80071be <takeMachineID+0x24e>
                } else if(arrayPos < 0) {
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	da04      	bge.n	80071be <takeMachineID+0x24e>
                	arrayPos = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 80071b8:	4b0d      	ldr	r3, [pc, #52]	; (80071f0 <takeMachineID+0x280>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	3304      	adds	r3, #4
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	4619      	mov	r1, r3
 80071c8:	2001      	movs	r0, #1
 80071ca:	f000 feb7 	bl	8007f3c <lcd_delete_char>
                HAL_Delay(50);
 80071ce:	2032      	movs	r0, #50	; 0x32
 80071d0:	f001 fbd4 	bl	800897c <HAL_Delay>
            }

            HAL_Delay(150);
 80071d4:	2096      	movs	r0, #150	; 0x96
 80071d6:	f001 fbd1 	bl	800897c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	4619      	mov	r1, r3
 80071e0:	2002      	movs	r0, #2
 80071e2:	f000 fe56 	bl	8007e92 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80071e6:	e6dc      	b.n	8006fa2 <takeMachineID+0x32>
    }
}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	20000004 	.word	0x20000004
 80071f4:	40010800 	.word	0x40010800
 80071f8:	20000190 	.word	0x20000190
 80071fc:	0800df2c 	.word	0x0800df2c
 8007200:	0800df40 	.word	0x0800df40
 8007204:	20000118 	.word	0x20000118
 8007208:	200003a8 	.word	0x200003a8
 800720c:	40011000 	.word	0x40011000

08007210 <takeWifiSSID>:

void takeWifiSSID() {
 8007210:	b580      	push	{r7, lr}
 8007212:	b08a      	sub	sp, #40	; 0x28
 8007214:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8007216:	2001      	movs	r0, #1
 8007218:	f000 feb8 	bl	8007f8c <lcd_cursor>

    resetEEPROM4Wifi(2);
 800721c:	2002      	movs	r0, #2
 800721e:	f7f9 fb13 	bl	8000848 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8007222:	2064      	movs	r0, #100	; 0x64
 8007224:	f001 fbaa 	bl	800897c <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007228:	2301      	movs	r3, #1
 800722a:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800722c:	2307      	movs	r3, #7
 800722e:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007230:	2301      	movs	r3, #1
 8007232:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007234:	2300      	movs	r3, #0
 8007236:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007238:	4ba8      	ldr	r3, [pc, #672]	; (80074dc <takeWifiSSID+0x2cc>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 800723e:	2101      	movs	r1, #1
 8007240:	2002      	movs	r0, #2
 8007242:	f7f9 ff65 	bl	8001110 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007246:	2108      	movs	r1, #8
 8007248:	48a5      	ldr	r0, [pc, #660]	; (80074e0 <takeWifiSSID+0x2d0>)
 800724a:	f002 f967 	bl	800951c <HAL_GPIO_ReadPin>
 800724e:	4603      	mov	r3, r0
 8007250:	2b01      	cmp	r3, #1
 8007252:	d12b      	bne.n	80072ac <takeWifiSSID+0x9c>
            lcd_cursor(0);
 8007254:	2000      	movs	r0, #0
 8007256:	f000 fe99 	bl	8007f8c <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 800725a:	48a2      	ldr	r0, [pc, #648]	; (80074e4 <takeWifiSSID+0x2d4>)
 800725c:	f7f8 ffe2 	bl	8000224 <strlen>
 8007260:	4603      	mov	r3, r0
 8007262:	2b14      	cmp	r3, #20
 8007264:	d910      	bls.n	8007288 <takeWifiSSID+0x78>
                lcd_clear();
 8007266:	f000 fe5f 	bl	8007f28 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 800726a:	4a9f      	ldr	r2, [pc, #636]	; (80074e8 <takeWifiSSID+0x2d8>)
 800726c:	2101      	movs	r1, #1
 800726e:	2001      	movs	r0, #1
 8007270:	f000 fe2e 	bl	8007ed0 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007274:	4a9d      	ldr	r2, [pc, #628]	; (80074ec <takeWifiSSID+0x2dc>)
 8007276:	2101      	movs	r1, #1
 8007278:	2002      	movs	r0, #2
 800727a:	f000 fe29 	bl	8007ed0 <lcd_print>
                HAL_Delay(1250);
 800727e:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007282:	f001 fb7b 	bl	800897c <HAL_Delay>
                goto mainSSIDSection;
 8007286:	e7c6      	b.n	8007216 <takeWifiSSID+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007288:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800728c:	9302      	str	r3, [sp, #8]
 800728e:	236e      	movs	r3, #110	; 0x6e
 8007290:	9301      	str	r3, [sp, #4]
 8007292:	4b97      	ldr	r3, [pc, #604]	; (80074f0 <takeWifiSSID+0x2e0>)
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	236e      	movs	r3, #110	; 0x6e
 8007298:	2200      	movs	r2, #0
 800729a:	21a0      	movs	r1, #160	; 0xa0
 800729c:	4895      	ldr	r0, [pc, #596]	; (80074f4 <takeWifiSSID+0x2e4>)
 800729e:	f002 fbf7 	bl	8009a90 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80072a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072a6:	f001 fb69 	bl	800897c <HAL_Delay>

            	break;
 80072aa:	e113      	b.n	80074d4 <takeWifiSSID+0x2c4>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80072ac:	2101      	movs	r1, #1
 80072ae:	488c      	ldr	r0, [pc, #560]	; (80074e0 <takeWifiSSID+0x2d0>)
 80072b0:	f002 f934 	bl	800951c <HAL_GPIO_ReadPin>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d14d      	bne.n	8007356 <takeWifiSSID+0x146>
        	if(cursorPosition > 80) {
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b50      	cmp	r3, #80	; 0x50
 80072be:	dd01      	ble.n	80072c4 <takeWifiSSID+0xb4>
        		cursorPosition = 1;
 80072c0:	2301      	movs	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	d13f      	bne.n	800734a <takeWifiSSID+0x13a>
            	if(page == 1) {
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d109      	bne.n	80072e4 <takeWifiSSID+0xd4>
            		cursorPosition = 1;
 80072d0:	2301      	movs	r3, #1
 80072d2:	60fb      	str	r3, [r7, #12]
            		page++;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	3301      	adds	r3, #1
 80072d8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80072da:	2102      	movs	r1, #2
 80072dc:	2002      	movs	r0, #2
 80072de:	f7f9 ff17 	bl	8001110 <printTemplate>
 80072e2:	e035      	b.n	8007350 <takeWifiSSID+0x140>
            	} else if(page == 2) {
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d109      	bne.n	80072fe <takeWifiSSID+0xee>
            		cursorPosition = 1;
 80072ea:	2301      	movs	r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]
            		page++;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	3301      	adds	r3, #1
 80072f2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80072f4:	2103      	movs	r1, #3
 80072f6:	2002      	movs	r0, #2
 80072f8:	f7f9 ff0a 	bl	8001110 <printTemplate>
 80072fc:	e028      	b.n	8007350 <takeWifiSSID+0x140>
            	} else if(page == 3) {
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b03      	cmp	r3, #3
 8007302:	d109      	bne.n	8007318 <takeWifiSSID+0x108>
            		cursorPosition = 1;
 8007304:	2301      	movs	r3, #1
 8007306:	60fb      	str	r3, [r7, #12]
            		page++;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	3301      	adds	r3, #1
 800730c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800730e:	2104      	movs	r1, #4
 8007310:	2002      	movs	r0, #2
 8007312:	f7f9 fefd 	bl	8001110 <printTemplate>
 8007316:	e01b      	b.n	8007350 <takeWifiSSID+0x140>
            	} else if(page == 4) {
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2b04      	cmp	r3, #4
 800731c:	d109      	bne.n	8007332 <takeWifiSSID+0x122>
            		cursorPosition = 1;
 800731e:	2301      	movs	r3, #1
 8007320:	60fb      	str	r3, [r7, #12]
            		page++;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	3301      	adds	r3, #1
 8007326:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007328:	2105      	movs	r1, #5
 800732a:	2002      	movs	r0, #2
 800732c:	f7f9 fef0 	bl	8001110 <printTemplate>
 8007330:	e00e      	b.n	8007350 <takeWifiSSID+0x140>
            	} else if(page == 5) {
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2b05      	cmp	r3, #5
 8007336:	d10b      	bne.n	8007350 <takeWifiSSID+0x140>
            		cursorPosition = 1;
 8007338:	2301      	movs	r3, #1
 800733a:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800733c:	2301      	movs	r3, #1
 800733e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007340:	2101      	movs	r1, #1
 8007342:	2002      	movs	r0, #2
 8007344:	f7f9 fee4 	bl	8001110 <printTemplate>
 8007348:	e002      	b.n	8007350 <takeWifiSSID+0x140>
            	}
            } else {
            	cursorPosition++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3301      	adds	r3, #1
 800734e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007350:	2096      	movs	r0, #150	; 0x96
 8007352:	f001 fb13 	bl	800897c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007356:	2108      	movs	r1, #8
 8007358:	4867      	ldr	r0, [pc, #412]	; (80074f8 <takeWifiSSID+0x2e8>)
 800735a:	f002 f8df 	bl	800951c <HAL_GPIO_ReadPin>
 800735e:	4603      	mov	r3, r0
 8007360:	2b01      	cmp	r3, #1
 8007362:	d149      	bne.n	80073f8 <takeWifiSSID+0x1e8>
        	if(cursorPosition < 1) {
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	dc01      	bgt.n	800736e <takeWifiSSID+0x15e>
        		cursorPosition = 80;
 800736a:	2350      	movs	r3, #80	; 0x50
 800736c:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d13b      	bne.n	80073ec <takeWifiSSID+0x1dc>
            	if(page == 1) {
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d108      	bne.n	800738c <takeWifiSSID+0x17c>
            		cursorPosition = 16;
 800737a:	2310      	movs	r3, #16
 800737c:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800737e:	2305      	movs	r3, #5
 8007380:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007382:	2105      	movs	r1, #5
 8007384:	2002      	movs	r0, #2
 8007386:	f7f9 fec3 	bl	8001110 <printTemplate>
 800738a:	e032      	b.n	80073f2 <takeWifiSSID+0x1e2>
            	} else if(page == 2) {
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2b02      	cmp	r3, #2
 8007390:	d108      	bne.n	80073a4 <takeWifiSSID+0x194>
            		cursorPosition = 16;
 8007392:	2310      	movs	r3, #16
 8007394:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007396:	2301      	movs	r3, #1
 8007398:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800739a:	2101      	movs	r1, #1
 800739c:	2002      	movs	r0, #2
 800739e:	f7f9 feb7 	bl	8001110 <printTemplate>
 80073a2:	e026      	b.n	80073f2 <takeWifiSSID+0x1e2>
            	} else if(page == 3) {
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d108      	bne.n	80073bc <takeWifiSSID+0x1ac>
            		cursorPosition = 16;
 80073aa:	2310      	movs	r3, #16
 80073ac:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80073ae:	2302      	movs	r3, #2
 80073b0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80073b2:	2102      	movs	r1, #2
 80073b4:	2002      	movs	r0, #2
 80073b6:	f7f9 feab 	bl	8001110 <printTemplate>
 80073ba:	e01a      	b.n	80073f2 <takeWifiSSID+0x1e2>
            	} else if(page == 4) {
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b04      	cmp	r3, #4
 80073c0:	d108      	bne.n	80073d4 <takeWifiSSID+0x1c4>
            		cursorPosition = 16;
 80073c2:	2310      	movs	r3, #16
 80073c4:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80073c6:	2303      	movs	r3, #3
 80073c8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80073ca:	2103      	movs	r1, #3
 80073cc:	2002      	movs	r0, #2
 80073ce:	f7f9 fe9f 	bl	8001110 <printTemplate>
 80073d2:	e00e      	b.n	80073f2 <takeWifiSSID+0x1e2>
            	} else if(page == 5) {
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b05      	cmp	r3, #5
 80073d8:	d10b      	bne.n	80073f2 <takeWifiSSID+0x1e2>
            		cursorPosition = 16;
 80073da:	2310      	movs	r3, #16
 80073dc:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80073de:	2304      	movs	r3, #4
 80073e0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 80073e2:	2104      	movs	r1, #4
 80073e4:	2002      	movs	r0, #2
 80073e6:	f7f9 fe93 	bl	8001110 <printTemplate>
 80073ea:	e002      	b.n	80073f2 <takeWifiSSID+0x1e2>
            	}
            } else {
            	cursorPosition--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80073f2:	2096      	movs	r0, #150	; 0x96
 80073f4:	f001 fac2 	bl	800897c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80073f8:	2102      	movs	r1, #2
 80073fa:	4839      	ldr	r0, [pc, #228]	; (80074e0 <takeWifiSSID+0x2d0>)
 80073fc:	f002 f88e 	bl	800951c <HAL_GPIO_ReadPin>
 8007400:	4603      	mov	r3, r0
 8007402:	2b01      	cmp	r3, #1
 8007404:	d123      	bne.n	800744e <takeWifiSSID+0x23e>
        	//wifiSSID[arrayPosition] = charactersArray[cursorPosition - 1];
            //wifiSSIDInt[arrayPosition] = cursorPosition - 1;
            eepromData[eepromVal] = cursorPosition - 1;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	3b01      	subs	r3, #1
 800740c:	b2d9      	uxtb	r1, r3
 800740e:	4a38      	ldr	r2, [pc, #224]	; (80074f0 <takeWifiSSID+0x2e0>)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4413      	add	r3, r2
 8007414:	460a      	mov	r2, r1
 8007416:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[arrayPosition]);
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	b2d9      	uxtb	r1, r3
 800741c:	4a31      	ldr	r2, [pc, #196]	; (80074e4 <takeWifiSSID+0x2d4>)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	4413      	add	r3, r2
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	2001      	movs	r0, #1
 8007428:	f000 fd67 	bl	8007efa <lcd_print_char>

            writeLoc++;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	3301      	adds	r3, #1
 8007430:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	3301      	adds	r3, #1
 8007436:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3301      	adds	r3, #1
 800743c:	607b      	str	r3, [r7, #4]

            //wifiSSID[arrayPosition] = '\0';
            //wifiSSIDInt[arrayPosition] = '\0';
            eepromData[eepromVal] = '\0';
 800743e:	4a2c      	ldr	r2, [pc, #176]	; (80074f0 <takeWifiSSID+0x2e0>)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4413      	add	r3, r2
 8007444:	2200      	movs	r2, #0
 8007446:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007448:	2096      	movs	r0, #150	; 0x96
 800744a:	f001 fa97 	bl	800897c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800744e:	2104      	movs	r1, #4
 8007450:	4823      	ldr	r0, [pc, #140]	; (80074e0 <takeWifiSSID+0x2d0>)
 8007452:	f002 f863 	bl	800951c <HAL_GPIO_ReadPin>
 8007456:	4603      	mov	r3, r0
 8007458:	2b01      	cmp	r3, #1
 800745a:	d134      	bne.n	80074c6 <takeWifiSSID+0x2b6>
        	if(strlen(wifiSSID) >= 1) {
 800745c:	4b21      	ldr	r3, [pc, #132]	; (80074e4 <takeWifiSSID+0x2d4>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d02d      	beq.n	80074c0 <takeWifiSSID+0x2b0>
        		//wifiSSID[arrayPosition] = '\0';
        		//wifiSSIDInt[arrayPosition] = '\0';
        		eepromData[eepromVal] = '\0';
 8007464:	4a22      	ldr	r2, [pc, #136]	; (80074f0 <takeWifiSSID+0x2e0>)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4413      	add	r3, r2
 800746a:	2200      	movs	r2, #0
 800746c:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b07      	cmp	r3, #7
 8007472:	dd03      	ble.n	800747c <takeWifiSSID+0x26c>
        			writeLoc--;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	3b01      	subs	r3, #1
 8007478:	613b      	str	r3, [r7, #16]
 800747a:	e004      	b.n	8007486 <takeWifiSSID+0x276>
        		} else if(writeLoc < 7) {
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	2b06      	cmp	r3, #6
 8007480:	dc01      	bgt.n	8007486 <takeWifiSSID+0x276>
        			writeLoc = 7;
 8007482:	2307      	movs	r3, #7
 8007484:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	dd06      	ble.n	800749a <takeWifiSSID+0x28a>
        			arrayPosition--;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	3b01      	subs	r3, #1
 8007490:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3b01      	subs	r3, #1
 8007496:	607b      	str	r3, [r7, #4]
 8007498:	e007      	b.n	80074aa <takeWifiSSID+0x29a>
        		} else if(arrayPosition < 0) {
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	da04      	bge.n	80074aa <takeWifiSSID+0x29a>
        			arrayPosition = 0;
 80074a0:	2300      	movs	r3, #0
 80074a2:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 80074a4:	4b0d      	ldr	r3, [pc, #52]	; (80074dc <takeWifiSSID+0x2cc>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	3306      	adds	r3, #6
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	4619      	mov	r1, r3
 80074b4:	2001      	movs	r0, #1
 80074b6:	f000 fd41 	bl	8007f3c <lcd_delete_char>
        		HAL_Delay(50);
 80074ba:	2032      	movs	r0, #50	; 0x32
 80074bc:	f001 fa5e 	bl	800897c <HAL_Delay>
        	}

        	HAL_Delay(150);
 80074c0:	2096      	movs	r0, #150	; 0x96
 80074c2:	f001 fa5b 	bl	800897c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	4619      	mov	r1, r3
 80074cc:	2002      	movs	r0, #2
 80074ce:	f000 fce0 	bl	8007e92 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80074d2:	e6b8      	b.n	8007246 <takeWifiSSID+0x36>
    }
}
 80074d4:	bf00      	nop
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000008 	.word	0x20000008
 80074e0:	40010800 	.word	0x40010800
 80074e4:	2000019c 	.word	0x2000019c
 80074e8:	0800df54 	.word	0x0800df54
 80074ec:	0800df68 	.word	0x0800df68
 80074f0:	20000118 	.word	0x20000118
 80074f4:	200003a8 	.word	0x200003a8
 80074f8:	40011000 	.word	0x40011000

080074fc <takeWifiPass>:

void takeWifiPass() {
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08a      	sub	sp, #40	; 0x28
 8007500:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 8007502:	2001      	movs	r0, #1
 8007504:	f000 fd42 	bl	8007f8c <lcd_cursor>

    resetEEPROM4Wifi(3);
 8007508:	2003      	movs	r0, #3
 800750a:	f7f9 f99d 	bl	8000848 <resetEEPROM4Wifi>
    HAL_Delay(100);
 800750e:	2064      	movs	r0, #100	; 0x64
 8007510:	f001 fa34 	bl	800897c <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007514:	2301      	movs	r3, #1
 8007516:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterlerin yazılacağı başlangıç karakteri
 8007518:	2307      	movs	r3, #7
 800751a:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının seçim yaparken kullandığı işaretçi değişkeni
 800751c:	2301      	movs	r3, #1
 800751e:	60fb      	str	r3, [r7, #12]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarmak için kullanılacak olan değişken
 8007520:	2300      	movs	r3, #0
 8007522:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma aktarırken kullanılacak olan değişken
 8007524:	4b9e      	ldr	r3, [pc, #632]	; (80077a0 <takeWifiPass+0x2a4>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 800752a:	2101      	movs	r1, #1
 800752c:	2003      	movs	r0, #3
 800752e:	f7f9 fdef 	bl	8001110 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007532:	2108      	movs	r1, #8
 8007534:	489b      	ldr	r0, [pc, #620]	; (80077a4 <takeWifiPass+0x2a8>)
 8007536:	f001 fff1 	bl	800951c <HAL_GPIO_ReadPin>
 800753a:	4603      	mov	r3, r0
 800753c:	2b01      	cmp	r3, #1
 800753e:	d12b      	bne.n	8007598 <takeWifiPass+0x9c>
            lcd_cursor(0);
 8007540:	2000      	movs	r0, #0
 8007542:	f000 fd23 	bl	8007f8c <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8007546:	4898      	ldr	r0, [pc, #608]	; (80077a8 <takeWifiPass+0x2ac>)
 8007548:	f7f8 fe6c 	bl	8000224 <strlen>
 800754c:	4603      	mov	r3, r0
 800754e:	2b14      	cmp	r3, #20
 8007550:	d910      	bls.n	8007574 <takeWifiPass+0x78>
                lcd_clear();
 8007552:	f000 fce9 	bl	8007f28 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007556:	4a95      	ldr	r2, [pc, #596]	; (80077ac <takeWifiPass+0x2b0>)
 8007558:	2101      	movs	r1, #1
 800755a:	2001      	movs	r0, #1
 800755c:	f000 fcb8 	bl	8007ed0 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8007560:	4a93      	ldr	r2, [pc, #588]	; (80077b0 <takeWifiPass+0x2b4>)
 8007562:	2101      	movs	r1, #1
 8007564:	2002      	movs	r0, #2
 8007566:	f000 fcb3 	bl	8007ed0 <lcd_print>
                HAL_Delay(1200);
 800756a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800756e:	f001 fa05 	bl	800897c <HAL_Delay>
                goto mainPASSSection;
 8007572:	e7c6      	b.n	8007502 <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007574:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007578:	9302      	str	r3, [sp, #8]
 800757a:	236e      	movs	r3, #110	; 0x6e
 800757c:	9301      	str	r3, [sp, #4]
 800757e:	4b8d      	ldr	r3, [pc, #564]	; (80077b4 <takeWifiPass+0x2b8>)
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	236e      	movs	r3, #110	; 0x6e
 8007584:	2200      	movs	r2, #0
 8007586:	21a0      	movs	r1, #160	; 0xa0
 8007588:	488b      	ldr	r0, [pc, #556]	; (80077b8 <takeWifiPass+0x2bc>)
 800758a:	f002 fa81 	bl	8009a90 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 800758e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007592:	f001 f9f3 	bl	800897c <HAL_Delay>

            	break;
 8007596:	e0fe      	b.n	8007796 <takeWifiPass+0x29a>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007598:	2101      	movs	r1, #1
 800759a:	4882      	ldr	r0, [pc, #520]	; (80077a4 <takeWifiPass+0x2a8>)
 800759c:	f001 ffbe 	bl	800951c <HAL_GPIO_ReadPin>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d14d      	bne.n	8007642 <takeWifiPass+0x146>
        	if(cursorPosition > 80) {
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b50      	cmp	r3, #80	; 0x50
 80075aa:	dd01      	ble.n	80075b0 <takeWifiPass+0xb4>
        	    cursorPosition = 1;
 80075ac:	2301      	movs	r3, #1
 80075ae:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b10      	cmp	r3, #16
 80075b4:	d13f      	bne.n	8007636 <takeWifiPass+0x13a>
            	if(page == 1) {
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d109      	bne.n	80075d0 <takeWifiPass+0xd4>
            		cursorPosition = 1;
 80075bc:	2301      	movs	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
            		page++;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	3301      	adds	r3, #1
 80075c4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80075c6:	2102      	movs	r1, #2
 80075c8:	2003      	movs	r0, #3
 80075ca:	f7f9 fda1 	bl	8001110 <printTemplate>
 80075ce:	e035      	b.n	800763c <takeWifiPass+0x140>
            	} else if(page == 2) {
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d109      	bne.n	80075ea <takeWifiPass+0xee>
            		cursorPosition = 1;
 80075d6:	2301      	movs	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]
            		page++;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	3301      	adds	r3, #1
 80075de:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80075e0:	2103      	movs	r1, #3
 80075e2:	2003      	movs	r0, #3
 80075e4:	f7f9 fd94 	bl	8001110 <printTemplate>
 80075e8:	e028      	b.n	800763c <takeWifiPass+0x140>
            	} else if(page == 3) {
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d109      	bne.n	8007604 <takeWifiPass+0x108>
            		cursorPosition = 1;
 80075f0:	2301      	movs	r3, #1
 80075f2:	60fb      	str	r3, [r7, #12]
            		page++;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	3301      	adds	r3, #1
 80075f8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80075fa:	2104      	movs	r1, #4
 80075fc:	2003      	movs	r0, #3
 80075fe:	f7f9 fd87 	bl	8001110 <printTemplate>
 8007602:	e01b      	b.n	800763c <takeWifiPass+0x140>
            	} else if(page == 4) {
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2b04      	cmp	r3, #4
 8007608:	d109      	bne.n	800761e <takeWifiPass+0x122>
            		cursorPosition = 1;
 800760a:	2301      	movs	r3, #1
 800760c:	60fb      	str	r3, [r7, #12]
            		page++;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	3301      	adds	r3, #1
 8007612:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007614:	2105      	movs	r1, #5
 8007616:	2003      	movs	r0, #3
 8007618:	f7f9 fd7a 	bl	8001110 <printTemplate>
 800761c:	e00e      	b.n	800763c <takeWifiPass+0x140>
            	} else if(page == 5) {
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b05      	cmp	r3, #5
 8007622:	d10b      	bne.n	800763c <takeWifiPass+0x140>
            		cursorPosition = 1;
 8007624:	2301      	movs	r3, #1
 8007626:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007628:	2301      	movs	r3, #1
 800762a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800762c:	2101      	movs	r1, #1
 800762e:	2003      	movs	r0, #3
 8007630:	f7f9 fd6e 	bl	8001110 <printTemplate>
 8007634:	e002      	b.n	800763c <takeWifiPass+0x140>
            	}
            } else {
            	cursorPosition++;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3301      	adds	r3, #1
 800763a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800763c:	2096      	movs	r0, #150	; 0x96
 800763e:	f001 f99d 	bl	800897c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007642:	2108      	movs	r1, #8
 8007644:	485d      	ldr	r0, [pc, #372]	; (80077bc <takeWifiPass+0x2c0>)
 8007646:	f001 ff69 	bl	800951c <HAL_GPIO_ReadPin>
 800764a:	4603      	mov	r3, r0
 800764c:	2b01      	cmp	r3, #1
 800764e:	d149      	bne.n	80076e4 <takeWifiPass+0x1e8>
        	if(cursorPosition < 1) {
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	dc01      	bgt.n	800765a <takeWifiPass+0x15e>
        	    cursorPosition = 80;
 8007656:	2350      	movs	r3, #80	; 0x50
 8007658:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d13b      	bne.n	80076d8 <takeWifiPass+0x1dc>
            	if(page == 1) {
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d108      	bne.n	8007678 <takeWifiPass+0x17c>
            		cursorPosition = 16;
 8007666:	2310      	movs	r3, #16
 8007668:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800766a:	2305      	movs	r3, #5
 800766c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800766e:	2105      	movs	r1, #5
 8007670:	2003      	movs	r0, #3
 8007672:	f7f9 fd4d 	bl	8001110 <printTemplate>
 8007676:	e032      	b.n	80076de <takeWifiPass+0x1e2>
            	} else if(page == 2) {
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d108      	bne.n	8007690 <takeWifiPass+0x194>
            		cursorPosition = 16;
 800767e:	2310      	movs	r3, #16
 8007680:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007682:	2301      	movs	r3, #1
 8007684:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007686:	2101      	movs	r1, #1
 8007688:	2003      	movs	r0, #3
 800768a:	f7f9 fd41 	bl	8001110 <printTemplate>
 800768e:	e026      	b.n	80076de <takeWifiPass+0x1e2>
            	} else if(page == 3) {
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2b03      	cmp	r3, #3
 8007694:	d108      	bne.n	80076a8 <takeWifiPass+0x1ac>
            		cursorPosition = 16;
 8007696:	2310      	movs	r3, #16
 8007698:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800769a:	2302      	movs	r3, #2
 800769c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800769e:	2102      	movs	r1, #2
 80076a0:	2003      	movs	r0, #3
 80076a2:	f7f9 fd35 	bl	8001110 <printTemplate>
 80076a6:	e01a      	b.n	80076de <takeWifiPass+0x1e2>
            	} else if(page == 4) {
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d108      	bne.n	80076c0 <takeWifiPass+0x1c4>
            		cursorPosition = 16;
 80076ae:	2310      	movs	r3, #16
 80076b0:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80076b2:	2303      	movs	r3, #3
 80076b4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80076b6:	2103      	movs	r1, #3
 80076b8:	2003      	movs	r0, #3
 80076ba:	f7f9 fd29 	bl	8001110 <printTemplate>
 80076be:	e00e      	b.n	80076de <takeWifiPass+0x1e2>
            	} else if(page == 5) {
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2b05      	cmp	r3, #5
 80076c4:	d10b      	bne.n	80076de <takeWifiPass+0x1e2>
            		cursorPosition = 16;
 80076c6:	2310      	movs	r3, #16
 80076c8:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80076ca:	2304      	movs	r3, #4
 80076cc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80076ce:	2104      	movs	r1, #4
 80076d0:	2003      	movs	r0, #3
 80076d2:	f7f9 fd1d 	bl	8001110 <printTemplate>
 80076d6:	e002      	b.n	80076de <takeWifiPass+0x1e2>
            	}
            } else {
            	cursorPosition--;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3b01      	subs	r3, #1
 80076dc:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80076de:	2096      	movs	r0, #150	; 0x96
 80076e0:	f001 f94c 	bl	800897c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80076e4:	2102      	movs	r1, #2
 80076e6:	482f      	ldr	r0, [pc, #188]	; (80077a4 <takeWifiPass+0x2a8>)
 80076e8:	f001 ff18 	bl	800951c <HAL_GPIO_ReadPin>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d123      	bne.n	800773a <takeWifiPass+0x23e>
        	//wifiPass[arrayPos] = charactersArray[cursorPosition - 1];
        	//wifiPassInt[arrayPos] = cursorPosition - 1;
        	eepromData[eepromVal] = cursorPosition - 1;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b2d9      	uxtb	r1, r3
 80076fa:	4a2e      	ldr	r2, [pc, #184]	; (80077b4 <takeWifiPass+0x2b8>)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4413      	add	r3, r2
 8007700:	460a      	mov	r2, r1
 8007702:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[arrayPos]);
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	b2d9      	uxtb	r1, r3
 8007708:	4a27      	ldr	r2, [pc, #156]	; (80077a8 <takeWifiPass+0x2ac>)
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	4413      	add	r3, r2
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	2001      	movs	r0, #1
 8007714:	f000 fbf1 	bl	8007efa <lcd_print_char>

            writeLoc++;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	3301      	adds	r3, #1
 800771c:	613b      	str	r3, [r7, #16]
            arrayPos++;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	3301      	adds	r3, #1
 8007722:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3301      	adds	r3, #1
 8007728:	607b      	str	r3, [r7, #4]

            //wifiPass[arrayPos] = '\0';
            //wifiPassInt[arrayPos] = '\0';
            eepromData[eepromVal] = '\0';
 800772a:	4a22      	ldr	r2, [pc, #136]	; (80077b4 <takeWifiPass+0x2b8>)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4413      	add	r3, r2
 8007730:	2200      	movs	r2, #0
 8007732:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007734:	2096      	movs	r0, #150	; 0x96
 8007736:	f001 f921 	bl	800897c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800773a:	2104      	movs	r1, #4
 800773c:	4819      	ldr	r0, [pc, #100]	; (80077a4 <takeWifiPass+0x2a8>)
 800773e:	f001 feed 	bl	800951c <HAL_GPIO_ReadPin>
 8007742:	4603      	mov	r3, r0
 8007744:	2b01      	cmp	r3, #1
 8007746:	d11f      	bne.n	8007788 <takeWifiPass+0x28c>
            if(strlen(wifiPass) >= 1) {
 8007748:	4b17      	ldr	r3, [pc, #92]	; (80077a8 <takeWifiPass+0x2ac>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d018      	beq.n	8007782 <takeWifiPass+0x286>
            	//wifiPass[arrayPos] = '\0';
            	//wifiPassInt[arrayPos] = '\0';
            	eepromData[eepromVal] = '\0';
 8007750:	4a18      	ldr	r2, [pc, #96]	; (80077b4 <takeWifiPass+0x2b8>)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4413      	add	r3, r2
 8007756:	2200      	movs	r2, #0
 8007758:	701a      	strb	r2, [r3, #0]

            	writeLoc--;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	3b01      	subs	r3, #1
 800775e:	613b      	str	r3, [r7, #16]
            	arrayPos--;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	3b01      	subs	r3, #1
 8007764:	60bb      	str	r3, [r7, #8]
            	eepromVal--;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	3b01      	subs	r3, #1
 800776a:	607b      	str	r3, [r7, #4]

            	lcd_delete_char(1, 6+arrayPos);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	3306      	adds	r3, #6
 8007772:	b2db      	uxtb	r3, r3
 8007774:	4619      	mov	r1, r3
 8007776:	2001      	movs	r0, #1
 8007778:	f000 fbe0 	bl	8007f3c <lcd_delete_char>
            	HAL_Delay(50);
 800777c:	2032      	movs	r0, #50	; 0x32
 800777e:	f001 f8fd 	bl	800897c <HAL_Delay>
            }

            HAL_Delay(150);
 8007782:	2096      	movs	r0, #150	; 0x96
 8007784:	f001 f8fa 	bl	800897c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	b2db      	uxtb	r3, r3
 800778c:	4619      	mov	r1, r3
 800778e:	2002      	movs	r0, #2
 8007790:	f000 fb7f 	bl	8007e92 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007794:	e6cd      	b.n	8007532 <takeWifiPass+0x36>
    }
}
 8007796:	bf00      	nop
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	2000000c 	.word	0x2000000c
 80077a4:	40010800 	.word	0x40010800
 80077a8:	200001b0 	.word	0x200001b0
 80077ac:	0800df54 	.word	0x0800df54
 80077b0:	0800df7c 	.word	0x0800df7c
 80077b4:	20000118 	.word	0x20000118
 80077b8:	200003a8 	.word	0x200003a8
 80077bc:	40011000 	.word	0x40011000

080077c0 <mergeData>:

char* mergeData() {
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b09c      	sub	sp, #112	; 0x70
 80077c4:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 80077c6:	2300      	movs	r3, #0
 80077c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077ce:	2228      	movs	r2, #40	; 0x28
 80077d0:	2100      	movs	r1, #0
 80077d2:	4618      	mov	r0, r3
 80077d4:	f005 f867 	bl	800c8a6 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80077d8:	4b67      	ldr	r3, [pc, #412]	; (8007978 <mergeData+0x1b8>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	713b      	strb	r3, [r7, #4]
 80077de:	4b67      	ldr	r3, [pc, #412]	; (800797c <mergeData+0x1bc>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	717b      	strb	r3, [r7, #5]
 80077e4:	4b66      	ldr	r3, [pc, #408]	; (8007980 <mergeData+0x1c0>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	71bb      	strb	r3, [r7, #6]
 80077ea:	4b66      	ldr	r3, [pc, #408]	; (8007984 <mergeData+0x1c4>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	71fb      	strb	r3, [r7, #7]
 80077f0:	4b65      	ldr	r3, [pc, #404]	; (8007988 <mergeData+0x1c8>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	723b      	strb	r3, [r7, #8]
 80077f6:	4b65      	ldr	r3, [pc, #404]	; (800798c <mergeData+0x1cc>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	727b      	strb	r3, [r7, #9]
 80077fc:	4b64      	ldr	r3, [pc, #400]	; (8007990 <mergeData+0x1d0>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	72bb      	strb	r3, [r7, #10]
 8007802:	4b64      	ldr	r3, [pc, #400]	; (8007994 <mergeData+0x1d4>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	72fb      	strb	r3, [r7, #11]
 8007808:	4b63      	ldr	r3, [pc, #396]	; (8007998 <mergeData+0x1d8>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	733b      	strb	r3, [r7, #12]
 800780e:	4b63      	ldr	r3, [pc, #396]	; (800799c <mergeData+0x1dc>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	737b      	strb	r3, [r7, #13]
 8007814:	4b62      	ldr	r3, [pc, #392]	; (80079a0 <mergeData+0x1e0>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	73bb      	strb	r3, [r7, #14]
 800781a:	4b62      	ldr	r3, [pc, #392]	; (80079a4 <mergeData+0x1e4>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	73fb      	strb	r3, [r7, #15]
 8007820:	4b61      	ldr	r3, [pc, #388]	; (80079a8 <mergeData+0x1e8>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	743b      	strb	r3, [r7, #16]
 8007826:	4b61      	ldr	r3, [pc, #388]	; (80079ac <mergeData+0x1ec>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	747b      	strb	r3, [r7, #17]
 800782c:	4b60      	ldr	r3, [pc, #384]	; (80079b0 <mergeData+0x1f0>)
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	74bb      	strb	r3, [r7, #18]
 8007832:	4b60      	ldr	r3, [pc, #384]	; (80079b4 <mergeData+0x1f4>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	74fb      	strb	r3, [r7, #19]
 8007838:	4b5f      	ldr	r3, [pc, #380]	; (80079b8 <mergeData+0x1f8>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	753b      	strb	r3, [r7, #20]
 800783e:	4b5f      	ldr	r3, [pc, #380]	; (80079bc <mergeData+0x1fc>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	757b      	strb	r3, [r7, #21]
 8007844:	4b5e      	ldr	r3, [pc, #376]	; (80079c0 <mergeData+0x200>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	75bb      	strb	r3, [r7, #22]
 800784a:	4b5e      	ldr	r3, [pc, #376]	; (80079c4 <mergeData+0x204>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	75fb      	strb	r3, [r7, #23]
 8007850:	4b5d      	ldr	r3, [pc, #372]	; (80079c8 <mergeData+0x208>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	763b      	strb	r3, [r7, #24]
 8007856:	4b5d      	ldr	r3, [pc, #372]	; (80079cc <mergeData+0x20c>)
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	767b      	strb	r3, [r7, #25]
 800785c:	4b5c      	ldr	r3, [pc, #368]	; (80079d0 <mergeData+0x210>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	76bb      	strb	r3, [r7, #26]
 8007862:	4b5c      	ldr	r3, [pc, #368]	; (80079d4 <mergeData+0x214>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	76fb      	strb	r3, [r7, #27]
 8007868:	4b5b      	ldr	r3, [pc, #364]	; (80079d8 <mergeData+0x218>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	773b      	strb	r3, [r7, #28]
 800786e:	4b5b      	ldr	r3, [pc, #364]	; (80079dc <mergeData+0x21c>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	777b      	strb	r3, [r7, #29]
 8007874:	4b5a      	ldr	r3, [pc, #360]	; (80079e0 <mergeData+0x220>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	77bb      	strb	r3, [r7, #30]
 800787a:	4b5a      	ldr	r3, [pc, #360]	; (80079e4 <mergeData+0x224>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	77fb      	strb	r3, [r7, #31]
 8007880:	4b59      	ldr	r3, [pc, #356]	; (80079e8 <mergeData+0x228>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	f887 3020 	strb.w	r3, [r7, #32]
 8007888:	4b58      	ldr	r3, [pc, #352]	; (80079ec <mergeData+0x22c>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007890:	4b57      	ldr	r3, [pc, #348]	; (80079f0 <mergeData+0x230>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007898:	4b56      	ldr	r3, [pc, #344]	; (80079f4 <mergeData+0x234>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078a0:	4b55      	ldr	r3, [pc, #340]	; (80079f8 <mergeData+0x238>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80078a8:	4b54      	ldr	r3, [pc, #336]	; (80079fc <mergeData+0x23c>)
 80078aa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80078ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 80078b2:	4b52      	ldr	r3, [pc, #328]	; (80079fc <mergeData+0x23c>)
 80078b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80078b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 80078bc:	4b4f      	ldr	r3, [pc, #316]	; (80079fc <mergeData+0x23c>)
 80078be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80078c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 80078c6:	4b4d      	ldr	r3, [pc, #308]	; (80079fc <mergeData+0x23c>)
 80078c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80078cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 80078d0:	4b4a      	ldr	r3, [pc, #296]	; (80079fc <mergeData+0x23c>)
 80078d2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80078d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 80078da:	4b48      	ldr	r3, [pc, #288]	; (80079fc <mergeData+0x23c>)
 80078dc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80078e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 80078e4:	4b45      	ldr	r3, [pc, #276]	; (80079fc <mergeData+0x23c>)
 80078e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80078ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 80078ee:	4b43      	ldr	r3, [pc, #268]	; (80079fc <mergeData+0x23c>)
 80078f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80078f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 80078f8:	4b40      	ldr	r3, [pc, #256]	; (80079fc <mergeData+0x23c>)
 80078fa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80078fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007902:	4b3e      	ldr	r3, [pc, #248]	; (80079fc <mergeData+0x23c>)
 8007904:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007908:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800790c:	2306      	movs	r3, #6
 800790e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007912:	2300      	movs	r3, #0
 8007914:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007916:	e015      	b.n	8007944 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007918:	1d3a      	adds	r2, r7, #4
 800791a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800791c:	4413      	add	r3, r2
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	461a      	mov	r2, r3
 8007922:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007926:	4936      	ldr	r1, [pc, #216]	; (8007a00 <mergeData+0x240>)
 8007928:	4618      	mov	r0, r3
 800792a:	f004 ff35 	bl	800c798 <siprintf>
	    strcat(combinedString, temp);
 800792e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007932:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007936:	4611      	mov	r1, r2
 8007938:	4618      	mov	r0, r3
 800793a:	f004 ff8f 	bl	800c85c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800793e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007940:	3301      	adds	r3, #1
 8007942:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007946:	2b2b      	cmp	r3, #43	; 0x2b
 8007948:	d9e6      	bls.n	8007918 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800794a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800794e:	4618      	mov	r0, r3
 8007950:	f7f8 fc68 	bl	8000224 <strlen>
 8007954:	4603      	mov	r3, r0
 8007956:	3301      	adds	r3, #1
 8007958:	4618      	mov	r0, r3
 800795a:	f004 fe69 	bl	800c630 <malloc>
 800795e:	4603      	mov	r3, r0
 8007960:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 8007962:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007966:	4619      	mov	r1, r3
 8007968:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800796a:	f004 ffe1 	bl	800c930 <strcpy>
	return result;
 800796e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8007970:	4618      	mov	r0, r3
 8007972:	3770      	adds	r7, #112	; 0x70
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	2000022f 	.word	0x2000022f
 800797c:	20000221 	.word	0x20000221
 8007980:	20000224 	.word	0x20000224
 8007984:	20000225 	.word	0x20000225
 8007988:	20000226 	.word	0x20000226
 800798c:	2000022d 	.word	0x2000022d
 8007990:	20000227 	.word	0x20000227
 8007994:	20000228 	.word	0x20000228
 8007998:	2000022c 	.word	0x2000022c
 800799c:	20000229 	.word	0x20000229
 80079a0:	20000239 	.word	0x20000239
 80079a4:	2000022a 	.word	0x2000022a
 80079a8:	2000023a 	.word	0x2000023a
 80079ac:	2000022b 	.word	0x2000022b
 80079b0:	2000023b 	.word	0x2000023b
 80079b4:	2000022e 	.word	0x2000022e
 80079b8:	20000230 	.word	0x20000230
 80079bc:	20000231 	.word	0x20000231
 80079c0:	20000232 	.word	0x20000232
 80079c4:	20000233 	.word	0x20000233
 80079c8:	20000234 	.word	0x20000234
 80079cc:	20000235 	.word	0x20000235
 80079d0:	20000236 	.word	0x20000236
 80079d4:	20000237 	.word	0x20000237
 80079d8:	20000238 	.word	0x20000238
 80079dc:	2000023c 	.word	0x2000023c
 80079e0:	2000023e 	.word	0x2000023e
 80079e4:	2000021d 	.word	0x2000021d
 80079e8:	2000021e 	.word	0x2000021e
 80079ec:	20000000 	.word	0x20000000
 80079f0:	20000001 	.word	0x20000001
 80079f4:	2000021f 	.word	0x2000021f
 80079f8:	20000241 	.word	0x20000241
 80079fc:	20000118 	.word	0x20000118
 8007a00:	0800df90 	.word	0x0800df90

08007a04 <convertAndSendData>:

void convertAndSendData() {
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af02      	add	r7, sp, #8
	if(dilSecim == 0) {
 8007a0a:	4b16      	ldr	r3, [pc, #88]	; (8007a64 <convertAndSendData+0x60>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007a12:	4a15      	ldr	r2, [pc, #84]	; (8007a68 <convertAndSendData+0x64>)
 8007a14:	2101      	movs	r1, #1
 8007a16:	2001      	movs	r0, #1
 8007a18:	f000 fa5a 	bl	8007ed0 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007a1c:	4a13      	ldr	r2, [pc, #76]	; (8007a6c <convertAndSendData+0x68>)
 8007a1e:	2101      	movs	r1, #1
 8007a20:	2002      	movs	r0, #2
 8007a22:	f000 fa55 	bl	8007ed0 <lcd_print>
 8007a26:	e009      	b.n	8007a3c <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007a28:	4a11      	ldr	r2, [pc, #68]	; (8007a70 <convertAndSendData+0x6c>)
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	2001      	movs	r0, #1
 8007a2e:	f000 fa4f 	bl	8007ed0 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007a32:	4a10      	ldr	r2, [pc, #64]	; (8007a74 <convertAndSendData+0x70>)
 8007a34:	2101      	movs	r1, #1
 8007a36:	2002      	movs	r0, #2
 8007a38:	f000 fa4a 	bl	8007ed0 <lcd_print>
	}

	sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8007a3c:	f7ff fec0 	bl	80077c0 <mergeData>
 8007a40:	4603      	mov	r3, r0
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	4b0c      	ldr	r3, [pc, #48]	; (8007a78 <convertAndSendData+0x74>)
 8007a46:	4a0d      	ldr	r2, [pc, #52]	; (8007a7c <convertAndSendData+0x78>)
 8007a48:	490d      	ldr	r1, [pc, #52]	; (8007a80 <convertAndSendData+0x7c>)
 8007a4a:	480e      	ldr	r0, [pc, #56]	; (8007a84 <convertAndSendData+0x80>)
 8007a4c:	f7f9 f826 	bl	8000a9c <sendMachineData>

	HAL_Delay(500);
 8007a50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a54:	f000 ff92 	bl	800897c <HAL_Delay>
	lcd_clear();
 8007a58:	f000 fa66 	bl	8007f28 <lcd_clear>
}
 8007a5c:	bf00      	nop
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000241 	.word	0x20000241
 8007a68:	0800df94 	.word	0x0800df94
 8007a6c:	0800dfa8 	.word	0x0800dfa8
 8007a70:	0800dfbc 	.word	0x0800dfbc
 8007a74:	0800dfd0 	.word	0x0800dfd0
 8007a78:	200001b0 	.word	0x200001b0
 8007a7c:	2000019c 	.word	0x2000019c
 8007a80:	20000190 	.word	0x20000190
 8007a84:	20000444 	.word	0x20000444

08007a88 <iotSetup>:

void iotSetup() {
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af04      	add	r7, sp, #16
	if(iotMode != 0) {
 8007a8e:	4b37      	ldr	r3, [pc, #220]	; (8007b6c <iotSetup+0xe4>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d017      	beq.n	8007ac6 <iotSetup+0x3e>
		if(strlen(machineID) != machineIDCharacterLimit) {
 8007a96:	4836      	ldr	r0, [pc, #216]	; (8007b70 <iotSetup+0xe8>)
 8007a98:	f7f8 fbc4 	bl	8000224 <strlen>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b0c      	cmp	r3, #12
 8007aa0:	d001      	beq.n	8007aa6 <iotSetup+0x1e>
			takeMachineID();
 8007aa2:	f7ff fa65 	bl	8006f70 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007aa6:	4833      	ldr	r0, [pc, #204]	; (8007b74 <iotSetup+0xec>)
 8007aa8:	f7f8 fbbc 	bl	8000224 <strlen>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d801      	bhi.n	8007ab6 <iotSetup+0x2e>
			takeWifiSSID();
 8007ab2:	f7ff fbad 	bl	8007210 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007ab6:	4830      	ldr	r0, [pc, #192]	; (8007b78 <iotSetup+0xf0>)
 8007ab8:	f7f8 fbb4 	bl	8000224 <strlen>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d801      	bhi.n	8007ac6 <iotSetup+0x3e>
			takeWifiPass();
 8007ac2:	f7ff fd1b 	bl	80074fc <takeWifiPass>
		}
	}

	if(setupCompleted != 1) {
 8007ac6:	4b2d      	ldr	r3, [pc, #180]	; (8007b7c <iotSetup+0xf4>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d03f      	beq.n	8007b4e <iotSetup+0xc6>
		takeIDSection:
 8007ace:	bf00      	nop
		if(checkMachineID(&huart1, machineID) == 1) {
 8007ad0:	4927      	ldr	r1, [pc, #156]	; (8007b70 <iotSetup+0xe8>)
 8007ad2:	482b      	ldr	r0, [pc, #172]	; (8007b80 <iotSetup+0xf8>)
 8007ad4:	f7f9 f872 	bl	8000bbc <checkMachineID>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d114      	bne.n	8007b08 <iotSetup+0x80>
			setupCompleted = 1;
 8007ade:	4b27      	ldr	r3, [pc, #156]	; (8007b7c <iotSetup+0xf4>)
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	701a      	strb	r2, [r3, #0]
			//EEPROMA yazma işlemini başlat
        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007ae4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007ae8:	9302      	str	r3, [sp, #8]
 8007aea:	236e      	movs	r3, #110	; 0x6e
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	4b25      	ldr	r3, [pc, #148]	; (8007b84 <iotSetup+0xfc>)
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	236e      	movs	r3, #110	; 0x6e
 8007af4:	2200      	movs	r2, #0
 8007af6:	21a0      	movs	r1, #160	; 0xa0
 8007af8:	4823      	ldr	r0, [pc, #140]	; (8007b88 <iotSetup+0x100>)
 8007afa:	f001 ffc9 	bl	8009a90 <HAL_I2C_Mem_Write>
        	HAL_Delay(1000);
 8007afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b02:	f000 ff3b 	bl	800897c <HAL_Delay>
 8007b06:	e022      	b.n	8007b4e <iotSetup+0xc6>
		} else {
			if(dilSecim == 1) {
 8007b08:	4b20      	ldr	r3, [pc, #128]	; (8007b8c <iotSetup+0x104>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d10a      	bne.n	8007b26 <iotSetup+0x9e>
				//türkçe hata mesajı
				lcd_print(1, 1, " BU ID MAKINEDE ");
 8007b10:	4a1f      	ldr	r2, [pc, #124]	; (8007b90 <iotSetup+0x108>)
 8007b12:	2101      	movs	r1, #1
 8007b14:	2001      	movs	r0, #1
 8007b16:	f000 f9db 	bl	8007ed0 <lcd_print>
				lcd_print(2, 1, "  KULLANILAMAZ  ");
 8007b1a:	4a1e      	ldr	r2, [pc, #120]	; (8007b94 <iotSetup+0x10c>)
 8007b1c:	2101      	movs	r1, #1
 8007b1e:	2002      	movs	r0, #2
 8007b20:	f000 f9d6 	bl	8007ed0 <lcd_print>
 8007b24:	e009      	b.n	8007b3a <iotSetup+0xb2>
			} else {
				//ingilizce hata mesajı
				lcd_print(1, 1, "ID NOT AVAILABLE");
 8007b26:	4a1c      	ldr	r2, [pc, #112]	; (8007b98 <iotSetup+0x110>)
 8007b28:	2101      	movs	r1, #1
 8007b2a:	2001      	movs	r0, #1
 8007b2c:	f000 f9d0 	bl	8007ed0 <lcd_print>
				lcd_print(2, 1, "FOR THIS MACHINE");
 8007b30:	4a1a      	ldr	r2, [pc, #104]	; (8007b9c <iotSetup+0x114>)
 8007b32:	2101      	movs	r1, #1
 8007b34:	2002      	movs	r0, #2
 8007b36:	f000 f9cb 	bl	8007ed0 <lcd_print>
			}

			HAL_Delay(1250);
 8007b3a:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007b3e:	f000 ff1d 	bl	800897c <HAL_Delay>
			//Tekrar id alma işlemi
			takeMachineID();
 8007b42:	f7ff fa15 	bl	8006f70 <takeMachineID>
			HAL_Delay(200);
 8007b46:	20c8      	movs	r0, #200	; 0xc8
 8007b48:	f000 ff18 	bl	800897c <HAL_Delay>
			goto takeIDSection;
 8007b4c:	e7c0      	b.n	8007ad0 <iotSetup+0x48>
		}
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007b4e:	4a0a      	ldr	r2, [pc, #40]	; (8007b78 <iotSetup+0xf0>)
 8007b50:	4908      	ldr	r1, [pc, #32]	; (8007b74 <iotSetup+0xec>)
 8007b52:	480b      	ldr	r0, [pc, #44]	; (8007b80 <iotSetup+0xf8>)
 8007b54:	f7f8 fef8 	bl	8000948 <ESP8266_Init>
	HAL_Delay(500);
 8007b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b5c:	f000 ff0e 	bl	800897c <HAL_Delay>
	convertAndSendData();
 8007b60:	f7ff ff50 	bl	8007a04 <convertAndSendData>
}
 8007b64:	bf00      	nop
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	2000023f 	.word	0x2000023f
 8007b70:	20000190 	.word	0x20000190
 8007b74:	2000019c 	.word	0x2000019c
 8007b78:	200001b0 	.word	0x200001b0
 8007b7c:	200001f8 	.word	0x200001f8
 8007b80:	20000444 	.word	0x20000444
 8007b84:	20000118 	.word	0x20000118
 8007b88:	200003a8 	.word	0x200003a8
 8007b8c:	20000241 	.word	0x20000241
 8007b90:	0800dfe4 	.word	0x0800dfe4
 8007b94:	0800dff8 	.word	0x0800dff8
 8007b98:	0800e00c 	.word	0x0800e00c
 8007b9c:	0800e020 	.word	0x0800e020

08007ba0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007baa:	79fb      	ldrb	r3, [r7, #7]
 8007bac:	f023 030f 	bic.w	r3, r3, #15
 8007bb0:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007bb8:	7b7b      	ldrb	r3, [r7, #13]
 8007bba:	f043 030c 	orr.w	r3, r3, #12
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007bc2:	7b7b      	ldrb	r3, [r7, #13]
 8007bc4:	f043 0308 	orr.w	r3, r3, #8
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007bcc:	7b3b      	ldrb	r3, [r7, #12]
 8007bce:	f043 030c 	orr.w	r3, r3, #12
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007bd6:	7b3b      	ldrb	r3, [r7, #12]
 8007bd8:	f043 0308 	orr.w	r3, r3, #8
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007be0:	bf00      	nop
 8007be2:	4825      	ldr	r0, [pc, #148]	; (8007c78 <lcd_send_cmd+0xd8>)
 8007be4:	f002 fac3 	bl	800a16e <HAL_I2C_GetError>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	d0f9      	beq.n	8007be2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007bee:	bf00      	nop
 8007bf0:	4821      	ldr	r0, [pc, #132]	; (8007c78 <lcd_send_cmd+0xd8>)
 8007bf2:	f002 faaf 	bl	800a154 <HAL_I2C_GetState>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b20      	cmp	r3, #32
 8007bfa:	d1f9      	bne.n	8007bf0 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007bfc:	4b1f      	ldr	r3, [pc, #124]	; (8007c7c <lcd_send_cmd+0xdc>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d116      	bne.n	8007c32 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]
 8007c08:	e00f      	b.n	8007c2a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	3310      	adds	r3, #16
 8007c0e:	443b      	add	r3, r7
 8007c10:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
 8007c16:	f022 0208 	bic.w	r2, r2, #8
 8007c1a:	b2d2      	uxtb	r2, r2
 8007c1c:	3310      	adds	r3, #16
 8007c1e:	443b      	add	r3, r7
 8007c20:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
 8007c26:	3301      	adds	r3, #1
 8007c28:	73fb      	strb	r3, [r7, #15]
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d9ec      	bls.n	8007c0a <lcd_send_cmd+0x6a>
 8007c30:	e015      	b.n	8007c5e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007c32:	2300      	movs	r3, #0
 8007c34:	73bb      	strb	r3, [r7, #14]
 8007c36:	e00f      	b.n	8007c58 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	3310      	adds	r3, #16
 8007c3c:	443b      	add	r3, r7
 8007c3e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	f042 0208 	orr.w	r2, r2, #8
 8007c48:	b2d2      	uxtb	r2, r2
 8007c4a:	3310      	adds	r3, #16
 8007c4c:	443b      	add	r3, r7
 8007c4e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	3301      	adds	r3, #1
 8007c56:	73bb      	strb	r3, [r7, #14]
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d9ec      	bls.n	8007c38 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007c5e:	f107 0208 	add.w	r2, r7, #8
 8007c62:	2364      	movs	r3, #100	; 0x64
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	2304      	movs	r3, #4
 8007c68:	214e      	movs	r1, #78	; 0x4e
 8007c6a:	4803      	ldr	r0, [pc, #12]	; (8007c78 <lcd_send_cmd+0xd8>)
 8007c6c:	f001 fe12 	bl	8009894 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007c70:	bf00      	nop
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	200003a8 	.word	0x200003a8
 8007c7c:	2000037e 	.word	0x2000037e

08007c80 <lcd_send_data>:

void lcd_send_data (char data) {
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af02      	add	r7, sp, #8
 8007c86:	4603      	mov	r3, r0
 8007c88:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007c8a:	79fb      	ldrb	r3, [r7, #7]
 8007c8c:	f023 030f 	bic.w	r3, r3, #15
 8007c90:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007c98:	7b7b      	ldrb	r3, [r7, #13]
 8007c9a:	f043 030d 	orr.w	r3, r3, #13
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007ca2:	7b7b      	ldrb	r3, [r7, #13]
 8007ca4:	f043 0309 	orr.w	r3, r3, #9
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007cac:	7b3b      	ldrb	r3, [r7, #12]
 8007cae:	f043 030d 	orr.w	r3, r3, #13
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007cb6:	7b3b      	ldrb	r3, [r7, #12]
 8007cb8:	f043 0309 	orr.w	r3, r3, #9
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007cc0:	bf00      	nop
 8007cc2:	4825      	ldr	r0, [pc, #148]	; (8007d58 <lcd_send_data+0xd8>)
 8007cc4:	f002 fa53 	bl	800a16e <HAL_I2C_GetError>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	d0f9      	beq.n	8007cc2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007cce:	bf00      	nop
 8007cd0:	4821      	ldr	r0, [pc, #132]	; (8007d58 <lcd_send_data+0xd8>)
 8007cd2:	f002 fa3f 	bl	800a154 <HAL_I2C_GetState>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d1f9      	bne.n	8007cd0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007cdc:	4b1f      	ldr	r3, [pc, #124]	; (8007d5c <lcd_send_data+0xdc>)
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d116      	bne.n	8007d12 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73fb      	strb	r3, [r7, #15]
 8007ce8:	e00f      	b.n	8007d0a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	3310      	adds	r3, #16
 8007cee:	443b      	add	r3, r7
 8007cf0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	f022 0208 	bic.w	r2, r2, #8
 8007cfa:	b2d2      	uxtb	r2, r2
 8007cfc:	3310      	adds	r3, #16
 8007cfe:	443b      	add	r3, r7
 8007d00:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	3301      	adds	r3, #1
 8007d08:	73fb      	strb	r3, [r7, #15]
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d9ec      	bls.n	8007cea <lcd_send_data+0x6a>
 8007d10:	e015      	b.n	8007d3e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007d12:	2300      	movs	r3, #0
 8007d14:	73bb      	strb	r3, [r7, #14]
 8007d16:	e00f      	b.n	8007d38 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	3310      	adds	r3, #16
 8007d1c:	443b      	add	r3, r7
 8007d1e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	f042 0208 	orr.w	r2, r2, #8
 8007d28:	b2d2      	uxtb	r2, r2
 8007d2a:	3310      	adds	r3, #16
 8007d2c:	443b      	add	r3, r7
 8007d2e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	3301      	adds	r3, #1
 8007d36:	73bb      	strb	r3, [r7, #14]
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d9ec      	bls.n	8007d18 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007d3e:	f107 0208 	add.w	r2, r7, #8
 8007d42:	2364      	movs	r3, #100	; 0x64
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	2304      	movs	r3, #4
 8007d48:	214e      	movs	r1, #78	; 0x4e
 8007d4a:	4803      	ldr	r0, [pc, #12]	; (8007d58 <lcd_send_data+0xd8>)
 8007d4c:	f001 fda2 	bl	8009894 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	200003a8 	.word	0x200003a8
 8007d5c:	2000037e 	.word	0x2000037e

08007d60 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007d68:	e006      	b.n	8007d78 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7ff ff84 	bl	8007c80 <lcd_send_data>
	while (*str) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1f4      	bne.n	8007d6a <lcd_send_string+0xa>
	}
}
 8007d80:	bf00      	nop
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <lcd_send_char>:

void lcd_send_char(char ch) {
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	4603      	mov	r3, r0
 8007d94:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	f023 030f 	bic.w	r3, r3, #15
 8007d9c:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	011b      	lsls	r3, r3, #4
 8007da2:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007da4:	7b7b      	ldrb	r3, [r7, #13]
 8007da6:	f043 030d 	orr.w	r3, r3, #13
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007dae:	7b7b      	ldrb	r3, [r7, #13]
 8007db0:	f043 0309 	orr.w	r3, r3, #9
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007db8:	7b3b      	ldrb	r3, [r7, #12]
 8007dba:	f043 030d 	orr.w	r3, r3, #13
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007dc2:	7b3b      	ldrb	r3, [r7, #12]
 8007dc4:	f043 0309 	orr.w	r3, r3, #9
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007dcc:	bf00      	nop
 8007dce:	4825      	ldr	r0, [pc, #148]	; (8007e64 <lcd_send_char+0xd8>)
 8007dd0:	f002 f9cd 	bl	800a16e <HAL_I2C_GetError>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	d0f9      	beq.n	8007dce <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007dda:	bf00      	nop
 8007ddc:	4821      	ldr	r0, [pc, #132]	; (8007e64 <lcd_send_char+0xd8>)
 8007dde:	f002 f9b9 	bl	800a154 <HAL_I2C_GetState>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	d1f9      	bne.n	8007ddc <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007de8:	4b1f      	ldr	r3, [pc, #124]	; (8007e68 <lcd_send_char+0xdc>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d116      	bne.n	8007e1e <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007df0:	2300      	movs	r3, #0
 8007df2:	73fb      	strb	r3, [r7, #15]
 8007df4:	e00f      	b.n	8007e16 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	3310      	adds	r3, #16
 8007dfa:	443b      	add	r3, r7
 8007dfc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	f022 0208 	bic.w	r2, r2, #8
 8007e06:	b2d2      	uxtb	r2, r2
 8007e08:	3310      	adds	r3, #16
 8007e0a:	443b      	add	r3, r7
 8007e0c:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	3301      	adds	r3, #1
 8007e14:	73fb      	strb	r3, [r7, #15]
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d9ec      	bls.n	8007df6 <lcd_send_char+0x6a>
 8007e1c:	e015      	b.n	8007e4a <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73bb      	strb	r3, [r7, #14]
 8007e22:	e00f      	b.n	8007e44 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
 8007e26:	3310      	adds	r3, #16
 8007e28:	443b      	add	r3, r7
 8007e2a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	f042 0208 	orr.w	r2, r2, #8
 8007e34:	b2d2      	uxtb	r2, r2
 8007e36:	3310      	adds	r3, #16
 8007e38:	443b      	add	r3, r7
 8007e3a:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	3301      	adds	r3, #1
 8007e42:	73bb      	strb	r3, [r7, #14]
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d9ec      	bls.n	8007e24 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007e4a:	f107 0208 	add.w	r2, r7, #8
 8007e4e:	2364      	movs	r3, #100	; 0x64
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	2304      	movs	r3, #4
 8007e54:	214e      	movs	r1, #78	; 0x4e
 8007e56:	4803      	ldr	r0, [pc, #12]	; (8007e64 <lcd_send_char+0xd8>)
 8007e58:	f001 fd1c 	bl	8009894 <HAL_I2C_Master_Transmit>
}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	200003a8 	.word	0x200003a8
 8007e68:	2000037e 	.word	0x2000037e

08007e6c <lcd_init>:

void lcd_init (void) {
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007e70:	2002      	movs	r0, #2
 8007e72:	f7ff fe95 	bl	8007ba0 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007e76:	2028      	movs	r0, #40	; 0x28
 8007e78:	f7ff fe92 	bl	8007ba0 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007e7c:	200c      	movs	r0, #12
 8007e7e:	f7ff fe8f 	bl	8007ba0 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007e82:	2080      	movs	r0, #128	; 0x80
 8007e84:	f7ff fe8c 	bl	8007ba0 <lcd_send_cmd>
	lcd_backlight(1);
 8007e88:	2001      	movs	r0, #1
 8007e8a:	f000 f86d 	bl	8007f68 <lcd_backlight>
}
 8007e8e:	bf00      	nop
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	4603      	mov	r3, r0
 8007e9a:	460a      	mov	r2, r1
 8007e9c:	71fb      	strb	r3, [r7, #7]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007ea2:	79fb      	ldrb	r3, [r7, #7]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d106      	bne.n	8007eb6 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007ea8:	79bb      	ldrb	r3, [r7, #6]
 8007eaa:	337f      	adds	r3, #127	; 0x7f
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff fe76 	bl	8007ba0 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007eb4:	e008      	b.n	8007ec8 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d105      	bne.n	8007ec8 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007ebc:	79bb      	ldrb	r3, [r7, #6]
 8007ebe:	3b41      	subs	r3, #65	; 0x41
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff fe6c 	bl	8007ba0 <lcd_send_cmd>
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	603a      	str	r2, [r7, #0]
 8007eda:	71fb      	strb	r3, [r7, #7]
 8007edc:	460b      	mov	r3, r1
 8007ede:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007ee0:	79ba      	ldrb	r2, [r7, #6]
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff ffd3 	bl	8007e92 <lcd_gotoxy>
	lcd_send_string(str);
 8007eec:	6838      	ldr	r0, [r7, #0]
 8007eee:	f7ff ff37 	bl	8007d60 <lcd_send_string>
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	4603      	mov	r3, r0
 8007f02:	71fb      	strb	r3, [r7, #7]
 8007f04:	460b      	mov	r3, r1
 8007f06:	71bb      	strb	r3, [r7, #6]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007f0c:	79ba      	ldrb	r2, [r7, #6]
 8007f0e:	79fb      	ldrb	r3, [r7, #7]
 8007f10:	4611      	mov	r1, r2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff ffbd 	bl	8007e92 <lcd_gotoxy>
    lcd_send_char(ch);
 8007f18:	797b      	ldrb	r3, [r7, #5]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7ff ff36 	bl	8007d8c <lcd_send_char>
}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <lcd_clear>:

void lcd_clear(void) {
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	f7ff fe37 	bl	8007ba0 <lcd_send_cmd>
    HAL_Delay(2);
 8007f32:	2002      	movs	r0, #2
 8007f34:	f000 fd22 	bl	800897c <HAL_Delay>
}
 8007f38:	bf00      	nop
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	4603      	mov	r3, r0
 8007f44:	460a      	mov	r2, r1
 8007f46:	71fb      	strb	r3, [r7, #7]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007f4c:	79ba      	ldrb	r2, [r7, #6]
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	4611      	mov	r1, r2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff ff9d 	bl	8007e92 <lcd_gotoxy>

    lcd_send_char(' ');
 8007f58:	2020      	movs	r0, #32
 8007f5a:	f7ff ff17 	bl	8007d8c <lcd_send_char>
}
 8007f5e:	bf00      	nop
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007f72:	4a05      	ldr	r2, [pc, #20]	; (8007f88 <lcd_backlight+0x20>)
 8007f74:	79fb      	ldrb	r3, [r7, #7]
 8007f76:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007f78:	2000      	movs	r0, #0
 8007f7a:	f7ff fe11 	bl	8007ba0 <lcd_send_cmd>
}
 8007f7e:	bf00      	nop
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	2000037e 	.word	0x2000037e

08007f8c <lcd_cursor>:

void lcd_cursor(int state) {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d106      	bne.n	8007fa8 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007f9a:	200e      	movs	r0, #14
 8007f9c:	f7ff fe00 	bl	8007ba0 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007fa0:	200f      	movs	r0, #15
 8007fa2:	f7ff fdfd 	bl	8007ba0 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007fa6:	e002      	b.n	8007fae <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007fa8:	200c      	movs	r0, #12
 8007faa:	f7ff fdf9 	bl	8007ba0 <lcd_send_cmd>
}
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007fc0:	4b04      	ldr	r3, [pc, #16]	; (8007fd4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	4a03      	ldr	r2, [pc, #12]	; (8007fd4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007fc8:	6013      	str	r3, [r2, #0]
}
 8007fca:	bf00      	nop
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bc80      	pop	{r7}
 8007fd2:	4770      	bx	lr
 8007fd4:	200001fc 	.word	0x200001fc

08007fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007fdc:	f000 fc6c 	bl	80088b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007fe0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007fe4:	f000 fcca 	bl	800897c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007fe8:	f000 f89c 	bl	8008124 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007fec:	f000 f9be 	bl	800836c <MX_GPIO_Init>
  MX_CAN_Init();
 8007ff0:	f000 f8de 	bl	80081b0 <MX_CAN_Init>
  MX_I2C1_Init();
 8007ff4:	f000 f910 	bl	8008218 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007ff8:	f000 f93c 	bl	8008274 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007ffc:	f000 f98c 	bl	8008318 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008000:	2201      	movs	r2, #1
 8008002:	2140      	movs	r1, #64	; 0x40
 8008004:	483e      	ldr	r0, [pc, #248]	; (8008100 <main+0x128>)
 8008006:	f001 faa0 	bl	800954a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800800a:	2201      	movs	r2, #1
 800800c:	2180      	movs	r1, #128	; 0x80
 800800e:	483c      	ldr	r0, [pc, #240]	; (8008100 <main+0x128>)
 8008010:	f001 fa9b 	bl	800954a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008014:	200a      	movs	r0, #10
 8008016:	f000 fcb1 	bl	800897c <HAL_Delay>
  lcd_init();
 800801a:	f7ff ff27 	bl	8007e6c <lcd_init>
  HAL_Delay(10);
 800801e:	200a      	movs	r0, #10
 8008020:	f000 fcac 	bl	800897c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008024:	4837      	ldr	r0, [pc, #220]	; (8008104 <main+0x12c>)
 8008026:	f003 f943 	bl	800b2b0 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800802a:	bf00      	nop
 800802c:	4836      	ldr	r0, [pc, #216]	; (8008108 <main+0x130>)
 800802e:	f002 f89e 	bl	800a16e <HAL_I2C_GetError>
 8008032:	4603      	mov	r3, r0
 8008034:	2b04      	cmp	r3, #4
 8008036:	d0f9      	beq.n	800802c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008038:	bf00      	nop
 800803a:	4833      	ldr	r0, [pc, #204]	; (8008108 <main+0x130>)
 800803c:	f002 f88a 	bl	800a154 <HAL_I2C_GetState>
 8008040:	4603      	mov	r3, r0
 8008042:	2b20      	cmp	r3, #32
 8008044:	d1f9      	bne.n	800803a <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008046:	2200      	movs	r2, #0
 8008048:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800804c:	482c      	ldr	r0, [pc, #176]	; (8008100 <main+0x128>)
 800804e:	f001 fa7c 	bl	800954a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008052:	2200      	movs	r2, #0
 8008054:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008058:	4829      	ldr	r0, [pc, #164]	; (8008100 <main+0x128>)
 800805a:	f001 fa76 	bl	800954a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800805e:	2200      	movs	r2, #0
 8008060:	2104      	movs	r1, #4
 8008062:	4827      	ldr	r0, [pc, #156]	; (8008100 <main+0x128>)
 8008064:	f001 fa71 	bl	800954a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008068:	2200      	movs	r2, #0
 800806a:	2102      	movs	r1, #2
 800806c:	4824      	ldr	r0, [pc, #144]	; (8008100 <main+0x128>)
 800806e:	f001 fa6c 	bl	800954a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008072:	2200      	movs	r2, #0
 8008074:	2101      	movs	r1, #1
 8008076:	4822      	ldr	r0, [pc, #136]	; (8008100 <main+0x128>)
 8008078:	f001 fa67 	bl	800954a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800807c:	2200      	movs	r2, #0
 800807e:	2120      	movs	r1, #32
 8008080:	4822      	ldr	r0, [pc, #136]	; (800810c <main+0x134>)
 8008082:	f001 fa62 	bl	800954a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008086:	2200      	movs	r2, #0
 8008088:	2110      	movs	r1, #16
 800808a:	4820      	ldr	r0, [pc, #128]	; (800810c <main+0x134>)
 800808c:	f001 fa5d 	bl	800954a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008090:	2200      	movs	r2, #0
 8008092:	2180      	movs	r1, #128	; 0x80
 8008094:	481e      	ldr	r0, [pc, #120]	; (8008110 <main+0x138>)
 8008096:	f001 fa58 	bl	800954a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800809a:	2200      	movs	r2, #0
 800809c:	2140      	movs	r1, #64	; 0x40
 800809e:	481c      	ldr	r0, [pc, #112]	; (8008110 <main+0x138>)
 80080a0:	f001 fa53 	bl	800954a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80080a4:	2200      	movs	r2, #0
 80080a6:	2120      	movs	r1, #32
 80080a8:	4819      	ldr	r0, [pc, #100]	; (8008110 <main+0x138>)
 80080aa:	f001 fa4e 	bl	800954a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80080ae:	2200      	movs	r2, #0
 80080b0:	2110      	movs	r1, #16
 80080b2:	4817      	ldr	r0, [pc, #92]	; (8008110 <main+0x138>)
 80080b4:	f001 fa49 	bl	800954a <HAL_GPIO_WritePin>

  i2cTest();
 80080b8:	f7f8 ff7c 	bl	8000fb4 <i2cTest>
  HAL_Delay(100);
 80080bc:	2064      	movs	r0, #100	; 0x64
 80080be:	f000 fc5d 	bl	800897c <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80080c2:	4a14      	ldr	r2, [pc, #80]	; (8008114 <main+0x13c>)
 80080c4:	2101      	movs	r1, #1
 80080c6:	2001      	movs	r0, #1
 80080c8:	f7ff ff02 	bl	8007ed0 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80080cc:	4a12      	ldr	r2, [pc, #72]	; (8008118 <main+0x140>)
 80080ce:	2101      	movs	r1, #1
 80080d0:	2002      	movs	r0, #2
 80080d2:	f7ff fefd 	bl	8007ed0 <lcd_print>
  HAL_Delay(1000);
 80080d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080da:	f000 fc4f 	bl	800897c <HAL_Delay>
  lcd_clear();
 80080de:	f7ff ff23 	bl	8007f28 <lcd_clear>

  eepromKontrol();
 80080e2:	f7f8 f8a7 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 80080e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080ea:	f000 fc47 	bl	800897c <HAL_Delay>

  backLightTimer = millis;
 80080ee:	4b0b      	ldr	r3, [pc, #44]	; (800811c <main+0x144>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a0b      	ldr	r2, [pc, #44]	; (8008120 <main+0x148>)
 80080f4:	6013      	str	r3, [r2, #0]

  iotSetup();
 80080f6:	f7ff fcc7 	bl	8007a88 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80080fa:	f7fe fda1 	bl	8006c40 <mainLoop>
 80080fe:	e7fc      	b.n	80080fa <main+0x122>
 8008100:	40010c00 	.word	0x40010c00
 8008104:	200003fc 	.word	0x200003fc
 8008108:	200003a8 	.word	0x200003a8
 800810c:	40011000 	.word	0x40011000
 8008110:	40010800 	.word	0x40010800
 8008114:	0800e034 	.word	0x0800e034
 8008118:	0800e048 	.word	0x0800e048
 800811c:	200001fc 	.word	0x200001fc
 8008120:	20000218 	.word	0x20000218

08008124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b090      	sub	sp, #64	; 0x40
 8008128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800812a:	f107 0318 	add.w	r3, r7, #24
 800812e:	2228      	movs	r2, #40	; 0x28
 8008130:	2100      	movs	r1, #0
 8008132:	4618      	mov	r0, r3
 8008134:	f004 fbb7 	bl	800c8a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008138:	1d3b      	adds	r3, r7, #4
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	605a      	str	r2, [r3, #4]
 8008140:	609a      	str	r2, [r3, #8]
 8008142:	60da      	str	r2, [r3, #12]
 8008144:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008146:	2301      	movs	r3, #1
 8008148:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800814a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800814e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008150:	2300      	movs	r3, #0
 8008152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008154:	2301      	movs	r3, #1
 8008156:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008158:	2302      	movs	r3, #2
 800815a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800815c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008160:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008162:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008166:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008168:	f107 0318 	add.w	r3, r7, #24
 800816c:	4618      	mov	r0, r3
 800816e:	f002 fc3f 	bl	800a9f0 <HAL_RCC_OscConfig>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008178:	f000 f9a2 	bl	80084c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800817c:	230f      	movs	r3, #15
 800817e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008180:	2302      	movs	r3, #2
 8008182:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008184:	2300      	movs	r3, #0
 8008186:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800818c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800818e:	2300      	movs	r3, #0
 8008190:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008192:	1d3b      	adds	r3, r7, #4
 8008194:	2102      	movs	r1, #2
 8008196:	4618      	mov	r0, r3
 8008198:	f002 feac 	bl	800aef4 <HAL_RCC_ClockConfig>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80081a2:	f000 f98d 	bl	80084c0 <Error_Handler>
  }
}
 80081a6:	bf00      	nop
 80081a8:	3740      	adds	r7, #64	; 0x40
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80081b4:	4b16      	ldr	r3, [pc, #88]	; (8008210 <MX_CAN_Init+0x60>)
 80081b6:	4a17      	ldr	r2, [pc, #92]	; (8008214 <MX_CAN_Init+0x64>)
 80081b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80081ba:	4b15      	ldr	r3, [pc, #84]	; (8008210 <MX_CAN_Init+0x60>)
 80081bc:	2210      	movs	r2, #16
 80081be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80081c0:	4b13      	ldr	r3, [pc, #76]	; (8008210 <MX_CAN_Init+0x60>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80081c6:	4b12      	ldr	r3, [pc, #72]	; (8008210 <MX_CAN_Init+0x60>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80081cc:	4b10      	ldr	r3, [pc, #64]	; (8008210 <MX_CAN_Init+0x60>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80081d2:	4b0f      	ldr	r3, [pc, #60]	; (8008210 <MX_CAN_Init+0x60>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80081d8:	4b0d      	ldr	r3, [pc, #52]	; (8008210 <MX_CAN_Init+0x60>)
 80081da:	2200      	movs	r2, #0
 80081dc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80081de:	4b0c      	ldr	r3, [pc, #48]	; (8008210 <MX_CAN_Init+0x60>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80081e4:	4b0a      	ldr	r3, [pc, #40]	; (8008210 <MX_CAN_Init+0x60>)
 80081e6:	2200      	movs	r2, #0
 80081e8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80081ea:	4b09      	ldr	r3, [pc, #36]	; (8008210 <MX_CAN_Init+0x60>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80081f0:	4b07      	ldr	r3, [pc, #28]	; (8008210 <MX_CAN_Init+0x60>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80081f6:	4b06      	ldr	r3, [pc, #24]	; (8008210 <MX_CAN_Init+0x60>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80081fc:	4804      	ldr	r0, [pc, #16]	; (8008210 <MX_CAN_Init+0x60>)
 80081fe:	f000 fbe1 	bl	80089c4 <HAL_CAN_Init>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008208:	f000 f95a 	bl	80084c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 800820c:	bf00      	nop
 800820e:	bd80      	pop	{r7, pc}
 8008210:	20000380 	.word	0x20000380
 8008214:	40006400 	.word	0x40006400

08008218 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800821c:	4b12      	ldr	r3, [pc, #72]	; (8008268 <MX_I2C1_Init+0x50>)
 800821e:	4a13      	ldr	r2, [pc, #76]	; (800826c <MX_I2C1_Init+0x54>)
 8008220:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008222:	4b11      	ldr	r3, [pc, #68]	; (8008268 <MX_I2C1_Init+0x50>)
 8008224:	4a12      	ldr	r2, [pc, #72]	; (8008270 <MX_I2C1_Init+0x58>)
 8008226:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008228:	4b0f      	ldr	r3, [pc, #60]	; (8008268 <MX_I2C1_Init+0x50>)
 800822a:	2200      	movs	r2, #0
 800822c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800822e:	4b0e      	ldr	r3, [pc, #56]	; (8008268 <MX_I2C1_Init+0x50>)
 8008230:	2200      	movs	r2, #0
 8008232:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008234:	4b0c      	ldr	r3, [pc, #48]	; (8008268 <MX_I2C1_Init+0x50>)
 8008236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800823a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <MX_I2C1_Init+0x50>)
 800823e:	2200      	movs	r2, #0
 8008240:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008242:	4b09      	ldr	r3, [pc, #36]	; (8008268 <MX_I2C1_Init+0x50>)
 8008244:	2200      	movs	r2, #0
 8008246:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008248:	4b07      	ldr	r3, [pc, #28]	; (8008268 <MX_I2C1_Init+0x50>)
 800824a:	2200      	movs	r2, #0
 800824c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800824e:	4b06      	ldr	r3, [pc, #24]	; (8008268 <MX_I2C1_Init+0x50>)
 8008250:	2200      	movs	r2, #0
 8008252:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008254:	4804      	ldr	r0, [pc, #16]	; (8008268 <MX_I2C1_Init+0x50>)
 8008256:	f001 f9a9 	bl	80095ac <HAL_I2C_Init>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008260:	f000 f92e 	bl	80084c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008264:	bf00      	nop
 8008266:	bd80      	pop	{r7, pc}
 8008268:	200003a8 	.word	0x200003a8
 800826c:	40005400 	.word	0x40005400
 8008270:	00061a80 	.word	0x00061a80

08008274 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800827a:	f107 0308 	add.w	r3, r7, #8
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	605a      	str	r2, [r3, #4]
 8008284:	609a      	str	r2, [r3, #8]
 8008286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008288:	463b      	mov	r3, r7
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008290:	4b1f      	ldr	r3, [pc, #124]	; (8008310 <MX_TIM1_Init+0x9c>)
 8008292:	4a20      	ldr	r2, [pc, #128]	; (8008314 <MX_TIM1_Init+0xa0>)
 8008294:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008296:	4b1e      	ldr	r3, [pc, #120]	; (8008310 <MX_TIM1_Init+0x9c>)
 8008298:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800829c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800829e:	4b1c      	ldr	r3, [pc, #112]	; (8008310 <MX_TIM1_Init+0x9c>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80082a4:	4b1a      	ldr	r3, [pc, #104]	; (8008310 <MX_TIM1_Init+0x9c>)
 80082a6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80082aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082ac:	4b18      	ldr	r3, [pc, #96]	; (8008310 <MX_TIM1_Init+0x9c>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80082b2:	4b17      	ldr	r3, [pc, #92]	; (8008310 <MX_TIM1_Init+0x9c>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082b8:	4b15      	ldr	r3, [pc, #84]	; (8008310 <MX_TIM1_Init+0x9c>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80082be:	4814      	ldr	r0, [pc, #80]	; (8008310 <MX_TIM1_Init+0x9c>)
 80082c0:	f002 ffa6 	bl	800b210 <HAL_TIM_Base_Init>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80082ca:	f000 f8f9 	bl	80084c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80082ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80082d4:	f107 0308 	add.w	r3, r7, #8
 80082d8:	4619      	mov	r1, r3
 80082da:	480d      	ldr	r0, [pc, #52]	; (8008310 <MX_TIM1_Init+0x9c>)
 80082dc:	f003 f950 	bl	800b580 <HAL_TIM_ConfigClockSource>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80082e6:	f000 f8eb 	bl	80084c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082ea:	2300      	movs	r3, #0
 80082ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082ee:	2300      	movs	r3, #0
 80082f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80082f2:	463b      	mov	r3, r7
 80082f4:	4619      	mov	r1, r3
 80082f6:	4806      	ldr	r0, [pc, #24]	; (8008310 <MX_TIM1_Init+0x9c>)
 80082f8:	f003 fb3e 	bl	800b978 <HAL_TIMEx_MasterConfigSynchronization>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008302:	f000 f8dd 	bl	80084c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008306:	bf00      	nop
 8008308:	3718      	adds	r7, #24
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	200003fc 	.word	0x200003fc
 8008314:	40012c00 	.word	0x40012c00

08008318 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800831c:	4b11      	ldr	r3, [pc, #68]	; (8008364 <MX_USART1_UART_Init+0x4c>)
 800831e:	4a12      	ldr	r2, [pc, #72]	; (8008368 <MX_USART1_UART_Init+0x50>)
 8008320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008322:	4b10      	ldr	r3, [pc, #64]	; (8008364 <MX_USART1_UART_Init+0x4c>)
 8008324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800832a:	4b0e      	ldr	r3, [pc, #56]	; (8008364 <MX_USART1_UART_Init+0x4c>)
 800832c:	2200      	movs	r2, #0
 800832e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008330:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <MX_USART1_UART_Init+0x4c>)
 8008332:	2200      	movs	r2, #0
 8008334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008336:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <MX_USART1_UART_Init+0x4c>)
 8008338:	2200      	movs	r2, #0
 800833a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800833c:	4b09      	ldr	r3, [pc, #36]	; (8008364 <MX_USART1_UART_Init+0x4c>)
 800833e:	220c      	movs	r2, #12
 8008340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008342:	4b08      	ldr	r3, [pc, #32]	; (8008364 <MX_USART1_UART_Init+0x4c>)
 8008344:	2200      	movs	r2, #0
 8008346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008348:	4b06      	ldr	r3, [pc, #24]	; (8008364 <MX_USART1_UART_Init+0x4c>)
 800834a:	2200      	movs	r2, #0
 800834c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800834e:	4805      	ldr	r0, [pc, #20]	; (8008364 <MX_USART1_UART_Init+0x4c>)
 8008350:	f003 fb90 	bl	800ba74 <HAL_UART_Init>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800835a:	f000 f8b1 	bl	80084c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800835e:	bf00      	nop
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20000444 	.word	0x20000444
 8008368:	40013800 	.word	0x40013800

0800836c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008372:	f107 0310 	add.w	r3, r7, #16
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	605a      	str	r2, [r3, #4]
 800837c:	609a      	str	r2, [r3, #8]
 800837e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008380:	4b4b      	ldr	r3, [pc, #300]	; (80084b0 <MX_GPIO_Init+0x144>)
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	4a4a      	ldr	r2, [pc, #296]	; (80084b0 <MX_GPIO_Init+0x144>)
 8008386:	f043 0310 	orr.w	r3, r3, #16
 800838a:	6193      	str	r3, [r2, #24]
 800838c:	4b48      	ldr	r3, [pc, #288]	; (80084b0 <MX_GPIO_Init+0x144>)
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	f003 0310 	and.w	r3, r3, #16
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008398:	4b45      	ldr	r3, [pc, #276]	; (80084b0 <MX_GPIO_Init+0x144>)
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	4a44      	ldr	r2, [pc, #272]	; (80084b0 <MX_GPIO_Init+0x144>)
 800839e:	f043 0320 	orr.w	r3, r3, #32
 80083a2:	6193      	str	r3, [r2, #24]
 80083a4:	4b42      	ldr	r3, [pc, #264]	; (80084b0 <MX_GPIO_Init+0x144>)
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	f003 0320 	and.w	r3, r3, #32
 80083ac:	60bb      	str	r3, [r7, #8]
 80083ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80083b0:	4b3f      	ldr	r3, [pc, #252]	; (80084b0 <MX_GPIO_Init+0x144>)
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	4a3e      	ldr	r2, [pc, #248]	; (80084b0 <MX_GPIO_Init+0x144>)
 80083b6:	f043 0304 	orr.w	r3, r3, #4
 80083ba:	6193      	str	r3, [r2, #24]
 80083bc:	4b3c      	ldr	r3, [pc, #240]	; (80084b0 <MX_GPIO_Init+0x144>)
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	f003 0304 	and.w	r3, r3, #4
 80083c4:	607b      	str	r3, [r7, #4]
 80083c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80083c8:	4b39      	ldr	r3, [pc, #228]	; (80084b0 <MX_GPIO_Init+0x144>)
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	4a38      	ldr	r2, [pc, #224]	; (80084b0 <MX_GPIO_Init+0x144>)
 80083ce:	f043 0308 	orr.w	r3, r3, #8
 80083d2:	6193      	str	r3, [r2, #24]
 80083d4:	4b36      	ldr	r3, [pc, #216]	; (80084b0 <MX_GPIO_Init+0x144>)
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	f003 0308 	and.w	r3, r3, #8
 80083dc:	603b      	str	r3, [r7, #0]
 80083de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80083e0:	2200      	movs	r2, #0
 80083e2:	21f0      	movs	r1, #240	; 0xf0
 80083e4:	4833      	ldr	r0, [pc, #204]	; (80084b4 <MX_GPIO_Init+0x148>)
 80083e6:	f001 f8b0 	bl	800954a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80083ea:	2200      	movs	r2, #0
 80083ec:	f241 0130 	movw	r1, #4144	; 0x1030
 80083f0:	4831      	ldr	r0, [pc, #196]	; (80084b8 <MX_GPIO_Init+0x14c>)
 80083f2:	f001 f8aa 	bl	800954a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80083f6:	2200      	movs	r2, #0
 80083f8:	f640 4107 	movw	r1, #3079	; 0xc07
 80083fc:	482f      	ldr	r0, [pc, #188]	; (80084bc <MX_GPIO_Init+0x150>)
 80083fe:	f001 f8a4 	bl	800954a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008402:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008406:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008408:	2300      	movs	r3, #0
 800840a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800840c:	2300      	movs	r3, #0
 800840e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008410:	f107 0310 	add.w	r3, r7, #16
 8008414:	4619      	mov	r1, r3
 8008416:	4828      	ldr	r0, [pc, #160]	; (80084b8 <MX_GPIO_Init+0x14c>)
 8008418:	f000 fe20 	bl	800905c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 800841c:	f248 130f 	movw	r3, #33039	; 0x810f
 8008420:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008422:	2300      	movs	r3, #0
 8008424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008426:	2300      	movs	r3, #0
 8008428:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800842a:	f107 0310 	add.w	r3, r7, #16
 800842e:	4619      	mov	r1, r3
 8008430:	4820      	ldr	r0, [pc, #128]	; (80084b4 <MX_GPIO_Init+0x148>)
 8008432:	f000 fe13 	bl	800905c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008436:	23f0      	movs	r3, #240	; 0xf0
 8008438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800843a:	2301      	movs	r3, #1
 800843c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800843e:	2300      	movs	r3, #0
 8008440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008442:	2302      	movs	r3, #2
 8008444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008446:	f107 0310 	add.w	r3, r7, #16
 800844a:	4619      	mov	r1, r3
 800844c:	4819      	ldr	r0, [pc, #100]	; (80084b4 <MX_GPIO_Init+0x148>)
 800844e:	f000 fe05 	bl	800905c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008452:	f241 0330 	movw	r3, #4144	; 0x1030
 8008456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008458:	2301      	movs	r3, #1
 800845a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800845c:	2300      	movs	r3, #0
 800845e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008460:	2302      	movs	r3, #2
 8008462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008464:	f107 0310 	add.w	r3, r7, #16
 8008468:	4619      	mov	r1, r3
 800846a:	4813      	ldr	r0, [pc, #76]	; (80084b8 <MX_GPIO_Init+0x14c>)
 800846c:	f000 fdf6 	bl	800905c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008470:	f640 4307 	movw	r3, #3079	; 0xc07
 8008474:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008476:	2301      	movs	r3, #1
 8008478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800847a:	2300      	movs	r3, #0
 800847c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800847e:	2302      	movs	r3, #2
 8008480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008482:	f107 0310 	add.w	r3, r7, #16
 8008486:	4619      	mov	r1, r3
 8008488:	480c      	ldr	r0, [pc, #48]	; (80084bc <MX_GPIO_Init+0x150>)
 800848a:	f000 fde7 	bl	800905c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800848e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008494:	2300      	movs	r3, #0
 8008496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008498:	2300      	movs	r3, #0
 800849a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800849c:	f107 0310 	add.w	r3, r7, #16
 80084a0:	4619      	mov	r1, r3
 80084a2:	4806      	ldr	r0, [pc, #24]	; (80084bc <MX_GPIO_Init+0x150>)
 80084a4:	f000 fdda 	bl	800905c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80084a8:	bf00      	nop
 80084aa:	3720      	adds	r7, #32
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40021000 	.word	0x40021000
 80084b4:	40010800 	.word	0x40010800
 80084b8:	40011000 	.word	0x40011000
 80084bc:	40010c00 	.word	0x40010c00

080084c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80084c0:	b480      	push	{r7}
 80084c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80084c4:	bf00      	nop
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bc80      	pop	{r7}
 80084ca:	4770      	bx	lr

080084cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80084d2:	4b15      	ldr	r3, [pc, #84]	; (8008528 <HAL_MspInit+0x5c>)
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	4a14      	ldr	r2, [pc, #80]	; (8008528 <HAL_MspInit+0x5c>)
 80084d8:	f043 0301 	orr.w	r3, r3, #1
 80084dc:	6193      	str	r3, [r2, #24]
 80084de:	4b12      	ldr	r3, [pc, #72]	; (8008528 <HAL_MspInit+0x5c>)
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	60bb      	str	r3, [r7, #8]
 80084e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80084ea:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <HAL_MspInit+0x5c>)
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	4a0e      	ldr	r2, [pc, #56]	; (8008528 <HAL_MspInit+0x5c>)
 80084f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084f4:	61d3      	str	r3, [r2, #28]
 80084f6:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <HAL_MspInit+0x5c>)
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084fe:	607b      	str	r3, [r7, #4]
 8008500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008502:	4b0a      	ldr	r3, [pc, #40]	; (800852c <HAL_MspInit+0x60>)
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	60fb      	str	r3, [r7, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	4a04      	ldr	r2, [pc, #16]	; (800852c <HAL_MspInit+0x60>)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800851e:	bf00      	nop
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr
 8008528:	40021000 	.word	0x40021000
 800852c:	40010000 	.word	0x40010000

08008530 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008538:	f107 0310 	add.w	r3, r7, #16
 800853c:	2200      	movs	r2, #0
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	605a      	str	r2, [r3, #4]
 8008542:	609a      	str	r2, [r3, #8]
 8008544:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a1c      	ldr	r2, [pc, #112]	; (80085bc <HAL_CAN_MspInit+0x8c>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d131      	bne.n	80085b4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008550:	4b1b      	ldr	r3, [pc, #108]	; (80085c0 <HAL_CAN_MspInit+0x90>)
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	4a1a      	ldr	r2, [pc, #104]	; (80085c0 <HAL_CAN_MspInit+0x90>)
 8008556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800855a:	61d3      	str	r3, [r2, #28]
 800855c:	4b18      	ldr	r3, [pc, #96]	; (80085c0 <HAL_CAN_MspInit+0x90>)
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008564:	60fb      	str	r3, [r7, #12]
 8008566:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008568:	4b15      	ldr	r3, [pc, #84]	; (80085c0 <HAL_CAN_MspInit+0x90>)
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	4a14      	ldr	r2, [pc, #80]	; (80085c0 <HAL_CAN_MspInit+0x90>)
 800856e:	f043 0304 	orr.w	r3, r3, #4
 8008572:	6193      	str	r3, [r2, #24]
 8008574:	4b12      	ldr	r3, [pc, #72]	; (80085c0 <HAL_CAN_MspInit+0x90>)
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	f003 0304 	and.w	r3, r3, #4
 800857c:	60bb      	str	r3, [r7, #8]
 800857e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008586:	2300      	movs	r3, #0
 8008588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800858a:	2300      	movs	r3, #0
 800858c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800858e:	f107 0310 	add.w	r3, r7, #16
 8008592:	4619      	mov	r1, r3
 8008594:	480b      	ldr	r0, [pc, #44]	; (80085c4 <HAL_CAN_MspInit+0x94>)
 8008596:	f000 fd61 	bl	800905c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800859a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800859e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085a0:	2302      	movs	r3, #2
 80085a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085a4:	2303      	movs	r3, #3
 80085a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085a8:	f107 0310 	add.w	r3, r7, #16
 80085ac:	4619      	mov	r1, r3
 80085ae:	4805      	ldr	r0, [pc, #20]	; (80085c4 <HAL_CAN_MspInit+0x94>)
 80085b0:	f000 fd54 	bl	800905c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80085b4:	bf00      	nop
 80085b6:	3720      	adds	r7, #32
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	40006400 	.word	0x40006400
 80085c0:	40021000 	.word	0x40021000
 80085c4:	40010800 	.word	0x40010800

080085c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b088      	sub	sp, #32
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085d0:	f107 0310 	add.w	r3, r7, #16
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	605a      	str	r2, [r3, #4]
 80085da:	609a      	str	r2, [r3, #8]
 80085dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a15      	ldr	r2, [pc, #84]	; (8008638 <HAL_I2C_MspInit+0x70>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d123      	bne.n	8008630 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085e8:	4b14      	ldr	r3, [pc, #80]	; (800863c <HAL_I2C_MspInit+0x74>)
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	4a13      	ldr	r2, [pc, #76]	; (800863c <HAL_I2C_MspInit+0x74>)
 80085ee:	f043 0308 	orr.w	r3, r3, #8
 80085f2:	6193      	str	r3, [r2, #24]
 80085f4:	4b11      	ldr	r3, [pc, #68]	; (800863c <HAL_I2C_MspInit+0x74>)
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	f003 0308 	and.w	r3, r3, #8
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008600:	23c0      	movs	r3, #192	; 0xc0
 8008602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008604:	2312      	movs	r3, #18
 8008606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008608:	2303      	movs	r3, #3
 800860a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800860c:	f107 0310 	add.w	r3, r7, #16
 8008610:	4619      	mov	r1, r3
 8008612:	480b      	ldr	r0, [pc, #44]	; (8008640 <HAL_I2C_MspInit+0x78>)
 8008614:	f000 fd22 	bl	800905c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008618:	4b08      	ldr	r3, [pc, #32]	; (800863c <HAL_I2C_MspInit+0x74>)
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	4a07      	ldr	r2, [pc, #28]	; (800863c <HAL_I2C_MspInit+0x74>)
 800861e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008622:	61d3      	str	r3, [r2, #28]
 8008624:	4b05      	ldr	r3, [pc, #20]	; (800863c <HAL_I2C_MspInit+0x74>)
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800862c:	60bb      	str	r3, [r7, #8]
 800862e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008630:	bf00      	nop
 8008632:	3720      	adds	r7, #32
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	40005400 	.word	0x40005400
 800863c:	40021000 	.word	0x40021000
 8008640:	40010c00 	.word	0x40010c00

08008644 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a0a      	ldr	r2, [pc, #40]	; (800867c <HAL_I2C_MspDeInit+0x38>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d10d      	bne.n	8008672 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008656:	4b0a      	ldr	r3, [pc, #40]	; (8008680 <HAL_I2C_MspDeInit+0x3c>)
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	4a09      	ldr	r2, [pc, #36]	; (8008680 <HAL_I2C_MspDeInit+0x3c>)
 800865c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008660:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008662:	2140      	movs	r1, #64	; 0x40
 8008664:	4807      	ldr	r0, [pc, #28]	; (8008684 <HAL_I2C_MspDeInit+0x40>)
 8008666:	f000 fe8d 	bl	8009384 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800866a:	2180      	movs	r1, #128	; 0x80
 800866c:	4805      	ldr	r0, [pc, #20]	; (8008684 <HAL_I2C_MspDeInit+0x40>)
 800866e:	f000 fe89 	bl	8009384 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008672:	bf00      	nop
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	40005400 	.word	0x40005400
 8008680:	40021000 	.word	0x40021000
 8008684:	40010c00 	.word	0x40010c00

08008688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a0d      	ldr	r2, [pc, #52]	; (80086cc <HAL_TIM_Base_MspInit+0x44>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d113      	bne.n	80086c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800869a:	4b0d      	ldr	r3, [pc, #52]	; (80086d0 <HAL_TIM_Base_MspInit+0x48>)
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	4a0c      	ldr	r2, [pc, #48]	; (80086d0 <HAL_TIM_Base_MspInit+0x48>)
 80086a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80086a4:	6193      	str	r3, [r2, #24]
 80086a6:	4b0a      	ldr	r3, [pc, #40]	; (80086d0 <HAL_TIM_Base_MspInit+0x48>)
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80086b2:	2200      	movs	r2, #0
 80086b4:	2100      	movs	r1, #0
 80086b6:	2019      	movs	r0, #25
 80086b8:	f000 fb57 	bl	8008d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80086bc:	2019      	movs	r0, #25
 80086be:	f000 fb70 	bl	8008da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80086c2:	bf00      	nop
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	40012c00 	.word	0x40012c00
 80086d0:	40021000 	.word	0x40021000

080086d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b088      	sub	sp, #32
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086dc:	f107 0310 	add.w	r3, r7, #16
 80086e0:	2200      	movs	r2, #0
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	605a      	str	r2, [r3, #4]
 80086e6:	609a      	str	r2, [r3, #8]
 80086e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a20      	ldr	r2, [pc, #128]	; (8008770 <HAL_UART_MspInit+0x9c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d139      	bne.n	8008768 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80086f4:	4b1f      	ldr	r3, [pc, #124]	; (8008774 <HAL_UART_MspInit+0xa0>)
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	4a1e      	ldr	r2, [pc, #120]	; (8008774 <HAL_UART_MspInit+0xa0>)
 80086fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086fe:	6193      	str	r3, [r2, #24]
 8008700:	4b1c      	ldr	r3, [pc, #112]	; (8008774 <HAL_UART_MspInit+0xa0>)
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008708:	60fb      	str	r3, [r7, #12]
 800870a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800870c:	4b19      	ldr	r3, [pc, #100]	; (8008774 <HAL_UART_MspInit+0xa0>)
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	4a18      	ldr	r2, [pc, #96]	; (8008774 <HAL_UART_MspInit+0xa0>)
 8008712:	f043 0304 	orr.w	r3, r3, #4
 8008716:	6193      	str	r3, [r2, #24]
 8008718:	4b16      	ldr	r3, [pc, #88]	; (8008774 <HAL_UART_MspInit+0xa0>)
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	60bb      	str	r3, [r7, #8]
 8008722:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008728:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800872a:	2302      	movs	r3, #2
 800872c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800872e:	2303      	movs	r3, #3
 8008730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008732:	f107 0310 	add.w	r3, r7, #16
 8008736:	4619      	mov	r1, r3
 8008738:	480f      	ldr	r0, [pc, #60]	; (8008778 <HAL_UART_MspInit+0xa4>)
 800873a:	f000 fc8f 	bl	800905c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800873e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008742:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008744:	2300      	movs	r3, #0
 8008746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008748:	2300      	movs	r3, #0
 800874a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800874c:	f107 0310 	add.w	r3, r7, #16
 8008750:	4619      	mov	r1, r3
 8008752:	4809      	ldr	r0, [pc, #36]	; (8008778 <HAL_UART_MspInit+0xa4>)
 8008754:	f000 fc82 	bl	800905c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008758:	2200      	movs	r2, #0
 800875a:	2100      	movs	r1, #0
 800875c:	2025      	movs	r0, #37	; 0x25
 800875e:	f000 fb04 	bl	8008d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008762:	2025      	movs	r0, #37	; 0x25
 8008764:	f000 fb1d 	bl	8008da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008768:	bf00      	nop
 800876a:	3720      	adds	r7, #32
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	40013800 	.word	0x40013800
 8008774:	40021000 	.word	0x40021000
 8008778:	40010800 	.word	0x40010800

0800877c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800877c:	b480      	push	{r7}
 800877e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008780:	e7fe      	b.n	8008780 <NMI_Handler+0x4>

08008782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008782:	b480      	push	{r7}
 8008784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008786:	e7fe      	b.n	8008786 <HardFault_Handler+0x4>

08008788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008788:	b480      	push	{r7}
 800878a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800878c:	e7fe      	b.n	800878c <MemManage_Handler+0x4>

0800878e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800878e:	b480      	push	{r7}
 8008790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008792:	e7fe      	b.n	8008792 <BusFault_Handler+0x4>

08008794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008794:	b480      	push	{r7}
 8008796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008798:	e7fe      	b.n	8008798 <UsageFault_Handler+0x4>

0800879a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800879a:	b480      	push	{r7}
 800879c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800879e:	bf00      	nop
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bc80      	pop	{r7}
 80087a4:	4770      	bx	lr

080087a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80087a6:	b480      	push	{r7}
 80087a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80087aa:	bf00      	nop
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bc80      	pop	{r7}
 80087b0:	4770      	bx	lr

080087b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80087b2:	b480      	push	{r7}
 80087b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80087b6:	bf00      	nop
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bc80      	pop	{r7}
 80087bc:	4770      	bx	lr

080087be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80087c2:	f000 f8bf 	bl	8008944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80087c6:	bf00      	nop
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80087d0:	4802      	ldr	r0, [pc, #8]	; (80087dc <TIM1_UP_IRQHandler+0x10>)
 80087d2:	f002 fdcd 	bl	800b370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80087d6:	bf00      	nop
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	200003fc 	.word	0x200003fc

080087e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80087e4:	4802      	ldr	r0, [pc, #8]	; (80087f0 <USART1_IRQHandler+0x10>)
 80087e6:	f003 f9ef 	bl	800bbc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80087ea:	bf00      	nop
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000444 	.word	0x20000444

080087f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80087fc:	4a14      	ldr	r2, [pc, #80]	; (8008850 <_sbrk+0x5c>)
 80087fe:	4b15      	ldr	r3, [pc, #84]	; (8008854 <_sbrk+0x60>)
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008808:	4b13      	ldr	r3, [pc, #76]	; (8008858 <_sbrk+0x64>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d102      	bne.n	8008816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008810:	4b11      	ldr	r3, [pc, #68]	; (8008858 <_sbrk+0x64>)
 8008812:	4a12      	ldr	r2, [pc, #72]	; (800885c <_sbrk+0x68>)
 8008814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008816:	4b10      	ldr	r3, [pc, #64]	; (8008858 <_sbrk+0x64>)
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4413      	add	r3, r2
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	429a      	cmp	r2, r3
 8008822:	d207      	bcs.n	8008834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008824:	f004 f858 	bl	800c8d8 <__errno>
 8008828:	4603      	mov	r3, r0
 800882a:	220c      	movs	r2, #12
 800882c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800882e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008832:	e009      	b.n	8008848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008834:	4b08      	ldr	r3, [pc, #32]	; (8008858 <_sbrk+0x64>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800883a:	4b07      	ldr	r3, [pc, #28]	; (8008858 <_sbrk+0x64>)
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4413      	add	r3, r2
 8008842:	4a05      	ldr	r2, [pc, #20]	; (8008858 <_sbrk+0x64>)
 8008844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008846:	68fb      	ldr	r3, [r7, #12]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	2000c000 	.word	0x2000c000
 8008854:	00000400 	.word	0x00000400
 8008858:	2000048c 	.word	0x2000048c
 800885c:	200005e0 	.word	0x200005e0

08008860 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008860:	b480      	push	{r7}
 8008862:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr

0800886c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800886c:	480c      	ldr	r0, [pc, #48]	; (80088a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800886e:	490d      	ldr	r1, [pc, #52]	; (80088a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008870:	4a0d      	ldr	r2, [pc, #52]	; (80088a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008874:	e002      	b.n	800887c <LoopCopyDataInit>

08008876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800887a:	3304      	adds	r3, #4

0800887c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800887c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800887e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008880:	d3f9      	bcc.n	8008876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008882:	4a0a      	ldr	r2, [pc, #40]	; (80088ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008884:	4c0a      	ldr	r4, [pc, #40]	; (80088b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008888:	e001      	b.n	800888e <LoopFillZerobss>

0800888a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800888a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800888c:	3204      	adds	r2, #4

0800888e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800888e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008890:	d3fb      	bcc.n	800888a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008892:	f7ff ffe5 	bl	8008860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008896:	f004 f825 	bl	800c8e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800889a:	f7ff fb9d 	bl	8007fd8 <main>
  bx lr
 800889e:	4770      	bx	lr
  ldr r0, =_sdata
 80088a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80088a4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80088a8:	0800e0e8 	.word	0x0800e0e8
  ldr r2, =_sbss
 80088ac:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80088b0:	200005dc 	.word	0x200005dc

080088b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80088b4:	e7fe      	b.n	80088b4 <ADC1_2_IRQHandler>
	...

080088b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80088bc:	4b08      	ldr	r3, [pc, #32]	; (80088e0 <HAL_Init+0x28>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a07      	ldr	r2, [pc, #28]	; (80088e0 <HAL_Init+0x28>)
 80088c2:	f043 0310 	orr.w	r3, r3, #16
 80088c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80088c8:	2003      	movs	r0, #3
 80088ca:	f000 fa43 	bl	8008d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80088ce:	200f      	movs	r0, #15
 80088d0:	f000 f808 	bl	80088e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80088d4:	f7ff fdfa 	bl	80084cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	40022000 	.word	0x40022000

080088e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80088ec:	4b12      	ldr	r3, [pc, #72]	; (8008938 <HAL_InitTick+0x54>)
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	4b12      	ldr	r3, [pc, #72]	; (800893c <HAL_InitTick+0x58>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	4619      	mov	r1, r3
 80088f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80088fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80088fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fa5b 	bl	8008dbe <HAL_SYSTICK_Config>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e00e      	b.n	8008930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b0f      	cmp	r3, #15
 8008916:	d80a      	bhi.n	800892e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008918:	2200      	movs	r2, #0
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008920:	f000 fa23 	bl	8008d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008924:	4a06      	ldr	r2, [pc, #24]	; (8008940 <HAL_InitTick+0x5c>)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	e000      	b.n	8008930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	200000a0 	.word	0x200000a0
 800893c:	200000a8 	.word	0x200000a8
 8008940:	200000a4 	.word	0x200000a4

08008944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008944:	b480      	push	{r7}
 8008946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008948:	4b05      	ldr	r3, [pc, #20]	; (8008960 <HAL_IncTick+0x1c>)
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	461a      	mov	r2, r3
 800894e:	4b05      	ldr	r3, [pc, #20]	; (8008964 <HAL_IncTick+0x20>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4413      	add	r3, r2
 8008954:	4a03      	ldr	r2, [pc, #12]	; (8008964 <HAL_IncTick+0x20>)
 8008956:	6013      	str	r3, [r2, #0]
}
 8008958:	bf00      	nop
 800895a:	46bd      	mov	sp, r7
 800895c:	bc80      	pop	{r7}
 800895e:	4770      	bx	lr
 8008960:	200000a8 	.word	0x200000a8
 8008964:	20000490 	.word	0x20000490

08008968 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008968:	b480      	push	{r7}
 800896a:	af00      	add	r7, sp, #0
  return uwTick;
 800896c:	4b02      	ldr	r3, [pc, #8]	; (8008978 <HAL_GetTick+0x10>)
 800896e:	681b      	ldr	r3, [r3, #0]
}
 8008970:	4618      	mov	r0, r3
 8008972:	46bd      	mov	sp, r7
 8008974:	bc80      	pop	{r7}
 8008976:	4770      	bx	lr
 8008978:	20000490 	.word	0x20000490

0800897c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008984:	f7ff fff0 	bl	8008968 <HAL_GetTick>
 8008988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008994:	d005      	beq.n	80089a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008996:	4b0a      	ldr	r3, [pc, #40]	; (80089c0 <HAL_Delay+0x44>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4413      	add	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80089a2:	bf00      	nop
 80089a4:	f7ff ffe0 	bl	8008968 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d8f7      	bhi.n	80089a4 <HAL_Delay+0x28>
  {
  }
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	200000a8 	.word	0x200000a8

080089c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d101      	bne.n	80089d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e0ed      	b.n	8008bb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d102      	bne.n	80089e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7ff fda4 	bl	8008530 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f042 0201 	orr.w	r2, r2, #1
 80089f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089f8:	f7ff ffb6 	bl	8008968 <HAL_GetTick>
 80089fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80089fe:	e012      	b.n	8008a26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008a00:	f7ff ffb2 	bl	8008968 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b0a      	cmp	r3, #10
 8008a0c:	d90b      	bls.n	8008a26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2205      	movs	r2, #5
 8008a1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e0c5      	b.n	8008bb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d0e5      	beq.n	8008a00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f022 0202 	bic.w	r2, r2, #2
 8008a42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a44:	f7ff ff90 	bl	8008968 <HAL_GetTick>
 8008a48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008a4a:	e012      	b.n	8008a72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008a4c:	f7ff ff8c 	bl	8008968 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	2b0a      	cmp	r3, #10
 8008a58:	d90b      	bls.n	8008a72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2205      	movs	r2, #5
 8008a6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e09f      	b.n	8008bb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e5      	bne.n	8008a4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	7e1b      	ldrb	r3, [r3, #24]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d108      	bne.n	8008a9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	e007      	b.n	8008aaa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008aa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	7e5b      	ldrb	r3, [r3, #25]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d108      	bne.n	8008ac4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	e007      	b.n	8008ad4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ad2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	7e9b      	ldrb	r3, [r3, #26]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d108      	bne.n	8008aee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f042 0220 	orr.w	r2, r2, #32
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	e007      	b.n	8008afe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f022 0220 	bic.w	r2, r2, #32
 8008afc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	7edb      	ldrb	r3, [r3, #27]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d108      	bne.n	8008b18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f022 0210 	bic.w	r2, r2, #16
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	e007      	b.n	8008b28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 0210 	orr.w	r2, r2, #16
 8008b26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	7f1b      	ldrb	r3, [r3, #28]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d108      	bne.n	8008b42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0208 	orr.w	r2, r2, #8
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	e007      	b.n	8008b52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f022 0208 	bic.w	r2, r2, #8
 8008b50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	7f5b      	ldrb	r3, [r3, #29]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d108      	bne.n	8008b6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f042 0204 	orr.w	r2, r2, #4
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	e007      	b.n	8008b7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0204 	bic.w	r2, r2, #4
 8008b7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	431a      	orrs	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	ea42 0103 	orr.w	r1, r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	1e5a      	subs	r2, r3, #1
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	430a      	orrs	r2, r1
 8008ba0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <__NVIC_SetPriorityGrouping>:
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008bcc:	4b0c      	ldr	r3, [pc, #48]	; (8008c00 <__NVIC_SetPriorityGrouping+0x44>)
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008bd8:	4013      	ands	r3, r2
 8008bda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008bee:	4a04      	ldr	r2, [pc, #16]	; (8008c00 <__NVIC_SetPriorityGrouping+0x44>)
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	60d3      	str	r3, [r2, #12]
}
 8008bf4:	bf00      	nop
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bc80      	pop	{r7}
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	e000ed00 	.word	0xe000ed00

08008c04 <__NVIC_GetPriorityGrouping>:
{
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c08:	4b04      	ldr	r3, [pc, #16]	; (8008c1c <__NVIC_GetPriorityGrouping+0x18>)
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	0a1b      	lsrs	r3, r3, #8
 8008c0e:	f003 0307 	and.w	r3, r3, #7
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bc80      	pop	{r7}
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	e000ed00 	.word	0xe000ed00

08008c20 <__NVIC_EnableIRQ>:
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	4603      	mov	r3, r0
 8008c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	db0b      	blt.n	8008c4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c32:	79fb      	ldrb	r3, [r7, #7]
 8008c34:	f003 021f 	and.w	r2, r3, #31
 8008c38:	4906      	ldr	r1, [pc, #24]	; (8008c54 <__NVIC_EnableIRQ+0x34>)
 8008c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c3e:	095b      	lsrs	r3, r3, #5
 8008c40:	2001      	movs	r0, #1
 8008c42:	fa00 f202 	lsl.w	r2, r0, r2
 8008c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008c4a:	bf00      	nop
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr
 8008c54:	e000e100 	.word	0xe000e100

08008c58 <__NVIC_SetPriority>:
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4603      	mov	r3, r0
 8008c60:	6039      	str	r1, [r7, #0]
 8008c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	db0a      	blt.n	8008c82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	490c      	ldr	r1, [pc, #48]	; (8008ca4 <__NVIC_SetPriority+0x4c>)
 8008c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c76:	0112      	lsls	r2, r2, #4
 8008c78:	b2d2      	uxtb	r2, r2
 8008c7a:	440b      	add	r3, r1
 8008c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008c80:	e00a      	b.n	8008c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	4908      	ldr	r1, [pc, #32]	; (8008ca8 <__NVIC_SetPriority+0x50>)
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	f003 030f 	and.w	r3, r3, #15
 8008c8e:	3b04      	subs	r3, #4
 8008c90:	0112      	lsls	r2, r2, #4
 8008c92:	b2d2      	uxtb	r2, r2
 8008c94:	440b      	add	r3, r1
 8008c96:	761a      	strb	r2, [r3, #24]
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bc80      	pop	{r7}
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	e000e100 	.word	0xe000e100
 8008ca8:	e000ed00 	.word	0xe000ed00

08008cac <NVIC_EncodePriority>:
{
 8008cac:	b480      	push	{r7}
 8008cae:	b089      	sub	sp, #36	; 0x24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f003 0307 	and.w	r3, r3, #7
 8008cbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	f1c3 0307 	rsb	r3, r3, #7
 8008cc6:	2b04      	cmp	r3, #4
 8008cc8:	bf28      	it	cs
 8008cca:	2304      	movcs	r3, #4
 8008ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	2b06      	cmp	r3, #6
 8008cd4:	d902      	bls.n	8008cdc <NVIC_EncodePriority+0x30>
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	3b03      	subs	r3, #3
 8008cda:	e000      	b.n	8008cde <NVIC_EncodePriority+0x32>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cea:	43da      	mvns	r2, r3
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	401a      	ands	r2, r3
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8008cfe:	43d9      	mvns	r1, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d04:	4313      	orrs	r3, r2
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3724      	adds	r7, #36	; 0x24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bc80      	pop	{r7}
 8008d0e:	4770      	bx	lr

08008d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d20:	d301      	bcc.n	8008d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d22:	2301      	movs	r3, #1
 8008d24:	e00f      	b.n	8008d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d26:	4a0a      	ldr	r2, [pc, #40]	; (8008d50 <SysTick_Config+0x40>)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d2e:	210f      	movs	r1, #15
 8008d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d34:	f7ff ff90 	bl	8008c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d38:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <SysTick_Config+0x40>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d3e:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <SysTick_Config+0x40>)
 8008d40:	2207      	movs	r2, #7
 8008d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	e000e010 	.word	0xe000e010

08008d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7ff ff2d 	bl	8008bbc <__NVIC_SetPriorityGrouping>
}
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b086      	sub	sp, #24
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	4603      	mov	r3, r0
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	607a      	str	r2, [r7, #4]
 8008d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008d7c:	f7ff ff42 	bl	8008c04 <__NVIC_GetPriorityGrouping>
 8008d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	68b9      	ldr	r1, [r7, #8]
 8008d86:	6978      	ldr	r0, [r7, #20]
 8008d88:	f7ff ff90 	bl	8008cac <NVIC_EncodePriority>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d92:	4611      	mov	r1, r2
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff ff5f 	bl	8008c58 <__NVIC_SetPriority>
}
 8008d9a:	bf00      	nop
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	4603      	mov	r3, r0
 8008daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff ff35 	bl	8008c20 <__NVIC_EnableIRQ>
}
 8008db6:	bf00      	nop
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff ffa2 	bl	8008d10 <SysTick_Config>
 8008dcc:	4603      	mov	r3, r0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b085      	sub	sp, #20
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d008      	beq.n	8008e00 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2204      	movs	r2, #4
 8008df2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e020      	b.n	8008e42 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 020e 	bic.w	r2, r2, #14
 8008e0e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0201 	bic.w	r2, r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e28:	2101      	movs	r1, #1
 8008e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8008e2e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bc80      	pop	{r7}
 8008e4a:	4770      	bx	lr

08008e4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d005      	beq.n	8008e70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2204      	movs	r2, #4
 8008e68:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	73fb      	strb	r3, [r7, #15]
 8008e6e:	e0d6      	b.n	800901e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f022 020e 	bic.w	r2, r2, #14
 8008e7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f022 0201 	bic.w	r2, r2, #1
 8008e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	461a      	mov	r2, r3
 8008e96:	4b64      	ldr	r3, [pc, #400]	; (8009028 <HAL_DMA_Abort_IT+0x1dc>)
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d958      	bls.n	8008f4e <HAL_DMA_Abort_IT+0x102>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a62      	ldr	r2, [pc, #392]	; (800902c <HAL_DMA_Abort_IT+0x1e0>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d04f      	beq.n	8008f46 <HAL_DMA_Abort_IT+0xfa>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a61      	ldr	r2, [pc, #388]	; (8009030 <HAL_DMA_Abort_IT+0x1e4>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d048      	beq.n	8008f42 <HAL_DMA_Abort_IT+0xf6>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a5f      	ldr	r2, [pc, #380]	; (8009034 <HAL_DMA_Abort_IT+0x1e8>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d040      	beq.n	8008f3c <HAL_DMA_Abort_IT+0xf0>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a5e      	ldr	r2, [pc, #376]	; (8009038 <HAL_DMA_Abort_IT+0x1ec>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d038      	beq.n	8008f36 <HAL_DMA_Abort_IT+0xea>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a5c      	ldr	r2, [pc, #368]	; (800903c <HAL_DMA_Abort_IT+0x1f0>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d030      	beq.n	8008f30 <HAL_DMA_Abort_IT+0xe4>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a5b      	ldr	r2, [pc, #364]	; (8009040 <HAL_DMA_Abort_IT+0x1f4>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d028      	beq.n	8008f2a <HAL_DMA_Abort_IT+0xde>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a52      	ldr	r2, [pc, #328]	; (8009028 <HAL_DMA_Abort_IT+0x1dc>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d020      	beq.n	8008f24 <HAL_DMA_Abort_IT+0xd8>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a57      	ldr	r2, [pc, #348]	; (8009044 <HAL_DMA_Abort_IT+0x1f8>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d019      	beq.n	8008f20 <HAL_DMA_Abort_IT+0xd4>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a55      	ldr	r2, [pc, #340]	; (8009048 <HAL_DMA_Abort_IT+0x1fc>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d012      	beq.n	8008f1c <HAL_DMA_Abort_IT+0xd0>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a54      	ldr	r2, [pc, #336]	; (800904c <HAL_DMA_Abort_IT+0x200>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d00a      	beq.n	8008f16 <HAL_DMA_Abort_IT+0xca>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a52      	ldr	r2, [pc, #328]	; (8009050 <HAL_DMA_Abort_IT+0x204>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d102      	bne.n	8008f10 <HAL_DMA_Abort_IT+0xc4>
 8008f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f0e:	e01b      	b.n	8008f48 <HAL_DMA_Abort_IT+0xfc>
 8008f10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f14:	e018      	b.n	8008f48 <HAL_DMA_Abort_IT+0xfc>
 8008f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f1a:	e015      	b.n	8008f48 <HAL_DMA_Abort_IT+0xfc>
 8008f1c:	2310      	movs	r3, #16
 8008f1e:	e013      	b.n	8008f48 <HAL_DMA_Abort_IT+0xfc>
 8008f20:	2301      	movs	r3, #1
 8008f22:	e011      	b.n	8008f48 <HAL_DMA_Abort_IT+0xfc>
 8008f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f28:	e00e      	b.n	8008f48 <HAL_DMA_Abort_IT+0xfc>
 8008f2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f2e:	e00b      	b.n	8008f48 <HAL_DMA_Abort_IT+0xfc>
 8008f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f34:	e008      	b.n	8008f48 <HAL_DMA_Abort_IT+0xfc>
 8008f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f3a:	e005      	b.n	8008f48 <HAL_DMA_Abort_IT+0xfc>
 8008f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f40:	e002      	b.n	8008f48 <HAL_DMA_Abort_IT+0xfc>
 8008f42:	2310      	movs	r3, #16
 8008f44:	e000      	b.n	8008f48 <HAL_DMA_Abort_IT+0xfc>
 8008f46:	2301      	movs	r3, #1
 8008f48:	4a42      	ldr	r2, [pc, #264]	; (8009054 <HAL_DMA_Abort_IT+0x208>)
 8008f4a:	6053      	str	r3, [r2, #4]
 8008f4c:	e057      	b.n	8008ffe <HAL_DMA_Abort_IT+0x1b2>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a36      	ldr	r2, [pc, #216]	; (800902c <HAL_DMA_Abort_IT+0x1e0>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d04f      	beq.n	8008ff8 <HAL_DMA_Abort_IT+0x1ac>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a34      	ldr	r2, [pc, #208]	; (8009030 <HAL_DMA_Abort_IT+0x1e4>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d048      	beq.n	8008ff4 <HAL_DMA_Abort_IT+0x1a8>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a33      	ldr	r2, [pc, #204]	; (8009034 <HAL_DMA_Abort_IT+0x1e8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d040      	beq.n	8008fee <HAL_DMA_Abort_IT+0x1a2>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a31      	ldr	r2, [pc, #196]	; (8009038 <HAL_DMA_Abort_IT+0x1ec>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d038      	beq.n	8008fe8 <HAL_DMA_Abort_IT+0x19c>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a30      	ldr	r2, [pc, #192]	; (800903c <HAL_DMA_Abort_IT+0x1f0>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d030      	beq.n	8008fe2 <HAL_DMA_Abort_IT+0x196>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a2e      	ldr	r2, [pc, #184]	; (8009040 <HAL_DMA_Abort_IT+0x1f4>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d028      	beq.n	8008fdc <HAL_DMA_Abort_IT+0x190>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a26      	ldr	r2, [pc, #152]	; (8009028 <HAL_DMA_Abort_IT+0x1dc>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d020      	beq.n	8008fd6 <HAL_DMA_Abort_IT+0x18a>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a2a      	ldr	r2, [pc, #168]	; (8009044 <HAL_DMA_Abort_IT+0x1f8>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d019      	beq.n	8008fd2 <HAL_DMA_Abort_IT+0x186>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a29      	ldr	r2, [pc, #164]	; (8009048 <HAL_DMA_Abort_IT+0x1fc>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d012      	beq.n	8008fce <HAL_DMA_Abort_IT+0x182>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a27      	ldr	r2, [pc, #156]	; (800904c <HAL_DMA_Abort_IT+0x200>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d00a      	beq.n	8008fc8 <HAL_DMA_Abort_IT+0x17c>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a26      	ldr	r2, [pc, #152]	; (8009050 <HAL_DMA_Abort_IT+0x204>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d102      	bne.n	8008fc2 <HAL_DMA_Abort_IT+0x176>
 8008fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fc0:	e01b      	b.n	8008ffa <HAL_DMA_Abort_IT+0x1ae>
 8008fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008fc6:	e018      	b.n	8008ffa <HAL_DMA_Abort_IT+0x1ae>
 8008fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fcc:	e015      	b.n	8008ffa <HAL_DMA_Abort_IT+0x1ae>
 8008fce:	2310      	movs	r3, #16
 8008fd0:	e013      	b.n	8008ffa <HAL_DMA_Abort_IT+0x1ae>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e011      	b.n	8008ffa <HAL_DMA_Abort_IT+0x1ae>
 8008fd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fda:	e00e      	b.n	8008ffa <HAL_DMA_Abort_IT+0x1ae>
 8008fdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008fe0:	e00b      	b.n	8008ffa <HAL_DMA_Abort_IT+0x1ae>
 8008fe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008fe6:	e008      	b.n	8008ffa <HAL_DMA_Abort_IT+0x1ae>
 8008fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fec:	e005      	b.n	8008ffa <HAL_DMA_Abort_IT+0x1ae>
 8008fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ff2:	e002      	b.n	8008ffa <HAL_DMA_Abort_IT+0x1ae>
 8008ff4:	2310      	movs	r3, #16
 8008ff6:	e000      	b.n	8008ffa <HAL_DMA_Abort_IT+0x1ae>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	4a17      	ldr	r2, [pc, #92]	; (8009058 <HAL_DMA_Abort_IT+0x20c>)
 8008ffc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	4798      	blx	r3
    } 
  }
  return status;
 800901e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	40020080 	.word	0x40020080
 800902c:	40020008 	.word	0x40020008
 8009030:	4002001c 	.word	0x4002001c
 8009034:	40020030 	.word	0x40020030
 8009038:	40020044 	.word	0x40020044
 800903c:	40020058 	.word	0x40020058
 8009040:	4002006c 	.word	0x4002006c
 8009044:	40020408 	.word	0x40020408
 8009048:	4002041c 	.word	0x4002041c
 800904c:	40020430 	.word	0x40020430
 8009050:	40020444 	.word	0x40020444
 8009054:	40020400 	.word	0x40020400
 8009058:	40020000 	.word	0x40020000

0800905c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800905c:	b480      	push	{r7}
 800905e:	b08b      	sub	sp, #44	; 0x2c
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009066:	2300      	movs	r3, #0
 8009068:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800906a:	2300      	movs	r3, #0
 800906c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800906e:	e179      	b.n	8009364 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009070:	2201      	movs	r2, #1
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	fa02 f303 	lsl.w	r3, r2, r3
 8009078:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	4013      	ands	r3, r2
 8009082:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009084:	69ba      	ldr	r2, [r7, #24]
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	429a      	cmp	r2, r3
 800908a:	f040 8168 	bne.w	800935e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	4a96      	ldr	r2, [pc, #600]	; (80092ec <HAL_GPIO_Init+0x290>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d05e      	beq.n	8009156 <HAL_GPIO_Init+0xfa>
 8009098:	4a94      	ldr	r2, [pc, #592]	; (80092ec <HAL_GPIO_Init+0x290>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d875      	bhi.n	800918a <HAL_GPIO_Init+0x12e>
 800909e:	4a94      	ldr	r2, [pc, #592]	; (80092f0 <HAL_GPIO_Init+0x294>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d058      	beq.n	8009156 <HAL_GPIO_Init+0xfa>
 80090a4:	4a92      	ldr	r2, [pc, #584]	; (80092f0 <HAL_GPIO_Init+0x294>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d86f      	bhi.n	800918a <HAL_GPIO_Init+0x12e>
 80090aa:	4a92      	ldr	r2, [pc, #584]	; (80092f4 <HAL_GPIO_Init+0x298>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d052      	beq.n	8009156 <HAL_GPIO_Init+0xfa>
 80090b0:	4a90      	ldr	r2, [pc, #576]	; (80092f4 <HAL_GPIO_Init+0x298>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d869      	bhi.n	800918a <HAL_GPIO_Init+0x12e>
 80090b6:	4a90      	ldr	r2, [pc, #576]	; (80092f8 <HAL_GPIO_Init+0x29c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d04c      	beq.n	8009156 <HAL_GPIO_Init+0xfa>
 80090bc:	4a8e      	ldr	r2, [pc, #568]	; (80092f8 <HAL_GPIO_Init+0x29c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d863      	bhi.n	800918a <HAL_GPIO_Init+0x12e>
 80090c2:	4a8e      	ldr	r2, [pc, #568]	; (80092fc <HAL_GPIO_Init+0x2a0>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d046      	beq.n	8009156 <HAL_GPIO_Init+0xfa>
 80090c8:	4a8c      	ldr	r2, [pc, #560]	; (80092fc <HAL_GPIO_Init+0x2a0>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d85d      	bhi.n	800918a <HAL_GPIO_Init+0x12e>
 80090ce:	2b12      	cmp	r3, #18
 80090d0:	d82a      	bhi.n	8009128 <HAL_GPIO_Init+0xcc>
 80090d2:	2b12      	cmp	r3, #18
 80090d4:	d859      	bhi.n	800918a <HAL_GPIO_Init+0x12e>
 80090d6:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <HAL_GPIO_Init+0x80>)
 80090d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090dc:	08009157 	.word	0x08009157
 80090e0:	08009131 	.word	0x08009131
 80090e4:	08009143 	.word	0x08009143
 80090e8:	08009185 	.word	0x08009185
 80090ec:	0800918b 	.word	0x0800918b
 80090f0:	0800918b 	.word	0x0800918b
 80090f4:	0800918b 	.word	0x0800918b
 80090f8:	0800918b 	.word	0x0800918b
 80090fc:	0800918b 	.word	0x0800918b
 8009100:	0800918b 	.word	0x0800918b
 8009104:	0800918b 	.word	0x0800918b
 8009108:	0800918b 	.word	0x0800918b
 800910c:	0800918b 	.word	0x0800918b
 8009110:	0800918b 	.word	0x0800918b
 8009114:	0800918b 	.word	0x0800918b
 8009118:	0800918b 	.word	0x0800918b
 800911c:	0800918b 	.word	0x0800918b
 8009120:	08009139 	.word	0x08009139
 8009124:	0800914d 	.word	0x0800914d
 8009128:	4a75      	ldr	r2, [pc, #468]	; (8009300 <HAL_GPIO_Init+0x2a4>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d013      	beq.n	8009156 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800912e:	e02c      	b.n	800918a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	623b      	str	r3, [r7, #32]
          break;
 8009136:	e029      	b.n	800918c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	3304      	adds	r3, #4
 800913e:	623b      	str	r3, [r7, #32]
          break;
 8009140:	e024      	b.n	800918c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	3308      	adds	r3, #8
 8009148:	623b      	str	r3, [r7, #32]
          break;
 800914a:	e01f      	b.n	800918c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	330c      	adds	r3, #12
 8009152:	623b      	str	r3, [r7, #32]
          break;
 8009154:	e01a      	b.n	800918c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d102      	bne.n	8009164 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800915e:	2304      	movs	r3, #4
 8009160:	623b      	str	r3, [r7, #32]
          break;
 8009162:	e013      	b.n	800918c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d105      	bne.n	8009178 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800916c:	2308      	movs	r3, #8
 800916e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	69fa      	ldr	r2, [r7, #28]
 8009174:	611a      	str	r2, [r3, #16]
          break;
 8009176:	e009      	b.n	800918c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009178:	2308      	movs	r3, #8
 800917a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	69fa      	ldr	r2, [r7, #28]
 8009180:	615a      	str	r2, [r3, #20]
          break;
 8009182:	e003      	b.n	800918c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009184:	2300      	movs	r3, #0
 8009186:	623b      	str	r3, [r7, #32]
          break;
 8009188:	e000      	b.n	800918c <HAL_GPIO_Init+0x130>
          break;
 800918a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	2bff      	cmp	r3, #255	; 0xff
 8009190:	d801      	bhi.n	8009196 <HAL_GPIO_Init+0x13a>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	e001      	b.n	800919a <HAL_GPIO_Init+0x13e>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	3304      	adds	r3, #4
 800919a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	2bff      	cmp	r3, #255	; 0xff
 80091a0:	d802      	bhi.n	80091a8 <HAL_GPIO_Init+0x14c>
 80091a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	e002      	b.n	80091ae <HAL_GPIO_Init+0x152>
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	3b08      	subs	r3, #8
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	210f      	movs	r1, #15
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	fa01 f303 	lsl.w	r3, r1, r3
 80091bc:	43db      	mvns	r3, r3
 80091be:	401a      	ands	r2, r3
 80091c0:	6a39      	ldr	r1, [r7, #32]
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	fa01 f303 	lsl.w	r3, r1, r3
 80091c8:	431a      	orrs	r2, r3
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f000 80c1 	beq.w	800935e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80091dc:	4b49      	ldr	r3, [pc, #292]	; (8009304 <HAL_GPIO_Init+0x2a8>)
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	4a48      	ldr	r2, [pc, #288]	; (8009304 <HAL_GPIO_Init+0x2a8>)
 80091e2:	f043 0301 	orr.w	r3, r3, #1
 80091e6:	6193      	str	r3, [r2, #24]
 80091e8:	4b46      	ldr	r3, [pc, #280]	; (8009304 <HAL_GPIO_Init+0x2a8>)
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	60bb      	str	r3, [r7, #8]
 80091f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80091f4:	4a44      	ldr	r2, [pc, #272]	; (8009308 <HAL_GPIO_Init+0x2ac>)
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	089b      	lsrs	r3, r3, #2
 80091fa:	3302      	adds	r3, #2
 80091fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009200:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	f003 0303 	and.w	r3, r3, #3
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	220f      	movs	r2, #15
 800920c:	fa02 f303 	lsl.w	r3, r2, r3
 8009210:	43db      	mvns	r3, r3
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	4013      	ands	r3, r2
 8009216:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a3c      	ldr	r2, [pc, #240]	; (800930c <HAL_GPIO_Init+0x2b0>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d01f      	beq.n	8009260 <HAL_GPIO_Init+0x204>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a3b      	ldr	r2, [pc, #236]	; (8009310 <HAL_GPIO_Init+0x2b4>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d019      	beq.n	800925c <HAL_GPIO_Init+0x200>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a3a      	ldr	r2, [pc, #232]	; (8009314 <HAL_GPIO_Init+0x2b8>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d013      	beq.n	8009258 <HAL_GPIO_Init+0x1fc>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a39      	ldr	r2, [pc, #228]	; (8009318 <HAL_GPIO_Init+0x2bc>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d00d      	beq.n	8009254 <HAL_GPIO_Init+0x1f8>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a38      	ldr	r2, [pc, #224]	; (800931c <HAL_GPIO_Init+0x2c0>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d007      	beq.n	8009250 <HAL_GPIO_Init+0x1f4>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a37      	ldr	r2, [pc, #220]	; (8009320 <HAL_GPIO_Init+0x2c4>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d101      	bne.n	800924c <HAL_GPIO_Init+0x1f0>
 8009248:	2305      	movs	r3, #5
 800924a:	e00a      	b.n	8009262 <HAL_GPIO_Init+0x206>
 800924c:	2306      	movs	r3, #6
 800924e:	e008      	b.n	8009262 <HAL_GPIO_Init+0x206>
 8009250:	2304      	movs	r3, #4
 8009252:	e006      	b.n	8009262 <HAL_GPIO_Init+0x206>
 8009254:	2303      	movs	r3, #3
 8009256:	e004      	b.n	8009262 <HAL_GPIO_Init+0x206>
 8009258:	2302      	movs	r3, #2
 800925a:	e002      	b.n	8009262 <HAL_GPIO_Init+0x206>
 800925c:	2301      	movs	r3, #1
 800925e:	e000      	b.n	8009262 <HAL_GPIO_Init+0x206>
 8009260:	2300      	movs	r3, #0
 8009262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009264:	f002 0203 	and.w	r2, r2, #3
 8009268:	0092      	lsls	r2, r2, #2
 800926a:	4093      	lsls	r3, r2
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	4313      	orrs	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009272:	4925      	ldr	r1, [pc, #148]	; (8009308 <HAL_GPIO_Init+0x2ac>)
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	089b      	lsrs	r3, r3, #2
 8009278:	3302      	adds	r3, #2
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d006      	beq.n	800929a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800928c:	4b25      	ldr	r3, [pc, #148]	; (8009324 <HAL_GPIO_Init+0x2c8>)
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	4924      	ldr	r1, [pc, #144]	; (8009324 <HAL_GPIO_Init+0x2c8>)
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	4313      	orrs	r3, r2
 8009296:	608b      	str	r3, [r1, #8]
 8009298:	e006      	b.n	80092a8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800929a:	4b22      	ldr	r3, [pc, #136]	; (8009324 <HAL_GPIO_Init+0x2c8>)
 800929c:	689a      	ldr	r2, [r3, #8]
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	43db      	mvns	r3, r3
 80092a2:	4920      	ldr	r1, [pc, #128]	; (8009324 <HAL_GPIO_Init+0x2c8>)
 80092a4:	4013      	ands	r3, r2
 80092a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d006      	beq.n	80092c2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80092b4:	4b1b      	ldr	r3, [pc, #108]	; (8009324 <HAL_GPIO_Init+0x2c8>)
 80092b6:	68da      	ldr	r2, [r3, #12]
 80092b8:	491a      	ldr	r1, [pc, #104]	; (8009324 <HAL_GPIO_Init+0x2c8>)
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60cb      	str	r3, [r1, #12]
 80092c0:	e006      	b.n	80092d0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80092c2:	4b18      	ldr	r3, [pc, #96]	; (8009324 <HAL_GPIO_Init+0x2c8>)
 80092c4:	68da      	ldr	r2, [r3, #12]
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	43db      	mvns	r3, r3
 80092ca:	4916      	ldr	r1, [pc, #88]	; (8009324 <HAL_GPIO_Init+0x2c8>)
 80092cc:	4013      	ands	r3, r2
 80092ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d025      	beq.n	8009328 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80092dc:	4b11      	ldr	r3, [pc, #68]	; (8009324 <HAL_GPIO_Init+0x2c8>)
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	4910      	ldr	r1, [pc, #64]	; (8009324 <HAL_GPIO_Init+0x2c8>)
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	604b      	str	r3, [r1, #4]
 80092e8:	e025      	b.n	8009336 <HAL_GPIO_Init+0x2da>
 80092ea:	bf00      	nop
 80092ec:	10320000 	.word	0x10320000
 80092f0:	10310000 	.word	0x10310000
 80092f4:	10220000 	.word	0x10220000
 80092f8:	10210000 	.word	0x10210000
 80092fc:	10120000 	.word	0x10120000
 8009300:	10110000 	.word	0x10110000
 8009304:	40021000 	.word	0x40021000
 8009308:	40010000 	.word	0x40010000
 800930c:	40010800 	.word	0x40010800
 8009310:	40010c00 	.word	0x40010c00
 8009314:	40011000 	.word	0x40011000
 8009318:	40011400 	.word	0x40011400
 800931c:	40011800 	.word	0x40011800
 8009320:	40011c00 	.word	0x40011c00
 8009324:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009328:	4b15      	ldr	r3, [pc, #84]	; (8009380 <HAL_GPIO_Init+0x324>)
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	43db      	mvns	r3, r3
 8009330:	4913      	ldr	r1, [pc, #76]	; (8009380 <HAL_GPIO_Init+0x324>)
 8009332:	4013      	ands	r3, r2
 8009334:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800933e:	2b00      	cmp	r3, #0
 8009340:	d006      	beq.n	8009350 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009342:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <HAL_GPIO_Init+0x324>)
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	490e      	ldr	r1, [pc, #56]	; (8009380 <HAL_GPIO_Init+0x324>)
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	4313      	orrs	r3, r2
 800934c:	600b      	str	r3, [r1, #0]
 800934e:	e006      	b.n	800935e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009350:	4b0b      	ldr	r3, [pc, #44]	; (8009380 <HAL_GPIO_Init+0x324>)
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	43db      	mvns	r3, r3
 8009358:	4909      	ldr	r1, [pc, #36]	; (8009380 <HAL_GPIO_Init+0x324>)
 800935a:	4013      	ands	r3, r2
 800935c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800935e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009360:	3301      	adds	r3, #1
 8009362:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936a:	fa22 f303 	lsr.w	r3, r2, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	f47f ae7e 	bne.w	8009070 <HAL_GPIO_Init+0x14>
  }
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop
 8009378:	372c      	adds	r7, #44	; 0x2c
 800937a:	46bd      	mov	sp, r7
 800937c:	bc80      	pop	{r7}
 800937e:	4770      	bx	lr
 8009380:	40010400 	.word	0x40010400

08009384 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009384:	b480      	push	{r7}
 8009386:	b089      	sub	sp, #36	; 0x24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800938e:	2300      	movs	r3, #0
 8009390:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009392:	e0a6      	b.n	80094e2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009394:	2201      	movs	r2, #1
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	fa02 f303 	lsl.w	r3, r2, r3
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	4013      	ands	r3, r2
 80093a0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 8099 	beq.w	80094dc <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80093aa:	4a54      	ldr	r2, [pc, #336]	; (80094fc <HAL_GPIO_DeInit+0x178>)
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	089b      	lsrs	r3, r3, #2
 80093b0:	3302      	adds	r3, #2
 80093b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093b6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	f003 0303 	and.w	r3, r3, #3
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	220f      	movs	r2, #15
 80093c2:	fa02 f303 	lsl.w	r3, r2, r3
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	4013      	ands	r3, r2
 80093ca:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a4c      	ldr	r2, [pc, #304]	; (8009500 <HAL_GPIO_DeInit+0x17c>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d01f      	beq.n	8009414 <HAL_GPIO_DeInit+0x90>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a4b      	ldr	r2, [pc, #300]	; (8009504 <HAL_GPIO_DeInit+0x180>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d019      	beq.n	8009410 <HAL_GPIO_DeInit+0x8c>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a4a      	ldr	r2, [pc, #296]	; (8009508 <HAL_GPIO_DeInit+0x184>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d013      	beq.n	800940c <HAL_GPIO_DeInit+0x88>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a49      	ldr	r2, [pc, #292]	; (800950c <HAL_GPIO_DeInit+0x188>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d00d      	beq.n	8009408 <HAL_GPIO_DeInit+0x84>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a48      	ldr	r2, [pc, #288]	; (8009510 <HAL_GPIO_DeInit+0x18c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d007      	beq.n	8009404 <HAL_GPIO_DeInit+0x80>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a47      	ldr	r2, [pc, #284]	; (8009514 <HAL_GPIO_DeInit+0x190>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d101      	bne.n	8009400 <HAL_GPIO_DeInit+0x7c>
 80093fc:	2305      	movs	r3, #5
 80093fe:	e00a      	b.n	8009416 <HAL_GPIO_DeInit+0x92>
 8009400:	2306      	movs	r3, #6
 8009402:	e008      	b.n	8009416 <HAL_GPIO_DeInit+0x92>
 8009404:	2304      	movs	r3, #4
 8009406:	e006      	b.n	8009416 <HAL_GPIO_DeInit+0x92>
 8009408:	2303      	movs	r3, #3
 800940a:	e004      	b.n	8009416 <HAL_GPIO_DeInit+0x92>
 800940c:	2302      	movs	r3, #2
 800940e:	e002      	b.n	8009416 <HAL_GPIO_DeInit+0x92>
 8009410:	2301      	movs	r3, #1
 8009412:	e000      	b.n	8009416 <HAL_GPIO_DeInit+0x92>
 8009414:	2300      	movs	r3, #0
 8009416:	69fa      	ldr	r2, [r7, #28]
 8009418:	f002 0203 	and.w	r2, r2, #3
 800941c:	0092      	lsls	r2, r2, #2
 800941e:	4093      	lsls	r3, r2
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	429a      	cmp	r2, r3
 8009424:	d132      	bne.n	800948c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009426:	4b3c      	ldr	r3, [pc, #240]	; (8009518 <HAL_GPIO_DeInit+0x194>)
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	43db      	mvns	r3, r3
 800942e:	493a      	ldr	r1, [pc, #232]	; (8009518 <HAL_GPIO_DeInit+0x194>)
 8009430:	4013      	ands	r3, r2
 8009432:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009434:	4b38      	ldr	r3, [pc, #224]	; (8009518 <HAL_GPIO_DeInit+0x194>)
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	43db      	mvns	r3, r3
 800943c:	4936      	ldr	r1, [pc, #216]	; (8009518 <HAL_GPIO_DeInit+0x194>)
 800943e:	4013      	ands	r3, r2
 8009440:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009442:	4b35      	ldr	r3, [pc, #212]	; (8009518 <HAL_GPIO_DeInit+0x194>)
 8009444:	68da      	ldr	r2, [r3, #12]
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	43db      	mvns	r3, r3
 800944a:	4933      	ldr	r1, [pc, #204]	; (8009518 <HAL_GPIO_DeInit+0x194>)
 800944c:	4013      	ands	r3, r2
 800944e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009450:	4b31      	ldr	r3, [pc, #196]	; (8009518 <HAL_GPIO_DeInit+0x194>)
 8009452:	689a      	ldr	r2, [r3, #8]
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	43db      	mvns	r3, r3
 8009458:	492f      	ldr	r1, [pc, #188]	; (8009518 <HAL_GPIO_DeInit+0x194>)
 800945a:	4013      	ands	r3, r2
 800945c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	f003 0303 	and.w	r3, r3, #3
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	220f      	movs	r2, #15
 8009468:	fa02 f303 	lsl.w	r3, r2, r3
 800946c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800946e:	4a23      	ldr	r2, [pc, #140]	; (80094fc <HAL_GPIO_DeInit+0x178>)
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	089b      	lsrs	r3, r3, #2
 8009474:	3302      	adds	r3, #2
 8009476:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	43da      	mvns	r2, r3
 800947e:	481f      	ldr	r0, [pc, #124]	; (80094fc <HAL_GPIO_DeInit+0x178>)
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	089b      	lsrs	r3, r3, #2
 8009484:	400a      	ands	r2, r1
 8009486:	3302      	adds	r3, #2
 8009488:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	2bff      	cmp	r3, #255	; 0xff
 8009490:	d801      	bhi.n	8009496 <HAL_GPIO_DeInit+0x112>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	e001      	b.n	800949a <HAL_GPIO_DeInit+0x116>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	3304      	adds	r3, #4
 800949a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	2bff      	cmp	r3, #255	; 0xff
 80094a0:	d802      	bhi.n	80094a8 <HAL_GPIO_DeInit+0x124>
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	e002      	b.n	80094ae <HAL_GPIO_DeInit+0x12a>
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	3b08      	subs	r3, #8
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	210f      	movs	r1, #15
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	fa01 f303 	lsl.w	r3, r1, r3
 80094bc:	43db      	mvns	r3, r3
 80094be:	401a      	ands	r2, r3
 80094c0:	2104      	movs	r1, #4
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	fa01 f303 	lsl.w	r3, r1, r3
 80094c8:	431a      	orrs	r2, r3
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68da      	ldr	r2, [r3, #12]
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	43db      	mvns	r3, r3
 80094d6:	401a      	ands	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	60da      	str	r2, [r3, #12]
    }

    position++;
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	3301      	adds	r3, #1
 80094e0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	fa22 f303 	lsr.w	r3, r2, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f47f af52 	bne.w	8009394 <HAL_GPIO_DeInit+0x10>
  }
}
 80094f0:	bf00      	nop
 80094f2:	bf00      	nop
 80094f4:	3724      	adds	r7, #36	; 0x24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bc80      	pop	{r7}
 80094fa:	4770      	bx	lr
 80094fc:	40010000 	.word	0x40010000
 8009500:	40010800 	.word	0x40010800
 8009504:	40010c00 	.word	0x40010c00
 8009508:	40011000 	.word	0x40011000
 800950c:	40011400 	.word	0x40011400
 8009510:	40011800 	.word	0x40011800
 8009514:	40011c00 	.word	0x40011c00
 8009518:	40010400 	.word	0x40010400

0800951c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	887b      	ldrh	r3, [r7, #2]
 800952e:	4013      	ands	r3, r2
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009534:	2301      	movs	r3, #1
 8009536:	73fb      	strb	r3, [r7, #15]
 8009538:	e001      	b.n	800953e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800953a:	2300      	movs	r3, #0
 800953c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800953e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	bc80      	pop	{r7}
 8009548:	4770      	bx	lr

0800954a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800954a:	b480      	push	{r7}
 800954c:	b083      	sub	sp, #12
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	460b      	mov	r3, r1
 8009554:	807b      	strh	r3, [r7, #2]
 8009556:	4613      	mov	r3, r2
 8009558:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800955a:	787b      	ldrb	r3, [r7, #1]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d003      	beq.n	8009568 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009560:	887a      	ldrh	r2, [r7, #2]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009566:	e003      	b.n	8009570 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009568:	887b      	ldrh	r3, [r7, #2]
 800956a:	041a      	lsls	r2, r3, #16
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	611a      	str	r2, [r3, #16]
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	bc80      	pop	{r7}
 8009578:	4770      	bx	lr

0800957a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800957a:	b480      	push	{r7}
 800957c:	b085      	sub	sp, #20
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	460b      	mov	r3, r1
 8009584:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800958c:	887a      	ldrh	r2, [r7, #2]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	4013      	ands	r3, r2
 8009592:	041a      	lsls	r2, r3, #16
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	43d9      	mvns	r1, r3
 8009598:	887b      	ldrh	r3, [r7, #2]
 800959a:	400b      	ands	r3, r1
 800959c:	431a      	orrs	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	611a      	str	r2, [r3, #16]
}
 80095a2:	bf00      	nop
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bc80      	pop	{r7}
 80095aa:	4770      	bx	lr

080095ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e12b      	b.n	8009816 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d106      	bne.n	80095d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7fe fff8 	bl	80085c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2224      	movs	r2, #36	; 0x24
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f022 0201 	bic.w	r2, r2, #1
 80095ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800960e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009610:	f001 fdb8 	bl	800b184 <HAL_RCC_GetPCLK1Freq>
 8009614:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	4a81      	ldr	r2, [pc, #516]	; (8009820 <HAL_I2C_Init+0x274>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d807      	bhi.n	8009630 <HAL_I2C_Init+0x84>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4a80      	ldr	r2, [pc, #512]	; (8009824 <HAL_I2C_Init+0x278>)
 8009624:	4293      	cmp	r3, r2
 8009626:	bf94      	ite	ls
 8009628:	2301      	movls	r3, #1
 800962a:	2300      	movhi	r3, #0
 800962c:	b2db      	uxtb	r3, r3
 800962e:	e006      	b.n	800963e <HAL_I2C_Init+0x92>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4a7d      	ldr	r2, [pc, #500]	; (8009828 <HAL_I2C_Init+0x27c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	bf94      	ite	ls
 8009638:	2301      	movls	r3, #1
 800963a:	2300      	movhi	r3, #0
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e0e7      	b.n	8009816 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	4a78      	ldr	r2, [pc, #480]	; (800982c <HAL_I2C_Init+0x280>)
 800964a:	fba2 2303 	umull	r2, r3, r2, r3
 800964e:	0c9b      	lsrs	r3, r3, #18
 8009650:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	430a      	orrs	r2, r1
 8009664:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6a1b      	ldr	r3, [r3, #32]
 800966c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	4a6a      	ldr	r2, [pc, #424]	; (8009820 <HAL_I2C_Init+0x274>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d802      	bhi.n	8009680 <HAL_I2C_Init+0xd4>
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	3301      	adds	r3, #1
 800967e:	e009      	b.n	8009694 <HAL_I2C_Init+0xe8>
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009686:	fb02 f303 	mul.w	r3, r2, r3
 800968a:	4a69      	ldr	r2, [pc, #420]	; (8009830 <HAL_I2C_Init+0x284>)
 800968c:	fba2 2303 	umull	r2, r3, r2, r3
 8009690:	099b      	lsrs	r3, r3, #6
 8009692:	3301      	adds	r3, #1
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	6812      	ldr	r2, [r2, #0]
 8009698:	430b      	orrs	r3, r1
 800969a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80096a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	495c      	ldr	r1, [pc, #368]	; (8009820 <HAL_I2C_Init+0x274>)
 80096b0:	428b      	cmp	r3, r1
 80096b2:	d819      	bhi.n	80096e8 <HAL_I2C_Init+0x13c>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	1e59      	subs	r1, r3, #1
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	fbb1 f3f3 	udiv	r3, r1, r3
 80096c2:	1c59      	adds	r1, r3, #1
 80096c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80096c8:	400b      	ands	r3, r1
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00a      	beq.n	80096e4 <HAL_I2C_Init+0x138>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	1e59      	subs	r1, r3, #1
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80096dc:	3301      	adds	r3, #1
 80096de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096e2:	e051      	b.n	8009788 <HAL_I2C_Init+0x1dc>
 80096e4:	2304      	movs	r3, #4
 80096e6:	e04f      	b.n	8009788 <HAL_I2C_Init+0x1dc>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d111      	bne.n	8009714 <HAL_I2C_Init+0x168>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	1e58      	subs	r0, r3, #1
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6859      	ldr	r1, [r3, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	005b      	lsls	r3, r3, #1
 80096fc:	440b      	add	r3, r1
 80096fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009702:	3301      	adds	r3, #1
 8009704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009708:	2b00      	cmp	r3, #0
 800970a:	bf0c      	ite	eq
 800970c:	2301      	moveq	r3, #1
 800970e:	2300      	movne	r3, #0
 8009710:	b2db      	uxtb	r3, r3
 8009712:	e012      	b.n	800973a <HAL_I2C_Init+0x18e>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	1e58      	subs	r0, r3, #1
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6859      	ldr	r1, [r3, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	440b      	add	r3, r1
 8009722:	0099      	lsls	r1, r3, #2
 8009724:	440b      	add	r3, r1
 8009726:	fbb0 f3f3 	udiv	r3, r0, r3
 800972a:	3301      	adds	r3, #1
 800972c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009730:	2b00      	cmp	r3, #0
 8009732:	bf0c      	ite	eq
 8009734:	2301      	moveq	r3, #1
 8009736:	2300      	movne	r3, #0
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b00      	cmp	r3, #0
 800973c:	d001      	beq.n	8009742 <HAL_I2C_Init+0x196>
 800973e:	2301      	movs	r3, #1
 8009740:	e022      	b.n	8009788 <HAL_I2C_Init+0x1dc>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10e      	bne.n	8009768 <HAL_I2C_Init+0x1bc>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	1e58      	subs	r0, r3, #1
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6859      	ldr	r1, [r3, #4]
 8009752:	460b      	mov	r3, r1
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	440b      	add	r3, r1
 8009758:	fbb0 f3f3 	udiv	r3, r0, r3
 800975c:	3301      	adds	r3, #1
 800975e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009766:	e00f      	b.n	8009788 <HAL_I2C_Init+0x1dc>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	1e58      	subs	r0, r3, #1
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6859      	ldr	r1, [r3, #4]
 8009770:	460b      	mov	r3, r1
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	440b      	add	r3, r1
 8009776:	0099      	lsls	r1, r3, #2
 8009778:	440b      	add	r3, r1
 800977a:	fbb0 f3f3 	udiv	r3, r0, r3
 800977e:	3301      	adds	r3, #1
 8009780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009788:	6879      	ldr	r1, [r7, #4]
 800978a:	6809      	ldr	r1, [r1, #0]
 800978c:	4313      	orrs	r3, r2
 800978e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	69da      	ldr	r2, [r3, #28]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	431a      	orrs	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	430a      	orrs	r2, r1
 80097aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80097b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	6911      	ldr	r1, [r2, #16]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	68d2      	ldr	r2, [r2, #12]
 80097c2:	4311      	orrs	r1, r2
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6812      	ldr	r2, [r2, #0]
 80097c8:	430b      	orrs	r3, r1
 80097ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	695a      	ldr	r2, [r3, #20]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	431a      	orrs	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0201 	orr.w	r2, r2, #1
 80097f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2220      	movs	r2, #32
 8009802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	000186a0 	.word	0x000186a0
 8009824:	001e847f 	.word	0x001e847f
 8009828:	003d08ff 	.word	0x003d08ff
 800982c:	431bde83 	.word	0x431bde83
 8009830:	10624dd3 	.word	0x10624dd3

08009834 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e021      	b.n	800988a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2224      	movs	r2, #36	; 0x24
 800984a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f022 0201 	bic.w	r2, r2, #1
 800985c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7fe fef0 	bl	8008644 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af02      	add	r7, sp, #8
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	461a      	mov	r2, r3
 80098a0:	460b      	mov	r3, r1
 80098a2:	817b      	strh	r3, [r7, #10]
 80098a4:	4613      	mov	r3, r2
 80098a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80098a8:	f7ff f85e 	bl	8008968 <HAL_GetTick>
 80098ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b20      	cmp	r3, #32
 80098b8:	f040 80e0 	bne.w	8009a7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	2319      	movs	r3, #25
 80098c2:	2201      	movs	r2, #1
 80098c4:	4970      	ldr	r1, [pc, #448]	; (8009a88 <HAL_I2C_Master_Transmit+0x1f4>)
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f000 fe5c 	bl	800a584 <I2C_WaitOnFlagUntilTimeout>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80098d2:	2302      	movs	r3, #2
 80098d4:	e0d3      	b.n	8009a7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d101      	bne.n	80098e4 <HAL_I2C_Master_Transmit+0x50>
 80098e0:	2302      	movs	r3, #2
 80098e2:	e0cc      	b.n	8009a7e <HAL_I2C_Master_Transmit+0x1ea>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0301 	and.w	r3, r3, #1
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d007      	beq.n	800990a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f042 0201 	orr.w	r2, r2, #1
 8009908:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009918:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2221      	movs	r2, #33	; 0x21
 800991e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2210      	movs	r2, #16
 8009926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	893a      	ldrh	r2, [r7, #8]
 800993a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009940:	b29a      	uxth	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4a50      	ldr	r2, [pc, #320]	; (8009a8c <HAL_I2C_Master_Transmit+0x1f8>)
 800994a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800994c:	8979      	ldrh	r1, [r7, #10]
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	6a3a      	ldr	r2, [r7, #32]
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 fc16 	bl	800a184 <I2C_MasterRequestWrite>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e08d      	b.n	8009a7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009962:	2300      	movs	r3, #0
 8009964:	613b      	str	r3, [r7, #16]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	613b      	str	r3, [r7, #16]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	613b      	str	r3, [r7, #16]
 8009976:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009978:	e066      	b.n	8009a48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	6a39      	ldr	r1, [r7, #32]
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 ff1a 	bl	800a7b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00d      	beq.n	80099a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998e:	2b04      	cmp	r3, #4
 8009990:	d107      	bne.n	80099a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e06b      	b.n	8009a7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099aa:	781a      	ldrb	r2, [r3, #0]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	1c5a      	adds	r2, r3, #1
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	3b01      	subs	r3, #1
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099ce:	3b01      	subs	r3, #1
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	d11b      	bne.n	8009a1c <HAL_I2C_Master_Transmit+0x188>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d017      	beq.n	8009a1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	781a      	ldrb	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a14:	3b01      	subs	r3, #1
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	6a39      	ldr	r1, [r7, #32]
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 ff11 	bl	800a848 <I2C_WaitOnBTFFlagUntilTimeout>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00d      	beq.n	8009a48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d107      	bne.n	8009a44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e01a      	b.n	8009a7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d194      	bne.n	800997a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2220      	movs	r2, #32
 8009a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	e000      	b.n	8009a7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009a7c:	2302      	movs	r3, #2
  }
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	00100002 	.word	0x00100002
 8009a8c:	ffff0000 	.word	0xffff0000

08009a90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b088      	sub	sp, #32
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	4608      	mov	r0, r1
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	817b      	strh	r3, [r7, #10]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	813b      	strh	r3, [r7, #8]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009aaa:	f7fe ff5d 	bl	8008968 <HAL_GetTick>
 8009aae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b20      	cmp	r3, #32
 8009aba:	f040 80d9 	bne.w	8009c70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	2319      	movs	r3, #25
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	496d      	ldr	r1, [pc, #436]	; (8009c7c <HAL_I2C_Mem_Write+0x1ec>)
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f000 fd5b 	bl	800a584 <I2C_WaitOnFlagUntilTimeout>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	e0cc      	b.n	8009c72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d101      	bne.n	8009ae6 <HAL_I2C_Mem_Write+0x56>
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	e0c5      	b.n	8009c72 <HAL_I2C_Mem_Write+0x1e2>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d007      	beq.n	8009b0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f042 0201 	orr.w	r2, r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2221      	movs	r2, #33	; 0x21
 8009b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2240      	movs	r2, #64	; 0x40
 8009b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6a3a      	ldr	r2, [r7, #32]
 8009b36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	4a4d      	ldr	r2, [pc, #308]	; (8009c80 <HAL_I2C_Mem_Write+0x1f0>)
 8009b4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b4e:	88f8      	ldrh	r0, [r7, #6]
 8009b50:	893a      	ldrh	r2, [r7, #8]
 8009b52:	8979      	ldrh	r1, [r7, #10]
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	9301      	str	r3, [sp, #4]
 8009b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f000 fb92 	bl	800a288 <I2C_RequestMemoryWrite>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d052      	beq.n	8009c10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e081      	b.n	8009c72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f000 fe20 	bl	800a7b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00d      	beq.n	8009b9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	2b04      	cmp	r3, #4
 8009b84:	d107      	bne.n	8009b96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e06b      	b.n	8009c72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	781a      	ldrb	r2, [r3, #0]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	f003 0304 	and.w	r3, r3, #4
 8009bd4:	2b04      	cmp	r3, #4
 8009bd6:	d11b      	bne.n	8009c10 <HAL_I2C_Mem_Write+0x180>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d017      	beq.n	8009c10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be4:	781a      	ldrb	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf0:	1c5a      	adds	r2, r3, #1
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1aa      	bne.n	8009b6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 fe13 	bl	800a848 <I2C_WaitOnBTFFlagUntilTimeout>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00d      	beq.n	8009c44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	d107      	bne.n	8009c40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e016      	b.n	8009c72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2220      	movs	r2, #32
 8009c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	e000      	b.n	8009c72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009c70:	2302      	movs	r3, #2
  }
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	00100002 	.word	0x00100002
 8009c80:	ffff0000 	.word	0xffff0000

08009c84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08c      	sub	sp, #48	; 0x30
 8009c88:	af02      	add	r7, sp, #8
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	4608      	mov	r0, r1
 8009c8e:	4611      	mov	r1, r2
 8009c90:	461a      	mov	r2, r3
 8009c92:	4603      	mov	r3, r0
 8009c94:	817b      	strh	r3, [r7, #10]
 8009c96:	460b      	mov	r3, r1
 8009c98:	813b      	strh	r3, [r7, #8]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ca2:	f7fe fe61 	bl	8008968 <HAL_GetTick>
 8009ca6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b20      	cmp	r3, #32
 8009cb2:	f040 8244 	bne.w	800a13e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	2319      	movs	r3, #25
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	4982      	ldr	r1, [pc, #520]	; (8009ec8 <HAL_I2C_Mem_Read+0x244>)
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 fc5f 	bl	800a584 <I2C_WaitOnFlagUntilTimeout>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d001      	beq.n	8009cd0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009ccc:	2302      	movs	r3, #2
 8009cce:	e237      	b.n	800a140 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d101      	bne.n	8009cde <HAL_I2C_Mem_Read+0x5a>
 8009cda:	2302      	movs	r3, #2
 8009cdc:	e230      	b.n	800a140 <HAL_I2C_Mem_Read+0x4bc>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 0301 	and.w	r3, r3, #1
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d007      	beq.n	8009d04 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f042 0201 	orr.w	r2, r2, #1
 8009d02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2222      	movs	r2, #34	; 0x22
 8009d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2240      	movs	r2, #64	; 0x40
 8009d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4a62      	ldr	r2, [pc, #392]	; (8009ecc <HAL_I2C_Mem_Read+0x248>)
 8009d44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d46:	88f8      	ldrh	r0, [r7, #6]
 8009d48:	893a      	ldrh	r2, [r7, #8]
 8009d4a:	8979      	ldrh	r1, [r7, #10]
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	9301      	str	r3, [sp, #4]
 8009d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	4603      	mov	r3, r0
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 fb2c 	bl	800a3b4 <I2C_RequestMemoryRead>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e1ec      	b.n	800a140 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d113      	bne.n	8009d96 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d6e:	2300      	movs	r3, #0
 8009d70:	61fb      	str	r3, [r7, #28]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	61fb      	str	r3, [r7, #28]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	61fb      	str	r3, [r7, #28]
 8009d82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	e1c0      	b.n	800a118 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d11e      	bne.n	8009ddc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dae:	b672      	cpsid	i
}
 8009db0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009db2:	2300      	movs	r3, #0
 8009db4:	61bb      	str	r3, [r7, #24]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	61bb      	str	r3, [r7, #24]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	61bb      	str	r3, [r7, #24]
 8009dc6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009dd8:	b662      	cpsie	i
}
 8009dda:	e035      	b.n	8009e48 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d11e      	bne.n	8009e22 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009df2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009df4:	b672      	cpsid	i
}
 8009df6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009df8:	2300      	movs	r3, #0
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	617b      	str	r3, [r7, #20]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009e1e:	b662      	cpsie	i
}
 8009e20:	e012      	b.n	8009e48 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009e30:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e32:	2300      	movs	r3, #0
 8009e34:	613b      	str	r3, [r7, #16]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	613b      	str	r3, [r7, #16]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	613b      	str	r3, [r7, #16]
 8009e46:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009e48:	e166      	b.n	800a118 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e4e:	2b03      	cmp	r3, #3
 8009e50:	f200 811f 	bhi.w	800a092 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d123      	bne.n	8009ea4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 fd39 	bl	800a8d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e167      	b.n	800a140 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	691a      	ldr	r2, [r3, #16]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	b2d2      	uxtb	r2, r2
 8009e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e82:	1c5a      	adds	r2, r3, #1
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ea2:	e139      	b.n	800a118 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d152      	bne.n	8009f52 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	4906      	ldr	r1, [pc, #24]	; (8009ed0 <HAL_I2C_Mem_Read+0x24c>)
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 fb64 	bl	800a584 <I2C_WaitOnFlagUntilTimeout>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d008      	beq.n	8009ed4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e13c      	b.n	800a140 <HAL_I2C_Mem_Read+0x4bc>
 8009ec6:	bf00      	nop
 8009ec8:	00100002 	.word	0x00100002
 8009ecc:	ffff0000 	.word	0xffff0000
 8009ed0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009ed4:	b672      	cpsid	i
}
 8009ed6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	691a      	ldr	r2, [r3, #16]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef2:	b2d2      	uxtb	r2, r2
 8009ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efa:	1c5a      	adds	r2, r3, #1
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f04:	3b01      	subs	r3, #1
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	3b01      	subs	r3, #1
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009f1a:	b662      	cpsie	i
}
 8009f1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	691a      	ldr	r2, [r3, #16]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	b2d2      	uxtb	r2, r2
 8009f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f30:	1c5a      	adds	r2, r3, #1
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f50:	e0e2      	b.n	800a118 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f58:	2200      	movs	r2, #0
 8009f5a:	497b      	ldr	r1, [pc, #492]	; (800a148 <HAL_I2C_Mem_Read+0x4c4>)
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f000 fb11 	bl	800a584 <I2C_WaitOnFlagUntilTimeout>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e0e9      	b.n	800a140 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f7c:	b672      	cpsid	i
}
 8009f7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	691a      	ldr	r2, [r3, #16]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8a:	b2d2      	uxtb	r2, r2
 8009f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	3b01      	subs	r3, #1
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009fb2:	4b66      	ldr	r3, [pc, #408]	; (800a14c <HAL_I2C_Mem_Read+0x4c8>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	08db      	lsrs	r3, r3, #3
 8009fb8:	4a65      	ldr	r2, [pc, #404]	; (800a150 <HAL_I2C_Mem_Read+0x4cc>)
 8009fba:	fba2 2303 	umull	r2, r3, r2, r3
 8009fbe:	0a1a      	lsrs	r2, r3, #8
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	4413      	add	r3, r2
 8009fc6:	00da      	lsls	r2, r3, #3
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d118      	bne.n	800a00a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2220      	movs	r2, #32
 8009fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff2:	f043 0220 	orr.w	r2, r3, #32
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009ffa:	b662      	cpsie	i
}
 8009ffc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e09a      	b.n	800a140 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	695b      	ldr	r3, [r3, #20]
 800a010:	f003 0304 	and.w	r3, r3, #4
 800a014:	2b04      	cmp	r3, #4
 800a016:	d1d9      	bne.n	8009fcc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a026:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	691a      	ldr	r2, [r3, #16]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a032:	b2d2      	uxtb	r2, r2
 800a034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a044:	3b01      	subs	r3, #1
 800a046:	b29a      	uxth	r2, r3
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a050:	b29b      	uxth	r3, r3
 800a052:	3b01      	subs	r3, #1
 800a054:	b29a      	uxth	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a05a:	b662      	cpsie	i
}
 800a05c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	691a      	ldr	r2, [r3, #16]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a068:	b2d2      	uxtb	r2, r2
 800a06a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	1c5a      	adds	r2, r3, #1
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a07a:	3b01      	subs	r3, #1
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a086:	b29b      	uxth	r3, r3
 800a088:	3b01      	subs	r3, #1
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a090:	e042      	b.n	800a118 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a094:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f000 fc1e 	bl	800a8d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e04c      	b.n	800a140 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	691a      	ldr	r2, [r3, #16]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	b2d2      	uxtb	r2, r2
 800a0b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b8:	1c5a      	adds	r2, r3, #1
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	f003 0304 	and.w	r3, r3, #4
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d118      	bne.n	800a118 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	691a      	ldr	r2, [r3, #16]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f0:	b2d2      	uxtb	r2, r2
 800a0f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a102:	3b01      	subs	r3, #1
 800a104:	b29a      	uxth	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a10e:	b29b      	uxth	r3, r3
 800a110:	3b01      	subs	r3, #1
 800a112:	b29a      	uxth	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f47f ae94 	bne.w	8009e4a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2220      	movs	r2, #32
 800a126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	e000      	b.n	800a140 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a13e:	2302      	movs	r3, #2
  }
}
 800a140:	4618      	mov	r0, r3
 800a142:	3728      	adds	r7, #40	; 0x28
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	00010004 	.word	0x00010004
 800a14c:	200000a0 	.word	0x200000a0
 800a150:	14f8b589 	.word	0x14f8b589

0800a154 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a162:	b2db      	uxtb	r3, r3
}
 800a164:	4618      	mov	r0, r3
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	bc80      	pop	{r7}
 800a16c:	4770      	bx	lr

0800a16e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a16e:	b480      	push	{r7}
 800a170:	b083      	sub	sp, #12
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	370c      	adds	r7, #12
 800a17e:	46bd      	mov	sp, r7
 800a180:	bc80      	pop	{r7}
 800a182:	4770      	bx	lr

0800a184 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af02      	add	r7, sp, #8
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	607a      	str	r2, [r7, #4]
 800a18e:	603b      	str	r3, [r7, #0]
 800a190:	460b      	mov	r3, r1
 800a192:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a198:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	2b08      	cmp	r3, #8
 800a19e:	d006      	beq.n	800a1ae <I2C_MasterRequestWrite+0x2a>
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d003      	beq.n	800a1ae <I2C_MasterRequestWrite+0x2a>
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a1ac:	d108      	bne.n	800a1c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	e00b      	b.n	800a1d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c4:	2b12      	cmp	r3, #18
 800a1c6:	d107      	bne.n	800a1d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f000 f9cd 	bl	800a584 <I2C_WaitOnFlagUntilTimeout>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00d      	beq.n	800a20c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1fe:	d103      	bne.n	800a208 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a206:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e035      	b.n	800a278 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a214:	d108      	bne.n	800a228 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a216:	897b      	ldrh	r3, [r7, #10]
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	461a      	mov	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a224:	611a      	str	r2, [r3, #16]
 800a226:	e01b      	b.n	800a260 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a228:	897b      	ldrh	r3, [r7, #10]
 800a22a:	11db      	asrs	r3, r3, #7
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	f003 0306 	and.w	r3, r3, #6
 800a232:	b2db      	uxtb	r3, r3
 800a234:	f063 030f 	orn	r3, r3, #15
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	490e      	ldr	r1, [pc, #56]	; (800a280 <I2C_MasterRequestWrite+0xfc>)
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f000 fa16 	bl	800a678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e010      	b.n	800a278 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a256:	897b      	ldrh	r3, [r7, #10]
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	4907      	ldr	r1, [pc, #28]	; (800a284 <I2C_MasterRequestWrite+0x100>)
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f000 fa06 	bl	800a678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e000      	b.n	800a278 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3718      	adds	r7, #24
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	00010008 	.word	0x00010008
 800a284:	00010002 	.word	0x00010002

0800a288 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b088      	sub	sp, #32
 800a28c:	af02      	add	r7, sp, #8
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	4608      	mov	r0, r1
 800a292:	4611      	mov	r1, r2
 800a294:	461a      	mov	r2, r3
 800a296:	4603      	mov	r3, r0
 800a298:	817b      	strh	r3, [r7, #10]
 800a29a:	460b      	mov	r3, r1
 800a29c:	813b      	strh	r3, [r7, #8]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f000 f960 	bl	800a584 <I2C_WaitOnFlagUntilTimeout>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00d      	beq.n	800a2e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2d8:	d103      	bne.n	800a2e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e05f      	b.n	800a3a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a2e6:	897b      	ldrh	r3, [r7, #10]
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a2f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f8:	6a3a      	ldr	r2, [r7, #32]
 800a2fa:	492d      	ldr	r1, [pc, #180]	; (800a3b0 <I2C_RequestMemoryWrite+0x128>)
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 f9bb 	bl	800a678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e04c      	b.n	800a3a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a30c:	2300      	movs	r3, #0
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	617b      	str	r3, [r7, #20]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	617b      	str	r3, [r7, #20]
 800a320:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a324:	6a39      	ldr	r1, [r7, #32]
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f000 fa46 	bl	800a7b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00d      	beq.n	800a34e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	2b04      	cmp	r3, #4
 800a338:	d107      	bne.n	800a34a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a348:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e02b      	b.n	800a3a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a34e:	88fb      	ldrh	r3, [r7, #6]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d105      	bne.n	800a360 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a354:	893b      	ldrh	r3, [r7, #8]
 800a356:	b2da      	uxtb	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	611a      	str	r2, [r3, #16]
 800a35e:	e021      	b.n	800a3a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a360:	893b      	ldrh	r3, [r7, #8]
 800a362:	0a1b      	lsrs	r3, r3, #8
 800a364:	b29b      	uxth	r3, r3
 800a366:	b2da      	uxtb	r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a36e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a370:	6a39      	ldr	r1, [r7, #32]
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 fa20 	bl	800a7b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00d      	beq.n	800a39a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a382:	2b04      	cmp	r3, #4
 800a384:	d107      	bne.n	800a396 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a394:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e005      	b.n	800a3a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a39a:	893b      	ldrh	r3, [r7, #8]
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3718      	adds	r7, #24
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	00010002 	.word	0x00010002

0800a3b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b088      	sub	sp, #32
 800a3b8:	af02      	add	r7, sp, #8
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	4608      	mov	r0, r1
 800a3be:	4611      	mov	r1, r2
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	817b      	strh	r3, [r7, #10]
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	813b      	strh	r3, [r7, #8]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a3dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	6a3b      	ldr	r3, [r7, #32]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f000 f8c2 	bl	800a584 <I2C_WaitOnFlagUntilTimeout>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00d      	beq.n	800a422 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a414:	d103      	bne.n	800a41e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a41c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e0aa      	b.n	800a578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a422:	897b      	ldrh	r3, [r7, #10]
 800a424:	b2db      	uxtb	r3, r3
 800a426:	461a      	mov	r2, r3
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a430:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	6a3a      	ldr	r2, [r7, #32]
 800a436:	4952      	ldr	r1, [pc, #328]	; (800a580 <I2C_RequestMemoryRead+0x1cc>)
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f000 f91d 	bl	800a678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	e097      	b.n	800a578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a448:	2300      	movs	r3, #0
 800a44a:	617b      	str	r3, [r7, #20]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	617b      	str	r3, [r7, #20]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	617b      	str	r3, [r7, #20]
 800a45c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a45e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a460:	6a39      	ldr	r1, [r7, #32]
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 f9a8 	bl	800a7b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00d      	beq.n	800a48a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a472:	2b04      	cmp	r3, #4
 800a474:	d107      	bne.n	800a486 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a484:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e076      	b.n	800a578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a48a:	88fb      	ldrh	r3, [r7, #6]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d105      	bne.n	800a49c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a490:	893b      	ldrh	r3, [r7, #8]
 800a492:	b2da      	uxtb	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	611a      	str	r2, [r3, #16]
 800a49a:	e021      	b.n	800a4e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a49c:	893b      	ldrh	r3, [r7, #8]
 800a49e:	0a1b      	lsrs	r3, r3, #8
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ac:	6a39      	ldr	r1, [r7, #32]
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f000 f982 	bl	800a7b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00d      	beq.n	800a4d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	d107      	bne.n	800a4d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e050      	b.n	800a578 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a4d6:	893b      	ldrh	r3, [r7, #8]
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e2:	6a39      	ldr	r1, [r7, #32]
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 f967 	bl	800a7b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00d      	beq.n	800a50c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4f4:	2b04      	cmp	r3, #4
 800a4f6:	d107      	bne.n	800a508 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a506:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	e035      	b.n	800a578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a51a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	6a3b      	ldr	r3, [r7, #32]
 800a522:	2200      	movs	r2, #0
 800a524:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f000 f82b 	bl	800a584 <I2C_WaitOnFlagUntilTimeout>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00d      	beq.n	800a550 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a53e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a542:	d103      	bne.n	800a54c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a54a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e013      	b.n	800a578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a550:	897b      	ldrh	r3, [r7, #10]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	f043 0301 	orr.w	r3, r3, #1
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	6a3a      	ldr	r2, [r7, #32]
 800a564:	4906      	ldr	r1, [pc, #24]	; (800a580 <I2C_RequestMemoryRead+0x1cc>)
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f000 f886 	bl	800a678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e000      	b.n	800a578 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3718      	adds	r7, #24
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	00010002 	.word	0x00010002

0800a584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	603b      	str	r3, [r7, #0]
 800a590:	4613      	mov	r3, r2
 800a592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a594:	e048      	b.n	800a628 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a59c:	d044      	beq.n	800a628 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a59e:	f7fe f9e3 	bl	8008968 <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d302      	bcc.n	800a5b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d139      	bne.n	800a628 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	0c1b      	lsrs	r3, r3, #16
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d10d      	bne.n	800a5da <I2C_WaitOnFlagUntilTimeout+0x56>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	695b      	ldr	r3, [r3, #20]
 800a5c4:	43da      	mvns	r2, r3
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	bf0c      	ite	eq
 800a5d0:	2301      	moveq	r3, #1
 800a5d2:	2300      	movne	r3, #0
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	e00c      	b.n	800a5f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	43da      	mvns	r2, r3
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	bf0c      	ite	eq
 800a5ec:	2301      	moveq	r3, #1
 800a5ee:	2300      	movne	r3, #0
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	79fb      	ldrb	r3, [r7, #7]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d116      	bne.n	800a628 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2220      	movs	r2, #32
 800a604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a614:	f043 0220 	orr.w	r2, r3, #32
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e023      	b.n	800a670 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	0c1b      	lsrs	r3, r3, #16
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d10d      	bne.n	800a64e <I2C_WaitOnFlagUntilTimeout+0xca>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	695b      	ldr	r3, [r3, #20]
 800a638:	43da      	mvns	r2, r3
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	4013      	ands	r3, r2
 800a63e:	b29b      	uxth	r3, r3
 800a640:	2b00      	cmp	r3, #0
 800a642:	bf0c      	ite	eq
 800a644:	2301      	moveq	r3, #1
 800a646:	2300      	movne	r3, #0
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	461a      	mov	r2, r3
 800a64c:	e00c      	b.n	800a668 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	699b      	ldr	r3, [r3, #24]
 800a654:	43da      	mvns	r2, r3
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	4013      	ands	r3, r2
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	bf0c      	ite	eq
 800a660:	2301      	moveq	r3, #1
 800a662:	2300      	movne	r3, #0
 800a664:	b2db      	uxtb	r3, r3
 800a666:	461a      	mov	r2, r3
 800a668:	79fb      	ldrb	r3, [r7, #7]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d093      	beq.n	800a596 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a686:	e071      	b.n	800a76c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a696:	d123      	bne.n	800a6e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a6b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2220      	movs	r2, #32
 800a6bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6cc:	f043 0204 	orr.w	r2, r3, #4
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e067      	b.n	800a7b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6e6:	d041      	beq.n	800a76c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6e8:	f7fe f93e 	bl	8008968 <HAL_GetTick>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d302      	bcc.n	800a6fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d136      	bne.n	800a76c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	0c1b      	lsrs	r3, r3, #16
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b01      	cmp	r3, #1
 800a706:	d10c      	bne.n	800a722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	43da      	mvns	r2, r3
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	4013      	ands	r3, r2
 800a714:	b29b      	uxth	r3, r3
 800a716:	2b00      	cmp	r3, #0
 800a718:	bf14      	ite	ne
 800a71a:	2301      	movne	r3, #1
 800a71c:	2300      	moveq	r3, #0
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	e00b      	b.n	800a73a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	699b      	ldr	r3, [r3, #24]
 800a728:	43da      	mvns	r2, r3
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	4013      	ands	r3, r2
 800a72e:	b29b      	uxth	r3, r3
 800a730:	2b00      	cmp	r3, #0
 800a732:	bf14      	ite	ne
 800a734:	2301      	movne	r3, #1
 800a736:	2300      	moveq	r3, #0
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d016      	beq.n	800a76c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2220      	movs	r2, #32
 800a748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a758:	f043 0220 	orr.w	r2, r3, #32
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e021      	b.n	800a7b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	0c1b      	lsrs	r3, r3, #16
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b01      	cmp	r3, #1
 800a774:	d10c      	bne.n	800a790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	695b      	ldr	r3, [r3, #20]
 800a77c:	43da      	mvns	r2, r3
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	4013      	ands	r3, r2
 800a782:	b29b      	uxth	r3, r3
 800a784:	2b00      	cmp	r3, #0
 800a786:	bf14      	ite	ne
 800a788:	2301      	movne	r3, #1
 800a78a:	2300      	moveq	r3, #0
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	e00b      	b.n	800a7a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	43da      	mvns	r2, r3
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	4013      	ands	r3, r2
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	bf14      	ite	ne
 800a7a2:	2301      	movne	r3, #1
 800a7a4:	2300      	moveq	r3, #0
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f47f af6d 	bne.w	800a688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a7c4:	e034      	b.n	800a830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f000 f8e3 	bl	800a992 <I2C_IsAcknowledgeFailed>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d001      	beq.n	800a7d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e034      	b.n	800a840 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7dc:	d028      	beq.n	800a830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7de:	f7fe f8c3 	bl	8008968 <HAL_GetTick>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d302      	bcc.n	800a7f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d11d      	bne.n	800a830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	695b      	ldr	r3, [r3, #20]
 800a7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7fe:	2b80      	cmp	r3, #128	; 0x80
 800a800:	d016      	beq.n	800a830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2220      	movs	r2, #32
 800a80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81c:	f043 0220 	orr.w	r2, r3, #32
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e007      	b.n	800a840 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a83a:	2b80      	cmp	r3, #128	; 0x80
 800a83c:	d1c3      	bne.n	800a7c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a854:	e034      	b.n	800a8c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 f89b 	bl	800a992 <I2C_IsAcknowledgeFailed>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e034      	b.n	800a8d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a86c:	d028      	beq.n	800a8c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a86e:	f7fe f87b 	bl	8008968 <HAL_GetTick>
 800a872:	4602      	mov	r2, r0
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d302      	bcc.n	800a884 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d11d      	bne.n	800a8c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	f003 0304 	and.w	r3, r3, #4
 800a88e:	2b04      	cmp	r3, #4
 800a890:	d016      	beq.n	800a8c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2220      	movs	r2, #32
 800a89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ac:	f043 0220 	orr.w	r2, r3, #32
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e007      	b.n	800a8d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	695b      	ldr	r3, [r3, #20]
 800a8c6:	f003 0304 	and.w	r3, r3, #4
 800a8ca:	2b04      	cmp	r3, #4
 800a8cc:	d1c3      	bne.n	800a856 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a8e4:	e049      	b.n	800a97a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	695b      	ldr	r3, [r3, #20]
 800a8ec:	f003 0310 	and.w	r3, r3, #16
 800a8f0:	2b10      	cmp	r3, #16
 800a8f2:	d119      	bne.n	800a928 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f06f 0210 	mvn.w	r2, #16
 800a8fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2220      	movs	r2, #32
 800a908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2200      	movs	r2, #0
 800a910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	e030      	b.n	800a98a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a928:	f7fe f81e 	bl	8008968 <HAL_GetTick>
 800a92c:	4602      	mov	r2, r0
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	1ad3      	subs	r3, r2, r3
 800a932:	68ba      	ldr	r2, [r7, #8]
 800a934:	429a      	cmp	r2, r3
 800a936:	d302      	bcc.n	800a93e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d11d      	bne.n	800a97a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a948:	2b40      	cmp	r3, #64	; 0x40
 800a94a:	d016      	beq.n	800a97a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2200      	movs	r2, #0
 800a950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2220      	movs	r2, #32
 800a956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a966:	f043 0220 	orr.w	r2, r3, #32
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e007      	b.n	800a98a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a984:	2b40      	cmp	r3, #64	; 0x40
 800a986:	d1ae      	bne.n	800a8e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a992:	b480      	push	{r7}
 800a994:	b083      	sub	sp, #12
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	695b      	ldr	r3, [r3, #20]
 800a9a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9a8:	d11b      	bne.n	800a9e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a9b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2220      	movs	r2, #32
 800a9be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ce:	f043 0204 	orr.w	r2, r3, #4
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e000      	b.n	800a9e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bc80      	pop	{r7}
 800a9ec:	4770      	bx	lr
	...

0800a9f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e272      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f000 8087 	beq.w	800ab1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aa10:	4b92      	ldr	r3, [pc, #584]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	f003 030c 	and.w	r3, r3, #12
 800aa18:	2b04      	cmp	r3, #4
 800aa1a:	d00c      	beq.n	800aa36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800aa1c:	4b8f      	ldr	r3, [pc, #572]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	f003 030c 	and.w	r3, r3, #12
 800aa24:	2b08      	cmp	r3, #8
 800aa26:	d112      	bne.n	800aa4e <HAL_RCC_OscConfig+0x5e>
 800aa28:	4b8c      	ldr	r3, [pc, #560]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa34:	d10b      	bne.n	800aa4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa36:	4b89      	ldr	r3, [pc, #548]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d06c      	beq.n	800ab1c <HAL_RCC_OscConfig+0x12c>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d168      	bne.n	800ab1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e24c      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa56:	d106      	bne.n	800aa66 <HAL_RCC_OscConfig+0x76>
 800aa58:	4b80      	ldr	r3, [pc, #512]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a7f      	ldr	r2, [pc, #508]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aa5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa62:	6013      	str	r3, [r2, #0]
 800aa64:	e02e      	b.n	800aac4 <HAL_RCC_OscConfig+0xd4>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d10c      	bne.n	800aa88 <HAL_RCC_OscConfig+0x98>
 800aa6e:	4b7b      	ldr	r3, [pc, #492]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a7a      	ldr	r2, [pc, #488]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aa74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa78:	6013      	str	r3, [r2, #0]
 800aa7a:	4b78      	ldr	r3, [pc, #480]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a77      	ldr	r2, [pc, #476]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aa80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa84:	6013      	str	r3, [r2, #0]
 800aa86:	e01d      	b.n	800aac4 <HAL_RCC_OscConfig+0xd4>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa90:	d10c      	bne.n	800aaac <HAL_RCC_OscConfig+0xbc>
 800aa92:	4b72      	ldr	r3, [pc, #456]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a71      	ldr	r2, [pc, #452]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aa98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	4b6f      	ldr	r3, [pc, #444]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a6e      	ldr	r2, [pc, #440]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aaa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aaa8:	6013      	str	r3, [r2, #0]
 800aaaa:	e00b      	b.n	800aac4 <HAL_RCC_OscConfig+0xd4>
 800aaac:	4b6b      	ldr	r3, [pc, #428]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a6a      	ldr	r2, [pc, #424]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	4b68      	ldr	r3, [pc, #416]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a67      	ldr	r2, [pc, #412]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aabe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aac2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d013      	beq.n	800aaf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aacc:	f7fd ff4c 	bl	8008968 <HAL_GetTick>
 800aad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aad2:	e008      	b.n	800aae6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aad4:	f7fd ff48 	bl	8008968 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	2b64      	cmp	r3, #100	; 0x64
 800aae0:	d901      	bls.n	800aae6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e200      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aae6:	4b5d      	ldr	r3, [pc, #372]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0f0      	beq.n	800aad4 <HAL_RCC_OscConfig+0xe4>
 800aaf2:	e014      	b.n	800ab1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaf4:	f7fd ff38 	bl	8008968 <HAL_GetTick>
 800aaf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aafa:	e008      	b.n	800ab0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aafc:	f7fd ff34 	bl	8008968 <HAL_GetTick>
 800ab00:	4602      	mov	r2, r0
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	2b64      	cmp	r3, #100	; 0x64
 800ab08:	d901      	bls.n	800ab0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	e1ec      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab0e:	4b53      	ldr	r3, [pc, #332]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1f0      	bne.n	800aafc <HAL_RCC_OscConfig+0x10c>
 800ab1a:	e000      	b.n	800ab1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f003 0302 	and.w	r3, r3, #2
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d063      	beq.n	800abf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab2a:	4b4c      	ldr	r3, [pc, #304]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f003 030c 	and.w	r3, r3, #12
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00b      	beq.n	800ab4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ab36:	4b49      	ldr	r3, [pc, #292]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	f003 030c 	and.w	r3, r3, #12
 800ab3e:	2b08      	cmp	r3, #8
 800ab40:	d11c      	bne.n	800ab7c <HAL_RCC_OscConfig+0x18c>
 800ab42:	4b46      	ldr	r3, [pc, #280]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d116      	bne.n	800ab7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab4e:	4b43      	ldr	r3, [pc, #268]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 0302 	and.w	r3, r3, #2
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d005      	beq.n	800ab66 <HAL_RCC_OscConfig+0x176>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d001      	beq.n	800ab66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e1c0      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab66:	4b3d      	ldr	r3, [pc, #244]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	695b      	ldr	r3, [r3, #20]
 800ab72:	00db      	lsls	r3, r3, #3
 800ab74:	4939      	ldr	r1, [pc, #228]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800ab76:	4313      	orrs	r3, r2
 800ab78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab7a:	e03a      	b.n	800abf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d020      	beq.n	800abc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab84:	4b36      	ldr	r3, [pc, #216]	; (800ac60 <HAL_RCC_OscConfig+0x270>)
 800ab86:	2201      	movs	r2, #1
 800ab88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab8a:	f7fd feed 	bl	8008968 <HAL_GetTick>
 800ab8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab90:	e008      	b.n	800aba4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab92:	f7fd fee9 	bl	8008968 <HAL_GetTick>
 800ab96:	4602      	mov	r2, r0
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d901      	bls.n	800aba4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e1a1      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aba4:	4b2d      	ldr	r3, [pc, #180]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 0302 	and.w	r3, r3, #2
 800abac:	2b00      	cmp	r3, #0
 800abae:	d0f0      	beq.n	800ab92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abb0:	4b2a      	ldr	r3, [pc, #168]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	695b      	ldr	r3, [r3, #20]
 800abbc:	00db      	lsls	r3, r3, #3
 800abbe:	4927      	ldr	r1, [pc, #156]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800abc0:	4313      	orrs	r3, r2
 800abc2:	600b      	str	r3, [r1, #0]
 800abc4:	e015      	b.n	800abf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800abc6:	4b26      	ldr	r3, [pc, #152]	; (800ac60 <HAL_RCC_OscConfig+0x270>)
 800abc8:	2200      	movs	r2, #0
 800abca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abcc:	f7fd fecc 	bl	8008968 <HAL_GetTick>
 800abd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800abd2:	e008      	b.n	800abe6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800abd4:	f7fd fec8 	bl	8008968 <HAL_GetTick>
 800abd8:	4602      	mov	r2, r0
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	1ad3      	subs	r3, r2, r3
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d901      	bls.n	800abe6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800abe2:	2303      	movs	r3, #3
 800abe4:	e180      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800abe6:	4b1d      	ldr	r3, [pc, #116]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 0302 	and.w	r3, r3, #2
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1f0      	bne.n	800abd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f003 0308 	and.w	r3, r3, #8
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d03a      	beq.n	800ac74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	699b      	ldr	r3, [r3, #24]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d019      	beq.n	800ac3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac06:	4b17      	ldr	r3, [pc, #92]	; (800ac64 <HAL_RCC_OscConfig+0x274>)
 800ac08:	2201      	movs	r2, #1
 800ac0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac0c:	f7fd feac 	bl	8008968 <HAL_GetTick>
 800ac10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac12:	e008      	b.n	800ac26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac14:	f7fd fea8 	bl	8008968 <HAL_GetTick>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	d901      	bls.n	800ac26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ac22:	2303      	movs	r3, #3
 800ac24:	e160      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac26:	4b0d      	ldr	r3, [pc, #52]	; (800ac5c <HAL_RCC_OscConfig+0x26c>)
 800ac28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d0f0      	beq.n	800ac14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ac32:	2001      	movs	r0, #1
 800ac34:	f000 face 	bl	800b1d4 <RCC_Delay>
 800ac38:	e01c      	b.n	800ac74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac3a:	4b0a      	ldr	r3, [pc, #40]	; (800ac64 <HAL_RCC_OscConfig+0x274>)
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac40:	f7fd fe92 	bl	8008968 <HAL_GetTick>
 800ac44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac46:	e00f      	b.n	800ac68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac48:	f7fd fe8e 	bl	8008968 <HAL_GetTick>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d908      	bls.n	800ac68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ac56:	2303      	movs	r3, #3
 800ac58:	e146      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
 800ac5a:	bf00      	nop
 800ac5c:	40021000 	.word	0x40021000
 800ac60:	42420000 	.word	0x42420000
 800ac64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac68:	4b92      	ldr	r3, [pc, #584]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6c:	f003 0302 	and.w	r3, r3, #2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d1e9      	bne.n	800ac48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 0304 	and.w	r3, r3, #4
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 80a6 	beq.w	800adce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac82:	2300      	movs	r3, #0
 800ac84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac86:	4b8b      	ldr	r3, [pc, #556]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac88:	69db      	ldr	r3, [r3, #28]
 800ac8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d10d      	bne.n	800acae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac92:	4b88      	ldr	r3, [pc, #544]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac94:	69db      	ldr	r3, [r3, #28]
 800ac96:	4a87      	ldr	r2, [pc, #540]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac9c:	61d3      	str	r3, [r2, #28]
 800ac9e:	4b85      	ldr	r3, [pc, #532]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aca6:	60bb      	str	r3, [r7, #8]
 800aca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800acaa:	2301      	movs	r3, #1
 800acac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acae:	4b82      	ldr	r3, [pc, #520]	; (800aeb8 <HAL_RCC_OscConfig+0x4c8>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d118      	bne.n	800acec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800acba:	4b7f      	ldr	r3, [pc, #508]	; (800aeb8 <HAL_RCC_OscConfig+0x4c8>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a7e      	ldr	r2, [pc, #504]	; (800aeb8 <HAL_RCC_OscConfig+0x4c8>)
 800acc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800acc6:	f7fd fe4f 	bl	8008968 <HAL_GetTick>
 800acca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800accc:	e008      	b.n	800ace0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acce:	f7fd fe4b 	bl	8008968 <HAL_GetTick>
 800acd2:	4602      	mov	r2, r0
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	2b64      	cmp	r3, #100	; 0x64
 800acda:	d901      	bls.n	800ace0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800acdc:	2303      	movs	r3, #3
 800acde:	e103      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ace0:	4b75      	ldr	r3, [pc, #468]	; (800aeb8 <HAL_RCC_OscConfig+0x4c8>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d0f0      	beq.n	800acce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d106      	bne.n	800ad02 <HAL_RCC_OscConfig+0x312>
 800acf4:	4b6f      	ldr	r3, [pc, #444]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800acf6:	6a1b      	ldr	r3, [r3, #32]
 800acf8:	4a6e      	ldr	r2, [pc, #440]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800acfa:	f043 0301 	orr.w	r3, r3, #1
 800acfe:	6213      	str	r3, [r2, #32]
 800ad00:	e02d      	b.n	800ad5e <HAL_RCC_OscConfig+0x36e>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10c      	bne.n	800ad24 <HAL_RCC_OscConfig+0x334>
 800ad0a:	4b6a      	ldr	r3, [pc, #424]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	4a69      	ldr	r2, [pc, #420]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad10:	f023 0301 	bic.w	r3, r3, #1
 800ad14:	6213      	str	r3, [r2, #32]
 800ad16:	4b67      	ldr	r3, [pc, #412]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	4a66      	ldr	r2, [pc, #408]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad1c:	f023 0304 	bic.w	r3, r3, #4
 800ad20:	6213      	str	r3, [r2, #32]
 800ad22:	e01c      	b.n	800ad5e <HAL_RCC_OscConfig+0x36e>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	2b05      	cmp	r3, #5
 800ad2a:	d10c      	bne.n	800ad46 <HAL_RCC_OscConfig+0x356>
 800ad2c:	4b61      	ldr	r3, [pc, #388]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	4a60      	ldr	r2, [pc, #384]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad32:	f043 0304 	orr.w	r3, r3, #4
 800ad36:	6213      	str	r3, [r2, #32]
 800ad38:	4b5e      	ldr	r3, [pc, #376]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	4a5d      	ldr	r2, [pc, #372]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad3e:	f043 0301 	orr.w	r3, r3, #1
 800ad42:	6213      	str	r3, [r2, #32]
 800ad44:	e00b      	b.n	800ad5e <HAL_RCC_OscConfig+0x36e>
 800ad46:	4b5b      	ldr	r3, [pc, #364]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	4a5a      	ldr	r2, [pc, #360]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad4c:	f023 0301 	bic.w	r3, r3, #1
 800ad50:	6213      	str	r3, [r2, #32]
 800ad52:	4b58      	ldr	r3, [pc, #352]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	4a57      	ldr	r2, [pc, #348]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad58:	f023 0304 	bic.w	r3, r3, #4
 800ad5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d015      	beq.n	800ad92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad66:	f7fd fdff 	bl	8008968 <HAL_GetTick>
 800ad6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad6c:	e00a      	b.n	800ad84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad6e:	f7fd fdfb 	bl	8008968 <HAL_GetTick>
 800ad72:	4602      	mov	r2, r0
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	1ad3      	subs	r3, r2, r3
 800ad78:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d901      	bls.n	800ad84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ad80:	2303      	movs	r3, #3
 800ad82:	e0b1      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad84:	4b4b      	ldr	r3, [pc, #300]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad86:	6a1b      	ldr	r3, [r3, #32]
 800ad88:	f003 0302 	and.w	r3, r3, #2
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d0ee      	beq.n	800ad6e <HAL_RCC_OscConfig+0x37e>
 800ad90:	e014      	b.n	800adbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad92:	f7fd fde9 	bl	8008968 <HAL_GetTick>
 800ad96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad98:	e00a      	b.n	800adb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad9a:	f7fd fde5 	bl	8008968 <HAL_GetTick>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	1ad3      	subs	r3, r2, r3
 800ada4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d901      	bls.n	800adb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800adac:	2303      	movs	r3, #3
 800adae:	e09b      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800adb0:	4b40      	ldr	r3, [pc, #256]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800adb2:	6a1b      	ldr	r3, [r3, #32]
 800adb4:	f003 0302 	and.w	r3, r3, #2
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1ee      	bne.n	800ad9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800adbc:	7dfb      	ldrb	r3, [r7, #23]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d105      	bne.n	800adce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800adc2:	4b3c      	ldr	r3, [pc, #240]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800adc4:	69db      	ldr	r3, [r3, #28]
 800adc6:	4a3b      	ldr	r2, [pc, #236]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800adc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	2b00      	cmp	r3, #0
 800add4:	f000 8087 	beq.w	800aee6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800add8:	4b36      	ldr	r3, [pc, #216]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	f003 030c 	and.w	r3, r3, #12
 800ade0:	2b08      	cmp	r3, #8
 800ade2:	d061      	beq.n	800aea8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	69db      	ldr	r3, [r3, #28]
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d146      	bne.n	800ae7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adec:	4b33      	ldr	r3, [pc, #204]	; (800aebc <HAL_RCC_OscConfig+0x4cc>)
 800adee:	2200      	movs	r2, #0
 800adf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800adf2:	f7fd fdb9 	bl	8008968 <HAL_GetTick>
 800adf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800adf8:	e008      	b.n	800ae0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adfa:	f7fd fdb5 	bl	8008968 <HAL_GetTick>
 800adfe:	4602      	mov	r2, r0
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d901      	bls.n	800ae0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	e06d      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ae0c:	4b29      	ldr	r3, [pc, #164]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1f0      	bne.n	800adfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae20:	d108      	bne.n	800ae34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ae22:	4b24      	ldr	r3, [pc, #144]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	4921      	ldr	r1, [pc, #132]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ae30:	4313      	orrs	r3, r2
 800ae32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae34:	4b1f      	ldr	r3, [pc, #124]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a19      	ldr	r1, [r3, #32]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae44:	430b      	orrs	r3, r1
 800ae46:	491b      	ldr	r1, [pc, #108]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae4c:	4b1b      	ldr	r3, [pc, #108]	; (800aebc <HAL_RCC_OscConfig+0x4cc>)
 800ae4e:	2201      	movs	r2, #1
 800ae50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae52:	f7fd fd89 	bl	8008968 <HAL_GetTick>
 800ae56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ae58:	e008      	b.n	800ae6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae5a:	f7fd fd85 	bl	8008968 <HAL_GetTick>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d901      	bls.n	800ae6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	e03d      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ae6c:	4b11      	ldr	r3, [pc, #68]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d0f0      	beq.n	800ae5a <HAL_RCC_OscConfig+0x46a>
 800ae78:	e035      	b.n	800aee6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae7a:	4b10      	ldr	r3, [pc, #64]	; (800aebc <HAL_RCC_OscConfig+0x4cc>)
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae80:	f7fd fd72 	bl	8008968 <HAL_GetTick>
 800ae84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ae86:	e008      	b.n	800ae9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae88:	f7fd fd6e 	bl	8008968 <HAL_GetTick>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d901      	bls.n	800ae9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e026      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ae9a:	4b06      	ldr	r3, [pc, #24]	; (800aeb4 <HAL_RCC_OscConfig+0x4c4>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1f0      	bne.n	800ae88 <HAL_RCC_OscConfig+0x498>
 800aea6:	e01e      	b.n	800aee6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	69db      	ldr	r3, [r3, #28]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d107      	bne.n	800aec0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e019      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
 800aeb4:	40021000 	.word	0x40021000
 800aeb8:	40007000 	.word	0x40007000
 800aebc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800aec0:	4b0b      	ldr	r3, [pc, #44]	; (800aef0 <HAL_RCC_OscConfig+0x500>)
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a1b      	ldr	r3, [r3, #32]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d106      	bne.n	800aee2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aede:	429a      	cmp	r2, r3
 800aee0:	d001      	beq.n	800aee6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e000      	b.n	800aee8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3718      	adds	r7, #24
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	40021000 	.word	0x40021000

0800aef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d101      	bne.n	800af08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	e0d0      	b.n	800b0aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af08:	4b6a      	ldr	r3, [pc, #424]	; (800b0b4 <HAL_RCC_ClockConfig+0x1c0>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f003 0307 	and.w	r3, r3, #7
 800af10:	683a      	ldr	r2, [r7, #0]
 800af12:	429a      	cmp	r2, r3
 800af14:	d910      	bls.n	800af38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af16:	4b67      	ldr	r3, [pc, #412]	; (800b0b4 <HAL_RCC_ClockConfig+0x1c0>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f023 0207 	bic.w	r2, r3, #7
 800af1e:	4965      	ldr	r1, [pc, #404]	; (800b0b4 <HAL_RCC_ClockConfig+0x1c0>)
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	4313      	orrs	r3, r2
 800af24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af26:	4b63      	ldr	r3, [pc, #396]	; (800b0b4 <HAL_RCC_ClockConfig+0x1c0>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f003 0307 	and.w	r3, r3, #7
 800af2e:	683a      	ldr	r2, [r7, #0]
 800af30:	429a      	cmp	r2, r3
 800af32:	d001      	beq.n	800af38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	e0b8      	b.n	800b0aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f003 0302 	and.w	r3, r3, #2
 800af40:	2b00      	cmp	r3, #0
 800af42:	d020      	beq.n	800af86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0304 	and.w	r3, r3, #4
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d005      	beq.n	800af5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800af50:	4b59      	ldr	r3, [pc, #356]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	4a58      	ldr	r2, [pc, #352]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800af56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800af5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 0308 	and.w	r3, r3, #8
 800af64:	2b00      	cmp	r3, #0
 800af66:	d005      	beq.n	800af74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800af68:	4b53      	ldr	r3, [pc, #332]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	4a52      	ldr	r2, [pc, #328]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800af6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800af72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af74:	4b50      	ldr	r3, [pc, #320]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	494d      	ldr	r1, [pc, #308]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800af82:	4313      	orrs	r3, r2
 800af84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d040      	beq.n	800b014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d107      	bne.n	800afaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af9a:	4b47      	ldr	r3, [pc, #284]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d115      	bne.n	800afd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e07f      	b.n	800b0aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d107      	bne.n	800afc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800afb2:	4b41      	ldr	r3, [pc, #260]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d109      	bne.n	800afd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	e073      	b.n	800b0aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afc2:	4b3d      	ldr	r3, [pc, #244]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f003 0302 	and.w	r3, r3, #2
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d101      	bne.n	800afd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e06b      	b.n	800b0aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800afd2:	4b39      	ldr	r3, [pc, #228]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	f023 0203 	bic.w	r2, r3, #3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	4936      	ldr	r1, [pc, #216]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800afe0:	4313      	orrs	r3, r2
 800afe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800afe4:	f7fd fcc0 	bl	8008968 <HAL_GetTick>
 800afe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afea:	e00a      	b.n	800b002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800afec:	f7fd fcbc 	bl	8008968 <HAL_GetTick>
 800aff0:	4602      	mov	r2, r0
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	f241 3288 	movw	r2, #5000	; 0x1388
 800affa:	4293      	cmp	r3, r2
 800affc:	d901      	bls.n	800b002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800affe:	2303      	movs	r3, #3
 800b000:	e053      	b.n	800b0aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b002:	4b2d      	ldr	r3, [pc, #180]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f003 020c 	and.w	r2, r3, #12
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	429a      	cmp	r2, r3
 800b012:	d1eb      	bne.n	800afec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b014:	4b27      	ldr	r3, [pc, #156]	; (800b0b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d210      	bcs.n	800b044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b022:	4b24      	ldr	r3, [pc, #144]	; (800b0b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f023 0207 	bic.w	r2, r3, #7
 800b02a:	4922      	ldr	r1, [pc, #136]	; (800b0b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	4313      	orrs	r3, r2
 800b030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b032:	4b20      	ldr	r3, [pc, #128]	; (800b0b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0307 	and.w	r3, r3, #7
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d001      	beq.n	800b044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	e032      	b.n	800b0aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d008      	beq.n	800b062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b050:	4b19      	ldr	r3, [pc, #100]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	4916      	ldr	r1, [pc, #88]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b05e:	4313      	orrs	r3, r2
 800b060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 0308 	and.w	r3, r3, #8
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d009      	beq.n	800b082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b06e:	4b12      	ldr	r3, [pc, #72]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	00db      	lsls	r3, r3, #3
 800b07c:	490e      	ldr	r1, [pc, #56]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b07e:	4313      	orrs	r3, r2
 800b080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b082:	f000 f821 	bl	800b0c8 <HAL_RCC_GetSysClockFreq>
 800b086:	4602      	mov	r2, r0
 800b088:	4b0b      	ldr	r3, [pc, #44]	; (800b0b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	091b      	lsrs	r3, r3, #4
 800b08e:	f003 030f 	and.w	r3, r3, #15
 800b092:	490a      	ldr	r1, [pc, #40]	; (800b0bc <HAL_RCC_ClockConfig+0x1c8>)
 800b094:	5ccb      	ldrb	r3, [r1, r3]
 800b096:	fa22 f303 	lsr.w	r3, r2, r3
 800b09a:	4a09      	ldr	r2, [pc, #36]	; (800b0c0 <HAL_RCC_ClockConfig+0x1cc>)
 800b09c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b09e:	4b09      	ldr	r3, [pc, #36]	; (800b0c4 <HAL_RCC_ClockConfig+0x1d0>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fd fc1e 	bl	80088e4 <HAL_InitTick>

  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	40022000 	.word	0x40022000
 800b0b8:	40021000 	.word	0x40021000
 800b0bc:	0800e05c 	.word	0x0800e05c
 800b0c0:	200000a0 	.word	0x200000a0
 800b0c4:	200000a4 	.word	0x200000a4

0800b0c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b087      	sub	sp, #28
 800b0cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	60fb      	str	r3, [r7, #12]
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60bb      	str	r3, [r7, #8]
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	617b      	str	r3, [r7, #20]
 800b0da:	2300      	movs	r3, #0
 800b0dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b0e2:	4b1e      	ldr	r3, [pc, #120]	; (800b15c <HAL_RCC_GetSysClockFreq+0x94>)
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f003 030c 	and.w	r3, r3, #12
 800b0ee:	2b04      	cmp	r3, #4
 800b0f0:	d002      	beq.n	800b0f8 <HAL_RCC_GetSysClockFreq+0x30>
 800b0f2:	2b08      	cmp	r3, #8
 800b0f4:	d003      	beq.n	800b0fe <HAL_RCC_GetSysClockFreq+0x36>
 800b0f6:	e027      	b.n	800b148 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b0f8:	4b19      	ldr	r3, [pc, #100]	; (800b160 <HAL_RCC_GetSysClockFreq+0x98>)
 800b0fa:	613b      	str	r3, [r7, #16]
      break;
 800b0fc:	e027      	b.n	800b14e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	0c9b      	lsrs	r3, r3, #18
 800b102:	f003 030f 	and.w	r3, r3, #15
 800b106:	4a17      	ldr	r2, [pc, #92]	; (800b164 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b108:	5cd3      	ldrb	r3, [r2, r3]
 800b10a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b112:	2b00      	cmp	r3, #0
 800b114:	d010      	beq.n	800b138 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b116:	4b11      	ldr	r3, [pc, #68]	; (800b15c <HAL_RCC_GetSysClockFreq+0x94>)
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	0c5b      	lsrs	r3, r3, #17
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	4a11      	ldr	r2, [pc, #68]	; (800b168 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b122:	5cd3      	ldrb	r3, [r2, r3]
 800b124:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a0d      	ldr	r2, [pc, #52]	; (800b160 <HAL_RCC_GetSysClockFreq+0x98>)
 800b12a:	fb03 f202 	mul.w	r2, r3, r2
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	fbb2 f3f3 	udiv	r3, r2, r3
 800b134:	617b      	str	r3, [r7, #20]
 800b136:	e004      	b.n	800b142 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4a0c      	ldr	r2, [pc, #48]	; (800b16c <HAL_RCC_GetSysClockFreq+0xa4>)
 800b13c:	fb02 f303 	mul.w	r3, r2, r3
 800b140:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	613b      	str	r3, [r7, #16]
      break;
 800b146:	e002      	b.n	800b14e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b148:	4b05      	ldr	r3, [pc, #20]	; (800b160 <HAL_RCC_GetSysClockFreq+0x98>)
 800b14a:	613b      	str	r3, [r7, #16]
      break;
 800b14c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b14e:	693b      	ldr	r3, [r7, #16]
}
 800b150:	4618      	mov	r0, r3
 800b152:	371c      	adds	r7, #28
 800b154:	46bd      	mov	sp, r7
 800b156:	bc80      	pop	{r7}
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	40021000 	.word	0x40021000
 800b160:	007a1200 	.word	0x007a1200
 800b164:	0800e074 	.word	0x0800e074
 800b168:	0800e084 	.word	0x0800e084
 800b16c:	003d0900 	.word	0x003d0900

0800b170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b170:	b480      	push	{r7}
 800b172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b174:	4b02      	ldr	r3, [pc, #8]	; (800b180 <HAL_RCC_GetHCLKFreq+0x10>)
 800b176:	681b      	ldr	r3, [r3, #0]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bc80      	pop	{r7}
 800b17e:	4770      	bx	lr
 800b180:	200000a0 	.word	0x200000a0

0800b184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b188:	f7ff fff2 	bl	800b170 <HAL_RCC_GetHCLKFreq>
 800b18c:	4602      	mov	r2, r0
 800b18e:	4b05      	ldr	r3, [pc, #20]	; (800b1a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	0a1b      	lsrs	r3, r3, #8
 800b194:	f003 0307 	and.w	r3, r3, #7
 800b198:	4903      	ldr	r1, [pc, #12]	; (800b1a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b19a:	5ccb      	ldrb	r3, [r1, r3]
 800b19c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	40021000 	.word	0x40021000
 800b1a8:	0800e06c 	.word	0x0800e06c

0800b1ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b1b0:	f7ff ffde 	bl	800b170 <HAL_RCC_GetHCLKFreq>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	4b05      	ldr	r3, [pc, #20]	; (800b1cc <HAL_RCC_GetPCLK2Freq+0x20>)
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	0adb      	lsrs	r3, r3, #11
 800b1bc:	f003 0307 	and.w	r3, r3, #7
 800b1c0:	4903      	ldr	r1, [pc, #12]	; (800b1d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b1c2:	5ccb      	ldrb	r3, [r1, r3]
 800b1c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	40021000 	.word	0x40021000
 800b1d0:	0800e06c 	.word	0x0800e06c

0800b1d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b1dc:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <RCC_Delay+0x34>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a0a      	ldr	r2, [pc, #40]	; (800b20c <RCC_Delay+0x38>)
 800b1e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1e6:	0a5b      	lsrs	r3, r3, #9
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	fb02 f303 	mul.w	r3, r2, r3
 800b1ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b1f0:	bf00      	nop
  }
  while (Delay --);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	1e5a      	subs	r2, r3, #1
 800b1f6:	60fa      	str	r2, [r7, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1f9      	bne.n	800b1f0 <RCC_Delay+0x1c>
}
 800b1fc:	bf00      	nop
 800b1fe:	bf00      	nop
 800b200:	3714      	adds	r7, #20
 800b202:	46bd      	mov	sp, r7
 800b204:	bc80      	pop	{r7}
 800b206:	4770      	bx	lr
 800b208:	200000a0 	.word	0x200000a0
 800b20c:	10624dd3 	.word	0x10624dd3

0800b210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d101      	bne.n	800b222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	e041      	b.n	800b2a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d106      	bne.n	800b23c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7fd fa26 	bl	8008688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2202      	movs	r2, #2
 800b240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3304      	adds	r3, #4
 800b24c:	4619      	mov	r1, r3
 800b24e:	4610      	mov	r0, r2
 800b250:	f000 fa82 	bl	800b758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2201      	movs	r2, #1
 800b268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2201      	movs	r2, #1
 800b270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d001      	beq.n	800b2c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e044      	b.n	800b352 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2202      	movs	r2, #2
 800b2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68da      	ldr	r2, [r3, #12]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f042 0201 	orr.w	r2, r2, #1
 800b2de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a1d      	ldr	r2, [pc, #116]	; (800b35c <HAL_TIM_Base_Start_IT+0xac>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d018      	beq.n	800b31c <HAL_TIM_Base_Start_IT+0x6c>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a1c      	ldr	r2, [pc, #112]	; (800b360 <HAL_TIM_Base_Start_IT+0xb0>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d013      	beq.n	800b31c <HAL_TIM_Base_Start_IT+0x6c>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2fc:	d00e      	beq.n	800b31c <HAL_TIM_Base_Start_IT+0x6c>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a18      	ldr	r2, [pc, #96]	; (800b364 <HAL_TIM_Base_Start_IT+0xb4>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d009      	beq.n	800b31c <HAL_TIM_Base_Start_IT+0x6c>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a16      	ldr	r2, [pc, #88]	; (800b368 <HAL_TIM_Base_Start_IT+0xb8>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d004      	beq.n	800b31c <HAL_TIM_Base_Start_IT+0x6c>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a15      	ldr	r2, [pc, #84]	; (800b36c <HAL_TIM_Base_Start_IT+0xbc>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d111      	bne.n	800b340 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	f003 0307 	and.w	r3, r3, #7
 800b326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2b06      	cmp	r3, #6
 800b32c:	d010      	beq.n	800b350 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f042 0201 	orr.w	r2, r2, #1
 800b33c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b33e:	e007      	b.n	800b350 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f042 0201 	orr.w	r2, r2, #1
 800b34e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	bc80      	pop	{r7}
 800b35a:	4770      	bx	lr
 800b35c:	40012c00 	.word	0x40012c00
 800b360:	40013400 	.word	0x40013400
 800b364:	40000400 	.word	0x40000400
 800b368:	40000800 	.word	0x40000800
 800b36c:	40000c00 	.word	0x40000c00

0800b370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	f003 0302 	and.w	r3, r3, #2
 800b382:	2b02      	cmp	r3, #2
 800b384:	d122      	bne.n	800b3cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	f003 0302 	and.w	r3, r3, #2
 800b390:	2b02      	cmp	r3, #2
 800b392:	d11b      	bne.n	800b3cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f06f 0202 	mvn.w	r2, #2
 800b39c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	699b      	ldr	r3, [r3, #24]
 800b3aa:	f003 0303 	and.w	r3, r3, #3
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f9b4 	bl	800b720 <HAL_TIM_IC_CaptureCallback>
 800b3b8:	e005      	b.n	800b3c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f9a7 	bl	800b70e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 f9b6 	bl	800b732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	f003 0304 	and.w	r3, r3, #4
 800b3d6:	2b04      	cmp	r3, #4
 800b3d8:	d122      	bne.n	800b420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	f003 0304 	and.w	r3, r3, #4
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d11b      	bne.n	800b420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f06f 0204 	mvn.w	r2, #4
 800b3f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2202      	movs	r2, #2
 800b3f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	699b      	ldr	r3, [r3, #24]
 800b3fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b402:	2b00      	cmp	r3, #0
 800b404:	d003      	beq.n	800b40e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f98a 	bl	800b720 <HAL_TIM_IC_CaptureCallback>
 800b40c:	e005      	b.n	800b41a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f97d 	bl	800b70e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 f98c 	bl	800b732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	f003 0308 	and.w	r3, r3, #8
 800b42a:	2b08      	cmp	r3, #8
 800b42c:	d122      	bne.n	800b474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	f003 0308 	and.w	r3, r3, #8
 800b438:	2b08      	cmp	r3, #8
 800b43a:	d11b      	bne.n	800b474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f06f 0208 	mvn.w	r2, #8
 800b444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2204      	movs	r2, #4
 800b44a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	69db      	ldr	r3, [r3, #28]
 800b452:	f003 0303 	and.w	r3, r3, #3
 800b456:	2b00      	cmp	r3, #0
 800b458:	d003      	beq.n	800b462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f960 	bl	800b720 <HAL_TIM_IC_CaptureCallback>
 800b460:	e005      	b.n	800b46e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f953 	bl	800b70e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 f962 	bl	800b732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	f003 0310 	and.w	r3, r3, #16
 800b47e:	2b10      	cmp	r3, #16
 800b480:	d122      	bne.n	800b4c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	f003 0310 	and.w	r3, r3, #16
 800b48c:	2b10      	cmp	r3, #16
 800b48e:	d11b      	bne.n	800b4c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f06f 0210 	mvn.w	r2, #16
 800b498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2208      	movs	r2, #8
 800b49e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	69db      	ldr	r3, [r3, #28]
 800b4a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d003      	beq.n	800b4b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f936 	bl	800b720 <HAL_TIM_IC_CaptureCallback>
 800b4b4:	e005      	b.n	800b4c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f929 	bl	800b70e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f938 	bl	800b732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	691b      	ldr	r3, [r3, #16]
 800b4ce:	f003 0301 	and.w	r3, r3, #1
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d10e      	bne.n	800b4f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d107      	bne.n	800b4f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f06f 0201 	mvn.w	r2, #1
 800b4ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7fc fd62 	bl	8007fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4fe:	2b80      	cmp	r3, #128	; 0x80
 800b500:	d10e      	bne.n	800b520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b50c:	2b80      	cmp	r3, #128	; 0x80
 800b50e:	d107      	bne.n	800b520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 faa1 	bl	800ba62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b52a:	2b40      	cmp	r3, #64	; 0x40
 800b52c:	d10e      	bne.n	800b54c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b538:	2b40      	cmp	r3, #64	; 0x40
 800b53a:	d107      	bne.n	800b54c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f8fc 	bl	800b744 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	f003 0320 	and.w	r3, r3, #32
 800b556:	2b20      	cmp	r3, #32
 800b558:	d10e      	bne.n	800b578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	f003 0320 	and.w	r3, r3, #32
 800b564:	2b20      	cmp	r3, #32
 800b566:	d107      	bne.n	800b578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f06f 0220 	mvn.w	r2, #32
 800b570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fa6c 	bl	800ba50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b578:	bf00      	nop
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b594:	2b01      	cmp	r3, #1
 800b596:	d101      	bne.n	800b59c <HAL_TIM_ConfigClockSource+0x1c>
 800b598:	2302      	movs	r3, #2
 800b59a:	e0b4      	b.n	800b706 <HAL_TIM_ConfigClockSource+0x186>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2202      	movs	r2, #2
 800b5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b5ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	68ba      	ldr	r2, [r7, #8]
 800b5ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5d4:	d03e      	beq.n	800b654 <HAL_TIM_ConfigClockSource+0xd4>
 800b5d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5da:	f200 8087 	bhi.w	800b6ec <HAL_TIM_ConfigClockSource+0x16c>
 800b5de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5e2:	f000 8086 	beq.w	800b6f2 <HAL_TIM_ConfigClockSource+0x172>
 800b5e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5ea:	d87f      	bhi.n	800b6ec <HAL_TIM_ConfigClockSource+0x16c>
 800b5ec:	2b70      	cmp	r3, #112	; 0x70
 800b5ee:	d01a      	beq.n	800b626 <HAL_TIM_ConfigClockSource+0xa6>
 800b5f0:	2b70      	cmp	r3, #112	; 0x70
 800b5f2:	d87b      	bhi.n	800b6ec <HAL_TIM_ConfigClockSource+0x16c>
 800b5f4:	2b60      	cmp	r3, #96	; 0x60
 800b5f6:	d050      	beq.n	800b69a <HAL_TIM_ConfigClockSource+0x11a>
 800b5f8:	2b60      	cmp	r3, #96	; 0x60
 800b5fa:	d877      	bhi.n	800b6ec <HAL_TIM_ConfigClockSource+0x16c>
 800b5fc:	2b50      	cmp	r3, #80	; 0x50
 800b5fe:	d03c      	beq.n	800b67a <HAL_TIM_ConfigClockSource+0xfa>
 800b600:	2b50      	cmp	r3, #80	; 0x50
 800b602:	d873      	bhi.n	800b6ec <HAL_TIM_ConfigClockSource+0x16c>
 800b604:	2b40      	cmp	r3, #64	; 0x40
 800b606:	d058      	beq.n	800b6ba <HAL_TIM_ConfigClockSource+0x13a>
 800b608:	2b40      	cmp	r3, #64	; 0x40
 800b60a:	d86f      	bhi.n	800b6ec <HAL_TIM_ConfigClockSource+0x16c>
 800b60c:	2b30      	cmp	r3, #48	; 0x30
 800b60e:	d064      	beq.n	800b6da <HAL_TIM_ConfigClockSource+0x15a>
 800b610:	2b30      	cmp	r3, #48	; 0x30
 800b612:	d86b      	bhi.n	800b6ec <HAL_TIM_ConfigClockSource+0x16c>
 800b614:	2b20      	cmp	r3, #32
 800b616:	d060      	beq.n	800b6da <HAL_TIM_ConfigClockSource+0x15a>
 800b618:	2b20      	cmp	r3, #32
 800b61a:	d867      	bhi.n	800b6ec <HAL_TIM_ConfigClockSource+0x16c>
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d05c      	beq.n	800b6da <HAL_TIM_ConfigClockSource+0x15a>
 800b620:	2b10      	cmp	r3, #16
 800b622:	d05a      	beq.n	800b6da <HAL_TIM_ConfigClockSource+0x15a>
 800b624:	e062      	b.n	800b6ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b636:	f000 f980 	bl	800b93a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b648:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	609a      	str	r2, [r3, #8]
      break;
 800b652:	e04f      	b.n	800b6f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b664:	f000 f969 	bl	800b93a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	689a      	ldr	r2, [r3, #8]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b676:	609a      	str	r2, [r3, #8]
      break;
 800b678:	e03c      	b.n	800b6f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b686:	461a      	mov	r2, r3
 800b688:	f000 f8e0 	bl	800b84c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2150      	movs	r1, #80	; 0x50
 800b692:	4618      	mov	r0, r3
 800b694:	f000 f937 	bl	800b906 <TIM_ITRx_SetConfig>
      break;
 800b698:	e02c      	b.n	800b6f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	f000 f8fe 	bl	800b8a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2160      	movs	r1, #96	; 0x60
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f000 f927 	bl	800b906 <TIM_ITRx_SetConfig>
      break;
 800b6b8:	e01c      	b.n	800b6f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	f000 f8c0 	bl	800b84c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2140      	movs	r1, #64	; 0x40
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 f917 	bl	800b906 <TIM_ITRx_SetConfig>
      break;
 800b6d8:	e00c      	b.n	800b6f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	f000 f90e 	bl	800b906 <TIM_ITRx_SetConfig>
      break;
 800b6ea:	e003      	b.n	800b6f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b6f0:	e000      	b.n	800b6f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b6f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b704:	7bfb      	ldrb	r3, [r7, #15]
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b70e:	b480      	push	{r7}
 800b710:	b083      	sub	sp, #12
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b716:	bf00      	nop
 800b718:	370c      	adds	r7, #12
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bc80      	pop	{r7}
 800b71e:	4770      	bx	lr

0800b720 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b728:	bf00      	nop
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bc80      	pop	{r7}
 800b730:	4770      	bx	lr

0800b732 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b732:	b480      	push	{r7}
 800b734:	b083      	sub	sp, #12
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b73a:	bf00      	nop
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	bc80      	pop	{r7}
 800b742:	4770      	bx	lr

0800b744 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	bc80      	pop	{r7}
 800b754:	4770      	bx	lr
	...

0800b758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a33      	ldr	r2, [pc, #204]	; (800b838 <TIM_Base_SetConfig+0xe0>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d013      	beq.n	800b798 <TIM_Base_SetConfig+0x40>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a32      	ldr	r2, [pc, #200]	; (800b83c <TIM_Base_SetConfig+0xe4>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d00f      	beq.n	800b798 <TIM_Base_SetConfig+0x40>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b77e:	d00b      	beq.n	800b798 <TIM_Base_SetConfig+0x40>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a2f      	ldr	r2, [pc, #188]	; (800b840 <TIM_Base_SetConfig+0xe8>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d007      	beq.n	800b798 <TIM_Base_SetConfig+0x40>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a2e      	ldr	r2, [pc, #184]	; (800b844 <TIM_Base_SetConfig+0xec>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d003      	beq.n	800b798 <TIM_Base_SetConfig+0x40>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a2d      	ldr	r2, [pc, #180]	; (800b848 <TIM_Base_SetConfig+0xf0>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d108      	bne.n	800b7aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b79e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4a22      	ldr	r2, [pc, #136]	; (800b838 <TIM_Base_SetConfig+0xe0>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d013      	beq.n	800b7da <TIM_Base_SetConfig+0x82>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a21      	ldr	r2, [pc, #132]	; (800b83c <TIM_Base_SetConfig+0xe4>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d00f      	beq.n	800b7da <TIM_Base_SetConfig+0x82>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7c0:	d00b      	beq.n	800b7da <TIM_Base_SetConfig+0x82>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a1e      	ldr	r2, [pc, #120]	; (800b840 <TIM_Base_SetConfig+0xe8>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d007      	beq.n	800b7da <TIM_Base_SetConfig+0x82>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a1d      	ldr	r2, [pc, #116]	; (800b844 <TIM_Base_SetConfig+0xec>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d003      	beq.n	800b7da <TIM_Base_SetConfig+0x82>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a1c      	ldr	r2, [pc, #112]	; (800b848 <TIM_Base_SetConfig+0xf0>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d108      	bne.n	800b7ec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	695b      	ldr	r3, [r3, #20]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	689a      	ldr	r2, [r3, #8]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a09      	ldr	r2, [pc, #36]	; (800b838 <TIM_Base_SetConfig+0xe0>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d003      	beq.n	800b820 <TIM_Base_SetConfig+0xc8>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a08      	ldr	r2, [pc, #32]	; (800b83c <TIM_Base_SetConfig+0xe4>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d103      	bne.n	800b828 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	691a      	ldr	r2, [r3, #16]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	615a      	str	r2, [r3, #20]
}
 800b82e:	bf00      	nop
 800b830:	3714      	adds	r7, #20
 800b832:	46bd      	mov	sp, r7
 800b834:	bc80      	pop	{r7}
 800b836:	4770      	bx	lr
 800b838:	40012c00 	.word	0x40012c00
 800b83c:	40013400 	.word	0x40013400
 800b840:	40000400 	.word	0x40000400
 800b844:	40000800 	.word	0x40000800
 800b848:	40000c00 	.word	0x40000c00

0800b84c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6a1b      	ldr	r3, [r3, #32]
 800b85c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6a1b      	ldr	r3, [r3, #32]
 800b862:	f023 0201 	bic.w	r2, r3, #1
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	699b      	ldr	r3, [r3, #24]
 800b86e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	011b      	lsls	r3, r3, #4
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	4313      	orrs	r3, r2
 800b880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	f023 030a 	bic.w	r3, r3, #10
 800b888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b88a:	697a      	ldr	r2, [r7, #20]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	4313      	orrs	r3, r2
 800b890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	621a      	str	r2, [r3, #32]
}
 800b89e:	bf00      	nop
 800b8a0:	371c      	adds	r7, #28
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bc80      	pop	{r7}
 800b8a6:	4770      	bx	lr

0800b8a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b087      	sub	sp, #28
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6a1b      	ldr	r3, [r3, #32]
 800b8b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	f023 0210 	bic.w	r2, r3, #16
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	699b      	ldr	r3, [r3, #24]
 800b8ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b8d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	031b      	lsls	r3, r3, #12
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b8e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	011b      	lsls	r3, r3, #4
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	697a      	ldr	r2, [r7, #20]
 800b8fa:	621a      	str	r2, [r3, #32]
}
 800b8fc:	bf00      	nop
 800b8fe:	371c      	adds	r7, #28
 800b900:	46bd      	mov	sp, r7
 800b902:	bc80      	pop	{r7}
 800b904:	4770      	bx	lr

0800b906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b906:	b480      	push	{r7}
 800b908:	b085      	sub	sp, #20
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b91c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4313      	orrs	r3, r2
 800b924:	f043 0307 	orr.w	r3, r3, #7
 800b928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	609a      	str	r2, [r3, #8]
}
 800b930:	bf00      	nop
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	bc80      	pop	{r7}
 800b938:	4770      	bx	lr

0800b93a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b087      	sub	sp, #28
 800b93e:	af00      	add	r7, sp, #0
 800b940:	60f8      	str	r0, [r7, #12]
 800b942:	60b9      	str	r1, [r7, #8]
 800b944:	607a      	str	r2, [r7, #4]
 800b946:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b954:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	021a      	lsls	r2, r3, #8
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	431a      	orrs	r2, r3
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	4313      	orrs	r3, r2
 800b962:	697a      	ldr	r2, [r7, #20]
 800b964:	4313      	orrs	r3, r2
 800b966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	697a      	ldr	r2, [r7, #20]
 800b96c:	609a      	str	r2, [r3, #8]
}
 800b96e:	bf00      	nop
 800b970:	371c      	adds	r7, #28
 800b972:	46bd      	mov	sp, r7
 800b974:	bc80      	pop	{r7}
 800b976:	4770      	bx	lr

0800b978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d101      	bne.n	800b990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b98c:	2302      	movs	r3, #2
 800b98e:	e050      	b.n	800ba32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2202      	movs	r2, #2
 800b99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a1b      	ldr	r2, [pc, #108]	; (800ba3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d018      	beq.n	800ba06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a19      	ldr	r2, [pc, #100]	; (800ba40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d013      	beq.n	800ba06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9e6:	d00e      	beq.n	800ba06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a15      	ldr	r2, [pc, #84]	; (800ba44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d009      	beq.n	800ba06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a14      	ldr	r2, [pc, #80]	; (800ba48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d004      	beq.n	800ba06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a12      	ldr	r2, [pc, #72]	; (800ba4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d10c      	bne.n	800ba20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	4313      	orrs	r3, r2
 800ba16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bc80      	pop	{r7}
 800ba3a:	4770      	bx	lr
 800ba3c:	40012c00 	.word	0x40012c00
 800ba40:	40013400 	.word	0x40013400
 800ba44:	40000400 	.word	0x40000400
 800ba48:	40000800 	.word	0x40000800
 800ba4c:	40000c00 	.word	0x40000c00

0800ba50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bc80      	pop	{r7}
 800ba60:	4770      	bx	lr

0800ba62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba62:	b480      	push	{r7}
 800ba64:	b083      	sub	sp, #12
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba6a:	bf00      	nop
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bc80      	pop	{r7}
 800ba72:	4770      	bx	lr

0800ba74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d101      	bne.n	800ba86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba82:	2301      	movs	r3, #1
 800ba84:	e042      	b.n	800bb0c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d106      	bne.n	800baa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f7fc fe1a 	bl	80086d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2224      	movs	r2, #36	; 0x24
 800baa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	68da      	ldr	r2, [r3, #12]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 fd11 	bl	800c4e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	691a      	ldr	r2, [r3, #16]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bacc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	695a      	ldr	r2, [r3, #20]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800badc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	68da      	ldr	r2, [r3, #12]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800baec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2220      	movs	r2, #32
 800baf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2220      	movs	r2, #32
 800bb00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bb0a:	2300      	movs	r3, #0
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b20      	cmp	r3, #32
 800bb2c:	d121      	bne.n	800bb72 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d002      	beq.n	800bb3a <HAL_UART_Transmit_IT+0x26>
 800bb34:	88fb      	ldrh	r3, [r7, #6]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d101      	bne.n	800bb3e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e01a      	b.n	800bb74 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	88fa      	ldrh	r2, [r7, #6]
 800bb48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	88fa      	ldrh	r2, [r7, #6]
 800bb4e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2200      	movs	r2, #0
 800bb54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2221      	movs	r2, #33	; 0x21
 800bb5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68da      	ldr	r2, [r3, #12]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bb6c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	e000      	b.n	800bb74 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800bb72:	2302      	movs	r3, #2
  }
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3714      	adds	r7, #20
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bc80      	pop	{r7}
 800bb7c:	4770      	bx	lr

0800bb7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	60f8      	str	r0, [r7, #12]
 800bb86:	60b9      	str	r1, [r7, #8]
 800bb88:	4613      	mov	r3, r2
 800bb8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	2b20      	cmp	r3, #32
 800bb96:	d112      	bne.n	800bbbe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d002      	beq.n	800bba4 <HAL_UART_Receive_IT+0x26>
 800bb9e:	88fb      	ldrh	r3, [r7, #6]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d101      	bne.n	800bba8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	e00b      	b.n	800bbc0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bbae:	88fb      	ldrh	r3, [r7, #6]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	68b9      	ldr	r1, [r7, #8]
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	f000 fabf 	bl	800c138 <UART_Start_Receive_IT>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	e000      	b.n	800bbc0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800bbbe:	2302      	movs	r3, #2
  }
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b0ba      	sub	sp, #232	; 0xe8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	695b      	ldr	r3, [r3, #20]
 800bbea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bbfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbfe:	f003 030f 	and.w	r3, r3, #15
 800bc02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bc06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d10f      	bne.n	800bc2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc12:	f003 0320 	and.w	r3, r3, #32
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d009      	beq.n	800bc2e <HAL_UART_IRQHandler+0x66>
 800bc1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc1e:	f003 0320 	and.w	r3, r3, #32
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d003      	beq.n	800bc2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fb9c 	bl	800c364 <UART_Receive_IT>
      return;
 800bc2c:	e25b      	b.n	800c0e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bc2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f000 80de 	beq.w	800bdf4 <HAL_UART_IRQHandler+0x22c>
 800bc38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d106      	bne.n	800bc52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bc44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 80d1 	beq.w	800bdf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bc52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc56:	f003 0301 	and.w	r3, r3, #1
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00b      	beq.n	800bc76 <HAL_UART_IRQHandler+0xae>
 800bc5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d005      	beq.n	800bc76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc6e:	f043 0201 	orr.w	r2, r3, #1
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bc76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc7a:	f003 0304 	and.w	r3, r3, #4
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00b      	beq.n	800bc9a <HAL_UART_IRQHandler+0xd2>
 800bc82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc86:	f003 0301 	and.w	r3, r3, #1
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d005      	beq.n	800bc9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc92:	f043 0202 	orr.w	r2, r3, #2
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bc9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc9e:	f003 0302 	and.w	r3, r3, #2
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00b      	beq.n	800bcbe <HAL_UART_IRQHandler+0xf6>
 800bca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcaa:	f003 0301 	and.w	r3, r3, #1
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d005      	beq.n	800bcbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcb6:	f043 0204 	orr.w	r2, r3, #4
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bcbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcc2:	f003 0308 	and.w	r3, r3, #8
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d011      	beq.n	800bcee <HAL_UART_IRQHandler+0x126>
 800bcca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcce:	f003 0320 	and.w	r3, r3, #32
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d105      	bne.n	800bce2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bcd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d005      	beq.n	800bcee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bce6:	f043 0208 	orr.w	r2, r3, #8
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f000 81f2 	beq.w	800c0dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bcf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcfc:	f003 0320 	and.w	r3, r3, #32
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d008      	beq.n	800bd16 <HAL_UART_IRQHandler+0x14e>
 800bd04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd08:	f003 0320 	and.w	r3, r3, #32
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d002      	beq.n	800bd16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fb27 	bl	800c364 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	695b      	ldr	r3, [r3, #20]
 800bd1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	bf14      	ite	ne
 800bd24:	2301      	movne	r3, #1
 800bd26:	2300      	moveq	r3, #0
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd32:	f003 0308 	and.w	r3, r3, #8
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d103      	bne.n	800bd42 <HAL_UART_IRQHandler+0x17a>
 800bd3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d04f      	beq.n	800bde2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 fa31 	bl	800c1aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d041      	beq.n	800bdda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3314      	adds	r3, #20
 800bd5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd64:	e853 3f00 	ldrex	r3, [r3]
 800bd68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bd6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	3314      	adds	r3, #20
 800bd7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bd82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bd86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bd8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bd92:	e841 2300 	strex	r3, r2, [r1]
 800bd96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bd9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1d9      	bne.n	800bd56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d013      	beq.n	800bdd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdae:	4a7e      	ldr	r2, [pc, #504]	; (800bfa8 <HAL_UART_IRQHandler+0x3e0>)
 800bdb0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fd f848 	bl	8008e4c <HAL_DMA_Abort_IT>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d016      	beq.n	800bdf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bdcc:	4610      	mov	r0, r2
 800bdce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdd0:	e00e      	b.n	800bdf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f99c 	bl	800c110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdd8:	e00a      	b.n	800bdf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f998 	bl	800c110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bde0:	e006      	b.n	800bdf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f994 	bl	800c110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bdee:	e175      	b.n	800c0dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdf0:	bf00      	nop
    return;
 800bdf2:	e173      	b.n	800c0dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	f040 814f 	bne.w	800c09c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bdfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be02:	f003 0310 	and.w	r3, r3, #16
 800be06:	2b00      	cmp	r3, #0
 800be08:	f000 8148 	beq.w	800c09c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800be0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be10:	f003 0310 	and.w	r3, r3, #16
 800be14:	2b00      	cmp	r3, #0
 800be16:	f000 8141 	beq.w	800c09c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be1a:	2300      	movs	r3, #0
 800be1c:	60bb      	str	r3, [r7, #8]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	60bb      	str	r3, [r7, #8]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	60bb      	str	r3, [r7, #8]
 800be2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	695b      	ldr	r3, [r3, #20]
 800be36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f000 80b6 	beq.w	800bfac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800be4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 8145 	beq.w	800c0e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800be5e:	429a      	cmp	r2, r3
 800be60:	f080 813e 	bcs.w	800c0e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800be6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	2b20      	cmp	r3, #32
 800be74:	f000 8088 	beq.w	800bf88 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	330c      	adds	r3, #12
 800be7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800be86:	e853 3f00 	ldrex	r3, [r3]
 800be8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800be8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	330c      	adds	r3, #12
 800bea0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bea4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bea8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800beb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800beb4:	e841 2300 	strex	r3, r2, [r1]
 800beb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1d9      	bne.n	800be78 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	3314      	adds	r3, #20
 800beca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800becc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bece:	e853 3f00 	ldrex	r3, [r3]
 800bed2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bed6:	f023 0301 	bic.w	r3, r3, #1
 800beda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	3314      	adds	r3, #20
 800bee4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bee8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800beec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bef0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bef4:	e841 2300 	strex	r3, r2, [r1]
 800bef8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800befa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1e1      	bne.n	800bec4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	3314      	adds	r3, #20
 800bf06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf0a:	e853 3f00 	ldrex	r3, [r3]
 800bf0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bf10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	3314      	adds	r3, #20
 800bf20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bf24:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bf26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf2c:	e841 2300 	strex	r3, r2, [r1]
 800bf30:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bf32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1e3      	bne.n	800bf00 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2220      	movs	r2, #32
 800bf3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	330c      	adds	r3, #12
 800bf4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf50:	e853 3f00 	ldrex	r3, [r3]
 800bf54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bf56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf58:	f023 0310 	bic.w	r3, r3, #16
 800bf5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	330c      	adds	r3, #12
 800bf66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bf6a:	65ba      	str	r2, [r7, #88]	; 0x58
 800bf6c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bf70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf72:	e841 2300 	strex	r3, r2, [r1]
 800bf76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bf78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1e3      	bne.n	800bf46 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fc ff27 	bl	8008dd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2202      	movs	r2, #2
 800bf8c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	1ad3      	subs	r3, r2, r3
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f8bf 	bl	800c122 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bfa4:	e09c      	b.n	800c0e0 <HAL_UART_IRQHandler+0x518>
 800bfa6:	bf00      	nop
 800bfa8:	0800c26f 	.word	0x0800c26f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	1ad3      	subs	r3, r2, r3
 800bfb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	f000 808e 	beq.w	800c0e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bfc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f000 8089 	beq.w	800c0e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	330c      	adds	r3, #12
 800bfd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfdc:	e853 3f00 	ldrex	r3, [r3]
 800bfe0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bfe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfe8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	330c      	adds	r3, #12
 800bff2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bff6:	647a      	str	r2, [r7, #68]	; 0x44
 800bff8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bffa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bffe:	e841 2300 	strex	r3, r2, [r1]
 800c002:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1e3      	bne.n	800bfd2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	3314      	adds	r3, #20
 800c010:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c014:	e853 3f00 	ldrex	r3, [r3]
 800c018:	623b      	str	r3, [r7, #32]
   return(result);
 800c01a:	6a3b      	ldr	r3, [r7, #32]
 800c01c:	f023 0301 	bic.w	r3, r3, #1
 800c020:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	3314      	adds	r3, #20
 800c02a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c02e:	633a      	str	r2, [r7, #48]	; 0x30
 800c030:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c032:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c036:	e841 2300 	strex	r3, r2, [r1]
 800c03a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d1e3      	bne.n	800c00a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2220      	movs	r2, #32
 800c046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2200      	movs	r2, #0
 800c04e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	330c      	adds	r3, #12
 800c056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	e853 3f00 	ldrex	r3, [r3]
 800c05e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f023 0310 	bic.w	r3, r3, #16
 800c066:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	330c      	adds	r3, #12
 800c070:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c074:	61fa      	str	r2, [r7, #28]
 800c076:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c078:	69b9      	ldr	r1, [r7, #24]
 800c07a:	69fa      	ldr	r2, [r7, #28]
 800c07c:	e841 2300 	strex	r3, r2, [r1]
 800c080:	617b      	str	r3, [r7, #20]
   return(result);
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1e3      	bne.n	800c050 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2202      	movs	r2, #2
 800c08c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c08e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 f844 	bl	800c122 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c09a:	e023      	b.n	800c0e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c09c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d009      	beq.n	800c0bc <HAL_UART_IRQHandler+0x4f4>
 800c0a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d003      	beq.n	800c0bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f8ee 	bl	800c296 <UART_Transmit_IT>
    return;
 800c0ba:	e014      	b.n	800c0e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d00e      	beq.n	800c0e6 <HAL_UART_IRQHandler+0x51e>
 800c0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d008      	beq.n	800c0e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f92d 	bl	800c334 <UART_EndTransmit_IT>
    return;
 800c0da:	e004      	b.n	800c0e6 <HAL_UART_IRQHandler+0x51e>
    return;
 800c0dc:	bf00      	nop
 800c0de:	e002      	b.n	800c0e6 <HAL_UART_IRQHandler+0x51e>
      return;
 800c0e0:	bf00      	nop
 800c0e2:	e000      	b.n	800c0e6 <HAL_UART_IRQHandler+0x51e>
      return;
 800c0e4:	bf00      	nop
  }
}
 800c0e6:	37e8      	adds	r7, #232	; 0xe8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c0f4:	bf00      	nop
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bc80      	pop	{r7}
 800c0fc:	4770      	bx	lr

0800c0fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c0fe:	b480      	push	{r7}
 800c100:	b083      	sub	sp, #12
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c106:	bf00      	nop
 800c108:	370c      	adds	r7, #12
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bc80      	pop	{r7}
 800c10e:	4770      	bx	lr

0800c110 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bc80      	pop	{r7}
 800c120:	4770      	bx	lr

0800c122 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c122:	b480      	push	{r7}
 800c124:	b083      	sub	sp, #12
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
 800c12a:	460b      	mov	r3, r1
 800c12c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c12e:	bf00      	nop
 800c130:	370c      	adds	r7, #12
 800c132:	46bd      	mov	sp, r7
 800c134:	bc80      	pop	{r7}
 800c136:	4770      	bx	lr

0800c138 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	4613      	mov	r3, r2
 800c144:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	88fa      	ldrh	r2, [r7, #6]
 800c150:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	88fa      	ldrh	r2, [r7, #6]
 800c156:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2200      	movs	r2, #0
 800c15c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2222      	movs	r2, #34	; 0x22
 800c162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d007      	beq.n	800c17e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68da      	ldr	r2, [r3, #12]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c17c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	695a      	ldr	r2, [r3, #20]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f042 0201 	orr.w	r2, r2, #1
 800c18c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68da      	ldr	r2, [r3, #12]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f042 0220 	orr.w	r2, r2, #32
 800c19c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bc80      	pop	{r7}
 800c1a8:	4770      	bx	lr

0800c1aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1aa:	b480      	push	{r7}
 800c1ac:	b095      	sub	sp, #84	; 0x54
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	330c      	adds	r3, #12
 800c1b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1bc:	e853 3f00 	ldrex	r3, [r3]
 800c1c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	330c      	adds	r3, #12
 800c1d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c1d2:	643a      	str	r2, [r7, #64]	; 0x40
 800c1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c1d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1da:	e841 2300 	strex	r3, r2, [r1]
 800c1de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d1e5      	bne.n	800c1b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	3314      	adds	r3, #20
 800c1ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ee:	6a3b      	ldr	r3, [r7, #32]
 800c1f0:	e853 3f00 	ldrex	r3, [r3]
 800c1f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1f6:	69fb      	ldr	r3, [r7, #28]
 800c1f8:	f023 0301 	bic.w	r3, r3, #1
 800c1fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	3314      	adds	r3, #20
 800c204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c206:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c208:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c20c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c20e:	e841 2300 	strex	r3, r2, [r1]
 800c212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1e5      	bne.n	800c1e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d119      	bne.n	800c256 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	330c      	adds	r3, #12
 800c228:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	e853 3f00 	ldrex	r3, [r3]
 800c230:	60bb      	str	r3, [r7, #8]
   return(result);
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	f023 0310 	bic.w	r3, r3, #16
 800c238:	647b      	str	r3, [r7, #68]	; 0x44
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	330c      	adds	r3, #12
 800c240:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c242:	61ba      	str	r2, [r7, #24]
 800c244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c246:	6979      	ldr	r1, [r7, #20]
 800c248:	69ba      	ldr	r2, [r7, #24]
 800c24a:	e841 2300 	strex	r3, r2, [r1]
 800c24e:	613b      	str	r3, [r7, #16]
   return(result);
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1e5      	bne.n	800c222 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2220      	movs	r2, #32
 800c25a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c264:	bf00      	nop
 800c266:	3754      	adds	r7, #84	; 0x54
 800c268:	46bd      	mov	sp, r7
 800c26a:	bc80      	pop	{r7}
 800c26c:	4770      	bx	lr

0800c26e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b084      	sub	sp, #16
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c27a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f7ff ff41 	bl	800c110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c28e:	bf00      	nop
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c296:	b480      	push	{r7}
 800c298:	b085      	sub	sp, #20
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	2b21      	cmp	r3, #33	; 0x21
 800c2a8:	d13e      	bne.n	800c328 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2b2:	d114      	bne.n	800c2de <UART_Transmit_IT+0x48>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d110      	bne.n	800c2de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a1b      	ldr	r3, [r3, #32]
 800c2c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	881b      	ldrh	r3, [r3, #0]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6a1b      	ldr	r3, [r3, #32]
 800c2d6:	1c9a      	adds	r2, r3, #2
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	621a      	str	r2, [r3, #32]
 800c2dc:	e008      	b.n	800c2f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a1b      	ldr	r3, [r3, #32]
 800c2e2:	1c59      	adds	r1, r3, #1
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	6211      	str	r1, [r2, #32]
 800c2e8:	781a      	ldrb	r2, [r3, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10f      	bne.n	800c324 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	68da      	ldr	r2, [r3, #12]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c312:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68da      	ldr	r2, [r3, #12]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c322:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	e000      	b.n	800c32a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c328:	2302      	movs	r3, #2
  }
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3714      	adds	r7, #20
 800c32e:	46bd      	mov	sp, r7
 800c330:	bc80      	pop	{r7}
 800c332:	4770      	bx	lr

0800c334 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	68da      	ldr	r2, [r3, #12]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c34a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2220      	movs	r2, #32
 800c350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f7ff fec9 	bl	800c0ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b08c      	sub	sp, #48	; 0x30
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b22      	cmp	r3, #34	; 0x22
 800c376:	f040 80ae 	bne.w	800c4d6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c382:	d117      	bne.n	800c3b4 <UART_Receive_IT+0x50>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d113      	bne.n	800c3b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c38c:	2300      	movs	r3, #0
 800c38e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c394:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ac:	1c9a      	adds	r2, r3, #2
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	629a      	str	r2, [r3, #40]	; 0x28
 800c3b2:	e026      	b.n	800c402 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3c6:	d007      	beq.n	800c3d8 <UART_Receive_IT+0x74>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10a      	bne.n	800c3e6 <UART_Receive_IT+0x82>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	691b      	ldr	r3, [r3, #16]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d106      	bne.n	800c3e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	b2da      	uxtb	r2, r3
 800c3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e2:	701a      	strb	r2, [r3, #0]
 800c3e4:	e008      	b.n	800c3f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3f2:	b2da      	uxtb	r2, r3
 800c3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3fc:	1c5a      	adds	r2, r3, #1
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c406:	b29b      	uxth	r3, r3
 800c408:	3b01      	subs	r3, #1
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	4619      	mov	r1, r3
 800c410:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c412:	2b00      	cmp	r3, #0
 800c414:	d15d      	bne.n	800c4d2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68da      	ldr	r2, [r3, #12]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f022 0220 	bic.w	r2, r2, #32
 800c424:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	68da      	ldr	r2, [r3, #12]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c434:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	695a      	ldr	r2, [r3, #20]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f022 0201 	bic.w	r2, r2, #1
 800c444:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2220      	movs	r2, #32
 800c44a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d135      	bne.n	800c4c8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	330c      	adds	r3, #12
 800c468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	e853 3f00 	ldrex	r3, [r3]
 800c470:	613b      	str	r3, [r7, #16]
   return(result);
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	f023 0310 	bic.w	r3, r3, #16
 800c478:	627b      	str	r3, [r7, #36]	; 0x24
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	330c      	adds	r3, #12
 800c480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c482:	623a      	str	r2, [r7, #32]
 800c484:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c486:	69f9      	ldr	r1, [r7, #28]
 800c488:	6a3a      	ldr	r2, [r7, #32]
 800c48a:	e841 2300 	strex	r3, r2, [r1]
 800c48e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d1e5      	bne.n	800c462 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 0310 	and.w	r3, r3, #16
 800c4a0:	2b10      	cmp	r3, #16
 800c4a2:	d10a      	bne.n	800c4ba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	60fb      	str	r3, [r7, #12]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	60fb      	str	r3, [r7, #12]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	60fb      	str	r3, [r7, #12]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c4be:	4619      	mov	r1, r3
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f7ff fe2e 	bl	800c122 <HAL_UARTEx_RxEventCallback>
 800c4c6:	e002      	b.n	800c4ce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f7ff fe18 	bl	800c0fe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	e002      	b.n	800c4d8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	e000      	b.n	800c4d8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c4d6:	2302      	movs	r3, #2
  }
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3730      	adds	r7, #48	; 0x30
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	68da      	ldr	r2, [r3, #12]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	430a      	orrs	r2, r1
 800c4fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	689a      	ldr	r2, [r3, #8]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	691b      	ldr	r3, [r3, #16]
 800c506:	431a      	orrs	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	695b      	ldr	r3, [r3, #20]
 800c50c:	4313      	orrs	r3, r2
 800c50e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c51a:	f023 030c 	bic.w	r3, r3, #12
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	6812      	ldr	r2, [r2, #0]
 800c522:	68b9      	ldr	r1, [r7, #8]
 800c524:	430b      	orrs	r3, r1
 800c526:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	695b      	ldr	r3, [r3, #20]
 800c52e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	699a      	ldr	r2, [r3, #24]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	430a      	orrs	r2, r1
 800c53c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a2c      	ldr	r2, [pc, #176]	; (800c5f4 <UART_SetConfig+0x114>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d103      	bne.n	800c550 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c548:	f7fe fe30 	bl	800b1ac <HAL_RCC_GetPCLK2Freq>
 800c54c:	60f8      	str	r0, [r7, #12]
 800c54e:	e002      	b.n	800c556 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c550:	f7fe fe18 	bl	800b184 <HAL_RCC_GetPCLK1Freq>
 800c554:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	4613      	mov	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	4413      	add	r3, r2
 800c55e:	009a      	lsls	r2, r3, #2
 800c560:	441a      	add	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	fbb2 f3f3 	udiv	r3, r2, r3
 800c56c:	4a22      	ldr	r2, [pc, #136]	; (800c5f8 <UART_SetConfig+0x118>)
 800c56e:	fba2 2303 	umull	r2, r3, r2, r3
 800c572:	095b      	lsrs	r3, r3, #5
 800c574:	0119      	lsls	r1, r3, #4
 800c576:	68fa      	ldr	r2, [r7, #12]
 800c578:	4613      	mov	r3, r2
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	4413      	add	r3, r2
 800c57e:	009a      	lsls	r2, r3, #2
 800c580:	441a      	add	r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	fbb2 f2f3 	udiv	r2, r2, r3
 800c58c:	4b1a      	ldr	r3, [pc, #104]	; (800c5f8 <UART_SetConfig+0x118>)
 800c58e:	fba3 0302 	umull	r0, r3, r3, r2
 800c592:	095b      	lsrs	r3, r3, #5
 800c594:	2064      	movs	r0, #100	; 0x64
 800c596:	fb00 f303 	mul.w	r3, r0, r3
 800c59a:	1ad3      	subs	r3, r2, r3
 800c59c:	011b      	lsls	r3, r3, #4
 800c59e:	3332      	adds	r3, #50	; 0x32
 800c5a0:	4a15      	ldr	r2, [pc, #84]	; (800c5f8 <UART_SetConfig+0x118>)
 800c5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5a6:	095b      	lsrs	r3, r3, #5
 800c5a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5ac:	4419      	add	r1, r3
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4413      	add	r3, r2
 800c5b6:	009a      	lsls	r2, r3, #2
 800c5b8:	441a      	add	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c5c4:	4b0c      	ldr	r3, [pc, #48]	; (800c5f8 <UART_SetConfig+0x118>)
 800c5c6:	fba3 0302 	umull	r0, r3, r3, r2
 800c5ca:	095b      	lsrs	r3, r3, #5
 800c5cc:	2064      	movs	r0, #100	; 0x64
 800c5ce:	fb00 f303 	mul.w	r3, r0, r3
 800c5d2:	1ad3      	subs	r3, r2, r3
 800c5d4:	011b      	lsls	r3, r3, #4
 800c5d6:	3332      	adds	r3, #50	; 0x32
 800c5d8:	4a07      	ldr	r2, [pc, #28]	; (800c5f8 <UART_SetConfig+0x118>)
 800c5da:	fba2 2303 	umull	r2, r3, r2, r3
 800c5de:	095b      	lsrs	r3, r3, #5
 800c5e0:	f003 020f 	and.w	r2, r3, #15
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	440a      	add	r2, r1
 800c5ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c5ec:	bf00      	nop
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	40013800 	.word	0x40013800
 800c5f8:	51eb851f 	.word	0x51eb851f

0800c5fc <__itoa>:
 800c5fc:	1e93      	subs	r3, r2, #2
 800c5fe:	2b22      	cmp	r3, #34	; 0x22
 800c600:	b510      	push	{r4, lr}
 800c602:	460c      	mov	r4, r1
 800c604:	d904      	bls.n	800c610 <__itoa+0x14>
 800c606:	2300      	movs	r3, #0
 800c608:	461c      	mov	r4, r3
 800c60a:	700b      	strb	r3, [r1, #0]
 800c60c:	4620      	mov	r0, r4
 800c60e:	bd10      	pop	{r4, pc}
 800c610:	2a0a      	cmp	r2, #10
 800c612:	d109      	bne.n	800c628 <__itoa+0x2c>
 800c614:	2800      	cmp	r0, #0
 800c616:	da07      	bge.n	800c628 <__itoa+0x2c>
 800c618:	232d      	movs	r3, #45	; 0x2d
 800c61a:	700b      	strb	r3, [r1, #0]
 800c61c:	2101      	movs	r1, #1
 800c61e:	4240      	negs	r0, r0
 800c620:	4421      	add	r1, r4
 800c622:	f000 f8d9 	bl	800c7d8 <__utoa>
 800c626:	e7f1      	b.n	800c60c <__itoa+0x10>
 800c628:	2100      	movs	r1, #0
 800c62a:	e7f9      	b.n	800c620 <__itoa+0x24>

0800c62c <itoa>:
 800c62c:	f7ff bfe6 	b.w	800c5fc <__itoa>

0800c630 <malloc>:
 800c630:	4b02      	ldr	r3, [pc, #8]	; (800c63c <malloc+0xc>)
 800c632:	4601      	mov	r1, r0
 800c634:	6818      	ldr	r0, [r3, #0]
 800c636:	f000 b823 	b.w	800c680 <_malloc_r>
 800c63a:	bf00      	nop
 800c63c:	200000f8 	.word	0x200000f8

0800c640 <sbrk_aligned>:
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	4e0e      	ldr	r6, [pc, #56]	; (800c67c <sbrk_aligned+0x3c>)
 800c644:	460c      	mov	r4, r1
 800c646:	6831      	ldr	r1, [r6, #0]
 800c648:	4605      	mov	r5, r0
 800c64a:	b911      	cbnz	r1, 800c652 <sbrk_aligned+0x12>
 800c64c:	f000 f934 	bl	800c8b8 <_sbrk_r>
 800c650:	6030      	str	r0, [r6, #0]
 800c652:	4621      	mov	r1, r4
 800c654:	4628      	mov	r0, r5
 800c656:	f000 f92f 	bl	800c8b8 <_sbrk_r>
 800c65a:	1c43      	adds	r3, r0, #1
 800c65c:	d00a      	beq.n	800c674 <sbrk_aligned+0x34>
 800c65e:	1cc4      	adds	r4, r0, #3
 800c660:	f024 0403 	bic.w	r4, r4, #3
 800c664:	42a0      	cmp	r0, r4
 800c666:	d007      	beq.n	800c678 <sbrk_aligned+0x38>
 800c668:	1a21      	subs	r1, r4, r0
 800c66a:	4628      	mov	r0, r5
 800c66c:	f000 f924 	bl	800c8b8 <_sbrk_r>
 800c670:	3001      	adds	r0, #1
 800c672:	d101      	bne.n	800c678 <sbrk_aligned+0x38>
 800c674:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c678:	4620      	mov	r0, r4
 800c67a:	bd70      	pop	{r4, r5, r6, pc}
 800c67c:	20000498 	.word	0x20000498

0800c680 <_malloc_r>:
 800c680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c684:	1ccd      	adds	r5, r1, #3
 800c686:	f025 0503 	bic.w	r5, r5, #3
 800c68a:	3508      	adds	r5, #8
 800c68c:	2d0c      	cmp	r5, #12
 800c68e:	bf38      	it	cc
 800c690:	250c      	movcc	r5, #12
 800c692:	2d00      	cmp	r5, #0
 800c694:	4607      	mov	r7, r0
 800c696:	db01      	blt.n	800c69c <_malloc_r+0x1c>
 800c698:	42a9      	cmp	r1, r5
 800c69a:	d905      	bls.n	800c6a8 <_malloc_r+0x28>
 800c69c:	230c      	movs	r3, #12
 800c69e:	2600      	movs	r6, #0
 800c6a0:	603b      	str	r3, [r7, #0]
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c77c <_malloc_r+0xfc>
 800c6ac:	f000 f868 	bl	800c780 <__malloc_lock>
 800c6b0:	f8d8 3000 	ldr.w	r3, [r8]
 800c6b4:	461c      	mov	r4, r3
 800c6b6:	bb5c      	cbnz	r4, 800c710 <_malloc_r+0x90>
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	4638      	mov	r0, r7
 800c6bc:	f7ff ffc0 	bl	800c640 <sbrk_aligned>
 800c6c0:	1c43      	adds	r3, r0, #1
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	d155      	bne.n	800c772 <_malloc_r+0xf2>
 800c6c6:	f8d8 4000 	ldr.w	r4, [r8]
 800c6ca:	4626      	mov	r6, r4
 800c6cc:	2e00      	cmp	r6, #0
 800c6ce:	d145      	bne.n	800c75c <_malloc_r+0xdc>
 800c6d0:	2c00      	cmp	r4, #0
 800c6d2:	d048      	beq.n	800c766 <_malloc_r+0xe6>
 800c6d4:	6823      	ldr	r3, [r4, #0]
 800c6d6:	4631      	mov	r1, r6
 800c6d8:	4638      	mov	r0, r7
 800c6da:	eb04 0903 	add.w	r9, r4, r3
 800c6de:	f000 f8eb 	bl	800c8b8 <_sbrk_r>
 800c6e2:	4581      	cmp	r9, r0
 800c6e4:	d13f      	bne.n	800c766 <_malloc_r+0xe6>
 800c6e6:	6821      	ldr	r1, [r4, #0]
 800c6e8:	4638      	mov	r0, r7
 800c6ea:	1a6d      	subs	r5, r5, r1
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	f7ff ffa7 	bl	800c640 <sbrk_aligned>
 800c6f2:	3001      	adds	r0, #1
 800c6f4:	d037      	beq.n	800c766 <_malloc_r+0xe6>
 800c6f6:	6823      	ldr	r3, [r4, #0]
 800c6f8:	442b      	add	r3, r5
 800c6fa:	6023      	str	r3, [r4, #0]
 800c6fc:	f8d8 3000 	ldr.w	r3, [r8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d038      	beq.n	800c776 <_malloc_r+0xf6>
 800c704:	685a      	ldr	r2, [r3, #4]
 800c706:	42a2      	cmp	r2, r4
 800c708:	d12b      	bne.n	800c762 <_malloc_r+0xe2>
 800c70a:	2200      	movs	r2, #0
 800c70c:	605a      	str	r2, [r3, #4]
 800c70e:	e00f      	b.n	800c730 <_malloc_r+0xb0>
 800c710:	6822      	ldr	r2, [r4, #0]
 800c712:	1b52      	subs	r2, r2, r5
 800c714:	d41f      	bmi.n	800c756 <_malloc_r+0xd6>
 800c716:	2a0b      	cmp	r2, #11
 800c718:	d917      	bls.n	800c74a <_malloc_r+0xca>
 800c71a:	1961      	adds	r1, r4, r5
 800c71c:	42a3      	cmp	r3, r4
 800c71e:	6025      	str	r5, [r4, #0]
 800c720:	bf18      	it	ne
 800c722:	6059      	strne	r1, [r3, #4]
 800c724:	6863      	ldr	r3, [r4, #4]
 800c726:	bf08      	it	eq
 800c728:	f8c8 1000 	streq.w	r1, [r8]
 800c72c:	5162      	str	r2, [r4, r5]
 800c72e:	604b      	str	r3, [r1, #4]
 800c730:	4638      	mov	r0, r7
 800c732:	f104 060b 	add.w	r6, r4, #11
 800c736:	f000 f829 	bl	800c78c <__malloc_unlock>
 800c73a:	f026 0607 	bic.w	r6, r6, #7
 800c73e:	1d23      	adds	r3, r4, #4
 800c740:	1af2      	subs	r2, r6, r3
 800c742:	d0ae      	beq.n	800c6a2 <_malloc_r+0x22>
 800c744:	1b9b      	subs	r3, r3, r6
 800c746:	50a3      	str	r3, [r4, r2]
 800c748:	e7ab      	b.n	800c6a2 <_malloc_r+0x22>
 800c74a:	42a3      	cmp	r3, r4
 800c74c:	6862      	ldr	r2, [r4, #4]
 800c74e:	d1dd      	bne.n	800c70c <_malloc_r+0x8c>
 800c750:	f8c8 2000 	str.w	r2, [r8]
 800c754:	e7ec      	b.n	800c730 <_malloc_r+0xb0>
 800c756:	4623      	mov	r3, r4
 800c758:	6864      	ldr	r4, [r4, #4]
 800c75a:	e7ac      	b.n	800c6b6 <_malloc_r+0x36>
 800c75c:	4634      	mov	r4, r6
 800c75e:	6876      	ldr	r6, [r6, #4]
 800c760:	e7b4      	b.n	800c6cc <_malloc_r+0x4c>
 800c762:	4613      	mov	r3, r2
 800c764:	e7cc      	b.n	800c700 <_malloc_r+0x80>
 800c766:	230c      	movs	r3, #12
 800c768:	4638      	mov	r0, r7
 800c76a:	603b      	str	r3, [r7, #0]
 800c76c:	f000 f80e 	bl	800c78c <__malloc_unlock>
 800c770:	e797      	b.n	800c6a2 <_malloc_r+0x22>
 800c772:	6025      	str	r5, [r4, #0]
 800c774:	e7dc      	b.n	800c730 <_malloc_r+0xb0>
 800c776:	605b      	str	r3, [r3, #4]
 800c778:	deff      	udf	#255	; 0xff
 800c77a:	bf00      	nop
 800c77c:	20000494 	.word	0x20000494

0800c780 <__malloc_lock>:
 800c780:	4801      	ldr	r0, [pc, #4]	; (800c788 <__malloc_lock+0x8>)
 800c782:	f000 b8d3 	b.w	800c92c <__retarget_lock_acquire_recursive>
 800c786:	bf00      	nop
 800c788:	200005d4 	.word	0x200005d4

0800c78c <__malloc_unlock>:
 800c78c:	4801      	ldr	r0, [pc, #4]	; (800c794 <__malloc_unlock+0x8>)
 800c78e:	f000 b8ce 	b.w	800c92e <__retarget_lock_release_recursive>
 800c792:	bf00      	nop
 800c794:	200005d4 	.word	0x200005d4

0800c798 <siprintf>:
 800c798:	b40e      	push	{r1, r2, r3}
 800c79a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c79e:	b500      	push	{lr}
 800c7a0:	b09c      	sub	sp, #112	; 0x70
 800c7a2:	ab1d      	add	r3, sp, #116	; 0x74
 800c7a4:	9002      	str	r0, [sp, #8]
 800c7a6:	9006      	str	r0, [sp, #24]
 800c7a8:	9107      	str	r1, [sp, #28]
 800c7aa:	9104      	str	r1, [sp, #16]
 800c7ac:	4808      	ldr	r0, [pc, #32]	; (800c7d0 <siprintf+0x38>)
 800c7ae:	4909      	ldr	r1, [pc, #36]	; (800c7d4 <siprintf+0x3c>)
 800c7b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7b4:	9105      	str	r1, [sp, #20]
 800c7b6:	6800      	ldr	r0, [r0, #0]
 800c7b8:	a902      	add	r1, sp, #8
 800c7ba:	9301      	str	r3, [sp, #4]
 800c7bc:	f000 f962 	bl	800ca84 <_svfiprintf_r>
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	9b02      	ldr	r3, [sp, #8]
 800c7c4:	701a      	strb	r2, [r3, #0]
 800c7c6:	b01c      	add	sp, #112	; 0x70
 800c7c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7cc:	b003      	add	sp, #12
 800c7ce:	4770      	bx	lr
 800c7d0:	200000f8 	.word	0x200000f8
 800c7d4:	ffff0208 	.word	0xffff0208

0800c7d8 <__utoa>:
 800c7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7da:	b08b      	sub	sp, #44	; 0x2c
 800c7dc:	4605      	mov	r5, r0
 800c7de:	460b      	mov	r3, r1
 800c7e0:	466e      	mov	r6, sp
 800c7e2:	4c1d      	ldr	r4, [pc, #116]	; (800c858 <__utoa+0x80>)
 800c7e4:	f104 0c20 	add.w	ip, r4, #32
 800c7e8:	4637      	mov	r7, r6
 800c7ea:	6820      	ldr	r0, [r4, #0]
 800c7ec:	6861      	ldr	r1, [r4, #4]
 800c7ee:	3408      	adds	r4, #8
 800c7f0:	c703      	stmia	r7!, {r0, r1}
 800c7f2:	4564      	cmp	r4, ip
 800c7f4:	463e      	mov	r6, r7
 800c7f6:	d1f7      	bne.n	800c7e8 <__utoa+0x10>
 800c7f8:	7921      	ldrb	r1, [r4, #4]
 800c7fa:	6820      	ldr	r0, [r4, #0]
 800c7fc:	7139      	strb	r1, [r7, #4]
 800c7fe:	1e91      	subs	r1, r2, #2
 800c800:	2922      	cmp	r1, #34	; 0x22
 800c802:	6038      	str	r0, [r7, #0]
 800c804:	f04f 0100 	mov.w	r1, #0
 800c808:	d904      	bls.n	800c814 <__utoa+0x3c>
 800c80a:	7019      	strb	r1, [r3, #0]
 800c80c:	460b      	mov	r3, r1
 800c80e:	4618      	mov	r0, r3
 800c810:	b00b      	add	sp, #44	; 0x2c
 800c812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c814:	1e58      	subs	r0, r3, #1
 800c816:	4684      	mov	ip, r0
 800c818:	fbb5 f7f2 	udiv	r7, r5, r2
 800c81c:	fb02 5617 	mls	r6, r2, r7, r5
 800c820:	3628      	adds	r6, #40	; 0x28
 800c822:	446e      	add	r6, sp
 800c824:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c828:	460c      	mov	r4, r1
 800c82a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c82e:	462e      	mov	r6, r5
 800c830:	42b2      	cmp	r2, r6
 800c832:	463d      	mov	r5, r7
 800c834:	f101 0101 	add.w	r1, r1, #1
 800c838:	d9ee      	bls.n	800c818 <__utoa+0x40>
 800c83a:	2200      	movs	r2, #0
 800c83c:	545a      	strb	r2, [r3, r1]
 800c83e:	1919      	adds	r1, r3, r4
 800c840:	1aa5      	subs	r5, r4, r2
 800c842:	42aa      	cmp	r2, r5
 800c844:	dae3      	bge.n	800c80e <__utoa+0x36>
 800c846:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c84a:	780e      	ldrb	r6, [r1, #0]
 800c84c:	3201      	adds	r2, #1
 800c84e:	7006      	strb	r6, [r0, #0]
 800c850:	f801 5901 	strb.w	r5, [r1], #-1
 800c854:	e7f4      	b.n	800c840 <__utoa+0x68>
 800c856:	bf00      	nop
 800c858:	0800e086 	.word	0x0800e086

0800c85c <strcat>:
 800c85c:	4602      	mov	r2, r0
 800c85e:	b510      	push	{r4, lr}
 800c860:	7814      	ldrb	r4, [r2, #0]
 800c862:	4613      	mov	r3, r2
 800c864:	3201      	adds	r2, #1
 800c866:	2c00      	cmp	r4, #0
 800c868:	d1fa      	bne.n	800c860 <strcat+0x4>
 800c86a:	3b01      	subs	r3, #1
 800c86c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c870:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c874:	2a00      	cmp	r2, #0
 800c876:	d1f9      	bne.n	800c86c <strcat+0x10>
 800c878:	bd10      	pop	{r4, pc}

0800c87a <strstr>:
 800c87a:	780a      	ldrb	r2, [r1, #0]
 800c87c:	b570      	push	{r4, r5, r6, lr}
 800c87e:	b96a      	cbnz	r2, 800c89c <strstr+0x22>
 800c880:	bd70      	pop	{r4, r5, r6, pc}
 800c882:	429a      	cmp	r2, r3
 800c884:	d109      	bne.n	800c89a <strstr+0x20>
 800c886:	460c      	mov	r4, r1
 800c888:	4605      	mov	r5, r0
 800c88a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d0f6      	beq.n	800c880 <strstr+0x6>
 800c892:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c896:	429e      	cmp	r6, r3
 800c898:	d0f7      	beq.n	800c88a <strstr+0x10>
 800c89a:	3001      	adds	r0, #1
 800c89c:	7803      	ldrb	r3, [r0, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1ef      	bne.n	800c882 <strstr+0x8>
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	e7ec      	b.n	800c880 <strstr+0x6>

0800c8a6 <memset>:
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	4402      	add	r2, r0
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d100      	bne.n	800c8b0 <memset+0xa>
 800c8ae:	4770      	bx	lr
 800c8b0:	f803 1b01 	strb.w	r1, [r3], #1
 800c8b4:	e7f9      	b.n	800c8aa <memset+0x4>
	...

0800c8b8 <_sbrk_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	4d05      	ldr	r5, [pc, #20]	; (800c8d4 <_sbrk_r+0x1c>)
 800c8be:	4604      	mov	r4, r0
 800c8c0:	4608      	mov	r0, r1
 800c8c2:	602b      	str	r3, [r5, #0]
 800c8c4:	f7fb ff96 	bl	80087f4 <_sbrk>
 800c8c8:	1c43      	adds	r3, r0, #1
 800c8ca:	d102      	bne.n	800c8d2 <_sbrk_r+0x1a>
 800c8cc:	682b      	ldr	r3, [r5, #0]
 800c8ce:	b103      	cbz	r3, 800c8d2 <_sbrk_r+0x1a>
 800c8d0:	6023      	str	r3, [r4, #0]
 800c8d2:	bd38      	pop	{r3, r4, r5, pc}
 800c8d4:	200005d8 	.word	0x200005d8

0800c8d8 <__errno>:
 800c8d8:	4b01      	ldr	r3, [pc, #4]	; (800c8e0 <__errno+0x8>)
 800c8da:	6818      	ldr	r0, [r3, #0]
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	200000f8 	.word	0x200000f8

0800c8e4 <__libc_init_array>:
 800c8e4:	b570      	push	{r4, r5, r6, lr}
 800c8e6:	2600      	movs	r6, #0
 800c8e8:	4d0c      	ldr	r5, [pc, #48]	; (800c91c <__libc_init_array+0x38>)
 800c8ea:	4c0d      	ldr	r4, [pc, #52]	; (800c920 <__libc_init_array+0x3c>)
 800c8ec:	1b64      	subs	r4, r4, r5
 800c8ee:	10a4      	asrs	r4, r4, #2
 800c8f0:	42a6      	cmp	r6, r4
 800c8f2:	d109      	bne.n	800c908 <__libc_init_array+0x24>
 800c8f4:	f000 fbc6 	bl	800d084 <_init>
 800c8f8:	2600      	movs	r6, #0
 800c8fa:	4d0a      	ldr	r5, [pc, #40]	; (800c924 <__libc_init_array+0x40>)
 800c8fc:	4c0a      	ldr	r4, [pc, #40]	; (800c928 <__libc_init_array+0x44>)
 800c8fe:	1b64      	subs	r4, r4, r5
 800c900:	10a4      	asrs	r4, r4, #2
 800c902:	42a6      	cmp	r6, r4
 800c904:	d105      	bne.n	800c912 <__libc_init_array+0x2e>
 800c906:	bd70      	pop	{r4, r5, r6, pc}
 800c908:	f855 3b04 	ldr.w	r3, [r5], #4
 800c90c:	4798      	blx	r3
 800c90e:	3601      	adds	r6, #1
 800c910:	e7ee      	b.n	800c8f0 <__libc_init_array+0xc>
 800c912:	f855 3b04 	ldr.w	r3, [r5], #4
 800c916:	4798      	blx	r3
 800c918:	3601      	adds	r6, #1
 800c91a:	e7f2      	b.n	800c902 <__libc_init_array+0x1e>
 800c91c:	0800e0e0 	.word	0x0800e0e0
 800c920:	0800e0e0 	.word	0x0800e0e0
 800c924:	0800e0e0 	.word	0x0800e0e0
 800c928:	0800e0e4 	.word	0x0800e0e4

0800c92c <__retarget_lock_acquire_recursive>:
 800c92c:	4770      	bx	lr

0800c92e <__retarget_lock_release_recursive>:
 800c92e:	4770      	bx	lr

0800c930 <strcpy>:
 800c930:	4603      	mov	r3, r0
 800c932:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c936:	f803 2b01 	strb.w	r2, [r3], #1
 800c93a:	2a00      	cmp	r2, #0
 800c93c:	d1f9      	bne.n	800c932 <strcpy+0x2>
 800c93e:	4770      	bx	lr

0800c940 <_free_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4605      	mov	r5, r0
 800c944:	2900      	cmp	r1, #0
 800c946:	d040      	beq.n	800c9ca <_free_r+0x8a>
 800c948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c94c:	1f0c      	subs	r4, r1, #4
 800c94e:	2b00      	cmp	r3, #0
 800c950:	bfb8      	it	lt
 800c952:	18e4      	addlt	r4, r4, r3
 800c954:	f7ff ff14 	bl	800c780 <__malloc_lock>
 800c958:	4a1c      	ldr	r2, [pc, #112]	; (800c9cc <_free_r+0x8c>)
 800c95a:	6813      	ldr	r3, [r2, #0]
 800c95c:	b933      	cbnz	r3, 800c96c <_free_r+0x2c>
 800c95e:	6063      	str	r3, [r4, #4]
 800c960:	6014      	str	r4, [r2, #0]
 800c962:	4628      	mov	r0, r5
 800c964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c968:	f7ff bf10 	b.w	800c78c <__malloc_unlock>
 800c96c:	42a3      	cmp	r3, r4
 800c96e:	d908      	bls.n	800c982 <_free_r+0x42>
 800c970:	6820      	ldr	r0, [r4, #0]
 800c972:	1821      	adds	r1, r4, r0
 800c974:	428b      	cmp	r3, r1
 800c976:	bf01      	itttt	eq
 800c978:	6819      	ldreq	r1, [r3, #0]
 800c97a:	685b      	ldreq	r3, [r3, #4]
 800c97c:	1809      	addeq	r1, r1, r0
 800c97e:	6021      	streq	r1, [r4, #0]
 800c980:	e7ed      	b.n	800c95e <_free_r+0x1e>
 800c982:	461a      	mov	r2, r3
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	b10b      	cbz	r3, 800c98c <_free_r+0x4c>
 800c988:	42a3      	cmp	r3, r4
 800c98a:	d9fa      	bls.n	800c982 <_free_r+0x42>
 800c98c:	6811      	ldr	r1, [r2, #0]
 800c98e:	1850      	adds	r0, r2, r1
 800c990:	42a0      	cmp	r0, r4
 800c992:	d10b      	bne.n	800c9ac <_free_r+0x6c>
 800c994:	6820      	ldr	r0, [r4, #0]
 800c996:	4401      	add	r1, r0
 800c998:	1850      	adds	r0, r2, r1
 800c99a:	4283      	cmp	r3, r0
 800c99c:	6011      	str	r1, [r2, #0]
 800c99e:	d1e0      	bne.n	800c962 <_free_r+0x22>
 800c9a0:	6818      	ldr	r0, [r3, #0]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	4408      	add	r0, r1
 800c9a6:	6010      	str	r0, [r2, #0]
 800c9a8:	6053      	str	r3, [r2, #4]
 800c9aa:	e7da      	b.n	800c962 <_free_r+0x22>
 800c9ac:	d902      	bls.n	800c9b4 <_free_r+0x74>
 800c9ae:	230c      	movs	r3, #12
 800c9b0:	602b      	str	r3, [r5, #0]
 800c9b2:	e7d6      	b.n	800c962 <_free_r+0x22>
 800c9b4:	6820      	ldr	r0, [r4, #0]
 800c9b6:	1821      	adds	r1, r4, r0
 800c9b8:	428b      	cmp	r3, r1
 800c9ba:	bf01      	itttt	eq
 800c9bc:	6819      	ldreq	r1, [r3, #0]
 800c9be:	685b      	ldreq	r3, [r3, #4]
 800c9c0:	1809      	addeq	r1, r1, r0
 800c9c2:	6021      	streq	r1, [r4, #0]
 800c9c4:	6063      	str	r3, [r4, #4]
 800c9c6:	6054      	str	r4, [r2, #4]
 800c9c8:	e7cb      	b.n	800c962 <_free_r+0x22>
 800c9ca:	bd38      	pop	{r3, r4, r5, pc}
 800c9cc:	20000494 	.word	0x20000494

0800c9d0 <__ssputs_r>:
 800c9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9d4:	461f      	mov	r7, r3
 800c9d6:	688e      	ldr	r6, [r1, #8]
 800c9d8:	4682      	mov	sl, r0
 800c9da:	42be      	cmp	r6, r7
 800c9dc:	460c      	mov	r4, r1
 800c9de:	4690      	mov	r8, r2
 800c9e0:	680b      	ldr	r3, [r1, #0]
 800c9e2:	d82c      	bhi.n	800ca3e <__ssputs_r+0x6e>
 800c9e4:	898a      	ldrh	r2, [r1, #12]
 800c9e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9ea:	d026      	beq.n	800ca3a <__ssputs_r+0x6a>
 800c9ec:	6965      	ldr	r5, [r4, #20]
 800c9ee:	6909      	ldr	r1, [r1, #16]
 800c9f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9f4:	eba3 0901 	sub.w	r9, r3, r1
 800c9f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9fc:	1c7b      	adds	r3, r7, #1
 800c9fe:	444b      	add	r3, r9
 800ca00:	106d      	asrs	r5, r5, #1
 800ca02:	429d      	cmp	r5, r3
 800ca04:	bf38      	it	cc
 800ca06:	461d      	movcc	r5, r3
 800ca08:	0553      	lsls	r3, r2, #21
 800ca0a:	d527      	bpl.n	800ca5c <__ssputs_r+0x8c>
 800ca0c:	4629      	mov	r1, r5
 800ca0e:	f7ff fe37 	bl	800c680 <_malloc_r>
 800ca12:	4606      	mov	r6, r0
 800ca14:	b360      	cbz	r0, 800ca70 <__ssputs_r+0xa0>
 800ca16:	464a      	mov	r2, r9
 800ca18:	6921      	ldr	r1, [r4, #16]
 800ca1a:	f000 fb1c 	bl	800d056 <memcpy>
 800ca1e:	89a3      	ldrh	r3, [r4, #12]
 800ca20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca28:	81a3      	strh	r3, [r4, #12]
 800ca2a:	6126      	str	r6, [r4, #16]
 800ca2c:	444e      	add	r6, r9
 800ca2e:	6026      	str	r6, [r4, #0]
 800ca30:	463e      	mov	r6, r7
 800ca32:	6165      	str	r5, [r4, #20]
 800ca34:	eba5 0509 	sub.w	r5, r5, r9
 800ca38:	60a5      	str	r5, [r4, #8]
 800ca3a:	42be      	cmp	r6, r7
 800ca3c:	d900      	bls.n	800ca40 <__ssputs_r+0x70>
 800ca3e:	463e      	mov	r6, r7
 800ca40:	4632      	mov	r2, r6
 800ca42:	4641      	mov	r1, r8
 800ca44:	6820      	ldr	r0, [r4, #0]
 800ca46:	f000 fade 	bl	800d006 <memmove>
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	68a3      	ldr	r3, [r4, #8]
 800ca4e:	1b9b      	subs	r3, r3, r6
 800ca50:	60a3      	str	r3, [r4, #8]
 800ca52:	6823      	ldr	r3, [r4, #0]
 800ca54:	4433      	add	r3, r6
 800ca56:	6023      	str	r3, [r4, #0]
 800ca58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca5c:	462a      	mov	r2, r5
 800ca5e:	f000 faa3 	bl	800cfa8 <_realloc_r>
 800ca62:	4606      	mov	r6, r0
 800ca64:	2800      	cmp	r0, #0
 800ca66:	d1e0      	bne.n	800ca2a <__ssputs_r+0x5a>
 800ca68:	4650      	mov	r0, sl
 800ca6a:	6921      	ldr	r1, [r4, #16]
 800ca6c:	f7ff ff68 	bl	800c940 <_free_r>
 800ca70:	230c      	movs	r3, #12
 800ca72:	f8ca 3000 	str.w	r3, [sl]
 800ca76:	89a3      	ldrh	r3, [r4, #12]
 800ca78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca80:	81a3      	strh	r3, [r4, #12]
 800ca82:	e7e9      	b.n	800ca58 <__ssputs_r+0x88>

0800ca84 <_svfiprintf_r>:
 800ca84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca88:	4698      	mov	r8, r3
 800ca8a:	898b      	ldrh	r3, [r1, #12]
 800ca8c:	4607      	mov	r7, r0
 800ca8e:	061b      	lsls	r3, r3, #24
 800ca90:	460d      	mov	r5, r1
 800ca92:	4614      	mov	r4, r2
 800ca94:	b09d      	sub	sp, #116	; 0x74
 800ca96:	d50e      	bpl.n	800cab6 <_svfiprintf_r+0x32>
 800ca98:	690b      	ldr	r3, [r1, #16]
 800ca9a:	b963      	cbnz	r3, 800cab6 <_svfiprintf_r+0x32>
 800ca9c:	2140      	movs	r1, #64	; 0x40
 800ca9e:	f7ff fdef 	bl	800c680 <_malloc_r>
 800caa2:	6028      	str	r0, [r5, #0]
 800caa4:	6128      	str	r0, [r5, #16]
 800caa6:	b920      	cbnz	r0, 800cab2 <_svfiprintf_r+0x2e>
 800caa8:	230c      	movs	r3, #12
 800caaa:	603b      	str	r3, [r7, #0]
 800caac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cab0:	e0d0      	b.n	800cc54 <_svfiprintf_r+0x1d0>
 800cab2:	2340      	movs	r3, #64	; 0x40
 800cab4:	616b      	str	r3, [r5, #20]
 800cab6:	2300      	movs	r3, #0
 800cab8:	9309      	str	r3, [sp, #36]	; 0x24
 800caba:	2320      	movs	r3, #32
 800cabc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cac0:	2330      	movs	r3, #48	; 0x30
 800cac2:	f04f 0901 	mov.w	r9, #1
 800cac6:	f8cd 800c 	str.w	r8, [sp, #12]
 800caca:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800cc6c <_svfiprintf_r+0x1e8>
 800cace:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cad2:	4623      	mov	r3, r4
 800cad4:	469a      	mov	sl, r3
 800cad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cada:	b10a      	cbz	r2, 800cae0 <_svfiprintf_r+0x5c>
 800cadc:	2a25      	cmp	r2, #37	; 0x25
 800cade:	d1f9      	bne.n	800cad4 <_svfiprintf_r+0x50>
 800cae0:	ebba 0b04 	subs.w	fp, sl, r4
 800cae4:	d00b      	beq.n	800cafe <_svfiprintf_r+0x7a>
 800cae6:	465b      	mov	r3, fp
 800cae8:	4622      	mov	r2, r4
 800caea:	4629      	mov	r1, r5
 800caec:	4638      	mov	r0, r7
 800caee:	f7ff ff6f 	bl	800c9d0 <__ssputs_r>
 800caf2:	3001      	adds	r0, #1
 800caf4:	f000 80a9 	beq.w	800cc4a <_svfiprintf_r+0x1c6>
 800caf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cafa:	445a      	add	r2, fp
 800cafc:	9209      	str	r2, [sp, #36]	; 0x24
 800cafe:	f89a 3000 	ldrb.w	r3, [sl]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f000 80a1 	beq.w	800cc4a <_svfiprintf_r+0x1c6>
 800cb08:	2300      	movs	r3, #0
 800cb0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb12:	f10a 0a01 	add.w	sl, sl, #1
 800cb16:	9304      	str	r3, [sp, #16]
 800cb18:	9307      	str	r3, [sp, #28]
 800cb1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb1e:	931a      	str	r3, [sp, #104]	; 0x68
 800cb20:	4654      	mov	r4, sl
 800cb22:	2205      	movs	r2, #5
 800cb24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb28:	4850      	ldr	r0, [pc, #320]	; (800cc6c <_svfiprintf_r+0x1e8>)
 800cb2a:	f000 fa86 	bl	800d03a <memchr>
 800cb2e:	9a04      	ldr	r2, [sp, #16]
 800cb30:	b9d8      	cbnz	r0, 800cb6a <_svfiprintf_r+0xe6>
 800cb32:	06d0      	lsls	r0, r2, #27
 800cb34:	bf44      	itt	mi
 800cb36:	2320      	movmi	r3, #32
 800cb38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb3c:	0711      	lsls	r1, r2, #28
 800cb3e:	bf44      	itt	mi
 800cb40:	232b      	movmi	r3, #43	; 0x2b
 800cb42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb46:	f89a 3000 	ldrb.w	r3, [sl]
 800cb4a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb4c:	d015      	beq.n	800cb7a <_svfiprintf_r+0xf6>
 800cb4e:	4654      	mov	r4, sl
 800cb50:	2000      	movs	r0, #0
 800cb52:	f04f 0c0a 	mov.w	ip, #10
 800cb56:	9a07      	ldr	r2, [sp, #28]
 800cb58:	4621      	mov	r1, r4
 800cb5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb5e:	3b30      	subs	r3, #48	; 0x30
 800cb60:	2b09      	cmp	r3, #9
 800cb62:	d94d      	bls.n	800cc00 <_svfiprintf_r+0x17c>
 800cb64:	b1b0      	cbz	r0, 800cb94 <_svfiprintf_r+0x110>
 800cb66:	9207      	str	r2, [sp, #28]
 800cb68:	e014      	b.n	800cb94 <_svfiprintf_r+0x110>
 800cb6a:	eba0 0308 	sub.w	r3, r0, r8
 800cb6e:	fa09 f303 	lsl.w	r3, r9, r3
 800cb72:	4313      	orrs	r3, r2
 800cb74:	46a2      	mov	sl, r4
 800cb76:	9304      	str	r3, [sp, #16]
 800cb78:	e7d2      	b.n	800cb20 <_svfiprintf_r+0x9c>
 800cb7a:	9b03      	ldr	r3, [sp, #12]
 800cb7c:	1d19      	adds	r1, r3, #4
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	9103      	str	r1, [sp, #12]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	bfbb      	ittet	lt
 800cb86:	425b      	neglt	r3, r3
 800cb88:	f042 0202 	orrlt.w	r2, r2, #2
 800cb8c:	9307      	strge	r3, [sp, #28]
 800cb8e:	9307      	strlt	r3, [sp, #28]
 800cb90:	bfb8      	it	lt
 800cb92:	9204      	strlt	r2, [sp, #16]
 800cb94:	7823      	ldrb	r3, [r4, #0]
 800cb96:	2b2e      	cmp	r3, #46	; 0x2e
 800cb98:	d10c      	bne.n	800cbb4 <_svfiprintf_r+0x130>
 800cb9a:	7863      	ldrb	r3, [r4, #1]
 800cb9c:	2b2a      	cmp	r3, #42	; 0x2a
 800cb9e:	d134      	bne.n	800cc0a <_svfiprintf_r+0x186>
 800cba0:	9b03      	ldr	r3, [sp, #12]
 800cba2:	3402      	adds	r4, #2
 800cba4:	1d1a      	adds	r2, r3, #4
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	9203      	str	r2, [sp, #12]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	bfb8      	it	lt
 800cbae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cbb2:	9305      	str	r3, [sp, #20]
 800cbb4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800cc70 <_svfiprintf_r+0x1ec>
 800cbb8:	2203      	movs	r2, #3
 800cbba:	4650      	mov	r0, sl
 800cbbc:	7821      	ldrb	r1, [r4, #0]
 800cbbe:	f000 fa3c 	bl	800d03a <memchr>
 800cbc2:	b138      	cbz	r0, 800cbd4 <_svfiprintf_r+0x150>
 800cbc4:	2240      	movs	r2, #64	; 0x40
 800cbc6:	9b04      	ldr	r3, [sp, #16]
 800cbc8:	eba0 000a 	sub.w	r0, r0, sl
 800cbcc:	4082      	lsls	r2, r0
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	3401      	adds	r4, #1
 800cbd2:	9304      	str	r3, [sp, #16]
 800cbd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbd8:	2206      	movs	r2, #6
 800cbda:	4826      	ldr	r0, [pc, #152]	; (800cc74 <_svfiprintf_r+0x1f0>)
 800cbdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbe0:	f000 fa2b 	bl	800d03a <memchr>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d038      	beq.n	800cc5a <_svfiprintf_r+0x1d6>
 800cbe8:	4b23      	ldr	r3, [pc, #140]	; (800cc78 <_svfiprintf_r+0x1f4>)
 800cbea:	bb1b      	cbnz	r3, 800cc34 <_svfiprintf_r+0x1b0>
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	3307      	adds	r3, #7
 800cbf0:	f023 0307 	bic.w	r3, r3, #7
 800cbf4:	3308      	adds	r3, #8
 800cbf6:	9303      	str	r3, [sp, #12]
 800cbf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbfa:	4433      	add	r3, r6
 800cbfc:	9309      	str	r3, [sp, #36]	; 0x24
 800cbfe:	e768      	b.n	800cad2 <_svfiprintf_r+0x4e>
 800cc00:	460c      	mov	r4, r1
 800cc02:	2001      	movs	r0, #1
 800cc04:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc08:	e7a6      	b.n	800cb58 <_svfiprintf_r+0xd4>
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	f04f 0c0a 	mov.w	ip, #10
 800cc10:	4619      	mov	r1, r3
 800cc12:	3401      	adds	r4, #1
 800cc14:	9305      	str	r3, [sp, #20]
 800cc16:	4620      	mov	r0, r4
 800cc18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc1c:	3a30      	subs	r2, #48	; 0x30
 800cc1e:	2a09      	cmp	r2, #9
 800cc20:	d903      	bls.n	800cc2a <_svfiprintf_r+0x1a6>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d0c6      	beq.n	800cbb4 <_svfiprintf_r+0x130>
 800cc26:	9105      	str	r1, [sp, #20]
 800cc28:	e7c4      	b.n	800cbb4 <_svfiprintf_r+0x130>
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc32:	e7f0      	b.n	800cc16 <_svfiprintf_r+0x192>
 800cc34:	ab03      	add	r3, sp, #12
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	462a      	mov	r2, r5
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	4b0f      	ldr	r3, [pc, #60]	; (800cc7c <_svfiprintf_r+0x1f8>)
 800cc3e:	a904      	add	r1, sp, #16
 800cc40:	f3af 8000 	nop.w
 800cc44:	1c42      	adds	r2, r0, #1
 800cc46:	4606      	mov	r6, r0
 800cc48:	d1d6      	bne.n	800cbf8 <_svfiprintf_r+0x174>
 800cc4a:	89ab      	ldrh	r3, [r5, #12]
 800cc4c:	065b      	lsls	r3, r3, #25
 800cc4e:	f53f af2d 	bmi.w	800caac <_svfiprintf_r+0x28>
 800cc52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc54:	b01d      	add	sp, #116	; 0x74
 800cc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc5a:	ab03      	add	r3, sp, #12
 800cc5c:	9300      	str	r3, [sp, #0]
 800cc5e:	462a      	mov	r2, r5
 800cc60:	4638      	mov	r0, r7
 800cc62:	4b06      	ldr	r3, [pc, #24]	; (800cc7c <_svfiprintf_r+0x1f8>)
 800cc64:	a904      	add	r1, sp, #16
 800cc66:	f000 f87d 	bl	800cd64 <_printf_i>
 800cc6a:	e7eb      	b.n	800cc44 <_svfiprintf_r+0x1c0>
 800cc6c:	0800e0ab 	.word	0x0800e0ab
 800cc70:	0800e0b1 	.word	0x0800e0b1
 800cc74:	0800e0b5 	.word	0x0800e0b5
 800cc78:	00000000 	.word	0x00000000
 800cc7c:	0800c9d1 	.word	0x0800c9d1

0800cc80 <_printf_common>:
 800cc80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc84:	4616      	mov	r6, r2
 800cc86:	4699      	mov	r9, r3
 800cc88:	688a      	ldr	r2, [r1, #8]
 800cc8a:	690b      	ldr	r3, [r1, #16]
 800cc8c:	4607      	mov	r7, r0
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	bfb8      	it	lt
 800cc92:	4613      	movlt	r3, r2
 800cc94:	6033      	str	r3, [r6, #0]
 800cc96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc9a:	460c      	mov	r4, r1
 800cc9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cca0:	b10a      	cbz	r2, 800cca6 <_printf_common+0x26>
 800cca2:	3301      	adds	r3, #1
 800cca4:	6033      	str	r3, [r6, #0]
 800cca6:	6823      	ldr	r3, [r4, #0]
 800cca8:	0699      	lsls	r1, r3, #26
 800ccaa:	bf42      	ittt	mi
 800ccac:	6833      	ldrmi	r3, [r6, #0]
 800ccae:	3302      	addmi	r3, #2
 800ccb0:	6033      	strmi	r3, [r6, #0]
 800ccb2:	6825      	ldr	r5, [r4, #0]
 800ccb4:	f015 0506 	ands.w	r5, r5, #6
 800ccb8:	d106      	bne.n	800ccc8 <_printf_common+0x48>
 800ccba:	f104 0a19 	add.w	sl, r4, #25
 800ccbe:	68e3      	ldr	r3, [r4, #12]
 800ccc0:	6832      	ldr	r2, [r6, #0]
 800ccc2:	1a9b      	subs	r3, r3, r2
 800ccc4:	42ab      	cmp	r3, r5
 800ccc6:	dc2b      	bgt.n	800cd20 <_printf_common+0xa0>
 800ccc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cccc:	1e13      	subs	r3, r2, #0
 800ccce:	6822      	ldr	r2, [r4, #0]
 800ccd0:	bf18      	it	ne
 800ccd2:	2301      	movne	r3, #1
 800ccd4:	0692      	lsls	r2, r2, #26
 800ccd6:	d430      	bmi.n	800cd3a <_printf_common+0xba>
 800ccd8:	4649      	mov	r1, r9
 800ccda:	4638      	mov	r0, r7
 800ccdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cce0:	47c0      	blx	r8
 800cce2:	3001      	adds	r0, #1
 800cce4:	d023      	beq.n	800cd2e <_printf_common+0xae>
 800cce6:	6823      	ldr	r3, [r4, #0]
 800cce8:	6922      	ldr	r2, [r4, #16]
 800ccea:	f003 0306 	and.w	r3, r3, #6
 800ccee:	2b04      	cmp	r3, #4
 800ccf0:	bf14      	ite	ne
 800ccf2:	2500      	movne	r5, #0
 800ccf4:	6833      	ldreq	r3, [r6, #0]
 800ccf6:	f04f 0600 	mov.w	r6, #0
 800ccfa:	bf08      	it	eq
 800ccfc:	68e5      	ldreq	r5, [r4, #12]
 800ccfe:	f104 041a 	add.w	r4, r4, #26
 800cd02:	bf08      	it	eq
 800cd04:	1aed      	subeq	r5, r5, r3
 800cd06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cd0a:	bf08      	it	eq
 800cd0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd10:	4293      	cmp	r3, r2
 800cd12:	bfc4      	itt	gt
 800cd14:	1a9b      	subgt	r3, r3, r2
 800cd16:	18ed      	addgt	r5, r5, r3
 800cd18:	42b5      	cmp	r5, r6
 800cd1a:	d11a      	bne.n	800cd52 <_printf_common+0xd2>
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	e008      	b.n	800cd32 <_printf_common+0xb2>
 800cd20:	2301      	movs	r3, #1
 800cd22:	4652      	mov	r2, sl
 800cd24:	4649      	mov	r1, r9
 800cd26:	4638      	mov	r0, r7
 800cd28:	47c0      	blx	r8
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	d103      	bne.n	800cd36 <_printf_common+0xb6>
 800cd2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd36:	3501      	adds	r5, #1
 800cd38:	e7c1      	b.n	800ccbe <_printf_common+0x3e>
 800cd3a:	2030      	movs	r0, #48	; 0x30
 800cd3c:	18e1      	adds	r1, r4, r3
 800cd3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd42:	1c5a      	adds	r2, r3, #1
 800cd44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd48:	4422      	add	r2, r4
 800cd4a:	3302      	adds	r3, #2
 800cd4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd50:	e7c2      	b.n	800ccd8 <_printf_common+0x58>
 800cd52:	2301      	movs	r3, #1
 800cd54:	4622      	mov	r2, r4
 800cd56:	4649      	mov	r1, r9
 800cd58:	4638      	mov	r0, r7
 800cd5a:	47c0      	blx	r8
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	d0e6      	beq.n	800cd2e <_printf_common+0xae>
 800cd60:	3601      	adds	r6, #1
 800cd62:	e7d9      	b.n	800cd18 <_printf_common+0x98>

0800cd64 <_printf_i>:
 800cd64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd68:	7e0f      	ldrb	r7, [r1, #24]
 800cd6a:	4691      	mov	r9, r2
 800cd6c:	2f78      	cmp	r7, #120	; 0x78
 800cd6e:	4680      	mov	r8, r0
 800cd70:	460c      	mov	r4, r1
 800cd72:	469a      	mov	sl, r3
 800cd74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd7a:	d807      	bhi.n	800cd8c <_printf_i+0x28>
 800cd7c:	2f62      	cmp	r7, #98	; 0x62
 800cd7e:	d80a      	bhi.n	800cd96 <_printf_i+0x32>
 800cd80:	2f00      	cmp	r7, #0
 800cd82:	f000 80d5 	beq.w	800cf30 <_printf_i+0x1cc>
 800cd86:	2f58      	cmp	r7, #88	; 0x58
 800cd88:	f000 80c1 	beq.w	800cf0e <_printf_i+0x1aa>
 800cd8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd94:	e03a      	b.n	800ce0c <_printf_i+0xa8>
 800cd96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd9a:	2b15      	cmp	r3, #21
 800cd9c:	d8f6      	bhi.n	800cd8c <_printf_i+0x28>
 800cd9e:	a101      	add	r1, pc, #4	; (adr r1, 800cda4 <_printf_i+0x40>)
 800cda0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cda4:	0800cdfd 	.word	0x0800cdfd
 800cda8:	0800ce11 	.word	0x0800ce11
 800cdac:	0800cd8d 	.word	0x0800cd8d
 800cdb0:	0800cd8d 	.word	0x0800cd8d
 800cdb4:	0800cd8d 	.word	0x0800cd8d
 800cdb8:	0800cd8d 	.word	0x0800cd8d
 800cdbc:	0800ce11 	.word	0x0800ce11
 800cdc0:	0800cd8d 	.word	0x0800cd8d
 800cdc4:	0800cd8d 	.word	0x0800cd8d
 800cdc8:	0800cd8d 	.word	0x0800cd8d
 800cdcc:	0800cd8d 	.word	0x0800cd8d
 800cdd0:	0800cf17 	.word	0x0800cf17
 800cdd4:	0800ce3d 	.word	0x0800ce3d
 800cdd8:	0800ced1 	.word	0x0800ced1
 800cddc:	0800cd8d 	.word	0x0800cd8d
 800cde0:	0800cd8d 	.word	0x0800cd8d
 800cde4:	0800cf39 	.word	0x0800cf39
 800cde8:	0800cd8d 	.word	0x0800cd8d
 800cdec:	0800ce3d 	.word	0x0800ce3d
 800cdf0:	0800cd8d 	.word	0x0800cd8d
 800cdf4:	0800cd8d 	.word	0x0800cd8d
 800cdf8:	0800ced9 	.word	0x0800ced9
 800cdfc:	682b      	ldr	r3, [r5, #0]
 800cdfe:	1d1a      	adds	r2, r3, #4
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	602a      	str	r2, [r5, #0]
 800ce04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	e0a0      	b.n	800cf52 <_printf_i+0x1ee>
 800ce10:	6820      	ldr	r0, [r4, #0]
 800ce12:	682b      	ldr	r3, [r5, #0]
 800ce14:	0607      	lsls	r7, r0, #24
 800ce16:	f103 0104 	add.w	r1, r3, #4
 800ce1a:	6029      	str	r1, [r5, #0]
 800ce1c:	d501      	bpl.n	800ce22 <_printf_i+0xbe>
 800ce1e:	681e      	ldr	r6, [r3, #0]
 800ce20:	e003      	b.n	800ce2a <_printf_i+0xc6>
 800ce22:	0646      	lsls	r6, r0, #25
 800ce24:	d5fb      	bpl.n	800ce1e <_printf_i+0xba>
 800ce26:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ce2a:	2e00      	cmp	r6, #0
 800ce2c:	da03      	bge.n	800ce36 <_printf_i+0xd2>
 800ce2e:	232d      	movs	r3, #45	; 0x2d
 800ce30:	4276      	negs	r6, r6
 800ce32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce36:	230a      	movs	r3, #10
 800ce38:	4859      	ldr	r0, [pc, #356]	; (800cfa0 <_printf_i+0x23c>)
 800ce3a:	e012      	b.n	800ce62 <_printf_i+0xfe>
 800ce3c:	682b      	ldr	r3, [r5, #0]
 800ce3e:	6820      	ldr	r0, [r4, #0]
 800ce40:	1d19      	adds	r1, r3, #4
 800ce42:	6029      	str	r1, [r5, #0]
 800ce44:	0605      	lsls	r5, r0, #24
 800ce46:	d501      	bpl.n	800ce4c <_printf_i+0xe8>
 800ce48:	681e      	ldr	r6, [r3, #0]
 800ce4a:	e002      	b.n	800ce52 <_printf_i+0xee>
 800ce4c:	0641      	lsls	r1, r0, #25
 800ce4e:	d5fb      	bpl.n	800ce48 <_printf_i+0xe4>
 800ce50:	881e      	ldrh	r6, [r3, #0]
 800ce52:	2f6f      	cmp	r7, #111	; 0x6f
 800ce54:	bf0c      	ite	eq
 800ce56:	2308      	moveq	r3, #8
 800ce58:	230a      	movne	r3, #10
 800ce5a:	4851      	ldr	r0, [pc, #324]	; (800cfa0 <_printf_i+0x23c>)
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce62:	6865      	ldr	r5, [r4, #4]
 800ce64:	2d00      	cmp	r5, #0
 800ce66:	bfa8      	it	ge
 800ce68:	6821      	ldrge	r1, [r4, #0]
 800ce6a:	60a5      	str	r5, [r4, #8]
 800ce6c:	bfa4      	itt	ge
 800ce6e:	f021 0104 	bicge.w	r1, r1, #4
 800ce72:	6021      	strge	r1, [r4, #0]
 800ce74:	b90e      	cbnz	r6, 800ce7a <_printf_i+0x116>
 800ce76:	2d00      	cmp	r5, #0
 800ce78:	d04b      	beq.n	800cf12 <_printf_i+0x1ae>
 800ce7a:	4615      	mov	r5, r2
 800ce7c:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce80:	fb03 6711 	mls	r7, r3, r1, r6
 800ce84:	5dc7      	ldrb	r7, [r0, r7]
 800ce86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce8a:	4637      	mov	r7, r6
 800ce8c:	42bb      	cmp	r3, r7
 800ce8e:	460e      	mov	r6, r1
 800ce90:	d9f4      	bls.n	800ce7c <_printf_i+0x118>
 800ce92:	2b08      	cmp	r3, #8
 800ce94:	d10b      	bne.n	800ceae <_printf_i+0x14a>
 800ce96:	6823      	ldr	r3, [r4, #0]
 800ce98:	07de      	lsls	r6, r3, #31
 800ce9a:	d508      	bpl.n	800ceae <_printf_i+0x14a>
 800ce9c:	6923      	ldr	r3, [r4, #16]
 800ce9e:	6861      	ldr	r1, [r4, #4]
 800cea0:	4299      	cmp	r1, r3
 800cea2:	bfde      	ittt	le
 800cea4:	2330      	movle	r3, #48	; 0x30
 800cea6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ceaa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ceae:	1b52      	subs	r2, r2, r5
 800ceb0:	6122      	str	r2, [r4, #16]
 800ceb2:	464b      	mov	r3, r9
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	4640      	mov	r0, r8
 800ceb8:	f8cd a000 	str.w	sl, [sp]
 800cebc:	aa03      	add	r2, sp, #12
 800cebe:	f7ff fedf 	bl	800cc80 <_printf_common>
 800cec2:	3001      	adds	r0, #1
 800cec4:	d14a      	bne.n	800cf5c <_printf_i+0x1f8>
 800cec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ceca:	b004      	add	sp, #16
 800cecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ced0:	6823      	ldr	r3, [r4, #0]
 800ced2:	f043 0320 	orr.w	r3, r3, #32
 800ced6:	6023      	str	r3, [r4, #0]
 800ced8:	2778      	movs	r7, #120	; 0x78
 800ceda:	4832      	ldr	r0, [pc, #200]	; (800cfa4 <_printf_i+0x240>)
 800cedc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cee0:	6823      	ldr	r3, [r4, #0]
 800cee2:	6829      	ldr	r1, [r5, #0]
 800cee4:	061f      	lsls	r7, r3, #24
 800cee6:	f851 6b04 	ldr.w	r6, [r1], #4
 800ceea:	d402      	bmi.n	800cef2 <_printf_i+0x18e>
 800ceec:	065f      	lsls	r7, r3, #25
 800ceee:	bf48      	it	mi
 800cef0:	b2b6      	uxthmi	r6, r6
 800cef2:	07df      	lsls	r7, r3, #31
 800cef4:	bf48      	it	mi
 800cef6:	f043 0320 	orrmi.w	r3, r3, #32
 800cefa:	6029      	str	r1, [r5, #0]
 800cefc:	bf48      	it	mi
 800cefe:	6023      	strmi	r3, [r4, #0]
 800cf00:	b91e      	cbnz	r6, 800cf0a <_printf_i+0x1a6>
 800cf02:	6823      	ldr	r3, [r4, #0]
 800cf04:	f023 0320 	bic.w	r3, r3, #32
 800cf08:	6023      	str	r3, [r4, #0]
 800cf0a:	2310      	movs	r3, #16
 800cf0c:	e7a6      	b.n	800ce5c <_printf_i+0xf8>
 800cf0e:	4824      	ldr	r0, [pc, #144]	; (800cfa0 <_printf_i+0x23c>)
 800cf10:	e7e4      	b.n	800cedc <_printf_i+0x178>
 800cf12:	4615      	mov	r5, r2
 800cf14:	e7bd      	b.n	800ce92 <_printf_i+0x12e>
 800cf16:	682b      	ldr	r3, [r5, #0]
 800cf18:	6826      	ldr	r6, [r4, #0]
 800cf1a:	1d18      	adds	r0, r3, #4
 800cf1c:	6961      	ldr	r1, [r4, #20]
 800cf1e:	6028      	str	r0, [r5, #0]
 800cf20:	0635      	lsls	r5, r6, #24
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	d501      	bpl.n	800cf2a <_printf_i+0x1c6>
 800cf26:	6019      	str	r1, [r3, #0]
 800cf28:	e002      	b.n	800cf30 <_printf_i+0x1cc>
 800cf2a:	0670      	lsls	r0, r6, #25
 800cf2c:	d5fb      	bpl.n	800cf26 <_printf_i+0x1c2>
 800cf2e:	8019      	strh	r1, [r3, #0]
 800cf30:	2300      	movs	r3, #0
 800cf32:	4615      	mov	r5, r2
 800cf34:	6123      	str	r3, [r4, #16]
 800cf36:	e7bc      	b.n	800ceb2 <_printf_i+0x14e>
 800cf38:	682b      	ldr	r3, [r5, #0]
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	1d1a      	adds	r2, r3, #4
 800cf3e:	602a      	str	r2, [r5, #0]
 800cf40:	681d      	ldr	r5, [r3, #0]
 800cf42:	6862      	ldr	r2, [r4, #4]
 800cf44:	4628      	mov	r0, r5
 800cf46:	f000 f878 	bl	800d03a <memchr>
 800cf4a:	b108      	cbz	r0, 800cf50 <_printf_i+0x1ec>
 800cf4c:	1b40      	subs	r0, r0, r5
 800cf4e:	6060      	str	r0, [r4, #4]
 800cf50:	6863      	ldr	r3, [r4, #4]
 800cf52:	6123      	str	r3, [r4, #16]
 800cf54:	2300      	movs	r3, #0
 800cf56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf5a:	e7aa      	b.n	800ceb2 <_printf_i+0x14e>
 800cf5c:	462a      	mov	r2, r5
 800cf5e:	4649      	mov	r1, r9
 800cf60:	4640      	mov	r0, r8
 800cf62:	6923      	ldr	r3, [r4, #16]
 800cf64:	47d0      	blx	sl
 800cf66:	3001      	adds	r0, #1
 800cf68:	d0ad      	beq.n	800cec6 <_printf_i+0x162>
 800cf6a:	6823      	ldr	r3, [r4, #0]
 800cf6c:	079b      	lsls	r3, r3, #30
 800cf6e:	d413      	bmi.n	800cf98 <_printf_i+0x234>
 800cf70:	68e0      	ldr	r0, [r4, #12]
 800cf72:	9b03      	ldr	r3, [sp, #12]
 800cf74:	4298      	cmp	r0, r3
 800cf76:	bfb8      	it	lt
 800cf78:	4618      	movlt	r0, r3
 800cf7a:	e7a6      	b.n	800ceca <_printf_i+0x166>
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	4632      	mov	r2, r6
 800cf80:	4649      	mov	r1, r9
 800cf82:	4640      	mov	r0, r8
 800cf84:	47d0      	blx	sl
 800cf86:	3001      	adds	r0, #1
 800cf88:	d09d      	beq.n	800cec6 <_printf_i+0x162>
 800cf8a:	3501      	adds	r5, #1
 800cf8c:	68e3      	ldr	r3, [r4, #12]
 800cf8e:	9903      	ldr	r1, [sp, #12]
 800cf90:	1a5b      	subs	r3, r3, r1
 800cf92:	42ab      	cmp	r3, r5
 800cf94:	dcf2      	bgt.n	800cf7c <_printf_i+0x218>
 800cf96:	e7eb      	b.n	800cf70 <_printf_i+0x20c>
 800cf98:	2500      	movs	r5, #0
 800cf9a:	f104 0619 	add.w	r6, r4, #25
 800cf9e:	e7f5      	b.n	800cf8c <_printf_i+0x228>
 800cfa0:	0800e0bc 	.word	0x0800e0bc
 800cfa4:	0800e0cd 	.word	0x0800e0cd

0800cfa8 <_realloc_r>:
 800cfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfac:	4680      	mov	r8, r0
 800cfae:	4614      	mov	r4, r2
 800cfb0:	460e      	mov	r6, r1
 800cfb2:	b921      	cbnz	r1, 800cfbe <_realloc_r+0x16>
 800cfb4:	4611      	mov	r1, r2
 800cfb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfba:	f7ff bb61 	b.w	800c680 <_malloc_r>
 800cfbe:	b92a      	cbnz	r2, 800cfcc <_realloc_r+0x24>
 800cfc0:	f7ff fcbe 	bl	800c940 <_free_r>
 800cfc4:	4625      	mov	r5, r4
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfcc:	f000 f851 	bl	800d072 <_malloc_usable_size_r>
 800cfd0:	4284      	cmp	r4, r0
 800cfd2:	4607      	mov	r7, r0
 800cfd4:	d802      	bhi.n	800cfdc <_realloc_r+0x34>
 800cfd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cfda:	d812      	bhi.n	800d002 <_realloc_r+0x5a>
 800cfdc:	4621      	mov	r1, r4
 800cfde:	4640      	mov	r0, r8
 800cfe0:	f7ff fb4e 	bl	800c680 <_malloc_r>
 800cfe4:	4605      	mov	r5, r0
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	d0ed      	beq.n	800cfc6 <_realloc_r+0x1e>
 800cfea:	42bc      	cmp	r4, r7
 800cfec:	4622      	mov	r2, r4
 800cfee:	4631      	mov	r1, r6
 800cff0:	bf28      	it	cs
 800cff2:	463a      	movcs	r2, r7
 800cff4:	f000 f82f 	bl	800d056 <memcpy>
 800cff8:	4631      	mov	r1, r6
 800cffa:	4640      	mov	r0, r8
 800cffc:	f7ff fca0 	bl	800c940 <_free_r>
 800d000:	e7e1      	b.n	800cfc6 <_realloc_r+0x1e>
 800d002:	4635      	mov	r5, r6
 800d004:	e7df      	b.n	800cfc6 <_realloc_r+0x1e>

0800d006 <memmove>:
 800d006:	4288      	cmp	r0, r1
 800d008:	b510      	push	{r4, lr}
 800d00a:	eb01 0402 	add.w	r4, r1, r2
 800d00e:	d902      	bls.n	800d016 <memmove+0x10>
 800d010:	4284      	cmp	r4, r0
 800d012:	4623      	mov	r3, r4
 800d014:	d807      	bhi.n	800d026 <memmove+0x20>
 800d016:	1e43      	subs	r3, r0, #1
 800d018:	42a1      	cmp	r1, r4
 800d01a:	d008      	beq.n	800d02e <memmove+0x28>
 800d01c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d020:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d024:	e7f8      	b.n	800d018 <memmove+0x12>
 800d026:	4601      	mov	r1, r0
 800d028:	4402      	add	r2, r0
 800d02a:	428a      	cmp	r2, r1
 800d02c:	d100      	bne.n	800d030 <memmove+0x2a>
 800d02e:	bd10      	pop	{r4, pc}
 800d030:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d034:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d038:	e7f7      	b.n	800d02a <memmove+0x24>

0800d03a <memchr>:
 800d03a:	4603      	mov	r3, r0
 800d03c:	b510      	push	{r4, lr}
 800d03e:	b2c9      	uxtb	r1, r1
 800d040:	4402      	add	r2, r0
 800d042:	4293      	cmp	r3, r2
 800d044:	4618      	mov	r0, r3
 800d046:	d101      	bne.n	800d04c <memchr+0x12>
 800d048:	2000      	movs	r0, #0
 800d04a:	e003      	b.n	800d054 <memchr+0x1a>
 800d04c:	7804      	ldrb	r4, [r0, #0]
 800d04e:	3301      	adds	r3, #1
 800d050:	428c      	cmp	r4, r1
 800d052:	d1f6      	bne.n	800d042 <memchr+0x8>
 800d054:	bd10      	pop	{r4, pc}

0800d056 <memcpy>:
 800d056:	440a      	add	r2, r1
 800d058:	4291      	cmp	r1, r2
 800d05a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d05e:	d100      	bne.n	800d062 <memcpy+0xc>
 800d060:	4770      	bx	lr
 800d062:	b510      	push	{r4, lr}
 800d064:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d068:	4291      	cmp	r1, r2
 800d06a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d06e:	d1f9      	bne.n	800d064 <memcpy+0xe>
 800d070:	bd10      	pop	{r4, pc}

0800d072 <_malloc_usable_size_r>:
 800d072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d076:	1f18      	subs	r0, r3, #4
 800d078:	2b00      	cmp	r3, #0
 800d07a:	bfbc      	itt	lt
 800d07c:	580b      	ldrlt	r3, [r1, r0]
 800d07e:	18c0      	addlt	r0, r0, r3
 800d080:	4770      	bx	lr
	...

0800d084 <_init>:
 800d084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d086:	bf00      	nop
 800d088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d08a:	bc08      	pop	{r3}
 800d08c:	469e      	mov	lr, r3
 800d08e:	4770      	bx	lr

0800d090 <_fini>:
 800d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d092:	bf00      	nop
 800d094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d096:	bc08      	pop	{r3}
 800d098:	469e      	mov	lr, r3
 800d09a:	4770      	bx	lr
