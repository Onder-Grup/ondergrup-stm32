
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d79c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  0800d980  0800d980  0001d980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8f0  0800e8f0  00020a14  2**0
                  CONTENTS
  4 .ARM          00000000  0800e8f0  0800e8f0  00020a14  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e8f0  0800e8f0  00020a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8f0  0800e8f0  0001e8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8f4  0800e8f4  0001e8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a14  20000000  0800e8f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000a14  0800f30c  00020a14  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001014  0800f30c  00021014  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a14  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a3d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013651  00000000  00000000  00020a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002699  00000000  00000000  000340d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00036770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0d  00000000  00000000  00037930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aef5  00000000  00000000  0003873d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a25  00000000  00000000  00053632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fd63  00000000  00000000  0006c057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051f8  00000000  00000000  0010bdbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00110fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a14 	.word	0x20000a14
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d968 	.word	0x0800d968

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a18 	.word	0x20000a18
 8000220:	0800d968 	.word	0x0800d968

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00c ff72 	bl	800d12c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00c f940 	bl	800c4dc <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f009 f870 	bl	8009344 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00c ff60 	bl	800d12c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00c f92e 	bl	800c4dc <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f009 f85e 	bl	8009344 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00c ff4e 	bl	800d12c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00c f91c 	bl	800c4dc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f009 f84c 	bl	8009344 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00c ff3c 	bl	800d12c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00c f90a 	bl	800c4dc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f009 f83a 	bl	8009344 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00c ff47 	bl	800d17c <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00c ff34 	bl	800d17c <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00c fef8 	bl	800d12c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00c f8c6 	bl	800c4dc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f008 fff6 	bl	8009344 <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800d980 	.word	0x0800d980
 8000364:	20000a30 	.word	0x20000a30
 8000368:	0800d990 	.word	0x0800d990
 800036c:	0800d99c 	.word	0x0800d99c
 8000370:	0800d9a4 	.word	0x0800d9a4
 8000374:	0800d9b4 	.word	0x0800d9b4
 8000378:	0800d9c0 	.word	0x0800d9c0
 800037c:	0800d9c4 	.word	0x0800d9c4
 8000380:	0800d9c8 	.word	0x0800d9c8

08000384 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b0c6      	sub	sp, #280	; 0x118
 8000388:	af02      	add	r7, sp, #8
 800038a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800038e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800039c:	6019      	str	r1, [r3, #0]
 800039e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003a6:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003a8:	4a31      	ldr	r2, [pc, #196]	; (8000470 <sendMachineData+0xec>)
 80003aa:	4932      	ldr	r1, [pc, #200]	; (8000474 <sendMachineData+0xf0>)
 80003ac:	4832      	ldr	r0, [pc, #200]	; (8000478 <sendMachineData+0xf4>)
 80003ae:	f00c febd 	bl	800d12c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <sendMachineData+0xf4>)
 80003b4:	f7ff ff36 	bl	8000224 <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c4:	492c      	ldr	r1, [pc, #176]	; (8000478 <sendMachineData+0xf4>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f00c f888 	bl	800c4dc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f008 ffb8 	bl	8009344 <HAL_Delay>

	sprintf(local_txA,
 80003d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e8:	4924      	ldr	r1, [pc, #144]	; (800047c <sendMachineData+0xf8>)
 80003ea:	9100      	str	r1, [sp, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4923      	ldr	r1, [pc, #140]	; (8000480 <sendMachineData+0xfc>)
 80003f2:	f00c fe9b 	bl	800d12c <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80003f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff12 	bl	8000224 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <sendMachineData+0x100>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00c fe8b 	bl	800d12c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f00c f853 	bl	800c4dc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f008 ff83 	bl	8009344 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800043e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff feee 	bl	8000224 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f00c f83f 	bl	800c4dc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f008 ff6f 	bl	8009344 <HAL_Delay>
}
 8000466:	bf00      	nop
 8000468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800d9cc 	.word	0x0800d9cc
 8000474:	0800d9dc 	.word	0x0800d9dc
 8000478:	20000a30 	.word	0x20000a30
 800047c:	0800da58 	.word	0x0800da58
 8000480:	0800d9fc 	.word	0x0800d9fc
 8000484:	0800da6c 	.word	0x0800da6c

08000488 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af02      	add	r7, sp, #8
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	f023 030f 	bic.w	r3, r3, #15
 8000498:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004a0:	7b7b      	ldrb	r3, [r7, #13]
 80004a2:	f043 030c 	orr.w	r3, r3, #12
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004aa:	7b7b      	ldrb	r3, [r7, #13]
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004b4:	7b3b      	ldrb	r3, [r7, #12]
 80004b6:	f043 030c 	orr.w	r3, r3, #12
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004be:	7b3b      	ldrb	r3, [r7, #12]
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004c8:	bf00      	nop
 80004ca:	4825      	ldr	r0, [pc, #148]	; (8000560 <lcd_send_cmd+0xd8>)
 80004cc:	f00a fb33 	bl	800ab36 <HAL_I2C_GetError>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d0f9      	beq.n	80004ca <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004d6:	bf00      	nop
 80004d8:	4821      	ldr	r0, [pc, #132]	; (8000560 <lcd_send_cmd+0xd8>)
 80004da:	f00a fb1f 	bl	800ab1c <HAL_I2C_GetState>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b20      	cmp	r3, #32
 80004e2:	d1f9      	bne.n	80004d8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <lcd_send_cmd+0xdc>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d116      	bne.n	800051a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e00f      	b.n	8000512 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	3310      	adds	r3, #16
 80004f6:	443b      	add	r3, r7
 80004f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f022 0208 	bic.w	r2, r2, #8
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	3310      	adds	r3, #16
 8000506:	443b      	add	r3, r7
 8000508:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	3301      	adds	r3, #1
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d9ec      	bls.n	80004f2 <lcd_send_cmd+0x6a>
 8000518:	e015      	b.n	8000546 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	73bb      	strb	r3, [r7, #14]
 800051e:	e00f      	b.n	8000540 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	3310      	adds	r3, #16
 8000524:	443b      	add	r3, r7
 8000526:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	f042 0208 	orr.w	r2, r2, #8
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	3310      	adds	r3, #16
 8000534:	443b      	add	r3, r7
 8000536:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	73bb      	strb	r3, [r7, #14]
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d9ec      	bls.n	8000520 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000546:	f107 0208 	add.w	r2, r7, #8
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2304      	movs	r3, #4
 8000550:	214e      	movs	r1, #78	; 0x4e
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <lcd_send_cmd+0xd8>)
 8000554:	f009 fe82 	bl	800a25c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000b54 	.word	0x20000b54
 8000564:	20000b2a 	.word	0x20000b2a

08000568 <lcd_send_data>:

void lcd_send_data (char data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f023 030f 	bic.w	r3, r3, #15
 8000578:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	f043 030d 	orr.w	r3, r3, #13
 8000586:	b2db      	uxtb	r3, r3
 8000588:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800058a:	7b7b      	ldrb	r3, [r7, #13]
 800058c:	f043 0309 	orr.w	r3, r3, #9
 8000590:	b2db      	uxtb	r3, r3
 8000592:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000594:	7b3b      	ldrb	r3, [r7, #12]
 8000596:	f043 030d 	orr.w	r3, r3, #13
 800059a:	b2db      	uxtb	r3, r3
 800059c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	f043 0309 	orr.w	r3, r3, #9
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005a8:	bf00      	nop
 80005aa:	4825      	ldr	r0, [pc, #148]	; (8000640 <lcd_send_data+0xd8>)
 80005ac:	f00a fac3 	bl	800ab36 <HAL_I2C_GetError>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d0f9      	beq.n	80005aa <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005b6:	bf00      	nop
 80005b8:	4821      	ldr	r0, [pc, #132]	; (8000640 <lcd_send_data+0xd8>)
 80005ba:	f00a faaf 	bl	800ab1c <HAL_I2C_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b20      	cmp	r3, #32
 80005c2:	d1f9      	bne.n	80005b8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <lcd_send_data+0xdc>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d116      	bne.n	80005fa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e00f      	b.n	80005f2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3310      	adds	r3, #16
 80005d6:	443b      	add	r3, r7
 80005d8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f022 0208 	bic.w	r2, r2, #8
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	3310      	adds	r3, #16
 80005e6:	443b      	add	r3, r7
 80005e8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d9ec      	bls.n	80005d2 <lcd_send_data+0x6a>
 80005f8:	e015      	b.n	8000626 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	73bb      	strb	r3, [r7, #14]
 80005fe:	e00f      	b.n	8000620 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	3310      	adds	r3, #16
 8000604:	443b      	add	r3, r7
 8000606:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	f042 0208 	orr.w	r2, r2, #8
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	3310      	adds	r3, #16
 8000614:	443b      	add	r3, r7
 8000616:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	3301      	adds	r3, #1
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d9ec      	bls.n	8000600 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2304      	movs	r3, #4
 8000630:	214e      	movs	r1, #78	; 0x4e
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <lcd_send_data+0xd8>)
 8000634:	f009 fe12 	bl	800a25c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000b54 	.word	0x20000b54
 8000644:	20000b2a 	.word	0x20000b2a

08000648 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000650:	e006      	b.n	8000660 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff84 	bl	8000568 <lcd_send_data>
	while (*str) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f4      	bne.n	8000652 <lcd_send_string+0xa>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f023 030f 	bic.w	r3, r3, #15
 8000684:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800068c:	7b7b      	ldrb	r3, [r7, #13]
 800068e:	f043 030d 	orr.w	r3, r3, #13
 8000692:	b2db      	uxtb	r3, r3
 8000694:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000696:	7b7b      	ldrb	r3, [r7, #13]
 8000698:	f043 0309 	orr.w	r3, r3, #9
 800069c:	b2db      	uxtb	r3, r3
 800069e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	f043 030d 	orr.w	r3, r3, #13
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80006aa:	7b3b      	ldrb	r3, [r7, #12]
 80006ac:	f043 0309 	orr.w	r3, r3, #9
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006b4:	bf00      	nop
 80006b6:	4825      	ldr	r0, [pc, #148]	; (800074c <lcd_send_char+0xd8>)
 80006b8:	f00a fa3d 	bl	800ab36 <HAL_I2C_GetError>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d0f9      	beq.n	80006b6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006c2:	bf00      	nop
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <lcd_send_char+0xd8>)
 80006c6:	f00a fa29 	bl	800ab1c <HAL_I2C_GetState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b20      	cmp	r3, #32
 80006ce:	d1f9      	bne.n	80006c4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <lcd_send_char+0xdc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d116      	bne.n	8000706 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e00f      	b.n	80006fe <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3310      	adds	r3, #16
 80006e2:	443b      	add	r3, r7
 80006e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f022 0208 	bic.w	r2, r2, #8
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	3310      	adds	r3, #16
 80006f2:	443b      	add	r3, r7
 80006f4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	3301      	adds	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d9ec      	bls.n	80006de <lcd_send_char+0x6a>
 8000704:	e015      	b.n	8000732 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	73bb      	strb	r3, [r7, #14]
 800070a:	e00f      	b.n	800072c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	3310      	adds	r3, #16
 8000710:	443b      	add	r3, r7
 8000712:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	f042 0208 	orr.w	r2, r2, #8
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	3310      	adds	r3, #16
 8000720:	443b      	add	r3, r7
 8000722:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	3301      	adds	r3, #1
 800072a:	73bb      	strb	r3, [r7, #14]
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d9ec      	bls.n	800070c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2304      	movs	r3, #4
 800073c:	214e      	movs	r1, #78	; 0x4e
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <lcd_send_char+0xd8>)
 8000740:	f009 fd8c 	bl	800a25c <HAL_I2C_Master_Transmit>
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000b54 	.word	0x20000b54
 8000750:	20000b2a 	.word	0x20000b2a

08000754 <lcd_init>:

void lcd_init (void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fe95 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f7ff fe92 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000764:	200c      	movs	r0, #12
 8000766:	f7ff fe8f 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	f7ff fe8c 	bl	8000488 <lcd_send_cmd>
	lcd_backlight(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f86d 	bl	8000850 <lcd_backlight>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	460a      	mov	r2, r1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	4613      	mov	r3, r2
 8000788:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d106      	bne.n	800079e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	337f      	adds	r3, #127	; 0x7f
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fe76 	bl	8000488 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800079c:	e008      	b.n	80007b0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d105      	bne.n	80007b0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	3b41      	subs	r3, #65	; 0x41
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe6c 	bl	8000488 <lcd_send_cmd>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	460b      	mov	r3, r1
 80007c6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffd3 	bl	800077a <lcd_gotoxy>
	lcd_send_string(str);
 80007d4:	6838      	ldr	r0, [r7, #0]
 80007d6:	f7ff ff37 	bl	8000648 <lcd_send_string>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	460b      	mov	r3, r1
 80007ee:	71bb      	strb	r3, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80007f4:	79ba      	ldrb	r2, [r7, #6]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffbd 	bl	800077a <lcd_gotoxy>
    lcd_send_char(ch);
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff36 	bl	8000674 <lcd_send_char>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <lcd_clear>:

void lcd_clear(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fe37 	bl	8000488 <lcd_send_cmd>
    HAL_Delay(2);
 800081a:	2002      	movs	r0, #2
 800081c:	f008 fd92 	bl	8009344 <HAL_Delay>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff9d 	bl	800077a <lcd_gotoxy>

    lcd_send_char(' ');
 8000840:	2020      	movs	r0, #32
 8000842:	f7ff ff17 	bl	8000674 <lcd_send_char>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <lcd_backlight+0x20>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fe11 	bl	8000488 <lcd_send_cmd>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000b2a 	.word	0x20000b2a

08000874 <lcd_cursor>:

void lcd_cursor(int state) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d106      	bne.n	8000890 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000882:	200e      	movs	r0, #14
 8000884:	f7ff fe00 	bl	8000488 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000888:	200f      	movs	r0, #15
 800088a:	f7ff fdfd 	bl	8000488 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800088e:	e002      	b.n	8000896 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000890:	200c      	movs	r0, #12
 8000892:	f7ff fdf9 	bl	8000488 <lcd_send_cmd>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008a4:	f3bf 8f4f 	dsb	sy
}
 80008a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008b2:	4904      	ldr	r1, [pc, #16]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_SystemReset+0x28>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ba:	f3bf 8f4f 	dsb	sy
}
 80008be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <__NVIC_SystemReset+0x20>
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	05fa0004 	.word	0x05fa0004

080008cc <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff fca5 	bl	8000224 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	3301      	adds	r3, #1
 80008de:	4618      	mov	r0, r3
 80008e0:	f00c fb2e 	bl	800cf40 <malloc>
 80008e4:	4603      	mov	r3, r0
 80008e6:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <copyText+0x2a>
        strcpy(result, text);
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f00c fc8f 	bl	800d214 <strcpy>
    }
    return result;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 800090a:	20c8      	movs	r0, #200	; 0xc8
 800090c:	f008 fd1a 	bl	8009344 <HAL_Delay>
	lcd_clear();
 8000910:	f7ff ff7e 	bl	8000810 <lcd_clear>
	if(type == 1 && page == 0) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d143      	bne.n	80009a2 <printTemplate+0xa2>
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d140      	bne.n	80009a2 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000920:	4a9d      	ldr	r2, [pc, #628]	; (8000b98 <printTemplate+0x298>)
 8000922:	2101      	movs	r1, #1
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff ff47 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "0");
 800092a:	4a9c      	ldr	r2, [pc, #624]	; (8000b9c <printTemplate+0x29c>)
 800092c:	2103      	movs	r1, #3
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff ff42 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "1");
 8000934:	4a9a      	ldr	r2, [pc, #616]	; (8000ba0 <printTemplate+0x2a0>)
 8000936:	2104      	movs	r1, #4
 8000938:	2002      	movs	r0, #2
 800093a:	f7ff ff3d 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "2");
 800093e:	4a99      	ldr	r2, [pc, #612]	; (8000ba4 <printTemplate+0x2a4>)
 8000940:	2105      	movs	r1, #5
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff ff38 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "3");
 8000948:	4a97      	ldr	r2, [pc, #604]	; (8000ba8 <printTemplate+0x2a8>)
 800094a:	2106      	movs	r1, #6
 800094c:	2002      	movs	r0, #2
 800094e:	f7ff ff33 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "4");
 8000952:	4a96      	ldr	r2, [pc, #600]	; (8000bac <printTemplate+0x2ac>)
 8000954:	2107      	movs	r1, #7
 8000956:	2002      	movs	r0, #2
 8000958:	f7ff ff2e 	bl	80007b8 <lcd_print>
		lcd_print(2, 10, "5");
 800095c:	4a94      	ldr	r2, [pc, #592]	; (8000bb0 <printTemplate+0x2b0>)
 800095e:	210a      	movs	r1, #10
 8000960:	2002      	movs	r0, #2
 8000962:	f7ff ff29 	bl	80007b8 <lcd_print>
		lcd_print(2, 11, "6");
 8000966:	4a93      	ldr	r2, [pc, #588]	; (8000bb4 <printTemplate+0x2b4>)
 8000968:	210b      	movs	r1, #11
 800096a:	2002      	movs	r0, #2
 800096c:	f7ff ff24 	bl	80007b8 <lcd_print>
		lcd_print(2, 12, "7");
 8000970:	4a91      	ldr	r2, [pc, #580]	; (8000bb8 <printTemplate+0x2b8>)
 8000972:	210c      	movs	r1, #12
 8000974:	2002      	movs	r0, #2
 8000976:	f7ff ff1f 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "8");
 800097a:	4a90      	ldr	r2, [pc, #576]	; (8000bbc <printTemplate+0x2bc>)
 800097c:	210d      	movs	r1, #13
 800097e:	2002      	movs	r0, #2
 8000980:	f7ff ff1a 	bl	80007b8 <lcd_print>
		lcd_print(2, 14, "9");
 8000984:	4a8e      	ldr	r2, [pc, #568]	; (8000bc0 <printTemplate+0x2c0>)
 8000986:	210e      	movs	r1, #14
 8000988:	2002      	movs	r0, #2
 800098a:	f7ff ff15 	bl	80007b8 <lcd_print>
		lcd_print(1, 5, machineID);
 800098e:	4a8d      	ldr	r2, [pc, #564]	; (8000bc4 <printTemplate+0x2c4>)
 8000990:	2105      	movs	r1, #5
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff ff10 	bl	80007b8 <lcd_print>
		lcd_gotoxy(2, 3);
 8000998:	2103      	movs	r1, #3
 800099a:	2002      	movs	r0, #2
 800099c:	f7ff feed 	bl	800077a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 80009a0:	e0f5      	b.n	8000b8e <printTemplate+0x28e>
	} else if(type == 2) {
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d178      	bne.n	8000a9a <printTemplate+0x19a>
		if(page == 1) {
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d114      	bne.n	80009d8 <printTemplate+0xd8>
			lcd_clear();
 80009ae:	f7ff ff2f 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80009b2:	2064      	movs	r0, #100	; 0x64
 80009b4:	f008 fcc6 	bl	8009344 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80009b8:	4a83      	ldr	r2, [pc, #524]	; (8000bc8 <printTemplate+0x2c8>)
 80009ba:	2101      	movs	r1, #1
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff fefb 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80009c2:	4a82      	ldr	r2, [pc, #520]	; (8000bcc <printTemplate+0x2cc>)
 80009c4:	2107      	movs	r1, #7
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff fef6 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80009cc:	4a80      	ldr	r2, [pc, #512]	; (8000bd0 <printTemplate+0x2d0>)
 80009ce:	2101      	movs	r1, #1
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff fef1 	bl	80007b8 <lcd_print>
}
 80009d6:	e0da      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 2) {
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d114      	bne.n	8000a08 <printTemplate+0x108>
			lcd_clear();
 80009de:	f7ff ff17 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80009e2:	2064      	movs	r0, #100	; 0x64
 80009e4:	f008 fcae 	bl	8009344 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80009e8:	4a77      	ldr	r2, [pc, #476]	; (8000bc8 <printTemplate+0x2c8>)
 80009ea:	2101      	movs	r1, #1
 80009ec:	2001      	movs	r0, #1
 80009ee:	f7ff fee3 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80009f2:	4a76      	ldr	r2, [pc, #472]	; (8000bcc <printTemplate+0x2cc>)
 80009f4:	2107      	movs	r1, #7
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff fede 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80009fc:	4a75      	ldr	r2, [pc, #468]	; (8000bd4 <printTemplate+0x2d4>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	2002      	movs	r0, #2
 8000a02:	f7ff fed9 	bl	80007b8 <lcd_print>
}
 8000a06:	e0c2      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 3) {
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d114      	bne.n	8000a38 <printTemplate+0x138>
			lcd_clear();
 8000a0e:	f7ff feff 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a12:	2064      	movs	r0, #100	; 0x64
 8000a14:	f008 fc96 	bl	8009344 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a18:	4a6b      	ldr	r2, [pc, #428]	; (8000bc8 <printTemplate+0x2c8>)
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff fecb 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000a22:	4a6a      	ldr	r2, [pc, #424]	; (8000bcc <printTemplate+0x2cc>)
 8000a24:	2107      	movs	r1, #7
 8000a26:	2001      	movs	r0, #1
 8000a28:	f7ff fec6 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000a2c:	4a6a      	ldr	r2, [pc, #424]	; (8000bd8 <printTemplate+0x2d8>)
 8000a2e:	2101      	movs	r1, #1
 8000a30:	2002      	movs	r0, #2
 8000a32:	f7ff fec1 	bl	80007b8 <lcd_print>
}
 8000a36:	e0aa      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 4) {
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	d114      	bne.n	8000a68 <printTemplate+0x168>
			lcd_clear();
 8000a3e:	f7ff fee7 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a42:	2064      	movs	r0, #100	; 0x64
 8000a44:	f008 fc7e 	bl	8009344 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a48:	4a5f      	ldr	r2, [pc, #380]	; (8000bc8 <printTemplate+0x2c8>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff feb3 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000a52:	4a5e      	ldr	r2, [pc, #376]	; (8000bcc <printTemplate+0x2cc>)
 8000a54:	2107      	movs	r1, #7
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff feae 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000a5c:	4a5f      	ldr	r2, [pc, #380]	; (8000bdc <printTemplate+0x2dc>)
 8000a5e:	2101      	movs	r1, #1
 8000a60:	2002      	movs	r0, #2
 8000a62:	f7ff fea9 	bl	80007b8 <lcd_print>
}
 8000a66:	e092      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 5) {
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	2b05      	cmp	r3, #5
 8000a6c:	f040 808f 	bne.w	8000b8e <printTemplate+0x28e>
			lcd_clear();
 8000a70:	f7ff fece 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a74:	2064      	movs	r0, #100	; 0x64
 8000a76:	f008 fc65 	bl	8009344 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a7a:	4a53      	ldr	r2, [pc, #332]	; (8000bc8 <printTemplate+0x2c8>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f7ff fe9a 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000a84:	4a51      	ldr	r2, [pc, #324]	; (8000bcc <printTemplate+0x2cc>)
 8000a86:	2107      	movs	r1, #7
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fe95 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000a8e:	4a54      	ldr	r2, [pc, #336]	; (8000be0 <printTemplate+0x2e0>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	2002      	movs	r0, #2
 8000a94:	f7ff fe90 	bl	80007b8 <lcd_print>
}
 8000a98:	e079      	b.n	8000b8e <printTemplate+0x28e>
	} else if(type == 3) {
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	d176      	bne.n	8000b8e <printTemplate+0x28e>
		if(page == 1) {
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d114      	bne.n	8000ad0 <printTemplate+0x1d0>
			lcd_clear();
 8000aa6:	f7ff feb3 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000aaa:	2064      	movs	r0, #100	; 0x64
 8000aac:	f008 fc4a 	bl	8009344 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ab0:	4a4c      	ldr	r2, [pc, #304]	; (8000be4 <printTemplate+0x2e4>)
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff fe7f 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000aba:	4a4b      	ldr	r2, [pc, #300]	; (8000be8 <printTemplate+0x2e8>)
 8000abc:	2107      	movs	r1, #7
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff fe7a 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000ac4:	4a42      	ldr	r2, [pc, #264]	; (8000bd0 <printTemplate+0x2d0>)
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	2002      	movs	r0, #2
 8000aca:	f7ff fe75 	bl	80007b8 <lcd_print>
}
 8000ace:	e05e      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 2) {
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d114      	bne.n	8000b00 <printTemplate+0x200>
			lcd_clear();
 8000ad6:	f7ff fe9b 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000ada:	2064      	movs	r0, #100	; 0x64
 8000adc:	f008 fc32 	bl	8009344 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ae0:	4a40      	ldr	r2, [pc, #256]	; (8000be4 <printTemplate+0x2e4>)
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fe67 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000aea:	4a3f      	ldr	r2, [pc, #252]	; (8000be8 <printTemplate+0x2e8>)
 8000aec:	2107      	movs	r1, #7
 8000aee:	2001      	movs	r0, #1
 8000af0:	f7ff fe62 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000af4:	4a37      	ldr	r2, [pc, #220]	; (8000bd4 <printTemplate+0x2d4>)
 8000af6:	2101      	movs	r1, #1
 8000af8:	2002      	movs	r0, #2
 8000afa:	f7ff fe5d 	bl	80007b8 <lcd_print>
}
 8000afe:	e046      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 3) {
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	d114      	bne.n	8000b30 <printTemplate+0x230>
			lcd_clear();
 8000b06:	f7ff fe83 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b0a:	2064      	movs	r0, #100	; 0x64
 8000b0c:	f008 fc1a 	bl	8009344 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b10:	4a34      	ldr	r2, [pc, #208]	; (8000be4 <printTemplate+0x2e4>)
 8000b12:	2101      	movs	r1, #1
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff fe4f 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000b1a:	4a33      	ldr	r2, [pc, #204]	; (8000be8 <printTemplate+0x2e8>)
 8000b1c:	2107      	movs	r1, #7
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff fe4a 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000b24:	4a2c      	ldr	r2, [pc, #176]	; (8000bd8 <printTemplate+0x2d8>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f7ff fe45 	bl	80007b8 <lcd_print>
}
 8000b2e:	e02e      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 4) {
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d114      	bne.n	8000b60 <printTemplate+0x260>
			lcd_clear();
 8000b36:	f7ff fe6b 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b3a:	2064      	movs	r0, #100	; 0x64
 8000b3c:	f008 fc02 	bl	8009344 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b40:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <printTemplate+0x2e4>)
 8000b42:	2101      	movs	r1, #1
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff fe37 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000b4a:	4a27      	ldr	r2, [pc, #156]	; (8000be8 <printTemplate+0x2e8>)
 8000b4c:	2107      	movs	r1, #7
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f7ff fe32 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000b54:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <printTemplate+0x2dc>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f7ff fe2d 	bl	80007b8 <lcd_print>
}
 8000b5e:	e016      	b.n	8000b8e <printTemplate+0x28e>
		} else if(page == 5) {
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	2b05      	cmp	r3, #5
 8000b64:	d113      	bne.n	8000b8e <printTemplate+0x28e>
			lcd_clear();
 8000b66:	f7ff fe53 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b6a:	2064      	movs	r0, #100	; 0x64
 8000b6c:	f008 fbea 	bl	8009344 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b70:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <printTemplate+0x2e4>)
 8000b72:	2101      	movs	r1, #1
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff fe1f 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000b7a:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <printTemplate+0x2e8>)
 8000b7c:	2107      	movs	r1, #7
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fe1a 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000b84:	4a16      	ldr	r2, [pc, #88]	; (8000be0 <printTemplate+0x2e0>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fe15 	bl	80007b8 <lcd_print>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	0800daf8 	.word	0x0800daf8
 8000b9c:	0800db00 	.word	0x0800db00
 8000ba0:	0800db04 	.word	0x0800db04
 8000ba4:	0800db08 	.word	0x0800db08
 8000ba8:	0800db0c 	.word	0x0800db0c
 8000bac:	0800db10 	.word	0x0800db10
 8000bb0:	0800db14 	.word	0x0800db14
 8000bb4:	0800db18 	.word	0x0800db18
 8000bb8:	0800db1c 	.word	0x0800db1c
 8000bbc:	0800db20 	.word	0x0800db20
 8000bc0:	0800db24 	.word	0x0800db24
 8000bc4:	20000cd0 	.word	0x20000cd0
 8000bc8:	0800db28 	.word	0x0800db28
 8000bcc:	20000cdc 	.word	0x20000cdc
 8000bd0:	0800db30 	.word	0x0800db30
 8000bd4:	0800db44 	.word	0x0800db44
 8000bd8:	0800db58 	.word	0x0800db58
 8000bdc:	0800db6c 	.word	0x0800db6c
 8000be0:	0800db80 	.word	0x0800db80
 8000be4:	0800db94 	.word	0x0800db94
 8000be8:	20000cf0 	.word	0x20000cf0

08000bec <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <getCharFromCursorPosition+0x1c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	781b      	ldrb	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000960 	.word	0x20000960

08000c0c <readValFromEEPROM>:
		memset(&eepromData[passStartPos], 0, 20);
		strncpy((char *)&eepromData[passStartPos], wifiPass, 20);
	}
}

void readValFromEEPROM(int state) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d121      	bne.n	8000c5e <readValFromEEPROM+0x52>
		//Wifi SSID okuma
		uint8_t tempSSIDStartPos = ssidStartPos;
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <readValFromEEPROM+0x9c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<20; i++) {
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	e017      	b.n	8000c56 <readValFromEEPROM+0x4a>
			if(eepromData[tempSSIDStartPos] != '\0') {
 8000c26:	7dfb      	ldrb	r3, [r7, #23]
 8000c28:	4a20      	ldr	r2, [pc, #128]	; (8000cac <readValFromEEPROM+0xa0>)
 8000c2a:	5cd3      	ldrb	r3, [r2, r3]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00f      	beq.n	8000c50 <readValFromEEPROM+0x44>
				wifiSSID[i] = getCharFromCursorPosition(eepromData[tempSSIDStartPos]);
 8000c30:	7dfb      	ldrb	r3, [r7, #23]
 8000c32:	4a1e      	ldr	r2, [pc, #120]	; (8000cac <readValFromEEPROM+0xa0>)
 8000c34:	5cd3      	ldrb	r3, [r2, r3]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ffd8 	bl	8000bec <getCharFromCursorPosition>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <readValFromEEPROM+0xa4>)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	4413      	add	r3, r2
 8000c46:	460a      	mov	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]

				tempSSIDStartPos++;
 8000c4a:	7dfb      	ldrb	r3, [r7, #23]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<20; i++) {
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	3301      	adds	r3, #1
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	2b13      	cmp	r3, #19
 8000c5a:	dde4      	ble.n	8000c26 <readValFromEEPROM+0x1a>
				wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
				tempPassStartPos++;
			}
		}
	}
}
 8000c5c:	e020      	b.n	8000ca0 <readValFromEEPROM+0x94>
		uint8_t tempPassStartPos = passStartPos;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <readValFromEEPROM+0xa8>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<20; i++) {
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	e017      	b.n	8000c9a <readValFromEEPROM+0x8e>
			if(eepromData[tempPassStartPos] != '\0') {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <readValFromEEPROM+0xa0>)
 8000c6e:	5cd3      	ldrb	r3, [r2, r3]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00f      	beq.n	8000c94 <readValFromEEPROM+0x88>
				wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <readValFromEEPROM+0xa0>)
 8000c78:	5cd3      	ldrb	r3, [r2, r3]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ffb6 	bl	8000bec <getCharFromCursorPosition>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4619      	mov	r1, r3
 8000c84:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <readValFromEEPROM+0xac>)
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	4413      	add	r3, r2
 8000c8a:	460a      	mov	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
				tempPassStartPos++;
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	3301      	adds	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<20; i++) {
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b13      	cmp	r3, #19
 8000c9e:	dde4      	ble.n	8000c6a <readValFromEEPROM+0x5e>
}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200009b2 	.word	0x200009b2
 8000cac:	20000c38 	.word	0x20000c38
 8000cb0:	20000cdc 	.word	0x20000cdc
 8000cb4:	200009b3 	.word	0x200009b3
 8000cb8:	20000cf0 	.word	0x20000cf0

08000cbc <takeMachineID>:

void takeMachineID(int state) {
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b08b      	sub	sp, #44	; 0x2c
 8000cc0:	af04      	add	r7, sp, #16
 8000cc2:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff fdd5 	bl	8000874 <lcd_cursor>

    int cursorPosition = 3;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d104      	bne.n	8000ce6 <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 8000cdc:	220c      	movs	r2, #12
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4899      	ldr	r0, [pc, #612]	; (8000f48 <takeMachineID+0x28c>)
 8000ce2:	f00c fa43 	bl	800d16c <memset>
    }
    HAL_Delay(100);
 8000ce6:	2064      	movs	r0, #100	; 0x64
 8000ce8:	f008 fb2c 	bl	8009344 <HAL_Delay>

    printTemplate(1, 0);
 8000cec:	2100      	movs	r1, #0
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f7ff fe06 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	4895      	ldr	r0, [pc, #596]	; (8000f4c <takeMachineID+0x290>)
 8000cf8:	f009 f8f4 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d138      	bne.n	8000d74 <takeMachineID+0xb8>
        	lcd_cursor(0);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fdb6 	bl	8000874 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8000d08:	4b8f      	ldr	r3, [pc, #572]	; (8000f48 <takeMachineID+0x28c>)
 8000d0a:	7adb      	ldrb	r3, [r3, #11]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d110      	bne.n	8000d32 <takeMachineID+0x76>
        		lcd_clear();
 8000d10:	f7ff fd7e 	bl	8000810 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8000d14:	4a8e      	ldr	r2, [pc, #568]	; (8000f50 <takeMachineID+0x294>)
 8000d16:	2101      	movs	r1, #1
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f7ff fd4d 	bl	80007b8 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8000d1e:	4a8d      	ldr	r2, [pc, #564]	; (8000f54 <takeMachineID+0x298>)
 8000d20:	2101      	movs	r1, #1
 8000d22:	2002      	movs	r0, #2
 8000d24:	f7ff fd48 	bl	80007b8 <lcd_print>
        		HAL_Delay(1200);
 8000d28:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000d2c:	f008 fb0a 	bl	8009344 <HAL_Delay>
        		goto mainSection;
 8000d30:	e7c8      	b.n	8000cc4 <takeMachineID+0x8>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8000d32:	4b89      	ldr	r3, [pc, #548]	; (8000f58 <takeMachineID+0x29c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b88      	ldr	r3, [pc, #544]	; (8000f5c <takeMachineID+0x2a0>)
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a82      	ldr	r2, [pc, #520]	; (8000f48 <takeMachineID+0x28c>)
 8000d3e:	461c      	mov	r4, r3
 8000d40:	4613      	mov	r3, r2
 8000d42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d44:	6020      	str	r0, [r4, #0]
 8000d46:	6061      	str	r1, [r4, #4]
 8000d48:	60a2      	str	r2, [r4, #8]
        	HAL_Delay(200);
 8000d4a:	20c8      	movs	r0, #200	; 0xc8
 8000d4c:	f008 fafa 	bl	8009344 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000d50:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000d54:	9302      	str	r3, [sp, #8]
 8000d56:	236e      	movs	r3, #110	; 0x6e
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	4b80      	ldr	r3, [pc, #512]	; (8000f5c <takeMachineID+0x2a0>)
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	236e      	movs	r3, #110	; 0x6e
 8000d60:	2200      	movs	r2, #0
 8000d62:	21a0      	movs	r1, #160	; 0xa0
 8000d64:	487e      	ldr	r0, [pc, #504]	; (8000f60 <takeMachineID+0x2a4>)
 8000d66:	f009 fb77 	bl	800a458 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8000d6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d6e:	f008 fae9 	bl	8009344 <HAL_Delay>

            break;
 8000d72:	e0e5      	b.n	8000f40 <takeMachineID+0x284>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000d74:	2101      	movs	r1, #1
 8000d76:	4875      	ldr	r0, [pc, #468]	; (8000f4c <takeMachineID+0x290>)
 8000d78:	f009 f8b4 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d112      	bne.n	8000da8 <takeMachineID+0xec>
        	if(cursorPosition == 7) {
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	2b07      	cmp	r3, #7
 8000d86:	d102      	bne.n	8000d8e <takeMachineID+0xd2>
        		cursorPosition = 10;
 8000d88:	230a      	movs	r3, #10
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	e008      	b.n	8000da0 <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2b0e      	cmp	r3, #14
 8000d92:	d102      	bne.n	8000d9a <takeMachineID+0xde>
                cursorPosition = 3;
 8000d94:	2303      	movs	r3, #3
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e002      	b.n	8000da0 <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000da0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000da4:	f008 face 	bl	8009344 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000da8:	2108      	movs	r1, #8
 8000daa:	486e      	ldr	r0, [pc, #440]	; (8000f64 <takeMachineID+0x2a8>)
 8000dac:	f009 f89a 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d112      	bne.n	8000ddc <takeMachineID+0x120>
            if (cursorPosition == 3) {
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d102      	bne.n	8000dc2 <takeMachineID+0x106>
                cursorPosition = 14;
 8000dbc:	230e      	movs	r3, #14
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e008      	b.n	8000dd4 <takeMachineID+0x118>
            } else if(cursorPosition == 10) {
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2b0a      	cmp	r3, #10
 8000dc6:	d102      	bne.n	8000dce <takeMachineID+0x112>
            	cursorPosition = 7;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	e002      	b.n	8000dd4 <takeMachineID+0x118>
            } else {
            	cursorPosition--;
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000dd4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000dd8:	f008 fab4 	bl	8009344 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000ddc:	2102      	movs	r1, #2
 8000dde:	485b      	ldr	r0, [pc, #364]	; (8000f4c <takeMachineID+0x290>)
 8000de0:	f009 f880 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d16c      	bne.n	8000ec4 <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d105      	bne.n	8000dfc <takeMachineID+0x140>
        		machineID[machineIDLoc] = '0';
 8000df0:	4a55      	ldr	r2, [pc, #340]	; (8000f48 <takeMachineID+0x28c>)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4413      	add	r3, r2
 8000df6:	2230      	movs	r2, #48	; 0x30
 8000df8:	701a      	strb	r2, [r3, #0]
 8000dfa:	e04f      	b.n	8000e9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 4) {
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d105      	bne.n	8000e0e <takeMachineID+0x152>
        		machineID[machineIDLoc] = '1';
 8000e02:	4a51      	ldr	r2, [pc, #324]	; (8000f48 <takeMachineID+0x28c>)
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4413      	add	r3, r2
 8000e08:	2231      	movs	r2, #49	; 0x31
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	e046      	b.n	8000e9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 5) {
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2b05      	cmp	r3, #5
 8000e12:	d105      	bne.n	8000e20 <takeMachineID+0x164>
        		machineID[machineIDLoc] = '2';
 8000e14:	4a4c      	ldr	r2, [pc, #304]	; (8000f48 <takeMachineID+0x28c>)
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4413      	add	r3, r2
 8000e1a:	2232      	movs	r2, #50	; 0x32
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e03d      	b.n	8000e9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 6) {
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d105      	bne.n	8000e32 <takeMachineID+0x176>
        		machineID[machineIDLoc] = '3';
 8000e26:	4a48      	ldr	r2, [pc, #288]	; (8000f48 <takeMachineID+0x28c>)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	2233      	movs	r2, #51	; 0x33
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e034      	b.n	8000e9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 7) {
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2b07      	cmp	r3, #7
 8000e36:	d105      	bne.n	8000e44 <takeMachineID+0x188>
        		machineID[machineIDLoc] = '4';
 8000e38:	4a43      	ldr	r2, [pc, #268]	; (8000f48 <takeMachineID+0x28c>)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	2234      	movs	r2, #52	; 0x34
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e02b      	b.n	8000e9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 10) {
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	2b0a      	cmp	r3, #10
 8000e48:	d105      	bne.n	8000e56 <takeMachineID+0x19a>
        		machineID[machineIDLoc] = '5';
 8000e4a:	4a3f      	ldr	r2, [pc, #252]	; (8000f48 <takeMachineID+0x28c>)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4413      	add	r3, r2
 8000e50:	2235      	movs	r2, #53	; 0x35
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e022      	b.n	8000e9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 11) {
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2b0b      	cmp	r3, #11
 8000e5a:	d105      	bne.n	8000e68 <takeMachineID+0x1ac>
        		machineID[machineIDLoc] = '6';
 8000e5c:	4a3a      	ldr	r2, [pc, #232]	; (8000f48 <takeMachineID+0x28c>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4413      	add	r3, r2
 8000e62:	2236      	movs	r2, #54	; 0x36
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	e019      	b.n	8000e9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 12) {
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2b0c      	cmp	r3, #12
 8000e6c:	d105      	bne.n	8000e7a <takeMachineID+0x1be>
        		machineID[machineIDLoc] = '7';
 8000e6e:	4a36      	ldr	r2, [pc, #216]	; (8000f48 <takeMachineID+0x28c>)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4413      	add	r3, r2
 8000e74:	2237      	movs	r2, #55	; 0x37
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	e010      	b.n	8000e9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 13) {
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2b0d      	cmp	r3, #13
 8000e7e:	d105      	bne.n	8000e8c <takeMachineID+0x1d0>
        		machineID[machineIDLoc] = '8';
 8000e80:	4a31      	ldr	r2, [pc, #196]	; (8000f48 <takeMachineID+0x28c>)
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4413      	add	r3, r2
 8000e86:	2238      	movs	r2, #56	; 0x38
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	e007      	b.n	8000e9c <takeMachineID+0x1e0>
        	} else if(cursorPosition == 14) {
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b0e      	cmp	r3, #14
 8000e90:	d104      	bne.n	8000e9c <takeMachineID+0x1e0>
        		machineID[machineIDLoc] = '9';
 8000e92:	4a2d      	ldr	r2, [pc, #180]	; (8000f48 <takeMachineID+0x28c>)
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4413      	add	r3, r2
 8000e98:	2239      	movs	r2, #57	; 0x39
 8000e9a:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	b2d9      	uxtb	r1, r3
 8000ea0:	4a29      	ldr	r2, [pc, #164]	; (8000f48 <takeMachineID+0x28c>)
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fc99 	bl	80007e2 <lcd_print_char>

        	writeLoc++;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000ebc:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000ec0:	f008 fa40 	bl	8009344 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	4821      	ldr	r0, [pc, #132]	; (8000f4c <takeMachineID+0x290>)
 8000ec8:	f009 f80c 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d12f      	bne.n	8000f32 <takeMachineID+0x276>
            if(strlen(machineID) >= 1) {
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <takeMachineID+0x28c>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d027      	beq.n	8000f2a <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8000eda:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <takeMachineID+0x28c>)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4413      	add	r3, r2
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	3304      	adds	r3, #4
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4619      	mov	r1, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f7ff fc98 	bl	8000824 <lcd_delete_char>
                HAL_Delay(50);
 8000ef4:	2032      	movs	r0, #50	; 0x32
 8000ef6:	f008 fa25 	bl	8009344 <HAL_Delay>

                if(writeLoc > 5) {
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b05      	cmp	r3, #5
 8000efe:	dd03      	ble.n	8000f08 <takeMachineID+0x24c>
                	writeLoc--;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	e004      	b.n	8000f12 <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	dc01      	bgt.n	8000f12 <takeMachineID+0x256>
                	writeLoc = 5;
 8000f0e:	2305      	movs	r3, #5
 8000f10:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dd03      	ble.n	8000f20 <takeMachineID+0x264>
                	machineIDLoc--;
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	e004      	b.n	8000f2a <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	da01      	bge.n	8000f2a <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000f2a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000f2e:	f008 fa09 	bl	8009344 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f7ff fc1e 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000f3e:	e6d9      	b.n	8000cf4 <takeMachineID+0x38>
    }
}
 8000f40:	bf00      	nop
 8000f42:	371c      	adds	r7, #28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd90      	pop	{r4, r7, pc}
 8000f48:	20000cd0 	.word	0x20000cd0
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	0800db9c 	.word	0x0800db9c
 8000f54:	0800dbb0 	.word	0x0800dbb0
 8000f58:	200009b1 	.word	0x200009b1
 8000f5c:	20000c38 	.word	0x20000c38
 8000f60:	20000b54 	.word	0x20000b54
 8000f64:	40011000 	.word	0x40011000

08000f68 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af04      	add	r7, sp, #16
 8000f6e:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fc7f 	bl	8000874 <lcd_cursor>

    if(state == 0) {
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d104      	bne.n	8000f86 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000f7c:	2214      	movs	r2, #20
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4892      	ldr	r0, [pc, #584]	; (80011cc <takeWifiSSID+0x264>)
 8000f82:	f00c f8f3 	bl	800d16c <memset>
    }

    int realCharPos = 1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000f8a:	4b91      	ldr	r3, [pc, #580]	; (80011d0 <takeWifiSSID+0x268>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
    page = 1;
 8000f90:	4b90      	ldr	r3, [pc, #576]	; (80011d4 <takeWifiSSID+0x26c>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	60fb      	str	r3, [r7, #12]

    uint8_t characterSavePos = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	72fb      	strb	r3, [r7, #11]

    printTemplate(2, 1);
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f7ff fcab 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000faa:	2108      	movs	r1, #8
 8000fac:	488a      	ldr	r0, [pc, #552]	; (80011d8 <takeWifiSSID+0x270>)
 8000fae:	f008 ff99 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d13d      	bne.n	8001034 <takeWifiSSID+0xcc>
            lcd_cursor(0);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff fc5b 	bl	8000874 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8000fbe:	4883      	ldr	r0, [pc, #524]	; (80011cc <takeWifiSSID+0x264>)
 8000fc0:	f7ff f930 	bl	8000224 <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b14      	cmp	r3, #20
 8000fc8:	d910      	bls.n	8000fec <takeWifiSSID+0x84>
                lcd_clear();
 8000fca:	f7ff fc21 	bl	8000810 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8000fce:	4a83      	ldr	r2, [pc, #524]	; (80011dc <takeWifiSSID+0x274>)
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff fbf0 	bl	80007b8 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8000fd8:	4a81      	ldr	r2, [pc, #516]	; (80011e0 <takeWifiSSID+0x278>)
 8000fda:	2101      	movs	r1, #1
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f7ff fbeb 	bl	80007b8 <lcd_print>
                HAL_Delay(1200);
 8000fe2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000fe6:	f008 f9ad 	bl	8009344 <HAL_Delay>
                goto mainSSIDSection;
 8000fea:	e7c1      	b.n	8000f70 <takeWifiSSID+0x8>
            }

            memcpy(&eepromData[ssidStartPos], wifiSSIDLoc, 20);
 8000fec:	4b7d      	ldr	r3, [pc, #500]	; (80011e4 <takeWifiSSID+0x27c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b7d      	ldr	r3, [pc, #500]	; (80011e8 <takeWifiSSID+0x280>)
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a7d      	ldr	r2, [pc, #500]	; (80011ec <takeWifiSSID+0x284>)
 8000ff8:	461d      	mov	r5, r3
 8000ffa:	4614      	mov	r4, r2
 8000ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffe:	6028      	str	r0, [r5, #0]
 8001000:	6069      	str	r1, [r5, #4]
 8001002:	60aa      	str	r2, [r5, #8]
 8001004:	60eb      	str	r3, [r5, #12]
 8001006:	6820      	ldr	r0, [r4, #0]
 8001008:	6128      	str	r0, [r5, #16]
            HAL_Delay(250);
 800100a:	20fa      	movs	r0, #250	; 0xfa
 800100c:	f008 f99a 	bl	8009344 <HAL_Delay>
            //memcpy(&eepromData[ssidStartPos], (uint8_t *)wifiSSID, strlen(wifiSSID));

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8001010:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	236e      	movs	r3, #110	; 0x6e
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	4b73      	ldr	r3, [pc, #460]	; (80011e8 <takeWifiSSID+0x280>)
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	236e      	movs	r3, #110	; 0x6e
 8001020:	2200      	movs	r2, #0
 8001022:	21a0      	movs	r1, #160	; 0xa0
 8001024:	4872      	ldr	r0, [pc, #456]	; (80011f0 <takeWifiSSID+0x288>)
 8001026:	f009 fa17 	bl	800a458 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 800102a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800102e:	f008 f989 	bl	8009344 <HAL_Delay>

            break;
 8001032:	e157      	b.n	80012e4 <takeWifiSSID+0x37c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001034:	2101      	movs	r1, #1
 8001036:	4868      	ldr	r0, [pc, #416]	; (80011d8 <takeWifiSSID+0x270>)
 8001038:	f008 ff54 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b01      	cmp	r3, #1
 8001040:	d166      	bne.n	8001110 <takeWifiSSID+0x1a8>
        	realCharPos++;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	2b50      	cmp	r3, #80	; 0x50
 800104c:	dd01      	ble.n	8001052 <takeWifiSSID+0xea>
        		realCharPos = 1;
 800104e:	2301      	movs	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8001052:	4b5f      	ldr	r3, [pc, #380]	; (80011d0 <takeWifiSSID+0x268>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b10      	cmp	r3, #16
 8001058:	d152      	bne.n	8001100 <takeWifiSSID+0x198>
            	if(page == 1) {
 800105a:	4b5e      	ldr	r3, [pc, #376]	; (80011d4 <takeWifiSSID+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d10c      	bne.n	800107c <takeWifiSSID+0x114>
            		cursorPosition = 1;
 8001062:	4b5b      	ldr	r3, [pc, #364]	; (80011d0 <takeWifiSSID+0x268>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
            		page++;
 8001068:	4b5a      	ldr	r3, [pc, #360]	; (80011d4 <takeWifiSSID+0x26c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a59      	ldr	r2, [pc, #356]	; (80011d4 <takeWifiSSID+0x26c>)
 8001070:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8001072:	2102      	movs	r1, #2
 8001074:	2002      	movs	r0, #2
 8001076:	f7ff fc43 	bl	8000900 <printTemplate>
 800107a:	e046      	b.n	800110a <takeWifiSSID+0x1a2>
            	} else if(page == 2) {
 800107c:	4b55      	ldr	r3, [pc, #340]	; (80011d4 <takeWifiSSID+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d10c      	bne.n	800109e <takeWifiSSID+0x136>
            		cursorPosition = 1;
 8001084:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <takeWifiSSID+0x268>)
 8001086:	2201      	movs	r2, #1
 8001088:	601a      	str	r2, [r3, #0]
            		page++;
 800108a:	4b52      	ldr	r3, [pc, #328]	; (80011d4 <takeWifiSSID+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a50      	ldr	r2, [pc, #320]	; (80011d4 <takeWifiSSID+0x26c>)
 8001092:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8001094:	2103      	movs	r1, #3
 8001096:	2002      	movs	r0, #2
 8001098:	f7ff fc32 	bl	8000900 <printTemplate>
 800109c:	e035      	b.n	800110a <takeWifiSSID+0x1a2>
            	} else if(page == 3) {
 800109e:	4b4d      	ldr	r3, [pc, #308]	; (80011d4 <takeWifiSSID+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d10c      	bne.n	80010c0 <takeWifiSSID+0x158>
            		cursorPosition = 1;
 80010a6:	4b4a      	ldr	r3, [pc, #296]	; (80011d0 <takeWifiSSID+0x268>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
            		page++;
 80010ac:	4b49      	ldr	r3, [pc, #292]	; (80011d4 <takeWifiSSID+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	4a48      	ldr	r2, [pc, #288]	; (80011d4 <takeWifiSSID+0x26c>)
 80010b4:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 80010b6:	2104      	movs	r1, #4
 80010b8:	2002      	movs	r0, #2
 80010ba:	f7ff fc21 	bl	8000900 <printTemplate>
 80010be:	e024      	b.n	800110a <takeWifiSSID+0x1a2>
            	} else if(page == 4) {
 80010c0:	4b44      	ldr	r3, [pc, #272]	; (80011d4 <takeWifiSSID+0x26c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d10c      	bne.n	80010e2 <takeWifiSSID+0x17a>
            		cursorPosition = 1;
 80010c8:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <takeWifiSSID+0x268>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
            		page++;
 80010ce:	4b41      	ldr	r3, [pc, #260]	; (80011d4 <takeWifiSSID+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	4a3f      	ldr	r2, [pc, #252]	; (80011d4 <takeWifiSSID+0x26c>)
 80010d6:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 80010d8:	2105      	movs	r1, #5
 80010da:	2002      	movs	r0, #2
 80010dc:	f7ff fc10 	bl	8000900 <printTemplate>
 80010e0:	e013      	b.n	800110a <takeWifiSSID+0x1a2>
            	} else if(page == 5) {
 80010e2:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <takeWifiSSID+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b05      	cmp	r3, #5
 80010e8:	d10f      	bne.n	800110a <takeWifiSSID+0x1a2>
            		cursorPosition = 1;
 80010ea:	4b39      	ldr	r3, [pc, #228]	; (80011d0 <takeWifiSSID+0x268>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
            		page = 1;
 80010f0:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <takeWifiSSID+0x26c>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80010f6:	2101      	movs	r1, #1
 80010f8:	2002      	movs	r0, #2
 80010fa:	f7ff fc01 	bl	8000900 <printTemplate>
 80010fe:	e004      	b.n	800110a <takeWifiSSID+0x1a2>
            	}
            } else {
            	cursorPosition++;
 8001100:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <takeWifiSSID+0x268>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	4a32      	ldr	r2, [pc, #200]	; (80011d0 <takeWifiSSID+0x268>)
 8001108:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800110a:	20fa      	movs	r0, #250	; 0xfa
 800110c:	f008 f91a 	bl	8009344 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001110:	2108      	movs	r1, #8
 8001112:	4838      	ldr	r0, [pc, #224]	; (80011f4 <takeWifiSSID+0x28c>)
 8001114:	f008 fee6 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	2b01      	cmp	r3, #1
 800111c:	d174      	bne.n	8001208 <takeWifiSSID+0x2a0>
        	realCharPos--;
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3b01      	subs	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	2b00      	cmp	r3, #0
 8001128:	dc01      	bgt.n	800112e <takeWifiSSID+0x1c6>
        		realCharPos = 80;
 800112a:	2350      	movs	r3, #80	; 0x50
 800112c:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <takeWifiSSID+0x268>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d160      	bne.n	80011f8 <takeWifiSSID+0x290>
            	if(page == 1) {
 8001136:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <takeWifiSSID+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d10a      	bne.n	8001154 <takeWifiSSID+0x1ec>
            		cursorPosition = 16;
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <takeWifiSSID+0x268>)
 8001140:	2210      	movs	r2, #16
 8001142:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <takeWifiSSID+0x26c>)
 8001146:	2205      	movs	r2, #5
 8001148:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 800114a:	2105      	movs	r1, #5
 800114c:	2002      	movs	r0, #2
 800114e:	f7ff fbd7 	bl	8000900 <printTemplate>
 8001152:	e056      	b.n	8001202 <takeWifiSSID+0x29a>
            	} else if(page == 2) {
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <takeWifiSSID+0x26c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d10a      	bne.n	8001172 <takeWifiSSID+0x20a>
            		cursorPosition = 16;
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <takeWifiSSID+0x268>)
 800115e:	2210      	movs	r2, #16
 8001160:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <takeWifiSSID+0x26c>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8001168:	2101      	movs	r1, #1
 800116a:	2002      	movs	r0, #2
 800116c:	f7ff fbc8 	bl	8000900 <printTemplate>
 8001170:	e047      	b.n	8001202 <takeWifiSSID+0x29a>
            	} else if(page == 3) {
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <takeWifiSSID+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d10a      	bne.n	8001190 <takeWifiSSID+0x228>
            		cursorPosition = 16;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <takeWifiSSID+0x268>)
 800117c:	2210      	movs	r2, #16
 800117e:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <takeWifiSSID+0x26c>)
 8001182:	2202      	movs	r2, #2
 8001184:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8001186:	2102      	movs	r1, #2
 8001188:	2002      	movs	r0, #2
 800118a:	f7ff fbb9 	bl	8000900 <printTemplate>
 800118e:	e038      	b.n	8001202 <takeWifiSSID+0x29a>
            	} else if(page == 4) {
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <takeWifiSSID+0x26c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b04      	cmp	r3, #4
 8001196:	d10a      	bne.n	80011ae <takeWifiSSID+0x246>
            		cursorPosition = 16;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <takeWifiSSID+0x268>)
 800119a:	2210      	movs	r2, #16
 800119c:	601a      	str	r2, [r3, #0]
            		page = 3;
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <takeWifiSSID+0x26c>)
 80011a0:	2203      	movs	r2, #3
 80011a2:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 80011a4:	2103      	movs	r1, #3
 80011a6:	2002      	movs	r0, #2
 80011a8:	f7ff fbaa 	bl	8000900 <printTemplate>
 80011ac:	e029      	b.n	8001202 <takeWifiSSID+0x29a>
            	} else if(page == 5) {
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <takeWifiSSID+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d125      	bne.n	8001202 <takeWifiSSID+0x29a>
            		cursorPosition = 16;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <takeWifiSSID+0x268>)
 80011b8:	2210      	movs	r2, #16
 80011ba:	601a      	str	r2, [r3, #0]
            		page = 4;
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <takeWifiSSID+0x26c>)
 80011be:	2204      	movs	r2, #4
 80011c0:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 80011c2:	2104      	movs	r1, #4
 80011c4:	2002      	movs	r0, #2
 80011c6:	f7ff fb9b 	bl	8000900 <printTemplate>
 80011ca:	e01a      	b.n	8001202 <takeWifiSSID+0x29a>
 80011cc:	20000cdc 	.word	0x20000cdc
 80011d0:	20000944 	.word	0x20000944
 80011d4:	20000948 	.word	0x20000948
 80011d8:	40010800 	.word	0x40010800
 80011dc:	0800dbc4 	.word	0x0800dbc4
 80011e0:	0800dbd8 	.word	0x0800dbd8
 80011e4:	200009b2 	.word	0x200009b2
 80011e8:	20000c38 	.word	0x20000c38
 80011ec:	20000d04 	.word	0x20000d04
 80011f0:	20000b54 	.word	0x20000b54
 80011f4:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80011f8:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <takeWifiSSID+0x384>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4a3b      	ldr	r2, [pc, #236]	; (80012ec <takeWifiSSID+0x384>)
 8001200:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001202:	20fa      	movs	r0, #250	; 0xfa
 8001204:	f008 f89e 	bl	8009344 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001208:	2102      	movs	r1, #2
 800120a:	4839      	ldr	r0, [pc, #228]	; (80012f0 <takeWifiSSID+0x388>)
 800120c:	f008 fe6a 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8001210:	4603      	mov	r3, r0
 8001212:	2b01      	cmp	r3, #1
 8001214:	d128      	bne.n	8001268 <takeWifiSSID+0x300>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3b01      	subs	r3, #1
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fce6 	bl	8000bec <getCharFromCursorPosition>
 8001220:	4603      	mov	r3, r0
 8001222:	4619      	mov	r1, r3
 8001224:	4a33      	ldr	r2, [pc, #204]	; (80012f4 <takeWifiSSID+0x38c>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4413      	add	r3, r2
 800122a:	460a      	mov	r2, r1
 800122c:	701a      	strb	r2, [r3, #0]
            wifiSSIDLoc[characterSavePos] = realCharPos - 1;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	3a01      	subs	r2, #1
 8001236:	b2d1      	uxtb	r1, r2
 8001238:	4a2f      	ldr	r2, [pc, #188]	; (80012f8 <takeWifiSSID+0x390>)
 800123a:	54d1      	strb	r1, [r2, r3]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	b2d9      	uxtb	r1, r3
 8001240:	4a2c      	ldr	r2, [pc, #176]	; (80012f4 <takeWifiSSID+0x38c>)
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4413      	add	r3, r2
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff fac9 	bl	80007e2 <lcd_print_char>

            writeLoc++;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3301      	adds	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	3301      	adds	r3, #1
 800125a:	613b      	str	r3, [r7, #16]
            characterSavePos++;
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	3301      	adds	r3, #1
 8001260:	72fb      	strb	r3, [r7, #11]

            HAL_Delay(250);
 8001262:	20fa      	movs	r0, #250	; 0xfa
 8001264:	f008 f86e 	bl	8009344 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001268:	2104      	movs	r1, #4
 800126a:	4821      	ldr	r0, [pc, #132]	; (80012f0 <takeWifiSSID+0x388>)
 800126c:	f008 fe3a 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b01      	cmp	r3, #1
 8001274:	d12e      	bne.n	80012d4 <takeWifiSSID+0x36c>
        	if(strlen(wifiSSID) >= 1) {
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <takeWifiSSID+0x38c>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d027      	beq.n	80012ce <takeWifiSSID+0x366>
        		wifiSSID[wifiNameLoc] = '\0';
 800127e:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <takeWifiSSID+0x38c>)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4413      	add	r3, r2
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	3306      	adds	r3, #6
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4619      	mov	r1, r3
 8001292:	2001      	movs	r0, #1
 8001294:	f7ff fac6 	bl	8000824 <lcd_delete_char>
        		HAL_Delay(50);
 8001298:	2032      	movs	r0, #50	; 0x32
 800129a:	f008 f853 	bl	8009344 <HAL_Delay>
        		if(writeLoc > 7) {
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b07      	cmp	r3, #7
 80012a2:	dd03      	ble.n	80012ac <takeWifiSSID+0x344>
        			writeLoc--;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	e004      	b.n	80012b6 <takeWifiSSID+0x34e>
        		} else if(writeLoc < 7) {
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	dc01      	bgt.n	80012b6 <takeWifiSSID+0x34e>
        			writeLoc = 7;
 80012b2:	2307      	movs	r3, #7
 80012b4:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	dd03      	ble.n	80012c4 <takeWifiSSID+0x35c>
        			wifiNameLoc--;
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	3b01      	subs	r3, #1
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	e004      	b.n	80012ce <takeWifiSSID+0x366>
        		} else if(wifiNameLoc < 0) {
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	da01      	bge.n	80012ce <takeWifiSSID+0x366>
        			wifiNameLoc = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 80012ce:	20fa      	movs	r0, #250	; 0xfa
 80012d0:	f008 f838 	bl	8009344 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <takeWifiSSID+0x384>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4619      	mov	r1, r3
 80012dc:	2002      	movs	r0, #2
 80012de:	f7ff fa4c 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80012e2:	e662      	b.n	8000faa <takeWifiSSID+0x42>
    }
}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bdb0      	pop	{r4, r5, r7, pc}
 80012ec:	20000944 	.word	0x20000944
 80012f0:	40010800 	.word	0x40010800
 80012f4:	20000cdc 	.word	0x20000cdc
 80012f8:	20000d04 	.word	0x20000d04

080012fc <takeWifiPass>:

void takeWifiPass(int state) {
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af04      	add	r7, sp, #16
 8001302:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 8001304:	2001      	movs	r0, #1
 8001306:	f7ff fab5 	bl	8000874 <lcd_cursor>

    if(state == 0) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d104      	bne.n	800131a <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8001310:	2214      	movs	r2, #20
 8001312:	2100      	movs	r1, #0
 8001314:	4892      	ldr	r0, [pc, #584]	; (8001560 <takeWifiPass+0x264>)
 8001316:	f00b ff29 	bl	800d16c <memset>
    }

    int realCharPos = 1;
 800131a:	2301      	movs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 800131e:	4b91      	ldr	r3, [pc, #580]	; (8001564 <takeWifiPass+0x268>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]
    page = 1;
 8001324:	4b90      	ldr	r3, [pc, #576]	; (8001568 <takeWifiPass+0x26c>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 800132e:	2307      	movs	r3, #7
 8001330:	60fb      	str	r3, [r7, #12]

    uint8_t characterSavePos = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	72fb      	strb	r3, [r7, #11]

    printTemplate(3, 1);
 8001336:	2101      	movs	r1, #1
 8001338:	2003      	movs	r0, #3
 800133a:	f7ff fae1 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800133e:	2108      	movs	r1, #8
 8001340:	488a      	ldr	r0, [pc, #552]	; (800156c <takeWifiPass+0x270>)
 8001342:	f008 fdcf 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8001346:	4603      	mov	r3, r0
 8001348:	2b01      	cmp	r3, #1
 800134a:	d13d      	bne.n	80013c8 <takeWifiPass+0xcc>
            lcd_cursor(0);
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fa91 	bl	8000874 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8001352:	4883      	ldr	r0, [pc, #524]	; (8001560 <takeWifiPass+0x264>)
 8001354:	f7fe ff66 	bl	8000224 <strlen>
 8001358:	4603      	mov	r3, r0
 800135a:	2b14      	cmp	r3, #20
 800135c:	d910      	bls.n	8001380 <takeWifiPass+0x84>
                lcd_clear();
 800135e:	f7ff fa57 	bl	8000810 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8001362:	4a83      	ldr	r2, [pc, #524]	; (8001570 <takeWifiPass+0x274>)
 8001364:	2101      	movs	r1, #1
 8001366:	2001      	movs	r0, #1
 8001368:	f7ff fa26 	bl	80007b8 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 800136c:	4a81      	ldr	r2, [pc, #516]	; (8001574 <takeWifiPass+0x278>)
 800136e:	2101      	movs	r1, #1
 8001370:	2002      	movs	r0, #2
 8001372:	f7ff fa21 	bl	80007b8 <lcd_print>
                HAL_Delay(1200);
 8001376:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800137a:	f007 ffe3 	bl	8009344 <HAL_Delay>
                goto mainPASSSection;
 800137e:	e7c1      	b.n	8001304 <takeWifiPass+0x8>
            }

            memcpy(&eepromData[passStartPos], wifiPassLocArr, 20);
 8001380:	4b7d      	ldr	r3, [pc, #500]	; (8001578 <takeWifiPass+0x27c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b7d      	ldr	r3, [pc, #500]	; (800157c <takeWifiPass+0x280>)
 8001388:	4413      	add	r3, r2
 800138a:	4a7d      	ldr	r2, [pc, #500]	; (8001580 <takeWifiPass+0x284>)
 800138c:	461d      	mov	r5, r3
 800138e:	4614      	mov	r4, r2
 8001390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001392:	6028      	str	r0, [r5, #0]
 8001394:	6069      	str	r1, [r5, #4]
 8001396:	60aa      	str	r2, [r5, #8]
 8001398:	60eb      	str	r3, [r5, #12]
 800139a:	6820      	ldr	r0, [r4, #0]
 800139c:	6128      	str	r0, [r5, #16]
            HAL_Delay(250);
 800139e:	20fa      	movs	r0, #250	; 0xfa
 80013a0:	f007 ffd0 	bl	8009344 <HAL_Delay>
            //memcpy(&eepromData[passStartPos], (uint8_t *)wifiPass, strlen(wifiPass));

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80013a4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	236e      	movs	r3, #110	; 0x6e
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	4b73      	ldr	r3, [pc, #460]	; (800157c <takeWifiPass+0x280>)
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	236e      	movs	r3, #110	; 0x6e
 80013b4:	2200      	movs	r2, #0
 80013b6:	21a0      	movs	r1, #160	; 0xa0
 80013b8:	4872      	ldr	r0, [pc, #456]	; (8001584 <takeWifiPass+0x288>)
 80013ba:	f009 f84d 	bl	800a458 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 80013be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013c2:	f007 ffbf 	bl	8009344 <HAL_Delay>

            break;
 80013c6:	e157      	b.n	8001678 <takeWifiPass+0x37c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80013c8:	2101      	movs	r1, #1
 80013ca:	4868      	ldr	r0, [pc, #416]	; (800156c <takeWifiPass+0x270>)
 80013cc:	f008 fd8a 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d166      	bne.n	80014a4 <takeWifiPass+0x1a8>
        	realCharPos++;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2b50      	cmp	r3, #80	; 0x50
 80013e0:	dd01      	ble.n	80013e6 <takeWifiPass+0xea>
        	    realCharPos = 1;
 80013e2:	2301      	movs	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 80013e6:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <takeWifiPass+0x268>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b10      	cmp	r3, #16
 80013ec:	d152      	bne.n	8001494 <takeWifiPass+0x198>
            	if(page == 1) {
 80013ee:	4b5e      	ldr	r3, [pc, #376]	; (8001568 <takeWifiPass+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d10c      	bne.n	8001410 <takeWifiPass+0x114>
            		cursorPosition = 1;
 80013f6:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <takeWifiPass+0x268>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
            		page++;
 80013fc:	4b5a      	ldr	r3, [pc, #360]	; (8001568 <takeWifiPass+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	4a59      	ldr	r2, [pc, #356]	; (8001568 <takeWifiPass+0x26c>)
 8001404:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8001406:	2102      	movs	r1, #2
 8001408:	2003      	movs	r0, #3
 800140a:	f7ff fa79 	bl	8000900 <printTemplate>
 800140e:	e046      	b.n	800149e <takeWifiPass+0x1a2>
            	} else if(page == 2) {
 8001410:	4b55      	ldr	r3, [pc, #340]	; (8001568 <takeWifiPass+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d10c      	bne.n	8001432 <takeWifiPass+0x136>
            		cursorPosition = 1;
 8001418:	4b52      	ldr	r3, [pc, #328]	; (8001564 <takeWifiPass+0x268>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]
            		page++;
 800141e:	4b52      	ldr	r3, [pc, #328]	; (8001568 <takeWifiPass+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	4a50      	ldr	r2, [pc, #320]	; (8001568 <takeWifiPass+0x26c>)
 8001426:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 8001428:	2103      	movs	r1, #3
 800142a:	2003      	movs	r0, #3
 800142c:	f7ff fa68 	bl	8000900 <printTemplate>
 8001430:	e035      	b.n	800149e <takeWifiPass+0x1a2>
            	} else if(page == 3) {
 8001432:	4b4d      	ldr	r3, [pc, #308]	; (8001568 <takeWifiPass+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d10c      	bne.n	8001454 <takeWifiPass+0x158>
            		cursorPosition = 1;
 800143a:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <takeWifiPass+0x268>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
            		page++;
 8001440:	4b49      	ldr	r3, [pc, #292]	; (8001568 <takeWifiPass+0x26c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	4a48      	ldr	r2, [pc, #288]	; (8001568 <takeWifiPass+0x26c>)
 8001448:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 800144a:	2104      	movs	r1, #4
 800144c:	2003      	movs	r0, #3
 800144e:	f7ff fa57 	bl	8000900 <printTemplate>
 8001452:	e024      	b.n	800149e <takeWifiPass+0x1a2>
            	} else if(page == 4) {
 8001454:	4b44      	ldr	r3, [pc, #272]	; (8001568 <takeWifiPass+0x26c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d10c      	bne.n	8001476 <takeWifiPass+0x17a>
            		cursorPosition = 1;
 800145c:	4b41      	ldr	r3, [pc, #260]	; (8001564 <takeWifiPass+0x268>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]
            		page++;
 8001462:	4b41      	ldr	r3, [pc, #260]	; (8001568 <takeWifiPass+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	4a3f      	ldr	r2, [pc, #252]	; (8001568 <takeWifiPass+0x26c>)
 800146a:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 800146c:	2105      	movs	r1, #5
 800146e:	2003      	movs	r0, #3
 8001470:	f7ff fa46 	bl	8000900 <printTemplate>
 8001474:	e013      	b.n	800149e <takeWifiPass+0x1a2>
            	} else if(page == 5) {
 8001476:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <takeWifiPass+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b05      	cmp	r3, #5
 800147c:	d10f      	bne.n	800149e <takeWifiPass+0x1a2>
            		cursorPosition = 1;
 800147e:	4b39      	ldr	r3, [pc, #228]	; (8001564 <takeWifiPass+0x268>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001484:	4b38      	ldr	r3, [pc, #224]	; (8001568 <takeWifiPass+0x26c>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800148a:	2101      	movs	r1, #1
 800148c:	2003      	movs	r0, #3
 800148e:	f7ff fa37 	bl	8000900 <printTemplate>
 8001492:	e004      	b.n	800149e <takeWifiPass+0x1a2>
            	}
            } else {
            	cursorPosition++;
 8001494:	4b33      	ldr	r3, [pc, #204]	; (8001564 <takeWifiPass+0x268>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	4a32      	ldr	r2, [pc, #200]	; (8001564 <takeWifiPass+0x268>)
 800149c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800149e:	20fa      	movs	r0, #250	; 0xfa
 80014a0:	f007 ff50 	bl	8009344 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80014a4:	2108      	movs	r1, #8
 80014a6:	4838      	ldr	r0, [pc, #224]	; (8001588 <takeWifiPass+0x28c>)
 80014a8:	f008 fd1c 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d174      	bne.n	800159c <takeWifiPass+0x2a0>
        	realCharPos--;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	dc01      	bgt.n	80014c2 <takeWifiPass+0x1c6>
        	    realCharPos = 80;
 80014be:	2350      	movs	r3, #80	; 0x50
 80014c0:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 80014c2:	4b28      	ldr	r3, [pc, #160]	; (8001564 <takeWifiPass+0x268>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d160      	bne.n	800158c <takeWifiPass+0x290>
            	if(page == 1) {
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <takeWifiPass+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d10a      	bne.n	80014e8 <takeWifiPass+0x1ec>
            		cursorPosition = 16;
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <takeWifiPass+0x268>)
 80014d4:	2210      	movs	r2, #16
 80014d6:	601a      	str	r2, [r3, #0]
            		page = 5;
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <takeWifiPass+0x26c>)
 80014da:	2205      	movs	r2, #5
 80014dc:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80014de:	2105      	movs	r1, #5
 80014e0:	2003      	movs	r0, #3
 80014e2:	f7ff fa0d 	bl	8000900 <printTemplate>
 80014e6:	e056      	b.n	8001596 <takeWifiPass+0x29a>
            	} else if(page == 2) {
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <takeWifiPass+0x26c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d10a      	bne.n	8001506 <takeWifiPass+0x20a>
            		cursorPosition = 16;
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <takeWifiPass+0x268>)
 80014f2:	2210      	movs	r2, #16
 80014f4:	601a      	str	r2, [r3, #0]
            		page = 1;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <takeWifiPass+0x26c>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80014fc:	2101      	movs	r1, #1
 80014fe:	2003      	movs	r0, #3
 8001500:	f7ff f9fe 	bl	8000900 <printTemplate>
 8001504:	e047      	b.n	8001596 <takeWifiPass+0x29a>
            	} else if(page == 3) {
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <takeWifiPass+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d10a      	bne.n	8001524 <takeWifiPass+0x228>
            		cursorPosition = 16;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <takeWifiPass+0x268>)
 8001510:	2210      	movs	r2, #16
 8001512:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <takeWifiPass+0x26c>)
 8001516:	2202      	movs	r2, #2
 8001518:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 800151a:	2102      	movs	r1, #2
 800151c:	2003      	movs	r0, #3
 800151e:	f7ff f9ef 	bl	8000900 <printTemplate>
 8001522:	e038      	b.n	8001596 <takeWifiPass+0x29a>
            	} else if(page == 4) {
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <takeWifiPass+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b04      	cmp	r3, #4
 800152a:	d10a      	bne.n	8001542 <takeWifiPass+0x246>
            		cursorPosition = 16;
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <takeWifiPass+0x268>)
 800152e:	2210      	movs	r2, #16
 8001530:	601a      	str	r2, [r3, #0]
            		page = 3;
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <takeWifiPass+0x26c>)
 8001534:	2203      	movs	r2, #3
 8001536:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 8001538:	2103      	movs	r1, #3
 800153a:	2003      	movs	r0, #3
 800153c:	f7ff f9e0 	bl	8000900 <printTemplate>
 8001540:	e029      	b.n	8001596 <takeWifiPass+0x29a>
            	} else if(page == 5) {
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <takeWifiPass+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b05      	cmp	r3, #5
 8001548:	d125      	bne.n	8001596 <takeWifiPass+0x29a>
            		cursorPosition = 16;
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <takeWifiPass+0x268>)
 800154c:	2210      	movs	r2, #16
 800154e:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <takeWifiPass+0x26c>)
 8001552:	2204      	movs	r2, #4
 8001554:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 8001556:	2104      	movs	r1, #4
 8001558:	2003      	movs	r0, #3
 800155a:	f7ff f9d1 	bl	8000900 <printTemplate>
 800155e:	e01a      	b.n	8001596 <takeWifiPass+0x29a>
 8001560:	20000cf0 	.word	0x20000cf0
 8001564:	20000944 	.word	0x20000944
 8001568:	20000948 	.word	0x20000948
 800156c:	40010800 	.word	0x40010800
 8001570:	0800dbc4 	.word	0x0800dbc4
 8001574:	0800dbec 	.word	0x0800dbec
 8001578:	200009b3 	.word	0x200009b3
 800157c:	20000c38 	.word	0x20000c38
 8001580:	20000d18 	.word	0x20000d18
 8001584:	20000b54 	.word	0x20000b54
 8001588:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800158c:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <takeWifiPass+0x384>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	4a3b      	ldr	r2, [pc, #236]	; (8001680 <takeWifiPass+0x384>)
 8001594:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001596:	20fa      	movs	r0, #250	; 0xfa
 8001598:	f007 fed4 	bl	8009344 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800159c:	2102      	movs	r1, #2
 800159e:	4839      	ldr	r0, [pc, #228]	; (8001684 <takeWifiPass+0x388>)
 80015a0:	f008 fca0 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d128      	bne.n	80015fc <takeWifiPass+0x300>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fb1c 	bl	8000bec <getCharFromCursorPosition>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4619      	mov	r1, r3
 80015b8:	4a33      	ldr	r2, [pc, #204]	; (8001688 <takeWifiPass+0x38c>)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4413      	add	r3, r2
 80015be:	460a      	mov	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
        	wifiPassLocArr[characterSavePos] = realCharPos - 1;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	3a01      	subs	r2, #1
 80015ca:	b2d1      	uxtb	r1, r2
 80015cc:	4a2f      	ldr	r2, [pc, #188]	; (800168c <takeWifiPass+0x390>)
 80015ce:	54d1      	strb	r1, [r2, r3]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	b2d9      	uxtb	r1, r3
 80015d4:	4a2c      	ldr	r2, [pc, #176]	; (8001688 <takeWifiPass+0x38c>)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4413      	add	r3, r2
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	2001      	movs	r0, #1
 80015e0:	f7ff f8ff 	bl	80007e2 <lcd_print_char>

            writeLoc++;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3301      	adds	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	3301      	adds	r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
            characterSavePos++;
 80015f0:	7afb      	ldrb	r3, [r7, #11]
 80015f2:	3301      	adds	r3, #1
 80015f4:	72fb      	strb	r3, [r7, #11]

            HAL_Delay(250);
 80015f6:	20fa      	movs	r0, #250	; 0xfa
 80015f8:	f007 fea4 	bl	8009344 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80015fc:	2104      	movs	r1, #4
 80015fe:	4821      	ldr	r0, [pc, #132]	; (8001684 <takeWifiPass+0x388>)
 8001600:	f008 fc70 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8001604:	4603      	mov	r3, r0
 8001606:	2b01      	cmp	r3, #1
 8001608:	d12e      	bne.n	8001668 <takeWifiPass+0x36c>
            if(strlen(wifiPass) >= 1) {
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <takeWifiPass+0x38c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d027      	beq.n	8001662 <takeWifiPass+0x366>
            	wifiPass[wifiPassLoc] = '\0';
 8001612:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <takeWifiPass+0x38c>)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4413      	add	r3, r2
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	3306      	adds	r3, #6
 8001622:	b2db      	uxtb	r3, r3
 8001624:	4619      	mov	r1, r3
 8001626:	2001      	movs	r0, #1
 8001628:	f7ff f8fc 	bl	8000824 <lcd_delete_char>
            	HAL_Delay(50);
 800162c:	2032      	movs	r0, #50	; 0x32
 800162e:	f007 fe89 	bl	8009344 <HAL_Delay>

            	if(writeLoc > 7) {
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2b07      	cmp	r3, #7
 8001636:	dd03      	ble.n	8001640 <takeWifiPass+0x344>
            		writeLoc--;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3b01      	subs	r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e004      	b.n	800164a <takeWifiPass+0x34e>
            	} else if(writeLoc < 7) {
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b06      	cmp	r3, #6
 8001644:	dc01      	bgt.n	800164a <takeWifiPass+0x34e>
            		writeLoc = 7;
 8001646:	2307      	movs	r3, #7
 8001648:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	dd03      	ble.n	8001658 <takeWifiPass+0x35c>
            		wifiPassLoc--;
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	3b01      	subs	r3, #1
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	e004      	b.n	8001662 <takeWifiPass+0x366>
            	} else if(wifiPassLoc < 0) {
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	da01      	bge.n	8001662 <takeWifiPass+0x366>
            		wifiPassLoc = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 8001662:	20fa      	movs	r0, #250	; 0xfa
 8001664:	f007 fe6e 	bl	8009344 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <takeWifiPass+0x384>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	4619      	mov	r1, r3
 8001670:	2002      	movs	r0, #2
 8001672:	f7ff f882 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001676:	e662      	b.n	800133e <takeWifiPass+0x42>
    }
}
 8001678:	bf00      	nop
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bdb0      	pop	{r4, r5, r7, pc}
 8001680:	20000944 	.word	0x20000944
 8001684:	40010800 	.word	0x40010800
 8001688:	20000cf0 	.word	0x20000cf0
 800168c:	20000d18 	.word	0x20000d18

08001690 <checkSlideVal>:

int checkSlideVal(int state) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d111      	bne.n	80016c2 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800169e:	2101      	movs	r1, #1
 80016a0:	4813      	ldr	r0, [pc, #76]	; (80016f0 <checkSlideVal+0x60>)
 80016a2:	f008 fc1f 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <checkSlideVal+0x20>
			return 34;
 80016ac:	2322      	movs	r3, #34	; 0x22
 80016ae:	e01b      	b.n	80016e8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80016b0:	2108      	movs	r1, #8
 80016b2:	4810      	ldr	r0, [pc, #64]	; (80016f4 <checkSlideVal+0x64>)
 80016b4:	f008 fc16 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d113      	bne.n	80016e6 <checkSlideVal+0x56>
			return 32;
 80016be:	2320      	movs	r3, #32
 80016c0:	e012      	b.n	80016e8 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80016c2:	2101      	movs	r1, #1
 80016c4:	480a      	ldr	r0, [pc, #40]	; (80016f0 <checkSlideVal+0x60>)
 80016c6:	f008 fc0d 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <checkSlideVal+0x44>
			return 35;
 80016d0:	2323      	movs	r3, #35	; 0x23
 80016d2:	e009      	b.n	80016e8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80016d4:	2108      	movs	r1, #8
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <checkSlideVal+0x64>)
 80016d8:	f008 fc04 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <checkSlideVal+0x56>
			return 33;
 80016e2:	2321      	movs	r3, #33	; 0x21
 80016e4:	e000      	b.n	80016e8 <checkSlideVal+0x58>
		}
	}
	return 0;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40010800 	.word	0x40010800
 80016f4:	40011000 	.word	0x40011000

080016f8 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f7fe fd8c 	bl	8000224 <strlen>
 800170c:	4603      	mov	r3, r0
 800170e:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001710:	2301      	movs	r3, #1
 8001712:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001714:	e08a      	b.n	800182c <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001716:	6838      	ldr	r0, [r7, #0]
 8001718:	f7ff ffba 	bl	8001690 <checkSlideVal>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	dd07      	ble.n	8001732 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001722:	6838      	ldr	r0, [r7, #0]
 8001724:	f7ff ffb4 	bl	8001690 <checkSlideVal>
 8001728:	4603      	mov	r3, r0
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b44      	ldr	r3, [pc, #272]	; (8001840 <slideText+0x148>)
 800172e:	701a      	strb	r2, [r3, #0]
			break;
 8001730:	e081      	b.n	8001836 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
 8001736:	e075      	b.n	8001824 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f7ff ffa9 	bl	8001690 <checkSlideVal>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	dd09      	ble.n	8001758 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001744:	6838      	ldr	r0, [r7, #0]
 8001746:	f7ff ffa3 	bl	8001690 <checkSlideVal>
 800174a:	4603      	mov	r3, r0
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <slideText+0x148>)
 8001750:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001756:	e069      	b.n	800182c <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	4413      	add	r3, r2
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	e029      	b.n	80017b6 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001762:	6838      	ldr	r0, [r7, #0]
 8001764:	f7ff ff94 	bl	8001690 <checkSlideVal>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	dd0b      	ble.n	8001786 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800176e:	6838      	ldr	r0, [r7, #0]
 8001770:	f7ff ff8e 	bl	8001690 <checkSlideVal>
 8001774:	4603      	mov	r3, r0
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b31      	ldr	r3, [pc, #196]	; (8001840 <slideText+0x148>)
 800177a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001784:	e01d      	b.n	80017c2 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	b2d8      	uxtb	r0, r3
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	b2d9      	uxtb	r1, r3
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	461a      	mov	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4413      	add	r3, r2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	f7ff f81c 	bl	80007e2 <lcd_print_char>
				HAL_Delay(30);
 80017aa:	201e      	movs	r0, #30
 80017ac:	f007 fdca 	bl	8009344 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	3301      	adds	r3, #1
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	7dfa      	ldrb	r2, [r7, #23]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4413      	add	r3, r2
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	429a      	cmp	r2, r3
 80017c0:	dbcf      	blt.n	8001762 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	61bb      	str	r3, [r7, #24]
 80017c8:	e023      	b.n	8001812 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80017ca:	6838      	ldr	r0, [r7, #0]
 80017cc:	f7ff ff60 	bl	8001690 <checkSlideVal>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	dd0b      	ble.n	80017ee <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80017d6:	6838      	ldr	r0, [r7, #0]
 80017d8:	f7ff ff5a 	bl	8001690 <checkSlideVal>
 80017dc:	4603      	mov	r3, r0
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <slideText+0x148>)
 80017e2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80017ec:	e017      	b.n	800181e <slideText+0x126>
				}
			     if(j >= startPos) {
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	db0a      	blt.n	800180c <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	b2d1      	uxtb	r1, r2
 80017fe:	2220      	movs	r2, #32
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe ffee 	bl	80007e2 <lcd_print_char>
			    	 HAL_Delay(30);
 8001806:	201e      	movs	r0, #30
 8001808:	f007 fd9c 	bl	8009344 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	3b01      	subs	r3, #1
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	7dfa      	ldrb	r2, [r7, #23]
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	429a      	cmp	r2, r3
 800181c:	dad5      	bge.n	80017ca <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	3301      	adds	r3, #1
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	6a3a      	ldr	r2, [r7, #32]
 8001828:	429a      	cmp	r2, r3
 800182a:	db85      	blt.n	8001738 <slideText+0x40>
	while(mainLoopVal == 1) {
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	2b01      	cmp	r3, #1
 8001830:	f43f af71 	beq.w	8001716 <slideText+0x1e>
			     }
			}
		}
	}
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000d30 	.word	0x20000d30

08001844 <menu>:

void menu() {
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001848:	2101      	movs	r1, #1
 800184a:	488f      	ldr	r0, [pc, #572]	; (8001a88 <menu+0x244>)
 800184c:	f008 fb4a 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8001850:	4603      	mov	r3, r0
 8001852:	2b01      	cmp	r3, #1
 8001854:	f040 808e 	bne.w	8001974 <menu+0x130>
 8001858:	4b8c      	ldr	r3, [pc, #560]	; (8001a8c <menu+0x248>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	f083 0301 	eor.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8086 	beq.w	8001974 <menu+0x130>
		menuSayac = menuSayac+1;
 8001868:	4b89      	ldr	r3, [pc, #548]	; (8001a90 <menu+0x24c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b87      	ldr	r3, [pc, #540]	; (8001a90 <menu+0x24c>)
 8001872:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001874:	4b86      	ldr	r3, [pc, #536]	; (8001a90 <menu+0x24c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b24      	cmp	r3, #36	; 0x24
 800187a:	d102      	bne.n	8001882 <menu+0x3e>
			menuSayac = 1;
 800187c:	4b84      	ldr	r3, [pc, #528]	; (8001a90 <menu+0x24c>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001882:	4b83      	ldr	r3, [pc, #524]	; (8001a90 <menu+0x24c>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b12      	cmp	r3, #18
 8001888:	d106      	bne.n	8001898 <menu+0x54>
 800188a:	4b82      	ldr	r3, [pc, #520]	; (8001a94 <menu+0x250>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <menu+0x54>
			menuSayac = 21;
 8001892:	4b7f      	ldr	r3, [pc, #508]	; (8001a90 <menu+0x24c>)
 8001894:	2215      	movs	r2, #21
 8001896:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001898:	4b7d      	ldr	r3, [pc, #500]	; (8001a90 <menu+0x24c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b08      	cmp	r3, #8
 800189e:	d106      	bne.n	80018ae <menu+0x6a>
 80018a0:	4b7d      	ldr	r3, [pc, #500]	; (8001a98 <menu+0x254>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <menu+0x6a>
			menuSayac = 16;
 80018a8:	4b79      	ldr	r3, [pc, #484]	; (8001a90 <menu+0x24c>)
 80018aa:	2210      	movs	r2, #16
 80018ac:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80018ae:	4b78      	ldr	r3, [pc, #480]	; (8001a90 <menu+0x24c>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b0d      	cmp	r3, #13
 80018b4:	d106      	bne.n	80018c4 <menu+0x80>
 80018b6:	4b78      	ldr	r3, [pc, #480]	; (8001a98 <menu+0x254>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d102      	bne.n	80018c4 <menu+0x80>
			menuSayac = 16;
 80018be:	4b74      	ldr	r3, [pc, #464]	; (8001a90 <menu+0x24c>)
 80018c0:	2210      	movs	r2, #16
 80018c2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80018c4:	4b72      	ldr	r3, [pc, #456]	; (8001a90 <menu+0x24c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b09      	cmp	r3, #9
 80018ca:	d106      	bne.n	80018da <menu+0x96>
 80018cc:	4b72      	ldr	r3, [pc, #456]	; (8001a98 <menu+0x254>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d102      	bne.n	80018da <menu+0x96>
			menuSayac = 13;
 80018d4:	4b6e      	ldr	r3, [pc, #440]	; (8001a90 <menu+0x24c>)
 80018d6:	220d      	movs	r2, #13
 80018d8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80018da:	4b6d      	ldr	r3, [pc, #436]	; (8001a90 <menu+0x24c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b0a      	cmp	r3, #10
 80018e0:	d10a      	bne.n	80018f8 <menu+0xb4>
 80018e2:	4b6e      	ldr	r3, [pc, #440]	; (8001a9c <menu+0x258>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d003      	beq.n	80018f2 <menu+0xae>
 80018ea:	4b6c      	ldr	r3, [pc, #432]	; (8001a9c <menu+0x258>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d102      	bne.n	80018f8 <menu+0xb4>
			menuSayac = 11;
 80018f2:	4b67      	ldr	r3, [pc, #412]	; (8001a90 <menu+0x24c>)
 80018f4:	220b      	movs	r2, #11
 80018f6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80018f8:	4b65      	ldr	r3, [pc, #404]	; (8001a90 <menu+0x24c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b0c      	cmp	r3, #12
 80018fe:	d10e      	bne.n	800191e <menu+0xda>
 8001900:	4b67      	ldr	r3, [pc, #412]	; (8001aa0 <menu+0x25c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d003      	beq.n	8001910 <menu+0xcc>
 8001908:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <menu+0x25c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d106      	bne.n	800191e <menu+0xda>
 8001910:	4b61      	ldr	r3, [pc, #388]	; (8001a98 <menu+0x254>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d102      	bne.n	800191e <menu+0xda>
			menuSayac = 16;
 8001918:	4b5d      	ldr	r3, [pc, #372]	; (8001a90 <menu+0x24c>)
 800191a:	2210      	movs	r2, #16
 800191c:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800191e:	4b5c      	ldr	r3, [pc, #368]	; (8001a90 <menu+0x24c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d10e      	bne.n	8001944 <menu+0x100>
 8001926:	4b5e      	ldr	r3, [pc, #376]	; (8001aa0 <menu+0x25c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d003      	beq.n	8001936 <menu+0xf2>
 800192e:	4b5c      	ldr	r3, [pc, #368]	; (8001aa0 <menu+0x25c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d106      	bne.n	8001944 <menu+0x100>
 8001936:	4b58      	ldr	r3, [pc, #352]	; (8001a98 <menu+0x254>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d102      	bne.n	8001944 <menu+0x100>
			menuSayac = 13;
 800193e:	4b54      	ldr	r3, [pc, #336]	; (8001a90 <menu+0x24c>)
 8001940:	220d      	movs	r2, #13
 8001942:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001944:	4b52      	ldr	r3, [pc, #328]	; (8001a90 <menu+0x24c>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b0f      	cmp	r3, #15
 800194a:	d106      	bne.n	800195a <menu+0x116>
 800194c:	4b55      	ldr	r3, [pc, #340]	; (8001aa4 <menu+0x260>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d102      	bne.n	800195a <menu+0x116>
			menuSayac = 16;
 8001954:	4b4e      	ldr	r3, [pc, #312]	; (8001a90 <menu+0x24c>)
 8001956:	2210      	movs	r2, #16
 8001958:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800195a:	4b4d      	ldr	r3, [pc, #308]	; (8001a90 <menu+0x24c>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b18      	cmp	r3, #24
 8001960:	d106      	bne.n	8001970 <menu+0x12c>
 8001962:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <menu+0x250>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <menu+0x12c>
			menuSayac = 26;
 800196a:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <menu+0x24c>)
 800196c:	221a      	movs	r2, #26
 800196e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001970:	f004 fce6 	bl	8006340 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001974:	2108      	movs	r1, #8
 8001976:	484c      	ldr	r0, [pc, #304]	; (8001aa8 <menu+0x264>)
 8001978:	f008 fab4 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800197c:	4603      	mov	r3, r0
 800197e:	2b01      	cmp	r3, #1
 8001980:	d175      	bne.n	8001a6e <menu+0x22a>
 8001982:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <menu+0x248>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	f083 0301 	eor.w	r3, r3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d06e      	beq.n	8001a6e <menu+0x22a>
		if (menuSayac <= 1) {
 8001990:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <menu+0x24c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d802      	bhi.n	800199e <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001998:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <menu+0x24c>)
 800199a:	2224      	movs	r2, #36	; 0x24
 800199c:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800199e:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <menu+0x24c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <menu+0x24c>)
 80019a8:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <menu+0x24c>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b14      	cmp	r3, #20
 80019b0:	d106      	bne.n	80019c0 <menu+0x17c>
 80019b2:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <menu+0x250>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d102      	bne.n	80019c0 <menu+0x17c>
			menuSayac = 17;
 80019ba:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <menu+0x24c>)
 80019bc:	2211      	movs	r2, #17
 80019be:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80019c0:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <menu+0x24c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d106      	bne.n	80019d6 <menu+0x192>
 80019c8:	4b33      	ldr	r3, [pc, #204]	; (8001a98 <menu+0x254>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <menu+0x192>
			menuSayac = 7;
 80019d0:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <menu+0x24c>)
 80019d2:	2207      	movs	r2, #7
 80019d4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80019d6:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <menu+0x24c>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b0f      	cmp	r3, #15
 80019dc:	d106      	bne.n	80019ec <menu+0x1a8>
 80019de:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <menu+0x254>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d102      	bne.n	80019ec <menu+0x1a8>
			menuSayac = 12;
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <menu+0x24c>)
 80019e8:	220c      	movs	r2, #12
 80019ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80019ec:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <menu+0x24c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b0c      	cmp	r3, #12
 80019f2:	d106      	bne.n	8001a02 <menu+0x1be>
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <menu+0x254>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d102      	bne.n	8001a02 <menu+0x1be>
			menuSayac = 8;
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <menu+0x24c>)
 80019fe:	2208      	movs	r2, #8
 8001a00:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <menu+0x24c>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b0a      	cmp	r3, #10
 8001a08:	d10a      	bne.n	8001a20 <menu+0x1dc>
 8001a0a:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <menu+0x258>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d003      	beq.n	8001a1a <menu+0x1d6>
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <menu+0x258>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d102      	bne.n	8001a20 <menu+0x1dc>
			menuSayac = 9;
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <menu+0x24c>)
 8001a1c:	2209      	movs	r2, #9
 8001a1e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <menu+0x24c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b0c      	cmp	r3, #12
 8001a26:	d10a      	bne.n	8001a3e <menu+0x1fa>
 8001a28:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <menu+0x25c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d003      	beq.n	8001a38 <menu+0x1f4>
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <menu+0x25c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d102      	bne.n	8001a3e <menu+0x1fa>
			menuSayac = 11;
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <menu+0x24c>)
 8001a3a:	220b      	movs	r2, #11
 8001a3c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <menu+0x24c>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b0f      	cmp	r3, #15
 8001a44:	d106      	bne.n	8001a54 <menu+0x210>
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <menu+0x260>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d102      	bne.n	8001a54 <menu+0x210>
			menuSayac = 14;
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <menu+0x24c>)
 8001a50:	220e      	movs	r2, #14
 8001a52:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <menu+0x24c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b19      	cmp	r3, #25
 8001a5a:	d106      	bne.n	8001a6a <menu+0x226>
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <menu+0x250>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <menu+0x226>
			menuSayac = 23;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <menu+0x24c>)
 8001a66:	2217      	movs	r2, #23
 8001a68:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001a6a:	f004 fc69 	bl	8006340 <bekle>
	}

	if (menuSayac == 0) {
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <menu+0x24c>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d134      	bne.n	8001ae0 <menu+0x29c>
		if(dilSecim == 0) {
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <menu+0x268>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d122      	bne.n	8001ac4 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001a7e:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <menu+0x26c>)
 8001a80:	2101      	movs	r1, #1
 8001a82:	2001      	movs	r0, #1
 8001a84:	e016      	b.n	8001ab4 <menu+0x270>
 8001a86:	bf00      	nop
 8001a88:	40010800 	.word	0x40010800
 8001a8c:	20000d5f 	.word	0x20000d5f
 8001a90:	20000d30 	.word	0x20000d30
 8001a94:	20000d3f 	.word	0x20000d3f
 8001a98:	20000d38 	.word	0x20000d38
 8001a9c:	20000d39 	.word	0x20000d39
 8001aa0:	20000d3a 	.word	0x20000d3a
 8001aa4:	20000d3b 	.word	0x20000d3b
 8001aa8:	40011000 	.word	0x40011000
 8001aac:	20000d51 	.word	0x20000d51
 8001ab0:	0800dc00 	.word	0x0800dc00
 8001ab4:	f7fe fe80 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001ab8:	4a94      	ldr	r2, [pc, #592]	; (8001d0c <menu+0x4c8>)
 8001aba:	2101      	movs	r1, #1
 8001abc:	2002      	movs	r0, #2
 8001abe:	f7fe fe7b 	bl	80007b8 <lcd_print>
 8001ac2:	e00d      	b.n	8001ae0 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001ac4:	4b92      	ldr	r3, [pc, #584]	; (8001d10 <menu+0x4cc>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d109      	bne.n	8001ae0 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001acc:	4a91      	ldr	r2, [pc, #580]	; (8001d14 <menu+0x4d0>)
 8001ace:	2101      	movs	r1, #1
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7fe fe71 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001ad6:	4a90      	ldr	r2, [pc, #576]	; (8001d18 <menu+0x4d4>)
 8001ad8:	2101      	movs	r1, #1
 8001ada:	2002      	movs	r0, #2
 8001adc:	f7fe fe6c 	bl	80007b8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001ae0:	4b8e      	ldr	r3, [pc, #568]	; (8001d1c <menu+0x4d8>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	f040 82b5 	bne.w	8002054 <menu+0x810>
		if(dilSecim == 0) {
 8001aea:	4b89      	ldr	r3, [pc, #548]	; (8001d10 <menu+0x4cc>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d105      	bne.n	8001afe <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001af2:	4a8b      	ldr	r2, [pc, #556]	; (8001d20 <menu+0x4dc>)
 8001af4:	2101      	movs	r1, #1
 8001af6:	2001      	movs	r0, #1
 8001af8:	f7fe fe5e 	bl	80007b8 <lcd_print>
 8001afc:	e008      	b.n	8001b10 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001afe:	4b84      	ldr	r3, [pc, #528]	; (8001d10 <menu+0x4cc>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d104      	bne.n	8001b10 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001b06:	4a87      	ldr	r2, [pc, #540]	; (8001d24 <menu+0x4e0>)
 8001b08:	2101      	movs	r1, #1
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f7fe fe54 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001b10:	4b85      	ldr	r3, [pc, #532]	; (8001d28 <menu+0x4e4>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d123      	bne.n	8001b60 <menu+0x31c>
			if(dilSecim == 0) {
 8001b18:	4b7d      	ldr	r3, [pc, #500]	; (8001d10 <menu+0x4cc>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d105      	bne.n	8001b2c <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001b20:	4a82      	ldr	r2, [pc, #520]	; (8001d2c <menu+0x4e8>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	2002      	movs	r0, #2
 8001b26:	f7fe fe47 	bl	80007b8 <lcd_print>
 8001b2a:	e008      	b.n	8001b3e <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001b2c:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <menu+0x4cc>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d104      	bne.n	8001b3e <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001b34:	4a7e      	ldr	r2, [pc, #504]	; (8001d30 <menu+0x4ec>)
 8001b36:	2101      	movs	r1, #1
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f7fe fe3d 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001b3e:	4a7d      	ldr	r2, [pc, #500]	; (8001d34 <menu+0x4f0>)
 8001b40:	210f      	movs	r1, #15
 8001b42:	2002      	movs	r0, #2
 8001b44:	f7fe fe38 	bl	80007b8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001b48:	4b7b      	ldr	r3, [pc, #492]	; (8001d38 <menu+0x4f4>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	220a      	movs	r2, #10
 8001b4e:	497b      	ldr	r1, [pc, #492]	; (8001d3c <menu+0x4f8>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f00b f9f3 	bl	800cf3c <itoa>
			lcd_print(2, 14, snum);
 8001b56:	4a79      	ldr	r2, [pc, #484]	; (8001d3c <menu+0x4f8>)
 8001b58:	210e      	movs	r1, #14
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f7fe fe2c 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001b60:	4b71      	ldr	r3, [pc, #452]	; (8001d28 <menu+0x4e4>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d123      	bne.n	8001bb0 <menu+0x36c>
			if(dilSecim == 0) {
 8001b68:	4b69      	ldr	r3, [pc, #420]	; (8001d10 <menu+0x4cc>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001b70:	4a73      	ldr	r2, [pc, #460]	; (8001d40 <menu+0x4fc>)
 8001b72:	2101      	movs	r1, #1
 8001b74:	2002      	movs	r0, #2
 8001b76:	f7fe fe1f 	bl	80007b8 <lcd_print>
 8001b7a:	e008      	b.n	8001b8e <menu+0x34a>
			} else if(dilSecim == 1) {
 8001b7c:	4b64      	ldr	r3, [pc, #400]	; (8001d10 <menu+0x4cc>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d104      	bne.n	8001b8e <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001b84:	4a6f      	ldr	r2, [pc, #444]	; (8001d44 <menu+0x500>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7fe fe15 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b8e:	4a6e      	ldr	r2, [pc, #440]	; (8001d48 <menu+0x504>)
 8001b90:	210f      	movs	r1, #15
 8001b92:	2002      	movs	r0, #2
 8001b94:	f7fe fe10 	bl	80007b8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001b98:	4b6c      	ldr	r3, [pc, #432]	; (8001d4c <menu+0x508>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	220a      	movs	r2, #10
 8001b9e:	4967      	ldr	r1, [pc, #412]	; (8001d3c <menu+0x4f8>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00b f9cb 	bl	800cf3c <itoa>
			lcd_print(2, 14, snum);
 8001ba6:	4a65      	ldr	r2, [pc, #404]	; (8001d3c <menu+0x4f8>)
 8001ba8:	210e      	movs	r1, #14
 8001baa:	2002      	movs	r0, #2
 8001bac:	f7fe fe04 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001bb0:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <menu+0x4e4>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d123      	bne.n	8001c00 <menu+0x3bc>
			if(dilSecim == 0) {
 8001bb8:	4b55      	ldr	r3, [pc, #340]	; (8001d10 <menu+0x4cc>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d105      	bne.n	8001bcc <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001bc0:	4a63      	ldr	r2, [pc, #396]	; (8001d50 <menu+0x50c>)
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f7fe fdf7 	bl	80007b8 <lcd_print>
 8001bca:	e008      	b.n	8001bde <menu+0x39a>
			} else if(dilSecim == 1) {
 8001bcc:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <menu+0x4cc>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d104      	bne.n	8001bde <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001bd4:	4a5f      	ldr	r2, [pc, #380]	; (8001d54 <menu+0x510>)
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f7fe fded 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001bde:	4a5a      	ldr	r2, [pc, #360]	; (8001d48 <menu+0x504>)
 8001be0:	210f      	movs	r1, #15
 8001be2:	2002      	movs	r0, #2
 8001be4:	f7fe fde8 	bl	80007b8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001be8:	4b5b      	ldr	r3, [pc, #364]	; (8001d58 <menu+0x514>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	220a      	movs	r2, #10
 8001bee:	4953      	ldr	r1, [pc, #332]	; (8001d3c <menu+0x4f8>)
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00b f9a3 	bl	800cf3c <itoa>
			lcd_print(2, 14, snum);
 8001bf6:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <menu+0x4f8>)
 8001bf8:	210e      	movs	r1, #14
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	f7fe fddc 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001c00:	4b49      	ldr	r3, [pc, #292]	; (8001d28 <menu+0x4e4>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d123      	bne.n	8001c50 <menu+0x40c>
			if(dilSecim == 0) {
 8001c08:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <menu+0x4cc>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d105      	bne.n	8001c1c <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001c10:	4a52      	ldr	r2, [pc, #328]	; (8001d5c <menu+0x518>)
 8001c12:	2101      	movs	r1, #1
 8001c14:	2002      	movs	r0, #2
 8001c16:	f7fe fdcf 	bl	80007b8 <lcd_print>
 8001c1a:	e008      	b.n	8001c2e <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001c1c:	4b3c      	ldr	r3, [pc, #240]	; (8001d10 <menu+0x4cc>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d104      	bne.n	8001c2e <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001c24:	4a4e      	ldr	r2, [pc, #312]	; (8001d60 <menu+0x51c>)
 8001c26:	2101      	movs	r1, #1
 8001c28:	2002      	movs	r0, #2
 8001c2a:	f7fe fdc5 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001c2e:	4a46      	ldr	r2, [pc, #280]	; (8001d48 <menu+0x504>)
 8001c30:	210f      	movs	r1, #15
 8001c32:	2002      	movs	r0, #2
 8001c34:	f7fe fdc0 	bl	80007b8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001c38:	4b4a      	ldr	r3, [pc, #296]	; (8001d64 <menu+0x520>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	220a      	movs	r2, #10
 8001c3e:	493f      	ldr	r1, [pc, #252]	; (8001d3c <menu+0x4f8>)
 8001c40:	4618      	mov	r0, r3
 8001c42:	f00b f97b 	bl	800cf3c <itoa>
			lcd_print(2, 14, snum);
 8001c46:	4a3d      	ldr	r2, [pc, #244]	; (8001d3c <menu+0x4f8>)
 8001c48:	210e      	movs	r1, #14
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	f7fe fdb4 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001c50:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <menu+0x4e4>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d123      	bne.n	8001ca0 <menu+0x45c>
			if(dilSecim == 0) {
 8001c58:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <menu+0x4cc>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001c60:	4a41      	ldr	r2, [pc, #260]	; (8001d68 <menu+0x524>)
 8001c62:	2101      	movs	r1, #1
 8001c64:	2002      	movs	r0, #2
 8001c66:	f7fe fda7 	bl	80007b8 <lcd_print>
 8001c6a:	e008      	b.n	8001c7e <menu+0x43a>
			} else if(dilSecim == 1) {
 8001c6c:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <menu+0x4cc>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d104      	bne.n	8001c7e <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001c74:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <menu+0x528>)
 8001c76:	2101      	movs	r1, #1
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f7fe fd9d 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001c7e:	4a32      	ldr	r2, [pc, #200]	; (8001d48 <menu+0x504>)
 8001c80:	210f      	movs	r1, #15
 8001c82:	2002      	movs	r0, #2
 8001c84:	f7fe fd98 	bl	80007b8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001c88:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <menu+0x52c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	220a      	movs	r2, #10
 8001c8e:	492b      	ldr	r1, [pc, #172]	; (8001d3c <menu+0x4f8>)
 8001c90:	4618      	mov	r0, r3
 8001c92:	f00b f953 	bl	800cf3c <itoa>
			lcd_print(2, 14, snum);
 8001c96:	4a29      	ldr	r2, [pc, #164]	; (8001d3c <menu+0x4f8>)
 8001c98:	210e      	movs	r1, #14
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	f7fe fd8c 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <menu+0x4e4>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b05      	cmp	r3, #5
 8001ca6:	d123      	bne.n	8001cf0 <menu+0x4ac>
			if(dilSecim == 0) {
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <menu+0x4cc>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001cb0:	4a30      	ldr	r2, [pc, #192]	; (8001d74 <menu+0x530>)
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	f7fe fd7f 	bl	80007b8 <lcd_print>
 8001cba:	e008      	b.n	8001cce <menu+0x48a>
			} else if(dilSecim == 1) {
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <menu+0x4cc>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d104      	bne.n	8001cce <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001cc4:	4a2c      	ldr	r2, [pc, #176]	; (8001d78 <menu+0x534>)
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	2002      	movs	r0, #2
 8001cca:	f7fe fd75 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001cce:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <menu+0x504>)
 8001cd0:	210f      	movs	r1, #15
 8001cd2:	2002      	movs	r0, #2
 8001cd4:	f7fe fd70 	bl	80007b8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001cd8:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <menu+0x538>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	220a      	movs	r2, #10
 8001cde:	4917      	ldr	r1, [pc, #92]	; (8001d3c <menu+0x4f8>)
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f00b f92b 	bl	800cf3c <itoa>
			lcd_print(2, 14, snum);
 8001ce6:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <menu+0x4f8>)
 8001ce8:	210e      	movs	r1, #14
 8001cea:	2002      	movs	r0, #2
 8001cec:	f7fe fd64 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <menu+0x4e4>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b06      	cmp	r3, #6
 8001cf6:	d15f      	bne.n	8001db8 <menu+0x574>
			if(dilSecim == 0) {
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <menu+0x4cc>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d141      	bne.n	8001d84 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001d00:	4a1f      	ldr	r2, [pc, #124]	; (8001d80 <menu+0x53c>)
 8001d02:	2101      	movs	r1, #1
 8001d04:	2002      	movs	r0, #2
 8001d06:	f7fe fd57 	bl	80007b8 <lcd_print>
 8001d0a:	e044      	b.n	8001d96 <menu+0x552>
 8001d0c:	0800dc14 	.word	0x0800dc14
 8001d10:	20000d51 	.word	0x20000d51
 8001d14:	0800dc28 	.word	0x0800dc28
 8001d18:	0800dc3c 	.word	0x0800dc3c
 8001d1c:	20000d30 	.word	0x20000d30
 8001d20:	0800dc50 	.word	0x0800dc50
 8001d24:	0800dc64 	.word	0x0800dc64
 8001d28:	20000d32 	.word	0x20000d32
 8001d2c:	0800dc78 	.word	0x0800dc78
 8001d30:	0800dc88 	.word	0x0800dc88
 8001d34:	0800dc98 	.word	0x0800dc98
 8001d38:	20000d52 	.word	0x20000d52
 8001d3c:	20000ca8 	.word	0x20000ca8
 8001d40:	0800dc9c 	.word	0x0800dc9c
 8001d44:	0800dcac 	.word	0x0800dcac
 8001d48:	0800dcbc 	.word	0x0800dcbc
 8001d4c:	20000d53 	.word	0x20000d53
 8001d50:	0800dcc0 	.word	0x0800dcc0
 8001d54:	0800dcd0 	.word	0x0800dcd0
 8001d58:	20000d54 	.word	0x20000d54
 8001d5c:	0800dce0 	.word	0x0800dce0
 8001d60:	0800dcf0 	.word	0x0800dcf0
 8001d64:	20000d55 	.word	0x20000d55
 8001d68:	0800dd00 	.word	0x0800dd00
 8001d6c:	0800dd10 	.word	0x0800dd10
 8001d70:	20000d56 	.word	0x20000d56
 8001d74:	0800dd20 	.word	0x0800dd20
 8001d78:	0800dd30 	.word	0x0800dd30
 8001d7c:	20000d57 	.word	0x20000d57
 8001d80:	0800dd40 	.word	0x0800dd40
			} else if(dilSecim == 1) {
 8001d84:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <menu+0x680>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d104      	bne.n	8001d96 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001d8c:	4a4e      	ldr	r2, [pc, #312]	; (8001ec8 <menu+0x684>)
 8001d8e:	2101      	movs	r1, #1
 8001d90:	2002      	movs	r0, #2
 8001d92:	f7fe fd11 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001d96:	4a4d      	ldr	r2, [pc, #308]	; (8001ecc <menu+0x688>)
 8001d98:	210f      	movs	r1, #15
 8001d9a:	2002      	movs	r0, #2
 8001d9c:	f7fe fd0c 	bl	80007b8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001da0:	4b4b      	ldr	r3, [pc, #300]	; (8001ed0 <menu+0x68c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	220a      	movs	r2, #10
 8001da6:	494b      	ldr	r1, [pc, #300]	; (8001ed4 <menu+0x690>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f00b f8c7 	bl	800cf3c <itoa>
			lcd_print(2, 14, snum);
 8001dae:	4a49      	ldr	r2, [pc, #292]	; (8001ed4 <menu+0x690>)
 8001db0:	210e      	movs	r1, #14
 8001db2:	2002      	movs	r0, #2
 8001db4:	f7fe fd00 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001db8:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <menu+0x694>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b07      	cmp	r3, #7
 8001dbe:	d123      	bne.n	8001e08 <menu+0x5c4>
			if(dilSecim == 0) {
 8001dc0:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <menu+0x680>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001dc8:	4a44      	ldr	r2, [pc, #272]	; (8001edc <menu+0x698>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f7fe fcf3 	bl	80007b8 <lcd_print>
 8001dd2:	e008      	b.n	8001de6 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001dd4:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <menu+0x680>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d104      	bne.n	8001de6 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001ddc:	4a40      	ldr	r2, [pc, #256]	; (8001ee0 <menu+0x69c>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	2002      	movs	r0, #2
 8001de2:	f7fe fce9 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001de6:	4a39      	ldr	r2, [pc, #228]	; (8001ecc <menu+0x688>)
 8001de8:	210f      	movs	r1, #15
 8001dea:	2002      	movs	r0, #2
 8001dec:	f7fe fce4 	bl	80007b8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001df0:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <menu+0x6a0>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	220a      	movs	r2, #10
 8001df6:	4937      	ldr	r1, [pc, #220]	; (8001ed4 <menu+0x690>)
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f00b f89f 	bl	800cf3c <itoa>
			lcd_print(2, 14, snum);
 8001dfe:	4a35      	ldr	r2, [pc, #212]	; (8001ed4 <menu+0x690>)
 8001e00:	210e      	movs	r1, #14
 8001e02:	2002      	movs	r0, #2
 8001e04:	f7fe fcd8 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001e08:	4b33      	ldr	r3, [pc, #204]	; (8001ed8 <menu+0x694>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d123      	bne.n	8001e58 <menu+0x614>
			if(dilSecim == 0) {
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <menu+0x680>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d105      	bne.n	8001e24 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001e18:	4a33      	ldr	r2, [pc, #204]	; (8001ee8 <menu+0x6a4>)
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	2002      	movs	r0, #2
 8001e1e:	f7fe fccb 	bl	80007b8 <lcd_print>
 8001e22:	e008      	b.n	8001e36 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <menu+0x680>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d104      	bne.n	8001e36 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001e2c:	4a2f      	ldr	r2, [pc, #188]	; (8001eec <menu+0x6a8>)
 8001e2e:	2101      	movs	r1, #1
 8001e30:	2002      	movs	r0, #2
 8001e32:	f7fe fcc1 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001e36:	4a25      	ldr	r2, [pc, #148]	; (8001ecc <menu+0x688>)
 8001e38:	210f      	movs	r1, #15
 8001e3a:	2002      	movs	r0, #2
 8001e3c:	f7fe fcbc 	bl	80007b8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001e40:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <menu+0x6ac>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	220a      	movs	r2, #10
 8001e46:	4923      	ldr	r1, [pc, #140]	; (8001ed4 <menu+0x690>)
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f00b f877 	bl	800cf3c <itoa>
			lcd_print(2, 14, snum);
 8001e4e:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <menu+0x690>)
 8001e50:	210e      	movs	r1, #14
 8001e52:	2002      	movs	r0, #2
 8001e54:	f7fe fcb0 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001e58:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <menu+0x694>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b09      	cmp	r3, #9
 8001e5e:	d123      	bne.n	8001ea8 <menu+0x664>
			if(dilSecim == 0) {
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <menu+0x680>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d105      	bne.n	8001e74 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001e68:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <menu+0x6b0>)
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	f7fe fca3 	bl	80007b8 <lcd_print>
 8001e72:	e008      	b.n	8001e86 <menu+0x642>
			} else if(dilSecim == 1) {
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <menu+0x680>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d104      	bne.n	8001e86 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <menu+0x6b4>)
 8001e7e:	2101      	movs	r1, #1
 8001e80:	2002      	movs	r0, #2
 8001e82:	f7fe fc99 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001e86:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <menu+0x6b8>)
 8001e88:	2110      	movs	r1, #16
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	f7fe fc94 	bl	80007b8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001e90:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <menu+0x6bc>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	220a      	movs	r2, #10
 8001e96:	490f      	ldr	r1, [pc, #60]	; (8001ed4 <menu+0x690>)
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00b f84f 	bl	800cf3c <itoa>
			lcd_print(2, 15, snum);
 8001e9e:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <menu+0x690>)
 8001ea0:	210f      	movs	r1, #15
 8001ea2:	2002      	movs	r0, #2
 8001ea4:	f7fe fc88 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <menu+0x694>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b0a      	cmp	r3, #10
 8001eae:	d134      	bne.n	8001f1a <menu+0x6d6>
			if(dilSecim == 0) {
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <menu+0x680>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d127      	bne.n	8001f08 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001eb8:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <menu+0x6c0>)
 8001eba:	2101      	movs	r1, #1
 8001ebc:	2002      	movs	r0, #2
 8001ebe:	f7fe fc7b 	bl	80007b8 <lcd_print>
 8001ec2:	e02a      	b.n	8001f1a <menu+0x6d6>
 8001ec4:	20000d51 	.word	0x20000d51
 8001ec8:	0800dd50 	.word	0x0800dd50
 8001ecc:	0800dcbc 	.word	0x0800dcbc
 8001ed0:	20000d58 	.word	0x20000d58
 8001ed4:	20000ca8 	.word	0x20000ca8
 8001ed8:	20000d32 	.word	0x20000d32
 8001edc:	0800dd60 	.word	0x0800dd60
 8001ee0:	0800dd70 	.word	0x0800dd70
 8001ee4:	20000d59 	.word	0x20000d59
 8001ee8:	0800dd80 	.word	0x0800dd80
 8001eec:	0800dd90 	.word	0x0800dd90
 8001ef0:	20000d5a 	.word	0x20000d5a
 8001ef4:	0800dda0 	.word	0x0800dda0
 8001ef8:	0800ddb0 	.word	0x0800ddb0
 8001efc:	0800ddc0 	.word	0x0800ddc0
 8001f00:	20000d5b 	.word	0x20000d5b
 8001f04:	0800ddc4 	.word	0x0800ddc4
			} else if(dilSecim == 1) {
 8001f08:	4b82      	ldr	r3, [pc, #520]	; (8002114 <menu+0x8d0>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d104      	bne.n	8001f1a <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001f10:	4a81      	ldr	r2, [pc, #516]	; (8002118 <menu+0x8d4>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	2002      	movs	r0, #2
 8001f16:	f7fe fc4f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f1a:	2102      	movs	r1, #2
 8001f1c:	487f      	ldr	r0, [pc, #508]	; (800211c <menu+0x8d8>)
 8001f1e:	f007 ffe1 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d119      	bne.n	8001f5c <menu+0x718>
 8001f28:	4b7d      	ldr	r3, [pc, #500]	; (8002120 <menu+0x8dc>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	f083 0301 	eor.w	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d012      	beq.n	8001f5c <menu+0x718>
 8001f36:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <menu+0x8e0>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10e      	bne.n	8001f5c <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001f3e:	4b7a      	ldr	r3, [pc, #488]	; (8002128 <menu+0x8e4>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4b78      	ldr	r3, [pc, #480]	; (8002128 <menu+0x8e4>)
 8001f48:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001f4a:	4b77      	ldr	r3, [pc, #476]	; (8002128 <menu+0x8e4>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b0a      	cmp	r3, #10
 8001f50:	d902      	bls.n	8001f58 <menu+0x714>
				hataGostermeSirasi = 0;
 8001f52:	4b75      	ldr	r3, [pc, #468]	; (8002128 <menu+0x8e4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f58:	f004 f9f2 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	486f      	ldr	r0, [pc, #444]	; (800211c <menu+0x8d8>)
 8001f60:	f007 ffc0 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d119      	bne.n	8001f9e <menu+0x75a>
 8001f6a:	4b6d      	ldr	r3, [pc, #436]	; (8002120 <menu+0x8dc>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d012      	beq.n	8001f9e <menu+0x75a>
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <menu+0x8e0>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10e      	bne.n	8001f9e <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001f80:	4b69      	ldr	r3, [pc, #420]	; (8002128 <menu+0x8e4>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b67      	ldr	r3, [pc, #412]	; (8002128 <menu+0x8e4>)
 8001f8a:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001f8c:	4b66      	ldr	r3, [pc, #408]	; (8002128 <menu+0x8e4>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b0b      	cmp	r3, #11
 8001f92:	d902      	bls.n	8001f9a <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001f94:	4b64      	ldr	r3, [pc, #400]	; (8002128 <menu+0x8e4>)
 8001f96:	220a      	movs	r2, #10
 8001f98:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001f9a:	f004 f9d1 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001f9e:	2108      	movs	r1, #8
 8001fa0:	485e      	ldr	r0, [pc, #376]	; (800211c <menu+0x8d8>)
 8001fa2:	f007 ff9f 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d153      	bne.n	8002054 <menu+0x810>
 8001fac:	4b5c      	ldr	r3, [pc, #368]	; (8002120 <menu+0x8dc>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	f083 0301 	eor.w	r3, r3, #1
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d04c      	beq.n	8002054 <menu+0x810>
 8001fba:	4b5b      	ldr	r3, [pc, #364]	; (8002128 <menu+0x8e4>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b0a      	cmp	r3, #10
 8001fc0:	d148      	bne.n	8002054 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001fc2:	4b5a      	ldr	r3, [pc, #360]	; (800212c <menu+0x8e8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
 8001fc8:	4b59      	ldr	r3, [pc, #356]	; (8002130 <menu+0x8ec>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001fd0:	4b58      	ldr	r3, [pc, #352]	; (8002134 <menu+0x8f0>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
 8001fd6:	4b56      	ldr	r3, [pc, #344]	; (8002130 <menu+0x8ec>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001fde:	4b56      	ldr	r3, [pc, #344]	; (8002138 <menu+0x8f4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	4b52      	ldr	r3, [pc, #328]	; (8002130 <menu+0x8ec>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001fec:	4b53      	ldr	r3, [pc, #332]	; (800213c <menu+0x8f8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
 8001ff2:	4b4f      	ldr	r3, [pc, #316]	; (8002130 <menu+0x8ec>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001ffa:	4b51      	ldr	r3, [pc, #324]	; (8002140 <menu+0x8fc>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	4b4b      	ldr	r3, [pc, #300]	; (8002130 <menu+0x8ec>)
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8002008:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <menu+0x900>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
 800200e:	4b48      	ldr	r3, [pc, #288]	; (8002130 <menu+0x8ec>)
 8002010:	2200      	movs	r2, #0
 8002012:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8002016:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <menu+0x904>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	4b44      	ldr	r3, [pc, #272]	; (8002130 <menu+0x8ec>)
 800201e:	2200      	movs	r2, #0
 8002020:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8002024:	4b49      	ldr	r3, [pc, #292]	; (800214c <menu+0x908>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	4b41      	ldr	r3, [pc, #260]	; (8002130 <menu+0x8ec>)
 800202c:	2200      	movs	r2, #0
 800202e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8002032:	4b47      	ldr	r3, [pc, #284]	; (8002150 <menu+0x90c>)
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <menu+0x8ec>)
 800203a:	2200      	movs	r2, #0
 800203c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8002040:	4b44      	ldr	r3, [pc, #272]	; (8002154 <menu+0x910>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <menu+0x8ec>)
 8002048:	2200      	movs	r2, #0
 800204a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 800204e:	4b42      	ldr	r3, [pc, #264]	; (8002158 <menu+0x914>)
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8002054:	4b41      	ldr	r3, [pc, #260]	; (800215c <menu+0x918>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b02      	cmp	r3, #2
 800205a:	f040 80fc 	bne.w	8002256 <menu+0xa12>
		if(dilSecim == 0) {
 800205e:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <menu+0x8d0>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d105      	bne.n	8002072 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8002066:	4a3e      	ldr	r2, [pc, #248]	; (8002160 <menu+0x91c>)
 8002068:	2101      	movs	r1, #1
 800206a:	2001      	movs	r0, #1
 800206c:	f7fe fba4 	bl	80007b8 <lcd_print>
 8002070:	e008      	b.n	8002084 <menu+0x840>
		} else if(dilSecim == 1) {
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <menu+0x8d0>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d104      	bne.n	8002084 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 800207a:	4a3a      	ldr	r2, [pc, #232]	; (8002164 <menu+0x920>)
 800207c:	2101      	movs	r1, #1
 800207e:	2001      	movs	r0, #1
 8002080:	f7fe fb9a 	bl	80007b8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <menu+0x8e0>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d003      	beq.n	8002094 <menu+0x850>
 800208c:	4b25      	ldr	r3, [pc, #148]	; (8002124 <menu+0x8e0>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d112      	bne.n	80020ba <menu+0x876>
			if(dilSecim == 0) {
 8002094:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <menu+0x8d0>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 800209c:	4a32      	ldr	r2, [pc, #200]	; (8002168 <menu+0x924>)
 800209e:	2101      	movs	r1, #1
 80020a0:	2002      	movs	r0, #2
 80020a2:	f7fe fb89 	bl	80007b8 <lcd_print>
 80020a6:	e008      	b.n	80020ba <menu+0x876>
			} else if(dilSecim == 1) {
 80020a8:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <menu+0x8d0>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d104      	bne.n	80020ba <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 80020b0:	4a2e      	ldr	r2, [pc, #184]	; (800216c <menu+0x928>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	2002      	movs	r0, #2
 80020b6:	f7fe fb7f 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 80020ba:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <menu+0x92c>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d116      	bne.n	80020f0 <menu+0x8ac>
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <menu+0x8e0>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d112      	bne.n	80020f0 <menu+0x8ac>
			if(dilSecim == 0) {
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <menu+0x8d0>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d105      	bne.n	80020de <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 80020d2:	4a28      	ldr	r2, [pc, #160]	; (8002174 <menu+0x930>)
 80020d4:	2101      	movs	r1, #1
 80020d6:	2002      	movs	r0, #2
 80020d8:	f7fe fb6e 	bl	80007b8 <lcd_print>
 80020dc:	e008      	b.n	80020f0 <menu+0x8ac>
			} else if(dilSecim == 1) {
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <menu+0x8d0>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d104      	bne.n	80020f0 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 80020e6:	4a24      	ldr	r2, [pc, #144]	; (8002178 <menu+0x934>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	2002      	movs	r0, #2
 80020ec:	f7fe fb64 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 80020f0:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <menu+0x92c>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d14c      	bne.n	8002192 <menu+0x94e>
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <menu+0x8e0>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d148      	bne.n	8002192 <menu+0x94e>
			if(dilSecim == 0) {
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <menu+0x8d0>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d13b      	bne.n	8002180 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8002108:	4a1c      	ldr	r2, [pc, #112]	; (800217c <menu+0x938>)
 800210a:	2101      	movs	r1, #1
 800210c:	2002      	movs	r0, #2
 800210e:	f7fe fb53 	bl	80007b8 <lcd_print>
 8002112:	e03e      	b.n	8002192 <menu+0x94e>
 8002114:	20000d51 	.word	0x20000d51
 8002118:	0800ddd8 	.word	0x0800ddd8
 800211c:	40010800 	.word	0x40010800
 8002120:	20000d5f 	.word	0x20000d5f
 8002124:	20000d3f 	.word	0x20000d3f
 8002128:	20000d32 	.word	0x20000d32
 800212c:	20000d52 	.word	0x20000d52
 8002130:	20000c38 	.word	0x20000c38
 8002134:	20000d53 	.word	0x20000d53
 8002138:	20000d54 	.word	0x20000d54
 800213c:	20000d55 	.word	0x20000d55
 8002140:	20000d56 	.word	0x20000d56
 8002144:	20000d57 	.word	0x20000d57
 8002148:	20000d58 	.word	0x20000d58
 800214c:	20000d59 	.word	0x20000d59
 8002150:	20000d5a 	.word	0x20000d5a
 8002154:	20000d5b 	.word	0x20000d5b
 8002158:	20000d5c 	.word	0x20000d5c
 800215c:	20000d30 	.word	0x20000d30
 8002160:	0800ddec 	.word	0x0800ddec
 8002164:	0800de00 	.word	0x0800de00
 8002168:	0800de14 	.word	0x0800de14
 800216c:	0800de28 	.word	0x0800de28
 8002170:	20000d31 	.word	0x20000d31
 8002174:	0800de3c 	.word	0x0800de3c
 8002178:	0800de4c 	.word	0x0800de4c
 800217c:	0800de5c 	.word	0x0800de5c
			} else if(dilSecim == 1) {
 8002180:	4b98      	ldr	r3, [pc, #608]	; (80023e4 <menu+0xba0>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d104      	bne.n	8002192 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8002188:	4a97      	ldr	r2, [pc, #604]	; (80023e8 <menu+0xba4>)
 800218a:	2101      	movs	r1, #1
 800218c:	2002      	movs	r0, #2
 800218e:	f7fe fb13 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8002192:	2102      	movs	r1, #2
 8002194:	4895      	ldr	r0, [pc, #596]	; (80023ec <menu+0xba8>)
 8002196:	f007 fea5 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800219a:	4603      	mov	r3, r0
 800219c:	2b01      	cmp	r3, #1
 800219e:	d119      	bne.n	80021d4 <menu+0x990>
 80021a0:	4b93      	ldr	r3, [pc, #588]	; (80023f0 <menu+0xbac>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	f083 0301 	eor.w	r3, r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d012      	beq.n	80021d4 <menu+0x990>
 80021ae:	4b91      	ldr	r3, [pc, #580]	; (80023f4 <menu+0xbb0>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10e      	bne.n	80021d4 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 80021b6:	4b90      	ldr	r3, [pc, #576]	; (80023f8 <menu+0xbb4>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	3301      	adds	r3, #1
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4b8e      	ldr	r3, [pc, #568]	; (80023f8 <menu+0xbb4>)
 80021c0:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80021c2:	4b8d      	ldr	r3, [pc, #564]	; (80023f8 <menu+0xbb4>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d902      	bls.n	80021d0 <menu+0x98c>
				calismaSekli = 0;
 80021ca:	4b8b      	ldr	r3, [pc, #556]	; (80023f8 <menu+0xbb4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021d0:	f004 f8b6 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80021d4:	2104      	movs	r1, #4
 80021d6:	4885      	ldr	r0, [pc, #532]	; (80023ec <menu+0xba8>)
 80021d8:	f007 fe84 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d119      	bne.n	8002216 <menu+0x9d2>
 80021e2:	4b83      	ldr	r3, [pc, #524]	; (80023f0 <menu+0xbac>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	f083 0301 	eor.w	r3, r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d012      	beq.n	8002216 <menu+0x9d2>
 80021f0:	4b80      	ldr	r3, [pc, #512]	; (80023f4 <menu+0xbb0>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10e      	bne.n	8002216 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 80021f8:	4b7f      	ldr	r3, [pc, #508]	; (80023f8 <menu+0xbb4>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b7d      	ldr	r3, [pc, #500]	; (80023f8 <menu+0xbb4>)
 8002202:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8002204:	4b7c      	ldr	r3, [pc, #496]	; (80023f8 <menu+0xbb4>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <menu+0x9ce>
	    		calismaSekli = 1;
 800220c:	4b7a      	ldr	r3, [pc, #488]	; (80023f8 <menu+0xbb4>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8002212:	f004 f895 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002216:	2108      	movs	r1, #8
 8002218:	4874      	ldr	r0, [pc, #464]	; (80023ec <menu+0xba8>)
 800221a:	f007 fe63 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800221e:	4603      	mov	r3, r0
 8002220:	2b01      	cmp	r3, #1
 8002222:	d118      	bne.n	8002256 <menu+0xa12>
 8002224:	4b72      	ldr	r3, [pc, #456]	; (80023f0 <menu+0xbac>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	f083 0301 	eor.w	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d011      	beq.n	8002256 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8002232:	4b71      	ldr	r3, [pc, #452]	; (80023f8 <menu+0xbb4>)
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	4b71      	ldr	r3, [pc, #452]	; (80023fc <menu+0xbb8>)
 8002238:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 800223a:	4b6f      	ldr	r3, [pc, #444]	; (80023f8 <menu+0xbb4>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d106      	bne.n	8002250 <menu+0xa0c>
				altLimit = 1;
 8002242:	4b6f      	ldr	r3, [pc, #444]	; (8002400 <menu+0xbbc>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002248:	4b6d      	ldr	r3, [pc, #436]	; (8002400 <menu+0xbbc>)
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	4b6b      	ldr	r3, [pc, #428]	; (80023fc <menu+0xbb8>)
 800224e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002250:	4b6c      	ldr	r3, [pc, #432]	; (8002404 <menu+0xbc0>)
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8002256:	4b6c      	ldr	r3, [pc, #432]	; (8002408 <menu+0xbc4>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b03      	cmp	r3, #3
 800225c:	f040 8083 	bne.w	8002366 <menu+0xb22>
		if(dilSecim == 0) {
 8002260:	4b60      	ldr	r3, [pc, #384]	; (80023e4 <menu+0xba0>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d105      	bne.n	8002274 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8002268:	4a68      	ldr	r2, [pc, #416]	; (800240c <menu+0xbc8>)
 800226a:	2101      	movs	r1, #1
 800226c:	2001      	movs	r0, #1
 800226e:	f7fe faa3 	bl	80007b8 <lcd_print>
 8002272:	e008      	b.n	8002286 <menu+0xa42>
		} else if(dilSecim == 1) {
 8002274:	4b5b      	ldr	r3, [pc, #364]	; (80023e4 <menu+0xba0>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d104      	bne.n	8002286 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 800227c:	4a64      	ldr	r2, [pc, #400]	; (8002410 <menu+0xbcc>)
 800227e:	2101      	movs	r1, #1
 8002280:	2001      	movs	r0, #1
 8002282:	f7fe fa99 	bl	80007b8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8002286:	4b63      	ldr	r3, [pc, #396]	; (8002414 <menu+0xbd0>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d113      	bne.n	80022b6 <menu+0xa72>
			if(dilSecim == 0) {
 800228e:	4b55      	ldr	r3, [pc, #340]	; (80023e4 <menu+0xba0>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d105      	bne.n	80022a2 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8002296:	4a60      	ldr	r2, [pc, #384]	; (8002418 <menu+0xbd4>)
 8002298:	2101      	movs	r1, #1
 800229a:	2002      	movs	r0, #2
 800229c:	f7fe fa8c 	bl	80007b8 <lcd_print>
 80022a0:	e012      	b.n	80022c8 <menu+0xa84>
			} else if(dilSecim == 1) {
 80022a2:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <menu+0xba0>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d10e      	bne.n	80022c8 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 80022aa:	4a5c      	ldr	r2, [pc, #368]	; (800241c <menu+0xbd8>)
 80022ac:	2101      	movs	r1, #1
 80022ae:	2002      	movs	r0, #2
 80022b0:	f7fe fa82 	bl	80007b8 <lcd_print>
 80022b4:	e008      	b.n	80022c8 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 80022b6:	4b57      	ldr	r3, [pc, #348]	; (8002414 <menu+0xbd0>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d104      	bne.n	80022c8 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 80022be:	4a58      	ldr	r2, [pc, #352]	; (8002420 <menu+0xbdc>)
 80022c0:	2101      	movs	r1, #1
 80022c2:	2002      	movs	r0, #2
 80022c4:	f7fe fa78 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022c8:	2102      	movs	r1, #2
 80022ca:	4848      	ldr	r0, [pc, #288]	; (80023ec <menu+0xba8>)
 80022cc:	f007 fe0a 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d115      	bne.n	8002302 <menu+0xabe>
 80022d6:	4b46      	ldr	r3, [pc, #280]	; (80023f0 <menu+0xbac>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	f083 0301 	eor.w	r3, r3, #1
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00e      	beq.n	8002302 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 80022e4:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <menu+0xbd0>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b49      	ldr	r3, [pc, #292]	; (8002414 <menu+0xbd0>)
 80022ee:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 80022f0:	4b48      	ldr	r3, [pc, #288]	; (8002414 <menu+0xbd0>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d902      	bls.n	80022fe <menu+0xaba>
				emniyetCercevesi = 0;
 80022f8:	4b46      	ldr	r3, [pc, #280]	; (8002414 <menu+0xbd0>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022fe:	f004 f81f 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002302:	2104      	movs	r1, #4
 8002304:	4839      	ldr	r0, [pc, #228]	; (80023ec <menu+0xba8>)
 8002306:	f007 fded 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800230a:	4603      	mov	r3, r0
 800230c:	2b01      	cmp	r3, #1
 800230e:	d115      	bne.n	800233c <menu+0xaf8>
 8002310:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <menu+0xbac>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f083 0301 	eor.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00e      	beq.n	800233c <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <menu+0xbd0>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	3b01      	subs	r3, #1
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <menu+0xbd0>)
 8002328:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 800232a:	4b3a      	ldr	r3, [pc, #232]	; (8002414 <menu+0xbd0>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8002332:	4b38      	ldr	r3, [pc, #224]	; (8002414 <menu+0xbd0>)
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002338:	f004 f802 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 800233c:	2108      	movs	r1, #8
 800233e:	482b      	ldr	r0, [pc, #172]	; (80023ec <menu+0xba8>)
 8002340:	f007 fdd0 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002344:	4603      	mov	r3, r0
 8002346:	2b01      	cmp	r3, #1
 8002348:	d10d      	bne.n	8002366 <menu+0xb22>
 800234a:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <menu+0xbac>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	f083 0301 	eor.w	r3, r3, #1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8002358:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <menu+0xbd0>)
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	4b27      	ldr	r3, [pc, #156]	; (80023fc <menu+0xbb8>)
 800235e:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <menu+0xbc0>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8002366:	4b28      	ldr	r3, [pc, #160]	; (8002408 <menu+0xbc4>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b04      	cmp	r3, #4
 800236c:	f040 80ba 	bne.w	80024e4 <menu+0xca0>
		if(dilSecim == 0) {
 8002370:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <menu+0xba0>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8002378:	4a2a      	ldr	r2, [pc, #168]	; (8002424 <menu+0xbe0>)
 800237a:	2101      	movs	r1, #1
 800237c:	2001      	movs	r0, #1
 800237e:	f7fe fa1b 	bl	80007b8 <lcd_print>
 8002382:	e008      	b.n	8002396 <menu+0xb52>
		} else if(dilSecim == 1) {
 8002384:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <menu+0xba0>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d104      	bne.n	8002396 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 800238c:	4a26      	ldr	r2, [pc, #152]	; (8002428 <menu+0xbe4>)
 800238e:	2101      	movs	r1, #1
 8002390:	2001      	movs	r0, #1
 8002392:	f7fe fa11 	bl	80007b8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8002396:	4b25      	ldr	r3, [pc, #148]	; (800242c <menu+0xbe8>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d113      	bne.n	80023c6 <menu+0xb82>
			if(dilSecim == 0) {
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <menu+0xba0>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d105      	bne.n	80023b2 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 80023a6:	4a1c      	ldr	r2, [pc, #112]	; (8002418 <menu+0xbd4>)
 80023a8:	2101      	movs	r1, #1
 80023aa:	2002      	movs	r0, #2
 80023ac:	f7fe fa04 	bl	80007b8 <lcd_print>
 80023b0:	e049      	b.n	8002446 <menu+0xc02>
			} else if(dilSecim == 1) {
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <menu+0xba0>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d145      	bne.n	8002446 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 80023ba:	4a18      	ldr	r2, [pc, #96]	; (800241c <menu+0xbd8>)
 80023bc:	2101      	movs	r1, #1
 80023be:	2002      	movs	r0, #2
 80023c0:	f7fe f9fa 	bl	80007b8 <lcd_print>
 80023c4:	e03f      	b.n	8002446 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <menu+0xbe8>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d13b      	bne.n	8002446 <menu+0xc02>
			if(dilSecim == 0) {
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <menu+0xba0>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d12e      	bne.n	8002434 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 80023d6:	4a16      	ldr	r2, [pc, #88]	; (8002430 <menu+0xbec>)
 80023d8:	2101      	movs	r1, #1
 80023da:	2002      	movs	r0, #2
 80023dc:	f7fe f9ec 	bl	80007b8 <lcd_print>
 80023e0:	e031      	b.n	8002446 <menu+0xc02>
 80023e2:	bf00      	nop
 80023e4:	20000d51 	.word	0x20000d51
 80023e8:	0800de6c 	.word	0x0800de6c
 80023ec:	40010800 	.word	0x40010800
 80023f0:	20000d5f 	.word	0x20000d5f
 80023f4:	20000d3f 	.word	0x20000d3f
 80023f8:	20000d31 	.word	0x20000d31
 80023fc:	20000c38 	.word	0x20000c38
 8002400:	20000d36 	.word	0x20000d36
 8002404:	20000d5c 	.word	0x20000d5c
 8002408:	20000d30 	.word	0x20000d30
 800240c:	0800de7c 	.word	0x0800de7c
 8002410:	0800de90 	.word	0x0800de90
 8002414:	20000d34 	.word	0x20000d34
 8002418:	0800dea4 	.word	0x0800dea4
 800241c:	0800deb8 	.word	0x0800deb8
 8002420:	0800decc 	.word	0x0800decc
 8002424:	0800dedc 	.word	0x0800dedc
 8002428:	0800def0 	.word	0x0800def0
 800242c:	20000d35 	.word	0x20000d35
 8002430:	0800df04 	.word	0x0800df04
			} else if(dilSecim == 1) {
 8002434:	4b92      	ldr	r3, [pc, #584]	; (8002680 <menu+0xe3c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d104      	bne.n	8002446 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 800243c:	4a91      	ldr	r2, [pc, #580]	; (8002684 <menu+0xe40>)
 800243e:	2101      	movs	r1, #1
 8002440:	2002      	movs	r0, #2
 8002442:	f7fe f9b9 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002446:	2102      	movs	r1, #2
 8002448:	488f      	ldr	r0, [pc, #572]	; (8002688 <menu+0xe44>)
 800244a:	f007 fd4b 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800244e:	4603      	mov	r3, r0
 8002450:	2b01      	cmp	r3, #1
 8002452:	d115      	bne.n	8002480 <menu+0xc3c>
 8002454:	4b8d      	ldr	r3, [pc, #564]	; (800268c <menu+0xe48>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	f083 0301 	eor.w	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00e      	beq.n	8002480 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002462:	4b8b      	ldr	r3, [pc, #556]	; (8002690 <menu+0xe4c>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4b89      	ldr	r3, [pc, #548]	; (8002690 <menu+0xe4c>)
 800246c:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 800246e:	4b88      	ldr	r3, [pc, #544]	; (8002690 <menu+0xe4c>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d902      	bls.n	800247c <menu+0xc38>
				yavaslamaLimit = 0;
 8002476:	4b86      	ldr	r3, [pc, #536]	; (8002690 <menu+0xe4c>)
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800247c:	f003 ff60 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002480:	2104      	movs	r1, #4
 8002482:	4881      	ldr	r0, [pc, #516]	; (8002688 <menu+0xe44>)
 8002484:	f007 fd2e 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002488:	4603      	mov	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	d115      	bne.n	80024ba <menu+0xc76>
 800248e:	4b7f      	ldr	r3, [pc, #508]	; (800268c <menu+0xe48>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	f083 0301 	eor.w	r3, r3, #1
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00e      	beq.n	80024ba <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 800249c:	4b7c      	ldr	r3, [pc, #496]	; (8002690 <menu+0xe4c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b7a      	ldr	r3, [pc, #488]	; (8002690 <menu+0xe4c>)
 80024a6:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80024a8:	4b79      	ldr	r3, [pc, #484]	; (8002690 <menu+0xe4c>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <menu+0xc72>
		   		yavaslamaLimit = 1;
 80024b0:	4b77      	ldr	r3, [pc, #476]	; (8002690 <menu+0xe4c>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024b6:	f003 ff43 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ba:	2108      	movs	r1, #8
 80024bc:	4872      	ldr	r0, [pc, #456]	; (8002688 <menu+0xe44>)
 80024be:	f007 fd11 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d10d      	bne.n	80024e4 <menu+0xca0>
 80024c8:	4b70      	ldr	r3, [pc, #448]	; (800268c <menu+0xe48>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	f083 0301 	eor.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 80024d6:	4b6e      	ldr	r3, [pc, #440]	; (8002690 <menu+0xe4c>)
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	4b6e      	ldr	r3, [pc, #440]	; (8002694 <menu+0xe50>)
 80024dc:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80024de:	4b6e      	ldr	r3, [pc, #440]	; (8002698 <menu+0xe54>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80024e4:	4b6d      	ldr	r3, [pc, #436]	; (800269c <menu+0xe58>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b05      	cmp	r3, #5
 80024ea:	f040 80b9 	bne.w	8002660 <menu+0xe1c>
		if(dilSecim == 0) {
 80024ee:	4b64      	ldr	r3, [pc, #400]	; (8002680 <menu+0xe3c>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d105      	bne.n	8002502 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 80024f6:	4a6a      	ldr	r2, [pc, #424]	; (80026a0 <menu+0xe5c>)
 80024f8:	2101      	movs	r1, #1
 80024fa:	2001      	movs	r0, #1
 80024fc:	f7fe f95c 	bl	80007b8 <lcd_print>
 8002500:	e008      	b.n	8002514 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8002502:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <menu+0xe3c>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d104      	bne.n	8002514 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800250a:	4a66      	ldr	r2, [pc, #408]	; (80026a4 <menu+0xe60>)
 800250c:	2101      	movs	r1, #1
 800250e:	2001      	movs	r0, #1
 8002510:	f7fe f952 	bl	80007b8 <lcd_print>
		}

		if(altLimit == 0) {
 8002514:	4b64      	ldr	r3, [pc, #400]	; (80026a8 <menu+0xe64>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d113      	bne.n	8002544 <menu+0xd00>
			if(dilSecim == 0) {
 800251c:	4b58      	ldr	r3, [pc, #352]	; (8002680 <menu+0xe3c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002524:	4a61      	ldr	r2, [pc, #388]	; (80026ac <menu+0xe68>)
 8002526:	2101      	movs	r1, #1
 8002528:	2002      	movs	r0, #2
 800252a:	f7fe f945 	bl	80007b8 <lcd_print>
 800252e:	e020      	b.n	8002572 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8002530:	4b53      	ldr	r3, [pc, #332]	; (8002680 <menu+0xe3c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d11c      	bne.n	8002572 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8002538:	4a5d      	ldr	r2, [pc, #372]	; (80026b0 <menu+0xe6c>)
 800253a:	2101      	movs	r1, #1
 800253c:	2002      	movs	r0, #2
 800253e:	f7fe f93b 	bl	80007b8 <lcd_print>
 8002542:	e016      	b.n	8002572 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8002544:	4b58      	ldr	r3, [pc, #352]	; (80026a8 <menu+0xe64>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d112      	bne.n	8002572 <menu+0xd2e>
			if(dilSecim == 0){
 800254c:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <menu+0xe3c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002554:	4a57      	ldr	r2, [pc, #348]	; (80026b4 <menu+0xe70>)
 8002556:	2101      	movs	r1, #1
 8002558:	2002      	movs	r0, #2
 800255a:	f7fe f92d 	bl	80007b8 <lcd_print>
 800255e:	e008      	b.n	8002572 <menu+0xd2e>
			} else if(dilSecim == 1){
 8002560:	4b47      	ldr	r3, [pc, #284]	; (8002680 <menu+0xe3c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d104      	bne.n	8002572 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002568:	4a46      	ldr	r2, [pc, #280]	; (8002684 <menu+0xe40>)
 800256a:	2101      	movs	r1, #1
 800256c:	2002      	movs	r0, #2
 800256e:	f7fe f923 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002572:	2102      	movs	r1, #2
 8002574:	4844      	ldr	r0, [pc, #272]	; (8002688 <menu+0xe44>)
 8002576:	f007 fcb5 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800257a:	4603      	mov	r3, r0
 800257c:	2b01      	cmp	r3, #1
 800257e:	d119      	bne.n	80025b4 <menu+0xd70>
 8002580:	4b42      	ldr	r3, [pc, #264]	; (800268c <menu+0xe48>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	f083 0301 	eor.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d012      	beq.n	80025b4 <menu+0xd70>
 800258e:	4b4a      	ldr	r3, [pc, #296]	; (80026b8 <menu+0xe74>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10e      	bne.n	80025b4 <menu+0xd70>
			altLimit = altLimit + 1;
 8002596:	4b44      	ldr	r3, [pc, #272]	; (80026a8 <menu+0xe64>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <menu+0xe64>)
 80025a0:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80025a2:	4b41      	ldr	r3, [pc, #260]	; (80026a8 <menu+0xe64>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d902      	bls.n	80025b0 <menu+0xd6c>
				altLimit = 0;
 80025aa:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <menu+0xe64>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025b0:	f003 fec6 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80025b4:	2104      	movs	r1, #4
 80025b6:	4834      	ldr	r0, [pc, #208]	; (8002688 <menu+0xe44>)
 80025b8:	f007 fc94 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d119      	bne.n	80025f6 <menu+0xdb2>
 80025c2:	4b32      	ldr	r3, [pc, #200]	; (800268c <menu+0xe48>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	f083 0301 	eor.w	r3, r3, #1
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d012      	beq.n	80025f6 <menu+0xdb2>
 80025d0:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <menu+0xe74>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10e      	bne.n	80025f6 <menu+0xdb2>
			altLimit = altLimit - 1;
 80025d8:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <menu+0xe64>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	3b01      	subs	r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <menu+0xe64>)
 80025e2:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80025e4:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <menu+0xe64>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <menu+0xdae>
		   		altLimit = 1;
 80025ec:	4b2e      	ldr	r3, [pc, #184]	; (80026a8 <menu+0xe64>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025f2:	f003 fea5 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025f6:	2108      	movs	r1, #8
 80025f8:	4823      	ldr	r0, [pc, #140]	; (8002688 <menu+0xe44>)
 80025fa:	f007 fc73 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b01      	cmp	r3, #1
 8002602:	d12d      	bne.n	8002660 <menu+0xe1c>
 8002604:	4b21      	ldr	r3, [pc, #132]	; (800268c <menu+0xe48>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	f083 0301 	eor.w	r3, r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d026      	beq.n	8002660 <menu+0xe1c>
			eepromData[5] = altLimit;
 8002612:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <menu+0xe64>)
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <menu+0xe50>)
 8002618:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800261a:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <menu+0xe64>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d110      	bne.n	8002644 <menu+0xe00>
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <menu+0xe78>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <menu+0xdee>
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <menu+0xe78>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d108      	bne.n	8002644 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8002632:	4b22      	ldr	r3, [pc, #136]	; (80026bc <menu+0xe78>)
 8002634:	2203      	movs	r2, #3
 8002636:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002638:	4b20      	ldr	r3, [pc, #128]	; (80026bc <menu+0xe78>)
 800263a:	781a      	ldrb	r2, [r3, #0]
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <menu+0xe50>)
 800263e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002642:	e00a      	b.n	800265a <menu+0xe16>
			} else if(altLimit == 0) {
 8002644:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <menu+0xe64>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <menu+0xe16>
				platformSilindirTipi = 0;
 800264c:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <menu+0xe7c>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <menu+0xe7c>)
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <menu+0xe50>)
 8002658:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <menu+0xe54>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <menu+0xe58>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b06      	cmp	r3, #6
 8002666:	f040 80b6 	bne.w	80027d6 <menu+0xf92>
		if(dilSecim == 0) {
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <menu+0xe3c>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d12a      	bne.n	80026c8 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002672:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <menu+0xe80>)
 8002674:	2101      	movs	r1, #1
 8002676:	2001      	movs	r0, #1
 8002678:	f7fe f89e 	bl	80007b8 <lcd_print>
 800267c:	e02d      	b.n	80026da <menu+0xe96>
 800267e:	bf00      	nop
 8002680:	20000d51 	.word	0x20000d51
 8002684:	0800df18 	.word	0x0800df18
 8002688:	40010800 	.word	0x40010800
 800268c:	20000d5f 	.word	0x20000d5f
 8002690:	20000d35 	.word	0x20000d35
 8002694:	20000c38 	.word	0x20000c38
 8002698:	20000d5c 	.word	0x20000d5c
 800269c:	20000d30 	.word	0x20000d30
 80026a0:	0800df2c 	.word	0x0800df2c
 80026a4:	0800df40 	.word	0x0800df40
 80026a8:	20000d36 	.word	0x20000d36
 80026ac:	0800dea4 	.word	0x0800dea4
 80026b0:	0800deb8 	.word	0x0800deb8
 80026b4:	0800df04 	.word	0x0800df04
 80026b8:	20000d31 	.word	0x20000d31
 80026bc:	20000d3d 	.word	0x20000d3d
 80026c0:	20000d43 	.word	0x20000d43
 80026c4:	0800df54 	.word	0x0800df54
		} else if(dilSecim == 1){
 80026c8:	4b7a      	ldr	r3, [pc, #488]	; (80028b4 <menu+0x1070>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d104      	bne.n	80026da <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80026d0:	4a79      	ldr	r2, [pc, #484]	; (80028b8 <menu+0x1074>)
 80026d2:	2101      	movs	r1, #1
 80026d4:	2001      	movs	r0, #1
 80026d6:	f7fe f86f 	bl	80007b8 <lcd_print>
		}
		if(basincSalteri == 0){
 80026da:	4b78      	ldr	r3, [pc, #480]	; (80028bc <menu+0x1078>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d113      	bne.n	800270a <menu+0xec6>
			if(dilSecim == 0) {
 80026e2:	4b74      	ldr	r3, [pc, #464]	; (80028b4 <menu+0x1070>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80026ea:	4a75      	ldr	r2, [pc, #468]	; (80028c0 <menu+0x107c>)
 80026ec:	2101      	movs	r1, #1
 80026ee:	2002      	movs	r0, #2
 80026f0:	f7fe f862 	bl	80007b8 <lcd_print>
 80026f4:	e020      	b.n	8002738 <menu+0xef4>
			} else if(dilSecim == 1){
 80026f6:	4b6f      	ldr	r3, [pc, #444]	; (80028b4 <menu+0x1070>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d11c      	bne.n	8002738 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80026fe:	4a71      	ldr	r2, [pc, #452]	; (80028c4 <menu+0x1080>)
 8002700:	2101      	movs	r1, #1
 8002702:	2002      	movs	r0, #2
 8002704:	f7fe f858 	bl	80007b8 <lcd_print>
 8002708:	e016      	b.n	8002738 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800270a:	4b6c      	ldr	r3, [pc, #432]	; (80028bc <menu+0x1078>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d112      	bne.n	8002738 <menu+0xef4>
			if(dilSecim == 0) {
 8002712:	4b68      	ldr	r3, [pc, #416]	; (80028b4 <menu+0x1070>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800271a:	4a6b      	ldr	r2, [pc, #428]	; (80028c8 <menu+0x1084>)
 800271c:	2101      	movs	r1, #1
 800271e:	2002      	movs	r0, #2
 8002720:	f7fe f84a 	bl	80007b8 <lcd_print>
 8002724:	e008      	b.n	8002738 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002726:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <menu+0x1070>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d104      	bne.n	8002738 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800272e:	4a67      	ldr	r2, [pc, #412]	; (80028cc <menu+0x1088>)
 8002730:	2101      	movs	r1, #1
 8002732:	2002      	movs	r0, #2
 8002734:	f7fe f840 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002738:	2102      	movs	r1, #2
 800273a:	4865      	ldr	r0, [pc, #404]	; (80028d0 <menu+0x108c>)
 800273c:	f007 fbd2 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002740:	4603      	mov	r3, r0
 8002742:	2b01      	cmp	r3, #1
 8002744:	d115      	bne.n	8002772 <menu+0xf2e>
 8002746:	4b63      	ldr	r3, [pc, #396]	; (80028d4 <menu+0x1090>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	f083 0301 	eor.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00e      	beq.n	8002772 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002754:	4b59      	ldr	r3, [pc, #356]	; (80028bc <menu+0x1078>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	3301      	adds	r3, #1
 800275a:	b2da      	uxtb	r2, r3
 800275c:	4b57      	ldr	r3, [pc, #348]	; (80028bc <menu+0x1078>)
 800275e:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002760:	4b56      	ldr	r3, [pc, #344]	; (80028bc <menu+0x1078>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d902      	bls.n	800276e <menu+0xf2a>
				basincSalteri = 0;
 8002768:	4b54      	ldr	r3, [pc, #336]	; (80028bc <menu+0x1078>)
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800276e:	f003 fde7 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002772:	2104      	movs	r1, #4
 8002774:	4856      	ldr	r0, [pc, #344]	; (80028d0 <menu+0x108c>)
 8002776:	f007 fbb5 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800277a:	4603      	mov	r3, r0
 800277c:	2b01      	cmp	r3, #1
 800277e:	d115      	bne.n	80027ac <menu+0xf68>
 8002780:	4b54      	ldr	r3, [pc, #336]	; (80028d4 <menu+0x1090>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	f083 0301 	eor.w	r3, r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00e      	beq.n	80027ac <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800278e:	4b4b      	ldr	r3, [pc, #300]	; (80028bc <menu+0x1078>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	3b01      	subs	r3, #1
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4b49      	ldr	r3, [pc, #292]	; (80028bc <menu+0x1078>)
 8002798:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800279a:	4b48      	ldr	r3, [pc, #288]	; (80028bc <menu+0x1078>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <menu+0xf64>
		   		basincSalteri = 1;
 80027a2:	4b46      	ldr	r3, [pc, #280]	; (80028bc <menu+0x1078>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027a8:	f003 fdca 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ac:	2108      	movs	r1, #8
 80027ae:	4848      	ldr	r0, [pc, #288]	; (80028d0 <menu+0x108c>)
 80027b0:	f007 fb98 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d10d      	bne.n	80027d6 <menu+0xf92>
 80027ba:	4b46      	ldr	r3, [pc, #280]	; (80028d4 <menu+0x1090>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	f083 0301 	eor.w	r3, r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d006      	beq.n	80027d6 <menu+0xf92>
			eepromData[6] = basincSalteri;
 80027c8:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <menu+0x1078>)
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	4b42      	ldr	r3, [pc, #264]	; (80028d8 <menu+0x1094>)
 80027ce:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80027d0:	4b42      	ldr	r3, [pc, #264]	; (80028dc <menu+0x1098>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80027d6:	4b42      	ldr	r3, [pc, #264]	; (80028e0 <menu+0x109c>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b07      	cmp	r3, #7
 80027dc:	f040 80f5 	bne.w	80029ca <menu+0x1186>
		if(dilSecim == 0) {
 80027e0:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <menu+0x1070>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d105      	bne.n	80027f4 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80027e8:	4a3e      	ldr	r2, [pc, #248]	; (80028e4 <menu+0x10a0>)
 80027ea:	2101      	movs	r1, #1
 80027ec:	2001      	movs	r0, #1
 80027ee:	f7fd ffe3 	bl	80007b8 <lcd_print>
 80027f2:	e008      	b.n	8002806 <menu+0xfc2>
		} else if(dilSecim == 1){
 80027f4:	4b2f      	ldr	r3, [pc, #188]	; (80028b4 <menu+0x1070>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d104      	bne.n	8002806 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80027fc:	4a3a      	ldr	r2, [pc, #232]	; (80028e8 <menu+0x10a4>)
 80027fe:	2101      	movs	r1, #1
 8002800:	2001      	movs	r0, #1
 8002802:	f7fd ffd9 	bl	80007b8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002806:	4b39      	ldr	r3, [pc, #228]	; (80028ec <menu+0x10a8>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d113      	bne.n	8002836 <menu+0xff2>
			if(dilSecim == 0) {
 800280e:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <menu+0x1070>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d105      	bne.n	8002822 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002816:	4a2a      	ldr	r2, [pc, #168]	; (80028c0 <menu+0x107c>)
 8002818:	2101      	movs	r1, #1
 800281a:	2002      	movs	r0, #2
 800281c:	f7fd ffcc 	bl	80007b8 <lcd_print>
 8002820:	e079      	b.n	8002916 <menu+0x10d2>
			} else if(dilSecim == 1){
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <menu+0x1070>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d175      	bne.n	8002916 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800282a:	4a26      	ldr	r2, [pc, #152]	; (80028c4 <menu+0x1080>)
 800282c:	2101      	movs	r1, #1
 800282e:	2002      	movs	r0, #2
 8002830:	f7fd ffc2 	bl	80007b8 <lcd_print>
 8002834:	e06f      	b.n	8002916 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002836:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <menu+0x10a8>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d113      	bne.n	8002866 <menu+0x1022>
			if(dilSecim == 0) {
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <menu+0x1070>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d105      	bne.n	8002852 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002846:	4a2a      	ldr	r2, [pc, #168]	; (80028f0 <menu+0x10ac>)
 8002848:	2101      	movs	r1, #1
 800284a:	2002      	movs	r0, #2
 800284c:	f7fd ffb4 	bl	80007b8 <lcd_print>
 8002850:	e061      	b.n	8002916 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002852:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <menu+0x1070>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d15d      	bne.n	8002916 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800285a:	4a26      	ldr	r2, [pc, #152]	; (80028f4 <menu+0x10b0>)
 800285c:	2101      	movs	r1, #1
 800285e:	2002      	movs	r0, #2
 8002860:	f7fd ffaa 	bl	80007b8 <lcd_print>
 8002864:	e057      	b.n	8002916 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <menu+0x10a8>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d113      	bne.n	8002896 <menu+0x1052>
			if(dilSecim == 0) {
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <menu+0x1070>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002876:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <menu+0x10b4>)
 8002878:	2101      	movs	r1, #1
 800287a:	2002      	movs	r0, #2
 800287c:	f7fd ff9c 	bl	80007b8 <lcd_print>
 8002880:	e049      	b.n	8002916 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <menu+0x1070>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d145      	bne.n	8002916 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <menu+0x10b8>)
 800288c:	2101      	movs	r1, #1
 800288e:	2002      	movs	r0, #2
 8002890:	f7fd ff92 	bl	80007b8 <lcd_print>
 8002894:	e03f      	b.n	8002916 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <menu+0x10a8>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d13b      	bne.n	8002916 <menu+0x10d2>
			if(dilSecim == 0) {
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <menu+0x1070>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d12e      	bne.n	8002904 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80028a6:	4a16      	ldr	r2, [pc, #88]	; (8002900 <menu+0x10bc>)
 80028a8:	2101      	movs	r1, #1
 80028aa:	2002      	movs	r0, #2
 80028ac:	f7fd ff84 	bl	80007b8 <lcd_print>
 80028b0:	e031      	b.n	8002916 <menu+0x10d2>
 80028b2:	bf00      	nop
 80028b4:	20000d51 	.word	0x20000d51
 80028b8:	0800df64 	.word	0x0800df64
 80028bc:	20000d37 	.word	0x20000d37
 80028c0:	0800dea4 	.word	0x0800dea4
 80028c4:	0800deb8 	.word	0x0800deb8
 80028c8:	0800df04 	.word	0x0800df04
 80028cc:	0800df18 	.word	0x0800df18
 80028d0:	40010800 	.word	0x40010800
 80028d4:	20000d5f 	.word	0x20000d5f
 80028d8:	20000c38 	.word	0x20000c38
 80028dc:	20000d5c 	.word	0x20000d5c
 80028e0:	20000d30 	.word	0x20000d30
 80028e4:	0800df74 	.word	0x0800df74
 80028e8:	0800df88 	.word	0x0800df88
 80028ec:	20000d38 	.word	0x20000d38
 80028f0:	0800df9c 	.word	0x0800df9c
 80028f4:	0800dfb0 	.word	0x0800dfb0
 80028f8:	0800dfc4 	.word	0x0800dfc4
 80028fc:	0800dfd8 	.word	0x0800dfd8
 8002900:	0800dfec 	.word	0x0800dfec
			} else if(dilSecim == 1){
 8002904:	4b99      	ldr	r3, [pc, #612]	; (8002b6c <menu+0x1328>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d104      	bne.n	8002916 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 800290c:	4a98      	ldr	r2, [pc, #608]	; (8002b70 <menu+0x132c>)
 800290e:	2101      	movs	r1, #1
 8002910:	2002      	movs	r0, #2
 8002912:	f7fd ff51 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002916:	2102      	movs	r1, #2
 8002918:	4896      	ldr	r0, [pc, #600]	; (8002b74 <menu+0x1330>)
 800291a:	f007 fae3 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800291e:	4603      	mov	r3, r0
 8002920:	2b01      	cmp	r3, #1
 8002922:	d115      	bne.n	8002950 <menu+0x110c>
 8002924:	4b94      	ldr	r3, [pc, #592]	; (8002b78 <menu+0x1334>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	f083 0301 	eor.w	r3, r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00e      	beq.n	8002950 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002932:	4b92      	ldr	r3, [pc, #584]	; (8002b7c <menu+0x1338>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	3301      	adds	r3, #1
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4b90      	ldr	r3, [pc, #576]	; (8002b7c <menu+0x1338>)
 800293c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800293e:	4b8f      	ldr	r3, [pc, #572]	; (8002b7c <menu+0x1338>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d902      	bls.n	800294c <menu+0x1108>
				kapiSecimleri = 0;
 8002946:	4b8d      	ldr	r3, [pc, #564]	; (8002b7c <menu+0x1338>)
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800294c:	f003 fcf8 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002950:	2104      	movs	r1, #4
 8002952:	4888      	ldr	r0, [pc, #544]	; (8002b74 <menu+0x1330>)
 8002954:	f007 fac6 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002958:	4603      	mov	r3, r0
 800295a:	2b01      	cmp	r3, #1
 800295c:	d115      	bne.n	800298a <menu+0x1146>
 800295e:	4b86      	ldr	r3, [pc, #536]	; (8002b78 <menu+0x1334>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	f083 0301 	eor.w	r3, r3, #1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00e      	beq.n	800298a <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 800296c:	4b83      	ldr	r3, [pc, #524]	; (8002b7c <menu+0x1338>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	3b01      	subs	r3, #1
 8002972:	b2da      	uxtb	r2, r3
 8002974:	4b81      	ldr	r3, [pc, #516]	; (8002b7c <menu+0x1338>)
 8002976:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002978:	4b80      	ldr	r3, [pc, #512]	; (8002b7c <menu+0x1338>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b04      	cmp	r3, #4
 800297e:	d902      	bls.n	8002986 <menu+0x1142>
		   		kapiSecimleri = 3;
 8002980:	4b7e      	ldr	r3, [pc, #504]	; (8002b7c <menu+0x1338>)
 8002982:	2203      	movs	r2, #3
 8002984:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002986:	f003 fcdb 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800298a:	2108      	movs	r1, #8
 800298c:	4879      	ldr	r0, [pc, #484]	; (8002b74 <menu+0x1330>)
 800298e:	f007 faa9 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002992:	4603      	mov	r3, r0
 8002994:	2b01      	cmp	r3, #1
 8002996:	d118      	bne.n	80029ca <menu+0x1186>
 8002998:	4b77      	ldr	r3, [pc, #476]	; (8002b78 <menu+0x1334>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	f083 0301 	eor.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d011      	beq.n	80029ca <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80029a6:	4b75      	ldr	r3, [pc, #468]	; (8002b7c <menu+0x1338>)
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	4b75      	ldr	r3, [pc, #468]	; (8002b80 <menu+0x133c>)
 80029ac:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80029ae:	4b73      	ldr	r3, [pc, #460]	; (8002b7c <menu+0x1338>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d006      	beq.n	80029c4 <menu+0x1180>
				altLimit = 1;
 80029b6:	4b73      	ldr	r3, [pc, #460]	; (8002b84 <menu+0x1340>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80029bc:	4b71      	ldr	r3, [pc, #452]	; (8002b84 <menu+0x1340>)
 80029be:	781a      	ldrb	r2, [r3, #0]
 80029c0:	4b6f      	ldr	r3, [pc, #444]	; (8002b80 <menu+0x133c>)
 80029c2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80029c4:	4b70      	ldr	r3, [pc, #448]	; (8002b88 <menu+0x1344>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80029ca:	4b70      	ldr	r3, [pc, #448]	; (8002b8c <menu+0x1348>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	f040 8092 	bne.w	8002af8 <menu+0x12b4>
		if(dilSecim == 0) {
 80029d4:	4b65      	ldr	r3, [pc, #404]	; (8002b6c <menu+0x1328>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80029dc:	4a6c      	ldr	r2, [pc, #432]	; (8002b90 <menu+0x134c>)
 80029de:	2101      	movs	r1, #1
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7fd fee9 	bl	80007b8 <lcd_print>
 80029e6:	e008      	b.n	80029fa <menu+0x11b6>
		} else if(dilSecim == 1) {
 80029e8:	4b60      	ldr	r3, [pc, #384]	; (8002b6c <menu+0x1328>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d104      	bne.n	80029fa <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80029f0:	4a68      	ldr	r2, [pc, #416]	; (8002b94 <menu+0x1350>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	2001      	movs	r0, #1
 80029f6:	f7fd fedf 	bl	80007b8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80029fa:	4b67      	ldr	r3, [pc, #412]	; (8002b98 <menu+0x1354>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d113      	bne.n	8002a2a <menu+0x11e6>
			if(dilSecim == 0) {
 8002a02:	4b5a      	ldr	r3, [pc, #360]	; (8002b6c <menu+0x1328>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002a0a:	4a64      	ldr	r2, [pc, #400]	; (8002b9c <menu+0x1358>)
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	2002      	movs	r0, #2
 8002a10:	f7fd fed2 	bl	80007b8 <lcd_print>
 8002a14:	e020      	b.n	8002a58 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002a16:	4b55      	ldr	r3, [pc, #340]	; (8002b6c <menu+0x1328>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d11c      	bne.n	8002a58 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002a1e:	4a60      	ldr	r2, [pc, #384]	; (8002ba0 <menu+0x135c>)
 8002a20:	2101      	movs	r1, #1
 8002a22:	2002      	movs	r0, #2
 8002a24:	f7fd fec8 	bl	80007b8 <lcd_print>
 8002a28:	e016      	b.n	8002a58 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002a2a:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <menu+0x1354>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d112      	bne.n	8002a58 <menu+0x1214>
			if(dilSecim == 0){
 8002a32:	4b4e      	ldr	r3, [pc, #312]	; (8002b6c <menu+0x1328>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d105      	bne.n	8002a46 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002a3a:	4a5a      	ldr	r2, [pc, #360]	; (8002ba4 <menu+0x1360>)
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	2002      	movs	r0, #2
 8002a40:	f7fd feba 	bl	80007b8 <lcd_print>
 8002a44:	e008      	b.n	8002a58 <menu+0x1214>
			} else if(dilSecim == 1){
 8002a46:	4b49      	ldr	r3, [pc, #292]	; (8002b6c <menu+0x1328>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d104      	bne.n	8002a58 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8002a4e:	4a56      	ldr	r2, [pc, #344]	; (8002ba8 <menu+0x1364>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	2002      	movs	r0, #2
 8002a54:	f7fd feb0 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a58:	2102      	movs	r1, #2
 8002a5a:	4846      	ldr	r0, [pc, #280]	; (8002b74 <menu+0x1330>)
 8002a5c:	f007 fa42 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d115      	bne.n	8002a92 <menu+0x124e>
 8002a66:	4b44      	ldr	r3, [pc, #272]	; (8002b78 <menu+0x1334>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	f083 0301 	eor.w	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00e      	beq.n	8002a92 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002a74:	4b48      	ldr	r3, [pc, #288]	; (8002b98 <menu+0x1354>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <menu+0x1354>)
 8002a7e:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002a80:	4b45      	ldr	r3, [pc, #276]	; (8002b98 <menu+0x1354>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d902      	bls.n	8002a8e <menu+0x124a>
				kapiAcTipi = 0;
 8002a88:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <menu+0x1354>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a8e:	f003 fc57 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a92:	2104      	movs	r1, #4
 8002a94:	4837      	ldr	r0, [pc, #220]	; (8002b74 <menu+0x1330>)
 8002a96:	f007 fa25 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d115      	bne.n	8002acc <menu+0x1288>
 8002aa0:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <menu+0x1334>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	f083 0301 	eor.w	r3, r3, #1
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00e      	beq.n	8002acc <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002aae:	4b3a      	ldr	r3, [pc, #232]	; (8002b98 <menu+0x1354>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <menu+0x1354>)
 8002ab8:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002aba:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <menu+0x1354>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <menu+0x1284>
		   		kapiAcTipi = 1;
 8002ac2:	4b35      	ldr	r3, [pc, #212]	; (8002b98 <menu+0x1354>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ac8:	f003 fc3a 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002acc:	2108      	movs	r1, #8
 8002ace:	4829      	ldr	r0, [pc, #164]	; (8002b74 <menu+0x1330>)
 8002ad0:	f007 fa08 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d10e      	bne.n	8002af8 <menu+0x12b4>
 8002ada:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <menu+0x1334>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	f083 0301 	eor.w	r3, r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <menu+0x1354>)
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <menu+0x133c>)
 8002aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002af2:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <menu+0x1344>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002af8:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <menu+0x1348>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b09      	cmp	r3, #9
 8002afe:	f040 80b9 	bne.w	8002c74 <menu+0x1430>
		if(dilSecim == 0){
 8002b02:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <menu+0x1328>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d105      	bne.n	8002b16 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002b0a:	4a28      	ldr	r2, [pc, #160]	; (8002bac <menu+0x1368>)
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f7fd fe52 	bl	80007b8 <lcd_print>
 8002b14:	e008      	b.n	8002b28 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <menu+0x1328>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d104      	bne.n	8002b28 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002b1e:	4a24      	ldr	r2, [pc, #144]	; (8002bb0 <menu+0x136c>)
 8002b20:	2101      	movs	r1, #1
 8002b22:	2001      	movs	r0, #1
 8002b24:	f7fd fe48 	bl	80007b8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002b28:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <menu+0x1370>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002b30:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <menu+0x1374>)
 8002b32:	2101      	movs	r1, #1
 8002b34:	2002      	movs	r0, #2
 8002b36:	f7fd fe3f 	bl	80007b8 <lcd_print>
 8002b3a:	e04c      	b.n	8002bd6 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <menu+0x1370>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d13f      	bne.n	8002bc4 <menu+0x1380>
			if(dilSecim == 0){
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <menu+0x1328>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	; (8002bbc <menu+0x1378>)
 8002b4e:	2101      	movs	r1, #1
 8002b50:	2002      	movs	r0, #2
 8002b52:	f7fd fe31 	bl	80007b8 <lcd_print>
 8002b56:	e03e      	b.n	8002bd6 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <menu+0x1328>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d13a      	bne.n	8002bd6 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002b60:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <menu+0x137c>)
 8002b62:	2101      	movs	r1, #1
 8002b64:	2002      	movs	r0, #2
 8002b66:	f7fd fe27 	bl	80007b8 <lcd_print>
 8002b6a:	e034      	b.n	8002bd6 <menu+0x1392>
 8002b6c:	20000d51 	.word	0x20000d51
 8002b70:	0800e000 	.word	0x0800e000
 8002b74:	40010800 	.word	0x40010800
 8002b78:	20000d5f 	.word	0x20000d5f
 8002b7c:	20000d38 	.word	0x20000d38
 8002b80:	20000c38 	.word	0x20000c38
 8002b84:	20000d36 	.word	0x20000d36
 8002b88:	20000d5c 	.word	0x20000d5c
 8002b8c:	20000d30 	.word	0x20000d30
 8002b90:	0800e014 	.word	0x0800e014
 8002b94:	0800e028 	.word	0x0800e028
 8002b98:	20000d3c 	.word	0x20000d3c
 8002b9c:	0800e03c 	.word	0x0800e03c
 8002ba0:	0800e04c 	.word	0x0800e04c
 8002ba4:	0800e05c 	.word	0x0800e05c
 8002ba8:	0800e070 	.word	0x0800e070
 8002bac:	0800e084 	.word	0x0800e084
 8002bb0:	0800e098 	.word	0x0800e098
 8002bb4:	20000d39 	.word	0x20000d39
 8002bb8:	0800e0ac 	.word	0x0800e0ac
 8002bbc:	0800e0c0 	.word	0x0800e0c0
 8002bc0:	0800e0d0 	.word	0x0800e0d0
			}
		} else if(kapi1Tip == 2) {
 8002bc4:	4b8a      	ldr	r3, [pc, #552]	; (8002df0 <menu+0x15ac>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d104      	bne.n	8002bd6 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002bcc:	4a89      	ldr	r2, [pc, #548]	; (8002df4 <menu+0x15b0>)
 8002bce:	2101      	movs	r1, #1
 8002bd0:	2002      	movs	r0, #2
 8002bd2:	f7fd fdf1 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	4887      	ldr	r0, [pc, #540]	; (8002df8 <menu+0x15b4>)
 8002bda:	f007 f983 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d115      	bne.n	8002c10 <menu+0x13cc>
 8002be4:	4b85      	ldr	r3, [pc, #532]	; (8002dfc <menu+0x15b8>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	f083 0301 	eor.w	r3, r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00e      	beq.n	8002c10 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002bf2:	4b7f      	ldr	r3, [pc, #508]	; (8002df0 <menu+0x15ac>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b7d      	ldr	r3, [pc, #500]	; (8002df0 <menu+0x15ac>)
 8002bfc:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002bfe:	4b7c      	ldr	r3, [pc, #496]	; (8002df0 <menu+0x15ac>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d902      	bls.n	8002c0c <menu+0x13c8>
				kapi1Tip = 0;
 8002c06:	4b7a      	ldr	r3, [pc, #488]	; (8002df0 <menu+0x15ac>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c0c:	f003 fb98 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c10:	2104      	movs	r1, #4
 8002c12:	4879      	ldr	r0, [pc, #484]	; (8002df8 <menu+0x15b4>)
 8002c14:	f007 f966 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d115      	bne.n	8002c4a <menu+0x1406>
 8002c1e:	4b77      	ldr	r3, [pc, #476]	; (8002dfc <menu+0x15b8>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	f083 0301 	eor.w	r3, r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00e      	beq.n	8002c4a <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002c2c:	4b70      	ldr	r3, [pc, #448]	; (8002df0 <menu+0x15ac>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	4b6e      	ldr	r3, [pc, #440]	; (8002df0 <menu+0x15ac>)
 8002c36:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002c38:	4b6d      	ldr	r3, [pc, #436]	; (8002df0 <menu+0x15ac>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d902      	bls.n	8002c46 <menu+0x1402>
		   		kapi1Tip = 2;
 8002c40:	4b6b      	ldr	r3, [pc, #428]	; (8002df0 <menu+0x15ac>)
 8002c42:	2202      	movs	r2, #2
 8002c44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c46:	f003 fb7b 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c4a:	2108      	movs	r1, #8
 8002c4c:	486a      	ldr	r0, [pc, #424]	; (8002df8 <menu+0x15b4>)
 8002c4e:	f007 f949 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d10d      	bne.n	8002c74 <menu+0x1430>
 8002c58:	4b68      	ldr	r3, [pc, #416]	; (8002dfc <menu+0x15b8>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	f083 0301 	eor.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002c66:	4b62      	ldr	r3, [pc, #392]	; (8002df0 <menu+0x15ac>)
 8002c68:	781a      	ldrb	r2, [r3, #0]
 8002c6a:	4b65      	ldr	r3, [pc, #404]	; (8002e00 <menu+0x15bc>)
 8002c6c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002c6e:	4b65      	ldr	r3, [pc, #404]	; (8002e04 <menu+0x15c0>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002c74:	4b64      	ldr	r3, [pc, #400]	; (8002e08 <menu+0x15c4>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b0a      	cmp	r3, #10
 8002c7a:	d17f      	bne.n	8002d7c <menu+0x1538>
		if(dilSecim == 0) {
 8002c7c:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <menu+0x15c8>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002c84:	4a62      	ldr	r2, [pc, #392]	; (8002e10 <menu+0x15cc>)
 8002c86:	2101      	movs	r1, #1
 8002c88:	2001      	movs	r0, #1
 8002c8a:	f7fd fd95 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002c8e:	4a61      	ldr	r2, [pc, #388]	; (8002e14 <menu+0x15d0>)
 8002c90:	2101      	movs	r1, #1
 8002c92:	2002      	movs	r0, #2
 8002c94:	f7fd fd90 	bl	80007b8 <lcd_print>
 8002c98:	e00d      	b.n	8002cb6 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002c9a:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <menu+0x15c8>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d109      	bne.n	8002cb6 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002ca2:	4a5d      	ldr	r2, [pc, #372]	; (8002e18 <menu+0x15d4>)
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f7fd fd86 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002cac:	4a5b      	ldr	r2, [pc, #364]	; (8002e1c <menu+0x15d8>)
 8002cae:	2101      	movs	r1, #1
 8002cb0:	2002      	movs	r0, #2
 8002cb2:	f7fd fd81 	bl	80007b8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002cb6:	4b5a      	ldr	r3, [pc, #360]	; (8002e20 <menu+0x15dc>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	220a      	movs	r2, #10
 8002cbc:	4959      	ldr	r1, [pc, #356]	; (8002e24 <menu+0x15e0>)
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f00a f93c 	bl	800cf3c <itoa>
		lcd_print(2,16,snum);
 8002cc4:	4a57      	ldr	r2, [pc, #348]	; (8002e24 <menu+0x15e0>)
 8002cc6:	2110      	movs	r1, #16
 8002cc8:	2002      	movs	r0, #2
 8002cca:	f7fd fd75 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002cce:	2102      	movs	r1, #2
 8002cd0:	4849      	ldr	r0, [pc, #292]	; (8002df8 <menu+0x15b4>)
 8002cd2:	f007 f907 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d119      	bne.n	8002d10 <menu+0x14cc>
 8002cdc:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <menu+0x15b8>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	f083 0301 	eor.w	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d012      	beq.n	8002d10 <menu+0x14cc>
 8002cea:	4b41      	ldr	r3, [pc, #260]	; (8002df0 <menu+0x15ac>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10e      	bne.n	8002d10 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002cf2:	4b4b      	ldr	r3, [pc, #300]	; (8002e20 <menu+0x15dc>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <menu+0x15dc>)
 8002cfc:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002cfe:	4b48      	ldr	r3, [pc, #288]	; (8002e20 <menu+0x15dc>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d902      	bls.n	8002d0c <menu+0x14c8>
				kapi1AcSure = 0;
 8002d06:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <menu+0x15dc>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d0c:	f003 fb18 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002d10:	2104      	movs	r1, #4
 8002d12:	4839      	ldr	r0, [pc, #228]	; (8002df8 <menu+0x15b4>)
 8002d14:	f007 f8e6 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d119      	bne.n	8002d52 <menu+0x150e>
 8002d1e:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <menu+0x15b8>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	f083 0301 	eor.w	r3, r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d012      	beq.n	8002d52 <menu+0x150e>
 8002d2c:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <menu+0x15ac>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10e      	bne.n	8002d52 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002d34:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <menu+0x15dc>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	4b38      	ldr	r3, [pc, #224]	; (8002e20 <menu+0x15dc>)
 8002d3e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002d40:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <menu+0x15dc>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b06      	cmp	r3, #6
 8002d46:	d902      	bls.n	8002d4e <menu+0x150a>
		   		kapi1AcSure = 5;
 8002d48:	4b35      	ldr	r3, [pc, #212]	; (8002e20 <menu+0x15dc>)
 8002d4a:	2205      	movs	r2, #5
 8002d4c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d4e:	f003 faf7 	bl	8006340 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d52:	2108      	movs	r1, #8
 8002d54:	4828      	ldr	r0, [pc, #160]	; (8002df8 <menu+0x15b4>)
 8002d56:	f007 f8c5 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d10d      	bne.n	8002d7c <menu+0x1538>
 8002d60:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <menu+0x15b8>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	f083 0301 	eor.w	r3, r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d006      	beq.n	8002d7c <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002d6e:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <menu+0x15dc>)
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <menu+0x15bc>)
 8002d74:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002d76:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <menu+0x15c0>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002d7c:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <menu+0x15c4>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b0b      	cmp	r3, #11
 8002d82:	f040 80b5 	bne.w	8002ef0 <menu+0x16ac>
		if(dilSecim == 0) {
 8002d86:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <menu+0x15c8>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002d8e:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <menu+0x15e4>)
 8002d90:	2101      	movs	r1, #1
 8002d92:	2001      	movs	r0, #1
 8002d94:	f7fd fd10 	bl	80007b8 <lcd_print>
 8002d98:	e008      	b.n	8002dac <menu+0x1568>
		} else if(dilSecim == 1) {
 8002d9a:	4b1c      	ldr	r3, [pc, #112]	; (8002e0c <menu+0x15c8>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d104      	bne.n	8002dac <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002da2:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <menu+0x15e8>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	2001      	movs	r0, #1
 8002da8:	f7fd fd06 	bl	80007b8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <menu+0x15ec>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d105      	bne.n	8002dc0 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002db4:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <menu+0x15f0>)
 8002db6:	2101      	movs	r1, #1
 8002db8:	2002      	movs	r0, #2
 8002dba:	f7fd fcfd 	bl	80007b8 <lcd_print>
 8002dbe:	e048      	b.n	8002e52 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <menu+0x15ec>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d13b      	bne.n	8002e40 <menu+0x15fc>
			if(dilSecim == 0) {
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <menu+0x15c8>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d105      	bne.n	8002ddc <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002dd0:	4a19      	ldr	r2, [pc, #100]	; (8002e38 <menu+0x15f4>)
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	2002      	movs	r0, #2
 8002dd6:	f7fd fcef 	bl	80007b8 <lcd_print>
 8002dda:	e03a      	b.n	8002e52 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <menu+0x15c8>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d136      	bne.n	8002e52 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002de4:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <menu+0x15f8>)
 8002de6:	2101      	movs	r1, #1
 8002de8:	2002      	movs	r0, #2
 8002dea:	f7fd fce5 	bl	80007b8 <lcd_print>
 8002dee:	e030      	b.n	8002e52 <menu+0x160e>
 8002df0:	20000d39 	.word	0x20000d39
 8002df4:	0800e0e4 	.word	0x0800e0e4
 8002df8:	40010800 	.word	0x40010800
 8002dfc:	20000d5f 	.word	0x20000d5f
 8002e00:	20000c38 	.word	0x20000c38
 8002e04:	20000d5c 	.word	0x20000d5c
 8002e08:	20000d30 	.word	0x20000d30
 8002e0c:	20000d51 	.word	0x20000d51
 8002e10:	0800e0f4 	.word	0x0800e0f4
 8002e14:	0800e108 	.word	0x0800e108
 8002e18:	0800e118 	.word	0x0800e118
 8002e1c:	0800e12c 	.word	0x0800e12c
 8002e20:	20000d49 	.word	0x20000d49
 8002e24:	20000ca8 	.word	0x20000ca8
 8002e28:	0800e13c 	.word	0x0800e13c
 8002e2c:	0800e150 	.word	0x0800e150
 8002e30:	20000d3a 	.word	0x20000d3a
 8002e34:	0800e0ac 	.word	0x0800e0ac
 8002e38:	0800e0c0 	.word	0x0800e0c0
 8002e3c:	0800e0d0 	.word	0x0800e0d0
			}
		} else if(kapi2Tip == 2) {
 8002e40:	4b8a      	ldr	r3, [pc, #552]	; (800306c <menu+0x1828>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d104      	bne.n	8002e52 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002e48:	4a89      	ldr	r2, [pc, #548]	; (8003070 <menu+0x182c>)
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	2002      	movs	r0, #2
 8002e4e:	f7fd fcb3 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e52:	2102      	movs	r1, #2
 8002e54:	4887      	ldr	r0, [pc, #540]	; (8003074 <menu+0x1830>)
 8002e56:	f007 f845 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d115      	bne.n	8002e8c <menu+0x1648>
 8002e60:	4b85      	ldr	r3, [pc, #532]	; (8003078 <menu+0x1834>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	f083 0301 	eor.w	r3, r3, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00e      	beq.n	8002e8c <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002e6e:	4b7f      	ldr	r3, [pc, #508]	; (800306c <menu+0x1828>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4b7d      	ldr	r3, [pc, #500]	; (800306c <menu+0x1828>)
 8002e78:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002e7a:	4b7c      	ldr	r3, [pc, #496]	; (800306c <menu+0x1828>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d902      	bls.n	8002e88 <menu+0x1644>
				kapi2Tip = 0;
 8002e82:	4b7a      	ldr	r3, [pc, #488]	; (800306c <menu+0x1828>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e88:	f003 fa5a 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e8c:	2104      	movs	r1, #4
 8002e8e:	4879      	ldr	r0, [pc, #484]	; (8003074 <menu+0x1830>)
 8002e90:	f007 f828 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d115      	bne.n	8002ec6 <menu+0x1682>
 8002e9a:	4b77      	ldr	r3, [pc, #476]	; (8003078 <menu+0x1834>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	f083 0301 	eor.w	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002ea8:	4b70      	ldr	r3, [pc, #448]	; (800306c <menu+0x1828>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	4b6e      	ldr	r3, [pc, #440]	; (800306c <menu+0x1828>)
 8002eb2:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002eb4:	4b6d      	ldr	r3, [pc, #436]	; (800306c <menu+0x1828>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d902      	bls.n	8002ec2 <menu+0x167e>
		   		kapi2Tip = 2;
 8002ebc:	4b6b      	ldr	r3, [pc, #428]	; (800306c <menu+0x1828>)
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ec2:	f003 fa3d 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ec6:	2108      	movs	r1, #8
 8002ec8:	486a      	ldr	r0, [pc, #424]	; (8003074 <menu+0x1830>)
 8002eca:	f007 f80b 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d10d      	bne.n	8002ef0 <menu+0x16ac>
 8002ed4:	4b68      	ldr	r3, [pc, #416]	; (8003078 <menu+0x1834>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	f083 0301 	eor.w	r3, r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002ee2:	4b62      	ldr	r3, [pc, #392]	; (800306c <menu+0x1828>)
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	4b65      	ldr	r3, [pc, #404]	; (800307c <menu+0x1838>)
 8002ee8:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002eea:	4b65      	ldr	r3, [pc, #404]	; (8003080 <menu+0x183c>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002ef0:	4b64      	ldr	r3, [pc, #400]	; (8003084 <menu+0x1840>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	d17f      	bne.n	8002ff8 <menu+0x17b4>
		if(dilSecim == 0) {
 8002ef8:	4b63      	ldr	r3, [pc, #396]	; (8003088 <menu+0x1844>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002f00:	4a62      	ldr	r2, [pc, #392]	; (800308c <menu+0x1848>)
 8002f02:	2101      	movs	r1, #1
 8002f04:	2001      	movs	r0, #1
 8002f06:	f7fd fc57 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002f0a:	4a61      	ldr	r2, [pc, #388]	; (8003090 <menu+0x184c>)
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	2002      	movs	r0, #2
 8002f10:	f7fd fc52 	bl	80007b8 <lcd_print>
 8002f14:	e00d      	b.n	8002f32 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002f16:	4b5c      	ldr	r3, [pc, #368]	; (8003088 <menu+0x1844>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d109      	bne.n	8002f32 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002f1e:	4a5d      	ldr	r2, [pc, #372]	; (8003094 <menu+0x1850>)
 8002f20:	2101      	movs	r1, #1
 8002f22:	2001      	movs	r0, #1
 8002f24:	f7fd fc48 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002f28:	4a5b      	ldr	r2, [pc, #364]	; (8003098 <menu+0x1854>)
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	2002      	movs	r0, #2
 8002f2e:	f7fd fc43 	bl	80007b8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002f32:	4b5a      	ldr	r3, [pc, #360]	; (800309c <menu+0x1858>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	220a      	movs	r2, #10
 8002f38:	4959      	ldr	r1, [pc, #356]	; (80030a0 <menu+0x185c>)
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f009 fffe 	bl	800cf3c <itoa>
		lcd_print(2,16,snum);
 8002f40:	4a57      	ldr	r2, [pc, #348]	; (80030a0 <menu+0x185c>)
 8002f42:	2110      	movs	r1, #16
 8002f44:	2002      	movs	r0, #2
 8002f46:	f7fd fc37 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002f4a:	2102      	movs	r1, #2
 8002f4c:	4849      	ldr	r0, [pc, #292]	; (8003074 <menu+0x1830>)
 8002f4e:	f006 ffc9 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d119      	bne.n	8002f8c <menu+0x1748>
 8002f58:	4b47      	ldr	r3, [pc, #284]	; (8003078 <menu+0x1834>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	f083 0301 	eor.w	r3, r3, #1
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d012      	beq.n	8002f8c <menu+0x1748>
 8002f66:	4b41      	ldr	r3, [pc, #260]	; (800306c <menu+0x1828>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10e      	bne.n	8002f8c <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002f6e:	4b4b      	ldr	r3, [pc, #300]	; (800309c <menu+0x1858>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	3301      	adds	r3, #1
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4b49      	ldr	r3, [pc, #292]	; (800309c <menu+0x1858>)
 8002f78:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002f7a:	4b48      	ldr	r3, [pc, #288]	; (800309c <menu+0x1858>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b05      	cmp	r3, #5
 8002f80:	d902      	bls.n	8002f88 <menu+0x1744>
				kapi2AcSure = 0;
 8002f82:	4b46      	ldr	r3, [pc, #280]	; (800309c <menu+0x1858>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f88:	f003 f9da 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002f8c:	2104      	movs	r1, #4
 8002f8e:	4839      	ldr	r0, [pc, #228]	; (8003074 <menu+0x1830>)
 8002f90:	f006 ffa8 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d119      	bne.n	8002fce <menu+0x178a>
 8002f9a:	4b37      	ldr	r3, [pc, #220]	; (8003078 <menu+0x1834>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	f083 0301 	eor.w	r3, r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d012      	beq.n	8002fce <menu+0x178a>
 8002fa8:	4b30      	ldr	r3, [pc, #192]	; (800306c <menu+0x1828>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10e      	bne.n	8002fce <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002fb0:	4b3a      	ldr	r3, [pc, #232]	; (800309c <menu+0x1858>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	4b38      	ldr	r3, [pc, #224]	; (800309c <menu+0x1858>)
 8002fba:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002fbc:	4b37      	ldr	r3, [pc, #220]	; (800309c <menu+0x1858>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b06      	cmp	r3, #6
 8002fc2:	d902      	bls.n	8002fca <menu+0x1786>
		   		kapi2AcSure = 5;
 8002fc4:	4b35      	ldr	r3, [pc, #212]	; (800309c <menu+0x1858>)
 8002fc6:	2205      	movs	r2, #5
 8002fc8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fca:	f003 f9b9 	bl	8006340 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fce:	2108      	movs	r1, #8
 8002fd0:	4828      	ldr	r0, [pc, #160]	; (8003074 <menu+0x1830>)
 8002fd2:	f006 ff87 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10d      	bne.n	8002ff8 <menu+0x17b4>
 8002fdc:	4b26      	ldr	r3, [pc, #152]	; (8003078 <menu+0x1834>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	f083 0301 	eor.w	r3, r3, #1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002fea:	4b2c      	ldr	r3, [pc, #176]	; (800309c <menu+0x1858>)
 8002fec:	781a      	ldrb	r2, [r3, #0]
 8002fee:	4b23      	ldr	r3, [pc, #140]	; (800307c <menu+0x1838>)
 8002ff0:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002ff2:	4b23      	ldr	r3, [pc, #140]	; (8003080 <menu+0x183c>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002ff8:	4b22      	ldr	r3, [pc, #136]	; (8003084 <menu+0x1840>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b0d      	cmp	r3, #13
 8002ffe:	f040 80b5 	bne.w	800316c <menu+0x1928>
		if(dilSecim == 0) {
 8003002:	4b21      	ldr	r3, [pc, #132]	; (8003088 <menu+0x1844>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d105      	bne.n	8003016 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 800300a:	4a26      	ldr	r2, [pc, #152]	; (80030a4 <menu+0x1860>)
 800300c:	2101      	movs	r1, #1
 800300e:	2001      	movs	r0, #1
 8003010:	f7fd fbd2 	bl	80007b8 <lcd_print>
 8003014:	e008      	b.n	8003028 <menu+0x17e4>
		} else if(dilSecim == 1){
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <menu+0x1844>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d104      	bne.n	8003028 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 800301e:	4a22      	ldr	r2, [pc, #136]	; (80030a8 <menu+0x1864>)
 8003020:	2101      	movs	r1, #1
 8003022:	2001      	movs	r0, #1
 8003024:	f7fd fbc8 	bl	80007b8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8003028:	4b20      	ldr	r3, [pc, #128]	; (80030ac <menu+0x1868>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8003030:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <menu+0x186c>)
 8003032:	2101      	movs	r1, #1
 8003034:	2002      	movs	r0, #2
 8003036:	f7fd fbbf 	bl	80007b8 <lcd_print>
 800303a:	e048      	b.n	80030ce <menu+0x188a>
		} else if(kapitablaTip == 1) {
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <menu+0x1868>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d13b      	bne.n	80030bc <menu+0x1878>
			if(dilSecim == 0) {
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <menu+0x1844>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 800304c:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <menu+0x1870>)
 800304e:	2101      	movs	r1, #1
 8003050:	2002      	movs	r0, #2
 8003052:	f7fd fbb1 	bl	80007b8 <lcd_print>
 8003056:	e03a      	b.n	80030ce <menu+0x188a>
			} else if(dilSecim == 1) {
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <menu+0x1844>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d136      	bne.n	80030ce <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8003060:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <menu+0x1874>)
 8003062:	2101      	movs	r1, #1
 8003064:	2002      	movs	r0, #2
 8003066:	f7fd fba7 	bl	80007b8 <lcd_print>
 800306a:	e030      	b.n	80030ce <menu+0x188a>
 800306c:	20000d3a 	.word	0x20000d3a
 8003070:	0800e0e4 	.word	0x0800e0e4
 8003074:	40010800 	.word	0x40010800
 8003078:	20000d5f 	.word	0x20000d5f
 800307c:	20000c38 	.word	0x20000c38
 8003080:	20000d5c 	.word	0x20000d5c
 8003084:	20000d30 	.word	0x20000d30
 8003088:	20000d51 	.word	0x20000d51
 800308c:	0800e164 	.word	0x0800e164
 8003090:	0800e108 	.word	0x0800e108
 8003094:	0800e178 	.word	0x0800e178
 8003098:	0800e12c 	.word	0x0800e12c
 800309c:	20000d4a 	.word	0x20000d4a
 80030a0:	20000ca8 	.word	0x20000ca8
 80030a4:	0800e18c 	.word	0x0800e18c
 80030a8:	0800e1a0 	.word	0x0800e1a0
 80030ac:	20000d3b 	.word	0x20000d3b
 80030b0:	0800e0ac 	.word	0x0800e0ac
 80030b4:	0800e0c0 	.word	0x0800e0c0
 80030b8:	0800e0d0 	.word	0x0800e0d0
			}
		} else if(kapitablaTip == 2) {
 80030bc:	4b5b      	ldr	r3, [pc, #364]	; (800322c <menu+0x19e8>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d104      	bne.n	80030ce <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 80030c4:	4a5a      	ldr	r2, [pc, #360]	; (8003230 <menu+0x19ec>)
 80030c6:	2101      	movs	r1, #1
 80030c8:	2002      	movs	r0, #2
 80030ca:	f7fd fb75 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ce:	2102      	movs	r1, #2
 80030d0:	4858      	ldr	r0, [pc, #352]	; (8003234 <menu+0x19f0>)
 80030d2:	f006 ff07 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d115      	bne.n	8003108 <menu+0x18c4>
 80030dc:	4b56      	ldr	r3, [pc, #344]	; (8003238 <menu+0x19f4>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	f083 0301 	eor.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00e      	beq.n	8003108 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 80030ea:	4b50      	ldr	r3, [pc, #320]	; (800322c <menu+0x19e8>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	4b4e      	ldr	r3, [pc, #312]	; (800322c <menu+0x19e8>)
 80030f4:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80030f6:	4b4d      	ldr	r3, [pc, #308]	; (800322c <menu+0x19e8>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d902      	bls.n	8003104 <menu+0x18c0>
				kapitablaTip = 0;
 80030fe:	4b4b      	ldr	r3, [pc, #300]	; (800322c <menu+0x19e8>)
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003104:	f003 f91c 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003108:	2104      	movs	r1, #4
 800310a:	484a      	ldr	r0, [pc, #296]	; (8003234 <menu+0x19f0>)
 800310c:	f006 feea 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003110:	4603      	mov	r3, r0
 8003112:	2b01      	cmp	r3, #1
 8003114:	d115      	bne.n	8003142 <menu+0x18fe>
 8003116:	4b48      	ldr	r3, [pc, #288]	; (8003238 <menu+0x19f4>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	f083 0301 	eor.w	r3, r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00e      	beq.n	8003142 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8003124:	4b41      	ldr	r3, [pc, #260]	; (800322c <menu+0x19e8>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	3b01      	subs	r3, #1
 800312a:	b2da      	uxtb	r2, r3
 800312c:	4b3f      	ldr	r3, [pc, #252]	; (800322c <menu+0x19e8>)
 800312e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8003130:	4b3e      	ldr	r3, [pc, #248]	; (800322c <menu+0x19e8>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d902      	bls.n	800313e <menu+0x18fa>
		   		kapitablaTip = 2;
 8003138:	4b3c      	ldr	r3, [pc, #240]	; (800322c <menu+0x19e8>)
 800313a:	2202      	movs	r2, #2
 800313c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800313e:	f003 f8ff 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003142:	2108      	movs	r1, #8
 8003144:	483b      	ldr	r0, [pc, #236]	; (8003234 <menu+0x19f0>)
 8003146:	f006 fecd 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800314a:	4603      	mov	r3, r0
 800314c:	2b01      	cmp	r3, #1
 800314e:	d10d      	bne.n	800316c <menu+0x1928>
 8003150:	4b39      	ldr	r3, [pc, #228]	; (8003238 <menu+0x19f4>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	f083 0301 	eor.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <menu+0x1928>
			eepromData[12] = kapitablaTip;
 800315e:	4b33      	ldr	r3, [pc, #204]	; (800322c <menu+0x19e8>)
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	4b36      	ldr	r3, [pc, #216]	; (800323c <menu+0x19f8>)
 8003164:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8003166:	4b36      	ldr	r3, [pc, #216]	; (8003240 <menu+0x19fc>)
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 800316c:	4b35      	ldr	r3, [pc, #212]	; (8003244 <menu+0x1a00>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b0e      	cmp	r3, #14
 8003172:	f040 80f2 	bne.w	800335a <menu+0x1b16>
		if(dilSecim == 0) {
 8003176:	4b34      	ldr	r3, [pc, #208]	; (8003248 <menu+0x1a04>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d105      	bne.n	800318a <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 800317e:	4a33      	ldr	r2, [pc, #204]	; (800324c <menu+0x1a08>)
 8003180:	2101      	movs	r1, #1
 8003182:	2001      	movs	r0, #1
 8003184:	f7fd fb18 	bl	80007b8 <lcd_print>
 8003188:	e008      	b.n	800319c <menu+0x1958>
		} else if(dilSecim == 1) {
 800318a:	4b2f      	ldr	r3, [pc, #188]	; (8003248 <menu+0x1a04>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d104      	bne.n	800319c <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8003192:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <menu+0x1a0c>)
 8003194:	2101      	movs	r1, #1
 8003196:	2001      	movs	r0, #1
 8003198:	f7fd fb0e 	bl	80007b8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 800319c:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <menu+0x1a10>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d113      	bne.n	80031cc <menu+0x1988>
			if(dilSecim == 0){
 80031a4:	4b28      	ldr	r3, [pc, #160]	; (8003248 <menu+0x1a04>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d105      	bne.n	80031b8 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 80031ac:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <menu+0x1a14>)
 80031ae:	2101      	movs	r1, #1
 80031b0:	2002      	movs	r0, #2
 80031b2:	f7fd fb01 	bl	80007b8 <lcd_print>
 80031b6:	e071      	b.n	800329c <menu+0x1a58>
			} else if(dilSecim == 1) {
 80031b8:	4b23      	ldr	r3, [pc, #140]	; (8003248 <menu+0x1a04>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d16d      	bne.n	800329c <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 80031c0:	4a26      	ldr	r2, [pc, #152]	; (800325c <menu+0x1a18>)
 80031c2:	2101      	movs	r1, #1
 80031c4:	2002      	movs	r0, #2
 80031c6:	f7fd faf7 	bl	80007b8 <lcd_print>
 80031ca:	e067      	b.n	800329c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 80031cc:	4b21      	ldr	r3, [pc, #132]	; (8003254 <menu+0x1a10>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d112      	bne.n	80031fa <menu+0x19b6>
			if(dilSecim == 0){
 80031d4:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <menu+0x1a04>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d104      	bne.n	80031e6 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 80031dc:	4a20      	ldr	r2, [pc, #128]	; (8003260 <menu+0x1a1c>)
 80031de:	2101      	movs	r1, #1
 80031e0:	2002      	movs	r0, #2
 80031e2:	f7fd fae9 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 80031e6:	4b18      	ldr	r3, [pc, #96]	; (8003248 <menu+0x1a04>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d156      	bne.n	800329c <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 80031ee:	4a1d      	ldr	r2, [pc, #116]	; (8003264 <menu+0x1a20>)
 80031f0:	2101      	movs	r1, #1
 80031f2:	2002      	movs	r0, #2
 80031f4:	f7fd fae0 	bl	80007b8 <lcd_print>
 80031f8:	e050      	b.n	800329c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 80031fa:	4b16      	ldr	r3, [pc, #88]	; (8003254 <menu+0x1a10>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d136      	bne.n	8003270 <menu+0x1a2c>
			if(dilSecim == 0){
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <menu+0x1a04>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d105      	bne.n	8003216 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 800320a:	4a17      	ldr	r2, [pc, #92]	; (8003268 <menu+0x1a24>)
 800320c:	2101      	movs	r1, #1
 800320e:	2002      	movs	r0, #2
 8003210:	f7fd fad2 	bl	80007b8 <lcd_print>
 8003214:	e042      	b.n	800329c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <menu+0x1a04>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d13e      	bne.n	800329c <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 800321e:	4a13      	ldr	r2, [pc, #76]	; (800326c <menu+0x1a28>)
 8003220:	2101      	movs	r1, #1
 8003222:	2002      	movs	r0, #2
 8003224:	f7fd fac8 	bl	80007b8 <lcd_print>
 8003228:	e038      	b.n	800329c <menu+0x1a58>
 800322a:	bf00      	nop
 800322c:	20000d3b 	.word	0x20000d3b
 8003230:	0800e0e4 	.word	0x0800e0e4
 8003234:	40010800 	.word	0x40010800
 8003238:	20000d5f 	.word	0x20000d5f
 800323c:	20000c38 	.word	0x20000c38
 8003240:	20000d5c 	.word	0x20000d5c
 8003244:	20000d30 	.word	0x20000d30
 8003248:	20000d51 	.word	0x20000d51
 800324c:	0800e1b4 	.word	0x0800e1b4
 8003250:	0800e1c8 	.word	0x0800e1c8
 8003254:	20000d3d 	.word	0x20000d3d
 8003258:	0800e1dc 	.word	0x0800e1dc
 800325c:	0800e1ec 	.word	0x0800e1ec
 8003260:	0800e1fc 	.word	0x0800e1fc
 8003264:	0800e20c 	.word	0x0800e20c
 8003268:	0800e21c 	.word	0x0800e21c
 800326c:	0800e230 	.word	0x0800e230
			}
		} else if(kapiTablaAcKonum == 3) {
 8003270:	4b9b      	ldr	r3, [pc, #620]	; (80034e0 <menu+0x1c9c>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d111      	bne.n	800329c <menu+0x1a58>
			if(dilSecim == 0) {
 8003278:	4b9a      	ldr	r3, [pc, #616]	; (80034e4 <menu+0x1ca0>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d104      	bne.n	800328a <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8003280:	4a99      	ldr	r2, [pc, #612]	; (80034e8 <menu+0x1ca4>)
 8003282:	2101      	movs	r1, #1
 8003284:	2002      	movs	r0, #2
 8003286:	f7fd fa97 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 800328a:	4b96      	ldr	r3, [pc, #600]	; (80034e4 <menu+0x1ca0>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d104      	bne.n	800329c <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8003292:	4a96      	ldr	r2, [pc, #600]	; (80034ec <menu+0x1ca8>)
 8003294:	2101      	movs	r1, #1
 8003296:	2002      	movs	r0, #2
 8003298:	f7fd fa8e 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800329c:	2102      	movs	r1, #2
 800329e:	4894      	ldr	r0, [pc, #592]	; (80034f0 <menu+0x1cac>)
 80032a0:	f006 fe20 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d115      	bne.n	80032d6 <menu+0x1a92>
 80032aa:	4b92      	ldr	r3, [pc, #584]	; (80034f4 <menu+0x1cb0>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	f083 0301 	eor.w	r3, r3, #1
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00e      	beq.n	80032d6 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80032b8:	4b89      	ldr	r3, [pc, #548]	; (80034e0 <menu+0x1c9c>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	4b87      	ldr	r3, [pc, #540]	; (80034e0 <menu+0x1c9c>)
 80032c2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80032c4:	4b86      	ldr	r3, [pc, #536]	; (80034e0 <menu+0x1c9c>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d902      	bls.n	80032d2 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 80032cc:	4b84      	ldr	r3, [pc, #528]	; (80034e0 <menu+0x1c9c>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032d2:	f003 f835 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032d6:	2104      	movs	r1, #4
 80032d8:	4885      	ldr	r0, [pc, #532]	; (80034f0 <menu+0x1cac>)
 80032da:	f006 fe03 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d115      	bne.n	8003310 <menu+0x1acc>
 80032e4:	4b83      	ldr	r3, [pc, #524]	; (80034f4 <menu+0x1cb0>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	f083 0301 	eor.w	r3, r3, #1
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00e      	beq.n	8003310 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80032f2:	4b7b      	ldr	r3, [pc, #492]	; (80034e0 <menu+0x1c9c>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4b79      	ldr	r3, [pc, #484]	; (80034e0 <menu+0x1c9c>)
 80032fc:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80032fe:	4b78      	ldr	r3, [pc, #480]	; (80034e0 <menu+0x1c9c>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d902      	bls.n	800330c <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8003306:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <menu+0x1c9c>)
 8003308:	2202      	movs	r2, #2
 800330a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800330c:	f003 f818 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003310:	2108      	movs	r1, #8
 8003312:	4877      	ldr	r0, [pc, #476]	; (80034f0 <menu+0x1cac>)
 8003314:	f006 fde6 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003318:	4603      	mov	r3, r0
 800331a:	2b01      	cmp	r3, #1
 800331c:	d11d      	bne.n	800335a <menu+0x1b16>
 800331e:	4b75      	ldr	r3, [pc, #468]	; (80034f4 <menu+0x1cb0>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	f083 0301 	eor.w	r3, r3, #1
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d016      	beq.n	800335a <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 800332c:	4b6c      	ldr	r3, [pc, #432]	; (80034e0 <menu+0x1c9c>)
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	4b71      	ldr	r3, [pc, #452]	; (80034f8 <menu+0x1cb4>)
 8003332:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8003336:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <menu+0x1c9c>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <menu+0x1b02>
 800333e:	4b68      	ldr	r3, [pc, #416]	; (80034e0 <menu+0x1c9c>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d106      	bne.n	8003354 <menu+0x1b10>
				altLimit = 1;
 8003346:	4b6d      	ldr	r3, [pc, #436]	; (80034fc <menu+0x1cb8>)
 8003348:	2201      	movs	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800334c:	4b6b      	ldr	r3, [pc, #428]	; (80034fc <menu+0x1cb8>)
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	4b69      	ldr	r3, [pc, #420]	; (80034f8 <menu+0x1cb4>)
 8003352:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8003354:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <menu+0x1cbc>)
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800335a:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <menu+0x1cc0>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b0f      	cmp	r3, #15
 8003360:	d17f      	bne.n	8003462 <menu+0x1c1e>
		if(dilSecim == 0) {
 8003362:	4b60      	ldr	r3, [pc, #384]	; (80034e4 <menu+0x1ca0>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 800336a:	4a67      	ldr	r2, [pc, #412]	; (8003508 <menu+0x1cc4>)
 800336c:	2101      	movs	r1, #1
 800336e:	2001      	movs	r0, #1
 8003370:	f7fd fa22 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8003374:	4a65      	ldr	r2, [pc, #404]	; (800350c <menu+0x1cc8>)
 8003376:	2101      	movs	r1, #1
 8003378:	2002      	movs	r0, #2
 800337a:	f7fd fa1d 	bl	80007b8 <lcd_print>
 800337e:	e00d      	b.n	800339c <menu+0x1b58>
		} else if(dilSecim == 1) {
 8003380:	4b58      	ldr	r3, [pc, #352]	; (80034e4 <menu+0x1ca0>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d109      	bne.n	800339c <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8003388:	4a61      	ldr	r2, [pc, #388]	; (8003510 <menu+0x1ccc>)
 800338a:	2101      	movs	r1, #1
 800338c:	2001      	movs	r0, #1
 800338e:	f7fd fa13 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8003392:	4a60      	ldr	r2, [pc, #384]	; (8003514 <menu+0x1cd0>)
 8003394:	2101      	movs	r1, #1
 8003396:	2002      	movs	r0, #2
 8003398:	f7fd fa0e 	bl	80007b8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 800339c:	4b5e      	ldr	r3, [pc, #376]	; (8003518 <menu+0x1cd4>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	220a      	movs	r2, #10
 80033a2:	495e      	ldr	r1, [pc, #376]	; (800351c <menu+0x1cd8>)
 80033a4:	4618      	mov	r0, r3
 80033a6:	f009 fdc9 	bl	800cf3c <itoa>
		lcd_print(2,16,snum);
 80033aa:	4a5c      	ldr	r2, [pc, #368]	; (800351c <menu+0x1cd8>)
 80033ac:	2110      	movs	r1, #16
 80033ae:	2002      	movs	r0, #2
 80033b0:	f7fd fa02 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80033b4:	2102      	movs	r1, #2
 80033b6:	484e      	ldr	r0, [pc, #312]	; (80034f0 <menu+0x1cac>)
 80033b8:	f006 fd94 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d119      	bne.n	80033f6 <menu+0x1bb2>
 80033c2:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <menu+0x1cb0>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	f083 0301 	eor.w	r3, r3, #1
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <menu+0x1bb2>
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <menu+0x1cdc>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10e      	bne.n	80033f6 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80033d8:	4b4f      	ldr	r3, [pc, #316]	; (8003518 <menu+0x1cd4>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	3301      	adds	r3, #1
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	4b4d      	ldr	r3, [pc, #308]	; (8003518 <menu+0x1cd4>)
 80033e2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80033e4:	4b4c      	ldr	r3, [pc, #304]	; (8003518 <menu+0x1cd4>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b05      	cmp	r3, #5
 80033ea:	d902      	bls.n	80033f2 <menu+0x1bae>
				kapiTablaAcSure = 0;
 80033ec:	4b4a      	ldr	r3, [pc, #296]	; (8003518 <menu+0x1cd4>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033f2:	f002 ffa5 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80033f6:	2104      	movs	r1, #4
 80033f8:	483d      	ldr	r0, [pc, #244]	; (80034f0 <menu+0x1cac>)
 80033fa:	f006 fd73 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b01      	cmp	r3, #1
 8003402:	d119      	bne.n	8003438 <menu+0x1bf4>
 8003404:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <menu+0x1cb0>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	f083 0301 	eor.w	r3, r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d012      	beq.n	8003438 <menu+0x1bf4>
 8003412:	4b43      	ldr	r3, [pc, #268]	; (8003520 <menu+0x1cdc>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10e      	bne.n	8003438 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800341a:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <menu+0x1cd4>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	3b01      	subs	r3, #1
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <menu+0x1cd4>)
 8003424:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003426:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <menu+0x1cd4>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b06      	cmp	r3, #6
 800342c:	d902      	bls.n	8003434 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800342e:	4b3a      	ldr	r3, [pc, #232]	; (8003518 <menu+0x1cd4>)
 8003430:	2205      	movs	r2, #5
 8003432:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003434:	f002 ff84 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003438:	2108      	movs	r1, #8
 800343a:	482d      	ldr	r0, [pc, #180]	; (80034f0 <menu+0x1cac>)
 800343c:	f006 fd52 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003440:	4603      	mov	r3, r0
 8003442:	2b01      	cmp	r3, #1
 8003444:	d10d      	bne.n	8003462 <menu+0x1c1e>
 8003446:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <menu+0x1cb0>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	f083 0301 	eor.w	r3, r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d006      	beq.n	8003462 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8003454:	4b30      	ldr	r3, [pc, #192]	; (8003518 <menu+0x1cd4>)
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <menu+0x1cb4>)
 800345a:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 800345c:	4b28      	ldr	r3, [pc, #160]	; (8003500 <menu+0x1cbc>)
 800345e:	2201      	movs	r2, #1
 8003460:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8003462:	4b28      	ldr	r3, [pc, #160]	; (8003504 <menu+0x1cc0>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b10      	cmp	r3, #16
 8003468:	f040 80bc 	bne.w	80035e4 <menu+0x1da0>
		if(dilSecim == 0) {
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <menu+0x1ca0>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d105      	bne.n	8003480 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003474:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <menu+0x1ce0>)
 8003476:	2101      	movs	r1, #1
 8003478:	2001      	movs	r0, #1
 800347a:	f7fd f99d 	bl	80007b8 <lcd_print>
 800347e:	e008      	b.n	8003492 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8003480:	4b18      	ldr	r3, [pc, #96]	; (80034e4 <menu+0x1ca0>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d104      	bne.n	8003492 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003488:	4a27      	ldr	r2, [pc, #156]	; (8003528 <menu+0x1ce4>)
 800348a:	2101      	movs	r1, #1
 800348c:	2001      	movs	r0, #1
 800348e:	f7fd f993 	bl	80007b8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <menu+0x1ce8>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d113      	bne.n	80034c2 <menu+0x1c7e>
			if(dilSecim == 0) {
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <menu+0x1ca0>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d105      	bne.n	80034ae <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 80034a2:	4a11      	ldr	r2, [pc, #68]	; (80034e8 <menu+0x1ca4>)
 80034a4:	2101      	movs	r1, #1
 80034a6:	2002      	movs	r0, #2
 80034a8:	f7fd f986 	bl	80007b8 <lcd_print>
 80034ac:	e04b      	b.n	8003546 <menu+0x1d02>
			} else if(dilSecim == 1) {
 80034ae:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <menu+0x1ca0>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d147      	bne.n	8003546 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 80034b6:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <menu+0x1ca8>)
 80034b8:	2101      	movs	r1, #1
 80034ba:	2002      	movs	r0, #2
 80034bc:	f7fd f97c 	bl	80007b8 <lcd_print>
 80034c0:	e041      	b.n	8003546 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 80034c2:	4b1a      	ldr	r3, [pc, #104]	; (800352c <menu+0x1ce8>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d13d      	bne.n	8003546 <menu+0x1d02>
			if(dilSecim == 0) {
 80034ca:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <menu+0x1ca0>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d130      	bne.n	8003534 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 80034d2:	4a17      	ldr	r2, [pc, #92]	; (8003530 <menu+0x1cec>)
 80034d4:	2101      	movs	r1, #1
 80034d6:	2002      	movs	r0, #2
 80034d8:	f7fd f96e 	bl	80007b8 <lcd_print>
 80034dc:	e033      	b.n	8003546 <menu+0x1d02>
 80034de:	bf00      	nop
 80034e0:	20000d3d 	.word	0x20000d3d
 80034e4:	20000d51 	.word	0x20000d51
 80034e8:	0800dea4 	.word	0x0800dea4
 80034ec:	0800deb8 	.word	0x0800deb8
 80034f0:	40010800 	.word	0x40010800
 80034f4:	20000d5f 	.word	0x20000d5f
 80034f8:	20000c38 	.word	0x20000c38
 80034fc:	20000d36 	.word	0x20000d36
 8003500:	20000d5c 	.word	0x20000d5c
 8003504:	20000d30 	.word	0x20000d30
 8003508:	0800e244 	.word	0x0800e244
 800350c:	0800e108 	.word	0x0800e108
 8003510:	0800e258 	.word	0x0800e258
 8003514:	0800e12c 	.word	0x0800e12c
 8003518:	20000d4b 	.word	0x20000d4b
 800351c:	20000ca8 	.word	0x20000ca8
 8003520:	20000d3b 	.word	0x20000d3b
 8003524:	0800e26c 	.word	0x0800e26c
 8003528:	0800e280 	.word	0x0800e280
 800352c:	20000d3e 	.word	0x20000d3e
 8003530:	0800df04 	.word	0x0800df04
			} else if(dilSecim == 1) {
 8003534:	4b99      	ldr	r3, [pc, #612]	; (800379c <menu+0x1f58>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d104      	bne.n	8003546 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 800353c:	4a98      	ldr	r2, [pc, #608]	; (80037a0 <menu+0x1f5c>)
 800353e:	2101      	movs	r1, #1
 8003540:	2002      	movs	r0, #2
 8003542:	f7fd f939 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003546:	2102      	movs	r1, #2
 8003548:	4896      	ldr	r0, [pc, #600]	; (80037a4 <menu+0x1f60>)
 800354a:	f006 fccb 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800354e:	4603      	mov	r3, r0
 8003550:	2b01      	cmp	r3, #1
 8003552:	d115      	bne.n	8003580 <menu+0x1d3c>
 8003554:	4b94      	ldr	r3, [pc, #592]	; (80037a8 <menu+0x1f64>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	f083 0301 	eor.w	r3, r3, #1
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00e      	beq.n	8003580 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8003562:	4b92      	ldr	r3, [pc, #584]	; (80037ac <menu+0x1f68>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	3301      	adds	r3, #1
 8003568:	b2da      	uxtb	r2, r3
 800356a:	4b90      	ldr	r3, [pc, #576]	; (80037ac <menu+0x1f68>)
 800356c:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800356e:	4b8f      	ldr	r3, [pc, #572]	; (80037ac <menu+0x1f68>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d902      	bls.n	800357c <menu+0x1d38>
				yukariYavasLimit = 0;
 8003576:	4b8d      	ldr	r3, [pc, #564]	; (80037ac <menu+0x1f68>)
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800357c:	f002 fee0 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003580:	2104      	movs	r1, #4
 8003582:	4888      	ldr	r0, [pc, #544]	; (80037a4 <menu+0x1f60>)
 8003584:	f006 fcae 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003588:	4603      	mov	r3, r0
 800358a:	2b01      	cmp	r3, #1
 800358c:	d115      	bne.n	80035ba <menu+0x1d76>
 800358e:	4b86      	ldr	r3, [pc, #536]	; (80037a8 <menu+0x1f64>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	f083 0301 	eor.w	r3, r3, #1
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00e      	beq.n	80035ba <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 800359c:	4b83      	ldr	r3, [pc, #524]	; (80037ac <menu+0x1f68>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	4b81      	ldr	r3, [pc, #516]	; (80037ac <menu+0x1f68>)
 80035a6:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80035a8:	4b80      	ldr	r3, [pc, #512]	; (80037ac <menu+0x1f68>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80035b0:	4b7e      	ldr	r3, [pc, #504]	; (80037ac <menu+0x1f68>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035b6:	f002 fec3 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035ba:	2108      	movs	r1, #8
 80035bc:	4879      	ldr	r0, [pc, #484]	; (80037a4 <menu+0x1f60>)
 80035be:	f006 fc91 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d10d      	bne.n	80035e4 <menu+0x1da0>
 80035c8:	4b77      	ldr	r3, [pc, #476]	; (80037a8 <menu+0x1f64>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	f083 0301 	eor.w	r3, r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d006      	beq.n	80035e4 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80035d6:	4b75      	ldr	r3, [pc, #468]	; (80037ac <menu+0x1f68>)
 80035d8:	781a      	ldrb	r2, [r3, #0]
 80035da:	4b75      	ldr	r3, [pc, #468]	; (80037b0 <menu+0x1f6c>)
 80035dc:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80035de:	4b75      	ldr	r3, [pc, #468]	; (80037b4 <menu+0x1f70>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80035e4:	4b74      	ldr	r3, [pc, #464]	; (80037b8 <menu+0x1f74>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b11      	cmp	r3, #17
 80035ea:	f040 80c3 	bne.w	8003774 <menu+0x1f30>
		if(dilSecim == 0) {
 80035ee:	4b6b      	ldr	r3, [pc, #428]	; (800379c <menu+0x1f58>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d105      	bne.n	8003602 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80035f6:	4a71      	ldr	r2, [pc, #452]	; (80037bc <menu+0x1f78>)
 80035f8:	2101      	movs	r1, #1
 80035fa:	2001      	movs	r0, #1
 80035fc:	f7fd f8dc 	bl	80007b8 <lcd_print>
 8003600:	e008      	b.n	8003614 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8003602:	4b66      	ldr	r3, [pc, #408]	; (800379c <menu+0x1f58>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d104      	bne.n	8003614 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800360a:	4a6d      	ldr	r2, [pc, #436]	; (80037c0 <menu+0x1f7c>)
 800360c:	2101      	movs	r1, #1
 800360e:	2001      	movs	r0, #1
 8003610:	f7fd f8d2 	bl	80007b8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003614:	4b6b      	ldr	r3, [pc, #428]	; (80037c4 <menu+0x1f80>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d113      	bne.n	8003644 <menu+0x1e00>
			if(dilSecim == 0){
 800361c:	4b5f      	ldr	r3, [pc, #380]	; (800379c <menu+0x1f58>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d105      	bne.n	8003630 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003624:	4a68      	ldr	r2, [pc, #416]	; (80037c8 <menu+0x1f84>)
 8003626:	2101      	movs	r1, #1
 8003628:	2002      	movs	r0, #2
 800362a:	f7fd f8c5 	bl	80007b8 <lcd_print>
 800362e:	e038      	b.n	80036a2 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003630:	4b5a      	ldr	r3, [pc, #360]	; (800379c <menu+0x1f58>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d134      	bne.n	80036a2 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003638:	4a64      	ldr	r2, [pc, #400]	; (80037cc <menu+0x1f88>)
 800363a:	2101      	movs	r1, #1
 800363c:	2002      	movs	r0, #2
 800363e:	f7fd f8bb 	bl	80007b8 <lcd_print>
 8003642:	e02e      	b.n	80036a2 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003644:	4b5f      	ldr	r3, [pc, #380]	; (80037c4 <menu+0x1f80>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d113      	bne.n	8003674 <menu+0x1e30>
			if(dilSecim == 0){
 800364c:	4b53      	ldr	r3, [pc, #332]	; (800379c <menu+0x1f58>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003654:	4a5e      	ldr	r2, [pc, #376]	; (80037d0 <menu+0x1f8c>)
 8003656:	2101      	movs	r1, #1
 8003658:	2002      	movs	r0, #2
 800365a:	f7fd f8ad 	bl	80007b8 <lcd_print>
 800365e:	e020      	b.n	80036a2 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003660:	4b4e      	ldr	r3, [pc, #312]	; (800379c <menu+0x1f58>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d11c      	bne.n	80036a2 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003668:	4a5a      	ldr	r2, [pc, #360]	; (80037d4 <menu+0x1f90>)
 800366a:	2101      	movs	r1, #1
 800366c:	2002      	movs	r0, #2
 800366e:	f7fd f8a3 	bl	80007b8 <lcd_print>
 8003672:	e016      	b.n	80036a2 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003674:	4b53      	ldr	r3, [pc, #332]	; (80037c4 <menu+0x1f80>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d112      	bne.n	80036a2 <menu+0x1e5e>
			if(dilSecim == 0) {
 800367c:	4b47      	ldr	r3, [pc, #284]	; (800379c <menu+0x1f58>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003684:	4a54      	ldr	r2, [pc, #336]	; (80037d8 <menu+0x1f94>)
 8003686:	2101      	movs	r1, #1
 8003688:	2002      	movs	r0, #2
 800368a:	f7fd f895 	bl	80007b8 <lcd_print>
 800368e:	e008      	b.n	80036a2 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003690:	4b42      	ldr	r3, [pc, #264]	; (800379c <menu+0x1f58>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d104      	bne.n	80036a2 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003698:	4a50      	ldr	r2, [pc, #320]	; (80037dc <menu+0x1f98>)
 800369a:	2101      	movs	r1, #1
 800369c:	2002      	movs	r0, #2
 800369e:	f7fd f88b 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036a2:	2102      	movs	r1, #2
 80036a4:	483f      	ldr	r0, [pc, #252]	; (80037a4 <menu+0x1f60>)
 80036a6:	f006 fc1d 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d115      	bne.n	80036dc <menu+0x1e98>
 80036b0:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <menu+0x1f64>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	f083 0301 	eor.w	r3, r3, #1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00e      	beq.n	80036dc <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80036be:	4b41      	ldr	r3, [pc, #260]	; (80037c4 <menu+0x1f80>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	3301      	adds	r3, #1
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	4b3f      	ldr	r3, [pc, #252]	; (80037c4 <menu+0x1f80>)
 80036c8:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80036ca:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <menu+0x1f80>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d902      	bls.n	80036d8 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80036d2:	4b3c      	ldr	r3, [pc, #240]	; (80037c4 <menu+0x1f80>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036d8:	f002 fe32 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036dc:	2104      	movs	r1, #4
 80036de:	4831      	ldr	r0, [pc, #196]	; (80037a4 <menu+0x1f60>)
 80036e0:	f006 fc00 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d115      	bne.n	8003716 <menu+0x1ed2>
 80036ea:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <menu+0x1f64>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	f083 0301 	eor.w	r3, r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00e      	beq.n	8003716 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80036f8:	4b32      	ldr	r3, [pc, #200]	; (80037c4 <menu+0x1f80>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	4b30      	ldr	r3, [pc, #192]	; (80037c4 <menu+0x1f80>)
 8003702:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003704:	4b2f      	ldr	r3, [pc, #188]	; (80037c4 <menu+0x1f80>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d902      	bls.n	8003712 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 800370c:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <menu+0x1f80>)
 800370e:	2202      	movs	r2, #2
 8003710:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003712:	f002 fe15 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003716:	2108      	movs	r1, #8
 8003718:	4822      	ldr	r0, [pc, #136]	; (80037a4 <menu+0x1f60>)
 800371a:	f006 fbe3 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800371e:	4603      	mov	r3, r0
 8003720:	2b01      	cmp	r3, #1
 8003722:	d127      	bne.n	8003774 <menu+0x1f30>
 8003724:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <menu+0x1f64>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	f083 0301 	eor.w	r3, r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d020      	beq.n	8003774 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <menu+0x1f80>)
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <menu+0x1f6c>)
 8003738:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800373a:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <menu+0x1f80>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d003      	beq.n	800374a <menu+0x1f06>
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <menu+0x1f80>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d106      	bne.n	8003758 <menu+0x1f14>
				calismaSekli = 0;
 800374a:	4b25      	ldr	r3, [pc, #148]	; (80037e0 <menu+0x1f9c>)
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003750:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <menu+0x1f9c>)
 8003752:	781a      	ldrb	r2, [r3, #0]
 8003754:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <menu+0x1f6c>)
 8003756:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003758:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <menu+0x1f80>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d106      	bne.n	800376e <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003760:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <menu+0x1fa0>)
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003766:	4b1f      	ldr	r3, [pc, #124]	; (80037e4 <menu+0x1fa0>)
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <menu+0x1f6c>)
 800376c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <menu+0x1f70>)
 8003770:	2201      	movs	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <menu+0x1f74>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b12      	cmp	r3, #18
 800377a:	f040 80d5 	bne.w	8003928 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <menu+0x1f80>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d13c      	bne.n	8003800 <menu+0x1fbc>
			if(dilSecim == 0) {
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <menu+0x1f58>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d12e      	bne.n	80037ec <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800378e:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <menu+0x1fa4>)
 8003790:	2101      	movs	r1, #1
 8003792:	2001      	movs	r0, #1
 8003794:	f7fd f810 	bl	80007b8 <lcd_print>
 8003798:	e048      	b.n	800382c <menu+0x1fe8>
 800379a:	bf00      	nop
 800379c:	20000d51 	.word	0x20000d51
 80037a0:	0800df18 	.word	0x0800df18
 80037a4:	40010800 	.word	0x40010800
 80037a8:	20000d5f 	.word	0x20000d5f
 80037ac:	20000d3e 	.word	0x20000d3e
 80037b0:	20000c38 	.word	0x20000c38
 80037b4:	20000d5c 	.word	0x20000d5c
 80037b8:	20000d30 	.word	0x20000d30
 80037bc:	0800e294 	.word	0x0800e294
 80037c0:	0800e2a8 	.word	0x0800e2a8
 80037c4:	20000d3f 	.word	0x20000d3f
 80037c8:	0800e2bc 	.word	0x0800e2bc
 80037cc:	0800e2cc 	.word	0x0800e2cc
 80037d0:	0800e2dc 	.word	0x0800e2dc
 80037d4:	0800e2ec 	.word	0x0800e2ec
 80037d8:	0800dea4 	.word	0x0800dea4
 80037dc:	0800deb8 	.word	0x0800deb8
 80037e0:	20000d31 	.word	0x20000d31
 80037e4:	20000d42 	.word	0x20000d42
 80037e8:	0800e2fc 	.word	0x0800e2fc
			} else if(dilSecim == 1) {
 80037ec:	4b7b      	ldr	r3, [pc, #492]	; (80039dc <menu+0x2198>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d11b      	bne.n	800382c <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80037f4:	4a7a      	ldr	r2, [pc, #488]	; (80039e0 <menu+0x219c>)
 80037f6:	2101      	movs	r1, #1
 80037f8:	2001      	movs	r0, #1
 80037fa:	f7fc ffdd 	bl	80007b8 <lcd_print>
 80037fe:	e015      	b.n	800382c <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003800:	4b78      	ldr	r3, [pc, #480]	; (80039e4 <menu+0x21a0>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d111      	bne.n	800382c <menu+0x1fe8>
			if(dilSecim == 0){
 8003808:	4b74      	ldr	r3, [pc, #464]	; (80039dc <menu+0x2198>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d104      	bne.n	800381a <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003810:	4a75      	ldr	r2, [pc, #468]	; (80039e8 <menu+0x21a4>)
 8003812:	2101      	movs	r1, #1
 8003814:	2001      	movs	r0, #1
 8003816:	f7fc ffcf 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 800381a:	4b70      	ldr	r3, [pc, #448]	; (80039dc <menu+0x2198>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d104      	bne.n	800382c <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003822:	4a72      	ldr	r2, [pc, #456]	; (80039ec <menu+0x21a8>)
 8003824:	2101      	movs	r1, #1
 8003826:	2001      	movs	r0, #1
 8003828:	f7fc ffc6 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 800382c:	4b70      	ldr	r3, [pc, #448]	; (80039f0 <menu+0x21ac>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d113      	bne.n	800385c <menu+0x2018>
			if(dilSecim == 0) {
 8003834:	4b69      	ldr	r3, [pc, #420]	; (80039dc <menu+0x2198>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d105      	bne.n	8003848 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 800383c:	4a6d      	ldr	r2, [pc, #436]	; (80039f4 <menu+0x21b0>)
 800383e:	2101      	movs	r1, #1
 8003840:	2002      	movs	r0, #2
 8003842:	f7fc ffb9 	bl	80007b8 <lcd_print>
 8003846:	e020      	b.n	800388a <menu+0x2046>
			} else if(dilSecim == 1){
 8003848:	4b64      	ldr	r3, [pc, #400]	; (80039dc <menu+0x2198>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d11c      	bne.n	800388a <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003850:	4a69      	ldr	r2, [pc, #420]	; (80039f8 <menu+0x21b4>)
 8003852:	2101      	movs	r1, #1
 8003854:	2002      	movs	r0, #2
 8003856:	f7fc ffaf 	bl	80007b8 <lcd_print>
 800385a:	e016      	b.n	800388a <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 800385c:	4b64      	ldr	r3, [pc, #400]	; (80039f0 <menu+0x21ac>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d112      	bne.n	800388a <menu+0x2046>
			if(dilSecim == 0){
 8003864:	4b5d      	ldr	r3, [pc, #372]	; (80039dc <menu+0x2198>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d105      	bne.n	8003878 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 800386c:	4a63      	ldr	r2, [pc, #396]	; (80039fc <menu+0x21b8>)
 800386e:	2101      	movs	r1, #1
 8003870:	2002      	movs	r0, #2
 8003872:	f7fc ffa1 	bl	80007b8 <lcd_print>
 8003876:	e008      	b.n	800388a <menu+0x2046>
			} else if(dilSecim == 1){
 8003878:	4b58      	ldr	r3, [pc, #352]	; (80039dc <menu+0x2198>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d104      	bne.n	800388a <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003880:	4a5f      	ldr	r2, [pc, #380]	; (8003a00 <menu+0x21bc>)
 8003882:	2101      	movs	r1, #1
 8003884:	2002      	movs	r0, #2
 8003886:	f7fc ff97 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800388a:	2102      	movs	r1, #2
 800388c:	485d      	ldr	r0, [pc, #372]	; (8003a04 <menu+0x21c0>)
 800388e:	f006 fb29 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003892:	4603      	mov	r3, r0
 8003894:	2b01      	cmp	r3, #1
 8003896:	d115      	bne.n	80038c4 <menu+0x2080>
 8003898:	4b5b      	ldr	r3, [pc, #364]	; (8003a08 <menu+0x21c4>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	f083 0301 	eor.w	r3, r3, #1
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00e      	beq.n	80038c4 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80038a6:	4b52      	ldr	r3, [pc, #328]	; (80039f0 <menu+0x21ac>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	3301      	adds	r3, #1
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4b50      	ldr	r3, [pc, #320]	; (80039f0 <menu+0x21ac>)
 80038b0:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80038b2:	4b4f      	ldr	r3, [pc, #316]	; (80039f0 <menu+0x21ac>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d902      	bls.n	80038c0 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80038ba:	4b4d      	ldr	r3, [pc, #308]	; (80039f0 <menu+0x21ac>)
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038c0:	f002 fd3e 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038c4:	2104      	movs	r1, #4
 80038c6:	484f      	ldr	r0, [pc, #316]	; (8003a04 <menu+0x21c0>)
 80038c8:	f006 fb0c 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d115      	bne.n	80038fe <menu+0x20ba>
 80038d2:	4b4d      	ldr	r3, [pc, #308]	; (8003a08 <menu+0x21c4>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	f083 0301 	eor.w	r3, r3, #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00e      	beq.n	80038fe <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80038e0:	4b43      	ldr	r3, [pc, #268]	; (80039f0 <menu+0x21ac>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	4b41      	ldr	r3, [pc, #260]	; (80039f0 <menu+0x21ac>)
 80038ea:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80038ec:	4b40      	ldr	r3, [pc, #256]	; (80039f0 <menu+0x21ac>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80038f4:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <menu+0x21ac>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038fa:	f002 fd21 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038fe:	2108      	movs	r1, #8
 8003900:	4840      	ldr	r0, [pc, #256]	; (8003a04 <menu+0x21c0>)
 8003902:	f006 faef 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003906:	4603      	mov	r3, r0
 8003908:	2b01      	cmp	r3, #1
 800390a:	d10d      	bne.n	8003928 <menu+0x20e4>
 800390c:	4b3e      	ldr	r3, [pc, #248]	; (8003a08 <menu+0x21c4>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	f083 0301 	eor.w	r3, r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d006      	beq.n	8003928 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800391a:	4b35      	ldr	r3, [pc, #212]	; (80039f0 <menu+0x21ac>)
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	4b3b      	ldr	r3, [pc, #236]	; (8003a0c <menu+0x21c8>)
 8003920:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003922:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <menu+0x21cc>)
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003928:	4b3a      	ldr	r3, [pc, #232]	; (8003a14 <menu+0x21d0>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b13      	cmp	r3, #19
 800392e:	f040 80d5 	bne.w	8003adc <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003932:	4b2c      	ldr	r3, [pc, #176]	; (80039e4 <menu+0x21a0>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d113      	bne.n	8003962 <menu+0x211e>
			if(dilSecim == 0) {
 800393a:	4b28      	ldr	r3, [pc, #160]	; (80039dc <menu+0x2198>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d105      	bne.n	800394e <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003942:	4a35      	ldr	r2, [pc, #212]	; (8003a18 <menu+0x21d4>)
 8003944:	2101      	movs	r1, #1
 8003946:	2001      	movs	r0, #1
 8003948:	f7fc ff36 	bl	80007b8 <lcd_print>
 800394c:	e01f      	b.n	800398e <menu+0x214a>
			} else if(dilSecim == 1) {
 800394e:	4b23      	ldr	r3, [pc, #140]	; (80039dc <menu+0x2198>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d11b      	bne.n	800398e <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003956:	4a31      	ldr	r2, [pc, #196]	; (8003a1c <menu+0x21d8>)
 8003958:	2101      	movs	r1, #1
 800395a:	2001      	movs	r0, #1
 800395c:	f7fc ff2c 	bl	80007b8 <lcd_print>
 8003960:	e015      	b.n	800398e <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003962:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <menu+0x21a0>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d111      	bne.n	800398e <menu+0x214a>
			if(dilSecim == 0) {
 800396a:	4b1c      	ldr	r3, [pc, #112]	; (80039dc <menu+0x2198>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d104      	bne.n	800397c <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003972:	4a2b      	ldr	r2, [pc, #172]	; (8003a20 <menu+0x21dc>)
 8003974:	2101      	movs	r1, #1
 8003976:	2001      	movs	r0, #1
 8003978:	f7fc ff1e 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 800397c:	4b17      	ldr	r3, [pc, #92]	; (80039dc <menu+0x2198>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d104      	bne.n	800398e <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003984:	4a27      	ldr	r2, [pc, #156]	; (8003a24 <menu+0x21e0>)
 8003986:	2101      	movs	r1, #1
 8003988:	2001      	movs	r0, #1
 800398a:	f7fc ff15 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800398e:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <menu+0x21e4>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d113      	bne.n	80039be <menu+0x217a>
			if(dilSecim == 0) {
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <menu+0x2198>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d105      	bne.n	80039aa <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800399e:	4a15      	ldr	r2, [pc, #84]	; (80039f4 <menu+0x21b0>)
 80039a0:	2101      	movs	r1, #1
 80039a2:	2002      	movs	r0, #2
 80039a4:	f7fc ff08 	bl	80007b8 <lcd_print>
 80039a8:	e049      	b.n	8003a3e <menu+0x21fa>
			} else if(dilSecim == 1) {
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <menu+0x2198>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d145      	bne.n	8003a3e <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80039b2:	4a11      	ldr	r2, [pc, #68]	; (80039f8 <menu+0x21b4>)
 80039b4:	2101      	movs	r1, #1
 80039b6:	2002      	movs	r0, #2
 80039b8:	f7fc fefe 	bl	80007b8 <lcd_print>
 80039bc:	e03f      	b.n	8003a3e <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80039be:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <menu+0x21e4>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d13b      	bne.n	8003a3e <menu+0x21fa>
			if(dilSecim == 0) {
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <menu+0x2198>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d12e      	bne.n	8003a2c <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80039ce:	4a0b      	ldr	r2, [pc, #44]	; (80039fc <menu+0x21b8>)
 80039d0:	2101      	movs	r1, #1
 80039d2:	2002      	movs	r0, #2
 80039d4:	f7fc fef0 	bl	80007b8 <lcd_print>
 80039d8:	e031      	b.n	8003a3e <menu+0x21fa>
 80039da:	bf00      	nop
 80039dc:	20000d51 	.word	0x20000d51
 80039e0:	0800e310 	.word	0x0800e310
 80039e4:	20000d3f 	.word	0x20000d3f
 80039e8:	0800e320 	.word	0x0800e320
 80039ec:	0800e334 	.word	0x0800e334
 80039f0:	20000d40 	.word	0x20000d40
 80039f4:	0800dea4 	.word	0x0800dea4
 80039f8:	0800deb8 	.word	0x0800deb8
 80039fc:	0800df04 	.word	0x0800df04
 8003a00:	0800df18 	.word	0x0800df18
 8003a04:	40010800 	.word	0x40010800
 8003a08:	20000d5f 	.word	0x20000d5f
 8003a0c:	20000c38 	.word	0x20000c38
 8003a10:	20000d5c 	.word	0x20000d5c
 8003a14:	20000d30 	.word	0x20000d30
 8003a18:	0800e348 	.word	0x0800e348
 8003a1c:	0800e35c 	.word	0x0800e35c
 8003a20:	0800e370 	.word	0x0800e370
 8003a24:	0800e384 	.word	0x0800e384
 8003a28:	20000d41 	.word	0x20000d41
			} else if(dilSecim == 1) {
 8003a2c:	4b90      	ldr	r3, [pc, #576]	; (8003c70 <menu+0x242c>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d104      	bne.n	8003a3e <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003a34:	4a8f      	ldr	r2, [pc, #572]	; (8003c74 <menu+0x2430>)
 8003a36:	2101      	movs	r1, #1
 8003a38:	2002      	movs	r0, #2
 8003a3a:	f7fc febd 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a3e:	2102      	movs	r1, #2
 8003a40:	488d      	ldr	r0, [pc, #564]	; (8003c78 <menu+0x2434>)
 8003a42:	f006 fa4f 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d115      	bne.n	8003a78 <menu+0x2234>
 8003a4c:	4b8b      	ldr	r3, [pc, #556]	; (8003c7c <menu+0x2438>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	f083 0301 	eor.w	r3, r3, #1
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00e      	beq.n	8003a78 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003a5a:	4b89      	ldr	r3, [pc, #548]	; (8003c80 <menu+0x243c>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4b87      	ldr	r3, [pc, #540]	; (8003c80 <menu+0x243c>)
 8003a64:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003a66:	4b86      	ldr	r3, [pc, #536]	; (8003c80 <menu+0x243c>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d902      	bls.n	8003a74 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8003a6e:	4b84      	ldr	r3, [pc, #528]	; (8003c80 <menu+0x243c>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a74:	f002 fc64 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a78:	2104      	movs	r1, #4
 8003a7a:	487f      	ldr	r0, [pc, #508]	; (8003c78 <menu+0x2434>)
 8003a7c:	f006 fa32 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d115      	bne.n	8003ab2 <menu+0x226e>
 8003a86:	4b7d      	ldr	r3, [pc, #500]	; (8003c7c <menu+0x2438>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	f083 0301 	eor.w	r3, r3, #1
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00e      	beq.n	8003ab2 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003a94:	4b7a      	ldr	r3, [pc, #488]	; (8003c80 <menu+0x243c>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	4b78      	ldr	r3, [pc, #480]	; (8003c80 <menu+0x243c>)
 8003a9e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003aa0:	4b77      	ldr	r3, [pc, #476]	; (8003c80 <menu+0x243c>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003aa8:	4b75      	ldr	r3, [pc, #468]	; (8003c80 <menu+0x243c>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003aae:	f002 fc47 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ab2:	2108      	movs	r1, #8
 8003ab4:	4870      	ldr	r0, [pc, #448]	; (8003c78 <menu+0x2434>)
 8003ab6:	f006 fa15 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10d      	bne.n	8003adc <menu+0x2298>
 8003ac0:	4b6e      	ldr	r3, [pc, #440]	; (8003c7c <menu+0x2438>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	f083 0301 	eor.w	r3, r3, #1
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d006      	beq.n	8003adc <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003ace:	4b6c      	ldr	r3, [pc, #432]	; (8003c80 <menu+0x243c>)
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	4b6c      	ldr	r3, [pc, #432]	; (8003c84 <menu+0x2440>)
 8003ad4:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003ad6:	4b6c      	ldr	r3, [pc, #432]	; (8003c88 <menu+0x2444>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003adc:	4b6b      	ldr	r3, [pc, #428]	; (8003c8c <menu+0x2448>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b14      	cmp	r3, #20
 8003ae2:	f040 80b5 	bne.w	8003c50 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003ae6:	4b6a      	ldr	r3, [pc, #424]	; (8003c90 <menu+0x244c>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d113      	bne.n	8003b16 <menu+0x22d2>
			if(dilSecim == 0) {
 8003aee:	4b60      	ldr	r3, [pc, #384]	; (8003c70 <menu+0x242c>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d105      	bne.n	8003b02 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003af6:	4a67      	ldr	r2, [pc, #412]	; (8003c94 <menu+0x2450>)
 8003af8:	2101      	movs	r1, #1
 8003afa:	2001      	movs	r0, #1
 8003afc:	f7fc fe5c 	bl	80007b8 <lcd_print>
 8003b00:	e020      	b.n	8003b44 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003b02:	4b5b      	ldr	r3, [pc, #364]	; (8003c70 <menu+0x242c>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d11c      	bne.n	8003b44 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003b0a:	4a63      	ldr	r2, [pc, #396]	; (8003c98 <menu+0x2454>)
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f7fc fe52 	bl	80007b8 <lcd_print>
 8003b14:	e016      	b.n	8003b44 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003b16:	4b5e      	ldr	r3, [pc, #376]	; (8003c90 <menu+0x244c>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d112      	bne.n	8003b44 <menu+0x2300>
			if(dilSecim == 0) {
 8003b1e:	4b54      	ldr	r3, [pc, #336]	; (8003c70 <menu+0x242c>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003b26:	4a5d      	ldr	r2, [pc, #372]	; (8003c9c <menu+0x2458>)
 8003b28:	2101      	movs	r1, #1
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	f7fc fe44 	bl	80007b8 <lcd_print>
 8003b30:	e008      	b.n	8003b44 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003b32:	4b4f      	ldr	r3, [pc, #316]	; (8003c70 <menu+0x242c>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d104      	bne.n	8003b44 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003b3a:	4a59      	ldr	r2, [pc, #356]	; (8003ca0 <menu+0x245c>)
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	2001      	movs	r0, #1
 8003b40:	f7fc fe3a 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003b44:	4b57      	ldr	r3, [pc, #348]	; (8003ca4 <menu+0x2460>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d113      	bne.n	8003b74 <menu+0x2330>
			if(dilSecim == 0) {
 8003b4c:	4b48      	ldr	r3, [pc, #288]	; (8003c70 <menu+0x242c>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003b54:	4a54      	ldr	r2, [pc, #336]	; (8003ca8 <menu+0x2464>)
 8003b56:	2101      	movs	r1, #1
 8003b58:	2002      	movs	r0, #2
 8003b5a:	f7fc fe2d 	bl	80007b8 <lcd_print>
 8003b5e:	e020      	b.n	8003ba2 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003b60:	4b43      	ldr	r3, [pc, #268]	; (8003c70 <menu+0x242c>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d11c      	bne.n	8003ba2 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003b68:	4a50      	ldr	r2, [pc, #320]	; (8003cac <menu+0x2468>)
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	2002      	movs	r0, #2
 8003b6e:	f7fc fe23 	bl	80007b8 <lcd_print>
 8003b72:	e016      	b.n	8003ba2 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003b74:	4b4b      	ldr	r3, [pc, #300]	; (8003ca4 <menu+0x2460>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d112      	bne.n	8003ba2 <menu+0x235e>
			if(dilSecim == 0) {
 8003b7c:	4b3c      	ldr	r3, [pc, #240]	; (8003c70 <menu+0x242c>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d105      	bne.n	8003b90 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003b84:	4a4a      	ldr	r2, [pc, #296]	; (8003cb0 <menu+0x246c>)
 8003b86:	2101      	movs	r1, #1
 8003b88:	2002      	movs	r0, #2
 8003b8a:	f7fc fe15 	bl	80007b8 <lcd_print>
 8003b8e:	e008      	b.n	8003ba2 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003b90:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <menu+0x242c>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d104      	bne.n	8003ba2 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003b98:	4a46      	ldr	r2, [pc, #280]	; (8003cb4 <menu+0x2470>)
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	2002      	movs	r0, #2
 8003b9e:	f7fc fe0b 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	4834      	ldr	r0, [pc, #208]	; (8003c78 <menu+0x2434>)
 8003ba6:	f006 f99d 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d119      	bne.n	8003be4 <menu+0x23a0>
 8003bb0:	4b32      	ldr	r3, [pc, #200]	; (8003c7c <menu+0x2438>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	f083 0301 	eor.w	r3, r3, #1
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d012      	beq.n	8003be4 <menu+0x23a0>
 8003bbe:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <menu+0x244c>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d10e      	bne.n	8003be4 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003bc6:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <menu+0x2460>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4b35      	ldr	r3, [pc, #212]	; (8003ca4 <menu+0x2460>)
 8003bd0:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003bd2:	4b34      	ldr	r3, [pc, #208]	; (8003ca4 <menu+0x2460>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d902      	bls.n	8003be0 <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003bda:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <menu+0x2460>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003be0:	f002 fbae 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003be4:	2104      	movs	r1, #4
 8003be6:	4824      	ldr	r0, [pc, #144]	; (8003c78 <menu+0x2434>)
 8003be8:	f006 f97c 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d119      	bne.n	8003c26 <menu+0x23e2>
 8003bf2:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <menu+0x2438>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	f083 0301 	eor.w	r3, r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d012      	beq.n	8003c26 <menu+0x23e2>
 8003c00:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <menu+0x244c>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d10e      	bne.n	8003c26 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003c08:	4b26      	ldr	r3, [pc, #152]	; (8003ca4 <menu+0x2460>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <menu+0x2460>)
 8003c12:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003c14:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <menu+0x2460>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003c1c:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <menu+0x2460>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c22:	f002 fb8d 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c26:	2108      	movs	r1, #8
 8003c28:	4813      	ldr	r0, [pc, #76]	; (8003c78 <menu+0x2434>)
 8003c2a:	f006 f95b 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d10d      	bne.n	8003c50 <menu+0x240c>
 8003c34:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <menu+0x2438>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	f083 0301 	eor.w	r3, r3, #1
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003c42:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <menu+0x2460>)
 8003c44:	781a      	ldrb	r2, [r3, #0]
 8003c46:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <menu+0x2440>)
 8003c48:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <menu+0x2444>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003c50:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <menu+0x2448>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b15      	cmp	r3, #21
 8003c56:	f040 80c2 	bne.w	8003dde <menu+0x259a>
		if(dilSecim == 0) {
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <menu+0x242c>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d12c      	bne.n	8003cbc <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003c62:	4a15      	ldr	r2, [pc, #84]	; (8003cb8 <menu+0x2474>)
 8003c64:	2101      	movs	r1, #1
 8003c66:	2001      	movs	r0, #1
 8003c68:	f7fc fda6 	bl	80007b8 <lcd_print>
 8003c6c:	e02f      	b.n	8003cce <menu+0x248a>
 8003c6e:	bf00      	nop
 8003c70:	20000d51 	.word	0x20000d51
 8003c74:	0800df18 	.word	0x0800df18
 8003c78:	40010800 	.word	0x40010800
 8003c7c:	20000d5f 	.word	0x20000d5f
 8003c80:	20000d41 	.word	0x20000d41
 8003c84:	20000c38 	.word	0x20000c38
 8003c88:	20000d5c 	.word	0x20000d5c
 8003c8c:	20000d30 	.word	0x20000d30
 8003c90:	20000d3f 	.word	0x20000d3f
 8003c94:	0800e398 	.word	0x0800e398
 8003c98:	0800e3ac 	.word	0x0800e3ac
 8003c9c:	0800e3c0 	.word	0x0800e3c0
 8003ca0:	0800e3d4 	.word	0x0800e3d4
 8003ca4:	20000d42 	.word	0x20000d42
 8003ca8:	0800e3e8 	.word	0x0800e3e8
 8003cac:	0800e3fc 	.word	0x0800e3fc
 8003cb0:	0800e40c 	.word	0x0800e40c
 8003cb4:	0800e420 	.word	0x0800e420
 8003cb8:	0800e430 	.word	0x0800e430
		} else if(dilSecim == 1) {
 8003cbc:	4b9c      	ldr	r3, [pc, #624]	; (8003f30 <menu+0x26ec>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d104      	bne.n	8003cce <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003cc4:	4a9b      	ldr	r2, [pc, #620]	; (8003f34 <menu+0x26f0>)
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f7fc fd75 	bl	80007b8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003cce:	4b9a      	ldr	r3, [pc, #616]	; (8003f38 <menu+0x26f4>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d112      	bne.n	8003cfc <menu+0x24b8>
			if(dilSecim == 0) {
 8003cd6:	4b96      	ldr	r3, [pc, #600]	; (8003f30 <menu+0x26ec>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d104      	bne.n	8003ce8 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003cde:	4a97      	ldr	r2, [pc, #604]	; (8003f3c <menu+0x26f8>)
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	2002      	movs	r0, #2
 8003ce4:	f7fc fd68 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003ce8:	4b91      	ldr	r3, [pc, #580]	; (8003f30 <menu+0x26ec>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d11c      	bne.n	8003d2a <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003cf0:	4a93      	ldr	r2, [pc, #588]	; (8003f40 <menu+0x26fc>)
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	2002      	movs	r0, #2
 8003cf6:	f7fc fd5f 	bl	80007b8 <lcd_print>
 8003cfa:	e016      	b.n	8003d2a <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003cfc:	4b8e      	ldr	r3, [pc, #568]	; (8003f38 <menu+0x26f4>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d112      	bne.n	8003d2a <menu+0x24e6>
			if(dilSecim == 0) {
 8003d04:	4b8a      	ldr	r3, [pc, #552]	; (8003f30 <menu+0x26ec>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d105      	bne.n	8003d18 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003d0c:	4a8d      	ldr	r2, [pc, #564]	; (8003f44 <menu+0x2700>)
 8003d0e:	2101      	movs	r1, #1
 8003d10:	2002      	movs	r0, #2
 8003d12:	f7fc fd51 	bl	80007b8 <lcd_print>
 8003d16:	e008      	b.n	8003d2a <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003d18:	4b85      	ldr	r3, [pc, #532]	; (8003f30 <menu+0x26ec>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d104      	bne.n	8003d2a <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003d20:	4a89      	ldr	r2, [pc, #548]	; (8003f48 <menu+0x2704>)
 8003d22:	2101      	movs	r1, #1
 8003d24:	2002      	movs	r0, #2
 8003d26:	f7fc fd47 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	4887      	ldr	r0, [pc, #540]	; (8003f4c <menu+0x2708>)
 8003d2e:	f006 f8d9 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d115      	bne.n	8003d64 <menu+0x2520>
 8003d38:	4b85      	ldr	r3, [pc, #532]	; (8003f50 <menu+0x270c>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	f083 0301 	eor.w	r3, r3, #1
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00e      	beq.n	8003d64 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003d46:	4b7c      	ldr	r3, [pc, #496]	; (8003f38 <menu+0x26f4>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	4b7a      	ldr	r3, [pc, #488]	; (8003f38 <menu+0x26f4>)
 8003d50:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003d52:	4b79      	ldr	r3, [pc, #484]	; (8003f38 <menu+0x26f4>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d902      	bls.n	8003d60 <menu+0x251c>
				platformSilindirTipi = 0;
 8003d5a:	4b77      	ldr	r3, [pc, #476]	; (8003f38 <menu+0x26f4>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d60:	f002 faee 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d64:	2104      	movs	r1, #4
 8003d66:	4879      	ldr	r0, [pc, #484]	; (8003f4c <menu+0x2708>)
 8003d68:	f006 f8bc 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d115      	bne.n	8003d9e <menu+0x255a>
 8003d72:	4b77      	ldr	r3, [pc, #476]	; (8003f50 <menu+0x270c>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	f083 0301 	eor.w	r3, r3, #1
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00e      	beq.n	8003d9e <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003d80:	4b6d      	ldr	r3, [pc, #436]	; (8003f38 <menu+0x26f4>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	4b6b      	ldr	r3, [pc, #428]	; (8003f38 <menu+0x26f4>)
 8003d8a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003d8c:	4b6a      	ldr	r3, [pc, #424]	; (8003f38 <menu+0x26f4>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003d94:	4b68      	ldr	r3, [pc, #416]	; (8003f38 <menu+0x26f4>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d9a:	f002 fad1 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d9e:	2108      	movs	r1, #8
 8003da0:	486a      	ldr	r0, [pc, #424]	; (8003f4c <menu+0x2708>)
 8003da2:	f006 f89f 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d118      	bne.n	8003dde <menu+0x259a>
 8003dac:	4b68      	ldr	r3, [pc, #416]	; (8003f50 <menu+0x270c>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	f083 0301 	eor.w	r3, r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d011      	beq.n	8003dde <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003dba:	4b5f      	ldr	r3, [pc, #380]	; (8003f38 <menu+0x26f4>)
 8003dbc:	781a      	ldrb	r2, [r3, #0]
 8003dbe:	4b65      	ldr	r3, [pc, #404]	; (8003f54 <menu+0x2710>)
 8003dc0:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003dc2:	4b5d      	ldr	r3, [pc, #372]	; (8003f38 <menu+0x26f4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d106      	bne.n	8003dd8 <menu+0x2594>
				altLimit = 1;
 8003dca:	4b63      	ldr	r3, [pc, #396]	; (8003f58 <menu+0x2714>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003dd0:	4b61      	ldr	r3, [pc, #388]	; (8003f58 <menu+0x2714>)
 8003dd2:	781a      	ldrb	r2, [r3, #0]
 8003dd4:	4b5f      	ldr	r3, [pc, #380]	; (8003f54 <menu+0x2710>)
 8003dd6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003dd8:	4b60      	ldr	r3, [pc, #384]	; (8003f5c <menu+0x2718>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003dde:	4b60      	ldr	r3, [pc, #384]	; (8003f60 <menu+0x271c>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b16      	cmp	r3, #22
 8003de4:	f040 8081 	bne.w	8003eea <menu+0x26a6>
		if(dilSecim == 0) {
 8003de8:	4b51      	ldr	r3, [pc, #324]	; (8003f30 <menu+0x26ec>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003df0:	4a5c      	ldr	r2, [pc, #368]	; (8003f64 <menu+0x2720>)
 8003df2:	2101      	movs	r1, #1
 8003df4:	2001      	movs	r0, #1
 8003df6:	f7fc fcdf 	bl	80007b8 <lcd_print>
 8003dfa:	e008      	b.n	8003e0e <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003dfc:	4b4c      	ldr	r3, [pc, #304]	; (8003f30 <menu+0x26ec>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d104      	bne.n	8003e0e <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003e04:	4a58      	ldr	r2, [pc, #352]	; (8003f68 <menu+0x2724>)
 8003e06:	2101      	movs	r1, #1
 8003e08:	2001      	movs	r0, #1
 8003e0a:	f7fc fcd5 	bl	80007b8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003e0e:	4b48      	ldr	r3, [pc, #288]	; (8003f30 <menu+0x26ec>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d105      	bne.n	8003e22 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e16:	4a55      	ldr	r2, [pc, #340]	; (8003f6c <menu+0x2728>)
 8003e18:	2101      	movs	r1, #1
 8003e1a:	2002      	movs	r0, #2
 8003e1c:	f7fc fccc 	bl	80007b8 <lcd_print>
 8003e20:	e008      	b.n	8003e34 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003e22:	4b43      	ldr	r3, [pc, #268]	; (8003f30 <menu+0x26ec>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d104      	bne.n	8003e34 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003e2a:	4a51      	ldr	r2, [pc, #324]	; (8003f70 <menu+0x272c>)
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	2002      	movs	r0, #2
 8003e30:	f7fc fcc2 	bl	80007b8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003e34:	4b4f      	ldr	r3, [pc, #316]	; (8003f74 <menu+0x2730>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	220a      	movs	r2, #10
 8003e3a:	494f      	ldr	r1, [pc, #316]	; (8003f78 <menu+0x2734>)
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f009 f87d 	bl	800cf3c <itoa>
		lcd_print(2,16,snum);
 8003e42:	4a4d      	ldr	r2, [pc, #308]	; (8003f78 <menu+0x2734>)
 8003e44:	2110      	movs	r1, #16
 8003e46:	2002      	movs	r0, #2
 8003e48:	f7fc fcb6 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e4c:	2102      	movs	r1, #2
 8003e4e:	483f      	ldr	r0, [pc, #252]	; (8003f4c <menu+0x2708>)
 8003e50:	f006 f848 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d115      	bne.n	8003e86 <menu+0x2642>
 8003e5a:	4b3d      	ldr	r3, [pc, #244]	; (8003f50 <menu+0x270c>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	f083 0301 	eor.w	r3, r3, #1
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00e      	beq.n	8003e86 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003e68:	4b42      	ldr	r3, [pc, #264]	; (8003f74 <menu+0x2730>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	4b40      	ldr	r3, [pc, #256]	; (8003f74 <menu+0x2730>)
 8003e72:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003e74:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <menu+0x2730>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d902      	bls.n	8003e82 <menu+0x263e>
				yukariValfTmr = 0;
 8003e7c:	4b3d      	ldr	r3, [pc, #244]	; (8003f74 <menu+0x2730>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e82:	f002 fa5d 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e86:	2104      	movs	r1, #4
 8003e88:	4830      	ldr	r0, [pc, #192]	; (8003f4c <menu+0x2708>)
 8003e8a:	f006 f82b 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d115      	bne.n	8003ec0 <menu+0x267c>
 8003e94:	4b2e      	ldr	r3, [pc, #184]	; (8003f50 <menu+0x270c>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	f083 0301 	eor.w	r3, r3, #1
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00e      	beq.n	8003ec0 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003ea2:	4b34      	ldr	r3, [pc, #208]	; (8003f74 <menu+0x2730>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	4b32      	ldr	r3, [pc, #200]	; (8003f74 <menu+0x2730>)
 8003eac:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003eae:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <menu+0x2730>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	d902      	bls.n	8003ebc <menu+0x2678>
		   		yukariValfTmr = 5;
 8003eb6:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <menu+0x2730>)
 8003eb8:	2205      	movs	r2, #5
 8003eba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ebc:	f002 fa40 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ec0:	2108      	movs	r1, #8
 8003ec2:	4822      	ldr	r0, [pc, #136]	; (8003f4c <menu+0x2708>)
 8003ec4:	f006 f80e 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d10d      	bne.n	8003eea <menu+0x26a6>
 8003ece:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <menu+0x270c>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	f083 0301 	eor.w	r3, r3, #1
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d006      	beq.n	8003eea <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003edc:	4b25      	ldr	r3, [pc, #148]	; (8003f74 <menu+0x2730>)
 8003ede:	781a      	ldrb	r2, [r3, #0]
 8003ee0:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <menu+0x2710>)
 8003ee2:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <menu+0x2718>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003eea:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <menu+0x271c>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b17      	cmp	r3, #23
 8003ef0:	f040 80ac 	bne.w	800404c <menu+0x2808>
		if(dilSecim == 0) {
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <menu+0x26ec>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d105      	bne.n	8003f08 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003efc:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <menu+0x2738>)
 8003efe:	2101      	movs	r1, #1
 8003f00:	2001      	movs	r0, #1
 8003f02:	f7fc fc59 	bl	80007b8 <lcd_print>
 8003f06:	e008      	b.n	8003f1a <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <menu+0x26ec>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d104      	bne.n	8003f1a <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003f10:	4a1b      	ldr	r2, [pc, #108]	; (8003f80 <menu+0x273c>)
 8003f12:	2101      	movs	r1, #1
 8003f14:	2001      	movs	r0, #1
 8003f16:	f7fc fc4f 	bl	80007b8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <menu+0x26ec>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d130      	bne.n	8003f84 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f22:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <menu+0x2728>)
 8003f24:	2101      	movs	r1, #1
 8003f26:	2002      	movs	r0, #2
 8003f28:	f7fc fc46 	bl	80007b8 <lcd_print>
 8003f2c:	e033      	b.n	8003f96 <menu+0x2752>
 8003f2e:	bf00      	nop
 8003f30:	20000d51 	.word	0x20000d51
 8003f34:	0800e444 	.word	0x0800e444
 8003f38:	20000d43 	.word	0x20000d43
 8003f3c:	0800e3e8 	.word	0x0800e3e8
 8003f40:	0800e3fc 	.word	0x0800e3fc
 8003f44:	0800e40c 	.word	0x0800e40c
 8003f48:	0800e420 	.word	0x0800e420
 8003f4c:	40010800 	.word	0x40010800
 8003f50:	20000d5f 	.word	0x20000d5f
 8003f54:	20000c38 	.word	0x20000c38
 8003f58:	20000d36 	.word	0x20000d36
 8003f5c:	20000d5c 	.word	0x20000d5c
 8003f60:	20000d30 	.word	0x20000d30
 8003f64:	0800e454 	.word	0x0800e454
 8003f68:	0800e468 	.word	0x0800e468
 8003f6c:	0800e108 	.word	0x0800e108
 8003f70:	0800e47c 	.word	0x0800e47c
 8003f74:	20000d44 	.word	0x20000d44
 8003f78:	20000ca8 	.word	0x20000ca8
 8003f7c:	0800e48c 	.word	0x0800e48c
 8003f80:	0800e4a0 	.word	0x0800e4a0
			} else if(dilSecim == 1) {
 8003f84:	4b98      	ldr	r3, [pc, #608]	; (80041e8 <menu+0x29a4>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d104      	bne.n	8003f96 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003f8c:	4a97      	ldr	r2, [pc, #604]	; (80041ec <menu+0x29a8>)
 8003f8e:	2101      	movs	r1, #1
 8003f90:	2002      	movs	r0, #2
 8003f92:	f7fc fc11 	bl	80007b8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003f96:	4b96      	ldr	r3, [pc, #600]	; (80041f0 <menu+0x29ac>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	220a      	movs	r2, #10
 8003f9c:	4995      	ldr	r1, [pc, #596]	; (80041f4 <menu+0x29b0>)
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f008 ffcc 	bl	800cf3c <itoa>
		lcd_print(2,16,snum);
 8003fa4:	4a93      	ldr	r2, [pc, #588]	; (80041f4 <menu+0x29b0>)
 8003fa6:	2110      	movs	r1, #16
 8003fa8:	2002      	movs	r0, #2
 8003faa:	f7fc fc05 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fae:	2102      	movs	r1, #2
 8003fb0:	4891      	ldr	r0, [pc, #580]	; (80041f8 <menu+0x29b4>)
 8003fb2:	f005 ff97 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d115      	bne.n	8003fe8 <menu+0x27a4>
 8003fbc:	4b8f      	ldr	r3, [pc, #572]	; (80041fc <menu+0x29b8>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	f083 0301 	eor.w	r3, r3, #1
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00e      	beq.n	8003fe8 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003fca:	4b89      	ldr	r3, [pc, #548]	; (80041f0 <menu+0x29ac>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	4b87      	ldr	r3, [pc, #540]	; (80041f0 <menu+0x29ac>)
 8003fd4:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003fd6:	4b86      	ldr	r3, [pc, #536]	; (80041f0 <menu+0x29ac>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b05      	cmp	r3, #5
 8003fdc:	d902      	bls.n	8003fe4 <menu+0x27a0>
				asagiValfTmr = 0;
 8003fde:	4b84      	ldr	r3, [pc, #528]	; (80041f0 <menu+0x29ac>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003fe4:	f002 f9ac 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fe8:	2104      	movs	r1, #4
 8003fea:	4883      	ldr	r0, [pc, #524]	; (80041f8 <menu+0x29b4>)
 8003fec:	f005 ff7a 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d115      	bne.n	8004022 <menu+0x27de>
 8003ff6:	4b81      	ldr	r3, [pc, #516]	; (80041fc <menu+0x29b8>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	f083 0301 	eor.w	r3, r3, #1
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00e      	beq.n	8004022 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8004004:	4b7a      	ldr	r3, [pc, #488]	; (80041f0 <menu+0x29ac>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	3b01      	subs	r3, #1
 800400a:	b2da      	uxtb	r2, r3
 800400c:	4b78      	ldr	r3, [pc, #480]	; (80041f0 <menu+0x29ac>)
 800400e:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8004010:	4b77      	ldr	r3, [pc, #476]	; (80041f0 <menu+0x29ac>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b06      	cmp	r3, #6
 8004016:	d902      	bls.n	800401e <menu+0x27da>
		   		asagiValfTmr = 5;
 8004018:	4b75      	ldr	r3, [pc, #468]	; (80041f0 <menu+0x29ac>)
 800401a:	2205      	movs	r2, #5
 800401c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800401e:	f002 f98f 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004022:	2108      	movs	r1, #8
 8004024:	4874      	ldr	r0, [pc, #464]	; (80041f8 <menu+0x29b4>)
 8004026:	f005 ff5d 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800402a:	4603      	mov	r3, r0
 800402c:	2b01      	cmp	r3, #1
 800402e:	d10d      	bne.n	800404c <menu+0x2808>
 8004030:	4b72      	ldr	r3, [pc, #456]	; (80041fc <menu+0x29b8>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	f083 0301 	eor.w	r3, r3, #1
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d006      	beq.n	800404c <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 800403e:	4b6c      	ldr	r3, [pc, #432]	; (80041f0 <menu+0x29ac>)
 8004040:	781a      	ldrb	r2, [r3, #0]
 8004042:	4b6f      	ldr	r3, [pc, #444]	; (8004200 <menu+0x29bc>)
 8004044:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8004046:	4b6f      	ldr	r3, [pc, #444]	; (8004204 <menu+0x29c0>)
 8004048:	2201      	movs	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 800404c:	4b6e      	ldr	r3, [pc, #440]	; (8004208 <menu+0x29c4>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b18      	cmp	r3, #24
 8004052:	f040 809d 	bne.w	8004190 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8004056:	4b6d      	ldr	r3, [pc, #436]	; (800420c <menu+0x29c8>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d113      	bne.n	8004086 <menu+0x2842>
			if(dilSecim == 0) {
 800405e:	4b62      	ldr	r3, [pc, #392]	; (80041e8 <menu+0x29a4>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d105      	bne.n	8004072 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8004066:	4a6a      	ldr	r2, [pc, #424]	; (8004210 <menu+0x29cc>)
 8004068:	2101      	movs	r1, #1
 800406a:	2001      	movs	r0, #1
 800406c:	f7fc fba4 	bl	80007b8 <lcd_print>
 8004070:	e020      	b.n	80040b4 <menu+0x2870>
			} else if(dilSecim == 1) {
 8004072:	4b5d      	ldr	r3, [pc, #372]	; (80041e8 <menu+0x29a4>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d11c      	bne.n	80040b4 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 800407a:	4a66      	ldr	r2, [pc, #408]	; (8004214 <menu+0x29d0>)
 800407c:	2101      	movs	r1, #1
 800407e:	2001      	movs	r0, #1
 8004080:	f7fc fb9a 	bl	80007b8 <lcd_print>
 8004084:	e016      	b.n	80040b4 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8004086:	4b61      	ldr	r3, [pc, #388]	; (800420c <menu+0x29c8>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d112      	bne.n	80040b4 <menu+0x2870>
			if(dilSecim == 0) {
 800408e:	4b56      	ldr	r3, [pc, #344]	; (80041e8 <menu+0x29a4>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d105      	bne.n	80040a2 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8004096:	4a60      	ldr	r2, [pc, #384]	; (8004218 <menu+0x29d4>)
 8004098:	2101      	movs	r1, #1
 800409a:	2001      	movs	r0, #1
 800409c:	f7fc fb8c 	bl	80007b8 <lcd_print>
 80040a0:	e008      	b.n	80040b4 <menu+0x2870>
			} else if(dilSecim == 1) {
 80040a2:	4b51      	ldr	r3, [pc, #324]	; (80041e8 <menu+0x29a4>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d104      	bne.n	80040b4 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 80040aa:	4a5c      	ldr	r2, [pc, #368]	; (800421c <menu+0x29d8>)
 80040ac:	2101      	movs	r1, #1
 80040ae:	2001      	movs	r0, #1
 80040b0:	f7fc fb82 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 80040b4:	4b4c      	ldr	r3, [pc, #304]	; (80041e8 <menu+0x29a4>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d105      	bne.n	80040c8 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 80040bc:	4a58      	ldr	r2, [pc, #352]	; (8004220 <menu+0x29dc>)
 80040be:	2101      	movs	r1, #1
 80040c0:	2002      	movs	r0, #2
 80040c2:	f7fc fb79 	bl	80007b8 <lcd_print>
 80040c6:	e008      	b.n	80040da <menu+0x2896>
			} else if(dilSecim == 1) {
 80040c8:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <menu+0x29a4>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d104      	bne.n	80040da <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 80040d0:	4a46      	ldr	r2, [pc, #280]	; (80041ec <menu+0x29a8>)
 80040d2:	2101      	movs	r1, #1
 80040d4:	2002      	movs	r0, #2
 80040d6:	f7fc fb6f 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80040da:	4b52      	ldr	r3, [pc, #328]	; (8004224 <menu+0x29e0>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	220a      	movs	r2, #10
 80040e0:	4944      	ldr	r1, [pc, #272]	; (80041f4 <menu+0x29b0>)
 80040e2:	4618      	mov	r0, r3
 80040e4:	f008 ff2a 	bl	800cf3c <itoa>
		lcd_print(2, 16, snum);
 80040e8:	4a42      	ldr	r2, [pc, #264]	; (80041f4 <menu+0x29b0>)
 80040ea:	2110      	movs	r1, #16
 80040ec:	2002      	movs	r0, #2
 80040ee:	f7fc fb63 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040f2:	2102      	movs	r1, #2
 80040f4:	4840      	ldr	r0, [pc, #256]	; (80041f8 <menu+0x29b4>)
 80040f6:	f005 fef5 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d115      	bne.n	800412c <menu+0x28e8>
 8004100:	4b3e      	ldr	r3, [pc, #248]	; (80041fc <menu+0x29b8>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	f083 0301 	eor.w	r3, r3, #1
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00e      	beq.n	800412c <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 800410e:	4b45      	ldr	r3, [pc, #276]	; (8004224 <menu+0x29e0>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	3301      	adds	r3, #1
 8004114:	b2da      	uxtb	r2, r3
 8004116:	4b43      	ldr	r3, [pc, #268]	; (8004224 <menu+0x29e0>)
 8004118:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800411a:	4b42      	ldr	r3, [pc, #264]	; (8004224 <menu+0x29e0>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b05      	cmp	r3, #5
 8004120:	d902      	bls.n	8004128 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8004122:	4b40      	ldr	r3, [pc, #256]	; (8004224 <menu+0x29e0>)
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004128:	f002 f90a 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800412c:	2104      	movs	r1, #4
 800412e:	4832      	ldr	r0, [pc, #200]	; (80041f8 <menu+0x29b4>)
 8004130:	f005 fed8 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004134:	4603      	mov	r3, r0
 8004136:	2b01      	cmp	r3, #1
 8004138:	d115      	bne.n	8004166 <menu+0x2922>
 800413a:	4b30      	ldr	r3, [pc, #192]	; (80041fc <menu+0x29b8>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	f083 0301 	eor.w	r3, r3, #1
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00e      	beq.n	8004166 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8004148:	4b36      	ldr	r3, [pc, #216]	; (8004224 <menu+0x29e0>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	3b01      	subs	r3, #1
 800414e:	b2da      	uxtb	r2, r3
 8004150:	4b34      	ldr	r3, [pc, #208]	; (8004224 <menu+0x29e0>)
 8004152:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8004154:	4b33      	ldr	r3, [pc, #204]	; (8004224 <menu+0x29e0>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b06      	cmp	r3, #6
 800415a:	d902      	bls.n	8004162 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 800415c:	4b31      	ldr	r3, [pc, #196]	; (8004224 <menu+0x29e0>)
 800415e:	2205      	movs	r2, #5
 8004160:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004162:	f002 f8ed 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004166:	2108      	movs	r1, #8
 8004168:	4823      	ldr	r0, [pc, #140]	; (80041f8 <menu+0x29b4>)
 800416a:	f005 febb 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800416e:	4603      	mov	r3, r0
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10d      	bne.n	8004190 <menu+0x294c>
 8004174:	4b21      	ldr	r3, [pc, #132]	; (80041fc <menu+0x29b8>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	f083 0301 	eor.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d006      	beq.n	8004190 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8004182:	4b28      	ldr	r3, [pc, #160]	; (8004224 <menu+0x29e0>)
 8004184:	781a      	ldrb	r2, [r3, #0]
 8004186:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <menu+0x29bc>)
 8004188:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800418a:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <menu+0x29c0>)
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <menu+0x29c4>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b19      	cmp	r3, #25
 8004196:	f040 80c4 	bne.w	8004322 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 800419a:	4b1c      	ldr	r3, [pc, #112]	; (800420c <menu+0x29c8>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d113      	bne.n	80041ca <menu+0x2986>
			if(dilSecim == 0) {
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <menu+0x29a4>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d105      	bne.n	80041b6 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 80041aa:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <menu+0x29e4>)
 80041ac:	2101      	movs	r1, #1
 80041ae:	2001      	movs	r0, #1
 80041b0:	f7fc fb02 	bl	80007b8 <lcd_print>
 80041b4:	e047      	b.n	8004246 <menu+0x2a02>
			} else if(dilSecim == 1) {
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <menu+0x29a4>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d143      	bne.n	8004246 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 80041be:	4a1b      	ldr	r2, [pc, #108]	; (800422c <menu+0x29e8>)
 80041c0:	2101      	movs	r1, #1
 80041c2:	2001      	movs	r0, #1
 80041c4:	f7fc faf8 	bl	80007b8 <lcd_print>
 80041c8:	e03d      	b.n	8004246 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80041ca:	4b10      	ldr	r3, [pc, #64]	; (800420c <menu+0x29c8>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d139      	bne.n	8004246 <menu+0x2a02>
			if(dilSecim == 0) {
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <menu+0x29a4>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d12c      	bne.n	8004234 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 80041da:	4a15      	ldr	r2, [pc, #84]	; (8004230 <menu+0x29ec>)
 80041dc:	2101      	movs	r1, #1
 80041de:	2001      	movs	r0, #1
 80041e0:	f7fc faea 	bl	80007b8 <lcd_print>
 80041e4:	e02f      	b.n	8004246 <menu+0x2a02>
 80041e6:	bf00      	nop
 80041e8:	20000d51 	.word	0x20000d51
 80041ec:	0800e47c 	.word	0x0800e47c
 80041f0:	20000d45 	.word	0x20000d45
 80041f4:	20000ca8 	.word	0x20000ca8
 80041f8:	40010800 	.word	0x40010800
 80041fc:	20000d5f 	.word	0x20000d5f
 8004200:	20000c38 	.word	0x20000c38
 8004204:	20000d5c 	.word	0x20000d5c
 8004208:	20000d30 	.word	0x20000d30
 800420c:	20000d3f 	.word	0x20000d3f
 8004210:	0800e4b4 	.word	0x0800e4b4
 8004214:	0800e4c8 	.word	0x0800e4c8
 8004218:	0800e4dc 	.word	0x0800e4dc
 800421c:	0800e4f0 	.word	0x0800e4f0
 8004220:	0800e108 	.word	0x0800e108
 8004224:	20000d46 	.word	0x20000d46
 8004228:	0800e504 	.word	0x0800e504
 800422c:	0800e518 	.word	0x0800e518
 8004230:	0800e52c 	.word	0x0800e52c
			} else if(dilSecim == 1) {
 8004234:	4b73      	ldr	r3, [pc, #460]	; (8004404 <menu+0x2bc0>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d104      	bne.n	8004246 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 800423c:	4a72      	ldr	r2, [pc, #456]	; (8004408 <menu+0x2bc4>)
 800423e:	2101      	movs	r1, #1
 8004240:	2001      	movs	r0, #1
 8004242:	f7fc fab9 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8004246:	4b6f      	ldr	r3, [pc, #444]	; (8004404 <menu+0x2bc0>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d105      	bne.n	800425a <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 800424e:	4a6f      	ldr	r2, [pc, #444]	; (800440c <menu+0x2bc8>)
 8004250:	2101      	movs	r1, #1
 8004252:	2002      	movs	r0, #2
 8004254:	f7fc fab0 	bl	80007b8 <lcd_print>
 8004258:	e008      	b.n	800426c <menu+0x2a28>
			} else if(dilSecim == 1) {
 800425a:	4b6a      	ldr	r3, [pc, #424]	; (8004404 <menu+0x2bc0>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d104      	bne.n	800426c <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8004262:	4a6b      	ldr	r2, [pc, #428]	; (8004410 <menu+0x2bcc>)
 8004264:	2101      	movs	r1, #1
 8004266:	2002      	movs	r0, #2
 8004268:	f7fc faa6 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 800426c:	4b69      	ldr	r3, [pc, #420]	; (8004414 <menu+0x2bd0>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	220a      	movs	r2, #10
 8004272:	4969      	ldr	r1, [pc, #420]	; (8004418 <menu+0x2bd4>)
 8004274:	4618      	mov	r0, r3
 8004276:	f008 fe61 	bl	800cf3c <itoa>
		lcd_print(2,16,snum);
 800427a:	4a67      	ldr	r2, [pc, #412]	; (8004418 <menu+0x2bd4>)
 800427c:	2110      	movs	r1, #16
 800427e:	2002      	movs	r0, #2
 8004280:	f7fc fa9a 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004284:	2102      	movs	r1, #2
 8004286:	4865      	ldr	r0, [pc, #404]	; (800441c <menu+0x2bd8>)
 8004288:	f005 fe2c 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800428c:	4603      	mov	r3, r0
 800428e:	2b01      	cmp	r3, #1
 8004290:	d115      	bne.n	80042be <menu+0x2a7a>
 8004292:	4b63      	ldr	r3, [pc, #396]	; (8004420 <menu+0x2bdc>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	f083 0301 	eor.w	r3, r3, #1
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00e      	beq.n	80042be <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 80042a0:	4b5c      	ldr	r3, [pc, #368]	; (8004414 <menu+0x2bd0>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	3301      	adds	r3, #1
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	4b5a      	ldr	r3, [pc, #360]	; (8004414 <menu+0x2bd0>)
 80042aa:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 80042ac:	4b59      	ldr	r3, [pc, #356]	; (8004414 <menu+0x2bd0>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	d902      	bls.n	80042ba <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 80042b4:	4b57      	ldr	r3, [pc, #348]	; (8004414 <menu+0x2bd0>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042ba:	f002 f841 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80042be:	2104      	movs	r1, #4
 80042c0:	4856      	ldr	r0, [pc, #344]	; (800441c <menu+0x2bd8>)
 80042c2:	f005 fe0f 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d115      	bne.n	80042f8 <menu+0x2ab4>
 80042cc:	4b54      	ldr	r3, [pc, #336]	; (8004420 <menu+0x2bdc>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	f083 0301 	eor.w	r3, r3, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00e      	beq.n	80042f8 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80042da:	4b4e      	ldr	r3, [pc, #312]	; (8004414 <menu+0x2bd0>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	3b01      	subs	r3, #1
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <menu+0x2bd0>)
 80042e4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80042e6:	4b4b      	ldr	r3, [pc, #300]	; (8004414 <menu+0x2bd0>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d902      	bls.n	80042f4 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 80042ee:	4b49      	ldr	r3, [pc, #292]	; (8004414 <menu+0x2bd0>)
 80042f0:	2205      	movs	r2, #5
 80042f2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042f4:	f002 f824 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042f8:	2108      	movs	r1, #8
 80042fa:	4848      	ldr	r0, [pc, #288]	; (800441c <menu+0x2bd8>)
 80042fc:	f005 fdf2 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004300:	4603      	mov	r3, r0
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10d      	bne.n	8004322 <menu+0x2ade>
 8004306:	4b46      	ldr	r3, [pc, #280]	; (8004420 <menu+0x2bdc>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	f083 0301 	eor.w	r3, r3, #1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d006      	beq.n	8004322 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004314:	4b3f      	ldr	r3, [pc, #252]	; (8004414 <menu+0x2bd0>)
 8004316:	781a      	ldrb	r2, [r3, #0]
 8004318:	4b42      	ldr	r3, [pc, #264]	; (8004424 <menu+0x2be0>)
 800431a:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 800431c:	4b42      	ldr	r3, [pc, #264]	; (8004428 <menu+0x2be4>)
 800431e:	2201      	movs	r2, #1
 8004320:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8004322:	4b42      	ldr	r3, [pc, #264]	; (800442c <menu+0x2be8>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b1a      	cmp	r3, #26
 8004328:	f040 80ec 	bne.w	8004504 <menu+0x2cc0>
		if(dilSecim == 0) {
 800432c:	4b35      	ldr	r3, [pc, #212]	; (8004404 <menu+0x2bc0>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8004334:	4a3e      	ldr	r2, [pc, #248]	; (8004430 <menu+0x2bec>)
 8004336:	2101      	movs	r1, #1
 8004338:	2001      	movs	r0, #1
 800433a:	f7fc fa3d 	bl	80007b8 <lcd_print>
 800433e:	e008      	b.n	8004352 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8004340:	4b30      	ldr	r3, [pc, #192]	; (8004404 <menu+0x2bc0>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d104      	bne.n	8004352 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8004348:	4a3a      	ldr	r2, [pc, #232]	; (8004434 <menu+0x2bf0>)
 800434a:	2101      	movs	r1, #1
 800434c:	2001      	movs	r0, #1
 800434e:	f7fc fa33 	bl	80007b8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8004352:	4b39      	ldr	r3, [pc, #228]	; (8004438 <menu+0x2bf4>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b63      	cmp	r3, #99	; 0x63
 8004358:	d91e      	bls.n	8004398 <menu+0x2b54>
			if(dilSecim == 0) {
 800435a:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <menu+0x2bc0>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d104      	bne.n	800436c <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8004362:	4a2a      	ldr	r2, [pc, #168]	; (800440c <menu+0x2bc8>)
 8004364:	2101      	movs	r1, #1
 8004366:	2002      	movs	r0, #2
 8004368:	f7fc fa26 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 800436c:	4b25      	ldr	r3, [pc, #148]	; (8004404 <menu+0x2bc0>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d104      	bne.n	800437e <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8004374:	4a26      	ldr	r2, [pc, #152]	; (8004410 <menu+0x2bcc>)
 8004376:	2101      	movs	r1, #1
 8004378:	2002      	movs	r0, #2
 800437a:	f7fc fa1d 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800437e:	4b2e      	ldr	r3, [pc, #184]	; (8004438 <menu+0x2bf4>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	220a      	movs	r2, #10
 8004384:	4924      	ldr	r1, [pc, #144]	; (8004418 <menu+0x2bd4>)
 8004386:	4618      	mov	r0, r3
 8004388:	f008 fdd8 	bl	800cf3c <itoa>
			lcd_print(2,14,snum);
 800438c:	4a22      	ldr	r2, [pc, #136]	; (8004418 <menu+0x2bd4>)
 800438e:	210e      	movs	r1, #14
 8004390:	2002      	movs	r0, #2
 8004392:	f7fc fa11 	bl	80007b8 <lcd_print>
 8004396:	e066      	b.n	8004466 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8004398:	4b27      	ldr	r3, [pc, #156]	; (8004438 <menu+0x2bf4>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b09      	cmp	r3, #9
 800439e:	d923      	bls.n	80043e8 <menu+0x2ba4>
 80043a0:	4b25      	ldr	r3, [pc, #148]	; (8004438 <menu+0x2bf4>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b63      	cmp	r3, #99	; 0x63
 80043a6:	d81f      	bhi.n	80043e8 <menu+0x2ba4>
			if(dilSecim == 0) {
 80043a8:	4b16      	ldr	r3, [pc, #88]	; (8004404 <menu+0x2bc0>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d105      	bne.n	80043bc <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 80043b0:	4a16      	ldr	r2, [pc, #88]	; (800440c <menu+0x2bc8>)
 80043b2:	2101      	movs	r1, #1
 80043b4:	2002      	movs	r0, #2
 80043b6:	f7fc f9ff 	bl	80007b8 <lcd_print>
 80043ba:	e008      	b.n	80043ce <menu+0x2b8a>
			} else if(dilSecim == 1) {
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <menu+0x2bc0>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d104      	bne.n	80043ce <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 80043c4:	4a12      	ldr	r2, [pc, #72]	; (8004410 <menu+0x2bcc>)
 80043c6:	2101      	movs	r1, #1
 80043c8:	2002      	movs	r0, #2
 80043ca:	f7fc f9f5 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80043ce:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <menu+0x2bf4>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	220a      	movs	r2, #10
 80043d4:	4910      	ldr	r1, [pc, #64]	; (8004418 <menu+0x2bd4>)
 80043d6:	4618      	mov	r0, r3
 80043d8:	f008 fdb0 	bl	800cf3c <itoa>
			lcd_print(2, 15, snum);
 80043dc:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <menu+0x2bd4>)
 80043de:	210f      	movs	r1, #15
 80043e0:	2002      	movs	r0, #2
 80043e2:	f7fc f9e9 	bl	80007b8 <lcd_print>
 80043e6:	e03e      	b.n	8004466 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 80043e8:	4b13      	ldr	r3, [pc, #76]	; (8004438 <menu+0x2bf4>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b09      	cmp	r3, #9
 80043ee:	d83a      	bhi.n	8004466 <menu+0x2c22>
			if(dilSecim == 0) {
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <menu+0x2bc0>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d121      	bne.n	800443c <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 80043f8:	4a04      	ldr	r2, [pc, #16]	; (800440c <menu+0x2bc8>)
 80043fa:	2101      	movs	r1, #1
 80043fc:	2002      	movs	r0, #2
 80043fe:	f7fc f9db 	bl	80007b8 <lcd_print>
 8004402:	e024      	b.n	800444e <menu+0x2c0a>
 8004404:	20000d51 	.word	0x20000d51
 8004408:	0800e540 	.word	0x0800e540
 800440c:	0800e108 	.word	0x0800e108
 8004410:	0800e47c 	.word	0x0800e47c
 8004414:	20000d47 	.word	0x20000d47
 8004418:	20000ca8 	.word	0x20000ca8
 800441c:	40010800 	.word	0x40010800
 8004420:	20000d5f 	.word	0x20000d5f
 8004424:	20000c38 	.word	0x20000c38
 8004428:	20000d5c 	.word	0x20000d5c
 800442c:	20000d30 	.word	0x20000d30
 8004430:	0800e554 	.word	0x0800e554
 8004434:	0800e568 	.word	0x0800e568
 8004438:	20000d48 	.word	0x20000d48
			} else if(dilSecim == 1) {
 800443c:	4b8f      	ldr	r3, [pc, #572]	; (800467c <menu+0x2e38>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d104      	bne.n	800444e <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8004444:	4a8e      	ldr	r2, [pc, #568]	; (8004680 <menu+0x2e3c>)
 8004446:	2101      	movs	r1, #1
 8004448:	2002      	movs	r0, #2
 800444a:	f7fc f9b5 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800444e:	4b8d      	ldr	r3, [pc, #564]	; (8004684 <menu+0x2e40>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	220a      	movs	r2, #10
 8004454:	498c      	ldr	r1, [pc, #560]	; (8004688 <menu+0x2e44>)
 8004456:	4618      	mov	r0, r3
 8004458:	f008 fd70 	bl	800cf3c <itoa>
			lcd_print(2, 16, snum);
 800445c:	4a8a      	ldr	r2, [pc, #552]	; (8004688 <menu+0x2e44>)
 800445e:	2110      	movs	r1, #16
 8004460:	2002      	movs	r0, #2
 8004462:	f7fc f9a9 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004466:	2102      	movs	r1, #2
 8004468:	4888      	ldr	r0, [pc, #544]	; (800468c <menu+0x2e48>)
 800446a:	f005 fd3b 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800446e:	4603      	mov	r3, r0
 8004470:	2b01      	cmp	r3, #1
 8004472:	d115      	bne.n	80044a0 <menu+0x2c5c>
 8004474:	4b86      	ldr	r3, [pc, #536]	; (8004690 <menu+0x2e4c>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	f083 0301 	eor.w	r3, r3, #1
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00e      	beq.n	80044a0 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8004482:	4b80      	ldr	r3, [pc, #512]	; (8004684 <menu+0x2e40>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	3301      	adds	r3, #1
 8004488:	b2da      	uxtb	r2, r3
 800448a:	4b7e      	ldr	r3, [pc, #504]	; (8004684 <menu+0x2e40>)
 800448c:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800448e:	4b7d      	ldr	r3, [pc, #500]	; (8004684 <menu+0x2e40>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2bb4      	cmp	r3, #180	; 0xb4
 8004494:	d902      	bls.n	800449c <menu+0x2c58>
				makineCalismaTmr = 0;
 8004496:	4b7b      	ldr	r3, [pc, #492]	; (8004684 <menu+0x2e40>)
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800449c:	f001 ff50 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044a0:	2104      	movs	r1, #4
 80044a2:	487a      	ldr	r0, [pc, #488]	; (800468c <menu+0x2e48>)
 80044a4:	f005 fd1e 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d115      	bne.n	80044da <menu+0x2c96>
 80044ae:	4b78      	ldr	r3, [pc, #480]	; (8004690 <menu+0x2e4c>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	f083 0301 	eor.w	r3, r3, #1
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00e      	beq.n	80044da <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 80044bc:	4b71      	ldr	r3, [pc, #452]	; (8004684 <menu+0x2e40>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	4b6f      	ldr	r3, [pc, #444]	; (8004684 <menu+0x2e40>)
 80044c6:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80044c8:	4b6e      	ldr	r3, [pc, #440]	; (8004684 <menu+0x2e40>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2bb5      	cmp	r3, #181	; 0xb5
 80044ce:	d902      	bls.n	80044d6 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 80044d0:	4b6c      	ldr	r3, [pc, #432]	; (8004684 <menu+0x2e40>)
 80044d2:	22b4      	movs	r2, #180	; 0xb4
 80044d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044d6:	f001 ff33 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044da:	2108      	movs	r1, #8
 80044dc:	486b      	ldr	r0, [pc, #428]	; (800468c <menu+0x2e48>)
 80044de:	f005 fd01 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d10d      	bne.n	8004504 <menu+0x2cc0>
 80044e8:	4b69      	ldr	r3, [pc, #420]	; (8004690 <menu+0x2e4c>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	f083 0301 	eor.w	r3, r3, #1
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d006      	beq.n	8004504 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 80044f6:	4b63      	ldr	r3, [pc, #396]	; (8004684 <menu+0x2e40>)
 80044f8:	781a      	ldrb	r2, [r3, #0]
 80044fa:	4b66      	ldr	r3, [pc, #408]	; (8004694 <menu+0x2e50>)
 80044fc:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80044fe:	4b66      	ldr	r3, [pc, #408]	; (8004698 <menu+0x2e54>)
 8004500:	2201      	movs	r2, #1
 8004502:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004504:	4b65      	ldr	r3, [pc, #404]	; (800469c <menu+0x2e58>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b1b      	cmp	r3, #27
 800450a:	f040 8083 	bne.w	8004614 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800450e:	4a64      	ldr	r2, [pc, #400]	; (80046a0 <menu+0x2e5c>)
 8004510:	2101      	movs	r1, #1
 8004512:	2001      	movs	r0, #1
 8004514:	f7fc f950 	bl	80007b8 <lcd_print>

		if(buzzer == 0) {
 8004518:	4b62      	ldr	r3, [pc, #392]	; (80046a4 <menu+0x2e60>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d113      	bne.n	8004548 <menu+0x2d04>
			if(dilSecim == 0) {
 8004520:	4b56      	ldr	r3, [pc, #344]	; (800467c <menu+0x2e38>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004528:	4a5f      	ldr	r2, [pc, #380]	; (80046a8 <menu+0x2e64>)
 800452a:	2101      	movs	r1, #1
 800452c:	2002      	movs	r0, #2
 800452e:	f7fc f943 	bl	80007b8 <lcd_print>
 8004532:	e020      	b.n	8004576 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004534:	4b51      	ldr	r3, [pc, #324]	; (800467c <menu+0x2e38>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d11c      	bne.n	8004576 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 800453c:	4a5b      	ldr	r2, [pc, #364]	; (80046ac <menu+0x2e68>)
 800453e:	2101      	movs	r1, #1
 8004540:	2002      	movs	r0, #2
 8004542:	f7fc f939 	bl	80007b8 <lcd_print>
 8004546:	e016      	b.n	8004576 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8004548:	4b56      	ldr	r3, [pc, #344]	; (80046a4 <menu+0x2e60>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d112      	bne.n	8004576 <menu+0x2d32>
			if(dilSecim == 0) {
 8004550:	4b4a      	ldr	r3, [pc, #296]	; (800467c <menu+0x2e38>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004558:	4a55      	ldr	r2, [pc, #340]	; (80046b0 <menu+0x2e6c>)
 800455a:	2101      	movs	r1, #1
 800455c:	2002      	movs	r0, #2
 800455e:	f7fc f92b 	bl	80007b8 <lcd_print>
 8004562:	e008      	b.n	8004576 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004564:	4b45      	ldr	r3, [pc, #276]	; (800467c <menu+0x2e38>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d104      	bne.n	8004576 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 800456c:	4a51      	ldr	r2, [pc, #324]	; (80046b4 <menu+0x2e70>)
 800456e:	2101      	movs	r1, #1
 8004570:	2002      	movs	r0, #2
 8004572:	f7fc f921 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004576:	2102      	movs	r1, #2
 8004578:	4844      	ldr	r0, [pc, #272]	; (800468c <menu+0x2e48>)
 800457a:	f005 fcb3 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800457e:	4603      	mov	r3, r0
 8004580:	2b01      	cmp	r3, #1
 8004582:	d115      	bne.n	80045b0 <menu+0x2d6c>
 8004584:	4b42      	ldr	r3, [pc, #264]	; (8004690 <menu+0x2e4c>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	f083 0301 	eor.w	r3, r3, #1
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00e      	beq.n	80045b0 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8004592:	4b44      	ldr	r3, [pc, #272]	; (80046a4 <menu+0x2e60>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	3301      	adds	r3, #1
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4b42      	ldr	r3, [pc, #264]	; (80046a4 <menu+0x2e60>)
 800459c:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800459e:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <menu+0x2e60>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d902      	bls.n	80045ac <menu+0x2d68>
				buzzer = 0;
 80045a6:	4b3f      	ldr	r3, [pc, #252]	; (80046a4 <menu+0x2e60>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80045ac:	f001 fec8 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045b0:	2104      	movs	r1, #4
 80045b2:	4836      	ldr	r0, [pc, #216]	; (800468c <menu+0x2e48>)
 80045b4:	f005 fc96 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d115      	bne.n	80045ea <menu+0x2da6>
 80045be:	4b34      	ldr	r3, [pc, #208]	; (8004690 <menu+0x2e4c>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	f083 0301 	eor.w	r3, r3, #1
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00e      	beq.n	80045ea <menu+0x2da6>
			buzzer = buzzer - 1;
 80045cc:	4b35      	ldr	r3, [pc, #212]	; (80046a4 <menu+0x2e60>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	4b33      	ldr	r3, [pc, #204]	; (80046a4 <menu+0x2e60>)
 80045d6:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80045d8:	4b32      	ldr	r3, [pc, #200]	; (80046a4 <menu+0x2e60>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <menu+0x2da2>
		   		buzzer = 1;
 80045e0:	4b30      	ldr	r3, [pc, #192]	; (80046a4 <menu+0x2e60>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80045e6:	f001 feab 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045ea:	2108      	movs	r1, #8
 80045ec:	4827      	ldr	r0, [pc, #156]	; (800468c <menu+0x2e48>)
 80045ee:	f005 fc79 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d10d      	bne.n	8004614 <menu+0x2dd0>
 80045f8:	4b25      	ldr	r3, [pc, #148]	; (8004690 <menu+0x2e4c>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	f083 0301 	eor.w	r3, r3, #1
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d006      	beq.n	8004614 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004606:	4b27      	ldr	r3, [pc, #156]	; (80046a4 <menu+0x2e60>)
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	4b22      	ldr	r3, [pc, #136]	; (8004694 <menu+0x2e50>)
 800460c:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800460e:	4b22      	ldr	r3, [pc, #136]	; (8004698 <menu+0x2e54>)
 8004610:	2201      	movs	r2, #1
 8004612:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004614:	4b21      	ldr	r3, [pc, #132]	; (800469c <menu+0x2e58>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b1c      	cmp	r3, #28
 800461a:	f040 80ab 	bne.w	8004774 <menu+0x2f30>
		calismaSayModu = 0;
 800461e:	4b26      	ldr	r3, [pc, #152]	; (80046b8 <menu+0x2e74>)
 8004620:	2200      	movs	r2, #0
 8004622:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004624:	4a25      	ldr	r2, [pc, #148]	; (80046bc <menu+0x2e78>)
 8004626:	2101      	movs	r1, #1
 8004628:	2001      	movs	r0, #1
 800462a:	f7fc f8c5 	bl	80007b8 <lcd_print>

		if(demoMode == 0) {
 800462e:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <menu+0x2e7c>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d113      	bne.n	800465e <menu+0x2e1a>
			if(dilSecim == 0) {
 8004636:	4b11      	ldr	r3, [pc, #68]	; (800467c <menu+0x2e38>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d105      	bne.n	800464a <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800463e:	4a1a      	ldr	r2, [pc, #104]	; (80046a8 <menu+0x2e64>)
 8004640:	2101      	movs	r1, #1
 8004642:	2002      	movs	r0, #2
 8004644:	f7fc f8b8 	bl	80007b8 <lcd_print>
 8004648:	e045      	b.n	80046d6 <menu+0x2e92>
			} else if(dilSecim == 1) {
 800464a:	4b0c      	ldr	r3, [pc, #48]	; (800467c <menu+0x2e38>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d141      	bne.n	80046d6 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8004652:	4a16      	ldr	r2, [pc, #88]	; (80046ac <menu+0x2e68>)
 8004654:	2101      	movs	r1, #1
 8004656:	2002      	movs	r0, #2
 8004658:	f7fc f8ae 	bl	80007b8 <lcd_print>
 800465c:	e03b      	b.n	80046d6 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800465e:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <menu+0x2e7c>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d137      	bne.n	80046d6 <menu+0x2e92>
			if(dilSecim == 0){
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <menu+0x2e38>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d12a      	bne.n	80046c4 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800466e:	4a10      	ldr	r2, [pc, #64]	; (80046b0 <menu+0x2e6c>)
 8004670:	2101      	movs	r1, #1
 8004672:	2002      	movs	r0, #2
 8004674:	f7fc f8a0 	bl	80007b8 <lcd_print>
 8004678:	e02d      	b.n	80046d6 <menu+0x2e92>
 800467a:	bf00      	nop
 800467c:	20000d51 	.word	0x20000d51
 8004680:	0800e47c 	.word	0x0800e47c
 8004684:	20000d48 	.word	0x20000d48
 8004688:	20000ca8 	.word	0x20000ca8
 800468c:	40010800 	.word	0x40010800
 8004690:	20000d5f 	.word	0x20000d5f
 8004694:	20000c38 	.word	0x20000c38
 8004698:	20000d5c 	.word	0x20000d5c
 800469c:	20000d30 	.word	0x20000d30
 80046a0:	0800e57c 	.word	0x0800e57c
 80046a4:	20000d4c 	.word	0x20000d4c
 80046a8:	0800dea4 	.word	0x0800dea4
 80046ac:	0800deb8 	.word	0x0800deb8
 80046b0:	0800df04 	.word	0x0800df04
 80046b4:	0800df18 	.word	0x0800df18
 80046b8:	20000d50 	.word	0x20000d50
 80046bc:	0800e590 	.word	0x0800e590
 80046c0:	20000d4e 	.word	0x20000d4e
			} else if(dilSecim == 1) {
 80046c4:	4b71      	ldr	r3, [pc, #452]	; (800488c <menu+0x3048>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d104      	bne.n	80046d6 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80046cc:	4a70      	ldr	r2, [pc, #448]	; (8004890 <menu+0x304c>)
 80046ce:	2101      	movs	r1, #1
 80046d0:	2002      	movs	r0, #2
 80046d2:	f7fc f871 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80046d6:	2102      	movs	r1, #2
 80046d8:	486e      	ldr	r0, [pc, #440]	; (8004894 <menu+0x3050>)
 80046da:	f005 fc03 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d115      	bne.n	8004710 <menu+0x2ecc>
 80046e4:	4b6c      	ldr	r3, [pc, #432]	; (8004898 <menu+0x3054>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	f083 0301 	eor.w	r3, r3, #1
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00e      	beq.n	8004710 <menu+0x2ecc>
			demoMode = demoMode + 1;
 80046f2:	4b6a      	ldr	r3, [pc, #424]	; (800489c <menu+0x3058>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	3301      	adds	r3, #1
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	4b68      	ldr	r3, [pc, #416]	; (800489c <menu+0x3058>)
 80046fc:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80046fe:	4b67      	ldr	r3, [pc, #412]	; (800489c <menu+0x3058>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d902      	bls.n	800470c <menu+0x2ec8>
				demoMode = 0;
 8004706:	4b65      	ldr	r3, [pc, #404]	; (800489c <menu+0x3058>)
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800470c:	f001 fe18 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004710:	2104      	movs	r1, #4
 8004712:	4860      	ldr	r0, [pc, #384]	; (8004894 <menu+0x3050>)
 8004714:	f005 fbe6 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004718:	4603      	mov	r3, r0
 800471a:	2b01      	cmp	r3, #1
 800471c:	d115      	bne.n	800474a <menu+0x2f06>
 800471e:	4b5e      	ldr	r3, [pc, #376]	; (8004898 <menu+0x3054>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	f083 0301 	eor.w	r3, r3, #1
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00e      	beq.n	800474a <menu+0x2f06>
			demoMode = demoMode - 1;
 800472c:	4b5b      	ldr	r3, [pc, #364]	; (800489c <menu+0x3058>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	3b01      	subs	r3, #1
 8004732:	b2da      	uxtb	r2, r3
 8004734:	4b59      	ldr	r3, [pc, #356]	; (800489c <menu+0x3058>)
 8004736:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004738:	4b58      	ldr	r3, [pc, #352]	; (800489c <menu+0x3058>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <menu+0x2f02>
		   		demoMode = 1;
 8004740:	4b56      	ldr	r3, [pc, #344]	; (800489c <menu+0x3058>)
 8004742:	2201      	movs	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004746:	f001 fdfb 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800474a:	2108      	movs	r1, #8
 800474c:	4851      	ldr	r0, [pc, #324]	; (8004894 <menu+0x3050>)
 800474e:	f005 fbc9 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004752:	4603      	mov	r3, r0
 8004754:	2b01      	cmp	r3, #1
 8004756:	d10d      	bne.n	8004774 <menu+0x2f30>
 8004758:	4b4f      	ldr	r3, [pc, #316]	; (8004898 <menu+0x3054>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	f083 0301 	eor.w	r3, r3, #1
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d006      	beq.n	8004774 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004766:	4b4d      	ldr	r3, [pc, #308]	; (800489c <menu+0x3058>)
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	4b4d      	ldr	r3, [pc, #308]	; (80048a0 <menu+0x305c>)
 800476c:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800476e:	4b4d      	ldr	r3, [pc, #308]	; (80048a4 <menu+0x3060>)
 8004770:	2201      	movs	r2, #1
 8004772:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004774:	4b4c      	ldr	r3, [pc, #304]	; (80048a8 <menu+0x3064>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b1d      	cmp	r3, #29
 800477a:	f040 8132 	bne.w	80049e2 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800477e:	4b4b      	ldr	r3, [pc, #300]	; (80048ac <menu+0x3068>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d113      	bne.n	80047ae <menu+0x2f6a>
 8004786:	4b4a      	ldr	r3, [pc, #296]	; (80048b0 <menu+0x306c>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <menu+0x2f6a>
 800478e:	4b49      	ldr	r3, [pc, #292]	; (80048b4 <menu+0x3070>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10b      	bne.n	80047ae <menu+0x2f6a>
 8004796:	4b48      	ldr	r3, [pc, #288]	; (80048b8 <menu+0x3074>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d107      	bne.n	80047ae <menu+0x2f6a>
 800479e:	4b47      	ldr	r3, [pc, #284]	; (80048bc <menu+0x3078>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d103      	bne.n	80047ae <menu+0x2f6a>
			calismaSayisiYar = 0;
 80047a6:	4b46      	ldr	r3, [pc, #280]	; (80048c0 <menu+0x307c>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	e002      	b.n	80047b4 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80047ae:	4b44      	ldr	r3, [pc, #272]	; (80048c0 <menu+0x307c>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80047b4:	4b43      	ldr	r3, [pc, #268]	; (80048c4 <menu+0x3080>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d154      	bne.n	8004866 <menu+0x3022>
			if(dilSecim == 0) {
 80047bc:	4b33      	ldr	r3, [pc, #204]	; (800488c <menu+0x3048>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d105      	bne.n	80047d0 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80047c4:	4a40      	ldr	r2, [pc, #256]	; (80048c8 <menu+0x3084>)
 80047c6:	2101      	movs	r1, #1
 80047c8:	2001      	movs	r0, #1
 80047ca:	f7fb fff5 	bl	80007b8 <lcd_print>
 80047ce:	e008      	b.n	80047e2 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80047d0:	4b2e      	ldr	r3, [pc, #184]	; (800488c <menu+0x3048>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d104      	bne.n	80047e2 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80047d8:	4a3c      	ldr	r2, [pc, #240]	; (80048cc <menu+0x3088>)
 80047da:	2101      	movs	r1, #1
 80047dc:	2001      	movs	r0, #1
 80047de:	f7fb ffeb 	bl	80007b8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80047e2:	4b36      	ldr	r3, [pc, #216]	; (80048bc <menu+0x3078>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	220a      	movs	r2, #10
 80047e8:	4939      	ldr	r1, [pc, #228]	; (80048d0 <menu+0x308c>)
 80047ea:	4618      	mov	r0, r3
 80047ec:	f008 fba6 	bl	800cf3c <itoa>
			lcd_print(2, 12, snum);
 80047f0:	4a37      	ldr	r2, [pc, #220]	; (80048d0 <menu+0x308c>)
 80047f2:	210c      	movs	r1, #12
 80047f4:	2002      	movs	r0, #2
 80047f6:	f7fb ffdf 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80047fa:	4b2f      	ldr	r3, [pc, #188]	; (80048b8 <menu+0x3074>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	220a      	movs	r2, #10
 8004800:	4933      	ldr	r1, [pc, #204]	; (80048d0 <menu+0x308c>)
 8004802:	4618      	mov	r0, r3
 8004804:	f008 fb9a 	bl	800cf3c <itoa>
			lcd_print(2, 13, snum);
 8004808:	4a31      	ldr	r2, [pc, #196]	; (80048d0 <menu+0x308c>)
 800480a:	210d      	movs	r1, #13
 800480c:	2002      	movs	r0, #2
 800480e:	f7fb ffd3 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004812:	4b28      	ldr	r3, [pc, #160]	; (80048b4 <menu+0x3070>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	220a      	movs	r2, #10
 8004818:	492d      	ldr	r1, [pc, #180]	; (80048d0 <menu+0x308c>)
 800481a:	4618      	mov	r0, r3
 800481c:	f008 fb8e 	bl	800cf3c <itoa>
			lcd_print(2, 14, snum);
 8004820:	4a2b      	ldr	r2, [pc, #172]	; (80048d0 <menu+0x308c>)
 8004822:	210e      	movs	r1, #14
 8004824:	2002      	movs	r0, #2
 8004826:	f7fb ffc7 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800482a:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <menu+0x306c>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	220a      	movs	r2, #10
 8004830:	4927      	ldr	r1, [pc, #156]	; (80048d0 <menu+0x308c>)
 8004832:	4618      	mov	r0, r3
 8004834:	f008 fb82 	bl	800cf3c <itoa>
			lcd_print(2, 15, snum);
 8004838:	4a25      	ldr	r2, [pc, #148]	; (80048d0 <menu+0x308c>)
 800483a:	210f      	movs	r1, #15
 800483c:	2002      	movs	r0, #2
 800483e:	f7fb ffbb 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004842:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <menu+0x3068>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	220a      	movs	r2, #10
 8004848:	4921      	ldr	r1, [pc, #132]	; (80048d0 <menu+0x308c>)
 800484a:	4618      	mov	r0, r3
 800484c:	f008 fb76 	bl	800cf3c <itoa>
			lcd_print(2, 16, snum);
 8004850:	4a1f      	ldr	r2, [pc, #124]	; (80048d0 <menu+0x308c>)
 8004852:	2110      	movs	r1, #16
 8004854:	2002      	movs	r0, #2
 8004856:	f7fb ffaf 	bl	80007b8 <lcd_print>

			lcd_print(2, 1, "           ");
 800485a:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <menu+0x3090>)
 800485c:	2101      	movs	r1, #1
 800485e:	2002      	movs	r0, #2
 8004860:	f7fb ffaa 	bl	80007b8 <lcd_print>
 8004864:	e048      	b.n	80048f8 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004866:	4b17      	ldr	r3, [pc, #92]	; (80048c4 <menu+0x3080>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d144      	bne.n	80048f8 <menu+0x30b4>
			if(dilSecim == 0) {
 800486e:	4b07      	ldr	r3, [pc, #28]	; (800488c <menu+0x3048>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d132      	bne.n	80048dc <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004876:	4a14      	ldr	r2, [pc, #80]	; (80048c8 <menu+0x3084>)
 8004878:	2101      	movs	r1, #1
 800487a:	2001      	movs	r0, #1
 800487c:	f7fb ff9c 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004880:	4a15      	ldr	r2, [pc, #84]	; (80048d8 <menu+0x3094>)
 8004882:	2101      	movs	r1, #1
 8004884:	2002      	movs	r0, #2
 8004886:	f7fb ff97 	bl	80007b8 <lcd_print>
 800488a:	e035      	b.n	80048f8 <menu+0x30b4>
 800488c:	20000d51 	.word	0x20000d51
 8004890:	0800df18 	.word	0x0800df18
 8004894:	40010800 	.word	0x40010800
 8004898:	20000d5f 	.word	0x20000d5f
 800489c:	20000d4e 	.word	0x20000d4e
 80048a0:	20000c38 	.word	0x20000c38
 80048a4:	20000d5c 	.word	0x20000d5c
 80048a8:	20000d30 	.word	0x20000d30
 80048ac:	20000d2d 	.word	0x20000d2d
 80048b0:	20000d2e 	.word	0x20000d2e
 80048b4:	200009b4 	.word	0x200009b4
 80048b8:	200009b5 	.word	0x200009b5
 80048bc:	20000d2f 	.word	0x20000d2f
 80048c0:	20000d71 	.word	0x20000d71
 80048c4:	20000d50 	.word	0x20000d50
 80048c8:	0800e5a0 	.word	0x0800e5a0
 80048cc:	0800e5b4 	.word	0x0800e5b4
 80048d0:	20000ca8 	.word	0x20000ca8
 80048d4:	0800e5c8 	.word	0x0800e5c8
 80048d8:	0800e5d4 	.word	0x0800e5d4
			} else if(dilSecim == 1) {
 80048dc:	4b94      	ldr	r3, [pc, #592]	; (8004b30 <menu+0x32ec>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d109      	bne.n	80048f8 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80048e4:	4a93      	ldr	r2, [pc, #588]	; (8004b34 <menu+0x32f0>)
 80048e6:	2101      	movs	r1, #1
 80048e8:	2001      	movs	r0, #1
 80048ea:	f7fb ff65 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80048ee:	4a92      	ldr	r2, [pc, #584]	; (8004b38 <menu+0x32f4>)
 80048f0:	2101      	movs	r1, #1
 80048f2:	2002      	movs	r0, #2
 80048f4:	f7fb ff60 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80048f8:	2102      	movs	r1, #2
 80048fa:	4890      	ldr	r0, [pc, #576]	; (8004b3c <menu+0x32f8>)
 80048fc:	f005 faf2 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004900:	4603      	mov	r3, r0
 8004902:	2b01      	cmp	r3, #1
 8004904:	d119      	bne.n	800493a <menu+0x30f6>
 8004906:	4b8e      	ldr	r3, [pc, #568]	; (8004b40 <menu+0x32fc>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	f083 0301 	eor.w	r3, r3, #1
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d012      	beq.n	800493a <menu+0x30f6>
 8004914:	4b8b      	ldr	r3, [pc, #556]	; (8004b44 <menu+0x3300>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00e      	beq.n	800493a <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 800491c:	4b8a      	ldr	r3, [pc, #552]	; (8004b48 <menu+0x3304>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	3301      	adds	r3, #1
 8004922:	b2da      	uxtb	r2, r3
 8004924:	4b88      	ldr	r3, [pc, #544]	; (8004b48 <menu+0x3304>)
 8004926:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004928:	4b87      	ldr	r3, [pc, #540]	; (8004b48 <menu+0x3304>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d902      	bls.n	8004936 <menu+0x30f2>
				calismaSayModu = 0;
 8004930:	4b85      	ldr	r3, [pc, #532]	; (8004b48 <menu+0x3304>)
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004936:	f001 fd03 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800493a:	2104      	movs	r1, #4
 800493c:	487f      	ldr	r0, [pc, #508]	; (8004b3c <menu+0x32f8>)
 800493e:	f005 fad1 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004942:	4603      	mov	r3, r0
 8004944:	2b01      	cmp	r3, #1
 8004946:	d119      	bne.n	800497c <menu+0x3138>
 8004948:	4b7d      	ldr	r3, [pc, #500]	; (8004b40 <menu+0x32fc>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	f083 0301 	eor.w	r3, r3, #1
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d012      	beq.n	800497c <menu+0x3138>
 8004956:	4b7b      	ldr	r3, [pc, #492]	; (8004b44 <menu+0x3300>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00e      	beq.n	800497c <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800495e:	4b7a      	ldr	r3, [pc, #488]	; (8004b48 <menu+0x3304>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	3b01      	subs	r3, #1
 8004964:	b2da      	uxtb	r2, r3
 8004966:	4b78      	ldr	r3, [pc, #480]	; (8004b48 <menu+0x3304>)
 8004968:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800496a:	4b77      	ldr	r3, [pc, #476]	; (8004b48 <menu+0x3304>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <menu+0x3134>
		   		calismaSayModu = 1;
 8004972:	4b75      	ldr	r3, [pc, #468]	; (8004b48 <menu+0x3304>)
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004978:	f001 fce2 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800497c:	2108      	movs	r1, #8
 800497e:	486f      	ldr	r0, [pc, #444]	; (8004b3c <menu+0x32f8>)
 8004980:	f005 fab0 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004984:	4603      	mov	r3, r0
 8004986:	2b01      	cmp	r3, #1
 8004988:	d12b      	bne.n	80049e2 <menu+0x319e>
 800498a:	4b6d      	ldr	r3, [pc, #436]	; (8004b40 <menu+0x32fc>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	f083 0301 	eor.w	r3, r3, #1
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d024      	beq.n	80049e2 <menu+0x319e>
			eepromData[32] = 0;
 8004998:	4b6c      	ldr	r3, [pc, #432]	; (8004b4c <menu+0x3308>)
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80049a0:	4b6a      	ldr	r3, [pc, #424]	; (8004b4c <menu+0x3308>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80049a6:	4b69      	ldr	r3, [pc, #420]	; (8004b4c <menu+0x3308>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80049ac:	4b67      	ldr	r3, [pc, #412]	; (8004b4c <menu+0x3308>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80049b2:	4b66      	ldr	r3, [pc, #408]	; (8004b4c <menu+0x3308>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80049b8:	4b65      	ldr	r3, [pc, #404]	; (8004b50 <menu+0x330c>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80049be:	4b65      	ldr	r3, [pc, #404]	; (8004b54 <menu+0x3310>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80049c4:	4b64      	ldr	r3, [pc, #400]	; (8004b58 <menu+0x3314>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80049ca:	4b64      	ldr	r3, [pc, #400]	; (8004b5c <menu+0x3318>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80049d0:	4b63      	ldr	r3, [pc, #396]	; (8004b60 <menu+0x331c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80049d6:	4b5c      	ldr	r3, [pc, #368]	; (8004b48 <menu+0x3304>)
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80049dc:	4b61      	ldr	r3, [pc, #388]	; (8004b64 <menu+0x3320>)
 80049de:	2201      	movs	r2, #1
 80049e0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80049e2:	4b61      	ldr	r3, [pc, #388]	; (8004b68 <menu+0x3324>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b1e      	cmp	r3, #30
 80049e8:	d16f      	bne.n	8004aca <menu+0x3286>
		calismaSayModu = 0;
 80049ea:	4b57      	ldr	r3, [pc, #348]	; (8004b48 <menu+0x3304>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80049f0:	4b4f      	ldr	r3, [pc, #316]	; (8004b30 <menu+0x32ec>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80049f8:	4a5c      	ldr	r2, [pc, #368]	; (8004b6c <menu+0x3328>)
 80049fa:	2101      	movs	r1, #1
 80049fc:	2001      	movs	r0, #1
 80049fe:	f7fb fedb 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004a02:	4a5b      	ldr	r2, [pc, #364]	; (8004b70 <menu+0x332c>)
 8004a04:	2101      	movs	r1, #1
 8004a06:	2002      	movs	r0, #2
 8004a08:	f7fb fed6 	bl	80007b8 <lcd_print>
 8004a0c:	e00d      	b.n	8004a2a <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004a0e:	4b48      	ldr	r3, [pc, #288]	; (8004b30 <menu+0x32ec>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d109      	bne.n	8004a2a <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004a16:	4a57      	ldr	r2, [pc, #348]	; (8004b74 <menu+0x3330>)
 8004a18:	2101      	movs	r1, #1
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	f7fb fecc 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004a20:	4a55      	ldr	r2, [pc, #340]	; (8004b78 <menu+0x3334>)
 8004a22:	2101      	movs	r1, #1
 8004a24:	2002      	movs	r0, #2
 8004a26:	f7fb fec7 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a2a:	2102      	movs	r1, #2
 8004a2c:	4843      	ldr	r0, [pc, #268]	; (8004b3c <menu+0x32f8>)
 8004a2e:	f005 fa59 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d115      	bne.n	8004a64 <menu+0x3220>
 8004a38:	4b41      	ldr	r3, [pc, #260]	; (8004b40 <menu+0x32fc>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	f083 0301 	eor.w	r3, r3, #1
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00e      	beq.n	8004a64 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004a46:	4b3a      	ldr	r3, [pc, #232]	; (8004b30 <menu+0x32ec>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <menu+0x32ec>)
 8004a50:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004a52:	4b37      	ldr	r3, [pc, #220]	; (8004b30 <menu+0x32ec>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d902      	bls.n	8004a60 <menu+0x321c>
				dilSecim = 0;
 8004a5a:	4b35      	ldr	r3, [pc, #212]	; (8004b30 <menu+0x32ec>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004a60:	f001 fc6e 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a64:	2104      	movs	r1, #4
 8004a66:	4835      	ldr	r0, [pc, #212]	; (8004b3c <menu+0x32f8>)
 8004a68:	f005 fa3c 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d115      	bne.n	8004a9e <menu+0x325a>
 8004a72:	4b33      	ldr	r3, [pc, #204]	; (8004b40 <menu+0x32fc>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	f083 0301 	eor.w	r3, r3, #1
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00e      	beq.n	8004a9e <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004a80:	4b2b      	ldr	r3, [pc, #172]	; (8004b30 <menu+0x32ec>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	4b29      	ldr	r3, [pc, #164]	; (8004b30 <menu+0x32ec>)
 8004a8a:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004a8c:	4b28      	ldr	r3, [pc, #160]	; (8004b30 <menu+0x32ec>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <menu+0x3256>
		   		dilSecim = 1;
 8004a94:	4b26      	ldr	r3, [pc, #152]	; (8004b30 <menu+0x32ec>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004a9a:	f001 fc51 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a9e:	2108      	movs	r1, #8
 8004aa0:	4826      	ldr	r0, [pc, #152]	; (8004b3c <menu+0x32f8>)
 8004aa2:	f005 fa1f 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d10e      	bne.n	8004aca <menu+0x3286>
 8004aac:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <menu+0x32fc>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	f083 0301 	eor.w	r3, r3, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d007      	beq.n	8004aca <menu+0x3286>
			eepromData[33] = dilSecim;
 8004aba:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <menu+0x32ec>)
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	4b23      	ldr	r3, [pc, #140]	; (8004b4c <menu+0x3308>)
 8004ac0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004ac4:	4b27      	ldr	r3, [pc, #156]	; (8004b64 <menu+0x3320>)
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004aca:	4b27      	ldr	r3, [pc, #156]	; (8004b68 <menu+0x3324>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b1f      	cmp	r3, #31
 8004ad0:	f040 80b7 	bne.w	8004c42 <menu+0x33fe>
		calismaSayModu = 0;
 8004ad4:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <menu+0x3304>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004ada:	4a28      	ldr	r2, [pc, #160]	; (8004b7c <menu+0x3338>)
 8004adc:	2101      	movs	r1, #1
 8004ade:	2001      	movs	r0, #1
 8004ae0:	f7fb fe6a 	bl	80007b8 <lcd_print>

		if(iotMode == 0) {
 8004ae4:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <menu+0x333c>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d113      	bne.n	8004b14 <menu+0x32d0>
			if(dilSecim == 0) {
 8004aec:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <menu+0x32ec>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004af4:	4a23      	ldr	r2, [pc, #140]	; (8004b84 <menu+0x3340>)
 8004af6:	2101      	movs	r1, #1
 8004af8:	2002      	movs	r0, #2
 8004afa:	f7fb fe5d 	bl	80007b8 <lcd_print>
 8004afe:	e050      	b.n	8004ba2 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004b00:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <menu+0x32ec>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d14c      	bne.n	8004ba2 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004b08:	4a1f      	ldr	r2, [pc, #124]	; (8004b88 <menu+0x3344>)
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	2002      	movs	r0, #2
 8004b0e:	f7fb fe53 	bl	80007b8 <lcd_print>
 8004b12:	e046      	b.n	8004ba2 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004b14:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <menu+0x333c>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d142      	bne.n	8004ba2 <menu+0x335e>
			if(dilSecim == 0){
 8004b1c:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <menu+0x32ec>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d135      	bne.n	8004b90 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004b24:	4a19      	ldr	r2, [pc, #100]	; (8004b8c <menu+0x3348>)
 8004b26:	2101      	movs	r1, #1
 8004b28:	2002      	movs	r0, #2
 8004b2a:	f7fb fe45 	bl	80007b8 <lcd_print>
 8004b2e:	e038      	b.n	8004ba2 <menu+0x335e>
 8004b30:	20000d51 	.word	0x20000d51
 8004b34:	0800e5b4 	.word	0x0800e5b4
 8004b38:	0800e5e8 	.word	0x0800e5e8
 8004b3c:	40010800 	.word	0x40010800
 8004b40:	20000d5f 	.word	0x20000d5f
 8004b44:	20000d71 	.word	0x20000d71
 8004b48:	20000d50 	.word	0x20000d50
 8004b4c:	20000c38 	.word	0x20000c38
 8004b50:	20000d2f 	.word	0x20000d2f
 8004b54:	200009b5 	.word	0x200009b5
 8004b58:	200009b4 	.word	0x200009b4
 8004b5c:	20000d2e 	.word	0x20000d2e
 8004b60:	20000d2d 	.word	0x20000d2d
 8004b64:	20000d5c 	.word	0x20000d5c
 8004b68:	20000d30 	.word	0x20000d30
 8004b6c:	0800e5fc 	.word	0x0800e5fc
 8004b70:	0800e610 	.word	0x0800e610
 8004b74:	0800e624 	.word	0x0800e624
 8004b78:	0800e638 	.word	0x0800e638
 8004b7c:	0800e64c 	.word	0x0800e64c
 8004b80:	20000d4f 	.word	0x20000d4f
 8004b84:	0800dea4 	.word	0x0800dea4
 8004b88:	0800deb8 	.word	0x0800deb8
 8004b8c:	0800df04 	.word	0x0800df04
			} else if(dilSecim == 1) {
 8004b90:	4bac      	ldr	r3, [pc, #688]	; (8004e44 <menu+0x3600>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d104      	bne.n	8004ba2 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004b98:	4aab      	ldr	r2, [pc, #684]	; (8004e48 <menu+0x3604>)
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	2002      	movs	r0, #2
 8004b9e:	f7fb fe0b 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004ba2:	2102      	movs	r1, #2
 8004ba4:	48a9      	ldr	r0, [pc, #676]	; (8004e4c <menu+0x3608>)
 8004ba6:	f005 f99d 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d115      	bne.n	8004bdc <menu+0x3398>
 8004bb0:	4ba7      	ldr	r3, [pc, #668]	; (8004e50 <menu+0x360c>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	f083 0301 	eor.w	r3, r3, #1
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00e      	beq.n	8004bdc <menu+0x3398>
			iotMode = iotMode + 1;
 8004bbe:	4ba5      	ldr	r3, [pc, #660]	; (8004e54 <menu+0x3610>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	4ba3      	ldr	r3, [pc, #652]	; (8004e54 <menu+0x3610>)
 8004bc8:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004bca:	4ba2      	ldr	r3, [pc, #648]	; (8004e54 <menu+0x3610>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d902      	bls.n	8004bd8 <menu+0x3394>
				iotMode = 0;
 8004bd2:	4ba0      	ldr	r3, [pc, #640]	; (8004e54 <menu+0x3610>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004bd8:	f001 fbb2 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004bdc:	2104      	movs	r1, #4
 8004bde:	489b      	ldr	r0, [pc, #620]	; (8004e4c <menu+0x3608>)
 8004be0:	f005 f980 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d115      	bne.n	8004c16 <menu+0x33d2>
 8004bea:	4b99      	ldr	r3, [pc, #612]	; (8004e50 <menu+0x360c>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	f083 0301 	eor.w	r3, r3, #1
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00e      	beq.n	8004c16 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004bf8:	4b96      	ldr	r3, [pc, #600]	; (8004e54 <menu+0x3610>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	4b94      	ldr	r3, [pc, #592]	; (8004e54 <menu+0x3610>)
 8004c02:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004c04:	4b93      	ldr	r3, [pc, #588]	; (8004e54 <menu+0x3610>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <menu+0x33ce>
		   		iotMode = 1;
 8004c0c:	4b91      	ldr	r3, [pc, #580]	; (8004e54 <menu+0x3610>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004c12:	f001 fb95 	bl	8006340 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004c16:	2108      	movs	r1, #8
 8004c18:	488c      	ldr	r0, [pc, #560]	; (8004e4c <menu+0x3608>)
 8004c1a:	f005 f963 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d10e      	bne.n	8004c42 <menu+0x33fe>
 8004c24:	4b8a      	ldr	r3, [pc, #552]	; (8004e50 <menu+0x360c>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	f083 0301 	eor.w	r3, r3, #1
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d007      	beq.n	8004c42 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004c32:	4b88      	ldr	r3, [pc, #544]	; (8004e54 <menu+0x3610>)
 8004c34:	781a      	ldrb	r2, [r3, #0]
 8004c36:	4b88      	ldr	r3, [pc, #544]	; (8004e58 <menu+0x3614>)
 8004c38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004c3c:	4b87      	ldr	r3, [pc, #540]	; (8004e5c <menu+0x3618>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004c42:	4b87      	ldr	r3, [pc, #540]	; (8004e60 <menu+0x361c>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d138      	bne.n	8004cbc <menu+0x3478>
		calismaSayModu = 0;
 8004c4a:	4b86      	ldr	r3, [pc, #536]	; (8004e64 <menu+0x3620>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 8004c50:	4a85      	ldr	r2, [pc, #532]	; (8004e68 <menu+0x3624>)
 8004c52:	2101      	movs	r1, #1
 8004c54:	2001      	movs	r0, #1
 8004c56:	f7fb fdaf 	bl	80007b8 <lcd_print>

		lcd_print(2, 1, machineID);
 8004c5a:	4a84      	ldr	r2, [pc, #528]	; (8004e6c <menu+0x3628>)
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	2002      	movs	r0, #2
 8004c60:	f7fb fdaa 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "    ");
 8004c64:	4a82      	ldr	r2, [pc, #520]	; (8004e70 <menu+0x362c>)
 8004c66:	210d      	movs	r1, #13
 8004c68:	2002      	movs	r0, #2
 8004c6a:	f7fb fda5 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004c6e:	2102      	movs	r1, #2
 8004c70:	4876      	ldr	r0, [pc, #472]	; (8004e4c <menu+0x3608>)
 8004c72:	f005 f937 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d11f      	bne.n	8004cbc <menu+0x3478>
 8004c7c:	2104      	movs	r1, #4
 8004c7e:	4873      	ldr	r0, [pc, #460]	; (8004e4c <menu+0x3608>)
 8004c80:	f005 f930 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d118      	bne.n	8004cbc <menu+0x3478>
 8004c8a:	4b71      	ldr	r3, [pc, #452]	; (8004e50 <menu+0x360c>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	f083 0301 	eor.w	r3, r3, #1
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d011      	beq.n	8004cbc <menu+0x3478>
			takeMachineID(0);
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f7fc f80f 	bl	8000cbc <takeMachineID>

			HAL_Delay(50);
 8004c9e:	2032      	movs	r0, #50	; 0x32
 8004ca0:	f004 fb50 	bl	8009344 <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004ca4:	4a71      	ldr	r2, [pc, #452]	; (8004e6c <menu+0x3628>)
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	2002      	movs	r0, #2
 8004caa:	f7fb fd85 	bl	80007b8 <lcd_print>
			lcd_print(2, 13, "    ");
 8004cae:	4a70      	ldr	r2, [pc, #448]	; (8004e70 <menu+0x362c>)
 8004cb0:	210d      	movs	r1, #13
 8004cb2:	2002      	movs	r0, #2
 8004cb4:	f7fb fd80 	bl	80007b8 <lcd_print>

			bekle();
 8004cb8:	f001 fb42 	bl	8006340 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004cbc:	4b68      	ldr	r3, [pc, #416]	; (8004e60 <menu+0x361c>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b21      	cmp	r3, #33	; 0x21
 8004cc2:	d153      	bne.n	8004d6c <menu+0x3528>
		calismaSayModu = 0;
 8004cc4:	4b67      	ldr	r3, [pc, #412]	; (8004e64 <menu+0x3620>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004cca:	4a6a      	ldr	r2, [pc, #424]	; (8004e74 <menu+0x3630>)
 8004ccc:	2101      	movs	r1, #1
 8004cce:	2001      	movs	r0, #1
 8004cd0:	f7fb fd72 	bl	80007b8 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004cd4:	4868      	ldr	r0, [pc, #416]	; (8004e78 <menu+0x3634>)
 8004cd6:	f7fb faa5 	bl	8000224 <strlen>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d811      	bhi.n	8004d04 <menu+0x34c0>
			lcd_print(2, 1, wifiSSID);
 8004ce0:	4a65      	ldr	r2, [pc, #404]	; (8004e78 <menu+0x3634>)
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	2002      	movs	r0, #2
 8004ce6:	f7fb fd67 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004cea:	4863      	ldr	r0, [pc, #396]	; (8004e78 <menu+0x3634>)
 8004cec:	f7fb fa9a 	bl	8000224 <strlen>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	4a60      	ldr	r2, [pc, #384]	; (8004e7c <menu+0x3638>)
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	2002      	movs	r0, #2
 8004cfe:	f7fb fd5b 	bl	80007b8 <lcd_print>
 8004d02:	e005      	b.n	8004d10 <menu+0x34cc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004d04:	2300      	movs	r3, #0
 8004d06:	2202      	movs	r2, #2
 8004d08:	2101      	movs	r1, #1
 8004d0a:	485b      	ldr	r0, [pc, #364]	; (8004e78 <menu+0x3634>)
 8004d0c:	f7fc fcf4 	bl	80016f8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004d10:	2102      	movs	r1, #2
 8004d12:	484e      	ldr	r0, [pc, #312]	; (8004e4c <menu+0x3608>)
 8004d14:	f005 f8e6 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d126      	bne.n	8004d6c <menu+0x3528>
 8004d1e:	2104      	movs	r1, #4
 8004d20:	484a      	ldr	r0, [pc, #296]	; (8004e4c <menu+0x3608>)
 8004d22:	f005 f8df 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d11f      	bne.n	8004d6c <menu+0x3528>
 8004d2c:	4b48      	ldr	r3, [pc, #288]	; (8004e50 <menu+0x360c>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	f083 0301 	eor.w	r3, r3, #1
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d018      	beq.n	8004d6c <menu+0x3528>
			takeWifiSSID(0);
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	f7fc f914 	bl	8000f68 <takeWifiSSID>

			HAL_Delay(100);
 8004d40:	2064      	movs	r0, #100	; 0x64
 8004d42:	f004 faff 	bl	8009344 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 8004d46:	4a4c      	ldr	r2, [pc, #304]	; (8004e78 <menu+0x3634>)
 8004d48:	2101      	movs	r1, #1
 8004d4a:	2002      	movs	r0, #2
 8004d4c:	f7fb fd34 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004d50:	4849      	ldr	r0, [pc, #292]	; (8004e78 <menu+0x3634>)
 8004d52:	f7fb fa67 	bl	8000224 <strlen>
 8004d56:	4603      	mov	r3, r0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	4a47      	ldr	r2, [pc, #284]	; (8004e7c <menu+0x3638>)
 8004d60:	4619      	mov	r1, r3
 8004d62:	2002      	movs	r0, #2
 8004d64:	f7fb fd28 	bl	80007b8 <lcd_print>

			bekle();
 8004d68:	f001 faea 	bl	8006340 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004d6c:	4b3c      	ldr	r3, [pc, #240]	; (8004e60 <menu+0x361c>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b22      	cmp	r3, #34	; 0x22
 8004d72:	d153      	bne.n	8004e1c <menu+0x35d8>
		calismaSayModu = 0;
 8004d74:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <menu+0x3620>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004d7a:	4a41      	ldr	r2, [pc, #260]	; (8004e80 <menu+0x363c>)
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	2001      	movs	r0, #1
 8004d80:	f7fb fd1a 	bl	80007b8 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8004d84:	483f      	ldr	r0, [pc, #252]	; (8004e84 <menu+0x3640>)
 8004d86:	f7fb fa4d 	bl	8000224 <strlen>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d811      	bhi.n	8004db4 <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8004d90:	4a3c      	ldr	r2, [pc, #240]	; (8004e84 <menu+0x3640>)
 8004d92:	2101      	movs	r1, #1
 8004d94:	2002      	movs	r0, #2
 8004d96:	f7fb fd0f 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004d9a:	483a      	ldr	r0, [pc, #232]	; (8004e84 <menu+0x3640>)
 8004d9c:	f7fb fa42 	bl	8000224 <strlen>
 8004da0:	4603      	mov	r3, r0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	3301      	adds	r3, #1
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	4a34      	ldr	r2, [pc, #208]	; (8004e7c <menu+0x3638>)
 8004daa:	4619      	mov	r1, r3
 8004dac:	2002      	movs	r0, #2
 8004dae:	f7fb fd03 	bl	80007b8 <lcd_print>
 8004db2:	e005      	b.n	8004dc0 <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004db4:	2301      	movs	r3, #1
 8004db6:	2202      	movs	r2, #2
 8004db8:	2101      	movs	r1, #1
 8004dba:	4832      	ldr	r0, [pc, #200]	; (8004e84 <menu+0x3640>)
 8004dbc:	f7fc fc9c 	bl	80016f8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004dc0:	2102      	movs	r1, #2
 8004dc2:	4822      	ldr	r0, [pc, #136]	; (8004e4c <menu+0x3608>)
 8004dc4:	f005 f88e 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d126      	bne.n	8004e1c <menu+0x35d8>
 8004dce:	2104      	movs	r1, #4
 8004dd0:	481e      	ldr	r0, [pc, #120]	; (8004e4c <menu+0x3608>)
 8004dd2:	f005 f887 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d11f      	bne.n	8004e1c <menu+0x35d8>
 8004ddc:	4b1c      	ldr	r3, [pc, #112]	; (8004e50 <menu+0x360c>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	f083 0301 	eor.w	r3, r3, #1
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d018      	beq.n	8004e1c <menu+0x35d8>
			takeWifiPass(0);
 8004dea:	2000      	movs	r0, #0
 8004dec:	f7fc fa86 	bl	80012fc <takeWifiPass>

			HAL_Delay(50);
 8004df0:	2032      	movs	r0, #50	; 0x32
 8004df2:	f004 faa7 	bl	8009344 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004df6:	4a23      	ldr	r2, [pc, #140]	; (8004e84 <menu+0x3640>)
 8004df8:	2101      	movs	r1, #1
 8004dfa:	2002      	movs	r0, #2
 8004dfc:	f7fb fcdc 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004e00:	4820      	ldr	r0, [pc, #128]	; (8004e84 <menu+0x3640>)
 8004e02:	f7fb fa0f 	bl	8000224 <strlen>
 8004e06:	4603      	mov	r3, r0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <menu+0x3638>)
 8004e10:	4619      	mov	r1, r3
 8004e12:	2002      	movs	r0, #2
 8004e14:	f7fb fcd0 	bl	80007b8 <lcd_print>

			bekle();
 8004e18:	f001 fa92 	bl	8006340 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004e1c:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <menu+0x361c>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b23      	cmp	r3, #35	; 0x23
 8004e22:	d155      	bne.n	8004ed0 <menu+0x368c>
		if(dilSecim == 0) {
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <menu+0x3600>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d131      	bne.n	8004e90 <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004e2c:	4a16      	ldr	r2, [pc, #88]	; (8004e88 <menu+0x3644>)
 8004e2e:	2101      	movs	r1, #1
 8004e30:	2001      	movs	r0, #1
 8004e32:	f7fb fcc1 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004e36:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <menu+0x3648>)
 8004e38:	2101      	movs	r1, #1
 8004e3a:	2002      	movs	r0, #2
 8004e3c:	f7fb fcbc 	bl	80007b8 <lcd_print>
 8004e40:	e034      	b.n	8004eac <menu+0x3668>
 8004e42:	bf00      	nop
 8004e44:	20000d51 	.word	0x20000d51
 8004e48:	0800df18 	.word	0x0800df18
 8004e4c:	40010800 	.word	0x40010800
 8004e50:	20000d5f 	.word	0x20000d5f
 8004e54:	20000d4f 	.word	0x20000d4f
 8004e58:	20000c38 	.word	0x20000c38
 8004e5c:	20000d5c 	.word	0x20000d5c
 8004e60:	20000d30 	.word	0x20000d30
 8004e64:	20000d50 	.word	0x20000d50
 8004e68:	0800e660 	.word	0x0800e660
 8004e6c:	20000cd0 	.word	0x20000cd0
 8004e70:	0800e674 	.word	0x0800e674
 8004e74:	0800e67c 	.word	0x0800e67c
 8004e78:	20000cdc 	.word	0x20000cdc
 8004e7c:	2000094c 	.word	0x2000094c
 8004e80:	0800e690 	.word	0x0800e690
 8004e84:	20000cf0 	.word	0x20000cf0
 8004e88:	0800e6a4 	.word	0x0800e6a4
 8004e8c:	0800e6b8 	.word	0x0800e6b8
		} else if(dilSecim == 1) {
 8004e90:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <menu+0x3690>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d109      	bne.n	8004eac <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004e98:	4a0f      	ldr	r2, [pc, #60]	; (8004ed8 <menu+0x3694>)
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	f7fb fc8b 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004ea2:	4a0e      	ldr	r2, [pc, #56]	; (8004edc <menu+0x3698>)
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	2002      	movs	r0, #2
 8004ea8:	f7fb fc86 	bl	80007b8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004eac:	2108      	movs	r1, #8
 8004eae:	480c      	ldr	r0, [pc, #48]	; (8004ee0 <menu+0x369c>)
 8004eb0:	f005 f818 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d10a      	bne.n	8004ed0 <menu+0x368c>
			menuGiris = 0;
 8004eba:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <menu+0x36a0>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004ec0:	f7fb fca6 	bl	8000810 <lcd_clear>
			HAL_Delay(500);
 8004ec4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ec8:	f004 fa3c 	bl	8009344 <HAL_Delay>
			NVIC_SystemReset();
 8004ecc:	f7fb fce8 	bl	80008a0 <__NVIC_SystemReset>
		}
	}
}
 8004ed0:	bf00      	nop
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000d51 	.word	0x20000d51
 8004ed8:	0800e6cc 	.word	0x0800e6cc
 8004edc:	0800e6e0 	.word	0x0800e6e0
 8004ee0:	40010800 	.word	0x40010800
 8004ee4:	20000d4d 	.word	0x20000d4d

08004ee8 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004ef2:	48a9      	ldr	r0, [pc, #676]	; (8005198 <loadMenuTexts+0x2b0>)
 8004ef4:	f7fb fcea 	bl	80008cc <copyText>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4aa8      	ldr	r2, [pc, #672]	; (800519c <loadMenuTexts+0x2b4>)
 8004efc:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004efe:	48a8      	ldr	r0, [pc, #672]	; (80051a0 <loadMenuTexts+0x2b8>)
 8004f00:	f7fb fce4 	bl	80008cc <copyText>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4aa7      	ldr	r2, [pc, #668]	; (80051a4 <loadMenuTexts+0x2bc>)
 8004f08:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004f0a:	48a7      	ldr	r0, [pc, #668]	; (80051a8 <loadMenuTexts+0x2c0>)
 8004f0c:	f7fb fcde 	bl	80008cc <copyText>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4aa6      	ldr	r2, [pc, #664]	; (80051ac <loadMenuTexts+0x2c4>)
 8004f14:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004f16:	48a6      	ldr	r0, [pc, #664]	; (80051b0 <loadMenuTexts+0x2c8>)
 8004f18:	f7fb fcd8 	bl	80008cc <copyText>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4aa5      	ldr	r2, [pc, #660]	; (80051b4 <loadMenuTexts+0x2cc>)
 8004f20:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004f22:	48a5      	ldr	r0, [pc, #660]	; (80051b8 <loadMenuTexts+0x2d0>)
 8004f24:	f7fb fcd2 	bl	80008cc <copyText>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4aa4      	ldr	r2, [pc, #656]	; (80051bc <loadMenuTexts+0x2d4>)
 8004f2c:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004f2e:	48a4      	ldr	r0, [pc, #656]	; (80051c0 <loadMenuTexts+0x2d8>)
 8004f30:	f7fb fccc 	bl	80008cc <copyText>
 8004f34:	4603      	mov	r3, r0
 8004f36:	4aa3      	ldr	r2, [pc, #652]	; (80051c4 <loadMenuTexts+0x2dc>)
 8004f38:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004f3a:	48a3      	ldr	r0, [pc, #652]	; (80051c8 <loadMenuTexts+0x2e0>)
 8004f3c:	f7fb fcc6 	bl	80008cc <copyText>
 8004f40:	4603      	mov	r3, r0
 8004f42:	4aa2      	ldr	r2, [pc, #648]	; (80051cc <loadMenuTexts+0x2e4>)
 8004f44:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f040 82d1 	bne.w	80054f0 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004f4e:	48a0      	ldr	r0, [pc, #640]	; (80051d0 <loadMenuTexts+0x2e8>)
 8004f50:	f7fb fcbc 	bl	80008cc <copyText>
 8004f54:	4603      	mov	r3, r0
 8004f56:	4a9f      	ldr	r2, [pc, #636]	; (80051d4 <loadMenuTexts+0x2ec>)
 8004f58:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004f5a:	489f      	ldr	r0, [pc, #636]	; (80051d8 <loadMenuTexts+0x2f0>)
 8004f5c:	f7fb fcb6 	bl	80008cc <copyText>
 8004f60:	4603      	mov	r3, r0
 8004f62:	4a9e      	ldr	r2, [pc, #632]	; (80051dc <loadMenuTexts+0x2f4>)
 8004f64:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004f66:	489e      	ldr	r0, [pc, #632]	; (80051e0 <loadMenuTexts+0x2f8>)
 8004f68:	f7fb fcb0 	bl	80008cc <copyText>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	4a9d      	ldr	r2, [pc, #628]	; (80051e4 <loadMenuTexts+0x2fc>)
 8004f70:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004f72:	489d      	ldr	r0, [pc, #628]	; (80051e8 <loadMenuTexts+0x300>)
 8004f74:	f7fb fcaa 	bl	80008cc <copyText>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	4a9c      	ldr	r2, [pc, #624]	; (80051ec <loadMenuTexts+0x304>)
 8004f7c:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004f7e:	489c      	ldr	r0, [pc, #624]	; (80051f0 <loadMenuTexts+0x308>)
 8004f80:	f7fb fca4 	bl	80008cc <copyText>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4a9b      	ldr	r2, [pc, #620]	; (80051f4 <loadMenuTexts+0x30c>)
 8004f88:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004f8a:	489b      	ldr	r0, [pc, #620]	; (80051f8 <loadMenuTexts+0x310>)
 8004f8c:	f7fb fc9e 	bl	80008cc <copyText>
 8004f90:	4603      	mov	r3, r0
 8004f92:	4a9a      	ldr	r2, [pc, #616]	; (80051fc <loadMenuTexts+0x314>)
 8004f94:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004f96:	489a      	ldr	r0, [pc, #616]	; (8005200 <loadMenuTexts+0x318>)
 8004f98:	f7fb fc98 	bl	80008cc <copyText>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	4a99      	ldr	r2, [pc, #612]	; (8005204 <loadMenuTexts+0x31c>)
 8004fa0:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004fa2:	4899      	ldr	r0, [pc, #612]	; (8005208 <loadMenuTexts+0x320>)
 8004fa4:	f7fb fc92 	bl	80008cc <copyText>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	4a98      	ldr	r2, [pc, #608]	; (800520c <loadMenuTexts+0x324>)
 8004fac:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004fae:	4898      	ldr	r0, [pc, #608]	; (8005210 <loadMenuTexts+0x328>)
 8004fb0:	f7fb fc8c 	bl	80008cc <copyText>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	4a97      	ldr	r2, [pc, #604]	; (8005214 <loadMenuTexts+0x32c>)
 8004fb8:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004fba:	4897      	ldr	r0, [pc, #604]	; (8005218 <loadMenuTexts+0x330>)
 8004fbc:	f7fb fc86 	bl	80008cc <copyText>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	4a96      	ldr	r2, [pc, #600]	; (800521c <loadMenuTexts+0x334>)
 8004fc4:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004fc6:	4896      	ldr	r0, [pc, #600]	; (8005220 <loadMenuTexts+0x338>)
 8004fc8:	f7fb fc80 	bl	80008cc <copyText>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	4a95      	ldr	r2, [pc, #596]	; (8005224 <loadMenuTexts+0x33c>)
 8004fd0:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004fd2:	4895      	ldr	r0, [pc, #596]	; (8005228 <loadMenuTexts+0x340>)
 8004fd4:	f7fb fc7a 	bl	80008cc <copyText>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	4a94      	ldr	r2, [pc, #592]	; (800522c <loadMenuTexts+0x344>)
 8004fdc:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004fde:	4894      	ldr	r0, [pc, #592]	; (8005230 <loadMenuTexts+0x348>)
 8004fe0:	f7fb fc74 	bl	80008cc <copyText>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	4a93      	ldr	r2, [pc, #588]	; (8005234 <loadMenuTexts+0x34c>)
 8004fe8:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004fea:	4893      	ldr	r0, [pc, #588]	; (8005238 <loadMenuTexts+0x350>)
 8004fec:	f7fb fc6e 	bl	80008cc <copyText>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4a92      	ldr	r2, [pc, #584]	; (800523c <loadMenuTexts+0x354>)
 8004ff4:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004ff6:	4892      	ldr	r0, [pc, #584]	; (8005240 <loadMenuTexts+0x358>)
 8004ff8:	f7fb fc68 	bl	80008cc <copyText>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	4a91      	ldr	r2, [pc, #580]	; (8005244 <loadMenuTexts+0x35c>)
 8005000:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8005002:	4891      	ldr	r0, [pc, #580]	; (8005248 <loadMenuTexts+0x360>)
 8005004:	f7fb fc62 	bl	80008cc <copyText>
 8005008:	4603      	mov	r3, r0
 800500a:	4a90      	ldr	r2, [pc, #576]	; (800524c <loadMenuTexts+0x364>)
 800500c:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 800500e:	4890      	ldr	r0, [pc, #576]	; (8005250 <loadMenuTexts+0x368>)
 8005010:	f7fb fc5c 	bl	80008cc <copyText>
 8005014:	4603      	mov	r3, r0
 8005016:	4a8f      	ldr	r2, [pc, #572]	; (8005254 <loadMenuTexts+0x36c>)
 8005018:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 800501a:	488f      	ldr	r0, [pc, #572]	; (8005258 <loadMenuTexts+0x370>)
 800501c:	f7fb fc56 	bl	80008cc <copyText>
 8005020:	4603      	mov	r3, r0
 8005022:	4a8e      	ldr	r2, [pc, #568]	; (800525c <loadMenuTexts+0x374>)
 8005024:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8005026:	488e      	ldr	r0, [pc, #568]	; (8005260 <loadMenuTexts+0x378>)
 8005028:	f7fb fc50 	bl	80008cc <copyText>
 800502c:	4603      	mov	r3, r0
 800502e:	4a8d      	ldr	r2, [pc, #564]	; (8005264 <loadMenuTexts+0x37c>)
 8005030:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8005032:	488d      	ldr	r0, [pc, #564]	; (8005268 <loadMenuTexts+0x380>)
 8005034:	f7fb fc4a 	bl	80008cc <copyText>
 8005038:	4603      	mov	r3, r0
 800503a:	4a8c      	ldr	r2, [pc, #560]	; (800526c <loadMenuTexts+0x384>)
 800503c:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 800503e:	488c      	ldr	r0, [pc, #560]	; (8005270 <loadMenuTexts+0x388>)
 8005040:	f7fb fc44 	bl	80008cc <copyText>
 8005044:	4603      	mov	r3, r0
 8005046:	4a8b      	ldr	r2, [pc, #556]	; (8005274 <loadMenuTexts+0x38c>)
 8005048:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 800504a:	488b      	ldr	r0, [pc, #556]	; (8005278 <loadMenuTexts+0x390>)
 800504c:	f7fb fc3e 	bl	80008cc <copyText>
 8005050:	4603      	mov	r3, r0
 8005052:	4a8a      	ldr	r2, [pc, #552]	; (800527c <loadMenuTexts+0x394>)
 8005054:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8005056:	488a      	ldr	r0, [pc, #552]	; (8005280 <loadMenuTexts+0x398>)
 8005058:	f7fb fc38 	bl	80008cc <copyText>
 800505c:	4603      	mov	r3, r0
 800505e:	4a89      	ldr	r2, [pc, #548]	; (8005284 <loadMenuTexts+0x39c>)
 8005060:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8005062:	4889      	ldr	r0, [pc, #548]	; (8005288 <loadMenuTexts+0x3a0>)
 8005064:	f7fb fc32 	bl	80008cc <copyText>
 8005068:	4603      	mov	r3, r0
 800506a:	4a88      	ldr	r2, [pc, #544]	; (800528c <loadMenuTexts+0x3a4>)
 800506c:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 800506e:	4888      	ldr	r0, [pc, #544]	; (8005290 <loadMenuTexts+0x3a8>)
 8005070:	f7fb fc2c 	bl	80008cc <copyText>
 8005074:	4603      	mov	r3, r0
 8005076:	4a87      	ldr	r2, [pc, #540]	; (8005294 <loadMenuTexts+0x3ac>)
 8005078:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 800507a:	4887      	ldr	r0, [pc, #540]	; (8005298 <loadMenuTexts+0x3b0>)
 800507c:	f7fb fc26 	bl	80008cc <copyText>
 8005080:	4603      	mov	r3, r0
 8005082:	4a86      	ldr	r2, [pc, #536]	; (800529c <loadMenuTexts+0x3b4>)
 8005084:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8005086:	4886      	ldr	r0, [pc, #536]	; (80052a0 <loadMenuTexts+0x3b8>)
 8005088:	f7fb fc20 	bl	80008cc <copyText>
 800508c:	4603      	mov	r3, r0
 800508e:	4a85      	ldr	r2, [pc, #532]	; (80052a4 <loadMenuTexts+0x3bc>)
 8005090:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8005092:	4885      	ldr	r0, [pc, #532]	; (80052a8 <loadMenuTexts+0x3c0>)
 8005094:	f7fb fc1a 	bl	80008cc <copyText>
 8005098:	4603      	mov	r3, r0
 800509a:	4a84      	ldr	r2, [pc, #528]	; (80052ac <loadMenuTexts+0x3c4>)
 800509c:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 800509e:	4884      	ldr	r0, [pc, #528]	; (80052b0 <loadMenuTexts+0x3c8>)
 80050a0:	f7fb fc14 	bl	80008cc <copyText>
 80050a4:	4603      	mov	r3, r0
 80050a6:	4a83      	ldr	r2, [pc, #524]	; (80052b4 <loadMenuTexts+0x3cc>)
 80050a8:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 80050aa:	4883      	ldr	r0, [pc, #524]	; (80052b8 <loadMenuTexts+0x3d0>)
 80050ac:	f7fb fc0e 	bl	80008cc <copyText>
 80050b0:	4603      	mov	r3, r0
 80050b2:	4a82      	ldr	r2, [pc, #520]	; (80052bc <loadMenuTexts+0x3d4>)
 80050b4:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 80050b6:	4882      	ldr	r0, [pc, #520]	; (80052c0 <loadMenuTexts+0x3d8>)
 80050b8:	f7fb fc08 	bl	80008cc <copyText>
 80050bc:	4603      	mov	r3, r0
 80050be:	4a81      	ldr	r2, [pc, #516]	; (80052c4 <loadMenuTexts+0x3dc>)
 80050c0:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 80050c2:	4881      	ldr	r0, [pc, #516]	; (80052c8 <loadMenuTexts+0x3e0>)
 80050c4:	f7fb fc02 	bl	80008cc <copyText>
 80050c8:	4603      	mov	r3, r0
 80050ca:	4a80      	ldr	r2, [pc, #512]	; (80052cc <loadMenuTexts+0x3e4>)
 80050cc:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 80050ce:	4880      	ldr	r0, [pc, #512]	; (80052d0 <loadMenuTexts+0x3e8>)
 80050d0:	f7fb fbfc 	bl	80008cc <copyText>
 80050d4:	4603      	mov	r3, r0
 80050d6:	4a7f      	ldr	r2, [pc, #508]	; (80052d4 <loadMenuTexts+0x3ec>)
 80050d8:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 80050da:	487f      	ldr	r0, [pc, #508]	; (80052d8 <loadMenuTexts+0x3f0>)
 80050dc:	f7fb fbf6 	bl	80008cc <copyText>
 80050e0:	4603      	mov	r3, r0
 80050e2:	4a7e      	ldr	r2, [pc, #504]	; (80052dc <loadMenuTexts+0x3f4>)
 80050e4:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 80050e6:	487e      	ldr	r0, [pc, #504]	; (80052e0 <loadMenuTexts+0x3f8>)
 80050e8:	f7fb fbf0 	bl	80008cc <copyText>
 80050ec:	4603      	mov	r3, r0
 80050ee:	4a7d      	ldr	r2, [pc, #500]	; (80052e4 <loadMenuTexts+0x3fc>)
 80050f0:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 80050f2:	487d      	ldr	r0, [pc, #500]	; (80052e8 <loadMenuTexts+0x400>)
 80050f4:	f7fb fbea 	bl	80008cc <copyText>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4a7c      	ldr	r2, [pc, #496]	; (80052ec <loadMenuTexts+0x404>)
 80050fc:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 80050fe:	487c      	ldr	r0, [pc, #496]	; (80052f0 <loadMenuTexts+0x408>)
 8005100:	f7fb fbe4 	bl	80008cc <copyText>
 8005104:	4603      	mov	r3, r0
 8005106:	4a7b      	ldr	r2, [pc, #492]	; (80052f4 <loadMenuTexts+0x40c>)
 8005108:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 800510a:	487b      	ldr	r0, [pc, #492]	; (80052f8 <loadMenuTexts+0x410>)
 800510c:	f7fb fbde 	bl	80008cc <copyText>
 8005110:	4603      	mov	r3, r0
 8005112:	4a7a      	ldr	r2, [pc, #488]	; (80052fc <loadMenuTexts+0x414>)
 8005114:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8005116:	487a      	ldr	r0, [pc, #488]	; (8005300 <loadMenuTexts+0x418>)
 8005118:	f7fb fbd8 	bl	80008cc <copyText>
 800511c:	4603      	mov	r3, r0
 800511e:	4a79      	ldr	r2, [pc, #484]	; (8005304 <loadMenuTexts+0x41c>)
 8005120:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8005122:	4879      	ldr	r0, [pc, #484]	; (8005308 <loadMenuTexts+0x420>)
 8005124:	f7fb fbd2 	bl	80008cc <copyText>
 8005128:	4603      	mov	r3, r0
 800512a:	4a78      	ldr	r2, [pc, #480]	; (800530c <loadMenuTexts+0x424>)
 800512c:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 800512e:	4878      	ldr	r0, [pc, #480]	; (8005310 <loadMenuTexts+0x428>)
 8005130:	f7fb fbcc 	bl	80008cc <copyText>
 8005134:	4603      	mov	r3, r0
 8005136:	4a77      	ldr	r2, [pc, #476]	; (8005314 <loadMenuTexts+0x42c>)
 8005138:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 800513a:	4877      	ldr	r0, [pc, #476]	; (8005318 <loadMenuTexts+0x430>)
 800513c:	f7fb fbc6 	bl	80008cc <copyText>
 8005140:	4603      	mov	r3, r0
 8005142:	4a76      	ldr	r2, [pc, #472]	; (800531c <loadMenuTexts+0x434>)
 8005144:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8005146:	4876      	ldr	r0, [pc, #472]	; (8005320 <loadMenuTexts+0x438>)
 8005148:	f7fb fbc0 	bl	80008cc <copyText>
 800514c:	4603      	mov	r3, r0
 800514e:	4a75      	ldr	r2, [pc, #468]	; (8005324 <loadMenuTexts+0x43c>)
 8005150:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8005152:	4875      	ldr	r0, [pc, #468]	; (8005328 <loadMenuTexts+0x440>)
 8005154:	f7fb fbba 	bl	80008cc <copyText>
 8005158:	4603      	mov	r3, r0
 800515a:	4a74      	ldr	r2, [pc, #464]	; (800532c <loadMenuTexts+0x444>)
 800515c:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 800515e:	4874      	ldr	r0, [pc, #464]	; (8005330 <loadMenuTexts+0x448>)
 8005160:	f7fb fbb4 	bl	80008cc <copyText>
 8005164:	4603      	mov	r3, r0
 8005166:	4a73      	ldr	r2, [pc, #460]	; (8005334 <loadMenuTexts+0x44c>)
 8005168:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 800516a:	4873      	ldr	r0, [pc, #460]	; (8005338 <loadMenuTexts+0x450>)
 800516c:	f7fb fbae 	bl	80008cc <copyText>
 8005170:	4603      	mov	r3, r0
 8005172:	4a72      	ldr	r2, [pc, #456]	; (800533c <loadMenuTexts+0x454>)
 8005174:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8005176:	4872      	ldr	r0, [pc, #456]	; (8005340 <loadMenuTexts+0x458>)
 8005178:	f7fb fba8 	bl	80008cc <copyText>
 800517c:	4603      	mov	r3, r0
 800517e:	4a71      	ldr	r2, [pc, #452]	; (8005344 <loadMenuTexts+0x45c>)
 8005180:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8005182:	4871      	ldr	r0, [pc, #452]	; (8005348 <loadMenuTexts+0x460>)
 8005184:	f7fb fba2 	bl	80008cc <copyText>
 8005188:	4603      	mov	r3, r0
 800518a:	4a70      	ldr	r2, [pc, #448]	; (800534c <loadMenuTexts+0x464>)
 800518c:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 800518e:	4870      	ldr	r0, [pc, #448]	; (8005350 <loadMenuTexts+0x468>)
 8005190:	f7fb fb9c 	bl	80008cc <copyText>
 8005194:	4603      	mov	r3, r0
 8005196:	e0dd      	b.n	8005354 <loadMenuTexts+0x46c>
 8005198:	20000000 	.word	0x20000000
 800519c:	20000d94 	.word	0x20000d94
 80051a0:	20000010 	.word	0x20000010
 80051a4:	20000d98 	.word	0x20000d98
 80051a8:	20000020 	.word	0x20000020
 80051ac:	20000df0 	.word	0x20000df0
 80051b0:	20000030 	.word	0x20000030
 80051b4:	20000e20 	.word	0x20000e20
 80051b8:	20000040 	.word	0x20000040
 80051bc:	20000e28 	.word	0x20000e28
 80051c0:	20000050 	.word	0x20000050
 80051c4:	20000ea0 	.word	0x20000ea0
 80051c8:	20000060 	.word	0x20000060
 80051cc:	20000ea4 	.word	0x20000ea4
 80051d0:	20000070 	.word	0x20000070
 80051d4:	20000d9c 	.word	0x20000d9c
 80051d8:	20000080 	.word	0x20000080
 80051dc:	20000da0 	.word	0x20000da0
 80051e0:	20000090 	.word	0x20000090
 80051e4:	20000da4 	.word	0x20000da4
 80051e8:	200000a0 	.word	0x200000a0
 80051ec:	20000da8 	.word	0x20000da8
 80051f0:	200000b0 	.word	0x200000b0
 80051f4:	20000dac 	.word	0x20000dac
 80051f8:	200000c0 	.word	0x200000c0
 80051fc:	20000db0 	.word	0x20000db0
 8005200:	200000d0 	.word	0x200000d0
 8005204:	20000db4 	.word	0x20000db4
 8005208:	200000e0 	.word	0x200000e0
 800520c:	20000db8 	.word	0x20000db8
 8005210:	200000f0 	.word	0x200000f0
 8005214:	20000dbc 	.word	0x20000dbc
 8005218:	20000100 	.word	0x20000100
 800521c:	20000dc0 	.word	0x20000dc0
 8005220:	20000110 	.word	0x20000110
 8005224:	20000dc4 	.word	0x20000dc4
 8005228:	20000120 	.word	0x20000120
 800522c:	20000dc8 	.word	0x20000dc8
 8005230:	20000130 	.word	0x20000130
 8005234:	20000dcc 	.word	0x20000dcc
 8005238:	20000140 	.word	0x20000140
 800523c:	20000dd0 	.word	0x20000dd0
 8005240:	20000150 	.word	0x20000150
 8005244:	20000dd4 	.word	0x20000dd4
 8005248:	20000160 	.word	0x20000160
 800524c:	20000dd8 	.word	0x20000dd8
 8005250:	20000170 	.word	0x20000170
 8005254:	20000ddc 	.word	0x20000ddc
 8005258:	20000180 	.word	0x20000180
 800525c:	20000de0 	.word	0x20000de0
 8005260:	20000190 	.word	0x20000190
 8005264:	20000de4 	.word	0x20000de4
 8005268:	200001a0 	.word	0x200001a0
 800526c:	20000de8 	.word	0x20000de8
 8005270:	200001b0 	.word	0x200001b0
 8005274:	20000dec 	.word	0x20000dec
 8005278:	200001c0 	.word	0x200001c0
 800527c:	20000df4 	.word	0x20000df4
 8005280:	200001d0 	.word	0x200001d0
 8005284:	20000df8 	.word	0x20000df8
 8005288:	200001e0 	.word	0x200001e0
 800528c:	20000dfc 	.word	0x20000dfc
 8005290:	200001f0 	.word	0x200001f0
 8005294:	20000e00 	.word	0x20000e00
 8005298:	20000200 	.word	0x20000200
 800529c:	20000e04 	.word	0x20000e04
 80052a0:	20000210 	.word	0x20000210
 80052a4:	20000e08 	.word	0x20000e08
 80052a8:	20000220 	.word	0x20000220
 80052ac:	20000e0c 	.word	0x20000e0c
 80052b0:	20000230 	.word	0x20000230
 80052b4:	20000e10 	.word	0x20000e10
 80052b8:	20000240 	.word	0x20000240
 80052bc:	20000e14 	.word	0x20000e14
 80052c0:	20000250 	.word	0x20000250
 80052c4:	20000e18 	.word	0x20000e18
 80052c8:	20000260 	.word	0x20000260
 80052cc:	20000e1c 	.word	0x20000e1c
 80052d0:	20000270 	.word	0x20000270
 80052d4:	20000e24 	.word	0x20000e24
 80052d8:	20000280 	.word	0x20000280
 80052dc:	20000e2c 	.word	0x20000e2c
 80052e0:	20000290 	.word	0x20000290
 80052e4:	20000e30 	.word	0x20000e30
 80052e8:	200002a0 	.word	0x200002a0
 80052ec:	20000e34 	.word	0x20000e34
 80052f0:	200002b0 	.word	0x200002b0
 80052f4:	20000e38 	.word	0x20000e38
 80052f8:	200002c0 	.word	0x200002c0
 80052fc:	20000e3c 	.word	0x20000e3c
 8005300:	200002d0 	.word	0x200002d0
 8005304:	20000e40 	.word	0x20000e40
 8005308:	200002e0 	.word	0x200002e0
 800530c:	20000e44 	.word	0x20000e44
 8005310:	200002f0 	.word	0x200002f0
 8005314:	20000e48 	.word	0x20000e48
 8005318:	20000300 	.word	0x20000300
 800531c:	20000e4c 	.word	0x20000e4c
 8005320:	20000310 	.word	0x20000310
 8005324:	20000e50 	.word	0x20000e50
 8005328:	20000320 	.word	0x20000320
 800532c:	20000e54 	.word	0x20000e54
 8005330:	20000330 	.word	0x20000330
 8005334:	20000e58 	.word	0x20000e58
 8005338:	20000340 	.word	0x20000340
 800533c:	20000e5c 	.word	0x20000e5c
 8005340:	20000350 	.word	0x20000350
 8005344:	20000e60 	.word	0x20000e60
 8005348:	20000360 	.word	0x20000360
 800534c:	20000e64 	.word	0x20000e64
 8005350:	20000370 	.word	0x20000370
 8005354:	4a3d      	ldr	r2, [pc, #244]	; (800544c <loadMenuTexts+0x564>)
 8005356:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8005358:	483d      	ldr	r0, [pc, #244]	; (8005450 <loadMenuTexts+0x568>)
 800535a:	f7fb fab7 	bl	80008cc <copyText>
 800535e:	4603      	mov	r3, r0
 8005360:	4a3c      	ldr	r2, [pc, #240]	; (8005454 <loadMenuTexts+0x56c>)
 8005362:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8005364:	483c      	ldr	r0, [pc, #240]	; (8005458 <loadMenuTexts+0x570>)
 8005366:	f7fb fab1 	bl	80008cc <copyText>
 800536a:	4603      	mov	r3, r0
 800536c:	4a3b      	ldr	r2, [pc, #236]	; (800545c <loadMenuTexts+0x574>)
 800536e:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8005370:	483b      	ldr	r0, [pc, #236]	; (8005460 <loadMenuTexts+0x578>)
 8005372:	f7fb faab 	bl	80008cc <copyText>
 8005376:	4603      	mov	r3, r0
 8005378:	4a3a      	ldr	r2, [pc, #232]	; (8005464 <loadMenuTexts+0x57c>)
 800537a:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 800537c:	483a      	ldr	r0, [pc, #232]	; (8005468 <loadMenuTexts+0x580>)
 800537e:	f7fb faa5 	bl	80008cc <copyText>
 8005382:	4603      	mov	r3, r0
 8005384:	4a39      	ldr	r2, [pc, #228]	; (800546c <loadMenuTexts+0x584>)
 8005386:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8005388:	4839      	ldr	r0, [pc, #228]	; (8005470 <loadMenuTexts+0x588>)
 800538a:	f7fb fa9f 	bl	80008cc <copyText>
 800538e:	4603      	mov	r3, r0
 8005390:	4a38      	ldr	r2, [pc, #224]	; (8005474 <loadMenuTexts+0x58c>)
 8005392:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8005394:	4838      	ldr	r0, [pc, #224]	; (8005478 <loadMenuTexts+0x590>)
 8005396:	f7fb fa99 	bl	80008cc <copyText>
 800539a:	4603      	mov	r3, r0
 800539c:	4a37      	ldr	r2, [pc, #220]	; (800547c <loadMenuTexts+0x594>)
 800539e:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 80053a0:	4837      	ldr	r0, [pc, #220]	; (8005480 <loadMenuTexts+0x598>)
 80053a2:	f7fb fa93 	bl	80008cc <copyText>
 80053a6:	4603      	mov	r3, r0
 80053a8:	4a36      	ldr	r2, [pc, #216]	; (8005484 <loadMenuTexts+0x59c>)
 80053aa:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 80053ac:	4836      	ldr	r0, [pc, #216]	; (8005488 <loadMenuTexts+0x5a0>)
 80053ae:	f7fb fa8d 	bl	80008cc <copyText>
 80053b2:	4603      	mov	r3, r0
 80053b4:	4a35      	ldr	r2, [pc, #212]	; (800548c <loadMenuTexts+0x5a4>)
 80053b6:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 80053b8:	4835      	ldr	r0, [pc, #212]	; (8005490 <loadMenuTexts+0x5a8>)
 80053ba:	f7fb fa87 	bl	80008cc <copyText>
 80053be:	4603      	mov	r3, r0
 80053c0:	4a34      	ldr	r2, [pc, #208]	; (8005494 <loadMenuTexts+0x5ac>)
 80053c2:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 80053c4:	4834      	ldr	r0, [pc, #208]	; (8005498 <loadMenuTexts+0x5b0>)
 80053c6:	f7fb fa81 	bl	80008cc <copyText>
 80053ca:	4603      	mov	r3, r0
 80053cc:	4a33      	ldr	r2, [pc, #204]	; (800549c <loadMenuTexts+0x5b4>)
 80053ce:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 80053d0:	4833      	ldr	r0, [pc, #204]	; (80054a0 <loadMenuTexts+0x5b8>)
 80053d2:	f7fb fa7b 	bl	80008cc <copyText>
 80053d6:	4603      	mov	r3, r0
 80053d8:	4a32      	ldr	r2, [pc, #200]	; (80054a4 <loadMenuTexts+0x5bc>)
 80053da:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 80053dc:	4832      	ldr	r0, [pc, #200]	; (80054a8 <loadMenuTexts+0x5c0>)
 80053de:	f7fb fa75 	bl	80008cc <copyText>
 80053e2:	4603      	mov	r3, r0
 80053e4:	4a31      	ldr	r2, [pc, #196]	; (80054ac <loadMenuTexts+0x5c4>)
 80053e6:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 80053e8:	4831      	ldr	r0, [pc, #196]	; (80054b0 <loadMenuTexts+0x5c8>)
 80053ea:	f7fb fa6f 	bl	80008cc <copyText>
 80053ee:	4603      	mov	r3, r0
 80053f0:	4a30      	ldr	r2, [pc, #192]	; (80054b4 <loadMenuTexts+0x5cc>)
 80053f2:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 80053f4:	4830      	ldr	r0, [pc, #192]	; (80054b8 <loadMenuTexts+0x5d0>)
 80053f6:	f7fb fa69 	bl	80008cc <copyText>
 80053fa:	4603      	mov	r3, r0
 80053fc:	4a2f      	ldr	r2, [pc, #188]	; (80054bc <loadMenuTexts+0x5d4>)
 80053fe:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8005400:	482f      	ldr	r0, [pc, #188]	; (80054c0 <loadMenuTexts+0x5d8>)
 8005402:	f7fb fa63 	bl	80008cc <copyText>
 8005406:	4603      	mov	r3, r0
 8005408:	4a2e      	ldr	r2, [pc, #184]	; (80054c4 <loadMenuTexts+0x5dc>)
 800540a:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 800540c:	482e      	ldr	r0, [pc, #184]	; (80054c8 <loadMenuTexts+0x5e0>)
 800540e:	f7fb fa5d 	bl	80008cc <copyText>
 8005412:	4603      	mov	r3, r0
 8005414:	4a2d      	ldr	r2, [pc, #180]	; (80054cc <loadMenuTexts+0x5e4>)
 8005416:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8005418:	482d      	ldr	r0, [pc, #180]	; (80054d0 <loadMenuTexts+0x5e8>)
 800541a:	f7fb fa57 	bl	80008cc <copyText>
 800541e:	4603      	mov	r3, r0
 8005420:	4a2c      	ldr	r2, [pc, #176]	; (80054d4 <loadMenuTexts+0x5ec>)
 8005422:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8005424:	482c      	ldr	r0, [pc, #176]	; (80054d8 <loadMenuTexts+0x5f0>)
 8005426:	f7fb fa51 	bl	80008cc <copyText>
 800542a:	4603      	mov	r3, r0
 800542c:	4a2b      	ldr	r2, [pc, #172]	; (80054dc <loadMenuTexts+0x5f4>)
 800542e:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8005430:	482b      	ldr	r0, [pc, #172]	; (80054e0 <loadMenuTexts+0x5f8>)
 8005432:	f7fb fa4b 	bl	80008cc <copyText>
 8005436:	4603      	mov	r3, r0
 8005438:	4a2a      	ldr	r2, [pc, #168]	; (80054e4 <loadMenuTexts+0x5fc>)
 800543a:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 800543c:	482a      	ldr	r0, [pc, #168]	; (80054e8 <loadMenuTexts+0x600>)
 800543e:	f7fb fa45 	bl	80008cc <copyText>
 8005442:	4603      	mov	r3, r0
 8005444:	4a29      	ldr	r2, [pc, #164]	; (80054ec <loadMenuTexts+0x604>)
 8005446:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8005448:	e2d3      	b.n	80059f2 <loadMenuTexts+0xb0a>
 800544a:	bf00      	nop
 800544c:	20000e68 	.word	0x20000e68
 8005450:	20000380 	.word	0x20000380
 8005454:	20000e6c 	.word	0x20000e6c
 8005458:	20000390 	.word	0x20000390
 800545c:	20000e70 	.word	0x20000e70
 8005460:	200003a0 	.word	0x200003a0
 8005464:	20000e74 	.word	0x20000e74
 8005468:	200003b0 	.word	0x200003b0
 800546c:	20000e78 	.word	0x20000e78
 8005470:	200003c0 	.word	0x200003c0
 8005474:	20000e7c 	.word	0x20000e7c
 8005478:	200003d0 	.word	0x200003d0
 800547c:	20000e80 	.word	0x20000e80
 8005480:	200003e0 	.word	0x200003e0
 8005484:	20000e84 	.word	0x20000e84
 8005488:	200003f0 	.word	0x200003f0
 800548c:	20000e88 	.word	0x20000e88
 8005490:	20000400 	.word	0x20000400
 8005494:	20000e8c 	.word	0x20000e8c
 8005498:	20000410 	.word	0x20000410
 800549c:	20000e90 	.word	0x20000e90
 80054a0:	20000420 	.word	0x20000420
 80054a4:	20000e94 	.word	0x20000e94
 80054a8:	20000430 	.word	0x20000430
 80054ac:	20000e98 	.word	0x20000e98
 80054b0:	20000440 	.word	0x20000440
 80054b4:	20000e9c 	.word	0x20000e9c
 80054b8:	20000450 	.word	0x20000450
 80054bc:	20000ea8 	.word	0x20000ea8
 80054c0:	20000460 	.word	0x20000460
 80054c4:	20000eac 	.word	0x20000eac
 80054c8:	20000470 	.word	0x20000470
 80054cc:	20000eb0 	.word	0x20000eb0
 80054d0:	20000480 	.word	0x20000480
 80054d4:	20000eb4 	.word	0x20000eb4
 80054d8:	20000490 	.word	0x20000490
 80054dc:	20000eb8 	.word	0x20000eb8
 80054e0:	200004a0 	.word	0x200004a0
 80054e4:	20000ebc 	.word	0x20000ebc
 80054e8:	200004b0 	.word	0x200004b0
 80054ec:	20000ec0 	.word	0x20000ec0
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 80054f0:	48a9      	ldr	r0, [pc, #676]	; (8005798 <loadMenuTexts+0x8b0>)
 80054f2:	f7fb f9eb 	bl	80008cc <copyText>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4aa8      	ldr	r2, [pc, #672]	; (800579c <loadMenuTexts+0x8b4>)
 80054fa:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 80054fc:	48a8      	ldr	r0, [pc, #672]	; (80057a0 <loadMenuTexts+0x8b8>)
 80054fe:	f7fb f9e5 	bl	80008cc <copyText>
 8005502:	4603      	mov	r3, r0
 8005504:	4aa7      	ldr	r2, [pc, #668]	; (80057a4 <loadMenuTexts+0x8bc>)
 8005506:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8005508:	48a7      	ldr	r0, [pc, #668]	; (80057a8 <loadMenuTexts+0x8c0>)
 800550a:	f7fb f9df 	bl	80008cc <copyText>
 800550e:	4603      	mov	r3, r0
 8005510:	4aa6      	ldr	r2, [pc, #664]	; (80057ac <loadMenuTexts+0x8c4>)
 8005512:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8005514:	48a6      	ldr	r0, [pc, #664]	; (80057b0 <loadMenuTexts+0x8c8>)
 8005516:	f7fb f9d9 	bl	80008cc <copyText>
 800551a:	4603      	mov	r3, r0
 800551c:	4aa5      	ldr	r2, [pc, #660]	; (80057b4 <loadMenuTexts+0x8cc>)
 800551e:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8005520:	48a5      	ldr	r0, [pc, #660]	; (80057b8 <loadMenuTexts+0x8d0>)
 8005522:	f7fb f9d3 	bl	80008cc <copyText>
 8005526:	4603      	mov	r3, r0
 8005528:	4aa4      	ldr	r2, [pc, #656]	; (80057bc <loadMenuTexts+0x8d4>)
 800552a:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 800552c:	48a4      	ldr	r0, [pc, #656]	; (80057c0 <loadMenuTexts+0x8d8>)
 800552e:	f7fb f9cd 	bl	80008cc <copyText>
 8005532:	4603      	mov	r3, r0
 8005534:	4aa3      	ldr	r2, [pc, #652]	; (80057c4 <loadMenuTexts+0x8dc>)
 8005536:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8005538:	48a3      	ldr	r0, [pc, #652]	; (80057c8 <loadMenuTexts+0x8e0>)
 800553a:	f7fb f9c7 	bl	80008cc <copyText>
 800553e:	4603      	mov	r3, r0
 8005540:	4aa2      	ldr	r2, [pc, #648]	; (80057cc <loadMenuTexts+0x8e4>)
 8005542:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8005544:	48a2      	ldr	r0, [pc, #648]	; (80057d0 <loadMenuTexts+0x8e8>)
 8005546:	f7fb f9c1 	bl	80008cc <copyText>
 800554a:	4603      	mov	r3, r0
 800554c:	4aa1      	ldr	r2, [pc, #644]	; (80057d4 <loadMenuTexts+0x8ec>)
 800554e:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8005550:	48a1      	ldr	r0, [pc, #644]	; (80057d8 <loadMenuTexts+0x8f0>)
 8005552:	f7fb f9bb 	bl	80008cc <copyText>
 8005556:	4603      	mov	r3, r0
 8005558:	4aa0      	ldr	r2, [pc, #640]	; (80057dc <loadMenuTexts+0x8f4>)
 800555a:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 800555c:	48a0      	ldr	r0, [pc, #640]	; (80057e0 <loadMenuTexts+0x8f8>)
 800555e:	f7fb f9b5 	bl	80008cc <copyText>
 8005562:	4603      	mov	r3, r0
 8005564:	4a9f      	ldr	r2, [pc, #636]	; (80057e4 <loadMenuTexts+0x8fc>)
 8005566:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8005568:	489f      	ldr	r0, [pc, #636]	; (80057e8 <loadMenuTexts+0x900>)
 800556a:	f7fb f9af 	bl	80008cc <copyText>
 800556e:	4603      	mov	r3, r0
 8005570:	4a9e      	ldr	r2, [pc, #632]	; (80057ec <loadMenuTexts+0x904>)
 8005572:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8005574:	489e      	ldr	r0, [pc, #632]	; (80057f0 <loadMenuTexts+0x908>)
 8005576:	f7fb f9a9 	bl	80008cc <copyText>
 800557a:	4603      	mov	r3, r0
 800557c:	4a9d      	ldr	r2, [pc, #628]	; (80057f4 <loadMenuTexts+0x90c>)
 800557e:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8005580:	489d      	ldr	r0, [pc, #628]	; (80057f8 <loadMenuTexts+0x910>)
 8005582:	f7fb f9a3 	bl	80008cc <copyText>
 8005586:	4603      	mov	r3, r0
 8005588:	4a9c      	ldr	r2, [pc, #624]	; (80057fc <loadMenuTexts+0x914>)
 800558a:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 800558c:	489c      	ldr	r0, [pc, #624]	; (8005800 <loadMenuTexts+0x918>)
 800558e:	f7fb f99d 	bl	80008cc <copyText>
 8005592:	4603      	mov	r3, r0
 8005594:	4a9b      	ldr	r2, [pc, #620]	; (8005804 <loadMenuTexts+0x91c>)
 8005596:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8005598:	489b      	ldr	r0, [pc, #620]	; (8005808 <loadMenuTexts+0x920>)
 800559a:	f7fb f997 	bl	80008cc <copyText>
 800559e:	4603      	mov	r3, r0
 80055a0:	4a9a      	ldr	r2, [pc, #616]	; (800580c <loadMenuTexts+0x924>)
 80055a2:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 80055a4:	489a      	ldr	r0, [pc, #616]	; (8005810 <loadMenuTexts+0x928>)
 80055a6:	f7fb f991 	bl	80008cc <copyText>
 80055aa:	4603      	mov	r3, r0
 80055ac:	4a99      	ldr	r2, [pc, #612]	; (8005814 <loadMenuTexts+0x92c>)
 80055ae:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 80055b0:	4899      	ldr	r0, [pc, #612]	; (8005818 <loadMenuTexts+0x930>)
 80055b2:	f7fb f98b 	bl	80008cc <copyText>
 80055b6:	4603      	mov	r3, r0
 80055b8:	4a98      	ldr	r2, [pc, #608]	; (800581c <loadMenuTexts+0x934>)
 80055ba:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 80055bc:	4898      	ldr	r0, [pc, #608]	; (8005820 <loadMenuTexts+0x938>)
 80055be:	f7fb f985 	bl	80008cc <copyText>
 80055c2:	4603      	mov	r3, r0
 80055c4:	4a97      	ldr	r2, [pc, #604]	; (8005824 <loadMenuTexts+0x93c>)
 80055c6:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 80055c8:	4897      	ldr	r0, [pc, #604]	; (8005828 <loadMenuTexts+0x940>)
 80055ca:	f7fb f97f 	bl	80008cc <copyText>
 80055ce:	4603      	mov	r3, r0
 80055d0:	4a96      	ldr	r2, [pc, #600]	; (800582c <loadMenuTexts+0x944>)
 80055d2:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 80055d4:	4896      	ldr	r0, [pc, #600]	; (8005830 <loadMenuTexts+0x948>)
 80055d6:	f7fb f979 	bl	80008cc <copyText>
 80055da:	4603      	mov	r3, r0
 80055dc:	4a95      	ldr	r2, [pc, #596]	; (8005834 <loadMenuTexts+0x94c>)
 80055de:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 80055e0:	4895      	ldr	r0, [pc, #596]	; (8005838 <loadMenuTexts+0x950>)
 80055e2:	f7fb f973 	bl	80008cc <copyText>
 80055e6:	4603      	mov	r3, r0
 80055e8:	4a94      	ldr	r2, [pc, #592]	; (800583c <loadMenuTexts+0x954>)
 80055ea:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 80055ec:	4894      	ldr	r0, [pc, #592]	; (8005840 <loadMenuTexts+0x958>)
 80055ee:	f7fb f96d 	bl	80008cc <copyText>
 80055f2:	4603      	mov	r3, r0
 80055f4:	4a93      	ldr	r2, [pc, #588]	; (8005844 <loadMenuTexts+0x95c>)
 80055f6:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 80055f8:	4893      	ldr	r0, [pc, #588]	; (8005848 <loadMenuTexts+0x960>)
 80055fa:	f7fb f967 	bl	80008cc <copyText>
 80055fe:	4603      	mov	r3, r0
 8005600:	4a92      	ldr	r2, [pc, #584]	; (800584c <loadMenuTexts+0x964>)
 8005602:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8005604:	4892      	ldr	r0, [pc, #584]	; (8005850 <loadMenuTexts+0x968>)
 8005606:	f7fb f961 	bl	80008cc <copyText>
 800560a:	4603      	mov	r3, r0
 800560c:	4a91      	ldr	r2, [pc, #580]	; (8005854 <loadMenuTexts+0x96c>)
 800560e:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8005610:	4891      	ldr	r0, [pc, #580]	; (8005858 <loadMenuTexts+0x970>)
 8005612:	f7fb f95b 	bl	80008cc <copyText>
 8005616:	4603      	mov	r3, r0
 8005618:	4a90      	ldr	r2, [pc, #576]	; (800585c <loadMenuTexts+0x974>)
 800561a:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 800561c:	4890      	ldr	r0, [pc, #576]	; (8005860 <loadMenuTexts+0x978>)
 800561e:	f7fb f955 	bl	80008cc <copyText>
 8005622:	4603      	mov	r3, r0
 8005624:	4a8f      	ldr	r2, [pc, #572]	; (8005864 <loadMenuTexts+0x97c>)
 8005626:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8005628:	488f      	ldr	r0, [pc, #572]	; (8005868 <loadMenuTexts+0x980>)
 800562a:	f7fb f94f 	bl	80008cc <copyText>
 800562e:	4603      	mov	r3, r0
 8005630:	4a8e      	ldr	r2, [pc, #568]	; (800586c <loadMenuTexts+0x984>)
 8005632:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8005634:	488e      	ldr	r0, [pc, #568]	; (8005870 <loadMenuTexts+0x988>)
 8005636:	f7fb f949 	bl	80008cc <copyText>
 800563a:	4603      	mov	r3, r0
 800563c:	4a8d      	ldr	r2, [pc, #564]	; (8005874 <loadMenuTexts+0x98c>)
 800563e:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8005640:	488d      	ldr	r0, [pc, #564]	; (8005878 <loadMenuTexts+0x990>)
 8005642:	f7fb f943 	bl	80008cc <copyText>
 8005646:	4603      	mov	r3, r0
 8005648:	4a8c      	ldr	r2, [pc, #560]	; (800587c <loadMenuTexts+0x994>)
 800564a:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 800564c:	488c      	ldr	r0, [pc, #560]	; (8005880 <loadMenuTexts+0x998>)
 800564e:	f7fb f93d 	bl	80008cc <copyText>
 8005652:	4603      	mov	r3, r0
 8005654:	4a8b      	ldr	r2, [pc, #556]	; (8005884 <loadMenuTexts+0x99c>)
 8005656:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8005658:	488b      	ldr	r0, [pc, #556]	; (8005888 <loadMenuTexts+0x9a0>)
 800565a:	f7fb f937 	bl	80008cc <copyText>
 800565e:	4603      	mov	r3, r0
 8005660:	4a8a      	ldr	r2, [pc, #552]	; (800588c <loadMenuTexts+0x9a4>)
 8005662:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8005664:	488a      	ldr	r0, [pc, #552]	; (8005890 <loadMenuTexts+0x9a8>)
 8005666:	f7fb f931 	bl	80008cc <copyText>
 800566a:	4603      	mov	r3, r0
 800566c:	4a89      	ldr	r2, [pc, #548]	; (8005894 <loadMenuTexts+0x9ac>)
 800566e:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8005670:	4889      	ldr	r0, [pc, #548]	; (8005898 <loadMenuTexts+0x9b0>)
 8005672:	f7fb f92b 	bl	80008cc <copyText>
 8005676:	4603      	mov	r3, r0
 8005678:	4a88      	ldr	r2, [pc, #544]	; (800589c <loadMenuTexts+0x9b4>)
 800567a:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 800567c:	4888      	ldr	r0, [pc, #544]	; (80058a0 <loadMenuTexts+0x9b8>)
 800567e:	f7fb f925 	bl	80008cc <copyText>
 8005682:	4603      	mov	r3, r0
 8005684:	4a87      	ldr	r2, [pc, #540]	; (80058a4 <loadMenuTexts+0x9bc>)
 8005686:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8005688:	4887      	ldr	r0, [pc, #540]	; (80058a8 <loadMenuTexts+0x9c0>)
 800568a:	f7fb f91f 	bl	80008cc <copyText>
 800568e:	4603      	mov	r3, r0
 8005690:	4a86      	ldr	r2, [pc, #536]	; (80058ac <loadMenuTexts+0x9c4>)
 8005692:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005694:	4886      	ldr	r0, [pc, #536]	; (80058b0 <loadMenuTexts+0x9c8>)
 8005696:	f7fb f919 	bl	80008cc <copyText>
 800569a:	4603      	mov	r3, r0
 800569c:	4a85      	ldr	r2, [pc, #532]	; (80058b4 <loadMenuTexts+0x9cc>)
 800569e:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 80056a0:	4885      	ldr	r0, [pc, #532]	; (80058b8 <loadMenuTexts+0x9d0>)
 80056a2:	f7fb f913 	bl	80008cc <copyText>
 80056a6:	4603      	mov	r3, r0
 80056a8:	4a84      	ldr	r2, [pc, #528]	; (80058bc <loadMenuTexts+0x9d4>)
 80056aa:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 80056ac:	4884      	ldr	r0, [pc, #528]	; (80058c0 <loadMenuTexts+0x9d8>)
 80056ae:	f7fb f90d 	bl	80008cc <copyText>
 80056b2:	4603      	mov	r3, r0
 80056b4:	4a83      	ldr	r2, [pc, #524]	; (80058c4 <loadMenuTexts+0x9dc>)
 80056b6:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 80056b8:	4883      	ldr	r0, [pc, #524]	; (80058c8 <loadMenuTexts+0x9e0>)
 80056ba:	f7fb f907 	bl	80008cc <copyText>
 80056be:	4603      	mov	r3, r0
 80056c0:	4a82      	ldr	r2, [pc, #520]	; (80058cc <loadMenuTexts+0x9e4>)
 80056c2:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 80056c4:	4882      	ldr	r0, [pc, #520]	; (80058d0 <loadMenuTexts+0x9e8>)
 80056c6:	f7fb f901 	bl	80008cc <copyText>
 80056ca:	4603      	mov	r3, r0
 80056cc:	4a81      	ldr	r2, [pc, #516]	; (80058d4 <loadMenuTexts+0x9ec>)
 80056ce:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 80056d0:	4881      	ldr	r0, [pc, #516]	; (80058d8 <loadMenuTexts+0x9f0>)
 80056d2:	f7fb f8fb 	bl	80008cc <copyText>
 80056d6:	4603      	mov	r3, r0
 80056d8:	4a80      	ldr	r2, [pc, #512]	; (80058dc <loadMenuTexts+0x9f4>)
 80056da:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 80056dc:	4880      	ldr	r0, [pc, #512]	; (80058e0 <loadMenuTexts+0x9f8>)
 80056de:	f7fb f8f5 	bl	80008cc <copyText>
 80056e2:	4603      	mov	r3, r0
 80056e4:	4a7f      	ldr	r2, [pc, #508]	; (80058e4 <loadMenuTexts+0x9fc>)
 80056e6:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 80056e8:	487f      	ldr	r0, [pc, #508]	; (80058e8 <loadMenuTexts+0xa00>)
 80056ea:	f7fb f8ef 	bl	80008cc <copyText>
 80056ee:	4603      	mov	r3, r0
 80056f0:	4a7e      	ldr	r2, [pc, #504]	; (80058ec <loadMenuTexts+0xa04>)
 80056f2:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80056f4:	487e      	ldr	r0, [pc, #504]	; (80058f0 <loadMenuTexts+0xa08>)
 80056f6:	f7fb f8e9 	bl	80008cc <copyText>
 80056fa:	4603      	mov	r3, r0
 80056fc:	4a7d      	ldr	r2, [pc, #500]	; (80058f4 <loadMenuTexts+0xa0c>)
 80056fe:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8005700:	487d      	ldr	r0, [pc, #500]	; (80058f8 <loadMenuTexts+0xa10>)
 8005702:	f7fb f8e3 	bl	80008cc <copyText>
 8005706:	4603      	mov	r3, r0
 8005708:	4a7c      	ldr	r2, [pc, #496]	; (80058fc <loadMenuTexts+0xa14>)
 800570a:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 800570c:	487c      	ldr	r0, [pc, #496]	; (8005900 <loadMenuTexts+0xa18>)
 800570e:	f7fb f8dd 	bl	80008cc <copyText>
 8005712:	4603      	mov	r3, r0
 8005714:	4a7b      	ldr	r2, [pc, #492]	; (8005904 <loadMenuTexts+0xa1c>)
 8005716:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8005718:	487b      	ldr	r0, [pc, #492]	; (8005908 <loadMenuTexts+0xa20>)
 800571a:	f7fb f8d7 	bl	80008cc <copyText>
 800571e:	4603      	mov	r3, r0
 8005720:	4a7a      	ldr	r2, [pc, #488]	; (800590c <loadMenuTexts+0xa24>)
 8005722:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8005724:	487a      	ldr	r0, [pc, #488]	; (8005910 <loadMenuTexts+0xa28>)
 8005726:	f7fb f8d1 	bl	80008cc <copyText>
 800572a:	4603      	mov	r3, r0
 800572c:	4a79      	ldr	r2, [pc, #484]	; (8005914 <loadMenuTexts+0xa2c>)
 800572e:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8005730:	4879      	ldr	r0, [pc, #484]	; (8005918 <loadMenuTexts+0xa30>)
 8005732:	f7fb f8cb 	bl	80008cc <copyText>
 8005736:	4603      	mov	r3, r0
 8005738:	4a78      	ldr	r2, [pc, #480]	; (800591c <loadMenuTexts+0xa34>)
 800573a:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 800573c:	4878      	ldr	r0, [pc, #480]	; (8005920 <loadMenuTexts+0xa38>)
 800573e:	f7fb f8c5 	bl	80008cc <copyText>
 8005742:	4603      	mov	r3, r0
 8005744:	4a77      	ldr	r2, [pc, #476]	; (8005924 <loadMenuTexts+0xa3c>)
 8005746:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8005748:	4877      	ldr	r0, [pc, #476]	; (8005928 <loadMenuTexts+0xa40>)
 800574a:	f7fb f8bf 	bl	80008cc <copyText>
 800574e:	4603      	mov	r3, r0
 8005750:	4a76      	ldr	r2, [pc, #472]	; (800592c <loadMenuTexts+0xa44>)
 8005752:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8005754:	4876      	ldr	r0, [pc, #472]	; (8005930 <loadMenuTexts+0xa48>)
 8005756:	f7fb f8b9 	bl	80008cc <copyText>
 800575a:	4603      	mov	r3, r0
 800575c:	4a75      	ldr	r2, [pc, #468]	; (8005934 <loadMenuTexts+0xa4c>)
 800575e:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8005760:	4875      	ldr	r0, [pc, #468]	; (8005938 <loadMenuTexts+0xa50>)
 8005762:	f7fb f8b3 	bl	80008cc <copyText>
 8005766:	4603      	mov	r3, r0
 8005768:	4a74      	ldr	r2, [pc, #464]	; (800593c <loadMenuTexts+0xa54>)
 800576a:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 800576c:	4874      	ldr	r0, [pc, #464]	; (8005940 <loadMenuTexts+0xa58>)
 800576e:	f7fb f8ad 	bl	80008cc <copyText>
 8005772:	4603      	mov	r3, r0
 8005774:	4a73      	ldr	r2, [pc, #460]	; (8005944 <loadMenuTexts+0xa5c>)
 8005776:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8005778:	4873      	ldr	r0, [pc, #460]	; (8005948 <loadMenuTexts+0xa60>)
 800577a:	f7fb f8a7 	bl	80008cc <copyText>
 800577e:	4603      	mov	r3, r0
 8005780:	4a72      	ldr	r2, [pc, #456]	; (800594c <loadMenuTexts+0xa64>)
 8005782:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8005784:	4872      	ldr	r0, [pc, #456]	; (8005950 <loadMenuTexts+0xa68>)
 8005786:	f7fb f8a1 	bl	80008cc <copyText>
 800578a:	4603      	mov	r3, r0
 800578c:	4a71      	ldr	r2, [pc, #452]	; (8005954 <loadMenuTexts+0xa6c>)
 800578e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8005790:	4871      	ldr	r0, [pc, #452]	; (8005958 <loadMenuTexts+0xa70>)
 8005792:	f7fb f89b 	bl	80008cc <copyText>
 8005796:	e0e1      	b.n	800595c <loadMenuTexts+0xa74>
 8005798:	200004c0 	.word	0x200004c0
 800579c:	20000d9c 	.word	0x20000d9c
 80057a0:	200004d0 	.word	0x200004d0
 80057a4:	20000da0 	.word	0x20000da0
 80057a8:	200004e0 	.word	0x200004e0
 80057ac:	20000da4 	.word	0x20000da4
 80057b0:	200004f0 	.word	0x200004f0
 80057b4:	20000da8 	.word	0x20000da8
 80057b8:	20000500 	.word	0x20000500
 80057bc:	20000dac 	.word	0x20000dac
 80057c0:	20000510 	.word	0x20000510
 80057c4:	20000db0 	.word	0x20000db0
 80057c8:	20000520 	.word	0x20000520
 80057cc:	20000db4 	.word	0x20000db4
 80057d0:	20000530 	.word	0x20000530
 80057d4:	20000db8 	.word	0x20000db8
 80057d8:	20000540 	.word	0x20000540
 80057dc:	20000dbc 	.word	0x20000dbc
 80057e0:	20000550 	.word	0x20000550
 80057e4:	20000dc0 	.word	0x20000dc0
 80057e8:	20000560 	.word	0x20000560
 80057ec:	20000dc4 	.word	0x20000dc4
 80057f0:	20000570 	.word	0x20000570
 80057f4:	20000dc8 	.word	0x20000dc8
 80057f8:	20000580 	.word	0x20000580
 80057fc:	20000dcc 	.word	0x20000dcc
 8005800:	20000590 	.word	0x20000590
 8005804:	20000dd0 	.word	0x20000dd0
 8005808:	200005a0 	.word	0x200005a0
 800580c:	20000dd4 	.word	0x20000dd4
 8005810:	200005b0 	.word	0x200005b0
 8005814:	20000dd8 	.word	0x20000dd8
 8005818:	200005c0 	.word	0x200005c0
 800581c:	20000ddc 	.word	0x20000ddc
 8005820:	200005d0 	.word	0x200005d0
 8005824:	20000de0 	.word	0x20000de0
 8005828:	200005e0 	.word	0x200005e0
 800582c:	20000de4 	.word	0x20000de4
 8005830:	200005f0 	.word	0x200005f0
 8005834:	20000de8 	.word	0x20000de8
 8005838:	20000600 	.word	0x20000600
 800583c:	20000dec 	.word	0x20000dec
 8005840:	20000610 	.word	0x20000610
 8005844:	20000df4 	.word	0x20000df4
 8005848:	20000620 	.word	0x20000620
 800584c:	20000df8 	.word	0x20000df8
 8005850:	20000630 	.word	0x20000630
 8005854:	20000dfc 	.word	0x20000dfc
 8005858:	20000640 	.word	0x20000640
 800585c:	20000e00 	.word	0x20000e00
 8005860:	20000650 	.word	0x20000650
 8005864:	20000e04 	.word	0x20000e04
 8005868:	20000660 	.word	0x20000660
 800586c:	20000e08 	.word	0x20000e08
 8005870:	20000670 	.word	0x20000670
 8005874:	20000e0c 	.word	0x20000e0c
 8005878:	20000680 	.word	0x20000680
 800587c:	20000e10 	.word	0x20000e10
 8005880:	20000690 	.word	0x20000690
 8005884:	20000e14 	.word	0x20000e14
 8005888:	200006a0 	.word	0x200006a0
 800588c:	20000e18 	.word	0x20000e18
 8005890:	200006b0 	.word	0x200006b0
 8005894:	20000e1c 	.word	0x20000e1c
 8005898:	200006c0 	.word	0x200006c0
 800589c:	20000e24 	.word	0x20000e24
 80058a0:	200006d0 	.word	0x200006d0
 80058a4:	20000e2c 	.word	0x20000e2c
 80058a8:	200006e0 	.word	0x200006e0
 80058ac:	20000e30 	.word	0x20000e30
 80058b0:	200006f0 	.word	0x200006f0
 80058b4:	20000e34 	.word	0x20000e34
 80058b8:	20000700 	.word	0x20000700
 80058bc:	20000e38 	.word	0x20000e38
 80058c0:	20000710 	.word	0x20000710
 80058c4:	20000e3c 	.word	0x20000e3c
 80058c8:	20000720 	.word	0x20000720
 80058cc:	20000e40 	.word	0x20000e40
 80058d0:	20000730 	.word	0x20000730
 80058d4:	20000e44 	.word	0x20000e44
 80058d8:	20000740 	.word	0x20000740
 80058dc:	20000e48 	.word	0x20000e48
 80058e0:	20000750 	.word	0x20000750
 80058e4:	20000e4c 	.word	0x20000e4c
 80058e8:	20000760 	.word	0x20000760
 80058ec:	20000e50 	.word	0x20000e50
 80058f0:	20000770 	.word	0x20000770
 80058f4:	20000e54 	.word	0x20000e54
 80058f8:	20000780 	.word	0x20000780
 80058fc:	20000e58 	.word	0x20000e58
 8005900:	20000790 	.word	0x20000790
 8005904:	20000e5c 	.word	0x20000e5c
 8005908:	200007a0 	.word	0x200007a0
 800590c:	20000e60 	.word	0x20000e60
 8005910:	200007b0 	.word	0x200007b0
 8005914:	20000e64 	.word	0x20000e64
 8005918:	200007c0 	.word	0x200007c0
 800591c:	20000e68 	.word	0x20000e68
 8005920:	200007d0 	.word	0x200007d0
 8005924:	20000e6c 	.word	0x20000e6c
 8005928:	200007e0 	.word	0x200007e0
 800592c:	20000e70 	.word	0x20000e70
 8005930:	200007f0 	.word	0x200007f0
 8005934:	20000e74 	.word	0x20000e74
 8005938:	20000800 	.word	0x20000800
 800593c:	20000e78 	.word	0x20000e78
 8005940:	20000810 	.word	0x20000810
 8005944:	20000e7c 	.word	0x20000e7c
 8005948:	20000820 	.word	0x20000820
 800594c:	20000e80 	.word	0x20000e80
 8005950:	20000830 	.word	0x20000830
 8005954:	20000e84 	.word	0x20000e84
 8005958:	20000840 	.word	0x20000840
 800595c:	4603      	mov	r3, r0
 800595e:	4a27      	ldr	r2, [pc, #156]	; (80059fc <loadMenuTexts+0xb14>)
 8005960:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8005962:	4827      	ldr	r0, [pc, #156]	; (8005a00 <loadMenuTexts+0xb18>)
 8005964:	f7fa ffb2 	bl	80008cc <copyText>
 8005968:	4603      	mov	r3, r0
 800596a:	4a26      	ldr	r2, [pc, #152]	; (8005a04 <loadMenuTexts+0xb1c>)
 800596c:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 800596e:	4826      	ldr	r0, [pc, #152]	; (8005a08 <loadMenuTexts+0xb20>)
 8005970:	f7fa ffac 	bl	80008cc <copyText>
 8005974:	4603      	mov	r3, r0
 8005976:	4a25      	ldr	r2, [pc, #148]	; (8005a0c <loadMenuTexts+0xb24>)
 8005978:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 800597a:	4825      	ldr	r0, [pc, #148]	; (8005a10 <loadMenuTexts+0xb28>)
 800597c:	f7fa ffa6 	bl	80008cc <copyText>
 8005980:	4603      	mov	r3, r0
 8005982:	4a24      	ldr	r2, [pc, #144]	; (8005a14 <loadMenuTexts+0xb2c>)
 8005984:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8005986:	4824      	ldr	r0, [pc, #144]	; (8005a18 <loadMenuTexts+0xb30>)
 8005988:	f7fa ffa0 	bl	80008cc <copyText>
 800598c:	4603      	mov	r3, r0
 800598e:	4a23      	ldr	r2, [pc, #140]	; (8005a1c <loadMenuTexts+0xb34>)
 8005990:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8005992:	4823      	ldr	r0, [pc, #140]	; (8005a20 <loadMenuTexts+0xb38>)
 8005994:	f7fa ff9a 	bl	80008cc <copyText>
 8005998:	4603      	mov	r3, r0
 800599a:	4a22      	ldr	r2, [pc, #136]	; (8005a24 <loadMenuTexts+0xb3c>)
 800599c:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 800599e:	4822      	ldr	r0, [pc, #136]	; (8005a28 <loadMenuTexts+0xb40>)
 80059a0:	f7fa ff94 	bl	80008cc <copyText>
 80059a4:	4603      	mov	r3, r0
 80059a6:	4a21      	ldr	r2, [pc, #132]	; (8005a2c <loadMenuTexts+0xb44>)
 80059a8:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 80059aa:	4821      	ldr	r0, [pc, #132]	; (8005a30 <loadMenuTexts+0xb48>)
 80059ac:	f7fa ff8e 	bl	80008cc <copyText>
 80059b0:	4603      	mov	r3, r0
 80059b2:	4a20      	ldr	r2, [pc, #128]	; (8005a34 <loadMenuTexts+0xb4c>)
 80059b4:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 80059b6:	4820      	ldr	r0, [pc, #128]	; (8005a38 <loadMenuTexts+0xb50>)
 80059b8:	f7fa ff88 	bl	80008cc <copyText>
 80059bc:	4603      	mov	r3, r0
 80059be:	4a1f      	ldr	r2, [pc, #124]	; (8005a3c <loadMenuTexts+0xb54>)
 80059c0:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 80059c2:	481f      	ldr	r0, [pc, #124]	; (8005a40 <loadMenuTexts+0xb58>)
 80059c4:	f7fa ff82 	bl	80008cc <copyText>
 80059c8:	4603      	mov	r3, r0
 80059ca:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <loadMenuTexts+0xb5c>)
 80059cc:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 80059ce:	481e      	ldr	r0, [pc, #120]	; (8005a48 <loadMenuTexts+0xb60>)
 80059d0:	f7fa ff7c 	bl	80008cc <copyText>
 80059d4:	4603      	mov	r3, r0
 80059d6:	4a1d      	ldr	r2, [pc, #116]	; (8005a4c <loadMenuTexts+0xb64>)
 80059d8:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 80059da:	481d      	ldr	r0, [pc, #116]	; (8005a50 <loadMenuTexts+0xb68>)
 80059dc:	f7fa ff76 	bl	80008cc <copyText>
 80059e0:	4603      	mov	r3, r0
 80059e2:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <loadMenuTexts+0xb6c>)
 80059e4:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 80059e6:	481c      	ldr	r0, [pc, #112]	; (8005a58 <loadMenuTexts+0xb70>)
 80059e8:	f7fa ff70 	bl	80008cc <copyText>
 80059ec:	4603      	mov	r3, r0
 80059ee:	4a1b      	ldr	r2, [pc, #108]	; (8005a5c <loadMenuTexts+0xb74>)
 80059f0:	6013      	str	r3, [r2, #0]
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000e88 	.word	0x20000e88
 8005a00:	20000850 	.word	0x20000850
 8005a04:	20000e8c 	.word	0x20000e8c
 8005a08:	20000860 	.word	0x20000860
 8005a0c:	20000e90 	.word	0x20000e90
 8005a10:	20000870 	.word	0x20000870
 8005a14:	20000e94 	.word	0x20000e94
 8005a18:	20000880 	.word	0x20000880
 8005a1c:	20000e98 	.word	0x20000e98
 8005a20:	20000890 	.word	0x20000890
 8005a24:	20000e9c 	.word	0x20000e9c
 8005a28:	200008a0 	.word	0x200008a0
 8005a2c:	20000ea8 	.word	0x20000ea8
 8005a30:	200008b0 	.word	0x200008b0
 8005a34:	20000eac 	.word	0x20000eac
 8005a38:	200008c0 	.word	0x200008c0
 8005a3c:	20000eb0 	.word	0x20000eb0
 8005a40:	200008d0 	.word	0x200008d0
 8005a44:	20000eb4 	.word	0x20000eb4
 8005a48:	200008e0 	.word	0x200008e0
 8005a4c:	20000eb8 	.word	0x20000eb8
 8005a50:	200008f0 	.word	0x200008f0
 8005a54:	20000ebc 	.word	0x20000ebc
 8005a58:	20000900 	.word	0x20000900
 8005a5c:	20000ec0 	.word	0x20000ec0

08005a60 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d105      	bne.n	8005a7c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8005a70:	4a22      	ldr	r2, [pc, #136]	; (8005afc <lcdUpdate+0x9c>)
 8005a72:	2101      	movs	r1, #1
 8005a74:	2002      	movs	r0, #2
 8005a76:	f7fa fe9f 	bl	80007b8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8005a7a:	e03b      	b.n	8005af4 <lcdUpdate+0x94>
	} else if(y==2) {
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d105      	bne.n	8005a8e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8005a82:	4a1e      	ldr	r2, [pc, #120]	; (8005afc <lcdUpdate+0x9c>)
 8005a84:	2102      	movs	r1, #2
 8005a86:	2002      	movs	r0, #2
 8005a88:	f7fa fe96 	bl	80007b8 <lcd_print>
}
 8005a8c:	e032      	b.n	8005af4 <lcdUpdate+0x94>
	} else if(y==3) {
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d105      	bne.n	8005aa0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005a94:	4a19      	ldr	r2, [pc, #100]	; (8005afc <lcdUpdate+0x9c>)
 8005a96:	2103      	movs	r1, #3
 8005a98:	2002      	movs	r0, #2
 8005a9a:	f7fa fe8d 	bl	80007b8 <lcd_print>
}
 8005a9e:	e029      	b.n	8005af4 <lcdUpdate+0x94>
	} else if(y==4) {
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d105      	bne.n	8005ab2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8005aa6:	4a15      	ldr	r2, [pc, #84]	; (8005afc <lcdUpdate+0x9c>)
 8005aa8:	2104      	movs	r1, #4
 8005aaa:	2002      	movs	r0, #2
 8005aac:	f7fa fe84 	bl	80007b8 <lcd_print>
}
 8005ab0:	e020      	b.n	8005af4 <lcdUpdate+0x94>
	} else if(y==5) {
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	2b05      	cmp	r3, #5
 8005ab6:	d105      	bne.n	8005ac4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005ab8:	4a10      	ldr	r2, [pc, #64]	; (8005afc <lcdUpdate+0x9c>)
 8005aba:	2105      	movs	r1, #5
 8005abc:	2002      	movs	r0, #2
 8005abe:	f7fa fe7b 	bl	80007b8 <lcd_print>
}
 8005ac2:	e017      	b.n	8005af4 <lcdUpdate+0x94>
	} else if(y==6) {
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	2b06      	cmp	r3, #6
 8005ac8:	d105      	bne.n	8005ad6 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8005aca:	4a0c      	ldr	r2, [pc, #48]	; (8005afc <lcdUpdate+0x9c>)
 8005acc:	2106      	movs	r1, #6
 8005ace:	2002      	movs	r0, #2
 8005ad0:	f7fa fe72 	bl	80007b8 <lcd_print>
}
 8005ad4:	e00e      	b.n	8005af4 <lcdUpdate+0x94>
	} else if (y==7) {
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	2b07      	cmp	r3, #7
 8005ada:	d10b      	bne.n	8005af4 <lcdUpdate+0x94>
		lcd_clear();
 8005adc:	f7fa fe98 	bl	8000810 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8005ae0:	4a07      	ldr	r2, [pc, #28]	; (8005b00 <lcdUpdate+0xa0>)
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	2001      	movs	r0, #1
 8005ae6:	f7fa fe67 	bl	80007b8 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8005aea:	4a06      	ldr	r2, [pc, #24]	; (8005b04 <lcdUpdate+0xa4>)
 8005aec:	2101      	movs	r1, #1
 8005aee:	2002      	movs	r0, #2
 8005af0:	f7fa fe62 	bl	80007b8 <lcd_print>
}
 8005af4:	bf00      	nop
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	0800ddc0 	.word	0x0800ddc0
 8005b00:	0800e6f4 	.word	0x0800e6f4
 8005b04:	0800e708 	.word	0x0800e708

08005b08 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d11d      	bne.n	8005b54 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8005b18:	4b62      	ldr	r3, [pc, #392]	; (8005ca4 <hataKoduLcdGoster+0x19c>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d105      	bne.n	8005b2c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8005b20:	4a61      	ldr	r2, [pc, #388]	; (8005ca8 <hataKoduLcdGoster+0x1a0>)
 8005b22:	2101      	movs	r1, #1
 8005b24:	2001      	movs	r0, #1
 8005b26:	f7fa fe47 	bl	80007b8 <lcd_print>
 8005b2a:	e008      	b.n	8005b3e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8005b2c:	4b5d      	ldr	r3, [pc, #372]	; (8005ca4 <hataKoduLcdGoster+0x19c>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d104      	bne.n	8005b3e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005b34:	4a5d      	ldr	r2, [pc, #372]	; (8005cac <hataKoduLcdGoster+0x1a4>)
 8005b36:	2101      	movs	r1, #1
 8005b38:	2001      	movs	r0, #1
 8005b3a:	f7fa fe3d 	bl	80007b8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8005b3e:	4a5c      	ldr	r2, [pc, #368]	; (8005cb0 <hataKoduLcdGoster+0x1a8>)
 8005b40:	2101      	movs	r1, #1
 8005b42:	2002      	movs	r0, #2
 8005b44:	f7fa fe38 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005b48:	4a5a      	ldr	r2, [pc, #360]	; (8005cb4 <hataKoduLcdGoster+0x1ac>)
 8005b4a:	2107      	movs	r1, #7
 8005b4c:	2002      	movs	r0, #2
 8005b4e:	f7fa fe33 	bl	80007b8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8005b52:	e0a3      	b.n	8005c9c <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d11d      	bne.n	8005b96 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8005b5a:	4b52      	ldr	r3, [pc, #328]	; (8005ca4 <hataKoduLcdGoster+0x19c>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d105      	bne.n	8005b6e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8005b62:	4a51      	ldr	r2, [pc, #324]	; (8005ca8 <hataKoduLcdGoster+0x1a0>)
 8005b64:	2101      	movs	r1, #1
 8005b66:	2001      	movs	r0, #1
 8005b68:	f7fa fe26 	bl	80007b8 <lcd_print>
 8005b6c:	e008      	b.n	8005b80 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8005b6e:	4b4d      	ldr	r3, [pc, #308]	; (8005ca4 <hataKoduLcdGoster+0x19c>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d104      	bne.n	8005b80 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005b76:	4a4d      	ldr	r2, [pc, #308]	; (8005cac <hataKoduLcdGoster+0x1a4>)
 8005b78:	2101      	movs	r1, #1
 8005b7a:	2001      	movs	r0, #1
 8005b7c:	f7fa fe1c 	bl	80007b8 <lcd_print>
		lcd_print(2, 2, "2");
 8005b80:	4a4d      	ldr	r2, [pc, #308]	; (8005cb8 <hataKoduLcdGoster+0x1b0>)
 8005b82:	2102      	movs	r1, #2
 8005b84:	2002      	movs	r0, #2
 8005b86:	f7fa fe17 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005b8a:	4a4a      	ldr	r2, [pc, #296]	; (8005cb4 <hataKoduLcdGoster+0x1ac>)
 8005b8c:	2107      	movs	r1, #7
 8005b8e:	2002      	movs	r0, #2
 8005b90:	f7fa fe12 	bl	80007b8 <lcd_print>
}
 8005b94:	e082      	b.n	8005c9c <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d11d      	bne.n	8005bd8 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005b9c:	4b41      	ldr	r3, [pc, #260]	; (8005ca4 <hataKoduLcdGoster+0x19c>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d105      	bne.n	8005bb0 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005ba4:	4a40      	ldr	r2, [pc, #256]	; (8005ca8 <hataKoduLcdGoster+0x1a0>)
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	2001      	movs	r0, #1
 8005baa:	f7fa fe05 	bl	80007b8 <lcd_print>
 8005bae:	e008      	b.n	8005bc2 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005bb0:	4b3c      	ldr	r3, [pc, #240]	; (8005ca4 <hataKoduLcdGoster+0x19c>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d104      	bne.n	8005bc2 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005bb8:	4a3c      	ldr	r2, [pc, #240]	; (8005cac <hataKoduLcdGoster+0x1a4>)
 8005bba:	2101      	movs	r1, #1
 8005bbc:	2001      	movs	r0, #1
 8005bbe:	f7fa fdfb 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "3");
 8005bc2:	4a3e      	ldr	r2, [pc, #248]	; (8005cbc <hataKoduLcdGoster+0x1b4>)
 8005bc4:	2103      	movs	r1, #3
 8005bc6:	2002      	movs	r0, #2
 8005bc8:	f7fa fdf6 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005bcc:	4a39      	ldr	r2, [pc, #228]	; (8005cb4 <hataKoduLcdGoster+0x1ac>)
 8005bce:	2107      	movs	r1, #7
 8005bd0:	2002      	movs	r0, #2
 8005bd2:	f7fa fdf1 	bl	80007b8 <lcd_print>
}
 8005bd6:	e061      	b.n	8005c9c <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d11d      	bne.n	8005c1a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8005bde:	4b31      	ldr	r3, [pc, #196]	; (8005ca4 <hataKoduLcdGoster+0x19c>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d105      	bne.n	8005bf2 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8005be6:	4a30      	ldr	r2, [pc, #192]	; (8005ca8 <hataKoduLcdGoster+0x1a0>)
 8005be8:	2101      	movs	r1, #1
 8005bea:	2001      	movs	r0, #1
 8005bec:	f7fa fde4 	bl	80007b8 <lcd_print>
 8005bf0:	e008      	b.n	8005c04 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8005bf2:	4b2c      	ldr	r3, [pc, #176]	; (8005ca4 <hataKoduLcdGoster+0x19c>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d104      	bne.n	8005c04 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005bfa:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <hataKoduLcdGoster+0x1a4>)
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	2001      	movs	r0, #1
 8005c00:	f7fa fdda 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "4");
 8005c04:	4a2e      	ldr	r2, [pc, #184]	; (8005cc0 <hataKoduLcdGoster+0x1b8>)
 8005c06:	2104      	movs	r1, #4
 8005c08:	2002      	movs	r0, #2
 8005c0a:	f7fa fdd5 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005c0e:	4a29      	ldr	r2, [pc, #164]	; (8005cb4 <hataKoduLcdGoster+0x1ac>)
 8005c10:	2107      	movs	r1, #7
 8005c12:	2002      	movs	r0, #2
 8005c14:	f7fa fdd0 	bl	80007b8 <lcd_print>
}
 8005c18:	e040      	b.n	8005c9c <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	2b05      	cmp	r3, #5
 8005c1e:	d11d      	bne.n	8005c5c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8005c20:	4b20      	ldr	r3, [pc, #128]	; (8005ca4 <hataKoduLcdGoster+0x19c>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d105      	bne.n	8005c34 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8005c28:	4a1f      	ldr	r2, [pc, #124]	; (8005ca8 <hataKoduLcdGoster+0x1a0>)
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	f7fa fdc3 	bl	80007b8 <lcd_print>
 8005c32:	e008      	b.n	8005c46 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8005c34:	4b1b      	ldr	r3, [pc, #108]	; (8005ca4 <hataKoduLcdGoster+0x19c>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d104      	bne.n	8005c46 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005c3c:	4a1b      	ldr	r2, [pc, #108]	; (8005cac <hataKoduLcdGoster+0x1a4>)
 8005c3e:	2101      	movs	r1, #1
 8005c40:	2001      	movs	r0, #1
 8005c42:	f7fa fdb9 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "5");
 8005c46:	4a1f      	ldr	r2, [pc, #124]	; (8005cc4 <hataKoduLcdGoster+0x1bc>)
 8005c48:	2105      	movs	r1, #5
 8005c4a:	2002      	movs	r0, #2
 8005c4c:	f7fa fdb4 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005c50:	4a18      	ldr	r2, [pc, #96]	; (8005cb4 <hataKoduLcdGoster+0x1ac>)
 8005c52:	2107      	movs	r1, #7
 8005c54:	2002      	movs	r0, #2
 8005c56:	f7fa fdaf 	bl	80007b8 <lcd_print>
}
 8005c5a:	e01f      	b.n	8005c9c <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8005c5c:	79fb      	ldrb	r3, [r7, #7]
 8005c5e:	2b06      	cmp	r3, #6
 8005c60:	d11c      	bne.n	8005c9c <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8005c62:	4b10      	ldr	r3, [pc, #64]	; (8005ca4 <hataKoduLcdGoster+0x19c>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d105      	bne.n	8005c76 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8005c6a:	4a0f      	ldr	r2, [pc, #60]	; (8005ca8 <hataKoduLcdGoster+0x1a0>)
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	2001      	movs	r0, #1
 8005c70:	f7fa fda2 	bl	80007b8 <lcd_print>
 8005c74:	e008      	b.n	8005c88 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8005c76:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <hataKoduLcdGoster+0x19c>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d104      	bne.n	8005c88 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005c7e:	4a0b      	ldr	r2, [pc, #44]	; (8005cac <hataKoduLcdGoster+0x1a4>)
 8005c80:	2101      	movs	r1, #1
 8005c82:	2001      	movs	r0, #1
 8005c84:	f7fa fd98 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "6");
 8005c88:	4a0f      	ldr	r2, [pc, #60]	; (8005cc8 <hataKoduLcdGoster+0x1c0>)
 8005c8a:	2106      	movs	r1, #6
 8005c8c:	2002      	movs	r0, #2
 8005c8e:	f7fa fd93 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005c92:	4a08      	ldr	r2, [pc, #32]	; (8005cb4 <hataKoduLcdGoster+0x1ac>)
 8005c94:	2107      	movs	r1, #7
 8005c96:	2002      	movs	r0, #2
 8005c98:	f7fa fd8e 	bl	80007b8 <lcd_print>
}
 8005c9c:	bf00      	nop
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	20000d51 	.word	0x20000d51
 8005ca8:	0800e71c 	.word	0x0800e71c
 8005cac:	0800e730 	.word	0x0800e730
 8005cb0:	0800db04 	.word	0x0800db04
 8005cb4:	0800e744 	.word	0x0800e744
 8005cb8:	0800db08 	.word	0x0800db08
 8005cbc:	0800db0c 	.word	0x0800db0c
 8005cc0:	0800db10 	.word	0x0800db10
 8005cc4:	0800db14 	.word	0x0800db14
 8005cc8:	0800db18 	.word	0x0800db18

08005ccc <convertAndSendData>:

void convertAndSendData() {
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8005cd2:	4a14      	ldr	r2, [pc, #80]	; (8005d24 <convertAndSendData+0x58>)
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	2001      	movs	r0, #1
 8005cd8:	f7fa fd6e 	bl	80007b8 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8005cdc:	4a12      	ldr	r2, [pc, #72]	; (8005d28 <convertAndSendData+0x5c>)
 8005cde:	2101      	movs	r1, #1
 8005ce0:	2002      	movs	r0, #2
 8005ce2:	f7fa fd69 	bl	80007b8 <lcd_print>
	for(int i=0; i<2; i++) {
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	607b      	str	r3, [r7, #4]
 8005cea:	e00a      	b.n	8005d02 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8005cec:	f002 fb54 	bl	8008398 <mergeData>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	490d      	ldr	r1, [pc, #52]	; (8005d2c <convertAndSendData+0x60>)
 8005cf6:	480e      	ldr	r0, [pc, #56]	; (8005d30 <convertAndSendData+0x64>)
 8005cf8:	f7fa fb44 	bl	8000384 <sendMachineData>
	for(int i=0; i<2; i++) {
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	607b      	str	r3, [r7, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	ddf1      	ble.n	8005cec <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8005d08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d0c:	f003 fb1a 	bl	8009344 <HAL_Delay>
	lcd_clear();
 8005d10:	f7fa fd7e 	bl	8000810 <lcd_clear>
	HAL_Delay(500);
 8005d14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d18:	f003 fb14 	bl	8009344 <HAL_Delay>
}
 8005d1c:	bf00      	nop
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	0800e750 	.word	0x0800e750
 8005d28:	0800e75c 	.word	0x0800e75c
 8005d2c:	20000cd0 	.word	0x20000cd0
 8005d30:	20000bf0 	.word	0x20000bf0

08005d34 <eepromKontrol>:

void eepromKontrol(int type) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af04      	add	r7, sp, #16
 8005d3a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8005d3c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005d40:	9302      	str	r3, [sp, #8]
 8005d42:	236e      	movs	r3, #110	; 0x6e
 8005d44:	9301      	str	r3, [sp, #4]
 8005d46:	4b9c      	ldr	r3, [pc, #624]	; (8005fb8 <eepromKontrol+0x284>)
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	236e      	movs	r3, #110	; 0x6e
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	21a0      	movs	r1, #160	; 0xa0
 8005d50:	489a      	ldr	r0, [pc, #616]	; (8005fbc <eepromKontrol+0x288>)
 8005d52:	f004 fc7b 	bl	800a64c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8005d56:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005d5a:	f003 faf3 	bl	8009344 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005d5e:	4b96      	ldr	r3, [pc, #600]	; (8005fb8 <eepromKontrol+0x284>)
 8005d60:	78da      	ldrb	r2, [r3, #3]
 8005d62:	4b97      	ldr	r3, [pc, #604]	; (8005fc0 <eepromKontrol+0x28c>)
 8005d64:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005d66:	4b94      	ldr	r3, [pc, #592]	; (8005fb8 <eepromKontrol+0x284>)
 8005d68:	785a      	ldrb	r2, [r3, #1]
 8005d6a:	4b96      	ldr	r3, [pc, #600]	; (8005fc4 <eepromKontrol+0x290>)
 8005d6c:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005d6e:	4b92      	ldr	r3, [pc, #584]	; (8005fb8 <eepromKontrol+0x284>)
 8005d70:	789a      	ldrb	r2, [r3, #2]
 8005d72:	4b95      	ldr	r3, [pc, #596]	; (8005fc8 <eepromKontrol+0x294>)
 8005d74:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005d76:	4b90      	ldr	r3, [pc, #576]	; (8005fb8 <eepromKontrol+0x284>)
 8005d78:	791a      	ldrb	r2, [r3, #4]
 8005d7a:	4b94      	ldr	r3, [pc, #592]	; (8005fcc <eepromKontrol+0x298>)
 8005d7c:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005d7e:	4b8e      	ldr	r3, [pc, #568]	; (8005fb8 <eepromKontrol+0x284>)
 8005d80:	795a      	ldrb	r2, [r3, #5]
 8005d82:	4b93      	ldr	r3, [pc, #588]	; (8005fd0 <eepromKontrol+0x29c>)
 8005d84:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005d86:	4b8c      	ldr	r3, [pc, #560]	; (8005fb8 <eepromKontrol+0x284>)
 8005d88:	799a      	ldrb	r2, [r3, #6]
 8005d8a:	4b92      	ldr	r3, [pc, #584]	; (8005fd4 <eepromKontrol+0x2a0>)
 8005d8c:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005d8e:	4b8a      	ldr	r3, [pc, #552]	; (8005fb8 <eepromKontrol+0x284>)
 8005d90:	79da      	ldrb	r2, [r3, #7]
 8005d92:	4b91      	ldr	r3, [pc, #580]	; (8005fd8 <eepromKontrol+0x2a4>)
 8005d94:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005d96:	4b88      	ldr	r3, [pc, #544]	; (8005fb8 <eepromKontrol+0x284>)
 8005d98:	7a1a      	ldrb	r2, [r3, #8]
 8005d9a:	4b90      	ldr	r3, [pc, #576]	; (8005fdc <eepromKontrol+0x2a8>)
 8005d9c:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005d9e:	4b86      	ldr	r3, [pc, #536]	; (8005fb8 <eepromKontrol+0x284>)
 8005da0:	7a5a      	ldrb	r2, [r3, #9]
 8005da2:	4b8f      	ldr	r3, [pc, #572]	; (8005fe0 <eepromKontrol+0x2ac>)
 8005da4:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005da6:	4b84      	ldr	r3, [pc, #528]	; (8005fb8 <eepromKontrol+0x284>)
 8005da8:	7a9a      	ldrb	r2, [r3, #10]
 8005daa:	4b8e      	ldr	r3, [pc, #568]	; (8005fe4 <eepromKontrol+0x2b0>)
 8005dac:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005dae:	4b82      	ldr	r3, [pc, #520]	; (8005fb8 <eepromKontrol+0x284>)
 8005db0:	7ada      	ldrb	r2, [r3, #11]
 8005db2:	4b8d      	ldr	r3, [pc, #564]	; (8005fe8 <eepromKontrol+0x2b4>)
 8005db4:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005db6:	4b80      	ldr	r3, [pc, #512]	; (8005fb8 <eepromKontrol+0x284>)
 8005db8:	7b1a      	ldrb	r2, [r3, #12]
 8005dba:	4b8c      	ldr	r3, [pc, #560]	; (8005fec <eepromKontrol+0x2b8>)
 8005dbc:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005dbe:	4b7e      	ldr	r3, [pc, #504]	; (8005fb8 <eepromKontrol+0x284>)
 8005dc0:	7b5a      	ldrb	r2, [r3, #13]
 8005dc2:	4b8b      	ldr	r3, [pc, #556]	; (8005ff0 <eepromKontrol+0x2bc>)
 8005dc4:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005dc6:	4b7c      	ldr	r3, [pc, #496]	; (8005fb8 <eepromKontrol+0x284>)
 8005dc8:	7b9a      	ldrb	r2, [r3, #14]
 8005dca:	4b8a      	ldr	r3, [pc, #552]	; (8005ff4 <eepromKontrol+0x2c0>)
 8005dcc:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005dce:	4b7a      	ldr	r3, [pc, #488]	; (8005fb8 <eepromKontrol+0x284>)
 8005dd0:	7bda      	ldrb	r2, [r3, #15]
 8005dd2:	4b89      	ldr	r3, [pc, #548]	; (8005ff8 <eepromKontrol+0x2c4>)
 8005dd4:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005dd6:	4b78      	ldr	r3, [pc, #480]	; (8005fb8 <eepromKontrol+0x284>)
 8005dd8:	7c1a      	ldrb	r2, [r3, #16]
 8005dda:	4b88      	ldr	r3, [pc, #544]	; (8005ffc <eepromKontrol+0x2c8>)
 8005ddc:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005dde:	4b76      	ldr	r3, [pc, #472]	; (8005fb8 <eepromKontrol+0x284>)
 8005de0:	7c5a      	ldrb	r2, [r3, #17]
 8005de2:	4b87      	ldr	r3, [pc, #540]	; (8006000 <eepromKontrol+0x2cc>)
 8005de4:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005de6:	4b74      	ldr	r3, [pc, #464]	; (8005fb8 <eepromKontrol+0x284>)
 8005de8:	7c9a      	ldrb	r2, [r3, #18]
 8005dea:	4b86      	ldr	r3, [pc, #536]	; (8006004 <eepromKontrol+0x2d0>)
 8005dec:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005dee:	4b72      	ldr	r3, [pc, #456]	; (8005fb8 <eepromKontrol+0x284>)
 8005df0:	7cda      	ldrb	r2, [r3, #19]
 8005df2:	4b85      	ldr	r3, [pc, #532]	; (8006008 <eepromKontrol+0x2d4>)
 8005df4:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005df6:	4b70      	ldr	r3, [pc, #448]	; (8005fb8 <eepromKontrol+0x284>)
 8005df8:	7d1a      	ldrb	r2, [r3, #20]
 8005dfa:	4b84      	ldr	r3, [pc, #528]	; (800600c <eepromKontrol+0x2d8>)
 8005dfc:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005dfe:	4b6e      	ldr	r3, [pc, #440]	; (8005fb8 <eepromKontrol+0x284>)
 8005e00:	7d5a      	ldrb	r2, [r3, #21]
 8005e02:	4b83      	ldr	r3, [pc, #524]	; (8006010 <eepromKontrol+0x2dc>)
 8005e04:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005e06:	4b6c      	ldr	r3, [pc, #432]	; (8005fb8 <eepromKontrol+0x284>)
 8005e08:	7d9a      	ldrb	r2, [r3, #22]
 8005e0a:	4b82      	ldr	r3, [pc, #520]	; (8006014 <eepromKontrol+0x2e0>)
 8005e0c:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005e0e:	4b6a      	ldr	r3, [pc, #424]	; (8005fb8 <eepromKontrol+0x284>)
 8005e10:	7dda      	ldrb	r2, [r3, #23]
 8005e12:	4b81      	ldr	r3, [pc, #516]	; (8006018 <eepromKontrol+0x2e4>)
 8005e14:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005e16:	4b68      	ldr	r3, [pc, #416]	; (8005fb8 <eepromKontrol+0x284>)
 8005e18:	7e1a      	ldrb	r2, [r3, #24]
 8005e1a:	4b80      	ldr	r3, [pc, #512]	; (800601c <eepromKontrol+0x2e8>)
 8005e1c:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005e1e:	4b66      	ldr	r3, [pc, #408]	; (8005fb8 <eepromKontrol+0x284>)
 8005e20:	7e5a      	ldrb	r2, [r3, #25]
 8005e22:	4b7f      	ldr	r3, [pc, #508]	; (8006020 <eepromKontrol+0x2ec>)
 8005e24:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005e26:	4b64      	ldr	r3, [pc, #400]	; (8005fb8 <eepromKontrol+0x284>)
 8005e28:	7e9a      	ldrb	r2, [r3, #26]
 8005e2a:	4b7e      	ldr	r3, [pc, #504]	; (8006024 <eepromKontrol+0x2f0>)
 8005e2c:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005e2e:	4b62      	ldr	r3, [pc, #392]	; (8005fb8 <eepromKontrol+0x284>)
 8005e30:	7eda      	ldrb	r2, [r3, #27]
 8005e32:	4b7d      	ldr	r3, [pc, #500]	; (8006028 <eepromKontrol+0x2f4>)
 8005e34:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005e36:	4b60      	ldr	r3, [pc, #384]	; (8005fb8 <eepromKontrol+0x284>)
 8005e38:	7f1a      	ldrb	r2, [r3, #28]
 8005e3a:	4b7c      	ldr	r3, [pc, #496]	; (800602c <eepromKontrol+0x2f8>)
 8005e3c:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005e3e:	4b5e      	ldr	r3, [pc, #376]	; (8005fb8 <eepromKontrol+0x284>)
 8005e40:	7f5a      	ldrb	r2, [r3, #29]
 8005e42:	4b7b      	ldr	r3, [pc, #492]	; (8006030 <eepromKontrol+0x2fc>)
 8005e44:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005e46:	4b5c      	ldr	r3, [pc, #368]	; (8005fb8 <eepromKontrol+0x284>)
 8005e48:	7f9a      	ldrb	r2, [r3, #30]
 8005e4a:	4b7a      	ldr	r3, [pc, #488]	; (8006034 <eepromKontrol+0x300>)
 8005e4c:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005e4e:	4b5a      	ldr	r3, [pc, #360]	; (8005fb8 <eepromKontrol+0x284>)
 8005e50:	7fda      	ldrb	r2, [r3, #31]
 8005e52:	4b79      	ldr	r3, [pc, #484]	; (8006038 <eepromKontrol+0x304>)
 8005e54:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005e56:	4b58      	ldr	r3, [pc, #352]	; (8005fb8 <eepromKontrol+0x284>)
 8005e58:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005e5c:	4b77      	ldr	r3, [pc, #476]	; (800603c <eepromKontrol+0x308>)
 8005e5e:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005e60:	4b55      	ldr	r3, [pc, #340]	; (8005fb8 <eepromKontrol+0x284>)
 8005e62:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005e66:	4b76      	ldr	r3, [pc, #472]	; (8006040 <eepromKontrol+0x30c>)
 8005e68:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8005e6a:	4b53      	ldr	r3, [pc, #332]	; (8005fb8 <eepromKontrol+0x284>)
 8005e6c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005e70:	4b74      	ldr	r3, [pc, #464]	; (8006044 <eepromKontrol+0x310>)
 8005e72:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005e74:	4b50      	ldr	r3, [pc, #320]	; (8005fb8 <eepromKontrol+0x284>)
 8005e76:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005e7a:	4b73      	ldr	r3, [pc, #460]	; (8006048 <eepromKontrol+0x314>)
 8005e7c:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005e7e:	4b4e      	ldr	r3, [pc, #312]	; (8005fb8 <eepromKontrol+0x284>)
 8005e80:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005e84:	4b71      	ldr	r3, [pc, #452]	; (800604c <eepromKontrol+0x318>)
 8005e86:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005e88:	4b4b      	ldr	r3, [pc, #300]	; (8005fb8 <eepromKontrol+0x284>)
 8005e8a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005e8e:	4b70      	ldr	r3, [pc, #448]	; (8006050 <eepromKontrol+0x31c>)
 8005e90:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005e92:	4b49      	ldr	r3, [pc, #292]	; (8005fb8 <eepromKontrol+0x284>)
 8005e94:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005e98:	4b6e      	ldr	r3, [pc, #440]	; (8006054 <eepromKontrol+0x320>)
 8005e9a:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005e9c:	4b46      	ldr	r3, [pc, #280]	; (8005fb8 <eepromKontrol+0x284>)
 8005e9e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005ea2:	4b6d      	ldr	r3, [pc, #436]	; (8006058 <eepromKontrol+0x324>)
 8005ea4:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005ea6:	4b44      	ldr	r3, [pc, #272]	; (8005fb8 <eepromKontrol+0x284>)
 8005ea8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005eac:	4b6b      	ldr	r3, [pc, #428]	; (800605c <eepromKontrol+0x328>)
 8005eae:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005eb0:	4b41      	ldr	r3, [pc, #260]	; (8005fb8 <eepromKontrol+0x284>)
 8005eb2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005eb6:	4b6a      	ldr	r3, [pc, #424]	; (8006060 <eepromKontrol+0x32c>)
 8005eb8:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005eba:	4b3f      	ldr	r3, [pc, #252]	; (8005fb8 <eepromKontrol+0x284>)
 8005ebc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005ec0:	4b68      	ldr	r3, [pc, #416]	; (8006064 <eepromKontrol+0x330>)
 8005ec2:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005ec4:	4b3c      	ldr	r3, [pc, #240]	; (8005fb8 <eepromKontrol+0x284>)
 8005ec6:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005eca:	4b67      	ldr	r3, [pc, #412]	; (8006068 <eepromKontrol+0x334>)
 8005ecc:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005ece:	4b3a      	ldr	r3, [pc, #232]	; (8005fb8 <eepromKontrol+0x284>)
 8005ed0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005ed4:	4b65      	ldr	r3, [pc, #404]	; (800606c <eepromKontrol+0x338>)
 8005ed6:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005ed8:	4b37      	ldr	r3, [pc, #220]	; (8005fb8 <eepromKontrol+0x284>)
 8005eda:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005ede:	4b64      	ldr	r3, [pc, #400]	; (8006070 <eepromKontrol+0x33c>)
 8005ee0:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005ee2:	4b35      	ldr	r3, [pc, #212]	; (8005fb8 <eepromKontrol+0x284>)
 8005ee4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005ee8:	4b62      	ldr	r3, [pc, #392]	; (8006074 <eepromKontrol+0x340>)
 8005eea:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005eec:	4b32      	ldr	r3, [pc, #200]	; (8005fb8 <eepromKontrol+0x284>)
 8005eee:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005ef2:	4b61      	ldr	r3, [pc, #388]	; (8006078 <eepromKontrol+0x344>)
 8005ef4:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005ef6:	4b52      	ldr	r3, [pc, #328]	; (8006040 <eepromKontrol+0x30c>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fe fff4 	bl	8004ee8 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005f00:	4b4e      	ldr	r3, [pc, #312]	; (800603c <eepromKontrol+0x308>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b09      	cmp	r3, #9
 8005f06:	d902      	bls.n	8005f0e <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005f08:	4b4c      	ldr	r3, [pc, #304]	; (800603c <eepromKontrol+0x308>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005f0e:	4b4a      	ldr	r3, [pc, #296]	; (8006038 <eepromKontrol+0x304>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b09      	cmp	r3, #9
 8005f14:	d902      	bls.n	8005f1c <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005f16:	4b48      	ldr	r3, [pc, #288]	; (8006038 <eepromKontrol+0x304>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005f1c:	4b45      	ldr	r3, [pc, #276]	; (8006034 <eepromKontrol+0x300>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b09      	cmp	r3, #9
 8005f22:	d902      	bls.n	8005f2a <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005f24:	4b43      	ldr	r3, [pc, #268]	; (8006034 <eepromKontrol+0x300>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005f2a:	4b41      	ldr	r3, [pc, #260]	; (8006030 <eepromKontrol+0x2fc>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b09      	cmp	r3, #9
 8005f30:	d902      	bls.n	8005f38 <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005f32:	4b3f      	ldr	r3, [pc, #252]	; (8006030 <eepromKontrol+0x2fc>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005f38:	4b3c      	ldr	r3, [pc, #240]	; (800602c <eepromKontrol+0x2f8>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b09      	cmp	r3, #9
 8005f3e:	d902      	bls.n	8005f46 <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005f40:	4b3a      	ldr	r3, [pc, #232]	; (800602c <eepromKontrol+0x2f8>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005f46:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <eepromKontrol+0x290>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d902      	bls.n	8005f54 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005f4e:	4b1d      	ldr	r3, [pc, #116]	; (8005fc4 <eepromKontrol+0x290>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005f54:	4b1c      	ldr	r3, [pc, #112]	; (8005fc8 <eepromKontrol+0x294>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d902      	bls.n	8005f62 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005f5c:	4b1a      	ldr	r3, [pc, #104]	; (8005fc8 <eepromKontrol+0x294>)
 8005f5e:	2201      	movs	r2, #1
 8005f60:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005f62:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <eepromKontrol+0x298>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d902      	bls.n	8005f70 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005f6a:	4b18      	ldr	r3, [pc, #96]	; (8005fcc <eepromKontrol+0x298>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005f70:	4b17      	ldr	r3, [pc, #92]	; (8005fd0 <eepromKontrol+0x29c>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d902      	bls.n	8005f7e <eepromKontrol+0x24a>
	    altLimit=1;
 8005f78:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <eepromKontrol+0x29c>)
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005f7e:	4b15      	ldr	r3, [pc, #84]	; (8005fd4 <eepromKontrol+0x2a0>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d902      	bls.n	8005f8c <eepromKontrol+0x258>
	    basincSalteri=1;
 8005f86:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <eepromKontrol+0x2a0>)
 8005f88:	2201      	movs	r2, #1
 8005f8a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005f8c:	4b12      	ldr	r3, [pc, #72]	; (8005fd8 <eepromKontrol+0x2a4>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d902      	bls.n	8005f9a <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005f94:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <eepromKontrol+0x2a4>)
 8005f96:	2203      	movs	r2, #3
 8005f98:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005f9a:	4b2d      	ldr	r3, [pc, #180]	; (8006050 <eepromKontrol+0x31c>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d902      	bls.n	8005fa8 <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005fa2:	4b2b      	ldr	r3, [pc, #172]	; (8006050 <eepromKontrol+0x31c>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <eepromKontrol+0x2a8>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d965      	bls.n	800607c <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <eepromKontrol+0x2a8>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	e061      	b.n	800607c <eepromKontrol+0x348>
 8005fb8:	20000c38 	.word	0x20000c38
 8005fbc:	20000b54 	.word	0x20000b54
 8005fc0:	20000ca6 	.word	0x20000ca6
 8005fc4:	20000d31 	.word	0x20000d31
 8005fc8:	20000d34 	.word	0x20000d34
 8005fcc:	20000d35 	.word	0x20000d35
 8005fd0:	20000d36 	.word	0x20000d36
 8005fd4:	20000d37 	.word	0x20000d37
 8005fd8:	20000d38 	.word	0x20000d38
 8005fdc:	20000d39 	.word	0x20000d39
 8005fe0:	20000d49 	.word	0x20000d49
 8005fe4:	20000d3a 	.word	0x20000d3a
 8005fe8:	20000d4a 	.word	0x20000d4a
 8005fec:	20000d3b 	.word	0x20000d3b
 8005ff0:	20000d4b 	.word	0x20000d4b
 8005ff4:	20000d3e 	.word	0x20000d3e
 8005ff8:	20000d3f 	.word	0x20000d3f
 8005ffc:	20000d40 	.word	0x20000d40
 8006000:	20000d41 	.word	0x20000d41
 8006004:	20000d42 	.word	0x20000d42
 8006008:	20000d43 	.word	0x20000d43
 800600c:	20000d44 	.word	0x20000d44
 8006010:	20000d45 	.word	0x20000d45
 8006014:	20000d46 	.word	0x20000d46
 8006018:	20000d47 	.word	0x20000d47
 800601c:	20000d48 	.word	0x20000d48
 8006020:	20000d4c 	.word	0x20000d4c
 8006024:	20000d4e 	.word	0x20000d4e
 8006028:	20000d2c 	.word	0x20000d2c
 800602c:	20000d2d 	.word	0x20000d2d
 8006030:	20000d2e 	.word	0x20000d2e
 8006034:	200009b4 	.word	0x200009b4
 8006038:	200009b5 	.word	0x200009b5
 800603c:	20000d2f 	.word	0x20000d2f
 8006040:	20000d51 	.word	0x20000d51
 8006044:	20000d4f 	.word	0x20000d4f
 8006048:	20000d3d 	.word	0x20000d3d
 800604c:	20000d50 	.word	0x20000d50
 8006050:	20000d3c 	.word	0x20000d3c
 8006054:	20000d52 	.word	0x20000d52
 8006058:	20000d53 	.word	0x20000d53
 800605c:	20000d54 	.word	0x20000d54
 8006060:	20000d55 	.word	0x20000d55
 8006064:	20000d56 	.word	0x20000d56
 8006068:	20000d57 	.word	0x20000d57
 800606c:	20000d58 	.word	0x20000d58
 8006070:	20000d59 	.word	0x20000d59
 8006074:	20000d5a 	.word	0x20000d5a
 8006078:	20000d5b 	.word	0x20000d5b
	}

	if(kapi1AcSure>5) {
 800607c:	4b59      	ldr	r3, [pc, #356]	; (80061e4 <eepromKontrol+0x4b0>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b05      	cmp	r3, #5
 8006082:	d902      	bls.n	800608a <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8006084:	4b57      	ldr	r3, [pc, #348]	; (80061e4 <eepromKontrol+0x4b0>)
 8006086:	2205      	movs	r2, #5
 8006088:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800608a:	4b57      	ldr	r3, [pc, #348]	; (80061e8 <eepromKontrol+0x4b4>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d902      	bls.n	8006098 <eepromKontrol+0x364>
	    kapi2Tip=1;
 8006092:	4b55      	ldr	r3, [pc, #340]	; (80061e8 <eepromKontrol+0x4b4>)
 8006094:	2201      	movs	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8006098:	4b54      	ldr	r3, [pc, #336]	; (80061ec <eepromKontrol+0x4b8>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b05      	cmp	r3, #5
 800609e:	d902      	bls.n	80060a6 <eepromKontrol+0x372>
	    kapi2AcSure=5;
 80060a0:	4b52      	ldr	r3, [pc, #328]	; (80061ec <eepromKontrol+0x4b8>)
 80060a2:	2205      	movs	r2, #5
 80060a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80060a6:	4b52      	ldr	r3, [pc, #328]	; (80061f0 <eepromKontrol+0x4bc>)
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d902      	bls.n	80060b4 <eepromKontrol+0x380>
	    kapitablaTip=1;
 80060ae:	4b50      	ldr	r3, [pc, #320]	; (80061f0 <eepromKontrol+0x4bc>)
 80060b0:	2201      	movs	r2, #1
 80060b2:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80060b4:	4b4f      	ldr	r3, [pc, #316]	; (80061f4 <eepromKontrol+0x4c0>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d902      	bls.n	80060c2 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 80060bc:	4b4d      	ldr	r3, [pc, #308]	; (80061f4 <eepromKontrol+0x4c0>)
 80060be:	2202      	movs	r2, #2
 80060c0:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80060c2:	4b4d      	ldr	r3, [pc, #308]	; (80061f8 <eepromKontrol+0x4c4>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b05      	cmp	r3, #5
 80060c8:	d902      	bls.n	80060d0 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 80060ca:	4b4b      	ldr	r3, [pc, #300]	; (80061f8 <eepromKontrol+0x4c4>)
 80060cc:	2205      	movs	r2, #5
 80060ce:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80060d0:	4b4a      	ldr	r3, [pc, #296]	; (80061fc <eepromKontrol+0x4c8>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d902      	bls.n	80060de <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 80060d8:	4b48      	ldr	r3, [pc, #288]	; (80061fc <eepromKontrol+0x4c8>)
 80060da:	2200      	movs	r2, #0
 80060dc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80060de:	4b48      	ldr	r3, [pc, #288]	; (8006200 <eepromKontrol+0x4cc>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d902      	bls.n	80060ec <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 80060e6:	4b46      	ldr	r3, [pc, #280]	; (8006200 <eepromKontrol+0x4cc>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80060ec:	4b45      	ldr	r3, [pc, #276]	; (8006204 <eepromKontrol+0x4d0>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d902      	bls.n	80060fa <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 80060f4:	4b43      	ldr	r3, [pc, #268]	; (8006204 <eepromKontrol+0x4d0>)
 80060f6:	2201      	movs	r2, #1
 80060f8:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80060fa:	4b43      	ldr	r3, [pc, #268]	; (8006208 <eepromKontrol+0x4d4>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d902      	bls.n	8006108 <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8006102:	4b41      	ldr	r3, [pc, #260]	; (8006208 <eepromKontrol+0x4d4>)
 8006104:	2201      	movs	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8006108:	4b40      	ldr	r3, [pc, #256]	; (800620c <eepromKontrol+0x4d8>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d902      	bls.n	8006116 <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8006110:	4b3e      	ldr	r3, [pc, #248]	; (800620c <eepromKontrol+0x4d8>)
 8006112:	2200      	movs	r2, #0
 8006114:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8006116:	4b3e      	ldr	r3, [pc, #248]	; (8006210 <eepromKontrol+0x4dc>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d902      	bls.n	8006124 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 800611e:	4b3c      	ldr	r3, [pc, #240]	; (8006210 <eepromKontrol+0x4dc>)
 8006120:	2200      	movs	r2, #0
 8006122:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8006124:	4b3b      	ldr	r3, [pc, #236]	; (8006214 <eepromKontrol+0x4e0>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b05      	cmp	r3, #5
 800612a:	d902      	bls.n	8006132 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 800612c:	4b39      	ldr	r3, [pc, #228]	; (8006214 <eepromKontrol+0x4e0>)
 800612e:	2200      	movs	r2, #0
 8006130:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8006132:	4b39      	ldr	r3, [pc, #228]	; (8006218 <eepromKontrol+0x4e4>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b05      	cmp	r3, #5
 8006138:	d902      	bls.n	8006140 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 800613a:	4b37      	ldr	r3, [pc, #220]	; (8006218 <eepromKontrol+0x4e4>)
 800613c:	2200      	movs	r2, #0
 800613e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8006140:	4b36      	ldr	r3, [pc, #216]	; (800621c <eepromKontrol+0x4e8>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b05      	cmp	r3, #5
 8006146:	d902      	bls.n	800614e <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8006148:	4b34      	ldr	r3, [pc, #208]	; (800621c <eepromKontrol+0x4e8>)
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 800614e:	4b34      	ldr	r3, [pc, #208]	; (8006220 <eepromKontrol+0x4ec>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b05      	cmp	r3, #5
 8006154:	d902      	bls.n	800615c <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8006156:	4b32      	ldr	r3, [pc, #200]	; (8006220 <eepromKontrol+0x4ec>)
 8006158:	2200      	movs	r2, #0
 800615a:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 800615c:	4b31      	ldr	r3, [pc, #196]	; (8006224 <eepromKontrol+0x4f0>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2bb4      	cmp	r3, #180	; 0xb4
 8006162:	d902      	bls.n	800616a <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8006164:	4b2f      	ldr	r3, [pc, #188]	; (8006224 <eepromKontrol+0x4f0>)
 8006166:	223c      	movs	r2, #60	; 0x3c
 8006168:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800616a:	4b2f      	ldr	r3, [pc, #188]	; (8006228 <eepromKontrol+0x4f4>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d902      	bls.n	8006178 <eepromKontrol+0x444>
	    buzzer=0;
 8006172:	4b2d      	ldr	r3, [pc, #180]	; (8006228 <eepromKontrol+0x4f4>)
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8006178:	4b2c      	ldr	r3, [pc, #176]	; (800622c <eepromKontrol+0x4f8>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d902      	bls.n	8006186 <eepromKontrol+0x452>
	    demoMode=0;
 8006180:	4b2a      	ldr	r3, [pc, #168]	; (800622c <eepromKontrol+0x4f8>)
 8006182:	2200      	movs	r2, #0
 8006184:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8006186:	4b2a      	ldr	r3, [pc, #168]	; (8006230 <eepromKontrol+0x4fc>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d902      	bls.n	8006194 <eepromKontrol+0x460>
	    calismaSayModu=0;
 800618e:	4b28      	ldr	r3, [pc, #160]	; (8006230 <eepromKontrol+0x4fc>)
 8006190:	2200      	movs	r2, #0
 8006192:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8006194:	4b27      	ldr	r3, [pc, #156]	; (8006234 <eepromKontrol+0x500>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d902      	bls.n	80061a2 <eepromKontrol+0x46e>
	    dilSecim=0;
 800619c:	4b25      	ldr	r3, [pc, #148]	; (8006234 <eepromKontrol+0x500>)
 800619e:	2200      	movs	r2, #0
 80061a0:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80061a2:	4b25      	ldr	r3, [pc, #148]	; (8006238 <eepromKontrol+0x504>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d902      	bls.n	80061b0 <eepromKontrol+0x47c>
		iotMode=0;
 80061aa:	4b23      	ldr	r3, [pc, #140]	; (8006238 <eepromKontrol+0x504>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 80061b0:	4b22      	ldr	r3, [pc, #136]	; (800623c <eepromKontrol+0x508>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	4b22      	ldr	r3, [pc, #136]	; (8006240 <eepromKontrol+0x50c>)
 80061b8:	441a      	add	r2, r3
 80061ba:	4b22      	ldr	r3, [pc, #136]	; (8006244 <eepromKontrol+0x510>)
 80061bc:	6810      	ldr	r0, [r2, #0]
 80061be:	6851      	ldr	r1, [r2, #4]
 80061c0:	6892      	ldr	r2, [r2, #8]
 80061c2:	c307      	stmia	r3!, {r0, r1, r2}
	HAL_Delay(250);
 80061c4:	20fa      	movs	r0, #250	; 0xfa
 80061c6:	f003 f8bd 	bl	8009344 <HAL_Delay>
	readValFromEEPROM(1);
 80061ca:	2001      	movs	r0, #1
 80061cc:	f7fa fd1e 	bl	8000c0c <readValFromEEPROM>
	HAL_Delay(250);
 80061d0:	20fa      	movs	r0, #250	; 0xfa
 80061d2:	f003 f8b7 	bl	8009344 <HAL_Delay>
	readValFromEEPROM(2);
 80061d6:	2002      	movs	r0, #2
 80061d8:	f7fa fd18 	bl	8000c0c <readValFromEEPROM>
}
 80061dc:	bf00      	nop
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20000d49 	.word	0x20000d49
 80061e8:	20000d3a 	.word	0x20000d3a
 80061ec:	20000d4a 	.word	0x20000d4a
 80061f0:	20000d3b 	.word	0x20000d3b
 80061f4:	20000d3d 	.word	0x20000d3d
 80061f8:	20000d4b 	.word	0x20000d4b
 80061fc:	20000d3e 	.word	0x20000d3e
 8006200:	20000d3f 	.word	0x20000d3f
 8006204:	20000d40 	.word	0x20000d40
 8006208:	20000d41 	.word	0x20000d41
 800620c:	20000d42 	.word	0x20000d42
 8006210:	20000d43 	.word	0x20000d43
 8006214:	20000d44 	.word	0x20000d44
 8006218:	20000d45 	.word	0x20000d45
 800621c:	20000d46 	.word	0x20000d46
 8006220:	20000d47 	.word	0x20000d47
 8006224:	20000d48 	.word	0x20000d48
 8006228:	20000d4c 	.word	0x20000d4c
 800622c:	20000d4e 	.word	0x20000d4e
 8006230:	20000d50 	.word	0x20000d50
 8006234:	20000d51 	.word	0x20000d51
 8006238:	20000d4f 	.word	0x20000d4f
 800623c:	200009b1 	.word	0x200009b1
 8006240:	20000c38 	.word	0x20000c38
 8006244:	20000cd0 	.word	0x20000cd0

08006248 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8006248:	b590      	push	{r4, r7, lr}
 800624a:	b089      	sub	sp, #36	; 0x24
 800624c:	af04      	add	r7, sp, #16
 800624e:	4603      	mov	r3, r0
 8006250:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8006252:	4b26      	ldr	r3, [pc, #152]	; (80062ec <hata2EEPROM+0xa4>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	1e5a      	subs	r2, r3, #1
 8006258:	4b25      	ldr	r3, [pc, #148]	; (80062f0 <hata2EEPROM+0xa8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4413      	add	r3, r2
 800625e:	4a25      	ldr	r2, [pc, #148]	; (80062f4 <hata2EEPROM+0xac>)
 8006260:	5cd3      	ldrb	r3, [r2, r3]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8006266:	f000 f849 	bl	80062fc <eepromDataFillWithEmpty>
		goto veriEkleme;
 800626a:	e000      	b.n	800626e <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 800626c:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e012      	b.n	800629a <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8006274:	4b1e      	ldr	r3, [pc, #120]	; (80062f0 <hata2EEPROM+0xa8>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <hata2EEPROM+0xac>)
 800627e:	5cd3      	ldrb	r3, [r2, r3]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d107      	bne.n	8006294 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8006284:	4b1a      	ldr	r3, [pc, #104]	; (80062f0 <hata2EEPROM+0xa8>)
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4413      	add	r3, r2
 800628c:	4919      	ldr	r1, [pc, #100]	; (80062f4 <hata2EEPROM+0xac>)
 800628e:	79fa      	ldrb	r2, [r7, #7]
 8006290:	54ca      	strb	r2, [r1, r3]
					break;
 8006292:	e007      	b.n	80062a4 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	4b14      	ldr	r3, [pc, #80]	; (80062ec <hata2EEPROM+0xa4>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	dbe7      	blt.n	8006274 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80062a4:	4b12      	ldr	r3, [pc, #72]	; (80062f0 <hata2EEPROM+0xa8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	b299      	uxth	r1, r3
 80062aa:	4b10      	ldr	r3, [pc, #64]	; (80062ec <hata2EEPROM+0xa4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	b298      	uxth	r0, r3
 80062b0:	4b0f      	ldr	r3, [pc, #60]	; (80062f0 <hata2EEPROM+0xa8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a0f      	ldr	r2, [pc, #60]	; (80062f4 <hata2EEPROM+0xac>)
 80062b6:	4413      	add	r3, r2
 80062b8:	4a0c      	ldr	r2, [pc, #48]	; (80062ec <hata2EEPROM+0xa4>)
 80062ba:	6812      	ldr	r2, [r2, #0]
 80062bc:	b292      	uxth	r2, r2
 80062be:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80062c2:	9402      	str	r4, [sp, #8]
 80062c4:	9201      	str	r2, [sp, #4]
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	4603      	mov	r3, r0
 80062ca:	460a      	mov	r2, r1
 80062cc:	21a0      	movs	r1, #160	; 0xa0
 80062ce:	480a      	ldr	r0, [pc, #40]	; (80062f8 <hata2EEPROM+0xb0>)
 80062d0:	f004 f8c2 	bl	800a458 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80062d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80062d8:	f003 f834 	bl	8009344 <HAL_Delay>
	eepromKontrol(1);
 80062dc:	2001      	movs	r0, #1
 80062de:	f7ff fd29 	bl	8005d34 <eepromKontrol>
}
 80062e2:	bf00      	nop
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd90      	pop	{r4, r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000938 	.word	0x20000938
 80062f0:	2000093c 	.word	0x2000093c
 80062f4:	20000c38 	.word	0x20000c38
 80062f8:	20000b54 	.word	0x20000b54

080062fc <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8006302:	2300      	movs	r3, #0
 8006304:	607b      	str	r3, [r7, #4]
 8006306:	e009      	b.n	800631c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8006308:	4a0a      	ldr	r2, [pc, #40]	; (8006334 <eepromDataFillWithEmpty+0x38>)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006310:	4a09      	ldr	r2, [pc, #36]	; (8006338 <eepromDataFillWithEmpty+0x3c>)
 8006312:	2100      	movs	r1, #0
 8006314:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3301      	adds	r3, #1
 800631a:	607b      	str	r3, [r7, #4]
 800631c:	4b07      	ldr	r3, [pc, #28]	; (800633c <eepromDataFillWithEmpty+0x40>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	429a      	cmp	r2, r3
 8006324:	dbf0      	blt.n	8006308 <eepromDataFillWithEmpty+0xc>
	}
}
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	20000910 	.word	0x20000910
 8006338:	20000c38 	.word	0x20000c38
 800633c:	20000938 	.word	0x20000938

08006340 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
	timer1=millis;
 8006344:	4b47      	ldr	r3, [pc, #284]	; (8006464 <bekle+0x124>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a47      	ldr	r2, [pc, #284]	; (8006468 <bekle+0x128>)
 800634a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800634c:	e002      	b.n	8006354 <bekle+0x14>
    	butonKontrol = 1;
 800634e:	4b47      	ldr	r3, [pc, #284]	; (800646c <bekle+0x12c>)
 8006350:	2201      	movs	r2, #1
 8006352:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006354:	2101      	movs	r1, #1
 8006356:	4846      	ldr	r0, [pc, #280]	; (8006470 <bekle+0x130>)
 8006358:	f003 fdc4 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800635c:	4603      	mov	r3, r0
 800635e:	2b01      	cmp	r3, #1
 8006360:	d109      	bne.n	8006376 <bekle+0x36>
 8006362:	4b40      	ldr	r3, [pc, #256]	; (8006464 <bekle+0x124>)
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4b40      	ldr	r3, [pc, #256]	; (8006468 <bekle+0x128>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d0ef      	beq.n	800634e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800636e:	e002      	b.n	8006376 <bekle+0x36>
    	butonKontrol = 1;
 8006370:	4b3e      	ldr	r3, [pc, #248]	; (800646c <bekle+0x12c>)
 8006372:	2201      	movs	r2, #1
 8006374:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006376:	2108      	movs	r1, #8
 8006378:	483e      	ldr	r0, [pc, #248]	; (8006474 <bekle+0x134>)
 800637a:	f003 fdb3 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800637e:	4603      	mov	r3, r0
 8006380:	2b01      	cmp	r3, #1
 8006382:	d109      	bne.n	8006398 <bekle+0x58>
 8006384:	4b37      	ldr	r3, [pc, #220]	; (8006464 <bekle+0x124>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	4b37      	ldr	r3, [pc, #220]	; (8006468 <bekle+0x128>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	429a      	cmp	r2, r3
 800638e:	d0ef      	beq.n	8006370 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006390:	e002      	b.n	8006398 <bekle+0x58>
    	butonKontrol = 1;
 8006392:	4b36      	ldr	r3, [pc, #216]	; (800646c <bekle+0x12c>)
 8006394:	2201      	movs	r2, #1
 8006396:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006398:	2102      	movs	r1, #2
 800639a:	4835      	ldr	r0, [pc, #212]	; (8006470 <bekle+0x130>)
 800639c:	f003 fda2 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d109      	bne.n	80063ba <bekle+0x7a>
 80063a6:	4b2f      	ldr	r3, [pc, #188]	; (8006464 <bekle+0x124>)
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4b2f      	ldr	r3, [pc, #188]	; (8006468 <bekle+0x128>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d0ef      	beq.n	8006392 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80063b2:	e002      	b.n	80063ba <bekle+0x7a>
    	butonKontrol = 1;
 80063b4:	4b2d      	ldr	r3, [pc, #180]	; (800646c <bekle+0x12c>)
 80063b6:	2201      	movs	r2, #1
 80063b8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80063ba:	2104      	movs	r1, #4
 80063bc:	482c      	ldr	r0, [pc, #176]	; (8006470 <bekle+0x130>)
 80063be:	f003 fd91 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d109      	bne.n	80063dc <bekle+0x9c>
 80063c8:	4b26      	ldr	r3, [pc, #152]	; (8006464 <bekle+0x124>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b26      	ldr	r3, [pc, #152]	; (8006468 <bekle+0x128>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d0ef      	beq.n	80063b4 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80063d4:	e002      	b.n	80063dc <bekle+0x9c>
    	butonKontrol = 1;
 80063d6:	4b25      	ldr	r3, [pc, #148]	; (800646c <bekle+0x12c>)
 80063d8:	2201      	movs	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80063dc:	2108      	movs	r1, #8
 80063de:	4824      	ldr	r0, [pc, #144]	; (8006470 <bekle+0x130>)
 80063e0:	f003 fd80 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d109      	bne.n	80063fe <bekle+0xbe>
 80063ea:	4b1e      	ldr	r3, [pc, #120]	; (8006464 <bekle+0x124>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	4b1e      	ldr	r3, [pc, #120]	; (8006468 <bekle+0x128>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d0ef      	beq.n	80063d6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80063f6:	e002      	b.n	80063fe <bekle+0xbe>
    	butonKontrol = 1;
 80063f8:	4b1c      	ldr	r3, [pc, #112]	; (800646c <bekle+0x12c>)
 80063fa:	2201      	movs	r2, #1
 80063fc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80063fe:	2180      	movs	r1, #128	; 0x80
 8006400:	481c      	ldr	r0, [pc, #112]	; (8006474 <bekle+0x134>)
 8006402:	f003 fd6f 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d109      	bne.n	8006420 <bekle+0xe0>
 800640c:	4b15      	ldr	r3, [pc, #84]	; (8006464 <bekle+0x124>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4b15      	ldr	r3, [pc, #84]	; (8006468 <bekle+0x128>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	429a      	cmp	r2, r3
 8006416:	d0ef      	beq.n	80063f8 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006418:	e002      	b.n	8006420 <bekle+0xe0>
    	butonKontrol = 1;
 800641a:	4b14      	ldr	r3, [pc, #80]	; (800646c <bekle+0x12c>)
 800641c:	2201      	movs	r2, #1
 800641e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006424:	4813      	ldr	r0, [pc, #76]	; (8006474 <bekle+0x134>)
 8006426:	f003 fd5d 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d109      	bne.n	8006444 <bekle+0x104>
 8006430:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <bekle+0x124>)
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <bekle+0x128>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d0ee      	beq.n	800641a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800643c:	e002      	b.n	8006444 <bekle+0x104>
    	butonKontrol = 1;
 800643e:	4b0b      	ldr	r3, [pc, #44]	; (800646c <bekle+0x12c>)
 8006440:	2201      	movs	r2, #1
 8006442:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006448:	480a      	ldr	r0, [pc, #40]	; (8006474 <bekle+0x134>)
 800644a:	f003 fd4b 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <bekle+0x120>
 8006454:	4b03      	ldr	r3, [pc, #12]	; (8006464 <bekle+0x124>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	4b03      	ldr	r3, [pc, #12]	; (8006468 <bekle+0x128>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d0ee      	beq.n	800643e <bekle+0xfe>
    }

}
 8006460:	bf00      	nop
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20000cb0 	.word	0x20000cb0
 8006468:	20000cb8 	.word	0x20000cb8
 800646c:	20000d5f 	.word	0x20000d5f
 8006470:	40010800 	.word	0x40010800
 8006474:	40011000 	.word	0x40011000

08006478 <i2cTest>:

void i2cTest() {
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 800647e:	463b      	mov	r3, r7
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	609a      	str	r2, [r3, #8]
 8006488:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 800648a:	4b50      	ldr	r3, [pc, #320]	; (80065cc <i2cTest+0x154>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	4b4e      	ldr	r3, [pc, #312]	; (80065cc <i2cTest+0x154>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0201 	bic.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 800649a:	484c      	ldr	r0, [pc, #304]	; (80065cc <i2cTest+0x154>)
 800649c:	f003 feae 	bl	800a1fc <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80064a0:	23c0      	movs	r3, #192	; 0xc0
 80064a2:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80064a4:	2311      	movs	r3, #17
 80064a6:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80064a8:	2301      	movs	r3, #1
 80064aa:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80064ac:	2303      	movs	r3, #3
 80064ae:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80064b0:	463b      	mov	r3, r7
 80064b2:	4619      	mov	r1, r3
 80064b4:	4846      	ldr	r0, [pc, #280]	; (80065d0 <i2cTest+0x158>)
 80064b6:	f003 fab5 	bl	8009a24 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80064ba:	2201      	movs	r2, #1
 80064bc:	2140      	movs	r1, #64	; 0x40
 80064be:	4844      	ldr	r0, [pc, #272]	; (80065d0 <i2cTest+0x158>)
 80064c0:	f003 fd27 	bl	8009f12 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80064c4:	2201      	movs	r2, #1
 80064c6:	2180      	movs	r1, #128	; 0x80
 80064c8:	4841      	ldr	r0, [pc, #260]	; (80065d0 <i2cTest+0x158>)
 80064ca:	f003 fd22 	bl	8009f12 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80064ce:	200a      	movs	r0, #10
 80064d0:	f002 ff38 	bl	8009344 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80064d4:	bf00      	nop
 80064d6:	2140      	movs	r1, #64	; 0x40
 80064d8:	483d      	ldr	r0, [pc, #244]	; (80065d0 <i2cTest+0x158>)
 80064da:	f003 fd03 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d006      	beq.n	80064f2 <i2cTest+0x7a>
 80064e4:	2180      	movs	r1, #128	; 0x80
 80064e6:	483a      	ldr	r0, [pc, #232]	; (80065d0 <i2cTest+0x158>)
 80064e8:	f003 fcfc 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d1f1      	bne.n	80064d6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80064f2:	2200      	movs	r2, #0
 80064f4:	2180      	movs	r1, #128	; 0x80
 80064f6:	4836      	ldr	r0, [pc, #216]	; (80065d0 <i2cTest+0x158>)
 80064f8:	f003 fd0b 	bl	8009f12 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 80064fc:	200a      	movs	r0, #10
 80064fe:	f002 ff21 	bl	8009344 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8006502:	bf00      	nop
 8006504:	2180      	movs	r1, #128	; 0x80
 8006506:	4832      	ldr	r0, [pc, #200]	; (80065d0 <i2cTest+0x158>)
 8006508:	f003 fcec 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800650c:	4603      	mov	r3, r0
 800650e:	2b01      	cmp	r3, #1
 8006510:	d0f8      	beq.n	8006504 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8006512:	2200      	movs	r2, #0
 8006514:	2140      	movs	r1, #64	; 0x40
 8006516:	482e      	ldr	r0, [pc, #184]	; (80065d0 <i2cTest+0x158>)
 8006518:	f003 fcfb 	bl	8009f12 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800651c:	200a      	movs	r0, #10
 800651e:	f002 ff11 	bl	8009344 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8006522:	bf00      	nop
 8006524:	2140      	movs	r1, #64	; 0x40
 8006526:	482a      	ldr	r0, [pc, #168]	; (80065d0 <i2cTest+0x158>)
 8006528:	f003 fcdc 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800652c:	4603      	mov	r3, r0
 800652e:	2b01      	cmp	r3, #1
 8006530:	d0f8      	beq.n	8006524 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8006532:	2201      	movs	r2, #1
 8006534:	2140      	movs	r1, #64	; 0x40
 8006536:	4826      	ldr	r0, [pc, #152]	; (80065d0 <i2cTest+0x158>)
 8006538:	f003 fceb 	bl	8009f12 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800653c:	200a      	movs	r0, #10
 800653e:	f002 ff01 	bl	8009344 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8006542:	bf00      	nop
 8006544:	2140      	movs	r1, #64	; 0x40
 8006546:	4822      	ldr	r0, [pc, #136]	; (80065d0 <i2cTest+0x158>)
 8006548:	f003 fccc 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800654c:	4603      	mov	r3, r0
 800654e:	2b01      	cmp	r3, #1
 8006550:	d1f8      	bne.n	8006544 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006552:	2201      	movs	r2, #1
 8006554:	2180      	movs	r1, #128	; 0x80
 8006556:	481e      	ldr	r0, [pc, #120]	; (80065d0 <i2cTest+0x158>)
 8006558:	f003 fcdb 	bl	8009f12 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800655c:	200a      	movs	r0, #10
 800655e:	f002 fef1 	bl	8009344 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006562:	bf00      	nop
 8006564:	2180      	movs	r1, #128	; 0x80
 8006566:	481a      	ldr	r0, [pc, #104]	; (80065d0 <i2cTest+0x158>)
 8006568:	f003 fcbc 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800656c:	4603      	mov	r3, r0
 800656e:	2b01      	cmp	r3, #1
 8006570:	d1f8      	bne.n	8006564 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006572:	23c0      	movs	r3, #192	; 0xc0
 8006574:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8006576:	2312      	movs	r3, #18
 8006578:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800657a:	2301      	movs	r3, #1
 800657c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 800657e:	2303      	movs	r3, #3
 8006580:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8006582:	463b      	mov	r3, r7
 8006584:	4619      	mov	r1, r3
 8006586:	4812      	ldr	r0, [pc, #72]	; (80065d0 <i2cTest+0x158>)
 8006588:	f003 fa4c 	bl	8009a24 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 800658c:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <i2cTest+0x154>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b0e      	ldr	r3, [pc, #56]	; (80065cc <i2cTest+0x154>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800659a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 800659c:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <i2cTest+0x154>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <i2cTest+0x154>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065aa:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80065ac:	4b07      	ldr	r3, [pc, #28]	; (80065cc <i2cTest+0x154>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	4b06      	ldr	r3, [pc, #24]	; (80065cc <i2cTest+0x154>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0201 	orr.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80065bc:	4803      	ldr	r0, [pc, #12]	; (80065cc <i2cTest+0x154>)
 80065be:	f003 fcd9 	bl	8009f74 <HAL_I2C_Init>
}
 80065c2:	bf00      	nop
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000b54 	.word	0x20000b54
 80065d0:	40010c00 	.word	0x40010c00

080065d4 <checkLCDBacklight>:

void checkLCDBacklight() {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 80065d8:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <checkLCDBacklight+0x34>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <checkLCDBacklight+0x38>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	1ad2      	subs	r2, r2, r3
 80065e2:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <checkLCDBacklight+0x3c>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	4619      	mov	r1, r3
 80065e8:	460b      	mov	r3, r1
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	440b      	add	r3, r1
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d303      	bcc.n	80065fc <checkLCDBacklight+0x28>
		lcd_backlight(0);
 80065f4:	2000      	movs	r0, #0
 80065f6:	f7fa f92b 	bl	8000850 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80065fa:	e002      	b.n	8006602 <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 80065fc:	2001      	movs	r0, #1
 80065fe:	f7fa f927 	bl	8000850 <lcd_backlight>
}
 8006602:	bf00      	nop
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20000cb0 	.word	0x20000cb0
 800660c:	20000ccc 	.word	0x20000ccc
 8006610:	20000940 	.word	0x20000940

08006614 <checkBasincSalteri>:

void checkBasincSalteri() {
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8006618:	4b13      	ldr	r3, [pc, #76]	; (8006668 <checkBasincSalteri+0x54>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d102      	bne.n	8006626 <checkBasincSalteri+0x12>
		basincVar=1;
 8006620:	4b12      	ldr	r3, [pc, #72]	; (800666c <checkBasincSalteri+0x58>)
 8006622:	2201      	movs	r2, #1
 8006624:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8006626:	4b10      	ldr	r3, [pc, #64]	; (8006668 <checkBasincSalteri+0x54>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d119      	bne.n	8006662 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800662e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006632:	480f      	ldr	r0, [pc, #60]	; (8006670 <checkBasincSalteri+0x5c>)
 8006634:	f003 fc56 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10a      	bne.n	8006654 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 800663e:	4b0d      	ldr	r3, [pc, #52]	; (8006674 <checkBasincSalteri+0x60>)
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4b0d      	ldr	r3, [pc, #52]	; (8006678 <checkBasincSalteri+0x64>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d90a      	bls.n	8006662 <checkBasincSalteri+0x4e>
				basincVar=1;
 800664c:	4b07      	ldr	r3, [pc, #28]	; (800666c <checkBasincSalteri+0x58>)
 800664e:	2201      	movs	r2, #1
 8006650:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8006652:	e006      	b.n	8006662 <checkBasincSalteri+0x4e>
			timer5=millis;
 8006654:	4b07      	ldr	r3, [pc, #28]	; (8006674 <checkBasincSalteri+0x60>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a07      	ldr	r2, [pc, #28]	; (8006678 <checkBasincSalteri+0x64>)
 800665a:	6013      	str	r3, [r2, #0]
			basincVar=0;
 800665c:	4b03      	ldr	r3, [pc, #12]	; (800666c <checkBasincSalteri+0x58>)
 800665e:	2200      	movs	r2, #0
 8006660:	701a      	strb	r2, [r3, #0]
}
 8006662:	bf00      	nop
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000d37 	.word	0x20000d37
 800666c:	20000d33 	.word	0x20000d33
 8006670:	40011000 	.word	0x40011000
 8006674:	20000cb0 	.word	0x20000cb0
 8006678:	20000cc8 	.word	0x20000cc8

0800667c <checkBasGonder>:

void checkBasGonder() {
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006680:	4b1b      	ldr	r3, [pc, #108]	; (80066f0 <checkBasGonder+0x74>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d10b      	bne.n	80066a0 <checkBasGonder+0x24>
 8006688:	4b1a      	ldr	r3, [pc, #104]	; (80066f4 <checkBasGonder+0x78>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d007      	beq.n	80066a0 <checkBasGonder+0x24>
 8006690:	4b19      	ldr	r3, [pc, #100]	; (80066f8 <checkBasGonder+0x7c>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d103      	bne.n	80066a0 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8006698:	4b18      	ldr	r3, [pc, #96]	; (80066fc <checkBasGonder+0x80>)
 800669a:	2201      	movs	r2, #1
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	e009      	b.n	80066b4 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 80066a0:	4b14      	ldr	r3, [pc, #80]	; (80066f4 <checkBasGonder+0x78>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	f083 0301 	eor.w	r3, r3, #1
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 80066ae:	4b13      	ldr	r3, [pc, #76]	; (80066fc <checkBasGonder+0x80>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80066b4:	4b0e      	ldr	r3, [pc, #56]	; (80066f0 <checkBasGonder+0x74>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d10b      	bne.n	80066d4 <checkBasGonder+0x58>
 80066bc:	4b10      	ldr	r3, [pc, #64]	; (8006700 <checkBasGonder+0x84>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d007      	beq.n	80066d4 <checkBasGonder+0x58>
 80066c4:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <checkBasGonder+0x7c>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 80066cc:	4b0d      	ldr	r3, [pc, #52]	; (8006704 <checkBasGonder+0x88>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 80066d2:	e009      	b.n	80066e8 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 80066d4:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <checkBasGonder+0x84>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f083 0301 	eor.w	r3, r3, #1
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80066e2:	4b08      	ldr	r3, [pc, #32]	; (8006704 <checkBasGonder+0x88>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	701a      	strb	r2, [r3, #0]
}
 80066e8:	bf00      	nop
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bc80      	pop	{r7}
 80066ee:	4770      	bx	lr
 80066f0:	20000d31 	.word	0x20000d31
 80066f4:	20000d65 	.word	0x20000d65
 80066f8:	20000d3f 	.word	0x20000d3f
 80066fc:	20000d6c 	.word	0x20000d6c
 8006700:	20000d68 	.word	0x20000d68
 8006704:	20000d6d 	.word	0x20000d6d

08006708 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 800670c:	4b24      	ldr	r3, [pc, #144]	; (80067a0 <checkKapiSecimleri+0x98>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d102      	bne.n	800671a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8006714:	4b23      	ldr	r3, [pc, #140]	; (80067a4 <checkKapiSecimleri+0x9c>)
 8006716:	2201      	movs	r2, #1
 8006718:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 800671a:	4b21      	ldr	r3, [pc, #132]	; (80067a0 <checkKapiSecimleri+0x98>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d10e      	bne.n	8006740 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006726:	4820      	ldr	r0, [pc, #128]	; (80067a8 <checkKapiSecimleri+0xa0>)
 8006728:	f003 fbdc 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d103      	bne.n	800673a <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8006732:	4b1c      	ldr	r3, [pc, #112]	; (80067a4 <checkKapiSecimleri+0x9c>)
 8006734:	2201      	movs	r2, #1
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	e002      	b.n	8006740 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 800673a:	4b1a      	ldr	r3, [pc, #104]	; (80067a4 <checkKapiSecimleri+0x9c>)
 800673c:	2200      	movs	r2, #0
 800673e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8006740:	4b17      	ldr	r3, [pc, #92]	; (80067a0 <checkKapiSecimleri+0x98>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d10e      	bne.n	8006766 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8006748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800674c:	4816      	ldr	r0, [pc, #88]	; (80067a8 <checkKapiSecimleri+0xa0>)
 800674e:	f003 fbc9 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d103      	bne.n	8006760 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8006758:	4b12      	ldr	r3, [pc, #72]	; (80067a4 <checkKapiSecimleri+0x9c>)
 800675a:	2201      	movs	r2, #1
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	e002      	b.n	8006766 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8006760:	4b10      	ldr	r3, [pc, #64]	; (80067a4 <checkKapiSecimleri+0x9c>)
 8006762:	2200      	movs	r2, #0
 8006764:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8006766:	4b0e      	ldr	r3, [pc, #56]	; (80067a0 <checkKapiSecimleri+0x98>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b03      	cmp	r3, #3
 800676c:	d116      	bne.n	800679c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 800676e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006772:	480d      	ldr	r0, [pc, #52]	; (80067a8 <checkKapiSecimleri+0xa0>)
 8006774:	f003 fbb6 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10b      	bne.n	8006796 <checkKapiSecimleri+0x8e>
 800677e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006782:	4809      	ldr	r0, [pc, #36]	; (80067a8 <checkKapiSecimleri+0xa0>)
 8006784:	f003 fbae 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d103      	bne.n	8006796 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 800678e:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <checkKapiSecimleri+0x9c>)
 8006790:	2201      	movs	r2, #1
 8006792:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8006794:	e002      	b.n	800679c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8006796:	4b03      	ldr	r3, [pc, #12]	; (80067a4 <checkKapiSecimleri+0x9c>)
 8006798:	2200      	movs	r2, #0
 800679a:	701a      	strb	r2, [r3, #0]
}
 800679c:	bf00      	nop
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20000d38 	.word	0x20000d38
 80067a4:	20000d83 	.word	0x20000d83
 80067a8:	40010800 	.word	0x40010800

080067ac <checkAktifCalisma>:

void checkAktifCalisma() {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80067b0:	4b62      	ldr	r3, [pc, #392]	; (800693c <checkAktifCalisma+0x190>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f041 833e 	bne.w	8007e36 <checkAktifCalisma+0x168a>
 80067ba:	4b61      	ldr	r3, [pc, #388]	; (8006940 <checkAktifCalisma+0x194>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f041 8339 	bne.w	8007e36 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 80067c4:	4b5f      	ldr	r3, [pc, #380]	; (8006944 <checkAktifCalisma+0x198>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d11a      	bne.n	8006802 <checkAktifCalisma+0x56>
 80067cc:	4b5e      	ldr	r3, [pc, #376]	; (8006948 <checkAktifCalisma+0x19c>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d116      	bne.n	8006802 <checkAktifCalisma+0x56>
 80067d4:	4b5d      	ldr	r3, [pc, #372]	; (800694c <checkAktifCalisma+0x1a0>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <checkAktifCalisma+0x46>
 80067dc:	4b5c      	ldr	r3, [pc, #368]	; (8006950 <checkAktifCalisma+0x1a4>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	f083 0301 	eor.w	r3, r3, #1
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <checkAktifCalisma+0x46>
 80067ea:	4b5a      	ldr	r3, [pc, #360]	; (8006954 <checkAktifCalisma+0x1a8>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d007      	beq.n	8006802 <checkAktifCalisma+0x56>
 80067f2:	4b59      	ldr	r3, [pc, #356]	; (8006958 <checkAktifCalisma+0x1ac>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d018      	beq.n	800682c <checkAktifCalisma+0x80>
 80067fa:	4b58      	ldr	r3, [pc, #352]	; (800695c <checkAktifCalisma+0x1b0>)
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d114      	bne.n	800682c <checkAktifCalisma+0x80>
 8006802:	4b57      	ldr	r3, [pc, #348]	; (8006960 <checkAktifCalisma+0x1b4>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d010      	beq.n	800682c <checkAktifCalisma+0x80>
 800680a:	4b56      	ldr	r3, [pc, #344]	; (8006964 <checkAktifCalisma+0x1b8>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00c      	beq.n	800682c <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006812:	2201      	movs	r2, #1
 8006814:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006818:	4853      	ldr	r0, [pc, #332]	; (8006968 <checkAktifCalisma+0x1bc>)
 800681a:	f003 fb7a 	bl	8009f12 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 800681e:	4b53      	ldr	r3, [pc, #332]	; (800696c <checkAktifCalisma+0x1c0>)
 8006820:	2201      	movs	r2, #1
 8006822:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8006824:	4b52      	ldr	r3, [pc, #328]	; (8006970 <checkAktifCalisma+0x1c4>)
 8006826:	2201      	movs	r2, #1
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e008      	b.n	800683e <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800682c:	2200      	movs	r2, #0
 800682e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006832:	484d      	ldr	r0, [pc, #308]	; (8006968 <checkAktifCalisma+0x1bc>)
 8006834:	f003 fb6d 	bl	8009f12 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8006838:	4b4c      	ldr	r3, [pc, #304]	; (800696c <checkAktifCalisma+0x1c0>)
 800683a:	2200      	movs	r2, #0
 800683c:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 800683e:	4b40      	ldr	r3, [pc, #256]	; (8006940 <checkAktifCalisma+0x194>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d160      	bne.n	8006908 <checkAktifCalisma+0x15c>
 8006846:	4b46      	ldr	r3, [pc, #280]	; (8006960 <checkAktifCalisma+0x1b4>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d05c      	beq.n	8006908 <checkAktifCalisma+0x15c>
 800684e:	4b45      	ldr	r3, [pc, #276]	; (8006964 <checkAktifCalisma+0x1b8>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d058      	beq.n	8006908 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8006856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800685a:	4843      	ldr	r0, [pc, #268]	; (8006968 <checkAktifCalisma+0x1bc>)
 800685c:	f003 fb42 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <checkAktifCalisma+0xc2>
 8006866:	4b43      	ldr	r3, [pc, #268]	; (8006974 <checkAktifCalisma+0x1c8>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d04c      	beq.n	8006908 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800686e:	2102      	movs	r1, #2
 8006870:	4841      	ldr	r0, [pc, #260]	; (8006978 <checkAktifCalisma+0x1cc>)
 8006872:	f003 fb37 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d145      	bne.n	8006908 <checkAktifCalisma+0x15c>
				&& (basincVar)
 800687c:	4b3f      	ldr	r3, [pc, #252]	; (800697c <checkAktifCalisma+0x1d0>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d041      	beq.n	8006908 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8006884:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006888:	4837      	ldr	r0, [pc, #220]	; (8006968 <checkAktifCalisma+0x1bc>)
 800688a:	f003 fb2b 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800688e:	4603      	mov	r3, r0
 8006890:	2b01      	cmp	r3, #1
 8006892:	d10e      	bne.n	80068b2 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006894:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006898:	4833      	ldr	r0, [pc, #204]	; (8006968 <checkAktifCalisma+0x1bc>)
 800689a:	f003 fb23 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d106      	bne.n	80068b2 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80068a4:	2140      	movs	r1, #64	; 0x40
 80068a6:	4834      	ldr	r0, [pc, #208]	; (8006978 <checkAktifCalisma+0x1cc>)
 80068a8:	f003 fb1c 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d003      	beq.n	80068ba <checkAktifCalisma+0x10e>
 80068b2:	4b24      	ldr	r3, [pc, #144]	; (8006944 <checkAktifCalisma+0x198>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d026      	beq.n	8006908 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 80068ba:	4b24      	ldr	r3, [pc, #144]	; (800694c <checkAktifCalisma+0x1a0>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	f083 0301 	eor.w	r3, r3, #1
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01f      	beq.n	8006908 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 80068c8:	4b1f      	ldr	r3, [pc, #124]	; (8006948 <checkAktifCalisma+0x19c>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	f083 0301 	eor.w	r3, r3, #1
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d018      	beq.n	8006908 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 80068d6:	4b20      	ldr	r3, [pc, #128]	; (8006958 <checkAktifCalisma+0x1ac>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	f083 0301 	eor.w	r3, r3, #1
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d011      	beq.n	8006908 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 80068e4:	4b26      	ldr	r3, [pc, #152]	; (8006980 <checkAktifCalisma+0x1d4>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	f083 0301 	eor.w	r3, r3, #1
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00a      	beq.n	8006908 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 80068f2:	4b24      	ldr	r3, [pc, #144]	; (8006984 <checkAktifCalisma+0x1d8>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	f083 0301 	eor.w	r3, r3, #1
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8006900:	4b10      	ldr	r3, [pc, #64]	; (8006944 <checkAktifCalisma+0x198>)
 8006902:	2201      	movs	r2, #1
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	e002      	b.n	800690e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8006908:	4b0e      	ldr	r3, [pc, #56]	; (8006944 <checkAktifCalisma+0x198>)
 800690a:	2200      	movs	r2, #0
 800690c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800690e:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <checkAktifCalisma+0x198>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d03a      	beq.n	800698c <checkAktifCalisma+0x1e0>
 8006916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800691a:	4817      	ldr	r0, [pc, #92]	; (8006978 <checkAktifCalisma+0x1cc>)
 800691c:	f003 fae2 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006920:	4603      	mov	r3, r0
 8006922:	2b01      	cmp	r3, #1
 8006924:	d132      	bne.n	800698c <checkAktifCalisma+0x1e0>
 8006926:	4b18      	ldr	r3, [pc, #96]	; (8006988 <checkAktifCalisma+0x1dc>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d02e      	beq.n	800698c <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800692e:	2201      	movs	r2, #1
 8006930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006934:	480c      	ldr	r0, [pc, #48]	; (8006968 <checkAktifCalisma+0x1bc>)
 8006936:	f003 faec 	bl	8009f12 <HAL_GPIO_WritePin>
 800693a:	e02d      	b.n	8006998 <checkAktifCalisma+0x1ec>
 800693c:	20000d4e 	.word	0x20000d4e
 8006940:	20000d4d 	.word	0x20000d4d
 8006944:	20000d65 	.word	0x20000d65
 8006948:	20000d66 	.word	0x20000d66
 800694c:	20000d68 	.word	0x20000d68
 8006950:	20000d60 	.word	0x20000d60
 8006954:	20000d43 	.word	0x20000d43
 8006958:	20000d67 	.word	0x20000d67
 800695c:	20000d42 	.word	0x20000d42
 8006960:	20000d82 	.word	0x20000d82
 8006964:	20000d83 	.word	0x20000d83
 8006968:	40010c00 	.word	0x40010c00
 800696c:	20000d84 	.word	0x20000d84
 8006970:	20000d6f 	.word	0x20000d6f
 8006974:	20000d6c 	.word	0x20000d6c
 8006978:	40011000 	.word	0x40011000
 800697c:	20000d33 	.word	0x20000d33
 8006980:	20000d6a 	.word	0x20000d6a
 8006984:	20000d6b 	.word	0x20000d6b
 8006988:	20000d3e 	.word	0x20000d3e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800698c:	2200      	movs	r2, #0
 800698e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006992:	4860      	ldr	r0, [pc, #384]	; (8006b14 <checkAktifCalisma+0x368>)
 8006994:	f003 fabd 	bl	8009f12 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8006998:	4b5f      	ldr	r3, [pc, #380]	; (8006b18 <checkAktifCalisma+0x36c>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d013      	beq.n	80069c8 <checkAktifCalisma+0x21c>
 80069a0:	4b5e      	ldr	r3, [pc, #376]	; (8006b1c <checkAktifCalisma+0x370>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d007      	beq.n	80069b8 <checkAktifCalisma+0x20c>
 80069a8:	4b5c      	ldr	r3, [pc, #368]	; (8006b1c <checkAktifCalisma+0x370>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d003      	beq.n	80069b8 <checkAktifCalisma+0x20c>
 80069b0:	4b5b      	ldr	r3, [pc, #364]	; (8006b20 <checkAktifCalisma+0x374>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d107      	bne.n	80069c8 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80069b8:	2201      	movs	r2, #1
 80069ba:	2104      	movs	r1, #4
 80069bc:	4855      	ldr	r0, [pc, #340]	; (8006b14 <checkAktifCalisma+0x368>)
 80069be:	f003 faa8 	bl	8009f12 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 80069c2:	4b58      	ldr	r3, [pc, #352]	; (8006b24 <checkAktifCalisma+0x378>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80069c8:	4b56      	ldr	r3, [pc, #344]	; (8006b24 <checkAktifCalisma+0x378>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d02f      	beq.n	8006a30 <checkAktifCalisma+0x284>
 80069d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069d4:	484f      	ldr	r0, [pc, #316]	; (8006b14 <checkAktifCalisma+0x368>)
 80069d6:	f003 fa85 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d106      	bne.n	80069ee <checkAktifCalisma+0x242>
 80069e0:	4b51      	ldr	r3, [pc, #324]	; (8006b28 <checkAktifCalisma+0x37c>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	f083 0301 	eor.w	r3, r3, #1
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <checkAktifCalisma+0x250>
 80069ee:	2102      	movs	r1, #2
 80069f0:	484e      	ldr	r0, [pc, #312]	; (8006b2c <checkAktifCalisma+0x380>)
 80069f2:	f003 fa77 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d119      	bne.n	8006a30 <checkAktifCalisma+0x284>
 80069fc:	4b4c      	ldr	r3, [pc, #304]	; (8006b30 <checkAktifCalisma+0x384>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d015      	beq.n	8006a30 <checkAktifCalisma+0x284>
 8006a04:	4b4b      	ldr	r3, [pc, #300]	; (8006b34 <checkAktifCalisma+0x388>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d011      	beq.n	8006a30 <checkAktifCalisma+0x284>
 8006a0c:	4b4a      	ldr	r3, [pc, #296]	; (8006b38 <checkAktifCalisma+0x38c>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00d      	beq.n	8006a30 <checkAktifCalisma+0x284>
 8006a14:	4b49      	ldr	r3, [pc, #292]	; (8006b3c <checkAktifCalisma+0x390>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	f083 0301 	eor.w	r3, r3, #1
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d006      	beq.n	8006a30 <checkAktifCalisma+0x284>
			timer2=millis;
 8006a22:	4b47      	ldr	r3, [pc, #284]	; (8006b40 <checkAktifCalisma+0x394>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a47      	ldr	r2, [pc, #284]	; (8006b44 <checkAktifCalisma+0x398>)
 8006a28:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8006a2a:	4b44      	ldr	r3, [pc, #272]	; (8006b3c <checkAktifCalisma+0x390>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8006a30:	4b43      	ldr	r3, [pc, #268]	; (8006b40 <checkAktifCalisma+0x394>)
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	4b43      	ldr	r3, [pc, #268]	; (8006b44 <checkAktifCalisma+0x398>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	4a43      	ldr	r2, [pc, #268]	; (8006b48 <checkAktifCalisma+0x39c>)
 8006a3c:	7812      	ldrb	r2, [r2, #0]
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d303      	bcc.n	8006a4a <checkAktifCalisma+0x29e>
 8006a42:	4b3e      	ldr	r3, [pc, #248]	; (8006b3c <checkAktifCalisma+0x390>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d111      	bne.n	8006a6e <checkAktifCalisma+0x2c2>
 8006a4a:	4b39      	ldr	r3, [pc, #228]	; (8006b30 <checkAktifCalisma+0x384>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	f083 0301 	eor.w	r3, r3, #1
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10a      	bne.n	8006a6e <checkAktifCalisma+0x2c2>
 8006a58:	4b36      	ldr	r3, [pc, #216]	; (8006b34 <checkAktifCalisma+0x388>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	f083 0301 	eor.w	r3, r3, #1
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d103      	bne.n	8006a6e <checkAktifCalisma+0x2c2>
 8006a66:	4b34      	ldr	r3, [pc, #208]	; (8006b38 <checkAktifCalisma+0x38c>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10a      	bne.n	8006a84 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2104      	movs	r1, #4
 8006a72:	4828      	ldr	r0, [pc, #160]	; (8006b14 <checkAktifCalisma+0x368>)
 8006a74:	f003 fa4d 	bl	8009f12 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8006a78:	4b2a      	ldr	r3, [pc, #168]	; (8006b24 <checkAktifCalisma+0x378>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8006a7e:	4b2f      	ldr	r3, [pc, #188]	; (8006b3c <checkAktifCalisma+0x390>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8006a84:	4b31      	ldr	r3, [pc, #196]	; (8006b4c <checkAktifCalisma+0x3a0>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d102      	bne.n	8006a92 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8006a8c:	4b30      	ldr	r3, [pc, #192]	; (8006b50 <checkAktifCalisma+0x3a4>)
 8006a8e:	2201      	movs	r2, #1
 8006a90:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8006a92:	4b2e      	ldr	r3, [pc, #184]	; (8006b4c <checkAktifCalisma+0x3a0>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d116      	bne.n	8006ac8 <checkAktifCalisma+0x31c>
 8006a9a:	4b2e      	ldr	r3, [pc, #184]	; (8006b54 <checkAktifCalisma+0x3a8>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d112      	bne.n	8006ac8 <checkAktifCalisma+0x31c>
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	4821      	ldr	r0, [pc, #132]	; (8006b2c <checkAktifCalisma+0x380>)
 8006aa6:	f003 fa1d 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10b      	bne.n	8006ac8 <checkAktifCalisma+0x31c>
 8006ab0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ab4:	4817      	ldr	r0, [pc, #92]	; (8006b14 <checkAktifCalisma+0x368>)
 8006ab6:	f003 fa15 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d103      	bne.n	8006ac8 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006ac0:	4b23      	ldr	r3, [pc, #140]	; (8006b50 <checkAktifCalisma+0x3a4>)
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	e011      	b.n	8006aec <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006ac8:	4b20      	ldr	r3, [pc, #128]	; (8006b4c <checkAktifCalisma+0x3a0>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d10d      	bne.n	8006aec <checkAktifCalisma+0x340>
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	4816      	ldr	r0, [pc, #88]	; (8006b2c <checkAktifCalisma+0x380>)
 8006ad4:	f003 fa06 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d106      	bne.n	8006aec <checkAktifCalisma+0x340>
 8006ade:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <checkAktifCalisma+0x3a8>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d102      	bne.n	8006aec <checkAktifCalisma+0x340>
			cerceveVar=0;
 8006ae6:	4b1a      	ldr	r3, [pc, #104]	; (8006b50 <checkAktifCalisma+0x3a4>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8006aec:	4b17      	ldr	r3, [pc, #92]	; (8006b4c <checkAktifCalisma+0x3a0>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d134      	bne.n	8006b5e <checkAktifCalisma+0x3b2>
 8006af4:	4b17      	ldr	r3, [pc, #92]	; (8006b54 <checkAktifCalisma+0x3a8>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d130      	bne.n	8006b5e <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8006afc:	2101      	movs	r1, #1
 8006afe:	480b      	ldr	r0, [pc, #44]	; (8006b2c <checkAktifCalisma+0x380>)
 8006b00:	f003 f9f0 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d126      	bne.n	8006b58 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8006b0a:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <checkAktifCalisma+0x3a4>)
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	e025      	b.n	8006b5e <checkAktifCalisma+0x3b2>
 8006b12:	bf00      	nop
 8006b14:	40010c00 	.word	0x40010c00
 8006b18:	20000d65 	.word	0x20000d65
 8006b1c:	20000d3f 	.word	0x20000d3f
 8006b20:	20000d43 	.word	0x20000d43
 8006b24:	20000d69 	.word	0x20000d69
 8006b28:	20000d6c 	.word	0x20000d6c
 8006b2c:	40011000 	.word	0x40011000
 8006b30:	20000d82 	.word	0x20000d82
 8006b34:	20000d83 	.word	0x20000d83
 8006b38:	20000d33 	.word	0x20000d33
 8006b3c:	20000d61 	.word	0x20000d61
 8006b40:	20000cb0 	.word	0x20000cb0
 8006b44:	20000cbc 	.word	0x20000cbc
 8006b48:	20000d44 	.word	0x20000d44
 8006b4c:	20000d34 	.word	0x20000d34
 8006b50:	20000d87 	.word	0x20000d87
 8006b54:	20000d31 	.word	0x20000d31
			} else {
				cerceveVar=0;
 8006b58:	4b7f      	ldr	r3, [pc, #508]	; (8006d58 <checkAktifCalisma+0x5ac>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8006b5e:	4b7f      	ldr	r3, [pc, #508]	; (8006d5c <checkAktifCalisma+0x5b0>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d17c      	bne.n	8006c60 <checkAktifCalisma+0x4b4>
 8006b66:	4b7e      	ldr	r3, [pc, #504]	; (8006d60 <checkAktifCalisma+0x5b4>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d078      	beq.n	8006c60 <checkAktifCalisma+0x4b4>
 8006b6e:	4b7d      	ldr	r3, [pc, #500]	; (8006d64 <checkAktifCalisma+0x5b8>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d074      	beq.n	8006c60 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8006b76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b7a:	487b      	ldr	r0, [pc, #492]	; (8006d68 <checkAktifCalisma+0x5bc>)
 8006b7c:	f003 f9b2 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <checkAktifCalisma+0x3e2>
 8006b86:	4b79      	ldr	r3, [pc, #484]	; (8006d6c <checkAktifCalisma+0x5c0>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d068      	beq.n	8006c60 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8006b8e:	4b72      	ldr	r3, [pc, #456]	; (8006d58 <checkAktifCalisma+0x5ac>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d064      	beq.n	8006c60 <checkAktifCalisma+0x4b4>
 8006b96:	4b76      	ldr	r3, [pc, #472]	; (8006d70 <checkAktifCalisma+0x5c4>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	f083 0301 	eor.w	r3, r3, #1
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d05d      	beq.n	8006c60 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006ba4:	2104      	movs	r1, #4
 8006ba6:	4873      	ldr	r0, [pc, #460]	; (8006d74 <checkAktifCalisma+0x5c8>)
 8006ba8:	f003 f99c 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <checkAktifCalisma+0x40e>
 8006bb2:	4b71      	ldr	r3, [pc, #452]	; (8006d78 <checkAktifCalisma+0x5cc>)
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d152      	bne.n	8006c60 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bbe:	486a      	ldr	r0, [pc, #424]	; (8006d68 <checkAktifCalisma+0x5bc>)
 8006bc0:	f003 f990 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d10e      	bne.n	8006be8 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bce:	4866      	ldr	r0, [pc, #408]	; (8006d68 <checkAktifCalisma+0x5bc>)
 8006bd0:	f003 f988 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d106      	bne.n	8006be8 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8006bda:	2140      	movs	r1, #64	; 0x40
 8006bdc:	4865      	ldr	r0, [pc, #404]	; (8006d74 <checkAktifCalisma+0x5c8>)
 8006bde:	f003 f981 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d003      	beq.n	8006bf0 <checkAktifCalisma+0x444>
 8006be8:	4b64      	ldr	r3, [pc, #400]	; (8006d7c <checkAktifCalisma+0x5d0>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d037      	beq.n	8006c60 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8006bf0:	4b63      	ldr	r3, [pc, #396]	; (8006d80 <checkAktifCalisma+0x5d4>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	f083 0301 	eor.w	r3, r3, #1
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d030      	beq.n	8006c60 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8006bfe:	4b61      	ldr	r3, [pc, #388]	; (8006d84 <checkAktifCalisma+0x5d8>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	f083 0301 	eor.w	r3, r3, #1
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d029      	beq.n	8006c60 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8006c0c:	4b5e      	ldr	r3, [pc, #376]	; (8006d88 <checkAktifCalisma+0x5dc>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	f083 0301 	eor.w	r3, r3, #1
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d022      	beq.n	8006c60 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8006c1a:	4b5c      	ldr	r3, [pc, #368]	; (8006d8c <checkAktifCalisma+0x5e0>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	f083 0301 	eor.w	r3, r3, #1
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d01b      	beq.n	8006c60 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8006c28:	4b59      	ldr	r3, [pc, #356]	; (8006d90 <checkAktifCalisma+0x5e4>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	f083 0301 	eor.w	r3, r3, #1
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d014      	beq.n	8006c60 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8006c36:	4b57      	ldr	r3, [pc, #348]	; (8006d94 <checkAktifCalisma+0x5e8>)
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	f083 0301 	eor.w	r3, r3, #1
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00d      	beq.n	8006c60 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006c44:	2201      	movs	r2, #1
 8006c46:	2102      	movs	r1, #2
 8006c48:	4847      	ldr	r0, [pc, #284]	; (8006d68 <checkAktifCalisma+0x5bc>)
 8006c4a:	f003 f962 	bl	8009f12 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8006c4e:	4b4b      	ldr	r3, [pc, #300]	; (8006d7c <checkAktifCalisma+0x5d0>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8006c54:	4b50      	ldr	r3, [pc, #320]	; (8006d98 <checkAktifCalisma+0x5ec>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8006c5a:	4b50      	ldr	r3, [pc, #320]	; (8006d9c <checkAktifCalisma+0x5f0>)
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8006c60:	4b46      	ldr	r3, [pc, #280]	; (8006d7c <checkAktifCalisma+0x5d0>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d033      	beq.n	8006cd0 <checkAktifCalisma+0x524>
 8006c68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c6c:	483e      	ldr	r0, [pc, #248]	; (8006d68 <checkAktifCalisma+0x5bc>)
 8006c6e:	f003 f939 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d106      	bne.n	8006c86 <checkAktifCalisma+0x4da>
 8006c78:	4b3c      	ldr	r3, [pc, #240]	; (8006d6c <checkAktifCalisma+0x5c0>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	f083 0301 	eor.w	r3, r3, #1
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10a      	bne.n	8006c9c <checkAktifCalisma+0x4f0>
 8006c86:	2104      	movs	r1, #4
 8006c88:	483a      	ldr	r0, [pc, #232]	; (8006d74 <checkAktifCalisma+0x5c8>)
 8006c8a:	f003 f92b 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d11d      	bne.n	8006cd0 <checkAktifCalisma+0x524>
 8006c94:	4b38      	ldr	r3, [pc, #224]	; (8006d78 <checkAktifCalisma+0x5cc>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d019      	beq.n	8006cd0 <checkAktifCalisma+0x524>
 8006c9c:	4b30      	ldr	r3, [pc, #192]	; (8006d60 <checkAktifCalisma+0x5b4>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d015      	beq.n	8006cd0 <checkAktifCalisma+0x524>
 8006ca4:	4b2f      	ldr	r3, [pc, #188]	; (8006d64 <checkAktifCalisma+0x5b8>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d011      	beq.n	8006cd0 <checkAktifCalisma+0x524>
 8006cac:	4b2a      	ldr	r3, [pc, #168]	; (8006d58 <checkAktifCalisma+0x5ac>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00d      	beq.n	8006cd0 <checkAktifCalisma+0x524>
 8006cb4:	4b3a      	ldr	r3, [pc, #232]	; (8006da0 <checkAktifCalisma+0x5f4>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	f083 0301 	eor.w	r3, r3, #1
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d006      	beq.n	8006cd0 <checkAktifCalisma+0x524>
			timer2=millis;
 8006cc2:	4b38      	ldr	r3, [pc, #224]	; (8006da4 <checkAktifCalisma+0x5f8>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a38      	ldr	r2, [pc, #224]	; (8006da8 <checkAktifCalisma+0x5fc>)
 8006cc8:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006cca:	4b35      	ldr	r3, [pc, #212]	; (8006da0 <checkAktifCalisma+0x5f4>)
 8006ccc:	2201      	movs	r2, #1
 8006cce:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006cd0:	4b34      	ldr	r3, [pc, #208]	; (8006da4 <checkAktifCalisma+0x5f8>)
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	4b34      	ldr	r3, [pc, #208]	; (8006da8 <checkAktifCalisma+0x5fc>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	4a34      	ldr	r2, [pc, #208]	; (8006dac <checkAktifCalisma+0x600>)
 8006cdc:	7812      	ldrb	r2, [r2, #0]
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d303      	bcc.n	8006cea <checkAktifCalisma+0x53e>
 8006ce2:	4b2f      	ldr	r3, [pc, #188]	; (8006da0 <checkAktifCalisma+0x5f4>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d114      	bne.n	8006d14 <checkAktifCalisma+0x568>
 8006cea:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <checkAktifCalisma+0x5b4>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	f083 0301 	eor.w	r3, r3, #1
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10d      	bne.n	8006d14 <checkAktifCalisma+0x568>
 8006cf8:	4b1a      	ldr	r3, [pc, #104]	; (8006d64 <checkAktifCalisma+0x5b8>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	f083 0301 	eor.w	r3, r3, #1
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d106      	bne.n	8006d14 <checkAktifCalisma+0x568>
 8006d06:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <checkAktifCalisma+0x5ac>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	f083 0301 	eor.w	r3, r3, #1
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00a      	beq.n	8006d2a <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006d14:	2200      	movs	r2, #0
 8006d16:	2102      	movs	r1, #2
 8006d18:	4813      	ldr	r0, [pc, #76]	; (8006d68 <checkAktifCalisma+0x5bc>)
 8006d1a:	f003 f8fa 	bl	8009f12 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8006d1e:	4b17      	ldr	r3, [pc, #92]	; (8006d7c <checkAktifCalisma+0x5d0>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006d24:	4b1e      	ldr	r3, [pc, #120]	; (8006da0 <checkAktifCalisma+0x5f4>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8006d2a:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <checkAktifCalisma+0x5d0>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d040      	beq.n	8006db4 <checkAktifCalisma+0x608>
 8006d32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d36:	480f      	ldr	r0, [pc, #60]	; (8006d74 <checkAktifCalisma+0x5c8>)
 8006d38:	f003 f8d4 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d138      	bne.n	8006db4 <checkAktifCalisma+0x608>
 8006d42:	4b1b      	ldr	r3, [pc, #108]	; (8006db0 <checkAktifCalisma+0x604>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d034      	beq.n	8006db4 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	4806      	ldr	r0, [pc, #24]	; (8006d68 <checkAktifCalisma+0x5bc>)
 8006d50:	f003 f8df 	bl	8009f12 <HAL_GPIO_WritePin>
 8006d54:	e033      	b.n	8006dbe <checkAktifCalisma+0x612>
 8006d56:	bf00      	nop
 8006d58:	20000d87 	.word	0x20000d87
 8006d5c:	20000d4d 	.word	0x20000d4d
 8006d60:	20000d82 	.word	0x20000d82
 8006d64:	20000d83 	.word	0x20000d83
 8006d68:	40010c00 	.word	0x40010c00
 8006d6c:	20000d6d 	.word	0x20000d6d
 8006d70:	20000d81 	.word	0x20000d81
 8006d74:	40011000 	.word	0x40011000
 8006d78:	20000d36 	.word	0x20000d36
 8006d7c:	20000d68 	.word	0x20000d68
 8006d80:	20000d65 	.word	0x20000d65
 8006d84:	20000d69 	.word	0x20000d69
 8006d88:	20000d66 	.word	0x20000d66
 8006d8c:	20000d67 	.word	0x20000d67
 8006d90:	20000d6a 	.word	0x20000d6a
 8006d94:	20000d6b 	.word	0x20000d6b
 8006d98:	20000d70 	.word	0x20000d70
 8006d9c:	20000d91 	.word	0x20000d91
 8006da0:	20000d60 	.word	0x20000d60
 8006da4:	20000cb0 	.word	0x20000cb0
 8006da8:	20000cbc 	.word	0x20000cbc
 8006dac:	20000d45 	.word	0x20000d45
 8006db0:	20000d35 	.word	0x20000d35
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006db4:	2200      	movs	r2, #0
 8006db6:	2101      	movs	r1, #1
 8006db8:	4836      	ldr	r0, [pc, #216]	; (8006e94 <checkAktifCalisma+0x6e8>)
 8006dba:	f003 f8aa 	bl	8009f12 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006dbe:	4b36      	ldr	r3, [pc, #216]	; (8006e98 <checkAktifCalisma+0x6ec>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f040 8080 	bne.w	8006ec8 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006dc8:	4b34      	ldr	r3, [pc, #208]	; (8006e9c <checkAktifCalisma+0x6f0>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d003      	beq.n	8006dd8 <checkAktifCalisma+0x62c>
 8006dd0:	4b32      	ldr	r3, [pc, #200]	; (8006e9c <checkAktifCalisma+0x6f0>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d177      	bne.n	8006ec8 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006dd8:	4b31      	ldr	r3, [pc, #196]	; (8006ea0 <checkAktifCalisma+0x6f4>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d073      	beq.n	8006ec8 <checkAktifCalisma+0x71c>
 8006de0:	4b30      	ldr	r3, [pc, #192]	; (8006ea4 <checkAktifCalisma+0x6f8>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d06f      	beq.n	8006ec8 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dec:	4829      	ldr	r0, [pc, #164]	; (8006e94 <checkAktifCalisma+0x6e8>)
 8006dee:	f003 f879 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d167      	bne.n	8006ec8 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006dfc:	482a      	ldr	r0, [pc, #168]	; (8006ea8 <checkAktifCalisma+0x6fc>)
 8006dfe:	f003 f871 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <checkAktifCalisma+0x664>
 8006e08:	4b28      	ldr	r3, [pc, #160]	; (8006eac <checkAktifCalisma+0x700>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d15b      	bne.n	8006ec8 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006e10:	2140      	movs	r1, #64	; 0x40
 8006e12:	4825      	ldr	r0, [pc, #148]	; (8006ea8 <checkAktifCalisma+0x6fc>)
 8006e14:	f003 f866 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d10f      	bne.n	8006e3e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006e1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e22:	481c      	ldr	r0, [pc, #112]	; (8006e94 <checkAktifCalisma+0x6e8>)
 8006e24:	f003 f85e 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d107      	bne.n	8006e3e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006e2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e32:	4818      	ldr	r0, [pc, #96]	; (8006e94 <checkAktifCalisma+0x6e8>)
 8006e34:	f003 f856 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d003      	beq.n	8006e46 <checkAktifCalisma+0x69a>
 8006e3e:	4b1c      	ldr	r3, [pc, #112]	; (8006eb0 <checkAktifCalisma+0x704>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d040      	beq.n	8006ec8 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006e46:	4b1b      	ldr	r3, [pc, #108]	; (8006eb4 <checkAktifCalisma+0x708>)
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	f083 0301 	eor.w	r3, r3, #1
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d039      	beq.n	8006ec8 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006e54:	4b18      	ldr	r3, [pc, #96]	; (8006eb8 <checkAktifCalisma+0x70c>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f083 0301 	eor.w	r3, r3, #1
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d032      	beq.n	8006ec8 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006e62:	4b16      	ldr	r3, [pc, #88]	; (8006ebc <checkAktifCalisma+0x710>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	f083 0301 	eor.w	r3, r3, #1
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d02b      	beq.n	8006ec8 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006e70:	4b13      	ldr	r3, [pc, #76]	; (8006ec0 <checkAktifCalisma+0x714>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	f083 0301 	eor.w	r3, r3, #1
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d024      	beq.n	8006ec8 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006e7e:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <checkAktifCalisma+0x718>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	f083 0301 	eor.w	r3, r3, #1
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01d      	beq.n	8006ec8 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006e8c:	4b08      	ldr	r3, [pc, #32]	; (8006eb0 <checkAktifCalisma+0x704>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	e01c      	b.n	8006ece <checkAktifCalisma+0x722>
 8006e94:	40010c00 	.word	0x40010c00
 8006e98:	20000d4d 	.word	0x20000d4d
 8006e9c:	20000d3f 	.word	0x20000d3f
 8006ea0:	20000d82 	.word	0x20000d82
 8006ea4:	20000d83 	.word	0x20000d83
 8006ea8:	40011000 	.word	0x40011000
 8006eac:	20000d40 	.word	0x20000d40
 8006eb0:	20000d66 	.word	0x20000d66
 8006eb4:	20000d65 	.word	0x20000d65
 8006eb8:	20000d69 	.word	0x20000d69
 8006ebc:	20000d68 	.word	0x20000d68
 8006ec0:	20000d67 	.word	0x20000d67
 8006ec4:	20000d6b 	.word	0x20000d6b
		} else {
			devmotoryukaricalisiyor=0;
 8006ec8:	4b64      	ldr	r3, [pc, #400]	; (800705c <checkAktifCalisma+0x8b0>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006ece:	4b63      	ldr	r3, [pc, #396]	; (800705c <checkAktifCalisma+0x8b0>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d007      	beq.n	8006ee6 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	2120      	movs	r1, #32
 8006eda:	4861      	ldr	r0, [pc, #388]	; (8007060 <checkAktifCalisma+0x8b4>)
 8006edc:	f003 f819 	bl	8009f12 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006ee0:	4b60      	ldr	r3, [pc, #384]	; (8007064 <checkAktifCalisma+0x8b8>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006ee6:	4b5f      	ldr	r3, [pc, #380]	; (8007064 <checkAktifCalisma+0x8b8>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d025      	beq.n	8006f3a <checkAktifCalisma+0x78e>
 8006eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ef2:	485d      	ldr	r0, [pc, #372]	; (8007068 <checkAktifCalisma+0x8bc>)
 8006ef4:	f002 fff6 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d007      	beq.n	8006f0e <checkAktifCalisma+0x762>
 8006efe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f02:	4857      	ldr	r0, [pc, #348]	; (8007060 <checkAktifCalisma+0x8b4>)
 8006f04:	f002 ffee 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d115      	bne.n	8006f3a <checkAktifCalisma+0x78e>
 8006f0e:	4b57      	ldr	r3, [pc, #348]	; (800706c <checkAktifCalisma+0x8c0>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d011      	beq.n	8006f3a <checkAktifCalisma+0x78e>
 8006f16:	4b56      	ldr	r3, [pc, #344]	; (8007070 <checkAktifCalisma+0x8c4>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00d      	beq.n	8006f3a <checkAktifCalisma+0x78e>
 8006f1e:	4b55      	ldr	r3, [pc, #340]	; (8007074 <checkAktifCalisma+0x8c8>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	f083 0301 	eor.w	r3, r3, #1
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d006      	beq.n	8006f3a <checkAktifCalisma+0x78e>
			timer2=millis;
 8006f2c:	4b52      	ldr	r3, [pc, #328]	; (8007078 <checkAktifCalisma+0x8cc>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a52      	ldr	r2, [pc, #328]	; (800707c <checkAktifCalisma+0x8d0>)
 8006f32:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006f34:	4b4f      	ldr	r3, [pc, #316]	; (8007074 <checkAktifCalisma+0x8c8>)
 8006f36:	2201      	movs	r2, #1
 8006f38:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006f3a:	4b4f      	ldr	r3, [pc, #316]	; (8007078 <checkAktifCalisma+0x8cc>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4b4f      	ldr	r3, [pc, #316]	; (800707c <checkAktifCalisma+0x8d0>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	4a4e      	ldr	r2, [pc, #312]	; (8007080 <checkAktifCalisma+0x8d4>)
 8006f46:	7812      	ldrb	r2, [r2, #0]
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d303      	bcc.n	8006f54 <checkAktifCalisma+0x7a8>
 8006f4c:	4b49      	ldr	r3, [pc, #292]	; (8007074 <checkAktifCalisma+0x8c8>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10d      	bne.n	8006f70 <checkAktifCalisma+0x7c4>
 8006f54:	4b45      	ldr	r3, [pc, #276]	; (800706c <checkAktifCalisma+0x8c0>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	f083 0301 	eor.w	r3, r3, #1
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <checkAktifCalisma+0x7c4>
 8006f62:	4b43      	ldr	r3, [pc, #268]	; (8007070 <checkAktifCalisma+0x8c4>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	f083 0301 	eor.w	r3, r3, #1
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006f70:	2200      	movs	r2, #0
 8006f72:	2120      	movs	r1, #32
 8006f74:	483a      	ldr	r0, [pc, #232]	; (8007060 <checkAktifCalisma+0x8b4>)
 8006f76:	f002 ffcc 	bl	8009f12 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006f7a:	4b3a      	ldr	r3, [pc, #232]	; (8007064 <checkAktifCalisma+0x8b8>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006f80:	4b3c      	ldr	r3, [pc, #240]	; (8007074 <checkAktifCalisma+0x8c8>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006f86:	4b3f      	ldr	r3, [pc, #252]	; (8007084 <checkAktifCalisma+0x8d8>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f040 8088 	bne.w	80070a0 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006f90:	4b3d      	ldr	r3, [pc, #244]	; (8007088 <checkAktifCalisma+0x8dc>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d003      	beq.n	8006fa0 <checkAktifCalisma+0x7f4>
 8006f98:	4b3b      	ldr	r3, [pc, #236]	; (8007088 <checkAktifCalisma+0x8dc>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d17f      	bne.n	80070a0 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006fa0:	4b32      	ldr	r3, [pc, #200]	; (800706c <checkAktifCalisma+0x8c0>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d07b      	beq.n	80070a0 <checkAktifCalisma+0x8f4>
 8006fa8:	4b31      	ldr	r3, [pc, #196]	; (8007070 <checkAktifCalisma+0x8c4>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d077      	beq.n	80070a0 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006fb0:	2140      	movs	r1, #64	; 0x40
 8006fb2:	482b      	ldr	r0, [pc, #172]	; (8007060 <checkAktifCalisma+0x8b4>)
 8006fb4:	f002 ff96 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d170      	bne.n	80070a0 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006fbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006fc2:	4827      	ldr	r0, [pc, #156]	; (8007060 <checkAktifCalisma+0x8b4>)
 8006fc4:	f002 ff8e 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <checkAktifCalisma+0x82a>
 8006fce:	4b2f      	ldr	r3, [pc, #188]	; (800708c <checkAktifCalisma+0x8e0>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d164      	bne.n	80070a0 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006fd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fda:	4823      	ldr	r0, [pc, #140]	; (8007068 <checkAktifCalisma+0x8bc>)
 8006fdc:	f002 ff82 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d10f      	bne.n	8007006 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006fea:	481f      	ldr	r0, [pc, #124]	; (8007068 <checkAktifCalisma+0x8bc>)
 8006fec:	f002 ff7a 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d107      	bne.n	8007006 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006ff6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ffa:	481b      	ldr	r0, [pc, #108]	; (8007068 <checkAktifCalisma+0x8bc>)
 8006ffc:	f002 ff72 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007000:	4603      	mov	r3, r0
 8007002:	2b01      	cmp	r3, #1
 8007004:	d003      	beq.n	800700e <checkAktifCalisma+0x862>
 8007006:	4b22      	ldr	r3, [pc, #136]	; (8007090 <checkAktifCalisma+0x8e4>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d048      	beq.n	80070a0 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800700e:	4b21      	ldr	r3, [pc, #132]	; (8007094 <checkAktifCalisma+0x8e8>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f083 0301 	eor.w	r3, r3, #1
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d041      	beq.n	80070a0 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 800701c:	4b1e      	ldr	r3, [pc, #120]	; (8007098 <checkAktifCalisma+0x8ec>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	f083 0301 	eor.w	r3, r3, #1
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d03a      	beq.n	80070a0 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800702a:	4b1c      	ldr	r3, [pc, #112]	; (800709c <checkAktifCalisma+0x8f0>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	f083 0301 	eor.w	r3, r3, #1
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d033      	beq.n	80070a0 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8007038:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <checkAktifCalisma+0x8b8>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	f083 0301 	eor.w	r3, r3, #1
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d02c      	beq.n	80070a0 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8007046:	4b05      	ldr	r3, [pc, #20]	; (800705c <checkAktifCalisma+0x8b0>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	f083 0301 	eor.w	r3, r3, #1
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d025      	beq.n	80070a0 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8007054:	4b0e      	ldr	r3, [pc, #56]	; (8007090 <checkAktifCalisma+0x8e4>)
 8007056:	2201      	movs	r2, #1
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	e024      	b.n	80070a6 <checkAktifCalisma+0x8fa>
 800705c:	20000d66 	.word	0x20000d66
 8007060:	40011000 	.word	0x40011000
 8007064:	20000d6a 	.word	0x20000d6a
 8007068:	40010c00 	.word	0x40010c00
 800706c:	20000d82 	.word	0x20000d82
 8007070:	20000d83 	.word	0x20000d83
 8007074:	20000d62 	.word	0x20000d62
 8007078:	20000cb0 	.word	0x20000cb0
 800707c:	20000cbc 	.word	0x20000cbc
 8007080:	20000d46 	.word	0x20000d46
 8007084:	20000d4d 	.word	0x20000d4d
 8007088:	20000d3f 	.word	0x20000d3f
 800708c:	20000d41 	.word	0x20000d41
 8007090:	20000d67 	.word	0x20000d67
 8007094:	20000d65 	.word	0x20000d65
 8007098:	20000d69 	.word	0x20000d69
 800709c:	20000d68 	.word	0x20000d68
		} else {
			devmotorasagicalisiyor=0;
 80070a0:	4b96      	ldr	r3, [pc, #600]	; (80072fc <checkAktifCalisma+0xb50>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80070a6:	4b95      	ldr	r3, [pc, #596]	; (80072fc <checkAktifCalisma+0xb50>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d007      	beq.n	80070be <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80070ae:	2201      	movs	r2, #1
 80070b0:	2110      	movs	r1, #16
 80070b2:	4893      	ldr	r0, [pc, #588]	; (8007300 <checkAktifCalisma+0xb54>)
 80070b4:	f002 ff2d 	bl	8009f12 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80070b8:	4b92      	ldr	r3, [pc, #584]	; (8007304 <checkAktifCalisma+0xb58>)
 80070ba:	2201      	movs	r2, #1
 80070bc:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80070be:	4b91      	ldr	r3, [pc, #580]	; (8007304 <checkAktifCalisma+0xb58>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d024      	beq.n	8007110 <checkAktifCalisma+0x964>
 80070c6:	2140      	movs	r1, #64	; 0x40
 80070c8:	488d      	ldr	r0, [pc, #564]	; (8007300 <checkAktifCalisma+0xb54>)
 80070ca:	f002 ff0b 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d007      	beq.n	80070e4 <checkAktifCalisma+0x938>
 80070d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80070d8:	4889      	ldr	r0, [pc, #548]	; (8007300 <checkAktifCalisma+0xb54>)
 80070da:	f002 ff03 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d115      	bne.n	8007110 <checkAktifCalisma+0x964>
 80070e4:	4b88      	ldr	r3, [pc, #544]	; (8007308 <checkAktifCalisma+0xb5c>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d011      	beq.n	8007110 <checkAktifCalisma+0x964>
 80070ec:	4b87      	ldr	r3, [pc, #540]	; (800730c <checkAktifCalisma+0xb60>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00d      	beq.n	8007110 <checkAktifCalisma+0x964>
 80070f4:	4b86      	ldr	r3, [pc, #536]	; (8007310 <checkAktifCalisma+0xb64>)
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	f083 0301 	eor.w	r3, r3, #1
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d006      	beq.n	8007110 <checkAktifCalisma+0x964>
			timer2=millis;
 8007102:	4b84      	ldr	r3, [pc, #528]	; (8007314 <checkAktifCalisma+0xb68>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a84      	ldr	r2, [pc, #528]	; (8007318 <checkAktifCalisma+0xb6c>)
 8007108:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800710a:	4b81      	ldr	r3, [pc, #516]	; (8007310 <checkAktifCalisma+0xb64>)
 800710c:	2201      	movs	r2, #1
 800710e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8007110:	4b80      	ldr	r3, [pc, #512]	; (8007314 <checkAktifCalisma+0xb68>)
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	4b80      	ldr	r3, [pc, #512]	; (8007318 <checkAktifCalisma+0xb6c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	4a80      	ldr	r2, [pc, #512]	; (800731c <checkAktifCalisma+0xb70>)
 800711c:	7812      	ldrb	r2, [r2, #0]
 800711e:	4293      	cmp	r3, r2
 8007120:	d303      	bcc.n	800712a <checkAktifCalisma+0x97e>
 8007122:	4b7b      	ldr	r3, [pc, #492]	; (8007310 <checkAktifCalisma+0xb64>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10d      	bne.n	8007146 <checkAktifCalisma+0x99a>
 800712a:	4b77      	ldr	r3, [pc, #476]	; (8007308 <checkAktifCalisma+0xb5c>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	f083 0301 	eor.w	r3, r3, #1
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d106      	bne.n	8007146 <checkAktifCalisma+0x99a>
 8007138:	4b74      	ldr	r3, [pc, #464]	; (800730c <checkAktifCalisma+0xb60>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	f083 0301 	eor.w	r3, r3, #1
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007146:	2200      	movs	r2, #0
 8007148:	2110      	movs	r1, #16
 800714a:	486d      	ldr	r0, [pc, #436]	; (8007300 <checkAktifCalisma+0xb54>)
 800714c:	f002 fee1 	bl	8009f12 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8007150:	4b6c      	ldr	r3, [pc, #432]	; (8007304 <checkAktifCalisma+0xb58>)
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8007156:	4b6e      	ldr	r3, [pc, #440]	; (8007310 <checkAktifCalisma+0xb64>)
 8007158:	2200      	movs	r2, #0
 800715a:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 800715c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007160:	486f      	ldr	r0, [pc, #444]	; (8007320 <checkAktifCalisma+0xb74>)
 8007162:	f002 febf 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d120      	bne.n	80071ae <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 800716c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007170:	486b      	ldr	r0, [pc, #428]	; (8007320 <checkAktifCalisma+0xb74>)
 8007172:	f002 feb7 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d118      	bne.n	80071ae <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 800717c:	2104      	movs	r1, #4
 800717e:	4868      	ldr	r0, [pc, #416]	; (8007320 <checkAktifCalisma+0xb74>)
 8007180:	f002 feb0 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d111      	bne.n	80071ae <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800718a:	2102      	movs	r1, #2
 800718c:	4864      	ldr	r0, [pc, #400]	; (8007320 <checkAktifCalisma+0xb74>)
 800718e:	f002 fea9 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10a      	bne.n	80071ae <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8007198:	2101      	movs	r1, #1
 800719a:	4861      	ldr	r0, [pc, #388]	; (8007320 <checkAktifCalisma+0xb74>)
 800719c:	f002 fea2 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d103      	bne.n	80071ae <checkAktifCalisma+0xa02>
			makineStop=1;
 80071a6:	4b5f      	ldr	r3, [pc, #380]	; (8007324 <checkAktifCalisma+0xb78>)
 80071a8:	2201      	movs	r2, #1
 80071aa:	701a      	strb	r2, [r3, #0]
 80071ac:	e002      	b.n	80071b4 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80071ae:	4b5d      	ldr	r3, [pc, #372]	; (8007324 <checkAktifCalisma+0xb78>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80071b4:	4b5c      	ldr	r3, [pc, #368]	; (8007328 <checkAktifCalisma+0xb7c>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d144      	bne.n	8007246 <checkAktifCalisma+0xa9a>
 80071bc:	4b5b      	ldr	r3, [pc, #364]	; (800732c <checkAktifCalisma+0xb80>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d003      	beq.n	80071cc <checkAktifCalisma+0xa20>
 80071c4:	4b59      	ldr	r3, [pc, #356]	; (800732c <checkAktifCalisma+0xb80>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d13c      	bne.n	8007246 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80071cc:	2180      	movs	r1, #128	; 0x80
 80071ce:	484c      	ldr	r0, [pc, #304]	; (8007300 <checkAktifCalisma+0xb54>)
 80071d0:	f002 fe88 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d103      	bne.n	80071e2 <checkAktifCalisma+0xa36>
 80071da:	4b55      	ldr	r3, [pc, #340]	; (8007330 <checkAktifCalisma+0xb84>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00b      	beq.n	80071fa <checkAktifCalisma+0xa4e>
 80071e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80071e6:	484e      	ldr	r0, [pc, #312]	; (8007320 <checkAktifCalisma+0xb74>)
 80071e8:	f002 fe7c 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d129      	bne.n	8007246 <checkAktifCalisma+0xa9a>
 80071f2:	4b4f      	ldr	r3, [pc, #316]	; (8007330 <checkAktifCalisma+0xb84>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d125      	bne.n	8007246 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80071fa:	2104      	movs	r1, #4
 80071fc:	4840      	ldr	r0, [pc, #256]	; (8007300 <checkAktifCalisma+0xb54>)
 80071fe:	f002 fe71 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007202:	4603      	mov	r3, r0
 8007204:	2b01      	cmp	r3, #1
 8007206:	d003      	beq.n	8007210 <checkAktifCalisma+0xa64>
 8007208:	4b4a      	ldr	r3, [pc, #296]	; (8007334 <checkAktifCalisma+0xb88>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d11a      	bne.n	8007246 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007210:	2102      	movs	r1, #2
 8007212:	483b      	ldr	r0, [pc, #236]	; (8007300 <checkAktifCalisma+0xb54>)
 8007214:	f002 fe66 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d113      	bne.n	8007246 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800721e:	4b46      	ldr	r3, [pc, #280]	; (8007338 <checkAktifCalisma+0xb8c>)
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	f083 0301 	eor.w	r3, r3, #1
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00c      	beq.n	8007246 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 800722c:	4b3d      	ldr	r3, [pc, #244]	; (8007324 <checkAktifCalisma+0xb78>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d008      	beq.n	8007246 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8007234:	4b41      	ldr	r3, [pc, #260]	; (800733c <checkAktifCalisma+0xb90>)
 8007236:	2201      	movs	r2, #1
 8007238:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800723a:	4b36      	ldr	r3, [pc, #216]	; (8007314 <checkAktifCalisma+0xb68>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a40      	ldr	r2, [pc, #256]	; (8007340 <checkAktifCalisma+0xb94>)
 8007240:	6013      	str	r3, [r2, #0]
			bekle();
 8007242:	f7ff f87d 	bl	8006340 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8007246:	4b33      	ldr	r3, [pc, #204]	; (8007314 <checkAktifCalisma+0xb68>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	4b3d      	ldr	r3, [pc, #244]	; (8007340 <checkAktifCalisma+0xb94>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	4a3c      	ldr	r2, [pc, #240]	; (8007344 <checkAktifCalisma+0xb98>)
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	4293      	cmp	r3, r2
 8007256:	d211      	bcs.n	800727c <checkAktifCalisma+0xad0>
 8007258:	2104      	movs	r1, #4
 800725a:	4829      	ldr	r0, [pc, #164]	; (8007300 <checkAktifCalisma+0xb54>)
 800725c:	f002 fe42 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <checkAktifCalisma+0xad0>
 8007266:	4b33      	ldr	r3, [pc, #204]	; (8007334 <checkAktifCalisma+0xb88>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d006      	beq.n	800727c <checkAktifCalisma+0xad0>
 800726e:	4b2d      	ldr	r3, [pc, #180]	; (8007324 <checkAktifCalisma+0xb78>)
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	f083 0301 	eor.w	r3, r3, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 800727c:	4b2f      	ldr	r3, [pc, #188]	; (800733c <checkAktifCalisma+0xb90>)
 800727e:	2200      	movs	r2, #0
 8007280:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007282:	4b29      	ldr	r3, [pc, #164]	; (8007328 <checkAktifCalisma+0xb7c>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d160      	bne.n	800734c <checkAktifCalisma+0xba0>
 800728a:	4b28      	ldr	r3, [pc, #160]	; (800732c <checkAktifCalisma+0xb80>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d003      	beq.n	800729a <checkAktifCalisma+0xaee>
 8007292:	4b26      	ldr	r3, [pc, #152]	; (800732c <checkAktifCalisma+0xb80>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2b03      	cmp	r3, #3
 8007298:	d158      	bne.n	800734c <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800729a:	2104      	movs	r1, #4
 800729c:	4818      	ldr	r0, [pc, #96]	; (8007300 <checkAktifCalisma+0xb54>)
 800729e:	f002 fe21 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d003      	beq.n	80072b0 <checkAktifCalisma+0xb04>
 80072a8:	4b22      	ldr	r3, [pc, #136]	; (8007334 <checkAktifCalisma+0xb88>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d14d      	bne.n	800734c <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80072b0:	2102      	movs	r1, #2
 80072b2:	4813      	ldr	r0, [pc, #76]	; (8007300 <checkAktifCalisma+0xb54>)
 80072b4:	f002 fe16 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d146      	bne.n	800734c <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80072be:	2180      	movs	r1, #128	; 0x80
 80072c0:	480f      	ldr	r0, [pc, #60]	; (8007300 <checkAktifCalisma+0xb54>)
 80072c2:	f002 fe0f 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d103      	bne.n	80072d4 <checkAktifCalisma+0xb28>
 80072cc:	4b18      	ldr	r3, [pc, #96]	; (8007330 <checkAktifCalisma+0xb84>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00b      	beq.n	80072ec <checkAktifCalisma+0xb40>
 80072d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80072d8:	4811      	ldr	r0, [pc, #68]	; (8007320 <checkAktifCalisma+0xb74>)
 80072da:	f002 fe03 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d133      	bne.n	800734c <checkAktifCalisma+0xba0>
 80072e4:	4b12      	ldr	r3, [pc, #72]	; (8007330 <checkAktifCalisma+0xb84>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d12f      	bne.n	800734c <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 80072ec:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <checkAktifCalisma+0xb78>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d02b      	beq.n	800734c <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 80072f4:	4b14      	ldr	r3, [pc, #80]	; (8007348 <checkAktifCalisma+0xb9c>)
 80072f6:	2201      	movs	r2, #1
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	e02a      	b.n	8007352 <checkAktifCalisma+0xba6>
 80072fc:	20000d67 	.word	0x20000d67
 8007300:	40011000 	.word	0x40011000
 8007304:	20000d6b 	.word	0x20000d6b
 8007308:	20000d82 	.word	0x20000d82
 800730c:	20000d83 	.word	0x20000d83
 8007310:	20000d63 	.word	0x20000d63
 8007314:	20000cb0 	.word	0x20000cb0
 8007318:	20000cbc 	.word	0x20000cbc
 800731c:	20000d46 	.word	0x20000d46
 8007320:	40010c00 	.word	0x40010c00
 8007324:	20000d72 	.word	0x20000d72
 8007328:	20000d39 	.word	0x20000d39
 800732c:	20000d38 	.word	0x20000d38
 8007330:	20000d3c 	.word	0x20000d3c
 8007334:	20000d36 	.word	0x20000d36
 8007338:	20000d5f 	.word	0x20000d5f
 800733c:	20000d73 	.word	0x20000d73
 8007340:	20000cb4 	.word	0x20000cb4
 8007344:	20000d49 	.word	0x20000d49
 8007348:	20000d74 	.word	0x20000d74
		} else {
			kapi1butonkontrol=0;
 800734c:	4b8b      	ldr	r3, [pc, #556]	; (800757c <checkAktifCalisma+0xdd0>)
 800734e:	2200      	movs	r2, #0
 8007350:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007352:	4b8b      	ldr	r3, [pc, #556]	; (8007580 <checkAktifCalisma+0xdd4>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b02      	cmp	r3, #2
 8007358:	d121      	bne.n	800739e <checkAktifCalisma+0xbf2>
 800735a:	4b8a      	ldr	r3, [pc, #552]	; (8007584 <checkAktifCalisma+0xdd8>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d003      	beq.n	800736a <checkAktifCalisma+0xbbe>
 8007362:	4b88      	ldr	r3, [pc, #544]	; (8007584 <checkAktifCalisma+0xdd8>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	2b03      	cmp	r3, #3
 8007368:	d119      	bne.n	800739e <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800736a:	2104      	movs	r1, #4
 800736c:	4886      	ldr	r0, [pc, #536]	; (8007588 <checkAktifCalisma+0xddc>)
 800736e:	f002 fdb9 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007372:	4603      	mov	r3, r0
 8007374:	2b01      	cmp	r3, #1
 8007376:	d003      	beq.n	8007380 <checkAktifCalisma+0xbd4>
 8007378:	4b84      	ldr	r3, [pc, #528]	; (800758c <checkAktifCalisma+0xde0>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10e      	bne.n	800739e <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007380:	2102      	movs	r1, #2
 8007382:	4881      	ldr	r0, [pc, #516]	; (8007588 <checkAktifCalisma+0xddc>)
 8007384:	f002 fdae 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d107      	bne.n	800739e <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 800738e:	4b80      	ldr	r3, [pc, #512]	; (8007590 <checkAktifCalisma+0xde4>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8007396:	4b7f      	ldr	r3, [pc, #508]	; (8007594 <checkAktifCalisma+0xde8>)
 8007398:	2201      	movs	r2, #1
 800739a:	701a      	strb	r2, [r3, #0]
 800739c:	e002      	b.n	80073a4 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 800739e:	4b7d      	ldr	r3, [pc, #500]	; (8007594 <checkAktifCalisma+0xde8>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80073a4:	4b75      	ldr	r3, [pc, #468]	; (800757c <checkAktifCalisma+0xdd0>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d107      	bne.n	80073bc <checkAktifCalisma+0xc10>
 80073ac:	4b79      	ldr	r3, [pc, #484]	; (8007594 <checkAktifCalisma+0xde8>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d103      	bne.n	80073bc <checkAktifCalisma+0xc10>
 80073b4:	4b78      	ldr	r3, [pc, #480]	; (8007598 <checkAktifCalisma+0xdec>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80073bc:	2201      	movs	r2, #1
 80073be:	2180      	movs	r1, #128	; 0x80
 80073c0:	4876      	ldr	r0, [pc, #472]	; (800759c <checkAktifCalisma+0xdf0>)
 80073c2:	f002 fda6 	bl	8009f12 <HAL_GPIO_WritePin>
 80073c6:	e004      	b.n	80073d2 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80073c8:	2200      	movs	r2, #0
 80073ca:	2180      	movs	r1, #128	; 0x80
 80073cc:	4873      	ldr	r0, [pc, #460]	; (800759c <checkAktifCalisma+0xdf0>)
 80073ce:	f002 fda0 	bl	8009f12 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80073d2:	4b73      	ldr	r3, [pc, #460]	; (80075a0 <checkAktifCalisma+0xdf4>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d141      	bne.n	800745e <checkAktifCalisma+0xcb2>
 80073da:	4b6a      	ldr	r3, [pc, #424]	; (8007584 <checkAktifCalisma+0xdd8>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d003      	beq.n	80073ea <checkAktifCalisma+0xc3e>
 80073e2:	4b68      	ldr	r3, [pc, #416]	; (8007584 <checkAktifCalisma+0xdd8>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d139      	bne.n	800745e <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80073ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80073ee:	4866      	ldr	r0, [pc, #408]	; (8007588 <checkAktifCalisma+0xddc>)
 80073f0:	f002 fd78 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <checkAktifCalisma+0xc56>
 80073fa:	4b6a      	ldr	r3, [pc, #424]	; (80075a4 <checkAktifCalisma+0xdf8>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00b      	beq.n	800741a <checkAktifCalisma+0xc6e>
 8007402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007406:	4868      	ldr	r0, [pc, #416]	; (80075a8 <checkAktifCalisma+0xdfc>)
 8007408:	f002 fd6c 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d125      	bne.n	800745e <checkAktifCalisma+0xcb2>
 8007412:	4b64      	ldr	r3, [pc, #400]	; (80075a4 <checkAktifCalisma+0xdf8>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d121      	bne.n	800745e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800741a:	2102      	movs	r1, #2
 800741c:	485a      	ldr	r0, [pc, #360]	; (8007588 <checkAktifCalisma+0xddc>)
 800741e:	f002 fd61 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007422:	4603      	mov	r3, r0
 8007424:	2b01      	cmp	r3, #1
 8007426:	d11a      	bne.n	800745e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007428:	2104      	movs	r1, #4
 800742a:	4857      	ldr	r0, [pc, #348]	; (8007588 <checkAktifCalisma+0xddc>)
 800742c:	f002 fd5a 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d113      	bne.n	800745e <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8007436:	4b56      	ldr	r3, [pc, #344]	; (8007590 <checkAktifCalisma+0xde4>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00f      	beq.n	800745e <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 800743e:	4b5b      	ldr	r3, [pc, #364]	; (80075ac <checkAktifCalisma+0xe00>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	f083 0301 	eor.w	r3, r3, #1
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d008      	beq.n	800745e <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 800744c:	4b58      	ldr	r3, [pc, #352]	; (80075b0 <checkAktifCalisma+0xe04>)
 800744e:	2201      	movs	r2, #1
 8007450:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007452:	4b58      	ldr	r3, [pc, #352]	; (80075b4 <checkAktifCalisma+0xe08>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a58      	ldr	r2, [pc, #352]	; (80075b8 <checkAktifCalisma+0xe0c>)
 8007458:	6013      	str	r3, [r2, #0]
			bekle();
 800745a:	f7fe ff71 	bl	8006340 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800745e:	4b55      	ldr	r3, [pc, #340]	; (80075b4 <checkAktifCalisma+0xe08>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	4b55      	ldr	r3, [pc, #340]	; (80075b8 <checkAktifCalisma+0xe0c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	4a54      	ldr	r2, [pc, #336]	; (80075bc <checkAktifCalisma+0xe10>)
 800746a:	7812      	ldrb	r2, [r2, #0]
 800746c:	4293      	cmp	r3, r2
 800746e:	d20d      	bcs.n	800748c <checkAktifCalisma+0xce0>
 8007470:	2102      	movs	r1, #2
 8007472:	4845      	ldr	r0, [pc, #276]	; (8007588 <checkAktifCalisma+0xddc>)
 8007474:	f002 fd36 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d006      	beq.n	800748c <checkAktifCalisma+0xce0>
 800747e:	4b44      	ldr	r3, [pc, #272]	; (8007590 <checkAktifCalisma+0xde4>)
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	f083 0301 	eor.w	r3, r3, #1
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 800748c:	4b48      	ldr	r3, [pc, #288]	; (80075b0 <checkAktifCalisma+0xe04>)
 800748e:	2200      	movs	r2, #0
 8007490:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007492:	4b43      	ldr	r3, [pc, #268]	; (80075a0 <checkAktifCalisma+0xdf4>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d135      	bne.n	8007506 <checkAktifCalisma+0xd5a>
 800749a:	4b3a      	ldr	r3, [pc, #232]	; (8007584 <checkAktifCalisma+0xdd8>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d003      	beq.n	80074aa <checkAktifCalisma+0xcfe>
 80074a2:	4b38      	ldr	r3, [pc, #224]	; (8007584 <checkAktifCalisma+0xdd8>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d12d      	bne.n	8007506 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80074aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80074ae:	4836      	ldr	r0, [pc, #216]	; (8007588 <checkAktifCalisma+0xddc>)
 80074b0:	f002 fd18 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d103      	bne.n	80074c2 <checkAktifCalisma+0xd16>
 80074ba:	4b3a      	ldr	r3, [pc, #232]	; (80075a4 <checkAktifCalisma+0xdf8>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00b      	beq.n	80074da <checkAktifCalisma+0xd2e>
 80074c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80074c6:	4838      	ldr	r0, [pc, #224]	; (80075a8 <checkAktifCalisma+0xdfc>)
 80074c8:	f002 fd0c 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d119      	bne.n	8007506 <checkAktifCalisma+0xd5a>
 80074d2:	4b34      	ldr	r3, [pc, #208]	; (80075a4 <checkAktifCalisma+0xdf8>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d115      	bne.n	8007506 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80074da:	2102      	movs	r1, #2
 80074dc:	482a      	ldr	r0, [pc, #168]	; (8007588 <checkAktifCalisma+0xddc>)
 80074de:	f002 fd01 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d10e      	bne.n	8007506 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80074e8:	2104      	movs	r1, #4
 80074ea:	4827      	ldr	r0, [pc, #156]	; (8007588 <checkAktifCalisma+0xddc>)
 80074ec:	f002 fcfa 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d107      	bne.n	8007506 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 80074f6:	4b26      	ldr	r3, [pc, #152]	; (8007590 <checkAktifCalisma+0xde4>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 80074fe:	4b30      	ldr	r3, [pc, #192]	; (80075c0 <checkAktifCalisma+0xe14>)
 8007500:	2201      	movs	r2, #1
 8007502:	701a      	strb	r2, [r3, #0]
 8007504:	e002      	b.n	800750c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8007506:	4b2e      	ldr	r3, [pc, #184]	; (80075c0 <checkAktifCalisma+0xe14>)
 8007508:	2200      	movs	r2, #0
 800750a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800750c:	4b24      	ldr	r3, [pc, #144]	; (80075a0 <checkAktifCalisma+0xdf4>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d11d      	bne.n	8007550 <checkAktifCalisma+0xda4>
 8007514:	4b1b      	ldr	r3, [pc, #108]	; (8007584 <checkAktifCalisma+0xdd8>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d003      	beq.n	8007524 <checkAktifCalisma+0xd78>
 800751c:	4b19      	ldr	r3, [pc, #100]	; (8007584 <checkAktifCalisma+0xdd8>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b03      	cmp	r3, #3
 8007522:	d115      	bne.n	8007550 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007524:	2102      	movs	r1, #2
 8007526:	4818      	ldr	r0, [pc, #96]	; (8007588 <checkAktifCalisma+0xddc>)
 8007528:	f002 fcdc 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800752c:	4603      	mov	r3, r0
 800752e:	2b01      	cmp	r3, #1
 8007530:	d10e      	bne.n	8007550 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007532:	2104      	movs	r1, #4
 8007534:	4814      	ldr	r0, [pc, #80]	; (8007588 <checkAktifCalisma+0xddc>)
 8007536:	f002 fcd5 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d107      	bne.n	8007550 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8007540:	4b13      	ldr	r3, [pc, #76]	; (8007590 <checkAktifCalisma+0xde4>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8007548:	4b1e      	ldr	r3, [pc, #120]	; (80075c4 <checkAktifCalisma+0xe18>)
 800754a:	2201      	movs	r2, #1
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	e002      	b.n	8007556 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8007550:	4b1c      	ldr	r3, [pc, #112]	; (80075c4 <checkAktifCalisma+0xe18>)
 8007552:	2200      	movs	r2, #0
 8007554:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8007556:	4b1a      	ldr	r3, [pc, #104]	; (80075c0 <checkAktifCalisma+0xe14>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d107      	bne.n	800756e <checkAktifCalisma+0xdc2>
 800755e:	4b19      	ldr	r3, [pc, #100]	; (80075c4 <checkAktifCalisma+0xe18>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d103      	bne.n	800756e <checkAktifCalisma+0xdc2>
 8007566:	4b12      	ldr	r3, [pc, #72]	; (80075b0 <checkAktifCalisma+0xe04>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d02c      	beq.n	80075c8 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800756e:	2201      	movs	r2, #1
 8007570:	2140      	movs	r1, #64	; 0x40
 8007572:	480a      	ldr	r0, [pc, #40]	; (800759c <checkAktifCalisma+0xdf0>)
 8007574:	f002 fccd 	bl	8009f12 <HAL_GPIO_WritePin>
 8007578:	e02b      	b.n	80075d2 <checkAktifCalisma+0xe26>
 800757a:	bf00      	nop
 800757c:	20000d74 	.word	0x20000d74
 8007580:	20000d39 	.word	0x20000d39
 8007584:	20000d38 	.word	0x20000d38
 8007588:	40011000 	.word	0x40011000
 800758c:	20000d36 	.word	0x20000d36
 8007590:	20000d72 	.word	0x20000d72
 8007594:	20000d75 	.word	0x20000d75
 8007598:	20000d73 	.word	0x20000d73
 800759c:	40010800 	.word	0x40010800
 80075a0:	20000d3a 	.word	0x20000d3a
 80075a4:	20000d3c 	.word	0x20000d3c
 80075a8:	40010c00 	.word	0x40010c00
 80075ac:	20000d5f 	.word	0x20000d5f
 80075b0:	20000d76 	.word	0x20000d76
 80075b4:	20000cb0 	.word	0x20000cb0
 80075b8:	20000cb4 	.word	0x20000cb4
 80075bc:	20000d4a 	.word	0x20000d4a
 80075c0:	20000d77 	.word	0x20000d77
 80075c4:	20000d78 	.word	0x20000d78
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80075c8:	2200      	movs	r2, #0
 80075ca:	2140      	movs	r1, #64	; 0x40
 80075cc:	488d      	ldr	r0, [pc, #564]	; (8007804 <checkAktifCalisma+0x1058>)
 80075ce:	f002 fca0 	bl	8009f12 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 80075d2:	4b8d      	ldr	r3, [pc, #564]	; (8007808 <checkAktifCalisma+0x105c>)
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <checkAktifCalisma+0xe36>
 80075da:	4b8b      	ldr	r3, [pc, #556]	; (8007808 <checkAktifCalisma+0x105c>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d115      	bne.n	800760e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80075e2:	2104      	movs	r1, #4
 80075e4:	4889      	ldr	r0, [pc, #548]	; (800780c <checkAktifCalisma+0x1060>)
 80075e6:	f002 fc7d 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d003      	beq.n	80075f8 <checkAktifCalisma+0xe4c>
 80075f0:	4b87      	ldr	r3, [pc, #540]	; (8007810 <checkAktifCalisma+0x1064>)
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10a      	bne.n	800760e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80075f8:	2102      	movs	r1, #2
 80075fa:	4884      	ldr	r0, [pc, #528]	; (800780c <checkAktifCalisma+0x1060>)
 80075fc:	f002 fc72 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d103      	bne.n	800760e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8007606:	4b83      	ldr	r3, [pc, #524]	; (8007814 <checkAktifCalisma+0x1068>)
 8007608:	2201      	movs	r2, #1
 800760a:	701a      	strb	r2, [r3, #0]
 800760c:	e002      	b.n	8007614 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 800760e:	4b81      	ldr	r3, [pc, #516]	; (8007814 <checkAktifCalisma+0x1068>)
 8007610:	2200      	movs	r2, #0
 8007612:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8007614:	4b7c      	ldr	r3, [pc, #496]	; (8007808 <checkAktifCalisma+0x105c>)
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d003      	beq.n	8007624 <checkAktifCalisma+0xe78>
 800761c:	4b7a      	ldr	r3, [pc, #488]	; (8007808 <checkAktifCalisma+0x105c>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d111      	bne.n	8007648 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007624:	2102      	movs	r1, #2
 8007626:	4879      	ldr	r0, [pc, #484]	; (800780c <checkAktifCalisma+0x1060>)
 8007628:	f002 fc5c 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800762c:	4603      	mov	r3, r0
 800762e:	2b01      	cmp	r3, #1
 8007630:	d10a      	bne.n	8007648 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8007632:	2104      	movs	r1, #4
 8007634:	4875      	ldr	r0, [pc, #468]	; (800780c <checkAktifCalisma+0x1060>)
 8007636:	f002 fc55 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d103      	bne.n	8007648 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8007640:	4b75      	ldr	r3, [pc, #468]	; (8007818 <checkAktifCalisma+0x106c>)
 8007642:	2201      	movs	r2, #1
 8007644:	701a      	strb	r2, [r3, #0]
 8007646:	e002      	b.n	800764e <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8007648:	4b73      	ldr	r3, [pc, #460]	; (8007818 <checkAktifCalisma+0x106c>)
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 800764e:	4b71      	ldr	r3, [pc, #452]	; (8007814 <checkAktifCalisma+0x1068>)
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00f      	beq.n	8007676 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8007656:	4b71      	ldr	r3, [pc, #452]	; (800781c <checkAktifCalisma+0x1070>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d10b      	bne.n	8007676 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800765e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007662:	486f      	ldr	r0, [pc, #444]	; (8007820 <checkAktifCalisma+0x1074>)
 8007664:	f002 fc3e 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d103      	bne.n	8007676 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 800766e:	4b6d      	ldr	r3, [pc, #436]	; (8007824 <checkAktifCalisma+0x1078>)
 8007670:	2201      	movs	r2, #1
 8007672:	701a      	strb	r2, [r3, #0]
 8007674:	e002      	b.n	800767c <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8007676:	4b6b      	ldr	r3, [pc, #428]	; (8007824 <checkAktifCalisma+0x1078>)
 8007678:	2200      	movs	r2, #0
 800767a:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 800767c:	4b66      	ldr	r3, [pc, #408]	; (8007818 <checkAktifCalisma+0x106c>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00f      	beq.n	80076a4 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8007684:	4b65      	ldr	r3, [pc, #404]	; (800781c <checkAktifCalisma+0x1070>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d10b      	bne.n	80076a4 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 800768c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007690:	4863      	ldr	r0, [pc, #396]	; (8007820 <checkAktifCalisma+0x1074>)
 8007692:	f002 fc27 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d103      	bne.n	80076a4 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 800769c:	4b62      	ldr	r3, [pc, #392]	; (8007828 <checkAktifCalisma+0x107c>)
 800769e:	2201      	movs	r2, #1
 80076a0:	701a      	strb	r2, [r3, #0]
 80076a2:	e002      	b.n	80076aa <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 80076a4:	4b60      	ldr	r3, [pc, #384]	; (8007828 <checkAktifCalisma+0x107c>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80076aa:	4b60      	ldr	r3, [pc, #384]	; (800782c <checkAktifCalisma+0x1080>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d137      	bne.n	8007722 <checkAktifCalisma+0xf76>
 80076b2:	4b5f      	ldr	r3, [pc, #380]	; (8007830 <checkAktifCalisma+0x1084>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d003      	beq.n	80076c2 <checkAktifCalisma+0xf16>
 80076ba:	4b5d      	ldr	r3, [pc, #372]	; (8007830 <checkAktifCalisma+0x1084>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d12f      	bne.n	8007722 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80076c2:	4b54      	ldr	r3, [pc, #336]	; (8007814 <checkAktifCalisma+0x1068>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d103      	bne.n	80076d2 <checkAktifCalisma+0xf26>
 80076ca:	4b53      	ldr	r3, [pc, #332]	; (8007818 <checkAktifCalisma+0x106c>)
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d027      	beq.n	8007722 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80076d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076d6:	484d      	ldr	r0, [pc, #308]	; (800780c <checkAktifCalisma+0x1060>)
 80076d8:	f002 fc04 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d103      	bne.n	80076ea <checkAktifCalisma+0xf3e>
 80076e2:	4b4e      	ldr	r3, [pc, #312]	; (800781c <checkAktifCalisma+0x1070>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d007      	beq.n	80076fa <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80076ea:	4b4e      	ldr	r3, [pc, #312]	; (8007824 <checkAktifCalisma+0x1078>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <checkAktifCalisma+0xf4e>
 80076f2:	4b4d      	ldr	r3, [pc, #308]	; (8007828 <checkAktifCalisma+0x107c>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d013      	beq.n	8007722 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 80076fa:	4b4e      	ldr	r3, [pc, #312]	; (8007834 <checkAktifCalisma+0x1088>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00f      	beq.n	8007722 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8007702:	4b4d      	ldr	r3, [pc, #308]	; (8007838 <checkAktifCalisma+0x108c>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	f083 0301 	eor.w	r3, r3, #1
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d008      	beq.n	8007722 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8007710:	4b4a      	ldr	r3, [pc, #296]	; (800783c <checkAktifCalisma+0x1090>)
 8007712:	2201      	movs	r2, #1
 8007714:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007716:	4b4a      	ldr	r3, [pc, #296]	; (8007840 <checkAktifCalisma+0x1094>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a4a      	ldr	r2, [pc, #296]	; (8007844 <checkAktifCalisma+0x1098>)
 800771c:	6013      	str	r3, [r2, #0]
			bekle();
 800771e:	f7fe fe0f 	bl	8006340 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8007722:	4b47      	ldr	r3, [pc, #284]	; (8007840 <checkAktifCalisma+0x1094>)
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	4b47      	ldr	r3, [pc, #284]	; (8007844 <checkAktifCalisma+0x1098>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	4a46      	ldr	r2, [pc, #280]	; (8007848 <checkAktifCalisma+0x109c>)
 800772e:	7812      	ldrb	r2, [r2, #0]
 8007730:	4293      	cmp	r3, r2
 8007732:	d214      	bcs.n	800775e <checkAktifCalisma+0xfb2>
 8007734:	4b37      	ldr	r3, [pc, #220]	; (8007814 <checkAktifCalisma+0x1068>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	f083 0301 	eor.w	r3, r3, #1
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d006      	beq.n	8007750 <checkAktifCalisma+0xfa4>
 8007742:	4b35      	ldr	r3, [pc, #212]	; (8007818 <checkAktifCalisma+0x106c>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	f083 0301 	eor.w	r3, r3, #1
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d106      	bne.n	800775e <checkAktifCalisma+0xfb2>
 8007750:	4b38      	ldr	r3, [pc, #224]	; (8007834 <checkAktifCalisma+0x1088>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	f083 0301 	eor.w	r3, r3, #1
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 800775e:	4b37      	ldr	r3, [pc, #220]	; (800783c <checkAktifCalisma+0x1090>)
 8007760:	2200      	movs	r2, #0
 8007762:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007764:	4b31      	ldr	r3, [pc, #196]	; (800782c <checkAktifCalisma+0x1080>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d12b      	bne.n	80077c4 <checkAktifCalisma+0x1018>
 800776c:	4b30      	ldr	r3, [pc, #192]	; (8007830 <checkAktifCalisma+0x1084>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b02      	cmp	r3, #2
 8007772:	d003      	beq.n	800777c <checkAktifCalisma+0xfd0>
 8007774:	4b2e      	ldr	r3, [pc, #184]	; (8007830 <checkAktifCalisma+0x1084>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b03      	cmp	r3, #3
 800777a:	d123      	bne.n	80077c4 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800777c:	4b25      	ldr	r3, [pc, #148]	; (8007814 <checkAktifCalisma+0x1068>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d103      	bne.n	800778c <checkAktifCalisma+0xfe0>
 8007784:	4b24      	ldr	r3, [pc, #144]	; (8007818 <checkAktifCalisma+0x106c>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01b      	beq.n	80077c4 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800778c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007790:	481e      	ldr	r0, [pc, #120]	; (800780c <checkAktifCalisma+0x1060>)
 8007792:	f002 fba7 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d103      	bne.n	80077a4 <checkAktifCalisma+0xff8>
 800779c:	4b1f      	ldr	r3, [pc, #124]	; (800781c <checkAktifCalisma+0x1070>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d007      	beq.n	80077b4 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80077a4:	4b1f      	ldr	r3, [pc, #124]	; (8007824 <checkAktifCalisma+0x1078>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d103      	bne.n	80077b4 <checkAktifCalisma+0x1008>
 80077ac:	4b1e      	ldr	r3, [pc, #120]	; (8007828 <checkAktifCalisma+0x107c>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d007      	beq.n	80077c4 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 80077b4:	4b1f      	ldr	r3, [pc, #124]	; (8007834 <checkAktifCalisma+0x1088>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 80077bc:	4b23      	ldr	r3, [pc, #140]	; (800784c <checkAktifCalisma+0x10a0>)
 80077be:	2201      	movs	r2, #1
 80077c0:	701a      	strb	r2, [r3, #0]
 80077c2:	e002      	b.n	80077ca <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 80077c4:	4b21      	ldr	r3, [pc, #132]	; (800784c <checkAktifCalisma+0x10a0>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80077ca:	4b18      	ldr	r3, [pc, #96]	; (800782c <checkAktifCalisma+0x1080>)
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d140      	bne.n	8007854 <checkAktifCalisma+0x10a8>
 80077d2:	4b17      	ldr	r3, [pc, #92]	; (8007830 <checkAktifCalisma+0x1084>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d003      	beq.n	80077e2 <checkAktifCalisma+0x1036>
 80077da:	4b15      	ldr	r3, [pc, #84]	; (8007830 <checkAktifCalisma+0x1084>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d138      	bne.n	8007854 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80077e2:	4b0c      	ldr	r3, [pc, #48]	; (8007814 <checkAktifCalisma+0x1068>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d103      	bne.n	80077f2 <checkAktifCalisma+0x1046>
 80077ea:	4b0b      	ldr	r3, [pc, #44]	; (8007818 <checkAktifCalisma+0x106c>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d030      	beq.n	8007854 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 80077f2:	4b10      	ldr	r3, [pc, #64]	; (8007834 <checkAktifCalisma+0x1088>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d02c      	beq.n	8007854 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 80077fa:	4b15      	ldr	r3, [pc, #84]	; (8007850 <checkAktifCalisma+0x10a4>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	701a      	strb	r2, [r3, #0]
 8007800:	e02b      	b.n	800785a <checkAktifCalisma+0x10ae>
 8007802:	bf00      	nop
 8007804:	40010800 	.word	0x40010800
 8007808:	20000d3d 	.word	0x20000d3d
 800780c:	40011000 	.word	0x40011000
 8007810:	20000d36 	.word	0x20000d36
 8007814:	20000d7c 	.word	0x20000d7c
 8007818:	20000d7d 	.word	0x20000d7d
 800781c:	20000d3c 	.word	0x20000d3c
 8007820:	40010c00 	.word	0x40010c00
 8007824:	20000d8c 	.word	0x20000d8c
 8007828:	20000d8d 	.word	0x20000d8d
 800782c:	20000d3b 	.word	0x20000d3b
 8007830:	20000d38 	.word	0x20000d38
 8007834:	20000d72 	.word	0x20000d72
 8007838:	20000d5f 	.word	0x20000d5f
 800783c:	20000d79 	.word	0x20000d79
 8007840:	20000cb0 	.word	0x20000cb0
 8007844:	20000cb4 	.word	0x20000cb4
 8007848:	20000d4b 	.word	0x20000d4b
 800784c:	20000d7a 	.word	0x20000d7a
 8007850:	20000d7b 	.word	0x20000d7b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8007854:	4b8b      	ldr	r3, [pc, #556]	; (8007a84 <checkAktifCalisma+0x12d8>)
 8007856:	2200      	movs	r2, #0
 8007858:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800785a:	4b8b      	ldr	r3, [pc, #556]	; (8007a88 <checkAktifCalisma+0x12dc>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d107      	bne.n	8007872 <checkAktifCalisma+0x10c6>
 8007862:	4b8a      	ldr	r3, [pc, #552]	; (8007a8c <checkAktifCalisma+0x12e0>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <checkAktifCalisma+0x10c6>
 800786a:	4b86      	ldr	r3, [pc, #536]	; (8007a84 <checkAktifCalisma+0x12d8>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d005      	beq.n	800787e <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007872:	2201      	movs	r2, #1
 8007874:	2120      	movs	r1, #32
 8007876:	4886      	ldr	r0, [pc, #536]	; (8007a90 <checkAktifCalisma+0x12e4>)
 8007878:	f002 fb4b 	bl	8009f12 <HAL_GPIO_WritePin>
 800787c:	e004      	b.n	8007888 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800787e:	2200      	movs	r2, #0
 8007880:	2120      	movs	r1, #32
 8007882:	4883      	ldr	r0, [pc, #524]	; (8007a90 <checkAktifCalisma+0x12e4>)
 8007884:	f002 fb45 	bl	8009f12 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8007888:	4b82      	ldr	r3, [pc, #520]	; (8007a94 <checkAktifCalisma+0x12e8>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00e      	beq.n	80078ae <checkAktifCalisma+0x1102>
 8007890:	2102      	movs	r1, #2
 8007892:	4881      	ldr	r0, [pc, #516]	; (8007a98 <checkAktifCalisma+0x12ec>)
 8007894:	f002 fb26 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007898:	4603      	mov	r3, r0
 800789a:	2b01      	cmp	r3, #1
 800789c:	d107      	bne.n	80078ae <checkAktifCalisma+0x1102>
 800789e:	4b7f      	ldr	r3, [pc, #508]	; (8007a9c <checkAktifCalisma+0x12f0>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d103      	bne.n	80078ae <checkAktifCalisma+0x1102>
 80078a6:	4b7e      	ldr	r3, [pc, #504]	; (8007aa0 <checkAktifCalisma+0x12f4>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d112      	bne.n	80078d4 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80078ae:	4b7d      	ldr	r3, [pc, #500]	; (8007aa4 <checkAktifCalisma+0x12f8>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d066      	beq.n	8007984 <checkAktifCalisma+0x11d8>
 80078b6:	2104      	movs	r1, #4
 80078b8:	4877      	ldr	r0, [pc, #476]	; (8007a98 <checkAktifCalisma+0x12ec>)
 80078ba:	f002 fb13 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d15f      	bne.n	8007984 <checkAktifCalisma+0x11d8>
 80078c4:	4b75      	ldr	r3, [pc, #468]	; (8007a9c <checkAktifCalisma+0x12f0>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d05b      	beq.n	8007984 <checkAktifCalisma+0x11d8>
 80078cc:	4b74      	ldr	r3, [pc, #464]	; (8007aa0 <checkAktifCalisma+0x12f4>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d057      	beq.n	8007984 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 80078d4:	4b74      	ldr	r3, [pc, #464]	; (8007aa8 <checkAktifCalisma+0x12fc>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	3301      	adds	r3, #1
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	4b72      	ldr	r3, [pc, #456]	; (8007aa8 <checkAktifCalisma+0x12fc>)
 80078de:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 80078e0:	4b71      	ldr	r3, [pc, #452]	; (8007aa8 <checkAktifCalisma+0x12fc>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b09      	cmp	r3, #9
 80078e6:	d908      	bls.n	80078fa <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 80078e8:	4b6f      	ldr	r3, [pc, #444]	; (8007aa8 <checkAktifCalisma+0x12fc>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 80078ee:	4b6f      	ldr	r3, [pc, #444]	; (8007aac <checkAktifCalisma+0x1300>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	3301      	adds	r3, #1
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	4b6d      	ldr	r3, [pc, #436]	; (8007aac <checkAktifCalisma+0x1300>)
 80078f8:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 80078fa:	4b6c      	ldr	r3, [pc, #432]	; (8007aac <checkAktifCalisma+0x1300>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b09      	cmp	r3, #9
 8007900:	d908      	bls.n	8007914 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8007902:	4b6a      	ldr	r3, [pc, #424]	; (8007aac <checkAktifCalisma+0x1300>)
 8007904:	2200      	movs	r2, #0
 8007906:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8007908:	4b69      	ldr	r3, [pc, #420]	; (8007ab0 <checkAktifCalisma+0x1304>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	3301      	adds	r3, #1
 800790e:	b2da      	uxtb	r2, r3
 8007910:	4b67      	ldr	r3, [pc, #412]	; (8007ab0 <checkAktifCalisma+0x1304>)
 8007912:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8007914:	4b66      	ldr	r3, [pc, #408]	; (8007ab0 <checkAktifCalisma+0x1304>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b09      	cmp	r3, #9
 800791a:	d908      	bls.n	800792e <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 800791c:	4b64      	ldr	r3, [pc, #400]	; (8007ab0 <checkAktifCalisma+0x1304>)
 800791e:	2200      	movs	r2, #0
 8007920:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8007922:	4b64      	ldr	r3, [pc, #400]	; (8007ab4 <checkAktifCalisma+0x1308>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	3301      	adds	r3, #1
 8007928:	b2da      	uxtb	r2, r3
 800792a:	4b62      	ldr	r3, [pc, #392]	; (8007ab4 <checkAktifCalisma+0x1308>)
 800792c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 800792e:	4b61      	ldr	r3, [pc, #388]	; (8007ab4 <checkAktifCalisma+0x1308>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	2b09      	cmp	r3, #9
 8007934:	d908      	bls.n	8007948 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8007936:	4b5f      	ldr	r3, [pc, #380]	; (8007ab4 <checkAktifCalisma+0x1308>)
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 800793c:	4b5e      	ldr	r3, [pc, #376]	; (8007ab8 <checkAktifCalisma+0x130c>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	3301      	adds	r3, #1
 8007942:	b2da      	uxtb	r2, r3
 8007944:	4b5c      	ldr	r3, [pc, #368]	; (8007ab8 <checkAktifCalisma+0x130c>)
 8007946:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007948:	4b5b      	ldr	r3, [pc, #364]	; (8007ab8 <checkAktifCalisma+0x130c>)
 800794a:	781a      	ldrb	r2, [r3, #0]
 800794c:	4b5b      	ldr	r3, [pc, #364]	; (8007abc <checkAktifCalisma+0x1310>)
 800794e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007952:	4b58      	ldr	r3, [pc, #352]	; (8007ab4 <checkAktifCalisma+0x1308>)
 8007954:	781a      	ldrb	r2, [r3, #0]
 8007956:	4b59      	ldr	r3, [pc, #356]	; (8007abc <checkAktifCalisma+0x1310>)
 8007958:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800795a:	4b55      	ldr	r3, [pc, #340]	; (8007ab0 <checkAktifCalisma+0x1304>)
 800795c:	781a      	ldrb	r2, [r3, #0]
 800795e:	4b57      	ldr	r3, [pc, #348]	; (8007abc <checkAktifCalisma+0x1310>)
 8007960:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007962:	4b52      	ldr	r3, [pc, #328]	; (8007aac <checkAktifCalisma+0x1300>)
 8007964:	781a      	ldrb	r2, [r3, #0]
 8007966:	4b55      	ldr	r3, [pc, #340]	; (8007abc <checkAktifCalisma+0x1310>)
 8007968:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800796a:	4b4f      	ldr	r3, [pc, #316]	; (8007aa8 <checkAktifCalisma+0x12fc>)
 800796c:	781a      	ldrb	r2, [r3, #0]
 800796e:	4b53      	ldr	r3, [pc, #332]	; (8007abc <checkAktifCalisma+0x1310>)
 8007970:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8007972:	4b53      	ldr	r3, [pc, #332]	; (8007ac0 <checkAktifCalisma+0x1314>)
 8007974:	2201      	movs	r2, #1
 8007976:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8007978:	4b46      	ldr	r3, [pc, #280]	; (8007a94 <checkAktifCalisma+0x12e8>)
 800797a:	2200      	movs	r2, #0
 800797c:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 800797e:	4b49      	ldr	r3, [pc, #292]	; (8007aa4 <checkAktifCalisma+0x12f8>)
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8007984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007988:	484e      	ldr	r0, [pc, #312]	; (8007ac4 <checkAktifCalisma+0x1318>)
 800798a:	f002 faab 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d016      	beq.n	80079c2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8007994:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007998:	484a      	ldr	r0, [pc, #296]	; (8007ac4 <checkAktifCalisma+0x1318>)
 800799a:	f002 faa3 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00e      	beq.n	80079c2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80079a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079a8:	4846      	ldr	r0, [pc, #280]	; (8007ac4 <checkAktifCalisma+0x1318>)
 80079aa:	f002 fa9b 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d006      	beq.n	80079c2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80079b4:	2140      	movs	r1, #64	; 0x40
 80079b6:	4838      	ldr	r0, [pc, #224]	; (8007a98 <checkAktifCalisma+0x12ec>)
 80079b8:	f002 fa94 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d103      	bne.n	80079ca <checkAktifCalisma+0x121e>
			startBasili=1;
 80079c2:	4b41      	ldr	r3, [pc, #260]	; (8007ac8 <checkAktifCalisma+0x131c>)
 80079c4:	2201      	movs	r2, #1
 80079c6:	701a      	strb	r2, [r3, #0]
 80079c8:	e002      	b.n	80079d0 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 80079ca:	4b3f      	ldr	r3, [pc, #252]	; (8007ac8 <checkAktifCalisma+0x131c>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80079d0:	4b3d      	ldr	r3, [pc, #244]	; (8007ac8 <checkAktifCalisma+0x131c>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d016      	beq.n	8007a06 <checkAktifCalisma+0x125a>
 80079d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80079dc:	4839      	ldr	r0, [pc, #228]	; (8007ac4 <checkAktifCalisma+0x1318>)
 80079de:	f002 fa81 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d10e      	bne.n	8007a06 <checkAktifCalisma+0x125a>
			hataVar=1;
 80079e8:	4b38      	ldr	r3, [pc, #224]	; (8007acc <checkAktifCalisma+0x1320>)
 80079ea:	2201      	movs	r2, #1
 80079ec:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 80079ee:	2001      	movs	r0, #1
 80079f0:	f7fe f88a 	bl	8005b08 <hataKoduLcdGoster>
			hata2EEPROM(1);
 80079f4:	2001      	movs	r0, #1
 80079f6:	f7fe fc27 	bl	8006248 <hata2EEPROM>
			convertAndSendData();
 80079fa:	f7fe f967 	bl	8005ccc <convertAndSendData>
			acilstophatasi=1;
 80079fe:	4b34      	ldr	r3, [pc, #208]	; (8007ad0 <checkAktifCalisma+0x1324>)
 8007a00:	2201      	movs	r2, #1
 8007a02:	701a      	strb	r2, [r3, #0]
 8007a04:	e018      	b.n	8007a38 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8007a06:	4b32      	ldr	r3, [pc, #200]	; (8007ad0 <checkAktifCalisma+0x1324>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d014      	beq.n	8007a38 <checkAktifCalisma+0x128c>
 8007a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a12:	482c      	ldr	r0, [pc, #176]	; (8007ac4 <checkAktifCalisma+0x1318>)
 8007a14:	f002 fa66 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10c      	bne.n	8007a38 <checkAktifCalisma+0x128c>
 8007a1e:	4b2a      	ldr	r3, [pc, #168]	; (8007ac8 <checkAktifCalisma+0x131c>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f083 0301 	eor.w	r3, r3, #1
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d005      	beq.n	8007a38 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8007a2c:	4b28      	ldr	r3, [pc, #160]	; (8007ad0 <checkAktifCalisma+0x1324>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8007a32:	2001      	movs	r0, #1
 8007a34:	f7fe f814 	bl	8005a60 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8007a38:	4b26      	ldr	r3, [pc, #152]	; (8007ad4 <checkAktifCalisma+0x1328>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	f083 0301 	eor.w	r3, r3, #1
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d04e      	beq.n	8007ae4 <checkAktifCalisma+0x1338>
 8007a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a4a:	481e      	ldr	r0, [pc, #120]	; (8007ac4 <checkAktifCalisma+0x1318>)
 8007a4c:	f002 fa4a 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <checkAktifCalisma+0x12b2>
 8007a56:	4b20      	ldr	r3, [pc, #128]	; (8007ad8 <checkAktifCalisma+0x132c>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d042      	beq.n	8007ae4 <checkAktifCalisma+0x1338>
 8007a5e:	4b1f      	ldr	r3, [pc, #124]	; (8007adc <checkAktifCalisma+0x1330>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d13e      	bne.n	8007ae4 <checkAktifCalisma+0x1338>
			hataVar=1;
 8007a66:	4b19      	ldr	r3, [pc, #100]	; (8007acc <checkAktifCalisma+0x1320>)
 8007a68:	2201      	movs	r2, #1
 8007a6a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8007a6c:	2002      	movs	r0, #2
 8007a6e:	f7fe f84b 	bl	8005b08 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8007a72:	2002      	movs	r0, #2
 8007a74:	f7fe fbe8 	bl	8006248 <hata2EEPROM>
			convertAndSendData();
 8007a78:	f7fe f928 	bl	8005ccc <convertAndSendData>
			emniyetCercevesihatasi=1;
 8007a7c:	4b18      	ldr	r3, [pc, #96]	; (8007ae0 <checkAktifCalisma+0x1334>)
 8007a7e:	2201      	movs	r2, #1
 8007a80:	701a      	strb	r2, [r3, #0]
 8007a82:	e047      	b.n	8007b14 <checkAktifCalisma+0x1368>
 8007a84:	20000d7b 	.word	0x20000d7b
 8007a88:	20000d7a 	.word	0x20000d7a
 8007a8c:	20000d79 	.word	0x20000d79
 8007a90:	40010800 	.word	0x40010800
 8007a94:	20000d6f 	.word	0x20000d6f
 8007a98:	40011000 	.word	0x40011000
 8007a9c:	20000d36 	.word	0x20000d36
 8007aa0:	20000d72 	.word	0x20000d72
 8007aa4:	20000d70 	.word	0x20000d70
 8007aa8:	20000d2d 	.word	0x20000d2d
 8007aac:	20000d2e 	.word	0x20000d2e
 8007ab0:	200009b4 	.word	0x200009b4
 8007ab4:	200009b5 	.word	0x200009b5
 8007ab8:	20000d2f 	.word	0x20000d2f
 8007abc:	20000c38 	.word	0x20000c38
 8007ac0:	20000d5c 	.word	0x20000d5c
 8007ac4:	40010c00 	.word	0x40010c00
 8007ac8:	20000d7e 	.word	0x20000d7e
 8007acc:	20000d85 	.word	0x20000d85
 8007ad0:	20000d80 	.word	0x20000d80
 8007ad4:	20000d87 	.word	0x20000d87
 8007ad8:	20000d91 	.word	0x20000d91
 8007adc:	20000d34 	.word	0x20000d34
 8007ae0:	20000d81 	.word	0x20000d81
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8007ae4:	4b9b      	ldr	r3, [pc, #620]	; (8007d54 <checkAktifCalisma+0x15a8>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d013      	beq.n	8007b14 <checkAktifCalisma+0x1368>
 8007aec:	4b9a      	ldr	r3, [pc, #616]	; (8007d58 <checkAktifCalisma+0x15ac>)
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00f      	beq.n	8007b14 <checkAktifCalisma+0x1368>
 8007af4:	4b99      	ldr	r3, [pc, #612]	; (8007d5c <checkAktifCalisma+0x15b0>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	f083 0301 	eor.w	r3, r3, #1
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d008      	beq.n	8007b14 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8007b02:	4b94      	ldr	r3, [pc, #592]	; (8007d54 <checkAktifCalisma+0x15a8>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8007b08:	4b95      	ldr	r3, [pc, #596]	; (8007d60 <checkAktifCalisma+0x15b4>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8007b0e:	2002      	movs	r0, #2
 8007b10:	f7fd ffa6 	bl	8005a60 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8007b14:	4b93      	ldr	r3, [pc, #588]	; (8007d64 <checkAktifCalisma+0x15b8>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d11e      	bne.n	8007b5a <checkAktifCalisma+0x13ae>
 8007b1c:	4b92      	ldr	r3, [pc, #584]	; (8007d68 <checkAktifCalisma+0x15bc>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d11a      	bne.n	8007b5a <checkAktifCalisma+0x13ae>
 8007b24:	4b91      	ldr	r3, [pc, #580]	; (8007d6c <checkAktifCalisma+0x15c0>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d016      	beq.n	8007b5a <checkAktifCalisma+0x13ae>
 8007b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b30:	488f      	ldr	r0, [pc, #572]	; (8007d70 <checkAktifCalisma+0x15c4>)
 8007b32:	f002 f9d7 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d10e      	bne.n	8007b5a <checkAktifCalisma+0x13ae>
			hataVar=1;
 8007b3c:	4b8d      	ldr	r3, [pc, #564]	; (8007d74 <checkAktifCalisma+0x15c8>)
 8007b3e:	2201      	movs	r2, #1
 8007b40:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8007b42:	2003      	movs	r0, #3
 8007b44:	f7fd ffe0 	bl	8005b08 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8007b48:	2003      	movs	r0, #3
 8007b4a:	f7fe fb7d 	bl	8006248 <hata2EEPROM>
			convertAndSendData();
 8007b4e:	f7fe f8bd 	bl	8005ccc <convertAndSendData>
			basinchatasi=1;
 8007b52:	4b89      	ldr	r3, [pc, #548]	; (8007d78 <checkAktifCalisma+0x15cc>)
 8007b54:	2201      	movs	r2, #1
 8007b56:	701a      	strb	r2, [r3, #0]
 8007b58:	e015      	b.n	8007b86 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8007b5a:	4b87      	ldr	r3, [pc, #540]	; (8007d78 <checkAktifCalisma+0x15cc>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d011      	beq.n	8007b86 <checkAktifCalisma+0x13da>
 8007b62:	4b80      	ldr	r3, [pc, #512]	; (8007d64 <checkAktifCalisma+0x15b8>)
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d10d      	bne.n	8007b86 <checkAktifCalisma+0x13da>
 8007b6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007b6e:	4883      	ldr	r0, [pc, #524]	; (8007d7c <checkAktifCalisma+0x15d0>)
 8007b70:	f002 f9b8 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d105      	bne.n	8007b86 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8007b7a:	4b7f      	ldr	r3, [pc, #508]	; (8007d78 <checkAktifCalisma+0x15cc>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8007b80:	2003      	movs	r0, #3
 8007b82:	f7fd ff6d 	bl	8005a60 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007b86:	4b7e      	ldr	r3, [pc, #504]	; (8007d80 <checkAktifCalisma+0x15d4>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d103      	bne.n	8007b96 <checkAktifCalisma+0x13ea>
 8007b8e:	4b7d      	ldr	r3, [pc, #500]	; (8007d84 <checkAktifCalisma+0x15d8>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d01e      	beq.n	8007bd4 <checkAktifCalisma+0x1428>
 8007b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b9a:	487b      	ldr	r0, [pc, #492]	; (8007d88 <checkAktifCalisma+0x15dc>)
 8007b9c:	f002 f9a2 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d116      	bne.n	8007bd4 <checkAktifCalisma+0x1428>
 8007ba6:	4b79      	ldr	r3, [pc, #484]	; (8007d8c <checkAktifCalisma+0x15e0>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d003      	beq.n	8007bb6 <checkAktifCalisma+0x140a>
 8007bae:	4b77      	ldr	r3, [pc, #476]	; (8007d8c <checkAktifCalisma+0x15e0>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d10e      	bne.n	8007bd4 <checkAktifCalisma+0x1428>
			hataVar=1;
 8007bb6:	4b6f      	ldr	r3, [pc, #444]	; (8007d74 <checkAktifCalisma+0x15c8>)
 8007bb8:	2201      	movs	r2, #1
 8007bba:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8007bbc:	2004      	movs	r0, #4
 8007bbe:	f7fd ffa3 	bl	8005b08 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8007bc2:	2004      	movs	r0, #4
 8007bc4:	f7fe fb40 	bl	8006248 <hata2EEPROM>
			convertAndSendData();
 8007bc8:	f7fe f880 	bl	8005ccc <convertAndSendData>
			katkapisivicihatasi=1;
 8007bcc:	4b70      	ldr	r3, [pc, #448]	; (8007d90 <checkAktifCalisma+0x15e4>)
 8007bce:	2201      	movs	r2, #1
 8007bd0:	701a      	strb	r2, [r3, #0]
 8007bd2:	e01f      	b.n	8007c14 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007bd4:	4b6e      	ldr	r3, [pc, #440]	; (8007d90 <checkAktifCalisma+0x15e4>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01b      	beq.n	8007c14 <checkAktifCalisma+0x1468>
 8007bdc:	4b6d      	ldr	r3, [pc, #436]	; (8007d94 <checkAktifCalisma+0x15e8>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d017      	beq.n	8007c14 <checkAktifCalisma+0x1468>
 8007be4:	4b66      	ldr	r3, [pc, #408]	; (8007d80 <checkAktifCalisma+0x15d4>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	f083 0301 	eor.w	r3, r3, #1
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d010      	beq.n	8007c14 <checkAktifCalisma+0x1468>
 8007bf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bf6:	4864      	ldr	r0, [pc, #400]	; (8007d88 <checkAktifCalisma+0x15dc>)
 8007bf8:	f002 f974 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d108      	bne.n	8007c14 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8007c02:	4b63      	ldr	r3, [pc, #396]	; (8007d90 <checkAktifCalisma+0x15e4>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8007c08:	4b5e      	ldr	r3, [pc, #376]	; (8007d84 <checkAktifCalisma+0x15d8>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8007c0e:	2004      	movs	r0, #4
 8007c10:	f7fd ff26 	bl	8005a60 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007c14:	4b5a      	ldr	r3, [pc, #360]	; (8007d80 <checkAktifCalisma+0x15d4>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d103      	bne.n	8007c24 <checkAktifCalisma+0x1478>
 8007c1c:	4b5e      	ldr	r3, [pc, #376]	; (8007d98 <checkAktifCalisma+0x15ec>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01e      	beq.n	8007c62 <checkAktifCalisma+0x14b6>
 8007c24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c28:	4857      	ldr	r0, [pc, #348]	; (8007d88 <checkAktifCalisma+0x15dc>)
 8007c2a:	f002 f95b 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d116      	bne.n	8007c62 <checkAktifCalisma+0x14b6>
 8007c34:	4b55      	ldr	r3, [pc, #340]	; (8007d8c <checkAktifCalisma+0x15e0>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d003      	beq.n	8007c44 <checkAktifCalisma+0x1498>
 8007c3c:	4b53      	ldr	r3, [pc, #332]	; (8007d8c <checkAktifCalisma+0x15e0>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d10e      	bne.n	8007c62 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8007c44:	4b4b      	ldr	r3, [pc, #300]	; (8007d74 <checkAktifCalisma+0x15c8>)
 8007c46:	2201      	movs	r2, #1
 8007c48:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8007c4a:	2005      	movs	r0, #5
 8007c4c:	f7fd ff5c 	bl	8005b08 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8007c50:	2005      	movs	r0, #5
 8007c52:	f7fe faf9 	bl	8006248 <hata2EEPROM>
			convertAndSendData();
 8007c56:	f7fe f839 	bl	8005ccc <convertAndSendData>
			tablakapisivicihatasi=1;
 8007c5a:	4b50      	ldr	r3, [pc, #320]	; (8007d9c <checkAktifCalisma+0x15f0>)
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	701a      	strb	r2, [r3, #0]
 8007c60:	e023      	b.n	8007caa <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8007c62:	4b4e      	ldr	r3, [pc, #312]	; (8007d9c <checkAktifCalisma+0x15f0>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d01f      	beq.n	8007caa <checkAktifCalisma+0x14fe>
 8007c6a:	4b4a      	ldr	r3, [pc, #296]	; (8007d94 <checkAktifCalisma+0x15e8>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d01b      	beq.n	8007caa <checkAktifCalisma+0x14fe>
 8007c72:	4b43      	ldr	r3, [pc, #268]	; (8007d80 <checkAktifCalisma+0x15d4>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	f083 0301 	eor.w	r3, r3, #1
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d014      	beq.n	8007caa <checkAktifCalisma+0x14fe>
 8007c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c84:	4840      	ldr	r0, [pc, #256]	; (8007d88 <checkAktifCalisma+0x15dc>)
 8007c86:	f002 f92d 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10c      	bne.n	8007caa <checkAktifCalisma+0x14fe>
 8007c90:	4b40      	ldr	r3, [pc, #256]	; (8007d94 <checkAktifCalisma+0x15e8>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d008      	beq.n	8007caa <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8007c98:	4b40      	ldr	r3, [pc, #256]	; (8007d9c <checkAktifCalisma+0x15f0>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8007c9e:	4b3e      	ldr	r3, [pc, #248]	; (8007d98 <checkAktifCalisma+0x15ec>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007ca4:	2005      	movs	r0, #5
 8007ca6:	f7fd fedb 	bl	8005a60 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8007caa:	4b30      	ldr	r3, [pc, #192]	; (8007d6c <checkAktifCalisma+0x15c0>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d107      	bne.n	8007cc2 <checkAktifCalisma+0x1516>
 8007cb2:	4b2a      	ldr	r3, [pc, #168]	; (8007d5c <checkAktifCalisma+0x15b0>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d103      	bne.n	8007cc2 <checkAktifCalisma+0x1516>
 8007cba:	4b39      	ldr	r3, [pc, #228]	; (8007da0 <checkAktifCalisma+0x15f4>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d016      	beq.n	8007cf0 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8007cc2:	4b38      	ldr	r3, [pc, #224]	; (8007da4 <checkAktifCalisma+0x15f8>)
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	4b38      	ldr	r3, [pc, #224]	; (8007da8 <checkAktifCalisma+0x15fc>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	4a37      	ldr	r2, [pc, #220]	; (8007dac <checkAktifCalisma+0x1600>)
 8007cce:	7812      	ldrb	r2, [r2, #0]
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d30d      	bcc.n	8007cf0 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8007cd4:	4b27      	ldr	r3, [pc, #156]	; (8007d74 <checkAktifCalisma+0x15c8>)
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8007cda:	2006      	movs	r0, #6
 8007cdc:	f7fd ff14 	bl	8005b08 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007ce0:	2006      	movs	r0, #6
 8007ce2:	f7fe fab1 	bl	8006248 <hata2EEPROM>
			  	convertAndSendData();
 8007ce6:	f7fd fff1 	bl	8005ccc <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8007cea:	4b31      	ldr	r3, [pc, #196]	; (8007db0 <checkAktifCalisma+0x1604>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007cf0:	4b2f      	ldr	r3, [pc, #188]	; (8007db0 <checkAktifCalisma+0x1604>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d013      	beq.n	8007d20 <checkAktifCalisma+0x1574>
 8007cf8:	2108      	movs	r1, #8
 8007cfa:	4823      	ldr	r0, [pc, #140]	; (8007d88 <checkAktifCalisma+0x15dc>)
 8007cfc:	f002 f8f2 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00c      	beq.n	8007d20 <checkAktifCalisma+0x1574>
 8007d06:	4b1e      	ldr	r3, [pc, #120]	; (8007d80 <checkAktifCalisma+0x15d4>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	f083 0301 	eor.w	r3, r3, #1
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d005      	beq.n	8007d20 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8007d14:	4b26      	ldr	r3, [pc, #152]	; (8007db0 <checkAktifCalisma+0x1604>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8007d1a:	2006      	movs	r0, #6
 8007d1c:	f7fd fea0 	bl	8005a60 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007d20:	4b24      	ldr	r3, [pc, #144]	; (8007db4 <checkAktifCalisma+0x1608>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10b      	bne.n	8007d40 <checkAktifCalisma+0x1594>
 8007d28:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <checkAktifCalisma+0x15b0>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d107      	bne.n	8007d40 <checkAktifCalisma+0x1594>
 8007d30:	4b21      	ldr	r3, [pc, #132]	; (8007db8 <checkAktifCalisma+0x160c>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d103      	bne.n	8007d40 <checkAktifCalisma+0x1594>
 8007d38:	4b19      	ldr	r3, [pc, #100]	; (8007da0 <checkAktifCalisma+0x15f4>)
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d03f      	beq.n	8007dc0 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8007d40:	4b1e      	ldr	r3, [pc, #120]	; (8007dbc <checkAktifCalisma+0x1610>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8007d46:	4b0f      	ldr	r3, [pc, #60]	; (8007d84 <checkAktifCalisma+0x15d8>)
 8007d48:	2201      	movs	r2, #1
 8007d4a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007d4c:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <checkAktifCalisma+0x15ec>)
 8007d4e:	2201      	movs	r2, #1
 8007d50:	701a      	strb	r2, [r3, #0]
 8007d52:	e03c      	b.n	8007dce <checkAktifCalisma+0x1622>
 8007d54:	20000d81 	.word	0x20000d81
 8007d58:	20000d87 	.word	0x20000d87
 8007d5c:	20000d68 	.word	0x20000d68
 8007d60:	20000d91 	.word	0x20000d91
 8007d64:	20000d33 	.word	0x20000d33
 8007d68:	20000d37 	.word	0x20000d37
 8007d6c:	20000d84 	.word	0x20000d84
 8007d70:	40011000 	.word	0x40011000
 8007d74:	20000d85 	.word	0x20000d85
 8007d78:	20000d8e 	.word	0x20000d8e
 8007d7c:	40010c00 	.word	0x40010c00
 8007d80:	20000d7e 	.word	0x20000d7e
 8007d84:	20000d92 	.word	0x20000d92
 8007d88:	40010800 	.word	0x40010800
 8007d8c:	20000d38 	.word	0x20000d38
 8007d90:	20000d8f 	.word	0x20000d8f
 8007d94:	20000d72 	.word	0x20000d72
 8007d98:	20000d93 	.word	0x20000d93
 8007d9c:	20000d90 	.word	0x20000d90
 8007da0:	20000d67 	.word	0x20000d67
 8007da4:	20000cb0 	.word	0x20000cb0
 8007da8:	20000cc4 	.word	0x20000cc4
 8007dac:	20000d48 	.word	0x20000d48
 8007db0:	20000d7f 	.word	0x20000d7f
 8007db4:	20000d65 	.word	0x20000d65
 8007db8:	20000d66 	.word	0x20000d66
 8007dbc:	20000d86 	.word	0x20000d86
		} else {
			makineCalisiyor=1;
 8007dc0:	4b1e      	ldr	r3, [pc, #120]	; (8007e3c <checkAktifCalisma+0x1690>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007dc6:	4b1e      	ldr	r3, [pc, #120]	; (8007e40 <checkAktifCalisma+0x1694>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a1e      	ldr	r2, [pc, #120]	; (8007e44 <checkAktifCalisma+0x1698>)
 8007dcc:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007dce:	4b1e      	ldr	r3, [pc, #120]	; (8007e48 <checkAktifCalisma+0x169c>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d02f      	beq.n	8007e36 <checkAktifCalisma+0x168a>
 8007dd6:	4b1d      	ldr	r3, [pc, #116]	; (8007e4c <checkAktifCalisma+0x16a0>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	f083 0301 	eor.w	r3, r3, #1
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d028      	beq.n	8007e36 <checkAktifCalisma+0x168a>
 8007de4:	4b1a      	ldr	r3, [pc, #104]	; (8007e50 <checkAktifCalisma+0x16a4>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f083 0301 	eor.w	r3, r3, #1
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d021      	beq.n	8007e36 <checkAktifCalisma+0x168a>
 8007df2:	4b18      	ldr	r3, [pc, #96]	; (8007e54 <checkAktifCalisma+0x16a8>)
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	f083 0301 	eor.w	r3, r3, #1
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d01a      	beq.n	8007e36 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007e00:	4b15      	ldr	r3, [pc, #84]	; (8007e58 <checkAktifCalisma+0x16ac>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	f083 0301 	eor.w	r3, r3, #1
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d013      	beq.n	8007e36 <checkAktifCalisma+0x168a>
 8007e0e:	4b13      	ldr	r3, [pc, #76]	; (8007e5c <checkAktifCalisma+0x16b0>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f083 0301 	eor.w	r3, r3, #1
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00c      	beq.n	8007e36 <checkAktifCalisma+0x168a>
 8007e1c:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <checkAktifCalisma+0x16b4>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	f083 0301 	eor.w	r3, r3, #1
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d005      	beq.n	8007e36 <checkAktifCalisma+0x168a>
			hataVar=0;
 8007e2a:	4b07      	ldr	r3, [pc, #28]	; (8007e48 <checkAktifCalisma+0x169c>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007e30:	2007      	movs	r0, #7
 8007e32:	f7fd fe15 	bl	8005a60 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007e36:	bf00      	nop
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000d86 	.word	0x20000d86
 8007e40:	20000cb0 	.word	0x20000cb0
 8007e44:	20000cc4 	.word	0x20000cc4
 8007e48:	20000d85 	.word	0x20000d85
 8007e4c:	20000d80 	.word	0x20000d80
 8007e50:	20000d81 	.word	0x20000d81
 8007e54:	20000d8e 	.word	0x20000d8e
 8007e58:	20000d8f 	.word	0x20000d8f
 8007e5c:	20000d90 	.word	0x20000d90
 8007e60:	20000d7f 	.word	0x20000d7f

08007e64 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007e68:	4b8b      	ldr	r3, [pc, #556]	; (8008098 <checkDemoModCalisma+0x234>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	f040 8229 	bne.w	80082c4 <checkDemoModCalisma+0x460>
 8007e72:	4b8a      	ldr	r3, [pc, #552]	; (800809c <checkDemoModCalisma+0x238>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 8224 	beq.w	80082c4 <checkDemoModCalisma+0x460>
 8007e7c:	4b88      	ldr	r3, [pc, #544]	; (80080a0 <checkDemoModCalisma+0x23c>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f040 821f 	bne.w	80082c4 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007e86:	2102      	movs	r1, #2
 8007e88:	4886      	ldr	r0, [pc, #536]	; (80080a4 <checkDemoModCalisma+0x240>)
 8007e8a:	f002 f82b 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d11d      	bne.n	8007ed0 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007e94:	4b84      	ldr	r3, [pc, #528]	; (80080a8 <checkDemoModCalisma+0x244>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	f083 0301 	eor.w	r3, r3, #1
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d016      	beq.n	8007ed0 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007ea2:	4b82      	ldr	r3, [pc, #520]	; (80080ac <checkDemoModCalisma+0x248>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	f083 0301 	eor.w	r3, r3, #1
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00f      	beq.n	8007ed0 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007eb0:	4b7f      	ldr	r3, [pc, #508]	; (80080b0 <checkDemoModCalisma+0x24c>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	f083 0301 	eor.w	r3, r3, #1
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d008      	beq.n	8007ed0 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	2104      	movs	r1, #4
 8007ec2:	487c      	ldr	r0, [pc, #496]	; (80080b4 <checkDemoModCalisma+0x250>)
 8007ec4:	f002 f825 	bl	8009f12 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007ec8:	4b7b      	ldr	r3, [pc, #492]	; (80080b8 <checkDemoModCalisma+0x254>)
 8007eca:	2201      	movs	r2, #1
 8007ecc:	701a      	strb	r2, [r3, #0]
 8007ece:	e00e      	b.n	8007eee <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007ed0:	2102      	movs	r1, #2
 8007ed2:	4874      	ldr	r0, [pc, #464]	; (80080a4 <checkDemoModCalisma+0x240>)
 8007ed4:	f002 f806 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d107      	bne.n	8007eee <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2104      	movs	r1, #4
 8007ee2:	4874      	ldr	r0, [pc, #464]	; (80080b4 <checkDemoModCalisma+0x250>)
 8007ee4:	f002 f815 	bl	8009f12 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007ee8:	4b73      	ldr	r3, [pc, #460]	; (80080b8 <checkDemoModCalisma+0x254>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007eee:	4b72      	ldr	r3, [pc, #456]	; (80080b8 <checkDemoModCalisma+0x254>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10b      	bne.n	8007f0e <checkDemoModCalisma+0xaa>
 8007ef6:	4b6d      	ldr	r3, [pc, #436]	; (80080ac <checkDemoModCalisma+0x248>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d107      	bne.n	8007f0e <checkDemoModCalisma+0xaa>
 8007efe:	4b6c      	ldr	r3, [pc, #432]	; (80080b0 <checkDemoModCalisma+0x24c>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d103      	bne.n	8007f0e <checkDemoModCalisma+0xaa>
 8007f06:	4b68      	ldr	r3, [pc, #416]	; (80080a8 <checkDemoModCalisma+0x244>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00c      	beq.n	8007f28 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f14:	4867      	ldr	r0, [pc, #412]	; (80080b4 <checkDemoModCalisma+0x250>)
 8007f16:	f001 fffc 	bl	8009f12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f20:	4864      	ldr	r0, [pc, #400]	; (80080b4 <checkDemoModCalisma+0x250>)
 8007f22:	f001 fff6 	bl	8009f12 <HAL_GPIO_WritePin>
 8007f26:	e00b      	b.n	8007f40 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f2e:	4861      	ldr	r0, [pc, #388]	; (80080b4 <checkDemoModCalisma+0x250>)
 8007f30:	f001 ffef 	bl	8009f12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007f34:	2200      	movs	r2, #0
 8007f36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f3a:	485e      	ldr	r0, [pc, #376]	; (80080b4 <checkDemoModCalisma+0x250>)
 8007f3c:	f001 ffe9 	bl	8009f12 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007f40:	2102      	movs	r1, #2
 8007f42:	4858      	ldr	r0, [pc, #352]	; (80080a4 <checkDemoModCalisma+0x240>)
 8007f44:	f001 ffce 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d10d      	bne.n	8007f6a <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f52:	4854      	ldr	r0, [pc, #336]	; (80080a4 <checkDemoModCalisma+0x240>)
 8007f54:	f001 ffc6 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d105      	bne.n	8007f6a <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007f5e:	4b56      	ldr	r3, [pc, #344]	; (80080b8 <checkDemoModCalisma+0x254>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	f083 0301 	eor.w	r3, r3, #1
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007f6a:	2102      	movs	r1, #2
 8007f6c:	484d      	ldr	r0, [pc, #308]	; (80080a4 <checkDemoModCalisma+0x240>)
 8007f6e:	f001 ffb9 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d125      	bne.n	8007fc4 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f7c:	4849      	ldr	r0, [pc, #292]	; (80080a4 <checkDemoModCalisma+0x240>)
 8007f7e:	f001 ffb1 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d11d      	bne.n	8007fc4 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007f88:	4b4b      	ldr	r3, [pc, #300]	; (80080b8 <checkDemoModCalisma+0x254>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	f083 0301 	eor.w	r3, r3, #1
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d016      	beq.n	8007fc4 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007f96:	4b44      	ldr	r3, [pc, #272]	; (80080a8 <checkDemoModCalisma+0x244>)
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	f083 0301 	eor.w	r3, r3, #1
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00f      	beq.n	8007fc4 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007fa4:	4b42      	ldr	r3, [pc, #264]	; (80080b0 <checkDemoModCalisma+0x24c>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	f083 0301 	eor.w	r3, r3, #1
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d008      	beq.n	8007fc4 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	2120      	movs	r1, #32
 8007fb6:	483b      	ldr	r0, [pc, #236]	; (80080a4 <checkDemoModCalisma+0x240>)
 8007fb8:	f001 ffab 	bl	8009f12 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007fbc:	4b3b      	ldr	r3, [pc, #236]	; (80080ac <checkDemoModCalisma+0x248>)
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	e007      	b.n	8007fd4 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2120      	movs	r1, #32
 8007fc8:	4836      	ldr	r0, [pc, #216]	; (80080a4 <checkDemoModCalisma+0x240>)
 8007fca:	f001 ffa2 	bl	8009f12 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007fce:	4b37      	ldr	r3, [pc, #220]	; (80080ac <checkDemoModCalisma+0x248>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007fd4:	2102      	movs	r1, #2
 8007fd6:	4833      	ldr	r0, [pc, #204]	; (80080a4 <checkDemoModCalisma+0x240>)
 8007fd8:	f001 ff84 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d125      	bne.n	800802e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007fe2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007fe6:	482f      	ldr	r0, [pc, #188]	; (80080a4 <checkDemoModCalisma+0x240>)
 8007fe8:	f001 ff7c 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d11d      	bne.n	800802e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007ff2:	4b31      	ldr	r3, [pc, #196]	; (80080b8 <checkDemoModCalisma+0x254>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	f083 0301 	eor.w	r3, r3, #1
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d016      	beq.n	800802e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8008000:	4b2a      	ldr	r3, [pc, #168]	; (80080ac <checkDemoModCalisma+0x248>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	f083 0301 	eor.w	r3, r3, #1
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00f      	beq.n	800802e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800800e:	4b26      	ldr	r3, [pc, #152]	; (80080a8 <checkDemoModCalisma+0x244>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	f083 0301 	eor.w	r3, r3, #1
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d008      	beq.n	800802e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800801c:	2201      	movs	r2, #1
 800801e:	2110      	movs	r1, #16
 8008020:	4820      	ldr	r0, [pc, #128]	; (80080a4 <checkDemoModCalisma+0x240>)
 8008022:	f001 ff76 	bl	8009f12 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8008026:	4b22      	ldr	r3, [pc, #136]	; (80080b0 <checkDemoModCalisma+0x24c>)
 8008028:	2201      	movs	r2, #1
 800802a:	701a      	strb	r2, [r3, #0]
 800802c:	e007      	b.n	800803e <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800802e:	2200      	movs	r2, #0
 8008030:	2110      	movs	r1, #16
 8008032:	481c      	ldr	r0, [pc, #112]	; (80080a4 <checkDemoModCalisma+0x240>)
 8008034:	f001 ff6d 	bl	8009f12 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8008038:	4b1d      	ldr	r3, [pc, #116]	; (80080b0 <checkDemoModCalisma+0x24c>)
 800803a:	2200      	movs	r2, #0
 800803c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800803e:	2104      	movs	r1, #4
 8008040:	4818      	ldr	r0, [pc, #96]	; (80080a4 <checkDemoModCalisma+0x240>)
 8008042:	f001 ff4f 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d139      	bne.n	80080c0 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 800804c:	4b1a      	ldr	r3, [pc, #104]	; (80080b8 <checkDemoModCalisma+0x254>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	f083 0301 	eor.w	r3, r3, #1
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d032      	beq.n	80080c0 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800805a:	4b15      	ldr	r3, [pc, #84]	; (80080b0 <checkDemoModCalisma+0x24c>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	f083 0301 	eor.w	r3, r3, #1
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	d02b      	beq.n	80080c0 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8008068:	4b10      	ldr	r3, [pc, #64]	; (80080ac <checkDemoModCalisma+0x248>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	f083 0301 	eor.w	r3, r3, #1
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d024      	beq.n	80080c0 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8008076:	2201      	movs	r2, #1
 8008078:	2102      	movs	r1, #2
 800807a:	480e      	ldr	r0, [pc, #56]	; (80080b4 <checkDemoModCalisma+0x250>)
 800807c:	f001 ff49 	bl	8009f12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8008080:	2201      	movs	r2, #1
 8008082:	2101      	movs	r1, #1
 8008084:	480b      	ldr	r0, [pc, #44]	; (80080b4 <checkDemoModCalisma+0x250>)
 8008086:	f001 ff44 	bl	8009f12 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800808a:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <checkDemoModCalisma+0x244>)
 800808c:	2201      	movs	r2, #1
 800808e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8008090:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <checkDemoModCalisma+0x258>)
 8008092:	2201      	movs	r2, #1
 8008094:	701a      	strb	r2, [r3, #0]
 8008096:	e027      	b.n	80080e8 <checkDemoModCalisma+0x284>
 8008098:	20000d4e 	.word	0x20000d4e
 800809c:	20000d82 	.word	0x20000d82
 80080a0:	20000d4d 	.word	0x20000d4d
 80080a4:	40011000 	.word	0x40011000
 80080a8:	20000d89 	.word	0x20000d89
 80080ac:	20000d8a 	.word	0x20000d8a
 80080b0:	20000d8b 	.word	0x20000d8b
 80080b4:	40010c00 	.word	0x40010c00
 80080b8:	20000d88 	.word	0x20000d88
 80080bc:	20000d6e 	.word	0x20000d6e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80080c0:	2104      	movs	r1, #4
 80080c2:	48a0      	ldr	r0, [pc, #640]	; (8008344 <checkDemoModCalisma+0x4e0>)
 80080c4:	f001 ff0e 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d10c      	bne.n	80080e8 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80080ce:	2200      	movs	r2, #0
 80080d0:	2102      	movs	r1, #2
 80080d2:	489d      	ldr	r0, [pc, #628]	; (8008348 <checkDemoModCalisma+0x4e4>)
 80080d4:	f001 ff1d 	bl	8009f12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80080d8:	2200      	movs	r2, #0
 80080da:	2101      	movs	r1, #1
 80080dc:	489a      	ldr	r0, [pc, #616]	; (8008348 <checkDemoModCalisma+0x4e4>)
 80080de:	f001 ff18 	bl	8009f12 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80080e2:	4b9a      	ldr	r3, [pc, #616]	; (800834c <checkDemoModCalisma+0x4e8>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80080e8:	2104      	movs	r1, #4
 80080ea:	4896      	ldr	r0, [pc, #600]	; (8008344 <checkDemoModCalisma+0x4e0>)
 80080ec:	f001 fefa 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d10d      	bne.n	8008112 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80080f6:	2201      	movs	r2, #1
 80080f8:	2180      	movs	r1, #128	; 0x80
 80080fa:	4895      	ldr	r0, [pc, #596]	; (8008350 <checkDemoModCalisma+0x4ec>)
 80080fc:	f001 ff09 	bl	8009f12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8008100:	2201      	movs	r2, #1
 8008102:	2120      	movs	r1, #32
 8008104:	4892      	ldr	r0, [pc, #584]	; (8008350 <checkDemoModCalisma+0x4ec>)
 8008106:	f001 ff04 	bl	8009f12 <HAL_GPIO_WritePin>
			timer3 = millis;
 800810a:	4b92      	ldr	r3, [pc, #584]	; (8008354 <checkDemoModCalisma+0x4f0>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a92      	ldr	r2, [pc, #584]	; (8008358 <checkDemoModCalisma+0x4f4>)
 8008110:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8008112:	4b90      	ldr	r3, [pc, #576]	; (8008354 <checkDemoModCalisma+0x4f0>)
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	4b90      	ldr	r3, [pc, #576]	; (8008358 <checkDemoModCalisma+0x4f4>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	2b04      	cmp	r3, #4
 800811e:	d909      	bls.n	8008134 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008120:	2200      	movs	r2, #0
 8008122:	2180      	movs	r1, #128	; 0x80
 8008124:	488a      	ldr	r0, [pc, #552]	; (8008350 <checkDemoModCalisma+0x4ec>)
 8008126:	f001 fef4 	bl	8009f12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800812a:	2200      	movs	r2, #0
 800812c:	2120      	movs	r1, #32
 800812e:	4888      	ldr	r0, [pc, #544]	; (8008350 <checkDemoModCalisma+0x4ec>)
 8008130:	f001 feef 	bl	8009f12 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8008134:	2102      	movs	r1, #2
 8008136:	4883      	ldr	r0, [pc, #524]	; (8008344 <checkDemoModCalisma+0x4e0>)
 8008138:	f001 fed4 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800813c:	4603      	mov	r3, r0
 800813e:	2b01      	cmp	r3, #1
 8008140:	d108      	bne.n	8008154 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8008142:	2201      	movs	r2, #1
 8008144:	2140      	movs	r1, #64	; 0x40
 8008146:	4882      	ldr	r0, [pc, #520]	; (8008350 <checkDemoModCalisma+0x4ec>)
 8008148:	f001 fee3 	bl	8009f12 <HAL_GPIO_WritePin>
			timer3 = millis;
 800814c:	4b81      	ldr	r3, [pc, #516]	; (8008354 <checkDemoModCalisma+0x4f0>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a81      	ldr	r2, [pc, #516]	; (8008358 <checkDemoModCalisma+0x4f4>)
 8008152:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8008154:	4b7f      	ldr	r3, [pc, #508]	; (8008354 <checkDemoModCalisma+0x4f0>)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	4b7f      	ldr	r3, [pc, #508]	; (8008358 <checkDemoModCalisma+0x4f4>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b04      	cmp	r3, #4
 8008160:	d904      	bls.n	800816c <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008162:	2200      	movs	r2, #0
 8008164:	2140      	movs	r1, #64	; 0x40
 8008166:	487a      	ldr	r0, [pc, #488]	; (8008350 <checkDemoModCalisma+0x4ec>)
 8008168:	f001 fed3 	bl	8009f12 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 800816c:	4b7b      	ldr	r3, [pc, #492]	; (800835c <checkDemoModCalisma+0x4f8>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d058      	beq.n	8008226 <checkDemoModCalisma+0x3c2>
 8008174:	4b7a      	ldr	r3, [pc, #488]	; (8008360 <checkDemoModCalisma+0x4fc>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d054      	beq.n	8008226 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 800817c:	4b79      	ldr	r3, [pc, #484]	; (8008364 <checkDemoModCalisma+0x500>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	3301      	adds	r3, #1
 8008182:	b2da      	uxtb	r2, r3
 8008184:	4b77      	ldr	r3, [pc, #476]	; (8008364 <checkDemoModCalisma+0x500>)
 8008186:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8008188:	4b76      	ldr	r3, [pc, #472]	; (8008364 <checkDemoModCalisma+0x500>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2b09      	cmp	r3, #9
 800818e:	d908      	bls.n	80081a2 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8008190:	4b74      	ldr	r3, [pc, #464]	; (8008364 <checkDemoModCalisma+0x500>)
 8008192:	2200      	movs	r2, #0
 8008194:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8008196:	4b74      	ldr	r3, [pc, #464]	; (8008368 <checkDemoModCalisma+0x504>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	3301      	adds	r3, #1
 800819c:	b2da      	uxtb	r2, r3
 800819e:	4b72      	ldr	r3, [pc, #456]	; (8008368 <checkDemoModCalisma+0x504>)
 80081a0:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80081a2:	4b71      	ldr	r3, [pc, #452]	; (8008368 <checkDemoModCalisma+0x504>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	2b09      	cmp	r3, #9
 80081a8:	d908      	bls.n	80081bc <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80081aa:	4b6f      	ldr	r3, [pc, #444]	; (8008368 <checkDemoModCalisma+0x504>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80081b0:	4b6e      	ldr	r3, [pc, #440]	; (800836c <checkDemoModCalisma+0x508>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	4b6c      	ldr	r3, [pc, #432]	; (800836c <checkDemoModCalisma+0x508>)
 80081ba:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80081bc:	4b6b      	ldr	r3, [pc, #428]	; (800836c <checkDemoModCalisma+0x508>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b09      	cmp	r3, #9
 80081c2:	d908      	bls.n	80081d6 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80081c4:	4b69      	ldr	r3, [pc, #420]	; (800836c <checkDemoModCalisma+0x508>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80081ca:	4b69      	ldr	r3, [pc, #420]	; (8008370 <checkDemoModCalisma+0x50c>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	3301      	adds	r3, #1
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	4b67      	ldr	r3, [pc, #412]	; (8008370 <checkDemoModCalisma+0x50c>)
 80081d4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80081d6:	4b66      	ldr	r3, [pc, #408]	; (8008370 <checkDemoModCalisma+0x50c>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b09      	cmp	r3, #9
 80081dc:	d908      	bls.n	80081f0 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80081de:	4b64      	ldr	r3, [pc, #400]	; (8008370 <checkDemoModCalisma+0x50c>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80081e4:	4b63      	ldr	r3, [pc, #396]	; (8008374 <checkDemoModCalisma+0x510>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	3301      	adds	r3, #1
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	4b61      	ldr	r3, [pc, #388]	; (8008374 <checkDemoModCalisma+0x510>)
 80081ee:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80081f0:	4b60      	ldr	r3, [pc, #384]	; (8008374 <checkDemoModCalisma+0x510>)
 80081f2:	781a      	ldrb	r2, [r3, #0]
 80081f4:	4b60      	ldr	r3, [pc, #384]	; (8008378 <checkDemoModCalisma+0x514>)
 80081f6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80081fa:	4b5d      	ldr	r3, [pc, #372]	; (8008370 <checkDemoModCalisma+0x50c>)
 80081fc:	781a      	ldrb	r2, [r3, #0]
 80081fe:	4b5e      	ldr	r3, [pc, #376]	; (8008378 <checkDemoModCalisma+0x514>)
 8008200:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8008202:	4b5a      	ldr	r3, [pc, #360]	; (800836c <checkDemoModCalisma+0x508>)
 8008204:	781a      	ldrb	r2, [r3, #0]
 8008206:	4b5c      	ldr	r3, [pc, #368]	; (8008378 <checkDemoModCalisma+0x514>)
 8008208:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800820a:	4b57      	ldr	r3, [pc, #348]	; (8008368 <checkDemoModCalisma+0x504>)
 800820c:	781a      	ldrb	r2, [r3, #0]
 800820e:	4b5a      	ldr	r3, [pc, #360]	; (8008378 <checkDemoModCalisma+0x514>)
 8008210:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8008212:	4b54      	ldr	r3, [pc, #336]	; (8008364 <checkDemoModCalisma+0x500>)
 8008214:	781a      	ldrb	r2, [r3, #0]
 8008216:	4b58      	ldr	r3, [pc, #352]	; (8008378 <checkDemoModCalisma+0x514>)
 8008218:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800821a:	4b58      	ldr	r3, [pc, #352]	; (800837c <checkDemoModCalisma+0x518>)
 800821c:	2201      	movs	r2, #1
 800821e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8008220:	4b4f      	ldr	r3, [pc, #316]	; (8008360 <checkDemoModCalisma+0x4fc>)
 8008222:	2200      	movs	r2, #0
 8008224:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8008226:	4b56      	ldr	r3, [pc, #344]	; (8008380 <checkDemoModCalisma+0x51c>)
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	f040 8087 	bne.w	800833e <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8008230:	4a54      	ldr	r2, [pc, #336]	; (8008384 <checkDemoModCalisma+0x520>)
 8008232:	2101      	movs	r1, #1
 8008234:	2002      	movs	r0, #2
 8008236:	f7f8 fabf 	bl	80007b8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800823a:	4a53      	ldr	r2, [pc, #332]	; (8008388 <checkDemoModCalisma+0x524>)
 800823c:	2101      	movs	r1, #1
 800823e:	2001      	movs	r0, #1
 8008240:	f7f8 faba 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8008244:	4b4b      	ldr	r3, [pc, #300]	; (8008374 <checkDemoModCalisma+0x510>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	220a      	movs	r2, #10
 800824a:	4950      	ldr	r1, [pc, #320]	; (800838c <checkDemoModCalisma+0x528>)
 800824c:	4618      	mov	r0, r3
 800824e:	f004 fe75 	bl	800cf3c <itoa>
			lcd_print(2,12,snum);
 8008252:	4a4e      	ldr	r2, [pc, #312]	; (800838c <checkDemoModCalisma+0x528>)
 8008254:	210c      	movs	r1, #12
 8008256:	2002      	movs	r0, #2
 8008258:	f7f8 faae 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 800825c:	4b44      	ldr	r3, [pc, #272]	; (8008370 <checkDemoModCalisma+0x50c>)
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	220a      	movs	r2, #10
 8008262:	494a      	ldr	r1, [pc, #296]	; (800838c <checkDemoModCalisma+0x528>)
 8008264:	4618      	mov	r0, r3
 8008266:	f004 fe69 	bl	800cf3c <itoa>
			lcd_print(2,13,snum);
 800826a:	4a48      	ldr	r2, [pc, #288]	; (800838c <checkDemoModCalisma+0x528>)
 800826c:	210d      	movs	r1, #13
 800826e:	2002      	movs	r0, #2
 8008270:	f7f8 faa2 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8008274:	4b3d      	ldr	r3, [pc, #244]	; (800836c <checkDemoModCalisma+0x508>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	220a      	movs	r2, #10
 800827a:	4944      	ldr	r1, [pc, #272]	; (800838c <checkDemoModCalisma+0x528>)
 800827c:	4618      	mov	r0, r3
 800827e:	f004 fe5d 	bl	800cf3c <itoa>
			lcd_print(2,14,snum);
 8008282:	4a42      	ldr	r2, [pc, #264]	; (800838c <checkDemoModCalisma+0x528>)
 8008284:	210e      	movs	r1, #14
 8008286:	2002      	movs	r0, #2
 8008288:	f7f8 fa96 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 800828c:	4b36      	ldr	r3, [pc, #216]	; (8008368 <checkDemoModCalisma+0x504>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	220a      	movs	r2, #10
 8008292:	493e      	ldr	r1, [pc, #248]	; (800838c <checkDemoModCalisma+0x528>)
 8008294:	4618      	mov	r0, r3
 8008296:	f004 fe51 	bl	800cf3c <itoa>
			lcd_print(2,15,snum);
 800829a:	4a3c      	ldr	r2, [pc, #240]	; (800838c <checkDemoModCalisma+0x528>)
 800829c:	210f      	movs	r1, #15
 800829e:	2002      	movs	r0, #2
 80082a0:	f7f8 fa8a 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80082a4:	4b2f      	ldr	r3, [pc, #188]	; (8008364 <checkDemoModCalisma+0x500>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	220a      	movs	r2, #10
 80082aa:	4938      	ldr	r1, [pc, #224]	; (800838c <checkDemoModCalisma+0x528>)
 80082ac:	4618      	mov	r0, r3
 80082ae:	f004 fe45 	bl	800cf3c <itoa>
			lcd_print(2,16,snum);
 80082b2:	4a36      	ldr	r2, [pc, #216]	; (800838c <checkDemoModCalisma+0x528>)
 80082b4:	2110      	movs	r1, #16
 80082b6:	2002      	movs	r0, #2
 80082b8:	f7f8 fa7e 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 80082bc:	4b34      	ldr	r3, [pc, #208]	; (8008390 <checkDemoModCalisma+0x52c>)
 80082be:	2201      	movs	r2, #1
 80082c0:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80082c2:	e03c      	b.n	800833e <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80082c4:	4b33      	ldr	r3, [pc, #204]	; (8008394 <checkDemoModCalisma+0x530>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d003      	beq.n	80082d4 <checkDemoModCalisma+0x470>
 80082cc:	4b2c      	ldr	r3, [pc, #176]	; (8008380 <checkDemoModCalisma+0x51c>)
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d134      	bne.n	800833e <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80082d4:	2200      	movs	r2, #0
 80082d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80082da:	481b      	ldr	r0, [pc, #108]	; (8008348 <checkDemoModCalisma+0x4e4>)
 80082dc:	f001 fe19 	bl	8009f12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80082e0:	2200      	movs	r2, #0
 80082e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80082e6:	4818      	ldr	r0, [pc, #96]	; (8008348 <checkDemoModCalisma+0x4e4>)
 80082e8:	f001 fe13 	bl	8009f12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80082ec:	2200      	movs	r2, #0
 80082ee:	2104      	movs	r1, #4
 80082f0:	4815      	ldr	r0, [pc, #84]	; (8008348 <checkDemoModCalisma+0x4e4>)
 80082f2:	f001 fe0e 	bl	8009f12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80082f6:	2200      	movs	r2, #0
 80082f8:	2102      	movs	r1, #2
 80082fa:	4813      	ldr	r0, [pc, #76]	; (8008348 <checkDemoModCalisma+0x4e4>)
 80082fc:	f001 fe09 	bl	8009f12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008300:	2200      	movs	r2, #0
 8008302:	2101      	movs	r1, #1
 8008304:	4810      	ldr	r0, [pc, #64]	; (8008348 <checkDemoModCalisma+0x4e4>)
 8008306:	f001 fe04 	bl	8009f12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800830a:	2200      	movs	r2, #0
 800830c:	2120      	movs	r1, #32
 800830e:	480d      	ldr	r0, [pc, #52]	; (8008344 <checkDemoModCalisma+0x4e0>)
 8008310:	f001 fdff 	bl	8009f12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008314:	2200      	movs	r2, #0
 8008316:	2110      	movs	r1, #16
 8008318:	480a      	ldr	r0, [pc, #40]	; (8008344 <checkDemoModCalisma+0x4e0>)
 800831a:	f001 fdfa 	bl	8009f12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800831e:	2200      	movs	r2, #0
 8008320:	2180      	movs	r1, #128	; 0x80
 8008322:	480b      	ldr	r0, [pc, #44]	; (8008350 <checkDemoModCalisma+0x4ec>)
 8008324:	f001 fdf5 	bl	8009f12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008328:	2200      	movs	r2, #0
 800832a:	2140      	movs	r1, #64	; 0x40
 800832c:	4808      	ldr	r0, [pc, #32]	; (8008350 <checkDemoModCalisma+0x4ec>)
 800832e:	f001 fdf0 	bl	8009f12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008332:	2200      	movs	r2, #0
 8008334:	2120      	movs	r1, #32
 8008336:	4806      	ldr	r0, [pc, #24]	; (8008350 <checkDemoModCalisma+0x4ec>)
 8008338:	f001 fdeb 	bl	8009f12 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 800833c:	e7ff      	b.n	800833e <checkDemoModCalisma+0x4da>
 800833e:	bf00      	nop
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	40011000 	.word	0x40011000
 8008348:	40010c00 	.word	0x40010c00
 800834c:	20000d89 	.word	0x20000d89
 8008350:	40010800 	.word	0x40010800
 8008354:	20000cb0 	.word	0x20000cb0
 8008358:	20000cc0 	.word	0x20000cc0
 800835c:	20000d88 	.word	0x20000d88
 8008360:	20000d6e 	.word	0x20000d6e
 8008364:	20000d2d 	.word	0x20000d2d
 8008368:	20000d2e 	.word	0x20000d2e
 800836c:	200009b4 	.word	0x200009b4
 8008370:	200009b5 	.word	0x200009b5
 8008374:	20000d2f 	.word	0x20000d2f
 8008378:	20000c38 	.word	0x20000c38
 800837c:	20000d5c 	.word	0x20000d5c
 8008380:	20000d4d 	.word	0x20000d4d
 8008384:	0800e76c 	.word	0x0800e76c
 8008388:	0800e778 	.word	0x0800e778
 800838c:	20000ca8 	.word	0x20000ca8
 8008390:	20000d64 	.word	0x20000d64
 8008394:	20000d4e 	.word	0x20000d4e

08008398 <mergeData>:

char* mergeData() {
 8008398:	b580      	push	{r7, lr}
 800839a:	b09e      	sub	sp, #120	; 0x78
 800839c:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 800839e:	2300      	movs	r3, #0
 80083a0:	643b      	str	r3, [r7, #64]	; 0x40
 80083a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80083a6:	2229      	movs	r2, #41	; 0x29
 80083a8:	2100      	movs	r1, #0
 80083aa:	4618      	mov	r0, r3
 80083ac:	f004 fede 	bl	800d16c <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80083b0:	4b6a      	ldr	r3, [pc, #424]	; (800855c <mergeData+0x1c4>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	713b      	strb	r3, [r7, #4]
 80083b6:	4b6a      	ldr	r3, [pc, #424]	; (8008560 <mergeData+0x1c8>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	717b      	strb	r3, [r7, #5]
 80083bc:	4b69      	ldr	r3, [pc, #420]	; (8008564 <mergeData+0x1cc>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	71bb      	strb	r3, [r7, #6]
 80083c2:	4b69      	ldr	r3, [pc, #420]	; (8008568 <mergeData+0x1d0>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	71fb      	strb	r3, [r7, #7]
 80083c8:	4b68      	ldr	r3, [pc, #416]	; (800856c <mergeData+0x1d4>)
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	723b      	strb	r3, [r7, #8]
 80083ce:	4b68      	ldr	r3, [pc, #416]	; (8008570 <mergeData+0x1d8>)
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	727b      	strb	r3, [r7, #9]
 80083d4:	4b67      	ldr	r3, [pc, #412]	; (8008574 <mergeData+0x1dc>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	72bb      	strb	r3, [r7, #10]
 80083da:	4b67      	ldr	r3, [pc, #412]	; (8008578 <mergeData+0x1e0>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	72fb      	strb	r3, [r7, #11]
 80083e0:	4b66      	ldr	r3, [pc, #408]	; (800857c <mergeData+0x1e4>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	733b      	strb	r3, [r7, #12]
 80083e6:	4b66      	ldr	r3, [pc, #408]	; (8008580 <mergeData+0x1e8>)
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	737b      	strb	r3, [r7, #13]
 80083ec:	4b65      	ldr	r3, [pc, #404]	; (8008584 <mergeData+0x1ec>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	73bb      	strb	r3, [r7, #14]
 80083f2:	4b65      	ldr	r3, [pc, #404]	; (8008588 <mergeData+0x1f0>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	73fb      	strb	r3, [r7, #15]
 80083f8:	4b64      	ldr	r3, [pc, #400]	; (800858c <mergeData+0x1f4>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	743b      	strb	r3, [r7, #16]
 80083fe:	4b64      	ldr	r3, [pc, #400]	; (8008590 <mergeData+0x1f8>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	747b      	strb	r3, [r7, #17]
 8008404:	4b63      	ldr	r3, [pc, #396]	; (8008594 <mergeData+0x1fc>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	74bb      	strb	r3, [r7, #18]
 800840a:	4b63      	ldr	r3, [pc, #396]	; (8008598 <mergeData+0x200>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	74fb      	strb	r3, [r7, #19]
 8008410:	4b62      	ldr	r3, [pc, #392]	; (800859c <mergeData+0x204>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	753b      	strb	r3, [r7, #20]
 8008416:	4b62      	ldr	r3, [pc, #392]	; (80085a0 <mergeData+0x208>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	757b      	strb	r3, [r7, #21]
 800841c:	4b61      	ldr	r3, [pc, #388]	; (80085a4 <mergeData+0x20c>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	75bb      	strb	r3, [r7, #22]
 8008422:	4b61      	ldr	r3, [pc, #388]	; (80085a8 <mergeData+0x210>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	75fb      	strb	r3, [r7, #23]
 8008428:	4b60      	ldr	r3, [pc, #384]	; (80085ac <mergeData+0x214>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	763b      	strb	r3, [r7, #24]
 800842e:	4b60      	ldr	r3, [pc, #384]	; (80085b0 <mergeData+0x218>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	767b      	strb	r3, [r7, #25]
 8008434:	4b5f      	ldr	r3, [pc, #380]	; (80085b4 <mergeData+0x21c>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	76bb      	strb	r3, [r7, #26]
 800843a:	4b5f      	ldr	r3, [pc, #380]	; (80085b8 <mergeData+0x220>)
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	76fb      	strb	r3, [r7, #27]
 8008440:	4b5e      	ldr	r3, [pc, #376]	; (80085bc <mergeData+0x224>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	773b      	strb	r3, [r7, #28]
 8008446:	4b5e      	ldr	r3, [pc, #376]	; (80085c0 <mergeData+0x228>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	777b      	strb	r3, [r7, #29]
 800844c:	4b5d      	ldr	r3, [pc, #372]	; (80085c4 <mergeData+0x22c>)
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	77bb      	strb	r3, [r7, #30]
 8008452:	4b5d      	ldr	r3, [pc, #372]	; (80085c8 <mergeData+0x230>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	77fb      	strb	r3, [r7, #31]
 8008458:	4b5c      	ldr	r3, [pc, #368]	; (80085cc <mergeData+0x234>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	f887 3020 	strb.w	r3, [r7, #32]
 8008460:	4b5b      	ldr	r3, [pc, #364]	; (80085d0 <mergeData+0x238>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008468:	4b5a      	ldr	r3, [pc, #360]	; (80085d4 <mergeData+0x23c>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008470:	4b59      	ldr	r3, [pc, #356]	; (80085d8 <mergeData+0x240>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008478:	4b58      	ldr	r3, [pc, #352]	; (80085dc <mergeData+0x244>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 8008480:	4b57      	ldr	r3, [pc, #348]	; (80085e0 <mergeData+0x248>)
 8008482:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 8008486:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 800848a:	4b55      	ldr	r3, [pc, #340]	; (80085e0 <mergeData+0x248>)
 800848c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8008490:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8008494:	4b52      	ldr	r3, [pc, #328]	; (80085e0 <mergeData+0x248>)
 8008496:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800849a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 800849e:	4b50      	ldr	r3, [pc, #320]	; (80085e0 <mergeData+0x248>)
 80084a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80084a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 80084a8:	4b4d      	ldr	r3, [pc, #308]	; (80085e0 <mergeData+0x248>)
 80084aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80084ae:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 80084b2:	4b4b      	ldr	r3, [pc, #300]	; (80085e0 <mergeData+0x248>)
 80084b4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80084b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 80084bc:	4b48      	ldr	r3, [pc, #288]	; (80085e0 <mergeData+0x248>)
 80084be:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80084c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 80084c6:	4b46      	ldr	r3, [pc, #280]	; (80085e0 <mergeData+0x248>)
 80084c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80084cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 80084d0:	4b43      	ldr	r3, [pc, #268]	; (80085e0 <mergeData+0x248>)
 80084d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80084d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 80084da:	4b41      	ldr	r3, [pc, #260]	; (80085e0 <mergeData+0x248>)
 80084dc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80084e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 80084e4:	4b3e      	ldr	r3, [pc, #248]	; (80085e0 <mergeData+0x248>)
 80084e6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80084ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80084ee:	4b3d      	ldr	r3, [pc, #244]	; (80085e4 <mergeData+0x24c>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80084f6:	2300      	movs	r3, #0
 80084f8:	677b      	str	r3, [r7, #116]	; 0x74
 80084fa:	e015      	b.n	8008528 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 80084fc:	1d3a      	adds	r2, r7, #4
 80084fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008500:	4413      	add	r3, r2
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	461a      	mov	r2, r3
 8008506:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800850a:	4937      	ldr	r1, [pc, #220]	; (80085e8 <mergeData+0x250>)
 800850c:	4618      	mov	r0, r3
 800850e:	f004 fe0d 	bl	800d12c <siprintf>
	    strcat(combinedString, temp);
 8008512:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008516:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f004 fe2d 	bl	800d17c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008524:	3301      	adds	r3, #1
 8008526:	677b      	str	r3, [r7, #116]	; 0x74
 8008528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800852a:	2b2c      	cmp	r3, #44	; 0x2c
 800852c:	d9e6      	bls.n	80084fc <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800852e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008532:	4618      	mov	r0, r3
 8008534:	f7f7 fe76 	bl	8000224 <strlen>
 8008538:	4603      	mov	r3, r0
 800853a:	3301      	adds	r3, #1
 800853c:	4618      	mov	r0, r3
 800853e:	f004 fcff 	bl	800cf40 <malloc>
 8008542:	4603      	mov	r3, r0
 8008544:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 8008546:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800854a:	4619      	mov	r1, r3
 800854c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800854e:	f004 fe61 	bl	800d214 <strcpy>
	return result;
 8008552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008554:	4618      	mov	r0, r3
 8008556:	3778      	adds	r7, #120	; 0x78
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20000d3f 	.word	0x20000d3f
 8008560:	20000d31 	.word	0x20000d31
 8008564:	20000d34 	.word	0x20000d34
 8008568:	20000d35 	.word	0x20000d35
 800856c:	20000d36 	.word	0x20000d36
 8008570:	20000d3d 	.word	0x20000d3d
 8008574:	20000d37 	.word	0x20000d37
 8008578:	20000d38 	.word	0x20000d38
 800857c:	20000d3c 	.word	0x20000d3c
 8008580:	20000d39 	.word	0x20000d39
 8008584:	20000d49 	.word	0x20000d49
 8008588:	20000d3a 	.word	0x20000d3a
 800858c:	20000d4a 	.word	0x20000d4a
 8008590:	20000d3b 	.word	0x20000d3b
 8008594:	20000d4b 	.word	0x20000d4b
 8008598:	20000d3e 	.word	0x20000d3e
 800859c:	20000d40 	.word	0x20000d40
 80085a0:	20000d41 	.word	0x20000d41
 80085a4:	20000d42 	.word	0x20000d42
 80085a8:	20000d43 	.word	0x20000d43
 80085ac:	20000d44 	.word	0x20000d44
 80085b0:	20000d45 	.word	0x20000d45
 80085b4:	20000d46 	.word	0x20000d46
 80085b8:	20000d47 	.word	0x20000d47
 80085bc:	20000d48 	.word	0x20000d48
 80085c0:	20000d4c 	.word	0x20000d4c
 80085c4:	20000d4e 	.word	0x20000d4e
 80085c8:	20000d2d 	.word	0x20000d2d
 80085cc:	20000d2e 	.word	0x20000d2e
 80085d0:	200009b4 	.word	0x200009b4
 80085d4:	200009b5 	.word	0x200009b5
 80085d8:	20000d2f 	.word	0x20000d2f
 80085dc:	20000d51 	.word	0x20000d51
 80085e0:	20000c38 	.word	0x20000c38
 80085e4:	20000940 	.word	0x20000940
 80085e8:	0800e78c 	.word	0x0800e78c

080085ec <mainLoop>:

void mainLoop() {
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80085f2:	f7fd ffef 	bl	80065d4 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80085f6:	2101      	movs	r1, #1
 80085f8:	48ad      	ldr	r0, [pc, #692]	; (80088b0 <mainLoop+0x2c4>)
 80085fa:	f001 fc73 	bl	8009ee4 <HAL_GPIO_ReadPin>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d136      	bne.n	8008672 <mainLoop+0x86>
 8008604:	2108      	movs	r1, #8
 8008606:	48ab      	ldr	r0, [pc, #684]	; (80088b4 <mainLoop+0x2c8>)
 8008608:	f001 fc6c 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d12f      	bne.n	8008672 <mainLoop+0x86>
 8008612:	2102      	movs	r1, #2
 8008614:	48a6      	ldr	r0, [pc, #664]	; (80088b0 <mainLoop+0x2c4>)
 8008616:	f001 fc65 	bl	8009ee4 <HAL_GPIO_ReadPin>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d128      	bne.n	8008672 <mainLoop+0x86>
 8008620:	2104      	movs	r1, #4
 8008622:	48a3      	ldr	r0, [pc, #652]	; (80088b0 <mainLoop+0x2c4>)
 8008624:	f001 fc5e 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d121      	bne.n	8008672 <mainLoop+0x86>
 800862e:	2108      	movs	r1, #8
 8008630:	489f      	ldr	r0, [pc, #636]	; (80088b0 <mainLoop+0x2c4>)
 8008632:	f001 fc57 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d11a      	bne.n	8008672 <mainLoop+0x86>
 800863c:	2180      	movs	r1, #128	; 0x80
 800863e:	489d      	ldr	r0, [pc, #628]	; (80088b4 <mainLoop+0x2c8>)
 8008640:	f001 fc50 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8008644:	4603      	mov	r3, r0
 8008646:	2b01      	cmp	r3, #1
 8008648:	d113      	bne.n	8008672 <mainLoop+0x86>
 800864a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800864e:	4899      	ldr	r0, [pc, #612]	; (80088b4 <mainLoop+0x2c8>)
 8008650:	f001 fc48 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8008654:	4603      	mov	r3, r0
 8008656:	2b01      	cmp	r3, #1
 8008658:	d10b      	bne.n	8008672 <mainLoop+0x86>
 800865a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800865e:	4895      	ldr	r0, [pc, #596]	; (80088b4 <mainLoop+0x2c8>)
 8008660:	f001 fc40 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8008664:	4603      	mov	r3, r0
 8008666:	2b01      	cmp	r3, #1
 8008668:	d103      	bne.n	8008672 <mainLoop+0x86>
			butonKontrol=0;
 800866a:	4b93      	ldr	r3, [pc, #588]	; (80088b8 <mainLoop+0x2cc>)
 800866c:	2200      	movs	r2, #0
 800866e:	701a      	strb	r2, [r3, #0]
 8008670:	e003      	b.n	800867a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8008672:	4b92      	ldr	r3, [pc, #584]	; (80088bc <mainLoop+0x2d0>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a92      	ldr	r2, [pc, #584]	; (80088c0 <mainLoop+0x2d4>)
 8008678:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800867a:	4b92      	ldr	r3, [pc, #584]	; (80088c4 <mainLoop+0x2d8>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d03a      	beq.n	80086f8 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008682:	bf00      	nop
 8008684:	4890      	ldr	r0, [pc, #576]	; (80088c8 <mainLoop+0x2dc>)
 8008686:	f002 fa56 	bl	800ab36 <HAL_I2C_GetError>
 800868a:	4603      	mov	r3, r0
 800868c:	2b04      	cmp	r3, #4
 800868e:	d0f9      	beq.n	8008684 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008690:	bf00      	nop
 8008692:	488d      	ldr	r0, [pc, #564]	; (80088c8 <mainLoop+0x2dc>)
 8008694:	f002 fa42 	bl	800ab1c <HAL_I2C_GetState>
 8008698:	4603      	mov	r3, r0
 800869a:	2b20      	cmp	r3, #32
 800869c:	d1f9      	bne.n	8008692 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800869e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80086a2:	9302      	str	r3, [sp, #8]
 80086a4:	236e      	movs	r3, #110	; 0x6e
 80086a6:	9301      	str	r3, [sp, #4]
 80086a8:	4b88      	ldr	r3, [pc, #544]	; (80088cc <mainLoop+0x2e0>)
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	236e      	movs	r3, #110	; 0x6e
 80086ae:	2200      	movs	r2, #0
 80086b0:	21a0      	movs	r1, #160	; 0xa0
 80086b2:	4885      	ldr	r0, [pc, #532]	; (80088c8 <mainLoop+0x2dc>)
 80086b4:	f001 fed0 	bl	800a458 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80086b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086bc:	f000 fe42 	bl	8009344 <HAL_Delay>

		  hafizaYaz=0;
 80086c0:	4b80      	ldr	r3, [pc, #512]	; (80088c4 <mainLoop+0x2d8>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80086c6:	4b82      	ldr	r3, [pc, #520]	; (80088d0 <mainLoop+0x2e4>)
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d105      	bne.n	80086da <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 80086ce:	4a81      	ldr	r2, [pc, #516]	; (80088d4 <mainLoop+0x2e8>)
 80086d0:	2101      	movs	r1, #1
 80086d2:	2002      	movs	r0, #2
 80086d4:	f7f8 f870 	bl	80007b8 <lcd_print>
 80086d8:	e008      	b.n	80086ec <mainLoop+0x100>
		  } else if(dilSecim==1) {
 80086da:	4b7d      	ldr	r3, [pc, #500]	; (80088d0 <mainLoop+0x2e4>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d104      	bne.n	80086ec <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 80086e2:	4a7d      	ldr	r2, [pc, #500]	; (80088d8 <mainLoop+0x2ec>)
 80086e4:	2101      	movs	r1, #1
 80086e6:	2002      	movs	r0, #2
 80086e8:	f7f8 f866 	bl	80007b8 <lcd_print>
		  }

		  HAL_Delay(1000);
 80086ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086f0:	f000 fe28 	bl	8009344 <HAL_Delay>
		  lcd_clear();
 80086f4:	f7f8 f88c 	bl	8000810 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80086f8:	4b78      	ldr	r3, [pc, #480]	; (80088dc <mainLoop+0x2f0>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	f083 0301 	eor.w	r3, r3, #1
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d06e      	beq.n	80087e4 <mainLoop+0x1f8>
 8008706:	4870      	ldr	r0, [pc, #448]	; (80088c8 <mainLoop+0x2dc>)
 8008708:	f002 fa08 	bl	800ab1c <HAL_I2C_GetState>
 800870c:	4603      	mov	r3, r0
 800870e:	2b20      	cmp	r3, #32
 8008710:	d168      	bne.n	80087e4 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8008712:	4b73      	ldr	r3, [pc, #460]	; (80088e0 <mainLoop+0x2f4>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	f083 0301 	eor.w	r3, r3, #1
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d044      	beq.n	80087aa <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8008720:	4a70      	ldr	r2, [pc, #448]	; (80088e4 <mainLoop+0x2f8>)
 8008722:	2101      	movs	r1, #1
 8008724:	2001      	movs	r0, #1
 8008726:	f7f8 f847 	bl	80007b8 <lcd_print>
			  if(dilSecim==0) {
 800872a:	4b69      	ldr	r3, [pc, #420]	; (80088d0 <mainLoop+0x2e4>)
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d105      	bne.n	800873e <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8008732:	4a6d      	ldr	r2, [pc, #436]	; (80088e8 <mainLoop+0x2fc>)
 8008734:	2101      	movs	r1, #1
 8008736:	2002      	movs	r0, #2
 8008738:	f7f8 f83e 	bl	80007b8 <lcd_print>
 800873c:	e008      	b.n	8008750 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 800873e:	4b64      	ldr	r3, [pc, #400]	; (80088d0 <mainLoop+0x2e4>)
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d104      	bne.n	8008750 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8008746:	4a69      	ldr	r2, [pc, #420]	; (80088ec <mainLoop+0x300>)
 8008748:	2101      	movs	r1, #1
 800874a:	2002      	movs	r0, #2
 800874c:	f7f8 f834 	bl	80007b8 <lcd_print>
			  }
			  HAL_Delay(1000);
 8008750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008754:	f000 fdf6 	bl	8009344 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008758:	bf00      	nop
 800875a:	485b      	ldr	r0, [pc, #364]	; (80088c8 <mainLoop+0x2dc>)
 800875c:	f002 f9eb 	bl	800ab36 <HAL_I2C_GetError>
 8008760:	4603      	mov	r3, r0
 8008762:	2b04      	cmp	r3, #4
 8008764:	d0f9      	beq.n	800875a <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008766:	e003      	b.n	8008770 <mainLoop+0x184>
				  HAL_Delay(1000);
 8008768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800876c:	f000 fdea 	bl	8009344 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008770:	4855      	ldr	r0, [pc, #340]	; (80088c8 <mainLoop+0x2dc>)
 8008772:	f002 f9d3 	bl	800ab1c <HAL_I2C_GetState>
 8008776:	4603      	mov	r3, r0
 8008778:	2b20      	cmp	r3, #32
 800877a:	d1f5      	bne.n	8008768 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 800877c:	4b54      	ldr	r3, [pc, #336]	; (80088d0 <mainLoop+0x2e4>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d105      	bne.n	8008790 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8008784:	4a5a      	ldr	r2, [pc, #360]	; (80088f0 <mainLoop+0x304>)
 8008786:	2101      	movs	r1, #1
 8008788:	2002      	movs	r0, #2
 800878a:	f7f8 f815 	bl	80007b8 <lcd_print>
 800878e:	e008      	b.n	80087a2 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8008790:	4b4f      	ldr	r3, [pc, #316]	; (80088d0 <mainLoop+0x2e4>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d104      	bne.n	80087a2 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8008798:	4a56      	ldr	r2, [pc, #344]	; (80088f4 <mainLoop+0x308>)
 800879a:	2101      	movs	r1, #1
 800879c:	2002      	movs	r0, #2
 800879e:	f7f8 f80b 	bl	80007b8 <lcd_print>
			  }

			  ilkOkuma=1;
 80087a2:	4b4f      	ldr	r3, [pc, #316]	; (80088e0 <mainLoop+0x2f4>)
 80087a4:	2201      	movs	r2, #1
 80087a6:	701a      	strb	r2, [r3, #0]
 80087a8:	e014      	b.n	80087d4 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80087aa:	4b49      	ldr	r3, [pc, #292]	; (80088d0 <mainLoop+0x2e4>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d105      	bne.n	80087be <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80087b2:	4a51      	ldr	r2, [pc, #324]	; (80088f8 <mainLoop+0x30c>)
 80087b4:	2101      	movs	r1, #1
 80087b6:	2002      	movs	r0, #2
 80087b8:	f7f7 fffe 	bl	80007b8 <lcd_print>
 80087bc:	e008      	b.n	80087d0 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 80087be:	4b44      	ldr	r3, [pc, #272]	; (80088d0 <mainLoop+0x2e4>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d104      	bne.n	80087d0 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 80087c6:	4a4d      	ldr	r2, [pc, #308]	; (80088fc <mainLoop+0x310>)
 80087c8:	2101      	movs	r1, #1
 80087ca:	2002      	movs	r0, #2
 80087cc:	f7f7 fff4 	bl	80007b8 <lcd_print>
			  }
			  lcd_clear();
 80087d0:	f7f8 f81e 	bl	8000810 <lcd_clear>
		  }

		  lcd_clear();
 80087d4:	f7f8 f81c 	bl	8000810 <lcd_clear>

		  eepromKontrol(1);
 80087d8:	2001      	movs	r0, #1
 80087da:	f7fd faab 	bl	8005d34 <eepromKontrol>
		  hafizaOku=1;
 80087de:	4b3f      	ldr	r3, [pc, #252]	; (80088dc <mainLoop+0x2f0>)
 80087e0:	2201      	movs	r2, #1
 80087e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80087e4:	4b46      	ldr	r3, [pc, #280]	; (8008900 <mainLoop+0x314>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d11c      	bne.n	8008826 <mainLoop+0x23a>
 80087ec:	4b45      	ldr	r3, [pc, #276]	; (8008904 <mainLoop+0x318>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	f083 0301 	eor.w	r3, r3, #1
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d015      	beq.n	8008826 <mainLoop+0x23a>
 80087fa:	4b43      	ldr	r3, [pc, #268]	; (8008908 <mainLoop+0x31c>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d111      	bne.n	8008826 <mainLoop+0x23a>
			lcd_clear();
 8008802:	f7f8 f805 	bl	8000810 <lcd_clear>
			HAL_Delay(10);
 8008806:	200a      	movs	r0, #10
 8008808:	f000 fd9c 	bl	8009344 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 800880c:	4a3f      	ldr	r2, [pc, #252]	; (800890c <mainLoop+0x320>)
 800880e:	2101      	movs	r1, #1
 8008810:	2001      	movs	r0, #1
 8008812:	f7f7 ffd1 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8008816:	4a3e      	ldr	r2, [pc, #248]	; (8008910 <mainLoop+0x324>)
 8008818:	2101      	movs	r1, #1
 800881a:	2002      	movs	r0, #2
 800881c:	f7f7 ffcc 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 8008820:	4b38      	ldr	r3, [pc, #224]	; (8008904 <mainLoop+0x318>)
 8008822:	2201      	movs	r2, #1
 8008824:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8008826:	4b36      	ldr	r3, [pc, #216]	; (8008900 <mainLoop+0x314>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d112      	bne.n	8008854 <mainLoop+0x268>
 800882e:	2102      	movs	r1, #2
 8008830:	481f      	ldr	r0, [pc, #124]	; (80088b0 <mainLoop+0x2c4>)
 8008832:	f001 fb57 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8008836:	4603      	mov	r3, r0
 8008838:	2b01      	cmp	r3, #1
 800883a:	d10b      	bne.n	8008854 <mainLoop+0x268>
 800883c:	2104      	movs	r1, #4
 800883e:	481c      	ldr	r0, [pc, #112]	; (80088b0 <mainLoop+0x2c4>)
 8008840:	f001 fb50 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8008844:	4603      	mov	r3, r0
 8008846:	2b01      	cmp	r3, #1
 8008848:	d104      	bne.n	8008854 <mainLoop+0x268>
			menuGiris=1;
 800884a:	4b2d      	ldr	r3, [pc, #180]	; (8008900 <mainLoop+0x314>)
 800884c:	2201      	movs	r2, #1
 800884e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8008850:	f7f7 ffde 	bl	8000810 <lcd_clear>
		}

		if(menuGiris==1) {
 8008854:	4b2a      	ldr	r3, [pc, #168]	; (8008900 <mainLoop+0x314>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d102      	bne.n	8008862 <mainLoop+0x276>
			menu(&hi2c1);
 800885c:	481a      	ldr	r0, [pc, #104]	; (80088c8 <mainLoop+0x2dc>)
 800885e:	f7f8 fff1 	bl	8001844 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8008862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008866:	4813      	ldr	r0, [pc, #76]	; (80088b4 <mainLoop+0x2c8>)
 8008868:	f001 fb6b 	bl	8009f42 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 800886c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008870:	4828      	ldr	r0, [pc, #160]	; (8008914 <mainLoop+0x328>)
 8008872:	f001 fb37 	bl	8009ee4 <HAL_GPIO_ReadPin>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10a      	bne.n	8008892 <mainLoop+0x2a6>
 800887c:	4b26      	ldr	r3, [pc, #152]	; (8008918 <mainLoop+0x32c>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	f083 0301 	eor.w	r3, r3, #1
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <mainLoop+0x2a6>
			stopVar=1;
 800888a:	4b24      	ldr	r3, [pc, #144]	; (800891c <mainLoop+0x330>)
 800888c:	2201      	movs	r2, #1
 800888e:	701a      	strb	r2, [r3, #0]
 8008890:	e002      	b.n	8008898 <mainLoop+0x2ac>
		} else {
			stopVar=0;
 8008892:	4b22      	ldr	r3, [pc, #136]	; (800891c <mainLoop+0x330>)
 8008894:	2200      	movs	r2, #0
 8008896:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8008898:	f7fd febc 	bl	8006614 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 800889c:	f7fd feee 	bl	800667c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80088a0:	f7fd ff32 	bl	8006708 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80088a4:	f7fd ff82 	bl	80067ac <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80088a8:	f7ff fadc 	bl	8007e64 <checkDemoModCalisma>
		checkLCDBacklight();
 80088ac:	e6a1      	b.n	80085f2 <mainLoop+0x6>
 80088ae:	bf00      	nop
 80088b0:	40010800 	.word	0x40010800
 80088b4:	40011000 	.word	0x40011000
 80088b8:	20000d5f 	.word	0x20000d5f
 80088bc:	20000cb0 	.word	0x20000cb0
 80088c0:	20000ccc 	.word	0x20000ccc
 80088c4:	20000d5c 	.word	0x20000d5c
 80088c8:	20000b54 	.word	0x20000b54
 80088cc:	20000c38 	.word	0x20000c38
 80088d0:	20000d51 	.word	0x20000d51
 80088d4:	0800e790 	.word	0x0800e790
 80088d8:	0800e7a4 	.word	0x0800e7a4
 80088dc:	20000d5d 	.word	0x20000d5d
 80088e0:	20000d5e 	.word	0x20000d5e
 80088e4:	0800e7b8 	.word	0x0800e7b8
 80088e8:	0800e7cc 	.word	0x0800e7cc
 80088ec:	0800e7e0 	.word	0x0800e7e0
 80088f0:	0800e7f4 	.word	0x0800e7f4
 80088f4:	0800e808 	.word	0x0800e808
 80088f8:	0800e81c 	.word	0x0800e81c
 80088fc:	0800e830 	.word	0x0800e830
 8008900:	20000d4d 	.word	0x20000d4d
 8008904:	20000d64 	.word	0x20000d64
 8008908:	20000d4e 	.word	0x20000d4e
 800890c:	0800e6f4 	.word	0x0800e6f4
 8008910:	0800e708 	.word	0x0800e708
 8008914:	40010c00 	.word	0x40010c00
 8008918:	20000d85 	.word	0x20000d85
 800891c:	20000d82 	.word	0x20000d82

08008920 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008928:	4b04      	ldr	r3, [pc, #16]	; (800893c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3301      	adds	r3, #1
 800892e:	4a03      	ldr	r2, [pc, #12]	; (800893c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008930:	6013      	str	r3, [r2, #0]
}
 8008932:	bf00      	nop
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	bc80      	pop	{r7}
 800893a:	4770      	bx	lr
 800893c:	20000cb0 	.word	0x20000cb0

08008940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008944:	f000 fc9c 	bl	8009280 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008948:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800894c:	f000 fcfa 	bl	8009344 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008950:	f000 f8cc 	bl	8008aec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008954:	f000 f9ee 	bl	8008d34 <MX_GPIO_Init>
  MX_CAN_Init();
 8008958:	f000 f90e 	bl	8008b78 <MX_CAN_Init>
  MX_I2C1_Init();
 800895c:	f000 f940 	bl	8008be0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008960:	f000 f96c 	bl	8008c3c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008964:	f000 f9bc 	bl	8008ce0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008968:	2201      	movs	r2, #1
 800896a:	2140      	movs	r1, #64	; 0x40
 800896c:	4851      	ldr	r0, [pc, #324]	; (8008ab4 <main+0x174>)
 800896e:	f001 fad0 	bl	8009f12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008972:	2201      	movs	r2, #1
 8008974:	2180      	movs	r1, #128	; 0x80
 8008976:	484f      	ldr	r0, [pc, #316]	; (8008ab4 <main+0x174>)
 8008978:	f001 facb 	bl	8009f12 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800897c:	200a      	movs	r0, #10
 800897e:	f000 fce1 	bl	8009344 <HAL_Delay>
  lcd_init();
 8008982:	f7f7 fee7 	bl	8000754 <lcd_init>
  HAL_Delay(10);
 8008986:	200a      	movs	r0, #10
 8008988:	f000 fcdc 	bl	8009344 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 800898c:	484a      	ldr	r0, [pc, #296]	; (8008ab8 <main+0x178>)
 800898e:	f003 f973 	bl	800bc78 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008992:	bf00      	nop
 8008994:	4849      	ldr	r0, [pc, #292]	; (8008abc <main+0x17c>)
 8008996:	f002 f8ce 	bl	800ab36 <HAL_I2C_GetError>
 800899a:	4603      	mov	r3, r0
 800899c:	2b04      	cmp	r3, #4
 800899e:	d0f9      	beq.n	8008994 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80089a0:	bf00      	nop
 80089a2:	4846      	ldr	r0, [pc, #280]	; (8008abc <main+0x17c>)
 80089a4:	f002 f8ba 	bl	800ab1c <HAL_I2C_GetState>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b20      	cmp	r3, #32
 80089ac:	d1f9      	bne.n	80089a2 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80089ae:	2200      	movs	r2, #0
 80089b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80089b4:	483f      	ldr	r0, [pc, #252]	; (8008ab4 <main+0x174>)
 80089b6:	f001 faac 	bl	8009f12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80089ba:	2200      	movs	r2, #0
 80089bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80089c0:	483c      	ldr	r0, [pc, #240]	; (8008ab4 <main+0x174>)
 80089c2:	f001 faa6 	bl	8009f12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80089c6:	2200      	movs	r2, #0
 80089c8:	2104      	movs	r1, #4
 80089ca:	483a      	ldr	r0, [pc, #232]	; (8008ab4 <main+0x174>)
 80089cc:	f001 faa1 	bl	8009f12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80089d0:	2200      	movs	r2, #0
 80089d2:	2102      	movs	r1, #2
 80089d4:	4837      	ldr	r0, [pc, #220]	; (8008ab4 <main+0x174>)
 80089d6:	f001 fa9c 	bl	8009f12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80089da:	2200      	movs	r2, #0
 80089dc:	2101      	movs	r1, #1
 80089de:	4835      	ldr	r0, [pc, #212]	; (8008ab4 <main+0x174>)
 80089e0:	f001 fa97 	bl	8009f12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80089e4:	2200      	movs	r2, #0
 80089e6:	2120      	movs	r1, #32
 80089e8:	4835      	ldr	r0, [pc, #212]	; (8008ac0 <main+0x180>)
 80089ea:	f001 fa92 	bl	8009f12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80089ee:	2200      	movs	r2, #0
 80089f0:	2110      	movs	r1, #16
 80089f2:	4833      	ldr	r0, [pc, #204]	; (8008ac0 <main+0x180>)
 80089f4:	f001 fa8d 	bl	8009f12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80089f8:	2200      	movs	r2, #0
 80089fa:	2180      	movs	r1, #128	; 0x80
 80089fc:	4831      	ldr	r0, [pc, #196]	; (8008ac4 <main+0x184>)
 80089fe:	f001 fa88 	bl	8009f12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008a02:	2200      	movs	r2, #0
 8008a04:	2140      	movs	r1, #64	; 0x40
 8008a06:	482f      	ldr	r0, [pc, #188]	; (8008ac4 <main+0x184>)
 8008a08:	f001 fa83 	bl	8009f12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2120      	movs	r1, #32
 8008a10:	482c      	ldr	r0, [pc, #176]	; (8008ac4 <main+0x184>)
 8008a12:	f001 fa7e 	bl	8009f12 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008a16:	2200      	movs	r2, #0
 8008a18:	2110      	movs	r1, #16
 8008a1a:	482a      	ldr	r0, [pc, #168]	; (8008ac4 <main+0x184>)
 8008a1c:	f001 fa79 	bl	8009f12 <HAL_GPIO_WritePin>

  i2cTest();
 8008a20:	f7fd fd2a 	bl	8006478 <i2cTest>
  HAL_Delay(100);
 8008a24:	2064      	movs	r0, #100	; 0x64
 8008a26:	f000 fc8d 	bl	8009344 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8008a2a:	4a27      	ldr	r2, [pc, #156]	; (8008ac8 <main+0x188>)
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	2001      	movs	r0, #1
 8008a30:	f7f7 fec2 	bl	80007b8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8008a34:	4a25      	ldr	r2, [pc, #148]	; (8008acc <main+0x18c>)
 8008a36:	2101      	movs	r1, #1
 8008a38:	2002      	movs	r0, #2
 8008a3a:	f7f7 febd 	bl	80007b8 <lcd_print>
  HAL_Delay(1000);
 8008a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008a42:	f000 fc7f 	bl	8009344 <HAL_Delay>
  lcd_clear();
 8008a46:	f7f7 fee3 	bl	8000810 <lcd_clear>

  eepromKontrol(0);
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	f7fd f972 	bl	8005d34 <eepromKontrol>
  HAL_Delay(200);
 8008a50:	20c8      	movs	r0, #200	; 0xc8
 8008a52:	f000 fc77 	bl	8009344 <HAL_Delay>

  lcd_clear();
 8008a56:	f7f7 fedb 	bl	8000810 <lcd_clear>
  HAL_Delay(200);
 8008a5a:	20c8      	movs	r0, #200	; 0xc8
 8008a5c:	f000 fc72 	bl	8009344 <HAL_Delay>

  backLightTimer = millis;
 8008a60:	4b1b      	ldr	r3, [pc, #108]	; (8008ad0 <main+0x190>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a1b      	ldr	r2, [pc, #108]	; (8008ad4 <main+0x194>)
 8008a66:	6013      	str	r3, [r2, #0]

  if(iotMode != 0) {
 8008a68:	4b1b      	ldr	r3, [pc, #108]	; (8008ad8 <main+0x198>)
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d01e      	beq.n	8008aae <main+0x16e>
	  if(machineID[11] == '\0') {
 8008a70:	4b1a      	ldr	r3, [pc, #104]	; (8008adc <main+0x19c>)
 8008a72:	7adb      	ldrb	r3, [r3, #11]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d102      	bne.n	8008a7e <main+0x13e>
		  takeMachineID(0);
 8008a78:	2000      	movs	r0, #0
 8008a7a:	f7f8 f91f 	bl	8000cbc <takeMachineID>
	  }

	  if(wifiSSID[0] != '\0') {
 8008a7e:	4b18      	ldr	r3, [pc, #96]	; (8008ae0 <main+0x1a0>)
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d002      	beq.n	8008a8c <main+0x14c>
		  takeWifiSSID(0);
 8008a86:	2000      	movs	r0, #0
 8008a88:	f7f8 fa6e 	bl	8000f68 <takeWifiSSID>
	  }

	  if(wifiPass[0] != '\0') {
 8008a8c:	4b15      	ldr	r3, [pc, #84]	; (8008ae4 <main+0x1a4>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <main+0x15a>
		  takeWifiPass(0);
 8008a94:	2000      	movs	r0, #0
 8008a96:	f7f8 fc31 	bl	80012fc <takeWifiPass>
	  }

	  ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8008a9a:	4a12      	ldr	r2, [pc, #72]	; (8008ae4 <main+0x1a4>)
 8008a9c:	4910      	ldr	r1, [pc, #64]	; (8008ae0 <main+0x1a0>)
 8008a9e:	4812      	ldr	r0, [pc, #72]	; (8008ae8 <main+0x1a8>)
 8008aa0:	f7f7 fbc8 	bl	8000234 <ESP8266_Init>
	  HAL_Delay(250);
 8008aa4:	20fa      	movs	r0, #250	; 0xfa
 8008aa6:	f000 fc4d 	bl	8009344 <HAL_Delay>
	  convertAndSendData();
 8008aaa:	f7fd f90f 	bl	8005ccc <convertAndSendData>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008aae:	f7ff fd9d 	bl	80085ec <mainLoop>
 8008ab2:	e7fc      	b.n	8008aae <main+0x16e>
 8008ab4:	40010c00 	.word	0x40010c00
 8008ab8:	20000ba8 	.word	0x20000ba8
 8008abc:	20000b54 	.word	0x20000b54
 8008ac0:	40011000 	.word	0x40011000
 8008ac4:	40010800 	.word	0x40010800
 8008ac8:	0800e844 	.word	0x0800e844
 8008acc:	0800e858 	.word	0x0800e858
 8008ad0:	20000cb0 	.word	0x20000cb0
 8008ad4:	20000ccc 	.word	0x20000ccc
 8008ad8:	20000d4f 	.word	0x20000d4f
 8008adc:	20000cd0 	.word	0x20000cd0
 8008ae0:	20000cdc 	.word	0x20000cdc
 8008ae4:	20000cf0 	.word	0x20000cf0
 8008ae8:	20000bf0 	.word	0x20000bf0

08008aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b090      	sub	sp, #64	; 0x40
 8008af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008af2:	f107 0318 	add.w	r3, r7, #24
 8008af6:	2228      	movs	r2, #40	; 0x28
 8008af8:	2100      	movs	r1, #0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f004 fb36 	bl	800d16c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008b00:	1d3b      	adds	r3, r7, #4
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	605a      	str	r2, [r3, #4]
 8008b08:	609a      	str	r2, [r3, #8]
 8008b0a:	60da      	str	r2, [r3, #12]
 8008b0c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008b12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008b20:	2302      	movs	r3, #2
 8008b22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008b2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008b30:	f107 0318 	add.w	r3, r7, #24
 8008b34:	4618      	mov	r0, r3
 8008b36:	f002 fc3f 	bl	800b3b8 <HAL_RCC_OscConfig>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d001      	beq.n	8008b44 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008b40:	f000 f9a2 	bl	8008e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008b44:	230f      	movs	r3, #15
 8008b46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008b48:	2302      	movs	r3, #2
 8008b4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008b56:	2300      	movs	r3, #0
 8008b58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008b5a:	1d3b      	adds	r3, r7, #4
 8008b5c:	2102      	movs	r1, #2
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f002 feac 	bl	800b8bc <HAL_RCC_ClockConfig>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008b6a:	f000 f98d 	bl	8008e88 <Error_Handler>
  }
}
 8008b6e:	bf00      	nop
 8008b70:	3740      	adds	r7, #64	; 0x40
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
	...

08008b78 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008b7c:	4b16      	ldr	r3, [pc, #88]	; (8008bd8 <MX_CAN_Init+0x60>)
 8008b7e:	4a17      	ldr	r2, [pc, #92]	; (8008bdc <MX_CAN_Init+0x64>)
 8008b80:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008b82:	4b15      	ldr	r3, [pc, #84]	; (8008bd8 <MX_CAN_Init+0x60>)
 8008b84:	2210      	movs	r2, #16
 8008b86:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008b88:	4b13      	ldr	r3, [pc, #76]	; (8008bd8 <MX_CAN_Init+0x60>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008b8e:	4b12      	ldr	r3, [pc, #72]	; (8008bd8 <MX_CAN_Init+0x60>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008b94:	4b10      	ldr	r3, [pc, #64]	; (8008bd8 <MX_CAN_Init+0x60>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008b9a:	4b0f      	ldr	r3, [pc, #60]	; (8008bd8 <MX_CAN_Init+0x60>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008ba0:	4b0d      	ldr	r3, [pc, #52]	; (8008bd8 <MX_CAN_Init+0x60>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <MX_CAN_Init+0x60>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008bac:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <MX_CAN_Init+0x60>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008bb2:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <MX_CAN_Init+0x60>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008bb8:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <MX_CAN_Init+0x60>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008bbe:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <MX_CAN_Init+0x60>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008bc4:	4804      	ldr	r0, [pc, #16]	; (8008bd8 <MX_CAN_Init+0x60>)
 8008bc6:	f000 fbe1 	bl	800938c <HAL_CAN_Init>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008bd0:	f000 f95a 	bl	8008e88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008bd4:	bf00      	nop
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	20000b2c 	.word	0x20000b2c
 8008bdc:	40006400 	.word	0x40006400

08008be0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008be4:	4b12      	ldr	r3, [pc, #72]	; (8008c30 <MX_I2C1_Init+0x50>)
 8008be6:	4a13      	ldr	r2, [pc, #76]	; (8008c34 <MX_I2C1_Init+0x54>)
 8008be8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008bea:	4b11      	ldr	r3, [pc, #68]	; (8008c30 <MX_I2C1_Init+0x50>)
 8008bec:	4a12      	ldr	r2, [pc, #72]	; (8008c38 <MX_I2C1_Init+0x58>)
 8008bee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008bf0:	4b0f      	ldr	r3, [pc, #60]	; (8008c30 <MX_I2C1_Init+0x50>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008bf6:	4b0e      	ldr	r3, [pc, #56]	; (8008c30 <MX_I2C1_Init+0x50>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008bfc:	4b0c      	ldr	r3, [pc, #48]	; (8008c30 <MX_I2C1_Init+0x50>)
 8008bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008c02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008c04:	4b0a      	ldr	r3, [pc, #40]	; (8008c30 <MX_I2C1_Init+0x50>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008c0a:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <MX_I2C1_Init+0x50>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008c10:	4b07      	ldr	r3, [pc, #28]	; (8008c30 <MX_I2C1_Init+0x50>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008c16:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <MX_I2C1_Init+0x50>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008c1c:	4804      	ldr	r0, [pc, #16]	; (8008c30 <MX_I2C1_Init+0x50>)
 8008c1e:	f001 f9a9 	bl	8009f74 <HAL_I2C_Init>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008c28:	f000 f92e 	bl	8008e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008c2c:	bf00      	nop
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20000b54 	.word	0x20000b54
 8008c34:	40005400 	.word	0x40005400
 8008c38:	00061a80 	.word	0x00061a80

08008c3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c42:	f107 0308 	add.w	r3, r7, #8
 8008c46:	2200      	movs	r2, #0
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	605a      	str	r2, [r3, #4]
 8008c4c:	609a      	str	r2, [r3, #8]
 8008c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c50:	463b      	mov	r3, r7
 8008c52:	2200      	movs	r2, #0
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008c58:	4b1f      	ldr	r3, [pc, #124]	; (8008cd8 <MX_TIM1_Init+0x9c>)
 8008c5a:	4a20      	ldr	r2, [pc, #128]	; (8008cdc <MX_TIM1_Init+0xa0>)
 8008c5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008c5e:	4b1e      	ldr	r3, [pc, #120]	; (8008cd8 <MX_TIM1_Init+0x9c>)
 8008c60:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008c64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c66:	4b1c      	ldr	r3, [pc, #112]	; (8008cd8 <MX_TIM1_Init+0x9c>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008c6c:	4b1a      	ldr	r3, [pc, #104]	; (8008cd8 <MX_TIM1_Init+0x9c>)
 8008c6e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008c72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c74:	4b18      	ldr	r3, [pc, #96]	; (8008cd8 <MX_TIM1_Init+0x9c>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008c7a:	4b17      	ldr	r3, [pc, #92]	; (8008cd8 <MX_TIM1_Init+0x9c>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c80:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <MX_TIM1_Init+0x9c>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008c86:	4814      	ldr	r0, [pc, #80]	; (8008cd8 <MX_TIM1_Init+0x9c>)
 8008c88:	f002 ffa6 	bl	800bbd8 <HAL_TIM_Base_Init>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008c92:	f000 f8f9 	bl	8008e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008c9c:	f107 0308 	add.w	r3, r7, #8
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	480d      	ldr	r0, [pc, #52]	; (8008cd8 <MX_TIM1_Init+0x9c>)
 8008ca4:	f003 f950 	bl	800bf48 <HAL_TIM_ConfigClockSource>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008cae:	f000 f8eb 	bl	8008e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008cba:	463b      	mov	r3, r7
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4806      	ldr	r0, [pc, #24]	; (8008cd8 <MX_TIM1_Init+0x9c>)
 8008cc0:	f003 fb3e 	bl	800c340 <HAL_TIMEx_MasterConfigSynchronization>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008cca:	f000 f8dd 	bl	8008e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008cce:	bf00      	nop
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20000ba8 	.word	0x20000ba8
 8008cdc:	40012c00 	.word	0x40012c00

08008ce0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008ce4:	4b11      	ldr	r3, [pc, #68]	; (8008d2c <MX_USART1_UART_Init+0x4c>)
 8008ce6:	4a12      	ldr	r2, [pc, #72]	; (8008d30 <MX_USART1_UART_Init+0x50>)
 8008ce8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008cea:	4b10      	ldr	r3, [pc, #64]	; (8008d2c <MX_USART1_UART_Init+0x4c>)
 8008cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008cf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008cf2:	4b0e      	ldr	r3, [pc, #56]	; (8008d2c <MX_USART1_UART_Init+0x4c>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008cf8:	4b0c      	ldr	r3, [pc, #48]	; (8008d2c <MX_USART1_UART_Init+0x4c>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008cfe:	4b0b      	ldr	r3, [pc, #44]	; (8008d2c <MX_USART1_UART_Init+0x4c>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008d04:	4b09      	ldr	r3, [pc, #36]	; (8008d2c <MX_USART1_UART_Init+0x4c>)
 8008d06:	220c      	movs	r2, #12
 8008d08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d0a:	4b08      	ldr	r3, [pc, #32]	; (8008d2c <MX_USART1_UART_Init+0x4c>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d10:	4b06      	ldr	r3, [pc, #24]	; (8008d2c <MX_USART1_UART_Init+0x4c>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008d16:	4805      	ldr	r0, [pc, #20]	; (8008d2c <MX_USART1_UART_Init+0x4c>)
 8008d18:	f003 fb90 	bl	800c43c <HAL_UART_Init>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008d22:	f000 f8b1 	bl	8008e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008d26:	bf00      	nop
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000bf0 	.word	0x20000bf0
 8008d30:	40013800 	.word	0x40013800

08008d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b088      	sub	sp, #32
 8008d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d3a:	f107 0310 	add.w	r3, r7, #16
 8008d3e:	2200      	movs	r2, #0
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	605a      	str	r2, [r3, #4]
 8008d44:	609a      	str	r2, [r3, #8]
 8008d46:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d48:	4b4b      	ldr	r3, [pc, #300]	; (8008e78 <MX_GPIO_Init+0x144>)
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	4a4a      	ldr	r2, [pc, #296]	; (8008e78 <MX_GPIO_Init+0x144>)
 8008d4e:	f043 0310 	orr.w	r3, r3, #16
 8008d52:	6193      	str	r3, [r2, #24]
 8008d54:	4b48      	ldr	r3, [pc, #288]	; (8008e78 <MX_GPIO_Init+0x144>)
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	f003 0310 	and.w	r3, r3, #16
 8008d5c:	60fb      	str	r3, [r7, #12]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d60:	4b45      	ldr	r3, [pc, #276]	; (8008e78 <MX_GPIO_Init+0x144>)
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	4a44      	ldr	r2, [pc, #272]	; (8008e78 <MX_GPIO_Init+0x144>)
 8008d66:	f043 0320 	orr.w	r3, r3, #32
 8008d6a:	6193      	str	r3, [r2, #24]
 8008d6c:	4b42      	ldr	r3, [pc, #264]	; (8008e78 <MX_GPIO_Init+0x144>)
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	f003 0320 	and.w	r3, r3, #32
 8008d74:	60bb      	str	r3, [r7, #8]
 8008d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d78:	4b3f      	ldr	r3, [pc, #252]	; (8008e78 <MX_GPIO_Init+0x144>)
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	4a3e      	ldr	r2, [pc, #248]	; (8008e78 <MX_GPIO_Init+0x144>)
 8008d7e:	f043 0304 	orr.w	r3, r3, #4
 8008d82:	6193      	str	r3, [r2, #24]
 8008d84:	4b3c      	ldr	r3, [pc, #240]	; (8008e78 <MX_GPIO_Init+0x144>)
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	f003 0304 	and.w	r3, r3, #4
 8008d8c:	607b      	str	r3, [r7, #4]
 8008d8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d90:	4b39      	ldr	r3, [pc, #228]	; (8008e78 <MX_GPIO_Init+0x144>)
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	4a38      	ldr	r2, [pc, #224]	; (8008e78 <MX_GPIO_Init+0x144>)
 8008d96:	f043 0308 	orr.w	r3, r3, #8
 8008d9a:	6193      	str	r3, [r2, #24]
 8008d9c:	4b36      	ldr	r3, [pc, #216]	; (8008e78 <MX_GPIO_Init+0x144>)
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	f003 0308 	and.w	r3, r3, #8
 8008da4:	603b      	str	r3, [r7, #0]
 8008da6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008da8:	2200      	movs	r2, #0
 8008daa:	21f0      	movs	r1, #240	; 0xf0
 8008dac:	4833      	ldr	r0, [pc, #204]	; (8008e7c <MX_GPIO_Init+0x148>)
 8008dae:	f001 f8b0 	bl	8009f12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008db2:	2200      	movs	r2, #0
 8008db4:	f241 0130 	movw	r1, #4144	; 0x1030
 8008db8:	4831      	ldr	r0, [pc, #196]	; (8008e80 <MX_GPIO_Init+0x14c>)
 8008dba:	f001 f8aa 	bl	8009f12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f640 4107 	movw	r1, #3079	; 0xc07
 8008dc4:	482f      	ldr	r0, [pc, #188]	; (8008e84 <MX_GPIO_Init+0x150>)
 8008dc6:	f001 f8a4 	bl	8009f12 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008dca:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008dce:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008dd8:	f107 0310 	add.w	r3, r7, #16
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4828      	ldr	r0, [pc, #160]	; (8008e80 <MX_GPIO_Init+0x14c>)
 8008de0:	f000 fe20 	bl	8009a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008de4:	f248 130f 	movw	r3, #33039	; 0x810f
 8008de8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dee:	2300      	movs	r3, #0
 8008df0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008df2:	f107 0310 	add.w	r3, r7, #16
 8008df6:	4619      	mov	r1, r3
 8008df8:	4820      	ldr	r0, [pc, #128]	; (8008e7c <MX_GPIO_Init+0x148>)
 8008dfa:	f000 fe13 	bl	8009a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008dfe:	23f0      	movs	r3, #240	; 0xf0
 8008e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e02:	2301      	movs	r3, #1
 8008e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e0e:	f107 0310 	add.w	r3, r7, #16
 8008e12:	4619      	mov	r1, r3
 8008e14:	4819      	ldr	r0, [pc, #100]	; (8008e7c <MX_GPIO_Init+0x148>)
 8008e16:	f000 fe05 	bl	8009a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008e1a:	f241 0330 	movw	r3, #4144	; 0x1030
 8008e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e20:	2301      	movs	r3, #1
 8008e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e28:	2302      	movs	r3, #2
 8008e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e2c:	f107 0310 	add.w	r3, r7, #16
 8008e30:	4619      	mov	r1, r3
 8008e32:	4813      	ldr	r0, [pc, #76]	; (8008e80 <MX_GPIO_Init+0x14c>)
 8008e34:	f000 fdf6 	bl	8009a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008e38:	f640 4307 	movw	r3, #3079	; 0xc07
 8008e3c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e46:	2302      	movs	r3, #2
 8008e48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e4a:	f107 0310 	add.w	r3, r7, #16
 8008e4e:	4619      	mov	r1, r3
 8008e50:	480c      	ldr	r0, [pc, #48]	; (8008e84 <MX_GPIO_Init+0x150>)
 8008e52:	f000 fde7 	bl	8009a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008e56:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e60:	2300      	movs	r3, #0
 8008e62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e64:	f107 0310 	add.w	r3, r7, #16
 8008e68:	4619      	mov	r1, r3
 8008e6a:	4806      	ldr	r0, [pc, #24]	; (8008e84 <MX_GPIO_Init+0x150>)
 8008e6c:	f000 fdda 	bl	8009a24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008e70:	bf00      	nop
 8008e72:	3720      	adds	r7, #32
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	40021000 	.word	0x40021000
 8008e7c:	40010800 	.word	0x40010800
 8008e80:	40011000 	.word	0x40011000
 8008e84:	40010c00 	.word	0x40010c00

08008e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008e8c:	bf00      	nop
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bc80      	pop	{r7}
 8008e92:	4770      	bx	lr

08008e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008e9a:	4b15      	ldr	r3, [pc, #84]	; (8008ef0 <HAL_MspInit+0x5c>)
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	4a14      	ldr	r2, [pc, #80]	; (8008ef0 <HAL_MspInit+0x5c>)
 8008ea0:	f043 0301 	orr.w	r3, r3, #1
 8008ea4:	6193      	str	r3, [r2, #24]
 8008ea6:	4b12      	ldr	r3, [pc, #72]	; (8008ef0 <HAL_MspInit+0x5c>)
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	60bb      	str	r3, [r7, #8]
 8008eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008eb2:	4b0f      	ldr	r3, [pc, #60]	; (8008ef0 <HAL_MspInit+0x5c>)
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	4a0e      	ldr	r2, [pc, #56]	; (8008ef0 <HAL_MspInit+0x5c>)
 8008eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ebc:	61d3      	str	r3, [r2, #28]
 8008ebe:	4b0c      	ldr	r3, [pc, #48]	; (8008ef0 <HAL_MspInit+0x5c>)
 8008ec0:	69db      	ldr	r3, [r3, #28]
 8008ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ec6:	607b      	str	r3, [r7, #4]
 8008ec8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008eca:	4b0a      	ldr	r3, [pc, #40]	; (8008ef4 <HAL_MspInit+0x60>)
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	60fb      	str	r3, [r7, #12]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008ed6:	60fb      	str	r3, [r7, #12]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	4a04      	ldr	r2, [pc, #16]	; (8008ef4 <HAL_MspInit+0x60>)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008ee6:	bf00      	nop
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bc80      	pop	{r7}
 8008eee:	4770      	bx	lr
 8008ef0:	40021000 	.word	0x40021000
 8008ef4:	40010000 	.word	0x40010000

08008ef8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b088      	sub	sp, #32
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f00:	f107 0310 	add.w	r3, r7, #16
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	605a      	str	r2, [r3, #4]
 8008f0a:	609a      	str	r2, [r3, #8]
 8008f0c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a1c      	ldr	r2, [pc, #112]	; (8008f84 <HAL_CAN_MspInit+0x8c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d131      	bne.n	8008f7c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008f18:	4b1b      	ldr	r3, [pc, #108]	; (8008f88 <HAL_CAN_MspInit+0x90>)
 8008f1a:	69db      	ldr	r3, [r3, #28]
 8008f1c:	4a1a      	ldr	r2, [pc, #104]	; (8008f88 <HAL_CAN_MspInit+0x90>)
 8008f1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008f22:	61d3      	str	r3, [r2, #28]
 8008f24:	4b18      	ldr	r3, [pc, #96]	; (8008f88 <HAL_CAN_MspInit+0x90>)
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f2c:	60fb      	str	r3, [r7, #12]
 8008f2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f30:	4b15      	ldr	r3, [pc, #84]	; (8008f88 <HAL_CAN_MspInit+0x90>)
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	4a14      	ldr	r2, [pc, #80]	; (8008f88 <HAL_CAN_MspInit+0x90>)
 8008f36:	f043 0304 	orr.w	r3, r3, #4
 8008f3a:	6193      	str	r3, [r2, #24]
 8008f3c:	4b12      	ldr	r3, [pc, #72]	; (8008f88 <HAL_CAN_MspInit+0x90>)
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	f003 0304 	and.w	r3, r3, #4
 8008f44:	60bb      	str	r3, [r7, #8]
 8008f46:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008f48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f56:	f107 0310 	add.w	r3, r7, #16
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	480b      	ldr	r0, [pc, #44]	; (8008f8c <HAL_CAN_MspInit+0x94>)
 8008f5e:	f000 fd61 	bl	8009a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f70:	f107 0310 	add.w	r3, r7, #16
 8008f74:	4619      	mov	r1, r3
 8008f76:	4805      	ldr	r0, [pc, #20]	; (8008f8c <HAL_CAN_MspInit+0x94>)
 8008f78:	f000 fd54 	bl	8009a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008f7c:	bf00      	nop
 8008f7e:	3720      	adds	r7, #32
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	40006400 	.word	0x40006400
 8008f88:	40021000 	.word	0x40021000
 8008f8c:	40010800 	.word	0x40010800

08008f90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f98:	f107 0310 	add.w	r3, r7, #16
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	605a      	str	r2, [r3, #4]
 8008fa2:	609a      	str	r2, [r3, #8]
 8008fa4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a15      	ldr	r2, [pc, #84]	; (8009000 <HAL_I2C_MspInit+0x70>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d123      	bne.n	8008ff8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008fb0:	4b14      	ldr	r3, [pc, #80]	; (8009004 <HAL_I2C_MspInit+0x74>)
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	4a13      	ldr	r2, [pc, #76]	; (8009004 <HAL_I2C_MspInit+0x74>)
 8008fb6:	f043 0308 	orr.w	r3, r3, #8
 8008fba:	6193      	str	r3, [r2, #24]
 8008fbc:	4b11      	ldr	r3, [pc, #68]	; (8009004 <HAL_I2C_MspInit+0x74>)
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	f003 0308 	and.w	r3, r3, #8
 8008fc4:	60fb      	str	r3, [r7, #12]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008fc8:	23c0      	movs	r3, #192	; 0xc0
 8008fca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008fcc:	2312      	movs	r3, #18
 8008fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fd4:	f107 0310 	add.w	r3, r7, #16
 8008fd8:	4619      	mov	r1, r3
 8008fda:	480b      	ldr	r0, [pc, #44]	; (8009008 <HAL_I2C_MspInit+0x78>)
 8008fdc:	f000 fd22 	bl	8009a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008fe0:	4b08      	ldr	r3, [pc, #32]	; (8009004 <HAL_I2C_MspInit+0x74>)
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	4a07      	ldr	r2, [pc, #28]	; (8009004 <HAL_I2C_MspInit+0x74>)
 8008fe6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fea:	61d3      	str	r3, [r2, #28]
 8008fec:	4b05      	ldr	r3, [pc, #20]	; (8009004 <HAL_I2C_MspInit+0x74>)
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ff4:	60bb      	str	r3, [r7, #8]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008ff8:	bf00      	nop
 8008ffa:	3720      	adds	r7, #32
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	40005400 	.word	0x40005400
 8009004:	40021000 	.word	0x40021000
 8009008:	40010c00 	.word	0x40010c00

0800900c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a0a      	ldr	r2, [pc, #40]	; (8009044 <HAL_I2C_MspDeInit+0x38>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d10d      	bne.n	800903a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800901e:	4b0a      	ldr	r3, [pc, #40]	; (8009048 <HAL_I2C_MspDeInit+0x3c>)
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	4a09      	ldr	r2, [pc, #36]	; (8009048 <HAL_I2C_MspDeInit+0x3c>)
 8009024:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009028:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800902a:	2140      	movs	r1, #64	; 0x40
 800902c:	4807      	ldr	r0, [pc, #28]	; (800904c <HAL_I2C_MspDeInit+0x40>)
 800902e:	f000 fe8d 	bl	8009d4c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8009032:	2180      	movs	r1, #128	; 0x80
 8009034:	4805      	ldr	r0, [pc, #20]	; (800904c <HAL_I2C_MspDeInit+0x40>)
 8009036:	f000 fe89 	bl	8009d4c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	40005400 	.word	0x40005400
 8009048:	40021000 	.word	0x40021000
 800904c:	40010c00 	.word	0x40010c00

08009050 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a0d      	ldr	r2, [pc, #52]	; (8009094 <HAL_TIM_Base_MspInit+0x44>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d113      	bne.n	800908a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009062:	4b0d      	ldr	r3, [pc, #52]	; (8009098 <HAL_TIM_Base_MspInit+0x48>)
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	4a0c      	ldr	r2, [pc, #48]	; (8009098 <HAL_TIM_Base_MspInit+0x48>)
 8009068:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800906c:	6193      	str	r3, [r2, #24]
 800906e:	4b0a      	ldr	r3, [pc, #40]	; (8009098 <HAL_TIM_Base_MspInit+0x48>)
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800907a:	2200      	movs	r2, #0
 800907c:	2100      	movs	r1, #0
 800907e:	2019      	movs	r0, #25
 8009080:	f000 fb57 	bl	8009732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009084:	2019      	movs	r0, #25
 8009086:	f000 fb70 	bl	800976a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800908a:	bf00      	nop
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	40012c00 	.word	0x40012c00
 8009098:	40021000 	.word	0x40021000

0800909c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b088      	sub	sp, #32
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090a4:	f107 0310 	add.w	r3, r7, #16
 80090a8:	2200      	movs	r2, #0
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	605a      	str	r2, [r3, #4]
 80090ae:	609a      	str	r2, [r3, #8]
 80090b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a20      	ldr	r2, [pc, #128]	; (8009138 <HAL_UART_MspInit+0x9c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d139      	bne.n	8009130 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80090bc:	4b1f      	ldr	r3, [pc, #124]	; (800913c <HAL_UART_MspInit+0xa0>)
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	4a1e      	ldr	r2, [pc, #120]	; (800913c <HAL_UART_MspInit+0xa0>)
 80090c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090c6:	6193      	str	r3, [r2, #24]
 80090c8:	4b1c      	ldr	r3, [pc, #112]	; (800913c <HAL_UART_MspInit+0xa0>)
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090d0:	60fb      	str	r3, [r7, #12]
 80090d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090d4:	4b19      	ldr	r3, [pc, #100]	; (800913c <HAL_UART_MspInit+0xa0>)
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	4a18      	ldr	r2, [pc, #96]	; (800913c <HAL_UART_MspInit+0xa0>)
 80090da:	f043 0304 	orr.w	r3, r3, #4
 80090de:	6193      	str	r3, [r2, #24]
 80090e0:	4b16      	ldr	r3, [pc, #88]	; (800913c <HAL_UART_MspInit+0xa0>)
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	f003 0304 	and.w	r3, r3, #4
 80090e8:	60bb      	str	r3, [r7, #8]
 80090ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80090ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090f2:	2302      	movs	r3, #2
 80090f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80090f6:	2303      	movs	r3, #3
 80090f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090fa:	f107 0310 	add.w	r3, r7, #16
 80090fe:	4619      	mov	r1, r3
 8009100:	480f      	ldr	r0, [pc, #60]	; (8009140 <HAL_UART_MspInit+0xa4>)
 8009102:	f000 fc8f 	bl	8009a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800910a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800910c:	2300      	movs	r3, #0
 800910e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009110:	2300      	movs	r3, #0
 8009112:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009114:	f107 0310 	add.w	r3, r7, #16
 8009118:	4619      	mov	r1, r3
 800911a:	4809      	ldr	r0, [pc, #36]	; (8009140 <HAL_UART_MspInit+0xa4>)
 800911c:	f000 fc82 	bl	8009a24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009120:	2200      	movs	r2, #0
 8009122:	2100      	movs	r1, #0
 8009124:	2025      	movs	r0, #37	; 0x25
 8009126:	f000 fb04 	bl	8009732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800912a:	2025      	movs	r0, #37	; 0x25
 800912c:	f000 fb1d 	bl	800976a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009130:	bf00      	nop
 8009132:	3720      	adds	r7, #32
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	40013800 	.word	0x40013800
 800913c:	40021000 	.word	0x40021000
 8009140:	40010800 	.word	0x40010800

08009144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009144:	b480      	push	{r7}
 8009146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009148:	e7fe      	b.n	8009148 <NMI_Handler+0x4>

0800914a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800914a:	b480      	push	{r7}
 800914c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800914e:	e7fe      	b.n	800914e <HardFault_Handler+0x4>

08009150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009150:	b480      	push	{r7}
 8009152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009154:	e7fe      	b.n	8009154 <MemManage_Handler+0x4>

08009156 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009156:	b480      	push	{r7}
 8009158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800915a:	e7fe      	b.n	800915a <BusFault_Handler+0x4>

0800915c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009160:	e7fe      	b.n	8009160 <UsageFault_Handler+0x4>

08009162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009162:	b480      	push	{r7}
 8009164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009166:	bf00      	nop
 8009168:	46bd      	mov	sp, r7
 800916a:	bc80      	pop	{r7}
 800916c:	4770      	bx	lr

0800916e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800916e:	b480      	push	{r7}
 8009170:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009172:	bf00      	nop
 8009174:	46bd      	mov	sp, r7
 8009176:	bc80      	pop	{r7}
 8009178:	4770      	bx	lr

0800917a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800917a:	b480      	push	{r7}
 800917c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800917e:	bf00      	nop
 8009180:	46bd      	mov	sp, r7
 8009182:	bc80      	pop	{r7}
 8009184:	4770      	bx	lr

08009186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800918a:	f000 f8bf 	bl	800930c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800918e:	bf00      	nop
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009198:	4802      	ldr	r0, [pc, #8]	; (80091a4 <TIM1_UP_IRQHandler+0x10>)
 800919a:	f002 fdcd 	bl	800bd38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800919e:	bf00      	nop
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20000ba8 	.word	0x20000ba8

080091a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80091ac:	4802      	ldr	r0, [pc, #8]	; (80091b8 <USART1_IRQHandler+0x10>)
 80091ae:	f003 f9cb 	bl	800c548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80091b2:	bf00      	nop
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20000bf0 	.word	0x20000bf0

080091bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80091c4:	4a14      	ldr	r2, [pc, #80]	; (8009218 <_sbrk+0x5c>)
 80091c6:	4b15      	ldr	r3, [pc, #84]	; (800921c <_sbrk+0x60>)
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80091d0:	4b13      	ldr	r3, [pc, #76]	; (8009220 <_sbrk+0x64>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d102      	bne.n	80091de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80091d8:	4b11      	ldr	r3, [pc, #68]	; (8009220 <_sbrk+0x64>)
 80091da:	4a12      	ldr	r2, [pc, #72]	; (8009224 <_sbrk+0x68>)
 80091dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80091de:	4b10      	ldr	r3, [pc, #64]	; (8009220 <_sbrk+0x64>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4413      	add	r3, r2
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d207      	bcs.n	80091fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80091ec:	f003 ffe6 	bl	800d1bc <__errno>
 80091f0:	4603      	mov	r3, r0
 80091f2:	220c      	movs	r2, #12
 80091f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80091f6:	f04f 33ff 	mov.w	r3, #4294967295
 80091fa:	e009      	b.n	8009210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80091fc:	4b08      	ldr	r3, [pc, #32]	; (8009220 <_sbrk+0x64>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009202:	4b07      	ldr	r3, [pc, #28]	; (8009220 <_sbrk+0x64>)
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4413      	add	r3, r2
 800920a:	4a05      	ldr	r2, [pc, #20]	; (8009220 <_sbrk+0x64>)
 800920c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800920e:	68fb      	ldr	r3, [r7, #12]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	2000c000 	.word	0x2000c000
 800921c:	00000400 	.word	0x00000400
 8009220:	20000ec4 	.word	0x20000ec4
 8009224:	20001018 	.word	0x20001018

08009228 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009228:	b480      	push	{r7}
 800922a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800922c:	bf00      	nop
 800922e:	46bd      	mov	sp, r7
 8009230:	bc80      	pop	{r7}
 8009232:	4770      	bx	lr

08009234 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009234:	480c      	ldr	r0, [pc, #48]	; (8009268 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009236:	490d      	ldr	r1, [pc, #52]	; (800926c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009238:	4a0d      	ldr	r2, [pc, #52]	; (8009270 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800923a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800923c:	e002      	b.n	8009244 <LoopCopyDataInit>

0800923e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800923e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009242:	3304      	adds	r3, #4

08009244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009248:	d3f9      	bcc.n	800923e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800924a:	4a0a      	ldr	r2, [pc, #40]	; (8009274 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800924c:	4c0a      	ldr	r4, [pc, #40]	; (8009278 <LoopFillZerobss+0x22>)
  movs r3, #0
 800924e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009250:	e001      	b.n	8009256 <LoopFillZerobss>

08009252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009254:	3204      	adds	r2, #4

08009256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009258:	d3fb      	bcc.n	8009252 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800925a:	f7ff ffe5 	bl	8009228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800925e:	f003 ffb3 	bl	800d1c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009262:	f7ff fb6d 	bl	8008940 <main>
  bx lr
 8009266:	4770      	bx	lr
  ldr r0, =_sdata
 8009268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800926c:	20000a14 	.word	0x20000a14
  ldr r2, =_sidata
 8009270:	0800e8f8 	.word	0x0800e8f8
  ldr r2, =_sbss
 8009274:	20000a14 	.word	0x20000a14
  ldr r4, =_ebss
 8009278:	20001014 	.word	0x20001014

0800927c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800927c:	e7fe      	b.n	800927c <ADC1_2_IRQHandler>
	...

08009280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009284:	4b08      	ldr	r3, [pc, #32]	; (80092a8 <HAL_Init+0x28>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a07      	ldr	r2, [pc, #28]	; (80092a8 <HAL_Init+0x28>)
 800928a:	f043 0310 	orr.w	r3, r3, #16
 800928e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009290:	2003      	movs	r0, #3
 8009292:	f000 fa43 	bl	800971c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009296:	200f      	movs	r0, #15
 8009298:	f000 f808 	bl	80092ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800929c:	f7ff fdfa 	bl	8008e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	40022000 	.word	0x40022000

080092ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80092b4:	4b12      	ldr	r3, [pc, #72]	; (8009300 <HAL_InitTick+0x54>)
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	4b12      	ldr	r3, [pc, #72]	; (8009304 <HAL_InitTick+0x58>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	4619      	mov	r1, r3
 80092be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80092c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 fa5b 	bl	8009786 <HAL_SYSTICK_Config>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e00e      	b.n	80092f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b0f      	cmp	r3, #15
 80092de:	d80a      	bhi.n	80092f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80092e0:	2200      	movs	r2, #0
 80092e2:	6879      	ldr	r1, [r7, #4]
 80092e4:	f04f 30ff 	mov.w	r0, #4294967295
 80092e8:	f000 fa23 	bl	8009732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80092ec:	4a06      	ldr	r2, [pc, #24]	; (8009308 <HAL_InitTick+0x5c>)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	e000      	b.n	80092f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	200009b8 	.word	0x200009b8
 8009304:	200009c0 	.word	0x200009c0
 8009308:	200009bc 	.word	0x200009bc

0800930c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800930c:	b480      	push	{r7}
 800930e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009310:	4b05      	ldr	r3, [pc, #20]	; (8009328 <HAL_IncTick+0x1c>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	461a      	mov	r2, r3
 8009316:	4b05      	ldr	r3, [pc, #20]	; (800932c <HAL_IncTick+0x20>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4413      	add	r3, r2
 800931c:	4a03      	ldr	r2, [pc, #12]	; (800932c <HAL_IncTick+0x20>)
 800931e:	6013      	str	r3, [r2, #0]
}
 8009320:	bf00      	nop
 8009322:	46bd      	mov	sp, r7
 8009324:	bc80      	pop	{r7}
 8009326:	4770      	bx	lr
 8009328:	200009c0 	.word	0x200009c0
 800932c:	20000ec8 	.word	0x20000ec8

08009330 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009330:	b480      	push	{r7}
 8009332:	af00      	add	r7, sp, #0
  return uwTick;
 8009334:	4b02      	ldr	r3, [pc, #8]	; (8009340 <HAL_GetTick+0x10>)
 8009336:	681b      	ldr	r3, [r3, #0]
}
 8009338:	4618      	mov	r0, r3
 800933a:	46bd      	mov	sp, r7
 800933c:	bc80      	pop	{r7}
 800933e:	4770      	bx	lr
 8009340:	20000ec8 	.word	0x20000ec8

08009344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800934c:	f7ff fff0 	bl	8009330 <HAL_GetTick>
 8009350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935c:	d005      	beq.n	800936a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800935e:	4b0a      	ldr	r3, [pc, #40]	; (8009388 <HAL_Delay+0x44>)
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	461a      	mov	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	4413      	add	r3, r2
 8009368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800936a:	bf00      	nop
 800936c:	f7ff ffe0 	bl	8009330 <HAL_GetTick>
 8009370:	4602      	mov	r2, r0
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	429a      	cmp	r2, r3
 800937a:	d8f7      	bhi.n	800936c <HAL_Delay+0x28>
  {
  }
}
 800937c:	bf00      	nop
 800937e:	bf00      	nop
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	200009c0 	.word	0x200009c0

0800938c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e0ed      	b.n	800957a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d102      	bne.n	80093b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7ff fda4 	bl	8008ef8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f042 0201 	orr.w	r2, r2, #1
 80093be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80093c0:	f7ff ffb6 	bl	8009330 <HAL_GetTick>
 80093c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80093c6:	e012      	b.n	80093ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80093c8:	f7ff ffb2 	bl	8009330 <HAL_GetTick>
 80093cc:	4602      	mov	r2, r0
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	2b0a      	cmp	r3, #10
 80093d4:	d90b      	bls.n	80093ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2205      	movs	r2, #5
 80093e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e0c5      	b.n	800957a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d0e5      	beq.n	80093c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 0202 	bic.w	r2, r2, #2
 800940a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800940c:	f7ff ff90 	bl	8009330 <HAL_GetTick>
 8009410:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009412:	e012      	b.n	800943a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009414:	f7ff ff8c 	bl	8009330 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	2b0a      	cmp	r3, #10
 8009420:	d90b      	bls.n	800943a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2205      	movs	r2, #5
 8009432:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e09f      	b.n	800957a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	f003 0302 	and.w	r3, r3, #2
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e5      	bne.n	8009414 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	7e1b      	ldrb	r3, [r3, #24]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d108      	bne.n	8009462 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800945e:	601a      	str	r2, [r3, #0]
 8009460:	e007      	b.n	8009472 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009470:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	7e5b      	ldrb	r3, [r3, #25]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d108      	bne.n	800948c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	e007      	b.n	800949c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800949a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	7e9b      	ldrb	r3, [r3, #26]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d108      	bne.n	80094b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f042 0220 	orr.w	r2, r2, #32
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	e007      	b.n	80094c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f022 0220 	bic.w	r2, r2, #32
 80094c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	7edb      	ldrb	r3, [r3, #27]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d108      	bne.n	80094e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f022 0210 	bic.w	r2, r2, #16
 80094dc:	601a      	str	r2, [r3, #0]
 80094de:	e007      	b.n	80094f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f042 0210 	orr.w	r2, r2, #16
 80094ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	7f1b      	ldrb	r3, [r3, #28]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d108      	bne.n	800950a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f042 0208 	orr.w	r2, r2, #8
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	e007      	b.n	800951a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f022 0208 	bic.w	r2, r2, #8
 8009518:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	7f5b      	ldrb	r3, [r3, #29]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d108      	bne.n	8009534 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f042 0204 	orr.w	r2, r2, #4
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	e007      	b.n	8009544 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f022 0204 	bic.w	r2, r2, #4
 8009542:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689a      	ldr	r2, [r3, #8]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	431a      	orrs	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	431a      	orrs	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	ea42 0103 	orr.w	r1, r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	1e5a      	subs	r2, r3, #1
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <__NVIC_SetPriorityGrouping>:
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f003 0307 	and.w	r3, r3, #7
 8009592:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009594:	4b0c      	ldr	r3, [pc, #48]	; (80095c8 <__NVIC_SetPriorityGrouping+0x44>)
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80095a0:	4013      	ands	r3, r2
 80095a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80095ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80095b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80095b6:	4a04      	ldr	r2, [pc, #16]	; (80095c8 <__NVIC_SetPriorityGrouping+0x44>)
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	60d3      	str	r3, [r2, #12]
}
 80095bc:	bf00      	nop
 80095be:	3714      	adds	r7, #20
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bc80      	pop	{r7}
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	e000ed00 	.word	0xe000ed00

080095cc <__NVIC_GetPriorityGrouping>:
{
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80095d0:	4b04      	ldr	r3, [pc, #16]	; (80095e4 <__NVIC_GetPriorityGrouping+0x18>)
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	0a1b      	lsrs	r3, r3, #8
 80095d6:	f003 0307 	and.w	r3, r3, #7
}
 80095da:	4618      	mov	r0, r3
 80095dc:	46bd      	mov	sp, r7
 80095de:	bc80      	pop	{r7}
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	e000ed00 	.word	0xe000ed00

080095e8 <__NVIC_EnableIRQ>:
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	db0b      	blt.n	8009612 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80095fa:	79fb      	ldrb	r3, [r7, #7]
 80095fc:	f003 021f 	and.w	r2, r3, #31
 8009600:	4906      	ldr	r1, [pc, #24]	; (800961c <__NVIC_EnableIRQ+0x34>)
 8009602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009606:	095b      	lsrs	r3, r3, #5
 8009608:	2001      	movs	r0, #1
 800960a:	fa00 f202 	lsl.w	r2, r0, r2
 800960e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009612:	bf00      	nop
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	bc80      	pop	{r7}
 800961a:	4770      	bx	lr
 800961c:	e000e100 	.word	0xe000e100

08009620 <__NVIC_SetPriority>:
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	4603      	mov	r3, r0
 8009628:	6039      	str	r1, [r7, #0]
 800962a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800962c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009630:	2b00      	cmp	r3, #0
 8009632:	db0a      	blt.n	800964a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	b2da      	uxtb	r2, r3
 8009638:	490c      	ldr	r1, [pc, #48]	; (800966c <__NVIC_SetPriority+0x4c>)
 800963a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800963e:	0112      	lsls	r2, r2, #4
 8009640:	b2d2      	uxtb	r2, r2
 8009642:	440b      	add	r3, r1
 8009644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009648:	e00a      	b.n	8009660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	b2da      	uxtb	r2, r3
 800964e:	4908      	ldr	r1, [pc, #32]	; (8009670 <__NVIC_SetPriority+0x50>)
 8009650:	79fb      	ldrb	r3, [r7, #7]
 8009652:	f003 030f 	and.w	r3, r3, #15
 8009656:	3b04      	subs	r3, #4
 8009658:	0112      	lsls	r2, r2, #4
 800965a:	b2d2      	uxtb	r2, r2
 800965c:	440b      	add	r3, r1
 800965e:	761a      	strb	r2, [r3, #24]
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	bc80      	pop	{r7}
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	e000e100 	.word	0xe000e100
 8009670:	e000ed00 	.word	0xe000ed00

08009674 <NVIC_EncodePriority>:
{
 8009674:	b480      	push	{r7}
 8009676:	b089      	sub	sp, #36	; 0x24
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f003 0307 	and.w	r3, r3, #7
 8009686:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	f1c3 0307 	rsb	r3, r3, #7
 800968e:	2b04      	cmp	r3, #4
 8009690:	bf28      	it	cs
 8009692:	2304      	movcs	r3, #4
 8009694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	3304      	adds	r3, #4
 800969a:	2b06      	cmp	r3, #6
 800969c:	d902      	bls.n	80096a4 <NVIC_EncodePriority+0x30>
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	3b03      	subs	r3, #3
 80096a2:	e000      	b.n	80096a6 <NVIC_EncodePriority+0x32>
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80096a8:	f04f 32ff 	mov.w	r2, #4294967295
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	fa02 f303 	lsl.w	r3, r2, r3
 80096b2:	43da      	mvns	r2, r3
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	401a      	ands	r2, r3
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80096bc:	f04f 31ff 	mov.w	r1, #4294967295
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	fa01 f303 	lsl.w	r3, r1, r3
 80096c6:	43d9      	mvns	r1, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80096cc:	4313      	orrs	r3, r2
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3724      	adds	r7, #36	; 0x24
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bc80      	pop	{r7}
 80096d6:	4770      	bx	lr

080096d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3b01      	subs	r3, #1
 80096e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80096e8:	d301      	bcc.n	80096ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80096ea:	2301      	movs	r3, #1
 80096ec:	e00f      	b.n	800970e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80096ee:	4a0a      	ldr	r2, [pc, #40]	; (8009718 <SysTick_Config+0x40>)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3b01      	subs	r3, #1
 80096f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80096f6:	210f      	movs	r1, #15
 80096f8:	f04f 30ff 	mov.w	r0, #4294967295
 80096fc:	f7ff ff90 	bl	8009620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009700:	4b05      	ldr	r3, [pc, #20]	; (8009718 <SysTick_Config+0x40>)
 8009702:	2200      	movs	r2, #0
 8009704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009706:	4b04      	ldr	r3, [pc, #16]	; (8009718 <SysTick_Config+0x40>)
 8009708:	2207      	movs	r2, #7
 800970a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	e000e010 	.word	0xe000e010

0800971c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7ff ff2d 	bl	8009584 <__NVIC_SetPriorityGrouping>
}
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009732:	b580      	push	{r7, lr}
 8009734:	b086      	sub	sp, #24
 8009736:	af00      	add	r7, sp, #0
 8009738:	4603      	mov	r3, r0
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	607a      	str	r2, [r7, #4]
 800973e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009740:	2300      	movs	r3, #0
 8009742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009744:	f7ff ff42 	bl	80095cc <__NVIC_GetPriorityGrouping>
 8009748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	68b9      	ldr	r1, [r7, #8]
 800974e:	6978      	ldr	r0, [r7, #20]
 8009750:	f7ff ff90 	bl	8009674 <NVIC_EncodePriority>
 8009754:	4602      	mov	r2, r0
 8009756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800975a:	4611      	mov	r1, r2
 800975c:	4618      	mov	r0, r3
 800975e:	f7ff ff5f 	bl	8009620 <__NVIC_SetPriority>
}
 8009762:	bf00      	nop
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	4603      	mov	r3, r0
 8009772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009778:	4618      	mov	r0, r3
 800977a:	f7ff ff35 	bl	80095e8 <__NVIC_EnableIRQ>
}
 800977e:	bf00      	nop
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b082      	sub	sp, #8
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff ffa2 	bl	80096d8 <SysTick_Config>
 8009794:	4603      	mov	r3, r0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800979e:	b480      	push	{r7}
 80097a0:	b085      	sub	sp, #20
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d008      	beq.n	80097c8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2204      	movs	r2, #4
 80097ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e020      	b.n	800980a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f022 020e 	bic.w	r2, r2, #14
 80097d6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 0201 	bic.w	r2, r2, #1
 80097e6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f0:	2101      	movs	r1, #1
 80097f2:	fa01 f202 	lsl.w	r2, r1, r2
 80097f6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009808:	7bfb      	ldrb	r3, [r7, #15]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	bc80      	pop	{r7}
 8009812:	4770      	bx	lr

08009814 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b02      	cmp	r3, #2
 800982a:	d005      	beq.n	8009838 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2204      	movs	r2, #4
 8009830:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	73fb      	strb	r3, [r7, #15]
 8009836:	e0d6      	b.n	80099e6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f022 020e 	bic.w	r2, r2, #14
 8009846:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f022 0201 	bic.w	r2, r2, #1
 8009856:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	461a      	mov	r2, r3
 800985e:	4b64      	ldr	r3, [pc, #400]	; (80099f0 <HAL_DMA_Abort_IT+0x1dc>)
 8009860:	429a      	cmp	r2, r3
 8009862:	d958      	bls.n	8009916 <HAL_DMA_Abort_IT+0x102>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a62      	ldr	r2, [pc, #392]	; (80099f4 <HAL_DMA_Abort_IT+0x1e0>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d04f      	beq.n	800990e <HAL_DMA_Abort_IT+0xfa>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a61      	ldr	r2, [pc, #388]	; (80099f8 <HAL_DMA_Abort_IT+0x1e4>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d048      	beq.n	800990a <HAL_DMA_Abort_IT+0xf6>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a5f      	ldr	r2, [pc, #380]	; (80099fc <HAL_DMA_Abort_IT+0x1e8>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d040      	beq.n	8009904 <HAL_DMA_Abort_IT+0xf0>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a5e      	ldr	r2, [pc, #376]	; (8009a00 <HAL_DMA_Abort_IT+0x1ec>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d038      	beq.n	80098fe <HAL_DMA_Abort_IT+0xea>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a5c      	ldr	r2, [pc, #368]	; (8009a04 <HAL_DMA_Abort_IT+0x1f0>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d030      	beq.n	80098f8 <HAL_DMA_Abort_IT+0xe4>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a5b      	ldr	r2, [pc, #364]	; (8009a08 <HAL_DMA_Abort_IT+0x1f4>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d028      	beq.n	80098f2 <HAL_DMA_Abort_IT+0xde>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a52      	ldr	r2, [pc, #328]	; (80099f0 <HAL_DMA_Abort_IT+0x1dc>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d020      	beq.n	80098ec <HAL_DMA_Abort_IT+0xd8>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a57      	ldr	r2, [pc, #348]	; (8009a0c <HAL_DMA_Abort_IT+0x1f8>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d019      	beq.n	80098e8 <HAL_DMA_Abort_IT+0xd4>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a55      	ldr	r2, [pc, #340]	; (8009a10 <HAL_DMA_Abort_IT+0x1fc>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d012      	beq.n	80098e4 <HAL_DMA_Abort_IT+0xd0>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a54      	ldr	r2, [pc, #336]	; (8009a14 <HAL_DMA_Abort_IT+0x200>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d00a      	beq.n	80098de <HAL_DMA_Abort_IT+0xca>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a52      	ldr	r2, [pc, #328]	; (8009a18 <HAL_DMA_Abort_IT+0x204>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d102      	bne.n	80098d8 <HAL_DMA_Abort_IT+0xc4>
 80098d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098d6:	e01b      	b.n	8009910 <HAL_DMA_Abort_IT+0xfc>
 80098d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098dc:	e018      	b.n	8009910 <HAL_DMA_Abort_IT+0xfc>
 80098de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098e2:	e015      	b.n	8009910 <HAL_DMA_Abort_IT+0xfc>
 80098e4:	2310      	movs	r3, #16
 80098e6:	e013      	b.n	8009910 <HAL_DMA_Abort_IT+0xfc>
 80098e8:	2301      	movs	r3, #1
 80098ea:	e011      	b.n	8009910 <HAL_DMA_Abort_IT+0xfc>
 80098ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098f0:	e00e      	b.n	8009910 <HAL_DMA_Abort_IT+0xfc>
 80098f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80098f6:	e00b      	b.n	8009910 <HAL_DMA_Abort_IT+0xfc>
 80098f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098fc:	e008      	b.n	8009910 <HAL_DMA_Abort_IT+0xfc>
 80098fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009902:	e005      	b.n	8009910 <HAL_DMA_Abort_IT+0xfc>
 8009904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009908:	e002      	b.n	8009910 <HAL_DMA_Abort_IT+0xfc>
 800990a:	2310      	movs	r3, #16
 800990c:	e000      	b.n	8009910 <HAL_DMA_Abort_IT+0xfc>
 800990e:	2301      	movs	r3, #1
 8009910:	4a42      	ldr	r2, [pc, #264]	; (8009a1c <HAL_DMA_Abort_IT+0x208>)
 8009912:	6053      	str	r3, [r2, #4]
 8009914:	e057      	b.n	80099c6 <HAL_DMA_Abort_IT+0x1b2>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a36      	ldr	r2, [pc, #216]	; (80099f4 <HAL_DMA_Abort_IT+0x1e0>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d04f      	beq.n	80099c0 <HAL_DMA_Abort_IT+0x1ac>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a34      	ldr	r2, [pc, #208]	; (80099f8 <HAL_DMA_Abort_IT+0x1e4>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d048      	beq.n	80099bc <HAL_DMA_Abort_IT+0x1a8>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a33      	ldr	r2, [pc, #204]	; (80099fc <HAL_DMA_Abort_IT+0x1e8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d040      	beq.n	80099b6 <HAL_DMA_Abort_IT+0x1a2>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a31      	ldr	r2, [pc, #196]	; (8009a00 <HAL_DMA_Abort_IT+0x1ec>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d038      	beq.n	80099b0 <HAL_DMA_Abort_IT+0x19c>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a30      	ldr	r2, [pc, #192]	; (8009a04 <HAL_DMA_Abort_IT+0x1f0>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d030      	beq.n	80099aa <HAL_DMA_Abort_IT+0x196>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a2e      	ldr	r2, [pc, #184]	; (8009a08 <HAL_DMA_Abort_IT+0x1f4>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d028      	beq.n	80099a4 <HAL_DMA_Abort_IT+0x190>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a26      	ldr	r2, [pc, #152]	; (80099f0 <HAL_DMA_Abort_IT+0x1dc>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d020      	beq.n	800999e <HAL_DMA_Abort_IT+0x18a>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a2a      	ldr	r2, [pc, #168]	; (8009a0c <HAL_DMA_Abort_IT+0x1f8>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d019      	beq.n	800999a <HAL_DMA_Abort_IT+0x186>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a29      	ldr	r2, [pc, #164]	; (8009a10 <HAL_DMA_Abort_IT+0x1fc>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d012      	beq.n	8009996 <HAL_DMA_Abort_IT+0x182>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a27      	ldr	r2, [pc, #156]	; (8009a14 <HAL_DMA_Abort_IT+0x200>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d00a      	beq.n	8009990 <HAL_DMA_Abort_IT+0x17c>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a26      	ldr	r2, [pc, #152]	; (8009a18 <HAL_DMA_Abort_IT+0x204>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d102      	bne.n	800998a <HAL_DMA_Abort_IT+0x176>
 8009984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009988:	e01b      	b.n	80099c2 <HAL_DMA_Abort_IT+0x1ae>
 800998a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800998e:	e018      	b.n	80099c2 <HAL_DMA_Abort_IT+0x1ae>
 8009990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009994:	e015      	b.n	80099c2 <HAL_DMA_Abort_IT+0x1ae>
 8009996:	2310      	movs	r3, #16
 8009998:	e013      	b.n	80099c2 <HAL_DMA_Abort_IT+0x1ae>
 800999a:	2301      	movs	r3, #1
 800999c:	e011      	b.n	80099c2 <HAL_DMA_Abort_IT+0x1ae>
 800999e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80099a2:	e00e      	b.n	80099c2 <HAL_DMA_Abort_IT+0x1ae>
 80099a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80099a8:	e00b      	b.n	80099c2 <HAL_DMA_Abort_IT+0x1ae>
 80099aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80099ae:	e008      	b.n	80099c2 <HAL_DMA_Abort_IT+0x1ae>
 80099b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099b4:	e005      	b.n	80099c2 <HAL_DMA_Abort_IT+0x1ae>
 80099b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099ba:	e002      	b.n	80099c2 <HAL_DMA_Abort_IT+0x1ae>
 80099bc:	2310      	movs	r3, #16
 80099be:	e000      	b.n	80099c2 <HAL_DMA_Abort_IT+0x1ae>
 80099c0:	2301      	movs	r3, #1
 80099c2:	4a17      	ldr	r2, [pc, #92]	; (8009a20 <HAL_DMA_Abort_IT+0x20c>)
 80099c4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	4798      	blx	r3
    } 
  }
  return status;
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	40020080 	.word	0x40020080
 80099f4:	40020008 	.word	0x40020008
 80099f8:	4002001c 	.word	0x4002001c
 80099fc:	40020030 	.word	0x40020030
 8009a00:	40020044 	.word	0x40020044
 8009a04:	40020058 	.word	0x40020058
 8009a08:	4002006c 	.word	0x4002006c
 8009a0c:	40020408 	.word	0x40020408
 8009a10:	4002041c 	.word	0x4002041c
 8009a14:	40020430 	.word	0x40020430
 8009a18:	40020444 	.word	0x40020444
 8009a1c:	40020400 	.word	0x40020400
 8009a20:	40020000 	.word	0x40020000

08009a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b08b      	sub	sp, #44	; 0x2c
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009a32:	2300      	movs	r3, #0
 8009a34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a36:	e179      	b.n	8009d2c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009a38:	2201      	movs	r2, #1
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	69fa      	ldr	r2, [r7, #28]
 8009a48:	4013      	ands	r3, r2
 8009a4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009a4c:	69ba      	ldr	r2, [r7, #24]
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	f040 8168 	bne.w	8009d26 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	4a96      	ldr	r2, [pc, #600]	; (8009cb4 <HAL_GPIO_Init+0x290>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d05e      	beq.n	8009b1e <HAL_GPIO_Init+0xfa>
 8009a60:	4a94      	ldr	r2, [pc, #592]	; (8009cb4 <HAL_GPIO_Init+0x290>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d875      	bhi.n	8009b52 <HAL_GPIO_Init+0x12e>
 8009a66:	4a94      	ldr	r2, [pc, #592]	; (8009cb8 <HAL_GPIO_Init+0x294>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d058      	beq.n	8009b1e <HAL_GPIO_Init+0xfa>
 8009a6c:	4a92      	ldr	r2, [pc, #584]	; (8009cb8 <HAL_GPIO_Init+0x294>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d86f      	bhi.n	8009b52 <HAL_GPIO_Init+0x12e>
 8009a72:	4a92      	ldr	r2, [pc, #584]	; (8009cbc <HAL_GPIO_Init+0x298>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d052      	beq.n	8009b1e <HAL_GPIO_Init+0xfa>
 8009a78:	4a90      	ldr	r2, [pc, #576]	; (8009cbc <HAL_GPIO_Init+0x298>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d869      	bhi.n	8009b52 <HAL_GPIO_Init+0x12e>
 8009a7e:	4a90      	ldr	r2, [pc, #576]	; (8009cc0 <HAL_GPIO_Init+0x29c>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d04c      	beq.n	8009b1e <HAL_GPIO_Init+0xfa>
 8009a84:	4a8e      	ldr	r2, [pc, #568]	; (8009cc0 <HAL_GPIO_Init+0x29c>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d863      	bhi.n	8009b52 <HAL_GPIO_Init+0x12e>
 8009a8a:	4a8e      	ldr	r2, [pc, #568]	; (8009cc4 <HAL_GPIO_Init+0x2a0>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d046      	beq.n	8009b1e <HAL_GPIO_Init+0xfa>
 8009a90:	4a8c      	ldr	r2, [pc, #560]	; (8009cc4 <HAL_GPIO_Init+0x2a0>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d85d      	bhi.n	8009b52 <HAL_GPIO_Init+0x12e>
 8009a96:	2b12      	cmp	r3, #18
 8009a98:	d82a      	bhi.n	8009af0 <HAL_GPIO_Init+0xcc>
 8009a9a:	2b12      	cmp	r3, #18
 8009a9c:	d859      	bhi.n	8009b52 <HAL_GPIO_Init+0x12e>
 8009a9e:	a201      	add	r2, pc, #4	; (adr r2, 8009aa4 <HAL_GPIO_Init+0x80>)
 8009aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa4:	08009b1f 	.word	0x08009b1f
 8009aa8:	08009af9 	.word	0x08009af9
 8009aac:	08009b0b 	.word	0x08009b0b
 8009ab0:	08009b4d 	.word	0x08009b4d
 8009ab4:	08009b53 	.word	0x08009b53
 8009ab8:	08009b53 	.word	0x08009b53
 8009abc:	08009b53 	.word	0x08009b53
 8009ac0:	08009b53 	.word	0x08009b53
 8009ac4:	08009b53 	.word	0x08009b53
 8009ac8:	08009b53 	.word	0x08009b53
 8009acc:	08009b53 	.word	0x08009b53
 8009ad0:	08009b53 	.word	0x08009b53
 8009ad4:	08009b53 	.word	0x08009b53
 8009ad8:	08009b53 	.word	0x08009b53
 8009adc:	08009b53 	.word	0x08009b53
 8009ae0:	08009b53 	.word	0x08009b53
 8009ae4:	08009b53 	.word	0x08009b53
 8009ae8:	08009b01 	.word	0x08009b01
 8009aec:	08009b15 	.word	0x08009b15
 8009af0:	4a75      	ldr	r2, [pc, #468]	; (8009cc8 <HAL_GPIO_Init+0x2a4>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d013      	beq.n	8009b1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009af6:	e02c      	b.n	8009b52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	623b      	str	r3, [r7, #32]
          break;
 8009afe:	e029      	b.n	8009b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	3304      	adds	r3, #4
 8009b06:	623b      	str	r3, [r7, #32]
          break;
 8009b08:	e024      	b.n	8009b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	3308      	adds	r3, #8
 8009b10:	623b      	str	r3, [r7, #32]
          break;
 8009b12:	e01f      	b.n	8009b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	330c      	adds	r3, #12
 8009b1a:	623b      	str	r3, [r7, #32]
          break;
 8009b1c:	e01a      	b.n	8009b54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d102      	bne.n	8009b2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009b26:	2304      	movs	r3, #4
 8009b28:	623b      	str	r3, [r7, #32]
          break;
 8009b2a:	e013      	b.n	8009b54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d105      	bne.n	8009b40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009b34:	2308      	movs	r3, #8
 8009b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	69fa      	ldr	r2, [r7, #28]
 8009b3c:	611a      	str	r2, [r3, #16]
          break;
 8009b3e:	e009      	b.n	8009b54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009b40:	2308      	movs	r3, #8
 8009b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	69fa      	ldr	r2, [r7, #28]
 8009b48:	615a      	str	r2, [r3, #20]
          break;
 8009b4a:	e003      	b.n	8009b54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	623b      	str	r3, [r7, #32]
          break;
 8009b50:	e000      	b.n	8009b54 <HAL_GPIO_Init+0x130>
          break;
 8009b52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	2bff      	cmp	r3, #255	; 0xff
 8009b58:	d801      	bhi.n	8009b5e <HAL_GPIO_Init+0x13a>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	e001      	b.n	8009b62 <HAL_GPIO_Init+0x13e>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	3304      	adds	r3, #4
 8009b62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	2bff      	cmp	r3, #255	; 0xff
 8009b68:	d802      	bhi.n	8009b70 <HAL_GPIO_Init+0x14c>
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	e002      	b.n	8009b76 <HAL_GPIO_Init+0x152>
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	3b08      	subs	r3, #8
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	210f      	movs	r1, #15
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	fa01 f303 	lsl.w	r3, r1, r3
 8009b84:	43db      	mvns	r3, r3
 8009b86:	401a      	ands	r2, r3
 8009b88:	6a39      	ldr	r1, [r7, #32]
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b90:	431a      	orrs	r2, r3
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 80c1 	beq.w	8009d26 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009ba4:	4b49      	ldr	r3, [pc, #292]	; (8009ccc <HAL_GPIO_Init+0x2a8>)
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	4a48      	ldr	r2, [pc, #288]	; (8009ccc <HAL_GPIO_Init+0x2a8>)
 8009baa:	f043 0301 	orr.w	r3, r3, #1
 8009bae:	6193      	str	r3, [r2, #24]
 8009bb0:	4b46      	ldr	r3, [pc, #280]	; (8009ccc <HAL_GPIO_Init+0x2a8>)
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	f003 0301 	and.w	r3, r3, #1
 8009bb8:	60bb      	str	r3, [r7, #8]
 8009bba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009bbc:	4a44      	ldr	r2, [pc, #272]	; (8009cd0 <HAL_GPIO_Init+0x2ac>)
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc0:	089b      	lsrs	r3, r3, #2
 8009bc2:	3302      	adds	r3, #2
 8009bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	f003 0303 	and.w	r3, r3, #3
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	220f      	movs	r2, #15
 8009bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd8:	43db      	mvns	r3, r3
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	4013      	ands	r3, r2
 8009bde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a3c      	ldr	r2, [pc, #240]	; (8009cd4 <HAL_GPIO_Init+0x2b0>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d01f      	beq.n	8009c28 <HAL_GPIO_Init+0x204>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a3b      	ldr	r2, [pc, #236]	; (8009cd8 <HAL_GPIO_Init+0x2b4>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d019      	beq.n	8009c24 <HAL_GPIO_Init+0x200>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a3a      	ldr	r2, [pc, #232]	; (8009cdc <HAL_GPIO_Init+0x2b8>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d013      	beq.n	8009c20 <HAL_GPIO_Init+0x1fc>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a39      	ldr	r2, [pc, #228]	; (8009ce0 <HAL_GPIO_Init+0x2bc>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d00d      	beq.n	8009c1c <HAL_GPIO_Init+0x1f8>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a38      	ldr	r2, [pc, #224]	; (8009ce4 <HAL_GPIO_Init+0x2c0>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d007      	beq.n	8009c18 <HAL_GPIO_Init+0x1f4>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a37      	ldr	r2, [pc, #220]	; (8009ce8 <HAL_GPIO_Init+0x2c4>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d101      	bne.n	8009c14 <HAL_GPIO_Init+0x1f0>
 8009c10:	2305      	movs	r3, #5
 8009c12:	e00a      	b.n	8009c2a <HAL_GPIO_Init+0x206>
 8009c14:	2306      	movs	r3, #6
 8009c16:	e008      	b.n	8009c2a <HAL_GPIO_Init+0x206>
 8009c18:	2304      	movs	r3, #4
 8009c1a:	e006      	b.n	8009c2a <HAL_GPIO_Init+0x206>
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e004      	b.n	8009c2a <HAL_GPIO_Init+0x206>
 8009c20:	2302      	movs	r3, #2
 8009c22:	e002      	b.n	8009c2a <HAL_GPIO_Init+0x206>
 8009c24:	2301      	movs	r3, #1
 8009c26:	e000      	b.n	8009c2a <HAL_GPIO_Init+0x206>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c2c:	f002 0203 	and.w	r2, r2, #3
 8009c30:	0092      	lsls	r2, r2, #2
 8009c32:	4093      	lsls	r3, r2
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009c3a:	4925      	ldr	r1, [pc, #148]	; (8009cd0 <HAL_GPIO_Init+0x2ac>)
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3e:	089b      	lsrs	r3, r3, #2
 8009c40:	3302      	adds	r3, #2
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d006      	beq.n	8009c62 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009c54:	4b25      	ldr	r3, [pc, #148]	; (8009cec <HAL_GPIO_Init+0x2c8>)
 8009c56:	689a      	ldr	r2, [r3, #8]
 8009c58:	4924      	ldr	r1, [pc, #144]	; (8009cec <HAL_GPIO_Init+0x2c8>)
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	608b      	str	r3, [r1, #8]
 8009c60:	e006      	b.n	8009c70 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009c62:	4b22      	ldr	r3, [pc, #136]	; (8009cec <HAL_GPIO_Init+0x2c8>)
 8009c64:	689a      	ldr	r2, [r3, #8]
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	43db      	mvns	r3, r3
 8009c6a:	4920      	ldr	r1, [pc, #128]	; (8009cec <HAL_GPIO_Init+0x2c8>)
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d006      	beq.n	8009c8a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009c7c:	4b1b      	ldr	r3, [pc, #108]	; (8009cec <HAL_GPIO_Init+0x2c8>)
 8009c7e:	68da      	ldr	r2, [r3, #12]
 8009c80:	491a      	ldr	r1, [pc, #104]	; (8009cec <HAL_GPIO_Init+0x2c8>)
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60cb      	str	r3, [r1, #12]
 8009c88:	e006      	b.n	8009c98 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009c8a:	4b18      	ldr	r3, [pc, #96]	; (8009cec <HAL_GPIO_Init+0x2c8>)
 8009c8c:	68da      	ldr	r2, [r3, #12]
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	43db      	mvns	r3, r3
 8009c92:	4916      	ldr	r1, [pc, #88]	; (8009cec <HAL_GPIO_Init+0x2c8>)
 8009c94:	4013      	ands	r3, r2
 8009c96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d025      	beq.n	8009cf0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009ca4:	4b11      	ldr	r3, [pc, #68]	; (8009cec <HAL_GPIO_Init+0x2c8>)
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	4910      	ldr	r1, [pc, #64]	; (8009cec <HAL_GPIO_Init+0x2c8>)
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	604b      	str	r3, [r1, #4]
 8009cb0:	e025      	b.n	8009cfe <HAL_GPIO_Init+0x2da>
 8009cb2:	bf00      	nop
 8009cb4:	10320000 	.word	0x10320000
 8009cb8:	10310000 	.word	0x10310000
 8009cbc:	10220000 	.word	0x10220000
 8009cc0:	10210000 	.word	0x10210000
 8009cc4:	10120000 	.word	0x10120000
 8009cc8:	10110000 	.word	0x10110000
 8009ccc:	40021000 	.word	0x40021000
 8009cd0:	40010000 	.word	0x40010000
 8009cd4:	40010800 	.word	0x40010800
 8009cd8:	40010c00 	.word	0x40010c00
 8009cdc:	40011000 	.word	0x40011000
 8009ce0:	40011400 	.word	0x40011400
 8009ce4:	40011800 	.word	0x40011800
 8009ce8:	40011c00 	.word	0x40011c00
 8009cec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009cf0:	4b15      	ldr	r3, [pc, #84]	; (8009d48 <HAL_GPIO_Init+0x324>)
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	43db      	mvns	r3, r3
 8009cf8:	4913      	ldr	r1, [pc, #76]	; (8009d48 <HAL_GPIO_Init+0x324>)
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d006      	beq.n	8009d18 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009d0a:	4b0f      	ldr	r3, [pc, #60]	; (8009d48 <HAL_GPIO_Init+0x324>)
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	490e      	ldr	r1, [pc, #56]	; (8009d48 <HAL_GPIO_Init+0x324>)
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	600b      	str	r3, [r1, #0]
 8009d16:	e006      	b.n	8009d26 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009d18:	4b0b      	ldr	r3, [pc, #44]	; (8009d48 <HAL_GPIO_Init+0x324>)
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	43db      	mvns	r3, r3
 8009d20:	4909      	ldr	r1, [pc, #36]	; (8009d48 <HAL_GPIO_Init+0x324>)
 8009d22:	4013      	ands	r3, r2
 8009d24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d28:	3301      	adds	r3, #1
 8009d2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	fa22 f303 	lsr.w	r3, r2, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f47f ae7e 	bne.w	8009a38 <HAL_GPIO_Init+0x14>
  }
}
 8009d3c:	bf00      	nop
 8009d3e:	bf00      	nop
 8009d40:	372c      	adds	r7, #44	; 0x2c
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bc80      	pop	{r7}
 8009d46:	4770      	bx	lr
 8009d48:	40010400 	.word	0x40010400

08009d4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b089      	sub	sp, #36	; 0x24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009d56:	2300      	movs	r3, #0
 8009d58:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009d5a:	e0a6      	b.n	8009eaa <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	fa02 f303 	lsl.w	r3, r2, r3
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	4013      	ands	r3, r2
 8009d68:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 8099 	beq.w	8009ea4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009d72:	4a54      	ldr	r2, [pc, #336]	; (8009ec4 <HAL_GPIO_DeInit+0x178>)
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	089b      	lsrs	r3, r3, #2
 8009d78:	3302      	adds	r3, #2
 8009d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d7e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	f003 0303 	and.w	r3, r3, #3
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	220f      	movs	r2, #15
 8009d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	4013      	ands	r3, r2
 8009d92:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a4c      	ldr	r2, [pc, #304]	; (8009ec8 <HAL_GPIO_DeInit+0x17c>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d01f      	beq.n	8009ddc <HAL_GPIO_DeInit+0x90>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a4b      	ldr	r2, [pc, #300]	; (8009ecc <HAL_GPIO_DeInit+0x180>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d019      	beq.n	8009dd8 <HAL_GPIO_DeInit+0x8c>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a4a      	ldr	r2, [pc, #296]	; (8009ed0 <HAL_GPIO_DeInit+0x184>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d013      	beq.n	8009dd4 <HAL_GPIO_DeInit+0x88>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a49      	ldr	r2, [pc, #292]	; (8009ed4 <HAL_GPIO_DeInit+0x188>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d00d      	beq.n	8009dd0 <HAL_GPIO_DeInit+0x84>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a48      	ldr	r2, [pc, #288]	; (8009ed8 <HAL_GPIO_DeInit+0x18c>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d007      	beq.n	8009dcc <HAL_GPIO_DeInit+0x80>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a47      	ldr	r2, [pc, #284]	; (8009edc <HAL_GPIO_DeInit+0x190>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d101      	bne.n	8009dc8 <HAL_GPIO_DeInit+0x7c>
 8009dc4:	2305      	movs	r3, #5
 8009dc6:	e00a      	b.n	8009dde <HAL_GPIO_DeInit+0x92>
 8009dc8:	2306      	movs	r3, #6
 8009dca:	e008      	b.n	8009dde <HAL_GPIO_DeInit+0x92>
 8009dcc:	2304      	movs	r3, #4
 8009dce:	e006      	b.n	8009dde <HAL_GPIO_DeInit+0x92>
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	e004      	b.n	8009dde <HAL_GPIO_DeInit+0x92>
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	e002      	b.n	8009dde <HAL_GPIO_DeInit+0x92>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e000      	b.n	8009dde <HAL_GPIO_DeInit+0x92>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	f002 0203 	and.w	r2, r2, #3
 8009de4:	0092      	lsls	r2, r2, #2
 8009de6:	4093      	lsls	r3, r2
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d132      	bne.n	8009e54 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009dee:	4b3c      	ldr	r3, [pc, #240]	; (8009ee0 <HAL_GPIO_DeInit+0x194>)
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	43db      	mvns	r3, r3
 8009df6:	493a      	ldr	r1, [pc, #232]	; (8009ee0 <HAL_GPIO_DeInit+0x194>)
 8009df8:	4013      	ands	r3, r2
 8009dfa:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009dfc:	4b38      	ldr	r3, [pc, #224]	; (8009ee0 <HAL_GPIO_DeInit+0x194>)
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	43db      	mvns	r3, r3
 8009e04:	4936      	ldr	r1, [pc, #216]	; (8009ee0 <HAL_GPIO_DeInit+0x194>)
 8009e06:	4013      	ands	r3, r2
 8009e08:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009e0a:	4b35      	ldr	r3, [pc, #212]	; (8009ee0 <HAL_GPIO_DeInit+0x194>)
 8009e0c:	68da      	ldr	r2, [r3, #12]
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	43db      	mvns	r3, r3
 8009e12:	4933      	ldr	r1, [pc, #204]	; (8009ee0 <HAL_GPIO_DeInit+0x194>)
 8009e14:	4013      	ands	r3, r2
 8009e16:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009e18:	4b31      	ldr	r3, [pc, #196]	; (8009ee0 <HAL_GPIO_DeInit+0x194>)
 8009e1a:	689a      	ldr	r2, [r3, #8]
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	43db      	mvns	r3, r3
 8009e20:	492f      	ldr	r1, [pc, #188]	; (8009ee0 <HAL_GPIO_DeInit+0x194>)
 8009e22:	4013      	ands	r3, r2
 8009e24:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	f003 0303 	and.w	r3, r3, #3
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	220f      	movs	r2, #15
 8009e30:	fa02 f303 	lsl.w	r3, r2, r3
 8009e34:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009e36:	4a23      	ldr	r2, [pc, #140]	; (8009ec4 <HAL_GPIO_DeInit+0x178>)
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	089b      	lsrs	r3, r3, #2
 8009e3c:	3302      	adds	r3, #2
 8009e3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	43da      	mvns	r2, r3
 8009e46:	481f      	ldr	r0, [pc, #124]	; (8009ec4 <HAL_GPIO_DeInit+0x178>)
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	089b      	lsrs	r3, r3, #2
 8009e4c:	400a      	ands	r2, r1
 8009e4e:	3302      	adds	r3, #2
 8009e50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	2bff      	cmp	r3, #255	; 0xff
 8009e58:	d801      	bhi.n	8009e5e <HAL_GPIO_DeInit+0x112>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	e001      	b.n	8009e62 <HAL_GPIO_DeInit+0x116>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	3304      	adds	r3, #4
 8009e62:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	2bff      	cmp	r3, #255	; 0xff
 8009e68:	d802      	bhi.n	8009e70 <HAL_GPIO_DeInit+0x124>
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	e002      	b.n	8009e76 <HAL_GPIO_DeInit+0x12a>
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	3b08      	subs	r3, #8
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	210f      	movs	r1, #15
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	fa01 f303 	lsl.w	r3, r1, r3
 8009e84:	43db      	mvns	r3, r3
 8009e86:	401a      	ands	r2, r3
 8009e88:	2104      	movs	r1, #4
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e90:	431a      	orrs	r2, r3
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68da      	ldr	r2, [r3, #12]
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	43db      	mvns	r3, r3
 8009e9e:	401a      	ands	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f47f af52 	bne.w	8009d5c <HAL_GPIO_DeInit+0x10>
  }
}
 8009eb8:	bf00      	nop
 8009eba:	bf00      	nop
 8009ebc:	3724      	adds	r7, #36	; 0x24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bc80      	pop	{r7}
 8009ec2:	4770      	bx	lr
 8009ec4:	40010000 	.word	0x40010000
 8009ec8:	40010800 	.word	0x40010800
 8009ecc:	40010c00 	.word	0x40010c00
 8009ed0:	40011000 	.word	0x40011000
 8009ed4:	40011400 	.word	0x40011400
 8009ed8:	40011800 	.word	0x40011800
 8009edc:	40011c00 	.word	0x40011c00
 8009ee0:	40010400 	.word	0x40010400

08009ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	689a      	ldr	r2, [r3, #8]
 8009ef4:	887b      	ldrh	r3, [r7, #2]
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009efc:	2301      	movs	r3, #1
 8009efe:	73fb      	strb	r3, [r7, #15]
 8009f00:	e001      	b.n	8009f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009f02:	2300      	movs	r3, #0
 8009f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bc80      	pop	{r7}
 8009f10:	4770      	bx	lr

08009f12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	807b      	strh	r3, [r7, #2]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009f22:	787b      	ldrb	r3, [r7, #1]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d003      	beq.n	8009f30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009f28:	887a      	ldrh	r2, [r7, #2]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009f2e:	e003      	b.n	8009f38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009f30:	887b      	ldrh	r3, [r7, #2]
 8009f32:	041a      	lsls	r2, r3, #16
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	611a      	str	r2, [r3, #16]
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bc80      	pop	{r7}
 8009f40:	4770      	bx	lr

08009f42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b085      	sub	sp, #20
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009f54:	887a      	ldrh	r2, [r7, #2]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	4013      	ands	r3, r2
 8009f5a:	041a      	lsls	r2, r3, #16
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	43d9      	mvns	r1, r3
 8009f60:	887b      	ldrh	r3, [r7, #2]
 8009f62:	400b      	ands	r3, r1
 8009f64:	431a      	orrs	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	611a      	str	r2, [r3, #16]
}
 8009f6a:	bf00      	nop
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bc80      	pop	{r7}
 8009f72:	4770      	bx	lr

08009f74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d101      	bne.n	8009f86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e12b      	b.n	800a1de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d106      	bne.n	8009fa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7fe fff8 	bl	8008f90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2224      	movs	r2, #36	; 0x24
 8009fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f022 0201 	bic.w	r2, r2, #1
 8009fb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009fd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009fd8:	f001 fdb8 	bl	800bb4c <HAL_RCC_GetPCLK1Freq>
 8009fdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	4a81      	ldr	r2, [pc, #516]	; (800a1e8 <HAL_I2C_Init+0x274>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d807      	bhi.n	8009ff8 <HAL_I2C_Init+0x84>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4a80      	ldr	r2, [pc, #512]	; (800a1ec <HAL_I2C_Init+0x278>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	bf94      	ite	ls
 8009ff0:	2301      	movls	r3, #1
 8009ff2:	2300      	movhi	r3, #0
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	e006      	b.n	800a006 <HAL_I2C_Init+0x92>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	4a7d      	ldr	r2, [pc, #500]	; (800a1f0 <HAL_I2C_Init+0x27c>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	bf94      	ite	ls
 800a000:	2301      	movls	r3, #1
 800a002:	2300      	movhi	r3, #0
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e0e7      	b.n	800a1de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	4a78      	ldr	r2, [pc, #480]	; (800a1f4 <HAL_I2C_Init+0x280>)
 800a012:	fba2 2303 	umull	r2, r3, r2, r3
 800a016:	0c9b      	lsrs	r3, r3, #18
 800a018:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	430a      	orrs	r2, r1
 800a02c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	4a6a      	ldr	r2, [pc, #424]	; (800a1e8 <HAL_I2C_Init+0x274>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d802      	bhi.n	800a048 <HAL_I2C_Init+0xd4>
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	3301      	adds	r3, #1
 800a046:	e009      	b.n	800a05c <HAL_I2C_Init+0xe8>
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a04e:	fb02 f303 	mul.w	r3, r2, r3
 800a052:	4a69      	ldr	r2, [pc, #420]	; (800a1f8 <HAL_I2C_Init+0x284>)
 800a054:	fba2 2303 	umull	r2, r3, r2, r3
 800a058:	099b      	lsrs	r3, r3, #6
 800a05a:	3301      	adds	r3, #1
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	6812      	ldr	r2, [r2, #0]
 800a060:	430b      	orrs	r3, r1
 800a062:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	69db      	ldr	r3, [r3, #28]
 800a06a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a06e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	495c      	ldr	r1, [pc, #368]	; (800a1e8 <HAL_I2C_Init+0x274>)
 800a078:	428b      	cmp	r3, r1
 800a07a:	d819      	bhi.n	800a0b0 <HAL_I2C_Init+0x13c>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	1e59      	subs	r1, r3, #1
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	fbb1 f3f3 	udiv	r3, r1, r3
 800a08a:	1c59      	adds	r1, r3, #1
 800a08c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a090:	400b      	ands	r3, r1
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00a      	beq.n	800a0ac <HAL_I2C_Init+0x138>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	1e59      	subs	r1, r3, #1
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	005b      	lsls	r3, r3, #1
 800a0a0:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0aa:	e051      	b.n	800a150 <HAL_I2C_Init+0x1dc>
 800a0ac:	2304      	movs	r3, #4
 800a0ae:	e04f      	b.n	800a150 <HAL_I2C_Init+0x1dc>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d111      	bne.n	800a0dc <HAL_I2C_Init+0x168>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	1e58      	subs	r0, r3, #1
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6859      	ldr	r1, [r3, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	440b      	add	r3, r1
 800a0c6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	bf0c      	ite	eq
 800a0d4:	2301      	moveq	r3, #1
 800a0d6:	2300      	movne	r3, #0
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	e012      	b.n	800a102 <HAL_I2C_Init+0x18e>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	1e58      	subs	r0, r3, #1
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6859      	ldr	r1, [r3, #4]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	440b      	add	r3, r1
 800a0ea:	0099      	lsls	r1, r3, #2
 800a0ec:	440b      	add	r3, r1
 800a0ee:	fbb0 f3f3 	udiv	r3, r0, r3
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	bf0c      	ite	eq
 800a0fc:	2301      	moveq	r3, #1
 800a0fe:	2300      	movne	r3, #0
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <HAL_I2C_Init+0x196>
 800a106:	2301      	movs	r3, #1
 800a108:	e022      	b.n	800a150 <HAL_I2C_Init+0x1dc>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10e      	bne.n	800a130 <HAL_I2C_Init+0x1bc>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	1e58      	subs	r0, r3, #1
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6859      	ldr	r1, [r3, #4]
 800a11a:	460b      	mov	r3, r1
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	440b      	add	r3, r1
 800a120:	fbb0 f3f3 	udiv	r3, r0, r3
 800a124:	3301      	adds	r3, #1
 800a126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a12a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a12e:	e00f      	b.n	800a150 <HAL_I2C_Init+0x1dc>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	1e58      	subs	r0, r3, #1
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6859      	ldr	r1, [r3, #4]
 800a138:	460b      	mov	r3, r1
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	440b      	add	r3, r1
 800a13e:	0099      	lsls	r1, r3, #2
 800a140:	440b      	add	r3, r1
 800a142:	fbb0 f3f3 	udiv	r3, r0, r3
 800a146:	3301      	adds	r3, #1
 800a148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a14c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a150:	6879      	ldr	r1, [r7, #4]
 800a152:	6809      	ldr	r1, [r1, #0]
 800a154:	4313      	orrs	r3, r2
 800a156:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	69da      	ldr	r2, [r3, #28]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	431a      	orrs	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	430a      	orrs	r2, r1
 800a172:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a17e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	6911      	ldr	r1, [r2, #16]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	68d2      	ldr	r2, [r2, #12]
 800a18a:	4311      	orrs	r1, r2
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	6812      	ldr	r2, [r2, #0]
 800a190:	430b      	orrs	r3, r1
 800a192:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	695a      	ldr	r2, [r3, #20]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	699b      	ldr	r3, [r3, #24]
 800a1a6:	431a      	orrs	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	430a      	orrs	r2, r1
 800a1ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f042 0201 	orr.w	r2, r2, #1
 800a1be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	000186a0 	.word	0x000186a0
 800a1ec:	001e847f 	.word	0x001e847f
 800a1f0:	003d08ff 	.word	0x003d08ff
 800a1f4:	431bde83 	.word	0x431bde83
 800a1f8:	10624dd3 	.word	0x10624dd3

0800a1fc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d101      	bne.n	800a20e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e021      	b.n	800a252 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2224      	movs	r2, #36	; 0x24
 800a212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f022 0201 	bic.w	r2, r2, #1
 800a224:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7fe fef0 	bl	800900c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af02      	add	r7, sp, #8
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	607a      	str	r2, [r7, #4]
 800a266:	461a      	mov	r2, r3
 800a268:	460b      	mov	r3, r1
 800a26a:	817b      	strh	r3, [r7, #10]
 800a26c:	4613      	mov	r3, r2
 800a26e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a270:	f7ff f85e 	bl	8009330 <HAL_GetTick>
 800a274:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	2b20      	cmp	r3, #32
 800a280:	f040 80e0 	bne.w	800a444 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	2319      	movs	r3, #25
 800a28a:	2201      	movs	r2, #1
 800a28c:	4970      	ldr	r1, [pc, #448]	; (800a450 <HAL_I2C_Master_Transmit+0x1f4>)
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f000 fe5c 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a29a:	2302      	movs	r3, #2
 800a29c:	e0d3      	b.n	800a446 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d101      	bne.n	800a2ac <HAL_I2C_Master_Transmit+0x50>
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	e0cc      	b.n	800a446 <HAL_I2C_Master_Transmit+0x1ea>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 0301 	and.w	r3, r3, #1
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d007      	beq.n	800a2d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f042 0201 	orr.w	r2, r2, #1
 800a2d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2221      	movs	r2, #33	; 0x21
 800a2e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2210      	movs	r2, #16
 800a2ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	893a      	ldrh	r2, [r7, #8]
 800a302:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a308:	b29a      	uxth	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	4a50      	ldr	r2, [pc, #320]	; (800a454 <HAL_I2C_Master_Transmit+0x1f8>)
 800a312:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a314:	8979      	ldrh	r1, [r7, #10]
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	6a3a      	ldr	r2, [r7, #32]
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 fc16 	bl	800ab4c <I2C_MasterRequestWrite>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e08d      	b.n	800a446 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a32a:	2300      	movs	r3, #0
 800a32c:	613b      	str	r3, [r7, #16]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	613b      	str	r3, [r7, #16]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	613b      	str	r3, [r7, #16]
 800a33e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a340:	e066      	b.n	800a410 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	6a39      	ldr	r1, [r7, #32]
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f000 ff1a 	bl	800b180 <I2C_WaitOnTXEFlagUntilTimeout>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00d      	beq.n	800a36e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a356:	2b04      	cmp	r3, #4
 800a358:	d107      	bne.n	800a36a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a368:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e06b      	b.n	800a446 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a372:	781a      	ldrb	r2, [r3, #0]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a388:	b29b      	uxth	r3, r3
 800a38a:	3b01      	subs	r3, #1
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a396:	3b01      	subs	r3, #1
 800a398:	b29a      	uxth	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	f003 0304 	and.w	r3, r3, #4
 800a3a8:	2b04      	cmp	r3, #4
 800a3aa:	d11b      	bne.n	800a3e4 <HAL_I2C_Master_Transmit+0x188>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d017      	beq.n	800a3e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b8:	781a      	ldrb	r2, [r3, #0]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	1c5a      	adds	r2, r3, #1
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	6a39      	ldr	r1, [r7, #32]
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f000 ff11 	bl	800b210 <I2C_WaitOnBTFFlagUntilTimeout>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00d      	beq.n	800a410 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f8:	2b04      	cmp	r3, #4
 800a3fa:	d107      	bne.n	800a40c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a40a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e01a      	b.n	800a446 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a414:	2b00      	cmp	r3, #0
 800a416:	d194      	bne.n	800a342 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2220      	movs	r2, #32
 800a42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a440:	2300      	movs	r3, #0
 800a442:	e000      	b.n	800a446 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a444:	2302      	movs	r3, #2
  }
}
 800a446:	4618      	mov	r0, r3
 800a448:	3718      	adds	r7, #24
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	00100002 	.word	0x00100002
 800a454:	ffff0000 	.word	0xffff0000

0800a458 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b088      	sub	sp, #32
 800a45c:	af02      	add	r7, sp, #8
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	4608      	mov	r0, r1
 800a462:	4611      	mov	r1, r2
 800a464:	461a      	mov	r2, r3
 800a466:	4603      	mov	r3, r0
 800a468:	817b      	strh	r3, [r7, #10]
 800a46a:	460b      	mov	r3, r1
 800a46c:	813b      	strh	r3, [r7, #8]
 800a46e:	4613      	mov	r3, r2
 800a470:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a472:	f7fe ff5d 	bl	8009330 <HAL_GetTick>
 800a476:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	2b20      	cmp	r3, #32
 800a482:	f040 80d9 	bne.w	800a638 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	2319      	movs	r3, #25
 800a48c:	2201      	movs	r2, #1
 800a48e:	496d      	ldr	r1, [pc, #436]	; (800a644 <HAL_I2C_Mem_Write+0x1ec>)
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f000 fd5b 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a49c:	2302      	movs	r3, #2
 800a49e:	e0cc      	b.n	800a63a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d101      	bne.n	800a4ae <HAL_I2C_Mem_Write+0x56>
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	e0c5      	b.n	800a63a <HAL_I2C_Mem_Write+0x1e2>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d007      	beq.n	800a4d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f042 0201 	orr.w	r2, r2, #1
 800a4d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2221      	movs	r2, #33	; 0x21
 800a4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2240      	movs	r2, #64	; 0x40
 800a4f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6a3a      	ldr	r2, [r7, #32]
 800a4fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a504:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4a4d      	ldr	r2, [pc, #308]	; (800a648 <HAL_I2C_Mem_Write+0x1f0>)
 800a514:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a516:	88f8      	ldrh	r0, [r7, #6]
 800a518:	893a      	ldrh	r2, [r7, #8]
 800a51a:	8979      	ldrh	r1, [r7, #10]
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	9301      	str	r3, [sp, #4]
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	4603      	mov	r3, r0
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 fb92 	bl	800ac50 <I2C_RequestMemoryWrite>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d052      	beq.n	800a5d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e081      	b.n	800a63a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f000 fe20 	bl	800b180 <I2C_WaitOnTXEFlagUntilTimeout>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00d      	beq.n	800a562 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	d107      	bne.n	800a55e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a55c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	e06b      	b.n	800a63a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a566:	781a      	ldrb	r2, [r3, #0]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a572:	1c5a      	adds	r2, r3, #1
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a57c:	3b01      	subs	r3, #1
 800a57e:	b29a      	uxth	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a588:	b29b      	uxth	r3, r3
 800a58a:	3b01      	subs	r3, #1
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	f003 0304 	and.w	r3, r3, #4
 800a59c:	2b04      	cmp	r3, #4
 800a59e:	d11b      	bne.n	800a5d8 <HAL_I2C_Mem_Write+0x180>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d017      	beq.n	800a5d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	781a      	ldrb	r2, [r3, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	b29a      	uxth	r2, r3
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1aa      	bne.n	800a536 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5e0:	697a      	ldr	r2, [r7, #20]
 800a5e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f000 fe13 	bl	800b210 <I2C_WaitOnBTFFlagUntilTimeout>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00d      	beq.n	800a60c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f4:	2b04      	cmp	r3, #4
 800a5f6:	d107      	bne.n	800a608 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a606:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e016      	b.n	800a63a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a61a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2220      	movs	r2, #32
 800a620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a634:	2300      	movs	r3, #0
 800a636:	e000      	b.n	800a63a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a638:	2302      	movs	r3, #2
  }
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3718      	adds	r7, #24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	00100002 	.word	0x00100002
 800a648:	ffff0000 	.word	0xffff0000

0800a64c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08c      	sub	sp, #48	; 0x30
 800a650:	af02      	add	r7, sp, #8
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	4608      	mov	r0, r1
 800a656:	4611      	mov	r1, r2
 800a658:	461a      	mov	r2, r3
 800a65a:	4603      	mov	r3, r0
 800a65c:	817b      	strh	r3, [r7, #10]
 800a65e:	460b      	mov	r3, r1
 800a660:	813b      	strh	r3, [r7, #8]
 800a662:	4613      	mov	r3, r2
 800a664:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a66a:	f7fe fe61 	bl	8009330 <HAL_GetTick>
 800a66e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a676:	b2db      	uxtb	r3, r3
 800a678:	2b20      	cmp	r3, #32
 800a67a:	f040 8244 	bne.w	800ab06 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	2319      	movs	r3, #25
 800a684:	2201      	movs	r2, #1
 800a686:	4982      	ldr	r1, [pc, #520]	; (800a890 <HAL_I2C_Mem_Read+0x244>)
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 fc5f 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d001      	beq.n	800a698 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a694:	2302      	movs	r3, #2
 800a696:	e237      	b.n	800ab08 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d101      	bne.n	800a6a6 <HAL_I2C_Mem_Read+0x5a>
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e230      	b.n	800ab08 <HAL_I2C_Mem_Read+0x4bc>
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0301 	and.w	r3, r3, #1
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d007      	beq.n	800a6cc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f042 0201 	orr.w	r2, r2, #1
 800a6ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2222      	movs	r2, #34	; 0x22
 800a6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2240      	movs	r2, #64	; 0x40
 800a6e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a6fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a702:	b29a      	uxth	r2, r3
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	4a62      	ldr	r2, [pc, #392]	; (800a894 <HAL_I2C_Mem_Read+0x248>)
 800a70c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a70e:	88f8      	ldrh	r0, [r7, #6]
 800a710:	893a      	ldrh	r2, [r7, #8]
 800a712:	8979      	ldrh	r1, [r7, #10]
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	9301      	str	r3, [sp, #4]
 800a718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	4603      	mov	r3, r0
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f000 fb2c 	bl	800ad7c <I2C_RequestMemoryRead>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d001      	beq.n	800a72e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e1ec      	b.n	800ab08 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a732:	2b00      	cmp	r3, #0
 800a734:	d113      	bne.n	800a75e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a736:	2300      	movs	r3, #0
 800a738:	61fb      	str	r3, [r7, #28]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	695b      	ldr	r3, [r3, #20]
 800a740:	61fb      	str	r3, [r7, #28]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	61fb      	str	r3, [r7, #28]
 800a74a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	e1c0      	b.n	800aae0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a762:	2b01      	cmp	r3, #1
 800a764:	d11e      	bne.n	800a7a4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a774:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a776:	b672      	cpsid	i
}
 800a778:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a77a:	2300      	movs	r3, #0
 800a77c:	61bb      	str	r3, [r7, #24]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	61bb      	str	r3, [r7, #24]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	61bb      	str	r3, [r7, #24]
 800a78e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a79e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a7a0:	b662      	cpsie	i
}
 800a7a2:	e035      	b.n	800a810 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7a8:	2b02      	cmp	r3, #2
 800a7aa:	d11e      	bne.n	800a7ea <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7bc:	b672      	cpsid	i
}
 800a7be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	617b      	str	r3, [r7, #20]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	695b      	ldr	r3, [r3, #20]
 800a7ca:	617b      	str	r3, [r7, #20]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	617b      	str	r3, [r7, #20]
 800a7d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a7e6:	b662      	cpsie	i
}
 800a7e8:	e012      	b.n	800a810 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a7f8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	613b      	str	r3, [r7, #16]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	695b      	ldr	r3, [r3, #20]
 800a804:	613b      	str	r3, [r7, #16]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	613b      	str	r3, [r7, #16]
 800a80e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a810:	e166      	b.n	800aae0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a816:	2b03      	cmp	r3, #3
 800a818:	f200 811f 	bhi.w	800aa5a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a820:	2b01      	cmp	r3, #1
 800a822:	d123      	bne.n	800a86c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 fd39 	bl	800b2a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e167      	b.n	800ab08 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	691a      	ldr	r2, [r3, #16]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a842:	b2d2      	uxtb	r2, r2
 800a844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a854:	3b01      	subs	r3, #1
 800a856:	b29a      	uxth	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a860:	b29b      	uxth	r3, r3
 800a862:	3b01      	subs	r3, #1
 800a864:	b29a      	uxth	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a86a:	e139      	b.n	800aae0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a870:	2b02      	cmp	r3, #2
 800a872:	d152      	bne.n	800a91a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87a:	2200      	movs	r2, #0
 800a87c:	4906      	ldr	r1, [pc, #24]	; (800a898 <HAL_I2C_Mem_Read+0x24c>)
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 fb64 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d008      	beq.n	800a89c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e13c      	b.n	800ab08 <HAL_I2C_Mem_Read+0x4bc>
 800a88e:	bf00      	nop
 800a890:	00100002 	.word	0x00100002
 800a894:	ffff0000 	.word	0xffff0000
 800a898:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a89c:	b672      	cpsid	i
}
 800a89e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	691a      	ldr	r2, [r3, #16]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ba:	b2d2      	uxtb	r2, r2
 800a8bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a8e2:	b662      	cpsie	i
}
 800a8e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	691a      	ldr	r2, [r3, #16]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f0:	b2d2      	uxtb	r2, r2
 800a8f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f8:	1c5a      	adds	r2, r3, #1
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a902:	3b01      	subs	r3, #1
 800a904:	b29a      	uxth	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a90e:	b29b      	uxth	r3, r3
 800a910:	3b01      	subs	r3, #1
 800a912:	b29a      	uxth	r2, r3
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a918:	e0e2      	b.n	800aae0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a920:	2200      	movs	r2, #0
 800a922:	497b      	ldr	r1, [pc, #492]	; (800ab10 <HAL_I2C_Mem_Read+0x4c4>)
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f000 fb11 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d001      	beq.n	800a934 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	e0e9      	b.n	800ab08 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a942:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a944:	b672      	cpsid	i
}
 800a946:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	691a      	ldr	r2, [r3, #16]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a952:	b2d2      	uxtb	r2, r2
 800a954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95a:	1c5a      	adds	r2, r3, #1
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a964:	3b01      	subs	r3, #1
 800a966:	b29a      	uxth	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a970:	b29b      	uxth	r3, r3
 800a972:	3b01      	subs	r3, #1
 800a974:	b29a      	uxth	r2, r3
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a97a:	4b66      	ldr	r3, [pc, #408]	; (800ab14 <HAL_I2C_Mem_Read+0x4c8>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	08db      	lsrs	r3, r3, #3
 800a980:	4a65      	ldr	r2, [pc, #404]	; (800ab18 <HAL_I2C_Mem_Read+0x4cc>)
 800a982:	fba2 2303 	umull	r2, r3, r2, r3
 800a986:	0a1a      	lsrs	r2, r3, #8
 800a988:	4613      	mov	r3, r2
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4413      	add	r3, r2
 800a98e:	00da      	lsls	r2, r3, #3
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	3b01      	subs	r3, #1
 800a998:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a99a:	6a3b      	ldr	r3, [r7, #32]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d118      	bne.n	800a9d2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ba:	f043 0220 	orr.w	r2, r3, #32
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a9c2:	b662      	cpsie	i
}
 800a9c4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e09a      	b.n	800ab08 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	695b      	ldr	r3, [r3, #20]
 800a9d8:	f003 0304 	and.w	r3, r3, #4
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	d1d9      	bne.n	800a994 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	691a      	ldr	r2, [r3, #16]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fa:	b2d2      	uxtb	r2, r2
 800a9fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800aa22:	b662      	cpsie	i
}
 800aa24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	691a      	ldr	r2, [r3, #16]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	b2d2      	uxtb	r2, r2
 800aa32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa38:	1c5a      	adds	r2, r3, #1
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa42:	3b01      	subs	r3, #1
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	3b01      	subs	r3, #1
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aa58:	e042      	b.n	800aae0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f000 fc1e 	bl	800b2a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e04c      	b.n	800ab08 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	691a      	ldr	r2, [r3, #16]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa78:	b2d2      	uxtb	r2, r2
 800aa7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa80:	1c5a      	adds	r2, r3, #1
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	b29a      	uxth	r2, r3
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	695b      	ldr	r3, [r3, #20]
 800aaa6:	f003 0304 	and.w	r3, r3, #4
 800aaaa:	2b04      	cmp	r3, #4
 800aaac:	d118      	bne.n	800aae0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	691a      	ldr	r2, [r3, #16]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	b2d2      	uxtb	r2, r2
 800aaba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac0:	1c5a      	adds	r2, r3, #1
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaca:	3b01      	subs	r3, #1
 800aacc:	b29a      	uxth	r2, r3
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	3b01      	subs	r3, #1
 800aada:	b29a      	uxth	r2, r3
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f47f ae94 	bne.w	800a812 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2220      	movs	r2, #32
 800aaee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	e000      	b.n	800ab08 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800ab06:	2302      	movs	r3, #2
  }
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3728      	adds	r7, #40	; 0x28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	00010004 	.word	0x00010004
 800ab14:	200009b8 	.word	0x200009b8
 800ab18:	14f8b589 	.word	0x14f8b589

0800ab1c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab2a:	b2db      	uxtb	r3, r3
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bc80      	pop	{r7}
 800ab34:	4770      	bx	lr

0800ab36 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b083      	sub	sp, #12
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bc80      	pop	{r7}
 800ab4a:	4770      	bx	lr

0800ab4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b088      	sub	sp, #32
 800ab50:	af02      	add	r7, sp, #8
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	607a      	str	r2, [r7, #4]
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2b08      	cmp	r3, #8
 800ab66:	d006      	beq.n	800ab76 <I2C_MasterRequestWrite+0x2a>
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d003      	beq.n	800ab76 <I2C_MasterRequestWrite+0x2a>
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ab74:	d108      	bne.n	800ab88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab84:	601a      	str	r2, [r3, #0]
 800ab86:	e00b      	b.n	800aba0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8c:	2b12      	cmp	r3, #18
 800ab8e:	d107      	bne.n	800aba0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f000 f9cd 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00d      	beq.n	800abd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abc6:	d103      	bne.n	800abd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800abd0:	2303      	movs	r3, #3
 800abd2:	e035      	b.n	800ac40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abdc:	d108      	bne.n	800abf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800abde:	897b      	ldrh	r3, [r7, #10]
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	461a      	mov	r2, r3
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800abec:	611a      	str	r2, [r3, #16]
 800abee:	e01b      	b.n	800ac28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800abf0:	897b      	ldrh	r3, [r7, #10]
 800abf2:	11db      	asrs	r3, r3, #7
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	f003 0306 	and.w	r3, r3, #6
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	f063 030f 	orn	r3, r3, #15
 800ac00:	b2da      	uxtb	r2, r3
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	490e      	ldr	r1, [pc, #56]	; (800ac48 <I2C_MasterRequestWrite+0xfc>)
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f000 fa16 	bl	800b040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e010      	b.n	800ac40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ac1e:	897b      	ldrh	r3, [r7, #10]
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	4907      	ldr	r1, [pc, #28]	; (800ac4c <I2C_MasterRequestWrite+0x100>)
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f000 fa06 	bl	800b040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e000      	b.n	800ac40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3718      	adds	r7, #24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	00010008 	.word	0x00010008
 800ac4c:	00010002 	.word	0x00010002

0800ac50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b088      	sub	sp, #32
 800ac54:	af02      	add	r7, sp, #8
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	4608      	mov	r0, r1
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	4603      	mov	r3, r0
 800ac60:	817b      	strh	r3, [r7, #10]
 800ac62:	460b      	mov	r3, r1
 800ac64:	813b      	strh	r3, [r7, #8]
 800ac66:	4613      	mov	r3, r2
 800ac68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f000 f960 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00d      	beq.n	800acae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aca0:	d103      	bne.n	800acaa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aca8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e05f      	b.n	800ad6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800acae:	897b      	ldrh	r3, [r7, #10]
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	461a      	mov	r2, r3
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800acbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800acbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc0:	6a3a      	ldr	r2, [r7, #32]
 800acc2:	492d      	ldr	r1, [pc, #180]	; (800ad78 <I2C_RequestMemoryWrite+0x128>)
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f000 f9bb 	bl	800b040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d001      	beq.n	800acd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e04c      	b.n	800ad6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800acd4:	2300      	movs	r3, #0
 800acd6:	617b      	str	r3, [r7, #20]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	617b      	str	r3, [r7, #20]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	617b      	str	r3, [r7, #20]
 800ace8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acec:	6a39      	ldr	r1, [r7, #32]
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f000 fa46 	bl	800b180 <I2C_WaitOnTXEFlagUntilTimeout>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00d      	beq.n	800ad16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	d107      	bne.n	800ad12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e02b      	b.n	800ad6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad16:	88fb      	ldrh	r3, [r7, #6]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d105      	bne.n	800ad28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad1c:	893b      	ldrh	r3, [r7, #8]
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	611a      	str	r2, [r3, #16]
 800ad26:	e021      	b.n	800ad6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ad28:	893b      	ldrh	r3, [r7, #8]
 800ad2a:	0a1b      	lsrs	r3, r3, #8
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	b2da      	uxtb	r2, r3
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad38:	6a39      	ldr	r1, [r7, #32]
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f000 fa20 	bl	800b180 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00d      	beq.n	800ad62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4a:	2b04      	cmp	r3, #4
 800ad4c:	d107      	bne.n	800ad5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e005      	b.n	800ad6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad62:	893b      	ldrh	r3, [r7, #8]
 800ad64:	b2da      	uxtb	r2, r3
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3718      	adds	r7, #24
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	00010002 	.word	0x00010002

0800ad7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b088      	sub	sp, #32
 800ad80:	af02      	add	r7, sp, #8
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	4608      	mov	r0, r1
 800ad86:	4611      	mov	r1, r2
 800ad88:	461a      	mov	r2, r3
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	817b      	strh	r3, [r7, #10]
 800ad8e:	460b      	mov	r3, r1
 800ad90:	813b      	strh	r3, [r7, #8]
 800ad92:	4613      	mov	r3, r2
 800ad94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ada4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800adb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	6a3b      	ldr	r3, [r7, #32]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f000 f8c2 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00d      	beq.n	800adea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800addc:	d103      	bne.n	800ade6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ade4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ade6:	2303      	movs	r3, #3
 800ade8:	e0aa      	b.n	800af40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800adea:	897b      	ldrh	r3, [r7, #10]
 800adec:	b2db      	uxtb	r3, r3
 800adee:	461a      	mov	r2, r3
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800adf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	6a3a      	ldr	r2, [r7, #32]
 800adfe:	4952      	ldr	r1, [pc, #328]	; (800af48 <I2C_RequestMemoryRead+0x1cc>)
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f000 f91d 	bl	800b040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e097      	b.n	800af40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae10:	2300      	movs	r3, #0
 800ae12:	617b      	str	r3, [r7, #20]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	617b      	str	r3, [r7, #20]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	617b      	str	r3, [r7, #20]
 800ae24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae28:	6a39      	ldr	r1, [r7, #32]
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f000 f9a8 	bl	800b180 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00d      	beq.n	800ae52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3a:	2b04      	cmp	r3, #4
 800ae3c:	d107      	bne.n	800ae4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e076      	b.n	800af40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae52:	88fb      	ldrh	r3, [r7, #6]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d105      	bne.n	800ae64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae58:	893b      	ldrh	r3, [r7, #8]
 800ae5a:	b2da      	uxtb	r2, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	611a      	str	r2, [r3, #16]
 800ae62:	e021      	b.n	800aea8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ae64:	893b      	ldrh	r3, [r7, #8]
 800ae66:	0a1b      	lsrs	r3, r3, #8
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae74:	6a39      	ldr	r1, [r7, #32]
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f000 f982 	bl	800b180 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00d      	beq.n	800ae9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	d107      	bne.n	800ae9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e050      	b.n	800af40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae9e:	893b      	ldrh	r3, [r7, #8]
 800aea0:	b2da      	uxtb	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeaa:	6a39      	ldr	r1, [r7, #32]
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f000 f967 	bl	800b180 <I2C_WaitOnTXEFlagUntilTimeout>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00d      	beq.n	800aed4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebc:	2b04      	cmp	r3, #4
 800aebe:	d107      	bne.n	800aed0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aece:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	e035      	b.n	800af40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aee2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	9300      	str	r3, [sp, #0]
 800aee8:	6a3b      	ldr	r3, [r7, #32]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f000 f82b 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00d      	beq.n	800af18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af0a:	d103      	bne.n	800af14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800af14:	2303      	movs	r3, #3
 800af16:	e013      	b.n	800af40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800af18:	897b      	ldrh	r3, [r7, #10]
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	f043 0301 	orr.w	r3, r3, #1
 800af20:	b2da      	uxtb	r2, r3
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	6a3a      	ldr	r2, [r7, #32]
 800af2c:	4906      	ldr	r1, [pc, #24]	; (800af48 <I2C_RequestMemoryRead+0x1cc>)
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f000 f886 	bl	800b040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	d001      	beq.n	800af3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	e000      	b.n	800af40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	00010002 	.word	0x00010002

0800af4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	603b      	str	r3, [r7, #0]
 800af58:	4613      	mov	r3, r2
 800af5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af5c:	e048      	b.n	800aff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af64:	d044      	beq.n	800aff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af66:	f7fe f9e3 	bl	8009330 <HAL_GetTick>
 800af6a:	4602      	mov	r2, r0
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	683a      	ldr	r2, [r7, #0]
 800af72:	429a      	cmp	r2, r3
 800af74:	d302      	bcc.n	800af7c <I2C_WaitOnFlagUntilTimeout+0x30>
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d139      	bne.n	800aff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	0c1b      	lsrs	r3, r3, #16
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b01      	cmp	r3, #1
 800af84:	d10d      	bne.n	800afa2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	695b      	ldr	r3, [r3, #20]
 800af8c:	43da      	mvns	r2, r3
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	4013      	ands	r3, r2
 800af92:	b29b      	uxth	r3, r3
 800af94:	2b00      	cmp	r3, #0
 800af96:	bf0c      	ite	eq
 800af98:	2301      	moveq	r3, #1
 800af9a:	2300      	movne	r3, #0
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	461a      	mov	r2, r3
 800afa0:	e00c      	b.n	800afbc <I2C_WaitOnFlagUntilTimeout+0x70>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	43da      	mvns	r2, r3
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	4013      	ands	r3, r2
 800afae:	b29b      	uxth	r3, r3
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	bf0c      	ite	eq
 800afb4:	2301      	moveq	r3, #1
 800afb6:	2300      	movne	r3, #0
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	461a      	mov	r2, r3
 800afbc:	79fb      	ldrb	r3, [r7, #7]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d116      	bne.n	800aff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2220      	movs	r2, #32
 800afcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afdc:	f043 0220 	orr.w	r2, r3, #32
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e023      	b.n	800b038 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	0c1b      	lsrs	r3, r3, #16
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d10d      	bne.n	800b016 <I2C_WaitOnFlagUntilTimeout+0xca>
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	43da      	mvns	r2, r3
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	4013      	ands	r3, r2
 800b006:	b29b      	uxth	r3, r3
 800b008:	2b00      	cmp	r3, #0
 800b00a:	bf0c      	ite	eq
 800b00c:	2301      	moveq	r3, #1
 800b00e:	2300      	movne	r3, #0
 800b010:	b2db      	uxtb	r3, r3
 800b012:	461a      	mov	r2, r3
 800b014:	e00c      	b.n	800b030 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	699b      	ldr	r3, [r3, #24]
 800b01c:	43da      	mvns	r2, r3
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	4013      	ands	r3, r2
 800b022:	b29b      	uxth	r3, r3
 800b024:	2b00      	cmp	r3, #0
 800b026:	bf0c      	ite	eq
 800b028:	2301      	moveq	r3, #1
 800b02a:	2300      	movne	r3, #0
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	461a      	mov	r2, r3
 800b030:	79fb      	ldrb	r3, [r7, #7]
 800b032:	429a      	cmp	r2, r3
 800b034:	d093      	beq.n	800af5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
 800b04c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b04e:	e071      	b.n	800b134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b05a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b05e:	d123      	bne.n	800b0a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b06e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2200      	movs	r2, #0
 800b07e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2220      	movs	r2, #32
 800b084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b094:	f043 0204 	orr.w	r2, r3, #4
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e067      	b.n	800b178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ae:	d041      	beq.n	800b134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0b0:	f7fe f93e 	bl	8009330 <HAL_GetTick>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d302      	bcc.n	800b0c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d136      	bne.n	800b134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	0c1b      	lsrs	r3, r3, #16
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d10c      	bne.n	800b0ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	43da      	mvns	r2, r3
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	4013      	ands	r3, r2
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	bf14      	ite	ne
 800b0e2:	2301      	movne	r3, #1
 800b0e4:	2300      	moveq	r3, #0
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	e00b      	b.n	800b102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	699b      	ldr	r3, [r3, #24]
 800b0f0:	43da      	mvns	r2, r3
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	bf14      	ite	ne
 800b0fc:	2301      	movne	r3, #1
 800b0fe:	2300      	moveq	r3, #0
 800b100:	b2db      	uxtb	r3, r3
 800b102:	2b00      	cmp	r3, #0
 800b104:	d016      	beq.n	800b134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2200      	movs	r2, #0
 800b10a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2220      	movs	r2, #32
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b120:	f043 0220 	orr.w	r2, r3, #32
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	e021      	b.n	800b178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	0c1b      	lsrs	r3, r3, #16
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d10c      	bne.n	800b158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	695b      	ldr	r3, [r3, #20]
 800b144:	43da      	mvns	r2, r3
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	4013      	ands	r3, r2
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	bf14      	ite	ne
 800b150:	2301      	movne	r3, #1
 800b152:	2300      	moveq	r3, #0
 800b154:	b2db      	uxtb	r3, r3
 800b156:	e00b      	b.n	800b170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	699b      	ldr	r3, [r3, #24]
 800b15e:	43da      	mvns	r2, r3
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	4013      	ands	r3, r2
 800b164:	b29b      	uxth	r3, r3
 800b166:	2b00      	cmp	r3, #0
 800b168:	bf14      	ite	ne
 800b16a:	2301      	movne	r3, #1
 800b16c:	2300      	moveq	r3, #0
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	2b00      	cmp	r3, #0
 800b172:	f47f af6d 	bne.w	800b050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b18c:	e034      	b.n	800b1f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f000 f8e3 	bl	800b35a <I2C_IsAcknowledgeFailed>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d001      	beq.n	800b19e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b19a:	2301      	movs	r3, #1
 800b19c:	e034      	b.n	800b208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a4:	d028      	beq.n	800b1f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1a6:	f7fe f8c3 	bl	8009330 <HAL_GetTick>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d302      	bcc.n	800b1bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d11d      	bne.n	800b1f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1c6:	2b80      	cmp	r3, #128	; 0x80
 800b1c8:	d016      	beq.n	800b1f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2220      	movs	r2, #32
 800b1d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e4:	f043 0220 	orr.w	r2, r3, #32
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e007      	b.n	800b208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b202:	2b80      	cmp	r3, #128	; 0x80
 800b204:	d1c3      	bne.n	800b18e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b21c:	e034      	b.n	800b288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f000 f89b 	bl	800b35a <I2C_IsAcknowledgeFailed>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	e034      	b.n	800b298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b234:	d028      	beq.n	800b288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b236:	f7fe f87b 	bl	8009330 <HAL_GetTick>
 800b23a:	4602      	mov	r2, r0
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	1ad3      	subs	r3, r2, r3
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	429a      	cmp	r2, r3
 800b244:	d302      	bcc.n	800b24c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d11d      	bne.n	800b288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	f003 0304 	and.w	r3, r3, #4
 800b256:	2b04      	cmp	r3, #4
 800b258:	d016      	beq.n	800b288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2200      	movs	r2, #0
 800b25e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2220      	movs	r2, #32
 800b264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b274:	f043 0220 	orr.w	r2, r3, #32
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	e007      	b.n	800b298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	695b      	ldr	r3, [r3, #20]
 800b28e:	f003 0304 	and.w	r3, r3, #4
 800b292:	2b04      	cmp	r3, #4
 800b294:	d1c3      	bne.n	800b21e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b2ac:	e049      	b.n	800b342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	695b      	ldr	r3, [r3, #20]
 800b2b4:	f003 0310 	and.w	r3, r3, #16
 800b2b8:	2b10      	cmp	r3, #16
 800b2ba:	d119      	bne.n	800b2f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f06f 0210 	mvn.w	r2, #16
 800b2c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2220      	movs	r2, #32
 800b2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e030      	b.n	800b352 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2f0:	f7fe f81e 	bl	8009330 <HAL_GetTick>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d302      	bcc.n	800b306 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d11d      	bne.n	800b342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	695b      	ldr	r3, [r3, #20]
 800b30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b310:	2b40      	cmp	r3, #64	; 0x40
 800b312:	d016      	beq.n	800b342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2220      	movs	r2, #32
 800b31e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2200      	movs	r2, #0
 800b326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32e:	f043 0220 	orr.w	r2, r3, #32
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	e007      	b.n	800b352 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	695b      	ldr	r3, [r3, #20]
 800b348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b34c:	2b40      	cmp	r3, #64	; 0x40
 800b34e:	d1ae      	bne.n	800b2ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	695b      	ldr	r3, [r3, #20]
 800b368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b36c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b370:	d11b      	bne.n	800b3aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b37a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2220      	movs	r2, #32
 800b386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b396:	f043 0204 	orr.w	r2, r3, #4
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e000      	b.n	800b3ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bc80      	pop	{r7}
 800b3b4:	4770      	bx	lr
	...

0800b3b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e272      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 0301 	and.w	r3, r3, #1
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f000 8087 	beq.w	800b4e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b3d8:	4b92      	ldr	r3, [pc, #584]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	f003 030c 	and.w	r3, r3, #12
 800b3e0:	2b04      	cmp	r3, #4
 800b3e2:	d00c      	beq.n	800b3fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b3e4:	4b8f      	ldr	r3, [pc, #572]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	f003 030c 	and.w	r3, r3, #12
 800b3ec:	2b08      	cmp	r3, #8
 800b3ee:	d112      	bne.n	800b416 <HAL_RCC_OscConfig+0x5e>
 800b3f0:	4b8c      	ldr	r3, [pc, #560]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3fc:	d10b      	bne.n	800b416 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3fe:	4b89      	ldr	r3, [pc, #548]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b406:	2b00      	cmp	r3, #0
 800b408:	d06c      	beq.n	800b4e4 <HAL_RCC_OscConfig+0x12c>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d168      	bne.n	800b4e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	e24c      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b41e:	d106      	bne.n	800b42e <HAL_RCC_OscConfig+0x76>
 800b420:	4b80      	ldr	r3, [pc, #512]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a7f      	ldr	r2, [pc, #508]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b42a:	6013      	str	r3, [r2, #0]
 800b42c:	e02e      	b.n	800b48c <HAL_RCC_OscConfig+0xd4>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10c      	bne.n	800b450 <HAL_RCC_OscConfig+0x98>
 800b436:	4b7b      	ldr	r3, [pc, #492]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a7a      	ldr	r2, [pc, #488]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b43c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b440:	6013      	str	r3, [r2, #0]
 800b442:	4b78      	ldr	r3, [pc, #480]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a77      	ldr	r2, [pc, #476]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b44c:	6013      	str	r3, [r2, #0]
 800b44e:	e01d      	b.n	800b48c <HAL_RCC_OscConfig+0xd4>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b458:	d10c      	bne.n	800b474 <HAL_RCC_OscConfig+0xbc>
 800b45a:	4b72      	ldr	r3, [pc, #456]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a71      	ldr	r2, [pc, #452]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b464:	6013      	str	r3, [r2, #0]
 800b466:	4b6f      	ldr	r3, [pc, #444]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a6e      	ldr	r2, [pc, #440]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b46c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b470:	6013      	str	r3, [r2, #0]
 800b472:	e00b      	b.n	800b48c <HAL_RCC_OscConfig+0xd4>
 800b474:	4b6b      	ldr	r3, [pc, #428]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a6a      	ldr	r2, [pc, #424]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b47a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b47e:	6013      	str	r3, [r2, #0]
 800b480:	4b68      	ldr	r3, [pc, #416]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a67      	ldr	r2, [pc, #412]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b48a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d013      	beq.n	800b4bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b494:	f7fd ff4c 	bl	8009330 <HAL_GetTick>
 800b498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b49a:	e008      	b.n	800b4ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b49c:	f7fd ff48 	bl	8009330 <HAL_GetTick>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	2b64      	cmp	r3, #100	; 0x64
 800b4a8:	d901      	bls.n	800b4ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	e200      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4ae:	4b5d      	ldr	r3, [pc, #372]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d0f0      	beq.n	800b49c <HAL_RCC_OscConfig+0xe4>
 800b4ba:	e014      	b.n	800b4e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4bc:	f7fd ff38 	bl	8009330 <HAL_GetTick>
 800b4c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b4c2:	e008      	b.n	800b4d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4c4:	f7fd ff34 	bl	8009330 <HAL_GetTick>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	2b64      	cmp	r3, #100	; 0x64
 800b4d0:	d901      	bls.n	800b4d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	e1ec      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b4d6:	4b53      	ldr	r3, [pc, #332]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1f0      	bne.n	800b4c4 <HAL_RCC_OscConfig+0x10c>
 800b4e2:	e000      	b.n	800b4e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 0302 	and.w	r3, r3, #2
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d063      	beq.n	800b5ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b4f2:	4b4c      	ldr	r3, [pc, #304]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	f003 030c 	and.w	r3, r3, #12
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00b      	beq.n	800b516 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b4fe:	4b49      	ldr	r3, [pc, #292]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	f003 030c 	and.w	r3, r3, #12
 800b506:	2b08      	cmp	r3, #8
 800b508:	d11c      	bne.n	800b544 <HAL_RCC_OscConfig+0x18c>
 800b50a:	4b46      	ldr	r3, [pc, #280]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b512:	2b00      	cmp	r3, #0
 800b514:	d116      	bne.n	800b544 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b516:	4b43      	ldr	r3, [pc, #268]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f003 0302 	and.w	r3, r3, #2
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d005      	beq.n	800b52e <HAL_RCC_OscConfig+0x176>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d001      	beq.n	800b52e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e1c0      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b52e:	4b3d      	ldr	r3, [pc, #244]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	00db      	lsls	r3, r3, #3
 800b53c:	4939      	ldr	r1, [pc, #228]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b53e:	4313      	orrs	r3, r2
 800b540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b542:	e03a      	b.n	800b5ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d020      	beq.n	800b58e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b54c:	4b36      	ldr	r3, [pc, #216]	; (800b628 <HAL_RCC_OscConfig+0x270>)
 800b54e:	2201      	movs	r2, #1
 800b550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b552:	f7fd feed 	bl	8009330 <HAL_GetTick>
 800b556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b558:	e008      	b.n	800b56c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b55a:	f7fd fee9 	bl	8009330 <HAL_GetTick>
 800b55e:	4602      	mov	r2, r0
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	1ad3      	subs	r3, r2, r3
 800b564:	2b02      	cmp	r3, #2
 800b566:	d901      	bls.n	800b56c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b568:	2303      	movs	r3, #3
 800b56a:	e1a1      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b56c:	4b2d      	ldr	r3, [pc, #180]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 0302 	and.w	r3, r3, #2
 800b574:	2b00      	cmp	r3, #0
 800b576:	d0f0      	beq.n	800b55a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b578:	4b2a      	ldr	r3, [pc, #168]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	695b      	ldr	r3, [r3, #20]
 800b584:	00db      	lsls	r3, r3, #3
 800b586:	4927      	ldr	r1, [pc, #156]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b588:	4313      	orrs	r3, r2
 800b58a:	600b      	str	r3, [r1, #0]
 800b58c:	e015      	b.n	800b5ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b58e:	4b26      	ldr	r3, [pc, #152]	; (800b628 <HAL_RCC_OscConfig+0x270>)
 800b590:	2200      	movs	r2, #0
 800b592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b594:	f7fd fecc 	bl	8009330 <HAL_GetTick>
 800b598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b59a:	e008      	b.n	800b5ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b59c:	f7fd fec8 	bl	8009330 <HAL_GetTick>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	d901      	bls.n	800b5ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e180      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b5ae:	4b1d      	ldr	r3, [pc, #116]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 0302 	and.w	r3, r3, #2
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1f0      	bne.n	800b59c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f003 0308 	and.w	r3, r3, #8
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d03a      	beq.n	800b63c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	699b      	ldr	r3, [r3, #24]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d019      	beq.n	800b602 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b5ce:	4b17      	ldr	r3, [pc, #92]	; (800b62c <HAL_RCC_OscConfig+0x274>)
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b5d4:	f7fd feac 	bl	8009330 <HAL_GetTick>
 800b5d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b5da:	e008      	b.n	800b5ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b5dc:	f7fd fea8 	bl	8009330 <HAL_GetTick>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	1ad3      	subs	r3, r2, r3
 800b5e6:	2b02      	cmp	r3, #2
 800b5e8:	d901      	bls.n	800b5ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b5ea:	2303      	movs	r3, #3
 800b5ec:	e160      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b5ee:	4b0d      	ldr	r3, [pc, #52]	; (800b624 <HAL_RCC_OscConfig+0x26c>)
 800b5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f2:	f003 0302 	and.w	r3, r3, #2
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d0f0      	beq.n	800b5dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b5fa:	2001      	movs	r0, #1
 800b5fc:	f000 face 	bl	800bb9c <RCC_Delay>
 800b600:	e01c      	b.n	800b63c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b602:	4b0a      	ldr	r3, [pc, #40]	; (800b62c <HAL_RCC_OscConfig+0x274>)
 800b604:	2200      	movs	r2, #0
 800b606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b608:	f7fd fe92 	bl	8009330 <HAL_GetTick>
 800b60c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b60e:	e00f      	b.n	800b630 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b610:	f7fd fe8e 	bl	8009330 <HAL_GetTick>
 800b614:	4602      	mov	r2, r0
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d908      	bls.n	800b630 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b61e:	2303      	movs	r3, #3
 800b620:	e146      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
 800b622:	bf00      	nop
 800b624:	40021000 	.word	0x40021000
 800b628:	42420000 	.word	0x42420000
 800b62c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b630:	4b92      	ldr	r3, [pc, #584]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b634:	f003 0302 	and.w	r3, r3, #2
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1e9      	bne.n	800b610 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 0304 	and.w	r3, r3, #4
 800b644:	2b00      	cmp	r3, #0
 800b646:	f000 80a6 	beq.w	800b796 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b64a:	2300      	movs	r3, #0
 800b64c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b64e:	4b8b      	ldr	r3, [pc, #556]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b650:	69db      	ldr	r3, [r3, #28]
 800b652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10d      	bne.n	800b676 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b65a:	4b88      	ldr	r3, [pc, #544]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	4a87      	ldr	r2, [pc, #540]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b664:	61d3      	str	r3, [r2, #28]
 800b666:	4b85      	ldr	r3, [pc, #532]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b668:	69db      	ldr	r3, [r3, #28]
 800b66a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b66e:	60bb      	str	r3, [r7, #8]
 800b670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b672:	2301      	movs	r3, #1
 800b674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b676:	4b82      	ldr	r3, [pc, #520]	; (800b880 <HAL_RCC_OscConfig+0x4c8>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d118      	bne.n	800b6b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b682:	4b7f      	ldr	r3, [pc, #508]	; (800b880 <HAL_RCC_OscConfig+0x4c8>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a7e      	ldr	r2, [pc, #504]	; (800b880 <HAL_RCC_OscConfig+0x4c8>)
 800b688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b68c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b68e:	f7fd fe4f 	bl	8009330 <HAL_GetTick>
 800b692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b694:	e008      	b.n	800b6a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b696:	f7fd fe4b 	bl	8009330 <HAL_GetTick>
 800b69a:	4602      	mov	r2, r0
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	2b64      	cmp	r3, #100	; 0x64
 800b6a2:	d901      	bls.n	800b6a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b6a4:	2303      	movs	r3, #3
 800b6a6:	e103      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6a8:	4b75      	ldr	r3, [pc, #468]	; (800b880 <HAL_RCC_OscConfig+0x4c8>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d0f0      	beq.n	800b696 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d106      	bne.n	800b6ca <HAL_RCC_OscConfig+0x312>
 800b6bc:	4b6f      	ldr	r3, [pc, #444]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b6be:	6a1b      	ldr	r3, [r3, #32]
 800b6c0:	4a6e      	ldr	r2, [pc, #440]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b6c2:	f043 0301 	orr.w	r3, r3, #1
 800b6c6:	6213      	str	r3, [r2, #32]
 800b6c8:	e02d      	b.n	800b726 <HAL_RCC_OscConfig+0x36e>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10c      	bne.n	800b6ec <HAL_RCC_OscConfig+0x334>
 800b6d2:	4b6a      	ldr	r3, [pc, #424]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b6d4:	6a1b      	ldr	r3, [r3, #32]
 800b6d6:	4a69      	ldr	r2, [pc, #420]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b6d8:	f023 0301 	bic.w	r3, r3, #1
 800b6dc:	6213      	str	r3, [r2, #32]
 800b6de:	4b67      	ldr	r3, [pc, #412]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b6e0:	6a1b      	ldr	r3, [r3, #32]
 800b6e2:	4a66      	ldr	r2, [pc, #408]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b6e4:	f023 0304 	bic.w	r3, r3, #4
 800b6e8:	6213      	str	r3, [r2, #32]
 800b6ea:	e01c      	b.n	800b726 <HAL_RCC_OscConfig+0x36e>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	2b05      	cmp	r3, #5
 800b6f2:	d10c      	bne.n	800b70e <HAL_RCC_OscConfig+0x356>
 800b6f4:	4b61      	ldr	r3, [pc, #388]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b6f6:	6a1b      	ldr	r3, [r3, #32]
 800b6f8:	4a60      	ldr	r2, [pc, #384]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b6fa:	f043 0304 	orr.w	r3, r3, #4
 800b6fe:	6213      	str	r3, [r2, #32]
 800b700:	4b5e      	ldr	r3, [pc, #376]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b702:	6a1b      	ldr	r3, [r3, #32]
 800b704:	4a5d      	ldr	r2, [pc, #372]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b706:	f043 0301 	orr.w	r3, r3, #1
 800b70a:	6213      	str	r3, [r2, #32]
 800b70c:	e00b      	b.n	800b726 <HAL_RCC_OscConfig+0x36e>
 800b70e:	4b5b      	ldr	r3, [pc, #364]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	4a5a      	ldr	r2, [pc, #360]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b714:	f023 0301 	bic.w	r3, r3, #1
 800b718:	6213      	str	r3, [r2, #32]
 800b71a:	4b58      	ldr	r3, [pc, #352]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	4a57      	ldr	r2, [pc, #348]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b720:	f023 0304 	bic.w	r3, r3, #4
 800b724:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d015      	beq.n	800b75a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b72e:	f7fd fdff 	bl	8009330 <HAL_GetTick>
 800b732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b734:	e00a      	b.n	800b74c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b736:	f7fd fdfb 	bl	8009330 <HAL_GetTick>
 800b73a:	4602      	mov	r2, r0
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	f241 3288 	movw	r2, #5000	; 0x1388
 800b744:	4293      	cmp	r3, r2
 800b746:	d901      	bls.n	800b74c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b748:	2303      	movs	r3, #3
 800b74a:	e0b1      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b74c:	4b4b      	ldr	r3, [pc, #300]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b74e:	6a1b      	ldr	r3, [r3, #32]
 800b750:	f003 0302 	and.w	r3, r3, #2
 800b754:	2b00      	cmp	r3, #0
 800b756:	d0ee      	beq.n	800b736 <HAL_RCC_OscConfig+0x37e>
 800b758:	e014      	b.n	800b784 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b75a:	f7fd fde9 	bl	8009330 <HAL_GetTick>
 800b75e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b760:	e00a      	b.n	800b778 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b762:	f7fd fde5 	bl	8009330 <HAL_GetTick>
 800b766:	4602      	mov	r2, r0
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b770:	4293      	cmp	r3, r2
 800b772:	d901      	bls.n	800b778 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b774:	2303      	movs	r3, #3
 800b776:	e09b      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b778:	4b40      	ldr	r3, [pc, #256]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b77a:	6a1b      	ldr	r3, [r3, #32]
 800b77c:	f003 0302 	and.w	r3, r3, #2
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1ee      	bne.n	800b762 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b784:	7dfb      	ldrb	r3, [r7, #23]
 800b786:	2b01      	cmp	r3, #1
 800b788:	d105      	bne.n	800b796 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b78a:	4b3c      	ldr	r3, [pc, #240]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b78c:	69db      	ldr	r3, [r3, #28]
 800b78e:	4a3b      	ldr	r2, [pc, #236]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b794:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	69db      	ldr	r3, [r3, #28]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f000 8087 	beq.w	800b8ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b7a0:	4b36      	ldr	r3, [pc, #216]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	f003 030c 	and.w	r3, r3, #12
 800b7a8:	2b08      	cmp	r3, #8
 800b7aa:	d061      	beq.n	800b870 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	69db      	ldr	r3, [r3, #28]
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d146      	bne.n	800b842 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7b4:	4b33      	ldr	r3, [pc, #204]	; (800b884 <HAL_RCC_OscConfig+0x4cc>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7ba:	f7fd fdb9 	bl	8009330 <HAL_GetTick>
 800b7be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b7c0:	e008      	b.n	800b7d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7c2:	f7fd fdb5 	bl	8009330 <HAL_GetTick>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d901      	bls.n	800b7d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	e06d      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b7d4:	4b29      	ldr	r3, [pc, #164]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d1f0      	bne.n	800b7c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6a1b      	ldr	r3, [r3, #32]
 800b7e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e8:	d108      	bne.n	800b7fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b7ea:	4b24      	ldr	r3, [pc, #144]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	4921      	ldr	r1, [pc, #132]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b7fc:	4b1f      	ldr	r3, [pc, #124]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a19      	ldr	r1, [r3, #32]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80c:	430b      	orrs	r3, r1
 800b80e:	491b      	ldr	r1, [pc, #108]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b810:	4313      	orrs	r3, r2
 800b812:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b814:	4b1b      	ldr	r3, [pc, #108]	; (800b884 <HAL_RCC_OscConfig+0x4cc>)
 800b816:	2201      	movs	r2, #1
 800b818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b81a:	f7fd fd89 	bl	8009330 <HAL_GetTick>
 800b81e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b820:	e008      	b.n	800b834 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b822:	f7fd fd85 	bl	8009330 <HAL_GetTick>
 800b826:	4602      	mov	r2, r0
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d901      	bls.n	800b834 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b830:	2303      	movs	r3, #3
 800b832:	e03d      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b834:	4b11      	ldr	r3, [pc, #68]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d0f0      	beq.n	800b822 <HAL_RCC_OscConfig+0x46a>
 800b840:	e035      	b.n	800b8ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b842:	4b10      	ldr	r3, [pc, #64]	; (800b884 <HAL_RCC_OscConfig+0x4cc>)
 800b844:	2200      	movs	r2, #0
 800b846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b848:	f7fd fd72 	bl	8009330 <HAL_GetTick>
 800b84c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b84e:	e008      	b.n	800b862 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b850:	f7fd fd6e 	bl	8009330 <HAL_GetTick>
 800b854:	4602      	mov	r2, r0
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d901      	bls.n	800b862 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b85e:	2303      	movs	r3, #3
 800b860:	e026      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b862:	4b06      	ldr	r3, [pc, #24]	; (800b87c <HAL_RCC_OscConfig+0x4c4>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d1f0      	bne.n	800b850 <HAL_RCC_OscConfig+0x498>
 800b86e:	e01e      	b.n	800b8ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	69db      	ldr	r3, [r3, #28]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d107      	bne.n	800b888 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	e019      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
 800b87c:	40021000 	.word	0x40021000
 800b880:	40007000 	.word	0x40007000
 800b884:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b888:	4b0b      	ldr	r3, [pc, #44]	; (800b8b8 <HAL_RCC_OscConfig+0x500>)
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a1b      	ldr	r3, [r3, #32]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d106      	bne.n	800b8aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d001      	beq.n	800b8ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e000      	b.n	800b8b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3718      	adds	r7, #24
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	40021000 	.word	0x40021000

0800b8bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e0d0      	b.n	800ba72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b8d0:	4b6a      	ldr	r3, [pc, #424]	; (800ba7c <HAL_RCC_ClockConfig+0x1c0>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f003 0307 	and.w	r3, r3, #7
 800b8d8:	683a      	ldr	r2, [r7, #0]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d910      	bls.n	800b900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8de:	4b67      	ldr	r3, [pc, #412]	; (800ba7c <HAL_RCC_ClockConfig+0x1c0>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f023 0207 	bic.w	r2, r3, #7
 800b8e6:	4965      	ldr	r1, [pc, #404]	; (800ba7c <HAL_RCC_ClockConfig+0x1c0>)
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8ee:	4b63      	ldr	r3, [pc, #396]	; (800ba7c <HAL_RCC_ClockConfig+0x1c0>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 0307 	and.w	r3, r3, #7
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d001      	beq.n	800b900 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e0b8      	b.n	800ba72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 0302 	and.w	r3, r3, #2
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d020      	beq.n	800b94e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 0304 	and.w	r3, r3, #4
 800b914:	2b00      	cmp	r3, #0
 800b916:	d005      	beq.n	800b924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b918:	4b59      	ldr	r3, [pc, #356]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	4a58      	ldr	r2, [pc, #352]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800b91e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b922:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 0308 	and.w	r3, r3, #8
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d005      	beq.n	800b93c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b930:	4b53      	ldr	r3, [pc, #332]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	4a52      	ldr	r2, [pc, #328]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800b936:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b93a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b93c:	4b50      	ldr	r3, [pc, #320]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	494d      	ldr	r1, [pc, #308]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800b94a:	4313      	orrs	r3, r2
 800b94c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f003 0301 	and.w	r3, r3, #1
 800b956:	2b00      	cmp	r3, #0
 800b958:	d040      	beq.n	800b9dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d107      	bne.n	800b972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b962:	4b47      	ldr	r3, [pc, #284]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d115      	bne.n	800b99a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	e07f      	b.n	800ba72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	2b02      	cmp	r3, #2
 800b978:	d107      	bne.n	800b98a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b97a:	4b41      	ldr	r3, [pc, #260]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b982:	2b00      	cmp	r3, #0
 800b984:	d109      	bne.n	800b99a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	e073      	b.n	800ba72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b98a:	4b3d      	ldr	r3, [pc, #244]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f003 0302 	and.w	r3, r3, #2
 800b992:	2b00      	cmp	r3, #0
 800b994:	d101      	bne.n	800b99a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e06b      	b.n	800ba72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b99a:	4b39      	ldr	r3, [pc, #228]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	f023 0203 	bic.w	r2, r3, #3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	4936      	ldr	r1, [pc, #216]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b9ac:	f7fd fcc0 	bl	8009330 <HAL_GetTick>
 800b9b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b9b2:	e00a      	b.n	800b9ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b9b4:	f7fd fcbc 	bl	8009330 <HAL_GetTick>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d901      	bls.n	800b9ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b9c6:	2303      	movs	r3, #3
 800b9c8:	e053      	b.n	800ba72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b9ca:	4b2d      	ldr	r3, [pc, #180]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	f003 020c 	and.w	r2, r3, #12
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d1eb      	bne.n	800b9b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b9dc:	4b27      	ldr	r3, [pc, #156]	; (800ba7c <HAL_RCC_ClockConfig+0x1c0>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f003 0307 	and.w	r3, r3, #7
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d210      	bcs.n	800ba0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9ea:	4b24      	ldr	r3, [pc, #144]	; (800ba7c <HAL_RCC_ClockConfig+0x1c0>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f023 0207 	bic.w	r2, r3, #7
 800b9f2:	4922      	ldr	r1, [pc, #136]	; (800ba7c <HAL_RCC_ClockConfig+0x1c0>)
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9fa:	4b20      	ldr	r3, [pc, #128]	; (800ba7c <HAL_RCC_ClockConfig+0x1c0>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f003 0307 	and.w	r3, r3, #7
 800ba02:	683a      	ldr	r2, [r7, #0]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d001      	beq.n	800ba0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	e032      	b.n	800ba72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f003 0304 	and.w	r3, r3, #4
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d008      	beq.n	800ba2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ba18:	4b19      	ldr	r3, [pc, #100]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	4916      	ldr	r1, [pc, #88]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800ba26:	4313      	orrs	r3, r2
 800ba28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f003 0308 	and.w	r3, r3, #8
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d009      	beq.n	800ba4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ba36:	4b12      	ldr	r3, [pc, #72]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	00db      	lsls	r3, r3, #3
 800ba44:	490e      	ldr	r1, [pc, #56]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800ba46:	4313      	orrs	r3, r2
 800ba48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ba4a:	f000 f821 	bl	800ba90 <HAL_RCC_GetSysClockFreq>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	4b0b      	ldr	r3, [pc, #44]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	091b      	lsrs	r3, r3, #4
 800ba56:	f003 030f 	and.w	r3, r3, #15
 800ba5a:	490a      	ldr	r1, [pc, #40]	; (800ba84 <HAL_RCC_ClockConfig+0x1c8>)
 800ba5c:	5ccb      	ldrb	r3, [r1, r3]
 800ba5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba62:	4a09      	ldr	r2, [pc, #36]	; (800ba88 <HAL_RCC_ClockConfig+0x1cc>)
 800ba64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ba66:	4b09      	ldr	r3, [pc, #36]	; (800ba8c <HAL_RCC_ClockConfig+0x1d0>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fd fc1e 	bl	80092ac <HAL_InitTick>

  return HAL_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	40022000 	.word	0x40022000
 800ba80:	40021000 	.word	0x40021000
 800ba84:	0800e86c 	.word	0x0800e86c
 800ba88:	200009b8 	.word	0x200009b8
 800ba8c:	200009bc 	.word	0x200009bc

0800ba90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b087      	sub	sp, #28
 800ba94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ba96:	2300      	movs	r3, #0
 800ba98:	60fb      	str	r3, [r7, #12]
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	60bb      	str	r3, [r7, #8]
 800ba9e:	2300      	movs	r3, #0
 800baa0:	617b      	str	r3, [r7, #20]
 800baa2:	2300      	movs	r3, #0
 800baa4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800baa6:	2300      	movs	r3, #0
 800baa8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800baaa:	4b1e      	ldr	r3, [pc, #120]	; (800bb24 <HAL_RCC_GetSysClockFreq+0x94>)
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f003 030c 	and.w	r3, r3, #12
 800bab6:	2b04      	cmp	r3, #4
 800bab8:	d002      	beq.n	800bac0 <HAL_RCC_GetSysClockFreq+0x30>
 800baba:	2b08      	cmp	r3, #8
 800babc:	d003      	beq.n	800bac6 <HAL_RCC_GetSysClockFreq+0x36>
 800babe:	e027      	b.n	800bb10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bac0:	4b19      	ldr	r3, [pc, #100]	; (800bb28 <HAL_RCC_GetSysClockFreq+0x98>)
 800bac2:	613b      	str	r3, [r7, #16]
      break;
 800bac4:	e027      	b.n	800bb16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	0c9b      	lsrs	r3, r3, #18
 800baca:	f003 030f 	and.w	r3, r3, #15
 800bace:	4a17      	ldr	r2, [pc, #92]	; (800bb2c <HAL_RCC_GetSysClockFreq+0x9c>)
 800bad0:	5cd3      	ldrb	r3, [r2, r3]
 800bad2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bada:	2b00      	cmp	r3, #0
 800badc:	d010      	beq.n	800bb00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bade:	4b11      	ldr	r3, [pc, #68]	; (800bb24 <HAL_RCC_GetSysClockFreq+0x94>)
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	0c5b      	lsrs	r3, r3, #17
 800bae4:	f003 0301 	and.w	r3, r3, #1
 800bae8:	4a11      	ldr	r2, [pc, #68]	; (800bb30 <HAL_RCC_GetSysClockFreq+0xa0>)
 800baea:	5cd3      	ldrb	r3, [r2, r3]
 800baec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a0d      	ldr	r2, [pc, #52]	; (800bb28 <HAL_RCC_GetSysClockFreq+0x98>)
 800baf2:	fb03 f202 	mul.w	r2, r3, r2
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bafc:	617b      	str	r3, [r7, #20]
 800bafe:	e004      	b.n	800bb0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a0c      	ldr	r2, [pc, #48]	; (800bb34 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bb04:	fb02 f303 	mul.w	r3, r2, r3
 800bb08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	613b      	str	r3, [r7, #16]
      break;
 800bb0e:	e002      	b.n	800bb16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bb10:	4b05      	ldr	r3, [pc, #20]	; (800bb28 <HAL_RCC_GetSysClockFreq+0x98>)
 800bb12:	613b      	str	r3, [r7, #16]
      break;
 800bb14:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bb16:	693b      	ldr	r3, [r7, #16]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	371c      	adds	r7, #28
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bc80      	pop	{r7}
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	40021000 	.word	0x40021000
 800bb28:	007a1200 	.word	0x007a1200
 800bb2c:	0800e884 	.word	0x0800e884
 800bb30:	0800e894 	.word	0x0800e894
 800bb34:	003d0900 	.word	0x003d0900

0800bb38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bb3c:	4b02      	ldr	r3, [pc, #8]	; (800bb48 <HAL_RCC_GetHCLKFreq+0x10>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bc80      	pop	{r7}
 800bb46:	4770      	bx	lr
 800bb48:	200009b8 	.word	0x200009b8

0800bb4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bb50:	f7ff fff2 	bl	800bb38 <HAL_RCC_GetHCLKFreq>
 800bb54:	4602      	mov	r2, r0
 800bb56:	4b05      	ldr	r3, [pc, #20]	; (800bb6c <HAL_RCC_GetPCLK1Freq+0x20>)
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	0a1b      	lsrs	r3, r3, #8
 800bb5c:	f003 0307 	and.w	r3, r3, #7
 800bb60:	4903      	ldr	r1, [pc, #12]	; (800bb70 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bb62:	5ccb      	ldrb	r3, [r1, r3]
 800bb64:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	40021000 	.word	0x40021000
 800bb70:	0800e87c 	.word	0x0800e87c

0800bb74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bb78:	f7ff ffde 	bl	800bb38 <HAL_RCC_GetHCLKFreq>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	4b05      	ldr	r3, [pc, #20]	; (800bb94 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	0adb      	lsrs	r3, r3, #11
 800bb84:	f003 0307 	and.w	r3, r3, #7
 800bb88:	4903      	ldr	r1, [pc, #12]	; (800bb98 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bb8a:	5ccb      	ldrb	r3, [r1, r3]
 800bb8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	40021000 	.word	0x40021000
 800bb98:	0800e87c 	.word	0x0800e87c

0800bb9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bba4:	4b0a      	ldr	r3, [pc, #40]	; (800bbd0 <RCC_Delay+0x34>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a0a      	ldr	r2, [pc, #40]	; (800bbd4 <RCC_Delay+0x38>)
 800bbaa:	fba2 2303 	umull	r2, r3, r2, r3
 800bbae:	0a5b      	lsrs	r3, r3, #9
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	fb02 f303 	mul.w	r3, r2, r3
 800bbb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bbb8:	bf00      	nop
  }
  while (Delay --);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	1e5a      	subs	r2, r3, #1
 800bbbe:	60fa      	str	r2, [r7, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1f9      	bne.n	800bbb8 <RCC_Delay+0x1c>
}
 800bbc4:	bf00      	nop
 800bbc6:	bf00      	nop
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bc80      	pop	{r7}
 800bbce:	4770      	bx	lr
 800bbd0:	200009b8 	.word	0x200009b8
 800bbd4:	10624dd3 	.word	0x10624dd3

0800bbd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e041      	b.n	800bc6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d106      	bne.n	800bc04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7fd fa26 	bl	8009050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2202      	movs	r2, #2
 800bc08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3304      	adds	r3, #4
 800bc14:	4619      	mov	r1, r3
 800bc16:	4610      	mov	r0, r2
 800bc18:	f000 fa82 	bl	800c120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
	...

0800bc78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d001      	beq.n	800bc90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e044      	b.n	800bd1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2202      	movs	r2, #2
 800bc94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	68da      	ldr	r2, [r3, #12]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f042 0201 	orr.w	r2, r2, #1
 800bca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a1d      	ldr	r2, [pc, #116]	; (800bd24 <HAL_TIM_Base_Start_IT+0xac>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d018      	beq.n	800bce4 <HAL_TIM_Base_Start_IT+0x6c>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a1c      	ldr	r2, [pc, #112]	; (800bd28 <HAL_TIM_Base_Start_IT+0xb0>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d013      	beq.n	800bce4 <HAL_TIM_Base_Start_IT+0x6c>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcc4:	d00e      	beq.n	800bce4 <HAL_TIM_Base_Start_IT+0x6c>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a18      	ldr	r2, [pc, #96]	; (800bd2c <HAL_TIM_Base_Start_IT+0xb4>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d009      	beq.n	800bce4 <HAL_TIM_Base_Start_IT+0x6c>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a16      	ldr	r2, [pc, #88]	; (800bd30 <HAL_TIM_Base_Start_IT+0xb8>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d004      	beq.n	800bce4 <HAL_TIM_Base_Start_IT+0x6c>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a15      	ldr	r2, [pc, #84]	; (800bd34 <HAL_TIM_Base_Start_IT+0xbc>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d111      	bne.n	800bd08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	f003 0307 	and.w	r3, r3, #7
 800bcee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2b06      	cmp	r3, #6
 800bcf4:	d010      	beq.n	800bd18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f042 0201 	orr.w	r2, r2, #1
 800bd04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd06:	e007      	b.n	800bd18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f042 0201 	orr.w	r2, r2, #1
 800bd16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3714      	adds	r7, #20
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bc80      	pop	{r7}
 800bd22:	4770      	bx	lr
 800bd24:	40012c00 	.word	0x40012c00
 800bd28:	40013400 	.word	0x40013400
 800bd2c:	40000400 	.word	0x40000400
 800bd30:	40000800 	.word	0x40000800
 800bd34:	40000c00 	.word	0x40000c00

0800bd38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	691b      	ldr	r3, [r3, #16]
 800bd46:	f003 0302 	and.w	r3, r3, #2
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d122      	bne.n	800bd94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	f003 0302 	and.w	r3, r3, #2
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d11b      	bne.n	800bd94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f06f 0202 	mvn.w	r2, #2
 800bd64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	699b      	ldr	r3, [r3, #24]
 800bd72:	f003 0303 	and.w	r3, r3, #3
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d003      	beq.n	800bd82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 f9b4 	bl	800c0e8 <HAL_TIM_IC_CaptureCallback>
 800bd80:	e005      	b.n	800bd8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 f9a7 	bl	800c0d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 f9b6 	bl	800c0fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	f003 0304 	and.w	r3, r3, #4
 800bd9e:	2b04      	cmp	r3, #4
 800bda0:	d122      	bne.n	800bde8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	f003 0304 	and.w	r3, r3, #4
 800bdac:	2b04      	cmp	r3, #4
 800bdae:	d11b      	bne.n	800bde8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f06f 0204 	mvn.w	r2, #4
 800bdb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2202      	movs	r2, #2
 800bdbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	699b      	ldr	r3, [r3, #24]
 800bdc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d003      	beq.n	800bdd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 f98a 	bl	800c0e8 <HAL_TIM_IC_CaptureCallback>
 800bdd4:	e005      	b.n	800bde2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 f97d 	bl	800c0d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 f98c 	bl	800c0fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	691b      	ldr	r3, [r3, #16]
 800bdee:	f003 0308 	and.w	r3, r3, #8
 800bdf2:	2b08      	cmp	r3, #8
 800bdf4:	d122      	bne.n	800be3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	f003 0308 	and.w	r3, r3, #8
 800be00:	2b08      	cmp	r3, #8
 800be02:	d11b      	bne.n	800be3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f06f 0208 	mvn.w	r2, #8
 800be0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2204      	movs	r2, #4
 800be12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	69db      	ldr	r3, [r3, #28]
 800be1a:	f003 0303 	and.w	r3, r3, #3
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d003      	beq.n	800be2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 f960 	bl	800c0e8 <HAL_TIM_IC_CaptureCallback>
 800be28:	e005      	b.n	800be36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f953 	bl	800c0d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 f962 	bl	800c0fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	691b      	ldr	r3, [r3, #16]
 800be42:	f003 0310 	and.w	r3, r3, #16
 800be46:	2b10      	cmp	r3, #16
 800be48:	d122      	bne.n	800be90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	f003 0310 	and.w	r3, r3, #16
 800be54:	2b10      	cmp	r3, #16
 800be56:	d11b      	bne.n	800be90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f06f 0210 	mvn.w	r2, #16
 800be60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2208      	movs	r2, #8
 800be66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	69db      	ldr	r3, [r3, #28]
 800be6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be72:	2b00      	cmp	r3, #0
 800be74:	d003      	beq.n	800be7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f936 	bl	800c0e8 <HAL_TIM_IC_CaptureCallback>
 800be7c:	e005      	b.n	800be8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 f929 	bl	800c0d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 f938 	bl	800c0fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	f003 0301 	and.w	r3, r3, #1
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d10e      	bne.n	800bebc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	f003 0301 	and.w	r3, r3, #1
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d107      	bne.n	800bebc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f06f 0201 	mvn.w	r2, #1
 800beb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7fc fd32 	bl	8008920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bec6:	2b80      	cmp	r3, #128	; 0x80
 800bec8:	d10e      	bne.n	800bee8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bed4:	2b80      	cmp	r3, #128	; 0x80
 800bed6:	d107      	bne.n	800bee8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 faa1 	bl	800c42a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bef2:	2b40      	cmp	r3, #64	; 0x40
 800bef4:	d10e      	bne.n	800bf14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf00:	2b40      	cmp	r3, #64	; 0x40
 800bf02:	d107      	bne.n	800bf14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bf0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f8fc 	bl	800c10c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	691b      	ldr	r3, [r3, #16]
 800bf1a:	f003 0320 	and.w	r3, r3, #32
 800bf1e:	2b20      	cmp	r3, #32
 800bf20:	d10e      	bne.n	800bf40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	f003 0320 	and.w	r3, r3, #32
 800bf2c:	2b20      	cmp	r3, #32
 800bf2e:	d107      	bne.n	800bf40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f06f 0220 	mvn.w	r2, #32
 800bf38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fa6c 	bl	800c418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf40:	bf00      	nop
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf52:	2300      	movs	r3, #0
 800bf54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d101      	bne.n	800bf64 <HAL_TIM_ConfigClockSource+0x1c>
 800bf60:	2302      	movs	r3, #2
 800bf62:	e0b4      	b.n	800c0ce <HAL_TIM_ConfigClockSource+0x186>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2202      	movs	r2, #2
 800bf70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bf82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf9c:	d03e      	beq.n	800c01c <HAL_TIM_ConfigClockSource+0xd4>
 800bf9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfa2:	f200 8087 	bhi.w	800c0b4 <HAL_TIM_ConfigClockSource+0x16c>
 800bfa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfaa:	f000 8086 	beq.w	800c0ba <HAL_TIM_ConfigClockSource+0x172>
 800bfae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfb2:	d87f      	bhi.n	800c0b4 <HAL_TIM_ConfigClockSource+0x16c>
 800bfb4:	2b70      	cmp	r3, #112	; 0x70
 800bfb6:	d01a      	beq.n	800bfee <HAL_TIM_ConfigClockSource+0xa6>
 800bfb8:	2b70      	cmp	r3, #112	; 0x70
 800bfba:	d87b      	bhi.n	800c0b4 <HAL_TIM_ConfigClockSource+0x16c>
 800bfbc:	2b60      	cmp	r3, #96	; 0x60
 800bfbe:	d050      	beq.n	800c062 <HAL_TIM_ConfigClockSource+0x11a>
 800bfc0:	2b60      	cmp	r3, #96	; 0x60
 800bfc2:	d877      	bhi.n	800c0b4 <HAL_TIM_ConfigClockSource+0x16c>
 800bfc4:	2b50      	cmp	r3, #80	; 0x50
 800bfc6:	d03c      	beq.n	800c042 <HAL_TIM_ConfigClockSource+0xfa>
 800bfc8:	2b50      	cmp	r3, #80	; 0x50
 800bfca:	d873      	bhi.n	800c0b4 <HAL_TIM_ConfigClockSource+0x16c>
 800bfcc:	2b40      	cmp	r3, #64	; 0x40
 800bfce:	d058      	beq.n	800c082 <HAL_TIM_ConfigClockSource+0x13a>
 800bfd0:	2b40      	cmp	r3, #64	; 0x40
 800bfd2:	d86f      	bhi.n	800c0b4 <HAL_TIM_ConfigClockSource+0x16c>
 800bfd4:	2b30      	cmp	r3, #48	; 0x30
 800bfd6:	d064      	beq.n	800c0a2 <HAL_TIM_ConfigClockSource+0x15a>
 800bfd8:	2b30      	cmp	r3, #48	; 0x30
 800bfda:	d86b      	bhi.n	800c0b4 <HAL_TIM_ConfigClockSource+0x16c>
 800bfdc:	2b20      	cmp	r3, #32
 800bfde:	d060      	beq.n	800c0a2 <HAL_TIM_ConfigClockSource+0x15a>
 800bfe0:	2b20      	cmp	r3, #32
 800bfe2:	d867      	bhi.n	800c0b4 <HAL_TIM_ConfigClockSource+0x16c>
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d05c      	beq.n	800c0a2 <HAL_TIM_ConfigClockSource+0x15a>
 800bfe8:	2b10      	cmp	r3, #16
 800bfea:	d05a      	beq.n	800c0a2 <HAL_TIM_ConfigClockSource+0x15a>
 800bfec:	e062      	b.n	800c0b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bffe:	f000 f980 	bl	800c302 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c010:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	609a      	str	r2, [r3, #8]
      break;
 800c01a:	e04f      	b.n	800c0bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c02c:	f000 f969 	bl	800c302 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	689a      	ldr	r2, [r3, #8]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c03e:	609a      	str	r2, [r3, #8]
      break;
 800c040:	e03c      	b.n	800c0bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c04e:	461a      	mov	r2, r3
 800c050:	f000 f8e0 	bl	800c214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2150      	movs	r1, #80	; 0x50
 800c05a:	4618      	mov	r0, r3
 800c05c:	f000 f937 	bl	800c2ce <TIM_ITRx_SetConfig>
      break;
 800c060:	e02c      	b.n	800c0bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c06e:	461a      	mov	r2, r3
 800c070:	f000 f8fe 	bl	800c270 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2160      	movs	r1, #96	; 0x60
 800c07a:	4618      	mov	r0, r3
 800c07c:	f000 f927 	bl	800c2ce <TIM_ITRx_SetConfig>
      break;
 800c080:	e01c      	b.n	800c0bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c08e:	461a      	mov	r2, r3
 800c090:	f000 f8c0 	bl	800c214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2140      	movs	r1, #64	; 0x40
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 f917 	bl	800c2ce <TIM_ITRx_SetConfig>
      break;
 800c0a0:	e00c      	b.n	800c0bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	4610      	mov	r0, r2
 800c0ae:	f000 f90e 	bl	800c2ce <TIM_ITRx_SetConfig>
      break;
 800c0b2:	e003      	b.n	800c0bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c0b8:	e000      	b.n	800c0bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c0ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0d6:	b480      	push	{r7}
 800c0d8:	b083      	sub	sp, #12
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0de:	bf00      	nop
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bc80      	pop	{r7}
 800c0e6:	4770      	bx	lr

0800c0e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c0f0:	bf00      	nop
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bc80      	pop	{r7}
 800c0f8:	4770      	bx	lr

0800c0fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0fa:	b480      	push	{r7}
 800c0fc:	b083      	sub	sp, #12
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c102:	bf00      	nop
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	bc80      	pop	{r7}
 800c10a:	4770      	bx	lr

0800c10c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c114:	bf00      	nop
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	bc80      	pop	{r7}
 800c11c:	4770      	bx	lr
	...

0800c120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c120:	b480      	push	{r7}
 800c122:	b085      	sub	sp, #20
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a33      	ldr	r2, [pc, #204]	; (800c200 <TIM_Base_SetConfig+0xe0>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d013      	beq.n	800c160 <TIM_Base_SetConfig+0x40>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a32      	ldr	r2, [pc, #200]	; (800c204 <TIM_Base_SetConfig+0xe4>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d00f      	beq.n	800c160 <TIM_Base_SetConfig+0x40>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c146:	d00b      	beq.n	800c160 <TIM_Base_SetConfig+0x40>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a2f      	ldr	r2, [pc, #188]	; (800c208 <TIM_Base_SetConfig+0xe8>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d007      	beq.n	800c160 <TIM_Base_SetConfig+0x40>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a2e      	ldr	r2, [pc, #184]	; (800c20c <TIM_Base_SetConfig+0xec>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d003      	beq.n	800c160 <TIM_Base_SetConfig+0x40>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4a2d      	ldr	r2, [pc, #180]	; (800c210 <TIM_Base_SetConfig+0xf0>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d108      	bne.n	800c172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	4313      	orrs	r3, r2
 800c170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4a22      	ldr	r2, [pc, #136]	; (800c200 <TIM_Base_SetConfig+0xe0>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d013      	beq.n	800c1a2 <TIM_Base_SetConfig+0x82>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4a21      	ldr	r2, [pc, #132]	; (800c204 <TIM_Base_SetConfig+0xe4>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d00f      	beq.n	800c1a2 <TIM_Base_SetConfig+0x82>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c188:	d00b      	beq.n	800c1a2 <TIM_Base_SetConfig+0x82>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a1e      	ldr	r2, [pc, #120]	; (800c208 <TIM_Base_SetConfig+0xe8>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d007      	beq.n	800c1a2 <TIM_Base_SetConfig+0x82>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a1d      	ldr	r2, [pc, #116]	; (800c20c <TIM_Base_SetConfig+0xec>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d003      	beq.n	800c1a2 <TIM_Base_SetConfig+0x82>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a1c      	ldr	r2, [pc, #112]	; (800c210 <TIM_Base_SetConfig+0xf0>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d108      	bne.n	800c1b4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	695b      	ldr	r3, [r3, #20]
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	689a      	ldr	r2, [r3, #8]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4a09      	ldr	r2, [pc, #36]	; (800c200 <TIM_Base_SetConfig+0xe0>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d003      	beq.n	800c1e8 <TIM_Base_SetConfig+0xc8>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4a08      	ldr	r2, [pc, #32]	; (800c204 <TIM_Base_SetConfig+0xe4>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d103      	bne.n	800c1f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	691a      	ldr	r2, [r3, #16]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	615a      	str	r2, [r3, #20]
}
 800c1f6:	bf00      	nop
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bc80      	pop	{r7}
 800c1fe:	4770      	bx	lr
 800c200:	40012c00 	.word	0x40012c00
 800c204:	40013400 	.word	0x40013400
 800c208:	40000400 	.word	0x40000400
 800c20c:	40000800 	.word	0x40000800
 800c210:	40000c00 	.word	0x40000c00

0800c214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c214:	b480      	push	{r7}
 800c216:	b087      	sub	sp, #28
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	6a1b      	ldr	r3, [r3, #32]
 800c224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6a1b      	ldr	r3, [r3, #32]
 800c22a:	f023 0201 	bic.w	r2, r3, #1
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	699b      	ldr	r3, [r3, #24]
 800c236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c23e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	011b      	lsls	r3, r3, #4
 800c244:	693a      	ldr	r2, [r7, #16]
 800c246:	4313      	orrs	r3, r2
 800c248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	f023 030a 	bic.w	r3, r3, #10
 800c250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	4313      	orrs	r3, r2
 800c258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	697a      	ldr	r2, [r7, #20]
 800c264:	621a      	str	r2, [r3, #32]
}
 800c266:	bf00      	nop
 800c268:	371c      	adds	r7, #28
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bc80      	pop	{r7}
 800c26e:	4770      	bx	lr

0800c270 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c270:	b480      	push	{r7}
 800c272:	b087      	sub	sp, #28
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6a1b      	ldr	r3, [r3, #32]
 800c280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	f023 0210 	bic.w	r2, r3, #16
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	699b      	ldr	r3, [r3, #24]
 800c292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c29a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	031b      	lsls	r3, r3, #12
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c2ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	011b      	lsls	r3, r3, #4
 800c2b2:	697a      	ldr	r2, [r7, #20]
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	693a      	ldr	r2, [r7, #16]
 800c2bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	697a      	ldr	r2, [r7, #20]
 800c2c2:	621a      	str	r2, [r3, #32]
}
 800c2c4:	bf00      	nop
 800c2c6:	371c      	adds	r7, #28
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bc80      	pop	{r7}
 800c2cc:	4770      	bx	lr

0800c2ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c2ce:	b480      	push	{r7}
 800c2d0:	b085      	sub	sp, #20
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c2e6:	683a      	ldr	r2, [r7, #0]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	f043 0307 	orr.w	r3, r3, #7
 800c2f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	609a      	str	r2, [r3, #8]
}
 800c2f8:	bf00      	nop
 800c2fa:	3714      	adds	r7, #20
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bc80      	pop	{r7}
 800c300:	4770      	bx	lr

0800c302 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c302:	b480      	push	{r7}
 800c304:	b087      	sub	sp, #28
 800c306:	af00      	add	r7, sp, #0
 800c308:	60f8      	str	r0, [r7, #12]
 800c30a:	60b9      	str	r1, [r7, #8]
 800c30c:	607a      	str	r2, [r7, #4]
 800c30e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c31c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	021a      	lsls	r2, r3, #8
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	431a      	orrs	r2, r3
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	4313      	orrs	r3, r2
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	4313      	orrs	r3, r2
 800c32e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	609a      	str	r2, [r3, #8]
}
 800c336:	bf00      	nop
 800c338:	371c      	adds	r7, #28
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bc80      	pop	{r7}
 800c33e:	4770      	bx	lr

0800c340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c350:	2b01      	cmp	r3, #1
 800c352:	d101      	bne.n	800c358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c354:	2302      	movs	r3, #2
 800c356:	e050      	b.n	800c3fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2202      	movs	r2, #2
 800c364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c37e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	4313      	orrs	r3, r2
 800c388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a1b      	ldr	r2, [pc, #108]	; (800c404 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d018      	beq.n	800c3ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a19      	ldr	r2, [pc, #100]	; (800c408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d013      	beq.n	800c3ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3ae:	d00e      	beq.n	800c3ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a15      	ldr	r2, [pc, #84]	; (800c40c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d009      	beq.n	800c3ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a14      	ldr	r2, [pc, #80]	; (800c410 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d004      	beq.n	800c3ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a12      	ldr	r2, [pc, #72]	; (800c414 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d10c      	bne.n	800c3e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bc80      	pop	{r7}
 800c402:	4770      	bx	lr
 800c404:	40012c00 	.word	0x40012c00
 800c408:	40013400 	.word	0x40013400
 800c40c:	40000400 	.word	0x40000400
 800c410:	40000800 	.word	0x40000800
 800c414:	40000c00 	.word	0x40000c00

0800c418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	bc80      	pop	{r7}
 800c428:	4770      	bx	lr

0800c42a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c42a:	b480      	push	{r7}
 800c42c:	b083      	sub	sp, #12
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c432:	bf00      	nop
 800c434:	370c      	adds	r7, #12
 800c436:	46bd      	mov	sp, r7
 800c438:	bc80      	pop	{r7}
 800c43a:	4770      	bx	lr

0800c43c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d101      	bne.n	800c44e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c44a:	2301      	movs	r3, #1
 800c44c:	e042      	b.n	800c4d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b00      	cmp	r3, #0
 800c458:	d106      	bne.n	800c468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2200      	movs	r2, #0
 800c45e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f7fc fe1a 	bl	800909c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2224      	movs	r2, #36	; 0x24
 800c46c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68da      	ldr	r2, [r3, #12]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c47e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 fcb5 	bl	800cdf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	691a      	ldr	r2, [r3, #16]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	695a      	ldr	r2, [r3, #20]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c4a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68da      	ldr	r2, [r3, #12]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c4b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2220      	movs	r2, #32
 800c4c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2220      	movs	r2, #32
 800c4c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3708      	adds	r7, #8
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	2b20      	cmp	r3, #32
 800c4f4:	d121      	bne.n	800c53a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d002      	beq.n	800c502 <HAL_UART_Transmit_IT+0x26>
 800c4fc:	88fb      	ldrh	r3, [r7, #6]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d101      	bne.n	800c506 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c502:	2301      	movs	r3, #1
 800c504:	e01a      	b.n	800c53c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	68ba      	ldr	r2, [r7, #8]
 800c50a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	88fa      	ldrh	r2, [r7, #6]
 800c510:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	88fa      	ldrh	r2, [r7, #6]
 800c516:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2200      	movs	r2, #0
 800c51c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2221      	movs	r2, #33	; 0x21
 800c522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	68da      	ldr	r2, [r3, #12]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c534:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c536:	2300      	movs	r3, #0
 800c538:	e000      	b.n	800c53c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c53a:	2302      	movs	r3, #2
  }
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	bc80      	pop	{r7}
 800c544:	4770      	bx	lr
	...

0800c548 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b0ba      	sub	sp, #232	; 0xe8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	695b      	ldr	r3, [r3, #20]
 800c56a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c56e:	2300      	movs	r3, #0
 800c570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c574:	2300      	movs	r3, #0
 800c576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c57a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c57e:	f003 030f 	and.w	r3, r3, #15
 800c582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10f      	bne.n	800c5ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c592:	f003 0320 	and.w	r3, r3, #32
 800c596:	2b00      	cmp	r3, #0
 800c598:	d009      	beq.n	800c5ae <HAL_UART_IRQHandler+0x66>
 800c59a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c59e:	f003 0320 	and.w	r3, r3, #32
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d003      	beq.n	800c5ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 fb63 	bl	800cc72 <UART_Receive_IT>
      return;
 800c5ac:	e25b      	b.n	800ca66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c5ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 80de 	beq.w	800c774 <HAL_UART_IRQHandler+0x22c>
 800c5b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5bc:	f003 0301 	and.w	r3, r3, #1
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d106      	bne.n	800c5d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c5c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f000 80d1 	beq.w	800c774 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c5d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5d6:	f003 0301 	and.w	r3, r3, #1
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00b      	beq.n	800c5f6 <HAL_UART_IRQHandler+0xae>
 800c5de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d005      	beq.n	800c5f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5ee:	f043 0201 	orr.w	r2, r3, #1
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c5f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5fa:	f003 0304 	and.w	r3, r3, #4
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00b      	beq.n	800c61a <HAL_UART_IRQHandler+0xd2>
 800c602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c606:	f003 0301 	and.w	r3, r3, #1
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d005      	beq.n	800c61a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c612:	f043 0202 	orr.w	r2, r3, #2
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c61e:	f003 0302 	and.w	r3, r3, #2
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00b      	beq.n	800c63e <HAL_UART_IRQHandler+0xf6>
 800c626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c62a:	f003 0301 	and.w	r3, r3, #1
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d005      	beq.n	800c63e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c636:	f043 0204 	orr.w	r2, r3, #4
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c63e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c642:	f003 0308 	and.w	r3, r3, #8
 800c646:	2b00      	cmp	r3, #0
 800c648:	d011      	beq.n	800c66e <HAL_UART_IRQHandler+0x126>
 800c64a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c64e:	f003 0320 	and.w	r3, r3, #32
 800c652:	2b00      	cmp	r3, #0
 800c654:	d105      	bne.n	800c662 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c65a:	f003 0301 	and.w	r3, r3, #1
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d005      	beq.n	800c66e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c666:	f043 0208 	orr.w	r2, r3, #8
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c672:	2b00      	cmp	r3, #0
 800c674:	f000 81f2 	beq.w	800ca5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c67c:	f003 0320 	and.w	r3, r3, #32
 800c680:	2b00      	cmp	r3, #0
 800c682:	d008      	beq.n	800c696 <HAL_UART_IRQHandler+0x14e>
 800c684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c688:	f003 0320 	and.w	r3, r3, #32
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d002      	beq.n	800c696 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 faee 	bl	800cc72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	695b      	ldr	r3, [r3, #20]
 800c69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	bf14      	ite	ne
 800c6a4:	2301      	movne	r3, #1
 800c6a6:	2300      	moveq	r3, #0
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6b2:	f003 0308 	and.w	r3, r3, #8
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d103      	bne.n	800c6c2 <HAL_UART_IRQHandler+0x17a>
 800c6ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d04f      	beq.n	800c762 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f9f8 	bl	800cab8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	695b      	ldr	r3, [r3, #20]
 800c6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d041      	beq.n	800c75a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	3314      	adds	r3, #20
 800c6dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c6e4:	e853 3f00 	ldrex	r3, [r3]
 800c6e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c6ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	3314      	adds	r3, #20
 800c6fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c702:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c70e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c712:	e841 2300 	strex	r3, r2, [r1]
 800c716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c71a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1d9      	bne.n	800c6d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c726:	2b00      	cmp	r3, #0
 800c728:	d013      	beq.n	800c752 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c72e:	4a7e      	ldr	r2, [pc, #504]	; (800c928 <HAL_UART_IRQHandler+0x3e0>)
 800c730:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c736:	4618      	mov	r0, r3
 800c738:	f7fd f86c 	bl	8009814 <HAL_DMA_Abort_IT>
 800c73c:	4603      	mov	r3, r0
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d016      	beq.n	800c770 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c74c:	4610      	mov	r0, r2
 800c74e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c750:	e00e      	b.n	800c770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 f99c 	bl	800ca90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c758:	e00a      	b.n	800c770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f998 	bl	800ca90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c760:	e006      	b.n	800c770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f994 	bl	800ca90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c76e:	e175      	b.n	800ca5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c770:	bf00      	nop
    return;
 800c772:	e173      	b.n	800ca5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c778:	2b01      	cmp	r3, #1
 800c77a:	f040 814f 	bne.w	800ca1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c77e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c782:	f003 0310 	and.w	r3, r3, #16
 800c786:	2b00      	cmp	r3, #0
 800c788:	f000 8148 	beq.w	800ca1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c78c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c790:	f003 0310 	and.w	r3, r3, #16
 800c794:	2b00      	cmp	r3, #0
 800c796:	f000 8141 	beq.w	800ca1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c79a:	2300      	movs	r3, #0
 800c79c:	60bb      	str	r3, [r7, #8]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	60bb      	str	r3, [r7, #8]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	60bb      	str	r3, [r7, #8]
 800c7ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	695b      	ldr	r3, [r3, #20]
 800c7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f000 80b6 	beq.w	800c92c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c7cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	f000 8145 	beq.w	800ca60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c7da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	f080 813e 	bcs.w	800ca60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c7ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7f0:	699b      	ldr	r3, [r3, #24]
 800c7f2:	2b20      	cmp	r3, #32
 800c7f4:	f000 8088 	beq.w	800c908 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	330c      	adds	r3, #12
 800c7fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c802:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c806:	e853 3f00 	ldrex	r3, [r3]
 800c80a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c80e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c812:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c816:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	330c      	adds	r3, #12
 800c820:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c824:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c828:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c830:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c834:	e841 2300 	strex	r3, r2, [r1]
 800c838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c83c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1d9      	bne.n	800c7f8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	3314      	adds	r3, #20
 800c84a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c84e:	e853 3f00 	ldrex	r3, [r3]
 800c852:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c856:	f023 0301 	bic.w	r3, r3, #1
 800c85a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	3314      	adds	r3, #20
 800c864:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c868:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c86c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c870:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c874:	e841 2300 	strex	r3, r2, [r1]
 800c878:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c87a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1e1      	bne.n	800c844 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	3314      	adds	r3, #20
 800c886:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c88a:	e853 3f00 	ldrex	r3, [r3]
 800c88e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c896:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	3314      	adds	r3, #20
 800c8a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c8a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c8a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c8aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c8ac:	e841 2300 	strex	r3, r2, [r1]
 800c8b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c8b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1e3      	bne.n	800c880 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2220      	movs	r2, #32
 800c8bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	330c      	adds	r3, #12
 800c8cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8d0:	e853 3f00 	ldrex	r3, [r3]
 800c8d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c8d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8d8:	f023 0310 	bic.w	r3, r3, #16
 800c8dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	330c      	adds	r3, #12
 800c8e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c8ea:	65ba      	str	r2, [r7, #88]	; 0x58
 800c8ec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8f2:	e841 2300 	strex	r3, r2, [r1]
 800c8f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c8f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1e3      	bne.n	800c8c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c902:	4618      	mov	r0, r3
 800c904:	f7fc ff4b 	bl	800979e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2202      	movs	r2, #2
 800c90c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c916:	b29b      	uxth	r3, r3
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	4619      	mov	r1, r3
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 f8bf 	bl	800caa2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c924:	e09c      	b.n	800ca60 <HAL_UART_IRQHandler+0x518>
 800c926:	bf00      	nop
 800c928:	0800cb7d 	.word	0x0800cb7d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c934:	b29b      	uxth	r3, r3
 800c936:	1ad3      	subs	r3, r2, r3
 800c938:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c940:	b29b      	uxth	r3, r3
 800c942:	2b00      	cmp	r3, #0
 800c944:	f000 808e 	beq.w	800ca64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 8089 	beq.w	800ca64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	330c      	adds	r3, #12
 800c958:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95c:	e853 3f00 	ldrex	r3, [r3]
 800c960:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c968:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	330c      	adds	r3, #12
 800c972:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c976:	647a      	str	r2, [r7, #68]	; 0x44
 800c978:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c97c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c97e:	e841 2300 	strex	r3, r2, [r1]
 800c982:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c986:	2b00      	cmp	r3, #0
 800c988:	d1e3      	bne.n	800c952 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	3314      	adds	r3, #20
 800c990:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c994:	e853 3f00 	ldrex	r3, [r3]
 800c998:	623b      	str	r3, [r7, #32]
   return(result);
 800c99a:	6a3b      	ldr	r3, [r7, #32]
 800c99c:	f023 0301 	bic.w	r3, r3, #1
 800c9a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	3314      	adds	r3, #20
 800c9aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c9ae:	633a      	str	r2, [r7, #48]	; 0x30
 800c9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9b6:	e841 2300 	strex	r3, r2, [r1]
 800c9ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1e3      	bne.n	800c98a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2220      	movs	r2, #32
 800c9c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	330c      	adds	r3, #12
 800c9d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	e853 3f00 	ldrex	r3, [r3]
 800c9de:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f023 0310 	bic.w	r3, r3, #16
 800c9e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	330c      	adds	r3, #12
 800c9f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c9f4:	61fa      	str	r2, [r7, #28]
 800c9f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f8:	69b9      	ldr	r1, [r7, #24]
 800c9fa:	69fa      	ldr	r2, [r7, #28]
 800c9fc:	e841 2300 	strex	r3, r2, [r1]
 800ca00:	617b      	str	r3, [r7, #20]
   return(result);
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1e3      	bne.n	800c9d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca12:	4619      	mov	r1, r3
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 f844 	bl	800caa2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ca1a:	e023      	b.n	800ca64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ca1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d009      	beq.n	800ca3c <HAL_UART_IRQHandler+0x4f4>
 800ca28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d003      	beq.n	800ca3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 f8b5 	bl	800cba4 <UART_Transmit_IT>
    return;
 800ca3a:	e014      	b.n	800ca66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ca3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00e      	beq.n	800ca66 <HAL_UART_IRQHandler+0x51e>
 800ca48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d008      	beq.n	800ca66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 f8f4 	bl	800cc42 <UART_EndTransmit_IT>
    return;
 800ca5a:	e004      	b.n	800ca66 <HAL_UART_IRQHandler+0x51e>
    return;
 800ca5c:	bf00      	nop
 800ca5e:	e002      	b.n	800ca66 <HAL_UART_IRQHandler+0x51e>
      return;
 800ca60:	bf00      	nop
 800ca62:	e000      	b.n	800ca66 <HAL_UART_IRQHandler+0x51e>
      return;
 800ca64:	bf00      	nop
  }
}
 800ca66:	37e8      	adds	r7, #232	; 0xe8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ca74:	bf00      	nop
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bc80      	pop	{r7}
 800ca7c:	4770      	bx	lr

0800ca7e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca7e:	b480      	push	{r7}
 800ca80:	b083      	sub	sp, #12
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ca86:	bf00      	nop
 800ca88:	370c      	adds	r7, #12
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bc80      	pop	{r7}
 800ca8e:	4770      	bx	lr

0800ca90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ca98:	bf00      	nop
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bc80      	pop	{r7}
 800caa0:	4770      	bx	lr

0800caa2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800caa2:	b480      	push	{r7}
 800caa4:	b083      	sub	sp, #12
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
 800caaa:	460b      	mov	r3, r1
 800caac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800caae:	bf00      	nop
 800cab0:	370c      	adds	r7, #12
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bc80      	pop	{r7}
 800cab6:	4770      	bx	lr

0800cab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cab8:	b480      	push	{r7}
 800caba:	b095      	sub	sp, #84	; 0x54
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	330c      	adds	r3, #12
 800cac6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caca:	e853 3f00 	ldrex	r3, [r3]
 800cace:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	330c      	adds	r3, #12
 800cade:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cae0:	643a      	str	r2, [r7, #64]	; 0x40
 800cae2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cae6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cae8:	e841 2300 	strex	r3, r2, [r1]
 800caec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800caee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d1e5      	bne.n	800cac0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	3314      	adds	r3, #20
 800cafa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafc:	6a3b      	ldr	r3, [r7, #32]
 800cafe:	e853 3f00 	ldrex	r3, [r3]
 800cb02:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	f023 0301 	bic.w	r3, r3, #1
 800cb0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	3314      	adds	r3, #20
 800cb12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb1c:	e841 2300 	strex	r3, r2, [r1]
 800cb20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d1e5      	bne.n	800caf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d119      	bne.n	800cb64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	330c      	adds	r3, #12
 800cb36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	e853 3f00 	ldrex	r3, [r3]
 800cb3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	f023 0310 	bic.w	r3, r3, #16
 800cb46:	647b      	str	r3, [r7, #68]	; 0x44
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	330c      	adds	r3, #12
 800cb4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb50:	61ba      	str	r2, [r7, #24]
 800cb52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb54:	6979      	ldr	r1, [r7, #20]
 800cb56:	69ba      	ldr	r2, [r7, #24]
 800cb58:	e841 2300 	strex	r3, r2, [r1]
 800cb5c:	613b      	str	r3, [r7, #16]
   return(result);
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d1e5      	bne.n	800cb30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2220      	movs	r2, #32
 800cb68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cb72:	bf00      	nop
 800cb74:	3754      	adds	r7, #84	; 0x54
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bc80      	pop	{r7}
 800cb7a:	4770      	bx	lr

0800cb7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2200      	movs	r2, #0
 800cb94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb96:	68f8      	ldr	r0, [r7, #12]
 800cb98:	f7ff ff7a 	bl	800ca90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb9c:	bf00      	nop
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	2b21      	cmp	r3, #33	; 0x21
 800cbb6:	d13e      	bne.n	800cc36 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbc0:	d114      	bne.n	800cbec <UART_Transmit_IT+0x48>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	691b      	ldr	r3, [r3, #16]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d110      	bne.n	800cbec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	881b      	ldrh	r3, [r3, #0]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbde:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a1b      	ldr	r3, [r3, #32]
 800cbe4:	1c9a      	adds	r2, r3, #2
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	621a      	str	r2, [r3, #32]
 800cbea:	e008      	b.n	800cbfe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a1b      	ldr	r3, [r3, #32]
 800cbf0:	1c59      	adds	r1, r3, #1
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	6211      	str	r1, [r2, #32]
 800cbf6:	781a      	ldrb	r2, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	3b01      	subs	r3, #1
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10f      	bne.n	800cc32 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	68da      	ldr	r2, [r3, #12]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc20:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	68da      	ldr	r2, [r3, #12]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc30:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	e000      	b.n	800cc38 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cc36:	2302      	movs	r3, #2
  }
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bc80      	pop	{r7}
 800cc40:	4770      	bx	lr

0800cc42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b082      	sub	sp, #8
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	68da      	ldr	r2, [r3, #12]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2220      	movs	r2, #32
 800cc5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f7ff ff02 	bl	800ca6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cc68:	2300      	movs	r3, #0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3708      	adds	r7, #8
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b08c      	sub	sp, #48	; 0x30
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	2b22      	cmp	r3, #34	; 0x22
 800cc84:	f040 80ae 	bne.w	800cde4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc90:	d117      	bne.n	800ccc2 <UART_Receive_IT+0x50>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d113      	bne.n	800ccc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccba:	1c9a      	adds	r2, r3, #2
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	629a      	str	r2, [r3, #40]	; 0x28
 800ccc0:	e026      	b.n	800cd10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccd4:	d007      	beq.n	800cce6 <UART_Receive_IT+0x74>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d10a      	bne.n	800ccf4 <UART_Receive_IT+0x82>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d106      	bne.n	800ccf4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	b2da      	uxtb	r2, r3
 800ccee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf0:	701a      	strb	r2, [r3, #0]
 800ccf2:	e008      	b.n	800cd06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd00:	b2da      	uxtb	r2, r3
 800cd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	3b01      	subs	r3, #1
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d15d      	bne.n	800cde0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	68da      	ldr	r2, [r3, #12]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f022 0220 	bic.w	r2, r2, #32
 800cd32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	68da      	ldr	r2, [r3, #12]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	695a      	ldr	r2, [r3, #20]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f022 0201 	bic.w	r2, r2, #1
 800cd52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2220      	movs	r2, #32
 800cd58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d135      	bne.n	800cdd6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	330c      	adds	r3, #12
 800cd76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	e853 3f00 	ldrex	r3, [r3]
 800cd7e:	613b      	str	r3, [r7, #16]
   return(result);
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	f023 0310 	bic.w	r3, r3, #16
 800cd86:	627b      	str	r3, [r7, #36]	; 0x24
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	330c      	adds	r3, #12
 800cd8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd90:	623a      	str	r2, [r7, #32]
 800cd92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd94:	69f9      	ldr	r1, [r7, #28]
 800cd96:	6a3a      	ldr	r2, [r7, #32]
 800cd98:	e841 2300 	strex	r3, r2, [r1]
 800cd9c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd9e:	69bb      	ldr	r3, [r7, #24]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1e5      	bne.n	800cd70 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f003 0310 	and.w	r3, r3, #16
 800cdae:	2b10      	cmp	r3, #16
 800cdb0:	d10a      	bne.n	800cdc8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	60fb      	str	r3, [r7, #12]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	60fb      	str	r3, [r7, #12]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	60fb      	str	r3, [r7, #12]
 800cdc6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cdcc:	4619      	mov	r1, r3
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7ff fe67 	bl	800caa2 <HAL_UARTEx_RxEventCallback>
 800cdd4:	e002      	b.n	800cddc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7ff fe51 	bl	800ca7e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	e002      	b.n	800cde6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cde0:	2300      	movs	r3, #0
 800cde2:	e000      	b.n	800cde6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cde4:	2302      	movs	r3, #2
  }
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3730      	adds	r7, #48	; 0x30
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
	...

0800cdf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	691b      	ldr	r3, [r3, #16]
 800cdfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	68da      	ldr	r2, [r3, #12]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	430a      	orrs	r2, r1
 800ce0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	689a      	ldr	r2, [r3, #8]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	431a      	orrs	r2, r3
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	695b      	ldr	r3, [r3, #20]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800ce2a:	f023 030c 	bic.w	r3, r3, #12
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	6812      	ldr	r2, [r2, #0]
 800ce32:	68b9      	ldr	r1, [r7, #8]
 800ce34:	430b      	orrs	r3, r1
 800ce36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	699a      	ldr	r2, [r3, #24]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	430a      	orrs	r2, r1
 800ce4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a2c      	ldr	r2, [pc, #176]	; (800cf04 <UART_SetConfig+0x114>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d103      	bne.n	800ce60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800ce58:	f7fe fe8c 	bl	800bb74 <HAL_RCC_GetPCLK2Freq>
 800ce5c:	60f8      	str	r0, [r7, #12]
 800ce5e:	e002      	b.n	800ce66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ce60:	f7fe fe74 	bl	800bb4c <HAL_RCC_GetPCLK1Freq>
 800ce64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ce66:	68fa      	ldr	r2, [r7, #12]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4413      	add	r3, r2
 800ce6e:	009a      	lsls	r2, r3, #2
 800ce70:	441a      	add	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce7c:	4a22      	ldr	r2, [pc, #136]	; (800cf08 <UART_SetConfig+0x118>)
 800ce7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce82:	095b      	lsrs	r3, r3, #5
 800ce84:	0119      	lsls	r1, r3, #4
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	4613      	mov	r3, r2
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	4413      	add	r3, r2
 800ce8e:	009a      	lsls	r2, r3, #2
 800ce90:	441a      	add	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	fbb2 f2f3 	udiv	r2, r2, r3
 800ce9c:	4b1a      	ldr	r3, [pc, #104]	; (800cf08 <UART_SetConfig+0x118>)
 800ce9e:	fba3 0302 	umull	r0, r3, r3, r2
 800cea2:	095b      	lsrs	r3, r3, #5
 800cea4:	2064      	movs	r0, #100	; 0x64
 800cea6:	fb00 f303 	mul.w	r3, r0, r3
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	011b      	lsls	r3, r3, #4
 800ceae:	3332      	adds	r3, #50	; 0x32
 800ceb0:	4a15      	ldr	r2, [pc, #84]	; (800cf08 <UART_SetConfig+0x118>)
 800ceb2:	fba2 2303 	umull	r2, r3, r2, r3
 800ceb6:	095b      	lsrs	r3, r3, #5
 800ceb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cebc:	4419      	add	r1, r3
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	4613      	mov	r3, r2
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4413      	add	r3, r2
 800cec6:	009a      	lsls	r2, r3, #2
 800cec8:	441a      	add	r2, r3
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	fbb2 f2f3 	udiv	r2, r2, r3
 800ced4:	4b0c      	ldr	r3, [pc, #48]	; (800cf08 <UART_SetConfig+0x118>)
 800ced6:	fba3 0302 	umull	r0, r3, r3, r2
 800ceda:	095b      	lsrs	r3, r3, #5
 800cedc:	2064      	movs	r0, #100	; 0x64
 800cede:	fb00 f303 	mul.w	r3, r0, r3
 800cee2:	1ad3      	subs	r3, r2, r3
 800cee4:	011b      	lsls	r3, r3, #4
 800cee6:	3332      	adds	r3, #50	; 0x32
 800cee8:	4a07      	ldr	r2, [pc, #28]	; (800cf08 <UART_SetConfig+0x118>)
 800ceea:	fba2 2303 	umull	r2, r3, r2, r3
 800ceee:	095b      	lsrs	r3, r3, #5
 800cef0:	f003 020f 	and.w	r2, r3, #15
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	440a      	add	r2, r1
 800cefa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cefc:	bf00      	nop
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	40013800 	.word	0x40013800
 800cf08:	51eb851f 	.word	0x51eb851f

0800cf0c <__itoa>:
 800cf0c:	1e93      	subs	r3, r2, #2
 800cf0e:	2b22      	cmp	r3, #34	; 0x22
 800cf10:	b510      	push	{r4, lr}
 800cf12:	460c      	mov	r4, r1
 800cf14:	d904      	bls.n	800cf20 <__itoa+0x14>
 800cf16:	2300      	movs	r3, #0
 800cf18:	461c      	mov	r4, r3
 800cf1a:	700b      	strb	r3, [r1, #0]
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	bd10      	pop	{r4, pc}
 800cf20:	2a0a      	cmp	r2, #10
 800cf22:	d109      	bne.n	800cf38 <__itoa+0x2c>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	da07      	bge.n	800cf38 <__itoa+0x2c>
 800cf28:	232d      	movs	r3, #45	; 0x2d
 800cf2a:	700b      	strb	r3, [r1, #0]
 800cf2c:	2101      	movs	r1, #1
 800cf2e:	4240      	negs	r0, r0
 800cf30:	4421      	add	r1, r4
 800cf32:	f000 f8b9 	bl	800d0a8 <__utoa>
 800cf36:	e7f1      	b.n	800cf1c <__itoa+0x10>
 800cf38:	2100      	movs	r1, #0
 800cf3a:	e7f9      	b.n	800cf30 <__itoa+0x24>

0800cf3c <itoa>:
 800cf3c:	f7ff bfe6 	b.w	800cf0c <__itoa>

0800cf40 <malloc>:
 800cf40:	4b02      	ldr	r3, [pc, #8]	; (800cf4c <malloc+0xc>)
 800cf42:	4601      	mov	r1, r0
 800cf44:	6818      	ldr	r0, [r3, #0]
 800cf46:	f000 b823 	b.w	800cf90 <_malloc_r>
 800cf4a:	bf00      	nop
 800cf4c:	20000a10 	.word	0x20000a10

0800cf50 <sbrk_aligned>:
 800cf50:	b570      	push	{r4, r5, r6, lr}
 800cf52:	4e0e      	ldr	r6, [pc, #56]	; (800cf8c <sbrk_aligned+0x3c>)
 800cf54:	460c      	mov	r4, r1
 800cf56:	6831      	ldr	r1, [r6, #0]
 800cf58:	4605      	mov	r5, r0
 800cf5a:	b911      	cbnz	r1, 800cf62 <sbrk_aligned+0x12>
 800cf5c:	f000 f91e 	bl	800d19c <_sbrk_r>
 800cf60:	6030      	str	r0, [r6, #0]
 800cf62:	4621      	mov	r1, r4
 800cf64:	4628      	mov	r0, r5
 800cf66:	f000 f919 	bl	800d19c <_sbrk_r>
 800cf6a:	1c43      	adds	r3, r0, #1
 800cf6c:	d00a      	beq.n	800cf84 <sbrk_aligned+0x34>
 800cf6e:	1cc4      	adds	r4, r0, #3
 800cf70:	f024 0403 	bic.w	r4, r4, #3
 800cf74:	42a0      	cmp	r0, r4
 800cf76:	d007      	beq.n	800cf88 <sbrk_aligned+0x38>
 800cf78:	1a21      	subs	r1, r4, r0
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	f000 f90e 	bl	800d19c <_sbrk_r>
 800cf80:	3001      	adds	r0, #1
 800cf82:	d101      	bne.n	800cf88 <sbrk_aligned+0x38>
 800cf84:	f04f 34ff 	mov.w	r4, #4294967295
 800cf88:	4620      	mov	r0, r4
 800cf8a:	bd70      	pop	{r4, r5, r6, pc}
 800cf8c:	20000ed0 	.word	0x20000ed0

0800cf90 <_malloc_r>:
 800cf90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf94:	1ccd      	adds	r5, r1, #3
 800cf96:	f025 0503 	bic.w	r5, r5, #3
 800cf9a:	3508      	adds	r5, #8
 800cf9c:	2d0c      	cmp	r5, #12
 800cf9e:	bf38      	it	cc
 800cfa0:	250c      	movcc	r5, #12
 800cfa2:	2d00      	cmp	r5, #0
 800cfa4:	4607      	mov	r7, r0
 800cfa6:	db01      	blt.n	800cfac <_malloc_r+0x1c>
 800cfa8:	42a9      	cmp	r1, r5
 800cfaa:	d905      	bls.n	800cfb8 <_malloc_r+0x28>
 800cfac:	230c      	movs	r3, #12
 800cfae:	2600      	movs	r6, #0
 800cfb0:	603b      	str	r3, [r7, #0]
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfb8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d08c <_malloc_r+0xfc>
 800cfbc:	f000 f868 	bl	800d090 <__malloc_lock>
 800cfc0:	f8d8 3000 	ldr.w	r3, [r8]
 800cfc4:	461c      	mov	r4, r3
 800cfc6:	bb5c      	cbnz	r4, 800d020 <_malloc_r+0x90>
 800cfc8:	4629      	mov	r1, r5
 800cfca:	4638      	mov	r0, r7
 800cfcc:	f7ff ffc0 	bl	800cf50 <sbrk_aligned>
 800cfd0:	1c43      	adds	r3, r0, #1
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	d155      	bne.n	800d082 <_malloc_r+0xf2>
 800cfd6:	f8d8 4000 	ldr.w	r4, [r8]
 800cfda:	4626      	mov	r6, r4
 800cfdc:	2e00      	cmp	r6, #0
 800cfde:	d145      	bne.n	800d06c <_malloc_r+0xdc>
 800cfe0:	2c00      	cmp	r4, #0
 800cfe2:	d048      	beq.n	800d076 <_malloc_r+0xe6>
 800cfe4:	6823      	ldr	r3, [r4, #0]
 800cfe6:	4631      	mov	r1, r6
 800cfe8:	4638      	mov	r0, r7
 800cfea:	eb04 0903 	add.w	r9, r4, r3
 800cfee:	f000 f8d5 	bl	800d19c <_sbrk_r>
 800cff2:	4581      	cmp	r9, r0
 800cff4:	d13f      	bne.n	800d076 <_malloc_r+0xe6>
 800cff6:	6821      	ldr	r1, [r4, #0]
 800cff8:	4638      	mov	r0, r7
 800cffa:	1a6d      	subs	r5, r5, r1
 800cffc:	4629      	mov	r1, r5
 800cffe:	f7ff ffa7 	bl	800cf50 <sbrk_aligned>
 800d002:	3001      	adds	r0, #1
 800d004:	d037      	beq.n	800d076 <_malloc_r+0xe6>
 800d006:	6823      	ldr	r3, [r4, #0]
 800d008:	442b      	add	r3, r5
 800d00a:	6023      	str	r3, [r4, #0]
 800d00c:	f8d8 3000 	ldr.w	r3, [r8]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d038      	beq.n	800d086 <_malloc_r+0xf6>
 800d014:	685a      	ldr	r2, [r3, #4]
 800d016:	42a2      	cmp	r2, r4
 800d018:	d12b      	bne.n	800d072 <_malloc_r+0xe2>
 800d01a:	2200      	movs	r2, #0
 800d01c:	605a      	str	r2, [r3, #4]
 800d01e:	e00f      	b.n	800d040 <_malloc_r+0xb0>
 800d020:	6822      	ldr	r2, [r4, #0]
 800d022:	1b52      	subs	r2, r2, r5
 800d024:	d41f      	bmi.n	800d066 <_malloc_r+0xd6>
 800d026:	2a0b      	cmp	r2, #11
 800d028:	d917      	bls.n	800d05a <_malloc_r+0xca>
 800d02a:	1961      	adds	r1, r4, r5
 800d02c:	42a3      	cmp	r3, r4
 800d02e:	6025      	str	r5, [r4, #0]
 800d030:	bf18      	it	ne
 800d032:	6059      	strne	r1, [r3, #4]
 800d034:	6863      	ldr	r3, [r4, #4]
 800d036:	bf08      	it	eq
 800d038:	f8c8 1000 	streq.w	r1, [r8]
 800d03c:	5162      	str	r2, [r4, r5]
 800d03e:	604b      	str	r3, [r1, #4]
 800d040:	4638      	mov	r0, r7
 800d042:	f104 060b 	add.w	r6, r4, #11
 800d046:	f000 f829 	bl	800d09c <__malloc_unlock>
 800d04a:	f026 0607 	bic.w	r6, r6, #7
 800d04e:	1d23      	adds	r3, r4, #4
 800d050:	1af2      	subs	r2, r6, r3
 800d052:	d0ae      	beq.n	800cfb2 <_malloc_r+0x22>
 800d054:	1b9b      	subs	r3, r3, r6
 800d056:	50a3      	str	r3, [r4, r2]
 800d058:	e7ab      	b.n	800cfb2 <_malloc_r+0x22>
 800d05a:	42a3      	cmp	r3, r4
 800d05c:	6862      	ldr	r2, [r4, #4]
 800d05e:	d1dd      	bne.n	800d01c <_malloc_r+0x8c>
 800d060:	f8c8 2000 	str.w	r2, [r8]
 800d064:	e7ec      	b.n	800d040 <_malloc_r+0xb0>
 800d066:	4623      	mov	r3, r4
 800d068:	6864      	ldr	r4, [r4, #4]
 800d06a:	e7ac      	b.n	800cfc6 <_malloc_r+0x36>
 800d06c:	4634      	mov	r4, r6
 800d06e:	6876      	ldr	r6, [r6, #4]
 800d070:	e7b4      	b.n	800cfdc <_malloc_r+0x4c>
 800d072:	4613      	mov	r3, r2
 800d074:	e7cc      	b.n	800d010 <_malloc_r+0x80>
 800d076:	230c      	movs	r3, #12
 800d078:	4638      	mov	r0, r7
 800d07a:	603b      	str	r3, [r7, #0]
 800d07c:	f000 f80e 	bl	800d09c <__malloc_unlock>
 800d080:	e797      	b.n	800cfb2 <_malloc_r+0x22>
 800d082:	6025      	str	r5, [r4, #0]
 800d084:	e7dc      	b.n	800d040 <_malloc_r+0xb0>
 800d086:	605b      	str	r3, [r3, #4]
 800d088:	deff      	udf	#255	; 0xff
 800d08a:	bf00      	nop
 800d08c:	20000ecc 	.word	0x20000ecc

0800d090 <__malloc_lock>:
 800d090:	4801      	ldr	r0, [pc, #4]	; (800d098 <__malloc_lock+0x8>)
 800d092:	f000 b8bd 	b.w	800d210 <__retarget_lock_acquire_recursive>
 800d096:	bf00      	nop
 800d098:	20001010 	.word	0x20001010

0800d09c <__malloc_unlock>:
 800d09c:	4801      	ldr	r0, [pc, #4]	; (800d0a4 <__malloc_unlock+0x8>)
 800d09e:	f000 b8b8 	b.w	800d212 <__retarget_lock_release_recursive>
 800d0a2:	bf00      	nop
 800d0a4:	20001010 	.word	0x20001010

0800d0a8 <__utoa>:
 800d0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0aa:	b08b      	sub	sp, #44	; 0x2c
 800d0ac:	4605      	mov	r5, r0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	466e      	mov	r6, sp
 800d0b2:	4c1d      	ldr	r4, [pc, #116]	; (800d128 <__utoa+0x80>)
 800d0b4:	f104 0c20 	add.w	ip, r4, #32
 800d0b8:	4637      	mov	r7, r6
 800d0ba:	6820      	ldr	r0, [r4, #0]
 800d0bc:	6861      	ldr	r1, [r4, #4]
 800d0be:	3408      	adds	r4, #8
 800d0c0:	c703      	stmia	r7!, {r0, r1}
 800d0c2:	4564      	cmp	r4, ip
 800d0c4:	463e      	mov	r6, r7
 800d0c6:	d1f7      	bne.n	800d0b8 <__utoa+0x10>
 800d0c8:	7921      	ldrb	r1, [r4, #4]
 800d0ca:	6820      	ldr	r0, [r4, #0]
 800d0cc:	7139      	strb	r1, [r7, #4]
 800d0ce:	1e91      	subs	r1, r2, #2
 800d0d0:	2922      	cmp	r1, #34	; 0x22
 800d0d2:	6038      	str	r0, [r7, #0]
 800d0d4:	f04f 0100 	mov.w	r1, #0
 800d0d8:	d904      	bls.n	800d0e4 <__utoa+0x3c>
 800d0da:	7019      	strb	r1, [r3, #0]
 800d0dc:	460b      	mov	r3, r1
 800d0de:	4618      	mov	r0, r3
 800d0e0:	b00b      	add	sp, #44	; 0x2c
 800d0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0e4:	1e58      	subs	r0, r3, #1
 800d0e6:	4684      	mov	ip, r0
 800d0e8:	fbb5 f7f2 	udiv	r7, r5, r2
 800d0ec:	fb02 5617 	mls	r6, r2, r7, r5
 800d0f0:	3628      	adds	r6, #40	; 0x28
 800d0f2:	446e      	add	r6, sp
 800d0f4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d0f8:	460c      	mov	r4, r1
 800d0fa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d0fe:	462e      	mov	r6, r5
 800d100:	42b2      	cmp	r2, r6
 800d102:	463d      	mov	r5, r7
 800d104:	f101 0101 	add.w	r1, r1, #1
 800d108:	d9ee      	bls.n	800d0e8 <__utoa+0x40>
 800d10a:	2200      	movs	r2, #0
 800d10c:	545a      	strb	r2, [r3, r1]
 800d10e:	1919      	adds	r1, r3, r4
 800d110:	1aa5      	subs	r5, r4, r2
 800d112:	42aa      	cmp	r2, r5
 800d114:	dae3      	bge.n	800d0de <__utoa+0x36>
 800d116:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d11a:	780e      	ldrb	r6, [r1, #0]
 800d11c:	3201      	adds	r2, #1
 800d11e:	7006      	strb	r6, [r0, #0]
 800d120:	f801 5901 	strb.w	r5, [r1], #-1
 800d124:	e7f4      	b.n	800d110 <__utoa+0x68>
 800d126:	bf00      	nop
 800d128:	0800e896 	.word	0x0800e896

0800d12c <siprintf>:
 800d12c:	b40e      	push	{r1, r2, r3}
 800d12e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d132:	b500      	push	{lr}
 800d134:	b09c      	sub	sp, #112	; 0x70
 800d136:	ab1d      	add	r3, sp, #116	; 0x74
 800d138:	9002      	str	r0, [sp, #8]
 800d13a:	9006      	str	r0, [sp, #24]
 800d13c:	9107      	str	r1, [sp, #28]
 800d13e:	9104      	str	r1, [sp, #16]
 800d140:	4808      	ldr	r0, [pc, #32]	; (800d164 <siprintf+0x38>)
 800d142:	4909      	ldr	r1, [pc, #36]	; (800d168 <siprintf+0x3c>)
 800d144:	f853 2b04 	ldr.w	r2, [r3], #4
 800d148:	9105      	str	r1, [sp, #20]
 800d14a:	6800      	ldr	r0, [r0, #0]
 800d14c:	a902      	add	r1, sp, #8
 800d14e:	9301      	str	r3, [sp, #4]
 800d150:	f000 f90a 	bl	800d368 <_svfiprintf_r>
 800d154:	2200      	movs	r2, #0
 800d156:	9b02      	ldr	r3, [sp, #8]
 800d158:	701a      	strb	r2, [r3, #0]
 800d15a:	b01c      	add	sp, #112	; 0x70
 800d15c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d160:	b003      	add	sp, #12
 800d162:	4770      	bx	lr
 800d164:	20000a10 	.word	0x20000a10
 800d168:	ffff0208 	.word	0xffff0208

0800d16c <memset>:
 800d16c:	4603      	mov	r3, r0
 800d16e:	4402      	add	r2, r0
 800d170:	4293      	cmp	r3, r2
 800d172:	d100      	bne.n	800d176 <memset+0xa>
 800d174:	4770      	bx	lr
 800d176:	f803 1b01 	strb.w	r1, [r3], #1
 800d17a:	e7f9      	b.n	800d170 <memset+0x4>

0800d17c <strcat>:
 800d17c:	4602      	mov	r2, r0
 800d17e:	b510      	push	{r4, lr}
 800d180:	7814      	ldrb	r4, [r2, #0]
 800d182:	4613      	mov	r3, r2
 800d184:	3201      	adds	r2, #1
 800d186:	2c00      	cmp	r4, #0
 800d188:	d1fa      	bne.n	800d180 <strcat+0x4>
 800d18a:	3b01      	subs	r3, #1
 800d18c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d190:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d194:	2a00      	cmp	r2, #0
 800d196:	d1f9      	bne.n	800d18c <strcat+0x10>
 800d198:	bd10      	pop	{r4, pc}
	...

0800d19c <_sbrk_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	2300      	movs	r3, #0
 800d1a0:	4d05      	ldr	r5, [pc, #20]	; (800d1b8 <_sbrk_r+0x1c>)
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	f7fc f808 	bl	80091bc <_sbrk>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d102      	bne.n	800d1b6 <_sbrk_r+0x1a>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	b103      	cbz	r3, 800d1b6 <_sbrk_r+0x1a>
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	2000100c 	.word	0x2000100c

0800d1bc <__errno>:
 800d1bc:	4b01      	ldr	r3, [pc, #4]	; (800d1c4 <__errno+0x8>)
 800d1be:	6818      	ldr	r0, [r3, #0]
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	20000a10 	.word	0x20000a10

0800d1c8 <__libc_init_array>:
 800d1c8:	b570      	push	{r4, r5, r6, lr}
 800d1ca:	2600      	movs	r6, #0
 800d1cc:	4d0c      	ldr	r5, [pc, #48]	; (800d200 <__libc_init_array+0x38>)
 800d1ce:	4c0d      	ldr	r4, [pc, #52]	; (800d204 <__libc_init_array+0x3c>)
 800d1d0:	1b64      	subs	r4, r4, r5
 800d1d2:	10a4      	asrs	r4, r4, #2
 800d1d4:	42a6      	cmp	r6, r4
 800d1d6:	d109      	bne.n	800d1ec <__libc_init_array+0x24>
 800d1d8:	f000 fbc6 	bl	800d968 <_init>
 800d1dc:	2600      	movs	r6, #0
 800d1de:	4d0a      	ldr	r5, [pc, #40]	; (800d208 <__libc_init_array+0x40>)
 800d1e0:	4c0a      	ldr	r4, [pc, #40]	; (800d20c <__libc_init_array+0x44>)
 800d1e2:	1b64      	subs	r4, r4, r5
 800d1e4:	10a4      	asrs	r4, r4, #2
 800d1e6:	42a6      	cmp	r6, r4
 800d1e8:	d105      	bne.n	800d1f6 <__libc_init_array+0x2e>
 800d1ea:	bd70      	pop	{r4, r5, r6, pc}
 800d1ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1f0:	4798      	blx	r3
 800d1f2:	3601      	adds	r6, #1
 800d1f4:	e7ee      	b.n	800d1d4 <__libc_init_array+0xc>
 800d1f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1fa:	4798      	blx	r3
 800d1fc:	3601      	adds	r6, #1
 800d1fe:	e7f2      	b.n	800d1e6 <__libc_init_array+0x1e>
 800d200:	0800e8f0 	.word	0x0800e8f0
 800d204:	0800e8f0 	.word	0x0800e8f0
 800d208:	0800e8f0 	.word	0x0800e8f0
 800d20c:	0800e8f4 	.word	0x0800e8f4

0800d210 <__retarget_lock_acquire_recursive>:
 800d210:	4770      	bx	lr

0800d212 <__retarget_lock_release_recursive>:
 800d212:	4770      	bx	lr

0800d214 <strcpy>:
 800d214:	4603      	mov	r3, r0
 800d216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d21a:	f803 2b01 	strb.w	r2, [r3], #1
 800d21e:	2a00      	cmp	r2, #0
 800d220:	d1f9      	bne.n	800d216 <strcpy+0x2>
 800d222:	4770      	bx	lr

0800d224 <_free_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4605      	mov	r5, r0
 800d228:	2900      	cmp	r1, #0
 800d22a:	d040      	beq.n	800d2ae <_free_r+0x8a>
 800d22c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d230:	1f0c      	subs	r4, r1, #4
 800d232:	2b00      	cmp	r3, #0
 800d234:	bfb8      	it	lt
 800d236:	18e4      	addlt	r4, r4, r3
 800d238:	f7ff ff2a 	bl	800d090 <__malloc_lock>
 800d23c:	4a1c      	ldr	r2, [pc, #112]	; (800d2b0 <_free_r+0x8c>)
 800d23e:	6813      	ldr	r3, [r2, #0]
 800d240:	b933      	cbnz	r3, 800d250 <_free_r+0x2c>
 800d242:	6063      	str	r3, [r4, #4]
 800d244:	6014      	str	r4, [r2, #0]
 800d246:	4628      	mov	r0, r5
 800d248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d24c:	f7ff bf26 	b.w	800d09c <__malloc_unlock>
 800d250:	42a3      	cmp	r3, r4
 800d252:	d908      	bls.n	800d266 <_free_r+0x42>
 800d254:	6820      	ldr	r0, [r4, #0]
 800d256:	1821      	adds	r1, r4, r0
 800d258:	428b      	cmp	r3, r1
 800d25a:	bf01      	itttt	eq
 800d25c:	6819      	ldreq	r1, [r3, #0]
 800d25e:	685b      	ldreq	r3, [r3, #4]
 800d260:	1809      	addeq	r1, r1, r0
 800d262:	6021      	streq	r1, [r4, #0]
 800d264:	e7ed      	b.n	800d242 <_free_r+0x1e>
 800d266:	461a      	mov	r2, r3
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	b10b      	cbz	r3, 800d270 <_free_r+0x4c>
 800d26c:	42a3      	cmp	r3, r4
 800d26e:	d9fa      	bls.n	800d266 <_free_r+0x42>
 800d270:	6811      	ldr	r1, [r2, #0]
 800d272:	1850      	adds	r0, r2, r1
 800d274:	42a0      	cmp	r0, r4
 800d276:	d10b      	bne.n	800d290 <_free_r+0x6c>
 800d278:	6820      	ldr	r0, [r4, #0]
 800d27a:	4401      	add	r1, r0
 800d27c:	1850      	adds	r0, r2, r1
 800d27e:	4283      	cmp	r3, r0
 800d280:	6011      	str	r1, [r2, #0]
 800d282:	d1e0      	bne.n	800d246 <_free_r+0x22>
 800d284:	6818      	ldr	r0, [r3, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	4408      	add	r0, r1
 800d28a:	6010      	str	r0, [r2, #0]
 800d28c:	6053      	str	r3, [r2, #4]
 800d28e:	e7da      	b.n	800d246 <_free_r+0x22>
 800d290:	d902      	bls.n	800d298 <_free_r+0x74>
 800d292:	230c      	movs	r3, #12
 800d294:	602b      	str	r3, [r5, #0]
 800d296:	e7d6      	b.n	800d246 <_free_r+0x22>
 800d298:	6820      	ldr	r0, [r4, #0]
 800d29a:	1821      	adds	r1, r4, r0
 800d29c:	428b      	cmp	r3, r1
 800d29e:	bf01      	itttt	eq
 800d2a0:	6819      	ldreq	r1, [r3, #0]
 800d2a2:	685b      	ldreq	r3, [r3, #4]
 800d2a4:	1809      	addeq	r1, r1, r0
 800d2a6:	6021      	streq	r1, [r4, #0]
 800d2a8:	6063      	str	r3, [r4, #4]
 800d2aa:	6054      	str	r4, [r2, #4]
 800d2ac:	e7cb      	b.n	800d246 <_free_r+0x22>
 800d2ae:	bd38      	pop	{r3, r4, r5, pc}
 800d2b0:	20000ecc 	.word	0x20000ecc

0800d2b4 <__ssputs_r>:
 800d2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2b8:	461f      	mov	r7, r3
 800d2ba:	688e      	ldr	r6, [r1, #8]
 800d2bc:	4682      	mov	sl, r0
 800d2be:	42be      	cmp	r6, r7
 800d2c0:	460c      	mov	r4, r1
 800d2c2:	4690      	mov	r8, r2
 800d2c4:	680b      	ldr	r3, [r1, #0]
 800d2c6:	d82c      	bhi.n	800d322 <__ssputs_r+0x6e>
 800d2c8:	898a      	ldrh	r2, [r1, #12]
 800d2ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2ce:	d026      	beq.n	800d31e <__ssputs_r+0x6a>
 800d2d0:	6965      	ldr	r5, [r4, #20]
 800d2d2:	6909      	ldr	r1, [r1, #16]
 800d2d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2d8:	eba3 0901 	sub.w	r9, r3, r1
 800d2dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2e0:	1c7b      	adds	r3, r7, #1
 800d2e2:	444b      	add	r3, r9
 800d2e4:	106d      	asrs	r5, r5, #1
 800d2e6:	429d      	cmp	r5, r3
 800d2e8:	bf38      	it	cc
 800d2ea:	461d      	movcc	r5, r3
 800d2ec:	0553      	lsls	r3, r2, #21
 800d2ee:	d527      	bpl.n	800d340 <__ssputs_r+0x8c>
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	f7ff fe4d 	bl	800cf90 <_malloc_r>
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	b360      	cbz	r0, 800d354 <__ssputs_r+0xa0>
 800d2fa:	464a      	mov	r2, r9
 800d2fc:	6921      	ldr	r1, [r4, #16]
 800d2fe:	f000 faed 	bl	800d8dc <memcpy>
 800d302:	89a3      	ldrh	r3, [r4, #12]
 800d304:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d30c:	81a3      	strh	r3, [r4, #12]
 800d30e:	6126      	str	r6, [r4, #16]
 800d310:	444e      	add	r6, r9
 800d312:	6026      	str	r6, [r4, #0]
 800d314:	463e      	mov	r6, r7
 800d316:	6165      	str	r5, [r4, #20]
 800d318:	eba5 0509 	sub.w	r5, r5, r9
 800d31c:	60a5      	str	r5, [r4, #8]
 800d31e:	42be      	cmp	r6, r7
 800d320:	d900      	bls.n	800d324 <__ssputs_r+0x70>
 800d322:	463e      	mov	r6, r7
 800d324:	4632      	mov	r2, r6
 800d326:	4641      	mov	r1, r8
 800d328:	6820      	ldr	r0, [r4, #0]
 800d32a:	f000 faaf 	bl	800d88c <memmove>
 800d32e:	2000      	movs	r0, #0
 800d330:	68a3      	ldr	r3, [r4, #8]
 800d332:	1b9b      	subs	r3, r3, r6
 800d334:	60a3      	str	r3, [r4, #8]
 800d336:	6823      	ldr	r3, [r4, #0]
 800d338:	4433      	add	r3, r6
 800d33a:	6023      	str	r3, [r4, #0]
 800d33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d340:	462a      	mov	r2, r5
 800d342:	f000 fad9 	bl	800d8f8 <_realloc_r>
 800d346:	4606      	mov	r6, r0
 800d348:	2800      	cmp	r0, #0
 800d34a:	d1e0      	bne.n	800d30e <__ssputs_r+0x5a>
 800d34c:	4650      	mov	r0, sl
 800d34e:	6921      	ldr	r1, [r4, #16]
 800d350:	f7ff ff68 	bl	800d224 <_free_r>
 800d354:	230c      	movs	r3, #12
 800d356:	f8ca 3000 	str.w	r3, [sl]
 800d35a:	89a3      	ldrh	r3, [r4, #12]
 800d35c:	f04f 30ff 	mov.w	r0, #4294967295
 800d360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d364:	81a3      	strh	r3, [r4, #12]
 800d366:	e7e9      	b.n	800d33c <__ssputs_r+0x88>

0800d368 <_svfiprintf_r>:
 800d368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36c:	4698      	mov	r8, r3
 800d36e:	898b      	ldrh	r3, [r1, #12]
 800d370:	4607      	mov	r7, r0
 800d372:	061b      	lsls	r3, r3, #24
 800d374:	460d      	mov	r5, r1
 800d376:	4614      	mov	r4, r2
 800d378:	b09d      	sub	sp, #116	; 0x74
 800d37a:	d50e      	bpl.n	800d39a <_svfiprintf_r+0x32>
 800d37c:	690b      	ldr	r3, [r1, #16]
 800d37e:	b963      	cbnz	r3, 800d39a <_svfiprintf_r+0x32>
 800d380:	2140      	movs	r1, #64	; 0x40
 800d382:	f7ff fe05 	bl	800cf90 <_malloc_r>
 800d386:	6028      	str	r0, [r5, #0]
 800d388:	6128      	str	r0, [r5, #16]
 800d38a:	b920      	cbnz	r0, 800d396 <_svfiprintf_r+0x2e>
 800d38c:	230c      	movs	r3, #12
 800d38e:	603b      	str	r3, [r7, #0]
 800d390:	f04f 30ff 	mov.w	r0, #4294967295
 800d394:	e0d0      	b.n	800d538 <_svfiprintf_r+0x1d0>
 800d396:	2340      	movs	r3, #64	; 0x40
 800d398:	616b      	str	r3, [r5, #20]
 800d39a:	2300      	movs	r3, #0
 800d39c:	9309      	str	r3, [sp, #36]	; 0x24
 800d39e:	2320      	movs	r3, #32
 800d3a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3a4:	2330      	movs	r3, #48	; 0x30
 800d3a6:	f04f 0901 	mov.w	r9, #1
 800d3aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3ae:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d550 <_svfiprintf_r+0x1e8>
 800d3b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3b6:	4623      	mov	r3, r4
 800d3b8:	469a      	mov	sl, r3
 800d3ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3be:	b10a      	cbz	r2, 800d3c4 <_svfiprintf_r+0x5c>
 800d3c0:	2a25      	cmp	r2, #37	; 0x25
 800d3c2:	d1f9      	bne.n	800d3b8 <_svfiprintf_r+0x50>
 800d3c4:	ebba 0b04 	subs.w	fp, sl, r4
 800d3c8:	d00b      	beq.n	800d3e2 <_svfiprintf_r+0x7a>
 800d3ca:	465b      	mov	r3, fp
 800d3cc:	4622      	mov	r2, r4
 800d3ce:	4629      	mov	r1, r5
 800d3d0:	4638      	mov	r0, r7
 800d3d2:	f7ff ff6f 	bl	800d2b4 <__ssputs_r>
 800d3d6:	3001      	adds	r0, #1
 800d3d8:	f000 80a9 	beq.w	800d52e <_svfiprintf_r+0x1c6>
 800d3dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3de:	445a      	add	r2, fp
 800d3e0:	9209      	str	r2, [sp, #36]	; 0x24
 800d3e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	f000 80a1 	beq.w	800d52e <_svfiprintf_r+0x1c6>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d3f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3f6:	f10a 0a01 	add.w	sl, sl, #1
 800d3fa:	9304      	str	r3, [sp, #16]
 800d3fc:	9307      	str	r3, [sp, #28]
 800d3fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d402:	931a      	str	r3, [sp, #104]	; 0x68
 800d404:	4654      	mov	r4, sl
 800d406:	2205      	movs	r2, #5
 800d408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d40c:	4850      	ldr	r0, [pc, #320]	; (800d550 <_svfiprintf_r+0x1e8>)
 800d40e:	f000 fa57 	bl	800d8c0 <memchr>
 800d412:	9a04      	ldr	r2, [sp, #16]
 800d414:	b9d8      	cbnz	r0, 800d44e <_svfiprintf_r+0xe6>
 800d416:	06d0      	lsls	r0, r2, #27
 800d418:	bf44      	itt	mi
 800d41a:	2320      	movmi	r3, #32
 800d41c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d420:	0711      	lsls	r1, r2, #28
 800d422:	bf44      	itt	mi
 800d424:	232b      	movmi	r3, #43	; 0x2b
 800d426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d42a:	f89a 3000 	ldrb.w	r3, [sl]
 800d42e:	2b2a      	cmp	r3, #42	; 0x2a
 800d430:	d015      	beq.n	800d45e <_svfiprintf_r+0xf6>
 800d432:	4654      	mov	r4, sl
 800d434:	2000      	movs	r0, #0
 800d436:	f04f 0c0a 	mov.w	ip, #10
 800d43a:	9a07      	ldr	r2, [sp, #28]
 800d43c:	4621      	mov	r1, r4
 800d43e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d442:	3b30      	subs	r3, #48	; 0x30
 800d444:	2b09      	cmp	r3, #9
 800d446:	d94d      	bls.n	800d4e4 <_svfiprintf_r+0x17c>
 800d448:	b1b0      	cbz	r0, 800d478 <_svfiprintf_r+0x110>
 800d44a:	9207      	str	r2, [sp, #28]
 800d44c:	e014      	b.n	800d478 <_svfiprintf_r+0x110>
 800d44e:	eba0 0308 	sub.w	r3, r0, r8
 800d452:	fa09 f303 	lsl.w	r3, r9, r3
 800d456:	4313      	orrs	r3, r2
 800d458:	46a2      	mov	sl, r4
 800d45a:	9304      	str	r3, [sp, #16]
 800d45c:	e7d2      	b.n	800d404 <_svfiprintf_r+0x9c>
 800d45e:	9b03      	ldr	r3, [sp, #12]
 800d460:	1d19      	adds	r1, r3, #4
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	9103      	str	r1, [sp, #12]
 800d466:	2b00      	cmp	r3, #0
 800d468:	bfbb      	ittet	lt
 800d46a:	425b      	neglt	r3, r3
 800d46c:	f042 0202 	orrlt.w	r2, r2, #2
 800d470:	9307      	strge	r3, [sp, #28]
 800d472:	9307      	strlt	r3, [sp, #28]
 800d474:	bfb8      	it	lt
 800d476:	9204      	strlt	r2, [sp, #16]
 800d478:	7823      	ldrb	r3, [r4, #0]
 800d47a:	2b2e      	cmp	r3, #46	; 0x2e
 800d47c:	d10c      	bne.n	800d498 <_svfiprintf_r+0x130>
 800d47e:	7863      	ldrb	r3, [r4, #1]
 800d480:	2b2a      	cmp	r3, #42	; 0x2a
 800d482:	d134      	bne.n	800d4ee <_svfiprintf_r+0x186>
 800d484:	9b03      	ldr	r3, [sp, #12]
 800d486:	3402      	adds	r4, #2
 800d488:	1d1a      	adds	r2, r3, #4
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	9203      	str	r2, [sp, #12]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	bfb8      	it	lt
 800d492:	f04f 33ff 	movlt.w	r3, #4294967295
 800d496:	9305      	str	r3, [sp, #20]
 800d498:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d554 <_svfiprintf_r+0x1ec>
 800d49c:	2203      	movs	r2, #3
 800d49e:	4650      	mov	r0, sl
 800d4a0:	7821      	ldrb	r1, [r4, #0]
 800d4a2:	f000 fa0d 	bl	800d8c0 <memchr>
 800d4a6:	b138      	cbz	r0, 800d4b8 <_svfiprintf_r+0x150>
 800d4a8:	2240      	movs	r2, #64	; 0x40
 800d4aa:	9b04      	ldr	r3, [sp, #16]
 800d4ac:	eba0 000a 	sub.w	r0, r0, sl
 800d4b0:	4082      	lsls	r2, r0
 800d4b2:	4313      	orrs	r3, r2
 800d4b4:	3401      	adds	r4, #1
 800d4b6:	9304      	str	r3, [sp, #16]
 800d4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4bc:	2206      	movs	r2, #6
 800d4be:	4826      	ldr	r0, [pc, #152]	; (800d558 <_svfiprintf_r+0x1f0>)
 800d4c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4c4:	f000 f9fc 	bl	800d8c0 <memchr>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d038      	beq.n	800d53e <_svfiprintf_r+0x1d6>
 800d4cc:	4b23      	ldr	r3, [pc, #140]	; (800d55c <_svfiprintf_r+0x1f4>)
 800d4ce:	bb1b      	cbnz	r3, 800d518 <_svfiprintf_r+0x1b0>
 800d4d0:	9b03      	ldr	r3, [sp, #12]
 800d4d2:	3307      	adds	r3, #7
 800d4d4:	f023 0307 	bic.w	r3, r3, #7
 800d4d8:	3308      	adds	r3, #8
 800d4da:	9303      	str	r3, [sp, #12]
 800d4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4de:	4433      	add	r3, r6
 800d4e0:	9309      	str	r3, [sp, #36]	; 0x24
 800d4e2:	e768      	b.n	800d3b6 <_svfiprintf_r+0x4e>
 800d4e4:	460c      	mov	r4, r1
 800d4e6:	2001      	movs	r0, #1
 800d4e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4ec:	e7a6      	b.n	800d43c <_svfiprintf_r+0xd4>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	f04f 0c0a 	mov.w	ip, #10
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	3401      	adds	r4, #1
 800d4f8:	9305      	str	r3, [sp, #20]
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d500:	3a30      	subs	r2, #48	; 0x30
 800d502:	2a09      	cmp	r2, #9
 800d504:	d903      	bls.n	800d50e <_svfiprintf_r+0x1a6>
 800d506:	2b00      	cmp	r3, #0
 800d508:	d0c6      	beq.n	800d498 <_svfiprintf_r+0x130>
 800d50a:	9105      	str	r1, [sp, #20]
 800d50c:	e7c4      	b.n	800d498 <_svfiprintf_r+0x130>
 800d50e:	4604      	mov	r4, r0
 800d510:	2301      	movs	r3, #1
 800d512:	fb0c 2101 	mla	r1, ip, r1, r2
 800d516:	e7f0      	b.n	800d4fa <_svfiprintf_r+0x192>
 800d518:	ab03      	add	r3, sp, #12
 800d51a:	9300      	str	r3, [sp, #0]
 800d51c:	462a      	mov	r2, r5
 800d51e:	4638      	mov	r0, r7
 800d520:	4b0f      	ldr	r3, [pc, #60]	; (800d560 <_svfiprintf_r+0x1f8>)
 800d522:	a904      	add	r1, sp, #16
 800d524:	f3af 8000 	nop.w
 800d528:	1c42      	adds	r2, r0, #1
 800d52a:	4606      	mov	r6, r0
 800d52c:	d1d6      	bne.n	800d4dc <_svfiprintf_r+0x174>
 800d52e:	89ab      	ldrh	r3, [r5, #12]
 800d530:	065b      	lsls	r3, r3, #25
 800d532:	f53f af2d 	bmi.w	800d390 <_svfiprintf_r+0x28>
 800d536:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d538:	b01d      	add	sp, #116	; 0x74
 800d53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d53e:	ab03      	add	r3, sp, #12
 800d540:	9300      	str	r3, [sp, #0]
 800d542:	462a      	mov	r2, r5
 800d544:	4638      	mov	r0, r7
 800d546:	4b06      	ldr	r3, [pc, #24]	; (800d560 <_svfiprintf_r+0x1f8>)
 800d548:	a904      	add	r1, sp, #16
 800d54a:	f000 f87d 	bl	800d648 <_printf_i>
 800d54e:	e7eb      	b.n	800d528 <_svfiprintf_r+0x1c0>
 800d550:	0800e8bb 	.word	0x0800e8bb
 800d554:	0800e8c1 	.word	0x0800e8c1
 800d558:	0800e8c5 	.word	0x0800e8c5
 800d55c:	00000000 	.word	0x00000000
 800d560:	0800d2b5 	.word	0x0800d2b5

0800d564 <_printf_common>:
 800d564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d568:	4616      	mov	r6, r2
 800d56a:	4699      	mov	r9, r3
 800d56c:	688a      	ldr	r2, [r1, #8]
 800d56e:	690b      	ldr	r3, [r1, #16]
 800d570:	4607      	mov	r7, r0
 800d572:	4293      	cmp	r3, r2
 800d574:	bfb8      	it	lt
 800d576:	4613      	movlt	r3, r2
 800d578:	6033      	str	r3, [r6, #0]
 800d57a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d57e:	460c      	mov	r4, r1
 800d580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d584:	b10a      	cbz	r2, 800d58a <_printf_common+0x26>
 800d586:	3301      	adds	r3, #1
 800d588:	6033      	str	r3, [r6, #0]
 800d58a:	6823      	ldr	r3, [r4, #0]
 800d58c:	0699      	lsls	r1, r3, #26
 800d58e:	bf42      	ittt	mi
 800d590:	6833      	ldrmi	r3, [r6, #0]
 800d592:	3302      	addmi	r3, #2
 800d594:	6033      	strmi	r3, [r6, #0]
 800d596:	6825      	ldr	r5, [r4, #0]
 800d598:	f015 0506 	ands.w	r5, r5, #6
 800d59c:	d106      	bne.n	800d5ac <_printf_common+0x48>
 800d59e:	f104 0a19 	add.w	sl, r4, #25
 800d5a2:	68e3      	ldr	r3, [r4, #12]
 800d5a4:	6832      	ldr	r2, [r6, #0]
 800d5a6:	1a9b      	subs	r3, r3, r2
 800d5a8:	42ab      	cmp	r3, r5
 800d5aa:	dc2b      	bgt.n	800d604 <_printf_common+0xa0>
 800d5ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5b0:	1e13      	subs	r3, r2, #0
 800d5b2:	6822      	ldr	r2, [r4, #0]
 800d5b4:	bf18      	it	ne
 800d5b6:	2301      	movne	r3, #1
 800d5b8:	0692      	lsls	r2, r2, #26
 800d5ba:	d430      	bmi.n	800d61e <_printf_common+0xba>
 800d5bc:	4649      	mov	r1, r9
 800d5be:	4638      	mov	r0, r7
 800d5c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5c4:	47c0      	blx	r8
 800d5c6:	3001      	adds	r0, #1
 800d5c8:	d023      	beq.n	800d612 <_printf_common+0xae>
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	6922      	ldr	r2, [r4, #16]
 800d5ce:	f003 0306 	and.w	r3, r3, #6
 800d5d2:	2b04      	cmp	r3, #4
 800d5d4:	bf14      	ite	ne
 800d5d6:	2500      	movne	r5, #0
 800d5d8:	6833      	ldreq	r3, [r6, #0]
 800d5da:	f04f 0600 	mov.w	r6, #0
 800d5de:	bf08      	it	eq
 800d5e0:	68e5      	ldreq	r5, [r4, #12]
 800d5e2:	f104 041a 	add.w	r4, r4, #26
 800d5e6:	bf08      	it	eq
 800d5e8:	1aed      	subeq	r5, r5, r3
 800d5ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d5ee:	bf08      	it	eq
 800d5f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	bfc4      	itt	gt
 800d5f8:	1a9b      	subgt	r3, r3, r2
 800d5fa:	18ed      	addgt	r5, r5, r3
 800d5fc:	42b5      	cmp	r5, r6
 800d5fe:	d11a      	bne.n	800d636 <_printf_common+0xd2>
 800d600:	2000      	movs	r0, #0
 800d602:	e008      	b.n	800d616 <_printf_common+0xb2>
 800d604:	2301      	movs	r3, #1
 800d606:	4652      	mov	r2, sl
 800d608:	4649      	mov	r1, r9
 800d60a:	4638      	mov	r0, r7
 800d60c:	47c0      	blx	r8
 800d60e:	3001      	adds	r0, #1
 800d610:	d103      	bne.n	800d61a <_printf_common+0xb6>
 800d612:	f04f 30ff 	mov.w	r0, #4294967295
 800d616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d61a:	3501      	adds	r5, #1
 800d61c:	e7c1      	b.n	800d5a2 <_printf_common+0x3e>
 800d61e:	2030      	movs	r0, #48	; 0x30
 800d620:	18e1      	adds	r1, r4, r3
 800d622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d62c:	4422      	add	r2, r4
 800d62e:	3302      	adds	r3, #2
 800d630:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d634:	e7c2      	b.n	800d5bc <_printf_common+0x58>
 800d636:	2301      	movs	r3, #1
 800d638:	4622      	mov	r2, r4
 800d63a:	4649      	mov	r1, r9
 800d63c:	4638      	mov	r0, r7
 800d63e:	47c0      	blx	r8
 800d640:	3001      	adds	r0, #1
 800d642:	d0e6      	beq.n	800d612 <_printf_common+0xae>
 800d644:	3601      	adds	r6, #1
 800d646:	e7d9      	b.n	800d5fc <_printf_common+0x98>

0800d648 <_printf_i>:
 800d648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d64c:	7e0f      	ldrb	r7, [r1, #24]
 800d64e:	4691      	mov	r9, r2
 800d650:	2f78      	cmp	r7, #120	; 0x78
 800d652:	4680      	mov	r8, r0
 800d654:	460c      	mov	r4, r1
 800d656:	469a      	mov	sl, r3
 800d658:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d65a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d65e:	d807      	bhi.n	800d670 <_printf_i+0x28>
 800d660:	2f62      	cmp	r7, #98	; 0x62
 800d662:	d80a      	bhi.n	800d67a <_printf_i+0x32>
 800d664:	2f00      	cmp	r7, #0
 800d666:	f000 80d5 	beq.w	800d814 <_printf_i+0x1cc>
 800d66a:	2f58      	cmp	r7, #88	; 0x58
 800d66c:	f000 80c1 	beq.w	800d7f2 <_printf_i+0x1aa>
 800d670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d678:	e03a      	b.n	800d6f0 <_printf_i+0xa8>
 800d67a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d67e:	2b15      	cmp	r3, #21
 800d680:	d8f6      	bhi.n	800d670 <_printf_i+0x28>
 800d682:	a101      	add	r1, pc, #4	; (adr r1, 800d688 <_printf_i+0x40>)
 800d684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d688:	0800d6e1 	.word	0x0800d6e1
 800d68c:	0800d6f5 	.word	0x0800d6f5
 800d690:	0800d671 	.word	0x0800d671
 800d694:	0800d671 	.word	0x0800d671
 800d698:	0800d671 	.word	0x0800d671
 800d69c:	0800d671 	.word	0x0800d671
 800d6a0:	0800d6f5 	.word	0x0800d6f5
 800d6a4:	0800d671 	.word	0x0800d671
 800d6a8:	0800d671 	.word	0x0800d671
 800d6ac:	0800d671 	.word	0x0800d671
 800d6b0:	0800d671 	.word	0x0800d671
 800d6b4:	0800d7fb 	.word	0x0800d7fb
 800d6b8:	0800d721 	.word	0x0800d721
 800d6bc:	0800d7b5 	.word	0x0800d7b5
 800d6c0:	0800d671 	.word	0x0800d671
 800d6c4:	0800d671 	.word	0x0800d671
 800d6c8:	0800d81d 	.word	0x0800d81d
 800d6cc:	0800d671 	.word	0x0800d671
 800d6d0:	0800d721 	.word	0x0800d721
 800d6d4:	0800d671 	.word	0x0800d671
 800d6d8:	0800d671 	.word	0x0800d671
 800d6dc:	0800d7bd 	.word	0x0800d7bd
 800d6e0:	682b      	ldr	r3, [r5, #0]
 800d6e2:	1d1a      	adds	r2, r3, #4
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	602a      	str	r2, [r5, #0]
 800d6e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e0a0      	b.n	800d836 <_printf_i+0x1ee>
 800d6f4:	6820      	ldr	r0, [r4, #0]
 800d6f6:	682b      	ldr	r3, [r5, #0]
 800d6f8:	0607      	lsls	r7, r0, #24
 800d6fa:	f103 0104 	add.w	r1, r3, #4
 800d6fe:	6029      	str	r1, [r5, #0]
 800d700:	d501      	bpl.n	800d706 <_printf_i+0xbe>
 800d702:	681e      	ldr	r6, [r3, #0]
 800d704:	e003      	b.n	800d70e <_printf_i+0xc6>
 800d706:	0646      	lsls	r6, r0, #25
 800d708:	d5fb      	bpl.n	800d702 <_printf_i+0xba>
 800d70a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d70e:	2e00      	cmp	r6, #0
 800d710:	da03      	bge.n	800d71a <_printf_i+0xd2>
 800d712:	232d      	movs	r3, #45	; 0x2d
 800d714:	4276      	negs	r6, r6
 800d716:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d71a:	230a      	movs	r3, #10
 800d71c:	4859      	ldr	r0, [pc, #356]	; (800d884 <_printf_i+0x23c>)
 800d71e:	e012      	b.n	800d746 <_printf_i+0xfe>
 800d720:	682b      	ldr	r3, [r5, #0]
 800d722:	6820      	ldr	r0, [r4, #0]
 800d724:	1d19      	adds	r1, r3, #4
 800d726:	6029      	str	r1, [r5, #0]
 800d728:	0605      	lsls	r5, r0, #24
 800d72a:	d501      	bpl.n	800d730 <_printf_i+0xe8>
 800d72c:	681e      	ldr	r6, [r3, #0]
 800d72e:	e002      	b.n	800d736 <_printf_i+0xee>
 800d730:	0641      	lsls	r1, r0, #25
 800d732:	d5fb      	bpl.n	800d72c <_printf_i+0xe4>
 800d734:	881e      	ldrh	r6, [r3, #0]
 800d736:	2f6f      	cmp	r7, #111	; 0x6f
 800d738:	bf0c      	ite	eq
 800d73a:	2308      	moveq	r3, #8
 800d73c:	230a      	movne	r3, #10
 800d73e:	4851      	ldr	r0, [pc, #324]	; (800d884 <_printf_i+0x23c>)
 800d740:	2100      	movs	r1, #0
 800d742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d746:	6865      	ldr	r5, [r4, #4]
 800d748:	2d00      	cmp	r5, #0
 800d74a:	bfa8      	it	ge
 800d74c:	6821      	ldrge	r1, [r4, #0]
 800d74e:	60a5      	str	r5, [r4, #8]
 800d750:	bfa4      	itt	ge
 800d752:	f021 0104 	bicge.w	r1, r1, #4
 800d756:	6021      	strge	r1, [r4, #0]
 800d758:	b90e      	cbnz	r6, 800d75e <_printf_i+0x116>
 800d75a:	2d00      	cmp	r5, #0
 800d75c:	d04b      	beq.n	800d7f6 <_printf_i+0x1ae>
 800d75e:	4615      	mov	r5, r2
 800d760:	fbb6 f1f3 	udiv	r1, r6, r3
 800d764:	fb03 6711 	mls	r7, r3, r1, r6
 800d768:	5dc7      	ldrb	r7, [r0, r7]
 800d76a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d76e:	4637      	mov	r7, r6
 800d770:	42bb      	cmp	r3, r7
 800d772:	460e      	mov	r6, r1
 800d774:	d9f4      	bls.n	800d760 <_printf_i+0x118>
 800d776:	2b08      	cmp	r3, #8
 800d778:	d10b      	bne.n	800d792 <_printf_i+0x14a>
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	07de      	lsls	r6, r3, #31
 800d77e:	d508      	bpl.n	800d792 <_printf_i+0x14a>
 800d780:	6923      	ldr	r3, [r4, #16]
 800d782:	6861      	ldr	r1, [r4, #4]
 800d784:	4299      	cmp	r1, r3
 800d786:	bfde      	ittt	le
 800d788:	2330      	movle	r3, #48	; 0x30
 800d78a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d78e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d792:	1b52      	subs	r2, r2, r5
 800d794:	6122      	str	r2, [r4, #16]
 800d796:	464b      	mov	r3, r9
 800d798:	4621      	mov	r1, r4
 800d79a:	4640      	mov	r0, r8
 800d79c:	f8cd a000 	str.w	sl, [sp]
 800d7a0:	aa03      	add	r2, sp, #12
 800d7a2:	f7ff fedf 	bl	800d564 <_printf_common>
 800d7a6:	3001      	adds	r0, #1
 800d7a8:	d14a      	bne.n	800d840 <_printf_i+0x1f8>
 800d7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ae:	b004      	add	sp, #16
 800d7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	f043 0320 	orr.w	r3, r3, #32
 800d7ba:	6023      	str	r3, [r4, #0]
 800d7bc:	2778      	movs	r7, #120	; 0x78
 800d7be:	4832      	ldr	r0, [pc, #200]	; (800d888 <_printf_i+0x240>)
 800d7c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d7c4:	6823      	ldr	r3, [r4, #0]
 800d7c6:	6829      	ldr	r1, [r5, #0]
 800d7c8:	061f      	lsls	r7, r3, #24
 800d7ca:	f851 6b04 	ldr.w	r6, [r1], #4
 800d7ce:	d402      	bmi.n	800d7d6 <_printf_i+0x18e>
 800d7d0:	065f      	lsls	r7, r3, #25
 800d7d2:	bf48      	it	mi
 800d7d4:	b2b6      	uxthmi	r6, r6
 800d7d6:	07df      	lsls	r7, r3, #31
 800d7d8:	bf48      	it	mi
 800d7da:	f043 0320 	orrmi.w	r3, r3, #32
 800d7de:	6029      	str	r1, [r5, #0]
 800d7e0:	bf48      	it	mi
 800d7e2:	6023      	strmi	r3, [r4, #0]
 800d7e4:	b91e      	cbnz	r6, 800d7ee <_printf_i+0x1a6>
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	f023 0320 	bic.w	r3, r3, #32
 800d7ec:	6023      	str	r3, [r4, #0]
 800d7ee:	2310      	movs	r3, #16
 800d7f0:	e7a6      	b.n	800d740 <_printf_i+0xf8>
 800d7f2:	4824      	ldr	r0, [pc, #144]	; (800d884 <_printf_i+0x23c>)
 800d7f4:	e7e4      	b.n	800d7c0 <_printf_i+0x178>
 800d7f6:	4615      	mov	r5, r2
 800d7f8:	e7bd      	b.n	800d776 <_printf_i+0x12e>
 800d7fa:	682b      	ldr	r3, [r5, #0]
 800d7fc:	6826      	ldr	r6, [r4, #0]
 800d7fe:	1d18      	adds	r0, r3, #4
 800d800:	6961      	ldr	r1, [r4, #20]
 800d802:	6028      	str	r0, [r5, #0]
 800d804:	0635      	lsls	r5, r6, #24
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	d501      	bpl.n	800d80e <_printf_i+0x1c6>
 800d80a:	6019      	str	r1, [r3, #0]
 800d80c:	e002      	b.n	800d814 <_printf_i+0x1cc>
 800d80e:	0670      	lsls	r0, r6, #25
 800d810:	d5fb      	bpl.n	800d80a <_printf_i+0x1c2>
 800d812:	8019      	strh	r1, [r3, #0]
 800d814:	2300      	movs	r3, #0
 800d816:	4615      	mov	r5, r2
 800d818:	6123      	str	r3, [r4, #16]
 800d81a:	e7bc      	b.n	800d796 <_printf_i+0x14e>
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	2100      	movs	r1, #0
 800d820:	1d1a      	adds	r2, r3, #4
 800d822:	602a      	str	r2, [r5, #0]
 800d824:	681d      	ldr	r5, [r3, #0]
 800d826:	6862      	ldr	r2, [r4, #4]
 800d828:	4628      	mov	r0, r5
 800d82a:	f000 f849 	bl	800d8c0 <memchr>
 800d82e:	b108      	cbz	r0, 800d834 <_printf_i+0x1ec>
 800d830:	1b40      	subs	r0, r0, r5
 800d832:	6060      	str	r0, [r4, #4]
 800d834:	6863      	ldr	r3, [r4, #4]
 800d836:	6123      	str	r3, [r4, #16]
 800d838:	2300      	movs	r3, #0
 800d83a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d83e:	e7aa      	b.n	800d796 <_printf_i+0x14e>
 800d840:	462a      	mov	r2, r5
 800d842:	4649      	mov	r1, r9
 800d844:	4640      	mov	r0, r8
 800d846:	6923      	ldr	r3, [r4, #16]
 800d848:	47d0      	blx	sl
 800d84a:	3001      	adds	r0, #1
 800d84c:	d0ad      	beq.n	800d7aa <_printf_i+0x162>
 800d84e:	6823      	ldr	r3, [r4, #0]
 800d850:	079b      	lsls	r3, r3, #30
 800d852:	d413      	bmi.n	800d87c <_printf_i+0x234>
 800d854:	68e0      	ldr	r0, [r4, #12]
 800d856:	9b03      	ldr	r3, [sp, #12]
 800d858:	4298      	cmp	r0, r3
 800d85a:	bfb8      	it	lt
 800d85c:	4618      	movlt	r0, r3
 800d85e:	e7a6      	b.n	800d7ae <_printf_i+0x166>
 800d860:	2301      	movs	r3, #1
 800d862:	4632      	mov	r2, r6
 800d864:	4649      	mov	r1, r9
 800d866:	4640      	mov	r0, r8
 800d868:	47d0      	blx	sl
 800d86a:	3001      	adds	r0, #1
 800d86c:	d09d      	beq.n	800d7aa <_printf_i+0x162>
 800d86e:	3501      	adds	r5, #1
 800d870:	68e3      	ldr	r3, [r4, #12]
 800d872:	9903      	ldr	r1, [sp, #12]
 800d874:	1a5b      	subs	r3, r3, r1
 800d876:	42ab      	cmp	r3, r5
 800d878:	dcf2      	bgt.n	800d860 <_printf_i+0x218>
 800d87a:	e7eb      	b.n	800d854 <_printf_i+0x20c>
 800d87c:	2500      	movs	r5, #0
 800d87e:	f104 0619 	add.w	r6, r4, #25
 800d882:	e7f5      	b.n	800d870 <_printf_i+0x228>
 800d884:	0800e8cc 	.word	0x0800e8cc
 800d888:	0800e8dd 	.word	0x0800e8dd

0800d88c <memmove>:
 800d88c:	4288      	cmp	r0, r1
 800d88e:	b510      	push	{r4, lr}
 800d890:	eb01 0402 	add.w	r4, r1, r2
 800d894:	d902      	bls.n	800d89c <memmove+0x10>
 800d896:	4284      	cmp	r4, r0
 800d898:	4623      	mov	r3, r4
 800d89a:	d807      	bhi.n	800d8ac <memmove+0x20>
 800d89c:	1e43      	subs	r3, r0, #1
 800d89e:	42a1      	cmp	r1, r4
 800d8a0:	d008      	beq.n	800d8b4 <memmove+0x28>
 800d8a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8aa:	e7f8      	b.n	800d89e <memmove+0x12>
 800d8ac:	4601      	mov	r1, r0
 800d8ae:	4402      	add	r2, r0
 800d8b0:	428a      	cmp	r2, r1
 800d8b2:	d100      	bne.n	800d8b6 <memmove+0x2a>
 800d8b4:	bd10      	pop	{r4, pc}
 800d8b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8be:	e7f7      	b.n	800d8b0 <memmove+0x24>

0800d8c0 <memchr>:
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	b510      	push	{r4, lr}
 800d8c4:	b2c9      	uxtb	r1, r1
 800d8c6:	4402      	add	r2, r0
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	d101      	bne.n	800d8d2 <memchr+0x12>
 800d8ce:	2000      	movs	r0, #0
 800d8d0:	e003      	b.n	800d8da <memchr+0x1a>
 800d8d2:	7804      	ldrb	r4, [r0, #0]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	428c      	cmp	r4, r1
 800d8d8:	d1f6      	bne.n	800d8c8 <memchr+0x8>
 800d8da:	bd10      	pop	{r4, pc}

0800d8dc <memcpy>:
 800d8dc:	440a      	add	r2, r1
 800d8de:	4291      	cmp	r1, r2
 800d8e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8e4:	d100      	bne.n	800d8e8 <memcpy+0xc>
 800d8e6:	4770      	bx	lr
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8ee:	4291      	cmp	r1, r2
 800d8f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8f4:	d1f9      	bne.n	800d8ea <memcpy+0xe>
 800d8f6:	bd10      	pop	{r4, pc}

0800d8f8 <_realloc_r>:
 800d8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8fc:	4680      	mov	r8, r0
 800d8fe:	4614      	mov	r4, r2
 800d900:	460e      	mov	r6, r1
 800d902:	b921      	cbnz	r1, 800d90e <_realloc_r+0x16>
 800d904:	4611      	mov	r1, r2
 800d906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d90a:	f7ff bb41 	b.w	800cf90 <_malloc_r>
 800d90e:	b92a      	cbnz	r2, 800d91c <_realloc_r+0x24>
 800d910:	f7ff fc88 	bl	800d224 <_free_r>
 800d914:	4625      	mov	r5, r4
 800d916:	4628      	mov	r0, r5
 800d918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d91c:	f000 f81b 	bl	800d956 <_malloc_usable_size_r>
 800d920:	4284      	cmp	r4, r0
 800d922:	4607      	mov	r7, r0
 800d924:	d802      	bhi.n	800d92c <_realloc_r+0x34>
 800d926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d92a:	d812      	bhi.n	800d952 <_realloc_r+0x5a>
 800d92c:	4621      	mov	r1, r4
 800d92e:	4640      	mov	r0, r8
 800d930:	f7ff fb2e 	bl	800cf90 <_malloc_r>
 800d934:	4605      	mov	r5, r0
 800d936:	2800      	cmp	r0, #0
 800d938:	d0ed      	beq.n	800d916 <_realloc_r+0x1e>
 800d93a:	42bc      	cmp	r4, r7
 800d93c:	4622      	mov	r2, r4
 800d93e:	4631      	mov	r1, r6
 800d940:	bf28      	it	cs
 800d942:	463a      	movcs	r2, r7
 800d944:	f7ff ffca 	bl	800d8dc <memcpy>
 800d948:	4631      	mov	r1, r6
 800d94a:	4640      	mov	r0, r8
 800d94c:	f7ff fc6a 	bl	800d224 <_free_r>
 800d950:	e7e1      	b.n	800d916 <_realloc_r+0x1e>
 800d952:	4635      	mov	r5, r6
 800d954:	e7df      	b.n	800d916 <_realloc_r+0x1e>

0800d956 <_malloc_usable_size_r>:
 800d956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d95a:	1f18      	subs	r0, r3, #4
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	bfbc      	itt	lt
 800d960:	580b      	ldrlt	r3, [r1, r0]
 800d962:	18c0      	addlt	r0, r0, r3
 800d964:	4770      	bx	lr
	...

0800d968 <_init>:
 800d968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d96a:	bf00      	nop
 800d96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d96e:	bc08      	pop	{r3}
 800d970:	469e      	mov	lr, r3
 800d972:	4770      	bx	lr

0800d974 <_fini>:
 800d974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d976:	bf00      	nop
 800d978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d97a:	bc08      	pop	{r3}
 800d97c:	469e      	mov	lr, r3
 800d97e:	4770      	bx	lr
