
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd4  0800cdc8  0800cdc8  0001cdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd9c  0800dd9c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd9c  0800dd9c  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd9c  0800dd9c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd9c  0800dd9c  0001dd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dda0  0800dda0  0001dda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800dda4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000fc  0800dea0  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800dea0  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016832  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ef  00000000  00000000  0003699a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00039e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e7b  00000000  00000000  0003b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c69b  00000000  00000000  0003bf93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c24e  00000000  00000000  0005862e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee50  00000000  00000000  0007487c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005210  00000000  00000000  001136cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001188dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cdb0 	.word	0x0800cdb0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800cdb0 	.word	0x0800cdb0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fc20 	bl	8009a94 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fa98 	bl	800878c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	200003a8 	.word	0x200003a8
 80004c0:	200001f9 	.word	0x200001f9
 80004c4:	20000221 	.word	0x20000221
 80004c8:	20000224 	.word	0x20000224
 80004cc:	20000225 	.word	0x20000225
 80004d0:	20000226 	.word	0x20000226
 80004d4:	20000227 	.word	0x20000227
 80004d8:	20000228 	.word	0x20000228
 80004dc:	20000229 	.word	0x20000229
 80004e0:	20000239 	.word	0x20000239
 80004e4:	2000022a 	.word	0x2000022a
 80004e8:	2000023a 	.word	0x2000023a
 80004ec:	2000022b 	.word	0x2000022b
 80004f0:	2000023b 	.word	0x2000023b
 80004f4:	2000022e 	.word	0x2000022e
 80004f8:	2000022f 	.word	0x2000022f
 80004fc:	20000230 	.word	0x20000230
 8000500:	20000231 	.word	0x20000231
 8000504:	20000232 	.word	0x20000232
 8000508:	20000233 	.word	0x20000233
 800050c:	20000234 	.word	0x20000234
 8000510:	20000235 	.word	0x20000235
 8000514:	20000236 	.word	0x20000236
 8000518:	20000237 	.word	0x20000237
 800051c:	20000238 	.word	0x20000238
 8000520:	2000023c 	.word	0x2000023c
 8000524:	2000023e 	.word	0x2000023e
 8000528:	2000021c 	.word	0x2000021c
 800052c:	2000021d 	.word	0x2000021d
 8000530:	2000021e 	.word	0x2000021e
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	2000021f 	.word	0x2000021f
 8000540:	20000241 	.word	0x20000241
 8000544:	2000023f 	.word	0x2000023f
 8000548:	2000022d 	.word	0x2000022d
 800054c:	20000240 	.word	0x20000240
 8000550:	2000022c 	.word	0x2000022c
 8000554:	20000242 	.word	0x20000242
 8000558:	20000243 	.word	0x20000243
 800055c:	20000244 	.word	0x20000244
 8000560:	20000245 	.word	0x20000245
 8000564:	20000246 	.word	0x20000246
 8000568:	20000247 	.word	0x20000247
 800056c:	20000248 	.word	0x20000248
 8000570:	20000249 	.word	0x20000249
 8000574:	2000024a 	.word	0x2000024a
 8000578:	2000024b 	.word	0x2000024b
 800057c:	200001f8 	.word	0x200001f8
	}

	if(kapi1AcSure>5) {
 8000580:	4b6b      	ldr	r3, [pc, #428]	; (8000730 <eepromKontrol+0x4fc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b69      	ldr	r3, [pc, #420]	; (8000730 <eepromKontrol+0x4fc>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b69      	ldr	r3, [pc, #420]	; (8000734 <eepromKontrol+0x500>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b67      	ldr	r3, [pc, #412]	; (8000734 <eepromKontrol+0x500>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b66      	ldr	r3, [pc, #408]	; (8000738 <eepromKontrol+0x504>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b64      	ldr	r3, [pc, #400]	; (8000738 <eepromKontrol+0x504>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b64      	ldr	r3, [pc, #400]	; (800073c <eepromKontrol+0x508>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b62      	ldr	r3, [pc, #392]	; (800073c <eepromKontrol+0x508>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b61      	ldr	r3, [pc, #388]	; (8000740 <eepromKontrol+0x50c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b5f      	ldr	r3, [pc, #380]	; (8000740 <eepromKontrol+0x50c>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b5f      	ldr	r3, [pc, #380]	; (8000744 <eepromKontrol+0x510>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b5d      	ldr	r3, [pc, #372]	; (8000744 <eepromKontrol+0x510>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <eepromKontrol+0x514>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b5a      	ldr	r3, [pc, #360]	; (8000748 <eepromKontrol+0x514>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b5a      	ldr	r3, [pc, #360]	; (800074c <eepromKontrol+0x518>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b58      	ldr	r3, [pc, #352]	; (800074c <eepromKontrol+0x518>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b57      	ldr	r3, [pc, #348]	; (8000750 <eepromKontrol+0x51c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b55      	ldr	r3, [pc, #340]	; (8000750 <eepromKontrol+0x51c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b55      	ldr	r3, [pc, #340]	; (8000754 <eepromKontrol+0x520>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b53      	ldr	r3, [pc, #332]	; (8000754 <eepromKontrol+0x520>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b52      	ldr	r3, [pc, #328]	; (8000758 <eepromKontrol+0x524>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b50      	ldr	r3, [pc, #320]	; (8000758 <eepromKontrol+0x524>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b50      	ldr	r3, [pc, #320]	; (800075c <eepromKontrol+0x528>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b4e      	ldr	r3, [pc, #312]	; (800075c <eepromKontrol+0x528>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b4d      	ldr	r3, [pc, #308]	; (8000760 <eepromKontrol+0x52c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <eepromKontrol+0x52c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b4b      	ldr	r3, [pc, #300]	; (8000764 <eepromKontrol+0x530>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b49      	ldr	r3, [pc, #292]	; (8000764 <eepromKontrol+0x530>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b48      	ldr	r3, [pc, #288]	; (8000768 <eepromKontrol+0x534>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b46      	ldr	r3, [pc, #280]	; (8000768 <eepromKontrol+0x534>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <eepromKontrol+0x538>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b44      	ldr	r3, [pc, #272]	; (800076c <eepromKontrol+0x538>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b43      	ldr	r3, [pc, #268]	; (8000770 <eepromKontrol+0x53c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b41      	ldr	r3, [pc, #260]	; (8000770 <eepromKontrol+0x53c>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b41      	ldr	r3, [pc, #260]	; (8000774 <eepromKontrol+0x540>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b3f      	ldr	r3, [pc, #252]	; (8000774 <eepromKontrol+0x540>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <eepromKontrol+0x544>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b3c      	ldr	r3, [pc, #240]	; (8000778 <eepromKontrol+0x544>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b3c      	ldr	r3, [pc, #240]	; (800077c <eepromKontrol+0x548>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b3a      	ldr	r3, [pc, #232]	; (800077c <eepromKontrol+0x548>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <eepromKontrol+0x54c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b37      	ldr	r3, [pc, #220]	; (8000780 <eepromKontrol+0x54c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b37      	ldr	r3, [pc, #220]	; (8000784 <eepromKontrol+0x550>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <eepromKontrol+0x550>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineIDInt, &eepromData[idStartPos], 12);
 80006b4:	4b34      	ldr	r3, [pc, #208]	; (8000788 <eepromKontrol+0x554>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a34      	ldr	r2, [pc, #208]	; (800078c <eepromKontrol+0x558>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b34      	ldr	r3, [pc, #208]	; (8000790 <eepromKontrol+0x55c>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <eepromKontrol+0x560>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a2f      	ldr	r2, [pc, #188]	; (800078c <eepromKontrol+0x558>)
 80006d0:	441a      	add	r2, r3
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <eepromKontrol+0x564>)
 80006d4:	6811      	ldr	r1, [r2, #0]
 80006d6:	6855      	ldr	r5, [r2, #4]
 80006d8:	6894      	ldr	r4, [r2, #8]
 80006da:	68d0      	ldr	r0, [r2, #12]
 80006dc:	6019      	str	r1, [r3, #0]
 80006de:	605d      	str	r5, [r3, #4]
 80006e0:	609c      	str	r4, [r3, #8]
 80006e2:	60d8      	str	r0, [r3, #12]
 80006e4:	6911      	ldr	r1, [r2, #16]
 80006e6:	6119      	str	r1, [r3, #16]
	memcpy(wifiPassInt, &eepromData[passStartPos], 20);
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <eepromKontrol+0x568>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a27      	ldr	r2, [pc, #156]	; (800078c <eepromKontrol+0x558>)
 80006ee:	441a      	add	r2, r3
 80006f0:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <eepromKontrol+0x56c>)
 80006f2:	6811      	ldr	r1, [r2, #0]
 80006f4:	6855      	ldr	r5, [r2, #4]
 80006f6:	6894      	ldr	r4, [r2, #8]
 80006f8:	68d0      	ldr	r0, [r2, #12]
 80006fa:	6019      	str	r1, [r3, #0]
 80006fc:	605d      	str	r5, [r3, #4]
 80006fe:	609c      	str	r4, [r3, #8]
 8000700:	60d8      	str	r0, [r3, #12]
 8000702:	6911      	ldr	r1, [r2, #16]
 8000704:	6119      	str	r1, [r3, #16]
	HAL_Delay(200);
 8000706:	20c8      	movs	r0, #200	; 0xc8
 8000708:	f008 f840 	bl	800878c <HAL_Delay>
	convertArrays(1);
 800070c:	2001      	movs	r0, #1
 800070e:	f000 f849 	bl	80007a4 <convertArrays>
	HAL_Delay(50);
 8000712:	2032      	movs	r0, #50	; 0x32
 8000714:	f008 f83a 	bl	800878c <HAL_Delay>
	convertArrays(2);
 8000718:	2002      	movs	r0, #2
 800071a:	f000 f843 	bl	80007a4 <convertArrays>
	HAL_Delay(50);
 800071e:	2032      	movs	r0, #50	; 0x32
 8000720:	f008 f834 	bl	800878c <HAL_Delay>
	convertArrays(3);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 f83d 	bl	80007a4 <convertArrays>
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bdb0      	pop	{r4, r5, r7, pc}
 8000730:	20000239 	.word	0x20000239
 8000734:	2000022a 	.word	0x2000022a
 8000738:	2000023a 	.word	0x2000023a
 800073c:	2000022b 	.word	0x2000022b
 8000740:	2000022d 	.word	0x2000022d
 8000744:	2000023b 	.word	0x2000023b
 8000748:	2000022e 	.word	0x2000022e
 800074c:	2000022f 	.word	0x2000022f
 8000750:	20000230 	.word	0x20000230
 8000754:	20000231 	.word	0x20000231
 8000758:	20000232 	.word	0x20000232
 800075c:	20000233 	.word	0x20000233
 8000760:	20000234 	.word	0x20000234
 8000764:	20000235 	.word	0x20000235
 8000768:	20000236 	.word	0x20000236
 800076c:	20000237 	.word	0x20000237
 8000770:	20000238 	.word	0x20000238
 8000774:	2000023c 	.word	0x2000023c
 8000778:	2000023e 	.word	0x2000023e
 800077c:	20000240 	.word	0x20000240
 8000780:	20000241 	.word	0x20000241
 8000784:	2000023f 	.word	0x2000023f
 8000788:	20000004 	.word	0x20000004
 800078c:	20000118 	.word	0x20000118
 8000790:	200001c4 	.word	0x200001c4
 8000794:	20000008 	.word	0x20000008
 8000798:	200001d0 	.word	0x200001d0
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	200001e4 	.word	0x200001e4

080007a4 <convertArrays>:

void convertArrays(int state) {
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d115      	bne.n	80007de <convertArrays+0x3a>
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
 80007b6:	e00e      	b.n	80007d6 <convertArrays+0x32>
			machineID[i] = idCharactersArray[machineIDInt[i]];
 80007b8:	4a25      	ldr	r2, [pc, #148]	; (8000850 <convertArrays+0xac>)
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <convertArrays+0xb0>)
 80007c4:	5c99      	ldrb	r1, [r3, r2]
 80007c6:	4a24      	ldr	r2, [pc, #144]	; (8000858 <convertArrays+0xb4>)
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	4413      	add	r3, r2
 80007cc:	460a      	mov	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	3301      	adds	r3, #1
 80007d4:	61fb      	str	r3, [r7, #28]
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	2b0b      	cmp	r3, #11
 80007da:	dded      	ble.n	80007b8 <convertArrays+0x14>

		for(int i=0; i<arrLength; i++) {
			wifiPass[i] = charactersArray[wifiPassInt[i]];
		}
	}
}
 80007dc:	e033      	b.n	8000846 <convertArrays+0xa2>
	} else if(state == 2) {
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d118      	bne.n	8000816 <convertArrays+0x72>
		int arrLength = sizeof(wifiSSIDInt)/sizeof(wifiSSIDInt[0]);
 80007e4:	2314      	movs	r3, #20
 80007e6:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<arrLength; i++) {
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	e00e      	b.n	800080c <convertArrays+0x68>
			wifiSSID[i] = charactersArray[wifiSSIDInt[i]];
 80007ee:	4a1b      	ldr	r2, [pc, #108]	; (800085c <convertArrays+0xb8>)
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	4413      	add	r3, r2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <convertArrays+0xbc>)
 80007fa:	5c99      	ldrb	r1, [r3, r2]
 80007fc:	4a19      	ldr	r2, [pc, #100]	; (8000864 <convertArrays+0xc0>)
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	4413      	add	r3, r2
 8000802:	460a      	mov	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrLength; i++) {
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	3301      	adds	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbec      	blt.n	80007ee <convertArrays+0x4a>
}
 8000814:	e017      	b.n	8000846 <convertArrays+0xa2>
		int arrLength = sizeof(wifiPassInt)/sizeof(wifiPassInt[0]);
 8000816:	2314      	movs	r3, #20
 8000818:	613b      	str	r3, [r7, #16]
		for(int i=0; i<arrLength; i++) {
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	e00e      	b.n	800083e <convertArrays+0x9a>
			wifiPass[i] = charactersArray[wifiPassInt[i]];
 8000820:	4a11      	ldr	r2, [pc, #68]	; (8000868 <convertArrays+0xc4>)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	4413      	add	r3, r2
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <convertArrays+0xbc>)
 800082c:	5c99      	ldrb	r1, [r3, r2]
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <convertArrays+0xc8>)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	4413      	add	r3, r2
 8000834:	460a      	mov	r2, r1
 8000836:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrLength; i++) {
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	3301      	adds	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	429a      	cmp	r2, r3
 8000844:	dbec      	blt.n	8000820 <convertArrays+0x7c>
}
 8000846:	bf00      	nop
 8000848:	3724      	adds	r7, #36	; 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	200001c4 	.word	0x200001c4
 8000854:	20000010 	.word	0x20000010
 8000858:	20000190 	.word	0x20000190
 800085c:	200001d0 	.word	0x200001d0
 8000860:	2000001c 	.word	0x2000001c
 8000864:	2000019c 	.word	0x2000019c
 8000868:	200001e4 	.word	0x200001e4
 800086c:	200001b0 	.word	0x200001b0

08000870 <resetEEPROM4Wifi>:

void resetEEPROM4Wifi(int state) {
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d11e      	bne.n	80008bc <resetEEPROM4Wifi+0x4c>
		int eepromVal = idStartPos;
 800087e:	4b32      	ldr	r3, [pc, #200]	; (8000948 <resetEEPROM4Wifi+0xd8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	e014      	b.n	80008b4 <resetEEPROM4Wifi+0x44>
			machineID[i] = '\0';
 800088a:	4a30      	ldr	r2, [pc, #192]	; (800094c <resetEEPROM4Wifi+0xdc>)
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	4413      	add	r3, r2
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
			machineIDInt[i] = '\0';
 8000894:	4a2e      	ldr	r2, [pc, #184]	; (8000950 <resetEEPROM4Wifi+0xe0>)
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	4413      	add	r3, r2
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 800089e:	4a2d      	ldr	r2, [pc, #180]	; (8000954 <resetEEPROM4Wifi+0xe4>)
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	4413      	add	r3, r2
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	3301      	adds	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	3301      	adds	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	2b0b      	cmp	r3, #11
 80008b8:	dde7      	ble.n	800088a <resetEEPROM4Wifi+0x1a>
			wifiPassInt[i] = '\0';
			eepromData[eepromVal] = '\0';
			eepromVal++;
		}
	}
}
 80008ba:	e03f      	b.n	800093c <resetEEPROM4Wifi+0xcc>
	} else if(state == 2) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d11e      	bne.n	8000900 <resetEEPROM4Wifi+0x90>
		int eepromVal = ssidStartPos;
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <resetEEPROM4Wifi+0xe8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	e014      	b.n	80008f8 <resetEEPROM4Wifi+0x88>
			wifiSSID[i] = '\0';
 80008ce:	4a23      	ldr	r2, [pc, #140]	; (800095c <resetEEPROM4Wifi+0xec>)
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	4413      	add	r3, r2
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
			wifiSSIDInt[i] = '\0';
 80008d8:	4a21      	ldr	r2, [pc, #132]	; (8000960 <resetEEPROM4Wifi+0xf0>)
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	4413      	add	r3, r2
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <resetEEPROM4Wifi+0xe4>)
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	4413      	add	r3, r2
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	3301      	adds	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	3301      	adds	r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	2b13      	cmp	r3, #19
 80008fc:	dde7      	ble.n	80008ce <resetEEPROM4Wifi+0x5e>
}
 80008fe:	e01d      	b.n	800093c <resetEEPROM4Wifi+0xcc>
		int eepromVal = passStartPos;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <resetEEPROM4Wifi+0xf4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	e014      	b.n	8000936 <resetEEPROM4Wifi+0xc6>
			wifiPass[i] = '\0';
 800090c:	4a16      	ldr	r2, [pc, #88]	; (8000968 <resetEEPROM4Wifi+0xf8>)
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	4413      	add	r3, r2
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
			wifiPassInt[i] = '\0';
 8000916:	4a15      	ldr	r2, [pc, #84]	; (800096c <resetEEPROM4Wifi+0xfc>)
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	4413      	add	r3, r2
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <resetEEPROM4Wifi+0xe4>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4413      	add	r3, r2
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	3301      	adds	r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	3301      	adds	r3, #1
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	2b13      	cmp	r3, #19
 800093a:	dde7      	ble.n	800090c <resetEEPROM4Wifi+0x9c>
}
 800093c:	bf00      	nop
 800093e:	3724      	adds	r7, #36	; 0x24
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000004 	.word	0x20000004
 800094c:	20000190 	.word	0x20000190
 8000950:	200001c4 	.word	0x200001c4
 8000954:	20000118 	.word	0x20000118
 8000958:	20000008 	.word	0x20000008
 800095c:	2000019c 	.word	0x2000019c
 8000960:	200001d0 	.word	0x200001d0
 8000964:	2000000c 	.word	0x2000000c
 8000968:	200001b0 	.word	0x200001b0
 800096c:	200001e4 	.word	0x200001e4

08000970 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b0c6      	sub	sp, #280	; 0x118
 8000974:	af02      	add	r7, sp, #8
 8000976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800097a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800097e:	6018      	str	r0, [r3, #0]
 8000980:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000988:	6019      	str	r1, [r3, #0]
 800098a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800098e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000992:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000994:	4a31      	ldr	r2, [pc, #196]	; (8000a5c <sendMachineData+0xec>)
 8000996:	4932      	ldr	r1, [pc, #200]	; (8000a60 <sendMachineData+0xf0>)
 8000998:	4832      	ldr	r0, [pc, #200]	; (8000a64 <sendMachineData+0xf4>)
 800099a:	f00b fda9 	bl	800c4f0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800099e:	4831      	ldr	r0, [pc, #196]	; (8000a64 <sendMachineData+0xf4>)
 80009a0:	f7ff fc40 	bl	8000224 <strlen>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009b0:	492c      	ldr	r1, [pc, #176]	; (8000a64 <sendMachineData+0xf4>)
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	f00a ffb6 	bl	800b924 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80009b8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80009bc:	f007 fee6 	bl	800878c <HAL_Delay>

	sprintf(local_txA,
 80009c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009cc:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80009d0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80009d4:	4924      	ldr	r1, [pc, #144]	; (8000a68 <sendMachineData+0xf8>)
 80009d6:	9100      	str	r1, [sp, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6812      	ldr	r2, [r2, #0]
 80009dc:	4923      	ldr	r1, [pc, #140]	; (8000a6c <sendMachineData+0xfc>)
 80009de:	f00b fd87 	bl	800c4f0 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80009e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fc1c 	bl	8000224 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80009fa:	491d      	ldr	r1, [pc, #116]	; (8000a70 <sendMachineData+0x100>)
 80009fc:	4618      	mov	r0, r3
 80009fe:	f00b fd77 	bl	800c4f0 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fc0c 	bl	8000224 <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	f107 0110 	add.w	r1, r7, #16
 8000a14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	f00a ff81 	bl	800b924 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a22:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a26:	f007 feb1 	bl	800878c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fbf8 	bl	8000224 <strlen>
 8000a34:	4603      	mov	r3, r0
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a44:	6818      	ldr	r0, [r3, #0]
 8000a46:	f00a ff6d 	bl	800b924 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000a4a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a4e:	f007 fe9d 	bl	800878c <HAL_Delay>
}
 8000a52:	bf00      	nop
 8000a54:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	0800ce18 	.word	0x0800ce18
 8000a60:	0800ce28 	.word	0x0800ce28
 8000a64:	20000284 	.word	0x20000284
 8000a68:	0800cea4 	.word	0x0800cea4
 8000a6c:	0800ce48 	.word	0x0800ce48
 8000a70:	0800ceb8 	.word	0x0800ceb8

08000a74 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af04      	add	r7, sp, #16
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000a7e:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <hata2EEPROM+0xa4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1e5a      	subs	r2, r3, #1
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <hata2EEPROM+0xa8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4413      	add	r3, r2
 8000a8a:	4a25      	ldr	r2, [pc, #148]	; (8000b20 <hata2EEPROM+0xac>)
 8000a8c:	5cd3      	ldrb	r3, [r2, r3]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000a92:	f000 f92b 	bl	8000cec <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000a96:	e000      	b.n	8000a9a <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000a98:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	e012      	b.n	8000ac6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <hata2EEPROM+0xa8>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <hata2EEPROM+0xac>)
 8000aaa:	5cd3      	ldrb	r3, [r2, r3]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d107      	bne.n	8000ac0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <hata2EEPROM+0xa8>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4919      	ldr	r1, [pc, #100]	; (8000b20 <hata2EEPROM+0xac>)
 8000aba:	79fa      	ldrb	r2, [r7, #7]
 8000abc:	54ca      	strb	r2, [r1, r3]
					break;
 8000abe:	e007      	b.n	8000ad0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <hata2EEPROM+0xa4>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbe7      	blt.n	8000aa0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <hata2EEPROM+0xa8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	b299      	uxth	r1, r3
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <hata2EEPROM+0xa4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	b298      	uxth	r0, r3
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <hata2EEPROM+0xa8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <hata2EEPROM+0xac>)
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <hata2EEPROM+0xa4>)
 8000ae6:	6812      	ldr	r2, [r2, #0]
 8000ae8:	b292      	uxth	r2, r2
 8000aea:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000aee:	9402      	str	r4, [sp, #8]
 8000af0:	9201      	str	r2, [sp, #4]
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	4603      	mov	r3, r0
 8000af6:	460a      	mov	r2, r1
 8000af8:	21a0      	movs	r1, #160	; 0xa0
 8000afa:	480a      	ldr	r0, [pc, #40]	; (8000b24 <hata2EEPROM+0xb0>)
 8000afc:	f008 fed0 	bl	80098a0 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000b00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b04:	f007 fe42 	bl	800878c <HAL_Delay>
	eepromKontrol(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff fb93 	bl	8000234 <eepromKontrol>
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000098 	.word	0x20000098
 8000b1c:	2000009c 	.word	0x2000009c
 8000b20:	20000118 	.word	0x20000118
 8000b24:	200003a8 	.word	0x200003a8

08000b28 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d11d      	bne.n	8000b74 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b38:	4b62      	ldr	r3, [pc, #392]	; (8000cc4 <hataKoduLcdGoster+0x19c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d105      	bne.n	8000b4c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b40:	4a61      	ldr	r2, [pc, #388]	; (8000cc8 <hataKoduLcdGoster+0x1a0>)
 8000b42:	2101      	movs	r1, #1
 8000b44:	2001      	movs	r0, #1
 8000b46:	f007 f8cb 	bl	8007ce0 <lcd_print>
 8000b4a:	e008      	b.n	8000b5e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000b4c:	4b5d      	ldr	r3, [pc, #372]	; (8000cc4 <hataKoduLcdGoster+0x19c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d104      	bne.n	8000b5e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000b54:	4a5d      	ldr	r2, [pc, #372]	; (8000ccc <hataKoduLcdGoster+0x1a4>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f007 f8c1 	bl	8007ce0 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000b5e:	4a5c      	ldr	r2, [pc, #368]	; (8000cd0 <hataKoduLcdGoster+0x1a8>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	2002      	movs	r0, #2
 8000b64:	f007 f8bc 	bl	8007ce0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b68:	4a5a      	ldr	r2, [pc, #360]	; (8000cd4 <hataKoduLcdGoster+0x1ac>)
 8000b6a:	2107      	movs	r1, #7
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f007 f8b7 	bl	8007ce0 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000b72:	e0a3      	b.n	8000cbc <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d11d      	bne.n	8000bb6 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000b7a:	4b52      	ldr	r3, [pc, #328]	; (8000cc4 <hataKoduLcdGoster+0x19c>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d105      	bne.n	8000b8e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000b82:	4a51      	ldr	r2, [pc, #324]	; (8000cc8 <hataKoduLcdGoster+0x1a0>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	2001      	movs	r0, #1
 8000b88:	f007 f8aa 	bl	8007ce0 <lcd_print>
 8000b8c:	e008      	b.n	8000ba0 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000b8e:	4b4d      	ldr	r3, [pc, #308]	; (8000cc4 <hataKoduLcdGoster+0x19c>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d104      	bne.n	8000ba0 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000b96:	4a4d      	ldr	r2, [pc, #308]	; (8000ccc <hataKoduLcdGoster+0x1a4>)
 8000b98:	2101      	movs	r1, #1
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f007 f8a0 	bl	8007ce0 <lcd_print>
		lcd_print(2, 2, "2");
 8000ba0:	4a4d      	ldr	r2, [pc, #308]	; (8000cd8 <hataKoduLcdGoster+0x1b0>)
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f007 f89b 	bl	8007ce0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000baa:	4a4a      	ldr	r2, [pc, #296]	; (8000cd4 <hataKoduLcdGoster+0x1ac>)
 8000bac:	2107      	movs	r1, #7
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f007 f896 	bl	8007ce0 <lcd_print>
}
 8000bb4:	e082      	b.n	8000cbc <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d11d      	bne.n	8000bf8 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000bbc:	4b41      	ldr	r3, [pc, #260]	; (8000cc4 <hataKoduLcdGoster+0x19c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d105      	bne.n	8000bd0 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000bc4:	4a40      	ldr	r2, [pc, #256]	; (8000cc8 <hataKoduLcdGoster+0x1a0>)
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f007 f889 	bl	8007ce0 <lcd_print>
 8000bce:	e008      	b.n	8000be2 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000bd0:	4b3c      	ldr	r3, [pc, #240]	; (8000cc4 <hataKoduLcdGoster+0x19c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d104      	bne.n	8000be2 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000bd8:	4a3c      	ldr	r2, [pc, #240]	; (8000ccc <hataKoduLcdGoster+0x1a4>)
 8000bda:	2101      	movs	r1, #1
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f007 f87f 	bl	8007ce0 <lcd_print>
		lcd_print(2, 3, "3");
 8000be2:	4a3e      	ldr	r2, [pc, #248]	; (8000cdc <hataKoduLcdGoster+0x1b4>)
 8000be4:	2103      	movs	r1, #3
 8000be6:	2002      	movs	r0, #2
 8000be8:	f007 f87a 	bl	8007ce0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bec:	4a39      	ldr	r2, [pc, #228]	; (8000cd4 <hataKoduLcdGoster+0x1ac>)
 8000bee:	2107      	movs	r1, #7
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f007 f875 	bl	8007ce0 <lcd_print>
}
 8000bf6:	e061      	b.n	8000cbc <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d11d      	bne.n	8000c3a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000bfe:	4b31      	ldr	r3, [pc, #196]	; (8000cc4 <hataKoduLcdGoster+0x19c>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d105      	bne.n	8000c12 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000c06:	4a30      	ldr	r2, [pc, #192]	; (8000cc8 <hataKoduLcdGoster+0x1a0>)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f007 f868 	bl	8007ce0 <lcd_print>
 8000c10:	e008      	b.n	8000c24 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c12:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <hataKoduLcdGoster+0x19c>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d104      	bne.n	8000c24 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c1a:	4a2c      	ldr	r2, [pc, #176]	; (8000ccc <hataKoduLcdGoster+0x1a4>)
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f007 f85e 	bl	8007ce0 <lcd_print>
		lcd_print(2, 4, "4");
 8000c24:	4a2e      	ldr	r2, [pc, #184]	; (8000ce0 <hataKoduLcdGoster+0x1b8>)
 8000c26:	2104      	movs	r1, #4
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f007 f859 	bl	8007ce0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c2e:	4a29      	ldr	r2, [pc, #164]	; (8000cd4 <hataKoduLcdGoster+0x1ac>)
 8000c30:	2107      	movs	r1, #7
 8000c32:	2002      	movs	r0, #2
 8000c34:	f007 f854 	bl	8007ce0 <lcd_print>
}
 8000c38:	e040      	b.n	8000cbc <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b05      	cmp	r3, #5
 8000c3e:	d11d      	bne.n	8000c7c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <hataKoduLcdGoster+0x19c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d105      	bne.n	8000c54 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000c48:	4a1f      	ldr	r2, [pc, #124]	; (8000cc8 <hataKoduLcdGoster+0x1a0>)
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f007 f847 	bl	8007ce0 <lcd_print>
 8000c52:	e008      	b.n	8000c66 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <hataKoduLcdGoster+0x19c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d104      	bne.n	8000c66 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <hataKoduLcdGoster+0x1a4>)
 8000c5e:	2101      	movs	r1, #1
 8000c60:	2001      	movs	r0, #1
 8000c62:	f007 f83d 	bl	8007ce0 <lcd_print>
		lcd_print(2, 5, "5");
 8000c66:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <hataKoduLcdGoster+0x1bc>)
 8000c68:	2105      	movs	r1, #5
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	f007 f838 	bl	8007ce0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c70:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <hataKoduLcdGoster+0x1ac>)
 8000c72:	2107      	movs	r1, #7
 8000c74:	2002      	movs	r0, #2
 8000c76:	f007 f833 	bl	8007ce0 <lcd_print>
}
 8000c7a:	e01f      	b.n	8000cbc <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d11c      	bne.n	8000cbc <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <hataKoduLcdGoster+0x19c>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d105      	bne.n	8000c96 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <hataKoduLcdGoster+0x1a0>)
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f007 f826 	bl	8007ce0 <lcd_print>
 8000c94:	e008      	b.n	8000ca8 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <hataKoduLcdGoster+0x19c>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d104      	bne.n	8000ca8 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <hataKoduLcdGoster+0x1a4>)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f007 f81c 	bl	8007ce0 <lcd_print>
		lcd_print(2, 6, "6");
 8000ca8:	4a0f      	ldr	r2, [pc, #60]	; (8000ce8 <hataKoduLcdGoster+0x1c0>)
 8000caa:	2106      	movs	r1, #6
 8000cac:	2002      	movs	r0, #2
 8000cae:	f007 f817 	bl	8007ce0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <hataKoduLcdGoster+0x1ac>)
 8000cb4:	2107      	movs	r1, #7
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f007 f812 	bl	8007ce0 <lcd_print>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000241 	.word	0x20000241
 8000cc8:	0800cf44 	.word	0x0800cf44
 8000ccc:	0800cf54 	.word	0x0800cf54
 8000cd0:	0800cf64 	.word	0x0800cf64
 8000cd4:	0800cf68 	.word	0x0800cf68
 8000cd8:	0800cf74 	.word	0x0800cf74
 8000cdc:	0800cf78 	.word	0x0800cf78
 8000ce0:	0800cf7c 	.word	0x0800cf7c
 8000ce4:	0800cf80 	.word	0x0800cf80
 8000ce8:	0800cf84 	.word	0x0800cf84

08000cec <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	e009      	b.n	8000d0c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <eepromDataFillWithEmpty+0x38>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d00:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <eepromDataFillWithEmpty+0x3c>)
 8000d02:	2100      	movs	r1, #0
 8000d04:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <eepromDataFillWithEmpty+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dbf0      	blt.n	8000cf8 <eepromDataFillWithEmpty+0xc>
	}
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000070 	.word	0x20000070
 8000d28:	20000118 	.word	0x20000118
 8000d2c:	20000098 	.word	0x20000098

08000d30 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d42:	4b50      	ldr	r3, [pc, #320]	; (8000e84 <i2cTest+0x154>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b4e      	ldr	r3, [pc, #312]	; (8000e84 <i2cTest+0x154>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 0201 	bic.w	r2, r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000d52:	484c      	ldr	r0, [pc, #304]	; (8000e84 <i2cTest+0x154>)
 8000d54:	f008 fc76 	bl	8009644 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d58:	23c0      	movs	r3, #192	; 0xc0
 8000d5a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000d5c:	2311      	movs	r3, #17
 8000d5e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4846      	ldr	r0, [pc, #280]	; (8000e88 <i2cTest+0x158>)
 8000d6e:	f008 f87d 	bl	8008e6c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2140      	movs	r1, #64	; 0x40
 8000d76:	4844      	ldr	r0, [pc, #272]	; (8000e88 <i2cTest+0x158>)
 8000d78:	f008 faef 	bl	800935a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	4841      	ldr	r0, [pc, #260]	; (8000e88 <i2cTest+0x158>)
 8000d82:	f008 faea 	bl	800935a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000d86:	200a      	movs	r0, #10
 8000d88:	f007 fd00 	bl	800878c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d8c:	bf00      	nop
 8000d8e:	2140      	movs	r1, #64	; 0x40
 8000d90:	483d      	ldr	r0, [pc, #244]	; (8000e88 <i2cTest+0x158>)
 8000d92:	f008 facb 	bl	800932c <HAL_GPIO_ReadPin>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d006      	beq.n	8000daa <i2cTest+0x7a>
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	483a      	ldr	r0, [pc, #232]	; (8000e88 <i2cTest+0x158>)
 8000da0:	f008 fac4 	bl	800932c <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d1f1      	bne.n	8000d8e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	4836      	ldr	r0, [pc, #216]	; (8000e88 <i2cTest+0x158>)
 8000db0:	f008 fad3 	bl	800935a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000db4:	200a      	movs	r0, #10
 8000db6:	f007 fce9 	bl	800878c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000dba:	bf00      	nop
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	4832      	ldr	r0, [pc, #200]	; (8000e88 <i2cTest+0x158>)
 8000dc0:	f008 fab4 	bl	800932c <HAL_GPIO_ReadPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d0f8      	beq.n	8000dbc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	482e      	ldr	r0, [pc, #184]	; (8000e88 <i2cTest+0x158>)
 8000dd0:	f008 fac3 	bl	800935a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000dd4:	200a      	movs	r0, #10
 8000dd6:	f007 fcd9 	bl	800878c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000dda:	bf00      	nop
 8000ddc:	2140      	movs	r1, #64	; 0x40
 8000dde:	482a      	ldr	r0, [pc, #168]	; (8000e88 <i2cTest+0x158>)
 8000de0:	f008 faa4 	bl	800932c <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d0f8      	beq.n	8000ddc <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	2140      	movs	r1, #64	; 0x40
 8000dee:	4826      	ldr	r0, [pc, #152]	; (8000e88 <i2cTest+0x158>)
 8000df0:	f008 fab3 	bl	800935a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000df4:	200a      	movs	r0, #10
 8000df6:	f007 fcc9 	bl	800878c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000dfa:	bf00      	nop
 8000dfc:	2140      	movs	r1, #64	; 0x40
 8000dfe:	4822      	ldr	r0, [pc, #136]	; (8000e88 <i2cTest+0x158>)
 8000e00:	f008 fa94 	bl	800932c <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d1f8      	bne.n	8000dfc <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	481e      	ldr	r0, [pc, #120]	; (8000e88 <i2cTest+0x158>)
 8000e10:	f008 faa3 	bl	800935a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e14:	200a      	movs	r0, #10
 8000e16:	f007 fcb9 	bl	800878c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e1a:	bf00      	nop
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	481a      	ldr	r0, [pc, #104]	; (8000e88 <i2cTest+0x158>)
 8000e20:	f008 fa84 	bl	800932c <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d1f8      	bne.n	8000e1c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e2a:	23c0      	movs	r3, #192	; 0xc0
 8000e2c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e2e:	2312      	movs	r3, #18
 8000e30:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4812      	ldr	r0, [pc, #72]	; (8000e88 <i2cTest+0x158>)
 8000e40:	f008 f814 	bl	8008e6c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <i2cTest+0x154>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <i2cTest+0x154>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e52:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <i2cTest+0x154>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <i2cTest+0x154>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e62:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <i2cTest+0x154>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <i2cTest+0x154>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 0201 	orr.w	r2, r2, #1
 8000e72:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <i2cTest+0x154>)
 8000e76:	f008 faa1 	bl	80093bc <HAL_I2C_Init>
}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200003a8 	.word	0x200003a8
 8000e88:	40010c00 	.word	0x40010c00

08000e8c <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000e96:	20c8      	movs	r0, #200	; 0xc8
 8000e98:	f007 fc78 	bl	800878c <HAL_Delay>
	lcd_clear();
 8000e9c:	f006 ff4c 	bl	8007d38 <lcd_clear>
	if(type == 1 && page == 0) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d143      	bne.n	8000f2e <printTemplate+0xa2>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d140      	bne.n	8000f2e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000eac:	4a9d      	ldr	r2, [pc, #628]	; (8001124 <printTemplate+0x298>)
 8000eae:	2101      	movs	r1, #1
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f006 ff15 	bl	8007ce0 <lcd_print>
		lcd_print(2, 3, "0");
 8000eb6:	4a9c      	ldr	r2, [pc, #624]	; (8001128 <printTemplate+0x29c>)
 8000eb8:	2103      	movs	r1, #3
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f006 ff10 	bl	8007ce0 <lcd_print>
		lcd_print(2, 4, "1");
 8000ec0:	4a9a      	ldr	r2, [pc, #616]	; (800112c <printTemplate+0x2a0>)
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f006 ff0b 	bl	8007ce0 <lcd_print>
		lcd_print(2, 5, "2");
 8000eca:	4a99      	ldr	r2, [pc, #612]	; (8001130 <printTemplate+0x2a4>)
 8000ecc:	2105      	movs	r1, #5
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f006 ff06 	bl	8007ce0 <lcd_print>
		lcd_print(2, 6, "3");
 8000ed4:	4a97      	ldr	r2, [pc, #604]	; (8001134 <printTemplate+0x2a8>)
 8000ed6:	2106      	movs	r1, #6
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f006 ff01 	bl	8007ce0 <lcd_print>
		lcd_print(2, 7, "4");
 8000ede:	4a96      	ldr	r2, [pc, #600]	; (8001138 <printTemplate+0x2ac>)
 8000ee0:	2107      	movs	r1, #7
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f006 fefc 	bl	8007ce0 <lcd_print>
		lcd_print(2, 10, "5");
 8000ee8:	4a94      	ldr	r2, [pc, #592]	; (800113c <printTemplate+0x2b0>)
 8000eea:	210a      	movs	r1, #10
 8000eec:	2002      	movs	r0, #2
 8000eee:	f006 fef7 	bl	8007ce0 <lcd_print>
		lcd_print(2, 11, "6");
 8000ef2:	4a93      	ldr	r2, [pc, #588]	; (8001140 <printTemplate+0x2b4>)
 8000ef4:	210b      	movs	r1, #11
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f006 fef2 	bl	8007ce0 <lcd_print>
		lcd_print(2, 12, "7");
 8000efc:	4a91      	ldr	r2, [pc, #580]	; (8001144 <printTemplate+0x2b8>)
 8000efe:	210c      	movs	r1, #12
 8000f00:	2002      	movs	r0, #2
 8000f02:	f006 feed 	bl	8007ce0 <lcd_print>
		lcd_print(2, 13, "8");
 8000f06:	4a90      	ldr	r2, [pc, #576]	; (8001148 <printTemplate+0x2bc>)
 8000f08:	210d      	movs	r1, #13
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f006 fee8 	bl	8007ce0 <lcd_print>
		lcd_print(2, 14, "9");
 8000f10:	4a8e      	ldr	r2, [pc, #568]	; (800114c <printTemplate+0x2c0>)
 8000f12:	210e      	movs	r1, #14
 8000f14:	2002      	movs	r0, #2
 8000f16:	f006 fee3 	bl	8007ce0 <lcd_print>
		lcd_print(1, 5, machineID);
 8000f1a:	4a8d      	ldr	r2, [pc, #564]	; (8001150 <printTemplate+0x2c4>)
 8000f1c:	2105      	movs	r1, #5
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f006 fede 	bl	8007ce0 <lcd_print>
		lcd_gotoxy(2, 3);
 8000f24:	2103      	movs	r1, #3
 8000f26:	2002      	movs	r0, #2
 8000f28:	f006 febb 	bl	8007ca2 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f2c:	e0f5      	b.n	800111a <printTemplate+0x28e>
	} else if(type == 2) {
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d178      	bne.n	8001026 <printTemplate+0x19a>
		if(page == 1) {
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d114      	bne.n	8000f64 <printTemplate+0xd8>
			lcd_clear();
 8000f3a:	f006 fefd 	bl	8007d38 <lcd_clear>
			HAL_Delay(100);
 8000f3e:	2064      	movs	r0, #100	; 0x64
 8000f40:	f007 fc24 	bl	800878c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f44:	4a83      	ldr	r2, [pc, #524]	; (8001154 <printTemplate+0x2c8>)
 8000f46:	2101      	movs	r1, #1
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f006 fec9 	bl	8007ce0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f4e:	4a82      	ldr	r2, [pc, #520]	; (8001158 <printTemplate+0x2cc>)
 8000f50:	2107      	movs	r1, #7
 8000f52:	2001      	movs	r0, #1
 8000f54:	f006 fec4 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f58:	4a80      	ldr	r2, [pc, #512]	; (800115c <printTemplate+0x2d0>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f006 febf 	bl	8007ce0 <lcd_print>
}
 8000f62:	e0da      	b.n	800111a <printTemplate+0x28e>
		} else if(page == 2) {
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d114      	bne.n	8000f94 <printTemplate+0x108>
			lcd_clear();
 8000f6a:	f006 fee5 	bl	8007d38 <lcd_clear>
			HAL_Delay(100);
 8000f6e:	2064      	movs	r0, #100	; 0x64
 8000f70:	f007 fc0c 	bl	800878c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f74:	4a77      	ldr	r2, [pc, #476]	; (8001154 <printTemplate+0x2c8>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f006 feb1 	bl	8007ce0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f7e:	4a76      	ldr	r2, [pc, #472]	; (8001158 <printTemplate+0x2cc>)
 8000f80:	2107      	movs	r1, #7
 8000f82:	2001      	movs	r0, #1
 8000f84:	f006 feac 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f88:	4a75      	ldr	r2, [pc, #468]	; (8001160 <printTemplate+0x2d4>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f006 fea7 	bl	8007ce0 <lcd_print>
}
 8000f92:	e0c2      	b.n	800111a <printTemplate+0x28e>
		} else if(page == 3) {
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d114      	bne.n	8000fc4 <printTemplate+0x138>
			lcd_clear();
 8000f9a:	f006 fecd 	bl	8007d38 <lcd_clear>
			HAL_Delay(100);
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f007 fbf4 	bl	800878c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fa4:	4a6b      	ldr	r2, [pc, #428]	; (8001154 <printTemplate+0x2c8>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f006 fe99 	bl	8007ce0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fae:	4a6a      	ldr	r2, [pc, #424]	; (8001158 <printTemplate+0x2cc>)
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f006 fe94 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000fb8:	4a6a      	ldr	r2, [pc, #424]	; (8001164 <printTemplate+0x2d8>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f006 fe8f 	bl	8007ce0 <lcd_print>
}
 8000fc2:	e0aa      	b.n	800111a <printTemplate+0x28e>
		} else if(page == 4) {
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	d114      	bne.n	8000ff4 <printTemplate+0x168>
			lcd_clear();
 8000fca:	f006 feb5 	bl	8007d38 <lcd_clear>
			HAL_Delay(100);
 8000fce:	2064      	movs	r0, #100	; 0x64
 8000fd0:	f007 fbdc 	bl	800878c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fd4:	4a5f      	ldr	r2, [pc, #380]	; (8001154 <printTemplate+0x2c8>)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f006 fe81 	bl	8007ce0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fde:	4a5e      	ldr	r2, [pc, #376]	; (8001158 <printTemplate+0x2cc>)
 8000fe0:	2107      	movs	r1, #7
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f006 fe7c 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000fe8:	4a5f      	ldr	r2, [pc, #380]	; (8001168 <printTemplate+0x2dc>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	2002      	movs	r0, #2
 8000fee:	f006 fe77 	bl	8007ce0 <lcd_print>
}
 8000ff2:	e092      	b.n	800111a <printTemplate+0x28e>
		} else if(page == 5) {
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b05      	cmp	r3, #5
 8000ff8:	f040 808f 	bne.w	800111a <printTemplate+0x28e>
			lcd_clear();
 8000ffc:	f006 fe9c 	bl	8007d38 <lcd_clear>
			HAL_Delay(100);
 8001000:	2064      	movs	r0, #100	; 0x64
 8001002:	f007 fbc3 	bl	800878c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001006:	4a53      	ldr	r2, [pc, #332]	; (8001154 <printTemplate+0x2c8>)
 8001008:	2101      	movs	r1, #1
 800100a:	2001      	movs	r0, #1
 800100c:	f006 fe68 	bl	8007ce0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001010:	4a51      	ldr	r2, [pc, #324]	; (8001158 <printTemplate+0x2cc>)
 8001012:	2107      	movs	r1, #7
 8001014:	2001      	movs	r0, #1
 8001016:	f006 fe63 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800101a:	4a54      	ldr	r2, [pc, #336]	; (800116c <printTemplate+0x2e0>)
 800101c:	2101      	movs	r1, #1
 800101e:	2002      	movs	r0, #2
 8001020:	f006 fe5e 	bl	8007ce0 <lcd_print>
}
 8001024:	e079      	b.n	800111a <printTemplate+0x28e>
	} else if(type == 3) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b03      	cmp	r3, #3
 800102a:	d176      	bne.n	800111a <printTemplate+0x28e>
		if(page == 1) {
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d114      	bne.n	800105c <printTemplate+0x1d0>
			lcd_clear();
 8001032:	f006 fe81 	bl	8007d38 <lcd_clear>
			HAL_Delay(100);
 8001036:	2064      	movs	r0, #100	; 0x64
 8001038:	f007 fba8 	bl	800878c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800103c:	4a4c      	ldr	r2, [pc, #304]	; (8001170 <printTemplate+0x2e4>)
 800103e:	2101      	movs	r1, #1
 8001040:	2001      	movs	r0, #1
 8001042:	f006 fe4d 	bl	8007ce0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001046:	4a4b      	ldr	r2, [pc, #300]	; (8001174 <printTemplate+0x2e8>)
 8001048:	2107      	movs	r1, #7
 800104a:	2001      	movs	r0, #1
 800104c:	f006 fe48 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001050:	4a42      	ldr	r2, [pc, #264]	; (800115c <printTemplate+0x2d0>)
 8001052:	2101      	movs	r1, #1
 8001054:	2002      	movs	r0, #2
 8001056:	f006 fe43 	bl	8007ce0 <lcd_print>
}
 800105a:	e05e      	b.n	800111a <printTemplate+0x28e>
		} else if(page == 2) {
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d114      	bne.n	800108c <printTemplate+0x200>
			lcd_clear();
 8001062:	f006 fe69 	bl	8007d38 <lcd_clear>
			HAL_Delay(100);
 8001066:	2064      	movs	r0, #100	; 0x64
 8001068:	f007 fb90 	bl	800878c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800106c:	4a40      	ldr	r2, [pc, #256]	; (8001170 <printTemplate+0x2e4>)
 800106e:	2101      	movs	r1, #1
 8001070:	2001      	movs	r0, #1
 8001072:	f006 fe35 	bl	8007ce0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001076:	4a3f      	ldr	r2, [pc, #252]	; (8001174 <printTemplate+0x2e8>)
 8001078:	2107      	movs	r1, #7
 800107a:	2001      	movs	r0, #1
 800107c:	f006 fe30 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001080:	4a37      	ldr	r2, [pc, #220]	; (8001160 <printTemplate+0x2d4>)
 8001082:	2101      	movs	r1, #1
 8001084:	2002      	movs	r0, #2
 8001086:	f006 fe2b 	bl	8007ce0 <lcd_print>
}
 800108a:	e046      	b.n	800111a <printTemplate+0x28e>
		} else if(page == 3) {
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2b03      	cmp	r3, #3
 8001090:	d114      	bne.n	80010bc <printTemplate+0x230>
			lcd_clear();
 8001092:	f006 fe51 	bl	8007d38 <lcd_clear>
			HAL_Delay(100);
 8001096:	2064      	movs	r0, #100	; 0x64
 8001098:	f007 fb78 	bl	800878c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800109c:	4a34      	ldr	r2, [pc, #208]	; (8001170 <printTemplate+0x2e4>)
 800109e:	2101      	movs	r1, #1
 80010a0:	2001      	movs	r0, #1
 80010a2:	f006 fe1d 	bl	8007ce0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010a6:	4a33      	ldr	r2, [pc, #204]	; (8001174 <printTemplate+0x2e8>)
 80010a8:	2107      	movs	r1, #7
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 fe18 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80010b0:	4a2c      	ldr	r2, [pc, #176]	; (8001164 <printTemplate+0x2d8>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	2002      	movs	r0, #2
 80010b6:	f006 fe13 	bl	8007ce0 <lcd_print>
}
 80010ba:	e02e      	b.n	800111a <printTemplate+0x28e>
		} else if(page == 4) {
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d114      	bne.n	80010ec <printTemplate+0x260>
			lcd_clear();
 80010c2:	f006 fe39 	bl	8007d38 <lcd_clear>
			HAL_Delay(100);
 80010c6:	2064      	movs	r0, #100	; 0x64
 80010c8:	f007 fb60 	bl	800878c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010cc:	4a28      	ldr	r2, [pc, #160]	; (8001170 <printTemplate+0x2e4>)
 80010ce:	2101      	movs	r1, #1
 80010d0:	2001      	movs	r0, #1
 80010d2:	f006 fe05 	bl	8007ce0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010d6:	4a27      	ldr	r2, [pc, #156]	; (8001174 <printTemplate+0x2e8>)
 80010d8:	2107      	movs	r1, #7
 80010da:	2001      	movs	r0, #1
 80010dc:	f006 fe00 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <printTemplate+0x2dc>)
 80010e2:	2101      	movs	r1, #1
 80010e4:	2002      	movs	r0, #2
 80010e6:	f006 fdfb 	bl	8007ce0 <lcd_print>
}
 80010ea:	e016      	b.n	800111a <printTemplate+0x28e>
		} else if(page == 5) {
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d113      	bne.n	800111a <printTemplate+0x28e>
			lcd_clear();
 80010f2:	f006 fe21 	bl	8007d38 <lcd_clear>
			HAL_Delay(100);
 80010f6:	2064      	movs	r0, #100	; 0x64
 80010f8:	f007 fb48 	bl	800878c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010fc:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <printTemplate+0x2e4>)
 80010fe:	2101      	movs	r1, #1
 8001100:	2001      	movs	r0, #1
 8001102:	f006 fded 	bl	8007ce0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001106:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <printTemplate+0x2e8>)
 8001108:	2107      	movs	r1, #7
 800110a:	2001      	movs	r0, #1
 800110c:	f006 fde8 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001110:	4a16      	ldr	r2, [pc, #88]	; (800116c <printTemplate+0x2e0>)
 8001112:	2101      	movs	r1, #1
 8001114:	2002      	movs	r0, #2
 8001116:	f006 fde3 	bl	8007ce0 <lcd_print>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	0800cf88 	.word	0x0800cf88
 8001128:	0800cf90 	.word	0x0800cf90
 800112c:	0800cf94 	.word	0x0800cf94
 8001130:	0800cf98 	.word	0x0800cf98
 8001134:	0800cf9c 	.word	0x0800cf9c
 8001138:	0800cfa0 	.word	0x0800cfa0
 800113c:	0800cfa4 	.word	0x0800cfa4
 8001140:	0800cfa8 	.word	0x0800cfa8
 8001144:	0800cfac 	.word	0x0800cfac
 8001148:	0800cfb0 	.word	0x0800cfb0
 800114c:	0800cfb4 	.word	0x0800cfb4
 8001150:	20000190 	.word	0x20000190
 8001154:	0800cfb8 	.word	0x0800cfb8
 8001158:	2000019c 	.word	0x2000019c
 800115c:	0800cfc0 	.word	0x0800cfc0
 8001160:	0800cfd4 	.word	0x0800cfd4
 8001164:	0800cfe8 	.word	0x0800cfe8
 8001168:	0800cffc 	.word	0x0800cffc
 800116c:	0800d010 	.word	0x0800d010
 8001170:	0800d024 	.word	0x0800d024
 8001174:	200001b0 	.word	0x200001b0

08001178 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800117c:	f3bf 8f4f 	dsb	sy
}
 8001180:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <__NVIC_SystemReset+0x24>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800118a:	4904      	ldr	r1, [pc, #16]	; (800119c <__NVIC_SystemReset+0x24>)
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_SystemReset+0x28>)
 800118e:	4313      	orrs	r3, r2
 8001190:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001192:	f3bf 8f4f 	dsb	sy
}
 8001196:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <__NVIC_SystemReset+0x20>
 800119c:	e000ed00 	.word	0xe000ed00
 80011a0:	05fa0004 	.word	0x05fa0004

080011a4 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80011aa:	2101      	movs	r1, #1
 80011ac:	488e      	ldr	r0, [pc, #568]	; (80013e8 <menu+0x244>)
 80011ae:	f008 f8bd 	bl	800932c <HAL_GPIO_ReadPin>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	f040 808e 	bne.w	80012d6 <menu+0x132>
 80011ba:	4b8c      	ldr	r3, [pc, #560]	; (80013ec <menu+0x248>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	f083 0301 	eor.w	r3, r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 8086 	beq.w	80012d6 <menu+0x132>
		menuSayac = menuSayac+1;
 80011ca:	4b89      	ldr	r3, [pc, #548]	; (80013f0 <menu+0x24c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b87      	ldr	r3, [pc, #540]	; (80013f0 <menu+0x24c>)
 80011d4:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80011d6:	4b86      	ldr	r3, [pc, #536]	; (80013f0 <menu+0x24c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b24      	cmp	r3, #36	; 0x24
 80011dc:	d102      	bne.n	80011e4 <menu+0x40>
			menuSayac = 1;
 80011de:	4b84      	ldr	r3, [pc, #528]	; (80013f0 <menu+0x24c>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80011e4:	4b82      	ldr	r3, [pc, #520]	; (80013f0 <menu+0x24c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b12      	cmp	r3, #18
 80011ea:	d106      	bne.n	80011fa <menu+0x56>
 80011ec:	4b81      	ldr	r3, [pc, #516]	; (80013f4 <menu+0x250>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <menu+0x56>
			menuSayac = 21;
 80011f4:	4b7e      	ldr	r3, [pc, #504]	; (80013f0 <menu+0x24c>)
 80011f6:	2215      	movs	r2, #21
 80011f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80011fa:	4b7d      	ldr	r3, [pc, #500]	; (80013f0 <menu+0x24c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d106      	bne.n	8001210 <menu+0x6c>
 8001202:	4b7d      	ldr	r3, [pc, #500]	; (80013f8 <menu+0x254>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <menu+0x6c>
			menuSayac = 16;
 800120a:	4b79      	ldr	r3, [pc, #484]	; (80013f0 <menu+0x24c>)
 800120c:	2210      	movs	r2, #16
 800120e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001210:	4b77      	ldr	r3, [pc, #476]	; (80013f0 <menu+0x24c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b0d      	cmp	r3, #13
 8001216:	d106      	bne.n	8001226 <menu+0x82>
 8001218:	4b77      	ldr	r3, [pc, #476]	; (80013f8 <menu+0x254>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d102      	bne.n	8001226 <menu+0x82>
			menuSayac = 16;
 8001220:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <menu+0x24c>)
 8001222:	2210      	movs	r2, #16
 8001224:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001226:	4b72      	ldr	r3, [pc, #456]	; (80013f0 <menu+0x24c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b09      	cmp	r3, #9
 800122c:	d106      	bne.n	800123c <menu+0x98>
 800122e:	4b72      	ldr	r3, [pc, #456]	; (80013f8 <menu+0x254>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d102      	bne.n	800123c <menu+0x98>
			menuSayac = 13;
 8001236:	4b6e      	ldr	r3, [pc, #440]	; (80013f0 <menu+0x24c>)
 8001238:	220d      	movs	r2, #13
 800123a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800123c:	4b6c      	ldr	r3, [pc, #432]	; (80013f0 <menu+0x24c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b0a      	cmp	r3, #10
 8001242:	d10a      	bne.n	800125a <menu+0xb6>
 8001244:	4b6d      	ldr	r3, [pc, #436]	; (80013fc <menu+0x258>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d003      	beq.n	8001254 <menu+0xb0>
 800124c:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <menu+0x258>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d102      	bne.n	800125a <menu+0xb6>
			menuSayac = 11;
 8001254:	4b66      	ldr	r3, [pc, #408]	; (80013f0 <menu+0x24c>)
 8001256:	220b      	movs	r2, #11
 8001258:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800125a:	4b65      	ldr	r3, [pc, #404]	; (80013f0 <menu+0x24c>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b0c      	cmp	r3, #12
 8001260:	d10e      	bne.n	8001280 <menu+0xdc>
 8001262:	4b67      	ldr	r3, [pc, #412]	; (8001400 <menu+0x25c>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d003      	beq.n	8001272 <menu+0xce>
 800126a:	4b65      	ldr	r3, [pc, #404]	; (8001400 <menu+0x25c>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d106      	bne.n	8001280 <menu+0xdc>
 8001272:	4b61      	ldr	r3, [pc, #388]	; (80013f8 <menu+0x254>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d102      	bne.n	8001280 <menu+0xdc>
			menuSayac = 16;
 800127a:	4b5d      	ldr	r3, [pc, #372]	; (80013f0 <menu+0x24c>)
 800127c:	2210      	movs	r2, #16
 800127e:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001280:	4b5b      	ldr	r3, [pc, #364]	; (80013f0 <menu+0x24c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b0c      	cmp	r3, #12
 8001286:	d10e      	bne.n	80012a6 <menu+0x102>
 8001288:	4b5d      	ldr	r3, [pc, #372]	; (8001400 <menu+0x25c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d003      	beq.n	8001298 <menu+0xf4>
 8001290:	4b5b      	ldr	r3, [pc, #364]	; (8001400 <menu+0x25c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d106      	bne.n	80012a6 <menu+0x102>
 8001298:	4b57      	ldr	r3, [pc, #348]	; (80013f8 <menu+0x254>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d102      	bne.n	80012a6 <menu+0x102>
			menuSayac = 13;
 80012a0:	4b53      	ldr	r3, [pc, #332]	; (80013f0 <menu+0x24c>)
 80012a2:	220d      	movs	r2, #13
 80012a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80012a6:	4b52      	ldr	r3, [pc, #328]	; (80013f0 <menu+0x24c>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	d106      	bne.n	80012bc <menu+0x118>
 80012ae:	4b55      	ldr	r3, [pc, #340]	; (8001404 <menu+0x260>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d102      	bne.n	80012bc <menu+0x118>
			menuSayac = 16;
 80012b6:	4b4e      	ldr	r3, [pc, #312]	; (80013f0 <menu+0x24c>)
 80012b8:	2210      	movs	r2, #16
 80012ba:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80012bc:	4b4c      	ldr	r3, [pc, #304]	; (80013f0 <menu+0x24c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b18      	cmp	r3, #24
 80012c2:	d106      	bne.n	80012d2 <menu+0x12e>
 80012c4:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <menu+0x250>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <menu+0x12e>
			menuSayac = 26;
 80012cc:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <menu+0x24c>)
 80012ce:	221a      	movs	r2, #26
 80012d0:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80012d2:	f003 fb3d 	bl	8004950 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80012d6:	2108      	movs	r1, #8
 80012d8:	484b      	ldr	r0, [pc, #300]	; (8001408 <menu+0x264>)
 80012da:	f008 f827 	bl	800932c <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d175      	bne.n	80013d0 <menu+0x22c>
 80012e4:	4b41      	ldr	r3, [pc, #260]	; (80013ec <menu+0x248>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	f083 0301 	eor.w	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d06e      	beq.n	80013d0 <menu+0x22c>
		if (menuSayac <= 1) {
 80012f2:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <menu+0x24c>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d802      	bhi.n	8001300 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80012fa:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <menu+0x24c>)
 80012fc:	2224      	movs	r2, #36	; 0x24
 80012fe:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001300:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <menu+0x24c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	3b01      	subs	r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <menu+0x24c>)
 800130a:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800130c:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <menu+0x24c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b14      	cmp	r3, #20
 8001312:	d106      	bne.n	8001322 <menu+0x17e>
 8001314:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <menu+0x250>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <menu+0x17e>
			menuSayac = 17;
 800131c:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <menu+0x24c>)
 800131e:	2211      	movs	r2, #17
 8001320:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <menu+0x24c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	d106      	bne.n	8001338 <menu+0x194>
 800132a:	4b33      	ldr	r3, [pc, #204]	; (80013f8 <menu+0x254>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d102      	bne.n	8001338 <menu+0x194>
			menuSayac = 7;
 8001332:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <menu+0x24c>)
 8001334:	2207      	movs	r2, #7
 8001336:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001338:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <menu+0x24c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d106      	bne.n	800134e <menu+0x1aa>
 8001340:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <menu+0x254>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d102      	bne.n	800134e <menu+0x1aa>
			menuSayac = 12;
 8001348:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <menu+0x24c>)
 800134a:	220c      	movs	r2, #12
 800134c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <menu+0x24c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b0c      	cmp	r3, #12
 8001354:	d106      	bne.n	8001364 <menu+0x1c0>
 8001356:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <menu+0x254>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d102      	bne.n	8001364 <menu+0x1c0>
			menuSayac = 8;
 800135e:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <menu+0x24c>)
 8001360:	2208      	movs	r2, #8
 8001362:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <menu+0x24c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b0a      	cmp	r3, #10
 800136a:	d10a      	bne.n	8001382 <menu+0x1de>
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <menu+0x258>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d003      	beq.n	800137c <menu+0x1d8>
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <menu+0x258>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d102      	bne.n	8001382 <menu+0x1de>
			menuSayac = 9;
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <menu+0x24c>)
 800137e:	2209      	movs	r2, #9
 8001380:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <menu+0x24c>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b0c      	cmp	r3, #12
 8001388:	d10a      	bne.n	80013a0 <menu+0x1fc>
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <menu+0x25c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d003      	beq.n	800139a <menu+0x1f6>
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <menu+0x25c>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d102      	bne.n	80013a0 <menu+0x1fc>
			menuSayac = 11;
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <menu+0x24c>)
 800139c:	220b      	movs	r2, #11
 800139e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <menu+0x24c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d106      	bne.n	80013b6 <menu+0x212>
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <menu+0x260>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d102      	bne.n	80013b6 <menu+0x212>
			menuSayac = 14;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <menu+0x24c>)
 80013b2:	220e      	movs	r2, #14
 80013b4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <menu+0x24c>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b19      	cmp	r3, #25
 80013bc:	d106      	bne.n	80013cc <menu+0x228>
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <menu+0x250>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <menu+0x228>
			menuSayac = 23;
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <menu+0x24c>)
 80013c8:	2217      	movs	r2, #23
 80013ca:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013cc:	f003 fac0 	bl	8004950 <bekle>
	}

	if (menuSayac == 0) {
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <menu+0x24c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d133      	bne.n	8001440 <menu+0x29c>
		if(dilSecim == 0) {
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <menu+0x268>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d121      	bne.n	8001424 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80013e0:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <menu+0x26c>)
 80013e2:	2101      	movs	r1, #1
 80013e4:	2001      	movs	r0, #1
 80013e6:	e015      	b.n	8001414 <menu+0x270>
 80013e8:	40010800 	.word	0x40010800
 80013ec:	2000024f 	.word	0x2000024f
 80013f0:	20000220 	.word	0x20000220
 80013f4:	2000022f 	.word	0x2000022f
 80013f8:	20000228 	.word	0x20000228
 80013fc:	20000229 	.word	0x20000229
 8001400:	2000022a 	.word	0x2000022a
 8001404:	2000022b 	.word	0x2000022b
 8001408:	40011000 	.word	0x40011000
 800140c:	20000241 	.word	0x20000241
 8001410:	0800d02c 	.word	0x0800d02c
 8001414:	f006 fc64 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001418:	4a94      	ldr	r2, [pc, #592]	; (800166c <menu+0x4c8>)
 800141a:	2101      	movs	r1, #1
 800141c:	2002      	movs	r0, #2
 800141e:	f006 fc5f 	bl	8007ce0 <lcd_print>
 8001422:	e00d      	b.n	8001440 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001424:	4b92      	ldr	r3, [pc, #584]	; (8001670 <menu+0x4cc>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d109      	bne.n	8001440 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 800142c:	4a91      	ldr	r2, [pc, #580]	; (8001674 <menu+0x4d0>)
 800142e:	2101      	movs	r1, #1
 8001430:	2001      	movs	r0, #1
 8001432:	f006 fc55 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001436:	4a90      	ldr	r2, [pc, #576]	; (8001678 <menu+0x4d4>)
 8001438:	2101      	movs	r1, #1
 800143a:	2002      	movs	r0, #2
 800143c:	f006 fc50 	bl	8007ce0 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001440:	4b8e      	ldr	r3, [pc, #568]	; (800167c <menu+0x4d8>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	f040 82b5 	bne.w	80019b4 <menu+0x810>
		if(dilSecim == 0) {
 800144a:	4b89      	ldr	r3, [pc, #548]	; (8001670 <menu+0x4cc>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001452:	4a8b      	ldr	r2, [pc, #556]	; (8001680 <menu+0x4dc>)
 8001454:	2101      	movs	r1, #1
 8001456:	2001      	movs	r0, #1
 8001458:	f006 fc42 	bl	8007ce0 <lcd_print>
 800145c:	e008      	b.n	8001470 <menu+0x2cc>
		} else if(dilSecim == 1) {
 800145e:	4b84      	ldr	r3, [pc, #528]	; (8001670 <menu+0x4cc>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d104      	bne.n	8001470 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001466:	4a87      	ldr	r2, [pc, #540]	; (8001684 <menu+0x4e0>)
 8001468:	2101      	movs	r1, #1
 800146a:	2001      	movs	r0, #1
 800146c:	f006 fc38 	bl	8007ce0 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001470:	4b85      	ldr	r3, [pc, #532]	; (8001688 <menu+0x4e4>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d123      	bne.n	80014c0 <menu+0x31c>
			if(dilSecim == 0) {
 8001478:	4b7d      	ldr	r3, [pc, #500]	; (8001670 <menu+0x4cc>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d105      	bne.n	800148c <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001480:	4a82      	ldr	r2, [pc, #520]	; (800168c <menu+0x4e8>)
 8001482:	2101      	movs	r1, #1
 8001484:	2002      	movs	r0, #2
 8001486:	f006 fc2b 	bl	8007ce0 <lcd_print>
 800148a:	e008      	b.n	800149e <menu+0x2fa>

			} else if(dilSecim == 1) {
 800148c:	4b78      	ldr	r3, [pc, #480]	; (8001670 <menu+0x4cc>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d104      	bne.n	800149e <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001494:	4a7e      	ldr	r2, [pc, #504]	; (8001690 <menu+0x4ec>)
 8001496:	2101      	movs	r1, #1
 8001498:	2002      	movs	r0, #2
 800149a:	f006 fc21 	bl	8007ce0 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800149e:	4a7d      	ldr	r2, [pc, #500]	; (8001694 <menu+0x4f0>)
 80014a0:	210f      	movs	r1, #15
 80014a2:	2002      	movs	r0, #2
 80014a4:	f006 fc1c 	bl	8007ce0 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80014a8:	4b7b      	ldr	r3, [pc, #492]	; (8001698 <menu+0x4f4>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	220a      	movs	r2, #10
 80014ae:	497b      	ldr	r1, [pc, #492]	; (800169c <menu+0x4f8>)
 80014b0:	4618      	mov	r0, r3
 80014b2:	f00a ff67 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 80014b6:	4a79      	ldr	r2, [pc, #484]	; (800169c <menu+0x4f8>)
 80014b8:	210e      	movs	r1, #14
 80014ba:	2002      	movs	r0, #2
 80014bc:	f006 fc10 	bl	8007ce0 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80014c0:	4b71      	ldr	r3, [pc, #452]	; (8001688 <menu+0x4e4>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d123      	bne.n	8001510 <menu+0x36c>
			if(dilSecim == 0) {
 80014c8:	4b69      	ldr	r3, [pc, #420]	; (8001670 <menu+0x4cc>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d105      	bne.n	80014dc <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80014d0:	4a73      	ldr	r2, [pc, #460]	; (80016a0 <menu+0x4fc>)
 80014d2:	2101      	movs	r1, #1
 80014d4:	2002      	movs	r0, #2
 80014d6:	f006 fc03 	bl	8007ce0 <lcd_print>
 80014da:	e008      	b.n	80014ee <menu+0x34a>
			} else if(dilSecim == 1) {
 80014dc:	4b64      	ldr	r3, [pc, #400]	; (8001670 <menu+0x4cc>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d104      	bne.n	80014ee <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80014e4:	4a6f      	ldr	r2, [pc, #444]	; (80016a4 <menu+0x500>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	2002      	movs	r0, #2
 80014ea:	f006 fbf9 	bl	8007ce0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80014ee:	4a6e      	ldr	r2, [pc, #440]	; (80016a8 <menu+0x504>)
 80014f0:	210f      	movs	r1, #15
 80014f2:	2002      	movs	r0, #2
 80014f4:	f006 fbf4 	bl	8007ce0 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80014f8:	4b6c      	ldr	r3, [pc, #432]	; (80016ac <menu+0x508>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	220a      	movs	r2, #10
 80014fe:	4967      	ldr	r1, [pc, #412]	; (800169c <menu+0x4f8>)
 8001500:	4618      	mov	r0, r3
 8001502:	f00a ff3f 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 8001506:	4a65      	ldr	r2, [pc, #404]	; (800169c <menu+0x4f8>)
 8001508:	210e      	movs	r1, #14
 800150a:	2002      	movs	r0, #2
 800150c:	f006 fbe8 	bl	8007ce0 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001510:	4b5d      	ldr	r3, [pc, #372]	; (8001688 <menu+0x4e4>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d123      	bne.n	8001560 <menu+0x3bc>
			if(dilSecim == 0) {
 8001518:	4b55      	ldr	r3, [pc, #340]	; (8001670 <menu+0x4cc>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d105      	bne.n	800152c <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001520:	4a63      	ldr	r2, [pc, #396]	; (80016b0 <menu+0x50c>)
 8001522:	2101      	movs	r1, #1
 8001524:	2002      	movs	r0, #2
 8001526:	f006 fbdb 	bl	8007ce0 <lcd_print>
 800152a:	e008      	b.n	800153e <menu+0x39a>
			} else if(dilSecim == 1) {
 800152c:	4b50      	ldr	r3, [pc, #320]	; (8001670 <menu+0x4cc>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d104      	bne.n	800153e <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001534:	4a5f      	ldr	r2, [pc, #380]	; (80016b4 <menu+0x510>)
 8001536:	2101      	movs	r1, #1
 8001538:	2002      	movs	r0, #2
 800153a:	f006 fbd1 	bl	8007ce0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800153e:	4a5a      	ldr	r2, [pc, #360]	; (80016a8 <menu+0x504>)
 8001540:	210f      	movs	r1, #15
 8001542:	2002      	movs	r0, #2
 8001544:	f006 fbcc 	bl	8007ce0 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001548:	4b5b      	ldr	r3, [pc, #364]	; (80016b8 <menu+0x514>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	220a      	movs	r2, #10
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <menu+0x4f8>)
 8001550:	4618      	mov	r0, r3
 8001552:	f00a ff17 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 8001556:	4a51      	ldr	r2, [pc, #324]	; (800169c <menu+0x4f8>)
 8001558:	210e      	movs	r1, #14
 800155a:	2002      	movs	r0, #2
 800155c:	f006 fbc0 	bl	8007ce0 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001560:	4b49      	ldr	r3, [pc, #292]	; (8001688 <menu+0x4e4>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d123      	bne.n	80015b0 <menu+0x40c>
			if(dilSecim == 0) {
 8001568:	4b41      	ldr	r3, [pc, #260]	; (8001670 <menu+0x4cc>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d105      	bne.n	800157c <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001570:	4a52      	ldr	r2, [pc, #328]	; (80016bc <menu+0x518>)
 8001572:	2101      	movs	r1, #1
 8001574:	2002      	movs	r0, #2
 8001576:	f006 fbb3 	bl	8007ce0 <lcd_print>
 800157a:	e008      	b.n	800158e <menu+0x3ea>
			} else if(dilSecim == 1) {
 800157c:	4b3c      	ldr	r3, [pc, #240]	; (8001670 <menu+0x4cc>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d104      	bne.n	800158e <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001584:	4a4e      	ldr	r2, [pc, #312]	; (80016c0 <menu+0x51c>)
 8001586:	2101      	movs	r1, #1
 8001588:	2002      	movs	r0, #2
 800158a:	f006 fba9 	bl	8007ce0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800158e:	4a46      	ldr	r2, [pc, #280]	; (80016a8 <menu+0x504>)
 8001590:	210f      	movs	r1, #15
 8001592:	2002      	movs	r0, #2
 8001594:	f006 fba4 	bl	8007ce0 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001598:	4b4a      	ldr	r3, [pc, #296]	; (80016c4 <menu+0x520>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	220a      	movs	r2, #10
 800159e:	493f      	ldr	r1, [pc, #252]	; (800169c <menu+0x4f8>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00a feef 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 80015a6:	4a3d      	ldr	r2, [pc, #244]	; (800169c <menu+0x4f8>)
 80015a8:	210e      	movs	r1, #14
 80015aa:	2002      	movs	r0, #2
 80015ac:	f006 fb98 	bl	8007ce0 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <menu+0x4e4>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d123      	bne.n	8001600 <menu+0x45c>
			if(dilSecim == 0) {
 80015b8:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <menu+0x4cc>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d105      	bne.n	80015cc <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80015c0:	4a41      	ldr	r2, [pc, #260]	; (80016c8 <menu+0x524>)
 80015c2:	2101      	movs	r1, #1
 80015c4:	2002      	movs	r0, #2
 80015c6:	f006 fb8b 	bl	8007ce0 <lcd_print>
 80015ca:	e008      	b.n	80015de <menu+0x43a>
			} else if(dilSecim == 1) {
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <menu+0x4cc>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d104      	bne.n	80015de <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80015d4:	4a3d      	ldr	r2, [pc, #244]	; (80016cc <menu+0x528>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	2002      	movs	r0, #2
 80015da:	f006 fb81 	bl	8007ce0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015de:	4a32      	ldr	r2, [pc, #200]	; (80016a8 <menu+0x504>)
 80015e0:	210f      	movs	r1, #15
 80015e2:	2002      	movs	r0, #2
 80015e4:	f006 fb7c 	bl	8007ce0 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80015e8:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <menu+0x52c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	220a      	movs	r2, #10
 80015ee:	492b      	ldr	r1, [pc, #172]	; (800169c <menu+0x4f8>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00a fec7 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 80015f6:	4a29      	ldr	r2, [pc, #164]	; (800169c <menu+0x4f8>)
 80015f8:	210e      	movs	r1, #14
 80015fa:	2002      	movs	r0, #2
 80015fc:	f006 fb70 	bl	8007ce0 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <menu+0x4e4>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b05      	cmp	r3, #5
 8001606:	d123      	bne.n	8001650 <menu+0x4ac>
			if(dilSecim == 0) {
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <menu+0x4cc>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d105      	bne.n	800161c <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001610:	4a30      	ldr	r2, [pc, #192]	; (80016d4 <menu+0x530>)
 8001612:	2101      	movs	r1, #1
 8001614:	2002      	movs	r0, #2
 8001616:	f006 fb63 	bl	8007ce0 <lcd_print>
 800161a:	e008      	b.n	800162e <menu+0x48a>
			} else if(dilSecim == 1) {
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <menu+0x4cc>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d104      	bne.n	800162e <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001624:	4a2c      	ldr	r2, [pc, #176]	; (80016d8 <menu+0x534>)
 8001626:	2101      	movs	r1, #1
 8001628:	2002      	movs	r0, #2
 800162a:	f006 fb59 	bl	8007ce0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800162e:	4a1e      	ldr	r2, [pc, #120]	; (80016a8 <menu+0x504>)
 8001630:	210f      	movs	r1, #15
 8001632:	2002      	movs	r0, #2
 8001634:	f006 fb54 	bl	8007ce0 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <menu+0x538>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	220a      	movs	r2, #10
 800163e:	4917      	ldr	r1, [pc, #92]	; (800169c <menu+0x4f8>)
 8001640:	4618      	mov	r0, r3
 8001642:	f00a fe9f 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 8001646:	4a15      	ldr	r2, [pc, #84]	; (800169c <menu+0x4f8>)
 8001648:	210e      	movs	r1, #14
 800164a:	2002      	movs	r0, #2
 800164c:	f006 fb48 	bl	8007ce0 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <menu+0x4e4>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b06      	cmp	r3, #6
 8001656:	d15f      	bne.n	8001718 <menu+0x574>
			if(dilSecim == 0) {
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <menu+0x4cc>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d141      	bne.n	80016e4 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001660:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <menu+0x53c>)
 8001662:	2101      	movs	r1, #1
 8001664:	2002      	movs	r0, #2
 8001666:	f006 fb3b 	bl	8007ce0 <lcd_print>
 800166a:	e044      	b.n	80016f6 <menu+0x552>
 800166c:	0800d040 	.word	0x0800d040
 8001670:	20000241 	.word	0x20000241
 8001674:	0800d054 	.word	0x0800d054
 8001678:	0800d068 	.word	0x0800d068
 800167c:	20000220 	.word	0x20000220
 8001680:	0800d07c 	.word	0x0800d07c
 8001684:	0800d090 	.word	0x0800d090
 8001688:	20000222 	.word	0x20000222
 800168c:	0800d0a4 	.word	0x0800d0a4
 8001690:	0800d0b4 	.word	0x0800d0b4
 8001694:	0800d0c4 	.word	0x0800d0c4
 8001698:	20000242 	.word	0x20000242
 800169c:	20000188 	.word	0x20000188
 80016a0:	0800d0c8 	.word	0x0800d0c8
 80016a4:	0800d0d8 	.word	0x0800d0d8
 80016a8:	0800d0e8 	.word	0x0800d0e8
 80016ac:	20000243 	.word	0x20000243
 80016b0:	0800d0ec 	.word	0x0800d0ec
 80016b4:	0800d0fc 	.word	0x0800d0fc
 80016b8:	20000244 	.word	0x20000244
 80016bc:	0800d10c 	.word	0x0800d10c
 80016c0:	0800d11c 	.word	0x0800d11c
 80016c4:	20000245 	.word	0x20000245
 80016c8:	0800d12c 	.word	0x0800d12c
 80016cc:	0800d13c 	.word	0x0800d13c
 80016d0:	20000246 	.word	0x20000246
 80016d4:	0800d14c 	.word	0x0800d14c
 80016d8:	0800d15c 	.word	0x0800d15c
 80016dc:	20000247 	.word	0x20000247
 80016e0:	0800d16c 	.word	0x0800d16c
			} else if(dilSecim == 1) {
 80016e4:	4b4f      	ldr	r3, [pc, #316]	; (8001824 <menu+0x680>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d104      	bne.n	80016f6 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80016ec:	4a4e      	ldr	r2, [pc, #312]	; (8001828 <menu+0x684>)
 80016ee:	2101      	movs	r1, #1
 80016f0:	2002      	movs	r0, #2
 80016f2:	f006 faf5 	bl	8007ce0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016f6:	4a4d      	ldr	r2, [pc, #308]	; (800182c <menu+0x688>)
 80016f8:	210f      	movs	r1, #15
 80016fa:	2002      	movs	r0, #2
 80016fc:	f006 faf0 	bl	8007ce0 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001700:	4b4b      	ldr	r3, [pc, #300]	; (8001830 <menu+0x68c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	220a      	movs	r2, #10
 8001706:	494b      	ldr	r1, [pc, #300]	; (8001834 <menu+0x690>)
 8001708:	4618      	mov	r0, r3
 800170a:	f00a fe3b 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 800170e:	4a49      	ldr	r2, [pc, #292]	; (8001834 <menu+0x690>)
 8001710:	210e      	movs	r1, #14
 8001712:	2002      	movs	r0, #2
 8001714:	f006 fae4 	bl	8007ce0 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001718:	4b47      	ldr	r3, [pc, #284]	; (8001838 <menu+0x694>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b07      	cmp	r3, #7
 800171e:	d123      	bne.n	8001768 <menu+0x5c4>
			if(dilSecim == 0) {
 8001720:	4b40      	ldr	r3, [pc, #256]	; (8001824 <menu+0x680>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d105      	bne.n	8001734 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001728:	4a44      	ldr	r2, [pc, #272]	; (800183c <menu+0x698>)
 800172a:	2101      	movs	r1, #1
 800172c:	2002      	movs	r0, #2
 800172e:	f006 fad7 	bl	8007ce0 <lcd_print>
 8001732:	e008      	b.n	8001746 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001734:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <menu+0x680>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d104      	bne.n	8001746 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 800173c:	4a40      	ldr	r2, [pc, #256]	; (8001840 <menu+0x69c>)
 800173e:	2101      	movs	r1, #1
 8001740:	2002      	movs	r0, #2
 8001742:	f006 facd 	bl	8007ce0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001746:	4a39      	ldr	r2, [pc, #228]	; (800182c <menu+0x688>)
 8001748:	210f      	movs	r1, #15
 800174a:	2002      	movs	r0, #2
 800174c:	f006 fac8 	bl	8007ce0 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001750:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <menu+0x6a0>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	220a      	movs	r2, #10
 8001756:	4937      	ldr	r1, [pc, #220]	; (8001834 <menu+0x690>)
 8001758:	4618      	mov	r0, r3
 800175a:	f00a fe13 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 800175e:	4a35      	ldr	r2, [pc, #212]	; (8001834 <menu+0x690>)
 8001760:	210e      	movs	r1, #14
 8001762:	2002      	movs	r0, #2
 8001764:	f006 fabc 	bl	8007ce0 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001768:	4b33      	ldr	r3, [pc, #204]	; (8001838 <menu+0x694>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b08      	cmp	r3, #8
 800176e:	d123      	bne.n	80017b8 <menu+0x614>
			if(dilSecim == 0) {
 8001770:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <menu+0x680>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001778:	4a33      	ldr	r2, [pc, #204]	; (8001848 <menu+0x6a4>)
 800177a:	2101      	movs	r1, #1
 800177c:	2002      	movs	r0, #2
 800177e:	f006 faaf 	bl	8007ce0 <lcd_print>
 8001782:	e008      	b.n	8001796 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <menu+0x680>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d104      	bne.n	8001796 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 800178c:	4a2f      	ldr	r2, [pc, #188]	; (800184c <menu+0x6a8>)
 800178e:	2101      	movs	r1, #1
 8001790:	2002      	movs	r0, #2
 8001792:	f006 faa5 	bl	8007ce0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001796:	4a25      	ldr	r2, [pc, #148]	; (800182c <menu+0x688>)
 8001798:	210f      	movs	r1, #15
 800179a:	2002      	movs	r0, #2
 800179c:	f006 faa0 	bl	8007ce0 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <menu+0x6ac>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	220a      	movs	r2, #10
 80017a6:	4923      	ldr	r1, [pc, #140]	; (8001834 <menu+0x690>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f00a fdeb 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 80017ae:	4a21      	ldr	r2, [pc, #132]	; (8001834 <menu+0x690>)
 80017b0:	210e      	movs	r1, #14
 80017b2:	2002      	movs	r0, #2
 80017b4:	f006 fa94 	bl	8007ce0 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <menu+0x694>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b09      	cmp	r3, #9
 80017be:	d123      	bne.n	8001808 <menu+0x664>
			if(dilSecim == 0) {
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <menu+0x680>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d105      	bne.n	80017d4 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80017c8:	4a22      	ldr	r2, [pc, #136]	; (8001854 <menu+0x6b0>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	2002      	movs	r0, #2
 80017ce:	f006 fa87 	bl	8007ce0 <lcd_print>
 80017d2:	e008      	b.n	80017e6 <menu+0x642>
			} else if(dilSecim == 1) {
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <menu+0x680>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d104      	bne.n	80017e6 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80017dc:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <menu+0x6b4>)
 80017de:	2101      	movs	r1, #1
 80017e0:	2002      	movs	r0, #2
 80017e2:	f006 fa7d 	bl	8007ce0 <lcd_print>
			}
			lcd_print(2, 16, " ");
 80017e6:	4a1d      	ldr	r2, [pc, #116]	; (800185c <menu+0x6b8>)
 80017e8:	2110      	movs	r1, #16
 80017ea:	2002      	movs	r0, #2
 80017ec:	f006 fa78 	bl	8007ce0 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <menu+0x6bc>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	220a      	movs	r2, #10
 80017f6:	490f      	ldr	r1, [pc, #60]	; (8001834 <menu+0x690>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f00a fdc3 	bl	800c384 <itoa>
			lcd_print(2, 15, snum);
 80017fe:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <menu+0x690>)
 8001800:	210f      	movs	r1, #15
 8001802:	2002      	movs	r0, #2
 8001804:	f006 fa6c 	bl	8007ce0 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <menu+0x694>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b0a      	cmp	r3, #10
 800180e:	d134      	bne.n	800187a <menu+0x6d6>
			if(dilSecim == 0) {
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <menu+0x680>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d127      	bne.n	8001868 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001818:	4a12      	ldr	r2, [pc, #72]	; (8001864 <menu+0x6c0>)
 800181a:	2101      	movs	r1, #1
 800181c:	2002      	movs	r0, #2
 800181e:	f006 fa5f 	bl	8007ce0 <lcd_print>
 8001822:	e02a      	b.n	800187a <menu+0x6d6>
 8001824:	20000241 	.word	0x20000241
 8001828:	0800d17c 	.word	0x0800d17c
 800182c:	0800d0e8 	.word	0x0800d0e8
 8001830:	20000248 	.word	0x20000248
 8001834:	20000188 	.word	0x20000188
 8001838:	20000222 	.word	0x20000222
 800183c:	0800d18c 	.word	0x0800d18c
 8001840:	0800d19c 	.word	0x0800d19c
 8001844:	20000249 	.word	0x20000249
 8001848:	0800d1ac 	.word	0x0800d1ac
 800184c:	0800d1bc 	.word	0x0800d1bc
 8001850:	2000024a 	.word	0x2000024a
 8001854:	0800d1cc 	.word	0x0800d1cc
 8001858:	0800d1dc 	.word	0x0800d1dc
 800185c:	0800d1ec 	.word	0x0800d1ec
 8001860:	2000024b 	.word	0x2000024b
 8001864:	0800d1f0 	.word	0x0800d1f0
			} else if(dilSecim == 1) {
 8001868:	4b82      	ldr	r3, [pc, #520]	; (8001a74 <menu+0x8d0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d104      	bne.n	800187a <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001870:	4a81      	ldr	r2, [pc, #516]	; (8001a78 <menu+0x8d4>)
 8001872:	2101      	movs	r1, #1
 8001874:	2002      	movs	r0, #2
 8001876:	f006 fa33 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800187a:	2102      	movs	r1, #2
 800187c:	487f      	ldr	r0, [pc, #508]	; (8001a7c <menu+0x8d8>)
 800187e:	f007 fd55 	bl	800932c <HAL_GPIO_ReadPin>
 8001882:	4603      	mov	r3, r0
 8001884:	2b01      	cmp	r3, #1
 8001886:	d119      	bne.n	80018bc <menu+0x718>
 8001888:	4b7d      	ldr	r3, [pc, #500]	; (8001a80 <menu+0x8dc>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	f083 0301 	eor.w	r3, r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d012      	beq.n	80018bc <menu+0x718>
 8001896:	4b7b      	ldr	r3, [pc, #492]	; (8001a84 <menu+0x8e0>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10e      	bne.n	80018bc <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 800189e:	4b7a      	ldr	r3, [pc, #488]	; (8001a88 <menu+0x8e4>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b78      	ldr	r3, [pc, #480]	; (8001a88 <menu+0x8e4>)
 80018a8:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80018aa:	4b77      	ldr	r3, [pc, #476]	; (8001a88 <menu+0x8e4>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b0a      	cmp	r3, #10
 80018b0:	d902      	bls.n	80018b8 <menu+0x714>
				hataGostermeSirasi = 0;
 80018b2:	4b75      	ldr	r3, [pc, #468]	; (8001a88 <menu+0x8e4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018b8:	f003 f84a 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80018bc:	2104      	movs	r1, #4
 80018be:	486f      	ldr	r0, [pc, #444]	; (8001a7c <menu+0x8d8>)
 80018c0:	f007 fd34 	bl	800932c <HAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d119      	bne.n	80018fe <menu+0x75a>
 80018ca:	4b6d      	ldr	r3, [pc, #436]	; (8001a80 <menu+0x8dc>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	f083 0301 	eor.w	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d012      	beq.n	80018fe <menu+0x75a>
 80018d8:	4b6a      	ldr	r3, [pc, #424]	; (8001a84 <menu+0x8e0>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10e      	bne.n	80018fe <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80018e0:	4b69      	ldr	r3, [pc, #420]	; (8001a88 <menu+0x8e4>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b67      	ldr	r3, [pc, #412]	; (8001a88 <menu+0x8e4>)
 80018ea:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80018ec:	4b66      	ldr	r3, [pc, #408]	; (8001a88 <menu+0x8e4>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b0b      	cmp	r3, #11
 80018f2:	d902      	bls.n	80018fa <menu+0x756>
	    		hataGostermeSirasi = 10;
 80018f4:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <menu+0x8e4>)
 80018f6:	220a      	movs	r2, #10
 80018f8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80018fa:	f003 f829 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80018fe:	2108      	movs	r1, #8
 8001900:	485e      	ldr	r0, [pc, #376]	; (8001a7c <menu+0x8d8>)
 8001902:	f007 fd13 	bl	800932c <HAL_GPIO_ReadPin>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d153      	bne.n	80019b4 <menu+0x810>
 800190c:	4b5c      	ldr	r3, [pc, #368]	; (8001a80 <menu+0x8dc>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f083 0301 	eor.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d04c      	beq.n	80019b4 <menu+0x810>
 800191a:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <menu+0x8e4>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b0a      	cmp	r3, #10
 8001920:	d148      	bne.n	80019b4 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001922:	4b5a      	ldr	r3, [pc, #360]	; (8001a8c <menu+0x8e8>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <menu+0x8ec>)
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001930:	4b58      	ldr	r3, [pc, #352]	; (8001a94 <menu+0x8f0>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
 8001936:	4b56      	ldr	r3, [pc, #344]	; (8001a90 <menu+0x8ec>)
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800193e:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <menu+0x8f4>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	4b52      	ldr	r3, [pc, #328]	; (8001a90 <menu+0x8ec>)
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <menu+0x8f8>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	4b4f      	ldr	r3, [pc, #316]	; (8001a90 <menu+0x8ec>)
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800195a:	4b51      	ldr	r3, [pc, #324]	; (8001aa0 <menu+0x8fc>)
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	4b4b      	ldr	r3, [pc, #300]	; (8001a90 <menu+0x8ec>)
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001968:	4b4e      	ldr	r3, [pc, #312]	; (8001aa4 <menu+0x900>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	4b48      	ldr	r3, [pc, #288]	; (8001a90 <menu+0x8ec>)
 8001970:	2200      	movs	r2, #0
 8001972:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001976:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <menu+0x904>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <menu+0x8ec>)
 800197e:	2200      	movs	r2, #0
 8001980:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001984:	4b49      	ldr	r3, [pc, #292]	; (8001aac <menu+0x908>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <menu+0x8ec>)
 800198c:	2200      	movs	r2, #0
 800198e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <menu+0x90c>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <menu+0x8ec>)
 800199a:	2200      	movs	r2, #0
 800199c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80019a0:	4b44      	ldr	r3, [pc, #272]	; (8001ab4 <menu+0x910>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <menu+0x8ec>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 80019ae:	4b42      	ldr	r3, [pc, #264]	; (8001ab8 <menu+0x914>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80019b4:	4b41      	ldr	r3, [pc, #260]	; (8001abc <menu+0x918>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	f040 80fc 	bne.w	8001bb6 <menu+0xa12>
		if(dilSecim == 0) {
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <menu+0x8d0>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d105      	bne.n	80019d2 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 80019c6:	4a3e      	ldr	r2, [pc, #248]	; (8001ac0 <menu+0x91c>)
 80019c8:	2101      	movs	r1, #1
 80019ca:	2001      	movs	r0, #1
 80019cc:	f006 f988 	bl	8007ce0 <lcd_print>
 80019d0:	e008      	b.n	80019e4 <menu+0x840>
		} else if(dilSecim == 1) {
 80019d2:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <menu+0x8d0>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d104      	bne.n	80019e4 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 80019da:	4a3a      	ldr	r2, [pc, #232]	; (8001ac4 <menu+0x920>)
 80019dc:	2101      	movs	r1, #1
 80019de:	2001      	movs	r0, #1
 80019e0:	f006 f97e 	bl	8007ce0 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <menu+0x8e0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d003      	beq.n	80019f4 <menu+0x850>
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <menu+0x8e0>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d112      	bne.n	8001a1a <menu+0x876>
			if(dilSecim == 0) {
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <menu+0x8d0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 80019fc:	4a32      	ldr	r2, [pc, #200]	; (8001ac8 <menu+0x924>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	2002      	movs	r0, #2
 8001a02:	f006 f96d 	bl	8007ce0 <lcd_print>
 8001a06:	e008      	b.n	8001a1a <menu+0x876>
			} else if(dilSecim == 1) {
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <menu+0x8d0>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d104      	bne.n	8001a1a <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001a10:	4a2e      	ldr	r2, [pc, #184]	; (8001acc <menu+0x928>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	2002      	movs	r0, #2
 8001a16:	f006 f963 	bl	8007ce0 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <menu+0x92c>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d116      	bne.n	8001a50 <menu+0x8ac>
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <menu+0x8e0>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d112      	bne.n	8001a50 <menu+0x8ac>
			if(dilSecim == 0) {
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <menu+0x8d0>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001a32:	4a28      	ldr	r2, [pc, #160]	; (8001ad4 <menu+0x930>)
 8001a34:	2101      	movs	r1, #1
 8001a36:	2002      	movs	r0, #2
 8001a38:	f006 f952 	bl	8007ce0 <lcd_print>
 8001a3c:	e008      	b.n	8001a50 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <menu+0x8d0>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d104      	bne.n	8001a50 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001a46:	4a24      	ldr	r2, [pc, #144]	; (8001ad8 <menu+0x934>)
 8001a48:	2101      	movs	r1, #1
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f006 f948 	bl	8007ce0 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001a50:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <menu+0x92c>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d14c      	bne.n	8001af2 <menu+0x94e>
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <menu+0x8e0>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d148      	bne.n	8001af2 <menu+0x94e>
			if(dilSecim == 0) {
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <menu+0x8d0>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d13b      	bne.n	8001ae0 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001a68:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <menu+0x938>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f006 f937 	bl	8007ce0 <lcd_print>
 8001a72:	e03e      	b.n	8001af2 <menu+0x94e>
 8001a74:	20000241 	.word	0x20000241
 8001a78:	0800d204 	.word	0x0800d204
 8001a7c:	40010800 	.word	0x40010800
 8001a80:	2000024f 	.word	0x2000024f
 8001a84:	2000022f 	.word	0x2000022f
 8001a88:	20000222 	.word	0x20000222
 8001a8c:	20000242 	.word	0x20000242
 8001a90:	20000118 	.word	0x20000118
 8001a94:	20000243 	.word	0x20000243
 8001a98:	20000244 	.word	0x20000244
 8001a9c:	20000245 	.word	0x20000245
 8001aa0:	20000246 	.word	0x20000246
 8001aa4:	20000247 	.word	0x20000247
 8001aa8:	20000248 	.word	0x20000248
 8001aac:	20000249 	.word	0x20000249
 8001ab0:	2000024a 	.word	0x2000024a
 8001ab4:	2000024b 	.word	0x2000024b
 8001ab8:	2000024c 	.word	0x2000024c
 8001abc:	20000220 	.word	0x20000220
 8001ac0:	0800d218 	.word	0x0800d218
 8001ac4:	0800d22c 	.word	0x0800d22c
 8001ac8:	0800d240 	.word	0x0800d240
 8001acc:	0800d254 	.word	0x0800d254
 8001ad0:	20000221 	.word	0x20000221
 8001ad4:	0800d268 	.word	0x0800d268
 8001ad8:	0800d278 	.word	0x0800d278
 8001adc:	0800d288 	.word	0x0800d288
			} else if(dilSecim == 1) {
 8001ae0:	4b98      	ldr	r3, [pc, #608]	; (8001d44 <menu+0xba0>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d104      	bne.n	8001af2 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001ae8:	4a97      	ldr	r2, [pc, #604]	; (8001d48 <menu+0xba4>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	2002      	movs	r0, #2
 8001aee:	f006 f8f7 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001af2:	2102      	movs	r1, #2
 8001af4:	4895      	ldr	r0, [pc, #596]	; (8001d4c <menu+0xba8>)
 8001af6:	f007 fc19 	bl	800932c <HAL_GPIO_ReadPin>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d119      	bne.n	8001b34 <menu+0x990>
 8001b00:	4b93      	ldr	r3, [pc, #588]	; (8001d50 <menu+0xbac>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	f083 0301 	eor.w	r3, r3, #1
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d012      	beq.n	8001b34 <menu+0x990>
 8001b0e:	4b91      	ldr	r3, [pc, #580]	; (8001d54 <menu+0xbb0>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10e      	bne.n	8001b34 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001b16:	4b90      	ldr	r3, [pc, #576]	; (8001d58 <menu+0xbb4>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4b8e      	ldr	r3, [pc, #568]	; (8001d58 <menu+0xbb4>)
 8001b20:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001b22:	4b8d      	ldr	r3, [pc, #564]	; (8001d58 <menu+0xbb4>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d902      	bls.n	8001b30 <menu+0x98c>
				calismaSekli = 0;
 8001b2a:	4b8b      	ldr	r3, [pc, #556]	; (8001d58 <menu+0xbb4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b30:	f002 ff0e 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b34:	2104      	movs	r1, #4
 8001b36:	4885      	ldr	r0, [pc, #532]	; (8001d4c <menu+0xba8>)
 8001b38:	f007 fbf8 	bl	800932c <HAL_GPIO_ReadPin>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d119      	bne.n	8001b76 <menu+0x9d2>
 8001b42:	4b83      	ldr	r3, [pc, #524]	; (8001d50 <menu+0xbac>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	f083 0301 	eor.w	r3, r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d012      	beq.n	8001b76 <menu+0x9d2>
 8001b50:	4b80      	ldr	r3, [pc, #512]	; (8001d54 <menu+0xbb0>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10e      	bne.n	8001b76 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001b58:	4b7f      	ldr	r3, [pc, #508]	; (8001d58 <menu+0xbb4>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4b7d      	ldr	r3, [pc, #500]	; (8001d58 <menu+0xbb4>)
 8001b62:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001b64:	4b7c      	ldr	r3, [pc, #496]	; (8001d58 <menu+0xbb4>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <menu+0x9ce>
	    		calismaSekli = 1;
 8001b6c:	4b7a      	ldr	r3, [pc, #488]	; (8001d58 <menu+0xbb4>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b72:	f002 feed 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b76:	2108      	movs	r1, #8
 8001b78:	4874      	ldr	r0, [pc, #464]	; (8001d4c <menu+0xba8>)
 8001b7a:	f007 fbd7 	bl	800932c <HAL_GPIO_ReadPin>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d118      	bne.n	8001bb6 <menu+0xa12>
 8001b84:	4b72      	ldr	r3, [pc, #456]	; (8001d50 <menu+0xbac>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	f083 0301 	eor.w	r3, r3, #1
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d011      	beq.n	8001bb6 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001b92:	4b71      	ldr	r3, [pc, #452]	; (8001d58 <menu+0xbb4>)
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	4b71      	ldr	r3, [pc, #452]	; (8001d5c <menu+0xbb8>)
 8001b98:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001b9a:	4b6f      	ldr	r3, [pc, #444]	; (8001d58 <menu+0xbb4>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d106      	bne.n	8001bb0 <menu+0xa0c>
				altLimit = 1;
 8001ba2:	4b6f      	ldr	r3, [pc, #444]	; (8001d60 <menu+0xbbc>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001ba8:	4b6d      	ldr	r3, [pc, #436]	; (8001d60 <menu+0xbbc>)
 8001baa:	781a      	ldrb	r2, [r3, #0]
 8001bac:	4b6b      	ldr	r3, [pc, #428]	; (8001d5c <menu+0xbb8>)
 8001bae:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001bb0:	4b6c      	ldr	r3, [pc, #432]	; (8001d64 <menu+0xbc0>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001bb6:	4b6c      	ldr	r3, [pc, #432]	; (8001d68 <menu+0xbc4>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	f040 8083 	bne.w	8001cc6 <menu+0xb22>
		if(dilSecim == 0) {
 8001bc0:	4b60      	ldr	r3, [pc, #384]	; (8001d44 <menu+0xba0>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001bc8:	4a68      	ldr	r2, [pc, #416]	; (8001d6c <menu+0xbc8>)
 8001bca:	2101      	movs	r1, #1
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f006 f887 	bl	8007ce0 <lcd_print>
 8001bd2:	e008      	b.n	8001be6 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001bd4:	4b5b      	ldr	r3, [pc, #364]	; (8001d44 <menu+0xba0>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d104      	bne.n	8001be6 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001bdc:	4a64      	ldr	r2, [pc, #400]	; (8001d70 <menu+0xbcc>)
 8001bde:	2101      	movs	r1, #1
 8001be0:	2001      	movs	r0, #1
 8001be2:	f006 f87d 	bl	8007ce0 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001be6:	4b63      	ldr	r3, [pc, #396]	; (8001d74 <menu+0xbd0>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d113      	bne.n	8001c16 <menu+0xa72>
			if(dilSecim == 0) {
 8001bee:	4b55      	ldr	r3, [pc, #340]	; (8001d44 <menu+0xba0>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d105      	bne.n	8001c02 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001bf6:	4a60      	ldr	r2, [pc, #384]	; (8001d78 <menu+0xbd4>)
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	f006 f870 	bl	8007ce0 <lcd_print>
 8001c00:	e012      	b.n	8001c28 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001c02:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <menu+0xba0>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d10e      	bne.n	8001c28 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001c0a:	4a5c      	ldr	r2, [pc, #368]	; (8001d7c <menu+0xbd8>)
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f006 f866 	bl	8007ce0 <lcd_print>
 8001c14:	e008      	b.n	8001c28 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001c16:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <menu+0xbd0>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d104      	bne.n	8001c28 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001c1e:	4a58      	ldr	r2, [pc, #352]	; (8001d80 <menu+0xbdc>)
 8001c20:	2101      	movs	r1, #1
 8001c22:	2002      	movs	r0, #2
 8001c24:	f006 f85c 	bl	8007ce0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c28:	2102      	movs	r1, #2
 8001c2a:	4848      	ldr	r0, [pc, #288]	; (8001d4c <menu+0xba8>)
 8001c2c:	f007 fb7e 	bl	800932c <HAL_GPIO_ReadPin>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d115      	bne.n	8001c62 <menu+0xabe>
 8001c36:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <menu+0xbac>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	f083 0301 	eor.w	r3, r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00e      	beq.n	8001c62 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001c44:	4b4b      	ldr	r3, [pc, #300]	; (8001d74 <menu+0xbd0>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <menu+0xbd0>)
 8001c4e:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001c50:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <menu+0xbd0>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d902      	bls.n	8001c5e <menu+0xaba>
				emniyetCercevesi = 0;
 8001c58:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <menu+0xbd0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c5e:	f002 fe77 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c62:	2104      	movs	r1, #4
 8001c64:	4839      	ldr	r0, [pc, #228]	; (8001d4c <menu+0xba8>)
 8001c66:	f007 fb61 	bl	800932c <HAL_GPIO_ReadPin>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d115      	bne.n	8001c9c <menu+0xaf8>
 8001c70:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <menu+0xbac>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	f083 0301 	eor.w	r3, r3, #1
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00e      	beq.n	8001c9c <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <menu+0xbd0>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <menu+0xbd0>)
 8001c88:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <menu+0xbd0>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001c92:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <menu+0xbd0>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c98:	f002 fe5a 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001c9c:	2108      	movs	r1, #8
 8001c9e:	482b      	ldr	r0, [pc, #172]	; (8001d4c <menu+0xba8>)
 8001ca0:	f007 fb44 	bl	800932c <HAL_GPIO_ReadPin>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d10d      	bne.n	8001cc6 <menu+0xb22>
 8001caa:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <menu+0xbac>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	f083 0301 	eor.w	r3, r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <menu+0xbd0>)
 8001cba:	781a      	ldrb	r2, [r3, #0]
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <menu+0xbb8>)
 8001cbe:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001cc0:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <menu+0xbc0>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <menu+0xbc4>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	f040 80ba 	bne.w	8001e44 <menu+0xca0>
		if(dilSecim == 0) {
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <menu+0xba0>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d105      	bne.n	8001ce4 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001cd8:	4a2a      	ldr	r2, [pc, #168]	; (8001d84 <menu+0xbe0>)
 8001cda:	2101      	movs	r1, #1
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f005 ffff 	bl	8007ce0 <lcd_print>
 8001ce2:	e008      	b.n	8001cf6 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <menu+0xba0>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d104      	bne.n	8001cf6 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001cec:	4a26      	ldr	r2, [pc, #152]	; (8001d88 <menu+0xbe4>)
 8001cee:	2101      	movs	r1, #1
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f005 fff5 	bl	8007ce0 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <menu+0xbe8>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d113      	bne.n	8001d26 <menu+0xb82>
			if(dilSecim == 0) {
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <menu+0xba0>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d105      	bne.n	8001d12 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001d06:	4a1c      	ldr	r2, [pc, #112]	; (8001d78 <menu+0xbd4>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	f005 ffe8 	bl	8007ce0 <lcd_print>
 8001d10:	e049      	b.n	8001da6 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <menu+0xba0>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d145      	bne.n	8001da6 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001d1a:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <menu+0xbd8>)
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	2002      	movs	r0, #2
 8001d20:	f005 ffde 	bl	8007ce0 <lcd_print>
 8001d24:	e03f      	b.n	8001da6 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <menu+0xbe8>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d13b      	bne.n	8001da6 <menu+0xc02>
			if(dilSecim == 0) {
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <menu+0xba0>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d12e      	bne.n	8001d94 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001d36:	4a16      	ldr	r2, [pc, #88]	; (8001d90 <menu+0xbec>)
 8001d38:	2101      	movs	r1, #1
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	f005 ffd0 	bl	8007ce0 <lcd_print>
 8001d40:	e031      	b.n	8001da6 <menu+0xc02>
 8001d42:	bf00      	nop
 8001d44:	20000241 	.word	0x20000241
 8001d48:	0800d298 	.word	0x0800d298
 8001d4c:	40010800 	.word	0x40010800
 8001d50:	2000024f 	.word	0x2000024f
 8001d54:	2000022f 	.word	0x2000022f
 8001d58:	20000221 	.word	0x20000221
 8001d5c:	20000118 	.word	0x20000118
 8001d60:	20000226 	.word	0x20000226
 8001d64:	2000024c 	.word	0x2000024c
 8001d68:	20000220 	.word	0x20000220
 8001d6c:	0800d2a8 	.word	0x0800d2a8
 8001d70:	0800d2bc 	.word	0x0800d2bc
 8001d74:	20000224 	.word	0x20000224
 8001d78:	0800d2d0 	.word	0x0800d2d0
 8001d7c:	0800d2e4 	.word	0x0800d2e4
 8001d80:	0800d2f8 	.word	0x0800d2f8
 8001d84:	0800d308 	.word	0x0800d308
 8001d88:	0800d31c 	.word	0x0800d31c
 8001d8c:	20000225 	.word	0x20000225
 8001d90:	0800d330 	.word	0x0800d330
			} else if(dilSecim == 1) {
 8001d94:	4b92      	ldr	r3, [pc, #584]	; (8001fe0 <menu+0xe3c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d104      	bne.n	8001da6 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001d9c:	4a91      	ldr	r2, [pc, #580]	; (8001fe4 <menu+0xe40>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	2002      	movs	r0, #2
 8001da2:	f005 ff9d 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001da6:	2102      	movs	r1, #2
 8001da8:	488f      	ldr	r0, [pc, #572]	; (8001fe8 <menu+0xe44>)
 8001daa:	f007 fabf 	bl	800932c <HAL_GPIO_ReadPin>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d115      	bne.n	8001de0 <menu+0xc3c>
 8001db4:	4b8d      	ldr	r3, [pc, #564]	; (8001fec <menu+0xe48>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	f083 0301 	eor.w	r3, r3, #1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00e      	beq.n	8001de0 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001dc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ff0 <menu+0xe4c>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b89      	ldr	r3, [pc, #548]	; (8001ff0 <menu+0xe4c>)
 8001dcc:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001dce:	4b88      	ldr	r3, [pc, #544]	; (8001ff0 <menu+0xe4c>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d902      	bls.n	8001ddc <menu+0xc38>
				yavaslamaLimit = 0;
 8001dd6:	4b86      	ldr	r3, [pc, #536]	; (8001ff0 <menu+0xe4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ddc:	f002 fdb8 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001de0:	2104      	movs	r1, #4
 8001de2:	4881      	ldr	r0, [pc, #516]	; (8001fe8 <menu+0xe44>)
 8001de4:	f007 faa2 	bl	800932c <HAL_GPIO_ReadPin>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d115      	bne.n	8001e1a <menu+0xc76>
 8001dee:	4b7f      	ldr	r3, [pc, #508]	; (8001fec <menu+0xe48>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	f083 0301 	eor.w	r3, r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00e      	beq.n	8001e1a <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001dfc:	4b7c      	ldr	r3, [pc, #496]	; (8001ff0 <menu+0xe4c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b7a      	ldr	r3, [pc, #488]	; (8001ff0 <menu+0xe4c>)
 8001e06:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001e08:	4b79      	ldr	r3, [pc, #484]	; (8001ff0 <menu+0xe4c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001e10:	4b77      	ldr	r3, [pc, #476]	; (8001ff0 <menu+0xe4c>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e16:	f002 fd9b 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e1a:	2108      	movs	r1, #8
 8001e1c:	4872      	ldr	r0, [pc, #456]	; (8001fe8 <menu+0xe44>)
 8001e1e:	f007 fa85 	bl	800932c <HAL_GPIO_ReadPin>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d10d      	bne.n	8001e44 <menu+0xca0>
 8001e28:	4b70      	ldr	r3, [pc, #448]	; (8001fec <menu+0xe48>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	f083 0301 	eor.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d006      	beq.n	8001e44 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001e36:	4b6e      	ldr	r3, [pc, #440]	; (8001ff0 <menu+0xe4c>)
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	4b6e      	ldr	r3, [pc, #440]	; (8001ff4 <menu+0xe50>)
 8001e3c:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001e3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ff8 <menu+0xe54>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001e44:	4b6d      	ldr	r3, [pc, #436]	; (8001ffc <menu+0xe58>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	f040 80b9 	bne.w	8001fc0 <menu+0xe1c>
		if(dilSecim == 0) {
 8001e4e:	4b64      	ldr	r3, [pc, #400]	; (8001fe0 <menu+0xe3c>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d105      	bne.n	8001e62 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001e56:	4a6a      	ldr	r2, [pc, #424]	; (8002000 <menu+0xe5c>)
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f005 ff40 	bl	8007ce0 <lcd_print>
 8001e60:	e008      	b.n	8001e74 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001e62:	4b5f      	ldr	r3, [pc, #380]	; (8001fe0 <menu+0xe3c>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d104      	bne.n	8001e74 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001e6a:	4a66      	ldr	r2, [pc, #408]	; (8002004 <menu+0xe60>)
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f005 ff36 	bl	8007ce0 <lcd_print>
		}

		if(altLimit == 0) {
 8001e74:	4b64      	ldr	r3, [pc, #400]	; (8002008 <menu+0xe64>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d113      	bne.n	8001ea4 <menu+0xd00>
			if(dilSecim == 0) {
 8001e7c:	4b58      	ldr	r3, [pc, #352]	; (8001fe0 <menu+0xe3c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d105      	bne.n	8001e90 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001e84:	4a61      	ldr	r2, [pc, #388]	; (800200c <menu+0xe68>)
 8001e86:	2101      	movs	r1, #1
 8001e88:	2002      	movs	r0, #2
 8001e8a:	f005 ff29 	bl	8007ce0 <lcd_print>
 8001e8e:	e020      	b.n	8001ed2 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001e90:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <menu+0xe3c>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d11c      	bne.n	8001ed2 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001e98:	4a5d      	ldr	r2, [pc, #372]	; (8002010 <menu+0xe6c>)
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	f005 ff1f 	bl	8007ce0 <lcd_print>
 8001ea2:	e016      	b.n	8001ed2 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001ea4:	4b58      	ldr	r3, [pc, #352]	; (8002008 <menu+0xe64>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d112      	bne.n	8001ed2 <menu+0xd2e>
			if(dilSecim == 0){
 8001eac:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <menu+0xe3c>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d105      	bne.n	8001ec0 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001eb4:	4a57      	ldr	r2, [pc, #348]	; (8002014 <menu+0xe70>)
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f005 ff11 	bl	8007ce0 <lcd_print>
 8001ebe:	e008      	b.n	8001ed2 <menu+0xd2e>
			} else if(dilSecim == 1){
 8001ec0:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <menu+0xe3c>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d104      	bne.n	8001ed2 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001ec8:	4a46      	ldr	r2, [pc, #280]	; (8001fe4 <menu+0xe40>)
 8001eca:	2101      	movs	r1, #1
 8001ecc:	2002      	movs	r0, #2
 8001ece:	f005 ff07 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	4844      	ldr	r0, [pc, #272]	; (8001fe8 <menu+0xe44>)
 8001ed6:	f007 fa29 	bl	800932c <HAL_GPIO_ReadPin>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d119      	bne.n	8001f14 <menu+0xd70>
 8001ee0:	4b42      	ldr	r3, [pc, #264]	; (8001fec <menu+0xe48>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	f083 0301 	eor.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d012      	beq.n	8001f14 <menu+0xd70>
 8001eee:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <menu+0xe74>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10e      	bne.n	8001f14 <menu+0xd70>
			altLimit = altLimit + 1;
 8001ef6:	4b44      	ldr	r3, [pc, #272]	; (8002008 <menu+0xe64>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	3301      	adds	r3, #1
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b42      	ldr	r3, [pc, #264]	; (8002008 <menu+0xe64>)
 8001f00:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001f02:	4b41      	ldr	r3, [pc, #260]	; (8002008 <menu+0xe64>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d902      	bls.n	8001f10 <menu+0xd6c>
				altLimit = 0;
 8001f0a:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <menu+0xe64>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f10:	f002 fd1e 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001f14:	2104      	movs	r1, #4
 8001f16:	4834      	ldr	r0, [pc, #208]	; (8001fe8 <menu+0xe44>)
 8001f18:	f007 fa08 	bl	800932c <HAL_GPIO_ReadPin>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d119      	bne.n	8001f56 <menu+0xdb2>
 8001f22:	4b32      	ldr	r3, [pc, #200]	; (8001fec <menu+0xe48>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	f083 0301 	eor.w	r3, r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d012      	beq.n	8001f56 <menu+0xdb2>
 8001f30:	4b39      	ldr	r3, [pc, #228]	; (8002018 <menu+0xe74>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10e      	bne.n	8001f56 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001f38:	4b33      	ldr	r3, [pc, #204]	; (8002008 <menu+0xe64>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b31      	ldr	r3, [pc, #196]	; (8002008 <menu+0xe64>)
 8001f42:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001f44:	4b30      	ldr	r3, [pc, #192]	; (8002008 <menu+0xe64>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <menu+0xdae>
		   		altLimit = 1;
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <menu+0xe64>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f52:	f002 fcfd 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f56:	2108      	movs	r1, #8
 8001f58:	4823      	ldr	r0, [pc, #140]	; (8001fe8 <menu+0xe44>)
 8001f5a:	f007 f9e7 	bl	800932c <HAL_GPIO_ReadPin>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d12d      	bne.n	8001fc0 <menu+0xe1c>
 8001f64:	4b21      	ldr	r3, [pc, #132]	; (8001fec <menu+0xe48>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	f083 0301 	eor.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d026      	beq.n	8001fc0 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001f72:	4b25      	ldr	r3, [pc, #148]	; (8002008 <menu+0xe64>)
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <menu+0xe50>)
 8001f78:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001f7a:	4b23      	ldr	r3, [pc, #140]	; (8002008 <menu+0xe64>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d110      	bne.n	8001fa4 <menu+0xe00>
 8001f82:	4b26      	ldr	r3, [pc, #152]	; (800201c <menu+0xe78>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <menu+0xdee>
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <menu+0xe78>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d108      	bne.n	8001fa4 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001f92:	4b22      	ldr	r3, [pc, #136]	; (800201c <menu+0xe78>)
 8001f94:	2203      	movs	r2, #3
 8001f96:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001f98:	4b20      	ldr	r3, [pc, #128]	; (800201c <menu+0xe78>)
 8001f9a:	781a      	ldrb	r2, [r3, #0]
 8001f9c:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <menu+0xe50>)
 8001f9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001fa2:	e00a      	b.n	8001fba <menu+0xe16>
			} else if(altLimit == 0) {
 8001fa4:	4b18      	ldr	r3, [pc, #96]	; (8002008 <menu+0xe64>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d106      	bne.n	8001fba <menu+0xe16>
				platformSilindirTipi = 0;
 8001fac:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <menu+0xe7c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <menu+0xe7c>)
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <menu+0xe50>)
 8001fb8:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <menu+0xe54>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <menu+0xe58>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b06      	cmp	r3, #6
 8001fc6:	f040 80b6 	bne.w	8002136 <menu+0xf92>
		if(dilSecim == 0) {
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <menu+0xe3c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d12a      	bne.n	8002028 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001fd2:	4a14      	ldr	r2, [pc, #80]	; (8002024 <menu+0xe80>)
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f005 fe82 	bl	8007ce0 <lcd_print>
 8001fdc:	e02d      	b.n	800203a <menu+0xe96>
 8001fde:	bf00      	nop
 8001fe0:	20000241 	.word	0x20000241
 8001fe4:	0800d344 	.word	0x0800d344
 8001fe8:	40010800 	.word	0x40010800
 8001fec:	2000024f 	.word	0x2000024f
 8001ff0:	20000225 	.word	0x20000225
 8001ff4:	20000118 	.word	0x20000118
 8001ff8:	2000024c 	.word	0x2000024c
 8001ffc:	20000220 	.word	0x20000220
 8002000:	0800d358 	.word	0x0800d358
 8002004:	0800d36c 	.word	0x0800d36c
 8002008:	20000226 	.word	0x20000226
 800200c:	0800d2d0 	.word	0x0800d2d0
 8002010:	0800d2e4 	.word	0x0800d2e4
 8002014:	0800d330 	.word	0x0800d330
 8002018:	20000221 	.word	0x20000221
 800201c:	2000022d 	.word	0x2000022d
 8002020:	20000233 	.word	0x20000233
 8002024:	0800d380 	.word	0x0800d380
		} else if(dilSecim == 1){
 8002028:	4b7a      	ldr	r3, [pc, #488]	; (8002214 <menu+0x1070>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d104      	bne.n	800203a <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002030:	4a79      	ldr	r2, [pc, #484]	; (8002218 <menu+0x1074>)
 8002032:	2101      	movs	r1, #1
 8002034:	2001      	movs	r0, #1
 8002036:	f005 fe53 	bl	8007ce0 <lcd_print>
		}
		if(basincSalteri == 0){
 800203a:	4b78      	ldr	r3, [pc, #480]	; (800221c <menu+0x1078>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d113      	bne.n	800206a <menu+0xec6>
			if(dilSecim == 0) {
 8002042:	4b74      	ldr	r3, [pc, #464]	; (8002214 <menu+0x1070>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d105      	bne.n	8002056 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 800204a:	4a75      	ldr	r2, [pc, #468]	; (8002220 <menu+0x107c>)
 800204c:	2101      	movs	r1, #1
 800204e:	2002      	movs	r0, #2
 8002050:	f005 fe46 	bl	8007ce0 <lcd_print>
 8002054:	e020      	b.n	8002098 <menu+0xef4>
			} else if(dilSecim == 1){
 8002056:	4b6f      	ldr	r3, [pc, #444]	; (8002214 <menu+0x1070>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d11c      	bne.n	8002098 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800205e:	4a71      	ldr	r2, [pc, #452]	; (8002224 <menu+0x1080>)
 8002060:	2101      	movs	r1, #1
 8002062:	2002      	movs	r0, #2
 8002064:	f005 fe3c 	bl	8007ce0 <lcd_print>
 8002068:	e016      	b.n	8002098 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800206a:	4b6c      	ldr	r3, [pc, #432]	; (800221c <menu+0x1078>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d112      	bne.n	8002098 <menu+0xef4>
			if(dilSecim == 0) {
 8002072:	4b68      	ldr	r3, [pc, #416]	; (8002214 <menu+0x1070>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d105      	bne.n	8002086 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800207a:	4a6b      	ldr	r2, [pc, #428]	; (8002228 <menu+0x1084>)
 800207c:	2101      	movs	r1, #1
 800207e:	2002      	movs	r0, #2
 8002080:	f005 fe2e 	bl	8007ce0 <lcd_print>
 8002084:	e008      	b.n	8002098 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002086:	4b63      	ldr	r3, [pc, #396]	; (8002214 <menu+0x1070>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d104      	bne.n	8002098 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800208e:	4a67      	ldr	r2, [pc, #412]	; (800222c <menu+0x1088>)
 8002090:	2101      	movs	r1, #1
 8002092:	2002      	movs	r0, #2
 8002094:	f005 fe24 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002098:	2102      	movs	r1, #2
 800209a:	4865      	ldr	r0, [pc, #404]	; (8002230 <menu+0x108c>)
 800209c:	f007 f946 	bl	800932c <HAL_GPIO_ReadPin>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d115      	bne.n	80020d2 <menu+0xf2e>
 80020a6:	4b63      	ldr	r3, [pc, #396]	; (8002234 <menu+0x1090>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	f083 0301 	eor.w	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00e      	beq.n	80020d2 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80020b4:	4b59      	ldr	r3, [pc, #356]	; (800221c <menu+0x1078>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	4b57      	ldr	r3, [pc, #348]	; (800221c <menu+0x1078>)
 80020be:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80020c0:	4b56      	ldr	r3, [pc, #344]	; (800221c <menu+0x1078>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d902      	bls.n	80020ce <menu+0xf2a>
				basincSalteri = 0;
 80020c8:	4b54      	ldr	r3, [pc, #336]	; (800221c <menu+0x1078>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020ce:	f002 fc3f 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020d2:	2104      	movs	r1, #4
 80020d4:	4856      	ldr	r0, [pc, #344]	; (8002230 <menu+0x108c>)
 80020d6:	f007 f929 	bl	800932c <HAL_GPIO_ReadPin>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d115      	bne.n	800210c <menu+0xf68>
 80020e0:	4b54      	ldr	r3, [pc, #336]	; (8002234 <menu+0x1090>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	f083 0301 	eor.w	r3, r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00e      	beq.n	800210c <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80020ee:	4b4b      	ldr	r3, [pc, #300]	; (800221c <menu+0x1078>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b49      	ldr	r3, [pc, #292]	; (800221c <menu+0x1078>)
 80020f8:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80020fa:	4b48      	ldr	r3, [pc, #288]	; (800221c <menu+0x1078>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <menu+0xf64>
		   		basincSalteri = 1;
 8002102:	4b46      	ldr	r3, [pc, #280]	; (800221c <menu+0x1078>)
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002108:	f002 fc22 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800210c:	2108      	movs	r1, #8
 800210e:	4848      	ldr	r0, [pc, #288]	; (8002230 <menu+0x108c>)
 8002110:	f007 f90c 	bl	800932c <HAL_GPIO_ReadPin>
 8002114:	4603      	mov	r3, r0
 8002116:	2b01      	cmp	r3, #1
 8002118:	d10d      	bne.n	8002136 <menu+0xf92>
 800211a:	4b46      	ldr	r3, [pc, #280]	; (8002234 <menu+0x1090>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	f083 0301 	eor.w	r3, r3, #1
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002128:	4b3c      	ldr	r3, [pc, #240]	; (800221c <menu+0x1078>)
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	4b42      	ldr	r3, [pc, #264]	; (8002238 <menu+0x1094>)
 800212e:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002130:	4b42      	ldr	r3, [pc, #264]	; (800223c <menu+0x1098>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <menu+0x109c>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b07      	cmp	r3, #7
 800213c:	f040 80f5 	bne.w	800232a <menu+0x1186>
		if(dilSecim == 0) {
 8002140:	4b34      	ldr	r3, [pc, #208]	; (8002214 <menu+0x1070>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d105      	bne.n	8002154 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002148:	4a3e      	ldr	r2, [pc, #248]	; (8002244 <menu+0x10a0>)
 800214a:	2101      	movs	r1, #1
 800214c:	2001      	movs	r0, #1
 800214e:	f005 fdc7 	bl	8007ce0 <lcd_print>
 8002152:	e008      	b.n	8002166 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002154:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <menu+0x1070>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d104      	bne.n	8002166 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 800215c:	4a3a      	ldr	r2, [pc, #232]	; (8002248 <menu+0x10a4>)
 800215e:	2101      	movs	r1, #1
 8002160:	2001      	movs	r0, #1
 8002162:	f005 fdbd 	bl	8007ce0 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002166:	4b39      	ldr	r3, [pc, #228]	; (800224c <menu+0x10a8>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d113      	bne.n	8002196 <menu+0xff2>
			if(dilSecim == 0) {
 800216e:	4b29      	ldr	r3, [pc, #164]	; (8002214 <menu+0x1070>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d105      	bne.n	8002182 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002176:	4a2a      	ldr	r2, [pc, #168]	; (8002220 <menu+0x107c>)
 8002178:	2101      	movs	r1, #1
 800217a:	2002      	movs	r0, #2
 800217c:	f005 fdb0 	bl	8007ce0 <lcd_print>
 8002180:	e079      	b.n	8002276 <menu+0x10d2>
			} else if(dilSecim == 1){
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <menu+0x1070>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d175      	bne.n	8002276 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800218a:	4a26      	ldr	r2, [pc, #152]	; (8002224 <menu+0x1080>)
 800218c:	2101      	movs	r1, #1
 800218e:	2002      	movs	r0, #2
 8002190:	f005 fda6 	bl	8007ce0 <lcd_print>
 8002194:	e06f      	b.n	8002276 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002196:	4b2d      	ldr	r3, [pc, #180]	; (800224c <menu+0x10a8>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d113      	bne.n	80021c6 <menu+0x1022>
			if(dilSecim == 0) {
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <menu+0x1070>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d105      	bne.n	80021b2 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80021a6:	4a2a      	ldr	r2, [pc, #168]	; (8002250 <menu+0x10ac>)
 80021a8:	2101      	movs	r1, #1
 80021aa:	2002      	movs	r0, #2
 80021ac:	f005 fd98 	bl	8007ce0 <lcd_print>
 80021b0:	e061      	b.n	8002276 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <menu+0x1070>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d15d      	bne.n	8002276 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80021ba:	4a26      	ldr	r2, [pc, #152]	; (8002254 <menu+0x10b0>)
 80021bc:	2101      	movs	r1, #1
 80021be:	2002      	movs	r0, #2
 80021c0:	f005 fd8e 	bl	8007ce0 <lcd_print>
 80021c4:	e057      	b.n	8002276 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80021c6:	4b21      	ldr	r3, [pc, #132]	; (800224c <menu+0x10a8>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d113      	bne.n	80021f6 <menu+0x1052>
			if(dilSecim == 0) {
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <menu+0x1070>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80021d6:	4a20      	ldr	r2, [pc, #128]	; (8002258 <menu+0x10b4>)
 80021d8:	2101      	movs	r1, #1
 80021da:	2002      	movs	r0, #2
 80021dc:	f005 fd80 	bl	8007ce0 <lcd_print>
 80021e0:	e049      	b.n	8002276 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <menu+0x1070>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d145      	bne.n	8002276 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80021ea:	4a1c      	ldr	r2, [pc, #112]	; (800225c <menu+0x10b8>)
 80021ec:	2101      	movs	r1, #1
 80021ee:	2002      	movs	r0, #2
 80021f0:	f005 fd76 	bl	8007ce0 <lcd_print>
 80021f4:	e03f      	b.n	8002276 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <menu+0x10a8>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d13b      	bne.n	8002276 <menu+0x10d2>
			if(dilSecim == 0) {
 80021fe:	4b05      	ldr	r3, [pc, #20]	; (8002214 <menu+0x1070>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d12e      	bne.n	8002264 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002206:	4a16      	ldr	r2, [pc, #88]	; (8002260 <menu+0x10bc>)
 8002208:	2101      	movs	r1, #1
 800220a:	2002      	movs	r0, #2
 800220c:	f005 fd68 	bl	8007ce0 <lcd_print>
 8002210:	e031      	b.n	8002276 <menu+0x10d2>
 8002212:	bf00      	nop
 8002214:	20000241 	.word	0x20000241
 8002218:	0800d390 	.word	0x0800d390
 800221c:	20000227 	.word	0x20000227
 8002220:	0800d2d0 	.word	0x0800d2d0
 8002224:	0800d2e4 	.word	0x0800d2e4
 8002228:	0800d330 	.word	0x0800d330
 800222c:	0800d344 	.word	0x0800d344
 8002230:	40010800 	.word	0x40010800
 8002234:	2000024f 	.word	0x2000024f
 8002238:	20000118 	.word	0x20000118
 800223c:	2000024c 	.word	0x2000024c
 8002240:	20000220 	.word	0x20000220
 8002244:	0800d3a0 	.word	0x0800d3a0
 8002248:	0800d3b4 	.word	0x0800d3b4
 800224c:	20000228 	.word	0x20000228
 8002250:	0800d3c8 	.word	0x0800d3c8
 8002254:	0800d3dc 	.word	0x0800d3dc
 8002258:	0800d3f0 	.word	0x0800d3f0
 800225c:	0800d404 	.word	0x0800d404
 8002260:	0800d418 	.word	0x0800d418
			} else if(dilSecim == 1){
 8002264:	4b99      	ldr	r3, [pc, #612]	; (80024cc <menu+0x1328>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d104      	bne.n	8002276 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 800226c:	4a98      	ldr	r2, [pc, #608]	; (80024d0 <menu+0x132c>)
 800226e:	2101      	movs	r1, #1
 8002270:	2002      	movs	r0, #2
 8002272:	f005 fd35 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002276:	2102      	movs	r1, #2
 8002278:	4896      	ldr	r0, [pc, #600]	; (80024d4 <menu+0x1330>)
 800227a:	f007 f857 	bl	800932c <HAL_GPIO_ReadPin>
 800227e:	4603      	mov	r3, r0
 8002280:	2b01      	cmp	r3, #1
 8002282:	d115      	bne.n	80022b0 <menu+0x110c>
 8002284:	4b94      	ldr	r3, [pc, #592]	; (80024d8 <menu+0x1334>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	f083 0301 	eor.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00e      	beq.n	80022b0 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002292:	4b92      	ldr	r3, [pc, #584]	; (80024dc <menu+0x1338>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	3301      	adds	r3, #1
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b90      	ldr	r3, [pc, #576]	; (80024dc <menu+0x1338>)
 800229c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800229e:	4b8f      	ldr	r3, [pc, #572]	; (80024dc <menu+0x1338>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d902      	bls.n	80022ac <menu+0x1108>
				kapiSecimleri = 0;
 80022a6:	4b8d      	ldr	r3, [pc, #564]	; (80024dc <menu+0x1338>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022ac:	f002 fb50 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022b0:	2104      	movs	r1, #4
 80022b2:	4888      	ldr	r0, [pc, #544]	; (80024d4 <menu+0x1330>)
 80022b4:	f007 f83a 	bl	800932c <HAL_GPIO_ReadPin>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d115      	bne.n	80022ea <menu+0x1146>
 80022be:	4b86      	ldr	r3, [pc, #536]	; (80024d8 <menu+0x1334>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	f083 0301 	eor.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00e      	beq.n	80022ea <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80022cc:	4b83      	ldr	r3, [pc, #524]	; (80024dc <menu+0x1338>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	4b81      	ldr	r3, [pc, #516]	; (80024dc <menu+0x1338>)
 80022d6:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80022d8:	4b80      	ldr	r3, [pc, #512]	; (80024dc <menu+0x1338>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d902      	bls.n	80022e6 <menu+0x1142>
		   		kapiSecimleri = 3;
 80022e0:	4b7e      	ldr	r3, [pc, #504]	; (80024dc <menu+0x1338>)
 80022e2:	2203      	movs	r2, #3
 80022e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022e6:	f002 fb33 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022ea:	2108      	movs	r1, #8
 80022ec:	4879      	ldr	r0, [pc, #484]	; (80024d4 <menu+0x1330>)
 80022ee:	f007 f81d 	bl	800932c <HAL_GPIO_ReadPin>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d118      	bne.n	800232a <menu+0x1186>
 80022f8:	4b77      	ldr	r3, [pc, #476]	; (80024d8 <menu+0x1334>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	f083 0301 	eor.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d011      	beq.n	800232a <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002306:	4b75      	ldr	r3, [pc, #468]	; (80024dc <menu+0x1338>)
 8002308:	781a      	ldrb	r2, [r3, #0]
 800230a:	4b75      	ldr	r3, [pc, #468]	; (80024e0 <menu+0x133c>)
 800230c:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800230e:	4b73      	ldr	r3, [pc, #460]	; (80024dc <menu+0x1338>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d006      	beq.n	8002324 <menu+0x1180>
				altLimit = 1;
 8002316:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <menu+0x1340>)
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800231c:	4b71      	ldr	r3, [pc, #452]	; (80024e4 <menu+0x1340>)
 800231e:	781a      	ldrb	r2, [r3, #0]
 8002320:	4b6f      	ldr	r3, [pc, #444]	; (80024e0 <menu+0x133c>)
 8002322:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002324:	4b70      	ldr	r3, [pc, #448]	; (80024e8 <menu+0x1344>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800232a:	4b70      	ldr	r3, [pc, #448]	; (80024ec <menu+0x1348>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b08      	cmp	r3, #8
 8002330:	f040 8092 	bne.w	8002458 <menu+0x12b4>
		if(dilSecim == 0) {
 8002334:	4b65      	ldr	r3, [pc, #404]	; (80024cc <menu+0x1328>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 800233c:	4a6c      	ldr	r2, [pc, #432]	; (80024f0 <menu+0x134c>)
 800233e:	2101      	movs	r1, #1
 8002340:	2001      	movs	r0, #1
 8002342:	f005 fccd 	bl	8007ce0 <lcd_print>
 8002346:	e008      	b.n	800235a <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002348:	4b60      	ldr	r3, [pc, #384]	; (80024cc <menu+0x1328>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d104      	bne.n	800235a <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002350:	4a68      	ldr	r2, [pc, #416]	; (80024f4 <menu+0x1350>)
 8002352:	2101      	movs	r1, #1
 8002354:	2001      	movs	r0, #1
 8002356:	f005 fcc3 	bl	8007ce0 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800235a:	4b67      	ldr	r3, [pc, #412]	; (80024f8 <menu+0x1354>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d113      	bne.n	800238a <menu+0x11e6>
			if(dilSecim == 0) {
 8002362:	4b5a      	ldr	r3, [pc, #360]	; (80024cc <menu+0x1328>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800236a:	4a64      	ldr	r2, [pc, #400]	; (80024fc <menu+0x1358>)
 800236c:	2101      	movs	r1, #1
 800236e:	2002      	movs	r0, #2
 8002370:	f005 fcb6 	bl	8007ce0 <lcd_print>
 8002374:	e020      	b.n	80023b8 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002376:	4b55      	ldr	r3, [pc, #340]	; (80024cc <menu+0x1328>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d11c      	bne.n	80023b8 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800237e:	4a60      	ldr	r2, [pc, #384]	; (8002500 <menu+0x135c>)
 8002380:	2101      	movs	r1, #1
 8002382:	2002      	movs	r0, #2
 8002384:	f005 fcac 	bl	8007ce0 <lcd_print>
 8002388:	e016      	b.n	80023b8 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800238a:	4b5b      	ldr	r3, [pc, #364]	; (80024f8 <menu+0x1354>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d112      	bne.n	80023b8 <menu+0x1214>
			if(dilSecim == 0){
 8002392:	4b4e      	ldr	r3, [pc, #312]	; (80024cc <menu+0x1328>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d105      	bne.n	80023a6 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800239a:	4a5a      	ldr	r2, [pc, #360]	; (8002504 <menu+0x1360>)
 800239c:	2101      	movs	r1, #1
 800239e:	2002      	movs	r0, #2
 80023a0:	f005 fc9e 	bl	8007ce0 <lcd_print>
 80023a4:	e008      	b.n	80023b8 <menu+0x1214>
			} else if(dilSecim == 1){
 80023a6:	4b49      	ldr	r3, [pc, #292]	; (80024cc <menu+0x1328>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d104      	bne.n	80023b8 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80023ae:	4a56      	ldr	r2, [pc, #344]	; (8002508 <menu+0x1364>)
 80023b0:	2101      	movs	r1, #1
 80023b2:	2002      	movs	r0, #2
 80023b4:	f005 fc94 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023b8:	2102      	movs	r1, #2
 80023ba:	4846      	ldr	r0, [pc, #280]	; (80024d4 <menu+0x1330>)
 80023bc:	f006 ffb6 	bl	800932c <HAL_GPIO_ReadPin>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d115      	bne.n	80023f2 <menu+0x124e>
 80023c6:	4b44      	ldr	r3, [pc, #272]	; (80024d8 <menu+0x1334>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	f083 0301 	eor.w	r3, r3, #1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00e      	beq.n	80023f2 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80023d4:	4b48      	ldr	r3, [pc, #288]	; (80024f8 <menu+0x1354>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	3301      	adds	r3, #1
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <menu+0x1354>)
 80023de:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80023e0:	4b45      	ldr	r3, [pc, #276]	; (80024f8 <menu+0x1354>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d902      	bls.n	80023ee <menu+0x124a>
				kapiAcTipi = 0;
 80023e8:	4b43      	ldr	r3, [pc, #268]	; (80024f8 <menu+0x1354>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023ee:	f002 faaf 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023f2:	2104      	movs	r1, #4
 80023f4:	4837      	ldr	r0, [pc, #220]	; (80024d4 <menu+0x1330>)
 80023f6:	f006 ff99 	bl	800932c <HAL_GPIO_ReadPin>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d115      	bne.n	800242c <menu+0x1288>
 8002400:	4b35      	ldr	r3, [pc, #212]	; (80024d8 <menu+0x1334>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	f083 0301 	eor.w	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00e      	beq.n	800242c <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800240e:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <menu+0x1354>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	3b01      	subs	r3, #1
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <menu+0x1354>)
 8002418:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800241a:	4b37      	ldr	r3, [pc, #220]	; (80024f8 <menu+0x1354>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <menu+0x1284>
		   		kapiAcTipi = 1;
 8002422:	4b35      	ldr	r3, [pc, #212]	; (80024f8 <menu+0x1354>)
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002428:	f002 fa92 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800242c:	2108      	movs	r1, #8
 800242e:	4829      	ldr	r0, [pc, #164]	; (80024d4 <menu+0x1330>)
 8002430:	f006 ff7c 	bl	800932c <HAL_GPIO_ReadPin>
 8002434:	4603      	mov	r3, r0
 8002436:	2b01      	cmp	r3, #1
 8002438:	d10e      	bne.n	8002458 <menu+0x12b4>
 800243a:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <menu+0x1334>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	f083 0301 	eor.w	r3, r3, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d007      	beq.n	8002458 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002448:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <menu+0x1354>)
 800244a:	781a      	ldrb	r2, [r3, #0]
 800244c:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <menu+0x133c>)
 800244e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002452:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <menu+0x1344>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <menu+0x1348>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b09      	cmp	r3, #9
 800245e:	f040 80b9 	bne.w	80025d4 <menu+0x1430>
		if(dilSecim == 0){
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <menu+0x1328>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800246a:	4a28      	ldr	r2, [pc, #160]	; (800250c <menu+0x1368>)
 800246c:	2101      	movs	r1, #1
 800246e:	2001      	movs	r0, #1
 8002470:	f005 fc36 	bl	8007ce0 <lcd_print>
 8002474:	e008      	b.n	8002488 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <menu+0x1328>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d104      	bne.n	8002488 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800247e:	4a24      	ldr	r2, [pc, #144]	; (8002510 <menu+0x136c>)
 8002480:	2101      	movs	r1, #1
 8002482:	2001      	movs	r0, #1
 8002484:	f005 fc2c 	bl	8007ce0 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002488:	4b22      	ldr	r3, [pc, #136]	; (8002514 <menu+0x1370>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002490:	4a21      	ldr	r2, [pc, #132]	; (8002518 <menu+0x1374>)
 8002492:	2101      	movs	r1, #1
 8002494:	2002      	movs	r0, #2
 8002496:	f005 fc23 	bl	8007ce0 <lcd_print>
 800249a:	e04c      	b.n	8002536 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <menu+0x1370>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d13f      	bne.n	8002524 <menu+0x1380>
			if(dilSecim == 0){
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <menu+0x1328>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80024ac:	4a1b      	ldr	r2, [pc, #108]	; (800251c <menu+0x1378>)
 80024ae:	2101      	movs	r1, #1
 80024b0:	2002      	movs	r0, #2
 80024b2:	f005 fc15 	bl	8007ce0 <lcd_print>
 80024b6:	e03e      	b.n	8002536 <menu+0x1392>
			} else if(dilSecim == 1) {
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <menu+0x1328>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d13a      	bne.n	8002536 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80024c0:	4a17      	ldr	r2, [pc, #92]	; (8002520 <menu+0x137c>)
 80024c2:	2101      	movs	r1, #1
 80024c4:	2002      	movs	r0, #2
 80024c6:	f005 fc0b 	bl	8007ce0 <lcd_print>
 80024ca:	e034      	b.n	8002536 <menu+0x1392>
 80024cc:	20000241 	.word	0x20000241
 80024d0:	0800d42c 	.word	0x0800d42c
 80024d4:	40010800 	.word	0x40010800
 80024d8:	2000024f 	.word	0x2000024f
 80024dc:	20000228 	.word	0x20000228
 80024e0:	20000118 	.word	0x20000118
 80024e4:	20000226 	.word	0x20000226
 80024e8:	2000024c 	.word	0x2000024c
 80024ec:	20000220 	.word	0x20000220
 80024f0:	0800d440 	.word	0x0800d440
 80024f4:	0800d454 	.word	0x0800d454
 80024f8:	2000022c 	.word	0x2000022c
 80024fc:	0800d468 	.word	0x0800d468
 8002500:	0800d478 	.word	0x0800d478
 8002504:	0800d488 	.word	0x0800d488
 8002508:	0800d49c 	.word	0x0800d49c
 800250c:	0800d4b0 	.word	0x0800d4b0
 8002510:	0800d4c4 	.word	0x0800d4c4
 8002514:	20000229 	.word	0x20000229
 8002518:	0800d4d8 	.word	0x0800d4d8
 800251c:	0800d4ec 	.word	0x0800d4ec
 8002520:	0800d4fc 	.word	0x0800d4fc
			}
		} else if(kapi1Tip == 2) {
 8002524:	4b8a      	ldr	r3, [pc, #552]	; (8002750 <menu+0x15ac>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d104      	bne.n	8002536 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 800252c:	4a89      	ldr	r2, [pc, #548]	; (8002754 <menu+0x15b0>)
 800252e:	2101      	movs	r1, #1
 8002530:	2002      	movs	r0, #2
 8002532:	f005 fbd5 	bl	8007ce0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002536:	2102      	movs	r1, #2
 8002538:	4887      	ldr	r0, [pc, #540]	; (8002758 <menu+0x15b4>)
 800253a:	f006 fef7 	bl	800932c <HAL_GPIO_ReadPin>
 800253e:	4603      	mov	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	d115      	bne.n	8002570 <menu+0x13cc>
 8002544:	4b85      	ldr	r3, [pc, #532]	; (800275c <menu+0x15b8>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	f083 0301 	eor.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00e      	beq.n	8002570 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002552:	4b7f      	ldr	r3, [pc, #508]	; (8002750 <menu+0x15ac>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b7d      	ldr	r3, [pc, #500]	; (8002750 <menu+0x15ac>)
 800255c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800255e:	4b7c      	ldr	r3, [pc, #496]	; (8002750 <menu+0x15ac>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d902      	bls.n	800256c <menu+0x13c8>
				kapi1Tip = 0;
 8002566:	4b7a      	ldr	r3, [pc, #488]	; (8002750 <menu+0x15ac>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800256c:	f002 f9f0 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002570:	2104      	movs	r1, #4
 8002572:	4879      	ldr	r0, [pc, #484]	; (8002758 <menu+0x15b4>)
 8002574:	f006 feda 	bl	800932c <HAL_GPIO_ReadPin>
 8002578:	4603      	mov	r3, r0
 800257a:	2b01      	cmp	r3, #1
 800257c:	d115      	bne.n	80025aa <menu+0x1406>
 800257e:	4b77      	ldr	r3, [pc, #476]	; (800275c <menu+0x15b8>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	f083 0301 	eor.w	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00e      	beq.n	80025aa <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 800258c:	4b70      	ldr	r3, [pc, #448]	; (8002750 <menu+0x15ac>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	3b01      	subs	r3, #1
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b6e      	ldr	r3, [pc, #440]	; (8002750 <menu+0x15ac>)
 8002596:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002598:	4b6d      	ldr	r3, [pc, #436]	; (8002750 <menu+0x15ac>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d902      	bls.n	80025a6 <menu+0x1402>
		   		kapi1Tip = 2;
 80025a0:	4b6b      	ldr	r3, [pc, #428]	; (8002750 <menu+0x15ac>)
 80025a2:	2202      	movs	r2, #2
 80025a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025a6:	f002 f9d3 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025aa:	2108      	movs	r1, #8
 80025ac:	486a      	ldr	r0, [pc, #424]	; (8002758 <menu+0x15b4>)
 80025ae:	f006 febd 	bl	800932c <HAL_GPIO_ReadPin>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d10d      	bne.n	80025d4 <menu+0x1430>
 80025b8:	4b68      	ldr	r3, [pc, #416]	; (800275c <menu+0x15b8>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	f083 0301 	eor.w	r3, r3, #1
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d006      	beq.n	80025d4 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80025c6:	4b62      	ldr	r3, [pc, #392]	; (8002750 <menu+0x15ac>)
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	4b65      	ldr	r3, [pc, #404]	; (8002760 <menu+0x15bc>)
 80025cc:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80025ce:	4b65      	ldr	r3, [pc, #404]	; (8002764 <menu+0x15c0>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80025d4:	4b64      	ldr	r3, [pc, #400]	; (8002768 <menu+0x15c4>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b0a      	cmp	r3, #10
 80025da:	d17f      	bne.n	80026dc <menu+0x1538>
		if(dilSecim == 0) {
 80025dc:	4b63      	ldr	r3, [pc, #396]	; (800276c <menu+0x15c8>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80025e4:	4a62      	ldr	r2, [pc, #392]	; (8002770 <menu+0x15cc>)
 80025e6:	2101      	movs	r1, #1
 80025e8:	2001      	movs	r0, #1
 80025ea:	f005 fb79 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80025ee:	4a61      	ldr	r2, [pc, #388]	; (8002774 <menu+0x15d0>)
 80025f0:	2101      	movs	r1, #1
 80025f2:	2002      	movs	r0, #2
 80025f4:	f005 fb74 	bl	8007ce0 <lcd_print>
 80025f8:	e00d      	b.n	8002616 <menu+0x1472>
		} else if(dilSecim == 1) {
 80025fa:	4b5c      	ldr	r3, [pc, #368]	; (800276c <menu+0x15c8>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d109      	bne.n	8002616 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002602:	4a5d      	ldr	r2, [pc, #372]	; (8002778 <menu+0x15d4>)
 8002604:	2101      	movs	r1, #1
 8002606:	2001      	movs	r0, #1
 8002608:	f005 fb6a 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800260c:	4a5b      	ldr	r2, [pc, #364]	; (800277c <menu+0x15d8>)
 800260e:	2101      	movs	r1, #1
 8002610:	2002      	movs	r0, #2
 8002612:	f005 fb65 	bl	8007ce0 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002616:	4b5a      	ldr	r3, [pc, #360]	; (8002780 <menu+0x15dc>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	220a      	movs	r2, #10
 800261c:	4959      	ldr	r1, [pc, #356]	; (8002784 <menu+0x15e0>)
 800261e:	4618      	mov	r0, r3
 8002620:	f009 feb0 	bl	800c384 <itoa>
		lcd_print(2,16,snum);
 8002624:	4a57      	ldr	r2, [pc, #348]	; (8002784 <menu+0x15e0>)
 8002626:	2110      	movs	r1, #16
 8002628:	2002      	movs	r0, #2
 800262a:	f005 fb59 	bl	8007ce0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800262e:	2102      	movs	r1, #2
 8002630:	4849      	ldr	r0, [pc, #292]	; (8002758 <menu+0x15b4>)
 8002632:	f006 fe7b 	bl	800932c <HAL_GPIO_ReadPin>
 8002636:	4603      	mov	r3, r0
 8002638:	2b01      	cmp	r3, #1
 800263a:	d119      	bne.n	8002670 <menu+0x14cc>
 800263c:	4b47      	ldr	r3, [pc, #284]	; (800275c <menu+0x15b8>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	f083 0301 	eor.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d012      	beq.n	8002670 <menu+0x14cc>
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <menu+0x15ac>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10e      	bne.n	8002670 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002652:	4b4b      	ldr	r3, [pc, #300]	; (8002780 <menu+0x15dc>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4b49      	ldr	r3, [pc, #292]	; (8002780 <menu+0x15dc>)
 800265c:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800265e:	4b48      	ldr	r3, [pc, #288]	; (8002780 <menu+0x15dc>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b05      	cmp	r3, #5
 8002664:	d902      	bls.n	800266c <menu+0x14c8>
				kapi1AcSure = 0;
 8002666:	4b46      	ldr	r3, [pc, #280]	; (8002780 <menu+0x15dc>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800266c:	f002 f970 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002670:	2104      	movs	r1, #4
 8002672:	4839      	ldr	r0, [pc, #228]	; (8002758 <menu+0x15b4>)
 8002674:	f006 fe5a 	bl	800932c <HAL_GPIO_ReadPin>
 8002678:	4603      	mov	r3, r0
 800267a:	2b01      	cmp	r3, #1
 800267c:	d119      	bne.n	80026b2 <menu+0x150e>
 800267e:	4b37      	ldr	r3, [pc, #220]	; (800275c <menu+0x15b8>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	f083 0301 	eor.w	r3, r3, #1
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d012      	beq.n	80026b2 <menu+0x150e>
 800268c:	4b30      	ldr	r3, [pc, #192]	; (8002750 <menu+0x15ac>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10e      	bne.n	80026b2 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002694:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <menu+0x15dc>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	3b01      	subs	r3, #1
 800269a:	b2da      	uxtb	r2, r3
 800269c:	4b38      	ldr	r3, [pc, #224]	; (8002780 <menu+0x15dc>)
 800269e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80026a0:	4b37      	ldr	r3, [pc, #220]	; (8002780 <menu+0x15dc>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d902      	bls.n	80026ae <menu+0x150a>
		   		kapi1AcSure = 5;
 80026a8:	4b35      	ldr	r3, [pc, #212]	; (8002780 <menu+0x15dc>)
 80026aa:	2205      	movs	r2, #5
 80026ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026ae:	f002 f94f 	bl	8004950 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026b2:	2108      	movs	r1, #8
 80026b4:	4828      	ldr	r0, [pc, #160]	; (8002758 <menu+0x15b4>)
 80026b6:	f006 fe39 	bl	800932c <HAL_GPIO_ReadPin>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d10d      	bne.n	80026dc <menu+0x1538>
 80026c0:	4b26      	ldr	r3, [pc, #152]	; (800275c <menu+0x15b8>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f083 0301 	eor.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80026ce:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <menu+0x15dc>)
 80026d0:	781a      	ldrb	r2, [r3, #0]
 80026d2:	4b23      	ldr	r3, [pc, #140]	; (8002760 <menu+0x15bc>)
 80026d4:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <menu+0x15c0>)
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80026dc:	4b22      	ldr	r3, [pc, #136]	; (8002768 <menu+0x15c4>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b0b      	cmp	r3, #11
 80026e2:	f040 80b5 	bne.w	8002850 <menu+0x16ac>
		if(dilSecim == 0) {
 80026e6:	4b21      	ldr	r3, [pc, #132]	; (800276c <menu+0x15c8>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d105      	bne.n	80026fa <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80026ee:	4a26      	ldr	r2, [pc, #152]	; (8002788 <menu+0x15e4>)
 80026f0:	2101      	movs	r1, #1
 80026f2:	2001      	movs	r0, #1
 80026f4:	f005 faf4 	bl	8007ce0 <lcd_print>
 80026f8:	e008      	b.n	800270c <menu+0x1568>
		} else if(dilSecim == 1) {
 80026fa:	4b1c      	ldr	r3, [pc, #112]	; (800276c <menu+0x15c8>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d104      	bne.n	800270c <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002702:	4a22      	ldr	r2, [pc, #136]	; (800278c <menu+0x15e8>)
 8002704:	2101      	movs	r1, #1
 8002706:	2001      	movs	r0, #1
 8002708:	f005 faea 	bl	8007ce0 <lcd_print>
		}

		if(kapi2Tip == 0) {
 800270c:	4b20      	ldr	r3, [pc, #128]	; (8002790 <menu+0x15ec>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002714:	4a1f      	ldr	r2, [pc, #124]	; (8002794 <menu+0x15f0>)
 8002716:	2101      	movs	r1, #1
 8002718:	2002      	movs	r0, #2
 800271a:	f005 fae1 	bl	8007ce0 <lcd_print>
 800271e:	e048      	b.n	80027b2 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <menu+0x15ec>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d13b      	bne.n	80027a0 <menu+0x15fc>
			if(dilSecim == 0) {
 8002728:	4b10      	ldr	r3, [pc, #64]	; (800276c <menu+0x15c8>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d105      	bne.n	800273c <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002730:	4a19      	ldr	r2, [pc, #100]	; (8002798 <menu+0x15f4>)
 8002732:	2101      	movs	r1, #1
 8002734:	2002      	movs	r0, #2
 8002736:	f005 fad3 	bl	8007ce0 <lcd_print>
 800273a:	e03a      	b.n	80027b2 <menu+0x160e>
			} else if(dilSecim == 1) {
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <menu+0x15c8>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d136      	bne.n	80027b2 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002744:	4a15      	ldr	r2, [pc, #84]	; (800279c <menu+0x15f8>)
 8002746:	2101      	movs	r1, #1
 8002748:	2002      	movs	r0, #2
 800274a:	f005 fac9 	bl	8007ce0 <lcd_print>
 800274e:	e030      	b.n	80027b2 <menu+0x160e>
 8002750:	20000229 	.word	0x20000229
 8002754:	0800d510 	.word	0x0800d510
 8002758:	40010800 	.word	0x40010800
 800275c:	2000024f 	.word	0x2000024f
 8002760:	20000118 	.word	0x20000118
 8002764:	2000024c 	.word	0x2000024c
 8002768:	20000220 	.word	0x20000220
 800276c:	20000241 	.word	0x20000241
 8002770:	0800d520 	.word	0x0800d520
 8002774:	0800d534 	.word	0x0800d534
 8002778:	0800d544 	.word	0x0800d544
 800277c:	0800d558 	.word	0x0800d558
 8002780:	20000239 	.word	0x20000239
 8002784:	20000188 	.word	0x20000188
 8002788:	0800d568 	.word	0x0800d568
 800278c:	0800d57c 	.word	0x0800d57c
 8002790:	2000022a 	.word	0x2000022a
 8002794:	0800d4d8 	.word	0x0800d4d8
 8002798:	0800d4ec 	.word	0x0800d4ec
 800279c:	0800d4fc 	.word	0x0800d4fc
			}
		} else if(kapi2Tip == 2) {
 80027a0:	4b8a      	ldr	r3, [pc, #552]	; (80029cc <menu+0x1828>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d104      	bne.n	80027b2 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 80027a8:	4a89      	ldr	r2, [pc, #548]	; (80029d0 <menu+0x182c>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	2002      	movs	r0, #2
 80027ae:	f005 fa97 	bl	8007ce0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027b2:	2102      	movs	r1, #2
 80027b4:	4887      	ldr	r0, [pc, #540]	; (80029d4 <menu+0x1830>)
 80027b6:	f006 fdb9 	bl	800932c <HAL_GPIO_ReadPin>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d115      	bne.n	80027ec <menu+0x1648>
 80027c0:	4b85      	ldr	r3, [pc, #532]	; (80029d8 <menu+0x1834>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f083 0301 	eor.w	r3, r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00e      	beq.n	80027ec <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80027ce:	4b7f      	ldr	r3, [pc, #508]	; (80029cc <menu+0x1828>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4b7d      	ldr	r3, [pc, #500]	; (80029cc <menu+0x1828>)
 80027d8:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80027da:	4b7c      	ldr	r3, [pc, #496]	; (80029cc <menu+0x1828>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d902      	bls.n	80027e8 <menu+0x1644>
				kapi2Tip = 0;
 80027e2:	4b7a      	ldr	r3, [pc, #488]	; (80029cc <menu+0x1828>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027e8:	f002 f8b2 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ec:	2104      	movs	r1, #4
 80027ee:	4879      	ldr	r0, [pc, #484]	; (80029d4 <menu+0x1830>)
 80027f0:	f006 fd9c 	bl	800932c <HAL_GPIO_ReadPin>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d115      	bne.n	8002826 <menu+0x1682>
 80027fa:	4b77      	ldr	r3, [pc, #476]	; (80029d8 <menu+0x1834>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	f083 0301 	eor.w	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00e      	beq.n	8002826 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002808:	4b70      	ldr	r3, [pc, #448]	; (80029cc <menu+0x1828>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	3b01      	subs	r3, #1
 800280e:	b2da      	uxtb	r2, r3
 8002810:	4b6e      	ldr	r3, [pc, #440]	; (80029cc <menu+0x1828>)
 8002812:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002814:	4b6d      	ldr	r3, [pc, #436]	; (80029cc <menu+0x1828>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d902      	bls.n	8002822 <menu+0x167e>
		   		kapi2Tip = 2;
 800281c:	4b6b      	ldr	r3, [pc, #428]	; (80029cc <menu+0x1828>)
 800281e:	2202      	movs	r2, #2
 8002820:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002822:	f002 f895 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002826:	2108      	movs	r1, #8
 8002828:	486a      	ldr	r0, [pc, #424]	; (80029d4 <menu+0x1830>)
 800282a:	f006 fd7f 	bl	800932c <HAL_GPIO_ReadPin>
 800282e:	4603      	mov	r3, r0
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10d      	bne.n	8002850 <menu+0x16ac>
 8002834:	4b68      	ldr	r3, [pc, #416]	; (80029d8 <menu+0x1834>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	f083 0301 	eor.w	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d006      	beq.n	8002850 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002842:	4b62      	ldr	r3, [pc, #392]	; (80029cc <menu+0x1828>)
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	4b65      	ldr	r3, [pc, #404]	; (80029dc <menu+0x1838>)
 8002848:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800284a:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <menu+0x183c>)
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002850:	4b64      	ldr	r3, [pc, #400]	; (80029e4 <menu+0x1840>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b0c      	cmp	r3, #12
 8002856:	d17f      	bne.n	8002958 <menu+0x17b4>
		if(dilSecim == 0) {
 8002858:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <menu+0x1844>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10a      	bne.n	8002876 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002860:	4a62      	ldr	r2, [pc, #392]	; (80029ec <menu+0x1848>)
 8002862:	2101      	movs	r1, #1
 8002864:	2001      	movs	r0, #1
 8002866:	f005 fa3b 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800286a:	4a61      	ldr	r2, [pc, #388]	; (80029f0 <menu+0x184c>)
 800286c:	2101      	movs	r1, #1
 800286e:	2002      	movs	r0, #2
 8002870:	f005 fa36 	bl	8007ce0 <lcd_print>
 8002874:	e00d      	b.n	8002892 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002876:	4b5c      	ldr	r3, [pc, #368]	; (80029e8 <menu+0x1844>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d109      	bne.n	8002892 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 800287e:	4a5d      	ldr	r2, [pc, #372]	; (80029f4 <menu+0x1850>)
 8002880:	2101      	movs	r1, #1
 8002882:	2001      	movs	r0, #1
 8002884:	f005 fa2c 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002888:	4a5b      	ldr	r2, [pc, #364]	; (80029f8 <menu+0x1854>)
 800288a:	2101      	movs	r1, #1
 800288c:	2002      	movs	r0, #2
 800288e:	f005 fa27 	bl	8007ce0 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002892:	4b5a      	ldr	r3, [pc, #360]	; (80029fc <menu+0x1858>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	220a      	movs	r2, #10
 8002898:	4959      	ldr	r1, [pc, #356]	; (8002a00 <menu+0x185c>)
 800289a:	4618      	mov	r0, r3
 800289c:	f009 fd72 	bl	800c384 <itoa>
		lcd_print(2,16,snum);
 80028a0:	4a57      	ldr	r2, [pc, #348]	; (8002a00 <menu+0x185c>)
 80028a2:	2110      	movs	r1, #16
 80028a4:	2002      	movs	r0, #2
 80028a6:	f005 fa1b 	bl	8007ce0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80028aa:	2102      	movs	r1, #2
 80028ac:	4849      	ldr	r0, [pc, #292]	; (80029d4 <menu+0x1830>)
 80028ae:	f006 fd3d 	bl	800932c <HAL_GPIO_ReadPin>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d119      	bne.n	80028ec <menu+0x1748>
 80028b8:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <menu+0x1834>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	f083 0301 	eor.w	r3, r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d012      	beq.n	80028ec <menu+0x1748>
 80028c6:	4b41      	ldr	r3, [pc, #260]	; (80029cc <menu+0x1828>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10e      	bne.n	80028ec <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 80028ce:	4b4b      	ldr	r3, [pc, #300]	; (80029fc <menu+0x1858>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	3301      	adds	r3, #1
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b49      	ldr	r3, [pc, #292]	; (80029fc <menu+0x1858>)
 80028d8:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80028da:	4b48      	ldr	r3, [pc, #288]	; (80029fc <menu+0x1858>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	d902      	bls.n	80028e8 <menu+0x1744>
				kapi2AcSure = 0;
 80028e2:	4b46      	ldr	r3, [pc, #280]	; (80029fc <menu+0x1858>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028e8:	f002 f832 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80028ec:	2104      	movs	r1, #4
 80028ee:	4839      	ldr	r0, [pc, #228]	; (80029d4 <menu+0x1830>)
 80028f0:	f006 fd1c 	bl	800932c <HAL_GPIO_ReadPin>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d119      	bne.n	800292e <menu+0x178a>
 80028fa:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <menu+0x1834>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	f083 0301 	eor.w	r3, r3, #1
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d012      	beq.n	800292e <menu+0x178a>
 8002908:	4b30      	ldr	r3, [pc, #192]	; (80029cc <menu+0x1828>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10e      	bne.n	800292e <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002910:	4b3a      	ldr	r3, [pc, #232]	; (80029fc <menu+0x1858>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	3b01      	subs	r3, #1
 8002916:	b2da      	uxtb	r2, r3
 8002918:	4b38      	ldr	r3, [pc, #224]	; (80029fc <menu+0x1858>)
 800291a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 800291c:	4b37      	ldr	r3, [pc, #220]	; (80029fc <menu+0x1858>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b06      	cmp	r3, #6
 8002922:	d902      	bls.n	800292a <menu+0x1786>
		   		kapi2AcSure = 5;
 8002924:	4b35      	ldr	r3, [pc, #212]	; (80029fc <menu+0x1858>)
 8002926:	2205      	movs	r2, #5
 8002928:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800292a:	f002 f811 	bl	8004950 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800292e:	2108      	movs	r1, #8
 8002930:	4828      	ldr	r0, [pc, #160]	; (80029d4 <menu+0x1830>)
 8002932:	f006 fcfb 	bl	800932c <HAL_GPIO_ReadPin>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	d10d      	bne.n	8002958 <menu+0x17b4>
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <menu+0x1834>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	f083 0301 	eor.w	r3, r3, #1
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d006      	beq.n	8002958 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 800294a:	4b2c      	ldr	r3, [pc, #176]	; (80029fc <menu+0x1858>)
 800294c:	781a      	ldrb	r2, [r3, #0]
 800294e:	4b23      	ldr	r3, [pc, #140]	; (80029dc <menu+0x1838>)
 8002950:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002952:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <menu+0x183c>)
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002958:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <menu+0x1840>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b0d      	cmp	r3, #13
 800295e:	f040 80b5 	bne.w	8002acc <menu+0x1928>
		if(dilSecim == 0) {
 8002962:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <menu+0x1844>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 800296a:	4a26      	ldr	r2, [pc, #152]	; (8002a04 <menu+0x1860>)
 800296c:	2101      	movs	r1, #1
 800296e:	2001      	movs	r0, #1
 8002970:	f005 f9b6 	bl	8007ce0 <lcd_print>
 8002974:	e008      	b.n	8002988 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <menu+0x1844>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d104      	bne.n	8002988 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 800297e:	4a22      	ldr	r2, [pc, #136]	; (8002a08 <menu+0x1864>)
 8002980:	2101      	movs	r1, #1
 8002982:	2001      	movs	r0, #1
 8002984:	f005 f9ac 	bl	8007ce0 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002988:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <menu+0x1868>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002990:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <menu+0x186c>)
 8002992:	2101      	movs	r1, #1
 8002994:	2002      	movs	r0, #2
 8002996:	f005 f9a3 	bl	8007ce0 <lcd_print>
 800299a:	e048      	b.n	8002a2e <menu+0x188a>
		} else if(kapitablaTip == 1) {
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <menu+0x1868>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d13b      	bne.n	8002a1c <menu+0x1878>
			if(dilSecim == 0) {
 80029a4:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <menu+0x1844>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d105      	bne.n	80029b8 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 80029ac:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <menu+0x1870>)
 80029ae:	2101      	movs	r1, #1
 80029b0:	2002      	movs	r0, #2
 80029b2:	f005 f995 	bl	8007ce0 <lcd_print>
 80029b6:	e03a      	b.n	8002a2e <menu+0x188a>
			} else if(dilSecim == 1) {
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <menu+0x1844>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d136      	bne.n	8002a2e <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 80029c0:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <menu+0x1874>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	2002      	movs	r0, #2
 80029c6:	f005 f98b 	bl	8007ce0 <lcd_print>
 80029ca:	e030      	b.n	8002a2e <menu+0x188a>
 80029cc:	2000022a 	.word	0x2000022a
 80029d0:	0800d510 	.word	0x0800d510
 80029d4:	40010800 	.word	0x40010800
 80029d8:	2000024f 	.word	0x2000024f
 80029dc:	20000118 	.word	0x20000118
 80029e0:	2000024c 	.word	0x2000024c
 80029e4:	20000220 	.word	0x20000220
 80029e8:	20000241 	.word	0x20000241
 80029ec:	0800d590 	.word	0x0800d590
 80029f0:	0800d534 	.word	0x0800d534
 80029f4:	0800d5a4 	.word	0x0800d5a4
 80029f8:	0800d558 	.word	0x0800d558
 80029fc:	2000023a 	.word	0x2000023a
 8002a00:	20000188 	.word	0x20000188
 8002a04:	0800d5b8 	.word	0x0800d5b8
 8002a08:	0800d5cc 	.word	0x0800d5cc
 8002a0c:	2000022b 	.word	0x2000022b
 8002a10:	0800d4d8 	.word	0x0800d4d8
 8002a14:	0800d4ec 	.word	0x0800d4ec
 8002a18:	0800d4fc 	.word	0x0800d4fc
			}
		} else if(kapitablaTip == 2) {
 8002a1c:	4b5b      	ldr	r3, [pc, #364]	; (8002b8c <menu+0x19e8>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d104      	bne.n	8002a2e <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002a24:	4a5a      	ldr	r2, [pc, #360]	; (8002b90 <menu+0x19ec>)
 8002a26:	2101      	movs	r1, #1
 8002a28:	2002      	movs	r0, #2
 8002a2a:	f005 f959 	bl	8007ce0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a2e:	2102      	movs	r1, #2
 8002a30:	4858      	ldr	r0, [pc, #352]	; (8002b94 <menu+0x19f0>)
 8002a32:	f006 fc7b 	bl	800932c <HAL_GPIO_ReadPin>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d115      	bne.n	8002a68 <menu+0x18c4>
 8002a3c:	4b56      	ldr	r3, [pc, #344]	; (8002b98 <menu+0x19f4>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	f083 0301 	eor.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00e      	beq.n	8002a68 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002a4a:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <menu+0x19e8>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4b4e      	ldr	r3, [pc, #312]	; (8002b8c <menu+0x19e8>)
 8002a54:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002a56:	4b4d      	ldr	r3, [pc, #308]	; (8002b8c <menu+0x19e8>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d902      	bls.n	8002a64 <menu+0x18c0>
				kapitablaTip = 0;
 8002a5e:	4b4b      	ldr	r3, [pc, #300]	; (8002b8c <menu+0x19e8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a64:	f001 ff74 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a68:	2104      	movs	r1, #4
 8002a6a:	484a      	ldr	r0, [pc, #296]	; (8002b94 <menu+0x19f0>)
 8002a6c:	f006 fc5e 	bl	800932c <HAL_GPIO_ReadPin>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d115      	bne.n	8002aa2 <menu+0x18fe>
 8002a76:	4b48      	ldr	r3, [pc, #288]	; (8002b98 <menu+0x19f4>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	f083 0301 	eor.w	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00e      	beq.n	8002aa2 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002a84:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <menu+0x19e8>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <menu+0x19e8>)
 8002a8e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002a90:	4b3e      	ldr	r3, [pc, #248]	; (8002b8c <menu+0x19e8>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d902      	bls.n	8002a9e <menu+0x18fa>
		   		kapitablaTip = 2;
 8002a98:	4b3c      	ldr	r3, [pc, #240]	; (8002b8c <menu+0x19e8>)
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a9e:	f001 ff57 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aa2:	2108      	movs	r1, #8
 8002aa4:	483b      	ldr	r0, [pc, #236]	; (8002b94 <menu+0x19f0>)
 8002aa6:	f006 fc41 	bl	800932c <HAL_GPIO_ReadPin>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10d      	bne.n	8002acc <menu+0x1928>
 8002ab0:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <menu+0x19f4>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	f083 0301 	eor.w	r3, r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002abe:	4b33      	ldr	r3, [pc, #204]	; (8002b8c <menu+0x19e8>)
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <menu+0x19f8>)
 8002ac4:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002ac6:	4b36      	ldr	r3, [pc, #216]	; (8002ba0 <menu+0x19fc>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002acc:	4b35      	ldr	r3, [pc, #212]	; (8002ba4 <menu+0x1a00>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b0e      	cmp	r3, #14
 8002ad2:	f040 80f2 	bne.w	8002cba <menu+0x1b16>
		if(dilSecim == 0) {
 8002ad6:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <menu+0x1a04>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002ade:	4a33      	ldr	r2, [pc, #204]	; (8002bac <menu+0x1a08>)
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f005 f8fc 	bl	8007ce0 <lcd_print>
 8002ae8:	e008      	b.n	8002afc <menu+0x1958>
		} else if(dilSecim == 1) {
 8002aea:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <menu+0x1a04>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d104      	bne.n	8002afc <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002af2:	4a2f      	ldr	r2, [pc, #188]	; (8002bb0 <menu+0x1a0c>)
 8002af4:	2101      	movs	r1, #1
 8002af6:	2001      	movs	r0, #1
 8002af8:	f005 f8f2 	bl	8007ce0 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <menu+0x1a10>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d113      	bne.n	8002b2c <menu+0x1988>
			if(dilSecim == 0){
 8002b04:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <menu+0x1a04>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002b0c:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <menu+0x1a14>)
 8002b0e:	2101      	movs	r1, #1
 8002b10:	2002      	movs	r0, #2
 8002b12:	f005 f8e5 	bl	8007ce0 <lcd_print>
 8002b16:	e071      	b.n	8002bfc <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b18:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <menu+0x1a04>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d16d      	bne.n	8002bfc <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002b20:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <menu+0x1a18>)
 8002b22:	2101      	movs	r1, #1
 8002b24:	2002      	movs	r0, #2
 8002b26:	f005 f8db 	bl	8007ce0 <lcd_print>
 8002b2a:	e067      	b.n	8002bfc <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002b2c:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <menu+0x1a10>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d112      	bne.n	8002b5a <menu+0x19b6>
			if(dilSecim == 0){
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <menu+0x1a04>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d104      	bne.n	8002b46 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002b3c:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <menu+0x1a1c>)
 8002b3e:	2101      	movs	r1, #1
 8002b40:	2002      	movs	r0, #2
 8002b42:	f005 f8cd 	bl	8007ce0 <lcd_print>
			}
			if(dilSecim == 1){
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <menu+0x1a04>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d156      	bne.n	8002bfc <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <menu+0x1a20>)
 8002b50:	2101      	movs	r1, #1
 8002b52:	2002      	movs	r0, #2
 8002b54:	f005 f8c4 	bl	8007ce0 <lcd_print>
 8002b58:	e050      	b.n	8002bfc <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <menu+0x1a10>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d136      	bne.n	8002bd0 <menu+0x1a2c>
			if(dilSecim == 0){
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <menu+0x1a04>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d105      	bne.n	8002b76 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002b6a:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <menu+0x1a24>)
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	2002      	movs	r0, #2
 8002b70:	f005 f8b6 	bl	8007ce0 <lcd_print>
 8002b74:	e042      	b.n	8002bfc <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <menu+0x1a04>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d13e      	bne.n	8002bfc <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002b7e:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <menu+0x1a28>)
 8002b80:	2101      	movs	r1, #1
 8002b82:	2002      	movs	r0, #2
 8002b84:	f005 f8ac 	bl	8007ce0 <lcd_print>
 8002b88:	e038      	b.n	8002bfc <menu+0x1a58>
 8002b8a:	bf00      	nop
 8002b8c:	2000022b 	.word	0x2000022b
 8002b90:	0800d510 	.word	0x0800d510
 8002b94:	40010800 	.word	0x40010800
 8002b98:	2000024f 	.word	0x2000024f
 8002b9c:	20000118 	.word	0x20000118
 8002ba0:	2000024c 	.word	0x2000024c
 8002ba4:	20000220 	.word	0x20000220
 8002ba8:	20000241 	.word	0x20000241
 8002bac:	0800d5e0 	.word	0x0800d5e0
 8002bb0:	0800d5f4 	.word	0x0800d5f4
 8002bb4:	2000022d 	.word	0x2000022d
 8002bb8:	0800d608 	.word	0x0800d608
 8002bbc:	0800d618 	.word	0x0800d618
 8002bc0:	0800d628 	.word	0x0800d628
 8002bc4:	0800d638 	.word	0x0800d638
 8002bc8:	0800d648 	.word	0x0800d648
 8002bcc:	0800d65c 	.word	0x0800d65c
			}
		} else if(kapiTablaAcKonum == 3) {
 8002bd0:	4b9b      	ldr	r3, [pc, #620]	; (8002e40 <menu+0x1c9c>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d111      	bne.n	8002bfc <menu+0x1a58>
			if(dilSecim == 0) {
 8002bd8:	4b9a      	ldr	r3, [pc, #616]	; (8002e44 <menu+0x1ca0>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002be0:	4a99      	ldr	r2, [pc, #612]	; (8002e48 <menu+0x1ca4>)
 8002be2:	2101      	movs	r1, #1
 8002be4:	2002      	movs	r0, #2
 8002be6:	f005 f87b 	bl	8007ce0 <lcd_print>
			}
			if(dilSecim == 1) {
 8002bea:	4b96      	ldr	r3, [pc, #600]	; (8002e44 <menu+0x1ca0>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d104      	bne.n	8002bfc <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002bf2:	4a96      	ldr	r2, [pc, #600]	; (8002e4c <menu+0x1ca8>)
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	2002      	movs	r0, #2
 8002bf8:	f005 f872 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4894      	ldr	r0, [pc, #592]	; (8002e50 <menu+0x1cac>)
 8002c00:	f006 fb94 	bl	800932c <HAL_GPIO_ReadPin>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d115      	bne.n	8002c36 <menu+0x1a92>
 8002c0a:	4b92      	ldr	r3, [pc, #584]	; (8002e54 <menu+0x1cb0>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	f083 0301 	eor.w	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00e      	beq.n	8002c36 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002c18:	4b89      	ldr	r3, [pc, #548]	; (8002e40 <menu+0x1c9c>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	4b87      	ldr	r3, [pc, #540]	; (8002e40 <menu+0x1c9c>)
 8002c22:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002c24:	4b86      	ldr	r3, [pc, #536]	; (8002e40 <menu+0x1c9c>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d902      	bls.n	8002c32 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002c2c:	4b84      	ldr	r3, [pc, #528]	; (8002e40 <menu+0x1c9c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c32:	f001 fe8d 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c36:	2104      	movs	r1, #4
 8002c38:	4885      	ldr	r0, [pc, #532]	; (8002e50 <menu+0x1cac>)
 8002c3a:	f006 fb77 	bl	800932c <HAL_GPIO_ReadPin>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d115      	bne.n	8002c70 <menu+0x1acc>
 8002c44:	4b83      	ldr	r3, [pc, #524]	; (8002e54 <menu+0x1cb0>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	f083 0301 	eor.w	r3, r3, #1
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00e      	beq.n	8002c70 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002c52:	4b7b      	ldr	r3, [pc, #492]	; (8002e40 <menu+0x1c9c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	4b79      	ldr	r3, [pc, #484]	; (8002e40 <menu+0x1c9c>)
 8002c5c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002c5e:	4b78      	ldr	r3, [pc, #480]	; (8002e40 <menu+0x1c9c>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d902      	bls.n	8002c6c <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002c66:	4b76      	ldr	r3, [pc, #472]	; (8002e40 <menu+0x1c9c>)
 8002c68:	2202      	movs	r2, #2
 8002c6a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c6c:	f001 fe70 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c70:	2108      	movs	r1, #8
 8002c72:	4877      	ldr	r0, [pc, #476]	; (8002e50 <menu+0x1cac>)
 8002c74:	f006 fb5a 	bl	800932c <HAL_GPIO_ReadPin>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d11d      	bne.n	8002cba <menu+0x1b16>
 8002c7e:	4b75      	ldr	r3, [pc, #468]	; (8002e54 <menu+0x1cb0>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	f083 0301 	eor.w	r3, r3, #1
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d016      	beq.n	8002cba <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002c8c:	4b6c      	ldr	r3, [pc, #432]	; (8002e40 <menu+0x1c9c>)
 8002c8e:	781a      	ldrb	r2, [r3, #0]
 8002c90:	4b71      	ldr	r3, [pc, #452]	; (8002e58 <menu+0x1cb4>)
 8002c92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002c96:	4b6a      	ldr	r3, [pc, #424]	; (8002e40 <menu+0x1c9c>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <menu+0x1b02>
 8002c9e:	4b68      	ldr	r3, [pc, #416]	; (8002e40 <menu+0x1c9c>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d106      	bne.n	8002cb4 <menu+0x1b10>
				altLimit = 1;
 8002ca6:	4b6d      	ldr	r3, [pc, #436]	; (8002e5c <menu+0x1cb8>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002cac:	4b6b      	ldr	r3, [pc, #428]	; (8002e5c <menu+0x1cb8>)
 8002cae:	781a      	ldrb	r2, [r3, #0]
 8002cb0:	4b69      	ldr	r3, [pc, #420]	; (8002e58 <menu+0x1cb4>)
 8002cb2:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002cb4:	4b6a      	ldr	r3, [pc, #424]	; (8002e60 <menu+0x1cbc>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002cba:	4b6a      	ldr	r3, [pc, #424]	; (8002e64 <menu+0x1cc0>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b0f      	cmp	r3, #15
 8002cc0:	d17f      	bne.n	8002dc2 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002cc2:	4b60      	ldr	r3, [pc, #384]	; (8002e44 <menu+0x1ca0>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002cca:	4a67      	ldr	r2, [pc, #412]	; (8002e68 <menu+0x1cc4>)
 8002ccc:	2101      	movs	r1, #1
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f005 f806 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002cd4:	4a65      	ldr	r2, [pc, #404]	; (8002e6c <menu+0x1cc8>)
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2002      	movs	r0, #2
 8002cda:	f005 f801 	bl	8007ce0 <lcd_print>
 8002cde:	e00d      	b.n	8002cfc <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002ce0:	4b58      	ldr	r3, [pc, #352]	; (8002e44 <menu+0x1ca0>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d109      	bne.n	8002cfc <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002ce8:	4a61      	ldr	r2, [pc, #388]	; (8002e70 <menu+0x1ccc>)
 8002cea:	2101      	movs	r1, #1
 8002cec:	2001      	movs	r0, #1
 8002cee:	f004 fff7 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002cf2:	4a60      	ldr	r2, [pc, #384]	; (8002e74 <menu+0x1cd0>)
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	2002      	movs	r0, #2
 8002cf8:	f004 fff2 	bl	8007ce0 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002cfc:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <menu+0x1cd4>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	220a      	movs	r2, #10
 8002d02:	495e      	ldr	r1, [pc, #376]	; (8002e7c <menu+0x1cd8>)
 8002d04:	4618      	mov	r0, r3
 8002d06:	f009 fb3d 	bl	800c384 <itoa>
		lcd_print(2,16,snum);
 8002d0a:	4a5c      	ldr	r2, [pc, #368]	; (8002e7c <menu+0x1cd8>)
 8002d0c:	2110      	movs	r1, #16
 8002d0e:	2002      	movs	r0, #2
 8002d10:	f004 ffe6 	bl	8007ce0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d14:	2102      	movs	r1, #2
 8002d16:	484e      	ldr	r0, [pc, #312]	; (8002e50 <menu+0x1cac>)
 8002d18:	f006 fb08 	bl	800932c <HAL_GPIO_ReadPin>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d119      	bne.n	8002d56 <menu+0x1bb2>
 8002d22:	4b4c      	ldr	r3, [pc, #304]	; (8002e54 <menu+0x1cb0>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	f083 0301 	eor.w	r3, r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d012      	beq.n	8002d56 <menu+0x1bb2>
 8002d30:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <menu+0x1cdc>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10e      	bne.n	8002d56 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002d38:	4b4f      	ldr	r3, [pc, #316]	; (8002e78 <menu+0x1cd4>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	4b4d      	ldr	r3, [pc, #308]	; (8002e78 <menu+0x1cd4>)
 8002d42:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002d44:	4b4c      	ldr	r3, [pc, #304]	; (8002e78 <menu+0x1cd4>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b05      	cmp	r3, #5
 8002d4a:	d902      	bls.n	8002d52 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002d4c:	4b4a      	ldr	r3, [pc, #296]	; (8002e78 <menu+0x1cd4>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d52:	f001 fdfd 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d56:	2104      	movs	r1, #4
 8002d58:	483d      	ldr	r0, [pc, #244]	; (8002e50 <menu+0x1cac>)
 8002d5a:	f006 fae7 	bl	800932c <HAL_GPIO_ReadPin>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d119      	bne.n	8002d98 <menu+0x1bf4>
 8002d64:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <menu+0x1cb0>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	f083 0301 	eor.w	r3, r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d012      	beq.n	8002d98 <menu+0x1bf4>
 8002d72:	4b43      	ldr	r3, [pc, #268]	; (8002e80 <menu+0x1cdc>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10e      	bne.n	8002d98 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002d7a:	4b3f      	ldr	r3, [pc, #252]	; (8002e78 <menu+0x1cd4>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <menu+0x1cd4>)
 8002d84:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002d86:	4b3c      	ldr	r3, [pc, #240]	; (8002e78 <menu+0x1cd4>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d902      	bls.n	8002d94 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002d8e:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <menu+0x1cd4>)
 8002d90:	2205      	movs	r2, #5
 8002d92:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002d94:	f001 fddc 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d98:	2108      	movs	r1, #8
 8002d9a:	482d      	ldr	r0, [pc, #180]	; (8002e50 <menu+0x1cac>)
 8002d9c:	f006 fac6 	bl	800932c <HAL_GPIO_ReadPin>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d10d      	bne.n	8002dc2 <menu+0x1c1e>
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <menu+0x1cb0>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	f083 0301 	eor.w	r3, r3, #1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d006      	beq.n	8002dc2 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002db4:	4b30      	ldr	r3, [pc, #192]	; (8002e78 <menu+0x1cd4>)
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <menu+0x1cb4>)
 8002dba:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002dbc:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <menu+0x1cbc>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002dc2:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <menu+0x1cc0>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	f040 80bc 	bne.w	8002f44 <menu+0x1da0>
		if(dilSecim == 0) {
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <menu+0x1ca0>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d105      	bne.n	8002de0 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002dd4:	4a2b      	ldr	r2, [pc, #172]	; (8002e84 <menu+0x1ce0>)
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f004 ff81 	bl	8007ce0 <lcd_print>
 8002dde:	e008      	b.n	8002df2 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002de0:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <menu+0x1ca0>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d104      	bne.n	8002df2 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002de8:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <menu+0x1ce4>)
 8002dea:	2101      	movs	r1, #1
 8002dec:	2001      	movs	r0, #1
 8002dee:	f004 ff77 	bl	8007ce0 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002df2:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <menu+0x1ce8>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d113      	bne.n	8002e22 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <menu+0x1ca0>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d105      	bne.n	8002e0e <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002e02:	4a11      	ldr	r2, [pc, #68]	; (8002e48 <menu+0x1ca4>)
 8002e04:	2101      	movs	r1, #1
 8002e06:	2002      	movs	r0, #2
 8002e08:	f004 ff6a 	bl	8007ce0 <lcd_print>
 8002e0c:	e04b      	b.n	8002ea6 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <menu+0x1ca0>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d147      	bne.n	8002ea6 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002e16:	4a0d      	ldr	r2, [pc, #52]	; (8002e4c <menu+0x1ca8>)
 8002e18:	2101      	movs	r1, #1
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f004 ff60 	bl	8007ce0 <lcd_print>
 8002e20:	e041      	b.n	8002ea6 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002e22:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <menu+0x1ce8>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d13d      	bne.n	8002ea6 <menu+0x1d02>
			if(dilSecim == 0) {
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <menu+0x1ca0>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d130      	bne.n	8002e94 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002e32:	4a17      	ldr	r2, [pc, #92]	; (8002e90 <menu+0x1cec>)
 8002e34:	2101      	movs	r1, #1
 8002e36:	2002      	movs	r0, #2
 8002e38:	f004 ff52 	bl	8007ce0 <lcd_print>
 8002e3c:	e033      	b.n	8002ea6 <menu+0x1d02>
 8002e3e:	bf00      	nop
 8002e40:	2000022d 	.word	0x2000022d
 8002e44:	20000241 	.word	0x20000241
 8002e48:	0800d2d0 	.word	0x0800d2d0
 8002e4c:	0800d2e4 	.word	0x0800d2e4
 8002e50:	40010800 	.word	0x40010800
 8002e54:	2000024f 	.word	0x2000024f
 8002e58:	20000118 	.word	0x20000118
 8002e5c:	20000226 	.word	0x20000226
 8002e60:	2000024c 	.word	0x2000024c
 8002e64:	20000220 	.word	0x20000220
 8002e68:	0800d670 	.word	0x0800d670
 8002e6c:	0800d534 	.word	0x0800d534
 8002e70:	0800d684 	.word	0x0800d684
 8002e74:	0800d558 	.word	0x0800d558
 8002e78:	2000023b 	.word	0x2000023b
 8002e7c:	20000188 	.word	0x20000188
 8002e80:	2000022b 	.word	0x2000022b
 8002e84:	0800d698 	.word	0x0800d698
 8002e88:	0800d6ac 	.word	0x0800d6ac
 8002e8c:	2000022e 	.word	0x2000022e
 8002e90:	0800d330 	.word	0x0800d330
			} else if(dilSecim == 1) {
 8002e94:	4b99      	ldr	r3, [pc, #612]	; (80030fc <menu+0x1f58>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d104      	bne.n	8002ea6 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002e9c:	4a98      	ldr	r2, [pc, #608]	; (8003100 <menu+0x1f5c>)
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	2002      	movs	r0, #2
 8002ea2:	f004 ff1d 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	4896      	ldr	r0, [pc, #600]	; (8003104 <menu+0x1f60>)
 8002eaa:	f006 fa3f 	bl	800932c <HAL_GPIO_ReadPin>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d115      	bne.n	8002ee0 <menu+0x1d3c>
 8002eb4:	4b94      	ldr	r3, [pc, #592]	; (8003108 <menu+0x1f64>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	f083 0301 	eor.w	r3, r3, #1
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00e      	beq.n	8002ee0 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002ec2:	4b92      	ldr	r3, [pc, #584]	; (800310c <menu+0x1f68>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	4b90      	ldr	r3, [pc, #576]	; (800310c <menu+0x1f68>)
 8002ecc:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002ece:	4b8f      	ldr	r3, [pc, #572]	; (800310c <menu+0x1f68>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d902      	bls.n	8002edc <menu+0x1d38>
				yukariYavasLimit = 0;
 8002ed6:	4b8d      	ldr	r3, [pc, #564]	; (800310c <menu+0x1f68>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002edc:	f001 fd38 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ee0:	2104      	movs	r1, #4
 8002ee2:	4888      	ldr	r0, [pc, #544]	; (8003104 <menu+0x1f60>)
 8002ee4:	f006 fa22 	bl	800932c <HAL_GPIO_ReadPin>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d115      	bne.n	8002f1a <menu+0x1d76>
 8002eee:	4b86      	ldr	r3, [pc, #536]	; (8003108 <menu+0x1f64>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	f083 0301 	eor.w	r3, r3, #1
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00e      	beq.n	8002f1a <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002efc:	4b83      	ldr	r3, [pc, #524]	; (800310c <menu+0x1f68>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	4b81      	ldr	r3, [pc, #516]	; (800310c <menu+0x1f68>)
 8002f06:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002f08:	4b80      	ldr	r3, [pc, #512]	; (800310c <menu+0x1f68>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002f10:	4b7e      	ldr	r3, [pc, #504]	; (800310c <menu+0x1f68>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f16:	f001 fd1b 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f1a:	2108      	movs	r1, #8
 8002f1c:	4879      	ldr	r0, [pc, #484]	; (8003104 <menu+0x1f60>)
 8002f1e:	f006 fa05 	bl	800932c <HAL_GPIO_ReadPin>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10d      	bne.n	8002f44 <menu+0x1da0>
 8002f28:	4b77      	ldr	r3, [pc, #476]	; (8003108 <menu+0x1f64>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	f083 0301 	eor.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d006      	beq.n	8002f44 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002f36:	4b75      	ldr	r3, [pc, #468]	; (800310c <menu+0x1f68>)
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	4b75      	ldr	r3, [pc, #468]	; (8003110 <menu+0x1f6c>)
 8002f3c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002f3e:	4b75      	ldr	r3, [pc, #468]	; (8003114 <menu+0x1f70>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002f44:	4b74      	ldr	r3, [pc, #464]	; (8003118 <menu+0x1f74>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b11      	cmp	r3, #17
 8002f4a:	f040 80c3 	bne.w	80030d4 <menu+0x1f30>
		if(dilSecim == 0) {
 8002f4e:	4b6b      	ldr	r3, [pc, #428]	; (80030fc <menu+0x1f58>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d105      	bne.n	8002f62 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002f56:	4a71      	ldr	r2, [pc, #452]	; (800311c <menu+0x1f78>)
 8002f58:	2101      	movs	r1, #1
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	f004 fec0 	bl	8007ce0 <lcd_print>
 8002f60:	e008      	b.n	8002f74 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002f62:	4b66      	ldr	r3, [pc, #408]	; (80030fc <menu+0x1f58>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d104      	bne.n	8002f74 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002f6a:	4a6d      	ldr	r2, [pc, #436]	; (8003120 <menu+0x1f7c>)
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	2001      	movs	r0, #1
 8002f70:	f004 feb6 	bl	8007ce0 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002f74:	4b6b      	ldr	r3, [pc, #428]	; (8003124 <menu+0x1f80>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d113      	bne.n	8002fa4 <menu+0x1e00>
			if(dilSecim == 0){
 8002f7c:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <menu+0x1f58>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d105      	bne.n	8002f90 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002f84:	4a68      	ldr	r2, [pc, #416]	; (8003128 <menu+0x1f84>)
 8002f86:	2101      	movs	r1, #1
 8002f88:	2002      	movs	r0, #2
 8002f8a:	f004 fea9 	bl	8007ce0 <lcd_print>
 8002f8e:	e038      	b.n	8003002 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002f90:	4b5a      	ldr	r3, [pc, #360]	; (80030fc <menu+0x1f58>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d134      	bne.n	8003002 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002f98:	4a64      	ldr	r2, [pc, #400]	; (800312c <menu+0x1f88>)
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	2002      	movs	r0, #2
 8002f9e:	f004 fe9f 	bl	8007ce0 <lcd_print>
 8002fa2:	e02e      	b.n	8003002 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002fa4:	4b5f      	ldr	r3, [pc, #380]	; (8003124 <menu+0x1f80>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d113      	bne.n	8002fd4 <menu+0x1e30>
			if(dilSecim == 0){
 8002fac:	4b53      	ldr	r3, [pc, #332]	; (80030fc <menu+0x1f58>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002fb4:	4a5e      	ldr	r2, [pc, #376]	; (8003130 <menu+0x1f8c>)
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	2002      	movs	r0, #2
 8002fba:	f004 fe91 	bl	8007ce0 <lcd_print>
 8002fbe:	e020      	b.n	8003002 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002fc0:	4b4e      	ldr	r3, [pc, #312]	; (80030fc <menu+0x1f58>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d11c      	bne.n	8003002 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002fc8:	4a5a      	ldr	r2, [pc, #360]	; (8003134 <menu+0x1f90>)
 8002fca:	2101      	movs	r1, #1
 8002fcc:	2002      	movs	r0, #2
 8002fce:	f004 fe87 	bl	8007ce0 <lcd_print>
 8002fd2:	e016      	b.n	8003002 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002fd4:	4b53      	ldr	r3, [pc, #332]	; (8003124 <menu+0x1f80>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d112      	bne.n	8003002 <menu+0x1e5e>
			if(dilSecim == 0) {
 8002fdc:	4b47      	ldr	r3, [pc, #284]	; (80030fc <menu+0x1f58>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d105      	bne.n	8002ff0 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002fe4:	4a54      	ldr	r2, [pc, #336]	; (8003138 <menu+0x1f94>)
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	2002      	movs	r0, #2
 8002fea:	f004 fe79 	bl	8007ce0 <lcd_print>
 8002fee:	e008      	b.n	8003002 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002ff0:	4b42      	ldr	r3, [pc, #264]	; (80030fc <menu+0x1f58>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d104      	bne.n	8003002 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002ff8:	4a50      	ldr	r2, [pc, #320]	; (800313c <menu+0x1f98>)
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	2002      	movs	r0, #2
 8002ffe:	f004 fe6f 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003002:	2102      	movs	r1, #2
 8003004:	483f      	ldr	r0, [pc, #252]	; (8003104 <menu+0x1f60>)
 8003006:	f006 f991 	bl	800932c <HAL_GPIO_ReadPin>
 800300a:	4603      	mov	r3, r0
 800300c:	2b01      	cmp	r3, #1
 800300e:	d115      	bne.n	800303c <menu+0x1e98>
 8003010:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <menu+0x1f64>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	f083 0301 	eor.w	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00e      	beq.n	800303c <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800301e:	4b41      	ldr	r3, [pc, #260]	; (8003124 <menu+0x1f80>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	b2da      	uxtb	r2, r3
 8003026:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <menu+0x1f80>)
 8003028:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800302a:	4b3e      	ldr	r3, [pc, #248]	; (8003124 <menu+0x1f80>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d902      	bls.n	8003038 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8003032:	4b3c      	ldr	r3, [pc, #240]	; (8003124 <menu+0x1f80>)
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003038:	f001 fc8a 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800303c:	2104      	movs	r1, #4
 800303e:	4831      	ldr	r0, [pc, #196]	; (8003104 <menu+0x1f60>)
 8003040:	f006 f974 	bl	800932c <HAL_GPIO_ReadPin>
 8003044:	4603      	mov	r3, r0
 8003046:	2b01      	cmp	r3, #1
 8003048:	d115      	bne.n	8003076 <menu+0x1ed2>
 800304a:	4b2f      	ldr	r3, [pc, #188]	; (8003108 <menu+0x1f64>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	f083 0301 	eor.w	r3, r3, #1
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00e      	beq.n	8003076 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003058:	4b32      	ldr	r3, [pc, #200]	; (8003124 <menu+0x1f80>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	3b01      	subs	r3, #1
 800305e:	b2da      	uxtb	r2, r3
 8003060:	4b30      	ldr	r3, [pc, #192]	; (8003124 <menu+0x1f80>)
 8003062:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003064:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <menu+0x1f80>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d902      	bls.n	8003072 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 800306c:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <menu+0x1f80>)
 800306e:	2202      	movs	r2, #2
 8003070:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003072:	f001 fc6d 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003076:	2108      	movs	r1, #8
 8003078:	4822      	ldr	r0, [pc, #136]	; (8003104 <menu+0x1f60>)
 800307a:	f006 f957 	bl	800932c <HAL_GPIO_ReadPin>
 800307e:	4603      	mov	r3, r0
 8003080:	2b01      	cmp	r3, #1
 8003082:	d127      	bne.n	80030d4 <menu+0x1f30>
 8003084:	4b20      	ldr	r3, [pc, #128]	; (8003108 <menu+0x1f64>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	f083 0301 	eor.w	r3, r3, #1
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d020      	beq.n	80030d4 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <menu+0x1f80>)
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <menu+0x1f6c>)
 8003098:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800309a:	4b22      	ldr	r3, [pc, #136]	; (8003124 <menu+0x1f80>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d003      	beq.n	80030aa <menu+0x1f06>
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <menu+0x1f80>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d106      	bne.n	80030b8 <menu+0x1f14>
				calismaSekli = 0;
 80030aa:	4b25      	ldr	r3, [pc, #148]	; (8003140 <menu+0x1f9c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80030b0:	4b23      	ldr	r3, [pc, #140]	; (8003140 <menu+0x1f9c>)
 80030b2:	781a      	ldrb	r2, [r3, #0]
 80030b4:	4b16      	ldr	r3, [pc, #88]	; (8003110 <menu+0x1f6c>)
 80030b6:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <menu+0x1f80>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d106      	bne.n	80030ce <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80030c0:	4b20      	ldr	r3, [pc, #128]	; (8003144 <menu+0x1fa0>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80030c6:	4b1f      	ldr	r3, [pc, #124]	; (8003144 <menu+0x1fa0>)
 80030c8:	781a      	ldrb	r2, [r3, #0]
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <menu+0x1f6c>)
 80030cc:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <menu+0x1f70>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <menu+0x1f74>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b12      	cmp	r3, #18
 80030da:	f040 80d5 	bne.w	8003288 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <menu+0x1f80>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d13c      	bne.n	8003160 <menu+0x1fbc>
			if(dilSecim == 0) {
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <menu+0x1f58>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d12e      	bne.n	800314c <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80030ee:	4a16      	ldr	r2, [pc, #88]	; (8003148 <menu+0x1fa4>)
 80030f0:	2101      	movs	r1, #1
 80030f2:	2001      	movs	r0, #1
 80030f4:	f004 fdf4 	bl	8007ce0 <lcd_print>
 80030f8:	e048      	b.n	800318c <menu+0x1fe8>
 80030fa:	bf00      	nop
 80030fc:	20000241 	.word	0x20000241
 8003100:	0800d344 	.word	0x0800d344
 8003104:	40010800 	.word	0x40010800
 8003108:	2000024f 	.word	0x2000024f
 800310c:	2000022e 	.word	0x2000022e
 8003110:	20000118 	.word	0x20000118
 8003114:	2000024c 	.word	0x2000024c
 8003118:	20000220 	.word	0x20000220
 800311c:	0800d6c0 	.word	0x0800d6c0
 8003120:	0800d6d4 	.word	0x0800d6d4
 8003124:	2000022f 	.word	0x2000022f
 8003128:	0800d6e8 	.word	0x0800d6e8
 800312c:	0800d6f8 	.word	0x0800d6f8
 8003130:	0800d708 	.word	0x0800d708
 8003134:	0800d718 	.word	0x0800d718
 8003138:	0800d2d0 	.word	0x0800d2d0
 800313c:	0800d2e4 	.word	0x0800d2e4
 8003140:	20000221 	.word	0x20000221
 8003144:	20000232 	.word	0x20000232
 8003148:	0800d728 	.word	0x0800d728
			} else if(dilSecim == 1) {
 800314c:	4b7b      	ldr	r3, [pc, #492]	; (800333c <menu+0x2198>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d11b      	bne.n	800318c <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003154:	4a7a      	ldr	r2, [pc, #488]	; (8003340 <menu+0x219c>)
 8003156:	2101      	movs	r1, #1
 8003158:	2001      	movs	r0, #1
 800315a:	f004 fdc1 	bl	8007ce0 <lcd_print>
 800315e:	e015      	b.n	800318c <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003160:	4b78      	ldr	r3, [pc, #480]	; (8003344 <menu+0x21a0>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d111      	bne.n	800318c <menu+0x1fe8>
			if(dilSecim == 0){
 8003168:	4b74      	ldr	r3, [pc, #464]	; (800333c <menu+0x2198>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003170:	4a75      	ldr	r2, [pc, #468]	; (8003348 <menu+0x21a4>)
 8003172:	2101      	movs	r1, #1
 8003174:	2001      	movs	r0, #1
 8003176:	f004 fdb3 	bl	8007ce0 <lcd_print>
			}
			if(dilSecim == 1){
 800317a:	4b70      	ldr	r3, [pc, #448]	; (800333c <menu+0x2198>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d104      	bne.n	800318c <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003182:	4a72      	ldr	r2, [pc, #456]	; (800334c <menu+0x21a8>)
 8003184:	2101      	movs	r1, #1
 8003186:	2001      	movs	r0, #1
 8003188:	f004 fdaa 	bl	8007ce0 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 800318c:	4b70      	ldr	r3, [pc, #448]	; (8003350 <menu+0x21ac>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d113      	bne.n	80031bc <menu+0x2018>
			if(dilSecim == 0) {
 8003194:	4b69      	ldr	r3, [pc, #420]	; (800333c <menu+0x2198>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 800319c:	4a6d      	ldr	r2, [pc, #436]	; (8003354 <menu+0x21b0>)
 800319e:	2101      	movs	r1, #1
 80031a0:	2002      	movs	r0, #2
 80031a2:	f004 fd9d 	bl	8007ce0 <lcd_print>
 80031a6:	e020      	b.n	80031ea <menu+0x2046>
			} else if(dilSecim == 1){
 80031a8:	4b64      	ldr	r3, [pc, #400]	; (800333c <menu+0x2198>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d11c      	bne.n	80031ea <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80031b0:	4a69      	ldr	r2, [pc, #420]	; (8003358 <menu+0x21b4>)
 80031b2:	2101      	movs	r1, #1
 80031b4:	2002      	movs	r0, #2
 80031b6:	f004 fd93 	bl	8007ce0 <lcd_print>
 80031ba:	e016      	b.n	80031ea <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80031bc:	4b64      	ldr	r3, [pc, #400]	; (8003350 <menu+0x21ac>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d112      	bne.n	80031ea <menu+0x2046>
			if(dilSecim == 0){
 80031c4:	4b5d      	ldr	r3, [pc, #372]	; (800333c <menu+0x2198>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d105      	bne.n	80031d8 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80031cc:	4a63      	ldr	r2, [pc, #396]	; (800335c <menu+0x21b8>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	2002      	movs	r0, #2
 80031d2:	f004 fd85 	bl	8007ce0 <lcd_print>
 80031d6:	e008      	b.n	80031ea <menu+0x2046>
			} else if(dilSecim == 1){
 80031d8:	4b58      	ldr	r3, [pc, #352]	; (800333c <menu+0x2198>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d104      	bne.n	80031ea <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80031e0:	4a5f      	ldr	r2, [pc, #380]	; (8003360 <menu+0x21bc>)
 80031e2:	2101      	movs	r1, #1
 80031e4:	2002      	movs	r0, #2
 80031e6:	f004 fd7b 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ea:	2102      	movs	r1, #2
 80031ec:	485d      	ldr	r0, [pc, #372]	; (8003364 <menu+0x21c0>)
 80031ee:	f006 f89d 	bl	800932c <HAL_GPIO_ReadPin>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d115      	bne.n	8003224 <menu+0x2080>
 80031f8:	4b5b      	ldr	r3, [pc, #364]	; (8003368 <menu+0x21c4>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	f083 0301 	eor.w	r3, r3, #1
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00e      	beq.n	8003224 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003206:	4b52      	ldr	r3, [pc, #328]	; (8003350 <menu+0x21ac>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	3301      	adds	r3, #1
 800320c:	b2da      	uxtb	r2, r3
 800320e:	4b50      	ldr	r3, [pc, #320]	; (8003350 <menu+0x21ac>)
 8003210:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003212:	4b4f      	ldr	r3, [pc, #316]	; (8003350 <menu+0x21ac>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d902      	bls.n	8003220 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800321a:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <menu+0x21ac>)
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003220:	f001 fb96 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003224:	2104      	movs	r1, #4
 8003226:	484f      	ldr	r0, [pc, #316]	; (8003364 <menu+0x21c0>)
 8003228:	f006 f880 	bl	800932c <HAL_GPIO_ReadPin>
 800322c:	4603      	mov	r3, r0
 800322e:	2b01      	cmp	r3, #1
 8003230:	d115      	bne.n	800325e <menu+0x20ba>
 8003232:	4b4d      	ldr	r3, [pc, #308]	; (8003368 <menu+0x21c4>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	f083 0301 	eor.w	r3, r3, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00e      	beq.n	800325e <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003240:	4b43      	ldr	r3, [pc, #268]	; (8003350 <menu+0x21ac>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	3b01      	subs	r3, #1
 8003246:	b2da      	uxtb	r2, r3
 8003248:	4b41      	ldr	r3, [pc, #260]	; (8003350 <menu+0x21ac>)
 800324a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 800324c:	4b40      	ldr	r3, [pc, #256]	; (8003350 <menu+0x21ac>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003254:	4b3e      	ldr	r3, [pc, #248]	; (8003350 <menu+0x21ac>)
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800325a:	f001 fb79 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800325e:	2108      	movs	r1, #8
 8003260:	4840      	ldr	r0, [pc, #256]	; (8003364 <menu+0x21c0>)
 8003262:	f006 f863 	bl	800932c <HAL_GPIO_ReadPin>
 8003266:	4603      	mov	r3, r0
 8003268:	2b01      	cmp	r3, #1
 800326a:	d10d      	bne.n	8003288 <menu+0x20e4>
 800326c:	4b3e      	ldr	r3, [pc, #248]	; (8003368 <menu+0x21c4>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	f083 0301 	eor.w	r3, r3, #1
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d006      	beq.n	8003288 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800327a:	4b35      	ldr	r3, [pc, #212]	; (8003350 <menu+0x21ac>)
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	4b3b      	ldr	r3, [pc, #236]	; (800336c <menu+0x21c8>)
 8003280:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003282:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <menu+0x21cc>)
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003288:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <menu+0x21d0>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b13      	cmp	r3, #19
 800328e:	f040 80d5 	bne.w	800343c <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003292:	4b2c      	ldr	r3, [pc, #176]	; (8003344 <menu+0x21a0>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d113      	bne.n	80032c2 <menu+0x211e>
			if(dilSecim == 0) {
 800329a:	4b28      	ldr	r3, [pc, #160]	; (800333c <menu+0x2198>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80032a2:	4a35      	ldr	r2, [pc, #212]	; (8003378 <menu+0x21d4>)
 80032a4:	2101      	movs	r1, #1
 80032a6:	2001      	movs	r0, #1
 80032a8:	f004 fd1a 	bl	8007ce0 <lcd_print>
 80032ac:	e01f      	b.n	80032ee <menu+0x214a>
			} else if(dilSecim == 1) {
 80032ae:	4b23      	ldr	r3, [pc, #140]	; (800333c <menu+0x2198>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d11b      	bne.n	80032ee <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80032b6:	4a31      	ldr	r2, [pc, #196]	; (800337c <menu+0x21d8>)
 80032b8:	2101      	movs	r1, #1
 80032ba:	2001      	movs	r0, #1
 80032bc:	f004 fd10 	bl	8007ce0 <lcd_print>
 80032c0:	e015      	b.n	80032ee <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032c2:	4b20      	ldr	r3, [pc, #128]	; (8003344 <menu+0x21a0>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d111      	bne.n	80032ee <menu+0x214a>
			if(dilSecim == 0) {
 80032ca:	4b1c      	ldr	r3, [pc, #112]	; (800333c <menu+0x2198>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80032d2:	4a2b      	ldr	r2, [pc, #172]	; (8003380 <menu+0x21dc>)
 80032d4:	2101      	movs	r1, #1
 80032d6:	2001      	movs	r0, #1
 80032d8:	f004 fd02 	bl	8007ce0 <lcd_print>
			}
			if(dilSecim == 1) {
 80032dc:	4b17      	ldr	r3, [pc, #92]	; (800333c <menu+0x2198>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d104      	bne.n	80032ee <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80032e4:	4a27      	ldr	r2, [pc, #156]	; (8003384 <menu+0x21e0>)
 80032e6:	2101      	movs	r1, #1
 80032e8:	2001      	movs	r0, #1
 80032ea:	f004 fcf9 	bl	8007ce0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80032ee:	4b26      	ldr	r3, [pc, #152]	; (8003388 <menu+0x21e4>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d113      	bne.n	800331e <menu+0x217a>
			if(dilSecim == 0) {
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <menu+0x2198>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80032fe:	4a15      	ldr	r2, [pc, #84]	; (8003354 <menu+0x21b0>)
 8003300:	2101      	movs	r1, #1
 8003302:	2002      	movs	r0, #2
 8003304:	f004 fcec 	bl	8007ce0 <lcd_print>
 8003308:	e049      	b.n	800339e <menu+0x21fa>
			} else if(dilSecim == 1) {
 800330a:	4b0c      	ldr	r3, [pc, #48]	; (800333c <menu+0x2198>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d145      	bne.n	800339e <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003312:	4a11      	ldr	r2, [pc, #68]	; (8003358 <menu+0x21b4>)
 8003314:	2101      	movs	r1, #1
 8003316:	2002      	movs	r0, #2
 8003318:	f004 fce2 	bl	8007ce0 <lcd_print>
 800331c:	e03f      	b.n	800339e <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800331e:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <menu+0x21e4>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d13b      	bne.n	800339e <menu+0x21fa>
			if(dilSecim == 0) {
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <menu+0x2198>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d12e      	bne.n	800338c <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800332e:	4a0b      	ldr	r2, [pc, #44]	; (800335c <menu+0x21b8>)
 8003330:	2101      	movs	r1, #1
 8003332:	2002      	movs	r0, #2
 8003334:	f004 fcd4 	bl	8007ce0 <lcd_print>
 8003338:	e031      	b.n	800339e <menu+0x21fa>
 800333a:	bf00      	nop
 800333c:	20000241 	.word	0x20000241
 8003340:	0800d73c 	.word	0x0800d73c
 8003344:	2000022f 	.word	0x2000022f
 8003348:	0800d74c 	.word	0x0800d74c
 800334c:	0800d760 	.word	0x0800d760
 8003350:	20000230 	.word	0x20000230
 8003354:	0800d2d0 	.word	0x0800d2d0
 8003358:	0800d2e4 	.word	0x0800d2e4
 800335c:	0800d330 	.word	0x0800d330
 8003360:	0800d344 	.word	0x0800d344
 8003364:	40010800 	.word	0x40010800
 8003368:	2000024f 	.word	0x2000024f
 800336c:	20000118 	.word	0x20000118
 8003370:	2000024c 	.word	0x2000024c
 8003374:	20000220 	.word	0x20000220
 8003378:	0800d774 	.word	0x0800d774
 800337c:	0800d788 	.word	0x0800d788
 8003380:	0800d79c 	.word	0x0800d79c
 8003384:	0800d7b0 	.word	0x0800d7b0
 8003388:	20000231 	.word	0x20000231
			} else if(dilSecim == 1) {
 800338c:	4b90      	ldr	r3, [pc, #576]	; (80035d0 <menu+0x242c>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d104      	bne.n	800339e <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003394:	4a8f      	ldr	r2, [pc, #572]	; (80035d4 <menu+0x2430>)
 8003396:	2101      	movs	r1, #1
 8003398:	2002      	movs	r0, #2
 800339a:	f004 fca1 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800339e:	2102      	movs	r1, #2
 80033a0:	488d      	ldr	r0, [pc, #564]	; (80035d8 <menu+0x2434>)
 80033a2:	f005 ffc3 	bl	800932c <HAL_GPIO_ReadPin>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d115      	bne.n	80033d8 <menu+0x2234>
 80033ac:	4b8b      	ldr	r3, [pc, #556]	; (80035dc <menu+0x2438>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	f083 0301 	eor.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80033ba:	4b89      	ldr	r3, [pc, #548]	; (80035e0 <menu+0x243c>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	3301      	adds	r3, #1
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4b87      	ldr	r3, [pc, #540]	; (80035e0 <menu+0x243c>)
 80033c4:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80033c6:	4b86      	ldr	r3, [pc, #536]	; (80035e0 <menu+0x243c>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d902      	bls.n	80033d4 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80033ce:	4b84      	ldr	r3, [pc, #528]	; (80035e0 <menu+0x243c>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033d4:	f001 fabc 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033d8:	2104      	movs	r1, #4
 80033da:	487f      	ldr	r0, [pc, #508]	; (80035d8 <menu+0x2434>)
 80033dc:	f005 ffa6 	bl	800932c <HAL_GPIO_ReadPin>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d115      	bne.n	8003412 <menu+0x226e>
 80033e6:	4b7d      	ldr	r3, [pc, #500]	; (80035dc <menu+0x2438>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	f083 0301 	eor.w	r3, r3, #1
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00e      	beq.n	8003412 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80033f4:	4b7a      	ldr	r3, [pc, #488]	; (80035e0 <menu+0x243c>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	4b78      	ldr	r3, [pc, #480]	; (80035e0 <menu+0x243c>)
 80033fe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003400:	4b77      	ldr	r3, [pc, #476]	; (80035e0 <menu+0x243c>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003408:	4b75      	ldr	r3, [pc, #468]	; (80035e0 <menu+0x243c>)
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800340e:	f001 fa9f 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003412:	2108      	movs	r1, #8
 8003414:	4870      	ldr	r0, [pc, #448]	; (80035d8 <menu+0x2434>)
 8003416:	f005 ff89 	bl	800932c <HAL_GPIO_ReadPin>
 800341a:	4603      	mov	r3, r0
 800341c:	2b01      	cmp	r3, #1
 800341e:	d10d      	bne.n	800343c <menu+0x2298>
 8003420:	4b6e      	ldr	r3, [pc, #440]	; (80035dc <menu+0x2438>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	f083 0301 	eor.w	r3, r3, #1
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800342e:	4b6c      	ldr	r3, [pc, #432]	; (80035e0 <menu+0x243c>)
 8003430:	781a      	ldrb	r2, [r3, #0]
 8003432:	4b6c      	ldr	r3, [pc, #432]	; (80035e4 <menu+0x2440>)
 8003434:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003436:	4b6c      	ldr	r3, [pc, #432]	; (80035e8 <menu+0x2444>)
 8003438:	2201      	movs	r2, #1
 800343a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 800343c:	4b6b      	ldr	r3, [pc, #428]	; (80035ec <menu+0x2448>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b14      	cmp	r3, #20
 8003442:	f040 80b5 	bne.w	80035b0 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003446:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <menu+0x244c>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d113      	bne.n	8003476 <menu+0x22d2>
			if(dilSecim == 0) {
 800344e:	4b60      	ldr	r3, [pc, #384]	; (80035d0 <menu+0x242c>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d105      	bne.n	8003462 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003456:	4a67      	ldr	r2, [pc, #412]	; (80035f4 <menu+0x2450>)
 8003458:	2101      	movs	r1, #1
 800345a:	2001      	movs	r0, #1
 800345c:	f004 fc40 	bl	8007ce0 <lcd_print>
 8003460:	e020      	b.n	80034a4 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003462:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <menu+0x242c>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d11c      	bne.n	80034a4 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800346a:	4a63      	ldr	r2, [pc, #396]	; (80035f8 <menu+0x2454>)
 800346c:	2101      	movs	r1, #1
 800346e:	2001      	movs	r0, #1
 8003470:	f004 fc36 	bl	8007ce0 <lcd_print>
 8003474:	e016      	b.n	80034a4 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003476:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <menu+0x244c>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d112      	bne.n	80034a4 <menu+0x2300>
			if(dilSecim == 0) {
 800347e:	4b54      	ldr	r3, [pc, #336]	; (80035d0 <menu+0x242c>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d105      	bne.n	8003492 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003486:	4a5d      	ldr	r2, [pc, #372]	; (80035fc <menu+0x2458>)
 8003488:	2101      	movs	r1, #1
 800348a:	2001      	movs	r0, #1
 800348c:	f004 fc28 	bl	8007ce0 <lcd_print>
 8003490:	e008      	b.n	80034a4 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003492:	4b4f      	ldr	r3, [pc, #316]	; (80035d0 <menu+0x242c>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d104      	bne.n	80034a4 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800349a:	4a59      	ldr	r2, [pc, #356]	; (8003600 <menu+0x245c>)
 800349c:	2101      	movs	r1, #1
 800349e:	2001      	movs	r0, #1
 80034a0:	f004 fc1e 	bl	8007ce0 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80034a4:	4b57      	ldr	r3, [pc, #348]	; (8003604 <menu+0x2460>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d113      	bne.n	80034d4 <menu+0x2330>
			if(dilSecim == 0) {
 80034ac:	4b48      	ldr	r3, [pc, #288]	; (80035d0 <menu+0x242c>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80034b4:	4a54      	ldr	r2, [pc, #336]	; (8003608 <menu+0x2464>)
 80034b6:	2101      	movs	r1, #1
 80034b8:	2002      	movs	r0, #2
 80034ba:	f004 fc11 	bl	8007ce0 <lcd_print>
 80034be:	e020      	b.n	8003502 <menu+0x235e>
			} else if(dilSecim == 1) {
 80034c0:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <menu+0x242c>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d11c      	bne.n	8003502 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80034c8:	4a50      	ldr	r2, [pc, #320]	; (800360c <menu+0x2468>)
 80034ca:	2101      	movs	r1, #1
 80034cc:	2002      	movs	r0, #2
 80034ce:	f004 fc07 	bl	8007ce0 <lcd_print>
 80034d2:	e016      	b.n	8003502 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80034d4:	4b4b      	ldr	r3, [pc, #300]	; (8003604 <menu+0x2460>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d112      	bne.n	8003502 <menu+0x235e>
			if(dilSecim == 0) {
 80034dc:	4b3c      	ldr	r3, [pc, #240]	; (80035d0 <menu+0x242c>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80034e4:	4a4a      	ldr	r2, [pc, #296]	; (8003610 <menu+0x246c>)
 80034e6:	2101      	movs	r1, #1
 80034e8:	2002      	movs	r0, #2
 80034ea:	f004 fbf9 	bl	8007ce0 <lcd_print>
 80034ee:	e008      	b.n	8003502 <menu+0x235e>
			} else if(dilSecim == 1) {
 80034f0:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <menu+0x242c>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d104      	bne.n	8003502 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80034f8:	4a46      	ldr	r2, [pc, #280]	; (8003614 <menu+0x2470>)
 80034fa:	2101      	movs	r1, #1
 80034fc:	2002      	movs	r0, #2
 80034fe:	f004 fbef 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003502:	2102      	movs	r1, #2
 8003504:	4834      	ldr	r0, [pc, #208]	; (80035d8 <menu+0x2434>)
 8003506:	f005 ff11 	bl	800932c <HAL_GPIO_ReadPin>
 800350a:	4603      	mov	r3, r0
 800350c:	2b01      	cmp	r3, #1
 800350e:	d119      	bne.n	8003544 <menu+0x23a0>
 8003510:	4b32      	ldr	r3, [pc, #200]	; (80035dc <menu+0x2438>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	f083 0301 	eor.w	r3, r3, #1
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d012      	beq.n	8003544 <menu+0x23a0>
 800351e:	4b34      	ldr	r3, [pc, #208]	; (80035f0 <menu+0x244c>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d10e      	bne.n	8003544 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003526:	4b37      	ldr	r3, [pc, #220]	; (8003604 <menu+0x2460>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	3301      	adds	r3, #1
 800352c:	b2da      	uxtb	r2, r3
 800352e:	4b35      	ldr	r3, [pc, #212]	; (8003604 <menu+0x2460>)
 8003530:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003532:	4b34      	ldr	r3, [pc, #208]	; (8003604 <menu+0x2460>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d902      	bls.n	8003540 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800353a:	4b32      	ldr	r3, [pc, #200]	; (8003604 <menu+0x2460>)
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003540:	f001 fa06 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003544:	2104      	movs	r1, #4
 8003546:	4824      	ldr	r0, [pc, #144]	; (80035d8 <menu+0x2434>)
 8003548:	f005 fef0 	bl	800932c <HAL_GPIO_ReadPin>
 800354c:	4603      	mov	r3, r0
 800354e:	2b01      	cmp	r3, #1
 8003550:	d119      	bne.n	8003586 <menu+0x23e2>
 8003552:	4b22      	ldr	r3, [pc, #136]	; (80035dc <menu+0x2438>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	f083 0301 	eor.w	r3, r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d012      	beq.n	8003586 <menu+0x23e2>
 8003560:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <menu+0x244c>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d10e      	bne.n	8003586 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003568:	4b26      	ldr	r3, [pc, #152]	; (8003604 <menu+0x2460>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	3b01      	subs	r3, #1
 800356e:	b2da      	uxtb	r2, r3
 8003570:	4b24      	ldr	r3, [pc, #144]	; (8003604 <menu+0x2460>)
 8003572:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003574:	4b23      	ldr	r3, [pc, #140]	; (8003604 <menu+0x2460>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 800357c:	4b21      	ldr	r3, [pc, #132]	; (8003604 <menu+0x2460>)
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003582:	f001 f9e5 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003586:	2108      	movs	r1, #8
 8003588:	4813      	ldr	r0, [pc, #76]	; (80035d8 <menu+0x2434>)
 800358a:	f005 fecf 	bl	800932c <HAL_GPIO_ReadPin>
 800358e:	4603      	mov	r3, r0
 8003590:	2b01      	cmp	r3, #1
 8003592:	d10d      	bne.n	80035b0 <menu+0x240c>
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <menu+0x2438>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	f083 0301 	eor.w	r3, r3, #1
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d006      	beq.n	80035b0 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80035a2:	4b18      	ldr	r3, [pc, #96]	; (8003604 <menu+0x2460>)
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <menu+0x2440>)
 80035a8:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <menu+0x2444>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <menu+0x2448>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b15      	cmp	r3, #21
 80035b6:	f040 80c2 	bne.w	800373e <menu+0x259a>
		if(dilSecim == 0) {
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <menu+0x242c>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d12c      	bne.n	800361c <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80035c2:	4a15      	ldr	r2, [pc, #84]	; (8003618 <menu+0x2474>)
 80035c4:	2101      	movs	r1, #1
 80035c6:	2001      	movs	r0, #1
 80035c8:	f004 fb8a 	bl	8007ce0 <lcd_print>
 80035cc:	e02f      	b.n	800362e <menu+0x248a>
 80035ce:	bf00      	nop
 80035d0:	20000241 	.word	0x20000241
 80035d4:	0800d344 	.word	0x0800d344
 80035d8:	40010800 	.word	0x40010800
 80035dc:	2000024f 	.word	0x2000024f
 80035e0:	20000231 	.word	0x20000231
 80035e4:	20000118 	.word	0x20000118
 80035e8:	2000024c 	.word	0x2000024c
 80035ec:	20000220 	.word	0x20000220
 80035f0:	2000022f 	.word	0x2000022f
 80035f4:	0800d7c4 	.word	0x0800d7c4
 80035f8:	0800d7d8 	.word	0x0800d7d8
 80035fc:	0800d7ec 	.word	0x0800d7ec
 8003600:	0800d800 	.word	0x0800d800
 8003604:	20000232 	.word	0x20000232
 8003608:	0800d814 	.word	0x0800d814
 800360c:	0800d828 	.word	0x0800d828
 8003610:	0800d838 	.word	0x0800d838
 8003614:	0800d84c 	.word	0x0800d84c
 8003618:	0800d85c 	.word	0x0800d85c
		} else if(dilSecim == 1) {
 800361c:	4b9c      	ldr	r3, [pc, #624]	; (8003890 <menu+0x26ec>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d104      	bne.n	800362e <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003624:	4a9b      	ldr	r2, [pc, #620]	; (8003894 <menu+0x26f0>)
 8003626:	2101      	movs	r1, #1
 8003628:	2001      	movs	r0, #1
 800362a:	f004 fb59 	bl	8007ce0 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800362e:	4b9a      	ldr	r3, [pc, #616]	; (8003898 <menu+0x26f4>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d112      	bne.n	800365c <menu+0x24b8>
			if(dilSecim == 0) {
 8003636:	4b96      	ldr	r3, [pc, #600]	; (8003890 <menu+0x26ec>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d104      	bne.n	8003648 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800363e:	4a97      	ldr	r2, [pc, #604]	; (800389c <menu+0x26f8>)
 8003640:	2101      	movs	r1, #1
 8003642:	2002      	movs	r0, #2
 8003644:	f004 fb4c 	bl	8007ce0 <lcd_print>
			}
			if(dilSecim == 1) {
 8003648:	4b91      	ldr	r3, [pc, #580]	; (8003890 <menu+0x26ec>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d11c      	bne.n	800368a <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003650:	4a93      	ldr	r2, [pc, #588]	; (80038a0 <menu+0x26fc>)
 8003652:	2101      	movs	r1, #1
 8003654:	2002      	movs	r0, #2
 8003656:	f004 fb43 	bl	8007ce0 <lcd_print>
 800365a:	e016      	b.n	800368a <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 800365c:	4b8e      	ldr	r3, [pc, #568]	; (8003898 <menu+0x26f4>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d112      	bne.n	800368a <menu+0x24e6>
			if(dilSecim == 0) {
 8003664:	4b8a      	ldr	r3, [pc, #552]	; (8003890 <menu+0x26ec>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d105      	bne.n	8003678 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 800366c:	4a8d      	ldr	r2, [pc, #564]	; (80038a4 <menu+0x2700>)
 800366e:	2101      	movs	r1, #1
 8003670:	2002      	movs	r0, #2
 8003672:	f004 fb35 	bl	8007ce0 <lcd_print>
 8003676:	e008      	b.n	800368a <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003678:	4b85      	ldr	r3, [pc, #532]	; (8003890 <menu+0x26ec>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d104      	bne.n	800368a <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003680:	4a89      	ldr	r2, [pc, #548]	; (80038a8 <menu+0x2704>)
 8003682:	2101      	movs	r1, #1
 8003684:	2002      	movs	r0, #2
 8003686:	f004 fb2b 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800368a:	2102      	movs	r1, #2
 800368c:	4887      	ldr	r0, [pc, #540]	; (80038ac <menu+0x2708>)
 800368e:	f005 fe4d 	bl	800932c <HAL_GPIO_ReadPin>
 8003692:	4603      	mov	r3, r0
 8003694:	2b01      	cmp	r3, #1
 8003696:	d115      	bne.n	80036c4 <menu+0x2520>
 8003698:	4b85      	ldr	r3, [pc, #532]	; (80038b0 <menu+0x270c>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	f083 0301 	eor.w	r3, r3, #1
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00e      	beq.n	80036c4 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80036a6:	4b7c      	ldr	r3, [pc, #496]	; (8003898 <menu+0x26f4>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	3301      	adds	r3, #1
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4b7a      	ldr	r3, [pc, #488]	; (8003898 <menu+0x26f4>)
 80036b0:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80036b2:	4b79      	ldr	r3, [pc, #484]	; (8003898 <menu+0x26f4>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d902      	bls.n	80036c0 <menu+0x251c>
				platformSilindirTipi = 0;
 80036ba:	4b77      	ldr	r3, [pc, #476]	; (8003898 <menu+0x26f4>)
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036c0:	f001 f946 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036c4:	2104      	movs	r1, #4
 80036c6:	4879      	ldr	r0, [pc, #484]	; (80038ac <menu+0x2708>)
 80036c8:	f005 fe30 	bl	800932c <HAL_GPIO_ReadPin>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d115      	bne.n	80036fe <menu+0x255a>
 80036d2:	4b77      	ldr	r3, [pc, #476]	; (80038b0 <menu+0x270c>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	f083 0301 	eor.w	r3, r3, #1
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00e      	beq.n	80036fe <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80036e0:	4b6d      	ldr	r3, [pc, #436]	; (8003898 <menu+0x26f4>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	4b6b      	ldr	r3, [pc, #428]	; (8003898 <menu+0x26f4>)
 80036ea:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80036ec:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <menu+0x26f4>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <menu+0x2556>
		   		platformSilindirTipi = 1;
 80036f4:	4b68      	ldr	r3, [pc, #416]	; (8003898 <menu+0x26f4>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036fa:	f001 f929 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036fe:	2108      	movs	r1, #8
 8003700:	486a      	ldr	r0, [pc, #424]	; (80038ac <menu+0x2708>)
 8003702:	f005 fe13 	bl	800932c <HAL_GPIO_ReadPin>
 8003706:	4603      	mov	r3, r0
 8003708:	2b01      	cmp	r3, #1
 800370a:	d118      	bne.n	800373e <menu+0x259a>
 800370c:	4b68      	ldr	r3, [pc, #416]	; (80038b0 <menu+0x270c>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	f083 0301 	eor.w	r3, r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d011      	beq.n	800373e <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 800371a:	4b5f      	ldr	r3, [pc, #380]	; (8003898 <menu+0x26f4>)
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	4b65      	ldr	r3, [pc, #404]	; (80038b4 <menu+0x2710>)
 8003720:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003722:	4b5d      	ldr	r3, [pc, #372]	; (8003898 <menu+0x26f4>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d106      	bne.n	8003738 <menu+0x2594>
				altLimit = 1;
 800372a:	4b63      	ldr	r3, [pc, #396]	; (80038b8 <menu+0x2714>)
 800372c:	2201      	movs	r2, #1
 800372e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003730:	4b61      	ldr	r3, [pc, #388]	; (80038b8 <menu+0x2714>)
 8003732:	781a      	ldrb	r2, [r3, #0]
 8003734:	4b5f      	ldr	r3, [pc, #380]	; (80038b4 <menu+0x2710>)
 8003736:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003738:	4b60      	ldr	r3, [pc, #384]	; (80038bc <menu+0x2718>)
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800373e:	4b60      	ldr	r3, [pc, #384]	; (80038c0 <menu+0x271c>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b16      	cmp	r3, #22
 8003744:	f040 8081 	bne.w	800384a <menu+0x26a6>
		if(dilSecim == 0) {
 8003748:	4b51      	ldr	r3, [pc, #324]	; (8003890 <menu+0x26ec>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d105      	bne.n	800375c <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003750:	4a5c      	ldr	r2, [pc, #368]	; (80038c4 <menu+0x2720>)
 8003752:	2101      	movs	r1, #1
 8003754:	2001      	movs	r0, #1
 8003756:	f004 fac3 	bl	8007ce0 <lcd_print>
 800375a:	e008      	b.n	800376e <menu+0x25ca>
		} else if(dilSecim == 1) {
 800375c:	4b4c      	ldr	r3, [pc, #304]	; (8003890 <menu+0x26ec>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d104      	bne.n	800376e <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003764:	4a58      	ldr	r2, [pc, #352]	; (80038c8 <menu+0x2724>)
 8003766:	2101      	movs	r1, #1
 8003768:	2001      	movs	r0, #1
 800376a:	f004 fab9 	bl	8007ce0 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 800376e:	4b48      	ldr	r3, [pc, #288]	; (8003890 <menu+0x26ec>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d105      	bne.n	8003782 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003776:	4a55      	ldr	r2, [pc, #340]	; (80038cc <menu+0x2728>)
 8003778:	2101      	movs	r1, #1
 800377a:	2002      	movs	r0, #2
 800377c:	f004 fab0 	bl	8007ce0 <lcd_print>
 8003780:	e008      	b.n	8003794 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003782:	4b43      	ldr	r3, [pc, #268]	; (8003890 <menu+0x26ec>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d104      	bne.n	8003794 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 800378a:	4a51      	ldr	r2, [pc, #324]	; (80038d0 <menu+0x272c>)
 800378c:	2101      	movs	r1, #1
 800378e:	2002      	movs	r0, #2
 8003790:	f004 faa6 	bl	8007ce0 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003794:	4b4f      	ldr	r3, [pc, #316]	; (80038d4 <menu+0x2730>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	220a      	movs	r2, #10
 800379a:	494f      	ldr	r1, [pc, #316]	; (80038d8 <menu+0x2734>)
 800379c:	4618      	mov	r0, r3
 800379e:	f008 fdf1 	bl	800c384 <itoa>
		lcd_print(2,16,snum);
 80037a2:	4a4d      	ldr	r2, [pc, #308]	; (80038d8 <menu+0x2734>)
 80037a4:	2110      	movs	r1, #16
 80037a6:	2002      	movs	r0, #2
 80037a8:	f004 fa9a 	bl	8007ce0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037ac:	2102      	movs	r1, #2
 80037ae:	483f      	ldr	r0, [pc, #252]	; (80038ac <menu+0x2708>)
 80037b0:	f005 fdbc 	bl	800932c <HAL_GPIO_ReadPin>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d115      	bne.n	80037e6 <menu+0x2642>
 80037ba:	4b3d      	ldr	r3, [pc, #244]	; (80038b0 <menu+0x270c>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	f083 0301 	eor.w	r3, r3, #1
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00e      	beq.n	80037e6 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <menu+0x2730>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	3301      	adds	r3, #1
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	4b40      	ldr	r3, [pc, #256]	; (80038d4 <menu+0x2730>)
 80037d2:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80037d4:	4b3f      	ldr	r3, [pc, #252]	; (80038d4 <menu+0x2730>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d902      	bls.n	80037e2 <menu+0x263e>
				yukariValfTmr = 0;
 80037dc:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <menu+0x2730>)
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037e2:	f001 f8b5 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037e6:	2104      	movs	r1, #4
 80037e8:	4830      	ldr	r0, [pc, #192]	; (80038ac <menu+0x2708>)
 80037ea:	f005 fd9f 	bl	800932c <HAL_GPIO_ReadPin>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d115      	bne.n	8003820 <menu+0x267c>
 80037f4:	4b2e      	ldr	r3, [pc, #184]	; (80038b0 <menu+0x270c>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	f083 0301 	eor.w	r3, r3, #1
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00e      	beq.n	8003820 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003802:	4b34      	ldr	r3, [pc, #208]	; (80038d4 <menu+0x2730>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	3b01      	subs	r3, #1
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4b32      	ldr	r3, [pc, #200]	; (80038d4 <menu+0x2730>)
 800380c:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800380e:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <menu+0x2730>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b06      	cmp	r3, #6
 8003814:	d902      	bls.n	800381c <menu+0x2678>
		   		yukariValfTmr = 5;
 8003816:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <menu+0x2730>)
 8003818:	2205      	movs	r2, #5
 800381a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800381c:	f001 f898 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003820:	2108      	movs	r1, #8
 8003822:	4822      	ldr	r0, [pc, #136]	; (80038ac <menu+0x2708>)
 8003824:	f005 fd82 	bl	800932c <HAL_GPIO_ReadPin>
 8003828:	4603      	mov	r3, r0
 800382a:	2b01      	cmp	r3, #1
 800382c:	d10d      	bne.n	800384a <menu+0x26a6>
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <menu+0x270c>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	f083 0301 	eor.w	r3, r3, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d006      	beq.n	800384a <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <menu+0x2730>)
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <menu+0x2710>)
 8003842:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003844:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <menu+0x2718>)
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 800384a:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <menu+0x271c>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b17      	cmp	r3, #23
 8003850:	f040 80ac 	bne.w	80039ac <menu+0x2808>
		if(dilSecim == 0) {
 8003854:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <menu+0x26ec>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 800385c:	4a1f      	ldr	r2, [pc, #124]	; (80038dc <menu+0x2738>)
 800385e:	2101      	movs	r1, #1
 8003860:	2001      	movs	r0, #1
 8003862:	f004 fa3d 	bl	8007ce0 <lcd_print>
 8003866:	e008      	b.n	800387a <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <menu+0x26ec>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d104      	bne.n	800387a <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003870:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <menu+0x273c>)
 8003872:	2101      	movs	r1, #1
 8003874:	2001      	movs	r0, #1
 8003876:	f004 fa33 	bl	8007ce0 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <menu+0x26ec>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d130      	bne.n	80038e4 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003882:	4a12      	ldr	r2, [pc, #72]	; (80038cc <menu+0x2728>)
 8003884:	2101      	movs	r1, #1
 8003886:	2002      	movs	r0, #2
 8003888:	f004 fa2a 	bl	8007ce0 <lcd_print>
 800388c:	e033      	b.n	80038f6 <menu+0x2752>
 800388e:	bf00      	nop
 8003890:	20000241 	.word	0x20000241
 8003894:	0800d870 	.word	0x0800d870
 8003898:	20000233 	.word	0x20000233
 800389c:	0800d814 	.word	0x0800d814
 80038a0:	0800d828 	.word	0x0800d828
 80038a4:	0800d838 	.word	0x0800d838
 80038a8:	0800d84c 	.word	0x0800d84c
 80038ac:	40010800 	.word	0x40010800
 80038b0:	2000024f 	.word	0x2000024f
 80038b4:	20000118 	.word	0x20000118
 80038b8:	20000226 	.word	0x20000226
 80038bc:	2000024c 	.word	0x2000024c
 80038c0:	20000220 	.word	0x20000220
 80038c4:	0800d880 	.word	0x0800d880
 80038c8:	0800d894 	.word	0x0800d894
 80038cc:	0800d534 	.word	0x0800d534
 80038d0:	0800d8a8 	.word	0x0800d8a8
 80038d4:	20000234 	.word	0x20000234
 80038d8:	20000188 	.word	0x20000188
 80038dc:	0800d8b8 	.word	0x0800d8b8
 80038e0:	0800d8cc 	.word	0x0800d8cc
			} else if(dilSecim == 1) {
 80038e4:	4b98      	ldr	r3, [pc, #608]	; (8003b48 <menu+0x29a4>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d104      	bne.n	80038f6 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 80038ec:	4a97      	ldr	r2, [pc, #604]	; (8003b4c <menu+0x29a8>)
 80038ee:	2101      	movs	r1, #1
 80038f0:	2002      	movs	r0, #2
 80038f2:	f004 f9f5 	bl	8007ce0 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 80038f6:	4b96      	ldr	r3, [pc, #600]	; (8003b50 <menu+0x29ac>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	220a      	movs	r2, #10
 80038fc:	4995      	ldr	r1, [pc, #596]	; (8003b54 <menu+0x29b0>)
 80038fe:	4618      	mov	r0, r3
 8003900:	f008 fd40 	bl	800c384 <itoa>
		lcd_print(2,16,snum);
 8003904:	4a93      	ldr	r2, [pc, #588]	; (8003b54 <menu+0x29b0>)
 8003906:	2110      	movs	r1, #16
 8003908:	2002      	movs	r0, #2
 800390a:	f004 f9e9 	bl	8007ce0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800390e:	2102      	movs	r1, #2
 8003910:	4891      	ldr	r0, [pc, #580]	; (8003b58 <menu+0x29b4>)
 8003912:	f005 fd0b 	bl	800932c <HAL_GPIO_ReadPin>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d115      	bne.n	8003948 <menu+0x27a4>
 800391c:	4b8f      	ldr	r3, [pc, #572]	; (8003b5c <menu+0x29b8>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	f083 0301 	eor.w	r3, r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00e      	beq.n	8003948 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 800392a:	4b89      	ldr	r3, [pc, #548]	; (8003b50 <menu+0x29ac>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	3301      	adds	r3, #1
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b87      	ldr	r3, [pc, #540]	; (8003b50 <menu+0x29ac>)
 8003934:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003936:	4b86      	ldr	r3, [pc, #536]	; (8003b50 <menu+0x29ac>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d902      	bls.n	8003944 <menu+0x27a0>
				asagiValfTmr = 0;
 800393e:	4b84      	ldr	r3, [pc, #528]	; (8003b50 <menu+0x29ac>)
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003944:	f001 f804 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003948:	2104      	movs	r1, #4
 800394a:	4883      	ldr	r0, [pc, #524]	; (8003b58 <menu+0x29b4>)
 800394c:	f005 fcee 	bl	800932c <HAL_GPIO_ReadPin>
 8003950:	4603      	mov	r3, r0
 8003952:	2b01      	cmp	r3, #1
 8003954:	d115      	bne.n	8003982 <menu+0x27de>
 8003956:	4b81      	ldr	r3, [pc, #516]	; (8003b5c <menu+0x29b8>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	f083 0301 	eor.w	r3, r3, #1
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00e      	beq.n	8003982 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003964:	4b7a      	ldr	r3, [pc, #488]	; (8003b50 <menu+0x29ac>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	3b01      	subs	r3, #1
 800396a:	b2da      	uxtb	r2, r3
 800396c:	4b78      	ldr	r3, [pc, #480]	; (8003b50 <menu+0x29ac>)
 800396e:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003970:	4b77      	ldr	r3, [pc, #476]	; (8003b50 <menu+0x29ac>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b06      	cmp	r3, #6
 8003976:	d902      	bls.n	800397e <menu+0x27da>
		   		asagiValfTmr = 5;
 8003978:	4b75      	ldr	r3, [pc, #468]	; (8003b50 <menu+0x29ac>)
 800397a:	2205      	movs	r2, #5
 800397c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800397e:	f000 ffe7 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003982:	2108      	movs	r1, #8
 8003984:	4874      	ldr	r0, [pc, #464]	; (8003b58 <menu+0x29b4>)
 8003986:	f005 fcd1 	bl	800932c <HAL_GPIO_ReadPin>
 800398a:	4603      	mov	r3, r0
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10d      	bne.n	80039ac <menu+0x2808>
 8003990:	4b72      	ldr	r3, [pc, #456]	; (8003b5c <menu+0x29b8>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	f083 0301 	eor.w	r3, r3, #1
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d006      	beq.n	80039ac <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 800399e:	4b6c      	ldr	r3, [pc, #432]	; (8003b50 <menu+0x29ac>)
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	4b6f      	ldr	r3, [pc, #444]	; (8003b60 <menu+0x29bc>)
 80039a4:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80039a6:	4b6f      	ldr	r3, [pc, #444]	; (8003b64 <menu+0x29c0>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80039ac:	4b6e      	ldr	r3, [pc, #440]	; (8003b68 <menu+0x29c4>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b18      	cmp	r3, #24
 80039b2:	f040 809d 	bne.w	8003af0 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 80039b6:	4b6d      	ldr	r3, [pc, #436]	; (8003b6c <menu+0x29c8>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d113      	bne.n	80039e6 <menu+0x2842>
			if(dilSecim == 0) {
 80039be:	4b62      	ldr	r3, [pc, #392]	; (8003b48 <menu+0x29a4>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d105      	bne.n	80039d2 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 80039c6:	4a6a      	ldr	r2, [pc, #424]	; (8003b70 <menu+0x29cc>)
 80039c8:	2101      	movs	r1, #1
 80039ca:	2001      	movs	r0, #1
 80039cc:	f004 f988 	bl	8007ce0 <lcd_print>
 80039d0:	e020      	b.n	8003a14 <menu+0x2870>
			} else if(dilSecim == 1) {
 80039d2:	4b5d      	ldr	r3, [pc, #372]	; (8003b48 <menu+0x29a4>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d11c      	bne.n	8003a14 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 80039da:	4a66      	ldr	r2, [pc, #408]	; (8003b74 <menu+0x29d0>)
 80039dc:	2101      	movs	r1, #1
 80039de:	2001      	movs	r0, #1
 80039e0:	f004 f97e 	bl	8007ce0 <lcd_print>
 80039e4:	e016      	b.n	8003a14 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80039e6:	4b61      	ldr	r3, [pc, #388]	; (8003b6c <menu+0x29c8>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d112      	bne.n	8003a14 <menu+0x2870>
			if(dilSecim == 0) {
 80039ee:	4b56      	ldr	r3, [pc, #344]	; (8003b48 <menu+0x29a4>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d105      	bne.n	8003a02 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 80039f6:	4a60      	ldr	r2, [pc, #384]	; (8003b78 <menu+0x29d4>)
 80039f8:	2101      	movs	r1, #1
 80039fa:	2001      	movs	r0, #1
 80039fc:	f004 f970 	bl	8007ce0 <lcd_print>
 8003a00:	e008      	b.n	8003a14 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003a02:	4b51      	ldr	r3, [pc, #324]	; (8003b48 <menu+0x29a4>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d104      	bne.n	8003a14 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003a0a:	4a5c      	ldr	r2, [pc, #368]	; (8003b7c <menu+0x29d8>)
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	2001      	movs	r0, #1
 8003a10:	f004 f966 	bl	8007ce0 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003a14:	4b4c      	ldr	r3, [pc, #304]	; (8003b48 <menu+0x29a4>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d105      	bne.n	8003a28 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a1c:	4a58      	ldr	r2, [pc, #352]	; (8003b80 <menu+0x29dc>)
 8003a1e:	2101      	movs	r1, #1
 8003a20:	2002      	movs	r0, #2
 8003a22:	f004 f95d 	bl	8007ce0 <lcd_print>
 8003a26:	e008      	b.n	8003a3a <menu+0x2896>
			} else if(dilSecim == 1) {
 8003a28:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <menu+0x29a4>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d104      	bne.n	8003a3a <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003a30:	4a46      	ldr	r2, [pc, #280]	; (8003b4c <menu+0x29a8>)
 8003a32:	2101      	movs	r1, #1
 8003a34:	2002      	movs	r0, #2
 8003a36:	f004 f953 	bl	8007ce0 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003a3a:	4b52      	ldr	r3, [pc, #328]	; (8003b84 <menu+0x29e0>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	220a      	movs	r2, #10
 8003a40:	4944      	ldr	r1, [pc, #272]	; (8003b54 <menu+0x29b0>)
 8003a42:	4618      	mov	r0, r3
 8003a44:	f008 fc9e 	bl	800c384 <itoa>
		lcd_print(2, 16, snum);
 8003a48:	4a42      	ldr	r2, [pc, #264]	; (8003b54 <menu+0x29b0>)
 8003a4a:	2110      	movs	r1, #16
 8003a4c:	2002      	movs	r0, #2
 8003a4e:	f004 f947 	bl	8007ce0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a52:	2102      	movs	r1, #2
 8003a54:	4840      	ldr	r0, [pc, #256]	; (8003b58 <menu+0x29b4>)
 8003a56:	f005 fc69 	bl	800932c <HAL_GPIO_ReadPin>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d115      	bne.n	8003a8c <menu+0x28e8>
 8003a60:	4b3e      	ldr	r3, [pc, #248]	; (8003b5c <menu+0x29b8>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	f083 0301 	eor.w	r3, r3, #1
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00e      	beq.n	8003a8c <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003a6e:	4b45      	ldr	r3, [pc, #276]	; (8003b84 <menu+0x29e0>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	4b43      	ldr	r3, [pc, #268]	; (8003b84 <menu+0x29e0>)
 8003a78:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003a7a:	4b42      	ldr	r3, [pc, #264]	; (8003b84 <menu+0x29e0>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d902      	bls.n	8003a88 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003a82:	4b40      	ldr	r3, [pc, #256]	; (8003b84 <menu+0x29e0>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a88:	f000 ff62 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a8c:	2104      	movs	r1, #4
 8003a8e:	4832      	ldr	r0, [pc, #200]	; (8003b58 <menu+0x29b4>)
 8003a90:	f005 fc4c 	bl	800932c <HAL_GPIO_ReadPin>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d115      	bne.n	8003ac6 <menu+0x2922>
 8003a9a:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <menu+0x29b8>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	f083 0301 	eor.w	r3, r3, #1
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00e      	beq.n	8003ac6 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003aa8:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <menu+0x29e0>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	4b34      	ldr	r3, [pc, #208]	; (8003b84 <menu+0x29e0>)
 8003ab2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003ab4:	4b33      	ldr	r3, [pc, #204]	; (8003b84 <menu+0x29e0>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b06      	cmp	r3, #6
 8003aba:	d902      	bls.n	8003ac2 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003abc:	4b31      	ldr	r3, [pc, #196]	; (8003b84 <menu+0x29e0>)
 8003abe:	2205      	movs	r2, #5
 8003ac0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ac2:	f000 ff45 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ac6:	2108      	movs	r1, #8
 8003ac8:	4823      	ldr	r0, [pc, #140]	; (8003b58 <menu+0x29b4>)
 8003aca:	f005 fc2f 	bl	800932c <HAL_GPIO_ReadPin>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d10d      	bne.n	8003af0 <menu+0x294c>
 8003ad4:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <menu+0x29b8>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	f083 0301 	eor.w	r3, r3, #1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d006      	beq.n	8003af0 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003ae2:	4b28      	ldr	r3, [pc, #160]	; (8003b84 <menu+0x29e0>)
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	; (8003b60 <menu+0x29bc>)
 8003ae8:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003aea:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <menu+0x29c0>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <menu+0x29c4>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b19      	cmp	r3, #25
 8003af6:	f040 80c4 	bne.w	8003c82 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003afa:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <menu+0x29c8>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d113      	bne.n	8003b2a <menu+0x2986>
			if(dilSecim == 0) {
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <menu+0x29a4>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d105      	bne.n	8003b16 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003b0a:	4a1f      	ldr	r2, [pc, #124]	; (8003b88 <menu+0x29e4>)
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f004 f8e6 	bl	8007ce0 <lcd_print>
 8003b14:	e047      	b.n	8003ba6 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <menu+0x29a4>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d143      	bne.n	8003ba6 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003b1e:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <menu+0x29e8>)
 8003b20:	2101      	movs	r1, #1
 8003b22:	2001      	movs	r0, #1
 8003b24:	f004 f8dc 	bl	8007ce0 <lcd_print>
 8003b28:	e03d      	b.n	8003ba6 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <menu+0x29c8>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d139      	bne.n	8003ba6 <menu+0x2a02>
			if(dilSecim == 0) {
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <menu+0x29a4>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d12c      	bne.n	8003b94 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003b3a:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <menu+0x29ec>)
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	2001      	movs	r0, #1
 8003b40:	f004 f8ce 	bl	8007ce0 <lcd_print>
 8003b44:	e02f      	b.n	8003ba6 <menu+0x2a02>
 8003b46:	bf00      	nop
 8003b48:	20000241 	.word	0x20000241
 8003b4c:	0800d8a8 	.word	0x0800d8a8
 8003b50:	20000235 	.word	0x20000235
 8003b54:	20000188 	.word	0x20000188
 8003b58:	40010800 	.word	0x40010800
 8003b5c:	2000024f 	.word	0x2000024f
 8003b60:	20000118 	.word	0x20000118
 8003b64:	2000024c 	.word	0x2000024c
 8003b68:	20000220 	.word	0x20000220
 8003b6c:	2000022f 	.word	0x2000022f
 8003b70:	0800d8e0 	.word	0x0800d8e0
 8003b74:	0800d8f4 	.word	0x0800d8f4
 8003b78:	0800d908 	.word	0x0800d908
 8003b7c:	0800d91c 	.word	0x0800d91c
 8003b80:	0800d534 	.word	0x0800d534
 8003b84:	20000236 	.word	0x20000236
 8003b88:	0800d930 	.word	0x0800d930
 8003b8c:	0800d944 	.word	0x0800d944
 8003b90:	0800d958 	.word	0x0800d958
			} else if(dilSecim == 1) {
 8003b94:	4b73      	ldr	r3, [pc, #460]	; (8003d64 <menu+0x2bc0>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d104      	bne.n	8003ba6 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003b9c:	4a72      	ldr	r2, [pc, #456]	; (8003d68 <menu+0x2bc4>)
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	f004 f89d 	bl	8007ce0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003ba6:	4b6f      	ldr	r3, [pc, #444]	; (8003d64 <menu+0x2bc0>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d105      	bne.n	8003bba <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003bae:	4a6f      	ldr	r2, [pc, #444]	; (8003d6c <menu+0x2bc8>)
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	2002      	movs	r0, #2
 8003bb4:	f004 f894 	bl	8007ce0 <lcd_print>
 8003bb8:	e008      	b.n	8003bcc <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003bba:	4b6a      	ldr	r3, [pc, #424]	; (8003d64 <menu+0x2bc0>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d104      	bne.n	8003bcc <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003bc2:	4a6b      	ldr	r2, [pc, #428]	; (8003d70 <menu+0x2bcc>)
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	2002      	movs	r0, #2
 8003bc8:	f004 f88a 	bl	8007ce0 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003bcc:	4b69      	ldr	r3, [pc, #420]	; (8003d74 <menu+0x2bd0>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	220a      	movs	r2, #10
 8003bd2:	4969      	ldr	r1, [pc, #420]	; (8003d78 <menu+0x2bd4>)
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f008 fbd5 	bl	800c384 <itoa>
		lcd_print(2,16,snum);
 8003bda:	4a67      	ldr	r2, [pc, #412]	; (8003d78 <menu+0x2bd4>)
 8003bdc:	2110      	movs	r1, #16
 8003bde:	2002      	movs	r0, #2
 8003be0:	f004 f87e 	bl	8007ce0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003be4:	2102      	movs	r1, #2
 8003be6:	4865      	ldr	r0, [pc, #404]	; (8003d7c <menu+0x2bd8>)
 8003be8:	f005 fba0 	bl	800932c <HAL_GPIO_ReadPin>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d115      	bne.n	8003c1e <menu+0x2a7a>
 8003bf2:	4b63      	ldr	r3, [pc, #396]	; (8003d80 <menu+0x2bdc>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	f083 0301 	eor.w	r3, r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00e      	beq.n	8003c1e <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003c00:	4b5c      	ldr	r3, [pc, #368]	; (8003d74 <menu+0x2bd0>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	3301      	adds	r3, #1
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	4b5a      	ldr	r3, [pc, #360]	; (8003d74 <menu+0x2bd0>)
 8003c0a:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003c0c:	4b59      	ldr	r3, [pc, #356]	; (8003d74 <menu+0x2bd0>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	d902      	bls.n	8003c1a <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003c14:	4b57      	ldr	r3, [pc, #348]	; (8003d74 <menu+0x2bd0>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c1a:	f000 fe99 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c1e:	2104      	movs	r1, #4
 8003c20:	4856      	ldr	r0, [pc, #344]	; (8003d7c <menu+0x2bd8>)
 8003c22:	f005 fb83 	bl	800932c <HAL_GPIO_ReadPin>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d115      	bne.n	8003c58 <menu+0x2ab4>
 8003c2c:	4b54      	ldr	r3, [pc, #336]	; (8003d80 <menu+0x2bdc>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	f083 0301 	eor.w	r3, r3, #1
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00e      	beq.n	8003c58 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003c3a:	4b4e      	ldr	r3, [pc, #312]	; (8003d74 <menu+0x2bd0>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4b4c      	ldr	r3, [pc, #304]	; (8003d74 <menu+0x2bd0>)
 8003c44:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003c46:	4b4b      	ldr	r3, [pc, #300]	; (8003d74 <menu+0x2bd0>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b06      	cmp	r3, #6
 8003c4c:	d902      	bls.n	8003c54 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003c4e:	4b49      	ldr	r3, [pc, #292]	; (8003d74 <menu+0x2bd0>)
 8003c50:	2205      	movs	r2, #5
 8003c52:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c54:	f000 fe7c 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c58:	2108      	movs	r1, #8
 8003c5a:	4848      	ldr	r0, [pc, #288]	; (8003d7c <menu+0x2bd8>)
 8003c5c:	f005 fb66 	bl	800932c <HAL_GPIO_ReadPin>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d10d      	bne.n	8003c82 <menu+0x2ade>
 8003c66:	4b46      	ldr	r3, [pc, #280]	; (8003d80 <menu+0x2bdc>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	f083 0301 	eor.w	r3, r3, #1
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d006      	beq.n	8003c82 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003c74:	4b3f      	ldr	r3, [pc, #252]	; (8003d74 <menu+0x2bd0>)
 8003c76:	781a      	ldrb	r2, [r3, #0]
 8003c78:	4b42      	ldr	r3, [pc, #264]	; (8003d84 <menu+0x2be0>)
 8003c7a:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003c7c:	4b42      	ldr	r3, [pc, #264]	; (8003d88 <menu+0x2be4>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003c82:	4b42      	ldr	r3, [pc, #264]	; (8003d8c <menu+0x2be8>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b1a      	cmp	r3, #26
 8003c88:	f040 80ec 	bne.w	8003e64 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003c8c:	4b35      	ldr	r3, [pc, #212]	; (8003d64 <menu+0x2bc0>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d105      	bne.n	8003ca0 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003c94:	4a3e      	ldr	r2, [pc, #248]	; (8003d90 <menu+0x2bec>)
 8003c96:	2101      	movs	r1, #1
 8003c98:	2001      	movs	r0, #1
 8003c9a:	f004 f821 	bl	8007ce0 <lcd_print>
 8003c9e:	e008      	b.n	8003cb2 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003ca0:	4b30      	ldr	r3, [pc, #192]	; (8003d64 <menu+0x2bc0>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d104      	bne.n	8003cb2 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003ca8:	4a3a      	ldr	r2, [pc, #232]	; (8003d94 <menu+0x2bf0>)
 8003caa:	2101      	movs	r1, #1
 8003cac:	2001      	movs	r0, #1
 8003cae:	f004 f817 	bl	8007ce0 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003cb2:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <menu+0x2bf4>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b63      	cmp	r3, #99	; 0x63
 8003cb8:	d91e      	bls.n	8003cf8 <menu+0x2b54>
			if(dilSecim == 0) {
 8003cba:	4b2a      	ldr	r3, [pc, #168]	; (8003d64 <menu+0x2bc0>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d104      	bne.n	8003ccc <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cc2:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <menu+0x2bc8>)
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	2002      	movs	r0, #2
 8003cc8:	f004 f80a 	bl	8007ce0 <lcd_print>
			}
			if(dilSecim == 1) {
 8003ccc:	4b25      	ldr	r3, [pc, #148]	; (8003d64 <menu+0x2bc0>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d104      	bne.n	8003cde <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003cd4:	4a26      	ldr	r2, [pc, #152]	; (8003d70 <menu+0x2bcc>)
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	2002      	movs	r0, #2
 8003cda:	f004 f801 	bl	8007ce0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003cde:	4b2e      	ldr	r3, [pc, #184]	; (8003d98 <menu+0x2bf4>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	220a      	movs	r2, #10
 8003ce4:	4924      	ldr	r1, [pc, #144]	; (8003d78 <menu+0x2bd4>)
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f008 fb4c 	bl	800c384 <itoa>
			lcd_print(2,14,snum);
 8003cec:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <menu+0x2bd4>)
 8003cee:	210e      	movs	r1, #14
 8003cf0:	2002      	movs	r0, #2
 8003cf2:	f003 fff5 	bl	8007ce0 <lcd_print>
 8003cf6:	e066      	b.n	8003dc6 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003cf8:	4b27      	ldr	r3, [pc, #156]	; (8003d98 <menu+0x2bf4>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b09      	cmp	r3, #9
 8003cfe:	d923      	bls.n	8003d48 <menu+0x2ba4>
 8003d00:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <menu+0x2bf4>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b63      	cmp	r3, #99	; 0x63
 8003d06:	d81f      	bhi.n	8003d48 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003d08:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <menu+0x2bc0>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d105      	bne.n	8003d1c <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d10:	4a16      	ldr	r2, [pc, #88]	; (8003d6c <menu+0x2bc8>)
 8003d12:	2101      	movs	r1, #1
 8003d14:	2002      	movs	r0, #2
 8003d16:	f003 ffe3 	bl	8007ce0 <lcd_print>
 8003d1a:	e008      	b.n	8003d2e <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <menu+0x2bc0>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d104      	bne.n	8003d2e <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003d24:	4a12      	ldr	r2, [pc, #72]	; (8003d70 <menu+0x2bcc>)
 8003d26:	2101      	movs	r1, #1
 8003d28:	2002      	movs	r0, #2
 8003d2a:	f003 ffd9 	bl	8007ce0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d2e:	4b1a      	ldr	r3, [pc, #104]	; (8003d98 <menu+0x2bf4>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	220a      	movs	r2, #10
 8003d34:	4910      	ldr	r1, [pc, #64]	; (8003d78 <menu+0x2bd4>)
 8003d36:	4618      	mov	r0, r3
 8003d38:	f008 fb24 	bl	800c384 <itoa>
			lcd_print(2, 15, snum);
 8003d3c:	4a0e      	ldr	r2, [pc, #56]	; (8003d78 <menu+0x2bd4>)
 8003d3e:	210f      	movs	r1, #15
 8003d40:	2002      	movs	r0, #2
 8003d42:	f003 ffcd 	bl	8007ce0 <lcd_print>
 8003d46:	e03e      	b.n	8003dc6 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003d48:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <menu+0x2bf4>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b09      	cmp	r3, #9
 8003d4e:	d83a      	bhi.n	8003dc6 <menu+0x2c22>
			if(dilSecim == 0) {
 8003d50:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <menu+0x2bc0>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d121      	bne.n	8003d9c <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d58:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <menu+0x2bc8>)
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	2002      	movs	r0, #2
 8003d5e:	f003 ffbf 	bl	8007ce0 <lcd_print>
 8003d62:	e024      	b.n	8003dae <menu+0x2c0a>
 8003d64:	20000241 	.word	0x20000241
 8003d68:	0800d96c 	.word	0x0800d96c
 8003d6c:	0800d534 	.word	0x0800d534
 8003d70:	0800d8a8 	.word	0x0800d8a8
 8003d74:	20000237 	.word	0x20000237
 8003d78:	20000188 	.word	0x20000188
 8003d7c:	40010800 	.word	0x40010800
 8003d80:	2000024f 	.word	0x2000024f
 8003d84:	20000118 	.word	0x20000118
 8003d88:	2000024c 	.word	0x2000024c
 8003d8c:	20000220 	.word	0x20000220
 8003d90:	0800d980 	.word	0x0800d980
 8003d94:	0800d994 	.word	0x0800d994
 8003d98:	20000238 	.word	0x20000238
			} else if(dilSecim == 1) {
 8003d9c:	4b8f      	ldr	r3, [pc, #572]	; (8003fdc <menu+0x2e38>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d104      	bne.n	8003dae <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003da4:	4a8e      	ldr	r2, [pc, #568]	; (8003fe0 <menu+0x2e3c>)
 8003da6:	2101      	movs	r1, #1
 8003da8:	2002      	movs	r0, #2
 8003daa:	f003 ff99 	bl	8007ce0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003dae:	4b8d      	ldr	r3, [pc, #564]	; (8003fe4 <menu+0x2e40>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	220a      	movs	r2, #10
 8003db4:	498c      	ldr	r1, [pc, #560]	; (8003fe8 <menu+0x2e44>)
 8003db6:	4618      	mov	r0, r3
 8003db8:	f008 fae4 	bl	800c384 <itoa>
			lcd_print(2, 16, snum);
 8003dbc:	4a8a      	ldr	r2, [pc, #552]	; (8003fe8 <menu+0x2e44>)
 8003dbe:	2110      	movs	r1, #16
 8003dc0:	2002      	movs	r0, #2
 8003dc2:	f003 ff8d 	bl	8007ce0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	4888      	ldr	r0, [pc, #544]	; (8003fec <menu+0x2e48>)
 8003dca:	f005 faaf 	bl	800932c <HAL_GPIO_ReadPin>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d115      	bne.n	8003e00 <menu+0x2c5c>
 8003dd4:	4b86      	ldr	r3, [pc, #536]	; (8003ff0 <menu+0x2e4c>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	f083 0301 	eor.w	r3, r3, #1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00e      	beq.n	8003e00 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003de2:	4b80      	ldr	r3, [pc, #512]	; (8003fe4 <menu+0x2e40>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	3301      	adds	r3, #1
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	4b7e      	ldr	r3, [pc, #504]	; (8003fe4 <menu+0x2e40>)
 8003dec:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003dee:	4b7d      	ldr	r3, [pc, #500]	; (8003fe4 <menu+0x2e40>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2bb4      	cmp	r3, #180	; 0xb4
 8003df4:	d902      	bls.n	8003dfc <menu+0x2c58>
				makineCalismaTmr = 0;
 8003df6:	4b7b      	ldr	r3, [pc, #492]	; (8003fe4 <menu+0x2e40>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003dfc:	f000 fda8 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e00:	2104      	movs	r1, #4
 8003e02:	487a      	ldr	r0, [pc, #488]	; (8003fec <menu+0x2e48>)
 8003e04:	f005 fa92 	bl	800932c <HAL_GPIO_ReadPin>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d115      	bne.n	8003e3a <menu+0x2c96>
 8003e0e:	4b78      	ldr	r3, [pc, #480]	; (8003ff0 <menu+0x2e4c>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	f083 0301 	eor.w	r3, r3, #1
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00e      	beq.n	8003e3a <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003e1c:	4b71      	ldr	r3, [pc, #452]	; (8003fe4 <menu+0x2e40>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	4b6f      	ldr	r3, [pc, #444]	; (8003fe4 <menu+0x2e40>)
 8003e26:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003e28:	4b6e      	ldr	r3, [pc, #440]	; (8003fe4 <menu+0x2e40>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2bb5      	cmp	r3, #181	; 0xb5
 8003e2e:	d902      	bls.n	8003e36 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003e30:	4b6c      	ldr	r3, [pc, #432]	; (8003fe4 <menu+0x2e40>)
 8003e32:	22b4      	movs	r2, #180	; 0xb4
 8003e34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e36:	f000 fd8b 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e3a:	2108      	movs	r1, #8
 8003e3c:	486b      	ldr	r0, [pc, #428]	; (8003fec <menu+0x2e48>)
 8003e3e:	f005 fa75 	bl	800932c <HAL_GPIO_ReadPin>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d10d      	bne.n	8003e64 <menu+0x2cc0>
 8003e48:	4b69      	ldr	r3, [pc, #420]	; (8003ff0 <menu+0x2e4c>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	f083 0301 	eor.w	r3, r3, #1
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d006      	beq.n	8003e64 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003e56:	4b63      	ldr	r3, [pc, #396]	; (8003fe4 <menu+0x2e40>)
 8003e58:	781a      	ldrb	r2, [r3, #0]
 8003e5a:	4b66      	ldr	r3, [pc, #408]	; (8003ff4 <menu+0x2e50>)
 8003e5c:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003e5e:	4b66      	ldr	r3, [pc, #408]	; (8003ff8 <menu+0x2e54>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003e64:	4b65      	ldr	r3, [pc, #404]	; (8003ffc <menu+0x2e58>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b1b      	cmp	r3, #27
 8003e6a:	f040 8083 	bne.w	8003f74 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003e6e:	4a64      	ldr	r2, [pc, #400]	; (8004000 <menu+0x2e5c>)
 8003e70:	2101      	movs	r1, #1
 8003e72:	2001      	movs	r0, #1
 8003e74:	f003 ff34 	bl	8007ce0 <lcd_print>

		if(buzzer == 0) {
 8003e78:	4b62      	ldr	r3, [pc, #392]	; (8004004 <menu+0x2e60>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d113      	bne.n	8003ea8 <menu+0x2d04>
			if(dilSecim == 0) {
 8003e80:	4b56      	ldr	r3, [pc, #344]	; (8003fdc <menu+0x2e38>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d105      	bne.n	8003e94 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003e88:	4a5f      	ldr	r2, [pc, #380]	; (8004008 <menu+0x2e64>)
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	2002      	movs	r0, #2
 8003e8e:	f003 ff27 	bl	8007ce0 <lcd_print>
 8003e92:	e020      	b.n	8003ed6 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003e94:	4b51      	ldr	r3, [pc, #324]	; (8003fdc <menu+0x2e38>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d11c      	bne.n	8003ed6 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003e9c:	4a5b      	ldr	r2, [pc, #364]	; (800400c <menu+0x2e68>)
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	2002      	movs	r0, #2
 8003ea2:	f003 ff1d 	bl	8007ce0 <lcd_print>
 8003ea6:	e016      	b.n	8003ed6 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003ea8:	4b56      	ldr	r3, [pc, #344]	; (8004004 <menu+0x2e60>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d112      	bne.n	8003ed6 <menu+0x2d32>
			if(dilSecim == 0) {
 8003eb0:	4b4a      	ldr	r3, [pc, #296]	; (8003fdc <menu+0x2e38>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d105      	bne.n	8003ec4 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003eb8:	4a55      	ldr	r2, [pc, #340]	; (8004010 <menu+0x2e6c>)
 8003eba:	2101      	movs	r1, #1
 8003ebc:	2002      	movs	r0, #2
 8003ebe:	f003 ff0f 	bl	8007ce0 <lcd_print>
 8003ec2:	e008      	b.n	8003ed6 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003ec4:	4b45      	ldr	r3, [pc, #276]	; (8003fdc <menu+0x2e38>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d104      	bne.n	8003ed6 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003ecc:	4a51      	ldr	r2, [pc, #324]	; (8004014 <menu+0x2e70>)
 8003ece:	2101      	movs	r1, #1
 8003ed0:	2002      	movs	r0, #2
 8003ed2:	f003 ff05 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	4844      	ldr	r0, [pc, #272]	; (8003fec <menu+0x2e48>)
 8003eda:	f005 fa27 	bl	800932c <HAL_GPIO_ReadPin>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d115      	bne.n	8003f10 <menu+0x2d6c>
 8003ee4:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <menu+0x2e4c>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	f083 0301 	eor.w	r3, r3, #1
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00e      	beq.n	8003f10 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003ef2:	4b44      	ldr	r3, [pc, #272]	; (8004004 <menu+0x2e60>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	4b42      	ldr	r3, [pc, #264]	; (8004004 <menu+0x2e60>)
 8003efc:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003efe:	4b41      	ldr	r3, [pc, #260]	; (8004004 <menu+0x2e60>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d902      	bls.n	8003f0c <menu+0x2d68>
				buzzer = 0;
 8003f06:	4b3f      	ldr	r3, [pc, #252]	; (8004004 <menu+0x2e60>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f0c:	f000 fd20 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f10:	2104      	movs	r1, #4
 8003f12:	4836      	ldr	r0, [pc, #216]	; (8003fec <menu+0x2e48>)
 8003f14:	f005 fa0a 	bl	800932c <HAL_GPIO_ReadPin>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d115      	bne.n	8003f4a <menu+0x2da6>
 8003f1e:	4b34      	ldr	r3, [pc, #208]	; (8003ff0 <menu+0x2e4c>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	f083 0301 	eor.w	r3, r3, #1
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00e      	beq.n	8003f4a <menu+0x2da6>
			buzzer = buzzer - 1;
 8003f2c:	4b35      	ldr	r3, [pc, #212]	; (8004004 <menu+0x2e60>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	4b33      	ldr	r3, [pc, #204]	; (8004004 <menu+0x2e60>)
 8003f36:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003f38:	4b32      	ldr	r3, [pc, #200]	; (8004004 <menu+0x2e60>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <menu+0x2da2>
		   		buzzer = 1;
 8003f40:	4b30      	ldr	r3, [pc, #192]	; (8004004 <menu+0x2e60>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f46:	f000 fd03 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f4a:	2108      	movs	r1, #8
 8003f4c:	4827      	ldr	r0, [pc, #156]	; (8003fec <menu+0x2e48>)
 8003f4e:	f005 f9ed 	bl	800932c <HAL_GPIO_ReadPin>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d10d      	bne.n	8003f74 <menu+0x2dd0>
 8003f58:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <menu+0x2e4c>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	f083 0301 	eor.w	r3, r3, #1
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d006      	beq.n	8003f74 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003f66:	4b27      	ldr	r3, [pc, #156]	; (8004004 <menu+0x2e60>)
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <menu+0x2e50>)
 8003f6c:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003f6e:	4b22      	ldr	r3, [pc, #136]	; (8003ff8 <menu+0x2e54>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003f74:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <menu+0x2e58>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b1c      	cmp	r3, #28
 8003f7a:	f040 80ab 	bne.w	80040d4 <menu+0x2f30>
		calismaSayModu = 0;
 8003f7e:	4b26      	ldr	r3, [pc, #152]	; (8004018 <menu+0x2e74>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003f84:	4a25      	ldr	r2, [pc, #148]	; (800401c <menu+0x2e78>)
 8003f86:	2101      	movs	r1, #1
 8003f88:	2001      	movs	r0, #1
 8003f8a:	f003 fea9 	bl	8007ce0 <lcd_print>

		if(demoMode == 0) {
 8003f8e:	4b24      	ldr	r3, [pc, #144]	; (8004020 <menu+0x2e7c>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d113      	bne.n	8003fbe <menu+0x2e1a>
			if(dilSecim == 0) {
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <menu+0x2e38>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d105      	bne.n	8003faa <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003f9e:	4a1a      	ldr	r2, [pc, #104]	; (8004008 <menu+0x2e64>)
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	2002      	movs	r0, #2
 8003fa4:	f003 fe9c 	bl	8007ce0 <lcd_print>
 8003fa8:	e045      	b.n	8004036 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003faa:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <menu+0x2e38>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d141      	bne.n	8004036 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003fb2:	4a16      	ldr	r2, [pc, #88]	; (800400c <menu+0x2e68>)
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	2002      	movs	r0, #2
 8003fb8:	f003 fe92 	bl	8007ce0 <lcd_print>
 8003fbc:	e03b      	b.n	8004036 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8003fbe:	4b18      	ldr	r3, [pc, #96]	; (8004020 <menu+0x2e7c>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d137      	bne.n	8004036 <menu+0x2e92>
			if(dilSecim == 0){
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <menu+0x2e38>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d12a      	bne.n	8004024 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8003fce:	4a10      	ldr	r2, [pc, #64]	; (8004010 <menu+0x2e6c>)
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	2002      	movs	r0, #2
 8003fd4:	f003 fe84 	bl	8007ce0 <lcd_print>
 8003fd8:	e02d      	b.n	8004036 <menu+0x2e92>
 8003fda:	bf00      	nop
 8003fdc:	20000241 	.word	0x20000241
 8003fe0:	0800d8a8 	.word	0x0800d8a8
 8003fe4:	20000238 	.word	0x20000238
 8003fe8:	20000188 	.word	0x20000188
 8003fec:	40010800 	.word	0x40010800
 8003ff0:	2000024f 	.word	0x2000024f
 8003ff4:	20000118 	.word	0x20000118
 8003ff8:	2000024c 	.word	0x2000024c
 8003ffc:	20000220 	.word	0x20000220
 8004000:	0800d9a8 	.word	0x0800d9a8
 8004004:	2000023c 	.word	0x2000023c
 8004008:	0800d2d0 	.word	0x0800d2d0
 800400c:	0800d2e4 	.word	0x0800d2e4
 8004010:	0800d330 	.word	0x0800d330
 8004014:	0800d344 	.word	0x0800d344
 8004018:	20000240 	.word	0x20000240
 800401c:	0800d9bc 	.word	0x0800d9bc
 8004020:	2000023e 	.word	0x2000023e
			} else if(dilSecim == 1) {
 8004024:	4b71      	ldr	r3, [pc, #452]	; (80041ec <menu+0x3048>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d104      	bne.n	8004036 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 800402c:	4a70      	ldr	r2, [pc, #448]	; (80041f0 <menu+0x304c>)
 800402e:	2101      	movs	r1, #1
 8004030:	2002      	movs	r0, #2
 8004032:	f003 fe55 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004036:	2102      	movs	r1, #2
 8004038:	486e      	ldr	r0, [pc, #440]	; (80041f4 <menu+0x3050>)
 800403a:	f005 f977 	bl	800932c <HAL_GPIO_ReadPin>
 800403e:	4603      	mov	r3, r0
 8004040:	2b01      	cmp	r3, #1
 8004042:	d115      	bne.n	8004070 <menu+0x2ecc>
 8004044:	4b6c      	ldr	r3, [pc, #432]	; (80041f8 <menu+0x3054>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	f083 0301 	eor.w	r3, r3, #1
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00e      	beq.n	8004070 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004052:	4b6a      	ldr	r3, [pc, #424]	; (80041fc <menu+0x3058>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	3301      	adds	r3, #1
 8004058:	b2da      	uxtb	r2, r3
 800405a:	4b68      	ldr	r3, [pc, #416]	; (80041fc <menu+0x3058>)
 800405c:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800405e:	4b67      	ldr	r3, [pc, #412]	; (80041fc <menu+0x3058>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d902      	bls.n	800406c <menu+0x2ec8>
				demoMode = 0;
 8004066:	4b65      	ldr	r3, [pc, #404]	; (80041fc <menu+0x3058>)
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800406c:	f000 fc70 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004070:	2104      	movs	r1, #4
 8004072:	4860      	ldr	r0, [pc, #384]	; (80041f4 <menu+0x3050>)
 8004074:	f005 f95a 	bl	800932c <HAL_GPIO_ReadPin>
 8004078:	4603      	mov	r3, r0
 800407a:	2b01      	cmp	r3, #1
 800407c:	d115      	bne.n	80040aa <menu+0x2f06>
 800407e:	4b5e      	ldr	r3, [pc, #376]	; (80041f8 <menu+0x3054>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	f083 0301 	eor.w	r3, r3, #1
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00e      	beq.n	80040aa <menu+0x2f06>
			demoMode = demoMode - 1;
 800408c:	4b5b      	ldr	r3, [pc, #364]	; (80041fc <menu+0x3058>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	3b01      	subs	r3, #1
 8004092:	b2da      	uxtb	r2, r3
 8004094:	4b59      	ldr	r3, [pc, #356]	; (80041fc <menu+0x3058>)
 8004096:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004098:	4b58      	ldr	r3, [pc, #352]	; (80041fc <menu+0x3058>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <menu+0x2f02>
		   		demoMode = 1;
 80040a0:	4b56      	ldr	r3, [pc, #344]	; (80041fc <menu+0x3058>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80040a6:	f000 fc53 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80040aa:	2108      	movs	r1, #8
 80040ac:	4851      	ldr	r0, [pc, #324]	; (80041f4 <menu+0x3050>)
 80040ae:	f005 f93d 	bl	800932c <HAL_GPIO_ReadPin>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d10d      	bne.n	80040d4 <menu+0x2f30>
 80040b8:	4b4f      	ldr	r3, [pc, #316]	; (80041f8 <menu+0x3054>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	f083 0301 	eor.w	r3, r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d006      	beq.n	80040d4 <menu+0x2f30>
			eepromData[26] = demoMode;
 80040c6:	4b4d      	ldr	r3, [pc, #308]	; (80041fc <menu+0x3058>)
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	4b4d      	ldr	r3, [pc, #308]	; (8004200 <menu+0x305c>)
 80040cc:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80040ce:	4b4d      	ldr	r3, [pc, #308]	; (8004204 <menu+0x3060>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80040d4:	4b4c      	ldr	r3, [pc, #304]	; (8004208 <menu+0x3064>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b1d      	cmp	r3, #29
 80040da:	f040 8132 	bne.w	8004342 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80040de:	4b4b      	ldr	r3, [pc, #300]	; (800420c <menu+0x3068>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d113      	bne.n	800410e <menu+0x2f6a>
 80040e6:	4b4a      	ldr	r3, [pc, #296]	; (8004210 <menu+0x306c>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <menu+0x2f6a>
 80040ee:	4b49      	ldr	r3, [pc, #292]	; (8004214 <menu+0x3070>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10b      	bne.n	800410e <menu+0x2f6a>
 80040f6:	4b48      	ldr	r3, [pc, #288]	; (8004218 <menu+0x3074>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d107      	bne.n	800410e <menu+0x2f6a>
 80040fe:	4b47      	ldr	r3, [pc, #284]	; (800421c <menu+0x3078>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d103      	bne.n	800410e <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004106:	4b46      	ldr	r3, [pc, #280]	; (8004220 <menu+0x307c>)
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]
 800410c:	e002      	b.n	8004114 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800410e:	4b44      	ldr	r3, [pc, #272]	; (8004220 <menu+0x307c>)
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004114:	4b43      	ldr	r3, [pc, #268]	; (8004224 <menu+0x3080>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d154      	bne.n	80041c6 <menu+0x3022>
			if(dilSecim == 0) {
 800411c:	4b33      	ldr	r3, [pc, #204]	; (80041ec <menu+0x3048>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d105      	bne.n	8004130 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004124:	4a40      	ldr	r2, [pc, #256]	; (8004228 <menu+0x3084>)
 8004126:	2101      	movs	r1, #1
 8004128:	2001      	movs	r0, #1
 800412a:	f003 fdd9 	bl	8007ce0 <lcd_print>
 800412e:	e008      	b.n	8004142 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004130:	4b2e      	ldr	r3, [pc, #184]	; (80041ec <menu+0x3048>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d104      	bne.n	8004142 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004138:	4a3c      	ldr	r2, [pc, #240]	; (800422c <menu+0x3088>)
 800413a:	2101      	movs	r1, #1
 800413c:	2001      	movs	r0, #1
 800413e:	f003 fdcf 	bl	8007ce0 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004142:	4b36      	ldr	r3, [pc, #216]	; (800421c <menu+0x3078>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	220a      	movs	r2, #10
 8004148:	4939      	ldr	r1, [pc, #228]	; (8004230 <menu+0x308c>)
 800414a:	4618      	mov	r0, r3
 800414c:	f008 f91a 	bl	800c384 <itoa>
			lcd_print(2, 12, snum);
 8004150:	4a37      	ldr	r2, [pc, #220]	; (8004230 <menu+0x308c>)
 8004152:	210c      	movs	r1, #12
 8004154:	2002      	movs	r0, #2
 8004156:	f003 fdc3 	bl	8007ce0 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800415a:	4b2f      	ldr	r3, [pc, #188]	; (8004218 <menu+0x3074>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	220a      	movs	r2, #10
 8004160:	4933      	ldr	r1, [pc, #204]	; (8004230 <menu+0x308c>)
 8004162:	4618      	mov	r0, r3
 8004164:	f008 f90e 	bl	800c384 <itoa>
			lcd_print(2, 13, snum);
 8004168:	4a31      	ldr	r2, [pc, #196]	; (8004230 <menu+0x308c>)
 800416a:	210d      	movs	r1, #13
 800416c:	2002      	movs	r0, #2
 800416e:	f003 fdb7 	bl	8007ce0 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004172:	4b28      	ldr	r3, [pc, #160]	; (8004214 <menu+0x3070>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	220a      	movs	r2, #10
 8004178:	492d      	ldr	r1, [pc, #180]	; (8004230 <menu+0x308c>)
 800417a:	4618      	mov	r0, r3
 800417c:	f008 f902 	bl	800c384 <itoa>
			lcd_print(2, 14, snum);
 8004180:	4a2b      	ldr	r2, [pc, #172]	; (8004230 <menu+0x308c>)
 8004182:	210e      	movs	r1, #14
 8004184:	2002      	movs	r0, #2
 8004186:	f003 fdab 	bl	8007ce0 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800418a:	4b21      	ldr	r3, [pc, #132]	; (8004210 <menu+0x306c>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	220a      	movs	r2, #10
 8004190:	4927      	ldr	r1, [pc, #156]	; (8004230 <menu+0x308c>)
 8004192:	4618      	mov	r0, r3
 8004194:	f008 f8f6 	bl	800c384 <itoa>
			lcd_print(2, 15, snum);
 8004198:	4a25      	ldr	r2, [pc, #148]	; (8004230 <menu+0x308c>)
 800419a:	210f      	movs	r1, #15
 800419c:	2002      	movs	r0, #2
 800419e:	f003 fd9f 	bl	8007ce0 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80041a2:	4b1a      	ldr	r3, [pc, #104]	; (800420c <menu+0x3068>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	220a      	movs	r2, #10
 80041a8:	4921      	ldr	r1, [pc, #132]	; (8004230 <menu+0x308c>)
 80041aa:	4618      	mov	r0, r3
 80041ac:	f008 f8ea 	bl	800c384 <itoa>
			lcd_print(2, 16, snum);
 80041b0:	4a1f      	ldr	r2, [pc, #124]	; (8004230 <menu+0x308c>)
 80041b2:	2110      	movs	r1, #16
 80041b4:	2002      	movs	r0, #2
 80041b6:	f003 fd93 	bl	8007ce0 <lcd_print>

			lcd_print(2, 1, "           ");
 80041ba:	4a1e      	ldr	r2, [pc, #120]	; (8004234 <menu+0x3090>)
 80041bc:	2101      	movs	r1, #1
 80041be:	2002      	movs	r0, #2
 80041c0:	f003 fd8e 	bl	8007ce0 <lcd_print>
 80041c4:	e048      	b.n	8004258 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80041c6:	4b17      	ldr	r3, [pc, #92]	; (8004224 <menu+0x3080>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d144      	bne.n	8004258 <menu+0x30b4>
			if(dilSecim == 0) {
 80041ce:	4b07      	ldr	r3, [pc, #28]	; (80041ec <menu+0x3048>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d132      	bne.n	800423c <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80041d6:	4a14      	ldr	r2, [pc, #80]	; (8004228 <menu+0x3084>)
 80041d8:	2101      	movs	r1, #1
 80041da:	2001      	movs	r0, #1
 80041dc:	f003 fd80 	bl	8007ce0 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80041e0:	4a15      	ldr	r2, [pc, #84]	; (8004238 <menu+0x3094>)
 80041e2:	2101      	movs	r1, #1
 80041e4:	2002      	movs	r0, #2
 80041e6:	f003 fd7b 	bl	8007ce0 <lcd_print>
 80041ea:	e035      	b.n	8004258 <menu+0x30b4>
 80041ec:	20000241 	.word	0x20000241
 80041f0:	0800d344 	.word	0x0800d344
 80041f4:	40010800 	.word	0x40010800
 80041f8:	2000024f 	.word	0x2000024f
 80041fc:	2000023e 	.word	0x2000023e
 8004200:	20000118 	.word	0x20000118
 8004204:	2000024c 	.word	0x2000024c
 8004208:	20000220 	.word	0x20000220
 800420c:	2000021d 	.word	0x2000021d
 8004210:	2000021e 	.word	0x2000021e
 8004214:	20000000 	.word	0x20000000
 8004218:	20000001 	.word	0x20000001
 800421c:	2000021f 	.word	0x2000021f
 8004220:	20000261 	.word	0x20000261
 8004224:	20000240 	.word	0x20000240
 8004228:	0800d9cc 	.word	0x0800d9cc
 800422c:	0800d9e0 	.word	0x0800d9e0
 8004230:	20000188 	.word	0x20000188
 8004234:	0800d9f4 	.word	0x0800d9f4
 8004238:	0800da00 	.word	0x0800da00
			} else if(dilSecim == 1) {
 800423c:	4b94      	ldr	r3, [pc, #592]	; (8004490 <menu+0x32ec>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d109      	bne.n	8004258 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004244:	4a93      	ldr	r2, [pc, #588]	; (8004494 <menu+0x32f0>)
 8004246:	2101      	movs	r1, #1
 8004248:	2001      	movs	r0, #1
 800424a:	f003 fd49 	bl	8007ce0 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800424e:	4a92      	ldr	r2, [pc, #584]	; (8004498 <menu+0x32f4>)
 8004250:	2101      	movs	r1, #1
 8004252:	2002      	movs	r0, #2
 8004254:	f003 fd44 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004258:	2102      	movs	r1, #2
 800425a:	4890      	ldr	r0, [pc, #576]	; (800449c <menu+0x32f8>)
 800425c:	f005 f866 	bl	800932c <HAL_GPIO_ReadPin>
 8004260:	4603      	mov	r3, r0
 8004262:	2b01      	cmp	r3, #1
 8004264:	d119      	bne.n	800429a <menu+0x30f6>
 8004266:	4b8e      	ldr	r3, [pc, #568]	; (80044a0 <menu+0x32fc>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	f083 0301 	eor.w	r3, r3, #1
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d012      	beq.n	800429a <menu+0x30f6>
 8004274:	4b8b      	ldr	r3, [pc, #556]	; (80044a4 <menu+0x3300>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00e      	beq.n	800429a <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 800427c:	4b8a      	ldr	r3, [pc, #552]	; (80044a8 <menu+0x3304>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	b2da      	uxtb	r2, r3
 8004284:	4b88      	ldr	r3, [pc, #544]	; (80044a8 <menu+0x3304>)
 8004286:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004288:	4b87      	ldr	r3, [pc, #540]	; (80044a8 <menu+0x3304>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d902      	bls.n	8004296 <menu+0x30f2>
				calismaSayModu = 0;
 8004290:	4b85      	ldr	r3, [pc, #532]	; (80044a8 <menu+0x3304>)
 8004292:	2200      	movs	r2, #0
 8004294:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004296:	f000 fb5b 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800429a:	2104      	movs	r1, #4
 800429c:	487f      	ldr	r0, [pc, #508]	; (800449c <menu+0x32f8>)
 800429e:	f005 f845 	bl	800932c <HAL_GPIO_ReadPin>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d119      	bne.n	80042dc <menu+0x3138>
 80042a8:	4b7d      	ldr	r3, [pc, #500]	; (80044a0 <menu+0x32fc>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	f083 0301 	eor.w	r3, r3, #1
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d012      	beq.n	80042dc <menu+0x3138>
 80042b6:	4b7b      	ldr	r3, [pc, #492]	; (80044a4 <menu+0x3300>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00e      	beq.n	80042dc <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80042be:	4b7a      	ldr	r3, [pc, #488]	; (80044a8 <menu+0x3304>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	4b78      	ldr	r3, [pc, #480]	; (80044a8 <menu+0x3304>)
 80042c8:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80042ca:	4b77      	ldr	r3, [pc, #476]	; (80044a8 <menu+0x3304>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <menu+0x3134>
		   		calismaSayModu = 1;
 80042d2:	4b75      	ldr	r3, [pc, #468]	; (80044a8 <menu+0x3304>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042d8:	f000 fb3a 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042dc:	2108      	movs	r1, #8
 80042de:	486f      	ldr	r0, [pc, #444]	; (800449c <menu+0x32f8>)
 80042e0:	f005 f824 	bl	800932c <HAL_GPIO_ReadPin>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d12b      	bne.n	8004342 <menu+0x319e>
 80042ea:	4b6d      	ldr	r3, [pc, #436]	; (80044a0 <menu+0x32fc>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	f083 0301 	eor.w	r3, r3, #1
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d024      	beq.n	8004342 <menu+0x319e>
			eepromData[32] = 0;
 80042f8:	4b6c      	ldr	r3, [pc, #432]	; (80044ac <menu+0x3308>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004300:	4b6a      	ldr	r3, [pc, #424]	; (80044ac <menu+0x3308>)
 8004302:	2200      	movs	r2, #0
 8004304:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004306:	4b69      	ldr	r3, [pc, #420]	; (80044ac <menu+0x3308>)
 8004308:	2200      	movs	r2, #0
 800430a:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 800430c:	4b67      	ldr	r3, [pc, #412]	; (80044ac <menu+0x3308>)
 800430e:	2200      	movs	r2, #0
 8004310:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004312:	4b66      	ldr	r3, [pc, #408]	; (80044ac <menu+0x3308>)
 8004314:	2200      	movs	r2, #0
 8004316:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004318:	4b65      	ldr	r3, [pc, #404]	; (80044b0 <menu+0x330c>)
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800431e:	4b65      	ldr	r3, [pc, #404]	; (80044b4 <menu+0x3310>)
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004324:	4b64      	ldr	r3, [pc, #400]	; (80044b8 <menu+0x3314>)
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800432a:	4b64      	ldr	r3, [pc, #400]	; (80044bc <menu+0x3318>)
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004330:	4b63      	ldr	r3, [pc, #396]	; (80044c0 <menu+0x331c>)
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004336:	4b5c      	ldr	r3, [pc, #368]	; (80044a8 <menu+0x3304>)
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 800433c:	4b61      	ldr	r3, [pc, #388]	; (80044c4 <menu+0x3320>)
 800433e:	2201      	movs	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004342:	4b61      	ldr	r3, [pc, #388]	; (80044c8 <menu+0x3324>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b1e      	cmp	r3, #30
 8004348:	d16f      	bne.n	800442a <menu+0x3286>
		calismaSayModu = 0;
 800434a:	4b57      	ldr	r3, [pc, #348]	; (80044a8 <menu+0x3304>)
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004350:	4b4f      	ldr	r3, [pc, #316]	; (8004490 <menu+0x32ec>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004358:	4a5c      	ldr	r2, [pc, #368]	; (80044cc <menu+0x3328>)
 800435a:	2101      	movs	r1, #1
 800435c:	2001      	movs	r0, #1
 800435e:	f003 fcbf 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004362:	4a5b      	ldr	r2, [pc, #364]	; (80044d0 <menu+0x332c>)
 8004364:	2101      	movs	r1, #1
 8004366:	2002      	movs	r0, #2
 8004368:	f003 fcba 	bl	8007ce0 <lcd_print>
 800436c:	e00d      	b.n	800438a <menu+0x31e6>
		} else if(dilSecim == 1) {
 800436e:	4b48      	ldr	r3, [pc, #288]	; (8004490 <menu+0x32ec>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d109      	bne.n	800438a <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004376:	4a57      	ldr	r2, [pc, #348]	; (80044d4 <menu+0x3330>)
 8004378:	2101      	movs	r1, #1
 800437a:	2001      	movs	r0, #1
 800437c:	f003 fcb0 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004380:	4a55      	ldr	r2, [pc, #340]	; (80044d8 <menu+0x3334>)
 8004382:	2101      	movs	r1, #1
 8004384:	2002      	movs	r0, #2
 8004386:	f003 fcab 	bl	8007ce0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800438a:	2102      	movs	r1, #2
 800438c:	4843      	ldr	r0, [pc, #268]	; (800449c <menu+0x32f8>)
 800438e:	f004 ffcd 	bl	800932c <HAL_GPIO_ReadPin>
 8004392:	4603      	mov	r3, r0
 8004394:	2b01      	cmp	r3, #1
 8004396:	d115      	bne.n	80043c4 <menu+0x3220>
 8004398:	4b41      	ldr	r3, [pc, #260]	; (80044a0 <menu+0x32fc>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	f083 0301 	eor.w	r3, r3, #1
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00e      	beq.n	80043c4 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80043a6:	4b3a      	ldr	r3, [pc, #232]	; (8004490 <menu+0x32ec>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	3301      	adds	r3, #1
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	4b38      	ldr	r3, [pc, #224]	; (8004490 <menu+0x32ec>)
 80043b0:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80043b2:	4b37      	ldr	r3, [pc, #220]	; (8004490 <menu+0x32ec>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d902      	bls.n	80043c0 <menu+0x321c>
				dilSecim = 0;
 80043ba:	4b35      	ldr	r3, [pc, #212]	; (8004490 <menu+0x32ec>)
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80043c0:	f000 fac6 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043c4:	2104      	movs	r1, #4
 80043c6:	4835      	ldr	r0, [pc, #212]	; (800449c <menu+0x32f8>)
 80043c8:	f004 ffb0 	bl	800932c <HAL_GPIO_ReadPin>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d115      	bne.n	80043fe <menu+0x325a>
 80043d2:	4b33      	ldr	r3, [pc, #204]	; (80044a0 <menu+0x32fc>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	f083 0301 	eor.w	r3, r3, #1
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00e      	beq.n	80043fe <menu+0x325a>
			dilSecim = dilSecim - 1;
 80043e0:	4b2b      	ldr	r3, [pc, #172]	; (8004490 <menu+0x32ec>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	4b29      	ldr	r3, [pc, #164]	; (8004490 <menu+0x32ec>)
 80043ea:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80043ec:	4b28      	ldr	r3, [pc, #160]	; (8004490 <menu+0x32ec>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <menu+0x3256>
		   		dilSecim = 1;
 80043f4:	4b26      	ldr	r3, [pc, #152]	; (8004490 <menu+0x32ec>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80043fa:	f000 faa9 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043fe:	2108      	movs	r1, #8
 8004400:	4826      	ldr	r0, [pc, #152]	; (800449c <menu+0x32f8>)
 8004402:	f004 ff93 	bl	800932c <HAL_GPIO_ReadPin>
 8004406:	4603      	mov	r3, r0
 8004408:	2b01      	cmp	r3, #1
 800440a:	d10e      	bne.n	800442a <menu+0x3286>
 800440c:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <menu+0x32fc>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	f083 0301 	eor.w	r3, r3, #1
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <menu+0x3286>
			eepromData[33] = dilSecim;
 800441a:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <menu+0x32ec>)
 800441c:	781a      	ldrb	r2, [r3, #0]
 800441e:	4b23      	ldr	r3, [pc, #140]	; (80044ac <menu+0x3308>)
 8004420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004424:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <menu+0x3320>)
 8004426:	2201      	movs	r2, #1
 8004428:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800442a:	4b27      	ldr	r3, [pc, #156]	; (80044c8 <menu+0x3324>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b1f      	cmp	r3, #31
 8004430:	f040 80b7 	bne.w	80045a2 <menu+0x33fe>
		calismaSayModu = 0;
 8004434:	4b1c      	ldr	r3, [pc, #112]	; (80044a8 <menu+0x3304>)
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800443a:	4a28      	ldr	r2, [pc, #160]	; (80044dc <menu+0x3338>)
 800443c:	2101      	movs	r1, #1
 800443e:	2001      	movs	r0, #1
 8004440:	f003 fc4e 	bl	8007ce0 <lcd_print>

		if(iotMode == 0) {
 8004444:	4b26      	ldr	r3, [pc, #152]	; (80044e0 <menu+0x333c>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d113      	bne.n	8004474 <menu+0x32d0>
			if(dilSecim == 0) {
 800444c:	4b10      	ldr	r3, [pc, #64]	; (8004490 <menu+0x32ec>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004454:	4a23      	ldr	r2, [pc, #140]	; (80044e4 <menu+0x3340>)
 8004456:	2101      	movs	r1, #1
 8004458:	2002      	movs	r0, #2
 800445a:	f003 fc41 	bl	8007ce0 <lcd_print>
 800445e:	e050      	b.n	8004502 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <menu+0x32ec>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d14c      	bne.n	8004502 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004468:	4a1f      	ldr	r2, [pc, #124]	; (80044e8 <menu+0x3344>)
 800446a:	2101      	movs	r1, #1
 800446c:	2002      	movs	r0, #2
 800446e:	f003 fc37 	bl	8007ce0 <lcd_print>
 8004472:	e046      	b.n	8004502 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004474:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <menu+0x333c>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d142      	bne.n	8004502 <menu+0x335e>
			if(dilSecim == 0) {
 800447c:	4b04      	ldr	r3, [pc, #16]	; (8004490 <menu+0x32ec>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d135      	bne.n	80044f0 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004484:	4a19      	ldr	r2, [pc, #100]	; (80044ec <menu+0x3348>)
 8004486:	2101      	movs	r1, #1
 8004488:	2002      	movs	r0, #2
 800448a:	f003 fc29 	bl	8007ce0 <lcd_print>
 800448e:	e038      	b.n	8004502 <menu+0x335e>
 8004490:	20000241 	.word	0x20000241
 8004494:	0800d9e0 	.word	0x0800d9e0
 8004498:	0800da14 	.word	0x0800da14
 800449c:	40010800 	.word	0x40010800
 80044a0:	2000024f 	.word	0x2000024f
 80044a4:	20000261 	.word	0x20000261
 80044a8:	20000240 	.word	0x20000240
 80044ac:	20000118 	.word	0x20000118
 80044b0:	2000021f 	.word	0x2000021f
 80044b4:	20000001 	.word	0x20000001
 80044b8:	20000000 	.word	0x20000000
 80044bc:	2000021e 	.word	0x2000021e
 80044c0:	2000021d 	.word	0x2000021d
 80044c4:	2000024c 	.word	0x2000024c
 80044c8:	20000220 	.word	0x20000220
 80044cc:	0800da28 	.word	0x0800da28
 80044d0:	0800da3c 	.word	0x0800da3c
 80044d4:	0800da50 	.word	0x0800da50
 80044d8:	0800da64 	.word	0x0800da64
 80044dc:	0800da78 	.word	0x0800da78
 80044e0:	2000023f 	.word	0x2000023f
 80044e4:	0800d2d0 	.word	0x0800d2d0
 80044e8:	0800d2e4 	.word	0x0800d2e4
 80044ec:	0800d330 	.word	0x0800d330
			} else if(dilSecim == 1) {
 80044f0:	4baf      	ldr	r3, [pc, #700]	; (80047b0 <menu+0x360c>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d104      	bne.n	8004502 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80044f8:	4aae      	ldr	r2, [pc, #696]	; (80047b4 <menu+0x3610>)
 80044fa:	2101      	movs	r1, #1
 80044fc:	2002      	movs	r0, #2
 80044fe:	f003 fbef 	bl	8007ce0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004502:	2102      	movs	r1, #2
 8004504:	48ac      	ldr	r0, [pc, #688]	; (80047b8 <menu+0x3614>)
 8004506:	f004 ff11 	bl	800932c <HAL_GPIO_ReadPin>
 800450a:	4603      	mov	r3, r0
 800450c:	2b01      	cmp	r3, #1
 800450e:	d115      	bne.n	800453c <menu+0x3398>
 8004510:	4baa      	ldr	r3, [pc, #680]	; (80047bc <menu+0x3618>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	f083 0301 	eor.w	r3, r3, #1
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00e      	beq.n	800453c <menu+0x3398>
			iotMode = iotMode + 1;
 800451e:	4ba8      	ldr	r3, [pc, #672]	; (80047c0 <menu+0x361c>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	b2da      	uxtb	r2, r3
 8004526:	4ba6      	ldr	r3, [pc, #664]	; (80047c0 <menu+0x361c>)
 8004528:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800452a:	4ba5      	ldr	r3, [pc, #660]	; (80047c0 <menu+0x361c>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d902      	bls.n	8004538 <menu+0x3394>
				iotMode = 0;
 8004532:	4ba3      	ldr	r3, [pc, #652]	; (80047c0 <menu+0x361c>)
 8004534:	2200      	movs	r2, #0
 8004536:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004538:	f000 fa0a 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800453c:	2104      	movs	r1, #4
 800453e:	489e      	ldr	r0, [pc, #632]	; (80047b8 <menu+0x3614>)
 8004540:	f004 fef4 	bl	800932c <HAL_GPIO_ReadPin>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d115      	bne.n	8004576 <menu+0x33d2>
 800454a:	4b9c      	ldr	r3, [pc, #624]	; (80047bc <menu+0x3618>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	f083 0301 	eor.w	r3, r3, #1
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00e      	beq.n	8004576 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004558:	4b99      	ldr	r3, [pc, #612]	; (80047c0 <menu+0x361c>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	3b01      	subs	r3, #1
 800455e:	b2da      	uxtb	r2, r3
 8004560:	4b97      	ldr	r3, [pc, #604]	; (80047c0 <menu+0x361c>)
 8004562:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004564:	4b96      	ldr	r3, [pc, #600]	; (80047c0 <menu+0x361c>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <menu+0x33ce>
		   		iotMode = 1;
 800456c:	4b94      	ldr	r3, [pc, #592]	; (80047c0 <menu+0x361c>)
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004572:	f000 f9ed 	bl	8004950 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004576:	2108      	movs	r1, #8
 8004578:	488f      	ldr	r0, [pc, #572]	; (80047b8 <menu+0x3614>)
 800457a:	f004 fed7 	bl	800932c <HAL_GPIO_ReadPin>
 800457e:	4603      	mov	r3, r0
 8004580:	2b01      	cmp	r3, #1
 8004582:	d10e      	bne.n	80045a2 <menu+0x33fe>
 8004584:	4b8d      	ldr	r3, [pc, #564]	; (80047bc <menu+0x3618>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	f083 0301 	eor.w	r3, r3, #1
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d007      	beq.n	80045a2 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004592:	4b8b      	ldr	r3, [pc, #556]	; (80047c0 <menu+0x361c>)
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	4b8b      	ldr	r3, [pc, #556]	; (80047c4 <menu+0x3620>)
 8004598:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 800459c:	4b8a      	ldr	r3, [pc, #552]	; (80047c8 <menu+0x3624>)
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80045a2:	4b8a      	ldr	r3, [pc, #552]	; (80047cc <menu+0x3628>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d150      	bne.n	800464c <menu+0x34a8>
		calismaSayModu = 0;
 80045aa:	4b89      	ldr	r3, [pc, #548]	; (80047d0 <menu+0x362c>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80045b0:	4b7f      	ldr	r3, [pc, #508]	; (80047b0 <menu+0x360c>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d105      	bne.n	80045c4 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 80045b8:	4a86      	ldr	r2, [pc, #536]	; (80047d4 <menu+0x3630>)
 80045ba:	2101      	movs	r1, #1
 80045bc:	2001      	movs	r0, #1
 80045be:	f003 fb8f 	bl	8007ce0 <lcd_print>
 80045c2:	e004      	b.n	80045ce <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80045c4:	4a84      	ldr	r2, [pc, #528]	; (80047d8 <menu+0x3634>)
 80045c6:	2101      	movs	r1, #1
 80045c8:	2001      	movs	r0, #1
 80045ca:	f003 fb89 	bl	8007ce0 <lcd_print>
		}
		printMachineCredentials(1);
 80045ce:	2001      	movs	r0, #1
 80045d0:	f003 f93a 	bl	8007848 <printMachineCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045d4:	2102      	movs	r1, #2
 80045d6:	4878      	ldr	r0, [pc, #480]	; (80047b8 <menu+0x3614>)
 80045d8:	f004 fea8 	bl	800932c <HAL_GPIO_ReadPin>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d134      	bne.n	800464c <menu+0x34a8>
 80045e2:	2104      	movs	r1, #4
 80045e4:	4874      	ldr	r0, [pc, #464]	; (80047b8 <menu+0x3614>)
 80045e6:	f004 fea1 	bl	800932c <HAL_GPIO_ReadPin>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d12d      	bne.n	800464c <menu+0x34a8>
 80045f0:	4b72      	ldr	r3, [pc, #456]	; (80047bc <menu+0x3618>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	f083 0301 	eor.w	r3, r3, #1
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d026      	beq.n	800464c <menu+0x34a8>
			takeMachineID();
 80045fe:	f002 fab3 	bl	8006b68 <takeMachineID>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004602:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004606:	9302      	str	r3, [sp, #8]
 8004608:	236e      	movs	r3, #110	; 0x6e
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	4b6d      	ldr	r3, [pc, #436]	; (80047c4 <menu+0x3620>)
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	236e      	movs	r3, #110	; 0x6e
 8004612:	2200      	movs	r2, #0
 8004614:	21a0      	movs	r1, #160	; 0xa0
 8004616:	4871      	ldr	r0, [pc, #452]	; (80047dc <menu+0x3638>)
 8004618:	f005 fa3c 	bl	8009a94 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 800461c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004620:	f004 f8b4 	bl	800878c <HAL_Delay>
			memcpy(machineIDInt, &eepromData[idStartPos], 12);
 8004624:	4b6e      	ldr	r3, [pc, #440]	; (80047e0 <menu+0x363c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a66      	ldr	r2, [pc, #408]	; (80047c4 <menu+0x3620>)
 800462a:	441a      	add	r2, r3
 800462c:	4b6d      	ldr	r3, [pc, #436]	; (80047e4 <menu+0x3640>)
 800462e:	6810      	ldr	r0, [r2, #0]
 8004630:	6851      	ldr	r1, [r2, #4]
 8004632:	6892      	ldr	r2, [r2, #8]
 8004634:	6018      	str	r0, [r3, #0]
 8004636:	6059      	str	r1, [r3, #4]
 8004638:	609a      	str	r2, [r3, #8]
			convertArrays(1);
 800463a:	2001      	movs	r0, #1
 800463c:	f7fc f8b2 	bl	80007a4 <convertArrays>

			HAL_Delay(250);
 8004640:	20fa      	movs	r0, #250	; 0xfa
 8004642:	f004 f8a3 	bl	800878c <HAL_Delay>
			printMachineCredentials(1);
 8004646:	2001      	movs	r0, #1
 8004648:	f003 f8fe 	bl	8007848 <printMachineCredentials>
		}
	}

	if (menuSayac == 33) {
 800464c:	4b5f      	ldr	r3, [pc, #380]	; (80047cc <menu+0x3628>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b21      	cmp	r3, #33	; 0x21
 8004652:	d14a      	bne.n	80046ea <menu+0x3546>
		calismaSayModu = 0;
 8004654:	4b5e      	ldr	r3, [pc, #376]	; (80047d0 <menu+0x362c>)
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 800465a:	4a63      	ldr	r2, [pc, #396]	; (80047e8 <menu+0x3644>)
 800465c:	2101      	movs	r1, #1
 800465e:	2001      	movs	r0, #1
 8004660:	f003 fb3e 	bl	8007ce0 <lcd_print>
		printMachineCredentials(2);
 8004664:	2002      	movs	r0, #2
 8004666:	f003 f8ef 	bl	8007848 <printMachineCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800466a:	2102      	movs	r1, #2
 800466c:	4852      	ldr	r0, [pc, #328]	; (80047b8 <menu+0x3614>)
 800466e:	f004 fe5d 	bl	800932c <HAL_GPIO_ReadPin>
 8004672:	4603      	mov	r3, r0
 8004674:	2b01      	cmp	r3, #1
 8004676:	d138      	bne.n	80046ea <menu+0x3546>
 8004678:	2104      	movs	r1, #4
 800467a:	484f      	ldr	r0, [pc, #316]	; (80047b8 <menu+0x3614>)
 800467c:	f004 fe56 	bl	800932c <HAL_GPIO_ReadPin>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d131      	bne.n	80046ea <menu+0x3546>
 8004686:	4b4d      	ldr	r3, [pc, #308]	; (80047bc <menu+0x3618>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	f083 0301 	eor.w	r3, r3, #1
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d02a      	beq.n	80046ea <menu+0x3546>
			takeWifiSSID();
 8004694:	f002 fc02 	bl	8006e9c <takeWifiSSID>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004698:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800469c:	9302      	str	r3, [sp, #8]
 800469e:	236e      	movs	r3, #110	; 0x6e
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	4b48      	ldr	r3, [pc, #288]	; (80047c4 <menu+0x3620>)
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	236e      	movs	r3, #110	; 0x6e
 80046a8:	2200      	movs	r2, #0
 80046aa:	21a0      	movs	r1, #160	; 0xa0
 80046ac:	484b      	ldr	r0, [pc, #300]	; (80047dc <menu+0x3638>)
 80046ae:	f005 f9f1 	bl	8009a94 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 80046b2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80046b6:	f004 f869 	bl	800878c <HAL_Delay>
			memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
 80046ba:	4b4c      	ldr	r3, [pc, #304]	; (80047ec <menu+0x3648>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a41      	ldr	r2, [pc, #260]	; (80047c4 <menu+0x3620>)
 80046c0:	441a      	add	r2, r3
 80046c2:	4b4b      	ldr	r3, [pc, #300]	; (80047f0 <menu+0x364c>)
 80046c4:	6811      	ldr	r1, [r2, #0]
 80046c6:	6855      	ldr	r5, [r2, #4]
 80046c8:	6894      	ldr	r4, [r2, #8]
 80046ca:	68d0      	ldr	r0, [r2, #12]
 80046cc:	6019      	str	r1, [r3, #0]
 80046ce:	605d      	str	r5, [r3, #4]
 80046d0:	609c      	str	r4, [r3, #8]
 80046d2:	60d8      	str	r0, [r3, #12]
 80046d4:	6911      	ldr	r1, [r2, #16]
 80046d6:	6119      	str	r1, [r3, #16]
			convertArrays(2);
 80046d8:	2002      	movs	r0, #2
 80046da:	f7fc f863 	bl	80007a4 <convertArrays>

			HAL_Delay(250);
 80046de:	20fa      	movs	r0, #250	; 0xfa
 80046e0:	f004 f854 	bl	800878c <HAL_Delay>
			printMachineCredentials(2);
 80046e4:	2002      	movs	r0, #2
 80046e6:	f003 f8af 	bl	8007848 <printMachineCredentials>
		}
	}

	if (menuSayac == 34) {
 80046ea:	4b38      	ldr	r3, [pc, #224]	; (80047cc <menu+0x3628>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b22      	cmp	r3, #34	; 0x22
 80046f0:	d14a      	bne.n	8004788 <menu+0x35e4>
		calismaSayModu = 0;
 80046f2:	4b37      	ldr	r3, [pc, #220]	; (80047d0 <menu+0x362c>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80046f8:	4a3e      	ldr	r2, [pc, #248]	; (80047f4 <menu+0x3650>)
 80046fa:	2101      	movs	r1, #1
 80046fc:	2001      	movs	r0, #1
 80046fe:	f003 faef 	bl	8007ce0 <lcd_print>
		printMachineCredentials(3);
 8004702:	2003      	movs	r0, #3
 8004704:	f003 f8a0 	bl	8007848 <printMachineCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004708:	2102      	movs	r1, #2
 800470a:	482b      	ldr	r0, [pc, #172]	; (80047b8 <menu+0x3614>)
 800470c:	f004 fe0e 	bl	800932c <HAL_GPIO_ReadPin>
 8004710:	4603      	mov	r3, r0
 8004712:	2b01      	cmp	r3, #1
 8004714:	d138      	bne.n	8004788 <menu+0x35e4>
 8004716:	2104      	movs	r1, #4
 8004718:	4827      	ldr	r0, [pc, #156]	; (80047b8 <menu+0x3614>)
 800471a:	f004 fe07 	bl	800932c <HAL_GPIO_ReadPin>
 800471e:	4603      	mov	r3, r0
 8004720:	2b01      	cmp	r3, #1
 8004722:	d131      	bne.n	8004788 <menu+0x35e4>
 8004724:	4b25      	ldr	r3, [pc, #148]	; (80047bc <menu+0x3618>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	f083 0301 	eor.w	r3, r3, #1
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d02a      	beq.n	8004788 <menu+0x35e4>
			takeWifiPass();
 8004732:	f002 fd67 	bl	8007204 <takeWifiPass>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004736:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800473a:	9302      	str	r3, [sp, #8]
 800473c:	236e      	movs	r3, #110	; 0x6e
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <menu+0x3620>)
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	236e      	movs	r3, #110	; 0x6e
 8004746:	2200      	movs	r2, #0
 8004748:	21a0      	movs	r1, #160	; 0xa0
 800474a:	4824      	ldr	r0, [pc, #144]	; (80047dc <menu+0x3638>)
 800474c:	f005 f9a2 	bl	8009a94 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 8004750:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004754:	f004 f81a 	bl	800878c <HAL_Delay>
			memcpy(wifiPassInt, &eepromData[passStartPos], 20);
 8004758:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <menu+0x3654>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a19      	ldr	r2, [pc, #100]	; (80047c4 <menu+0x3620>)
 800475e:	441a      	add	r2, r3
 8004760:	4b26      	ldr	r3, [pc, #152]	; (80047fc <menu+0x3658>)
 8004762:	6811      	ldr	r1, [r2, #0]
 8004764:	6855      	ldr	r5, [r2, #4]
 8004766:	6894      	ldr	r4, [r2, #8]
 8004768:	68d0      	ldr	r0, [r2, #12]
 800476a:	6019      	str	r1, [r3, #0]
 800476c:	605d      	str	r5, [r3, #4]
 800476e:	609c      	str	r4, [r3, #8]
 8004770:	60d8      	str	r0, [r3, #12]
 8004772:	6911      	ldr	r1, [r2, #16]
 8004774:	6119      	str	r1, [r3, #16]
			convertArrays(3);
 8004776:	2003      	movs	r0, #3
 8004778:	f7fc f814 	bl	80007a4 <convertArrays>

			HAL_Delay(250);
 800477c:	20fa      	movs	r0, #250	; 0xfa
 800477e:	f004 f805 	bl	800878c <HAL_Delay>
			printMachineCredentials(3);
 8004782:	2003      	movs	r0, #3
 8004784:	f003 f860 	bl	8007848 <printMachineCredentials>
		}
	}

	if (menuSayac == 35) {
 8004788:	4b10      	ldr	r3, [pc, #64]	; (80047cc <menu+0x3628>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b23      	cmp	r3, #35	; 0x23
 800478e:	d17a      	bne.n	8004886 <menu+0x36e2>
		if(dilSecim == 0) {
 8004790:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <menu+0x360c>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d137      	bne.n	8004808 <menu+0x3664>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004798:	4a19      	ldr	r2, [pc, #100]	; (8004800 <menu+0x365c>)
 800479a:	2101      	movs	r1, #1
 800479c:	2001      	movs	r0, #1
 800479e:	f003 fa9f 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 80047a2:	4a18      	ldr	r2, [pc, #96]	; (8004804 <menu+0x3660>)
 80047a4:	2101      	movs	r1, #1
 80047a6:	2002      	movs	r0, #2
 80047a8:	f003 fa9a 	bl	8007ce0 <lcd_print>
 80047ac:	e03a      	b.n	8004824 <menu+0x3680>
 80047ae:	bf00      	nop
 80047b0:	20000241 	.word	0x20000241
 80047b4:	0800d344 	.word	0x0800d344
 80047b8:	40010800 	.word	0x40010800
 80047bc:	2000024f 	.word	0x2000024f
 80047c0:	2000023f 	.word	0x2000023f
 80047c4:	20000118 	.word	0x20000118
 80047c8:	2000024c 	.word	0x2000024c
 80047cc:	20000220 	.word	0x20000220
 80047d0:	20000240 	.word	0x20000240
 80047d4:	0800da8c 	.word	0x0800da8c
 80047d8:	0800daa0 	.word	0x0800daa0
 80047dc:	200003a8 	.word	0x200003a8
 80047e0:	20000004 	.word	0x20000004
 80047e4:	200001c4 	.word	0x200001c4
 80047e8:	0800dab4 	.word	0x0800dab4
 80047ec:	20000008 	.word	0x20000008
 80047f0:	200001d0 	.word	0x200001d0
 80047f4:	0800dac8 	.word	0x0800dac8
 80047f8:	2000000c 	.word	0x2000000c
 80047fc:	200001e4 	.word	0x200001e4
 8004800:	0800dadc 	.word	0x0800dadc
 8004804:	0800daf0 	.word	0x0800daf0
		} else if(dilSecim == 1) {
 8004808:	4b20      	ldr	r3, [pc, #128]	; (800488c <menu+0x36e8>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d109      	bne.n	8004824 <menu+0x3680>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004810:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <menu+0x36ec>)
 8004812:	2101      	movs	r1, #1
 8004814:	2001      	movs	r0, #1
 8004816:	f003 fa63 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800481a:	4a1e      	ldr	r2, [pc, #120]	; (8004894 <menu+0x36f0>)
 800481c:	2101      	movs	r1, #1
 800481e:	2002      	movs	r0, #2
 8004820:	f003 fa5e 	bl	8007ce0 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004824:	2108      	movs	r1, #8
 8004826:	481c      	ldr	r0, [pc, #112]	; (8004898 <menu+0x36f4>)
 8004828:	f004 fd80 	bl	800932c <HAL_GPIO_ReadPin>
 800482c:	4603      	mov	r3, r0
 800482e:	2b01      	cmp	r3, #1
 8004830:	d129      	bne.n	8004886 <menu+0x36e2>
			menuGiris = 0;
 8004832:	4b1a      	ldr	r3, [pc, #104]	; (800489c <menu+0x36f8>)
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004838:	bf00      	nop
 800483a:	4819      	ldr	r0, [pc, #100]	; (80048a0 <menu+0x36fc>)
 800483c:	f005 fb9f 	bl	8009f7e <HAL_I2C_GetError>
 8004840:	4603      	mov	r3, r0
 8004842:	2b04      	cmp	r3, #4
 8004844:	d0f9      	beq.n	800483a <menu+0x3696>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004846:	bf00      	nop
 8004848:	4815      	ldr	r0, [pc, #84]	; (80048a0 <menu+0x36fc>)
 800484a:	f005 fb8b 	bl	8009f64 <HAL_I2C_GetState>
 800484e:	4603      	mov	r3, r0
 8004850:	2b20      	cmp	r3, #32
 8004852:	d1f9      	bne.n	8004848 <menu+0x36a4>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004854:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004858:	9302      	str	r3, [sp, #8]
 800485a:	236e      	movs	r3, #110	; 0x6e
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <menu+0x3700>)
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	236e      	movs	r3, #110	; 0x6e
 8004864:	2200      	movs	r2, #0
 8004866:	21a0      	movs	r1, #160	; 0xa0
 8004868:	480d      	ldr	r0, [pc, #52]	; (80048a0 <menu+0x36fc>)
 800486a:	f005 f819 	bl	80098a0 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 800486e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004872:	f003 ff8b 	bl	800878c <HAL_Delay>

			lcd_clear();
 8004876:	f003 fa5f 	bl	8007d38 <lcd_clear>
			HAL_Delay(500);
 800487a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800487e:	f003 ff85 	bl	800878c <HAL_Delay>
			NVIC_SystemReset();
 8004882:	f7fc fc79 	bl	8001178 <__NVIC_SystemReset>
		}
	}
}
 8004886:	bf00      	nop
 8004888:	46bd      	mov	sp, r7
 800488a:	bdb0      	pop	{r4, r5, r7, pc}
 800488c:	20000241 	.word	0x20000241
 8004890:	0800db04 	.word	0x0800db04
 8004894:	0800db18 	.word	0x0800db18
 8004898:	40010800 	.word	0x40010800
 800489c:	2000023d 	.word	0x2000023d
 80048a0:	200003a8 	.word	0x200003a8
 80048a4:	20000118 	.word	0x20000118

080048a8 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d105      	bne.n	80048c4 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80048b8:	4a22      	ldr	r2, [pc, #136]	; (8004944 <lcdUpdate+0x9c>)
 80048ba:	2101      	movs	r1, #1
 80048bc:	2002      	movs	r0, #2
 80048be:	f003 fa0f 	bl	8007ce0 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 80048c2:	e03b      	b.n	800493c <lcdUpdate+0x94>
	} else if(y==2) {
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d105      	bne.n	80048d6 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80048ca:	4a1e      	ldr	r2, [pc, #120]	; (8004944 <lcdUpdate+0x9c>)
 80048cc:	2102      	movs	r1, #2
 80048ce:	2002      	movs	r0, #2
 80048d0:	f003 fa06 	bl	8007ce0 <lcd_print>
}
 80048d4:	e032      	b.n	800493c <lcdUpdate+0x94>
	} else if(y==3) {
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d105      	bne.n	80048e8 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80048dc:	4a19      	ldr	r2, [pc, #100]	; (8004944 <lcdUpdate+0x9c>)
 80048de:	2103      	movs	r1, #3
 80048e0:	2002      	movs	r0, #2
 80048e2:	f003 f9fd 	bl	8007ce0 <lcd_print>
}
 80048e6:	e029      	b.n	800493c <lcdUpdate+0x94>
	} else if(y==4) {
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d105      	bne.n	80048fa <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80048ee:	4a15      	ldr	r2, [pc, #84]	; (8004944 <lcdUpdate+0x9c>)
 80048f0:	2104      	movs	r1, #4
 80048f2:	2002      	movs	r0, #2
 80048f4:	f003 f9f4 	bl	8007ce0 <lcd_print>
}
 80048f8:	e020      	b.n	800493c <lcdUpdate+0x94>
	} else if(y==5) {
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	2b05      	cmp	r3, #5
 80048fe:	d105      	bne.n	800490c <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004900:	4a10      	ldr	r2, [pc, #64]	; (8004944 <lcdUpdate+0x9c>)
 8004902:	2105      	movs	r1, #5
 8004904:	2002      	movs	r0, #2
 8004906:	f003 f9eb 	bl	8007ce0 <lcd_print>
}
 800490a:	e017      	b.n	800493c <lcdUpdate+0x94>
	} else if(y==6) {
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	2b06      	cmp	r3, #6
 8004910:	d105      	bne.n	800491e <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004912:	4a0c      	ldr	r2, [pc, #48]	; (8004944 <lcdUpdate+0x9c>)
 8004914:	2106      	movs	r1, #6
 8004916:	2002      	movs	r0, #2
 8004918:	f003 f9e2 	bl	8007ce0 <lcd_print>
}
 800491c:	e00e      	b.n	800493c <lcdUpdate+0x94>
	} else if (y==7) {
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	2b07      	cmp	r3, #7
 8004922:	d10b      	bne.n	800493c <lcdUpdate+0x94>
		lcd_clear();
 8004924:	f003 fa08 	bl	8007d38 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004928:	4a07      	ldr	r2, [pc, #28]	; (8004948 <lcdUpdate+0xa0>)
 800492a:	2104      	movs	r1, #4
 800492c:	2001      	movs	r0, #1
 800492e:	f003 f9d7 	bl	8007ce0 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004932:	4a06      	ldr	r2, [pc, #24]	; (800494c <lcdUpdate+0xa4>)
 8004934:	2106      	movs	r1, #6
 8004936:	2002      	movs	r0, #2
 8004938:	f003 f9d2 	bl	8007ce0 <lcd_print>
}
 800493c:	bf00      	nop
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	0800db2c 	.word	0x0800db2c
 8004948:	0800db30 	.word	0x0800db30
 800494c:	0800db38 	.word	0x0800db38

08004950 <bekle>:

void bekle() {
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
	timer1=millis;
 8004954:	4b47      	ldr	r3, [pc, #284]	; (8004a74 <bekle+0x124>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a47      	ldr	r2, [pc, #284]	; (8004a78 <bekle+0x128>)
 800495a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800495c:	e002      	b.n	8004964 <bekle+0x14>
    	butonKontrol = 1;
 800495e:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <bekle+0x12c>)
 8004960:	2201      	movs	r2, #1
 8004962:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004964:	2101      	movs	r1, #1
 8004966:	4846      	ldr	r0, [pc, #280]	; (8004a80 <bekle+0x130>)
 8004968:	f004 fce0 	bl	800932c <HAL_GPIO_ReadPin>
 800496c:	4603      	mov	r3, r0
 800496e:	2b01      	cmp	r3, #1
 8004970:	d109      	bne.n	8004986 <bekle+0x36>
 8004972:	4b40      	ldr	r3, [pc, #256]	; (8004a74 <bekle+0x124>)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4b40      	ldr	r3, [pc, #256]	; (8004a78 <bekle+0x128>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d0ef      	beq.n	800495e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800497e:	e002      	b.n	8004986 <bekle+0x36>
    	butonKontrol = 1;
 8004980:	4b3e      	ldr	r3, [pc, #248]	; (8004a7c <bekle+0x12c>)
 8004982:	2201      	movs	r2, #1
 8004984:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004986:	2108      	movs	r1, #8
 8004988:	483e      	ldr	r0, [pc, #248]	; (8004a84 <bekle+0x134>)
 800498a:	f004 fccf 	bl	800932c <HAL_GPIO_ReadPin>
 800498e:	4603      	mov	r3, r0
 8004990:	2b01      	cmp	r3, #1
 8004992:	d109      	bne.n	80049a8 <bekle+0x58>
 8004994:	4b37      	ldr	r3, [pc, #220]	; (8004a74 <bekle+0x124>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b37      	ldr	r3, [pc, #220]	; (8004a78 <bekle+0x128>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d0ef      	beq.n	8004980 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049a0:	e002      	b.n	80049a8 <bekle+0x58>
    	butonKontrol = 1;
 80049a2:	4b36      	ldr	r3, [pc, #216]	; (8004a7c <bekle+0x12c>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049a8:	2102      	movs	r1, #2
 80049aa:	4835      	ldr	r0, [pc, #212]	; (8004a80 <bekle+0x130>)
 80049ac:	f004 fcbe 	bl	800932c <HAL_GPIO_ReadPin>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d109      	bne.n	80049ca <bekle+0x7a>
 80049b6:	4b2f      	ldr	r3, [pc, #188]	; (8004a74 <bekle+0x124>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4b2f      	ldr	r3, [pc, #188]	; (8004a78 <bekle+0x128>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d0ef      	beq.n	80049a2 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049c2:	e002      	b.n	80049ca <bekle+0x7a>
    	butonKontrol = 1;
 80049c4:	4b2d      	ldr	r3, [pc, #180]	; (8004a7c <bekle+0x12c>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049ca:	2104      	movs	r1, #4
 80049cc:	482c      	ldr	r0, [pc, #176]	; (8004a80 <bekle+0x130>)
 80049ce:	f004 fcad 	bl	800932c <HAL_GPIO_ReadPin>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d109      	bne.n	80049ec <bekle+0x9c>
 80049d8:	4b26      	ldr	r3, [pc, #152]	; (8004a74 <bekle+0x124>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b26      	ldr	r3, [pc, #152]	; (8004a78 <bekle+0x128>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d0ef      	beq.n	80049c4 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049e4:	e002      	b.n	80049ec <bekle+0x9c>
    	butonKontrol = 1;
 80049e6:	4b25      	ldr	r3, [pc, #148]	; (8004a7c <bekle+0x12c>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049ec:	2108      	movs	r1, #8
 80049ee:	4824      	ldr	r0, [pc, #144]	; (8004a80 <bekle+0x130>)
 80049f0:	f004 fc9c 	bl	800932c <HAL_GPIO_ReadPin>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d109      	bne.n	8004a0e <bekle+0xbe>
 80049fa:	4b1e      	ldr	r3, [pc, #120]	; (8004a74 <bekle+0x124>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b1e      	ldr	r3, [pc, #120]	; (8004a78 <bekle+0x128>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d0ef      	beq.n	80049e6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a06:	e002      	b.n	8004a0e <bekle+0xbe>
    	butonKontrol = 1;
 8004a08:	4b1c      	ldr	r3, [pc, #112]	; (8004a7c <bekle+0x12c>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a0e:	2180      	movs	r1, #128	; 0x80
 8004a10:	481c      	ldr	r0, [pc, #112]	; (8004a84 <bekle+0x134>)
 8004a12:	f004 fc8b 	bl	800932c <HAL_GPIO_ReadPin>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <bekle+0xe0>
 8004a1c:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <bekle+0x124>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <bekle+0x128>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d0ef      	beq.n	8004a08 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a28:	e002      	b.n	8004a30 <bekle+0xe0>
    	butonKontrol = 1;
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <bekle+0x12c>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a34:	4813      	ldr	r0, [pc, #76]	; (8004a84 <bekle+0x134>)
 8004a36:	f004 fc79 	bl	800932c <HAL_GPIO_ReadPin>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <bekle+0x104>
 8004a40:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <bekle+0x124>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <bekle+0x128>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d0ee      	beq.n	8004a2a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a4c:	e002      	b.n	8004a54 <bekle+0x104>
    	butonKontrol = 1;
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <bekle+0x12c>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a58:	480a      	ldr	r0, [pc, #40]	; (8004a84 <bekle+0x134>)
 8004a5a:	f004 fc67 	bl	800932c <HAL_GPIO_ReadPin>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d105      	bne.n	8004a70 <bekle+0x120>
 8004a64:	4b03      	ldr	r3, [pc, #12]	; (8004a74 <bekle+0x124>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b03      	ldr	r3, [pc, #12]	; (8004a78 <bekle+0x128>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d0ee      	beq.n	8004a4e <bekle+0xfe>
    }

}
 8004a70:	bf00      	nop
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	200001fc 	.word	0x200001fc
 8004a78:	20000204 	.word	0x20000204
 8004a7c:	2000024f 	.word	0x2000024f
 8004a80:	40010800 	.word	0x40010800
 8004a84:	40011000 	.word	0x40011000

08004a88 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004a8c:	4b07      	ldr	r3, [pc, #28]	; (8004aac <checkLCDBacklight+0x24>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <checkLCDBacklight+0x28>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b3b      	cmp	r3, #59	; 0x3b
 8004a98:	d903      	bls.n	8004aa2 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	f003 f96c 	bl	8007d78 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004aa0:	e002      	b.n	8004aa8 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004aa2:	2001      	movs	r0, #1
 8004aa4:	f003 f968 	bl	8007d78 <lcd_backlight>
}
 8004aa8:	bf00      	nop
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	200001fc 	.word	0x200001fc
 8004ab0:	20000218 	.word	0x20000218

08004ab4 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004ab8:	4b13      	ldr	r3, [pc, #76]	; (8004b08 <checkBasincSalteri+0x54>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <checkBasincSalteri+0x12>
		basincVar=1;
 8004ac0:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <checkBasincSalteri+0x58>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <checkBasincSalteri+0x54>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d119      	bne.n	8004b02 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004ace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ad2:	480f      	ldr	r0, [pc, #60]	; (8004b10 <checkBasincSalteri+0x5c>)
 8004ad4:	f004 fc2a 	bl	800932c <HAL_GPIO_ReadPin>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10a      	bne.n	8004af4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004ade:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <checkBasincSalteri+0x60>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <checkBasincSalteri+0x64>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d90a      	bls.n	8004b02 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004aec:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <checkBasincSalteri+0x58>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004af2:	e006      	b.n	8004b02 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004af4:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <checkBasincSalteri+0x60>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a07      	ldr	r2, [pc, #28]	; (8004b18 <checkBasincSalteri+0x64>)
 8004afa:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <checkBasincSalteri+0x58>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	701a      	strb	r2, [r3, #0]
}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000227 	.word	0x20000227
 8004b0c:	20000223 	.word	0x20000223
 8004b10:	40011000 	.word	0x40011000
 8004b14:	200001fc 	.word	0x200001fc
 8004b18:	20000214 	.word	0x20000214

08004b1c <checkBasGonder>:

void checkBasGonder() {
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <checkBasGonder+0x74>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d10b      	bne.n	8004b40 <checkBasGonder+0x24>
 8004b28:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <checkBasGonder+0x78>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <checkBasGonder+0x24>
 8004b30:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <checkBasGonder+0x7c>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d103      	bne.n	8004b40 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004b38:	4b18      	ldr	r3, [pc, #96]	; (8004b9c <checkBasGonder+0x80>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	e009      	b.n	8004b54 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004b40:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <checkBasGonder+0x78>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	f083 0301 	eor.w	r3, r3, #1
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <checkBasGonder+0x80>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004b54:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <checkBasGonder+0x74>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d10b      	bne.n	8004b74 <checkBasGonder+0x58>
 8004b5c:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <checkBasGonder+0x84>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <checkBasGonder+0x58>
 8004b64:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <checkBasGonder+0x7c>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d103      	bne.n	8004b74 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <checkBasGonder+0x88>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004b72:	e009      	b.n	8004b88 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004b74:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <checkBasGonder+0x84>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	f083 0301 	eor.w	r3, r3, #1
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004b82:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <checkBasGonder+0x88>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	701a      	strb	r2, [r3, #0]
}
 8004b88:	bf00      	nop
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr
 8004b90:	20000221 	.word	0x20000221
 8004b94:	20000255 	.word	0x20000255
 8004b98:	2000022f 	.word	0x2000022f
 8004b9c:	2000025c 	.word	0x2000025c
 8004ba0:	20000258 	.word	0x20000258
 8004ba4:	2000025d 	.word	0x2000025d

08004ba8 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004bac:	4b24      	ldr	r3, [pc, #144]	; (8004c40 <checkKapiSecimleri+0x98>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d102      	bne.n	8004bba <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004bb4:	4b23      	ldr	r3, [pc, #140]	; (8004c44 <checkKapiSecimleri+0x9c>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004bba:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <checkKapiSecimleri+0x98>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d10e      	bne.n	8004be0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bc6:	4820      	ldr	r0, [pc, #128]	; (8004c48 <checkKapiSecimleri+0xa0>)
 8004bc8:	f004 fbb0 	bl	800932c <HAL_GPIO_ReadPin>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d103      	bne.n	8004bda <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004bd2:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <checkKapiSecimleri+0x9c>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	e002      	b.n	8004be0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004bda:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <checkKapiSecimleri+0x9c>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004be0:	4b17      	ldr	r3, [pc, #92]	; (8004c40 <checkKapiSecimleri+0x98>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d10e      	bne.n	8004c06 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bec:	4816      	ldr	r0, [pc, #88]	; (8004c48 <checkKapiSecimleri+0xa0>)
 8004bee:	f004 fb9d 	bl	800932c <HAL_GPIO_ReadPin>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d103      	bne.n	8004c00 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004bf8:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <checkKapiSecimleri+0x9c>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	e002      	b.n	8004c06 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004c00:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <checkKapiSecimleri+0x9c>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004c06:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <checkKapiSecimleri+0x98>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	d116      	bne.n	8004c3c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c12:	480d      	ldr	r0, [pc, #52]	; (8004c48 <checkKapiSecimleri+0xa0>)
 8004c14:	f004 fb8a 	bl	800932c <HAL_GPIO_ReadPin>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10b      	bne.n	8004c36 <checkKapiSecimleri+0x8e>
 8004c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c22:	4809      	ldr	r0, [pc, #36]	; (8004c48 <checkKapiSecimleri+0xa0>)
 8004c24:	f004 fb82 	bl	800932c <HAL_GPIO_ReadPin>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d103      	bne.n	8004c36 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <checkKapiSecimleri+0x9c>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004c34:	e002      	b.n	8004c3c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004c36:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <checkKapiSecimleri+0x9c>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000228 	.word	0x20000228
 8004c44:	20000273 	.word	0x20000273
 8004c48:	40010800 	.word	0x40010800

08004c4c <checkAktifCalisma>:

void checkAktifCalisma() {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004c50:	4b62      	ldr	r3, [pc, #392]	; (8004ddc <checkAktifCalisma+0x190>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f041 833e 	bne.w	80062d6 <checkAktifCalisma+0x168a>
 8004c5a:	4b61      	ldr	r3, [pc, #388]	; (8004de0 <checkAktifCalisma+0x194>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f041 8339 	bne.w	80062d6 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004c64:	4b5f      	ldr	r3, [pc, #380]	; (8004de4 <checkAktifCalisma+0x198>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d11a      	bne.n	8004ca2 <checkAktifCalisma+0x56>
 8004c6c:	4b5e      	ldr	r3, [pc, #376]	; (8004de8 <checkAktifCalisma+0x19c>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d116      	bne.n	8004ca2 <checkAktifCalisma+0x56>
 8004c74:	4b5d      	ldr	r3, [pc, #372]	; (8004dec <checkAktifCalisma+0x1a0>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <checkAktifCalisma+0x46>
 8004c7c:	4b5c      	ldr	r3, [pc, #368]	; (8004df0 <checkAktifCalisma+0x1a4>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	f083 0301 	eor.w	r3, r3, #1
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <checkAktifCalisma+0x46>
 8004c8a:	4b5a      	ldr	r3, [pc, #360]	; (8004df4 <checkAktifCalisma+0x1a8>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d007      	beq.n	8004ca2 <checkAktifCalisma+0x56>
 8004c92:	4b59      	ldr	r3, [pc, #356]	; (8004df8 <checkAktifCalisma+0x1ac>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d018      	beq.n	8004ccc <checkAktifCalisma+0x80>
 8004c9a:	4b58      	ldr	r3, [pc, #352]	; (8004dfc <checkAktifCalisma+0x1b0>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d114      	bne.n	8004ccc <checkAktifCalisma+0x80>
 8004ca2:	4b57      	ldr	r3, [pc, #348]	; (8004e00 <checkAktifCalisma+0x1b4>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d010      	beq.n	8004ccc <checkAktifCalisma+0x80>
 8004caa:	4b56      	ldr	r3, [pc, #344]	; (8004e04 <checkAktifCalisma+0x1b8>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00c      	beq.n	8004ccc <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cb8:	4853      	ldr	r0, [pc, #332]	; (8004e08 <checkAktifCalisma+0x1bc>)
 8004cba:	f004 fb4e 	bl	800935a <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004cbe:	4b53      	ldr	r3, [pc, #332]	; (8004e0c <checkAktifCalisma+0x1c0>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004cc4:	4b52      	ldr	r3, [pc, #328]	; (8004e10 <checkAktifCalisma+0x1c4>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	e008      	b.n	8004cde <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cd2:	484d      	ldr	r0, [pc, #308]	; (8004e08 <checkAktifCalisma+0x1bc>)
 8004cd4:	f004 fb41 	bl	800935a <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004cd8:	4b4c      	ldr	r3, [pc, #304]	; (8004e0c <checkAktifCalisma+0x1c0>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004cde:	4b40      	ldr	r3, [pc, #256]	; (8004de0 <checkAktifCalisma+0x194>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d160      	bne.n	8004da8 <checkAktifCalisma+0x15c>
 8004ce6:	4b46      	ldr	r3, [pc, #280]	; (8004e00 <checkAktifCalisma+0x1b4>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d05c      	beq.n	8004da8 <checkAktifCalisma+0x15c>
 8004cee:	4b45      	ldr	r3, [pc, #276]	; (8004e04 <checkAktifCalisma+0x1b8>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d058      	beq.n	8004da8 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004cf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cfa:	4843      	ldr	r0, [pc, #268]	; (8004e08 <checkAktifCalisma+0x1bc>)
 8004cfc:	f004 fb16 	bl	800932c <HAL_GPIO_ReadPin>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <checkAktifCalisma+0xc2>
 8004d06:	4b43      	ldr	r3, [pc, #268]	; (8004e14 <checkAktifCalisma+0x1c8>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d04c      	beq.n	8004da8 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004d0e:	2102      	movs	r1, #2
 8004d10:	4841      	ldr	r0, [pc, #260]	; (8004e18 <checkAktifCalisma+0x1cc>)
 8004d12:	f004 fb0b 	bl	800932c <HAL_GPIO_ReadPin>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d145      	bne.n	8004da8 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004d1c:	4b3f      	ldr	r3, [pc, #252]	; (8004e1c <checkAktifCalisma+0x1d0>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d041      	beq.n	8004da8 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004d24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d28:	4837      	ldr	r0, [pc, #220]	; (8004e08 <checkAktifCalisma+0x1bc>)
 8004d2a:	f004 faff 	bl	800932c <HAL_GPIO_ReadPin>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d10e      	bne.n	8004d52 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d38:	4833      	ldr	r0, [pc, #204]	; (8004e08 <checkAktifCalisma+0x1bc>)
 8004d3a:	f004 faf7 	bl	800932c <HAL_GPIO_ReadPin>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d106      	bne.n	8004d52 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004d44:	2140      	movs	r1, #64	; 0x40
 8004d46:	4834      	ldr	r0, [pc, #208]	; (8004e18 <checkAktifCalisma+0x1cc>)
 8004d48:	f004 faf0 	bl	800932c <HAL_GPIO_ReadPin>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d003      	beq.n	8004d5a <checkAktifCalisma+0x10e>
 8004d52:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <checkAktifCalisma+0x198>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d026      	beq.n	8004da8 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004d5a:	4b24      	ldr	r3, [pc, #144]	; (8004dec <checkAktifCalisma+0x1a0>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	f083 0301 	eor.w	r3, r3, #1
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01f      	beq.n	8004da8 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004d68:	4b1f      	ldr	r3, [pc, #124]	; (8004de8 <checkAktifCalisma+0x19c>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	f083 0301 	eor.w	r3, r3, #1
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d018      	beq.n	8004da8 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004d76:	4b20      	ldr	r3, [pc, #128]	; (8004df8 <checkAktifCalisma+0x1ac>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	f083 0301 	eor.w	r3, r3, #1
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d011      	beq.n	8004da8 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004d84:	4b26      	ldr	r3, [pc, #152]	; (8004e20 <checkAktifCalisma+0x1d4>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	f083 0301 	eor.w	r3, r3, #1
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004d92:	4b24      	ldr	r3, [pc, #144]	; (8004e24 <checkAktifCalisma+0x1d8>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	f083 0301 	eor.w	r3, r3, #1
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004da0:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <checkAktifCalisma+0x198>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	e002      	b.n	8004dae <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004da8:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <checkAktifCalisma+0x198>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004dae:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <checkAktifCalisma+0x198>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d03a      	beq.n	8004e2c <checkAktifCalisma+0x1e0>
 8004db6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dba:	4817      	ldr	r0, [pc, #92]	; (8004e18 <checkAktifCalisma+0x1cc>)
 8004dbc:	f004 fab6 	bl	800932c <HAL_GPIO_ReadPin>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d132      	bne.n	8004e2c <checkAktifCalisma+0x1e0>
 8004dc6:	4b18      	ldr	r3, [pc, #96]	; (8004e28 <checkAktifCalisma+0x1dc>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d02e      	beq.n	8004e2c <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dd4:	480c      	ldr	r0, [pc, #48]	; (8004e08 <checkAktifCalisma+0x1bc>)
 8004dd6:	f004 fac0 	bl	800935a <HAL_GPIO_WritePin>
 8004dda:	e02d      	b.n	8004e38 <checkAktifCalisma+0x1ec>
 8004ddc:	2000023e 	.word	0x2000023e
 8004de0:	2000023d 	.word	0x2000023d
 8004de4:	20000255 	.word	0x20000255
 8004de8:	20000256 	.word	0x20000256
 8004dec:	20000258 	.word	0x20000258
 8004df0:	20000250 	.word	0x20000250
 8004df4:	20000233 	.word	0x20000233
 8004df8:	20000257 	.word	0x20000257
 8004dfc:	20000232 	.word	0x20000232
 8004e00:	20000272 	.word	0x20000272
 8004e04:	20000273 	.word	0x20000273
 8004e08:	40010c00 	.word	0x40010c00
 8004e0c:	20000274 	.word	0x20000274
 8004e10:	2000025f 	.word	0x2000025f
 8004e14:	2000025c 	.word	0x2000025c
 8004e18:	40011000 	.word	0x40011000
 8004e1c:	20000223 	.word	0x20000223
 8004e20:	2000025a 	.word	0x2000025a
 8004e24:	2000025b 	.word	0x2000025b
 8004e28:	2000022e 	.word	0x2000022e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e32:	4860      	ldr	r0, [pc, #384]	; (8004fb4 <checkAktifCalisma+0x368>)
 8004e34:	f004 fa91 	bl	800935a <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004e38:	4b5f      	ldr	r3, [pc, #380]	; (8004fb8 <checkAktifCalisma+0x36c>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d013      	beq.n	8004e68 <checkAktifCalisma+0x21c>
 8004e40:	4b5e      	ldr	r3, [pc, #376]	; (8004fbc <checkAktifCalisma+0x370>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d007      	beq.n	8004e58 <checkAktifCalisma+0x20c>
 8004e48:	4b5c      	ldr	r3, [pc, #368]	; (8004fbc <checkAktifCalisma+0x370>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d003      	beq.n	8004e58 <checkAktifCalisma+0x20c>
 8004e50:	4b5b      	ldr	r3, [pc, #364]	; (8004fc0 <checkAktifCalisma+0x374>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d107      	bne.n	8004e68 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004e58:	2201      	movs	r2, #1
 8004e5a:	2104      	movs	r1, #4
 8004e5c:	4855      	ldr	r0, [pc, #340]	; (8004fb4 <checkAktifCalisma+0x368>)
 8004e5e:	f004 fa7c 	bl	800935a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004e62:	4b58      	ldr	r3, [pc, #352]	; (8004fc4 <checkAktifCalisma+0x378>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004e68:	4b56      	ldr	r3, [pc, #344]	; (8004fc4 <checkAktifCalisma+0x378>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d02f      	beq.n	8004ed0 <checkAktifCalisma+0x284>
 8004e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e74:	484f      	ldr	r0, [pc, #316]	; (8004fb4 <checkAktifCalisma+0x368>)
 8004e76:	f004 fa59 	bl	800932c <HAL_GPIO_ReadPin>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d106      	bne.n	8004e8e <checkAktifCalisma+0x242>
 8004e80:	4b51      	ldr	r3, [pc, #324]	; (8004fc8 <checkAktifCalisma+0x37c>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	f083 0301 	eor.w	r3, r3, #1
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d106      	bne.n	8004e9c <checkAktifCalisma+0x250>
 8004e8e:	2102      	movs	r1, #2
 8004e90:	484e      	ldr	r0, [pc, #312]	; (8004fcc <checkAktifCalisma+0x380>)
 8004e92:	f004 fa4b 	bl	800932c <HAL_GPIO_ReadPin>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d119      	bne.n	8004ed0 <checkAktifCalisma+0x284>
 8004e9c:	4b4c      	ldr	r3, [pc, #304]	; (8004fd0 <checkAktifCalisma+0x384>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d015      	beq.n	8004ed0 <checkAktifCalisma+0x284>
 8004ea4:	4b4b      	ldr	r3, [pc, #300]	; (8004fd4 <checkAktifCalisma+0x388>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d011      	beq.n	8004ed0 <checkAktifCalisma+0x284>
 8004eac:	4b4a      	ldr	r3, [pc, #296]	; (8004fd8 <checkAktifCalisma+0x38c>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00d      	beq.n	8004ed0 <checkAktifCalisma+0x284>
 8004eb4:	4b49      	ldr	r3, [pc, #292]	; (8004fdc <checkAktifCalisma+0x390>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	f083 0301 	eor.w	r3, r3, #1
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d006      	beq.n	8004ed0 <checkAktifCalisma+0x284>
			timer2=millis;
 8004ec2:	4b47      	ldr	r3, [pc, #284]	; (8004fe0 <checkAktifCalisma+0x394>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a47      	ldr	r2, [pc, #284]	; (8004fe4 <checkAktifCalisma+0x398>)
 8004ec8:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004eca:	4b44      	ldr	r3, [pc, #272]	; (8004fdc <checkAktifCalisma+0x390>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004ed0:	4b43      	ldr	r3, [pc, #268]	; (8004fe0 <checkAktifCalisma+0x394>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b43      	ldr	r3, [pc, #268]	; (8004fe4 <checkAktifCalisma+0x398>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	4a43      	ldr	r2, [pc, #268]	; (8004fe8 <checkAktifCalisma+0x39c>)
 8004edc:	7812      	ldrb	r2, [r2, #0]
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d303      	bcc.n	8004eea <checkAktifCalisma+0x29e>
 8004ee2:	4b3e      	ldr	r3, [pc, #248]	; (8004fdc <checkAktifCalisma+0x390>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d111      	bne.n	8004f0e <checkAktifCalisma+0x2c2>
 8004eea:	4b39      	ldr	r3, [pc, #228]	; (8004fd0 <checkAktifCalisma+0x384>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	f083 0301 	eor.w	r3, r3, #1
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <checkAktifCalisma+0x2c2>
 8004ef8:	4b36      	ldr	r3, [pc, #216]	; (8004fd4 <checkAktifCalisma+0x388>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	f083 0301 	eor.w	r3, r3, #1
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d103      	bne.n	8004f0e <checkAktifCalisma+0x2c2>
 8004f06:	4b34      	ldr	r3, [pc, #208]	; (8004fd8 <checkAktifCalisma+0x38c>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2104      	movs	r1, #4
 8004f12:	4828      	ldr	r0, [pc, #160]	; (8004fb4 <checkAktifCalisma+0x368>)
 8004f14:	f004 fa21 	bl	800935a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004f18:	4b2a      	ldr	r3, [pc, #168]	; (8004fc4 <checkAktifCalisma+0x378>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004f1e:	4b2f      	ldr	r3, [pc, #188]	; (8004fdc <checkAktifCalisma+0x390>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004f24:	4b31      	ldr	r3, [pc, #196]	; (8004fec <checkAktifCalisma+0x3a0>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004f2c:	4b30      	ldr	r3, [pc, #192]	; (8004ff0 <checkAktifCalisma+0x3a4>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004f32:	4b2e      	ldr	r3, [pc, #184]	; (8004fec <checkAktifCalisma+0x3a0>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d116      	bne.n	8004f68 <checkAktifCalisma+0x31c>
 8004f3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ff4 <checkAktifCalisma+0x3a8>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d112      	bne.n	8004f68 <checkAktifCalisma+0x31c>
 8004f42:	2101      	movs	r1, #1
 8004f44:	4821      	ldr	r0, [pc, #132]	; (8004fcc <checkAktifCalisma+0x380>)
 8004f46:	f004 f9f1 	bl	800932c <HAL_GPIO_ReadPin>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <checkAktifCalisma+0x31c>
 8004f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f54:	4817      	ldr	r0, [pc, #92]	; (8004fb4 <checkAktifCalisma+0x368>)
 8004f56:	f004 f9e9 	bl	800932c <HAL_GPIO_ReadPin>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d103      	bne.n	8004f68 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004f60:	4b23      	ldr	r3, [pc, #140]	; (8004ff0 <checkAktifCalisma+0x3a4>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	e011      	b.n	8004f8c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004f68:	4b20      	ldr	r3, [pc, #128]	; (8004fec <checkAktifCalisma+0x3a0>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10d      	bne.n	8004f8c <checkAktifCalisma+0x340>
 8004f70:	2101      	movs	r1, #1
 8004f72:	4816      	ldr	r0, [pc, #88]	; (8004fcc <checkAktifCalisma+0x380>)
 8004f74:	f004 f9da 	bl	800932c <HAL_GPIO_ReadPin>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d106      	bne.n	8004f8c <checkAktifCalisma+0x340>
 8004f7e:	4b1d      	ldr	r3, [pc, #116]	; (8004ff4 <checkAktifCalisma+0x3a8>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004f86:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <checkAktifCalisma+0x3a4>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004f8c:	4b17      	ldr	r3, [pc, #92]	; (8004fec <checkAktifCalisma+0x3a0>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d134      	bne.n	8004ffe <checkAktifCalisma+0x3b2>
 8004f94:	4b17      	ldr	r3, [pc, #92]	; (8004ff4 <checkAktifCalisma+0x3a8>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d130      	bne.n	8004ffe <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	480b      	ldr	r0, [pc, #44]	; (8004fcc <checkAktifCalisma+0x380>)
 8004fa0:	f004 f9c4 	bl	800932c <HAL_GPIO_ReadPin>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d126      	bne.n	8004ff8 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <checkAktifCalisma+0x3a4>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	e025      	b.n	8004ffe <checkAktifCalisma+0x3b2>
 8004fb2:	bf00      	nop
 8004fb4:	40010c00 	.word	0x40010c00
 8004fb8:	20000255 	.word	0x20000255
 8004fbc:	2000022f 	.word	0x2000022f
 8004fc0:	20000233 	.word	0x20000233
 8004fc4:	20000259 	.word	0x20000259
 8004fc8:	2000025c 	.word	0x2000025c
 8004fcc:	40011000 	.word	0x40011000
 8004fd0:	20000272 	.word	0x20000272
 8004fd4:	20000273 	.word	0x20000273
 8004fd8:	20000223 	.word	0x20000223
 8004fdc:	20000251 	.word	0x20000251
 8004fe0:	200001fc 	.word	0x200001fc
 8004fe4:	20000208 	.word	0x20000208
 8004fe8:	20000234 	.word	0x20000234
 8004fec:	20000224 	.word	0x20000224
 8004ff0:	20000277 	.word	0x20000277
 8004ff4:	20000221 	.word	0x20000221
			} else {
				cerceveVar=0;
 8004ff8:	4b7f      	ldr	r3, [pc, #508]	; (80051f8 <checkAktifCalisma+0x5ac>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004ffe:	4b7f      	ldr	r3, [pc, #508]	; (80051fc <checkAktifCalisma+0x5b0>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d17c      	bne.n	8005100 <checkAktifCalisma+0x4b4>
 8005006:	4b7e      	ldr	r3, [pc, #504]	; (8005200 <checkAktifCalisma+0x5b4>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d078      	beq.n	8005100 <checkAktifCalisma+0x4b4>
 800500e:	4b7d      	ldr	r3, [pc, #500]	; (8005204 <checkAktifCalisma+0x5b8>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d074      	beq.n	8005100 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005016:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800501a:	487b      	ldr	r0, [pc, #492]	; (8005208 <checkAktifCalisma+0x5bc>)
 800501c:	f004 f986 	bl	800932c <HAL_GPIO_ReadPin>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <checkAktifCalisma+0x3e2>
 8005026:	4b79      	ldr	r3, [pc, #484]	; (800520c <checkAktifCalisma+0x5c0>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d068      	beq.n	8005100 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800502e:	4b72      	ldr	r3, [pc, #456]	; (80051f8 <checkAktifCalisma+0x5ac>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d064      	beq.n	8005100 <checkAktifCalisma+0x4b4>
 8005036:	4b76      	ldr	r3, [pc, #472]	; (8005210 <checkAktifCalisma+0x5c4>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	f083 0301 	eor.w	r3, r3, #1
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d05d      	beq.n	8005100 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005044:	2104      	movs	r1, #4
 8005046:	4873      	ldr	r0, [pc, #460]	; (8005214 <checkAktifCalisma+0x5c8>)
 8005048:	f004 f970 	bl	800932c <HAL_GPIO_ReadPin>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <checkAktifCalisma+0x40e>
 8005052:	4b71      	ldr	r3, [pc, #452]	; (8005218 <checkAktifCalisma+0x5cc>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d152      	bne.n	8005100 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800505a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800505e:	486a      	ldr	r0, [pc, #424]	; (8005208 <checkAktifCalisma+0x5bc>)
 8005060:	f004 f964 	bl	800932c <HAL_GPIO_ReadPin>
 8005064:	4603      	mov	r3, r0
 8005066:	2b01      	cmp	r3, #1
 8005068:	d10e      	bne.n	8005088 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800506a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800506e:	4866      	ldr	r0, [pc, #408]	; (8005208 <checkAktifCalisma+0x5bc>)
 8005070:	f004 f95c 	bl	800932c <HAL_GPIO_ReadPin>
 8005074:	4603      	mov	r3, r0
 8005076:	2b01      	cmp	r3, #1
 8005078:	d106      	bne.n	8005088 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800507a:	2140      	movs	r1, #64	; 0x40
 800507c:	4865      	ldr	r0, [pc, #404]	; (8005214 <checkAktifCalisma+0x5c8>)
 800507e:	f004 f955 	bl	800932c <HAL_GPIO_ReadPin>
 8005082:	4603      	mov	r3, r0
 8005084:	2b01      	cmp	r3, #1
 8005086:	d003      	beq.n	8005090 <checkAktifCalisma+0x444>
 8005088:	4b64      	ldr	r3, [pc, #400]	; (800521c <checkAktifCalisma+0x5d0>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d037      	beq.n	8005100 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005090:	4b63      	ldr	r3, [pc, #396]	; (8005220 <checkAktifCalisma+0x5d4>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	f083 0301 	eor.w	r3, r3, #1
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d030      	beq.n	8005100 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800509e:	4b61      	ldr	r3, [pc, #388]	; (8005224 <checkAktifCalisma+0x5d8>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	f083 0301 	eor.w	r3, r3, #1
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d029      	beq.n	8005100 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80050ac:	4b5e      	ldr	r3, [pc, #376]	; (8005228 <checkAktifCalisma+0x5dc>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	f083 0301 	eor.w	r3, r3, #1
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d022      	beq.n	8005100 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80050ba:	4b5c      	ldr	r3, [pc, #368]	; (800522c <checkAktifCalisma+0x5e0>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	f083 0301 	eor.w	r3, r3, #1
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01b      	beq.n	8005100 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80050c8:	4b59      	ldr	r3, [pc, #356]	; (8005230 <checkAktifCalisma+0x5e4>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	f083 0301 	eor.w	r3, r3, #1
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d014      	beq.n	8005100 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80050d6:	4b57      	ldr	r3, [pc, #348]	; (8005234 <checkAktifCalisma+0x5e8>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	f083 0301 	eor.w	r3, r3, #1
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00d      	beq.n	8005100 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80050e4:	2201      	movs	r2, #1
 80050e6:	2102      	movs	r1, #2
 80050e8:	4847      	ldr	r0, [pc, #284]	; (8005208 <checkAktifCalisma+0x5bc>)
 80050ea:	f004 f936 	bl	800935a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80050ee:	4b4b      	ldr	r3, [pc, #300]	; (800521c <checkAktifCalisma+0x5d0>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80050f4:	4b50      	ldr	r3, [pc, #320]	; (8005238 <checkAktifCalisma+0x5ec>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80050fa:	4b50      	ldr	r3, [pc, #320]	; (800523c <checkAktifCalisma+0x5f0>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005100:	4b46      	ldr	r3, [pc, #280]	; (800521c <checkAktifCalisma+0x5d0>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d033      	beq.n	8005170 <checkAktifCalisma+0x524>
 8005108:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800510c:	483e      	ldr	r0, [pc, #248]	; (8005208 <checkAktifCalisma+0x5bc>)
 800510e:	f004 f90d 	bl	800932c <HAL_GPIO_ReadPin>
 8005112:	4603      	mov	r3, r0
 8005114:	2b01      	cmp	r3, #1
 8005116:	d106      	bne.n	8005126 <checkAktifCalisma+0x4da>
 8005118:	4b3c      	ldr	r3, [pc, #240]	; (800520c <checkAktifCalisma+0x5c0>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	f083 0301 	eor.w	r3, r3, #1
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <checkAktifCalisma+0x4f0>
 8005126:	2104      	movs	r1, #4
 8005128:	483a      	ldr	r0, [pc, #232]	; (8005214 <checkAktifCalisma+0x5c8>)
 800512a:	f004 f8ff 	bl	800932c <HAL_GPIO_ReadPin>
 800512e:	4603      	mov	r3, r0
 8005130:	2b01      	cmp	r3, #1
 8005132:	d11d      	bne.n	8005170 <checkAktifCalisma+0x524>
 8005134:	4b38      	ldr	r3, [pc, #224]	; (8005218 <checkAktifCalisma+0x5cc>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d019      	beq.n	8005170 <checkAktifCalisma+0x524>
 800513c:	4b30      	ldr	r3, [pc, #192]	; (8005200 <checkAktifCalisma+0x5b4>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d015      	beq.n	8005170 <checkAktifCalisma+0x524>
 8005144:	4b2f      	ldr	r3, [pc, #188]	; (8005204 <checkAktifCalisma+0x5b8>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d011      	beq.n	8005170 <checkAktifCalisma+0x524>
 800514c:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <checkAktifCalisma+0x5ac>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00d      	beq.n	8005170 <checkAktifCalisma+0x524>
 8005154:	4b3a      	ldr	r3, [pc, #232]	; (8005240 <checkAktifCalisma+0x5f4>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	f083 0301 	eor.w	r3, r3, #1
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d006      	beq.n	8005170 <checkAktifCalisma+0x524>
			timer2=millis;
 8005162:	4b38      	ldr	r3, [pc, #224]	; (8005244 <checkAktifCalisma+0x5f8>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a38      	ldr	r2, [pc, #224]	; (8005248 <checkAktifCalisma+0x5fc>)
 8005168:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800516a:	4b35      	ldr	r3, [pc, #212]	; (8005240 <checkAktifCalisma+0x5f4>)
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005170:	4b34      	ldr	r3, [pc, #208]	; (8005244 <checkAktifCalisma+0x5f8>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4b34      	ldr	r3, [pc, #208]	; (8005248 <checkAktifCalisma+0x5fc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	4a34      	ldr	r2, [pc, #208]	; (800524c <checkAktifCalisma+0x600>)
 800517c:	7812      	ldrb	r2, [r2, #0]
 800517e:	4293      	cmp	r3, r2
 8005180:	d303      	bcc.n	800518a <checkAktifCalisma+0x53e>
 8005182:	4b2f      	ldr	r3, [pc, #188]	; (8005240 <checkAktifCalisma+0x5f4>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d114      	bne.n	80051b4 <checkAktifCalisma+0x568>
 800518a:	4b1d      	ldr	r3, [pc, #116]	; (8005200 <checkAktifCalisma+0x5b4>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	f083 0301 	eor.w	r3, r3, #1
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10d      	bne.n	80051b4 <checkAktifCalisma+0x568>
 8005198:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <checkAktifCalisma+0x5b8>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	f083 0301 	eor.w	r3, r3, #1
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <checkAktifCalisma+0x568>
 80051a6:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <checkAktifCalisma+0x5ac>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	f083 0301 	eor.w	r3, r3, #1
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80051b4:	2200      	movs	r2, #0
 80051b6:	2102      	movs	r1, #2
 80051b8:	4813      	ldr	r0, [pc, #76]	; (8005208 <checkAktifCalisma+0x5bc>)
 80051ba:	f004 f8ce 	bl	800935a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80051be:	4b17      	ldr	r3, [pc, #92]	; (800521c <checkAktifCalisma+0x5d0>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80051c4:	4b1e      	ldr	r3, [pc, #120]	; (8005240 <checkAktifCalisma+0x5f4>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80051ca:	4b14      	ldr	r3, [pc, #80]	; (800521c <checkAktifCalisma+0x5d0>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d040      	beq.n	8005254 <checkAktifCalisma+0x608>
 80051d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051d6:	480f      	ldr	r0, [pc, #60]	; (8005214 <checkAktifCalisma+0x5c8>)
 80051d8:	f004 f8a8 	bl	800932c <HAL_GPIO_ReadPin>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d138      	bne.n	8005254 <checkAktifCalisma+0x608>
 80051e2:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <checkAktifCalisma+0x604>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d034      	beq.n	8005254 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80051ea:	2201      	movs	r2, #1
 80051ec:	2101      	movs	r1, #1
 80051ee:	4806      	ldr	r0, [pc, #24]	; (8005208 <checkAktifCalisma+0x5bc>)
 80051f0:	f004 f8b3 	bl	800935a <HAL_GPIO_WritePin>
 80051f4:	e033      	b.n	800525e <checkAktifCalisma+0x612>
 80051f6:	bf00      	nop
 80051f8:	20000277 	.word	0x20000277
 80051fc:	2000023d 	.word	0x2000023d
 8005200:	20000272 	.word	0x20000272
 8005204:	20000273 	.word	0x20000273
 8005208:	40010c00 	.word	0x40010c00
 800520c:	2000025d 	.word	0x2000025d
 8005210:	20000271 	.word	0x20000271
 8005214:	40011000 	.word	0x40011000
 8005218:	20000226 	.word	0x20000226
 800521c:	20000258 	.word	0x20000258
 8005220:	20000255 	.word	0x20000255
 8005224:	20000259 	.word	0x20000259
 8005228:	20000256 	.word	0x20000256
 800522c:	20000257 	.word	0x20000257
 8005230:	2000025a 	.word	0x2000025a
 8005234:	2000025b 	.word	0x2000025b
 8005238:	20000260 	.word	0x20000260
 800523c:	20000281 	.word	0x20000281
 8005240:	20000250 	.word	0x20000250
 8005244:	200001fc 	.word	0x200001fc
 8005248:	20000208 	.word	0x20000208
 800524c:	20000235 	.word	0x20000235
 8005250:	20000225 	.word	0x20000225
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005254:	2200      	movs	r2, #0
 8005256:	2101      	movs	r1, #1
 8005258:	4836      	ldr	r0, [pc, #216]	; (8005334 <checkAktifCalisma+0x6e8>)
 800525a:	f004 f87e 	bl	800935a <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800525e:	4b36      	ldr	r3, [pc, #216]	; (8005338 <checkAktifCalisma+0x6ec>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f040 8080 	bne.w	8005368 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005268:	4b34      	ldr	r3, [pc, #208]	; (800533c <checkAktifCalisma+0x6f0>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d003      	beq.n	8005278 <checkAktifCalisma+0x62c>
 8005270:	4b32      	ldr	r3, [pc, #200]	; (800533c <checkAktifCalisma+0x6f0>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b02      	cmp	r3, #2
 8005276:	d177      	bne.n	8005368 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005278:	4b31      	ldr	r3, [pc, #196]	; (8005340 <checkAktifCalisma+0x6f4>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d073      	beq.n	8005368 <checkAktifCalisma+0x71c>
 8005280:	4b30      	ldr	r3, [pc, #192]	; (8005344 <checkAktifCalisma+0x6f8>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d06f      	beq.n	8005368 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800528c:	4829      	ldr	r0, [pc, #164]	; (8005334 <checkAktifCalisma+0x6e8>)
 800528e:	f004 f84d 	bl	800932c <HAL_GPIO_ReadPin>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d167      	bne.n	8005368 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800529c:	482a      	ldr	r0, [pc, #168]	; (8005348 <checkAktifCalisma+0x6fc>)
 800529e:	f004 f845 	bl	800932c <HAL_GPIO_ReadPin>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <checkAktifCalisma+0x664>
 80052a8:	4b28      	ldr	r3, [pc, #160]	; (800534c <checkAktifCalisma+0x700>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d15b      	bne.n	8005368 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80052b0:	2140      	movs	r1, #64	; 0x40
 80052b2:	4825      	ldr	r0, [pc, #148]	; (8005348 <checkAktifCalisma+0x6fc>)
 80052b4:	f004 f83a 	bl	800932c <HAL_GPIO_ReadPin>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d10f      	bne.n	80052de <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80052be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052c2:	481c      	ldr	r0, [pc, #112]	; (8005334 <checkAktifCalisma+0x6e8>)
 80052c4:	f004 f832 	bl	800932c <HAL_GPIO_ReadPin>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d107      	bne.n	80052de <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80052ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052d2:	4818      	ldr	r0, [pc, #96]	; (8005334 <checkAktifCalisma+0x6e8>)
 80052d4:	f004 f82a 	bl	800932c <HAL_GPIO_ReadPin>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d003      	beq.n	80052e6 <checkAktifCalisma+0x69a>
 80052de:	4b1c      	ldr	r3, [pc, #112]	; (8005350 <checkAktifCalisma+0x704>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d040      	beq.n	8005368 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80052e6:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <checkAktifCalisma+0x708>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	f083 0301 	eor.w	r3, r3, #1
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d039      	beq.n	8005368 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80052f4:	4b18      	ldr	r3, [pc, #96]	; (8005358 <checkAktifCalisma+0x70c>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	f083 0301 	eor.w	r3, r3, #1
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d032      	beq.n	8005368 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005302:	4b16      	ldr	r3, [pc, #88]	; (800535c <checkAktifCalisma+0x710>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	f083 0301 	eor.w	r3, r3, #1
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d02b      	beq.n	8005368 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005310:	4b13      	ldr	r3, [pc, #76]	; (8005360 <checkAktifCalisma+0x714>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	f083 0301 	eor.w	r3, r3, #1
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d024      	beq.n	8005368 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <checkAktifCalisma+0x718>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	f083 0301 	eor.w	r3, r3, #1
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01d      	beq.n	8005368 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 800532c:	4b08      	ldr	r3, [pc, #32]	; (8005350 <checkAktifCalisma+0x704>)
 800532e:	2201      	movs	r2, #1
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	e01c      	b.n	800536e <checkAktifCalisma+0x722>
 8005334:	40010c00 	.word	0x40010c00
 8005338:	2000023d 	.word	0x2000023d
 800533c:	2000022f 	.word	0x2000022f
 8005340:	20000272 	.word	0x20000272
 8005344:	20000273 	.word	0x20000273
 8005348:	40011000 	.word	0x40011000
 800534c:	20000230 	.word	0x20000230
 8005350:	20000256 	.word	0x20000256
 8005354:	20000255 	.word	0x20000255
 8005358:	20000259 	.word	0x20000259
 800535c:	20000258 	.word	0x20000258
 8005360:	20000257 	.word	0x20000257
 8005364:	2000025b 	.word	0x2000025b
		} else {
			devmotoryukaricalisiyor=0;
 8005368:	4b64      	ldr	r3, [pc, #400]	; (80054fc <checkAktifCalisma+0x8b0>)
 800536a:	2200      	movs	r2, #0
 800536c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800536e:	4b63      	ldr	r3, [pc, #396]	; (80054fc <checkAktifCalisma+0x8b0>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005376:	2201      	movs	r2, #1
 8005378:	2120      	movs	r1, #32
 800537a:	4861      	ldr	r0, [pc, #388]	; (8005500 <checkAktifCalisma+0x8b4>)
 800537c:	f003 ffed 	bl	800935a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005380:	4b60      	ldr	r3, [pc, #384]	; (8005504 <checkAktifCalisma+0x8b8>)
 8005382:	2201      	movs	r2, #1
 8005384:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005386:	4b5f      	ldr	r3, [pc, #380]	; (8005504 <checkAktifCalisma+0x8b8>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d025      	beq.n	80053da <checkAktifCalisma+0x78e>
 800538e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005392:	485d      	ldr	r0, [pc, #372]	; (8005508 <checkAktifCalisma+0x8bc>)
 8005394:	f003 ffca 	bl	800932c <HAL_GPIO_ReadPin>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d007      	beq.n	80053ae <checkAktifCalisma+0x762>
 800539e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053a2:	4857      	ldr	r0, [pc, #348]	; (8005500 <checkAktifCalisma+0x8b4>)
 80053a4:	f003 ffc2 	bl	800932c <HAL_GPIO_ReadPin>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d115      	bne.n	80053da <checkAktifCalisma+0x78e>
 80053ae:	4b57      	ldr	r3, [pc, #348]	; (800550c <checkAktifCalisma+0x8c0>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d011      	beq.n	80053da <checkAktifCalisma+0x78e>
 80053b6:	4b56      	ldr	r3, [pc, #344]	; (8005510 <checkAktifCalisma+0x8c4>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00d      	beq.n	80053da <checkAktifCalisma+0x78e>
 80053be:	4b55      	ldr	r3, [pc, #340]	; (8005514 <checkAktifCalisma+0x8c8>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	f083 0301 	eor.w	r3, r3, #1
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d006      	beq.n	80053da <checkAktifCalisma+0x78e>
			timer2=millis;
 80053cc:	4b52      	ldr	r3, [pc, #328]	; (8005518 <checkAktifCalisma+0x8cc>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a52      	ldr	r2, [pc, #328]	; (800551c <checkAktifCalisma+0x8d0>)
 80053d2:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80053d4:	4b4f      	ldr	r3, [pc, #316]	; (8005514 <checkAktifCalisma+0x8c8>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80053da:	4b4f      	ldr	r3, [pc, #316]	; (8005518 <checkAktifCalisma+0x8cc>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b4f      	ldr	r3, [pc, #316]	; (800551c <checkAktifCalisma+0x8d0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	4a4e      	ldr	r2, [pc, #312]	; (8005520 <checkAktifCalisma+0x8d4>)
 80053e6:	7812      	ldrb	r2, [r2, #0]
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d303      	bcc.n	80053f4 <checkAktifCalisma+0x7a8>
 80053ec:	4b49      	ldr	r3, [pc, #292]	; (8005514 <checkAktifCalisma+0x8c8>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10d      	bne.n	8005410 <checkAktifCalisma+0x7c4>
 80053f4:	4b45      	ldr	r3, [pc, #276]	; (800550c <checkAktifCalisma+0x8c0>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f083 0301 	eor.w	r3, r3, #1
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <checkAktifCalisma+0x7c4>
 8005402:	4b43      	ldr	r3, [pc, #268]	; (8005510 <checkAktifCalisma+0x8c4>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	f083 0301 	eor.w	r3, r3, #1
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005410:	2200      	movs	r2, #0
 8005412:	2120      	movs	r1, #32
 8005414:	483a      	ldr	r0, [pc, #232]	; (8005500 <checkAktifCalisma+0x8b4>)
 8005416:	f003 ffa0 	bl	800935a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800541a:	4b3a      	ldr	r3, [pc, #232]	; (8005504 <checkAktifCalisma+0x8b8>)
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005420:	4b3c      	ldr	r3, [pc, #240]	; (8005514 <checkAktifCalisma+0x8c8>)
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005426:	4b3f      	ldr	r3, [pc, #252]	; (8005524 <checkAktifCalisma+0x8d8>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	f040 8088 	bne.w	8005540 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005430:	4b3d      	ldr	r3, [pc, #244]	; (8005528 <checkAktifCalisma+0x8dc>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d003      	beq.n	8005440 <checkAktifCalisma+0x7f4>
 8005438:	4b3b      	ldr	r3, [pc, #236]	; (8005528 <checkAktifCalisma+0x8dc>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b02      	cmp	r3, #2
 800543e:	d17f      	bne.n	8005540 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005440:	4b32      	ldr	r3, [pc, #200]	; (800550c <checkAktifCalisma+0x8c0>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d07b      	beq.n	8005540 <checkAktifCalisma+0x8f4>
 8005448:	4b31      	ldr	r3, [pc, #196]	; (8005510 <checkAktifCalisma+0x8c4>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d077      	beq.n	8005540 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005450:	2140      	movs	r1, #64	; 0x40
 8005452:	482b      	ldr	r0, [pc, #172]	; (8005500 <checkAktifCalisma+0x8b4>)
 8005454:	f003 ff6a 	bl	800932c <HAL_GPIO_ReadPin>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d170      	bne.n	8005540 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800545e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005462:	4827      	ldr	r0, [pc, #156]	; (8005500 <checkAktifCalisma+0x8b4>)
 8005464:	f003 ff62 	bl	800932c <HAL_GPIO_ReadPin>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <checkAktifCalisma+0x82a>
 800546e:	4b2f      	ldr	r3, [pc, #188]	; (800552c <checkAktifCalisma+0x8e0>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d164      	bne.n	8005540 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800547a:	4823      	ldr	r0, [pc, #140]	; (8005508 <checkAktifCalisma+0x8bc>)
 800547c:	f003 ff56 	bl	800932c <HAL_GPIO_ReadPin>
 8005480:	4603      	mov	r3, r0
 8005482:	2b01      	cmp	r3, #1
 8005484:	d10f      	bne.n	80054a6 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005486:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800548a:	481f      	ldr	r0, [pc, #124]	; (8005508 <checkAktifCalisma+0x8bc>)
 800548c:	f003 ff4e 	bl	800932c <HAL_GPIO_ReadPin>
 8005490:	4603      	mov	r3, r0
 8005492:	2b01      	cmp	r3, #1
 8005494:	d107      	bne.n	80054a6 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005496:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800549a:	481b      	ldr	r0, [pc, #108]	; (8005508 <checkAktifCalisma+0x8bc>)
 800549c:	f003 ff46 	bl	800932c <HAL_GPIO_ReadPin>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d003      	beq.n	80054ae <checkAktifCalisma+0x862>
 80054a6:	4b22      	ldr	r3, [pc, #136]	; (8005530 <checkAktifCalisma+0x8e4>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d048      	beq.n	8005540 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80054ae:	4b21      	ldr	r3, [pc, #132]	; (8005534 <checkAktifCalisma+0x8e8>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	f083 0301 	eor.w	r3, r3, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d041      	beq.n	8005540 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80054bc:	4b1e      	ldr	r3, [pc, #120]	; (8005538 <checkAktifCalisma+0x8ec>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	f083 0301 	eor.w	r3, r3, #1
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d03a      	beq.n	8005540 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80054ca:	4b1c      	ldr	r3, [pc, #112]	; (800553c <checkAktifCalisma+0x8f0>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	f083 0301 	eor.w	r3, r3, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d033      	beq.n	8005540 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80054d8:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <checkAktifCalisma+0x8b8>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	f083 0301 	eor.w	r3, r3, #1
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d02c      	beq.n	8005540 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <checkAktifCalisma+0x8b0>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	f083 0301 	eor.w	r3, r3, #1
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d025      	beq.n	8005540 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80054f4:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <checkAktifCalisma+0x8e4>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e024      	b.n	8005546 <checkAktifCalisma+0x8fa>
 80054fc:	20000256 	.word	0x20000256
 8005500:	40011000 	.word	0x40011000
 8005504:	2000025a 	.word	0x2000025a
 8005508:	40010c00 	.word	0x40010c00
 800550c:	20000272 	.word	0x20000272
 8005510:	20000273 	.word	0x20000273
 8005514:	20000252 	.word	0x20000252
 8005518:	200001fc 	.word	0x200001fc
 800551c:	20000208 	.word	0x20000208
 8005520:	20000236 	.word	0x20000236
 8005524:	2000023d 	.word	0x2000023d
 8005528:	2000022f 	.word	0x2000022f
 800552c:	20000231 	.word	0x20000231
 8005530:	20000257 	.word	0x20000257
 8005534:	20000255 	.word	0x20000255
 8005538:	20000259 	.word	0x20000259
 800553c:	20000258 	.word	0x20000258
		} else {
			devmotorasagicalisiyor=0;
 8005540:	4b96      	ldr	r3, [pc, #600]	; (800579c <checkAktifCalisma+0xb50>)
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005546:	4b95      	ldr	r3, [pc, #596]	; (800579c <checkAktifCalisma+0xb50>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800554e:	2201      	movs	r2, #1
 8005550:	2110      	movs	r1, #16
 8005552:	4893      	ldr	r0, [pc, #588]	; (80057a0 <checkAktifCalisma+0xb54>)
 8005554:	f003 ff01 	bl	800935a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005558:	4b92      	ldr	r3, [pc, #584]	; (80057a4 <checkAktifCalisma+0xb58>)
 800555a:	2201      	movs	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800555e:	4b91      	ldr	r3, [pc, #580]	; (80057a4 <checkAktifCalisma+0xb58>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d024      	beq.n	80055b0 <checkAktifCalisma+0x964>
 8005566:	2140      	movs	r1, #64	; 0x40
 8005568:	488d      	ldr	r0, [pc, #564]	; (80057a0 <checkAktifCalisma+0xb54>)
 800556a:	f003 fedf 	bl	800932c <HAL_GPIO_ReadPin>
 800556e:	4603      	mov	r3, r0
 8005570:	2b01      	cmp	r3, #1
 8005572:	d007      	beq.n	8005584 <checkAktifCalisma+0x938>
 8005574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005578:	4889      	ldr	r0, [pc, #548]	; (80057a0 <checkAktifCalisma+0xb54>)
 800557a:	f003 fed7 	bl	800932c <HAL_GPIO_ReadPin>
 800557e:	4603      	mov	r3, r0
 8005580:	2b01      	cmp	r3, #1
 8005582:	d115      	bne.n	80055b0 <checkAktifCalisma+0x964>
 8005584:	4b88      	ldr	r3, [pc, #544]	; (80057a8 <checkAktifCalisma+0xb5c>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d011      	beq.n	80055b0 <checkAktifCalisma+0x964>
 800558c:	4b87      	ldr	r3, [pc, #540]	; (80057ac <checkAktifCalisma+0xb60>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00d      	beq.n	80055b0 <checkAktifCalisma+0x964>
 8005594:	4b86      	ldr	r3, [pc, #536]	; (80057b0 <checkAktifCalisma+0xb64>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	f083 0301 	eor.w	r3, r3, #1
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d006      	beq.n	80055b0 <checkAktifCalisma+0x964>
			timer2=millis;
 80055a2:	4b84      	ldr	r3, [pc, #528]	; (80057b4 <checkAktifCalisma+0xb68>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a84      	ldr	r2, [pc, #528]	; (80057b8 <checkAktifCalisma+0xb6c>)
 80055a8:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80055aa:	4b81      	ldr	r3, [pc, #516]	; (80057b0 <checkAktifCalisma+0xb64>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80055b0:	4b80      	ldr	r3, [pc, #512]	; (80057b4 <checkAktifCalisma+0xb68>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	4b80      	ldr	r3, [pc, #512]	; (80057b8 <checkAktifCalisma+0xb6c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	4a80      	ldr	r2, [pc, #512]	; (80057bc <checkAktifCalisma+0xb70>)
 80055bc:	7812      	ldrb	r2, [r2, #0]
 80055be:	4293      	cmp	r3, r2
 80055c0:	d303      	bcc.n	80055ca <checkAktifCalisma+0x97e>
 80055c2:	4b7b      	ldr	r3, [pc, #492]	; (80057b0 <checkAktifCalisma+0xb64>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10d      	bne.n	80055e6 <checkAktifCalisma+0x99a>
 80055ca:	4b77      	ldr	r3, [pc, #476]	; (80057a8 <checkAktifCalisma+0xb5c>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	f083 0301 	eor.w	r3, r3, #1
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d106      	bne.n	80055e6 <checkAktifCalisma+0x99a>
 80055d8:	4b74      	ldr	r3, [pc, #464]	; (80057ac <checkAktifCalisma+0xb60>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	f083 0301 	eor.w	r3, r3, #1
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80055e6:	2200      	movs	r2, #0
 80055e8:	2110      	movs	r1, #16
 80055ea:	486d      	ldr	r0, [pc, #436]	; (80057a0 <checkAktifCalisma+0xb54>)
 80055ec:	f003 feb5 	bl	800935a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80055f0:	4b6c      	ldr	r3, [pc, #432]	; (80057a4 <checkAktifCalisma+0xb58>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80055f6:	4b6e      	ldr	r3, [pc, #440]	; (80057b0 <checkAktifCalisma+0xb64>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80055fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005600:	486f      	ldr	r0, [pc, #444]	; (80057c0 <checkAktifCalisma+0xb74>)
 8005602:	f003 fe93 	bl	800932c <HAL_GPIO_ReadPin>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d120      	bne.n	800564e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 800560c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005610:	486b      	ldr	r0, [pc, #428]	; (80057c0 <checkAktifCalisma+0xb74>)
 8005612:	f003 fe8b 	bl	800932c <HAL_GPIO_ReadPin>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d118      	bne.n	800564e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 800561c:	2104      	movs	r1, #4
 800561e:	4868      	ldr	r0, [pc, #416]	; (80057c0 <checkAktifCalisma+0xb74>)
 8005620:	f003 fe84 	bl	800932c <HAL_GPIO_ReadPin>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d111      	bne.n	800564e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800562a:	2102      	movs	r1, #2
 800562c:	4864      	ldr	r0, [pc, #400]	; (80057c0 <checkAktifCalisma+0xb74>)
 800562e:	f003 fe7d 	bl	800932c <HAL_GPIO_ReadPin>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005638:	2101      	movs	r1, #1
 800563a:	4861      	ldr	r0, [pc, #388]	; (80057c0 <checkAktifCalisma+0xb74>)
 800563c:	f003 fe76 	bl	800932c <HAL_GPIO_ReadPin>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d103      	bne.n	800564e <checkAktifCalisma+0xa02>
			makineStop=1;
 8005646:	4b5f      	ldr	r3, [pc, #380]	; (80057c4 <checkAktifCalisma+0xb78>)
 8005648:	2201      	movs	r2, #1
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	e002      	b.n	8005654 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800564e:	4b5d      	ldr	r3, [pc, #372]	; (80057c4 <checkAktifCalisma+0xb78>)
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005654:	4b5c      	ldr	r3, [pc, #368]	; (80057c8 <checkAktifCalisma+0xb7c>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d144      	bne.n	80056e6 <checkAktifCalisma+0xa9a>
 800565c:	4b5b      	ldr	r3, [pc, #364]	; (80057cc <checkAktifCalisma+0xb80>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d003      	beq.n	800566c <checkAktifCalisma+0xa20>
 8005664:	4b59      	ldr	r3, [pc, #356]	; (80057cc <checkAktifCalisma+0xb80>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b03      	cmp	r3, #3
 800566a:	d13c      	bne.n	80056e6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800566c:	2180      	movs	r1, #128	; 0x80
 800566e:	484c      	ldr	r0, [pc, #304]	; (80057a0 <checkAktifCalisma+0xb54>)
 8005670:	f003 fe5c 	bl	800932c <HAL_GPIO_ReadPin>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d103      	bne.n	8005682 <checkAktifCalisma+0xa36>
 800567a:	4b55      	ldr	r3, [pc, #340]	; (80057d0 <checkAktifCalisma+0xb84>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00b      	beq.n	800569a <checkAktifCalisma+0xa4e>
 8005682:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005686:	484e      	ldr	r0, [pc, #312]	; (80057c0 <checkAktifCalisma+0xb74>)
 8005688:	f003 fe50 	bl	800932c <HAL_GPIO_ReadPin>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d129      	bne.n	80056e6 <checkAktifCalisma+0xa9a>
 8005692:	4b4f      	ldr	r3, [pc, #316]	; (80057d0 <checkAktifCalisma+0xb84>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d125      	bne.n	80056e6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800569a:	2104      	movs	r1, #4
 800569c:	4840      	ldr	r0, [pc, #256]	; (80057a0 <checkAktifCalisma+0xb54>)
 800569e:	f003 fe45 	bl	800932c <HAL_GPIO_ReadPin>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d003      	beq.n	80056b0 <checkAktifCalisma+0xa64>
 80056a8:	4b4a      	ldr	r3, [pc, #296]	; (80057d4 <checkAktifCalisma+0xb88>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d11a      	bne.n	80056e6 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80056b0:	2102      	movs	r1, #2
 80056b2:	483b      	ldr	r0, [pc, #236]	; (80057a0 <checkAktifCalisma+0xb54>)
 80056b4:	f003 fe3a 	bl	800932c <HAL_GPIO_ReadPin>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d113      	bne.n	80056e6 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80056be:	4b46      	ldr	r3, [pc, #280]	; (80057d8 <checkAktifCalisma+0xb8c>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	f083 0301 	eor.w	r3, r3, #1
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00c      	beq.n	80056e6 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80056cc:	4b3d      	ldr	r3, [pc, #244]	; (80057c4 <checkAktifCalisma+0xb78>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80056d4:	4b41      	ldr	r3, [pc, #260]	; (80057dc <checkAktifCalisma+0xb90>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80056da:	4b36      	ldr	r3, [pc, #216]	; (80057b4 <checkAktifCalisma+0xb68>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a40      	ldr	r2, [pc, #256]	; (80057e0 <checkAktifCalisma+0xb94>)
 80056e0:	6013      	str	r3, [r2, #0]
			bekle();
 80056e2:	f7ff f935 	bl	8004950 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80056e6:	4b33      	ldr	r3, [pc, #204]	; (80057b4 <checkAktifCalisma+0xb68>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b3d      	ldr	r3, [pc, #244]	; (80057e0 <checkAktifCalisma+0xb94>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	4a3c      	ldr	r2, [pc, #240]	; (80057e4 <checkAktifCalisma+0xb98>)
 80056f2:	7812      	ldrb	r2, [r2, #0]
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d211      	bcs.n	800571c <checkAktifCalisma+0xad0>
 80056f8:	2104      	movs	r1, #4
 80056fa:	4829      	ldr	r0, [pc, #164]	; (80057a0 <checkAktifCalisma+0xb54>)
 80056fc:	f003 fe16 	bl	800932c <HAL_GPIO_ReadPin>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <checkAktifCalisma+0xad0>
 8005706:	4b33      	ldr	r3, [pc, #204]	; (80057d4 <checkAktifCalisma+0xb88>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d006      	beq.n	800571c <checkAktifCalisma+0xad0>
 800570e:	4b2d      	ldr	r3, [pc, #180]	; (80057c4 <checkAktifCalisma+0xb78>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	f083 0301 	eor.w	r3, r3, #1
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 800571c:	4b2f      	ldr	r3, [pc, #188]	; (80057dc <checkAktifCalisma+0xb90>)
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005722:	4b29      	ldr	r3, [pc, #164]	; (80057c8 <checkAktifCalisma+0xb7c>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d160      	bne.n	80057ec <checkAktifCalisma+0xba0>
 800572a:	4b28      	ldr	r3, [pc, #160]	; (80057cc <checkAktifCalisma+0xb80>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d003      	beq.n	800573a <checkAktifCalisma+0xaee>
 8005732:	4b26      	ldr	r3, [pc, #152]	; (80057cc <checkAktifCalisma+0xb80>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	2b03      	cmp	r3, #3
 8005738:	d158      	bne.n	80057ec <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800573a:	2104      	movs	r1, #4
 800573c:	4818      	ldr	r0, [pc, #96]	; (80057a0 <checkAktifCalisma+0xb54>)
 800573e:	f003 fdf5 	bl	800932c <HAL_GPIO_ReadPin>
 8005742:	4603      	mov	r3, r0
 8005744:	2b01      	cmp	r3, #1
 8005746:	d003      	beq.n	8005750 <checkAktifCalisma+0xb04>
 8005748:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <checkAktifCalisma+0xb88>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d14d      	bne.n	80057ec <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005750:	2102      	movs	r1, #2
 8005752:	4813      	ldr	r0, [pc, #76]	; (80057a0 <checkAktifCalisma+0xb54>)
 8005754:	f003 fdea 	bl	800932c <HAL_GPIO_ReadPin>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d146      	bne.n	80057ec <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800575e:	2180      	movs	r1, #128	; 0x80
 8005760:	480f      	ldr	r0, [pc, #60]	; (80057a0 <checkAktifCalisma+0xb54>)
 8005762:	f003 fde3 	bl	800932c <HAL_GPIO_ReadPin>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d103      	bne.n	8005774 <checkAktifCalisma+0xb28>
 800576c:	4b18      	ldr	r3, [pc, #96]	; (80057d0 <checkAktifCalisma+0xb84>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00b      	beq.n	800578c <checkAktifCalisma+0xb40>
 8005774:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005778:	4811      	ldr	r0, [pc, #68]	; (80057c0 <checkAktifCalisma+0xb74>)
 800577a:	f003 fdd7 	bl	800932c <HAL_GPIO_ReadPin>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d133      	bne.n	80057ec <checkAktifCalisma+0xba0>
 8005784:	4b12      	ldr	r3, [pc, #72]	; (80057d0 <checkAktifCalisma+0xb84>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d12f      	bne.n	80057ec <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 800578c:	4b0d      	ldr	r3, [pc, #52]	; (80057c4 <checkAktifCalisma+0xb78>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d02b      	beq.n	80057ec <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005794:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <checkAktifCalisma+0xb9c>)
 8005796:	2201      	movs	r2, #1
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	e02a      	b.n	80057f2 <checkAktifCalisma+0xba6>
 800579c:	20000257 	.word	0x20000257
 80057a0:	40011000 	.word	0x40011000
 80057a4:	2000025b 	.word	0x2000025b
 80057a8:	20000272 	.word	0x20000272
 80057ac:	20000273 	.word	0x20000273
 80057b0:	20000253 	.word	0x20000253
 80057b4:	200001fc 	.word	0x200001fc
 80057b8:	20000208 	.word	0x20000208
 80057bc:	20000236 	.word	0x20000236
 80057c0:	40010c00 	.word	0x40010c00
 80057c4:	20000262 	.word	0x20000262
 80057c8:	20000229 	.word	0x20000229
 80057cc:	20000228 	.word	0x20000228
 80057d0:	2000022c 	.word	0x2000022c
 80057d4:	20000226 	.word	0x20000226
 80057d8:	2000024f 	.word	0x2000024f
 80057dc:	20000263 	.word	0x20000263
 80057e0:	20000200 	.word	0x20000200
 80057e4:	20000239 	.word	0x20000239
 80057e8:	20000264 	.word	0x20000264
		} else {
			kapi1butonkontrol=0;
 80057ec:	4b8b      	ldr	r3, [pc, #556]	; (8005a1c <checkAktifCalisma+0xdd0>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057f2:	4b8b      	ldr	r3, [pc, #556]	; (8005a20 <checkAktifCalisma+0xdd4>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d121      	bne.n	800583e <checkAktifCalisma+0xbf2>
 80057fa:	4b8a      	ldr	r3, [pc, #552]	; (8005a24 <checkAktifCalisma+0xdd8>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d003      	beq.n	800580a <checkAktifCalisma+0xbbe>
 8005802:	4b88      	ldr	r3, [pc, #544]	; (8005a24 <checkAktifCalisma+0xdd8>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b03      	cmp	r3, #3
 8005808:	d119      	bne.n	800583e <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800580a:	2104      	movs	r1, #4
 800580c:	4886      	ldr	r0, [pc, #536]	; (8005a28 <checkAktifCalisma+0xddc>)
 800580e:	f003 fd8d 	bl	800932c <HAL_GPIO_ReadPin>
 8005812:	4603      	mov	r3, r0
 8005814:	2b01      	cmp	r3, #1
 8005816:	d003      	beq.n	8005820 <checkAktifCalisma+0xbd4>
 8005818:	4b84      	ldr	r3, [pc, #528]	; (8005a2c <checkAktifCalisma+0xde0>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10e      	bne.n	800583e <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005820:	2102      	movs	r1, #2
 8005822:	4881      	ldr	r0, [pc, #516]	; (8005a28 <checkAktifCalisma+0xddc>)
 8005824:	f003 fd82 	bl	800932c <HAL_GPIO_ReadPin>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d107      	bne.n	800583e <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 800582e:	4b80      	ldr	r3, [pc, #512]	; (8005a30 <checkAktifCalisma+0xde4>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005836:	4b7f      	ldr	r3, [pc, #508]	; (8005a34 <checkAktifCalisma+0xde8>)
 8005838:	2201      	movs	r2, #1
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	e002      	b.n	8005844 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 800583e:	4b7d      	ldr	r3, [pc, #500]	; (8005a34 <checkAktifCalisma+0xde8>)
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005844:	4b75      	ldr	r3, [pc, #468]	; (8005a1c <checkAktifCalisma+0xdd0>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d107      	bne.n	800585c <checkAktifCalisma+0xc10>
 800584c:	4b79      	ldr	r3, [pc, #484]	; (8005a34 <checkAktifCalisma+0xde8>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d103      	bne.n	800585c <checkAktifCalisma+0xc10>
 8005854:	4b78      	ldr	r3, [pc, #480]	; (8005a38 <checkAktifCalisma+0xdec>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d005      	beq.n	8005868 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800585c:	2201      	movs	r2, #1
 800585e:	2180      	movs	r1, #128	; 0x80
 8005860:	4876      	ldr	r0, [pc, #472]	; (8005a3c <checkAktifCalisma+0xdf0>)
 8005862:	f003 fd7a 	bl	800935a <HAL_GPIO_WritePin>
 8005866:	e004      	b.n	8005872 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005868:	2200      	movs	r2, #0
 800586a:	2180      	movs	r1, #128	; 0x80
 800586c:	4873      	ldr	r0, [pc, #460]	; (8005a3c <checkAktifCalisma+0xdf0>)
 800586e:	f003 fd74 	bl	800935a <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005872:	4b73      	ldr	r3, [pc, #460]	; (8005a40 <checkAktifCalisma+0xdf4>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d141      	bne.n	80058fe <checkAktifCalisma+0xcb2>
 800587a:	4b6a      	ldr	r3, [pc, #424]	; (8005a24 <checkAktifCalisma+0xdd8>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d003      	beq.n	800588a <checkAktifCalisma+0xc3e>
 8005882:	4b68      	ldr	r3, [pc, #416]	; (8005a24 <checkAktifCalisma+0xdd8>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b03      	cmp	r3, #3
 8005888:	d139      	bne.n	80058fe <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800588a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800588e:	4866      	ldr	r0, [pc, #408]	; (8005a28 <checkAktifCalisma+0xddc>)
 8005890:	f003 fd4c 	bl	800932c <HAL_GPIO_ReadPin>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d103      	bne.n	80058a2 <checkAktifCalisma+0xc56>
 800589a:	4b6a      	ldr	r3, [pc, #424]	; (8005a44 <checkAktifCalisma+0xdf8>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00b      	beq.n	80058ba <checkAktifCalisma+0xc6e>
 80058a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058a6:	4868      	ldr	r0, [pc, #416]	; (8005a48 <checkAktifCalisma+0xdfc>)
 80058a8:	f003 fd40 	bl	800932c <HAL_GPIO_ReadPin>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d125      	bne.n	80058fe <checkAktifCalisma+0xcb2>
 80058b2:	4b64      	ldr	r3, [pc, #400]	; (8005a44 <checkAktifCalisma+0xdf8>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d121      	bne.n	80058fe <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80058ba:	2102      	movs	r1, #2
 80058bc:	485a      	ldr	r0, [pc, #360]	; (8005a28 <checkAktifCalisma+0xddc>)
 80058be:	f003 fd35 	bl	800932c <HAL_GPIO_ReadPin>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d11a      	bne.n	80058fe <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80058c8:	2104      	movs	r1, #4
 80058ca:	4857      	ldr	r0, [pc, #348]	; (8005a28 <checkAktifCalisma+0xddc>)
 80058cc:	f003 fd2e 	bl	800932c <HAL_GPIO_ReadPin>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d113      	bne.n	80058fe <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80058d6:	4b56      	ldr	r3, [pc, #344]	; (8005a30 <checkAktifCalisma+0xde4>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00f      	beq.n	80058fe <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80058de:	4b5b      	ldr	r3, [pc, #364]	; (8005a4c <checkAktifCalisma+0xe00>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f083 0301 	eor.w	r3, r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80058ec:	4b58      	ldr	r3, [pc, #352]	; (8005a50 <checkAktifCalisma+0xe04>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80058f2:	4b58      	ldr	r3, [pc, #352]	; (8005a54 <checkAktifCalisma+0xe08>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a58      	ldr	r2, [pc, #352]	; (8005a58 <checkAktifCalisma+0xe0c>)
 80058f8:	6013      	str	r3, [r2, #0]
			bekle();
 80058fa:	f7ff f829 	bl	8004950 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80058fe:	4b55      	ldr	r3, [pc, #340]	; (8005a54 <checkAktifCalisma+0xe08>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	4b55      	ldr	r3, [pc, #340]	; (8005a58 <checkAktifCalisma+0xe0c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	4a54      	ldr	r2, [pc, #336]	; (8005a5c <checkAktifCalisma+0xe10>)
 800590a:	7812      	ldrb	r2, [r2, #0]
 800590c:	4293      	cmp	r3, r2
 800590e:	d20d      	bcs.n	800592c <checkAktifCalisma+0xce0>
 8005910:	2102      	movs	r1, #2
 8005912:	4845      	ldr	r0, [pc, #276]	; (8005a28 <checkAktifCalisma+0xddc>)
 8005914:	f003 fd0a 	bl	800932c <HAL_GPIO_ReadPin>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d006      	beq.n	800592c <checkAktifCalisma+0xce0>
 800591e:	4b44      	ldr	r3, [pc, #272]	; (8005a30 <checkAktifCalisma+0xde4>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	f083 0301 	eor.w	r3, r3, #1
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 800592c:	4b48      	ldr	r3, [pc, #288]	; (8005a50 <checkAktifCalisma+0xe04>)
 800592e:	2200      	movs	r2, #0
 8005930:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005932:	4b43      	ldr	r3, [pc, #268]	; (8005a40 <checkAktifCalisma+0xdf4>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d135      	bne.n	80059a6 <checkAktifCalisma+0xd5a>
 800593a:	4b3a      	ldr	r3, [pc, #232]	; (8005a24 <checkAktifCalisma+0xdd8>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d003      	beq.n	800594a <checkAktifCalisma+0xcfe>
 8005942:	4b38      	ldr	r3, [pc, #224]	; (8005a24 <checkAktifCalisma+0xdd8>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b03      	cmp	r3, #3
 8005948:	d12d      	bne.n	80059a6 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800594a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800594e:	4836      	ldr	r0, [pc, #216]	; (8005a28 <checkAktifCalisma+0xddc>)
 8005950:	f003 fcec 	bl	800932c <HAL_GPIO_ReadPin>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d103      	bne.n	8005962 <checkAktifCalisma+0xd16>
 800595a:	4b3a      	ldr	r3, [pc, #232]	; (8005a44 <checkAktifCalisma+0xdf8>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00b      	beq.n	800597a <checkAktifCalisma+0xd2e>
 8005962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005966:	4838      	ldr	r0, [pc, #224]	; (8005a48 <checkAktifCalisma+0xdfc>)
 8005968:	f003 fce0 	bl	800932c <HAL_GPIO_ReadPin>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d119      	bne.n	80059a6 <checkAktifCalisma+0xd5a>
 8005972:	4b34      	ldr	r3, [pc, #208]	; (8005a44 <checkAktifCalisma+0xdf8>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d115      	bne.n	80059a6 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800597a:	2102      	movs	r1, #2
 800597c:	482a      	ldr	r0, [pc, #168]	; (8005a28 <checkAktifCalisma+0xddc>)
 800597e:	f003 fcd5 	bl	800932c <HAL_GPIO_ReadPin>
 8005982:	4603      	mov	r3, r0
 8005984:	2b01      	cmp	r3, #1
 8005986:	d10e      	bne.n	80059a6 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005988:	2104      	movs	r1, #4
 800598a:	4827      	ldr	r0, [pc, #156]	; (8005a28 <checkAktifCalisma+0xddc>)
 800598c:	f003 fcce 	bl	800932c <HAL_GPIO_ReadPin>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d107      	bne.n	80059a6 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005996:	4b26      	ldr	r3, [pc, #152]	; (8005a30 <checkAktifCalisma+0xde4>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800599e:	4b30      	ldr	r3, [pc, #192]	; (8005a60 <checkAktifCalisma+0xe14>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	e002      	b.n	80059ac <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80059a6:	4b2e      	ldr	r3, [pc, #184]	; (8005a60 <checkAktifCalisma+0xe14>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059ac:	4b24      	ldr	r3, [pc, #144]	; (8005a40 <checkAktifCalisma+0xdf4>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d11d      	bne.n	80059f0 <checkAktifCalisma+0xda4>
 80059b4:	4b1b      	ldr	r3, [pc, #108]	; (8005a24 <checkAktifCalisma+0xdd8>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d003      	beq.n	80059c4 <checkAktifCalisma+0xd78>
 80059bc:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <checkAktifCalisma+0xdd8>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d115      	bne.n	80059f0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80059c4:	2102      	movs	r1, #2
 80059c6:	4818      	ldr	r0, [pc, #96]	; (8005a28 <checkAktifCalisma+0xddc>)
 80059c8:	f003 fcb0 	bl	800932c <HAL_GPIO_ReadPin>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d10e      	bne.n	80059f0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80059d2:	2104      	movs	r1, #4
 80059d4:	4814      	ldr	r0, [pc, #80]	; (8005a28 <checkAktifCalisma+0xddc>)
 80059d6:	f003 fca9 	bl	800932c <HAL_GPIO_ReadPin>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d107      	bne.n	80059f0 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80059e0:	4b13      	ldr	r3, [pc, #76]	; (8005a30 <checkAktifCalisma+0xde4>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80059e8:	4b1e      	ldr	r3, [pc, #120]	; (8005a64 <checkAktifCalisma+0xe18>)
 80059ea:	2201      	movs	r2, #1
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e002      	b.n	80059f6 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80059f0:	4b1c      	ldr	r3, [pc, #112]	; (8005a64 <checkAktifCalisma+0xe18>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80059f6:	4b1a      	ldr	r3, [pc, #104]	; (8005a60 <checkAktifCalisma+0xe14>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d107      	bne.n	8005a0e <checkAktifCalisma+0xdc2>
 80059fe:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <checkAktifCalisma+0xe18>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <checkAktifCalisma+0xdc2>
 8005a06:	4b12      	ldr	r3, [pc, #72]	; (8005a50 <checkAktifCalisma+0xe04>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d02c      	beq.n	8005a68 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005a0e:	2201      	movs	r2, #1
 8005a10:	2140      	movs	r1, #64	; 0x40
 8005a12:	480a      	ldr	r0, [pc, #40]	; (8005a3c <checkAktifCalisma+0xdf0>)
 8005a14:	f003 fca1 	bl	800935a <HAL_GPIO_WritePin>
 8005a18:	e02b      	b.n	8005a72 <checkAktifCalisma+0xe26>
 8005a1a:	bf00      	nop
 8005a1c:	20000264 	.word	0x20000264
 8005a20:	20000229 	.word	0x20000229
 8005a24:	20000228 	.word	0x20000228
 8005a28:	40011000 	.word	0x40011000
 8005a2c:	20000226 	.word	0x20000226
 8005a30:	20000262 	.word	0x20000262
 8005a34:	20000265 	.word	0x20000265
 8005a38:	20000263 	.word	0x20000263
 8005a3c:	40010800 	.word	0x40010800
 8005a40:	2000022a 	.word	0x2000022a
 8005a44:	2000022c 	.word	0x2000022c
 8005a48:	40010c00 	.word	0x40010c00
 8005a4c:	2000024f 	.word	0x2000024f
 8005a50:	20000266 	.word	0x20000266
 8005a54:	200001fc 	.word	0x200001fc
 8005a58:	20000200 	.word	0x20000200
 8005a5c:	2000023a 	.word	0x2000023a
 8005a60:	20000267 	.word	0x20000267
 8005a64:	20000268 	.word	0x20000268
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2140      	movs	r1, #64	; 0x40
 8005a6c:	488d      	ldr	r0, [pc, #564]	; (8005ca4 <checkAktifCalisma+0x1058>)
 8005a6e:	f003 fc74 	bl	800935a <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005a72:	4b8d      	ldr	r3, [pc, #564]	; (8005ca8 <checkAktifCalisma+0x105c>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <checkAktifCalisma+0xe36>
 8005a7a:	4b8b      	ldr	r3, [pc, #556]	; (8005ca8 <checkAktifCalisma+0x105c>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d115      	bne.n	8005aae <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a82:	2104      	movs	r1, #4
 8005a84:	4889      	ldr	r0, [pc, #548]	; (8005cac <checkAktifCalisma+0x1060>)
 8005a86:	f003 fc51 	bl	800932c <HAL_GPIO_ReadPin>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d003      	beq.n	8005a98 <checkAktifCalisma+0xe4c>
 8005a90:	4b87      	ldr	r3, [pc, #540]	; (8005cb0 <checkAktifCalisma+0x1064>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10a      	bne.n	8005aae <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005a98:	2102      	movs	r1, #2
 8005a9a:	4884      	ldr	r0, [pc, #528]	; (8005cac <checkAktifCalisma+0x1060>)
 8005a9c:	f003 fc46 	bl	800932c <HAL_GPIO_ReadPin>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d103      	bne.n	8005aae <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005aa6:	4b83      	ldr	r3, [pc, #524]	; (8005cb4 <checkAktifCalisma+0x1068>)
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	e002      	b.n	8005ab4 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005aae:	4b81      	ldr	r3, [pc, #516]	; (8005cb4 <checkAktifCalisma+0x1068>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005ab4:	4b7c      	ldr	r3, [pc, #496]	; (8005ca8 <checkAktifCalisma+0x105c>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d003      	beq.n	8005ac4 <checkAktifCalisma+0xe78>
 8005abc:	4b7a      	ldr	r3, [pc, #488]	; (8005ca8 <checkAktifCalisma+0x105c>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d111      	bne.n	8005ae8 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	4879      	ldr	r0, [pc, #484]	; (8005cac <checkAktifCalisma+0x1060>)
 8005ac8:	f003 fc30 	bl	800932c <HAL_GPIO_ReadPin>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d10a      	bne.n	8005ae8 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005ad2:	2104      	movs	r1, #4
 8005ad4:	4875      	ldr	r0, [pc, #468]	; (8005cac <checkAktifCalisma+0x1060>)
 8005ad6:	f003 fc29 	bl	800932c <HAL_GPIO_ReadPin>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d103      	bne.n	8005ae8 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005ae0:	4b75      	ldr	r3, [pc, #468]	; (8005cb8 <checkAktifCalisma+0x106c>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	e002      	b.n	8005aee <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005ae8:	4b73      	ldr	r3, [pc, #460]	; (8005cb8 <checkAktifCalisma+0x106c>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005aee:	4b71      	ldr	r3, [pc, #452]	; (8005cb4 <checkAktifCalisma+0x1068>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00f      	beq.n	8005b16 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005af6:	4b71      	ldr	r3, [pc, #452]	; (8005cbc <checkAktifCalisma+0x1070>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d10b      	bne.n	8005b16 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005afe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b02:	486f      	ldr	r0, [pc, #444]	; (8005cc0 <checkAktifCalisma+0x1074>)
 8005b04:	f003 fc12 	bl	800932c <HAL_GPIO_ReadPin>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d103      	bne.n	8005b16 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005b0e:	4b6d      	ldr	r3, [pc, #436]	; (8005cc4 <checkAktifCalisma+0x1078>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	e002      	b.n	8005b1c <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005b16:	4b6b      	ldr	r3, [pc, #428]	; (8005cc4 <checkAktifCalisma+0x1078>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005b1c:	4b66      	ldr	r3, [pc, #408]	; (8005cb8 <checkAktifCalisma+0x106c>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00f      	beq.n	8005b44 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005b24:	4b65      	ldr	r3, [pc, #404]	; (8005cbc <checkAktifCalisma+0x1070>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d10b      	bne.n	8005b44 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b30:	4863      	ldr	r0, [pc, #396]	; (8005cc0 <checkAktifCalisma+0x1074>)
 8005b32:	f003 fbfb 	bl	800932c <HAL_GPIO_ReadPin>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005b3c:	4b62      	ldr	r3, [pc, #392]	; (8005cc8 <checkAktifCalisma+0x107c>)
 8005b3e:	2201      	movs	r2, #1
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	e002      	b.n	8005b4a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005b44:	4b60      	ldr	r3, [pc, #384]	; (8005cc8 <checkAktifCalisma+0x107c>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005b4a:	4b60      	ldr	r3, [pc, #384]	; (8005ccc <checkAktifCalisma+0x1080>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d137      	bne.n	8005bc2 <checkAktifCalisma+0xf76>
 8005b52:	4b5f      	ldr	r3, [pc, #380]	; (8005cd0 <checkAktifCalisma+0x1084>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d003      	beq.n	8005b62 <checkAktifCalisma+0xf16>
 8005b5a:	4b5d      	ldr	r3, [pc, #372]	; (8005cd0 <checkAktifCalisma+0x1084>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d12f      	bne.n	8005bc2 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005b62:	4b54      	ldr	r3, [pc, #336]	; (8005cb4 <checkAktifCalisma+0x1068>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d103      	bne.n	8005b72 <checkAktifCalisma+0xf26>
 8005b6a:	4b53      	ldr	r3, [pc, #332]	; (8005cb8 <checkAktifCalisma+0x106c>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d027      	beq.n	8005bc2 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005b72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b76:	484d      	ldr	r0, [pc, #308]	; (8005cac <checkAktifCalisma+0x1060>)
 8005b78:	f003 fbd8 	bl	800932c <HAL_GPIO_ReadPin>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d103      	bne.n	8005b8a <checkAktifCalisma+0xf3e>
 8005b82:	4b4e      	ldr	r3, [pc, #312]	; (8005cbc <checkAktifCalisma+0x1070>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005b8a:	4b4e      	ldr	r3, [pc, #312]	; (8005cc4 <checkAktifCalisma+0x1078>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d103      	bne.n	8005b9a <checkAktifCalisma+0xf4e>
 8005b92:	4b4d      	ldr	r3, [pc, #308]	; (8005cc8 <checkAktifCalisma+0x107c>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d013      	beq.n	8005bc2 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005b9a:	4b4e      	ldr	r3, [pc, #312]	; (8005cd4 <checkAktifCalisma+0x1088>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00f      	beq.n	8005bc2 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005ba2:	4b4d      	ldr	r3, [pc, #308]	; (8005cd8 <checkAktifCalisma+0x108c>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	f083 0301 	eor.w	r3, r3, #1
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d008      	beq.n	8005bc2 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005bb0:	4b4a      	ldr	r3, [pc, #296]	; (8005cdc <checkAktifCalisma+0x1090>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005bb6:	4b4a      	ldr	r3, [pc, #296]	; (8005ce0 <checkAktifCalisma+0x1094>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a4a      	ldr	r2, [pc, #296]	; (8005ce4 <checkAktifCalisma+0x1098>)
 8005bbc:	6013      	str	r3, [r2, #0]
			bekle();
 8005bbe:	f7fe fec7 	bl	8004950 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005bc2:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <checkAktifCalisma+0x1094>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4b47      	ldr	r3, [pc, #284]	; (8005ce4 <checkAktifCalisma+0x1098>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	4a46      	ldr	r2, [pc, #280]	; (8005ce8 <checkAktifCalisma+0x109c>)
 8005bce:	7812      	ldrb	r2, [r2, #0]
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d214      	bcs.n	8005bfe <checkAktifCalisma+0xfb2>
 8005bd4:	4b37      	ldr	r3, [pc, #220]	; (8005cb4 <checkAktifCalisma+0x1068>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	f083 0301 	eor.w	r3, r3, #1
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d006      	beq.n	8005bf0 <checkAktifCalisma+0xfa4>
 8005be2:	4b35      	ldr	r3, [pc, #212]	; (8005cb8 <checkAktifCalisma+0x106c>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	f083 0301 	eor.w	r3, r3, #1
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d106      	bne.n	8005bfe <checkAktifCalisma+0xfb2>
 8005bf0:	4b38      	ldr	r3, [pc, #224]	; (8005cd4 <checkAktifCalisma+0x1088>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	f083 0301 	eor.w	r3, r3, #1
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005bfe:	4b37      	ldr	r3, [pc, #220]	; (8005cdc <checkAktifCalisma+0x1090>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c04:	4b31      	ldr	r3, [pc, #196]	; (8005ccc <checkAktifCalisma+0x1080>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d12b      	bne.n	8005c64 <checkAktifCalisma+0x1018>
 8005c0c:	4b30      	ldr	r3, [pc, #192]	; (8005cd0 <checkAktifCalisma+0x1084>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d003      	beq.n	8005c1c <checkAktifCalisma+0xfd0>
 8005c14:	4b2e      	ldr	r3, [pc, #184]	; (8005cd0 <checkAktifCalisma+0x1084>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d123      	bne.n	8005c64 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c1c:	4b25      	ldr	r3, [pc, #148]	; (8005cb4 <checkAktifCalisma+0x1068>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d103      	bne.n	8005c2c <checkAktifCalisma+0xfe0>
 8005c24:	4b24      	ldr	r3, [pc, #144]	; (8005cb8 <checkAktifCalisma+0x106c>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01b      	beq.n	8005c64 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c30:	481e      	ldr	r0, [pc, #120]	; (8005cac <checkAktifCalisma+0x1060>)
 8005c32:	f003 fb7b 	bl	800932c <HAL_GPIO_ReadPin>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d103      	bne.n	8005c44 <checkAktifCalisma+0xff8>
 8005c3c:	4b1f      	ldr	r3, [pc, #124]	; (8005cbc <checkAktifCalisma+0x1070>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005c44:	4b1f      	ldr	r3, [pc, #124]	; (8005cc4 <checkAktifCalisma+0x1078>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d103      	bne.n	8005c54 <checkAktifCalisma+0x1008>
 8005c4c:	4b1e      	ldr	r3, [pc, #120]	; (8005cc8 <checkAktifCalisma+0x107c>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005c54:	4b1f      	ldr	r3, [pc, #124]	; (8005cd4 <checkAktifCalisma+0x1088>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005c5c:	4b23      	ldr	r3, [pc, #140]	; (8005cec <checkAktifCalisma+0x10a0>)
 8005c5e:	2201      	movs	r2, #1
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	e002      	b.n	8005c6a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005c64:	4b21      	ldr	r3, [pc, #132]	; (8005cec <checkAktifCalisma+0x10a0>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c6a:	4b18      	ldr	r3, [pc, #96]	; (8005ccc <checkAktifCalisma+0x1080>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d140      	bne.n	8005cf4 <checkAktifCalisma+0x10a8>
 8005c72:	4b17      	ldr	r3, [pc, #92]	; (8005cd0 <checkAktifCalisma+0x1084>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d003      	beq.n	8005c82 <checkAktifCalisma+0x1036>
 8005c7a:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <checkAktifCalisma+0x1084>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d138      	bne.n	8005cf4 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c82:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <checkAktifCalisma+0x1068>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <checkAktifCalisma+0x1046>
 8005c8a:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <checkAktifCalisma+0x106c>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d030      	beq.n	8005cf4 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005c92:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <checkAktifCalisma+0x1088>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d02c      	beq.n	8005cf4 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005c9a:	4b15      	ldr	r3, [pc, #84]	; (8005cf0 <checkAktifCalisma+0x10a4>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	701a      	strb	r2, [r3, #0]
 8005ca0:	e02b      	b.n	8005cfa <checkAktifCalisma+0x10ae>
 8005ca2:	bf00      	nop
 8005ca4:	40010800 	.word	0x40010800
 8005ca8:	2000022d 	.word	0x2000022d
 8005cac:	40011000 	.word	0x40011000
 8005cb0:	20000226 	.word	0x20000226
 8005cb4:	2000026c 	.word	0x2000026c
 8005cb8:	2000026d 	.word	0x2000026d
 8005cbc:	2000022c 	.word	0x2000022c
 8005cc0:	40010c00 	.word	0x40010c00
 8005cc4:	2000027c 	.word	0x2000027c
 8005cc8:	2000027d 	.word	0x2000027d
 8005ccc:	2000022b 	.word	0x2000022b
 8005cd0:	20000228 	.word	0x20000228
 8005cd4:	20000262 	.word	0x20000262
 8005cd8:	2000024f 	.word	0x2000024f
 8005cdc:	20000269 	.word	0x20000269
 8005ce0:	200001fc 	.word	0x200001fc
 8005ce4:	20000200 	.word	0x20000200
 8005ce8:	2000023b 	.word	0x2000023b
 8005cec:	2000026a 	.word	0x2000026a
 8005cf0:	2000026b 	.word	0x2000026b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005cf4:	4b8b      	ldr	r3, [pc, #556]	; (8005f24 <checkAktifCalisma+0x12d8>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005cfa:	4b8b      	ldr	r3, [pc, #556]	; (8005f28 <checkAktifCalisma+0x12dc>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d107      	bne.n	8005d12 <checkAktifCalisma+0x10c6>
 8005d02:	4b8a      	ldr	r3, [pc, #552]	; (8005f2c <checkAktifCalisma+0x12e0>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <checkAktifCalisma+0x10c6>
 8005d0a:	4b86      	ldr	r3, [pc, #536]	; (8005f24 <checkAktifCalisma+0x12d8>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005d12:	2201      	movs	r2, #1
 8005d14:	2120      	movs	r1, #32
 8005d16:	4886      	ldr	r0, [pc, #536]	; (8005f30 <checkAktifCalisma+0x12e4>)
 8005d18:	f003 fb1f 	bl	800935a <HAL_GPIO_WritePin>
 8005d1c:	e004      	b.n	8005d28 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2120      	movs	r1, #32
 8005d22:	4883      	ldr	r0, [pc, #524]	; (8005f30 <checkAktifCalisma+0x12e4>)
 8005d24:	f003 fb19 	bl	800935a <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005d28:	4b82      	ldr	r3, [pc, #520]	; (8005f34 <checkAktifCalisma+0x12e8>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00e      	beq.n	8005d4e <checkAktifCalisma+0x1102>
 8005d30:	2102      	movs	r1, #2
 8005d32:	4881      	ldr	r0, [pc, #516]	; (8005f38 <checkAktifCalisma+0x12ec>)
 8005d34:	f003 fafa 	bl	800932c <HAL_GPIO_ReadPin>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d107      	bne.n	8005d4e <checkAktifCalisma+0x1102>
 8005d3e:	4b7f      	ldr	r3, [pc, #508]	; (8005f3c <checkAktifCalisma+0x12f0>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d103      	bne.n	8005d4e <checkAktifCalisma+0x1102>
 8005d46:	4b7e      	ldr	r3, [pc, #504]	; (8005f40 <checkAktifCalisma+0x12f4>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d112      	bne.n	8005d74 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005d4e:	4b7d      	ldr	r3, [pc, #500]	; (8005f44 <checkAktifCalisma+0x12f8>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d066      	beq.n	8005e24 <checkAktifCalisma+0x11d8>
 8005d56:	2104      	movs	r1, #4
 8005d58:	4877      	ldr	r0, [pc, #476]	; (8005f38 <checkAktifCalisma+0x12ec>)
 8005d5a:	f003 fae7 	bl	800932c <HAL_GPIO_ReadPin>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d15f      	bne.n	8005e24 <checkAktifCalisma+0x11d8>
 8005d64:	4b75      	ldr	r3, [pc, #468]	; (8005f3c <checkAktifCalisma+0x12f0>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d05b      	beq.n	8005e24 <checkAktifCalisma+0x11d8>
 8005d6c:	4b74      	ldr	r3, [pc, #464]	; (8005f40 <checkAktifCalisma+0x12f4>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d057      	beq.n	8005e24 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005d74:	4b74      	ldr	r3, [pc, #464]	; (8005f48 <checkAktifCalisma+0x12fc>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	4b72      	ldr	r3, [pc, #456]	; (8005f48 <checkAktifCalisma+0x12fc>)
 8005d7e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005d80:	4b71      	ldr	r3, [pc, #452]	; (8005f48 <checkAktifCalisma+0x12fc>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b09      	cmp	r3, #9
 8005d86:	d908      	bls.n	8005d9a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005d88:	4b6f      	ldr	r3, [pc, #444]	; (8005f48 <checkAktifCalisma+0x12fc>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005d8e:	4b6f      	ldr	r3, [pc, #444]	; (8005f4c <checkAktifCalisma+0x1300>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	3301      	adds	r3, #1
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	4b6d      	ldr	r3, [pc, #436]	; (8005f4c <checkAktifCalisma+0x1300>)
 8005d98:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005d9a:	4b6c      	ldr	r3, [pc, #432]	; (8005f4c <checkAktifCalisma+0x1300>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b09      	cmp	r3, #9
 8005da0:	d908      	bls.n	8005db4 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005da2:	4b6a      	ldr	r3, [pc, #424]	; (8005f4c <checkAktifCalisma+0x1300>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005da8:	4b69      	ldr	r3, [pc, #420]	; (8005f50 <checkAktifCalisma+0x1304>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	3301      	adds	r3, #1
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	4b67      	ldr	r3, [pc, #412]	; (8005f50 <checkAktifCalisma+0x1304>)
 8005db2:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005db4:	4b66      	ldr	r3, [pc, #408]	; (8005f50 <checkAktifCalisma+0x1304>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b09      	cmp	r3, #9
 8005dba:	d908      	bls.n	8005dce <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005dbc:	4b64      	ldr	r3, [pc, #400]	; (8005f50 <checkAktifCalisma+0x1304>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005dc2:	4b64      	ldr	r3, [pc, #400]	; (8005f54 <checkAktifCalisma+0x1308>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	4b62      	ldr	r3, [pc, #392]	; (8005f54 <checkAktifCalisma+0x1308>)
 8005dcc:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005dce:	4b61      	ldr	r3, [pc, #388]	; (8005f54 <checkAktifCalisma+0x1308>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b09      	cmp	r3, #9
 8005dd4:	d908      	bls.n	8005de8 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005dd6:	4b5f      	ldr	r3, [pc, #380]	; (8005f54 <checkAktifCalisma+0x1308>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005ddc:	4b5e      	ldr	r3, [pc, #376]	; (8005f58 <checkAktifCalisma+0x130c>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	3301      	adds	r3, #1
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	4b5c      	ldr	r3, [pc, #368]	; (8005f58 <checkAktifCalisma+0x130c>)
 8005de6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005de8:	4b5b      	ldr	r3, [pc, #364]	; (8005f58 <checkAktifCalisma+0x130c>)
 8005dea:	781a      	ldrb	r2, [r3, #0]
 8005dec:	4b5b      	ldr	r3, [pc, #364]	; (8005f5c <checkAktifCalisma+0x1310>)
 8005dee:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005df2:	4b58      	ldr	r3, [pc, #352]	; (8005f54 <checkAktifCalisma+0x1308>)
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	4b59      	ldr	r3, [pc, #356]	; (8005f5c <checkAktifCalisma+0x1310>)
 8005df8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005dfa:	4b55      	ldr	r3, [pc, #340]	; (8005f50 <checkAktifCalisma+0x1304>)
 8005dfc:	781a      	ldrb	r2, [r3, #0]
 8005dfe:	4b57      	ldr	r3, [pc, #348]	; (8005f5c <checkAktifCalisma+0x1310>)
 8005e00:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005e02:	4b52      	ldr	r3, [pc, #328]	; (8005f4c <checkAktifCalisma+0x1300>)
 8005e04:	781a      	ldrb	r2, [r3, #0]
 8005e06:	4b55      	ldr	r3, [pc, #340]	; (8005f5c <checkAktifCalisma+0x1310>)
 8005e08:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005e0a:	4b4f      	ldr	r3, [pc, #316]	; (8005f48 <checkAktifCalisma+0x12fc>)
 8005e0c:	781a      	ldrb	r2, [r3, #0]
 8005e0e:	4b53      	ldr	r3, [pc, #332]	; (8005f5c <checkAktifCalisma+0x1310>)
 8005e10:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005e12:	4b53      	ldr	r3, [pc, #332]	; (8005f60 <checkAktifCalisma+0x1314>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005e18:	4b46      	ldr	r3, [pc, #280]	; (8005f34 <checkAktifCalisma+0x12e8>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005e1e:	4b49      	ldr	r3, [pc, #292]	; (8005f44 <checkAktifCalisma+0x12f8>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e28:	484e      	ldr	r0, [pc, #312]	; (8005f64 <checkAktifCalisma+0x1318>)
 8005e2a:	f003 fa7f 	bl	800932c <HAL_GPIO_ReadPin>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d016      	beq.n	8005e62 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e38:	484a      	ldr	r0, [pc, #296]	; (8005f64 <checkAktifCalisma+0x1318>)
 8005e3a:	f003 fa77 	bl	800932c <HAL_GPIO_ReadPin>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00e      	beq.n	8005e62 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005e44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e48:	4846      	ldr	r0, [pc, #280]	; (8005f64 <checkAktifCalisma+0x1318>)
 8005e4a:	f003 fa6f 	bl	800932c <HAL_GPIO_ReadPin>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d006      	beq.n	8005e62 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005e54:	2140      	movs	r1, #64	; 0x40
 8005e56:	4838      	ldr	r0, [pc, #224]	; (8005f38 <checkAktifCalisma+0x12ec>)
 8005e58:	f003 fa68 	bl	800932c <HAL_GPIO_ReadPin>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <checkAktifCalisma+0x121e>
			startBasili=1;
 8005e62:	4b41      	ldr	r3, [pc, #260]	; (8005f68 <checkAktifCalisma+0x131c>)
 8005e64:	2201      	movs	r2, #1
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	e002      	b.n	8005e70 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005e6a:	4b3f      	ldr	r3, [pc, #252]	; (8005f68 <checkAktifCalisma+0x131c>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005e70:	4b3d      	ldr	r3, [pc, #244]	; (8005f68 <checkAktifCalisma+0x131c>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d016      	beq.n	8005ea6 <checkAktifCalisma+0x125a>
 8005e78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e7c:	4839      	ldr	r0, [pc, #228]	; (8005f64 <checkAktifCalisma+0x1318>)
 8005e7e:	f003 fa55 	bl	800932c <HAL_GPIO_ReadPin>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d10e      	bne.n	8005ea6 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005e88:	4b38      	ldr	r3, [pc, #224]	; (8005f6c <checkAktifCalisma+0x1320>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005e8e:	2001      	movs	r0, #1
 8005e90:	f7fa fe4a 	bl	8000b28 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005e94:	2001      	movs	r0, #1
 8005e96:	f7fa fded 	bl	8000a74 <hata2EEPROM>
			convertAndSendData();
 8005e9a:	f001 fc73 	bl	8007784 <convertAndSendData>
			acilstophatasi=1;
 8005e9e:	4b34      	ldr	r3, [pc, #208]	; (8005f70 <checkAktifCalisma+0x1324>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	e018      	b.n	8005ed8 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005ea6:	4b32      	ldr	r3, [pc, #200]	; (8005f70 <checkAktifCalisma+0x1324>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d014      	beq.n	8005ed8 <checkAktifCalisma+0x128c>
 8005eae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005eb2:	482c      	ldr	r0, [pc, #176]	; (8005f64 <checkAktifCalisma+0x1318>)
 8005eb4:	f003 fa3a 	bl	800932c <HAL_GPIO_ReadPin>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10c      	bne.n	8005ed8 <checkAktifCalisma+0x128c>
 8005ebe:	4b2a      	ldr	r3, [pc, #168]	; (8005f68 <checkAktifCalisma+0x131c>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f083 0301 	eor.w	r3, r3, #1
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005ecc:	4b28      	ldr	r3, [pc, #160]	; (8005f70 <checkAktifCalisma+0x1324>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	f7fe fce8 	bl	80048a8 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005ed8:	4b26      	ldr	r3, [pc, #152]	; (8005f74 <checkAktifCalisma+0x1328>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	f083 0301 	eor.w	r3, r3, #1
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d04e      	beq.n	8005f84 <checkAktifCalisma+0x1338>
 8005ee6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005eea:	481e      	ldr	r0, [pc, #120]	; (8005f64 <checkAktifCalisma+0x1318>)
 8005eec:	f003 fa1e 	bl	800932c <HAL_GPIO_ReadPin>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <checkAktifCalisma+0x12b2>
 8005ef6:	4b20      	ldr	r3, [pc, #128]	; (8005f78 <checkAktifCalisma+0x132c>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d042      	beq.n	8005f84 <checkAktifCalisma+0x1338>
 8005efe:	4b1f      	ldr	r3, [pc, #124]	; (8005f7c <checkAktifCalisma+0x1330>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d13e      	bne.n	8005f84 <checkAktifCalisma+0x1338>
			hataVar=1;
 8005f06:	4b19      	ldr	r3, [pc, #100]	; (8005f6c <checkAktifCalisma+0x1320>)
 8005f08:	2201      	movs	r2, #1
 8005f0a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005f0c:	2002      	movs	r0, #2
 8005f0e:	f7fa fe0b 	bl	8000b28 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005f12:	2002      	movs	r0, #2
 8005f14:	f7fa fdae 	bl	8000a74 <hata2EEPROM>
			convertAndSendData();
 8005f18:	f001 fc34 	bl	8007784 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005f1c:	4b18      	ldr	r3, [pc, #96]	; (8005f80 <checkAktifCalisma+0x1334>)
 8005f1e:	2201      	movs	r2, #1
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	e047      	b.n	8005fb4 <checkAktifCalisma+0x1368>
 8005f24:	2000026b 	.word	0x2000026b
 8005f28:	2000026a 	.word	0x2000026a
 8005f2c:	20000269 	.word	0x20000269
 8005f30:	40010800 	.word	0x40010800
 8005f34:	2000025f 	.word	0x2000025f
 8005f38:	40011000 	.word	0x40011000
 8005f3c:	20000226 	.word	0x20000226
 8005f40:	20000262 	.word	0x20000262
 8005f44:	20000260 	.word	0x20000260
 8005f48:	2000021d 	.word	0x2000021d
 8005f4c:	2000021e 	.word	0x2000021e
 8005f50:	20000000 	.word	0x20000000
 8005f54:	20000001 	.word	0x20000001
 8005f58:	2000021f 	.word	0x2000021f
 8005f5c:	20000118 	.word	0x20000118
 8005f60:	2000024c 	.word	0x2000024c
 8005f64:	40010c00 	.word	0x40010c00
 8005f68:	2000026e 	.word	0x2000026e
 8005f6c:	20000275 	.word	0x20000275
 8005f70:	20000270 	.word	0x20000270
 8005f74:	20000277 	.word	0x20000277
 8005f78:	20000281 	.word	0x20000281
 8005f7c:	20000224 	.word	0x20000224
 8005f80:	20000271 	.word	0x20000271
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005f84:	4b9b      	ldr	r3, [pc, #620]	; (80061f4 <checkAktifCalisma+0x15a8>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d013      	beq.n	8005fb4 <checkAktifCalisma+0x1368>
 8005f8c:	4b9a      	ldr	r3, [pc, #616]	; (80061f8 <checkAktifCalisma+0x15ac>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00f      	beq.n	8005fb4 <checkAktifCalisma+0x1368>
 8005f94:	4b99      	ldr	r3, [pc, #612]	; (80061fc <checkAktifCalisma+0x15b0>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	f083 0301 	eor.w	r3, r3, #1
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005fa2:	4b94      	ldr	r3, [pc, #592]	; (80061f4 <checkAktifCalisma+0x15a8>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005fa8:	4b95      	ldr	r3, [pc, #596]	; (8006200 <checkAktifCalisma+0x15b4>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005fae:	2002      	movs	r0, #2
 8005fb0:	f7fe fc7a 	bl	80048a8 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005fb4:	4b93      	ldr	r3, [pc, #588]	; (8006204 <checkAktifCalisma+0x15b8>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d11e      	bne.n	8005ffa <checkAktifCalisma+0x13ae>
 8005fbc:	4b92      	ldr	r3, [pc, #584]	; (8006208 <checkAktifCalisma+0x15bc>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d11a      	bne.n	8005ffa <checkAktifCalisma+0x13ae>
 8005fc4:	4b91      	ldr	r3, [pc, #580]	; (800620c <checkAktifCalisma+0x15c0>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d016      	beq.n	8005ffa <checkAktifCalisma+0x13ae>
 8005fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fd0:	488f      	ldr	r0, [pc, #572]	; (8006210 <checkAktifCalisma+0x15c4>)
 8005fd2:	f003 f9ab 	bl	800932c <HAL_GPIO_ReadPin>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d10e      	bne.n	8005ffa <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005fdc:	4b8d      	ldr	r3, [pc, #564]	; (8006214 <checkAktifCalisma+0x15c8>)
 8005fde:	2201      	movs	r2, #1
 8005fe0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8005fe2:	2003      	movs	r0, #3
 8005fe4:	f7fa fda0 	bl	8000b28 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8005fe8:	2003      	movs	r0, #3
 8005fea:	f7fa fd43 	bl	8000a74 <hata2EEPROM>
			convertAndSendData();
 8005fee:	f001 fbc9 	bl	8007784 <convertAndSendData>
			basinchatasi=1;
 8005ff2:	4b89      	ldr	r3, [pc, #548]	; (8006218 <checkAktifCalisma+0x15cc>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e015      	b.n	8006026 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005ffa:	4b87      	ldr	r3, [pc, #540]	; (8006218 <checkAktifCalisma+0x15cc>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d011      	beq.n	8006026 <checkAktifCalisma+0x13da>
 8006002:	4b80      	ldr	r3, [pc, #512]	; (8006204 <checkAktifCalisma+0x15b8>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d10d      	bne.n	8006026 <checkAktifCalisma+0x13da>
 800600a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800600e:	4883      	ldr	r0, [pc, #524]	; (800621c <checkAktifCalisma+0x15d0>)
 8006010:	f003 f98c 	bl	800932c <HAL_GPIO_ReadPin>
 8006014:	4603      	mov	r3, r0
 8006016:	2b01      	cmp	r3, #1
 8006018:	d105      	bne.n	8006026 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 800601a:	4b7f      	ldr	r3, [pc, #508]	; (8006218 <checkAktifCalisma+0x15cc>)
 800601c:	2200      	movs	r2, #0
 800601e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006020:	2003      	movs	r0, #3
 8006022:	f7fe fc41 	bl	80048a8 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006026:	4b7e      	ldr	r3, [pc, #504]	; (8006220 <checkAktifCalisma+0x15d4>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d103      	bne.n	8006036 <checkAktifCalisma+0x13ea>
 800602e:	4b7d      	ldr	r3, [pc, #500]	; (8006224 <checkAktifCalisma+0x15d8>)
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01e      	beq.n	8006074 <checkAktifCalisma+0x1428>
 8006036:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800603a:	487b      	ldr	r0, [pc, #492]	; (8006228 <checkAktifCalisma+0x15dc>)
 800603c:	f003 f976 	bl	800932c <HAL_GPIO_ReadPin>
 8006040:	4603      	mov	r3, r0
 8006042:	2b01      	cmp	r3, #1
 8006044:	d116      	bne.n	8006074 <checkAktifCalisma+0x1428>
 8006046:	4b79      	ldr	r3, [pc, #484]	; (800622c <checkAktifCalisma+0x15e0>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d003      	beq.n	8006056 <checkAktifCalisma+0x140a>
 800604e:	4b77      	ldr	r3, [pc, #476]	; (800622c <checkAktifCalisma+0x15e0>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b03      	cmp	r3, #3
 8006054:	d10e      	bne.n	8006074 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006056:	4b6f      	ldr	r3, [pc, #444]	; (8006214 <checkAktifCalisma+0x15c8>)
 8006058:	2201      	movs	r2, #1
 800605a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 800605c:	2004      	movs	r0, #4
 800605e:	f7fa fd63 	bl	8000b28 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006062:	2004      	movs	r0, #4
 8006064:	f7fa fd06 	bl	8000a74 <hata2EEPROM>
			convertAndSendData();
 8006068:	f001 fb8c 	bl	8007784 <convertAndSendData>
			katkapisivicihatasi=1;
 800606c:	4b70      	ldr	r3, [pc, #448]	; (8006230 <checkAktifCalisma+0x15e4>)
 800606e:	2201      	movs	r2, #1
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	e01f      	b.n	80060b4 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006074:	4b6e      	ldr	r3, [pc, #440]	; (8006230 <checkAktifCalisma+0x15e4>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01b      	beq.n	80060b4 <checkAktifCalisma+0x1468>
 800607c:	4b6d      	ldr	r3, [pc, #436]	; (8006234 <checkAktifCalisma+0x15e8>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d017      	beq.n	80060b4 <checkAktifCalisma+0x1468>
 8006084:	4b66      	ldr	r3, [pc, #408]	; (8006220 <checkAktifCalisma+0x15d4>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	f083 0301 	eor.w	r3, r3, #1
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d010      	beq.n	80060b4 <checkAktifCalisma+0x1468>
 8006092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006096:	4864      	ldr	r0, [pc, #400]	; (8006228 <checkAktifCalisma+0x15dc>)
 8006098:	f003 f948 	bl	800932c <HAL_GPIO_ReadPin>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d108      	bne.n	80060b4 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 80060a2:	4b63      	ldr	r3, [pc, #396]	; (8006230 <checkAktifCalisma+0x15e4>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80060a8:	4b5e      	ldr	r3, [pc, #376]	; (8006224 <checkAktifCalisma+0x15d8>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80060ae:	2004      	movs	r0, #4
 80060b0:	f7fe fbfa 	bl	80048a8 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80060b4:	4b5a      	ldr	r3, [pc, #360]	; (8006220 <checkAktifCalisma+0x15d4>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d103      	bne.n	80060c4 <checkAktifCalisma+0x1478>
 80060bc:	4b5e      	ldr	r3, [pc, #376]	; (8006238 <checkAktifCalisma+0x15ec>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01e      	beq.n	8006102 <checkAktifCalisma+0x14b6>
 80060c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060c8:	4857      	ldr	r0, [pc, #348]	; (8006228 <checkAktifCalisma+0x15dc>)
 80060ca:	f003 f92f 	bl	800932c <HAL_GPIO_ReadPin>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d116      	bne.n	8006102 <checkAktifCalisma+0x14b6>
 80060d4:	4b55      	ldr	r3, [pc, #340]	; (800622c <checkAktifCalisma+0x15e0>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d003      	beq.n	80060e4 <checkAktifCalisma+0x1498>
 80060dc:	4b53      	ldr	r3, [pc, #332]	; (800622c <checkAktifCalisma+0x15e0>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d10e      	bne.n	8006102 <checkAktifCalisma+0x14b6>
			hataVar=1;
 80060e4:	4b4b      	ldr	r3, [pc, #300]	; (8006214 <checkAktifCalisma+0x15c8>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80060ea:	2005      	movs	r0, #5
 80060ec:	f7fa fd1c 	bl	8000b28 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80060f0:	2005      	movs	r0, #5
 80060f2:	f7fa fcbf 	bl	8000a74 <hata2EEPROM>
			convertAndSendData();
 80060f6:	f001 fb45 	bl	8007784 <convertAndSendData>
			tablakapisivicihatasi=1;
 80060fa:	4b50      	ldr	r3, [pc, #320]	; (800623c <checkAktifCalisma+0x15f0>)
 80060fc:	2201      	movs	r2, #1
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	e023      	b.n	800614a <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006102:	4b4e      	ldr	r3, [pc, #312]	; (800623c <checkAktifCalisma+0x15f0>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01f      	beq.n	800614a <checkAktifCalisma+0x14fe>
 800610a:	4b4a      	ldr	r3, [pc, #296]	; (8006234 <checkAktifCalisma+0x15e8>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01b      	beq.n	800614a <checkAktifCalisma+0x14fe>
 8006112:	4b43      	ldr	r3, [pc, #268]	; (8006220 <checkAktifCalisma+0x15d4>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	f083 0301 	eor.w	r3, r3, #1
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d014      	beq.n	800614a <checkAktifCalisma+0x14fe>
 8006120:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006124:	4840      	ldr	r0, [pc, #256]	; (8006228 <checkAktifCalisma+0x15dc>)
 8006126:	f003 f901 	bl	800932c <HAL_GPIO_ReadPin>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10c      	bne.n	800614a <checkAktifCalisma+0x14fe>
 8006130:	4b40      	ldr	r3, [pc, #256]	; (8006234 <checkAktifCalisma+0x15e8>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d008      	beq.n	800614a <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006138:	4b40      	ldr	r3, [pc, #256]	; (800623c <checkAktifCalisma+0x15f0>)
 800613a:	2200      	movs	r2, #0
 800613c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800613e:	4b3e      	ldr	r3, [pc, #248]	; (8006238 <checkAktifCalisma+0x15ec>)
 8006140:	2200      	movs	r2, #0
 8006142:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006144:	2005      	movs	r0, #5
 8006146:	f7fe fbaf 	bl	80048a8 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800614a:	4b30      	ldr	r3, [pc, #192]	; (800620c <checkAktifCalisma+0x15c0>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d107      	bne.n	8006162 <checkAktifCalisma+0x1516>
 8006152:	4b2a      	ldr	r3, [pc, #168]	; (80061fc <checkAktifCalisma+0x15b0>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d103      	bne.n	8006162 <checkAktifCalisma+0x1516>
 800615a:	4b39      	ldr	r3, [pc, #228]	; (8006240 <checkAktifCalisma+0x15f4>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d016      	beq.n	8006190 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8006162:	4b38      	ldr	r3, [pc, #224]	; (8006244 <checkAktifCalisma+0x15f8>)
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	4b38      	ldr	r3, [pc, #224]	; (8006248 <checkAktifCalisma+0x15fc>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	4a37      	ldr	r2, [pc, #220]	; (800624c <checkAktifCalisma+0x1600>)
 800616e:	7812      	ldrb	r2, [r2, #0]
 8006170:	4293      	cmp	r3, r2
 8006172:	d30d      	bcc.n	8006190 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006174:	4b27      	ldr	r3, [pc, #156]	; (8006214 <checkAktifCalisma+0x15c8>)
 8006176:	2201      	movs	r2, #1
 8006178:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800617a:	2006      	movs	r0, #6
 800617c:	f7fa fcd4 	bl	8000b28 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006180:	2006      	movs	r0, #6
 8006182:	f7fa fc77 	bl	8000a74 <hata2EEPROM>
			  	convertAndSendData();
 8006186:	f001 fafd 	bl	8007784 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800618a:	4b31      	ldr	r3, [pc, #196]	; (8006250 <checkAktifCalisma+0x1604>)
 800618c:	2201      	movs	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006190:	4b2f      	ldr	r3, [pc, #188]	; (8006250 <checkAktifCalisma+0x1604>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d013      	beq.n	80061c0 <checkAktifCalisma+0x1574>
 8006198:	2108      	movs	r1, #8
 800619a:	4823      	ldr	r0, [pc, #140]	; (8006228 <checkAktifCalisma+0x15dc>)
 800619c:	f003 f8c6 	bl	800932c <HAL_GPIO_ReadPin>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00c      	beq.n	80061c0 <checkAktifCalisma+0x1574>
 80061a6:	4b1e      	ldr	r3, [pc, #120]	; (8006220 <checkAktifCalisma+0x15d4>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	f083 0301 	eor.w	r3, r3, #1
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80061b4:	4b26      	ldr	r3, [pc, #152]	; (8006250 <checkAktifCalisma+0x1604>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80061ba:	2006      	movs	r0, #6
 80061bc:	f7fe fb74 	bl	80048a8 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80061c0:	4b24      	ldr	r3, [pc, #144]	; (8006254 <checkAktifCalisma+0x1608>)
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <checkAktifCalisma+0x1594>
 80061c8:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <checkAktifCalisma+0x15b0>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d107      	bne.n	80061e0 <checkAktifCalisma+0x1594>
 80061d0:	4b21      	ldr	r3, [pc, #132]	; (8006258 <checkAktifCalisma+0x160c>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d103      	bne.n	80061e0 <checkAktifCalisma+0x1594>
 80061d8:	4b19      	ldr	r3, [pc, #100]	; (8006240 <checkAktifCalisma+0x15f4>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d03f      	beq.n	8006260 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80061e0:	4b1e      	ldr	r3, [pc, #120]	; (800625c <checkAktifCalisma+0x1610>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80061e6:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <checkAktifCalisma+0x15d8>)
 80061e8:	2201      	movs	r2, #1
 80061ea:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80061ec:	4b12      	ldr	r3, [pc, #72]	; (8006238 <checkAktifCalisma+0x15ec>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	e03c      	b.n	800626e <checkAktifCalisma+0x1622>
 80061f4:	20000271 	.word	0x20000271
 80061f8:	20000277 	.word	0x20000277
 80061fc:	20000258 	.word	0x20000258
 8006200:	20000281 	.word	0x20000281
 8006204:	20000223 	.word	0x20000223
 8006208:	20000227 	.word	0x20000227
 800620c:	20000274 	.word	0x20000274
 8006210:	40011000 	.word	0x40011000
 8006214:	20000275 	.word	0x20000275
 8006218:	2000027e 	.word	0x2000027e
 800621c:	40010c00 	.word	0x40010c00
 8006220:	2000026e 	.word	0x2000026e
 8006224:	20000282 	.word	0x20000282
 8006228:	40010800 	.word	0x40010800
 800622c:	20000228 	.word	0x20000228
 8006230:	2000027f 	.word	0x2000027f
 8006234:	20000262 	.word	0x20000262
 8006238:	20000283 	.word	0x20000283
 800623c:	20000280 	.word	0x20000280
 8006240:	20000257 	.word	0x20000257
 8006244:	200001fc 	.word	0x200001fc
 8006248:	20000210 	.word	0x20000210
 800624c:	20000238 	.word	0x20000238
 8006250:	2000026f 	.word	0x2000026f
 8006254:	20000255 	.word	0x20000255
 8006258:	20000256 	.word	0x20000256
 800625c:	20000276 	.word	0x20000276
		} else {
			makineCalisiyor=1;
 8006260:	4b1e      	ldr	r3, [pc, #120]	; (80062dc <checkAktifCalisma+0x1690>)
 8006262:	2201      	movs	r2, #1
 8006264:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006266:	4b1e      	ldr	r3, [pc, #120]	; (80062e0 <checkAktifCalisma+0x1694>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1e      	ldr	r2, [pc, #120]	; (80062e4 <checkAktifCalisma+0x1698>)
 800626c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800626e:	4b1e      	ldr	r3, [pc, #120]	; (80062e8 <checkAktifCalisma+0x169c>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d02f      	beq.n	80062d6 <checkAktifCalisma+0x168a>
 8006276:	4b1d      	ldr	r3, [pc, #116]	; (80062ec <checkAktifCalisma+0x16a0>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	f083 0301 	eor.w	r3, r3, #1
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d028      	beq.n	80062d6 <checkAktifCalisma+0x168a>
 8006284:	4b1a      	ldr	r3, [pc, #104]	; (80062f0 <checkAktifCalisma+0x16a4>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	f083 0301 	eor.w	r3, r3, #1
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d021      	beq.n	80062d6 <checkAktifCalisma+0x168a>
 8006292:	4b18      	ldr	r3, [pc, #96]	; (80062f4 <checkAktifCalisma+0x16a8>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	f083 0301 	eor.w	r3, r3, #1
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d01a      	beq.n	80062d6 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80062a0:	4b15      	ldr	r3, [pc, #84]	; (80062f8 <checkAktifCalisma+0x16ac>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	f083 0301 	eor.w	r3, r3, #1
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d013      	beq.n	80062d6 <checkAktifCalisma+0x168a>
 80062ae:	4b13      	ldr	r3, [pc, #76]	; (80062fc <checkAktifCalisma+0x16b0>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	f083 0301 	eor.w	r3, r3, #1
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00c      	beq.n	80062d6 <checkAktifCalisma+0x168a>
 80062bc:	4b10      	ldr	r3, [pc, #64]	; (8006300 <checkAktifCalisma+0x16b4>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	f083 0301 	eor.w	r3, r3, #1
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <checkAktifCalisma+0x168a>
			hataVar=0;
 80062ca:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <checkAktifCalisma+0x169c>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80062d0:	2007      	movs	r0, #7
 80062d2:	f7fe fae9 	bl	80048a8 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80062d6:	bf00      	nop
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000276 	.word	0x20000276
 80062e0:	200001fc 	.word	0x200001fc
 80062e4:	20000210 	.word	0x20000210
 80062e8:	20000275 	.word	0x20000275
 80062ec:	20000270 	.word	0x20000270
 80062f0:	20000271 	.word	0x20000271
 80062f4:	2000027e 	.word	0x2000027e
 80062f8:	2000027f 	.word	0x2000027f
 80062fc:	20000280 	.word	0x20000280
 8006300:	2000026f 	.word	0x2000026f

08006304 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006308:	4b8b      	ldr	r3, [pc, #556]	; (8006538 <checkDemoModCalisma+0x234>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b01      	cmp	r3, #1
 800630e:	f040 8229 	bne.w	8006764 <checkDemoModCalisma+0x460>
 8006312:	4b8a      	ldr	r3, [pc, #552]	; (800653c <checkDemoModCalisma+0x238>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 8224 	beq.w	8006764 <checkDemoModCalisma+0x460>
 800631c:	4b88      	ldr	r3, [pc, #544]	; (8006540 <checkDemoModCalisma+0x23c>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	f040 821f 	bne.w	8006764 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006326:	2102      	movs	r1, #2
 8006328:	4886      	ldr	r0, [pc, #536]	; (8006544 <checkDemoModCalisma+0x240>)
 800632a:	f002 ffff 	bl	800932c <HAL_GPIO_ReadPin>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d11d      	bne.n	8006370 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006334:	4b84      	ldr	r3, [pc, #528]	; (8006548 <checkDemoModCalisma+0x244>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	f083 0301 	eor.w	r3, r3, #1
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d016      	beq.n	8006370 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006342:	4b82      	ldr	r3, [pc, #520]	; (800654c <checkDemoModCalisma+0x248>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	f083 0301 	eor.w	r3, r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00f      	beq.n	8006370 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006350:	4b7f      	ldr	r3, [pc, #508]	; (8006550 <checkDemoModCalisma+0x24c>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	f083 0301 	eor.w	r3, r3, #1
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d008      	beq.n	8006370 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800635e:	2201      	movs	r2, #1
 8006360:	2104      	movs	r1, #4
 8006362:	487c      	ldr	r0, [pc, #496]	; (8006554 <checkDemoModCalisma+0x250>)
 8006364:	f002 fff9 	bl	800935a <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006368:	4b7b      	ldr	r3, [pc, #492]	; (8006558 <checkDemoModCalisma+0x254>)
 800636a:	2201      	movs	r2, #1
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	e00e      	b.n	800638e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006370:	2102      	movs	r1, #2
 8006372:	4874      	ldr	r0, [pc, #464]	; (8006544 <checkDemoModCalisma+0x240>)
 8006374:	f002 ffda 	bl	800932c <HAL_GPIO_ReadPin>
 8006378:	4603      	mov	r3, r0
 800637a:	2b01      	cmp	r3, #1
 800637c:	d107      	bne.n	800638e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800637e:	2200      	movs	r2, #0
 8006380:	2104      	movs	r1, #4
 8006382:	4874      	ldr	r0, [pc, #464]	; (8006554 <checkDemoModCalisma+0x250>)
 8006384:	f002 ffe9 	bl	800935a <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006388:	4b73      	ldr	r3, [pc, #460]	; (8006558 <checkDemoModCalisma+0x254>)
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800638e:	4b72      	ldr	r3, [pc, #456]	; (8006558 <checkDemoModCalisma+0x254>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10b      	bne.n	80063ae <checkDemoModCalisma+0xaa>
 8006396:	4b6d      	ldr	r3, [pc, #436]	; (800654c <checkDemoModCalisma+0x248>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d107      	bne.n	80063ae <checkDemoModCalisma+0xaa>
 800639e:	4b6c      	ldr	r3, [pc, #432]	; (8006550 <checkDemoModCalisma+0x24c>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <checkDemoModCalisma+0xaa>
 80063a6:	4b68      	ldr	r3, [pc, #416]	; (8006548 <checkDemoModCalisma+0x244>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00c      	beq.n	80063c8 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80063ae:	2201      	movs	r2, #1
 80063b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80063b4:	4867      	ldr	r0, [pc, #412]	; (8006554 <checkDemoModCalisma+0x250>)
 80063b6:	f002 ffd0 	bl	800935a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80063ba:	2201      	movs	r2, #1
 80063bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063c0:	4864      	ldr	r0, [pc, #400]	; (8006554 <checkDemoModCalisma+0x250>)
 80063c2:	f002 ffca 	bl	800935a <HAL_GPIO_WritePin>
 80063c6:	e00b      	b.n	80063e0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80063c8:	2200      	movs	r2, #0
 80063ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80063ce:	4861      	ldr	r0, [pc, #388]	; (8006554 <checkDemoModCalisma+0x250>)
 80063d0:	f002 ffc3 	bl	800935a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80063d4:	2200      	movs	r2, #0
 80063d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063da:	485e      	ldr	r0, [pc, #376]	; (8006554 <checkDemoModCalisma+0x250>)
 80063dc:	f002 ffbd 	bl	800935a <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063e0:	2102      	movs	r1, #2
 80063e2:	4858      	ldr	r0, [pc, #352]	; (8006544 <checkDemoModCalisma+0x240>)
 80063e4:	f002 ffa2 	bl	800932c <HAL_GPIO_ReadPin>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d10d      	bne.n	800640a <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80063ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063f2:	4854      	ldr	r0, [pc, #336]	; (8006544 <checkDemoModCalisma+0x240>)
 80063f4:	f002 ff9a 	bl	800932c <HAL_GPIO_ReadPin>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d105      	bne.n	800640a <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80063fe:	4b56      	ldr	r3, [pc, #344]	; (8006558 <checkDemoModCalisma+0x254>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	f083 0301 	eor.w	r3, r3, #1
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800640a:	2102      	movs	r1, #2
 800640c:	484d      	ldr	r0, [pc, #308]	; (8006544 <checkDemoModCalisma+0x240>)
 800640e:	f002 ff8d 	bl	800932c <HAL_GPIO_ReadPin>
 8006412:	4603      	mov	r3, r0
 8006414:	2b01      	cmp	r3, #1
 8006416:	d125      	bne.n	8006464 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006418:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800641c:	4849      	ldr	r0, [pc, #292]	; (8006544 <checkDemoModCalisma+0x240>)
 800641e:	f002 ff85 	bl	800932c <HAL_GPIO_ReadPin>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d11d      	bne.n	8006464 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006428:	4b4b      	ldr	r3, [pc, #300]	; (8006558 <checkDemoModCalisma+0x254>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	f083 0301 	eor.w	r3, r3, #1
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d016      	beq.n	8006464 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006436:	4b44      	ldr	r3, [pc, #272]	; (8006548 <checkDemoModCalisma+0x244>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	f083 0301 	eor.w	r3, r3, #1
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00f      	beq.n	8006464 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006444:	4b42      	ldr	r3, [pc, #264]	; (8006550 <checkDemoModCalisma+0x24c>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	f083 0301 	eor.w	r3, r3, #1
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d008      	beq.n	8006464 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006452:	2201      	movs	r2, #1
 8006454:	2120      	movs	r1, #32
 8006456:	483b      	ldr	r0, [pc, #236]	; (8006544 <checkDemoModCalisma+0x240>)
 8006458:	f002 ff7f 	bl	800935a <HAL_GPIO_WritePin>
			demoDevYukari=1;
 800645c:	4b3b      	ldr	r3, [pc, #236]	; (800654c <checkDemoModCalisma+0x248>)
 800645e:	2201      	movs	r2, #1
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	e007      	b.n	8006474 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006464:	2200      	movs	r2, #0
 8006466:	2120      	movs	r1, #32
 8006468:	4836      	ldr	r0, [pc, #216]	; (8006544 <checkDemoModCalisma+0x240>)
 800646a:	f002 ff76 	bl	800935a <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800646e:	4b37      	ldr	r3, [pc, #220]	; (800654c <checkDemoModCalisma+0x248>)
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006474:	2102      	movs	r1, #2
 8006476:	4833      	ldr	r0, [pc, #204]	; (8006544 <checkDemoModCalisma+0x240>)
 8006478:	f002 ff58 	bl	800932c <HAL_GPIO_ReadPin>
 800647c:	4603      	mov	r3, r0
 800647e:	2b01      	cmp	r3, #1
 8006480:	d125      	bne.n	80064ce <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006482:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006486:	482f      	ldr	r0, [pc, #188]	; (8006544 <checkDemoModCalisma+0x240>)
 8006488:	f002 ff50 	bl	800932c <HAL_GPIO_ReadPin>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d11d      	bne.n	80064ce <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006492:	4b31      	ldr	r3, [pc, #196]	; (8006558 <checkDemoModCalisma+0x254>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	f083 0301 	eor.w	r3, r3, #1
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d016      	beq.n	80064ce <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80064a0:	4b2a      	ldr	r3, [pc, #168]	; (800654c <checkDemoModCalisma+0x248>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	f083 0301 	eor.w	r3, r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00f      	beq.n	80064ce <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80064ae:	4b26      	ldr	r3, [pc, #152]	; (8006548 <checkDemoModCalisma+0x244>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	f083 0301 	eor.w	r3, r3, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80064bc:	2201      	movs	r2, #1
 80064be:	2110      	movs	r1, #16
 80064c0:	4820      	ldr	r0, [pc, #128]	; (8006544 <checkDemoModCalisma+0x240>)
 80064c2:	f002 ff4a 	bl	800935a <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80064c6:	4b22      	ldr	r3, [pc, #136]	; (8006550 <checkDemoModCalisma+0x24c>)
 80064c8:	2201      	movs	r2, #1
 80064ca:	701a      	strb	r2, [r3, #0]
 80064cc:	e007      	b.n	80064de <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80064ce:	2200      	movs	r2, #0
 80064d0:	2110      	movs	r1, #16
 80064d2:	481c      	ldr	r0, [pc, #112]	; (8006544 <checkDemoModCalisma+0x240>)
 80064d4:	f002 ff41 	bl	800935a <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80064d8:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <checkDemoModCalisma+0x24c>)
 80064da:	2200      	movs	r2, #0
 80064dc:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80064de:	2104      	movs	r1, #4
 80064e0:	4818      	ldr	r0, [pc, #96]	; (8006544 <checkDemoModCalisma+0x240>)
 80064e2:	f002 ff23 	bl	800932c <HAL_GPIO_ReadPin>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d139      	bne.n	8006560 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80064ec:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <checkDemoModCalisma+0x254>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	f083 0301 	eor.w	r3, r3, #1
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d032      	beq.n	8006560 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80064fa:	4b15      	ldr	r3, [pc, #84]	; (8006550 <checkDemoModCalisma+0x24c>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	f083 0301 	eor.w	r3, r3, #1
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	d02b      	beq.n	8006560 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006508:	4b10      	ldr	r3, [pc, #64]	; (800654c <checkDemoModCalisma+0x248>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	f083 0301 	eor.w	r3, r3, #1
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d024      	beq.n	8006560 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006516:	2201      	movs	r2, #1
 8006518:	2102      	movs	r1, #2
 800651a:	480e      	ldr	r0, [pc, #56]	; (8006554 <checkDemoModCalisma+0x250>)
 800651c:	f002 ff1d 	bl	800935a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006520:	2201      	movs	r2, #1
 8006522:	2101      	movs	r1, #1
 8006524:	480b      	ldr	r0, [pc, #44]	; (8006554 <checkDemoModCalisma+0x250>)
 8006526:	f002 ff18 	bl	800935a <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800652a:	4b07      	ldr	r3, [pc, #28]	; (8006548 <checkDemoModCalisma+0x244>)
 800652c:	2201      	movs	r2, #1
 800652e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006530:	4b0a      	ldr	r3, [pc, #40]	; (800655c <checkDemoModCalisma+0x258>)
 8006532:	2201      	movs	r2, #1
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	e027      	b.n	8006588 <checkDemoModCalisma+0x284>
 8006538:	2000023e 	.word	0x2000023e
 800653c:	20000272 	.word	0x20000272
 8006540:	2000023d 	.word	0x2000023d
 8006544:	40011000 	.word	0x40011000
 8006548:	20000279 	.word	0x20000279
 800654c:	2000027a 	.word	0x2000027a
 8006550:	2000027b 	.word	0x2000027b
 8006554:	40010c00 	.word	0x40010c00
 8006558:	20000278 	.word	0x20000278
 800655c:	2000025e 	.word	0x2000025e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006560:	2104      	movs	r1, #4
 8006562:	48a0      	ldr	r0, [pc, #640]	; (80067e4 <checkDemoModCalisma+0x4e0>)
 8006564:	f002 fee2 	bl	800932c <HAL_GPIO_ReadPin>
 8006568:	4603      	mov	r3, r0
 800656a:	2b01      	cmp	r3, #1
 800656c:	d10c      	bne.n	8006588 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800656e:	2200      	movs	r2, #0
 8006570:	2102      	movs	r1, #2
 8006572:	489d      	ldr	r0, [pc, #628]	; (80067e8 <checkDemoModCalisma+0x4e4>)
 8006574:	f002 fef1 	bl	800935a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006578:	2200      	movs	r2, #0
 800657a:	2101      	movs	r1, #1
 800657c:	489a      	ldr	r0, [pc, #616]	; (80067e8 <checkDemoModCalisma+0x4e4>)
 800657e:	f002 feec 	bl	800935a <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006582:	4b9a      	ldr	r3, [pc, #616]	; (80067ec <checkDemoModCalisma+0x4e8>)
 8006584:	2200      	movs	r2, #0
 8006586:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006588:	2104      	movs	r1, #4
 800658a:	4896      	ldr	r0, [pc, #600]	; (80067e4 <checkDemoModCalisma+0x4e0>)
 800658c:	f002 fece 	bl	800932c <HAL_GPIO_ReadPin>
 8006590:	4603      	mov	r3, r0
 8006592:	2b01      	cmp	r3, #1
 8006594:	d10d      	bne.n	80065b2 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006596:	2201      	movs	r2, #1
 8006598:	2180      	movs	r1, #128	; 0x80
 800659a:	4895      	ldr	r0, [pc, #596]	; (80067f0 <checkDemoModCalisma+0x4ec>)
 800659c:	f002 fedd 	bl	800935a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80065a0:	2201      	movs	r2, #1
 80065a2:	2120      	movs	r1, #32
 80065a4:	4892      	ldr	r0, [pc, #584]	; (80067f0 <checkDemoModCalisma+0x4ec>)
 80065a6:	f002 fed8 	bl	800935a <HAL_GPIO_WritePin>
			timer3 = millis;
 80065aa:	4b92      	ldr	r3, [pc, #584]	; (80067f4 <checkDemoModCalisma+0x4f0>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a92      	ldr	r2, [pc, #584]	; (80067f8 <checkDemoModCalisma+0x4f4>)
 80065b0:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80065b2:	4b90      	ldr	r3, [pc, #576]	; (80067f4 <checkDemoModCalisma+0x4f0>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	4b90      	ldr	r3, [pc, #576]	; (80067f8 <checkDemoModCalisma+0x4f4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d909      	bls.n	80065d4 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80065c0:	2200      	movs	r2, #0
 80065c2:	2180      	movs	r1, #128	; 0x80
 80065c4:	488a      	ldr	r0, [pc, #552]	; (80067f0 <checkDemoModCalisma+0x4ec>)
 80065c6:	f002 fec8 	bl	800935a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80065ca:	2200      	movs	r2, #0
 80065cc:	2120      	movs	r1, #32
 80065ce:	4888      	ldr	r0, [pc, #544]	; (80067f0 <checkDemoModCalisma+0x4ec>)
 80065d0:	f002 fec3 	bl	800935a <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80065d4:	2102      	movs	r1, #2
 80065d6:	4883      	ldr	r0, [pc, #524]	; (80067e4 <checkDemoModCalisma+0x4e0>)
 80065d8:	f002 fea8 	bl	800932c <HAL_GPIO_ReadPin>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d108      	bne.n	80065f4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80065e2:	2201      	movs	r2, #1
 80065e4:	2140      	movs	r1, #64	; 0x40
 80065e6:	4882      	ldr	r0, [pc, #520]	; (80067f0 <checkDemoModCalisma+0x4ec>)
 80065e8:	f002 feb7 	bl	800935a <HAL_GPIO_WritePin>
			timer3 = millis;
 80065ec:	4b81      	ldr	r3, [pc, #516]	; (80067f4 <checkDemoModCalisma+0x4f0>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a81      	ldr	r2, [pc, #516]	; (80067f8 <checkDemoModCalisma+0x4f4>)
 80065f2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80065f4:	4b7f      	ldr	r3, [pc, #508]	; (80067f4 <checkDemoModCalisma+0x4f0>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	4b7f      	ldr	r3, [pc, #508]	; (80067f8 <checkDemoModCalisma+0x4f4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d904      	bls.n	800660c <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006602:	2200      	movs	r2, #0
 8006604:	2140      	movs	r1, #64	; 0x40
 8006606:	487a      	ldr	r0, [pc, #488]	; (80067f0 <checkDemoModCalisma+0x4ec>)
 8006608:	f002 fea7 	bl	800935a <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 800660c:	4b7b      	ldr	r3, [pc, #492]	; (80067fc <checkDemoModCalisma+0x4f8>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d058      	beq.n	80066c6 <checkDemoModCalisma+0x3c2>
 8006614:	4b7a      	ldr	r3, [pc, #488]	; (8006800 <checkDemoModCalisma+0x4fc>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d054      	beq.n	80066c6 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 800661c:	4b79      	ldr	r3, [pc, #484]	; (8006804 <checkDemoModCalisma+0x500>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	3301      	adds	r3, #1
 8006622:	b2da      	uxtb	r2, r3
 8006624:	4b77      	ldr	r3, [pc, #476]	; (8006804 <checkDemoModCalisma+0x500>)
 8006626:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006628:	4b76      	ldr	r3, [pc, #472]	; (8006804 <checkDemoModCalisma+0x500>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b09      	cmp	r3, #9
 800662e:	d908      	bls.n	8006642 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006630:	4b74      	ldr	r3, [pc, #464]	; (8006804 <checkDemoModCalisma+0x500>)
 8006632:	2200      	movs	r2, #0
 8006634:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006636:	4b74      	ldr	r3, [pc, #464]	; (8006808 <checkDemoModCalisma+0x504>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	3301      	adds	r3, #1
 800663c:	b2da      	uxtb	r2, r3
 800663e:	4b72      	ldr	r3, [pc, #456]	; (8006808 <checkDemoModCalisma+0x504>)
 8006640:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006642:	4b71      	ldr	r3, [pc, #452]	; (8006808 <checkDemoModCalisma+0x504>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b09      	cmp	r3, #9
 8006648:	d908      	bls.n	800665c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800664a:	4b6f      	ldr	r3, [pc, #444]	; (8006808 <checkDemoModCalisma+0x504>)
 800664c:	2200      	movs	r2, #0
 800664e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006650:	4b6e      	ldr	r3, [pc, #440]	; (800680c <checkDemoModCalisma+0x508>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	3301      	adds	r3, #1
 8006656:	b2da      	uxtb	r2, r3
 8006658:	4b6c      	ldr	r3, [pc, #432]	; (800680c <checkDemoModCalisma+0x508>)
 800665a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 800665c:	4b6b      	ldr	r3, [pc, #428]	; (800680c <checkDemoModCalisma+0x508>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b09      	cmp	r3, #9
 8006662:	d908      	bls.n	8006676 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006664:	4b69      	ldr	r3, [pc, #420]	; (800680c <checkDemoModCalisma+0x508>)
 8006666:	2200      	movs	r2, #0
 8006668:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800666a:	4b69      	ldr	r3, [pc, #420]	; (8006810 <checkDemoModCalisma+0x50c>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	3301      	adds	r3, #1
 8006670:	b2da      	uxtb	r2, r3
 8006672:	4b67      	ldr	r3, [pc, #412]	; (8006810 <checkDemoModCalisma+0x50c>)
 8006674:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006676:	4b66      	ldr	r3, [pc, #408]	; (8006810 <checkDemoModCalisma+0x50c>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b09      	cmp	r3, #9
 800667c:	d908      	bls.n	8006690 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800667e:	4b64      	ldr	r3, [pc, #400]	; (8006810 <checkDemoModCalisma+0x50c>)
 8006680:	2200      	movs	r2, #0
 8006682:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006684:	4b63      	ldr	r3, [pc, #396]	; (8006814 <checkDemoModCalisma+0x510>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	b2da      	uxtb	r2, r3
 800668c:	4b61      	ldr	r3, [pc, #388]	; (8006814 <checkDemoModCalisma+0x510>)
 800668e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006690:	4b60      	ldr	r3, [pc, #384]	; (8006814 <checkDemoModCalisma+0x510>)
 8006692:	781a      	ldrb	r2, [r3, #0]
 8006694:	4b60      	ldr	r3, [pc, #384]	; (8006818 <checkDemoModCalisma+0x514>)
 8006696:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800669a:	4b5d      	ldr	r3, [pc, #372]	; (8006810 <checkDemoModCalisma+0x50c>)
 800669c:	781a      	ldrb	r2, [r3, #0]
 800669e:	4b5e      	ldr	r3, [pc, #376]	; (8006818 <checkDemoModCalisma+0x514>)
 80066a0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80066a2:	4b5a      	ldr	r3, [pc, #360]	; (800680c <checkDemoModCalisma+0x508>)
 80066a4:	781a      	ldrb	r2, [r3, #0]
 80066a6:	4b5c      	ldr	r3, [pc, #368]	; (8006818 <checkDemoModCalisma+0x514>)
 80066a8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80066aa:	4b57      	ldr	r3, [pc, #348]	; (8006808 <checkDemoModCalisma+0x504>)
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	4b5a      	ldr	r3, [pc, #360]	; (8006818 <checkDemoModCalisma+0x514>)
 80066b0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80066b2:	4b54      	ldr	r3, [pc, #336]	; (8006804 <checkDemoModCalisma+0x500>)
 80066b4:	781a      	ldrb	r2, [r3, #0]
 80066b6:	4b58      	ldr	r3, [pc, #352]	; (8006818 <checkDemoModCalisma+0x514>)
 80066b8:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80066ba:	4b58      	ldr	r3, [pc, #352]	; (800681c <checkDemoModCalisma+0x518>)
 80066bc:	2201      	movs	r2, #1
 80066be:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80066c0:	4b4f      	ldr	r3, [pc, #316]	; (8006800 <checkDemoModCalisma+0x4fc>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80066c6:	4b56      	ldr	r3, [pc, #344]	; (8006820 <checkDemoModCalisma+0x51c>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f040 8087 	bne.w	80067de <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80066d0:	4a54      	ldr	r2, [pc, #336]	; (8006824 <checkDemoModCalisma+0x520>)
 80066d2:	2101      	movs	r1, #1
 80066d4:	2002      	movs	r0, #2
 80066d6:	f001 fb03 	bl	8007ce0 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80066da:	4a53      	ldr	r2, [pc, #332]	; (8006828 <checkDemoModCalisma+0x524>)
 80066dc:	2101      	movs	r1, #1
 80066de:	2001      	movs	r0, #1
 80066e0:	f001 fafe 	bl	8007ce0 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80066e4:	4b4b      	ldr	r3, [pc, #300]	; (8006814 <checkDemoModCalisma+0x510>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	220a      	movs	r2, #10
 80066ea:	4950      	ldr	r1, [pc, #320]	; (800682c <checkDemoModCalisma+0x528>)
 80066ec:	4618      	mov	r0, r3
 80066ee:	f005 fe49 	bl	800c384 <itoa>
			lcd_print(2,12,snum);
 80066f2:	4a4e      	ldr	r2, [pc, #312]	; (800682c <checkDemoModCalisma+0x528>)
 80066f4:	210c      	movs	r1, #12
 80066f6:	2002      	movs	r0, #2
 80066f8:	f001 faf2 	bl	8007ce0 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80066fc:	4b44      	ldr	r3, [pc, #272]	; (8006810 <checkDemoModCalisma+0x50c>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	220a      	movs	r2, #10
 8006702:	494a      	ldr	r1, [pc, #296]	; (800682c <checkDemoModCalisma+0x528>)
 8006704:	4618      	mov	r0, r3
 8006706:	f005 fe3d 	bl	800c384 <itoa>
			lcd_print(2,13,snum);
 800670a:	4a48      	ldr	r2, [pc, #288]	; (800682c <checkDemoModCalisma+0x528>)
 800670c:	210d      	movs	r1, #13
 800670e:	2002      	movs	r0, #2
 8006710:	f001 fae6 	bl	8007ce0 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006714:	4b3d      	ldr	r3, [pc, #244]	; (800680c <checkDemoModCalisma+0x508>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	220a      	movs	r2, #10
 800671a:	4944      	ldr	r1, [pc, #272]	; (800682c <checkDemoModCalisma+0x528>)
 800671c:	4618      	mov	r0, r3
 800671e:	f005 fe31 	bl	800c384 <itoa>
			lcd_print(2,14,snum);
 8006722:	4a42      	ldr	r2, [pc, #264]	; (800682c <checkDemoModCalisma+0x528>)
 8006724:	210e      	movs	r1, #14
 8006726:	2002      	movs	r0, #2
 8006728:	f001 fada 	bl	8007ce0 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 800672c:	4b36      	ldr	r3, [pc, #216]	; (8006808 <checkDemoModCalisma+0x504>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	220a      	movs	r2, #10
 8006732:	493e      	ldr	r1, [pc, #248]	; (800682c <checkDemoModCalisma+0x528>)
 8006734:	4618      	mov	r0, r3
 8006736:	f005 fe25 	bl	800c384 <itoa>
			lcd_print(2,15,snum);
 800673a:	4a3c      	ldr	r2, [pc, #240]	; (800682c <checkDemoModCalisma+0x528>)
 800673c:	210f      	movs	r1, #15
 800673e:	2002      	movs	r0, #2
 8006740:	f001 face 	bl	8007ce0 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006744:	4b2f      	ldr	r3, [pc, #188]	; (8006804 <checkDemoModCalisma+0x500>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	220a      	movs	r2, #10
 800674a:	4938      	ldr	r1, [pc, #224]	; (800682c <checkDemoModCalisma+0x528>)
 800674c:	4618      	mov	r0, r3
 800674e:	f005 fe19 	bl	800c384 <itoa>
			lcd_print(2,16,snum);
 8006752:	4a36      	ldr	r2, [pc, #216]	; (800682c <checkDemoModCalisma+0x528>)
 8006754:	2110      	movs	r1, #16
 8006756:	2002      	movs	r0, #2
 8006758:	f001 fac2 	bl	8007ce0 <lcd_print>
			mesajYazildi=1;
 800675c:	4b34      	ldr	r3, [pc, #208]	; (8006830 <checkDemoModCalisma+0x52c>)
 800675e:	2201      	movs	r2, #1
 8006760:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006762:	e03c      	b.n	80067de <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006764:	4b33      	ldr	r3, [pc, #204]	; (8006834 <checkDemoModCalisma+0x530>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d003      	beq.n	8006774 <checkDemoModCalisma+0x470>
 800676c:	4b2c      	ldr	r3, [pc, #176]	; (8006820 <checkDemoModCalisma+0x51c>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d134      	bne.n	80067de <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006774:	2200      	movs	r2, #0
 8006776:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800677a:	481b      	ldr	r0, [pc, #108]	; (80067e8 <checkDemoModCalisma+0x4e4>)
 800677c:	f002 fded 	bl	800935a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006780:	2200      	movs	r2, #0
 8006782:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006786:	4818      	ldr	r0, [pc, #96]	; (80067e8 <checkDemoModCalisma+0x4e4>)
 8006788:	f002 fde7 	bl	800935a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800678c:	2200      	movs	r2, #0
 800678e:	2104      	movs	r1, #4
 8006790:	4815      	ldr	r0, [pc, #84]	; (80067e8 <checkDemoModCalisma+0x4e4>)
 8006792:	f002 fde2 	bl	800935a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006796:	2200      	movs	r2, #0
 8006798:	2102      	movs	r1, #2
 800679a:	4813      	ldr	r0, [pc, #76]	; (80067e8 <checkDemoModCalisma+0x4e4>)
 800679c:	f002 fddd 	bl	800935a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80067a0:	2200      	movs	r2, #0
 80067a2:	2101      	movs	r1, #1
 80067a4:	4810      	ldr	r0, [pc, #64]	; (80067e8 <checkDemoModCalisma+0x4e4>)
 80067a6:	f002 fdd8 	bl	800935a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80067aa:	2200      	movs	r2, #0
 80067ac:	2120      	movs	r1, #32
 80067ae:	480d      	ldr	r0, [pc, #52]	; (80067e4 <checkDemoModCalisma+0x4e0>)
 80067b0:	f002 fdd3 	bl	800935a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80067b4:	2200      	movs	r2, #0
 80067b6:	2110      	movs	r1, #16
 80067b8:	480a      	ldr	r0, [pc, #40]	; (80067e4 <checkDemoModCalisma+0x4e0>)
 80067ba:	f002 fdce 	bl	800935a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80067be:	2200      	movs	r2, #0
 80067c0:	2180      	movs	r1, #128	; 0x80
 80067c2:	480b      	ldr	r0, [pc, #44]	; (80067f0 <checkDemoModCalisma+0x4ec>)
 80067c4:	f002 fdc9 	bl	800935a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80067c8:	2200      	movs	r2, #0
 80067ca:	2140      	movs	r1, #64	; 0x40
 80067cc:	4808      	ldr	r0, [pc, #32]	; (80067f0 <checkDemoModCalisma+0x4ec>)
 80067ce:	f002 fdc4 	bl	800935a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80067d2:	2200      	movs	r2, #0
 80067d4:	2120      	movs	r1, #32
 80067d6:	4806      	ldr	r0, [pc, #24]	; (80067f0 <checkDemoModCalisma+0x4ec>)
 80067d8:	f002 fdbf 	bl	800935a <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80067dc:	e7ff      	b.n	80067de <checkDemoModCalisma+0x4da>
 80067de:	bf00      	nop
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	40011000 	.word	0x40011000
 80067e8:	40010c00 	.word	0x40010c00
 80067ec:	20000279 	.word	0x20000279
 80067f0:	40010800 	.word	0x40010800
 80067f4:	200001fc 	.word	0x200001fc
 80067f8:	2000020c 	.word	0x2000020c
 80067fc:	20000278 	.word	0x20000278
 8006800:	2000025e 	.word	0x2000025e
 8006804:	2000021d 	.word	0x2000021d
 8006808:	2000021e 	.word	0x2000021e
 800680c:	20000000 	.word	0x20000000
 8006810:	20000001 	.word	0x20000001
 8006814:	2000021f 	.word	0x2000021f
 8006818:	20000118 	.word	0x20000118
 800681c:	2000024c 	.word	0x2000024c
 8006820:	2000023d 	.word	0x2000023d
 8006824:	0800db3c 	.word	0x0800db3c
 8006828:	0800db48 	.word	0x0800db48
 800682c:	20000188 	.word	0x20000188
 8006830:	20000254 	.word	0x20000254
 8006834:	2000023e 	.word	0x2000023e

08006838 <mainLoop>:

void mainLoop() {
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800683e:	f7fe f923 	bl	8004a88 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006842:	2101      	movs	r1, #1
 8006844:	48ac      	ldr	r0, [pc, #688]	; (8006af8 <mainLoop+0x2c0>)
 8006846:	f002 fd71 	bl	800932c <HAL_GPIO_ReadPin>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d136      	bne.n	80068be <mainLoop+0x86>
 8006850:	2108      	movs	r1, #8
 8006852:	48aa      	ldr	r0, [pc, #680]	; (8006afc <mainLoop+0x2c4>)
 8006854:	f002 fd6a 	bl	800932c <HAL_GPIO_ReadPin>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d12f      	bne.n	80068be <mainLoop+0x86>
 800685e:	2102      	movs	r1, #2
 8006860:	48a5      	ldr	r0, [pc, #660]	; (8006af8 <mainLoop+0x2c0>)
 8006862:	f002 fd63 	bl	800932c <HAL_GPIO_ReadPin>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d128      	bne.n	80068be <mainLoop+0x86>
 800686c:	2104      	movs	r1, #4
 800686e:	48a2      	ldr	r0, [pc, #648]	; (8006af8 <mainLoop+0x2c0>)
 8006870:	f002 fd5c 	bl	800932c <HAL_GPIO_ReadPin>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d121      	bne.n	80068be <mainLoop+0x86>
 800687a:	2108      	movs	r1, #8
 800687c:	489e      	ldr	r0, [pc, #632]	; (8006af8 <mainLoop+0x2c0>)
 800687e:	f002 fd55 	bl	800932c <HAL_GPIO_ReadPin>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d11a      	bne.n	80068be <mainLoop+0x86>
 8006888:	2180      	movs	r1, #128	; 0x80
 800688a:	489c      	ldr	r0, [pc, #624]	; (8006afc <mainLoop+0x2c4>)
 800688c:	f002 fd4e 	bl	800932c <HAL_GPIO_ReadPin>
 8006890:	4603      	mov	r3, r0
 8006892:	2b01      	cmp	r3, #1
 8006894:	d113      	bne.n	80068be <mainLoop+0x86>
 8006896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800689a:	4898      	ldr	r0, [pc, #608]	; (8006afc <mainLoop+0x2c4>)
 800689c:	f002 fd46 	bl	800932c <HAL_GPIO_ReadPin>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d10b      	bne.n	80068be <mainLoop+0x86>
 80068a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068aa:	4894      	ldr	r0, [pc, #592]	; (8006afc <mainLoop+0x2c4>)
 80068ac:	f002 fd3e 	bl	800932c <HAL_GPIO_ReadPin>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d103      	bne.n	80068be <mainLoop+0x86>
			butonKontrol=0;
 80068b6:	4b92      	ldr	r3, [pc, #584]	; (8006b00 <mainLoop+0x2c8>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	701a      	strb	r2, [r3, #0]
 80068bc:	e003      	b.n	80068c6 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80068be:	4b91      	ldr	r3, [pc, #580]	; (8006b04 <mainLoop+0x2cc>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a91      	ldr	r2, [pc, #580]	; (8006b08 <mainLoop+0x2d0>)
 80068c4:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80068c6:	4b91      	ldr	r3, [pc, #580]	; (8006b0c <mainLoop+0x2d4>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d03a      	beq.n	8006944 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80068ce:	bf00      	nop
 80068d0:	488f      	ldr	r0, [pc, #572]	; (8006b10 <mainLoop+0x2d8>)
 80068d2:	f003 fb54 	bl	8009f7e <HAL_I2C_GetError>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d0f9      	beq.n	80068d0 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80068dc:	bf00      	nop
 80068de:	488c      	ldr	r0, [pc, #560]	; (8006b10 <mainLoop+0x2d8>)
 80068e0:	f003 fb40 	bl	8009f64 <HAL_I2C_GetState>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	d1f9      	bne.n	80068de <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80068ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80068ee:	9302      	str	r3, [sp, #8]
 80068f0:	236e      	movs	r3, #110	; 0x6e
 80068f2:	9301      	str	r3, [sp, #4]
 80068f4:	4b87      	ldr	r3, [pc, #540]	; (8006b14 <mainLoop+0x2dc>)
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	236e      	movs	r3, #110	; 0x6e
 80068fa:	2200      	movs	r2, #0
 80068fc:	21a0      	movs	r1, #160	; 0xa0
 80068fe:	4884      	ldr	r0, [pc, #528]	; (8006b10 <mainLoop+0x2d8>)
 8006900:	f002 ffce 	bl	80098a0 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006904:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006908:	f001 ff40 	bl	800878c <HAL_Delay>

		  hafizaYaz=0;
 800690c:	4b7f      	ldr	r3, [pc, #508]	; (8006b0c <mainLoop+0x2d4>)
 800690e:	2200      	movs	r2, #0
 8006910:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006912:	4b81      	ldr	r3, [pc, #516]	; (8006b18 <mainLoop+0x2e0>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d105      	bne.n	8006926 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 800691a:	4a80      	ldr	r2, [pc, #512]	; (8006b1c <mainLoop+0x2e4>)
 800691c:	2101      	movs	r1, #1
 800691e:	2002      	movs	r0, #2
 8006920:	f001 f9de 	bl	8007ce0 <lcd_print>
 8006924:	e008      	b.n	8006938 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006926:	4b7c      	ldr	r3, [pc, #496]	; (8006b18 <mainLoop+0x2e0>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d104      	bne.n	8006938 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 800692e:	4a7c      	ldr	r2, [pc, #496]	; (8006b20 <mainLoop+0x2e8>)
 8006930:	2101      	movs	r1, #1
 8006932:	2002      	movs	r0, #2
 8006934:	f001 f9d4 	bl	8007ce0 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800693c:	f001 ff26 	bl	800878c <HAL_Delay>
		  lcd_clear();
 8006940:	f001 f9fa 	bl	8007d38 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006944:	4b77      	ldr	r3, [pc, #476]	; (8006b24 <mainLoop+0x2ec>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	f083 0301 	eor.w	r3, r3, #1
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d06d      	beq.n	8006a2e <mainLoop+0x1f6>
 8006952:	486f      	ldr	r0, [pc, #444]	; (8006b10 <mainLoop+0x2d8>)
 8006954:	f003 fb06 	bl	8009f64 <HAL_I2C_GetState>
 8006958:	4603      	mov	r3, r0
 800695a:	2b20      	cmp	r3, #32
 800695c:	d167      	bne.n	8006a2e <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 800695e:	4b72      	ldr	r3, [pc, #456]	; (8006b28 <mainLoop+0x2f0>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	f083 0301 	eor.w	r3, r3, #1
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d044      	beq.n	80069f6 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 800696c:	4a6f      	ldr	r2, [pc, #444]	; (8006b2c <mainLoop+0x2f4>)
 800696e:	2101      	movs	r1, #1
 8006970:	2001      	movs	r0, #1
 8006972:	f001 f9b5 	bl	8007ce0 <lcd_print>
			  if(dilSecim==0) {
 8006976:	4b68      	ldr	r3, [pc, #416]	; (8006b18 <mainLoop+0x2e0>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d105      	bne.n	800698a <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 800697e:	4a6c      	ldr	r2, [pc, #432]	; (8006b30 <mainLoop+0x2f8>)
 8006980:	2101      	movs	r1, #1
 8006982:	2002      	movs	r0, #2
 8006984:	f001 f9ac 	bl	8007ce0 <lcd_print>
 8006988:	e008      	b.n	800699c <mainLoop+0x164>
			  } else if(dilSecim==1) {
 800698a:	4b63      	ldr	r3, [pc, #396]	; (8006b18 <mainLoop+0x2e0>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d104      	bne.n	800699c <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006992:	4a68      	ldr	r2, [pc, #416]	; (8006b34 <mainLoop+0x2fc>)
 8006994:	2101      	movs	r1, #1
 8006996:	2002      	movs	r0, #2
 8006998:	f001 f9a2 	bl	8007ce0 <lcd_print>
			  }
			  HAL_Delay(1000);
 800699c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069a0:	f001 fef4 	bl	800878c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80069a4:	bf00      	nop
 80069a6:	485a      	ldr	r0, [pc, #360]	; (8006b10 <mainLoop+0x2d8>)
 80069a8:	f003 fae9 	bl	8009f7e <HAL_I2C_GetError>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d0f9      	beq.n	80069a6 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80069b2:	e003      	b.n	80069bc <mainLoop+0x184>
				  HAL_Delay(1000);
 80069b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069b8:	f001 fee8 	bl	800878c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80069bc:	4854      	ldr	r0, [pc, #336]	; (8006b10 <mainLoop+0x2d8>)
 80069be:	f003 fad1 	bl	8009f64 <HAL_I2C_GetState>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	d1f5      	bne.n	80069b4 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 80069c8:	4b53      	ldr	r3, [pc, #332]	; (8006b18 <mainLoop+0x2e0>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d105      	bne.n	80069dc <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 80069d0:	4a59      	ldr	r2, [pc, #356]	; (8006b38 <mainLoop+0x300>)
 80069d2:	2101      	movs	r1, #1
 80069d4:	2002      	movs	r0, #2
 80069d6:	f001 f983 	bl	8007ce0 <lcd_print>
 80069da:	e008      	b.n	80069ee <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 80069dc:	4b4e      	ldr	r3, [pc, #312]	; (8006b18 <mainLoop+0x2e0>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d104      	bne.n	80069ee <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 80069e4:	4a55      	ldr	r2, [pc, #340]	; (8006b3c <mainLoop+0x304>)
 80069e6:	2101      	movs	r1, #1
 80069e8:	2002      	movs	r0, #2
 80069ea:	f001 f979 	bl	8007ce0 <lcd_print>
			  }

			  ilkOkuma=1;
 80069ee:	4b4e      	ldr	r3, [pc, #312]	; (8006b28 <mainLoop+0x2f0>)
 80069f0:	2201      	movs	r2, #1
 80069f2:	701a      	strb	r2, [r3, #0]
 80069f4:	e014      	b.n	8006a20 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80069f6:	4b48      	ldr	r3, [pc, #288]	; (8006b18 <mainLoop+0x2e0>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d105      	bne.n	8006a0a <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80069fe:	4a50      	ldr	r2, [pc, #320]	; (8006b40 <mainLoop+0x308>)
 8006a00:	2101      	movs	r1, #1
 8006a02:	2002      	movs	r0, #2
 8006a04:	f001 f96c 	bl	8007ce0 <lcd_print>
 8006a08:	e008      	b.n	8006a1c <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006a0a:	4b43      	ldr	r3, [pc, #268]	; (8006b18 <mainLoop+0x2e0>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d104      	bne.n	8006a1c <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006a12:	4a4c      	ldr	r2, [pc, #304]	; (8006b44 <mainLoop+0x30c>)
 8006a14:	2101      	movs	r1, #1
 8006a16:	2002      	movs	r0, #2
 8006a18:	f001 f962 	bl	8007ce0 <lcd_print>
			  }
			  lcd_clear();
 8006a1c:	f001 f98c 	bl	8007d38 <lcd_clear>
		  }

		  lcd_clear();
 8006a20:	f001 f98a 	bl	8007d38 <lcd_clear>

		  eepromKontrol();
 8006a24:	f7f9 fc06 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006a28:	4b3e      	ldr	r3, [pc, #248]	; (8006b24 <mainLoop+0x2ec>)
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006a2e:	4b46      	ldr	r3, [pc, #280]	; (8006b48 <mainLoop+0x310>)
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d11c      	bne.n	8006a70 <mainLoop+0x238>
 8006a36:	4b45      	ldr	r3, [pc, #276]	; (8006b4c <mainLoop+0x314>)
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	f083 0301 	eor.w	r3, r3, #1
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d015      	beq.n	8006a70 <mainLoop+0x238>
 8006a44:	4b42      	ldr	r3, [pc, #264]	; (8006b50 <mainLoop+0x318>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d111      	bne.n	8006a70 <mainLoop+0x238>
			lcd_clear();
 8006a4c:	f001 f974 	bl	8007d38 <lcd_clear>
			HAL_Delay(10);
 8006a50:	200a      	movs	r0, #10
 8006a52:	f001 fe9b 	bl	800878c <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006a56:	4a3f      	ldr	r2, [pc, #252]	; (8006b54 <mainLoop+0x31c>)
 8006a58:	2101      	movs	r1, #1
 8006a5a:	2001      	movs	r0, #1
 8006a5c:	f001 f940 	bl	8007ce0 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006a60:	4a3d      	ldr	r2, [pc, #244]	; (8006b58 <mainLoop+0x320>)
 8006a62:	2101      	movs	r1, #1
 8006a64:	2002      	movs	r0, #2
 8006a66:	f001 f93b 	bl	8007ce0 <lcd_print>
			mesajYazildi=1;
 8006a6a:	4b38      	ldr	r3, [pc, #224]	; (8006b4c <mainLoop+0x314>)
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006a70:	4b35      	ldr	r3, [pc, #212]	; (8006b48 <mainLoop+0x310>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d112      	bne.n	8006a9e <mainLoop+0x266>
 8006a78:	2102      	movs	r1, #2
 8006a7a:	481f      	ldr	r0, [pc, #124]	; (8006af8 <mainLoop+0x2c0>)
 8006a7c:	f002 fc56 	bl	800932c <HAL_GPIO_ReadPin>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d10b      	bne.n	8006a9e <mainLoop+0x266>
 8006a86:	2104      	movs	r1, #4
 8006a88:	481b      	ldr	r0, [pc, #108]	; (8006af8 <mainLoop+0x2c0>)
 8006a8a:	f002 fc4f 	bl	800932c <HAL_GPIO_ReadPin>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d104      	bne.n	8006a9e <mainLoop+0x266>
			menuGiris=1;
 8006a94:	4b2c      	ldr	r3, [pc, #176]	; (8006b48 <mainLoop+0x310>)
 8006a96:	2201      	movs	r2, #1
 8006a98:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006a9a:	f001 f94d 	bl	8007d38 <lcd_clear>
		}

		if(menuGiris==1) {
 8006a9e:	4b2a      	ldr	r3, [pc, #168]	; (8006b48 <mainLoop+0x310>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <mainLoop+0x272>
			menu();
 8006aa6:	f7fa fb7d 	bl	80011a4 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006aae:	4813      	ldr	r0, [pc, #76]	; (8006afc <mainLoop+0x2c4>)
 8006ab0:	f002 fc6b 	bl	800938a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006ab4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ab8:	4828      	ldr	r0, [pc, #160]	; (8006b5c <mainLoop+0x324>)
 8006aba:	f002 fc37 	bl	800932c <HAL_GPIO_ReadPin>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <mainLoop+0x2a2>
 8006ac4:	4b26      	ldr	r3, [pc, #152]	; (8006b60 <mainLoop+0x328>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	f083 0301 	eor.w	r3, r3, #1
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <mainLoop+0x2a2>
			stopVar=1;
 8006ad2:	4b24      	ldr	r3, [pc, #144]	; (8006b64 <mainLoop+0x32c>)
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	701a      	strb	r2, [r3, #0]
 8006ad8:	e002      	b.n	8006ae0 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006ada:	4b22      	ldr	r3, [pc, #136]	; (8006b64 <mainLoop+0x32c>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006ae0:	f7fd ffe8 	bl	8004ab4 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006ae4:	f7fe f81a 	bl	8004b1c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006ae8:	f7fe f85e 	bl	8004ba8 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006aec:	f7fe f8ae 	bl	8004c4c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006af0:	f7ff fc08 	bl	8006304 <checkDemoModCalisma>
		checkLCDBacklight();
 8006af4:	e6a3      	b.n	800683e <mainLoop+0x6>
 8006af6:	bf00      	nop
 8006af8:	40010800 	.word	0x40010800
 8006afc:	40011000 	.word	0x40011000
 8006b00:	2000024f 	.word	0x2000024f
 8006b04:	200001fc 	.word	0x200001fc
 8006b08:	20000218 	.word	0x20000218
 8006b0c:	2000024c 	.word	0x2000024c
 8006b10:	200003a8 	.word	0x200003a8
 8006b14:	20000118 	.word	0x20000118
 8006b18:	20000241 	.word	0x20000241
 8006b1c:	0800db5c 	.word	0x0800db5c
 8006b20:	0800db70 	.word	0x0800db70
 8006b24:	2000024d 	.word	0x2000024d
 8006b28:	2000024e 	.word	0x2000024e
 8006b2c:	0800db84 	.word	0x0800db84
 8006b30:	0800db98 	.word	0x0800db98
 8006b34:	0800dbac 	.word	0x0800dbac
 8006b38:	0800dbc0 	.word	0x0800dbc0
 8006b3c:	0800dbd4 	.word	0x0800dbd4
 8006b40:	0800dbe8 	.word	0x0800dbe8
 8006b44:	0800dbfc 	.word	0x0800dbfc
 8006b48:	2000023d 	.word	0x2000023d
 8006b4c:	20000254 	.word	0x20000254
 8006b50:	2000023e 	.word	0x2000023e
 8006b54:	0800dc10 	.word	0x0800dc10
 8006b58:	0800dc24 	.word	0x0800dc24
 8006b5c:	40010c00 	.word	0x40010c00
 8006b60:	20000275 	.word	0x20000275
 8006b64:	20000272 	.word	0x20000272

08006b68 <takeMachineID>:
#include "GlobalVariables.h"
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006b6e:	2001      	movs	r0, #1
 8006b70:	f001 f914 	bl	8007d9c <lcd_cursor>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006b74:	2305      	movs	r3, #5
 8006b76:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006b78:	2303      	movs	r3, #3
 8006b7a:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006b80:	4ba4      	ldr	r3, [pc, #656]	; (8006e14 <takeMachineID+0x2ac>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	603b      	str	r3, [r7, #0]

    memset(machineID, 0, sizeof(machineID));
 8006b86:	220c      	movs	r2, #12
 8006b88:	2100      	movs	r1, #0
 8006b8a:	48a3      	ldr	r0, [pc, #652]	; (8006e18 <takeMachineID+0x2b0>)
 8006b8c:	f005 fd21 	bl	800c5d2 <memset>
    memset(machineIDInt, 0, sizeof(machineIDInt));
 8006b90:	220c      	movs	r2, #12
 8006b92:	2100      	movs	r1, #0
 8006b94:	48a1      	ldr	r0, [pc, #644]	; (8006e1c <takeMachineID+0x2b4>)
 8006b96:	f005 fd1c 	bl	800c5d2 <memset>
    resetEEPROM4Wifi(1);
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	f7f9 fe68 	bl	8000870 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8006ba0:	2064      	movs	r0, #100	; 0x64
 8006ba2:	f001 fdf3 	bl	800878c <HAL_Delay>

    printTemplate(1, 0);
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	2001      	movs	r0, #1
 8006baa:	f7fa f96f 	bl	8000e8c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006bae:	2108      	movs	r1, #8
 8006bb0:	489b      	ldr	r0, [pc, #620]	; (8006e20 <takeMachineID+0x2b8>)
 8006bb2:	f002 fbbb 	bl	800932c <HAL_GPIO_ReadPin>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d12b      	bne.n	8006c14 <takeMachineID+0xac>
        	lcd_cursor(0);
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	f001 f8ed 	bl	8007d9c <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006bc2:	4895      	ldr	r0, [pc, #596]	; (8006e18 <takeMachineID+0x2b0>)
 8006bc4:	f7f9 fb2e 	bl	8000224 <strlen>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b0c      	cmp	r3, #12
 8006bcc:	d010      	beq.n	8006bf0 <takeMachineID+0x88>
        		lcd_clear();
 8006bce:	f001 f8b3 	bl	8007d38 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006bd2:	4a94      	ldr	r2, [pc, #592]	; (8006e24 <takeMachineID+0x2bc>)
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	f001 f882 	bl	8007ce0 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006bdc:	4a92      	ldr	r2, [pc, #584]	; (8006e28 <takeMachineID+0x2c0>)
 8006bde:	2101      	movs	r1, #1
 8006be0:	2002      	movs	r0, #2
 8006be2:	f001 f87d 	bl	8007ce0 <lcd_print>
        		HAL_Delay(1200);
 8006be6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006bea:	f001 fdcf 	bl	800878c <HAL_Delay>
        		goto mainSection;
 8006bee:	e7be      	b.n	8006b6e <takeMachineID+0x6>
        	}

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006bf0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006bf4:	9302      	str	r3, [sp, #8]
 8006bf6:	236e      	movs	r3, #110	; 0x6e
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	4b8c      	ldr	r3, [pc, #560]	; (8006e2c <takeMachineID+0x2c4>)
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	236e      	movs	r3, #110	; 0x6e
 8006c00:	2200      	movs	r2, #0
 8006c02:	21a0      	movs	r1, #160	; 0xa0
 8006c04:	488a      	ldr	r0, [pc, #552]	; (8006e30 <takeMachineID+0x2c8>)
 8006c06:	f002 fe4b 	bl	80098a0 <HAL_I2C_Mem_Write>
        	HAL_Delay(1000);
 8006c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c0e:	f001 fdbd 	bl	800878c <HAL_Delay>

            break;
 8006c12:	e13d      	b.n	8006e90 <takeMachineID+0x328>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006c14:	2101      	movs	r1, #1
 8006c16:	4882      	ldr	r0, [pc, #520]	; (8006e20 <takeMachineID+0x2b8>)
 8006c18:	f002 fb88 	bl	800932c <HAL_GPIO_ReadPin>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d111      	bne.n	8006c46 <takeMachineID+0xde>
        	if(cursorPosition == 7) {
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b07      	cmp	r3, #7
 8006c26:	d102      	bne.n	8006c2e <takeMachineID+0xc6>
        		cursorPosition = 10;
 8006c28:	230a      	movs	r3, #10
 8006c2a:	60bb      	str	r3, [r7, #8]
 8006c2c:	e008      	b.n	8006c40 <takeMachineID+0xd8>
        	} else if (cursorPosition == 14) {
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b0e      	cmp	r3, #14
 8006c32:	d102      	bne.n	8006c3a <takeMachineID+0xd2>
                cursorPosition = 3;
 8006c34:	2303      	movs	r3, #3
 8006c36:	60bb      	str	r3, [r7, #8]
 8006c38:	e002      	b.n	8006c40 <takeMachineID+0xd8>
            } else {
            	cursorPosition++;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006c40:	2096      	movs	r0, #150	; 0x96
 8006c42:	f001 fda3 	bl	800878c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006c46:	2108      	movs	r1, #8
 8006c48:	487a      	ldr	r0, [pc, #488]	; (8006e34 <takeMachineID+0x2cc>)
 8006c4a:	f002 fb6f 	bl	800932c <HAL_GPIO_ReadPin>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d111      	bne.n	8006c78 <takeMachineID+0x110>
            if (cursorPosition == 3) {
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d102      	bne.n	8006c60 <takeMachineID+0xf8>
                cursorPosition = 14;
 8006c5a:	230e      	movs	r3, #14
 8006c5c:	60bb      	str	r3, [r7, #8]
 8006c5e:	e008      	b.n	8006c72 <takeMachineID+0x10a>
            } else if(cursorPosition == 10) {
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b0a      	cmp	r3, #10
 8006c64:	d102      	bne.n	8006c6c <takeMachineID+0x104>
            	cursorPosition = 7;
 8006c66:	2307      	movs	r3, #7
 8006c68:	60bb      	str	r3, [r7, #8]
 8006c6a:	e002      	b.n	8006c72 <takeMachineID+0x10a>
            } else {
            	cursorPosition--;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006c72:	2096      	movs	r0, #150	; 0x96
 8006c74:	f001 fd8a 	bl	800878c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006c78:	2102      	movs	r1, #2
 8006c7a:	4869      	ldr	r0, [pc, #420]	; (8006e20 <takeMachineID+0x2b8>)
 8006c7c:	f002 fb56 	bl	800932c <HAL_GPIO_ReadPin>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	f040 80aa 	bne.w	8006ddc <takeMachineID+0x274>
        	if(cursorPosition == 3) {
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d10a      	bne.n	8006ca4 <takeMachineID+0x13c>
        		machineID[arrayPos] = '0';
 8006c8e:	4a62      	ldr	r2, [pc, #392]	; (8006e18 <takeMachineID+0x2b0>)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4413      	add	r3, r2
 8006c94:	2230      	movs	r2, #48	; 0x30
 8006c96:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006c98:	4a64      	ldr	r2, [pc, #400]	; (8006e2c <takeMachineID+0x2c4>)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	e07c      	b.n	8006d9e <takeMachineID+0x236>
        	} else if(cursorPosition == 4) {
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d10a      	bne.n	8006cc0 <takeMachineID+0x158>
        		machineID[arrayPos] = '1';
 8006caa:	4a5b      	ldr	r2, [pc, #364]	; (8006e18 <takeMachineID+0x2b0>)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4413      	add	r3, r2
 8006cb0:	2231      	movs	r2, #49	; 0x31
 8006cb2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006cb4:	4a5d      	ldr	r2, [pc, #372]	; (8006e2c <takeMachineID+0x2c4>)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	4413      	add	r3, r2
 8006cba:	2201      	movs	r2, #1
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	e06e      	b.n	8006d9e <takeMachineID+0x236>
        	} else if(cursorPosition == 5) {
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b05      	cmp	r3, #5
 8006cc4:	d10a      	bne.n	8006cdc <takeMachineID+0x174>
        		machineID[arrayPos] = '2';
 8006cc6:	4a54      	ldr	r2, [pc, #336]	; (8006e18 <takeMachineID+0x2b0>)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4413      	add	r3, r2
 8006ccc:	2232      	movs	r2, #50	; 0x32
 8006cce:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006cd0:	4a56      	ldr	r2, [pc, #344]	; (8006e2c <takeMachineID+0x2c4>)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	e060      	b.n	8006d9e <takeMachineID+0x236>
        	} else if(cursorPosition == 6) {
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b06      	cmp	r3, #6
 8006ce0:	d10a      	bne.n	8006cf8 <takeMachineID+0x190>
        		machineID[arrayPos] = '3';
 8006ce2:	4a4d      	ldr	r2, [pc, #308]	; (8006e18 <takeMachineID+0x2b0>)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	2233      	movs	r2, #51	; 0x33
 8006cea:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006cec:	4a4f      	ldr	r2, [pc, #316]	; (8006e2c <takeMachineID+0x2c4>)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	2203      	movs	r2, #3
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	e052      	b.n	8006d9e <takeMachineID+0x236>
        	} else if(cursorPosition == 7) {
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b07      	cmp	r3, #7
 8006cfc:	d10a      	bne.n	8006d14 <takeMachineID+0x1ac>
        		machineID[arrayPos] = '4';
 8006cfe:	4a46      	ldr	r2, [pc, #280]	; (8006e18 <takeMachineID+0x2b0>)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4413      	add	r3, r2
 8006d04:	2234      	movs	r2, #52	; 0x34
 8006d06:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006d08:	4a48      	ldr	r2, [pc, #288]	; (8006e2c <takeMachineID+0x2c4>)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	2204      	movs	r2, #4
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	e044      	b.n	8006d9e <takeMachineID+0x236>
        	} else if(cursorPosition == 10) {
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b0a      	cmp	r3, #10
 8006d18:	d10a      	bne.n	8006d30 <takeMachineID+0x1c8>
        		machineID[arrayPos] = '5';
 8006d1a:	4a3f      	ldr	r2, [pc, #252]	; (8006e18 <takeMachineID+0x2b0>)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4413      	add	r3, r2
 8006d20:	2235      	movs	r2, #53	; 0x35
 8006d22:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006d24:	4a41      	ldr	r2, [pc, #260]	; (8006e2c <takeMachineID+0x2c4>)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	4413      	add	r3, r2
 8006d2a:	2205      	movs	r2, #5
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	e036      	b.n	8006d9e <takeMachineID+0x236>
        	} else if(cursorPosition == 11) {
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b0b      	cmp	r3, #11
 8006d34:	d10a      	bne.n	8006d4c <takeMachineID+0x1e4>
        		machineID[arrayPos] = '6';
 8006d36:	4a38      	ldr	r2, [pc, #224]	; (8006e18 <takeMachineID+0x2b0>)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	2236      	movs	r2, #54	; 0x36
 8006d3e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006d40:	4a3a      	ldr	r2, [pc, #232]	; (8006e2c <takeMachineID+0x2c4>)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	4413      	add	r3, r2
 8006d46:	2206      	movs	r2, #6
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	e028      	b.n	8006d9e <takeMachineID+0x236>
        	} else if(cursorPosition == 12) {
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2b0c      	cmp	r3, #12
 8006d50:	d10a      	bne.n	8006d68 <takeMachineID+0x200>
        		machineID[arrayPos] = '7';
 8006d52:	4a31      	ldr	r2, [pc, #196]	; (8006e18 <takeMachineID+0x2b0>)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4413      	add	r3, r2
 8006d58:	2237      	movs	r2, #55	; 0x37
 8006d5a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006d5c:	4a33      	ldr	r2, [pc, #204]	; (8006e2c <takeMachineID+0x2c4>)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	4413      	add	r3, r2
 8006d62:	2207      	movs	r2, #7
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	e01a      	b.n	8006d9e <takeMachineID+0x236>
        	} else if(cursorPosition == 13) {
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b0d      	cmp	r3, #13
 8006d6c:	d10a      	bne.n	8006d84 <takeMachineID+0x21c>
        		machineID[arrayPos] = '8';
 8006d6e:	4a2a      	ldr	r2, [pc, #168]	; (8006e18 <takeMachineID+0x2b0>)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4413      	add	r3, r2
 8006d74:	2238      	movs	r2, #56	; 0x38
 8006d76:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8006d78:	4a2c      	ldr	r2, [pc, #176]	; (8006e2c <takeMachineID+0x2c4>)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	2208      	movs	r2, #8
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	e00c      	b.n	8006d9e <takeMachineID+0x236>
        	} else if(cursorPosition == 14) {
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b0e      	cmp	r3, #14
 8006d88:	d109      	bne.n	8006d9e <takeMachineID+0x236>
        		machineID[arrayPos] = '9';
 8006d8a:	4a23      	ldr	r2, [pc, #140]	; (8006e18 <takeMachineID+0x2b0>)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4413      	add	r3, r2
 8006d90:	2239      	movs	r2, #57	; 0x39
 8006d92:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8006d94:	4a25      	ldr	r2, [pc, #148]	; (8006e2c <takeMachineID+0x2c4>)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	4413      	add	r3, r2
 8006d9a:	2209      	movs	r2, #9
 8006d9c:	701a      	strb	r2, [r3, #0]
        	}

        	if(arrayPos == machineIDCharacterLimit - 1) {
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b0b      	cmp	r3, #11
 8006da2:	d105      	bne.n	8006db0 <takeMachineID+0x248>
        		machineID[machineIDCharacterLimit] = '\0';
 8006da4:	4b1c      	ldr	r3, [pc, #112]	; (8006e18 <takeMachineID+0x2b0>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	731a      	strb	r2, [r3, #12]
        		machineIDInt[machineIDCharacterLimit] = '\0';
 8006daa:	4b1c      	ldr	r3, [pc, #112]	; (8006e1c <takeMachineID+0x2b4>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	731a      	strb	r2, [r3, #12]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	b2d9      	uxtb	r1, r3
 8006db4:	4a18      	ldr	r2, [pc, #96]	; (8006e18 <takeMachineID+0x2b0>)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4413      	add	r3, r2
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	f000 ffa3 	bl	8007d0a <lcd_print_char>

        	writeLoc++;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8006dd6:	2096      	movs	r0, #150	; 0x96
 8006dd8:	f001 fcd8 	bl	800878c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006ddc:	2104      	movs	r1, #4
 8006dde:	4810      	ldr	r0, [pc, #64]	; (8006e20 <takeMachineID+0x2b8>)
 8006de0:	f002 faa4 	bl	800932c <HAL_GPIO_ReadPin>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d14b      	bne.n	8006e82 <takeMachineID+0x31a>
            if(strlen(machineID) >= 1) {
 8006dea:	4b0b      	ldr	r3, [pc, #44]	; (8006e18 <takeMachineID+0x2b0>)
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d044      	beq.n	8006e7c <takeMachineID+0x314>
                machineID[arrayPos] = '\0';
 8006df2:	4a09      	ldr	r2, [pc, #36]	; (8006e18 <takeMachineID+0x2b0>)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4413      	add	r3, r2
 8006df8:	2200      	movs	r2, #0
 8006dfa:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8006dfc:	4a0b      	ldr	r2, [pc, #44]	; (8006e2c <takeMachineID+0x2c4>)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	4413      	add	r3, r2
 8006e02:	2200      	movs	r2, #0
 8006e04:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b05      	cmp	r3, #5
 8006e0a:	dd15      	ble.n	8006e38 <takeMachineID+0x2d0>
                	writeLoc--;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	e016      	b.n	8006e42 <takeMachineID+0x2da>
 8006e14:	20000004 	.word	0x20000004
 8006e18:	20000190 	.word	0x20000190
 8006e1c:	200001c4 	.word	0x200001c4
 8006e20:	40010800 	.word	0x40010800
 8006e24:	0800dc38 	.word	0x0800dc38
 8006e28:	0800dc4c 	.word	0x0800dc4c
 8006e2c:	20000118 	.word	0x20000118
 8006e30:	200003a8 	.word	0x200003a8
 8006e34:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	dc01      	bgt.n	8006e42 <takeMachineID+0x2da>
                	writeLoc = 5;
 8006e3e:	2305      	movs	r3, #5
 8006e40:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dd06      	ble.n	8006e56 <takeMachineID+0x2ee>
                	arrayPos--;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	e007      	b.n	8006e66 <takeMachineID+0x2fe>
                } else if(arrayPos < 0) {
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	da04      	bge.n	8006e66 <takeMachineID+0x2fe>
                	arrayPos = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8006e60:	4b0d      	ldr	r3, [pc, #52]	; (8006e98 <takeMachineID+0x330>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	4619      	mov	r1, r3
 8006e70:	2001      	movs	r0, #1
 8006e72:	f000 ff6b 	bl	8007d4c <lcd_delete_char>
                HAL_Delay(50);
 8006e76:	2032      	movs	r0, #50	; 0x32
 8006e78:	f001 fc88 	bl	800878c <HAL_Delay>
            }

            HAL_Delay(150);
 8006e7c:	2096      	movs	r0, #150	; 0x96
 8006e7e:	f001 fc85 	bl	800878c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	4619      	mov	r1, r3
 8006e88:	2002      	movs	r0, #2
 8006e8a:	f000 ff0a 	bl	8007ca2 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e8e:	e68e      	b.n	8006bae <takeMachineID+0x46>
    }
}
 8006e90:	bf00      	nop
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	20000004 	.word	0x20000004

08006e9c <takeWifiSSID>:

void takeWifiSSID() {
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b08a      	sub	sp, #40	; 0x28
 8006ea0:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	f000 ff7a 	bl	8007d9c <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID)); //wifiSSID Sıfırlanıyor.
 8006ea8:	2214      	movs	r2, #20
 8006eaa:	2100      	movs	r1, #0
 8006eac:	4877      	ldr	r0, [pc, #476]	; (800708c <takeWifiSSID+0x1f0>)
 8006eae:	f005 fb90 	bl	800c5d2 <memset>
    memset(wifiSSIDInt, 0, sizeof(wifiSSIDInt)); //wifiSSID Sıfırlanıyor.
 8006eb2:	2214      	movs	r2, #20
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	4876      	ldr	r0, [pc, #472]	; (8007090 <takeWifiSSID+0x1f4>)
 8006eb8:	f005 fb8b 	bl	800c5d2 <memset>
    resetEEPROM4Wifi(2);
 8006ebc:	2002      	movs	r0, #2
 8006ebe:	f7f9 fcd7 	bl	8000870 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8006ec2:	2064      	movs	r0, #100	; 0x64
 8006ec4:	f001 fc62 	bl	800878c <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8006ecc:	2307      	movs	r3, #7
 8006ece:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8006ed8:	4b6e      	ldr	r3, [pc, #440]	; (8007094 <takeWifiSSID+0x1f8>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006ede:	2101      	movs	r1, #1
 8006ee0:	2002      	movs	r0, #2
 8006ee2:	f7f9 ffd3 	bl	8000e8c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006ee6:	2108      	movs	r1, #8
 8006ee8:	486b      	ldr	r0, [pc, #428]	; (8007098 <takeWifiSSID+0x1fc>)
 8006eea:	f002 fa1f 	bl	800932c <HAL_GPIO_ReadPin>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d12b      	bne.n	8006f4c <takeWifiSSID+0xb0>
            lcd_cursor(0);
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	f000 ff51 	bl	8007d9c <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006efa:	4864      	ldr	r0, [pc, #400]	; (800708c <takeWifiSSID+0x1f0>)
 8006efc:	f7f9 f992 	bl	8000224 <strlen>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b14      	cmp	r3, #20
 8006f04:	d910      	bls.n	8006f28 <takeWifiSSID+0x8c>
                lcd_clear();
 8006f06:	f000 ff17 	bl	8007d38 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006f0a:	4a64      	ldr	r2, [pc, #400]	; (800709c <takeWifiSSID+0x200>)
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	2001      	movs	r0, #1
 8006f10:	f000 fee6 	bl	8007ce0 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006f14:	4a62      	ldr	r2, [pc, #392]	; (80070a0 <takeWifiSSID+0x204>)
 8006f16:	2101      	movs	r1, #1
 8006f18:	2002      	movs	r0, #2
 8006f1a:	f000 fee1 	bl	8007ce0 <lcd_print>
                HAL_Delay(1250);
 8006f1e:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8006f22:	f001 fc33 	bl	800878c <HAL_Delay>
                goto mainSSIDSection;
 8006f26:	e7bc      	b.n	8006ea2 <takeWifiSSID+0x6>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006f28:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006f2c:	9302      	str	r3, [sp, #8]
 8006f2e:	236e      	movs	r3, #110	; 0x6e
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	4b5c      	ldr	r3, [pc, #368]	; (80070a4 <takeWifiSSID+0x208>)
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	236e      	movs	r3, #110	; 0x6e
 8006f38:	2200      	movs	r2, #0
 8006f3a:	21a0      	movs	r1, #160	; 0xa0
 8006f3c:	485a      	ldr	r0, [pc, #360]	; (80070a8 <takeWifiSSID+0x20c>)
 8006f3e:	f002 fcaf 	bl	80098a0 <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 8006f42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f46:	f001 fc21 	bl	800878c <HAL_Delay>

            break;
 8006f4a:	e14b      	b.n	80071e4 <takeWifiSSID+0x348>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	4852      	ldr	r0, [pc, #328]	; (8007098 <takeWifiSSID+0x1fc>)
 8006f50:	f002 f9ec 	bl	800932c <HAL_GPIO_ReadPin>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d14d      	bne.n	8006ff6 <takeWifiSSID+0x15a>
        	if(cursorPosition > 80) {
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2b50      	cmp	r3, #80	; 0x50
 8006f5e:	dd01      	ble.n	8006f64 <takeWifiSSID+0xc8>
        		cursorPosition = 1;
 8006f60:	2301      	movs	r3, #1
 8006f62:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b10      	cmp	r3, #16
 8006f68:	d13f      	bne.n	8006fea <takeWifiSSID+0x14e>
            	if(page == 1) {
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d109      	bne.n	8006f84 <takeWifiSSID+0xe8>
            		cursorPosition = 1;
 8006f70:	2301      	movs	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]
            		page++;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	3301      	adds	r3, #1
 8006f78:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8006f7a:	2102      	movs	r1, #2
 8006f7c:	2002      	movs	r0, #2
 8006f7e:	f7f9 ff85 	bl	8000e8c <printTemplate>
 8006f82:	e035      	b.n	8006ff0 <takeWifiSSID+0x154>
            	} else if(page == 2) {
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d109      	bne.n	8006f9e <takeWifiSSID+0x102>
            		cursorPosition = 1;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	60fb      	str	r3, [r7, #12]
            		page++;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	3301      	adds	r3, #1
 8006f92:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8006f94:	2103      	movs	r1, #3
 8006f96:	2002      	movs	r0, #2
 8006f98:	f7f9 ff78 	bl	8000e8c <printTemplate>
 8006f9c:	e028      	b.n	8006ff0 <takeWifiSSID+0x154>
            	} else if(page == 3) {
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d109      	bne.n	8006fb8 <takeWifiSSID+0x11c>
            		cursorPosition = 1;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	60fb      	str	r3, [r7, #12]
            		page++;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	3301      	adds	r3, #1
 8006fac:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8006fae:	2104      	movs	r1, #4
 8006fb0:	2002      	movs	r0, #2
 8006fb2:	f7f9 ff6b 	bl	8000e8c <printTemplate>
 8006fb6:	e01b      	b.n	8006ff0 <takeWifiSSID+0x154>
            	} else if(page == 4) {
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d109      	bne.n	8006fd2 <takeWifiSSID+0x136>
            		cursorPosition = 1;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]
            		page++;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8006fc8:	2105      	movs	r1, #5
 8006fca:	2002      	movs	r0, #2
 8006fcc:	f7f9 ff5e 	bl	8000e8c <printTemplate>
 8006fd0:	e00e      	b.n	8006ff0 <takeWifiSSID+0x154>
            	} else if(page == 5) {
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b05      	cmp	r3, #5
 8006fd6:	d10b      	bne.n	8006ff0 <takeWifiSSID+0x154>
            		cursorPosition = 1;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	2002      	movs	r0, #2
 8006fe4:	f7f9 ff52 	bl	8000e8c <printTemplate>
 8006fe8:	e002      	b.n	8006ff0 <takeWifiSSID+0x154>
            	}
            } else {
            	cursorPosition++;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3301      	adds	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006ff0:	2096      	movs	r0, #150	; 0x96
 8006ff2:	f001 fbcb 	bl	800878c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006ff6:	2108      	movs	r1, #8
 8006ff8:	482c      	ldr	r0, [pc, #176]	; (80070ac <takeWifiSSID+0x210>)
 8006ffa:	f002 f997 	bl	800932c <HAL_GPIO_ReadPin>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b01      	cmp	r3, #1
 8007002:	d15b      	bne.n	80070bc <takeWifiSSID+0x220>
        	if(cursorPosition < 1) {
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	dc01      	bgt.n	800700e <takeWifiSSID+0x172>
        		cursorPosition = 80;
 800700a:	2350      	movs	r3, #80	; 0x50
 800700c:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d14d      	bne.n	80070b0 <takeWifiSSID+0x214>
            	if(page == 1) {
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d108      	bne.n	800702c <takeWifiSSID+0x190>
            		cursorPosition = 16;
 800701a:	2310      	movs	r3, #16
 800701c:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800701e:	2305      	movs	r3, #5
 8007020:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007022:	2105      	movs	r1, #5
 8007024:	2002      	movs	r0, #2
 8007026:	f7f9 ff31 	bl	8000e8c <printTemplate>
 800702a:	e044      	b.n	80070b6 <takeWifiSSID+0x21a>
            	} else if(page == 2) {
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2b02      	cmp	r3, #2
 8007030:	d108      	bne.n	8007044 <takeWifiSSID+0x1a8>
            		cursorPosition = 16;
 8007032:	2310      	movs	r3, #16
 8007034:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007036:	2301      	movs	r3, #1
 8007038:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800703a:	2101      	movs	r1, #1
 800703c:	2002      	movs	r0, #2
 800703e:	f7f9 ff25 	bl	8000e8c <printTemplate>
 8007042:	e038      	b.n	80070b6 <takeWifiSSID+0x21a>
            	} else if(page == 3) {
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2b03      	cmp	r3, #3
 8007048:	d108      	bne.n	800705c <takeWifiSSID+0x1c0>
            		cursorPosition = 16;
 800704a:	2310      	movs	r3, #16
 800704c:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800704e:	2302      	movs	r3, #2
 8007050:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007052:	2102      	movs	r1, #2
 8007054:	2002      	movs	r0, #2
 8007056:	f7f9 ff19 	bl	8000e8c <printTemplate>
 800705a:	e02c      	b.n	80070b6 <takeWifiSSID+0x21a>
            	} else if(page == 4) {
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2b04      	cmp	r3, #4
 8007060:	d108      	bne.n	8007074 <takeWifiSSID+0x1d8>
            		cursorPosition = 16;
 8007062:	2310      	movs	r3, #16
 8007064:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007066:	2303      	movs	r3, #3
 8007068:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800706a:	2103      	movs	r1, #3
 800706c:	2002      	movs	r0, #2
 800706e:	f7f9 ff0d 	bl	8000e8c <printTemplate>
 8007072:	e020      	b.n	80070b6 <takeWifiSSID+0x21a>
            	} else if(page == 5) {
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2b05      	cmp	r3, #5
 8007078:	d11d      	bne.n	80070b6 <takeWifiSSID+0x21a>
            		cursorPosition = 16;
 800707a:	2310      	movs	r3, #16
 800707c:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800707e:	2304      	movs	r3, #4
 8007080:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007082:	2104      	movs	r1, #4
 8007084:	2002      	movs	r0, #2
 8007086:	f7f9 ff01 	bl	8000e8c <printTemplate>
 800708a:	e014      	b.n	80070b6 <takeWifiSSID+0x21a>
 800708c:	2000019c 	.word	0x2000019c
 8007090:	200001d0 	.word	0x200001d0
 8007094:	20000008 	.word	0x20000008
 8007098:	40010800 	.word	0x40010800
 800709c:	0800dc60 	.word	0x0800dc60
 80070a0:	0800dc74 	.word	0x0800dc74
 80070a4:	20000118 	.word	0x20000118
 80070a8:	200003a8 	.word	0x200003a8
 80070ac:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80070b6:	2096      	movs	r0, #150	; 0x96
 80070b8:	f001 fb68 	bl	800878c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80070bc:	2102      	movs	r1, #2
 80070be:	484b      	ldr	r0, [pc, #300]	; (80071ec <takeWifiSSID+0x350>)
 80070c0:	f002 f934 	bl	800932c <HAL_GPIO_ReadPin>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d13f      	bne.n	800714a <takeWifiSSID+0x2ae>
        	wifiSSID[arrayPosition] = charactersArray[cursorPosition - 1];
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3b01      	subs	r3, #1
 80070ce:	4a48      	ldr	r2, [pc, #288]	; (80071f0 <takeWifiSSID+0x354>)
 80070d0:	5cd1      	ldrb	r1, [r2, r3]
 80070d2:	4a48      	ldr	r2, [pc, #288]	; (80071f4 <takeWifiSSID+0x358>)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	4413      	add	r3, r2
 80070d8:	460a      	mov	r2, r1
 80070da:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[arrayPosition] = cursorPosition - 1;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b2d9      	uxtb	r1, r3
 80070e4:	4a44      	ldr	r2, [pc, #272]	; (80071f8 <takeWifiSSID+0x35c>)
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	4413      	add	r3, r2
 80070ea:	460a      	mov	r2, r1
 80070ec:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition - 1;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	3b01      	subs	r3, #1
 80070f4:	b2d9      	uxtb	r1, r3
 80070f6:	4a41      	ldr	r2, [pc, #260]	; (80071fc <takeWifiSSID+0x360>)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4413      	add	r3, r2
 80070fc:	460a      	mov	r2, r1
 80070fe:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[arrayPosition]);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	b2d9      	uxtb	r1, r3
 8007104:	4a3b      	ldr	r2, [pc, #236]	; (80071f4 <takeWifiSSID+0x358>)
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	4413      	add	r3, r2
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	461a      	mov	r2, r3
 800710e:	2001      	movs	r0, #1
 8007110:	f000 fdfb 	bl	8007d0a <lcd_print_char>

            writeLoc++;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	3301      	adds	r3, #1
 8007118:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	3301      	adds	r3, #1
 800711e:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3301      	adds	r3, #1
 8007124:	607b      	str	r3, [r7, #4]

            wifiSSID[arrayPosition] = '\0';
 8007126:	4a33      	ldr	r2, [pc, #204]	; (80071f4 <takeWifiSSID+0x358>)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4413      	add	r3, r2
 800712c:	2200      	movs	r2, #0
 800712e:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[arrayPosition] = '\0';
 8007130:	4a31      	ldr	r2, [pc, #196]	; (80071f8 <takeWifiSSID+0x35c>)
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	4413      	add	r3, r2
 8007136:	2200      	movs	r2, #0
 8007138:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 800713a:	4a30      	ldr	r2, [pc, #192]	; (80071fc <takeWifiSSID+0x360>)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4413      	add	r3, r2
 8007140:	2200      	movs	r2, #0
 8007142:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007144:	2096      	movs	r0, #150	; 0x96
 8007146:	f001 fb21 	bl	800878c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800714a:	2104      	movs	r1, #4
 800714c:	4827      	ldr	r0, [pc, #156]	; (80071ec <takeWifiSSID+0x350>)
 800714e:	f002 f8ed 	bl	800932c <HAL_GPIO_ReadPin>
 8007152:	4603      	mov	r3, r0
 8007154:	2b01      	cmp	r3, #1
 8007156:	d13e      	bne.n	80071d6 <takeWifiSSID+0x33a>
        	if(strlen(wifiSSID) >= 1) {
 8007158:	4b26      	ldr	r3, [pc, #152]	; (80071f4 <takeWifiSSID+0x358>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d037      	beq.n	80071d0 <takeWifiSSID+0x334>
        		wifiSSID[arrayPosition] = '\0';
 8007160:	4a24      	ldr	r2, [pc, #144]	; (80071f4 <takeWifiSSID+0x358>)
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	4413      	add	r3, r2
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
        		wifiSSIDInt[arrayPosition] = '\0';
 800716a:	4a23      	ldr	r2, [pc, #140]	; (80071f8 <takeWifiSSID+0x35c>)
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4413      	add	r3, r2
 8007170:	2200      	movs	r2, #0
 8007172:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 8007174:	4a21      	ldr	r2, [pc, #132]	; (80071fc <takeWifiSSID+0x360>)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4413      	add	r3, r2
 800717a:	2200      	movs	r2, #0
 800717c:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b07      	cmp	r3, #7
 8007182:	dd03      	ble.n	800718c <takeWifiSSID+0x2f0>
        			writeLoc--;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	3b01      	subs	r3, #1
 8007188:	613b      	str	r3, [r7, #16]
 800718a:	e004      	b.n	8007196 <takeWifiSSID+0x2fa>
        		} else if(writeLoc < 7) {
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	2b06      	cmp	r3, #6
 8007190:	dc01      	bgt.n	8007196 <takeWifiSSID+0x2fa>
        			writeLoc = 7;
 8007192:	2307      	movs	r3, #7
 8007194:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	dd06      	ble.n	80071aa <takeWifiSSID+0x30e>
        			arrayPosition--;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	3b01      	subs	r3, #1
 80071a0:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	607b      	str	r3, [r7, #4]
 80071a8:	e007      	b.n	80071ba <takeWifiSSID+0x31e>
        		} else if(arrayPosition < 0) {
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	da04      	bge.n	80071ba <takeWifiSSID+0x31e>
        			arrayPosition = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 80071b4:	4b12      	ldr	r3, [pc, #72]	; (8007200 <takeWifiSSID+0x364>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	3306      	adds	r3, #6
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	4619      	mov	r1, r3
 80071c4:	2001      	movs	r0, #1
 80071c6:	f000 fdc1 	bl	8007d4c <lcd_delete_char>
        		HAL_Delay(50);
 80071ca:	2032      	movs	r0, #50	; 0x32
 80071cc:	f001 fade 	bl	800878c <HAL_Delay>
        	}

        	HAL_Delay(150);
 80071d0:	2096      	movs	r0, #150	; 0x96
 80071d2:	f001 fadb 	bl	800878c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	4619      	mov	r1, r3
 80071dc:	2002      	movs	r0, #2
 80071de:	f000 fd60 	bl	8007ca2 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80071e2:	e680      	b.n	8006ee6 <takeWifiSSID+0x4a>
    }
}
 80071e4:	bf00      	nop
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	40010800 	.word	0x40010800
 80071f0:	2000001c 	.word	0x2000001c
 80071f4:	2000019c 	.word	0x2000019c
 80071f8:	200001d0 	.word	0x200001d0
 80071fc:	20000118 	.word	0x20000118
 8007200:	20000008 	.word	0x20000008

08007204 <takeWifiPass>:

void takeWifiPass() {
 8007204:	b580      	push	{r7, lr}
 8007206:	b08a      	sub	sp, #40	; 0x28
 8007208:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 800720a:	2001      	movs	r0, #1
 800720c:	f000 fdc6 	bl	8007d9c <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 8007210:	2214      	movs	r2, #20
 8007212:	2100      	movs	r1, #0
 8007214:	4877      	ldr	r0, [pc, #476]	; (80073f4 <takeWifiPass+0x1f0>)
 8007216:	f005 f9dc 	bl	800c5d2 <memset>
    memset(wifiPassInt, 0, sizeof(wifiPassInt));
 800721a:	2214      	movs	r2, #20
 800721c:	2100      	movs	r1, #0
 800721e:	4876      	ldr	r0, [pc, #472]	; (80073f8 <takeWifiPass+0x1f4>)
 8007220:	f005 f9d7 	bl	800c5d2 <memset>
    resetEEPROM4Wifi(3);
 8007224:	2003      	movs	r0, #3
 8007226:	f7f9 fb23 	bl	8000870 <resetEEPROM4Wifi>
    HAL_Delay(100);
 800722a:	2064      	movs	r0, #100	; 0x64
 800722c:	f001 faae 	bl	800878c <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007230:	2301      	movs	r3, #1
 8007232:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterlerin yazılacağı başlangıç karakteri
 8007234:	2307      	movs	r3, #7
 8007236:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının seçim yaparken kullandığı işaretçi değişkeni
 8007238:	2301      	movs	r3, #1
 800723a:	60fb      	str	r3, [r7, #12]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarmak için kullanılacak olan değişken
 800723c:	2300      	movs	r3, #0
 800723e:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma aktarırken kullanılacak olan değişken
 8007240:	4b6e      	ldr	r3, [pc, #440]	; (80073fc <takeWifiPass+0x1f8>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007246:	2101      	movs	r1, #1
 8007248:	2003      	movs	r0, #3
 800724a:	f7f9 fe1f 	bl	8000e8c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800724e:	2108      	movs	r1, #8
 8007250:	486b      	ldr	r0, [pc, #428]	; (8007400 <takeWifiPass+0x1fc>)
 8007252:	f002 f86b 	bl	800932c <HAL_GPIO_ReadPin>
 8007256:	4603      	mov	r3, r0
 8007258:	2b01      	cmp	r3, #1
 800725a:	d12b      	bne.n	80072b4 <takeWifiPass+0xb0>
            lcd_cursor(0);
 800725c:	2000      	movs	r0, #0
 800725e:	f000 fd9d 	bl	8007d9c <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8007262:	4864      	ldr	r0, [pc, #400]	; (80073f4 <takeWifiPass+0x1f0>)
 8007264:	f7f8 ffde 	bl	8000224 <strlen>
 8007268:	4603      	mov	r3, r0
 800726a:	2b14      	cmp	r3, #20
 800726c:	d910      	bls.n	8007290 <takeWifiPass+0x8c>
                lcd_clear();
 800726e:	f000 fd63 	bl	8007d38 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007272:	4a64      	ldr	r2, [pc, #400]	; (8007404 <takeWifiPass+0x200>)
 8007274:	2101      	movs	r1, #1
 8007276:	2001      	movs	r0, #1
 8007278:	f000 fd32 	bl	8007ce0 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 800727c:	4a62      	ldr	r2, [pc, #392]	; (8007408 <takeWifiPass+0x204>)
 800727e:	2101      	movs	r1, #1
 8007280:	2002      	movs	r0, #2
 8007282:	f000 fd2d 	bl	8007ce0 <lcd_print>
                HAL_Delay(1200);
 8007286:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800728a:	f001 fa7f 	bl	800878c <HAL_Delay>
                goto mainPASSSection;
 800728e:	e7bc      	b.n	800720a <takeWifiPass+0x6>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007290:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007294:	9302      	str	r3, [sp, #8]
 8007296:	236e      	movs	r3, #110	; 0x6e
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	4b5c      	ldr	r3, [pc, #368]	; (800740c <takeWifiPass+0x208>)
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	236e      	movs	r3, #110	; 0x6e
 80072a0:	2200      	movs	r2, #0
 80072a2:	21a0      	movs	r1, #160	; 0xa0
 80072a4:	485a      	ldr	r0, [pc, #360]	; (8007410 <takeWifiPass+0x20c>)
 80072a6:	f002 fafb 	bl	80098a0 <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 80072aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072ae:	f001 fa6d 	bl	800878c <HAL_Delay>

            break;
 80072b2:	e136      	b.n	8007522 <takeWifiPass+0x31e>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80072b4:	2101      	movs	r1, #1
 80072b6:	4852      	ldr	r0, [pc, #328]	; (8007400 <takeWifiPass+0x1fc>)
 80072b8:	f002 f838 	bl	800932c <HAL_GPIO_ReadPin>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d14d      	bne.n	800735e <takeWifiPass+0x15a>
        	if(cursorPosition > 80) {
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b50      	cmp	r3, #80	; 0x50
 80072c6:	dd01      	ble.n	80072cc <takeWifiPass+0xc8>
        	    cursorPosition = 1;
 80072c8:	2301      	movs	r3, #1
 80072ca:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b10      	cmp	r3, #16
 80072d0:	d13f      	bne.n	8007352 <takeWifiPass+0x14e>
            	if(page == 1) {
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d109      	bne.n	80072ec <takeWifiPass+0xe8>
            		cursorPosition = 1;
 80072d8:	2301      	movs	r3, #1
 80072da:	60fb      	str	r3, [r7, #12]
            		page++;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	3301      	adds	r3, #1
 80072e0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80072e2:	2102      	movs	r1, #2
 80072e4:	2003      	movs	r0, #3
 80072e6:	f7f9 fdd1 	bl	8000e8c <printTemplate>
 80072ea:	e035      	b.n	8007358 <takeWifiPass+0x154>
            	} else if(page == 2) {
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d109      	bne.n	8007306 <takeWifiPass+0x102>
            		cursorPosition = 1;
 80072f2:	2301      	movs	r3, #1
 80072f4:	60fb      	str	r3, [r7, #12]
            		page++;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	3301      	adds	r3, #1
 80072fa:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80072fc:	2103      	movs	r1, #3
 80072fe:	2003      	movs	r0, #3
 8007300:	f7f9 fdc4 	bl	8000e8c <printTemplate>
 8007304:	e028      	b.n	8007358 <takeWifiPass+0x154>
            	} else if(page == 3) {
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b03      	cmp	r3, #3
 800730a:	d109      	bne.n	8007320 <takeWifiPass+0x11c>
            		cursorPosition = 1;
 800730c:	2301      	movs	r3, #1
 800730e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	3301      	adds	r3, #1
 8007314:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007316:	2104      	movs	r1, #4
 8007318:	2003      	movs	r0, #3
 800731a:	f7f9 fdb7 	bl	8000e8c <printTemplate>
 800731e:	e01b      	b.n	8007358 <takeWifiPass+0x154>
            	} else if(page == 4) {
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2b04      	cmp	r3, #4
 8007324:	d109      	bne.n	800733a <takeWifiPass+0x136>
            		cursorPosition = 1;
 8007326:	2301      	movs	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
            		page++;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	3301      	adds	r3, #1
 800732e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007330:	2105      	movs	r1, #5
 8007332:	2003      	movs	r0, #3
 8007334:	f7f9 fdaa 	bl	8000e8c <printTemplate>
 8007338:	e00e      	b.n	8007358 <takeWifiPass+0x154>
            	} else if(page == 5) {
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2b05      	cmp	r3, #5
 800733e:	d10b      	bne.n	8007358 <takeWifiPass+0x154>
            		cursorPosition = 1;
 8007340:	2301      	movs	r3, #1
 8007342:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007344:	2301      	movs	r3, #1
 8007346:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007348:	2101      	movs	r1, #1
 800734a:	2003      	movs	r0, #3
 800734c:	f7f9 fd9e 	bl	8000e8c <printTemplate>
 8007350:	e002      	b.n	8007358 <takeWifiPass+0x154>
            	}
            } else {
            	cursorPosition++;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3301      	adds	r3, #1
 8007356:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007358:	2096      	movs	r0, #150	; 0x96
 800735a:	f001 fa17 	bl	800878c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800735e:	2108      	movs	r1, #8
 8007360:	482c      	ldr	r0, [pc, #176]	; (8007414 <takeWifiPass+0x210>)
 8007362:	f001 ffe3 	bl	800932c <HAL_GPIO_ReadPin>
 8007366:	4603      	mov	r3, r0
 8007368:	2b01      	cmp	r3, #1
 800736a:	d15b      	bne.n	8007424 <takeWifiPass+0x220>
        	if(cursorPosition < 1) {
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	dc01      	bgt.n	8007376 <takeWifiPass+0x172>
        	    cursorPosition = 80;
 8007372:	2350      	movs	r3, #80	; 0x50
 8007374:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d14d      	bne.n	8007418 <takeWifiPass+0x214>
            	if(page == 1) {
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d108      	bne.n	8007394 <takeWifiPass+0x190>
            		cursorPosition = 16;
 8007382:	2310      	movs	r3, #16
 8007384:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007386:	2305      	movs	r3, #5
 8007388:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800738a:	2105      	movs	r1, #5
 800738c:	2003      	movs	r0, #3
 800738e:	f7f9 fd7d 	bl	8000e8c <printTemplate>
 8007392:	e044      	b.n	800741e <takeWifiPass+0x21a>
            	} else if(page == 2) {
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d108      	bne.n	80073ac <takeWifiPass+0x1a8>
            		cursorPosition = 16;
 800739a:	2310      	movs	r3, #16
 800739c:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800739e:	2301      	movs	r3, #1
 80073a0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80073a2:	2101      	movs	r1, #1
 80073a4:	2003      	movs	r0, #3
 80073a6:	f7f9 fd71 	bl	8000e8c <printTemplate>
 80073aa:	e038      	b.n	800741e <takeWifiPass+0x21a>
            	} else if(page == 3) {
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d108      	bne.n	80073c4 <takeWifiPass+0x1c0>
            		cursorPosition = 16;
 80073b2:	2310      	movs	r3, #16
 80073b4:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80073b6:	2302      	movs	r3, #2
 80073b8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80073ba:	2102      	movs	r1, #2
 80073bc:	2003      	movs	r0, #3
 80073be:	f7f9 fd65 	bl	8000e8c <printTemplate>
 80073c2:	e02c      	b.n	800741e <takeWifiPass+0x21a>
            	} else if(page == 4) {
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d108      	bne.n	80073dc <takeWifiPass+0x1d8>
            		cursorPosition = 16;
 80073ca:	2310      	movs	r3, #16
 80073cc:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80073ce:	2303      	movs	r3, #3
 80073d0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80073d2:	2103      	movs	r1, #3
 80073d4:	2003      	movs	r0, #3
 80073d6:	f7f9 fd59 	bl	8000e8c <printTemplate>
 80073da:	e020      	b.n	800741e <takeWifiPass+0x21a>
            	} else if(page == 5) {
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2b05      	cmp	r3, #5
 80073e0:	d11d      	bne.n	800741e <takeWifiPass+0x21a>
            		cursorPosition = 16;
 80073e2:	2310      	movs	r3, #16
 80073e4:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80073e6:	2304      	movs	r3, #4
 80073e8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80073ea:	2104      	movs	r1, #4
 80073ec:	2003      	movs	r0, #3
 80073ee:	f7f9 fd4d 	bl	8000e8c <printTemplate>
 80073f2:	e014      	b.n	800741e <takeWifiPass+0x21a>
 80073f4:	200001b0 	.word	0x200001b0
 80073f8:	200001e4 	.word	0x200001e4
 80073fc:	2000000c 	.word	0x2000000c
 8007400:	40010800 	.word	0x40010800
 8007404:	0800dc60 	.word	0x0800dc60
 8007408:	0800dc88 	.word	0x0800dc88
 800740c:	20000118 	.word	0x20000118
 8007410:	200003a8 	.word	0x200003a8
 8007414:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3b01      	subs	r3, #1
 800741c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800741e:	2096      	movs	r0, #150	; 0x96
 8007420:	f001 f9b4 	bl	800878c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007424:	2102      	movs	r1, #2
 8007426:	4841      	ldr	r0, [pc, #260]	; (800752c <takeWifiPass+0x328>)
 8007428:	f001 ff80 	bl	800932c <HAL_GPIO_ReadPin>
 800742c:	4603      	mov	r3, r0
 800742e:	2b01      	cmp	r3, #1
 8007430:	d13f      	bne.n	80074b2 <takeWifiPass+0x2ae>
        	wifiPass[arrayPos] = charactersArray[cursorPosition - 1];
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3b01      	subs	r3, #1
 8007436:	4a3e      	ldr	r2, [pc, #248]	; (8007530 <takeWifiPass+0x32c>)
 8007438:	5cd1      	ldrb	r1, [r2, r3]
 800743a:	4a3e      	ldr	r2, [pc, #248]	; (8007534 <takeWifiPass+0x330>)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4413      	add	r3, r2
 8007440:	460a      	mov	r2, r1
 8007442:	701a      	strb	r2, [r3, #0]
        	wifiPassInt[arrayPos] = cursorPosition - 1;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b2d9      	uxtb	r1, r3
 800744c:	4a3a      	ldr	r2, [pc, #232]	; (8007538 <takeWifiPass+0x334>)
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	4413      	add	r3, r2
 8007452:	460a      	mov	r2, r1
 8007454:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = cursorPosition - 1;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	3b01      	subs	r3, #1
 800745c:	b2d9      	uxtb	r1, r3
 800745e:	4a37      	ldr	r2, [pc, #220]	; (800753c <takeWifiPass+0x338>)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4413      	add	r3, r2
 8007464:	460a      	mov	r2, r1
 8007466:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[arrayPos]);
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	b2d9      	uxtb	r1, r3
 800746c:	4a31      	ldr	r2, [pc, #196]	; (8007534 <takeWifiPass+0x330>)
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	4413      	add	r3, r2
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	2001      	movs	r0, #1
 8007478:	f000 fc47 	bl	8007d0a <lcd_print_char>

            writeLoc++;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	3301      	adds	r3, #1
 8007480:	613b      	str	r3, [r7, #16]
            arrayPos++;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	3301      	adds	r3, #1
 8007486:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3301      	adds	r3, #1
 800748c:	607b      	str	r3, [r7, #4]

            wifiPass[arrayPos] = '\0';
 800748e:	4a29      	ldr	r2, [pc, #164]	; (8007534 <takeWifiPass+0x330>)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4413      	add	r3, r2
 8007494:	2200      	movs	r2, #0
 8007496:	701a      	strb	r2, [r3, #0]
            wifiPassInt[arrayPos] = '\0';
 8007498:	4a27      	ldr	r2, [pc, #156]	; (8007538 <takeWifiPass+0x334>)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	4413      	add	r3, r2
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 80074a2:	4a26      	ldr	r2, [pc, #152]	; (800753c <takeWifiPass+0x338>)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4413      	add	r3, r2
 80074a8:	2200      	movs	r2, #0
 80074aa:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80074ac:	2096      	movs	r0, #150	; 0x96
 80074ae:	f001 f96d 	bl	800878c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80074b2:	2104      	movs	r1, #4
 80074b4:	481d      	ldr	r0, [pc, #116]	; (800752c <takeWifiPass+0x328>)
 80074b6:	f001 ff39 	bl	800932c <HAL_GPIO_ReadPin>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d129      	bne.n	8007514 <takeWifiPass+0x310>
            if(strlen(wifiPass) >= 1) {
 80074c0:	4b1c      	ldr	r3, [pc, #112]	; (8007534 <takeWifiPass+0x330>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d022      	beq.n	800750e <takeWifiPass+0x30a>
            	wifiPass[arrayPos] = '\0';
 80074c8:	4a1a      	ldr	r2, [pc, #104]	; (8007534 <takeWifiPass+0x330>)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	4413      	add	r3, r2
 80074ce:	2200      	movs	r2, #0
 80074d0:	701a      	strb	r2, [r3, #0]
            	wifiPassInt[arrayPos] = '\0';
 80074d2:	4a19      	ldr	r2, [pc, #100]	; (8007538 <takeWifiPass+0x334>)
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4413      	add	r3, r2
 80074d8:	2200      	movs	r2, #0
 80074da:	701a      	strb	r2, [r3, #0]
            	eepromData[eepromVal] = '\0';
 80074dc:	4a17      	ldr	r2, [pc, #92]	; (800753c <takeWifiPass+0x338>)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4413      	add	r3, r2
 80074e2:	2200      	movs	r2, #0
 80074e4:	701a      	strb	r2, [r3, #0]

            	writeLoc--;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	613b      	str	r3, [r7, #16]
            	arrayPos--;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	60bb      	str	r3, [r7, #8]
            	eepromVal--;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	607b      	str	r3, [r7, #4]

            	lcd_delete_char(1, 6+arrayPos);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	3306      	adds	r3, #6
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	4619      	mov	r1, r3
 8007502:	2001      	movs	r0, #1
 8007504:	f000 fc22 	bl	8007d4c <lcd_delete_char>
            	HAL_Delay(50);
 8007508:	2032      	movs	r0, #50	; 0x32
 800750a:	f001 f93f 	bl	800878c <HAL_Delay>
            }

            HAL_Delay(150);
 800750e:	2096      	movs	r0, #150	; 0x96
 8007510:	f001 f93c 	bl	800878c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	b2db      	uxtb	r3, r3
 8007518:	4619      	mov	r1, r3
 800751a:	2002      	movs	r0, #2
 800751c:	f000 fbc1 	bl	8007ca2 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007520:	e695      	b.n	800724e <takeWifiPass+0x4a>
    }
}
 8007522:	bf00      	nop
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	40010800 	.word	0x40010800
 8007530:	2000001c 	.word	0x2000001c
 8007534:	200001b0 	.word	0x200001b0
 8007538:	200001e4 	.word	0x200001e4
 800753c:	20000118 	.word	0x20000118

08007540 <mergeData>:

char* mergeData() {
 8007540:	b580      	push	{r7, lr}
 8007542:	b09c      	sub	sp, #112	; 0x70
 8007544:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 8007546:	2300      	movs	r3, #0
 8007548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800754a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800754e:	2228      	movs	r2, #40	; 0x28
 8007550:	2100      	movs	r1, #0
 8007552:	4618      	mov	r0, r3
 8007554:	f005 f83d 	bl	800c5d2 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007558:	4b67      	ldr	r3, [pc, #412]	; (80076f8 <mergeData+0x1b8>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	713b      	strb	r3, [r7, #4]
 800755e:	4b67      	ldr	r3, [pc, #412]	; (80076fc <mergeData+0x1bc>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	717b      	strb	r3, [r7, #5]
 8007564:	4b66      	ldr	r3, [pc, #408]	; (8007700 <mergeData+0x1c0>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	71bb      	strb	r3, [r7, #6]
 800756a:	4b66      	ldr	r3, [pc, #408]	; (8007704 <mergeData+0x1c4>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	71fb      	strb	r3, [r7, #7]
 8007570:	4b65      	ldr	r3, [pc, #404]	; (8007708 <mergeData+0x1c8>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	723b      	strb	r3, [r7, #8]
 8007576:	4b65      	ldr	r3, [pc, #404]	; (800770c <mergeData+0x1cc>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	727b      	strb	r3, [r7, #9]
 800757c:	4b64      	ldr	r3, [pc, #400]	; (8007710 <mergeData+0x1d0>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	72bb      	strb	r3, [r7, #10]
 8007582:	4b64      	ldr	r3, [pc, #400]	; (8007714 <mergeData+0x1d4>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	72fb      	strb	r3, [r7, #11]
 8007588:	4b63      	ldr	r3, [pc, #396]	; (8007718 <mergeData+0x1d8>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	733b      	strb	r3, [r7, #12]
 800758e:	4b63      	ldr	r3, [pc, #396]	; (800771c <mergeData+0x1dc>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	737b      	strb	r3, [r7, #13]
 8007594:	4b62      	ldr	r3, [pc, #392]	; (8007720 <mergeData+0x1e0>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	73bb      	strb	r3, [r7, #14]
 800759a:	4b62      	ldr	r3, [pc, #392]	; (8007724 <mergeData+0x1e4>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	73fb      	strb	r3, [r7, #15]
 80075a0:	4b61      	ldr	r3, [pc, #388]	; (8007728 <mergeData+0x1e8>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	743b      	strb	r3, [r7, #16]
 80075a6:	4b61      	ldr	r3, [pc, #388]	; (800772c <mergeData+0x1ec>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	747b      	strb	r3, [r7, #17]
 80075ac:	4b60      	ldr	r3, [pc, #384]	; (8007730 <mergeData+0x1f0>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	74bb      	strb	r3, [r7, #18]
 80075b2:	4b60      	ldr	r3, [pc, #384]	; (8007734 <mergeData+0x1f4>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	74fb      	strb	r3, [r7, #19]
 80075b8:	4b5f      	ldr	r3, [pc, #380]	; (8007738 <mergeData+0x1f8>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	753b      	strb	r3, [r7, #20]
 80075be:	4b5f      	ldr	r3, [pc, #380]	; (800773c <mergeData+0x1fc>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	757b      	strb	r3, [r7, #21]
 80075c4:	4b5e      	ldr	r3, [pc, #376]	; (8007740 <mergeData+0x200>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	75bb      	strb	r3, [r7, #22]
 80075ca:	4b5e      	ldr	r3, [pc, #376]	; (8007744 <mergeData+0x204>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	75fb      	strb	r3, [r7, #23]
 80075d0:	4b5d      	ldr	r3, [pc, #372]	; (8007748 <mergeData+0x208>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	763b      	strb	r3, [r7, #24]
 80075d6:	4b5d      	ldr	r3, [pc, #372]	; (800774c <mergeData+0x20c>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	767b      	strb	r3, [r7, #25]
 80075dc:	4b5c      	ldr	r3, [pc, #368]	; (8007750 <mergeData+0x210>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	76bb      	strb	r3, [r7, #26]
 80075e2:	4b5c      	ldr	r3, [pc, #368]	; (8007754 <mergeData+0x214>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	76fb      	strb	r3, [r7, #27]
 80075e8:	4b5b      	ldr	r3, [pc, #364]	; (8007758 <mergeData+0x218>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	773b      	strb	r3, [r7, #28]
 80075ee:	4b5b      	ldr	r3, [pc, #364]	; (800775c <mergeData+0x21c>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	777b      	strb	r3, [r7, #29]
 80075f4:	4b5a      	ldr	r3, [pc, #360]	; (8007760 <mergeData+0x220>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	77bb      	strb	r3, [r7, #30]
 80075fa:	4b5a      	ldr	r3, [pc, #360]	; (8007764 <mergeData+0x224>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	77fb      	strb	r3, [r7, #31]
 8007600:	4b59      	ldr	r3, [pc, #356]	; (8007768 <mergeData+0x228>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	f887 3020 	strb.w	r3, [r7, #32]
 8007608:	4b58      	ldr	r3, [pc, #352]	; (800776c <mergeData+0x22c>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007610:	4b57      	ldr	r3, [pc, #348]	; (8007770 <mergeData+0x230>)
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007618:	4b56      	ldr	r3, [pc, #344]	; (8007774 <mergeData+0x234>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007620:	4b55      	ldr	r3, [pc, #340]	; (8007778 <mergeData+0x238>)
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007628:	4b54      	ldr	r3, [pc, #336]	; (800777c <mergeData+0x23c>)
 800762a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 800762e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 8007632:	4b52      	ldr	r3, [pc, #328]	; (800777c <mergeData+0x23c>)
 8007634:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007638:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 800763c:	4b4f      	ldr	r3, [pc, #316]	; (800777c <mergeData+0x23c>)
 800763e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 8007646:	4b4d      	ldr	r3, [pc, #308]	; (800777c <mergeData+0x23c>)
 8007648:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800764c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007650:	4b4a      	ldr	r3, [pc, #296]	; (800777c <mergeData+0x23c>)
 8007652:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007656:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 800765a:	4b48      	ldr	r3, [pc, #288]	; (800777c <mergeData+0x23c>)
 800765c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007660:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007664:	4b45      	ldr	r3, [pc, #276]	; (800777c <mergeData+0x23c>)
 8007666:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800766a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 800766e:	4b43      	ldr	r3, [pc, #268]	; (800777c <mergeData+0x23c>)
 8007670:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007674:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007678:	4b40      	ldr	r3, [pc, #256]	; (800777c <mergeData+0x23c>)
 800767a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800767e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007682:	4b3e      	ldr	r3, [pc, #248]	; (800777c <mergeData+0x23c>)
 8007684:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007688:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800768c:	2306      	movs	r3, #6
 800768e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007692:	2300      	movs	r3, #0
 8007694:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007696:	e015      	b.n	80076c4 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007698:	1d3a      	adds	r2, r7, #4
 800769a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800769c:	4413      	add	r3, r2
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076a6:	4936      	ldr	r1, [pc, #216]	; (8007780 <mergeData+0x240>)
 80076a8:	4618      	mov	r0, r3
 80076aa:	f004 ff21 	bl	800c4f0 <siprintf>
	    strcat(combinedString, temp);
 80076ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80076b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f004 ff7b 	bl	800c5b4 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80076be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c0:	3301      	adds	r3, #1
 80076c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c6:	2b2b      	cmp	r3, #43	; 0x2b
 80076c8:	d9e6      	bls.n	8007698 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80076ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7f8 fda8 	bl	8000224 <strlen>
 80076d4:	4603      	mov	r3, r0
 80076d6:	3301      	adds	r3, #1
 80076d8:	4618      	mov	r0, r3
 80076da:	f004 fe55 	bl	800c388 <malloc>
 80076de:	4603      	mov	r3, r0
 80076e0:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80076e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076e6:	4619      	mov	r1, r3
 80076e8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80076ea:	f004 ffb7 	bl	800c65c <strcpy>
	return result;
 80076ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3770      	adds	r7, #112	; 0x70
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	2000022f 	.word	0x2000022f
 80076fc:	20000221 	.word	0x20000221
 8007700:	20000224 	.word	0x20000224
 8007704:	20000225 	.word	0x20000225
 8007708:	20000226 	.word	0x20000226
 800770c:	2000022d 	.word	0x2000022d
 8007710:	20000227 	.word	0x20000227
 8007714:	20000228 	.word	0x20000228
 8007718:	2000022c 	.word	0x2000022c
 800771c:	20000229 	.word	0x20000229
 8007720:	20000239 	.word	0x20000239
 8007724:	2000022a 	.word	0x2000022a
 8007728:	2000023a 	.word	0x2000023a
 800772c:	2000022b 	.word	0x2000022b
 8007730:	2000023b 	.word	0x2000023b
 8007734:	2000022e 	.word	0x2000022e
 8007738:	20000230 	.word	0x20000230
 800773c:	20000231 	.word	0x20000231
 8007740:	20000232 	.word	0x20000232
 8007744:	20000233 	.word	0x20000233
 8007748:	20000234 	.word	0x20000234
 800774c:	20000235 	.word	0x20000235
 8007750:	20000236 	.word	0x20000236
 8007754:	20000237 	.word	0x20000237
 8007758:	20000238 	.word	0x20000238
 800775c:	2000023c 	.word	0x2000023c
 8007760:	2000023e 	.word	0x2000023e
 8007764:	2000021d 	.word	0x2000021d
 8007768:	2000021e 	.word	0x2000021e
 800776c:	20000000 	.word	0x20000000
 8007770:	20000001 	.word	0x20000001
 8007774:	2000021f 	.word	0x2000021f
 8007778:	20000241 	.word	0x20000241
 800777c:	20000118 	.word	0x20000118
 8007780:	0800dc9c 	.word	0x0800dc9c

08007784 <convertAndSendData>:

void convertAndSendData() {
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 8007788:	4b14      	ldr	r3, [pc, #80]	; (80077dc <convertAndSendData+0x58>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10a      	bne.n	80077a6 <convertAndSendData+0x22>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007790:	4a13      	ldr	r2, [pc, #76]	; (80077e0 <convertAndSendData+0x5c>)
 8007792:	2101      	movs	r1, #1
 8007794:	2001      	movs	r0, #1
 8007796:	f000 faa3 	bl	8007ce0 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 800779a:	4a12      	ldr	r2, [pc, #72]	; (80077e4 <convertAndSendData+0x60>)
 800779c:	2101      	movs	r1, #1
 800779e:	2002      	movs	r0, #2
 80077a0:	f000 fa9e 	bl	8007ce0 <lcd_print>
 80077a4:	e009      	b.n	80077ba <convertAndSendData+0x36>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80077a6:	4a10      	ldr	r2, [pc, #64]	; (80077e8 <convertAndSendData+0x64>)
 80077a8:	2101      	movs	r1, #1
 80077aa:	2001      	movs	r0, #1
 80077ac:	f000 fa98 	bl	8007ce0 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80077b0:	4a0e      	ldr	r2, [pc, #56]	; (80077ec <convertAndSendData+0x68>)
 80077b2:	2101      	movs	r1, #1
 80077b4:	2002      	movs	r0, #2
 80077b6:	f000 fa93 	bl	8007ce0 <lcd_print>
	}

	sendMachineData(&huart1, machineID, mergeData());
 80077ba:	f7ff fec1 	bl	8007540 <mergeData>
 80077be:	4603      	mov	r3, r0
 80077c0:	461a      	mov	r2, r3
 80077c2:	490b      	ldr	r1, [pc, #44]	; (80077f0 <convertAndSendData+0x6c>)
 80077c4:	480b      	ldr	r0, [pc, #44]	; (80077f4 <convertAndSendData+0x70>)
 80077c6:	f7f9 f8d3 	bl	8000970 <sendMachineData>

	HAL_Delay(500);
 80077ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80077ce:	f000 ffdd 	bl	800878c <HAL_Delay>
	lcd_clear();
 80077d2:	f000 fab1 	bl	8007d38 <lcd_clear>
}
 80077d6:	bf00      	nop
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20000241 	.word	0x20000241
 80077e0:	0800dca0 	.word	0x0800dca0
 80077e4:	0800dcb4 	.word	0x0800dcb4
 80077e8:	0800dcc8 	.word	0x0800dcc8
 80077ec:	0800dcdc 	.word	0x0800dcdc
 80077f0:	20000190 	.word	0x20000190
 80077f4:	20000444 	.word	0x20000444

080077f8 <iotSetup>:

void iotSetup() {
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80077fc:	4b0e      	ldr	r3, [pc, #56]	; (8007838 <iotSetup+0x40>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d017      	beq.n	8007834 <iotSetup+0x3c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 8007804:	480d      	ldr	r0, [pc, #52]	; (800783c <iotSetup+0x44>)
 8007806:	f7f8 fd0d 	bl	8000224 <strlen>
 800780a:	4603      	mov	r3, r0
 800780c:	2b0c      	cmp	r3, #12
 800780e:	d001      	beq.n	8007814 <iotSetup+0x1c>
			takeMachineID();
 8007810:	f7ff f9aa 	bl	8006b68 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007814:	480a      	ldr	r0, [pc, #40]	; (8007840 <iotSetup+0x48>)
 8007816:	f7f8 fd05 	bl	8000224 <strlen>
 800781a:	4603      	mov	r3, r0
 800781c:	2b01      	cmp	r3, #1
 800781e:	d801      	bhi.n	8007824 <iotSetup+0x2c>
			takeWifiSSID();
 8007820:	f7ff fb3c 	bl	8006e9c <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007824:	4807      	ldr	r0, [pc, #28]	; (8007844 <iotSetup+0x4c>)
 8007826:	f7f8 fcfd 	bl	8000224 <strlen>
 800782a:	4603      	mov	r3, r0
 800782c:	2b01      	cmp	r3, #1
 800782e:	d801      	bhi.n	8007834 <iotSetup+0x3c>
			takeWifiPass();
 8007830:	f7ff fce8 	bl	8007204 <takeWifiPass>
	}

	//ESP8266_Init(&huart1, wifiSSID, wifiPass);
	//HAL_Delay(500);
	//convertAndSendData();
}
 8007834:	bf00      	nop
 8007836:	bd80      	pop	{r7, pc}
 8007838:	2000023f 	.word	0x2000023f
 800783c:	20000190 	.word	0x20000190
 8007840:	2000019c 	.word	0x2000019c
 8007844:	200001b0 	.word	0x200001b0

08007848 <printMachineCredentials>:

void printMachineCredentials(int state) {
 8007848:	b580      	push	{r7, lr}
 800784a:	b08c      	sub	sp, #48	; 0x30
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d11f      	bne.n	8007896 <printMachineCredentials+0x4e>
		int idLength = strlen(machineID);
 8007856:	4853      	ldr	r0, [pc, #332]	; (80079a4 <printMachineCredentials+0x15c>)
 8007858:	f7f8 fce4 	bl	8000224 <strlen>
 800785c:	4603      	mov	r3, r0
 800785e:	62fb      	str	r3, [r7, #44]	; 0x2c

		lcd_print(2, 1, machineID);
 8007860:	4a50      	ldr	r2, [pc, #320]	; (80079a4 <printMachineCredentials+0x15c>)
 8007862:	2101      	movs	r1, #1
 8007864:	2002      	movs	r0, #2
 8007866:	f000 fa3b 	bl	8007ce0 <lcd_print>
		for(int i=0; i<16-idLength; i++) {
 800786a:	2300      	movs	r3, #0
 800786c:	62bb      	str	r3, [r7, #40]	; 0x28
 800786e:	e00b      	b.n	8007888 <printMachineCredentials+0x40>
			lcd_delete_char(2, idLength);
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	b2db      	uxtb	r3, r3
 8007874:	4619      	mov	r1, r3
 8007876:	2002      	movs	r0, #2
 8007878:	f000 fa68 	bl	8007d4c <lcd_delete_char>
			idLength++;
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	3301      	adds	r3, #1
 8007880:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i=0; i<16-idLength; i++) {
 8007882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007884:	3301      	adds	r3, #1
 8007886:	62bb      	str	r3, [r7, #40]	; 0x28
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	f1c3 0310 	rsb	r3, r3, #16
 800788e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007890:	429a      	cmp	r2, r3
 8007892:	dbed      	blt.n	8007870 <printMachineCredentials+0x28>
				lcd_print_char(2, lcdVal, wifiPass[i]);
				lcdVal++;
			}
		}
	}
}
 8007894:	e081      	b.n	800799a <printMachineCredentials+0x152>
	} else if(state == 2) {
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d13f      	bne.n	800791c <printMachineCredentials+0xd4>
		int ssidLength = strlen(wifiSSID);
 800789c:	4842      	ldr	r0, [pc, #264]	; (80079a8 <printMachineCredentials+0x160>)
 800789e:	f7f8 fcc1 	bl	8000224 <strlen>
 80078a2:	4603      	mov	r3, r0
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
		if(ssidLength == 16) {
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	2b10      	cmp	r3, #16
 80078aa:	d105      	bne.n	80078b8 <printMachineCredentials+0x70>
			lcd_print(2, 1, wifiSSID);
 80078ac:	4a3e      	ldr	r2, [pc, #248]	; (80079a8 <printMachineCredentials+0x160>)
 80078ae:	2101      	movs	r1, #1
 80078b0:	2002      	movs	r0, #2
 80078b2:	f000 fa15 	bl	8007ce0 <lcd_print>
}
 80078b6:	e070      	b.n	800799a <printMachineCredentials+0x152>
		} else if(ssidLength < 16) {
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	2b0f      	cmp	r3, #15
 80078bc:	dc15      	bgt.n	80078ea <printMachineCredentials+0xa2>
			for(int i=0; i<16-ssidLength; i++) {
 80078be:	2300      	movs	r3, #0
 80078c0:	623b      	str	r3, [r7, #32]
 80078c2:	e00b      	b.n	80078dc <printMachineCredentials+0x94>
				lcd_delete_char(2, ssidLength);
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	4619      	mov	r1, r3
 80078ca:	2002      	movs	r0, #2
 80078cc:	f000 fa3e 	bl	8007d4c <lcd_delete_char>
				ssidLength++;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	3301      	adds	r3, #1
 80078d4:	627b      	str	r3, [r7, #36]	; 0x24
			for(int i=0; i<16-ssidLength; i++) {
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	3301      	adds	r3, #1
 80078da:	623b      	str	r3, [r7, #32]
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	f1c3 0310 	rsb	r3, r3, #16
 80078e2:	6a3a      	ldr	r2, [r7, #32]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	dbed      	blt.n	80078c4 <printMachineCredentials+0x7c>
}
 80078e8:	e057      	b.n	800799a <printMachineCredentials+0x152>
			int lcdVal = 1;
 80078ea:	2301      	movs	r3, #1
 80078ec:	61fb      	str	r3, [r7, #28]
			for(int i=0; i<16; i++) {
 80078ee:	2300      	movs	r3, #0
 80078f0:	61bb      	str	r3, [r7, #24]
 80078f2:	e00f      	b.n	8007914 <printMachineCredentials+0xcc>
				lcd_print_char(2, lcdVal, wifiSSID[i]);
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	b2d9      	uxtb	r1, r3
 80078f8:	4a2b      	ldr	r2, [pc, #172]	; (80079a8 <printMachineCredentials+0x160>)
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	4413      	add	r3, r2
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	2002      	movs	r0, #2
 8007904:	f000 fa01 	bl	8007d0a <lcd_print_char>
				lcdVal++;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	3301      	adds	r3, #1
 800790c:	61fb      	str	r3, [r7, #28]
			for(int i=0; i<16; i++) {
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	3301      	adds	r3, #1
 8007912:	61bb      	str	r3, [r7, #24]
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b0f      	cmp	r3, #15
 8007918:	ddec      	ble.n	80078f4 <printMachineCredentials+0xac>
}
 800791a:	e03e      	b.n	800799a <printMachineCredentials+0x152>
		int passLength = strlen(wifiPass);
 800791c:	4823      	ldr	r0, [pc, #140]	; (80079ac <printMachineCredentials+0x164>)
 800791e:	f7f8 fc81 	bl	8000224 <strlen>
 8007922:	4603      	mov	r3, r0
 8007924:	617b      	str	r3, [r7, #20]
		if(passLength == 16) {
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b10      	cmp	r3, #16
 800792a:	d105      	bne.n	8007938 <printMachineCredentials+0xf0>
			lcd_print(2, 1, wifiPass);
 800792c:	4a1f      	ldr	r2, [pc, #124]	; (80079ac <printMachineCredentials+0x164>)
 800792e:	2101      	movs	r1, #1
 8007930:	2002      	movs	r0, #2
 8007932:	f000 f9d5 	bl	8007ce0 <lcd_print>
}
 8007936:	e030      	b.n	800799a <printMachineCredentials+0x152>
		} else if(passLength < 16) {
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2b0f      	cmp	r3, #15
 800793c:	dc15      	bgt.n	800796a <printMachineCredentials+0x122>
			for(int i=0; i<16-passLength; i++) {
 800793e:	2300      	movs	r3, #0
 8007940:	613b      	str	r3, [r7, #16]
 8007942:	e00b      	b.n	800795c <printMachineCredentials+0x114>
				lcd_delete_char(2, passLength);
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	b2db      	uxtb	r3, r3
 8007948:	4619      	mov	r1, r3
 800794a:	2002      	movs	r0, #2
 800794c:	f000 f9fe 	bl	8007d4c <lcd_delete_char>
				passLength++;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	3301      	adds	r3, #1
 8007954:	617b      	str	r3, [r7, #20]
			for(int i=0; i<16-passLength; i++) {
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	3301      	adds	r3, #1
 800795a:	613b      	str	r3, [r7, #16]
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f1c3 0310 	rsb	r3, r3, #16
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	429a      	cmp	r2, r3
 8007966:	dbed      	blt.n	8007944 <printMachineCredentials+0xfc>
}
 8007968:	e017      	b.n	800799a <printMachineCredentials+0x152>
			int lcdVal = 1;
 800796a:	2301      	movs	r3, #1
 800796c:	60fb      	str	r3, [r7, #12]
			for(int i=0; i<16; i++) {
 800796e:	2300      	movs	r3, #0
 8007970:	60bb      	str	r3, [r7, #8]
 8007972:	e00f      	b.n	8007994 <printMachineCredentials+0x14c>
				lcd_print_char(2, lcdVal, wifiPass[i]);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	b2d9      	uxtb	r1, r3
 8007978:	4a0c      	ldr	r2, [pc, #48]	; (80079ac <printMachineCredentials+0x164>)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	4413      	add	r3, r2
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	2002      	movs	r0, #2
 8007984:	f000 f9c1 	bl	8007d0a <lcd_print_char>
				lcdVal++;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3301      	adds	r3, #1
 800798c:	60fb      	str	r3, [r7, #12]
			for(int i=0; i<16; i++) {
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	3301      	adds	r3, #1
 8007992:	60bb      	str	r3, [r7, #8]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b0f      	cmp	r3, #15
 8007998:	ddec      	ble.n	8007974 <printMachineCredentials+0x12c>
}
 800799a:	bf00      	nop
 800799c:	3730      	adds	r7, #48	; 0x30
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	20000190 	.word	0x20000190
 80079a8:	2000019c 	.word	0x2000019c
 80079ac:	200001b0 	.word	0x200001b0

080079b0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af02      	add	r7, sp, #8
 80079b6:	4603      	mov	r3, r0
 80079b8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	f023 030f 	bic.w	r3, r3, #15
 80079c0:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80079c2:	79fb      	ldrb	r3, [r7, #7]
 80079c4:	011b      	lsls	r3, r3, #4
 80079c6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80079c8:	7b7b      	ldrb	r3, [r7, #13]
 80079ca:	f043 030c 	orr.w	r3, r3, #12
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80079d2:	7b7b      	ldrb	r3, [r7, #13]
 80079d4:	f043 0308 	orr.w	r3, r3, #8
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80079dc:	7b3b      	ldrb	r3, [r7, #12]
 80079de:	f043 030c 	orr.w	r3, r3, #12
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80079e6:	7b3b      	ldrb	r3, [r7, #12]
 80079e8:	f043 0308 	orr.w	r3, r3, #8
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80079f0:	bf00      	nop
 80079f2:	4825      	ldr	r0, [pc, #148]	; (8007a88 <lcd_send_cmd+0xd8>)
 80079f4:	f002 fac3 	bl	8009f7e <HAL_I2C_GetError>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d0f9      	beq.n	80079f2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80079fe:	bf00      	nop
 8007a00:	4821      	ldr	r0, [pc, #132]	; (8007a88 <lcd_send_cmd+0xd8>)
 8007a02:	f002 faaf 	bl	8009f64 <HAL_I2C_GetState>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b20      	cmp	r3, #32
 8007a0a:	d1f9      	bne.n	8007a00 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007a0c:	4b1f      	ldr	r3, [pc, #124]	; (8007a8c <lcd_send_cmd+0xdc>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d116      	bne.n	8007a42 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]
 8007a18:	e00f      	b.n	8007a3a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	3310      	adds	r3, #16
 8007a1e:	443b      	add	r3, r7
 8007a20:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	f022 0208 	bic.w	r2, r2, #8
 8007a2a:	b2d2      	uxtb	r2, r2
 8007a2c:	3310      	adds	r3, #16
 8007a2e:	443b      	add	r3, r7
 8007a30:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	3301      	adds	r3, #1
 8007a38:	73fb      	strb	r3, [r7, #15]
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d9ec      	bls.n	8007a1a <lcd_send_cmd+0x6a>
 8007a40:	e015      	b.n	8007a6e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007a42:	2300      	movs	r3, #0
 8007a44:	73bb      	strb	r3, [r7, #14]
 8007a46:	e00f      	b.n	8007a68 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	3310      	adds	r3, #16
 8007a4c:	443b      	add	r3, r7
 8007a4e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	f042 0208 	orr.w	r2, r2, #8
 8007a58:	b2d2      	uxtb	r2, r2
 8007a5a:	3310      	adds	r3, #16
 8007a5c:	443b      	add	r3, r7
 8007a5e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
 8007a64:	3301      	adds	r3, #1
 8007a66:	73bb      	strb	r3, [r7, #14]
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d9ec      	bls.n	8007a48 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007a6e:	f107 0208 	add.w	r2, r7, #8
 8007a72:	2364      	movs	r3, #100	; 0x64
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	2304      	movs	r3, #4
 8007a78:	214e      	movs	r1, #78	; 0x4e
 8007a7a:	4803      	ldr	r0, [pc, #12]	; (8007a88 <lcd_send_cmd+0xd8>)
 8007a7c:	f001 fe12 	bl	80096a4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007a80:	bf00      	nop
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	200003a8 	.word	0x200003a8
 8007a8c:	2000037e 	.word	0x2000037e

08007a90 <lcd_send_data>:

void lcd_send_data (char data) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	4603      	mov	r3, r0
 8007a98:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	f023 030f 	bic.w	r3, r3, #15
 8007aa0:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007aa8:	7b7b      	ldrb	r3, [r7, #13]
 8007aaa:	f043 030d 	orr.w	r3, r3, #13
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007ab2:	7b7b      	ldrb	r3, [r7, #13]
 8007ab4:	f043 0309 	orr.w	r3, r3, #9
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007abc:	7b3b      	ldrb	r3, [r7, #12]
 8007abe:	f043 030d 	orr.w	r3, r3, #13
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007ac6:	7b3b      	ldrb	r3, [r7, #12]
 8007ac8:	f043 0309 	orr.w	r3, r3, #9
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ad0:	bf00      	nop
 8007ad2:	4825      	ldr	r0, [pc, #148]	; (8007b68 <lcd_send_data+0xd8>)
 8007ad4:	f002 fa53 	bl	8009f7e <HAL_I2C_GetError>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b04      	cmp	r3, #4
 8007adc:	d0f9      	beq.n	8007ad2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ade:	bf00      	nop
 8007ae0:	4821      	ldr	r0, [pc, #132]	; (8007b68 <lcd_send_data+0xd8>)
 8007ae2:	f002 fa3f 	bl	8009f64 <HAL_I2C_GetState>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b20      	cmp	r3, #32
 8007aea:	d1f9      	bne.n	8007ae0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007aec:	4b1f      	ldr	r3, [pc, #124]	; (8007b6c <lcd_send_data+0xdc>)
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d116      	bne.n	8007b22 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007af4:	2300      	movs	r3, #0
 8007af6:	73fb      	strb	r3, [r7, #15]
 8007af8:	e00f      	b.n	8007b1a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	3310      	adds	r3, #16
 8007afe:	443b      	add	r3, r7
 8007b00:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	f022 0208 	bic.w	r2, r2, #8
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	443b      	add	r3, r7
 8007b10:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	3301      	adds	r3, #1
 8007b18:	73fb      	strb	r3, [r7, #15]
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	d9ec      	bls.n	8007afa <lcd_send_data+0x6a>
 8007b20:	e015      	b.n	8007b4e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007b22:	2300      	movs	r3, #0
 8007b24:	73bb      	strb	r3, [r7, #14]
 8007b26:	e00f      	b.n	8007b48 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	3310      	adds	r3, #16
 8007b2c:	443b      	add	r3, r7
 8007b2e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	f042 0208 	orr.w	r2, r2, #8
 8007b38:	b2d2      	uxtb	r2, r2
 8007b3a:	3310      	adds	r3, #16
 8007b3c:	443b      	add	r3, r7
 8007b3e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	3301      	adds	r3, #1
 8007b46:	73bb      	strb	r3, [r7, #14]
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d9ec      	bls.n	8007b28 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007b4e:	f107 0208 	add.w	r2, r7, #8
 8007b52:	2364      	movs	r3, #100	; 0x64
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	2304      	movs	r3, #4
 8007b58:	214e      	movs	r1, #78	; 0x4e
 8007b5a:	4803      	ldr	r0, [pc, #12]	; (8007b68 <lcd_send_data+0xd8>)
 8007b5c:	f001 fda2 	bl	80096a4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007b60:	bf00      	nop
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	200003a8 	.word	0x200003a8
 8007b6c:	2000037e 	.word	0x2000037e

08007b70 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007b78:	e006      	b.n	8007b88 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	607a      	str	r2, [r7, #4]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff ff84 	bl	8007a90 <lcd_send_data>
	while (*str) {
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1f4      	bne.n	8007b7a <lcd_send_string+0xa>
	}
}
 8007b90:	bf00      	nop
 8007b92:	bf00      	nop
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <lcd_send_char>:

void lcd_send_char(char ch) {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	f023 030f 	bic.w	r3, r3, #15
 8007bac:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	011b      	lsls	r3, r3, #4
 8007bb2:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007bb4:	7b7b      	ldrb	r3, [r7, #13]
 8007bb6:	f043 030d 	orr.w	r3, r3, #13
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007bbe:	7b7b      	ldrb	r3, [r7, #13]
 8007bc0:	f043 0309 	orr.w	r3, r3, #9
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007bc8:	7b3b      	ldrb	r3, [r7, #12]
 8007bca:	f043 030d 	orr.w	r3, r3, #13
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007bd2:	7b3b      	ldrb	r3, [r7, #12]
 8007bd4:	f043 0309 	orr.w	r3, r3, #9
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007bdc:	bf00      	nop
 8007bde:	4825      	ldr	r0, [pc, #148]	; (8007c74 <lcd_send_char+0xd8>)
 8007be0:	f002 f9cd 	bl	8009f7e <HAL_I2C_GetError>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d0f9      	beq.n	8007bde <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007bea:	bf00      	nop
 8007bec:	4821      	ldr	r0, [pc, #132]	; (8007c74 <lcd_send_char+0xd8>)
 8007bee:	f002 f9b9 	bl	8009f64 <HAL_I2C_GetState>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b20      	cmp	r3, #32
 8007bf6:	d1f9      	bne.n	8007bec <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007bf8:	4b1f      	ldr	r3, [pc, #124]	; (8007c78 <lcd_send_char+0xdc>)
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d116      	bne.n	8007c2e <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
 8007c04:	e00f      	b.n	8007c26 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
 8007c08:	3310      	adds	r3, #16
 8007c0a:	443b      	add	r3, r7
 8007c0c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
 8007c12:	f022 0208 	bic.w	r2, r2, #8
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	3310      	adds	r3, #16
 8007c1a:	443b      	add	r3, r7
 8007c1c:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	3301      	adds	r3, #1
 8007c24:	73fb      	strb	r3, [r7, #15]
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d9ec      	bls.n	8007c06 <lcd_send_char+0x6a>
 8007c2c:	e015      	b.n	8007c5a <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73bb      	strb	r3, [r7, #14]
 8007c32:	e00f      	b.n	8007c54 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
 8007c36:	3310      	adds	r3, #16
 8007c38:	443b      	add	r3, r7
 8007c3a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	f042 0208 	orr.w	r2, r2, #8
 8007c44:	b2d2      	uxtb	r2, r2
 8007c46:	3310      	adds	r3, #16
 8007c48:	443b      	add	r3, r7
 8007c4a:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	3301      	adds	r3, #1
 8007c52:	73bb      	strb	r3, [r7, #14]
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d9ec      	bls.n	8007c34 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007c5a:	f107 0208 	add.w	r2, r7, #8
 8007c5e:	2364      	movs	r3, #100	; 0x64
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	2304      	movs	r3, #4
 8007c64:	214e      	movs	r1, #78	; 0x4e
 8007c66:	4803      	ldr	r0, [pc, #12]	; (8007c74 <lcd_send_char+0xd8>)
 8007c68:	f001 fd1c 	bl	80096a4 <HAL_I2C_Master_Transmit>
}
 8007c6c:	bf00      	nop
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	200003a8 	.word	0x200003a8
 8007c78:	2000037e 	.word	0x2000037e

08007c7c <lcd_init>:

void lcd_init (void) {
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007c80:	2002      	movs	r0, #2
 8007c82:	f7ff fe95 	bl	80079b0 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007c86:	2028      	movs	r0, #40	; 0x28
 8007c88:	f7ff fe92 	bl	80079b0 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007c8c:	200c      	movs	r0, #12
 8007c8e:	f7ff fe8f 	bl	80079b0 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007c92:	2080      	movs	r0, #128	; 0x80
 8007c94:	f7ff fe8c 	bl	80079b0 <lcd_send_cmd>
	lcd_backlight(1);
 8007c98:	2001      	movs	r0, #1
 8007c9a:	f000 f86d 	bl	8007d78 <lcd_backlight>
}
 8007c9e:	bf00      	nop
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	4603      	mov	r3, r0
 8007caa:	460a      	mov	r2, r1
 8007cac:	71fb      	strb	r3, [r7, #7]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d106      	bne.n	8007cc6 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007cb8:	79bb      	ldrb	r3, [r7, #6]
 8007cba:	337f      	adds	r3, #127	; 0x7f
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff fe76 	bl	80079b0 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007cc4:	e008      	b.n	8007cd8 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007cc6:	79fb      	ldrb	r3, [r7, #7]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d105      	bne.n	8007cd8 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007ccc:	79bb      	ldrb	r3, [r7, #6]
 8007cce:	3b41      	subs	r3, #65	; 0x41
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff fe6c 	bl	80079b0 <lcd_send_cmd>
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	603a      	str	r2, [r7, #0]
 8007cea:	71fb      	strb	r3, [r7, #7]
 8007cec:	460b      	mov	r3, r1
 8007cee:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007cf0:	79ba      	ldrb	r2, [r7, #6]
 8007cf2:	79fb      	ldrb	r3, [r7, #7]
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff ffd3 	bl	8007ca2 <lcd_gotoxy>
	lcd_send_string(str);
 8007cfc:	6838      	ldr	r0, [r7, #0]
 8007cfe:	f7ff ff37 	bl	8007b70 <lcd_send_string>
}
 8007d02:	bf00      	nop
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	4603      	mov	r3, r0
 8007d12:	71fb      	strb	r3, [r7, #7]
 8007d14:	460b      	mov	r3, r1
 8007d16:	71bb      	strb	r3, [r7, #6]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007d1c:	79ba      	ldrb	r2, [r7, #6]
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	4611      	mov	r1, r2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff ffbd 	bl	8007ca2 <lcd_gotoxy>
    lcd_send_char(ch);
 8007d28:	797b      	ldrb	r3, [r7, #5]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff ff36 	bl	8007b9c <lcd_send_char>
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <lcd_clear>:

void lcd_clear(void) {
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007d3c:	2001      	movs	r0, #1
 8007d3e:	f7ff fe37 	bl	80079b0 <lcd_send_cmd>
    HAL_Delay(2);
 8007d42:	2002      	movs	r0, #2
 8007d44:	f000 fd22 	bl	800878c <HAL_Delay>
}
 8007d48:	bf00      	nop
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	460a      	mov	r2, r1
 8007d56:	71fb      	strb	r3, [r7, #7]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007d5c:	79ba      	ldrb	r2, [r7, #6]
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	4611      	mov	r1, r2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff ff9d 	bl	8007ca2 <lcd_gotoxy>

    lcd_send_char(' ');
 8007d68:	2020      	movs	r0, #32
 8007d6a:	f7ff ff17 	bl	8007b9c <lcd_send_char>
}
 8007d6e:	bf00      	nop
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
	...

08007d78 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007d82:	4a05      	ldr	r2, [pc, #20]	; (8007d98 <lcd_backlight+0x20>)
 8007d84:	79fb      	ldrb	r3, [r7, #7]
 8007d86:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007d88:	2000      	movs	r0, #0
 8007d8a:	f7ff fe11 	bl	80079b0 <lcd_send_cmd>
}
 8007d8e:	bf00      	nop
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	2000037e 	.word	0x2000037e

08007d9c <lcd_cursor>:

void lcd_cursor(int state) {
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d106      	bne.n	8007db8 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007daa:	200e      	movs	r0, #14
 8007dac:	f7ff fe00 	bl	80079b0 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007db0:	200f      	movs	r0, #15
 8007db2:	f7ff fdfd 	bl	80079b0 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007db6:	e002      	b.n	8007dbe <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007db8:	200c      	movs	r0, #12
 8007dba:	f7ff fdf9 	bl	80079b0 <lcd_send_cmd>
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
	...

08007dc8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007dd0:	4b04      	ldr	r3, [pc, #16]	; (8007de4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	4a03      	ldr	r2, [pc, #12]	; (8007de4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007dd8:	6013      	str	r3, [r2, #0]
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bc80      	pop	{r7}
 8007de2:	4770      	bx	lr
 8007de4:	200001fc 	.word	0x200001fc

08007de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007dec:	f000 fc6c 	bl	80086c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007df0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007df4:	f000 fcca 	bl	800878c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007df8:	f000 f89c 	bl	8007f34 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007dfc:	f000 f9be 	bl	800817c <MX_GPIO_Init>
  MX_CAN_Init();
 8007e00:	f000 f8de 	bl	8007fc0 <MX_CAN_Init>
  MX_I2C1_Init();
 8007e04:	f000 f910 	bl	8008028 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007e08:	f000 f93c 	bl	8008084 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007e0c:	f000 f98c 	bl	8008128 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007e10:	2201      	movs	r2, #1
 8007e12:	2140      	movs	r1, #64	; 0x40
 8007e14:	483e      	ldr	r0, [pc, #248]	; (8007f10 <main+0x128>)
 8007e16:	f001 faa0 	bl	800935a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	2180      	movs	r1, #128	; 0x80
 8007e1e:	483c      	ldr	r0, [pc, #240]	; (8007f10 <main+0x128>)
 8007e20:	f001 fa9b 	bl	800935a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007e24:	200a      	movs	r0, #10
 8007e26:	f000 fcb1 	bl	800878c <HAL_Delay>
  lcd_init();
 8007e2a:	f7ff ff27 	bl	8007c7c <lcd_init>
  HAL_Delay(10);
 8007e2e:	200a      	movs	r0, #10
 8007e30:	f000 fcac 	bl	800878c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007e34:	4837      	ldr	r0, [pc, #220]	; (8007f14 <main+0x12c>)
 8007e36:	f003 f943 	bl	800b0c0 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007e3a:	bf00      	nop
 8007e3c:	4836      	ldr	r0, [pc, #216]	; (8007f18 <main+0x130>)
 8007e3e:	f002 f89e 	bl	8009f7e <HAL_I2C_GetError>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	d0f9      	beq.n	8007e3c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007e48:	bf00      	nop
 8007e4a:	4833      	ldr	r0, [pc, #204]	; (8007f18 <main+0x130>)
 8007e4c:	f002 f88a 	bl	8009f64 <HAL_I2C_GetState>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b20      	cmp	r3, #32
 8007e54:	d1f9      	bne.n	8007e4a <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007e56:	2200      	movs	r2, #0
 8007e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e5c:	482c      	ldr	r0, [pc, #176]	; (8007f10 <main+0x128>)
 8007e5e:	f001 fa7c 	bl	800935a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007e62:	2200      	movs	r2, #0
 8007e64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e68:	4829      	ldr	r0, [pc, #164]	; (8007f10 <main+0x128>)
 8007e6a:	f001 fa76 	bl	800935a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2104      	movs	r1, #4
 8007e72:	4827      	ldr	r0, [pc, #156]	; (8007f10 <main+0x128>)
 8007e74:	f001 fa71 	bl	800935a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2102      	movs	r1, #2
 8007e7c:	4824      	ldr	r0, [pc, #144]	; (8007f10 <main+0x128>)
 8007e7e:	f001 fa6c 	bl	800935a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007e82:	2200      	movs	r2, #0
 8007e84:	2101      	movs	r1, #1
 8007e86:	4822      	ldr	r0, [pc, #136]	; (8007f10 <main+0x128>)
 8007e88:	f001 fa67 	bl	800935a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2120      	movs	r1, #32
 8007e90:	4822      	ldr	r0, [pc, #136]	; (8007f1c <main+0x134>)
 8007e92:	f001 fa62 	bl	800935a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007e96:	2200      	movs	r2, #0
 8007e98:	2110      	movs	r1, #16
 8007e9a:	4820      	ldr	r0, [pc, #128]	; (8007f1c <main+0x134>)
 8007e9c:	f001 fa5d 	bl	800935a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2180      	movs	r1, #128	; 0x80
 8007ea4:	481e      	ldr	r0, [pc, #120]	; (8007f20 <main+0x138>)
 8007ea6:	f001 fa58 	bl	800935a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2140      	movs	r1, #64	; 0x40
 8007eae:	481c      	ldr	r0, [pc, #112]	; (8007f20 <main+0x138>)
 8007eb0:	f001 fa53 	bl	800935a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2120      	movs	r1, #32
 8007eb8:	4819      	ldr	r0, [pc, #100]	; (8007f20 <main+0x138>)
 8007eba:	f001 fa4e 	bl	800935a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	2110      	movs	r1, #16
 8007ec2:	4817      	ldr	r0, [pc, #92]	; (8007f20 <main+0x138>)
 8007ec4:	f001 fa49 	bl	800935a <HAL_GPIO_WritePin>

  i2cTest();
 8007ec8:	f7f8 ff32 	bl	8000d30 <i2cTest>
  HAL_Delay(100);
 8007ecc:	2064      	movs	r0, #100	; 0x64
 8007ece:	f000 fc5d 	bl	800878c <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007ed2:	4a14      	ldr	r2, [pc, #80]	; (8007f24 <main+0x13c>)
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	f7ff ff02 	bl	8007ce0 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007edc:	4a12      	ldr	r2, [pc, #72]	; (8007f28 <main+0x140>)
 8007ede:	2101      	movs	r1, #1
 8007ee0:	2002      	movs	r0, #2
 8007ee2:	f7ff fefd 	bl	8007ce0 <lcd_print>
  HAL_Delay(1000);
 8007ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007eea:	f000 fc4f 	bl	800878c <HAL_Delay>
  lcd_clear();
 8007eee:	f7ff ff23 	bl	8007d38 <lcd_clear>

  eepromKontrol();
 8007ef2:	f7f8 f99f 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007ef6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007efa:	f000 fc47 	bl	800878c <HAL_Delay>

  backLightTimer = millis;
 8007efe:	4b0b      	ldr	r3, [pc, #44]	; (8007f2c <main+0x144>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a0b      	ldr	r2, [pc, #44]	; (8007f30 <main+0x148>)
 8007f04:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007f06:	f7ff fc77 	bl	80077f8 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007f0a:	f7fe fc95 	bl	8006838 <mainLoop>
 8007f0e:	e7fc      	b.n	8007f0a <main+0x122>
 8007f10:	40010c00 	.word	0x40010c00
 8007f14:	200003fc 	.word	0x200003fc
 8007f18:	200003a8 	.word	0x200003a8
 8007f1c:	40011000 	.word	0x40011000
 8007f20:	40010800 	.word	0x40010800
 8007f24:	0800dcf0 	.word	0x0800dcf0
 8007f28:	0800dd04 	.word	0x0800dd04
 8007f2c:	200001fc 	.word	0x200001fc
 8007f30:	20000218 	.word	0x20000218

08007f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b090      	sub	sp, #64	; 0x40
 8007f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f3a:	f107 0318 	add.w	r3, r7, #24
 8007f3e:	2228      	movs	r2, #40	; 0x28
 8007f40:	2100      	movs	r1, #0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f004 fb45 	bl	800c5d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f48:	1d3b      	adds	r3, r7, #4
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	605a      	str	r2, [r3, #4]
 8007f50:	609a      	str	r2, [r3, #8]
 8007f52:	60da      	str	r2, [r3, #12]
 8007f54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007f56:	2301      	movs	r3, #1
 8007f58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007f60:	2300      	movs	r3, #0
 8007f62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f64:	2301      	movs	r3, #1
 8007f66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f68:	2302      	movs	r3, #2
 8007f6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007f72:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f78:	f107 0318 	add.w	r3, r7, #24
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f002 fc3f 	bl	800a800 <HAL_RCC_OscConfig>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007f88:	f000 f9a2 	bl	80082d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f8c:	230f      	movs	r3, #15
 8007f8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f90:	2302      	movs	r3, #2
 8007f92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f94:	2300      	movs	r3, #0
 8007f96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007fa2:	1d3b      	adds	r3, r7, #4
 8007fa4:	2102      	movs	r1, #2
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f002 feac 	bl	800ad04 <HAL_RCC_ClockConfig>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007fb2:	f000 f98d 	bl	80082d0 <Error_Handler>
  }
}
 8007fb6:	bf00      	nop
 8007fb8:	3740      	adds	r7, #64	; 0x40
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007fc4:	4b16      	ldr	r3, [pc, #88]	; (8008020 <MX_CAN_Init+0x60>)
 8007fc6:	4a17      	ldr	r2, [pc, #92]	; (8008024 <MX_CAN_Init+0x64>)
 8007fc8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007fca:	4b15      	ldr	r3, [pc, #84]	; (8008020 <MX_CAN_Init+0x60>)
 8007fcc:	2210      	movs	r2, #16
 8007fce:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007fd0:	4b13      	ldr	r3, [pc, #76]	; (8008020 <MX_CAN_Init+0x60>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007fd6:	4b12      	ldr	r3, [pc, #72]	; (8008020 <MX_CAN_Init+0x60>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007fdc:	4b10      	ldr	r3, [pc, #64]	; (8008020 <MX_CAN_Init+0x60>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007fe2:	4b0f      	ldr	r3, [pc, #60]	; (8008020 <MX_CAN_Init+0x60>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007fe8:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <MX_CAN_Init+0x60>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007fee:	4b0c      	ldr	r3, [pc, #48]	; (8008020 <MX_CAN_Init+0x60>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007ff4:	4b0a      	ldr	r3, [pc, #40]	; (8008020 <MX_CAN_Init+0x60>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007ffa:	4b09      	ldr	r3, [pc, #36]	; (8008020 <MX_CAN_Init+0x60>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008000:	4b07      	ldr	r3, [pc, #28]	; (8008020 <MX_CAN_Init+0x60>)
 8008002:	2200      	movs	r2, #0
 8008004:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008006:	4b06      	ldr	r3, [pc, #24]	; (8008020 <MX_CAN_Init+0x60>)
 8008008:	2200      	movs	r2, #0
 800800a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <MX_CAN_Init+0x60>)
 800800e:	f000 fbe1 	bl	80087d4 <HAL_CAN_Init>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008018:	f000 f95a 	bl	80082d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 800801c:	bf00      	nop
 800801e:	bd80      	pop	{r7, pc}
 8008020:	20000380 	.word	0x20000380
 8008024:	40006400 	.word	0x40006400

08008028 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800802c:	4b12      	ldr	r3, [pc, #72]	; (8008078 <MX_I2C1_Init+0x50>)
 800802e:	4a13      	ldr	r2, [pc, #76]	; (800807c <MX_I2C1_Init+0x54>)
 8008030:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008032:	4b11      	ldr	r3, [pc, #68]	; (8008078 <MX_I2C1_Init+0x50>)
 8008034:	4a12      	ldr	r2, [pc, #72]	; (8008080 <MX_I2C1_Init+0x58>)
 8008036:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008038:	4b0f      	ldr	r3, [pc, #60]	; (8008078 <MX_I2C1_Init+0x50>)
 800803a:	2200      	movs	r2, #0
 800803c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800803e:	4b0e      	ldr	r3, [pc, #56]	; (8008078 <MX_I2C1_Init+0x50>)
 8008040:	2200      	movs	r2, #0
 8008042:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008044:	4b0c      	ldr	r3, [pc, #48]	; (8008078 <MX_I2C1_Init+0x50>)
 8008046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800804a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800804c:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <MX_I2C1_Init+0x50>)
 800804e:	2200      	movs	r2, #0
 8008050:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008052:	4b09      	ldr	r3, [pc, #36]	; (8008078 <MX_I2C1_Init+0x50>)
 8008054:	2200      	movs	r2, #0
 8008056:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008058:	4b07      	ldr	r3, [pc, #28]	; (8008078 <MX_I2C1_Init+0x50>)
 800805a:	2200      	movs	r2, #0
 800805c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800805e:	4b06      	ldr	r3, [pc, #24]	; (8008078 <MX_I2C1_Init+0x50>)
 8008060:	2200      	movs	r2, #0
 8008062:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008064:	4804      	ldr	r0, [pc, #16]	; (8008078 <MX_I2C1_Init+0x50>)
 8008066:	f001 f9a9 	bl	80093bc <HAL_I2C_Init>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008070:	f000 f92e 	bl	80082d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008074:	bf00      	nop
 8008076:	bd80      	pop	{r7, pc}
 8008078:	200003a8 	.word	0x200003a8
 800807c:	40005400 	.word	0x40005400
 8008080:	00061a80 	.word	0x00061a80

08008084 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800808a:	f107 0308 	add.w	r3, r7, #8
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	605a      	str	r2, [r3, #4]
 8008094:	609a      	str	r2, [r3, #8]
 8008096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008098:	463b      	mov	r3, r7
 800809a:	2200      	movs	r2, #0
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80080a0:	4b1f      	ldr	r3, [pc, #124]	; (8008120 <MX_TIM1_Init+0x9c>)
 80080a2:	4a20      	ldr	r2, [pc, #128]	; (8008124 <MX_TIM1_Init+0xa0>)
 80080a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80080a6:	4b1e      	ldr	r3, [pc, #120]	; (8008120 <MX_TIM1_Init+0x9c>)
 80080a8:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80080ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080ae:	4b1c      	ldr	r3, [pc, #112]	; (8008120 <MX_TIM1_Init+0x9c>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80080b4:	4b1a      	ldr	r3, [pc, #104]	; (8008120 <MX_TIM1_Init+0x9c>)
 80080b6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80080ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080bc:	4b18      	ldr	r3, [pc, #96]	; (8008120 <MX_TIM1_Init+0x9c>)
 80080be:	2200      	movs	r2, #0
 80080c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80080c2:	4b17      	ldr	r3, [pc, #92]	; (8008120 <MX_TIM1_Init+0x9c>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080c8:	4b15      	ldr	r3, [pc, #84]	; (8008120 <MX_TIM1_Init+0x9c>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80080ce:	4814      	ldr	r0, [pc, #80]	; (8008120 <MX_TIM1_Init+0x9c>)
 80080d0:	f002 ffa6 	bl	800b020 <HAL_TIM_Base_Init>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80080da:	f000 f8f9 	bl	80082d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80080e4:	f107 0308 	add.w	r3, r7, #8
 80080e8:	4619      	mov	r1, r3
 80080ea:	480d      	ldr	r0, [pc, #52]	; (8008120 <MX_TIM1_Init+0x9c>)
 80080ec:	f003 f950 	bl	800b390 <HAL_TIM_ConfigClockSource>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80080f6:	f000 f8eb 	bl	80082d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080fa:	2300      	movs	r3, #0
 80080fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080fe:	2300      	movs	r3, #0
 8008100:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008102:	463b      	mov	r3, r7
 8008104:	4619      	mov	r1, r3
 8008106:	4806      	ldr	r0, [pc, #24]	; (8008120 <MX_TIM1_Init+0x9c>)
 8008108:	f003 fb3e 	bl	800b788 <HAL_TIMEx_MasterConfigSynchronization>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008112:	f000 f8dd 	bl	80082d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008116:	bf00      	nop
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	200003fc 	.word	0x200003fc
 8008124:	40012c00 	.word	0x40012c00

08008128 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800812c:	4b11      	ldr	r3, [pc, #68]	; (8008174 <MX_USART1_UART_Init+0x4c>)
 800812e:	4a12      	ldr	r2, [pc, #72]	; (8008178 <MX_USART1_UART_Init+0x50>)
 8008130:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008132:	4b10      	ldr	r3, [pc, #64]	; (8008174 <MX_USART1_UART_Init+0x4c>)
 8008134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008138:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800813a:	4b0e      	ldr	r3, [pc, #56]	; (8008174 <MX_USART1_UART_Init+0x4c>)
 800813c:	2200      	movs	r2, #0
 800813e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008140:	4b0c      	ldr	r3, [pc, #48]	; (8008174 <MX_USART1_UART_Init+0x4c>)
 8008142:	2200      	movs	r2, #0
 8008144:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008146:	4b0b      	ldr	r3, [pc, #44]	; (8008174 <MX_USART1_UART_Init+0x4c>)
 8008148:	2200      	movs	r2, #0
 800814a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800814c:	4b09      	ldr	r3, [pc, #36]	; (8008174 <MX_USART1_UART_Init+0x4c>)
 800814e:	220c      	movs	r2, #12
 8008150:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008152:	4b08      	ldr	r3, [pc, #32]	; (8008174 <MX_USART1_UART_Init+0x4c>)
 8008154:	2200      	movs	r2, #0
 8008156:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008158:	4b06      	ldr	r3, [pc, #24]	; (8008174 <MX_USART1_UART_Init+0x4c>)
 800815a:	2200      	movs	r2, #0
 800815c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800815e:	4805      	ldr	r0, [pc, #20]	; (8008174 <MX_USART1_UART_Init+0x4c>)
 8008160:	f003 fb90 	bl	800b884 <HAL_UART_Init>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800816a:	f000 f8b1 	bl	80082d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800816e:	bf00      	nop
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	20000444 	.word	0x20000444
 8008178:	40013800 	.word	0x40013800

0800817c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b088      	sub	sp, #32
 8008180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008182:	f107 0310 	add.w	r3, r7, #16
 8008186:	2200      	movs	r2, #0
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	605a      	str	r2, [r3, #4]
 800818c:	609a      	str	r2, [r3, #8]
 800818e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008190:	4b4b      	ldr	r3, [pc, #300]	; (80082c0 <MX_GPIO_Init+0x144>)
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	4a4a      	ldr	r2, [pc, #296]	; (80082c0 <MX_GPIO_Init+0x144>)
 8008196:	f043 0310 	orr.w	r3, r3, #16
 800819a:	6193      	str	r3, [r2, #24]
 800819c:	4b48      	ldr	r3, [pc, #288]	; (80082c0 <MX_GPIO_Init+0x144>)
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	f003 0310 	and.w	r3, r3, #16
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80081a8:	4b45      	ldr	r3, [pc, #276]	; (80082c0 <MX_GPIO_Init+0x144>)
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	4a44      	ldr	r2, [pc, #272]	; (80082c0 <MX_GPIO_Init+0x144>)
 80081ae:	f043 0320 	orr.w	r3, r3, #32
 80081b2:	6193      	str	r3, [r2, #24]
 80081b4:	4b42      	ldr	r3, [pc, #264]	; (80082c0 <MX_GPIO_Init+0x144>)
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	60bb      	str	r3, [r7, #8]
 80081be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80081c0:	4b3f      	ldr	r3, [pc, #252]	; (80082c0 <MX_GPIO_Init+0x144>)
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	4a3e      	ldr	r2, [pc, #248]	; (80082c0 <MX_GPIO_Init+0x144>)
 80081c6:	f043 0304 	orr.w	r3, r3, #4
 80081ca:	6193      	str	r3, [r2, #24]
 80081cc:	4b3c      	ldr	r3, [pc, #240]	; (80082c0 <MX_GPIO_Init+0x144>)
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	607b      	str	r3, [r7, #4]
 80081d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80081d8:	4b39      	ldr	r3, [pc, #228]	; (80082c0 <MX_GPIO_Init+0x144>)
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	4a38      	ldr	r2, [pc, #224]	; (80082c0 <MX_GPIO_Init+0x144>)
 80081de:	f043 0308 	orr.w	r3, r3, #8
 80081e2:	6193      	str	r3, [r2, #24]
 80081e4:	4b36      	ldr	r3, [pc, #216]	; (80082c0 <MX_GPIO_Init+0x144>)
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	f003 0308 	and.w	r3, r3, #8
 80081ec:	603b      	str	r3, [r7, #0]
 80081ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80081f0:	2200      	movs	r2, #0
 80081f2:	21f0      	movs	r1, #240	; 0xf0
 80081f4:	4833      	ldr	r0, [pc, #204]	; (80082c4 <MX_GPIO_Init+0x148>)
 80081f6:	f001 f8b0 	bl	800935a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80081fa:	2200      	movs	r2, #0
 80081fc:	f241 0130 	movw	r1, #4144	; 0x1030
 8008200:	4831      	ldr	r0, [pc, #196]	; (80082c8 <MX_GPIO_Init+0x14c>)
 8008202:	f001 f8aa 	bl	800935a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008206:	2200      	movs	r2, #0
 8008208:	f640 4107 	movw	r1, #3079	; 0xc07
 800820c:	482f      	ldr	r0, [pc, #188]	; (80082cc <MX_GPIO_Init+0x150>)
 800820e:	f001 f8a4 	bl	800935a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008212:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008216:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008218:	2300      	movs	r3, #0
 800821a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800821c:	2300      	movs	r3, #0
 800821e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008220:	f107 0310 	add.w	r3, r7, #16
 8008224:	4619      	mov	r1, r3
 8008226:	4828      	ldr	r0, [pc, #160]	; (80082c8 <MX_GPIO_Init+0x14c>)
 8008228:	f000 fe20 	bl	8008e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 800822c:	f248 130f 	movw	r3, #33039	; 0x810f
 8008230:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008232:	2300      	movs	r3, #0
 8008234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008236:	2300      	movs	r3, #0
 8008238:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800823a:	f107 0310 	add.w	r3, r7, #16
 800823e:	4619      	mov	r1, r3
 8008240:	4820      	ldr	r0, [pc, #128]	; (80082c4 <MX_GPIO_Init+0x148>)
 8008242:	f000 fe13 	bl	8008e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008246:	23f0      	movs	r3, #240	; 0xf0
 8008248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800824a:	2301      	movs	r3, #1
 800824c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800824e:	2300      	movs	r3, #0
 8008250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008252:	2302      	movs	r3, #2
 8008254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008256:	f107 0310 	add.w	r3, r7, #16
 800825a:	4619      	mov	r1, r3
 800825c:	4819      	ldr	r0, [pc, #100]	; (80082c4 <MX_GPIO_Init+0x148>)
 800825e:	f000 fe05 	bl	8008e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008262:	f241 0330 	movw	r3, #4144	; 0x1030
 8008266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008268:	2301      	movs	r3, #1
 800826a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800826c:	2300      	movs	r3, #0
 800826e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008270:	2302      	movs	r3, #2
 8008272:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008274:	f107 0310 	add.w	r3, r7, #16
 8008278:	4619      	mov	r1, r3
 800827a:	4813      	ldr	r0, [pc, #76]	; (80082c8 <MX_GPIO_Init+0x14c>)
 800827c:	f000 fdf6 	bl	8008e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008280:	f640 4307 	movw	r3, #3079	; 0xc07
 8008284:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008286:	2301      	movs	r3, #1
 8008288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800828a:	2300      	movs	r3, #0
 800828c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800828e:	2302      	movs	r3, #2
 8008290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008292:	f107 0310 	add.w	r3, r7, #16
 8008296:	4619      	mov	r1, r3
 8008298:	480c      	ldr	r0, [pc, #48]	; (80082cc <MX_GPIO_Init+0x150>)
 800829a:	f000 fde7 	bl	8008e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800829e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80082a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082a4:	2300      	movs	r3, #0
 80082a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a8:	2300      	movs	r3, #0
 80082aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082ac:	f107 0310 	add.w	r3, r7, #16
 80082b0:	4619      	mov	r1, r3
 80082b2:	4806      	ldr	r0, [pc, #24]	; (80082cc <MX_GPIO_Init+0x150>)
 80082b4:	f000 fdda 	bl	8008e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80082b8:	bf00      	nop
 80082ba:	3720      	adds	r7, #32
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	40021000 	.word	0x40021000
 80082c4:	40010800 	.word	0x40010800
 80082c8:	40011000 	.word	0x40011000
 80082cc:	40010c00 	.word	0x40010c00

080082d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082d0:	b480      	push	{r7}
 80082d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80082d4:	bf00      	nop
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bc80      	pop	{r7}
 80082da:	4770      	bx	lr

080082dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80082e2:	4b15      	ldr	r3, [pc, #84]	; (8008338 <HAL_MspInit+0x5c>)
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	4a14      	ldr	r2, [pc, #80]	; (8008338 <HAL_MspInit+0x5c>)
 80082e8:	f043 0301 	orr.w	r3, r3, #1
 80082ec:	6193      	str	r3, [r2, #24]
 80082ee:	4b12      	ldr	r3, [pc, #72]	; (8008338 <HAL_MspInit+0x5c>)
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	60bb      	str	r3, [r7, #8]
 80082f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082fa:	4b0f      	ldr	r3, [pc, #60]	; (8008338 <HAL_MspInit+0x5c>)
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	4a0e      	ldr	r2, [pc, #56]	; (8008338 <HAL_MspInit+0x5c>)
 8008300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008304:	61d3      	str	r3, [r2, #28]
 8008306:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <HAL_MspInit+0x5c>)
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800830e:	607b      	str	r3, [r7, #4]
 8008310:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008312:	4b0a      	ldr	r3, [pc, #40]	; (800833c <HAL_MspInit+0x60>)
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	4a04      	ldr	r2, [pc, #16]	; (800833c <HAL_MspInit+0x60>)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800832e:	bf00      	nop
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	bc80      	pop	{r7}
 8008336:	4770      	bx	lr
 8008338:	40021000 	.word	0x40021000
 800833c:	40010000 	.word	0x40010000

08008340 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b088      	sub	sp, #32
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008348:	f107 0310 	add.w	r3, r7, #16
 800834c:	2200      	movs	r2, #0
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	605a      	str	r2, [r3, #4]
 8008352:	609a      	str	r2, [r3, #8]
 8008354:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a1c      	ldr	r2, [pc, #112]	; (80083cc <HAL_CAN_MspInit+0x8c>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d131      	bne.n	80083c4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008360:	4b1b      	ldr	r3, [pc, #108]	; (80083d0 <HAL_CAN_MspInit+0x90>)
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	4a1a      	ldr	r2, [pc, #104]	; (80083d0 <HAL_CAN_MspInit+0x90>)
 8008366:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800836a:	61d3      	str	r3, [r2, #28]
 800836c:	4b18      	ldr	r3, [pc, #96]	; (80083d0 <HAL_CAN_MspInit+0x90>)
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008378:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <HAL_CAN_MspInit+0x90>)
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	4a14      	ldr	r2, [pc, #80]	; (80083d0 <HAL_CAN_MspInit+0x90>)
 800837e:	f043 0304 	orr.w	r3, r3, #4
 8008382:	6193      	str	r3, [r2, #24]
 8008384:	4b12      	ldr	r3, [pc, #72]	; (80083d0 <HAL_CAN_MspInit+0x90>)
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	f003 0304 	and.w	r3, r3, #4
 800838c:	60bb      	str	r3, [r7, #8]
 800838e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008394:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008396:	2300      	movs	r3, #0
 8008398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800839a:	2300      	movs	r3, #0
 800839c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800839e:	f107 0310 	add.w	r3, r7, #16
 80083a2:	4619      	mov	r1, r3
 80083a4:	480b      	ldr	r0, [pc, #44]	; (80083d4 <HAL_CAN_MspInit+0x94>)
 80083a6:	f000 fd61 	bl	8008e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80083aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083b0:	2302      	movs	r3, #2
 80083b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083b4:	2303      	movs	r3, #3
 80083b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083b8:	f107 0310 	add.w	r3, r7, #16
 80083bc:	4619      	mov	r1, r3
 80083be:	4805      	ldr	r0, [pc, #20]	; (80083d4 <HAL_CAN_MspInit+0x94>)
 80083c0:	f000 fd54 	bl	8008e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80083c4:	bf00      	nop
 80083c6:	3720      	adds	r7, #32
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40006400 	.word	0x40006400
 80083d0:	40021000 	.word	0x40021000
 80083d4:	40010800 	.word	0x40010800

080083d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e0:	f107 0310 	add.w	r3, r7, #16
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	605a      	str	r2, [r3, #4]
 80083ea:	609a      	str	r2, [r3, #8]
 80083ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a15      	ldr	r2, [pc, #84]	; (8008448 <HAL_I2C_MspInit+0x70>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d123      	bne.n	8008440 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083f8:	4b14      	ldr	r3, [pc, #80]	; (800844c <HAL_I2C_MspInit+0x74>)
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	4a13      	ldr	r2, [pc, #76]	; (800844c <HAL_I2C_MspInit+0x74>)
 80083fe:	f043 0308 	orr.w	r3, r3, #8
 8008402:	6193      	str	r3, [r2, #24]
 8008404:	4b11      	ldr	r3, [pc, #68]	; (800844c <HAL_I2C_MspInit+0x74>)
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	f003 0308 	and.w	r3, r3, #8
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008410:	23c0      	movs	r3, #192	; 0xc0
 8008412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008414:	2312      	movs	r3, #18
 8008416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008418:	2303      	movs	r3, #3
 800841a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800841c:	f107 0310 	add.w	r3, r7, #16
 8008420:	4619      	mov	r1, r3
 8008422:	480b      	ldr	r0, [pc, #44]	; (8008450 <HAL_I2C_MspInit+0x78>)
 8008424:	f000 fd22 	bl	8008e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008428:	4b08      	ldr	r3, [pc, #32]	; (800844c <HAL_I2C_MspInit+0x74>)
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	4a07      	ldr	r2, [pc, #28]	; (800844c <HAL_I2C_MspInit+0x74>)
 800842e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008432:	61d3      	str	r3, [r2, #28]
 8008434:	4b05      	ldr	r3, [pc, #20]	; (800844c <HAL_I2C_MspInit+0x74>)
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800843c:	60bb      	str	r3, [r7, #8]
 800843e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008440:	bf00      	nop
 8008442:	3720      	adds	r7, #32
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	40005400 	.word	0x40005400
 800844c:	40021000 	.word	0x40021000
 8008450:	40010c00 	.word	0x40010c00

08008454 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a0a      	ldr	r2, [pc, #40]	; (800848c <HAL_I2C_MspDeInit+0x38>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d10d      	bne.n	8008482 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008466:	4b0a      	ldr	r3, [pc, #40]	; (8008490 <HAL_I2C_MspDeInit+0x3c>)
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	4a09      	ldr	r2, [pc, #36]	; (8008490 <HAL_I2C_MspDeInit+0x3c>)
 800846c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008470:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008472:	2140      	movs	r1, #64	; 0x40
 8008474:	4807      	ldr	r0, [pc, #28]	; (8008494 <HAL_I2C_MspDeInit+0x40>)
 8008476:	f000 fe8d 	bl	8009194 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800847a:	2180      	movs	r1, #128	; 0x80
 800847c:	4805      	ldr	r0, [pc, #20]	; (8008494 <HAL_I2C_MspDeInit+0x40>)
 800847e:	f000 fe89 	bl	8009194 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008482:	bf00      	nop
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	40005400 	.word	0x40005400
 8008490:	40021000 	.word	0x40021000
 8008494:	40010c00 	.word	0x40010c00

08008498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a0d      	ldr	r2, [pc, #52]	; (80084dc <HAL_TIM_Base_MspInit+0x44>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d113      	bne.n	80084d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80084aa:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <HAL_TIM_Base_MspInit+0x48>)
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	4a0c      	ldr	r2, [pc, #48]	; (80084e0 <HAL_TIM_Base_MspInit+0x48>)
 80084b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80084b4:	6193      	str	r3, [r2, #24]
 80084b6:	4b0a      	ldr	r3, [pc, #40]	; (80084e0 <HAL_TIM_Base_MspInit+0x48>)
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80084c2:	2200      	movs	r2, #0
 80084c4:	2100      	movs	r1, #0
 80084c6:	2019      	movs	r0, #25
 80084c8:	f000 fb57 	bl	8008b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80084cc:	2019      	movs	r0, #25
 80084ce:	f000 fb70 	bl	8008bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80084d2:	bf00      	nop
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	40012c00 	.word	0x40012c00
 80084e0:	40021000 	.word	0x40021000

080084e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084ec:	f107 0310 	add.w	r3, r7, #16
 80084f0:	2200      	movs	r2, #0
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	605a      	str	r2, [r3, #4]
 80084f6:	609a      	str	r2, [r3, #8]
 80084f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a20      	ldr	r2, [pc, #128]	; (8008580 <HAL_UART_MspInit+0x9c>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d139      	bne.n	8008578 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008504:	4b1f      	ldr	r3, [pc, #124]	; (8008584 <HAL_UART_MspInit+0xa0>)
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	4a1e      	ldr	r2, [pc, #120]	; (8008584 <HAL_UART_MspInit+0xa0>)
 800850a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800850e:	6193      	str	r3, [r2, #24]
 8008510:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <HAL_UART_MspInit+0xa0>)
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800851c:	4b19      	ldr	r3, [pc, #100]	; (8008584 <HAL_UART_MspInit+0xa0>)
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	4a18      	ldr	r2, [pc, #96]	; (8008584 <HAL_UART_MspInit+0xa0>)
 8008522:	f043 0304 	orr.w	r3, r3, #4
 8008526:	6193      	str	r3, [r2, #24]
 8008528:	4b16      	ldr	r3, [pc, #88]	; (8008584 <HAL_UART_MspInit+0xa0>)
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	60bb      	str	r3, [r7, #8]
 8008532:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008538:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800853a:	2302      	movs	r3, #2
 800853c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800853e:	2303      	movs	r3, #3
 8008540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008542:	f107 0310 	add.w	r3, r7, #16
 8008546:	4619      	mov	r1, r3
 8008548:	480f      	ldr	r0, [pc, #60]	; (8008588 <HAL_UART_MspInit+0xa4>)
 800854a:	f000 fc8f 	bl	8008e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800854e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008554:	2300      	movs	r3, #0
 8008556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008558:	2300      	movs	r3, #0
 800855a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800855c:	f107 0310 	add.w	r3, r7, #16
 8008560:	4619      	mov	r1, r3
 8008562:	4809      	ldr	r0, [pc, #36]	; (8008588 <HAL_UART_MspInit+0xa4>)
 8008564:	f000 fc82 	bl	8008e6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008568:	2200      	movs	r2, #0
 800856a:	2100      	movs	r1, #0
 800856c:	2025      	movs	r0, #37	; 0x25
 800856e:	f000 fb04 	bl	8008b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008572:	2025      	movs	r0, #37	; 0x25
 8008574:	f000 fb1d 	bl	8008bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008578:	bf00      	nop
 800857a:	3720      	adds	r7, #32
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	40013800 	.word	0x40013800
 8008584:	40021000 	.word	0x40021000
 8008588:	40010800 	.word	0x40010800

0800858c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008590:	e7fe      	b.n	8008590 <NMI_Handler+0x4>

08008592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008592:	b480      	push	{r7}
 8008594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008596:	e7fe      	b.n	8008596 <HardFault_Handler+0x4>

08008598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008598:	b480      	push	{r7}
 800859a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800859c:	e7fe      	b.n	800859c <MemManage_Handler+0x4>

0800859e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800859e:	b480      	push	{r7}
 80085a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80085a2:	e7fe      	b.n	80085a2 <BusFault_Handler+0x4>

080085a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80085a4:	b480      	push	{r7}
 80085a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80085a8:	e7fe      	b.n	80085a8 <UsageFault_Handler+0x4>

080085aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80085aa:	b480      	push	{r7}
 80085ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80085ae:	bf00      	nop
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bc80      	pop	{r7}
 80085b4:	4770      	bx	lr

080085b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80085b6:	b480      	push	{r7}
 80085b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80085ba:	bf00      	nop
 80085bc:	46bd      	mov	sp, r7
 80085be:	bc80      	pop	{r7}
 80085c0:	4770      	bx	lr

080085c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80085c2:	b480      	push	{r7}
 80085c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80085c6:	bf00      	nop
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bc80      	pop	{r7}
 80085cc:	4770      	bx	lr

080085ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80085d2:	f000 f8bf 	bl	8008754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80085d6:	bf00      	nop
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80085e0:	4802      	ldr	r0, [pc, #8]	; (80085ec <TIM1_UP_IRQHandler+0x10>)
 80085e2:	f002 fdcd 	bl	800b180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80085e6:	bf00      	nop
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	200003fc 	.word	0x200003fc

080085f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80085f4:	4802      	ldr	r0, [pc, #8]	; (8008600 <USART1_IRQHandler+0x10>)
 80085f6:	f003 f9cb 	bl	800b990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80085fa:	bf00      	nop
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	20000444 	.word	0x20000444

08008604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800860c:	4a14      	ldr	r2, [pc, #80]	; (8008660 <_sbrk+0x5c>)
 800860e:	4b15      	ldr	r3, [pc, #84]	; (8008664 <_sbrk+0x60>)
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008618:	4b13      	ldr	r3, [pc, #76]	; (8008668 <_sbrk+0x64>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d102      	bne.n	8008626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008620:	4b11      	ldr	r3, [pc, #68]	; (8008668 <_sbrk+0x64>)
 8008622:	4a12      	ldr	r2, [pc, #72]	; (800866c <_sbrk+0x68>)
 8008624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008626:	4b10      	ldr	r3, [pc, #64]	; (8008668 <_sbrk+0x64>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4413      	add	r3, r2
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	429a      	cmp	r2, r3
 8008632:	d207      	bcs.n	8008644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008634:	f003 ffe6 	bl	800c604 <__errno>
 8008638:	4603      	mov	r3, r0
 800863a:	220c      	movs	r2, #12
 800863c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800863e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008642:	e009      	b.n	8008658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008644:	4b08      	ldr	r3, [pc, #32]	; (8008668 <_sbrk+0x64>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800864a:	4b07      	ldr	r3, [pc, #28]	; (8008668 <_sbrk+0x64>)
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4413      	add	r3, r2
 8008652:	4a05      	ldr	r2, [pc, #20]	; (8008668 <_sbrk+0x64>)
 8008654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008656:	68fb      	ldr	r3, [r7, #12]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	2000c000 	.word	0x2000c000
 8008664:	00000400 	.word	0x00000400
 8008668:	2000048c 	.word	0x2000048c
 800866c:	200005e0 	.word	0x200005e0

08008670 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008670:	b480      	push	{r7}
 8008672:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008674:	bf00      	nop
 8008676:	46bd      	mov	sp, r7
 8008678:	bc80      	pop	{r7}
 800867a:	4770      	bx	lr

0800867c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800867c:	480c      	ldr	r0, [pc, #48]	; (80086b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800867e:	490d      	ldr	r1, [pc, #52]	; (80086b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008680:	4a0d      	ldr	r2, [pc, #52]	; (80086b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008684:	e002      	b.n	800868c <LoopCopyDataInit>

08008686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800868a:	3304      	adds	r3, #4

0800868c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800868c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800868e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008690:	d3f9      	bcc.n	8008686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008692:	4a0a      	ldr	r2, [pc, #40]	; (80086bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008694:	4c0a      	ldr	r4, [pc, #40]	; (80086c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008698:	e001      	b.n	800869e <LoopFillZerobss>

0800869a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800869a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800869c:	3204      	adds	r2, #4

0800869e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800869e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80086a0:	d3fb      	bcc.n	800869a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80086a2:	f7ff ffe5 	bl	8008670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80086a6:	f003 ffb3 	bl	800c610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80086aa:	f7ff fb9d 	bl	8007de8 <main>
  bx lr
 80086ae:	4770      	bx	lr
  ldr r0, =_sdata
 80086b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80086b4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80086b8:	0800dda4 	.word	0x0800dda4
  ldr r2, =_sbss
 80086bc:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80086c0:	200005dc 	.word	0x200005dc

080086c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80086c4:	e7fe      	b.n	80086c4 <ADC1_2_IRQHandler>
	...

080086c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80086cc:	4b08      	ldr	r3, [pc, #32]	; (80086f0 <HAL_Init+0x28>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a07      	ldr	r2, [pc, #28]	; (80086f0 <HAL_Init+0x28>)
 80086d2:	f043 0310 	orr.w	r3, r3, #16
 80086d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80086d8:	2003      	movs	r0, #3
 80086da:	f000 fa43 	bl	8008b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80086de:	200f      	movs	r0, #15
 80086e0:	f000 f808 	bl	80086f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80086e4:	f7ff fdfa 	bl	80082dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	40022000 	.word	0x40022000

080086f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80086fc:	4b12      	ldr	r3, [pc, #72]	; (8008748 <HAL_InitTick+0x54>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	4b12      	ldr	r3, [pc, #72]	; (800874c <HAL_InitTick+0x58>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	4619      	mov	r1, r3
 8008706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800870a:	fbb3 f3f1 	udiv	r3, r3, r1
 800870e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008712:	4618      	mov	r0, r3
 8008714:	f000 fa5b 	bl	8008bce <HAL_SYSTICK_Config>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e00e      	b.n	8008740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b0f      	cmp	r3, #15
 8008726:	d80a      	bhi.n	800873e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008728:	2200      	movs	r2, #0
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008730:	f000 fa23 	bl	8008b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008734:	4a06      	ldr	r2, [pc, #24]	; (8008750 <HAL_InitTick+0x5c>)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	e000      	b.n	8008740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
}
 8008740:	4618      	mov	r0, r3
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	200000a0 	.word	0x200000a0
 800874c:	200000a8 	.word	0x200000a8
 8008750:	200000a4 	.word	0x200000a4

08008754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008758:	4b05      	ldr	r3, [pc, #20]	; (8008770 <HAL_IncTick+0x1c>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	461a      	mov	r2, r3
 800875e:	4b05      	ldr	r3, [pc, #20]	; (8008774 <HAL_IncTick+0x20>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4413      	add	r3, r2
 8008764:	4a03      	ldr	r2, [pc, #12]	; (8008774 <HAL_IncTick+0x20>)
 8008766:	6013      	str	r3, [r2, #0]
}
 8008768:	bf00      	nop
 800876a:	46bd      	mov	sp, r7
 800876c:	bc80      	pop	{r7}
 800876e:	4770      	bx	lr
 8008770:	200000a8 	.word	0x200000a8
 8008774:	20000490 	.word	0x20000490

08008778 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008778:	b480      	push	{r7}
 800877a:	af00      	add	r7, sp, #0
  return uwTick;
 800877c:	4b02      	ldr	r3, [pc, #8]	; (8008788 <HAL_GetTick+0x10>)
 800877e:	681b      	ldr	r3, [r3, #0]
}
 8008780:	4618      	mov	r0, r3
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr
 8008788:	20000490 	.word	0x20000490

0800878c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008794:	f7ff fff0 	bl	8008778 <HAL_GetTick>
 8008798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087a4:	d005      	beq.n	80087b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80087a6:	4b0a      	ldr	r3, [pc, #40]	; (80087d0 <HAL_Delay+0x44>)
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4413      	add	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80087b2:	bf00      	nop
 80087b4:	f7ff ffe0 	bl	8008778 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d8f7      	bhi.n	80087b4 <HAL_Delay+0x28>
  {
  }
}
 80087c4:	bf00      	nop
 80087c6:	bf00      	nop
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	200000a8 	.word	0x200000a8

080087d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e0ed      	b.n	80089c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d102      	bne.n	80087f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7ff fda4 	bl	8008340 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f042 0201 	orr.w	r2, r2, #1
 8008806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008808:	f7ff ffb6 	bl	8008778 <HAL_GetTick>
 800880c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800880e:	e012      	b.n	8008836 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008810:	f7ff ffb2 	bl	8008778 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	2b0a      	cmp	r3, #10
 800881c:	d90b      	bls.n	8008836 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2205      	movs	r2, #5
 800882e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e0c5      	b.n	80089c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0e5      	beq.n	8008810 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0202 	bic.w	r2, r2, #2
 8008852:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008854:	f7ff ff90 	bl	8008778 <HAL_GetTick>
 8008858:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800885a:	e012      	b.n	8008882 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800885c:	f7ff ff8c 	bl	8008778 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b0a      	cmp	r3, #10
 8008868:	d90b      	bls.n	8008882 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2205      	movs	r2, #5
 800887a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e09f      	b.n	80089c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	f003 0302 	and.w	r3, r3, #2
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e5      	bne.n	800885c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	7e1b      	ldrb	r3, [r3, #24]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d108      	bne.n	80088aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088a6:	601a      	str	r2, [r3, #0]
 80088a8:	e007      	b.n	80088ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	7e5b      	ldrb	r3, [r3, #25]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d108      	bne.n	80088d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	e007      	b.n	80088e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	7e9b      	ldrb	r3, [r3, #26]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d108      	bne.n	80088fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f042 0220 	orr.w	r2, r2, #32
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	e007      	b.n	800890e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f022 0220 	bic.w	r2, r2, #32
 800890c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	7edb      	ldrb	r3, [r3, #27]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d108      	bne.n	8008928 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 0210 	bic.w	r2, r2, #16
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	e007      	b.n	8008938 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f042 0210 	orr.w	r2, r2, #16
 8008936:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	7f1b      	ldrb	r3, [r3, #28]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d108      	bne.n	8008952 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f042 0208 	orr.w	r2, r2, #8
 800894e:	601a      	str	r2, [r3, #0]
 8008950:	e007      	b.n	8008962 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 0208 	bic.w	r2, r2, #8
 8008960:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	7f5b      	ldrb	r3, [r3, #29]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d108      	bne.n	800897c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f042 0204 	orr.w	r2, r2, #4
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	e007      	b.n	800898c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0204 	bic.w	r2, r2, #4
 800898a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689a      	ldr	r2, [r3, #8]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	431a      	orrs	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	431a      	orrs	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	ea42 0103 	orr.w	r1, r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	1e5a      	subs	r2, r3, #1
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
	...

080089cc <__NVIC_SetPriorityGrouping>:
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80089dc:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <__NVIC_SetPriorityGrouping+0x44>)
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80089e8:	4013      	ands	r3, r2
 80089ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80089f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80089f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80089fe:	4a04      	ldr	r2, [pc, #16]	; (8008a10 <__NVIC_SetPriorityGrouping+0x44>)
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	60d3      	str	r3, [r2, #12]
}
 8008a04:	bf00      	nop
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bc80      	pop	{r7}
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	e000ed00 	.word	0xe000ed00

08008a14 <__NVIC_GetPriorityGrouping>:
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a18:	4b04      	ldr	r3, [pc, #16]	; (8008a2c <__NVIC_GetPriorityGrouping+0x18>)
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	0a1b      	lsrs	r3, r3, #8
 8008a1e:	f003 0307 	and.w	r3, r3, #7
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bc80      	pop	{r7}
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	e000ed00 	.word	0xe000ed00

08008a30 <__NVIC_EnableIRQ>:
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4603      	mov	r3, r0
 8008a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	db0b      	blt.n	8008a5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a42:	79fb      	ldrb	r3, [r7, #7]
 8008a44:	f003 021f 	and.w	r2, r3, #31
 8008a48:	4906      	ldr	r1, [pc, #24]	; (8008a64 <__NVIC_EnableIRQ+0x34>)
 8008a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a4e:	095b      	lsrs	r3, r3, #5
 8008a50:	2001      	movs	r0, #1
 8008a52:	fa00 f202 	lsl.w	r2, r0, r2
 8008a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008a5a:	bf00      	nop
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bc80      	pop	{r7}
 8008a62:	4770      	bx	lr
 8008a64:	e000e100 	.word	0xe000e100

08008a68 <__NVIC_SetPriority>:
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	6039      	str	r1, [r7, #0]
 8008a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	db0a      	blt.n	8008a92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	490c      	ldr	r1, [pc, #48]	; (8008ab4 <__NVIC_SetPriority+0x4c>)
 8008a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a86:	0112      	lsls	r2, r2, #4
 8008a88:	b2d2      	uxtb	r2, r2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008a90:	e00a      	b.n	8008aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	4908      	ldr	r1, [pc, #32]	; (8008ab8 <__NVIC_SetPriority+0x50>)
 8008a98:	79fb      	ldrb	r3, [r7, #7]
 8008a9a:	f003 030f 	and.w	r3, r3, #15
 8008a9e:	3b04      	subs	r3, #4
 8008aa0:	0112      	lsls	r2, r2, #4
 8008aa2:	b2d2      	uxtb	r2, r2
 8008aa4:	440b      	add	r3, r1
 8008aa6:	761a      	strb	r2, [r3, #24]
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bc80      	pop	{r7}
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	e000e100 	.word	0xe000e100
 8008ab8:	e000ed00 	.word	0xe000ed00

08008abc <NVIC_EncodePriority>:
{
 8008abc:	b480      	push	{r7}
 8008abe:	b089      	sub	sp, #36	; 0x24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f003 0307 	and.w	r3, r3, #7
 8008ace:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	f1c3 0307 	rsb	r3, r3, #7
 8008ad6:	2b04      	cmp	r3, #4
 8008ad8:	bf28      	it	cs
 8008ada:	2304      	movcs	r3, #4
 8008adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	2b06      	cmp	r3, #6
 8008ae4:	d902      	bls.n	8008aec <NVIC_EncodePriority+0x30>
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	3b03      	subs	r3, #3
 8008aea:	e000      	b.n	8008aee <NVIC_EncodePriority+0x32>
 8008aec:	2300      	movs	r3, #0
 8008aee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	fa02 f303 	lsl.w	r3, r2, r3
 8008afa:	43da      	mvns	r2, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	401a      	ands	r2, r3
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b0e:	43d9      	mvns	r1, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b14:	4313      	orrs	r3, r2
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3724      	adds	r7, #36	; 0x24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bc80      	pop	{r7}
 8008b1e:	4770      	bx	lr

08008b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b30:	d301      	bcc.n	8008b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b32:	2301      	movs	r3, #1
 8008b34:	e00f      	b.n	8008b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b36:	4a0a      	ldr	r2, [pc, #40]	; (8008b60 <SysTick_Config+0x40>)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b3e:	210f      	movs	r1, #15
 8008b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b44:	f7ff ff90 	bl	8008a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b48:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <SysTick_Config+0x40>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b4e:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <SysTick_Config+0x40>)
 8008b50:	2207      	movs	r2, #7
 8008b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	e000e010 	.word	0xe000e010

08008b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7ff ff2d 	bl	80089cc <__NVIC_SetPriorityGrouping>
}
 8008b72:	bf00      	nop
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b086      	sub	sp, #24
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	4603      	mov	r3, r0
 8008b82:	60b9      	str	r1, [r7, #8]
 8008b84:	607a      	str	r2, [r7, #4]
 8008b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b8c:	f7ff ff42 	bl	8008a14 <__NVIC_GetPriorityGrouping>
 8008b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	68b9      	ldr	r1, [r7, #8]
 8008b96:	6978      	ldr	r0, [r7, #20]
 8008b98:	f7ff ff90 	bl	8008abc <NVIC_EncodePriority>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7ff ff5f 	bl	8008a68 <__NVIC_SetPriority>
}
 8008baa:	bf00      	nop
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	4603      	mov	r3, r0
 8008bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7ff ff35 	bl	8008a30 <__NVIC_EnableIRQ>
}
 8008bc6:	bf00      	nop
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b082      	sub	sp, #8
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7ff ffa2 	bl	8008b20 <SysTick_Config>
 8008bdc:	4603      	mov	r3, r0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b085      	sub	sp, #20
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d008      	beq.n	8008c10 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2204      	movs	r2, #4
 8008c02:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e020      	b.n	8008c52 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 020e 	bic.w	r2, r2, #14
 8008c1e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0201 	bic.w	r2, r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c38:	2101      	movs	r1, #1
 8008c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8008c3e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bc80      	pop	{r7}
 8008c5a:	4770      	bx	lr

08008c5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d005      	beq.n	8008c80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2204      	movs	r2, #4
 8008c78:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	73fb      	strb	r3, [r7, #15]
 8008c7e:	e0d6      	b.n	8008e2e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f022 020e 	bic.w	r2, r2, #14
 8008c8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0201 	bic.w	r2, r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	4b64      	ldr	r3, [pc, #400]	; (8008e38 <HAL_DMA_Abort_IT+0x1dc>)
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d958      	bls.n	8008d5e <HAL_DMA_Abort_IT+0x102>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a62      	ldr	r2, [pc, #392]	; (8008e3c <HAL_DMA_Abort_IT+0x1e0>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d04f      	beq.n	8008d56 <HAL_DMA_Abort_IT+0xfa>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a61      	ldr	r2, [pc, #388]	; (8008e40 <HAL_DMA_Abort_IT+0x1e4>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d048      	beq.n	8008d52 <HAL_DMA_Abort_IT+0xf6>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a5f      	ldr	r2, [pc, #380]	; (8008e44 <HAL_DMA_Abort_IT+0x1e8>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d040      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xf0>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a5e      	ldr	r2, [pc, #376]	; (8008e48 <HAL_DMA_Abort_IT+0x1ec>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d038      	beq.n	8008d46 <HAL_DMA_Abort_IT+0xea>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a5c      	ldr	r2, [pc, #368]	; (8008e4c <HAL_DMA_Abort_IT+0x1f0>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d030      	beq.n	8008d40 <HAL_DMA_Abort_IT+0xe4>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a5b      	ldr	r2, [pc, #364]	; (8008e50 <HAL_DMA_Abort_IT+0x1f4>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d028      	beq.n	8008d3a <HAL_DMA_Abort_IT+0xde>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a52      	ldr	r2, [pc, #328]	; (8008e38 <HAL_DMA_Abort_IT+0x1dc>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d020      	beq.n	8008d34 <HAL_DMA_Abort_IT+0xd8>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a57      	ldr	r2, [pc, #348]	; (8008e54 <HAL_DMA_Abort_IT+0x1f8>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d019      	beq.n	8008d30 <HAL_DMA_Abort_IT+0xd4>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a55      	ldr	r2, [pc, #340]	; (8008e58 <HAL_DMA_Abort_IT+0x1fc>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d012      	beq.n	8008d2c <HAL_DMA_Abort_IT+0xd0>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a54      	ldr	r2, [pc, #336]	; (8008e5c <HAL_DMA_Abort_IT+0x200>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d00a      	beq.n	8008d26 <HAL_DMA_Abort_IT+0xca>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a52      	ldr	r2, [pc, #328]	; (8008e60 <HAL_DMA_Abort_IT+0x204>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d102      	bne.n	8008d20 <HAL_DMA_Abort_IT+0xc4>
 8008d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d1e:	e01b      	b.n	8008d58 <HAL_DMA_Abort_IT+0xfc>
 8008d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d24:	e018      	b.n	8008d58 <HAL_DMA_Abort_IT+0xfc>
 8008d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d2a:	e015      	b.n	8008d58 <HAL_DMA_Abort_IT+0xfc>
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	e013      	b.n	8008d58 <HAL_DMA_Abort_IT+0xfc>
 8008d30:	2301      	movs	r3, #1
 8008d32:	e011      	b.n	8008d58 <HAL_DMA_Abort_IT+0xfc>
 8008d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d38:	e00e      	b.n	8008d58 <HAL_DMA_Abort_IT+0xfc>
 8008d3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d3e:	e00b      	b.n	8008d58 <HAL_DMA_Abort_IT+0xfc>
 8008d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d44:	e008      	b.n	8008d58 <HAL_DMA_Abort_IT+0xfc>
 8008d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d4a:	e005      	b.n	8008d58 <HAL_DMA_Abort_IT+0xfc>
 8008d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d50:	e002      	b.n	8008d58 <HAL_DMA_Abort_IT+0xfc>
 8008d52:	2310      	movs	r3, #16
 8008d54:	e000      	b.n	8008d58 <HAL_DMA_Abort_IT+0xfc>
 8008d56:	2301      	movs	r3, #1
 8008d58:	4a42      	ldr	r2, [pc, #264]	; (8008e64 <HAL_DMA_Abort_IT+0x208>)
 8008d5a:	6053      	str	r3, [r2, #4]
 8008d5c:	e057      	b.n	8008e0e <HAL_DMA_Abort_IT+0x1b2>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a36      	ldr	r2, [pc, #216]	; (8008e3c <HAL_DMA_Abort_IT+0x1e0>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d04f      	beq.n	8008e08 <HAL_DMA_Abort_IT+0x1ac>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a34      	ldr	r2, [pc, #208]	; (8008e40 <HAL_DMA_Abort_IT+0x1e4>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d048      	beq.n	8008e04 <HAL_DMA_Abort_IT+0x1a8>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a33      	ldr	r2, [pc, #204]	; (8008e44 <HAL_DMA_Abort_IT+0x1e8>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d040      	beq.n	8008dfe <HAL_DMA_Abort_IT+0x1a2>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a31      	ldr	r2, [pc, #196]	; (8008e48 <HAL_DMA_Abort_IT+0x1ec>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d038      	beq.n	8008df8 <HAL_DMA_Abort_IT+0x19c>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a30      	ldr	r2, [pc, #192]	; (8008e4c <HAL_DMA_Abort_IT+0x1f0>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d030      	beq.n	8008df2 <HAL_DMA_Abort_IT+0x196>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a2e      	ldr	r2, [pc, #184]	; (8008e50 <HAL_DMA_Abort_IT+0x1f4>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d028      	beq.n	8008dec <HAL_DMA_Abort_IT+0x190>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a26      	ldr	r2, [pc, #152]	; (8008e38 <HAL_DMA_Abort_IT+0x1dc>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d020      	beq.n	8008de6 <HAL_DMA_Abort_IT+0x18a>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a2a      	ldr	r2, [pc, #168]	; (8008e54 <HAL_DMA_Abort_IT+0x1f8>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d019      	beq.n	8008de2 <HAL_DMA_Abort_IT+0x186>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a29      	ldr	r2, [pc, #164]	; (8008e58 <HAL_DMA_Abort_IT+0x1fc>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d012      	beq.n	8008dde <HAL_DMA_Abort_IT+0x182>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a27      	ldr	r2, [pc, #156]	; (8008e5c <HAL_DMA_Abort_IT+0x200>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d00a      	beq.n	8008dd8 <HAL_DMA_Abort_IT+0x17c>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a26      	ldr	r2, [pc, #152]	; (8008e60 <HAL_DMA_Abort_IT+0x204>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d102      	bne.n	8008dd2 <HAL_DMA_Abort_IT+0x176>
 8008dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dd0:	e01b      	b.n	8008e0a <HAL_DMA_Abort_IT+0x1ae>
 8008dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dd6:	e018      	b.n	8008e0a <HAL_DMA_Abort_IT+0x1ae>
 8008dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ddc:	e015      	b.n	8008e0a <HAL_DMA_Abort_IT+0x1ae>
 8008dde:	2310      	movs	r3, #16
 8008de0:	e013      	b.n	8008e0a <HAL_DMA_Abort_IT+0x1ae>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e011      	b.n	8008e0a <HAL_DMA_Abort_IT+0x1ae>
 8008de6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008dea:	e00e      	b.n	8008e0a <HAL_DMA_Abort_IT+0x1ae>
 8008dec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008df0:	e00b      	b.n	8008e0a <HAL_DMA_Abort_IT+0x1ae>
 8008df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008df6:	e008      	b.n	8008e0a <HAL_DMA_Abort_IT+0x1ae>
 8008df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dfc:	e005      	b.n	8008e0a <HAL_DMA_Abort_IT+0x1ae>
 8008dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e02:	e002      	b.n	8008e0a <HAL_DMA_Abort_IT+0x1ae>
 8008e04:	2310      	movs	r3, #16
 8008e06:	e000      	b.n	8008e0a <HAL_DMA_Abort_IT+0x1ae>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	4a17      	ldr	r2, [pc, #92]	; (8008e68 <HAL_DMA_Abort_IT+0x20c>)
 8008e0c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	4798      	blx	r3
    } 
  }
  return status;
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	40020080 	.word	0x40020080
 8008e3c:	40020008 	.word	0x40020008
 8008e40:	4002001c 	.word	0x4002001c
 8008e44:	40020030 	.word	0x40020030
 8008e48:	40020044 	.word	0x40020044
 8008e4c:	40020058 	.word	0x40020058
 8008e50:	4002006c 	.word	0x4002006c
 8008e54:	40020408 	.word	0x40020408
 8008e58:	4002041c 	.word	0x4002041c
 8008e5c:	40020430 	.word	0x40020430
 8008e60:	40020444 	.word	0x40020444
 8008e64:	40020400 	.word	0x40020400
 8008e68:	40020000 	.word	0x40020000

08008e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b08b      	sub	sp, #44	; 0x2c
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e76:	2300      	movs	r3, #0
 8008e78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e7e:	e179      	b.n	8009174 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008e80:	2201      	movs	r2, #1
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	fa02 f303 	lsl.w	r3, r2, r3
 8008e88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	69fa      	ldr	r2, [r7, #28]
 8008e90:	4013      	ands	r3, r2
 8008e92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	f040 8168 	bne.w	800916e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	4a96      	ldr	r2, [pc, #600]	; (80090fc <HAL_GPIO_Init+0x290>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d05e      	beq.n	8008f66 <HAL_GPIO_Init+0xfa>
 8008ea8:	4a94      	ldr	r2, [pc, #592]	; (80090fc <HAL_GPIO_Init+0x290>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d875      	bhi.n	8008f9a <HAL_GPIO_Init+0x12e>
 8008eae:	4a94      	ldr	r2, [pc, #592]	; (8009100 <HAL_GPIO_Init+0x294>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d058      	beq.n	8008f66 <HAL_GPIO_Init+0xfa>
 8008eb4:	4a92      	ldr	r2, [pc, #584]	; (8009100 <HAL_GPIO_Init+0x294>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d86f      	bhi.n	8008f9a <HAL_GPIO_Init+0x12e>
 8008eba:	4a92      	ldr	r2, [pc, #584]	; (8009104 <HAL_GPIO_Init+0x298>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d052      	beq.n	8008f66 <HAL_GPIO_Init+0xfa>
 8008ec0:	4a90      	ldr	r2, [pc, #576]	; (8009104 <HAL_GPIO_Init+0x298>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d869      	bhi.n	8008f9a <HAL_GPIO_Init+0x12e>
 8008ec6:	4a90      	ldr	r2, [pc, #576]	; (8009108 <HAL_GPIO_Init+0x29c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d04c      	beq.n	8008f66 <HAL_GPIO_Init+0xfa>
 8008ecc:	4a8e      	ldr	r2, [pc, #568]	; (8009108 <HAL_GPIO_Init+0x29c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d863      	bhi.n	8008f9a <HAL_GPIO_Init+0x12e>
 8008ed2:	4a8e      	ldr	r2, [pc, #568]	; (800910c <HAL_GPIO_Init+0x2a0>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d046      	beq.n	8008f66 <HAL_GPIO_Init+0xfa>
 8008ed8:	4a8c      	ldr	r2, [pc, #560]	; (800910c <HAL_GPIO_Init+0x2a0>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d85d      	bhi.n	8008f9a <HAL_GPIO_Init+0x12e>
 8008ede:	2b12      	cmp	r3, #18
 8008ee0:	d82a      	bhi.n	8008f38 <HAL_GPIO_Init+0xcc>
 8008ee2:	2b12      	cmp	r3, #18
 8008ee4:	d859      	bhi.n	8008f9a <HAL_GPIO_Init+0x12e>
 8008ee6:	a201      	add	r2, pc, #4	; (adr r2, 8008eec <HAL_GPIO_Init+0x80>)
 8008ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eec:	08008f67 	.word	0x08008f67
 8008ef0:	08008f41 	.word	0x08008f41
 8008ef4:	08008f53 	.word	0x08008f53
 8008ef8:	08008f95 	.word	0x08008f95
 8008efc:	08008f9b 	.word	0x08008f9b
 8008f00:	08008f9b 	.word	0x08008f9b
 8008f04:	08008f9b 	.word	0x08008f9b
 8008f08:	08008f9b 	.word	0x08008f9b
 8008f0c:	08008f9b 	.word	0x08008f9b
 8008f10:	08008f9b 	.word	0x08008f9b
 8008f14:	08008f9b 	.word	0x08008f9b
 8008f18:	08008f9b 	.word	0x08008f9b
 8008f1c:	08008f9b 	.word	0x08008f9b
 8008f20:	08008f9b 	.word	0x08008f9b
 8008f24:	08008f9b 	.word	0x08008f9b
 8008f28:	08008f9b 	.word	0x08008f9b
 8008f2c:	08008f9b 	.word	0x08008f9b
 8008f30:	08008f49 	.word	0x08008f49
 8008f34:	08008f5d 	.word	0x08008f5d
 8008f38:	4a75      	ldr	r2, [pc, #468]	; (8009110 <HAL_GPIO_Init+0x2a4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d013      	beq.n	8008f66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008f3e:	e02c      	b.n	8008f9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	623b      	str	r3, [r7, #32]
          break;
 8008f46:	e029      	b.n	8008f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	623b      	str	r3, [r7, #32]
          break;
 8008f50:	e024      	b.n	8008f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	3308      	adds	r3, #8
 8008f58:	623b      	str	r3, [r7, #32]
          break;
 8008f5a:	e01f      	b.n	8008f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	330c      	adds	r3, #12
 8008f62:	623b      	str	r3, [r7, #32]
          break;
 8008f64:	e01a      	b.n	8008f9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d102      	bne.n	8008f74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008f6e:	2304      	movs	r3, #4
 8008f70:	623b      	str	r3, [r7, #32]
          break;
 8008f72:	e013      	b.n	8008f9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d105      	bne.n	8008f88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f7c:	2308      	movs	r3, #8
 8008f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	69fa      	ldr	r2, [r7, #28]
 8008f84:	611a      	str	r2, [r3, #16]
          break;
 8008f86:	e009      	b.n	8008f9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008f88:	2308      	movs	r3, #8
 8008f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	615a      	str	r2, [r3, #20]
          break;
 8008f92:	e003      	b.n	8008f9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008f94:	2300      	movs	r3, #0
 8008f96:	623b      	str	r3, [r7, #32]
          break;
 8008f98:	e000      	b.n	8008f9c <HAL_GPIO_Init+0x130>
          break;
 8008f9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	2bff      	cmp	r3, #255	; 0xff
 8008fa0:	d801      	bhi.n	8008fa6 <HAL_GPIO_Init+0x13a>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	e001      	b.n	8008faa <HAL_GPIO_Init+0x13e>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	2bff      	cmp	r3, #255	; 0xff
 8008fb0:	d802      	bhi.n	8008fb8 <HAL_GPIO_Init+0x14c>
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	e002      	b.n	8008fbe <HAL_GPIO_Init+0x152>
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	3b08      	subs	r3, #8
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	210f      	movs	r1, #15
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fcc:	43db      	mvns	r3, r3
 8008fce:	401a      	ands	r2, r3
 8008fd0:	6a39      	ldr	r1, [r7, #32]
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 80c1 	beq.w	800916e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008fec:	4b49      	ldr	r3, [pc, #292]	; (8009114 <HAL_GPIO_Init+0x2a8>)
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	4a48      	ldr	r2, [pc, #288]	; (8009114 <HAL_GPIO_Init+0x2a8>)
 8008ff2:	f043 0301 	orr.w	r3, r3, #1
 8008ff6:	6193      	str	r3, [r2, #24]
 8008ff8:	4b46      	ldr	r3, [pc, #280]	; (8009114 <HAL_GPIO_Init+0x2a8>)
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	60bb      	str	r3, [r7, #8]
 8009002:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009004:	4a44      	ldr	r2, [pc, #272]	; (8009118 <HAL_GPIO_Init+0x2ac>)
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	089b      	lsrs	r3, r3, #2
 800900a:	3302      	adds	r3, #2
 800900c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009010:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	f003 0303 	and.w	r3, r3, #3
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	220f      	movs	r2, #15
 800901c:	fa02 f303 	lsl.w	r3, r2, r3
 8009020:	43db      	mvns	r3, r3
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	4013      	ands	r3, r2
 8009026:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a3c      	ldr	r2, [pc, #240]	; (800911c <HAL_GPIO_Init+0x2b0>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d01f      	beq.n	8009070 <HAL_GPIO_Init+0x204>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a3b      	ldr	r2, [pc, #236]	; (8009120 <HAL_GPIO_Init+0x2b4>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d019      	beq.n	800906c <HAL_GPIO_Init+0x200>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a3a      	ldr	r2, [pc, #232]	; (8009124 <HAL_GPIO_Init+0x2b8>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d013      	beq.n	8009068 <HAL_GPIO_Init+0x1fc>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a39      	ldr	r2, [pc, #228]	; (8009128 <HAL_GPIO_Init+0x2bc>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d00d      	beq.n	8009064 <HAL_GPIO_Init+0x1f8>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a38      	ldr	r2, [pc, #224]	; (800912c <HAL_GPIO_Init+0x2c0>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d007      	beq.n	8009060 <HAL_GPIO_Init+0x1f4>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a37      	ldr	r2, [pc, #220]	; (8009130 <HAL_GPIO_Init+0x2c4>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d101      	bne.n	800905c <HAL_GPIO_Init+0x1f0>
 8009058:	2305      	movs	r3, #5
 800905a:	e00a      	b.n	8009072 <HAL_GPIO_Init+0x206>
 800905c:	2306      	movs	r3, #6
 800905e:	e008      	b.n	8009072 <HAL_GPIO_Init+0x206>
 8009060:	2304      	movs	r3, #4
 8009062:	e006      	b.n	8009072 <HAL_GPIO_Init+0x206>
 8009064:	2303      	movs	r3, #3
 8009066:	e004      	b.n	8009072 <HAL_GPIO_Init+0x206>
 8009068:	2302      	movs	r3, #2
 800906a:	e002      	b.n	8009072 <HAL_GPIO_Init+0x206>
 800906c:	2301      	movs	r3, #1
 800906e:	e000      	b.n	8009072 <HAL_GPIO_Init+0x206>
 8009070:	2300      	movs	r3, #0
 8009072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009074:	f002 0203 	and.w	r2, r2, #3
 8009078:	0092      	lsls	r2, r2, #2
 800907a:	4093      	lsls	r3, r2
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009082:	4925      	ldr	r1, [pc, #148]	; (8009118 <HAL_GPIO_Init+0x2ac>)
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	089b      	lsrs	r3, r3, #2
 8009088:	3302      	adds	r3, #2
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d006      	beq.n	80090aa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800909c:	4b25      	ldr	r3, [pc, #148]	; (8009134 <HAL_GPIO_Init+0x2c8>)
 800909e:	689a      	ldr	r2, [r3, #8]
 80090a0:	4924      	ldr	r1, [pc, #144]	; (8009134 <HAL_GPIO_Init+0x2c8>)
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	608b      	str	r3, [r1, #8]
 80090a8:	e006      	b.n	80090b8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80090aa:	4b22      	ldr	r3, [pc, #136]	; (8009134 <HAL_GPIO_Init+0x2c8>)
 80090ac:	689a      	ldr	r2, [r3, #8]
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	43db      	mvns	r3, r3
 80090b2:	4920      	ldr	r1, [pc, #128]	; (8009134 <HAL_GPIO_Init+0x2c8>)
 80090b4:	4013      	ands	r3, r2
 80090b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80090c4:	4b1b      	ldr	r3, [pc, #108]	; (8009134 <HAL_GPIO_Init+0x2c8>)
 80090c6:	68da      	ldr	r2, [r3, #12]
 80090c8:	491a      	ldr	r1, [pc, #104]	; (8009134 <HAL_GPIO_Init+0x2c8>)
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	60cb      	str	r3, [r1, #12]
 80090d0:	e006      	b.n	80090e0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80090d2:	4b18      	ldr	r3, [pc, #96]	; (8009134 <HAL_GPIO_Init+0x2c8>)
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	43db      	mvns	r3, r3
 80090da:	4916      	ldr	r1, [pc, #88]	; (8009134 <HAL_GPIO_Init+0x2c8>)
 80090dc:	4013      	ands	r3, r2
 80090de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d025      	beq.n	8009138 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80090ec:	4b11      	ldr	r3, [pc, #68]	; (8009134 <HAL_GPIO_Init+0x2c8>)
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	4910      	ldr	r1, [pc, #64]	; (8009134 <HAL_GPIO_Init+0x2c8>)
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	604b      	str	r3, [r1, #4]
 80090f8:	e025      	b.n	8009146 <HAL_GPIO_Init+0x2da>
 80090fa:	bf00      	nop
 80090fc:	10320000 	.word	0x10320000
 8009100:	10310000 	.word	0x10310000
 8009104:	10220000 	.word	0x10220000
 8009108:	10210000 	.word	0x10210000
 800910c:	10120000 	.word	0x10120000
 8009110:	10110000 	.word	0x10110000
 8009114:	40021000 	.word	0x40021000
 8009118:	40010000 	.word	0x40010000
 800911c:	40010800 	.word	0x40010800
 8009120:	40010c00 	.word	0x40010c00
 8009124:	40011000 	.word	0x40011000
 8009128:	40011400 	.word	0x40011400
 800912c:	40011800 	.word	0x40011800
 8009130:	40011c00 	.word	0x40011c00
 8009134:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009138:	4b15      	ldr	r3, [pc, #84]	; (8009190 <HAL_GPIO_Init+0x324>)
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	43db      	mvns	r3, r3
 8009140:	4913      	ldr	r1, [pc, #76]	; (8009190 <HAL_GPIO_Init+0x324>)
 8009142:	4013      	ands	r3, r2
 8009144:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d006      	beq.n	8009160 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009152:	4b0f      	ldr	r3, [pc, #60]	; (8009190 <HAL_GPIO_Init+0x324>)
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	490e      	ldr	r1, [pc, #56]	; (8009190 <HAL_GPIO_Init+0x324>)
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	4313      	orrs	r3, r2
 800915c:	600b      	str	r3, [r1, #0]
 800915e:	e006      	b.n	800916e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009160:	4b0b      	ldr	r3, [pc, #44]	; (8009190 <HAL_GPIO_Init+0x324>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	43db      	mvns	r3, r3
 8009168:	4909      	ldr	r1, [pc, #36]	; (8009190 <HAL_GPIO_Init+0x324>)
 800916a:	4013      	ands	r3, r2
 800916c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	3301      	adds	r3, #1
 8009172:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917a:	fa22 f303 	lsr.w	r3, r2, r3
 800917e:	2b00      	cmp	r3, #0
 8009180:	f47f ae7e 	bne.w	8008e80 <HAL_GPIO_Init+0x14>
  }
}
 8009184:	bf00      	nop
 8009186:	bf00      	nop
 8009188:	372c      	adds	r7, #44	; 0x2c
 800918a:	46bd      	mov	sp, r7
 800918c:	bc80      	pop	{r7}
 800918e:	4770      	bx	lr
 8009190:	40010400 	.word	0x40010400

08009194 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009194:	b480      	push	{r7}
 8009196:	b089      	sub	sp, #36	; 0x24
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800919e:	2300      	movs	r3, #0
 80091a0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80091a2:	e0a6      	b.n	80092f2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80091a4:	2201      	movs	r2, #1
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	4013      	ands	r3, r2
 80091b0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 8099 	beq.w	80092ec <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80091ba:	4a54      	ldr	r2, [pc, #336]	; (800930c <HAL_GPIO_DeInit+0x178>)
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	089b      	lsrs	r3, r3, #2
 80091c0:	3302      	adds	r3, #2
 80091c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091c6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	f003 0303 	and.w	r3, r3, #3
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	220f      	movs	r2, #15
 80091d2:	fa02 f303 	lsl.w	r3, r2, r3
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4013      	ands	r3, r2
 80091da:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a4c      	ldr	r2, [pc, #304]	; (8009310 <HAL_GPIO_DeInit+0x17c>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d01f      	beq.n	8009224 <HAL_GPIO_DeInit+0x90>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a4b      	ldr	r2, [pc, #300]	; (8009314 <HAL_GPIO_DeInit+0x180>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d019      	beq.n	8009220 <HAL_GPIO_DeInit+0x8c>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a4a      	ldr	r2, [pc, #296]	; (8009318 <HAL_GPIO_DeInit+0x184>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d013      	beq.n	800921c <HAL_GPIO_DeInit+0x88>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a49      	ldr	r2, [pc, #292]	; (800931c <HAL_GPIO_DeInit+0x188>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d00d      	beq.n	8009218 <HAL_GPIO_DeInit+0x84>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a48      	ldr	r2, [pc, #288]	; (8009320 <HAL_GPIO_DeInit+0x18c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d007      	beq.n	8009214 <HAL_GPIO_DeInit+0x80>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a47      	ldr	r2, [pc, #284]	; (8009324 <HAL_GPIO_DeInit+0x190>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d101      	bne.n	8009210 <HAL_GPIO_DeInit+0x7c>
 800920c:	2305      	movs	r3, #5
 800920e:	e00a      	b.n	8009226 <HAL_GPIO_DeInit+0x92>
 8009210:	2306      	movs	r3, #6
 8009212:	e008      	b.n	8009226 <HAL_GPIO_DeInit+0x92>
 8009214:	2304      	movs	r3, #4
 8009216:	e006      	b.n	8009226 <HAL_GPIO_DeInit+0x92>
 8009218:	2303      	movs	r3, #3
 800921a:	e004      	b.n	8009226 <HAL_GPIO_DeInit+0x92>
 800921c:	2302      	movs	r3, #2
 800921e:	e002      	b.n	8009226 <HAL_GPIO_DeInit+0x92>
 8009220:	2301      	movs	r3, #1
 8009222:	e000      	b.n	8009226 <HAL_GPIO_DeInit+0x92>
 8009224:	2300      	movs	r3, #0
 8009226:	69fa      	ldr	r2, [r7, #28]
 8009228:	f002 0203 	and.w	r2, r2, #3
 800922c:	0092      	lsls	r2, r2, #2
 800922e:	4093      	lsls	r3, r2
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	429a      	cmp	r2, r3
 8009234:	d132      	bne.n	800929c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009236:	4b3c      	ldr	r3, [pc, #240]	; (8009328 <HAL_GPIO_DeInit+0x194>)
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	43db      	mvns	r3, r3
 800923e:	493a      	ldr	r1, [pc, #232]	; (8009328 <HAL_GPIO_DeInit+0x194>)
 8009240:	4013      	ands	r3, r2
 8009242:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009244:	4b38      	ldr	r3, [pc, #224]	; (8009328 <HAL_GPIO_DeInit+0x194>)
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	43db      	mvns	r3, r3
 800924c:	4936      	ldr	r1, [pc, #216]	; (8009328 <HAL_GPIO_DeInit+0x194>)
 800924e:	4013      	ands	r3, r2
 8009250:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009252:	4b35      	ldr	r3, [pc, #212]	; (8009328 <HAL_GPIO_DeInit+0x194>)
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	43db      	mvns	r3, r3
 800925a:	4933      	ldr	r1, [pc, #204]	; (8009328 <HAL_GPIO_DeInit+0x194>)
 800925c:	4013      	ands	r3, r2
 800925e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009260:	4b31      	ldr	r3, [pc, #196]	; (8009328 <HAL_GPIO_DeInit+0x194>)
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	43db      	mvns	r3, r3
 8009268:	492f      	ldr	r1, [pc, #188]	; (8009328 <HAL_GPIO_DeInit+0x194>)
 800926a:	4013      	ands	r3, r2
 800926c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	f003 0303 	and.w	r3, r3, #3
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	220f      	movs	r2, #15
 8009278:	fa02 f303 	lsl.w	r3, r2, r3
 800927c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800927e:	4a23      	ldr	r2, [pc, #140]	; (800930c <HAL_GPIO_DeInit+0x178>)
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	089b      	lsrs	r3, r3, #2
 8009284:	3302      	adds	r3, #2
 8009286:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	43da      	mvns	r2, r3
 800928e:	481f      	ldr	r0, [pc, #124]	; (800930c <HAL_GPIO_DeInit+0x178>)
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	089b      	lsrs	r3, r3, #2
 8009294:	400a      	ands	r2, r1
 8009296:	3302      	adds	r3, #2
 8009298:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	2bff      	cmp	r3, #255	; 0xff
 80092a0:	d801      	bhi.n	80092a6 <HAL_GPIO_DeInit+0x112>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	e001      	b.n	80092aa <HAL_GPIO_DeInit+0x116>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	3304      	adds	r3, #4
 80092aa:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	2bff      	cmp	r3, #255	; 0xff
 80092b0:	d802      	bhi.n	80092b8 <HAL_GPIO_DeInit+0x124>
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	e002      	b.n	80092be <HAL_GPIO_DeInit+0x12a>
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	3b08      	subs	r3, #8
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	210f      	movs	r1, #15
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	fa01 f303 	lsl.w	r3, r1, r3
 80092cc:	43db      	mvns	r3, r3
 80092ce:	401a      	ands	r2, r3
 80092d0:	2104      	movs	r1, #4
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	fa01 f303 	lsl.w	r3, r1, r3
 80092d8:	431a      	orrs	r2, r3
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	68da      	ldr	r2, [r3, #12]
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	43db      	mvns	r3, r3
 80092e6:	401a      	ands	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	60da      	str	r2, [r3, #12]
    }

    position++;
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	3301      	adds	r3, #1
 80092f0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	fa22 f303 	lsr.w	r3, r2, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f47f af52 	bne.w	80091a4 <HAL_GPIO_DeInit+0x10>
  }
}
 8009300:	bf00      	nop
 8009302:	bf00      	nop
 8009304:	3724      	adds	r7, #36	; 0x24
 8009306:	46bd      	mov	sp, r7
 8009308:	bc80      	pop	{r7}
 800930a:	4770      	bx	lr
 800930c:	40010000 	.word	0x40010000
 8009310:	40010800 	.word	0x40010800
 8009314:	40010c00 	.word	0x40010c00
 8009318:	40011000 	.word	0x40011000
 800931c:	40011400 	.word	0x40011400
 8009320:	40011800 	.word	0x40011800
 8009324:	40011c00 	.word	0x40011c00
 8009328:	40010400 	.word	0x40010400

0800932c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689a      	ldr	r2, [r3, #8]
 800933c:	887b      	ldrh	r3, [r7, #2]
 800933e:	4013      	ands	r3, r2
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009344:	2301      	movs	r3, #1
 8009346:	73fb      	strb	r3, [r7, #15]
 8009348:	e001      	b.n	800934e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800934a:	2300      	movs	r3, #0
 800934c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800934e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	bc80      	pop	{r7}
 8009358:	4770      	bx	lr

0800935a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800935a:	b480      	push	{r7}
 800935c:	b083      	sub	sp, #12
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	807b      	strh	r3, [r7, #2]
 8009366:	4613      	mov	r3, r2
 8009368:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800936a:	787b      	ldrb	r3, [r7, #1]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d003      	beq.n	8009378 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009370:	887a      	ldrh	r2, [r7, #2]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009376:	e003      	b.n	8009380 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009378:	887b      	ldrh	r3, [r7, #2]
 800937a:	041a      	lsls	r2, r3, #16
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	611a      	str	r2, [r3, #16]
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	bc80      	pop	{r7}
 8009388:	4770      	bx	lr

0800938a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800938a:	b480      	push	{r7}
 800938c:	b085      	sub	sp, #20
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	460b      	mov	r3, r1
 8009394:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800939c:	887a      	ldrh	r2, [r7, #2]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4013      	ands	r3, r2
 80093a2:	041a      	lsls	r2, r3, #16
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	43d9      	mvns	r1, r3
 80093a8:	887b      	ldrh	r3, [r7, #2]
 80093aa:	400b      	ands	r3, r1
 80093ac:	431a      	orrs	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	611a      	str	r2, [r3, #16]
}
 80093b2:	bf00      	nop
 80093b4:	3714      	adds	r7, #20
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bc80      	pop	{r7}
 80093ba:	4770      	bx	lr

080093bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e12b      	b.n	8009626 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d106      	bne.n	80093e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7fe fff8 	bl	80083d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2224      	movs	r2, #36	; 0x24
 80093ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f022 0201 	bic.w	r2, r2, #1
 80093fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800940e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800941e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009420:	f001 fdb8 	bl	800af94 <HAL_RCC_GetPCLK1Freq>
 8009424:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	4a81      	ldr	r2, [pc, #516]	; (8009630 <HAL_I2C_Init+0x274>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d807      	bhi.n	8009440 <HAL_I2C_Init+0x84>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4a80      	ldr	r2, [pc, #512]	; (8009634 <HAL_I2C_Init+0x278>)
 8009434:	4293      	cmp	r3, r2
 8009436:	bf94      	ite	ls
 8009438:	2301      	movls	r3, #1
 800943a:	2300      	movhi	r3, #0
 800943c:	b2db      	uxtb	r3, r3
 800943e:	e006      	b.n	800944e <HAL_I2C_Init+0x92>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4a7d      	ldr	r2, [pc, #500]	; (8009638 <HAL_I2C_Init+0x27c>)
 8009444:	4293      	cmp	r3, r2
 8009446:	bf94      	ite	ls
 8009448:	2301      	movls	r3, #1
 800944a:	2300      	movhi	r3, #0
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e0e7      	b.n	8009626 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	4a78      	ldr	r2, [pc, #480]	; (800963c <HAL_I2C_Init+0x280>)
 800945a:	fba2 2303 	umull	r2, r3, r2, r3
 800945e:	0c9b      	lsrs	r3, r3, #18
 8009460:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	430a      	orrs	r2, r1
 8009474:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6a1b      	ldr	r3, [r3, #32]
 800947c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	4a6a      	ldr	r2, [pc, #424]	; (8009630 <HAL_I2C_Init+0x274>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d802      	bhi.n	8009490 <HAL_I2C_Init+0xd4>
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	3301      	adds	r3, #1
 800948e:	e009      	b.n	80094a4 <HAL_I2C_Init+0xe8>
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009496:	fb02 f303 	mul.w	r3, r2, r3
 800949a:	4a69      	ldr	r2, [pc, #420]	; (8009640 <HAL_I2C_Init+0x284>)
 800949c:	fba2 2303 	umull	r2, r3, r2, r3
 80094a0:	099b      	lsrs	r3, r3, #6
 80094a2:	3301      	adds	r3, #1
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	6812      	ldr	r2, [r2, #0]
 80094a8:	430b      	orrs	r3, r1
 80094aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80094b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	495c      	ldr	r1, [pc, #368]	; (8009630 <HAL_I2C_Init+0x274>)
 80094c0:	428b      	cmp	r3, r1
 80094c2:	d819      	bhi.n	80094f8 <HAL_I2C_Init+0x13c>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	1e59      	subs	r1, r3, #1
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80094d2:	1c59      	adds	r1, r3, #1
 80094d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80094d8:	400b      	ands	r3, r1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00a      	beq.n	80094f4 <HAL_I2C_Init+0x138>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	1e59      	subs	r1, r3, #1
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	005b      	lsls	r3, r3, #1
 80094e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80094ec:	3301      	adds	r3, #1
 80094ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094f2:	e051      	b.n	8009598 <HAL_I2C_Init+0x1dc>
 80094f4:	2304      	movs	r3, #4
 80094f6:	e04f      	b.n	8009598 <HAL_I2C_Init+0x1dc>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d111      	bne.n	8009524 <HAL_I2C_Init+0x168>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	1e58      	subs	r0, r3, #1
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6859      	ldr	r1, [r3, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	005b      	lsls	r3, r3, #1
 800950c:	440b      	add	r3, r1
 800950e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009512:	3301      	adds	r3, #1
 8009514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009518:	2b00      	cmp	r3, #0
 800951a:	bf0c      	ite	eq
 800951c:	2301      	moveq	r3, #1
 800951e:	2300      	movne	r3, #0
 8009520:	b2db      	uxtb	r3, r3
 8009522:	e012      	b.n	800954a <HAL_I2C_Init+0x18e>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	1e58      	subs	r0, r3, #1
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6859      	ldr	r1, [r3, #4]
 800952c:	460b      	mov	r3, r1
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	440b      	add	r3, r1
 8009532:	0099      	lsls	r1, r3, #2
 8009534:	440b      	add	r3, r1
 8009536:	fbb0 f3f3 	udiv	r3, r0, r3
 800953a:	3301      	adds	r3, #1
 800953c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009540:	2b00      	cmp	r3, #0
 8009542:	bf0c      	ite	eq
 8009544:	2301      	moveq	r3, #1
 8009546:	2300      	movne	r3, #0
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <HAL_I2C_Init+0x196>
 800954e:	2301      	movs	r3, #1
 8009550:	e022      	b.n	8009598 <HAL_I2C_Init+0x1dc>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10e      	bne.n	8009578 <HAL_I2C_Init+0x1bc>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	1e58      	subs	r0, r3, #1
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6859      	ldr	r1, [r3, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	005b      	lsls	r3, r3, #1
 8009566:	440b      	add	r3, r1
 8009568:	fbb0 f3f3 	udiv	r3, r0, r3
 800956c:	3301      	adds	r3, #1
 800956e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009576:	e00f      	b.n	8009598 <HAL_I2C_Init+0x1dc>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	1e58      	subs	r0, r3, #1
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6859      	ldr	r1, [r3, #4]
 8009580:	460b      	mov	r3, r1
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	440b      	add	r3, r1
 8009586:	0099      	lsls	r1, r3, #2
 8009588:	440b      	add	r3, r1
 800958a:	fbb0 f3f3 	udiv	r3, r0, r3
 800958e:	3301      	adds	r3, #1
 8009590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009598:	6879      	ldr	r1, [r7, #4]
 800959a:	6809      	ldr	r1, [r1, #0]
 800959c:	4313      	orrs	r3, r2
 800959e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	69da      	ldr	r2, [r3, #28]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	431a      	orrs	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	430a      	orrs	r2, r1
 80095ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80095c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	6911      	ldr	r1, [r2, #16]
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	68d2      	ldr	r2, [r2, #12]
 80095d2:	4311      	orrs	r1, r2
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	6812      	ldr	r2, [r2, #0]
 80095d8:	430b      	orrs	r3, r1
 80095da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	695a      	ldr	r2, [r3, #20]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	431a      	orrs	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f042 0201 	orr.w	r2, r2, #1
 8009606:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2220      	movs	r2, #32
 8009612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	000186a0 	.word	0x000186a0
 8009634:	001e847f 	.word	0x001e847f
 8009638:	003d08ff 	.word	0x003d08ff
 800963c:	431bde83 	.word	0x431bde83
 8009640:	10624dd3 	.word	0x10624dd3

08009644 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e021      	b.n	800969a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2224      	movs	r2, #36	; 0x24
 800965a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f022 0201 	bic.w	r2, r2, #1
 800966c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7fe fef0 	bl	8008454 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af02      	add	r7, sp, #8
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	607a      	str	r2, [r7, #4]
 80096ae:	461a      	mov	r2, r3
 80096b0:	460b      	mov	r3, r1
 80096b2:	817b      	strh	r3, [r7, #10]
 80096b4:	4613      	mov	r3, r2
 80096b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80096b8:	f7ff f85e 	bl	8008778 <HAL_GetTick>
 80096bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b20      	cmp	r3, #32
 80096c8:	f040 80e0 	bne.w	800988c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	2319      	movs	r3, #25
 80096d2:	2201      	movs	r2, #1
 80096d4:	4970      	ldr	r1, [pc, #448]	; (8009898 <HAL_I2C_Master_Transmit+0x1f4>)
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f000 fe5c 	bl	800a394 <I2C_WaitOnFlagUntilTimeout>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80096e2:	2302      	movs	r3, #2
 80096e4:	e0d3      	b.n	800988e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d101      	bne.n	80096f4 <HAL_I2C_Master_Transmit+0x50>
 80096f0:	2302      	movs	r3, #2
 80096f2:	e0cc      	b.n	800988e <HAL_I2C_Master_Transmit+0x1ea>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	2b01      	cmp	r3, #1
 8009708:	d007      	beq.n	800971a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f042 0201 	orr.w	r2, r2, #1
 8009718:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009728:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2221      	movs	r2, #33	; 0x21
 800972e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2210      	movs	r2, #16
 8009736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	893a      	ldrh	r2, [r7, #8]
 800974a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009750:	b29a      	uxth	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	4a50      	ldr	r2, [pc, #320]	; (800989c <HAL_I2C_Master_Transmit+0x1f8>)
 800975a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800975c:	8979      	ldrh	r1, [r7, #10]
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	6a3a      	ldr	r2, [r7, #32]
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 fc16 	bl	8009f94 <I2C_MasterRequestWrite>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e08d      	b.n	800988e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	613b      	str	r3, [r7, #16]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	613b      	str	r3, [r7, #16]
 8009786:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009788:	e066      	b.n	8009858 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	6a39      	ldr	r1, [r7, #32]
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 ff1a 	bl	800a5c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00d      	beq.n	80097b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d107      	bne.n	80097b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e06b      	b.n	800988e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	781a      	ldrb	r2, [r3, #0]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	1c5a      	adds	r2, r3, #1
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	3b01      	subs	r3, #1
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097de:	3b01      	subs	r3, #1
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	f003 0304 	and.w	r3, r3, #4
 80097f0:	2b04      	cmp	r3, #4
 80097f2:	d11b      	bne.n	800982c <HAL_I2C_Master_Transmit+0x188>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d017      	beq.n	800982c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009800:	781a      	ldrb	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009816:	b29b      	uxth	r3, r3
 8009818:	3b01      	subs	r3, #1
 800981a:	b29a      	uxth	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009824:	3b01      	subs	r3, #1
 8009826:	b29a      	uxth	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	6a39      	ldr	r1, [r7, #32]
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f000 ff11 	bl	800a658 <I2C_WaitOnBTFFlagUntilTimeout>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00d      	beq.n	8009858 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009840:	2b04      	cmp	r3, #4
 8009842:	d107      	bne.n	8009854 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009852:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e01a      	b.n	800988e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800985c:	2b00      	cmp	r3, #0
 800985e:	d194      	bne.n	800978a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800986e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2220      	movs	r2, #32
 8009874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	e000      	b.n	800988e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800988c:	2302      	movs	r3, #2
  }
}
 800988e:	4618      	mov	r0, r3
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	00100002 	.word	0x00100002
 800989c:	ffff0000 	.word	0xffff0000

080098a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af02      	add	r7, sp, #8
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	4608      	mov	r0, r1
 80098aa:	4611      	mov	r1, r2
 80098ac:	461a      	mov	r2, r3
 80098ae:	4603      	mov	r3, r0
 80098b0:	817b      	strh	r3, [r7, #10]
 80098b2:	460b      	mov	r3, r1
 80098b4:	813b      	strh	r3, [r7, #8]
 80098b6:	4613      	mov	r3, r2
 80098b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80098ba:	f7fe ff5d 	bl	8008778 <HAL_GetTick>
 80098be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b20      	cmp	r3, #32
 80098ca:	f040 80d9 	bne.w	8009a80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	2319      	movs	r3, #25
 80098d4:	2201      	movs	r2, #1
 80098d6:	496d      	ldr	r1, [pc, #436]	; (8009a8c <HAL_I2C_Mem_Write+0x1ec>)
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 fd5b 	bl	800a394 <I2C_WaitOnFlagUntilTimeout>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80098e4:	2302      	movs	r3, #2
 80098e6:	e0cc      	b.n	8009a82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d101      	bne.n	80098f6 <HAL_I2C_Mem_Write+0x56>
 80098f2:	2302      	movs	r3, #2
 80098f4:	e0c5      	b.n	8009a82 <HAL_I2C_Mem_Write+0x1e2>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 0301 	and.w	r3, r3, #1
 8009908:	2b01      	cmp	r3, #1
 800990a:	d007      	beq.n	800991c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f042 0201 	orr.w	r2, r2, #1
 800991a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800992a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2221      	movs	r2, #33	; 0x21
 8009930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2240      	movs	r2, #64	; 0x40
 8009938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6a3a      	ldr	r2, [r7, #32]
 8009946:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800994c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009952:	b29a      	uxth	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	4a4d      	ldr	r2, [pc, #308]	; (8009a90 <HAL_I2C_Mem_Write+0x1f0>)
 800995c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800995e:	88f8      	ldrh	r0, [r7, #6]
 8009960:	893a      	ldrh	r2, [r7, #8]
 8009962:	8979      	ldrh	r1, [r7, #10]
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	9301      	str	r3, [sp, #4]
 8009968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	4603      	mov	r3, r0
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 fb92 	bl	800a098 <I2C_RequestMemoryWrite>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d052      	beq.n	8009a20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e081      	b.n	8009a82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f000 fe20 	bl	800a5c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00d      	beq.n	80099aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009992:	2b04      	cmp	r3, #4
 8009994:	d107      	bne.n	80099a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e06b      	b.n	8009a82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ae:	781a      	ldrb	r2, [r3, #0]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099c4:	3b01      	subs	r3, #1
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	3b01      	subs	r3, #1
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	695b      	ldr	r3, [r3, #20]
 80099e0:	f003 0304 	and.w	r3, r3, #4
 80099e4:	2b04      	cmp	r3, #4
 80099e6:	d11b      	bne.n	8009a20 <HAL_I2C_Mem_Write+0x180>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d017      	beq.n	8009a20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f4:	781a      	ldrb	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1aa      	bne.n	800997e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 fe13 	bl	800a658 <I2C_WaitOnBTFFlagUntilTimeout>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00d      	beq.n	8009a54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3c:	2b04      	cmp	r3, #4
 8009a3e:	d107      	bne.n	8009a50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	e016      	b.n	8009a82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2220      	movs	r2, #32
 8009a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	e000      	b.n	8009a82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009a80:	2302      	movs	r3, #2
  }
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	00100002 	.word	0x00100002
 8009a90:	ffff0000 	.word	0xffff0000

08009a94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08c      	sub	sp, #48	; 0x30
 8009a98:	af02      	add	r7, sp, #8
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	817b      	strh	r3, [r7, #10]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	813b      	strh	r3, [r7, #8]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ab2:	f7fe fe61 	bl	8008778 <HAL_GetTick>
 8009ab6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b20      	cmp	r3, #32
 8009ac2:	f040 8244 	bne.w	8009f4e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	2319      	movs	r3, #25
 8009acc:	2201      	movs	r2, #1
 8009ace:	4982      	ldr	r1, [pc, #520]	; (8009cd8 <HAL_I2C_Mem_Read+0x244>)
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f000 fc5f 	bl	800a394 <I2C_WaitOnFlagUntilTimeout>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d001      	beq.n	8009ae0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009adc:	2302      	movs	r3, #2
 8009ade:	e237      	b.n	8009f50 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d101      	bne.n	8009aee <HAL_I2C_Mem_Read+0x5a>
 8009aea:	2302      	movs	r3, #2
 8009aec:	e230      	b.n	8009f50 <HAL_I2C_Mem_Read+0x4bc>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d007      	beq.n	8009b14 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f042 0201 	orr.w	r2, r2, #1
 8009b12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2222      	movs	r2, #34	; 0x22
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2240      	movs	r2, #64	; 0x40
 8009b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	4a62      	ldr	r2, [pc, #392]	; (8009cdc <HAL_I2C_Mem_Read+0x248>)
 8009b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b56:	88f8      	ldrh	r0, [r7, #6]
 8009b58:	893a      	ldrh	r2, [r7, #8]
 8009b5a:	8979      	ldrh	r1, [r7, #10]
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	9301      	str	r3, [sp, #4]
 8009b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	4603      	mov	r3, r0
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f000 fb2c 	bl	800a1c4 <I2C_RequestMemoryRead>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e1ec      	b.n	8009f50 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d113      	bne.n	8009ba6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b7e:	2300      	movs	r3, #0
 8009b80:	61fb      	str	r3, [r7, #28]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	61fb      	str	r3, [r7, #28]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	61fb      	str	r3, [r7, #28]
 8009b92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	e1c0      	b.n	8009f28 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d11e      	bne.n	8009bec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bbe:	b672      	cpsid	i
}
 8009bc0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	61bb      	str	r3, [r7, #24]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	61bb      	str	r3, [r7, #24]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	61bb      	str	r3, [r7, #24]
 8009bd6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009be6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009be8:	b662      	cpsie	i
}
 8009bea:	e035      	b.n	8009c58 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d11e      	bne.n	8009c32 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c04:	b672      	cpsid	i
}
 8009c06:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c08:	2300      	movs	r3, #0
 8009c0a:	617b      	str	r3, [r7, #20]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	617b      	str	r3, [r7, #20]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	617b      	str	r3, [r7, #20]
 8009c1c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c2e:	b662      	cpsie	i
}
 8009c30:	e012      	b.n	8009c58 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c40:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c42:	2300      	movs	r3, #0
 8009c44:	613b      	str	r3, [r7, #16]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	613b      	str	r3, [r7, #16]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	613b      	str	r3, [r7, #16]
 8009c56:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009c58:	e166      	b.n	8009f28 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c5e:	2b03      	cmp	r3, #3
 8009c60:	f200 811f 	bhi.w	8009ea2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d123      	bne.n	8009cb4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 fd39 	bl	800a6e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d001      	beq.n	8009c80 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e167      	b.n	8009f50 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	691a      	ldr	r2, [r3, #16]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	b2d2      	uxtb	r2, r2
 8009c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	3b01      	subs	r3, #1
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009cb2:	e139      	b.n	8009f28 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d152      	bne.n	8009d62 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	4906      	ldr	r1, [pc, #24]	; (8009ce0 <HAL_I2C_Mem_Read+0x24c>)
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f000 fb64 	bl	800a394 <I2C_WaitOnFlagUntilTimeout>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d008      	beq.n	8009ce4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e13c      	b.n	8009f50 <HAL_I2C_Mem_Read+0x4bc>
 8009cd6:	bf00      	nop
 8009cd8:	00100002 	.word	0x00100002
 8009cdc:	ffff0000 	.word	0xffff0000
 8009ce0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009ce4:	b672      	cpsid	i
}
 8009ce6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	691a      	ldr	r2, [r3, #16]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d02:	b2d2      	uxtb	r2, r2
 8009d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d14:	3b01      	subs	r3, #1
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d2a:	b662      	cpsie	i
}
 8009d2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	691a      	ldr	r2, [r3, #16]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d38:	b2d2      	uxtb	r2, r2
 8009d3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	1c5a      	adds	r2, r3, #1
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d60:	e0e2      	b.n	8009f28 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d68:	2200      	movs	r2, #0
 8009d6a:	497b      	ldr	r1, [pc, #492]	; (8009f58 <HAL_I2C_Mem_Read+0x4c4>)
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 fb11 	bl	800a394 <I2C_WaitOnFlagUntilTimeout>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e0e9      	b.n	8009f50 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d8c:	b672      	cpsid	i
}
 8009d8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	691a      	ldr	r2, [r3, #16]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	b2d2      	uxtb	r2, r2
 8009d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dac:	3b01      	subs	r3, #1
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009dc2:	4b66      	ldr	r3, [pc, #408]	; (8009f5c <HAL_I2C_Mem_Read+0x4c8>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	08db      	lsrs	r3, r3, #3
 8009dc8:	4a65      	ldr	r2, [pc, #404]	; (8009f60 <HAL_I2C_Mem_Read+0x4cc>)
 8009dca:	fba2 2303 	umull	r2, r3, r2, r3
 8009dce:	0a1a      	lsrs	r2, r3, #8
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	00da      	lsls	r2, r3, #3
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009de2:	6a3b      	ldr	r3, [r7, #32]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d118      	bne.n	8009e1a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2220      	movs	r2, #32
 8009df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e02:	f043 0220 	orr.w	r2, r3, #32
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009e0a:	b662      	cpsie	i
}
 8009e0c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e09a      	b.n	8009f50 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	f003 0304 	and.w	r3, r3, #4
 8009e24:	2b04      	cmp	r3, #4
 8009e26:	d1d9      	bne.n	8009ddc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	691a      	ldr	r2, [r3, #16]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	b2d2      	uxtb	r2, r2
 8009e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4a:	1c5a      	adds	r2, r3, #1
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e54:	3b01      	subs	r3, #1
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	3b01      	subs	r3, #1
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009e6a:	b662      	cpsie	i
}
 8009e6c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	691a      	ldr	r2, [r3, #16]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	b2d2      	uxtb	r2, r2
 8009e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	1c5a      	adds	r2, r3, #1
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ea0:	e042      	b.n	8009f28 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f000 fc1e 	bl	800a6e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e04c      	b.n	8009f50 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	691a      	ldr	r2, [r3, #16]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec0:	b2d2      	uxtb	r2, r2
 8009ec2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec8:	1c5a      	adds	r2, r3, #1
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	f003 0304 	and.w	r3, r3, #4
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	d118      	bne.n	8009f28 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	691a      	ldr	r2, [r3, #16]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	b2d2      	uxtb	r2, r2
 8009f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f08:	1c5a      	adds	r2, r3, #1
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f12:	3b01      	subs	r3, #1
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	3b01      	subs	r3, #1
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f47f ae94 	bne.w	8009c5a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2220      	movs	r2, #32
 8009f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	e000      	b.n	8009f50 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009f4e:	2302      	movs	r3, #2
  }
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3728      	adds	r7, #40	; 0x28
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	00010004 	.word	0x00010004
 8009f5c:	200000a0 	.word	0x200000a0
 8009f60:	14f8b589 	.word	0x14f8b589

08009f64 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f72:	b2db      	uxtb	r3, r3
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bc80      	pop	{r7}
 8009f7c:	4770      	bx	lr

08009f7e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bc80      	pop	{r7}
 8009f92:	4770      	bx	lr

08009f94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af02      	add	r7, sp, #8
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	607a      	str	r2, [r7, #4]
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	2b08      	cmp	r3, #8
 8009fae:	d006      	beq.n	8009fbe <I2C_MasterRequestWrite+0x2a>
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d003      	beq.n	8009fbe <I2C_MasterRequestWrite+0x2a>
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009fbc:	d108      	bne.n	8009fd0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	e00b      	b.n	8009fe8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd4:	2b12      	cmp	r3, #18
 8009fd6:	d107      	bne.n	8009fe8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fe6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 f9cd 	bl	800a394 <I2C_WaitOnFlagUntilTimeout>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00d      	beq.n	800a01c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a00a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a00e:	d103      	bne.n	800a018 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a016:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a018:	2303      	movs	r3, #3
 800a01a:	e035      	b.n	800a088 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a024:	d108      	bne.n	800a038 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a026:	897b      	ldrh	r3, [r7, #10]
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	461a      	mov	r2, r3
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a034:	611a      	str	r2, [r3, #16]
 800a036:	e01b      	b.n	800a070 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a038:	897b      	ldrh	r3, [r7, #10]
 800a03a:	11db      	asrs	r3, r3, #7
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	f003 0306 	and.w	r3, r3, #6
 800a042:	b2db      	uxtb	r3, r3
 800a044:	f063 030f 	orn	r3, r3, #15
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	490e      	ldr	r1, [pc, #56]	; (800a090 <I2C_MasterRequestWrite+0xfc>)
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f000 fa16 	bl	800a488 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e010      	b.n	800a088 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a066:	897b      	ldrh	r3, [r7, #10]
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	4907      	ldr	r1, [pc, #28]	; (800a094 <I2C_MasterRequestWrite+0x100>)
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 fa06 	bl	800a488 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e000      	b.n	800a088 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	00010008 	.word	0x00010008
 800a094:	00010002 	.word	0x00010002

0800a098 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b088      	sub	sp, #32
 800a09c:	af02      	add	r7, sp, #8
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	4608      	mov	r0, r1
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	817b      	strh	r3, [r7, #10]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	813b      	strh	r3, [r7, #8]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f000 f960 	bl	800a394 <I2C_WaitOnFlagUntilTimeout>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00d      	beq.n	800a0f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0e8:	d103      	bne.n	800a0f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	e05f      	b.n	800a1b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0f6:	897b      	ldrh	r3, [r7, #10]
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a104:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a108:	6a3a      	ldr	r2, [r7, #32]
 800a10a:	492d      	ldr	r1, [pc, #180]	; (800a1c0 <I2C_RequestMemoryWrite+0x128>)
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 f9bb 	bl	800a488 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e04c      	b.n	800a1b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a11c:	2300      	movs	r3, #0
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	695b      	ldr	r3, [r3, #20]
 800a126:	617b      	str	r3, [r7, #20]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	617b      	str	r3, [r7, #20]
 800a130:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a134:	6a39      	ldr	r1, [r7, #32]
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f000 fa46 	bl	800a5c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00d      	beq.n	800a15e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a146:	2b04      	cmp	r3, #4
 800a148:	d107      	bne.n	800a15a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a158:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e02b      	b.n	800a1b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a15e:	88fb      	ldrh	r3, [r7, #6]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d105      	bne.n	800a170 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a164:	893b      	ldrh	r3, [r7, #8]
 800a166:	b2da      	uxtb	r2, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	611a      	str	r2, [r3, #16]
 800a16e:	e021      	b.n	800a1b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a170:	893b      	ldrh	r3, [r7, #8]
 800a172:	0a1b      	lsrs	r3, r3, #8
 800a174:	b29b      	uxth	r3, r3
 800a176:	b2da      	uxtb	r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a180:	6a39      	ldr	r1, [r7, #32]
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f000 fa20 	bl	800a5c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00d      	beq.n	800a1aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a192:	2b04      	cmp	r3, #4
 800a194:	d107      	bne.n	800a1a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e005      	b.n	800a1b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1aa:	893b      	ldrh	r3, [r7, #8]
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	00010002 	.word	0x00010002

0800a1c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b088      	sub	sp, #32
 800a1c8:	af02      	add	r7, sp, #8
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	4608      	mov	r0, r1
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	817b      	strh	r3, [r7, #10]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	813b      	strh	r3, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a1ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	2200      	movs	r2, #0
 800a206:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f000 f8c2 	bl	800a394 <I2C_WaitOnFlagUntilTimeout>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00d      	beq.n	800a232 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a224:	d103      	bne.n	800a22e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a22c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e0aa      	b.n	800a388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a232:	897b      	ldrh	r3, [r7, #10]
 800a234:	b2db      	uxtb	r3, r3
 800a236:	461a      	mov	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a240:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	6a3a      	ldr	r2, [r7, #32]
 800a246:	4952      	ldr	r1, [pc, #328]	; (800a390 <I2C_RequestMemoryRead+0x1cc>)
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 f91d 	bl	800a488 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d001      	beq.n	800a258 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e097      	b.n	800a388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a258:	2300      	movs	r3, #0
 800a25a:	617b      	str	r3, [r7, #20]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	617b      	str	r3, [r7, #20]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	617b      	str	r3, [r7, #20]
 800a26c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a26e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a270:	6a39      	ldr	r1, [r7, #32]
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 f9a8 	bl	800a5c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00d      	beq.n	800a29a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a282:	2b04      	cmp	r3, #4
 800a284:	d107      	bne.n	800a296 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a294:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e076      	b.n	800a388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a29a:	88fb      	ldrh	r3, [r7, #6]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d105      	bne.n	800a2ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2a0:	893b      	ldrh	r3, [r7, #8]
 800a2a2:	b2da      	uxtb	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	611a      	str	r2, [r3, #16]
 800a2aa:	e021      	b.n	800a2f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a2ac:	893b      	ldrh	r3, [r7, #8]
 800a2ae:	0a1b      	lsrs	r3, r3, #8
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2bc:	6a39      	ldr	r1, [r7, #32]
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f000 f982 	bl	800a5c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00d      	beq.n	800a2e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ce:	2b04      	cmp	r3, #4
 800a2d0:	d107      	bne.n	800a2e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e050      	b.n	800a388 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2e6:	893b      	ldrh	r3, [r7, #8]
 800a2e8:	b2da      	uxtb	r2, r3
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f2:	6a39      	ldr	r1, [r7, #32]
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 f967 	bl	800a5c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00d      	beq.n	800a31c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a304:	2b04      	cmp	r3, #4
 800a306:	d107      	bne.n	800a318 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a316:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e035      	b.n	800a388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a32a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	6a3b      	ldr	r3, [r7, #32]
 800a332:	2200      	movs	r2, #0
 800a334:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f000 f82b 	bl	800a394 <I2C_WaitOnFlagUntilTimeout>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00d      	beq.n	800a360 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a34e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a352:	d103      	bne.n	800a35c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a35a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a35c:	2303      	movs	r3, #3
 800a35e:	e013      	b.n	800a388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a360:	897b      	ldrh	r3, [r7, #10]
 800a362:	b2db      	uxtb	r3, r3
 800a364:	f043 0301 	orr.w	r3, r3, #1
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	6a3a      	ldr	r2, [r7, #32]
 800a374:	4906      	ldr	r1, [pc, #24]	; (800a390 <I2C_RequestMemoryRead+0x1cc>)
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	f000 f886 	bl	800a488 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	e000      	b.n	800a388 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3718      	adds	r7, #24
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	00010002 	.word	0x00010002

0800a394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	603b      	str	r3, [r7, #0]
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3a4:	e048      	b.n	800a438 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3ac:	d044      	beq.n	800a438 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3ae:	f7fe f9e3 	bl	8008778 <HAL_GetTick>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	1ad3      	subs	r3, r2, r3
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d302      	bcc.n	800a3c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d139      	bne.n	800a438 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	0c1b      	lsrs	r3, r3, #16
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d10d      	bne.n	800a3ea <I2C_WaitOnFlagUntilTimeout+0x56>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	43da      	mvns	r2, r3
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	4013      	ands	r3, r2
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	bf0c      	ite	eq
 800a3e0:	2301      	moveq	r3, #1
 800a3e2:	2300      	movne	r3, #0
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	e00c      	b.n	800a404 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	43da      	mvns	r2, r3
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	bf0c      	ite	eq
 800a3fc:	2301      	moveq	r3, #1
 800a3fe:	2300      	movne	r3, #0
 800a400:	b2db      	uxtb	r3, r3
 800a402:	461a      	mov	r2, r3
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	429a      	cmp	r2, r3
 800a408:	d116      	bne.n	800a438 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2220      	movs	r2, #32
 800a414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a424:	f043 0220 	orr.w	r2, r3, #32
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	e023      	b.n	800a480 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	0c1b      	lsrs	r3, r3, #16
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d10d      	bne.n	800a45e <I2C_WaitOnFlagUntilTimeout+0xca>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	43da      	mvns	r2, r3
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	4013      	ands	r3, r2
 800a44e:	b29b      	uxth	r3, r3
 800a450:	2b00      	cmp	r3, #0
 800a452:	bf0c      	ite	eq
 800a454:	2301      	moveq	r3, #1
 800a456:	2300      	movne	r3, #0
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	461a      	mov	r2, r3
 800a45c:	e00c      	b.n	800a478 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	43da      	mvns	r2, r3
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	4013      	ands	r3, r2
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	bf0c      	ite	eq
 800a470:	2301      	moveq	r3, #1
 800a472:	2300      	movne	r3, #0
 800a474:	b2db      	uxtb	r3, r3
 800a476:	461a      	mov	r2, r3
 800a478:	79fb      	ldrb	r3, [r7, #7]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d093      	beq.n	800a3a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a496:	e071      	b.n	800a57c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	695b      	ldr	r3, [r3, #20]
 800a49e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a6:	d123      	bne.n	800a4f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4dc:	f043 0204 	orr.w	r2, r3, #4
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e067      	b.n	800a5c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4f6:	d041      	beq.n	800a57c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4f8:	f7fe f93e 	bl	8008778 <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	429a      	cmp	r2, r3
 800a506:	d302      	bcc.n	800a50e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d136      	bne.n	800a57c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	0c1b      	lsrs	r3, r3, #16
 800a512:	b2db      	uxtb	r3, r3
 800a514:	2b01      	cmp	r3, #1
 800a516:	d10c      	bne.n	800a532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	43da      	mvns	r2, r3
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	4013      	ands	r3, r2
 800a524:	b29b      	uxth	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	bf14      	ite	ne
 800a52a:	2301      	movne	r3, #1
 800a52c:	2300      	moveq	r3, #0
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	e00b      	b.n	800a54a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	43da      	mvns	r2, r3
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	4013      	ands	r3, r2
 800a53e:	b29b      	uxth	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	bf14      	ite	ne
 800a544:	2301      	movne	r3, #1
 800a546:	2300      	moveq	r3, #0
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d016      	beq.n	800a57c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2220      	movs	r2, #32
 800a558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a568:	f043 0220 	orr.w	r2, r3, #32
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	e021      	b.n	800a5c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	0c1b      	lsrs	r3, r3, #16
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b01      	cmp	r3, #1
 800a584:	d10c      	bne.n	800a5a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	695b      	ldr	r3, [r3, #20]
 800a58c:	43da      	mvns	r2, r3
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	4013      	ands	r3, r2
 800a592:	b29b      	uxth	r3, r3
 800a594:	2b00      	cmp	r3, #0
 800a596:	bf14      	ite	ne
 800a598:	2301      	movne	r3, #1
 800a59a:	2300      	moveq	r3, #0
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	e00b      	b.n	800a5b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	699b      	ldr	r3, [r3, #24]
 800a5a6:	43da      	mvns	r2, r3
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	bf14      	ite	ne
 800a5b2:	2301      	movne	r3, #1
 800a5b4:	2300      	moveq	r3, #0
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f47f af6d 	bne.w	800a498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5d4:	e034      	b.n	800a640 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 f8e3 	bl	800a7a2 <I2C_IsAcknowledgeFailed>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e034      	b.n	800a650 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5ec:	d028      	beq.n	800a640 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5ee:	f7fe f8c3 	bl	8008778 <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d302      	bcc.n	800a604 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d11d      	bne.n	800a640 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	695b      	ldr	r3, [r3, #20]
 800a60a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a60e:	2b80      	cmp	r3, #128	; 0x80
 800a610:	d016      	beq.n	800a640 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2220      	movs	r2, #32
 800a61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62c:	f043 0220 	orr.w	r2, r3, #32
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e007      	b.n	800a650 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	695b      	ldr	r3, [r3, #20]
 800a646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a64a:	2b80      	cmp	r3, #128	; 0x80
 800a64c:	d1c3      	bne.n	800a5d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a664:	e034      	b.n	800a6d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f000 f89b 	bl	800a7a2 <I2C_IsAcknowledgeFailed>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e034      	b.n	800a6e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a67c:	d028      	beq.n	800a6d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a67e:	f7fe f87b 	bl	8008778 <HAL_GetTick>
 800a682:	4602      	mov	r2, r0
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d302      	bcc.n	800a694 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d11d      	bne.n	800a6d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	695b      	ldr	r3, [r3, #20]
 800a69a:	f003 0304 	and.w	r3, r3, #4
 800a69e:	2b04      	cmp	r3, #4
 800a6a0:	d016      	beq.n	800a6d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6bc:	f043 0220 	orr.w	r2, r3, #32
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e007      	b.n	800a6e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	f003 0304 	and.w	r3, r3, #4
 800a6da:	2b04      	cmp	r3, #4
 800a6dc:	d1c3      	bne.n	800a666 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6f4:	e049      	b.n	800a78a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	695b      	ldr	r3, [r3, #20]
 800a6fc:	f003 0310 	and.w	r3, r3, #16
 800a700:	2b10      	cmp	r3, #16
 800a702:	d119      	bne.n	800a738 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f06f 0210 	mvn.w	r2, #16
 800a70c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2220      	movs	r2, #32
 800a718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e030      	b.n	800a79a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a738:	f7fe f81e 	bl	8008778 <HAL_GetTick>
 800a73c:	4602      	mov	r2, r0
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	429a      	cmp	r2, r3
 800a746:	d302      	bcc.n	800a74e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d11d      	bne.n	800a78a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	695b      	ldr	r3, [r3, #20]
 800a754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a758:	2b40      	cmp	r3, #64	; 0x40
 800a75a:	d016      	beq.n	800a78a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2220      	movs	r2, #32
 800a766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a776:	f043 0220 	orr.w	r2, r3, #32
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e007      	b.n	800a79a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a794:	2b40      	cmp	r3, #64	; 0x40
 800a796:	d1ae      	bne.n	800a6f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b083      	sub	sp, #12
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b8:	d11b      	bne.n	800a7f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a7c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2220      	movs	r2, #32
 800a7ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7de:	f043 0204 	orr.w	r2, r3, #4
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e000      	b.n	800a7f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bc80      	pop	{r7}
 800a7fc:	4770      	bx	lr
	...

0800a800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e272      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f000 8087 	beq.w	800a92e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a820:	4b92      	ldr	r3, [pc, #584]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f003 030c 	and.w	r3, r3, #12
 800a828:	2b04      	cmp	r3, #4
 800a82a:	d00c      	beq.n	800a846 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a82c:	4b8f      	ldr	r3, [pc, #572]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	f003 030c 	and.w	r3, r3, #12
 800a834:	2b08      	cmp	r3, #8
 800a836:	d112      	bne.n	800a85e <HAL_RCC_OscConfig+0x5e>
 800a838:	4b8c      	ldr	r3, [pc, #560]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a844:	d10b      	bne.n	800a85e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a846:	4b89      	ldr	r3, [pc, #548]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d06c      	beq.n	800a92c <HAL_RCC_OscConfig+0x12c>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d168      	bne.n	800a92c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e24c      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a866:	d106      	bne.n	800a876 <HAL_RCC_OscConfig+0x76>
 800a868:	4b80      	ldr	r3, [pc, #512]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a7f      	ldr	r2, [pc, #508]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a86e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a872:	6013      	str	r3, [r2, #0]
 800a874:	e02e      	b.n	800a8d4 <HAL_RCC_OscConfig+0xd4>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10c      	bne.n	800a898 <HAL_RCC_OscConfig+0x98>
 800a87e:	4b7b      	ldr	r3, [pc, #492]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a7a      	ldr	r2, [pc, #488]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a888:	6013      	str	r3, [r2, #0]
 800a88a:	4b78      	ldr	r3, [pc, #480]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a77      	ldr	r2, [pc, #476]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a894:	6013      	str	r3, [r2, #0]
 800a896:	e01d      	b.n	800a8d4 <HAL_RCC_OscConfig+0xd4>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8a0:	d10c      	bne.n	800a8bc <HAL_RCC_OscConfig+0xbc>
 800a8a2:	4b72      	ldr	r3, [pc, #456]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a71      	ldr	r2, [pc, #452]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a8a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8ac:	6013      	str	r3, [r2, #0]
 800a8ae:	4b6f      	ldr	r3, [pc, #444]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a6e      	ldr	r2, [pc, #440]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a8b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8b8:	6013      	str	r3, [r2, #0]
 800a8ba:	e00b      	b.n	800a8d4 <HAL_RCC_OscConfig+0xd4>
 800a8bc:	4b6b      	ldr	r3, [pc, #428]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a6a      	ldr	r2, [pc, #424]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a8c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	4b68      	ldr	r3, [pc, #416]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a67      	ldr	r2, [pc, #412]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a8ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d013      	beq.n	800a904 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8dc:	f7fd ff4c 	bl	8008778 <HAL_GetTick>
 800a8e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8e2:	e008      	b.n	800a8f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8e4:	f7fd ff48 	bl	8008778 <HAL_GetTick>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	2b64      	cmp	r3, #100	; 0x64
 800a8f0:	d901      	bls.n	800a8f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e200      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8f6:	4b5d      	ldr	r3, [pc, #372]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d0f0      	beq.n	800a8e4 <HAL_RCC_OscConfig+0xe4>
 800a902:	e014      	b.n	800a92e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a904:	f7fd ff38 	bl	8008778 <HAL_GetTick>
 800a908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a90a:	e008      	b.n	800a91e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a90c:	f7fd ff34 	bl	8008778 <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	2b64      	cmp	r3, #100	; 0x64
 800a918:	d901      	bls.n	800a91e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e1ec      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a91e:	4b53      	ldr	r3, [pc, #332]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1f0      	bne.n	800a90c <HAL_RCC_OscConfig+0x10c>
 800a92a:	e000      	b.n	800a92e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a92c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f003 0302 	and.w	r3, r3, #2
 800a936:	2b00      	cmp	r3, #0
 800a938:	d063      	beq.n	800aa02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a93a:	4b4c      	ldr	r3, [pc, #304]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	f003 030c 	and.w	r3, r3, #12
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00b      	beq.n	800a95e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a946:	4b49      	ldr	r3, [pc, #292]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	f003 030c 	and.w	r3, r3, #12
 800a94e:	2b08      	cmp	r3, #8
 800a950:	d11c      	bne.n	800a98c <HAL_RCC_OscConfig+0x18c>
 800a952:	4b46      	ldr	r3, [pc, #280]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d116      	bne.n	800a98c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a95e:	4b43      	ldr	r3, [pc, #268]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f003 0302 	and.w	r3, r3, #2
 800a966:	2b00      	cmp	r3, #0
 800a968:	d005      	beq.n	800a976 <HAL_RCC_OscConfig+0x176>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d001      	beq.n	800a976 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e1c0      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a976:	4b3d      	ldr	r3, [pc, #244]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	00db      	lsls	r3, r3, #3
 800a984:	4939      	ldr	r1, [pc, #228]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a986:	4313      	orrs	r3, r2
 800a988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a98a:	e03a      	b.n	800aa02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d020      	beq.n	800a9d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a994:	4b36      	ldr	r3, [pc, #216]	; (800aa70 <HAL_RCC_OscConfig+0x270>)
 800a996:	2201      	movs	r2, #1
 800a998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a99a:	f7fd feed 	bl	8008778 <HAL_GetTick>
 800a99e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9a0:	e008      	b.n	800a9b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9a2:	f7fd fee9 	bl	8008778 <HAL_GetTick>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	1ad3      	subs	r3, r2, r3
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d901      	bls.n	800a9b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e1a1      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9b4:	4b2d      	ldr	r3, [pc, #180]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0302 	and.w	r3, r3, #2
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d0f0      	beq.n	800a9a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9c0:	4b2a      	ldr	r3, [pc, #168]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	695b      	ldr	r3, [r3, #20]
 800a9cc:	00db      	lsls	r3, r3, #3
 800a9ce:	4927      	ldr	r1, [pc, #156]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	600b      	str	r3, [r1, #0]
 800a9d4:	e015      	b.n	800aa02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9d6:	4b26      	ldr	r3, [pc, #152]	; (800aa70 <HAL_RCC_OscConfig+0x270>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9dc:	f7fd fecc 	bl	8008778 <HAL_GetTick>
 800a9e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9e2:	e008      	b.n	800a9f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9e4:	f7fd fec8 	bl	8008778 <HAL_GetTick>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d901      	bls.n	800a9f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a9f2:	2303      	movs	r3, #3
 800a9f4:	e180      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9f6:	4b1d      	ldr	r3, [pc, #116]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 0302 	and.w	r3, r3, #2
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1f0      	bne.n	800a9e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 0308 	and.w	r3, r3, #8
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d03a      	beq.n	800aa84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d019      	beq.n	800aa4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa16:	4b17      	ldr	r3, [pc, #92]	; (800aa74 <HAL_RCC_OscConfig+0x274>)
 800aa18:	2201      	movs	r2, #1
 800aa1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa1c:	f7fd feac 	bl	8008778 <HAL_GetTick>
 800aa20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa22:	e008      	b.n	800aa36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa24:	f7fd fea8 	bl	8008778 <HAL_GetTick>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d901      	bls.n	800aa36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aa32:	2303      	movs	r3, #3
 800aa34:	e160      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa36:	4b0d      	ldr	r3, [pc, #52]	; (800aa6c <HAL_RCC_OscConfig+0x26c>)
 800aa38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3a:	f003 0302 	and.w	r3, r3, #2
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d0f0      	beq.n	800aa24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aa42:	2001      	movs	r0, #1
 800aa44:	f000 face 	bl	800afe4 <RCC_Delay>
 800aa48:	e01c      	b.n	800aa84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa4a:	4b0a      	ldr	r3, [pc, #40]	; (800aa74 <HAL_RCC_OscConfig+0x274>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa50:	f7fd fe92 	bl	8008778 <HAL_GetTick>
 800aa54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa56:	e00f      	b.n	800aa78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa58:	f7fd fe8e 	bl	8008778 <HAL_GetTick>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d908      	bls.n	800aa78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aa66:	2303      	movs	r3, #3
 800aa68:	e146      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
 800aa6a:	bf00      	nop
 800aa6c:	40021000 	.word	0x40021000
 800aa70:	42420000 	.word	0x42420000
 800aa74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa78:	4b92      	ldr	r3, [pc, #584]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800aa7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7c:	f003 0302 	and.w	r3, r3, #2
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1e9      	bne.n	800aa58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0304 	and.w	r3, r3, #4
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 80a6 	beq.w	800abde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa92:	2300      	movs	r3, #0
 800aa94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa96:	4b8b      	ldr	r3, [pc, #556]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800aa98:	69db      	ldr	r3, [r3, #28]
 800aa9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10d      	bne.n	800aabe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aaa2:	4b88      	ldr	r3, [pc, #544]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800aaa4:	69db      	ldr	r3, [r3, #28]
 800aaa6:	4a87      	ldr	r2, [pc, #540]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800aaa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaac:	61d3      	str	r3, [r2, #28]
 800aaae:	4b85      	ldr	r3, [pc, #532]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800aab0:	69db      	ldr	r3, [r3, #28]
 800aab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aab6:	60bb      	str	r3, [r7, #8]
 800aab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aaba:	2301      	movs	r3, #1
 800aabc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aabe:	4b82      	ldr	r3, [pc, #520]	; (800acc8 <HAL_RCC_OscConfig+0x4c8>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d118      	bne.n	800aafc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aaca:	4b7f      	ldr	r3, [pc, #508]	; (800acc8 <HAL_RCC_OscConfig+0x4c8>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a7e      	ldr	r2, [pc, #504]	; (800acc8 <HAL_RCC_OscConfig+0x4c8>)
 800aad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aad6:	f7fd fe4f 	bl	8008778 <HAL_GetTick>
 800aada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aadc:	e008      	b.n	800aaf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aade:	f7fd fe4b 	bl	8008778 <HAL_GetTick>
 800aae2:	4602      	mov	r2, r0
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	2b64      	cmp	r3, #100	; 0x64
 800aaea:	d901      	bls.n	800aaf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aaec:	2303      	movs	r3, #3
 800aaee:	e103      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaf0:	4b75      	ldr	r3, [pc, #468]	; (800acc8 <HAL_RCC_OscConfig+0x4c8>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d0f0      	beq.n	800aade <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d106      	bne.n	800ab12 <HAL_RCC_OscConfig+0x312>
 800ab04:	4b6f      	ldr	r3, [pc, #444]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab06:	6a1b      	ldr	r3, [r3, #32]
 800ab08:	4a6e      	ldr	r2, [pc, #440]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab0a:	f043 0301 	orr.w	r3, r3, #1
 800ab0e:	6213      	str	r3, [r2, #32]
 800ab10:	e02d      	b.n	800ab6e <HAL_RCC_OscConfig+0x36e>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d10c      	bne.n	800ab34 <HAL_RCC_OscConfig+0x334>
 800ab1a:	4b6a      	ldr	r3, [pc, #424]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	4a69      	ldr	r2, [pc, #420]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab20:	f023 0301 	bic.w	r3, r3, #1
 800ab24:	6213      	str	r3, [r2, #32]
 800ab26:	4b67      	ldr	r3, [pc, #412]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	4a66      	ldr	r2, [pc, #408]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab2c:	f023 0304 	bic.w	r3, r3, #4
 800ab30:	6213      	str	r3, [r2, #32]
 800ab32:	e01c      	b.n	800ab6e <HAL_RCC_OscConfig+0x36e>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	2b05      	cmp	r3, #5
 800ab3a:	d10c      	bne.n	800ab56 <HAL_RCC_OscConfig+0x356>
 800ab3c:	4b61      	ldr	r3, [pc, #388]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab3e:	6a1b      	ldr	r3, [r3, #32]
 800ab40:	4a60      	ldr	r2, [pc, #384]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab42:	f043 0304 	orr.w	r3, r3, #4
 800ab46:	6213      	str	r3, [r2, #32]
 800ab48:	4b5e      	ldr	r3, [pc, #376]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	4a5d      	ldr	r2, [pc, #372]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab4e:	f043 0301 	orr.w	r3, r3, #1
 800ab52:	6213      	str	r3, [r2, #32]
 800ab54:	e00b      	b.n	800ab6e <HAL_RCC_OscConfig+0x36e>
 800ab56:	4b5b      	ldr	r3, [pc, #364]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab58:	6a1b      	ldr	r3, [r3, #32]
 800ab5a:	4a5a      	ldr	r2, [pc, #360]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab5c:	f023 0301 	bic.w	r3, r3, #1
 800ab60:	6213      	str	r3, [r2, #32]
 800ab62:	4b58      	ldr	r3, [pc, #352]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	4a57      	ldr	r2, [pc, #348]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab68:	f023 0304 	bic.w	r3, r3, #4
 800ab6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d015      	beq.n	800aba2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab76:	f7fd fdff 	bl	8008778 <HAL_GetTick>
 800ab7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab7c:	e00a      	b.n	800ab94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab7e:	f7fd fdfb 	bl	8008778 <HAL_GetTick>
 800ab82:	4602      	mov	r2, r0
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d901      	bls.n	800ab94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ab90:	2303      	movs	r3, #3
 800ab92:	e0b1      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab94:	4b4b      	ldr	r3, [pc, #300]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ab96:	6a1b      	ldr	r3, [r3, #32]
 800ab98:	f003 0302 	and.w	r3, r3, #2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d0ee      	beq.n	800ab7e <HAL_RCC_OscConfig+0x37e>
 800aba0:	e014      	b.n	800abcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aba2:	f7fd fde9 	bl	8008778 <HAL_GetTick>
 800aba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aba8:	e00a      	b.n	800abc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abaa:	f7fd fde5 	bl	8008778 <HAL_GetTick>
 800abae:	4602      	mov	r2, r0
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800abb8:	4293      	cmp	r3, r2
 800abba:	d901      	bls.n	800abc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800abbc:	2303      	movs	r3, #3
 800abbe:	e09b      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abc0:	4b40      	ldr	r3, [pc, #256]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	f003 0302 	and.w	r3, r3, #2
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1ee      	bne.n	800abaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800abcc:	7dfb      	ldrb	r3, [r7, #23]
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d105      	bne.n	800abde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abd2:	4b3c      	ldr	r3, [pc, #240]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	4a3b      	ldr	r2, [pc, #236]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800abd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	69db      	ldr	r3, [r3, #28]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f000 8087 	beq.w	800acf6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800abe8:	4b36      	ldr	r3, [pc, #216]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	f003 030c 	and.w	r3, r3, #12
 800abf0:	2b08      	cmp	r3, #8
 800abf2:	d061      	beq.n	800acb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	d146      	bne.n	800ac8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abfc:	4b33      	ldr	r3, [pc, #204]	; (800accc <HAL_RCC_OscConfig+0x4cc>)
 800abfe:	2200      	movs	r2, #0
 800ac00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac02:	f7fd fdb9 	bl	8008778 <HAL_GetTick>
 800ac06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac08:	e008      	b.n	800ac1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac0a:	f7fd fdb5 	bl	8008778 <HAL_GetTick>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d901      	bls.n	800ac1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	e06d      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac1c:	4b29      	ldr	r3, [pc, #164]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1f0      	bne.n	800ac0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a1b      	ldr	r3, [r3, #32]
 800ac2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac30:	d108      	bne.n	800ac44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ac32:	4b24      	ldr	r3, [pc, #144]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	4921      	ldr	r1, [pc, #132]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ac40:	4313      	orrs	r3, r2
 800ac42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac44:	4b1f      	ldr	r3, [pc, #124]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a19      	ldr	r1, [r3, #32]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac54:	430b      	orrs	r3, r1
 800ac56:	491b      	ldr	r1, [pc, #108]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac5c:	4b1b      	ldr	r3, [pc, #108]	; (800accc <HAL_RCC_OscConfig+0x4cc>)
 800ac5e:	2201      	movs	r2, #1
 800ac60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac62:	f7fd fd89 	bl	8008778 <HAL_GetTick>
 800ac66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac68:	e008      	b.n	800ac7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac6a:	f7fd fd85 	bl	8008778 <HAL_GetTick>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d901      	bls.n	800ac7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	e03d      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac7c:	4b11      	ldr	r3, [pc, #68]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d0f0      	beq.n	800ac6a <HAL_RCC_OscConfig+0x46a>
 800ac88:	e035      	b.n	800acf6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac8a:	4b10      	ldr	r3, [pc, #64]	; (800accc <HAL_RCC_OscConfig+0x4cc>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac90:	f7fd fd72 	bl	8008778 <HAL_GetTick>
 800ac94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac96:	e008      	b.n	800acaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac98:	f7fd fd6e 	bl	8008778 <HAL_GetTick>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	d901      	bls.n	800acaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800aca6:	2303      	movs	r3, #3
 800aca8:	e026      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acaa:	4b06      	ldr	r3, [pc, #24]	; (800acc4 <HAL_RCC_OscConfig+0x4c4>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1f0      	bne.n	800ac98 <HAL_RCC_OscConfig+0x498>
 800acb6:	e01e      	b.n	800acf6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	69db      	ldr	r3, [r3, #28]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d107      	bne.n	800acd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	e019      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
 800acc4:	40021000 	.word	0x40021000
 800acc8:	40007000 	.word	0x40007000
 800accc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800acd0:	4b0b      	ldr	r3, [pc, #44]	; (800ad00 <HAL_RCC_OscConfig+0x500>)
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6a1b      	ldr	r3, [r3, #32]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d106      	bne.n	800acf2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acee:	429a      	cmp	r2, r3
 800acf0:	d001      	beq.n	800acf6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e000      	b.n	800acf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3718      	adds	r7, #24
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	40021000 	.word	0x40021000

0800ad04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e0d0      	b.n	800aeba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad18:	4b6a      	ldr	r3, [pc, #424]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0307 	and.w	r3, r3, #7
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d910      	bls.n	800ad48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad26:	4b67      	ldr	r3, [pc, #412]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f023 0207 	bic.w	r2, r3, #7
 800ad2e:	4965      	ldr	r1, [pc, #404]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad36:	4b63      	ldr	r3, [pc, #396]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 0307 	and.w	r3, r3, #7
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d001      	beq.n	800ad48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e0b8      	b.n	800aeba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 0302 	and.w	r3, r3, #2
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d020      	beq.n	800ad96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 0304 	and.w	r3, r3, #4
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d005      	beq.n	800ad6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad60:	4b59      	ldr	r3, [pc, #356]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	4a58      	ldr	r2, [pc, #352]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ad6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 0308 	and.w	r3, r3, #8
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d005      	beq.n	800ad84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad78:	4b53      	ldr	r3, [pc, #332]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	4a52      	ldr	r2, [pc, #328]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ad82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad84:	4b50      	ldr	r3, [pc, #320]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	494d      	ldr	r1, [pc, #308]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ad92:	4313      	orrs	r3, r2
 800ad94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0301 	and.w	r3, r3, #1
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d040      	beq.n	800ae24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d107      	bne.n	800adba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adaa:	4b47      	ldr	r3, [pc, #284]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d115      	bne.n	800ade2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e07f      	b.n	800aeba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d107      	bne.n	800add2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adc2:	4b41      	ldr	r3, [pc, #260]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d109      	bne.n	800ade2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e073      	b.n	800aeba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800add2:	4b3d      	ldr	r3, [pc, #244]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f003 0302 	and.w	r3, r3, #2
 800adda:	2b00      	cmp	r3, #0
 800addc:	d101      	bne.n	800ade2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e06b      	b.n	800aeba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ade2:	4b39      	ldr	r3, [pc, #228]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f023 0203 	bic.w	r2, r3, #3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	4936      	ldr	r1, [pc, #216]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800adf0:	4313      	orrs	r3, r2
 800adf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800adf4:	f7fd fcc0 	bl	8008778 <HAL_GetTick>
 800adf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adfa:	e00a      	b.n	800ae12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adfc:	f7fd fcbc 	bl	8008778 <HAL_GetTick>
 800ae00:	4602      	mov	r2, r0
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	1ad3      	subs	r3, r2, r3
 800ae06:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d901      	bls.n	800ae12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	e053      	b.n	800aeba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae12:	4b2d      	ldr	r3, [pc, #180]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	f003 020c 	and.w	r2, r3, #12
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d1eb      	bne.n	800adfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae24:	4b27      	ldr	r3, [pc, #156]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0307 	and.w	r3, r3, #7
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d210      	bcs.n	800ae54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae32:	4b24      	ldr	r3, [pc, #144]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f023 0207 	bic.w	r2, r3, #7
 800ae3a:	4922      	ldr	r1, [pc, #136]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae42:	4b20      	ldr	r3, [pc, #128]	; (800aec4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	683a      	ldr	r2, [r7, #0]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d001      	beq.n	800ae54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e032      	b.n	800aeba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 0304 	and.w	r3, r3, #4
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d008      	beq.n	800ae72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae60:	4b19      	ldr	r3, [pc, #100]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	4916      	ldr	r1, [pc, #88]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 0308 	and.w	r3, r3, #8
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d009      	beq.n	800ae92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ae7e:	4b12      	ldr	r3, [pc, #72]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	691b      	ldr	r3, [r3, #16]
 800ae8a:	00db      	lsls	r3, r3, #3
 800ae8c:	490e      	ldr	r1, [pc, #56]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ae92:	f000 f821 	bl	800aed8 <HAL_RCC_GetSysClockFreq>
 800ae96:	4602      	mov	r2, r0
 800ae98:	4b0b      	ldr	r3, [pc, #44]	; (800aec8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	091b      	lsrs	r3, r3, #4
 800ae9e:	f003 030f 	and.w	r3, r3, #15
 800aea2:	490a      	ldr	r1, [pc, #40]	; (800aecc <HAL_RCC_ClockConfig+0x1c8>)
 800aea4:	5ccb      	ldrb	r3, [r1, r3]
 800aea6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeaa:	4a09      	ldr	r2, [pc, #36]	; (800aed0 <HAL_RCC_ClockConfig+0x1cc>)
 800aeac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aeae:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <HAL_RCC_ClockConfig+0x1d0>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fd fc1e 	bl	80086f4 <HAL_InitTick>

  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	40022000 	.word	0x40022000
 800aec8:	40021000 	.word	0x40021000
 800aecc:	0800dd18 	.word	0x0800dd18
 800aed0:	200000a0 	.word	0x200000a0
 800aed4:	200000a4 	.word	0x200000a4

0800aed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b087      	sub	sp, #28
 800aedc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800aede:	2300      	movs	r3, #0
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	2300      	movs	r3, #0
 800aee4:	60bb      	str	r3, [r7, #8]
 800aee6:	2300      	movs	r3, #0
 800aee8:	617b      	str	r3, [r7, #20]
 800aeea:	2300      	movs	r3, #0
 800aeec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800aeee:	2300      	movs	r3, #0
 800aef0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aef2:	4b1e      	ldr	r3, [pc, #120]	; (800af6c <HAL_RCC_GetSysClockFreq+0x94>)
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f003 030c 	and.w	r3, r3, #12
 800aefe:	2b04      	cmp	r3, #4
 800af00:	d002      	beq.n	800af08 <HAL_RCC_GetSysClockFreq+0x30>
 800af02:	2b08      	cmp	r3, #8
 800af04:	d003      	beq.n	800af0e <HAL_RCC_GetSysClockFreq+0x36>
 800af06:	e027      	b.n	800af58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800af08:	4b19      	ldr	r3, [pc, #100]	; (800af70 <HAL_RCC_GetSysClockFreq+0x98>)
 800af0a:	613b      	str	r3, [r7, #16]
      break;
 800af0c:	e027      	b.n	800af5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	0c9b      	lsrs	r3, r3, #18
 800af12:	f003 030f 	and.w	r3, r3, #15
 800af16:	4a17      	ldr	r2, [pc, #92]	; (800af74 <HAL_RCC_GetSysClockFreq+0x9c>)
 800af18:	5cd3      	ldrb	r3, [r2, r3]
 800af1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af22:	2b00      	cmp	r3, #0
 800af24:	d010      	beq.n	800af48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af26:	4b11      	ldr	r3, [pc, #68]	; (800af6c <HAL_RCC_GetSysClockFreq+0x94>)
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	0c5b      	lsrs	r3, r3, #17
 800af2c:	f003 0301 	and.w	r3, r3, #1
 800af30:	4a11      	ldr	r2, [pc, #68]	; (800af78 <HAL_RCC_GetSysClockFreq+0xa0>)
 800af32:	5cd3      	ldrb	r3, [r2, r3]
 800af34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a0d      	ldr	r2, [pc, #52]	; (800af70 <HAL_RCC_GetSysClockFreq+0x98>)
 800af3a:	fb03 f202 	mul.w	r2, r3, r2
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	fbb2 f3f3 	udiv	r3, r2, r3
 800af44:	617b      	str	r3, [r7, #20]
 800af46:	e004      	b.n	800af52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a0c      	ldr	r2, [pc, #48]	; (800af7c <HAL_RCC_GetSysClockFreq+0xa4>)
 800af4c:	fb02 f303 	mul.w	r3, r2, r3
 800af50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	613b      	str	r3, [r7, #16]
      break;
 800af56:	e002      	b.n	800af5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800af58:	4b05      	ldr	r3, [pc, #20]	; (800af70 <HAL_RCC_GetSysClockFreq+0x98>)
 800af5a:	613b      	str	r3, [r7, #16]
      break;
 800af5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af5e:	693b      	ldr	r3, [r7, #16]
}
 800af60:	4618      	mov	r0, r3
 800af62:	371c      	adds	r7, #28
 800af64:	46bd      	mov	sp, r7
 800af66:	bc80      	pop	{r7}
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	40021000 	.word	0x40021000
 800af70:	007a1200 	.word	0x007a1200
 800af74:	0800dd30 	.word	0x0800dd30
 800af78:	0800dd40 	.word	0x0800dd40
 800af7c:	003d0900 	.word	0x003d0900

0800af80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af80:	b480      	push	{r7}
 800af82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af84:	4b02      	ldr	r3, [pc, #8]	; (800af90 <HAL_RCC_GetHCLKFreq+0x10>)
 800af86:	681b      	ldr	r3, [r3, #0]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bc80      	pop	{r7}
 800af8e:	4770      	bx	lr
 800af90:	200000a0 	.word	0x200000a0

0800af94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af98:	f7ff fff2 	bl	800af80 <HAL_RCC_GetHCLKFreq>
 800af9c:	4602      	mov	r2, r0
 800af9e:	4b05      	ldr	r3, [pc, #20]	; (800afb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	0a1b      	lsrs	r3, r3, #8
 800afa4:	f003 0307 	and.w	r3, r3, #7
 800afa8:	4903      	ldr	r1, [pc, #12]	; (800afb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800afaa:	5ccb      	ldrb	r3, [r1, r3]
 800afac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	40021000 	.word	0x40021000
 800afb8:	0800dd28 	.word	0x0800dd28

0800afbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800afc0:	f7ff ffde 	bl	800af80 <HAL_RCC_GetHCLKFreq>
 800afc4:	4602      	mov	r2, r0
 800afc6:	4b05      	ldr	r3, [pc, #20]	; (800afdc <HAL_RCC_GetPCLK2Freq+0x20>)
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	0adb      	lsrs	r3, r3, #11
 800afcc:	f003 0307 	and.w	r3, r3, #7
 800afd0:	4903      	ldr	r1, [pc, #12]	; (800afe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800afd2:	5ccb      	ldrb	r3, [r1, r3]
 800afd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afd8:	4618      	mov	r0, r3
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	40021000 	.word	0x40021000
 800afe0:	0800dd28 	.word	0x0800dd28

0800afe4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800afec:	4b0a      	ldr	r3, [pc, #40]	; (800b018 <RCC_Delay+0x34>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a0a      	ldr	r2, [pc, #40]	; (800b01c <RCC_Delay+0x38>)
 800aff2:	fba2 2303 	umull	r2, r3, r2, r3
 800aff6:	0a5b      	lsrs	r3, r3, #9
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	fb02 f303 	mul.w	r3, r2, r3
 800affe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b000:	bf00      	nop
  }
  while (Delay --);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	1e5a      	subs	r2, r3, #1
 800b006:	60fa      	str	r2, [r7, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1f9      	bne.n	800b000 <RCC_Delay+0x1c>
}
 800b00c:	bf00      	nop
 800b00e:	bf00      	nop
 800b010:	3714      	adds	r7, #20
 800b012:	46bd      	mov	sp, r7
 800b014:	bc80      	pop	{r7}
 800b016:	4770      	bx	lr
 800b018:	200000a0 	.word	0x200000a0
 800b01c:	10624dd3 	.word	0x10624dd3

0800b020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	e041      	b.n	800b0b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d106      	bne.n	800b04c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7fd fa26 	bl	8008498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2202      	movs	r2, #2
 800b050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3304      	adds	r3, #4
 800b05c:	4619      	mov	r1, r3
 800b05e:	4610      	mov	r0, r2
 800b060:	f000 fa82 	bl	800b568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d001      	beq.n	800b0d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e044      	b.n	800b162 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2202      	movs	r2, #2
 800b0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68da      	ldr	r2, [r3, #12]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f042 0201 	orr.w	r2, r2, #1
 800b0ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a1d      	ldr	r2, [pc, #116]	; (800b16c <HAL_TIM_Base_Start_IT+0xac>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d018      	beq.n	800b12c <HAL_TIM_Base_Start_IT+0x6c>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a1c      	ldr	r2, [pc, #112]	; (800b170 <HAL_TIM_Base_Start_IT+0xb0>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d013      	beq.n	800b12c <HAL_TIM_Base_Start_IT+0x6c>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b10c:	d00e      	beq.n	800b12c <HAL_TIM_Base_Start_IT+0x6c>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a18      	ldr	r2, [pc, #96]	; (800b174 <HAL_TIM_Base_Start_IT+0xb4>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d009      	beq.n	800b12c <HAL_TIM_Base_Start_IT+0x6c>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a16      	ldr	r2, [pc, #88]	; (800b178 <HAL_TIM_Base_Start_IT+0xb8>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d004      	beq.n	800b12c <HAL_TIM_Base_Start_IT+0x6c>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a15      	ldr	r2, [pc, #84]	; (800b17c <HAL_TIM_Base_Start_IT+0xbc>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d111      	bne.n	800b150 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	f003 0307 	and.w	r3, r3, #7
 800b136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2b06      	cmp	r3, #6
 800b13c:	d010      	beq.n	800b160 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f042 0201 	orr.w	r2, r2, #1
 800b14c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b14e:	e007      	b.n	800b160 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f042 0201 	orr.w	r2, r2, #1
 800b15e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	bc80      	pop	{r7}
 800b16a:	4770      	bx	lr
 800b16c:	40012c00 	.word	0x40012c00
 800b170:	40013400 	.word	0x40013400
 800b174:	40000400 	.word	0x40000400
 800b178:	40000800 	.word	0x40000800
 800b17c:	40000c00 	.word	0x40000c00

0800b180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	f003 0302 	and.w	r3, r3, #2
 800b192:	2b02      	cmp	r3, #2
 800b194:	d122      	bne.n	800b1dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	f003 0302 	and.w	r3, r3, #2
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d11b      	bne.n	800b1dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f06f 0202 	mvn.w	r2, #2
 800b1ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	699b      	ldr	r3, [r3, #24]
 800b1ba:	f003 0303 	and.w	r3, r3, #3
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 f9b4 	bl	800b530 <HAL_TIM_IC_CaptureCallback>
 800b1c8:	e005      	b.n	800b1d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f9a7 	bl	800b51e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f9b6 	bl	800b542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	f003 0304 	and.w	r3, r3, #4
 800b1e6:	2b04      	cmp	r3, #4
 800b1e8:	d122      	bne.n	800b230 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	f003 0304 	and.w	r3, r3, #4
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	d11b      	bne.n	800b230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f06f 0204 	mvn.w	r2, #4
 800b200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2202      	movs	r2, #2
 800b206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	699b      	ldr	r3, [r3, #24]
 800b20e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b212:	2b00      	cmp	r3, #0
 800b214:	d003      	beq.n	800b21e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f98a 	bl	800b530 <HAL_TIM_IC_CaptureCallback>
 800b21c:	e005      	b.n	800b22a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f97d 	bl	800b51e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f98c 	bl	800b542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	f003 0308 	and.w	r3, r3, #8
 800b23a:	2b08      	cmp	r3, #8
 800b23c:	d122      	bne.n	800b284 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	f003 0308 	and.w	r3, r3, #8
 800b248:	2b08      	cmp	r3, #8
 800b24a:	d11b      	bne.n	800b284 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f06f 0208 	mvn.w	r2, #8
 800b254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2204      	movs	r2, #4
 800b25a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	69db      	ldr	r3, [r3, #28]
 800b262:	f003 0303 	and.w	r3, r3, #3
 800b266:	2b00      	cmp	r3, #0
 800b268:	d003      	beq.n	800b272 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f960 	bl	800b530 <HAL_TIM_IC_CaptureCallback>
 800b270:	e005      	b.n	800b27e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f953 	bl	800b51e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 f962 	bl	800b542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	f003 0310 	and.w	r3, r3, #16
 800b28e:	2b10      	cmp	r3, #16
 800b290:	d122      	bne.n	800b2d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	f003 0310 	and.w	r3, r3, #16
 800b29c:	2b10      	cmp	r3, #16
 800b29e:	d11b      	bne.n	800b2d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f06f 0210 	mvn.w	r2, #16
 800b2a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2208      	movs	r2, #8
 800b2ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	69db      	ldr	r3, [r3, #28]
 800b2b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d003      	beq.n	800b2c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 f936 	bl	800b530 <HAL_TIM_IC_CaptureCallback>
 800b2c4:	e005      	b.n	800b2d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 f929 	bl	800b51e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f938 	bl	800b542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d10e      	bne.n	800b304 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d107      	bne.n	800b304 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f06f 0201 	mvn.w	r2, #1
 800b2fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7fc fd62 	bl	8007dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	691b      	ldr	r3, [r3, #16]
 800b30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b30e:	2b80      	cmp	r3, #128	; 0x80
 800b310:	d10e      	bne.n	800b330 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b31c:	2b80      	cmp	r3, #128	; 0x80
 800b31e:	d107      	bne.n	800b330 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 faa1 	bl	800b872 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b33a:	2b40      	cmp	r3, #64	; 0x40
 800b33c:	d10e      	bne.n	800b35c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b348:	2b40      	cmp	r3, #64	; 0x40
 800b34a:	d107      	bne.n	800b35c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f8fc 	bl	800b554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	f003 0320 	and.w	r3, r3, #32
 800b366:	2b20      	cmp	r3, #32
 800b368:	d10e      	bne.n	800b388 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	f003 0320 	and.w	r3, r3, #32
 800b374:	2b20      	cmp	r3, #32
 800b376:	d107      	bne.n	800b388 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f06f 0220 	mvn.w	r2, #32
 800b380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fa6c 	bl	800b860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d101      	bne.n	800b3ac <HAL_TIM_ConfigClockSource+0x1c>
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	e0b4      	b.n	800b516 <HAL_TIM_ConfigClockSource+0x186>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2202      	movs	r2, #2
 800b3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b3ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3e4:	d03e      	beq.n	800b464 <HAL_TIM_ConfigClockSource+0xd4>
 800b3e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3ea:	f200 8087 	bhi.w	800b4fc <HAL_TIM_ConfigClockSource+0x16c>
 800b3ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3f2:	f000 8086 	beq.w	800b502 <HAL_TIM_ConfigClockSource+0x172>
 800b3f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3fa:	d87f      	bhi.n	800b4fc <HAL_TIM_ConfigClockSource+0x16c>
 800b3fc:	2b70      	cmp	r3, #112	; 0x70
 800b3fe:	d01a      	beq.n	800b436 <HAL_TIM_ConfigClockSource+0xa6>
 800b400:	2b70      	cmp	r3, #112	; 0x70
 800b402:	d87b      	bhi.n	800b4fc <HAL_TIM_ConfigClockSource+0x16c>
 800b404:	2b60      	cmp	r3, #96	; 0x60
 800b406:	d050      	beq.n	800b4aa <HAL_TIM_ConfigClockSource+0x11a>
 800b408:	2b60      	cmp	r3, #96	; 0x60
 800b40a:	d877      	bhi.n	800b4fc <HAL_TIM_ConfigClockSource+0x16c>
 800b40c:	2b50      	cmp	r3, #80	; 0x50
 800b40e:	d03c      	beq.n	800b48a <HAL_TIM_ConfigClockSource+0xfa>
 800b410:	2b50      	cmp	r3, #80	; 0x50
 800b412:	d873      	bhi.n	800b4fc <HAL_TIM_ConfigClockSource+0x16c>
 800b414:	2b40      	cmp	r3, #64	; 0x40
 800b416:	d058      	beq.n	800b4ca <HAL_TIM_ConfigClockSource+0x13a>
 800b418:	2b40      	cmp	r3, #64	; 0x40
 800b41a:	d86f      	bhi.n	800b4fc <HAL_TIM_ConfigClockSource+0x16c>
 800b41c:	2b30      	cmp	r3, #48	; 0x30
 800b41e:	d064      	beq.n	800b4ea <HAL_TIM_ConfigClockSource+0x15a>
 800b420:	2b30      	cmp	r3, #48	; 0x30
 800b422:	d86b      	bhi.n	800b4fc <HAL_TIM_ConfigClockSource+0x16c>
 800b424:	2b20      	cmp	r3, #32
 800b426:	d060      	beq.n	800b4ea <HAL_TIM_ConfigClockSource+0x15a>
 800b428:	2b20      	cmp	r3, #32
 800b42a:	d867      	bhi.n	800b4fc <HAL_TIM_ConfigClockSource+0x16c>
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d05c      	beq.n	800b4ea <HAL_TIM_ConfigClockSource+0x15a>
 800b430:	2b10      	cmp	r3, #16
 800b432:	d05a      	beq.n	800b4ea <HAL_TIM_ConfigClockSource+0x15a>
 800b434:	e062      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b446:	f000 f980 	bl	800b74a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b458:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	68ba      	ldr	r2, [r7, #8]
 800b460:	609a      	str	r2, [r3, #8]
      break;
 800b462:	e04f      	b.n	800b504 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b474:	f000 f969 	bl	800b74a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689a      	ldr	r2, [r3, #8]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b486:	609a      	str	r2, [r3, #8]
      break;
 800b488:	e03c      	b.n	800b504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b496:	461a      	mov	r2, r3
 800b498:	f000 f8e0 	bl	800b65c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2150      	movs	r1, #80	; 0x50
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f000 f937 	bl	800b716 <TIM_ITRx_SetConfig>
      break;
 800b4a8:	e02c      	b.n	800b504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	f000 f8fe 	bl	800b6b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2160      	movs	r1, #96	; 0x60
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 f927 	bl	800b716 <TIM_ITRx_SetConfig>
      break;
 800b4c8:	e01c      	b.n	800b504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	f000 f8c0 	bl	800b65c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2140      	movs	r1, #64	; 0x40
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f000 f917 	bl	800b716 <TIM_ITRx_SetConfig>
      break;
 800b4e8:	e00c      	b.n	800b504 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	f000 f90e 	bl	800b716 <TIM_ITRx_SetConfig>
      break;
 800b4fa:	e003      	b.n	800b504 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b500:	e000      	b.n	800b504 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b514:	7bfb      	ldrb	r3, [r7, #15]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b51e:	b480      	push	{r7}
 800b520:	b083      	sub	sp, #12
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b526:	bf00      	nop
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bc80      	pop	{r7}
 800b52e:	4770      	bx	lr

0800b530 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b538:	bf00      	nop
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bc80      	pop	{r7}
 800b540:	4770      	bx	lr

0800b542 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b542:	b480      	push	{r7}
 800b544:	b083      	sub	sp, #12
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b54a:	bf00      	nop
 800b54c:	370c      	adds	r7, #12
 800b54e:	46bd      	mov	sp, r7
 800b550:	bc80      	pop	{r7}
 800b552:	4770      	bx	lr

0800b554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b55c:	bf00      	nop
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	bc80      	pop	{r7}
 800b564:	4770      	bx	lr
	...

0800b568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a33      	ldr	r2, [pc, #204]	; (800b648 <TIM_Base_SetConfig+0xe0>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d013      	beq.n	800b5a8 <TIM_Base_SetConfig+0x40>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a32      	ldr	r2, [pc, #200]	; (800b64c <TIM_Base_SetConfig+0xe4>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d00f      	beq.n	800b5a8 <TIM_Base_SetConfig+0x40>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b58e:	d00b      	beq.n	800b5a8 <TIM_Base_SetConfig+0x40>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a2f      	ldr	r2, [pc, #188]	; (800b650 <TIM_Base_SetConfig+0xe8>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d007      	beq.n	800b5a8 <TIM_Base_SetConfig+0x40>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4a2e      	ldr	r2, [pc, #184]	; (800b654 <TIM_Base_SetConfig+0xec>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d003      	beq.n	800b5a8 <TIM_Base_SetConfig+0x40>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a2d      	ldr	r2, [pc, #180]	; (800b658 <TIM_Base_SetConfig+0xf0>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d108      	bne.n	800b5ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a22      	ldr	r2, [pc, #136]	; (800b648 <TIM_Base_SetConfig+0xe0>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d013      	beq.n	800b5ea <TIM_Base_SetConfig+0x82>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a21      	ldr	r2, [pc, #132]	; (800b64c <TIM_Base_SetConfig+0xe4>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d00f      	beq.n	800b5ea <TIM_Base_SetConfig+0x82>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5d0:	d00b      	beq.n	800b5ea <TIM_Base_SetConfig+0x82>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a1e      	ldr	r2, [pc, #120]	; (800b650 <TIM_Base_SetConfig+0xe8>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d007      	beq.n	800b5ea <TIM_Base_SetConfig+0x82>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a1d      	ldr	r2, [pc, #116]	; (800b654 <TIM_Base_SetConfig+0xec>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d003      	beq.n	800b5ea <TIM_Base_SetConfig+0x82>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a1c      	ldr	r2, [pc, #112]	; (800b658 <TIM_Base_SetConfig+0xf0>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d108      	bne.n	800b5fc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	695b      	ldr	r3, [r3, #20]
 800b606:	4313      	orrs	r3, r2
 800b608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	689a      	ldr	r2, [r3, #8]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a09      	ldr	r2, [pc, #36]	; (800b648 <TIM_Base_SetConfig+0xe0>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d003      	beq.n	800b630 <TIM_Base_SetConfig+0xc8>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a08      	ldr	r2, [pc, #32]	; (800b64c <TIM_Base_SetConfig+0xe4>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d103      	bne.n	800b638 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	691a      	ldr	r2, [r3, #16]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	615a      	str	r2, [r3, #20]
}
 800b63e:	bf00      	nop
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	bc80      	pop	{r7}
 800b646:	4770      	bx	lr
 800b648:	40012c00 	.word	0x40012c00
 800b64c:	40013400 	.word	0x40013400
 800b650:	40000400 	.word	0x40000400
 800b654:	40000800 	.word	0x40000800
 800b658:	40000c00 	.word	0x40000c00

0800b65c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b087      	sub	sp, #28
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6a1b      	ldr	r3, [r3, #32]
 800b66c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6a1b      	ldr	r3, [r3, #32]
 800b672:	f023 0201 	bic.w	r2, r3, #1
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	699b      	ldr	r3, [r3, #24]
 800b67e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	011b      	lsls	r3, r3, #4
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	4313      	orrs	r3, r2
 800b690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	f023 030a 	bic.w	r3, r3, #10
 800b698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	693a      	ldr	r2, [r7, #16]
 800b6a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	697a      	ldr	r2, [r7, #20]
 800b6ac:	621a      	str	r2, [r3, #32]
}
 800b6ae:	bf00      	nop
 800b6b0:	371c      	adds	r7, #28
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bc80      	pop	{r7}
 800b6b6:	4770      	bx	lr

0800b6b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b087      	sub	sp, #28
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6a1b      	ldr	r3, [r3, #32]
 800b6c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6a1b      	ldr	r3, [r3, #32]
 800b6ce:	f023 0210 	bic.w	r2, r3, #16
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b6e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	031b      	lsls	r3, r3, #12
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b6f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	011b      	lsls	r3, r3, #4
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	621a      	str	r2, [r3, #32]
}
 800b70c:	bf00      	nop
 800b70e:	371c      	adds	r7, #28
 800b710:	46bd      	mov	sp, r7
 800b712:	bc80      	pop	{r7}
 800b714:	4770      	bx	lr

0800b716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b716:	b480      	push	{r7}
 800b718:	b085      	sub	sp, #20
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
 800b71e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b72c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	4313      	orrs	r3, r2
 800b734:	f043 0307 	orr.w	r3, r3, #7
 800b738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	609a      	str	r2, [r3, #8]
}
 800b740:	bf00      	nop
 800b742:	3714      	adds	r7, #20
 800b744:	46bd      	mov	sp, r7
 800b746:	bc80      	pop	{r7}
 800b748:	4770      	bx	lr

0800b74a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b087      	sub	sp, #28
 800b74e:	af00      	add	r7, sp, #0
 800b750:	60f8      	str	r0, [r7, #12]
 800b752:	60b9      	str	r1, [r7, #8]
 800b754:	607a      	str	r2, [r7, #4]
 800b756:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b764:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	021a      	lsls	r2, r3, #8
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	431a      	orrs	r2, r3
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	4313      	orrs	r3, r2
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	4313      	orrs	r3, r2
 800b776:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	609a      	str	r2, [r3, #8]
}
 800b77e:	bf00      	nop
 800b780:	371c      	adds	r7, #28
 800b782:	46bd      	mov	sp, r7
 800b784:	bc80      	pop	{r7}
 800b786:	4770      	bx	lr

0800b788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d101      	bne.n	800b7a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b79c:	2302      	movs	r3, #2
 800b79e:	e050      	b.n	800b842 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a1b      	ldr	r2, [pc, #108]	; (800b84c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d018      	beq.n	800b816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a19      	ldr	r2, [pc, #100]	; (800b850 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d013      	beq.n	800b816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7f6:	d00e      	beq.n	800b816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a15      	ldr	r2, [pc, #84]	; (800b854 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d009      	beq.n	800b816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a14      	ldr	r2, [pc, #80]	; (800b858 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d004      	beq.n	800b816 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a12      	ldr	r2, [pc, #72]	; (800b85c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d10c      	bne.n	800b830 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b81c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	4313      	orrs	r3, r2
 800b826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3714      	adds	r7, #20
 800b846:	46bd      	mov	sp, r7
 800b848:	bc80      	pop	{r7}
 800b84a:	4770      	bx	lr
 800b84c:	40012c00 	.word	0x40012c00
 800b850:	40013400 	.word	0x40013400
 800b854:	40000400 	.word	0x40000400
 800b858:	40000800 	.word	0x40000800
 800b85c:	40000c00 	.word	0x40000c00

0800b860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b868:	bf00      	nop
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bc80      	pop	{r7}
 800b870:	4770      	bx	lr

0800b872 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b872:	b480      	push	{r7}
 800b874:	b083      	sub	sp, #12
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b87a:	bf00      	nop
 800b87c:	370c      	adds	r7, #12
 800b87e:	46bd      	mov	sp, r7
 800b880:	bc80      	pop	{r7}
 800b882:	4770      	bx	lr

0800b884 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d101      	bne.n	800b896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	e042      	b.n	800b91c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d106      	bne.n	800b8b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7fc fe1a 	bl	80084e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2224      	movs	r2, #36	; 0x24
 800b8b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68da      	ldr	r2, [r3, #12]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fcb5 	bl	800c238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	691a      	ldr	r2, [r3, #16]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b8dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	695a      	ldr	r2, [r3, #20]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68da      	ldr	r2, [r3, #12]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b8fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2220      	movs	r2, #32
 800b908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2220      	movs	r2, #32
 800b910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	4613      	mov	r3, r2
 800b930:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	2b20      	cmp	r3, #32
 800b93c:	d121      	bne.n	800b982 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d002      	beq.n	800b94a <HAL_UART_Transmit_IT+0x26>
 800b944:	88fb      	ldrh	r3, [r7, #6]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e01a      	b.n	800b984 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	68ba      	ldr	r2, [r7, #8]
 800b952:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	88fa      	ldrh	r2, [r7, #6]
 800b958:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	88fa      	ldrh	r2, [r7, #6]
 800b95e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2221      	movs	r2, #33	; 0x21
 800b96a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68da      	ldr	r2, [r3, #12]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b97c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b97e:	2300      	movs	r3, #0
 800b980:	e000      	b.n	800b984 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b982:	2302      	movs	r3, #2
  }
}
 800b984:	4618      	mov	r0, r3
 800b986:	3714      	adds	r7, #20
 800b988:	46bd      	mov	sp, r7
 800b98a:	bc80      	pop	{r7}
 800b98c:	4770      	bx	lr
	...

0800b990 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b0ba      	sub	sp, #232	; 0xe8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b9c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9c6:	f003 030f 	and.w	r3, r3, #15
 800b9ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b9ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d10f      	bne.n	800b9f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b9d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9da:	f003 0320 	and.w	r3, r3, #32
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d009      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x66>
 800b9e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9e6:	f003 0320 	and.w	r3, r3, #32
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d003      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fb63 	bl	800c0ba <UART_Receive_IT>
      return;
 800b9f4:	e25b      	b.n	800beae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b9f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f000 80de 	beq.w	800bbbc <HAL_UART_IRQHandler+0x22c>
 800ba00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba04:	f003 0301 	and.w	r3, r3, #1
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d106      	bne.n	800ba1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f000 80d1 	beq.w	800bbbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00b      	beq.n	800ba3e <HAL_UART_IRQHandler+0xae>
 800ba26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d005      	beq.n	800ba3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba36:	f043 0201 	orr.w	r2, r3, #1
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba42:	f003 0304 	and.w	r3, r3, #4
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00b      	beq.n	800ba62 <HAL_UART_IRQHandler+0xd2>
 800ba4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba4e:	f003 0301 	and.w	r3, r3, #1
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d005      	beq.n	800ba62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba5a:	f043 0202 	orr.w	r2, r3, #2
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba66:	f003 0302 	and.w	r3, r3, #2
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00b      	beq.n	800ba86 <HAL_UART_IRQHandler+0xf6>
 800ba6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba72:	f003 0301 	and.w	r3, r3, #1
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d005      	beq.n	800ba86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba7e:	f043 0204 	orr.w	r2, r3, #4
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ba86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba8a:	f003 0308 	and.w	r3, r3, #8
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d011      	beq.n	800bab6 <HAL_UART_IRQHandler+0x126>
 800ba92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba96:	f003 0320 	and.w	r3, r3, #32
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d105      	bne.n	800baaa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ba9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800baa2:	f003 0301 	and.w	r3, r3, #1
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d005      	beq.n	800bab6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baae:	f043 0208 	orr.w	r2, r3, #8
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baba:	2b00      	cmp	r3, #0
 800babc:	f000 81f2 	beq.w	800bea4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bac4:	f003 0320 	and.w	r3, r3, #32
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d008      	beq.n	800bade <HAL_UART_IRQHandler+0x14e>
 800bacc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bad0:	f003 0320 	and.w	r3, r3, #32
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 faee 	bl	800c0ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	695b      	ldr	r3, [r3, #20]
 800bae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae8:	2b00      	cmp	r3, #0
 800baea:	bf14      	ite	ne
 800baec:	2301      	movne	r3, #1
 800baee:	2300      	moveq	r3, #0
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bafa:	f003 0308 	and.w	r3, r3, #8
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d103      	bne.n	800bb0a <HAL_UART_IRQHandler+0x17a>
 800bb02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d04f      	beq.n	800bbaa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f9f8 	bl	800bf00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	695b      	ldr	r3, [r3, #20]
 800bb16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d041      	beq.n	800bba2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	3314      	adds	r3, #20
 800bb24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb2c:	e853 3f00 	ldrex	r3, [r3]
 800bb30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	3314      	adds	r3, #20
 800bb46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb5a:	e841 2300 	strex	r3, r2, [r1]
 800bb5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1d9      	bne.n	800bb1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d013      	beq.n	800bb9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb76:	4a7e      	ldr	r2, [pc, #504]	; (800bd70 <HAL_UART_IRQHandler+0x3e0>)
 800bb78:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fd f86c 	bl	8008c5c <HAL_DMA_Abort_IT>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d016      	beq.n	800bbb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bb94:	4610      	mov	r0, r2
 800bb96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb98:	e00e      	b.n	800bbb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f99c 	bl	800bed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bba0:	e00a      	b.n	800bbb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f998 	bl	800bed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bba8:	e006      	b.n	800bbb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f994 	bl	800bed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bbb6:	e175      	b.n	800bea4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbb8:	bf00      	nop
    return;
 800bbba:	e173      	b.n	800bea4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	f040 814f 	bne.w	800be64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bbc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbca:	f003 0310 	and.w	r3, r3, #16
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 8148 	beq.w	800be64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bbd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbd8:	f003 0310 	and.w	r3, r3, #16
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 8141 	beq.w	800be64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	60bb      	str	r3, [r7, #8]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	60bb      	str	r3, [r7, #8]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	60bb      	str	r3, [r7, #8]
 800bbf6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	695b      	ldr	r3, [r3, #20]
 800bbfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f000 80b6 	beq.w	800bd74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f000 8145 	beq.w	800bea8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc26:	429a      	cmp	r2, r3
 800bc28:	f080 813e 	bcs.w	800bea8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	2b20      	cmp	r3, #32
 800bc3c:	f000 8088 	beq.w	800bd50 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	330c      	adds	r3, #12
 800bc46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc4e:	e853 3f00 	ldrex	r3, [r3]
 800bc52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	330c      	adds	r3, #12
 800bc68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bc6c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc74:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc7c:	e841 2300 	strex	r3, r2, [r1]
 800bc80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1d9      	bne.n	800bc40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	3314      	adds	r3, #20
 800bc92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc96:	e853 3f00 	ldrex	r3, [r3]
 800bc9a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc9e:	f023 0301 	bic.w	r3, r3, #1
 800bca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3314      	adds	r3, #20
 800bcac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bcb0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bcb4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bcb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcbc:	e841 2300 	strex	r3, r2, [r1]
 800bcc0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bcc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1e1      	bne.n	800bc8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3314      	adds	r3, #20
 800bcce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcd2:	e853 3f00 	ldrex	r3, [r3]
 800bcd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bcd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3314      	adds	r3, #20
 800bce8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bcec:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bcee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bcf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bcf4:	e841 2300 	strex	r3, r2, [r1]
 800bcf8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bcfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1e3      	bne.n	800bcc8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2220      	movs	r2, #32
 800bd04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	330c      	adds	r3, #12
 800bd14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd18:	e853 3f00 	ldrex	r3, [r3]
 800bd1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd20:	f023 0310 	bic.w	r3, r3, #16
 800bd24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	330c      	adds	r3, #12
 800bd2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd32:	65ba      	str	r2, [r7, #88]	; 0x58
 800bd34:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd3a:	e841 2300 	strex	r3, r2, [r1]
 800bd3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1e3      	bne.n	800bd0e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fc ff4b 	bl	8008be6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2202      	movs	r2, #2
 800bd54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	4619      	mov	r1, r3
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 f8bf 	bl	800beea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd6c:	e09c      	b.n	800bea8 <HAL_UART_IRQHandler+0x518>
 800bd6e:	bf00      	nop
 800bd70:	0800bfc5 	.word	0x0800bfc5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f000 808e 	beq.w	800beac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bd90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f000 8089 	beq.w	800beac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	330c      	adds	r3, #12
 800bda0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda4:	e853 3f00 	ldrex	r3, [r3]
 800bda8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bdaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	330c      	adds	r3, #12
 800bdba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bdbe:	647a      	str	r2, [r7, #68]	; 0x44
 800bdc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdc6:	e841 2300 	strex	r3, r2, [r1]
 800bdca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bdcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1e3      	bne.n	800bd9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3314      	adds	r3, #20
 800bdd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	e853 3f00 	ldrex	r3, [r3]
 800bde0:	623b      	str	r3, [r7, #32]
   return(result);
 800bde2:	6a3b      	ldr	r3, [r7, #32]
 800bde4:	f023 0301 	bic.w	r3, r3, #1
 800bde8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3314      	adds	r3, #20
 800bdf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bdf6:	633a      	str	r2, [r7, #48]	; 0x30
 800bdf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdfe:	e841 2300 	strex	r3, r2, [r1]
 800be02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1e3      	bne.n	800bdd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2220      	movs	r2, #32
 800be0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	330c      	adds	r3, #12
 800be1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	e853 3f00 	ldrex	r3, [r3]
 800be26:	60fb      	str	r3, [r7, #12]
   return(result);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f023 0310 	bic.w	r3, r3, #16
 800be2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	330c      	adds	r3, #12
 800be38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800be3c:	61fa      	str	r2, [r7, #28]
 800be3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be40:	69b9      	ldr	r1, [r7, #24]
 800be42:	69fa      	ldr	r2, [r7, #28]
 800be44:	e841 2300 	strex	r3, r2, [r1]
 800be48:	617b      	str	r3, [r7, #20]
   return(result);
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d1e3      	bne.n	800be18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2202      	movs	r2, #2
 800be54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be5a:	4619      	mov	r1, r3
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f844 	bl	800beea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be62:	e023      	b.n	800beac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d009      	beq.n	800be84 <HAL_UART_IRQHandler+0x4f4>
 800be70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d003      	beq.n	800be84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 f8b5 	bl	800bfec <UART_Transmit_IT>
    return;
 800be82:	e014      	b.n	800beae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00e      	beq.n	800beae <HAL_UART_IRQHandler+0x51e>
 800be90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d008      	beq.n	800beae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f8f4 	bl	800c08a <UART_EndTransmit_IT>
    return;
 800bea2:	e004      	b.n	800beae <HAL_UART_IRQHandler+0x51e>
    return;
 800bea4:	bf00      	nop
 800bea6:	e002      	b.n	800beae <HAL_UART_IRQHandler+0x51e>
      return;
 800bea8:	bf00      	nop
 800beaa:	e000      	b.n	800beae <HAL_UART_IRQHandler+0x51e>
      return;
 800beac:	bf00      	nop
  }
}
 800beae:	37e8      	adds	r7, #232	; 0xe8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bebc:	bf00      	nop
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bc80      	pop	{r7}
 800bec4:	4770      	bx	lr

0800bec6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bec6:	b480      	push	{r7}
 800bec8:	b083      	sub	sp, #12
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bece:	bf00      	nop
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bc80      	pop	{r7}
 800bed6:	4770      	bx	lr

0800bed8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bc80      	pop	{r7}
 800bee8:	4770      	bx	lr

0800beea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800beea:	b480      	push	{r7}
 800beec:	b083      	sub	sp, #12
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
 800bef2:	460b      	mov	r3, r1
 800bef4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bef6:	bf00      	nop
 800bef8:	370c      	adds	r7, #12
 800befa:	46bd      	mov	sp, r7
 800befc:	bc80      	pop	{r7}
 800befe:	4770      	bx	lr

0800bf00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b095      	sub	sp, #84	; 0x54
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	330c      	adds	r3, #12
 800bf0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf12:	e853 3f00 	ldrex	r3, [r3]
 800bf16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	330c      	adds	r3, #12
 800bf26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf28:	643a      	str	r2, [r7, #64]	; 0x40
 800bf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf30:	e841 2300 	strex	r3, r2, [r1]
 800bf34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1e5      	bne.n	800bf08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	3314      	adds	r3, #20
 800bf42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf44:	6a3b      	ldr	r3, [r7, #32]
 800bf46:	e853 3f00 	ldrex	r3, [r3]
 800bf4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	f023 0301 	bic.w	r3, r3, #1
 800bf52:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	3314      	adds	r3, #20
 800bf5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf64:	e841 2300 	strex	r3, r2, [r1]
 800bf68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1e5      	bne.n	800bf3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d119      	bne.n	800bfac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	330c      	adds	r3, #12
 800bf7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	e853 3f00 	ldrex	r3, [r3]
 800bf86:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	f023 0310 	bic.w	r3, r3, #16
 800bf8e:	647b      	str	r3, [r7, #68]	; 0x44
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	330c      	adds	r3, #12
 800bf96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf98:	61ba      	str	r2, [r7, #24]
 800bf9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9c:	6979      	ldr	r1, [r7, #20]
 800bf9e:	69ba      	ldr	r2, [r7, #24]
 800bfa0:	e841 2300 	strex	r3, r2, [r1]
 800bfa4:	613b      	str	r3, [r7, #16]
   return(result);
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d1e5      	bne.n	800bf78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2220      	movs	r2, #32
 800bfb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bfba:	bf00      	nop
 800bfbc:	3754      	adds	r7, #84	; 0x54
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bc80      	pop	{r7}
 800bfc2:	4770      	bx	lr

0800bfc4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f7ff ff7a 	bl	800bed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfe4:	bf00      	nop
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b21      	cmp	r3, #33	; 0x21
 800bffe:	d13e      	bne.n	800c07e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c008:	d114      	bne.n	800c034 <UART_Transmit_IT+0x48>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d110      	bne.n	800c034 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a1b      	ldr	r3, [r3, #32]
 800c016:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	881b      	ldrh	r3, [r3, #0]
 800c01c:	461a      	mov	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c026:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a1b      	ldr	r3, [r3, #32]
 800c02c:	1c9a      	adds	r2, r3, #2
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	621a      	str	r2, [r3, #32]
 800c032:	e008      	b.n	800c046 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6a1b      	ldr	r3, [r3, #32]
 800c038:	1c59      	adds	r1, r3, #1
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	6211      	str	r1, [r2, #32]
 800c03e:	781a      	ldrb	r2, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	3b01      	subs	r3, #1
 800c04e:	b29b      	uxth	r3, r3
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	4619      	mov	r1, r3
 800c054:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10f      	bne.n	800c07a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	68da      	ldr	r2, [r3, #12]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c068:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68da      	ldr	r2, [r3, #12]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c078:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	e000      	b.n	800c080 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c07e:	2302      	movs	r3, #2
  }
}
 800c080:	4618      	mov	r0, r3
 800c082:	3714      	adds	r7, #20
 800c084:	46bd      	mov	sp, r7
 800c086:	bc80      	pop	{r7}
 800c088:	4770      	bx	lr

0800c08a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b082      	sub	sp, #8
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68da      	ldr	r2, [r3, #12]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2220      	movs	r2, #32
 800c0a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7ff ff02 	bl	800beb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b08c      	sub	sp, #48	; 0x30
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	2b22      	cmp	r3, #34	; 0x22
 800c0cc:	f040 80ae 	bne.w	800c22c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0d8:	d117      	bne.n	800c10a <UART_Receive_IT+0x50>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d113      	bne.n	800c10a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c102:	1c9a      	adds	r2, r3, #2
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	629a      	str	r2, [r3, #40]	; 0x28
 800c108:	e026      	b.n	800c158 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c10e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c110:	2300      	movs	r3, #0
 800c112:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c11c:	d007      	beq.n	800c12e <UART_Receive_IT+0x74>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d10a      	bne.n	800c13c <UART_Receive_IT+0x82>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	b2da      	uxtb	r2, r3
 800c136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c138:	701a      	strb	r2, [r3, #0]
 800c13a:	e008      	b.n	800c14e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	b2db      	uxtb	r3, r3
 800c144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c148:	b2da      	uxtb	r2, r3
 800c14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c152:	1c5a      	adds	r2, r3, #1
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	3b01      	subs	r3, #1
 800c160:	b29b      	uxth	r3, r3
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	4619      	mov	r1, r3
 800c166:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d15d      	bne.n	800c228 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	68da      	ldr	r2, [r3, #12]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f022 0220 	bic.w	r2, r2, #32
 800c17a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	68da      	ldr	r2, [r3, #12]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c18a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	695a      	ldr	r2, [r3, #20]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f022 0201 	bic.w	r2, r2, #1
 800c19a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2220      	movs	r2, #32
 800c1a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d135      	bne.n	800c21e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	330c      	adds	r3, #12
 800c1be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	e853 3f00 	ldrex	r3, [r3]
 800c1c6:	613b      	str	r3, [r7, #16]
   return(result);
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	f023 0310 	bic.w	r3, r3, #16
 800c1ce:	627b      	str	r3, [r7, #36]	; 0x24
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	330c      	adds	r3, #12
 800c1d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1d8:	623a      	str	r2, [r7, #32]
 800c1da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1dc:	69f9      	ldr	r1, [r7, #28]
 800c1de:	6a3a      	ldr	r2, [r7, #32]
 800c1e0:	e841 2300 	strex	r3, r2, [r1]
 800c1e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d1e5      	bne.n	800c1b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f003 0310 	and.w	r3, r3, #16
 800c1f6:	2b10      	cmp	r3, #16
 800c1f8:	d10a      	bne.n	800c210 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	60fb      	str	r3, [r7, #12]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	60fb      	str	r3, [r7, #12]
 800c20e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff fe67 	bl	800beea <HAL_UARTEx_RxEventCallback>
 800c21c:	e002      	b.n	800c224 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7ff fe51 	bl	800bec6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c224:	2300      	movs	r3, #0
 800c226:	e002      	b.n	800c22e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c228:	2300      	movs	r3, #0
 800c22a:	e000      	b.n	800c22e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c22c:	2302      	movs	r3, #2
  }
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3730      	adds	r7, #48	; 0x30
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
	...

0800c238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	68da      	ldr	r2, [r3, #12]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	430a      	orrs	r2, r1
 800c254:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	689a      	ldr	r2, [r3, #8]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	691b      	ldr	r3, [r3, #16]
 800c25e:	431a      	orrs	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	695b      	ldr	r3, [r3, #20]
 800c264:	4313      	orrs	r3, r2
 800c266:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c272:	f023 030c 	bic.w	r3, r3, #12
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	6812      	ldr	r2, [r2, #0]
 800c27a:	68b9      	ldr	r1, [r7, #8]
 800c27c:	430b      	orrs	r3, r1
 800c27e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	695b      	ldr	r3, [r3, #20]
 800c286:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	699a      	ldr	r2, [r3, #24]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	430a      	orrs	r2, r1
 800c294:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a2c      	ldr	r2, [pc, #176]	; (800c34c <UART_SetConfig+0x114>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d103      	bne.n	800c2a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c2a0:	f7fe fe8c 	bl	800afbc <HAL_RCC_GetPCLK2Freq>
 800c2a4:	60f8      	str	r0, [r7, #12]
 800c2a6:	e002      	b.n	800c2ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c2a8:	f7fe fe74 	bl	800af94 <HAL_RCC_GetPCLK1Freq>
 800c2ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4413      	add	r3, r2
 800c2b6:	009a      	lsls	r2, r3, #2
 800c2b8:	441a      	add	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2c4:	4a22      	ldr	r2, [pc, #136]	; (800c350 <UART_SetConfig+0x118>)
 800c2c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ca:	095b      	lsrs	r3, r3, #5
 800c2cc:	0119      	lsls	r1, r3, #4
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	4413      	add	r3, r2
 800c2d6:	009a      	lsls	r2, r3, #2
 800c2d8:	441a      	add	r2, r3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2e4:	4b1a      	ldr	r3, [pc, #104]	; (800c350 <UART_SetConfig+0x118>)
 800c2e6:	fba3 0302 	umull	r0, r3, r3, r2
 800c2ea:	095b      	lsrs	r3, r3, #5
 800c2ec:	2064      	movs	r0, #100	; 0x64
 800c2ee:	fb00 f303 	mul.w	r3, r0, r3
 800c2f2:	1ad3      	subs	r3, r2, r3
 800c2f4:	011b      	lsls	r3, r3, #4
 800c2f6:	3332      	adds	r3, #50	; 0x32
 800c2f8:	4a15      	ldr	r2, [pc, #84]	; (800c350 <UART_SetConfig+0x118>)
 800c2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c2fe:	095b      	lsrs	r3, r3, #5
 800c300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c304:	4419      	add	r1, r3
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	4613      	mov	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4413      	add	r3, r2
 800c30e:	009a      	lsls	r2, r3, #2
 800c310:	441a      	add	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	fbb2 f2f3 	udiv	r2, r2, r3
 800c31c:	4b0c      	ldr	r3, [pc, #48]	; (800c350 <UART_SetConfig+0x118>)
 800c31e:	fba3 0302 	umull	r0, r3, r3, r2
 800c322:	095b      	lsrs	r3, r3, #5
 800c324:	2064      	movs	r0, #100	; 0x64
 800c326:	fb00 f303 	mul.w	r3, r0, r3
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	011b      	lsls	r3, r3, #4
 800c32e:	3332      	adds	r3, #50	; 0x32
 800c330:	4a07      	ldr	r2, [pc, #28]	; (800c350 <UART_SetConfig+0x118>)
 800c332:	fba2 2303 	umull	r2, r3, r2, r3
 800c336:	095b      	lsrs	r3, r3, #5
 800c338:	f003 020f 	and.w	r2, r3, #15
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	440a      	add	r2, r1
 800c342:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c344:	bf00      	nop
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	40013800 	.word	0x40013800
 800c350:	51eb851f 	.word	0x51eb851f

0800c354 <__itoa>:
 800c354:	1e93      	subs	r3, r2, #2
 800c356:	2b22      	cmp	r3, #34	; 0x22
 800c358:	b510      	push	{r4, lr}
 800c35a:	460c      	mov	r4, r1
 800c35c:	d904      	bls.n	800c368 <__itoa+0x14>
 800c35e:	2300      	movs	r3, #0
 800c360:	461c      	mov	r4, r3
 800c362:	700b      	strb	r3, [r1, #0]
 800c364:	4620      	mov	r0, r4
 800c366:	bd10      	pop	{r4, pc}
 800c368:	2a0a      	cmp	r2, #10
 800c36a:	d109      	bne.n	800c380 <__itoa+0x2c>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	da07      	bge.n	800c380 <__itoa+0x2c>
 800c370:	232d      	movs	r3, #45	; 0x2d
 800c372:	700b      	strb	r3, [r1, #0]
 800c374:	2101      	movs	r1, #1
 800c376:	4240      	negs	r0, r0
 800c378:	4421      	add	r1, r4
 800c37a:	f000 f8d9 	bl	800c530 <__utoa>
 800c37e:	e7f1      	b.n	800c364 <__itoa+0x10>
 800c380:	2100      	movs	r1, #0
 800c382:	e7f9      	b.n	800c378 <__itoa+0x24>

0800c384 <itoa>:
 800c384:	f7ff bfe6 	b.w	800c354 <__itoa>

0800c388 <malloc>:
 800c388:	4b02      	ldr	r3, [pc, #8]	; (800c394 <malloc+0xc>)
 800c38a:	4601      	mov	r1, r0
 800c38c:	6818      	ldr	r0, [r3, #0]
 800c38e:	f000 b823 	b.w	800c3d8 <_malloc_r>
 800c392:	bf00      	nop
 800c394:	200000f8 	.word	0x200000f8

0800c398 <sbrk_aligned>:
 800c398:	b570      	push	{r4, r5, r6, lr}
 800c39a:	4e0e      	ldr	r6, [pc, #56]	; (800c3d4 <sbrk_aligned+0x3c>)
 800c39c:	460c      	mov	r4, r1
 800c39e:	6831      	ldr	r1, [r6, #0]
 800c3a0:	4605      	mov	r5, r0
 800c3a2:	b911      	cbnz	r1, 800c3aa <sbrk_aligned+0x12>
 800c3a4:	f000 f91e 	bl	800c5e4 <_sbrk_r>
 800c3a8:	6030      	str	r0, [r6, #0]
 800c3aa:	4621      	mov	r1, r4
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	f000 f919 	bl	800c5e4 <_sbrk_r>
 800c3b2:	1c43      	adds	r3, r0, #1
 800c3b4:	d00a      	beq.n	800c3cc <sbrk_aligned+0x34>
 800c3b6:	1cc4      	adds	r4, r0, #3
 800c3b8:	f024 0403 	bic.w	r4, r4, #3
 800c3bc:	42a0      	cmp	r0, r4
 800c3be:	d007      	beq.n	800c3d0 <sbrk_aligned+0x38>
 800c3c0:	1a21      	subs	r1, r4, r0
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	f000 f90e 	bl	800c5e4 <_sbrk_r>
 800c3c8:	3001      	adds	r0, #1
 800c3ca:	d101      	bne.n	800c3d0 <sbrk_aligned+0x38>
 800c3cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	bd70      	pop	{r4, r5, r6, pc}
 800c3d4:	20000498 	.word	0x20000498

0800c3d8 <_malloc_r>:
 800c3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3dc:	1ccd      	adds	r5, r1, #3
 800c3de:	f025 0503 	bic.w	r5, r5, #3
 800c3e2:	3508      	adds	r5, #8
 800c3e4:	2d0c      	cmp	r5, #12
 800c3e6:	bf38      	it	cc
 800c3e8:	250c      	movcc	r5, #12
 800c3ea:	2d00      	cmp	r5, #0
 800c3ec:	4607      	mov	r7, r0
 800c3ee:	db01      	blt.n	800c3f4 <_malloc_r+0x1c>
 800c3f0:	42a9      	cmp	r1, r5
 800c3f2:	d905      	bls.n	800c400 <_malloc_r+0x28>
 800c3f4:	230c      	movs	r3, #12
 800c3f6:	2600      	movs	r6, #0
 800c3f8:	603b      	str	r3, [r7, #0]
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c400:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c4d4 <_malloc_r+0xfc>
 800c404:	f000 f868 	bl	800c4d8 <__malloc_lock>
 800c408:	f8d8 3000 	ldr.w	r3, [r8]
 800c40c:	461c      	mov	r4, r3
 800c40e:	bb5c      	cbnz	r4, 800c468 <_malloc_r+0x90>
 800c410:	4629      	mov	r1, r5
 800c412:	4638      	mov	r0, r7
 800c414:	f7ff ffc0 	bl	800c398 <sbrk_aligned>
 800c418:	1c43      	adds	r3, r0, #1
 800c41a:	4604      	mov	r4, r0
 800c41c:	d155      	bne.n	800c4ca <_malloc_r+0xf2>
 800c41e:	f8d8 4000 	ldr.w	r4, [r8]
 800c422:	4626      	mov	r6, r4
 800c424:	2e00      	cmp	r6, #0
 800c426:	d145      	bne.n	800c4b4 <_malloc_r+0xdc>
 800c428:	2c00      	cmp	r4, #0
 800c42a:	d048      	beq.n	800c4be <_malloc_r+0xe6>
 800c42c:	6823      	ldr	r3, [r4, #0]
 800c42e:	4631      	mov	r1, r6
 800c430:	4638      	mov	r0, r7
 800c432:	eb04 0903 	add.w	r9, r4, r3
 800c436:	f000 f8d5 	bl	800c5e4 <_sbrk_r>
 800c43a:	4581      	cmp	r9, r0
 800c43c:	d13f      	bne.n	800c4be <_malloc_r+0xe6>
 800c43e:	6821      	ldr	r1, [r4, #0]
 800c440:	4638      	mov	r0, r7
 800c442:	1a6d      	subs	r5, r5, r1
 800c444:	4629      	mov	r1, r5
 800c446:	f7ff ffa7 	bl	800c398 <sbrk_aligned>
 800c44a:	3001      	adds	r0, #1
 800c44c:	d037      	beq.n	800c4be <_malloc_r+0xe6>
 800c44e:	6823      	ldr	r3, [r4, #0]
 800c450:	442b      	add	r3, r5
 800c452:	6023      	str	r3, [r4, #0]
 800c454:	f8d8 3000 	ldr.w	r3, [r8]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d038      	beq.n	800c4ce <_malloc_r+0xf6>
 800c45c:	685a      	ldr	r2, [r3, #4]
 800c45e:	42a2      	cmp	r2, r4
 800c460:	d12b      	bne.n	800c4ba <_malloc_r+0xe2>
 800c462:	2200      	movs	r2, #0
 800c464:	605a      	str	r2, [r3, #4]
 800c466:	e00f      	b.n	800c488 <_malloc_r+0xb0>
 800c468:	6822      	ldr	r2, [r4, #0]
 800c46a:	1b52      	subs	r2, r2, r5
 800c46c:	d41f      	bmi.n	800c4ae <_malloc_r+0xd6>
 800c46e:	2a0b      	cmp	r2, #11
 800c470:	d917      	bls.n	800c4a2 <_malloc_r+0xca>
 800c472:	1961      	adds	r1, r4, r5
 800c474:	42a3      	cmp	r3, r4
 800c476:	6025      	str	r5, [r4, #0]
 800c478:	bf18      	it	ne
 800c47a:	6059      	strne	r1, [r3, #4]
 800c47c:	6863      	ldr	r3, [r4, #4]
 800c47e:	bf08      	it	eq
 800c480:	f8c8 1000 	streq.w	r1, [r8]
 800c484:	5162      	str	r2, [r4, r5]
 800c486:	604b      	str	r3, [r1, #4]
 800c488:	4638      	mov	r0, r7
 800c48a:	f104 060b 	add.w	r6, r4, #11
 800c48e:	f000 f829 	bl	800c4e4 <__malloc_unlock>
 800c492:	f026 0607 	bic.w	r6, r6, #7
 800c496:	1d23      	adds	r3, r4, #4
 800c498:	1af2      	subs	r2, r6, r3
 800c49a:	d0ae      	beq.n	800c3fa <_malloc_r+0x22>
 800c49c:	1b9b      	subs	r3, r3, r6
 800c49e:	50a3      	str	r3, [r4, r2]
 800c4a0:	e7ab      	b.n	800c3fa <_malloc_r+0x22>
 800c4a2:	42a3      	cmp	r3, r4
 800c4a4:	6862      	ldr	r2, [r4, #4]
 800c4a6:	d1dd      	bne.n	800c464 <_malloc_r+0x8c>
 800c4a8:	f8c8 2000 	str.w	r2, [r8]
 800c4ac:	e7ec      	b.n	800c488 <_malloc_r+0xb0>
 800c4ae:	4623      	mov	r3, r4
 800c4b0:	6864      	ldr	r4, [r4, #4]
 800c4b2:	e7ac      	b.n	800c40e <_malloc_r+0x36>
 800c4b4:	4634      	mov	r4, r6
 800c4b6:	6876      	ldr	r6, [r6, #4]
 800c4b8:	e7b4      	b.n	800c424 <_malloc_r+0x4c>
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	e7cc      	b.n	800c458 <_malloc_r+0x80>
 800c4be:	230c      	movs	r3, #12
 800c4c0:	4638      	mov	r0, r7
 800c4c2:	603b      	str	r3, [r7, #0]
 800c4c4:	f000 f80e 	bl	800c4e4 <__malloc_unlock>
 800c4c8:	e797      	b.n	800c3fa <_malloc_r+0x22>
 800c4ca:	6025      	str	r5, [r4, #0]
 800c4cc:	e7dc      	b.n	800c488 <_malloc_r+0xb0>
 800c4ce:	605b      	str	r3, [r3, #4]
 800c4d0:	deff      	udf	#255	; 0xff
 800c4d2:	bf00      	nop
 800c4d4:	20000494 	.word	0x20000494

0800c4d8 <__malloc_lock>:
 800c4d8:	4801      	ldr	r0, [pc, #4]	; (800c4e0 <__malloc_lock+0x8>)
 800c4da:	f000 b8bd 	b.w	800c658 <__retarget_lock_acquire_recursive>
 800c4de:	bf00      	nop
 800c4e0:	200005d4 	.word	0x200005d4

0800c4e4 <__malloc_unlock>:
 800c4e4:	4801      	ldr	r0, [pc, #4]	; (800c4ec <__malloc_unlock+0x8>)
 800c4e6:	f000 b8b8 	b.w	800c65a <__retarget_lock_release_recursive>
 800c4ea:	bf00      	nop
 800c4ec:	200005d4 	.word	0x200005d4

0800c4f0 <siprintf>:
 800c4f0:	b40e      	push	{r1, r2, r3}
 800c4f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4f6:	b500      	push	{lr}
 800c4f8:	b09c      	sub	sp, #112	; 0x70
 800c4fa:	ab1d      	add	r3, sp, #116	; 0x74
 800c4fc:	9002      	str	r0, [sp, #8]
 800c4fe:	9006      	str	r0, [sp, #24]
 800c500:	9107      	str	r1, [sp, #28]
 800c502:	9104      	str	r1, [sp, #16]
 800c504:	4808      	ldr	r0, [pc, #32]	; (800c528 <siprintf+0x38>)
 800c506:	4909      	ldr	r1, [pc, #36]	; (800c52c <siprintf+0x3c>)
 800c508:	f853 2b04 	ldr.w	r2, [r3], #4
 800c50c:	9105      	str	r1, [sp, #20]
 800c50e:	6800      	ldr	r0, [r0, #0]
 800c510:	a902      	add	r1, sp, #8
 800c512:	9301      	str	r3, [sp, #4]
 800c514:	f000 f94c 	bl	800c7b0 <_svfiprintf_r>
 800c518:	2200      	movs	r2, #0
 800c51a:	9b02      	ldr	r3, [sp, #8]
 800c51c:	701a      	strb	r2, [r3, #0]
 800c51e:	b01c      	add	sp, #112	; 0x70
 800c520:	f85d eb04 	ldr.w	lr, [sp], #4
 800c524:	b003      	add	sp, #12
 800c526:	4770      	bx	lr
 800c528:	200000f8 	.word	0x200000f8
 800c52c:	ffff0208 	.word	0xffff0208

0800c530 <__utoa>:
 800c530:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c532:	b08b      	sub	sp, #44	; 0x2c
 800c534:	4605      	mov	r5, r0
 800c536:	460b      	mov	r3, r1
 800c538:	466e      	mov	r6, sp
 800c53a:	4c1d      	ldr	r4, [pc, #116]	; (800c5b0 <__utoa+0x80>)
 800c53c:	f104 0c20 	add.w	ip, r4, #32
 800c540:	4637      	mov	r7, r6
 800c542:	6820      	ldr	r0, [r4, #0]
 800c544:	6861      	ldr	r1, [r4, #4]
 800c546:	3408      	adds	r4, #8
 800c548:	c703      	stmia	r7!, {r0, r1}
 800c54a:	4564      	cmp	r4, ip
 800c54c:	463e      	mov	r6, r7
 800c54e:	d1f7      	bne.n	800c540 <__utoa+0x10>
 800c550:	7921      	ldrb	r1, [r4, #4]
 800c552:	6820      	ldr	r0, [r4, #0]
 800c554:	7139      	strb	r1, [r7, #4]
 800c556:	1e91      	subs	r1, r2, #2
 800c558:	2922      	cmp	r1, #34	; 0x22
 800c55a:	6038      	str	r0, [r7, #0]
 800c55c:	f04f 0100 	mov.w	r1, #0
 800c560:	d904      	bls.n	800c56c <__utoa+0x3c>
 800c562:	7019      	strb	r1, [r3, #0]
 800c564:	460b      	mov	r3, r1
 800c566:	4618      	mov	r0, r3
 800c568:	b00b      	add	sp, #44	; 0x2c
 800c56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c56c:	1e58      	subs	r0, r3, #1
 800c56e:	4684      	mov	ip, r0
 800c570:	fbb5 f7f2 	udiv	r7, r5, r2
 800c574:	fb02 5617 	mls	r6, r2, r7, r5
 800c578:	3628      	adds	r6, #40	; 0x28
 800c57a:	446e      	add	r6, sp
 800c57c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c580:	460c      	mov	r4, r1
 800c582:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c586:	462e      	mov	r6, r5
 800c588:	42b2      	cmp	r2, r6
 800c58a:	463d      	mov	r5, r7
 800c58c:	f101 0101 	add.w	r1, r1, #1
 800c590:	d9ee      	bls.n	800c570 <__utoa+0x40>
 800c592:	2200      	movs	r2, #0
 800c594:	545a      	strb	r2, [r3, r1]
 800c596:	1919      	adds	r1, r3, r4
 800c598:	1aa5      	subs	r5, r4, r2
 800c59a:	42aa      	cmp	r2, r5
 800c59c:	dae3      	bge.n	800c566 <__utoa+0x36>
 800c59e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c5a2:	780e      	ldrb	r6, [r1, #0]
 800c5a4:	3201      	adds	r2, #1
 800c5a6:	7006      	strb	r6, [r0, #0]
 800c5a8:	f801 5901 	strb.w	r5, [r1], #-1
 800c5ac:	e7f4      	b.n	800c598 <__utoa+0x68>
 800c5ae:	bf00      	nop
 800c5b0:	0800dd42 	.word	0x0800dd42

0800c5b4 <strcat>:
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	b510      	push	{r4, lr}
 800c5b8:	7814      	ldrb	r4, [r2, #0]
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	3201      	adds	r2, #1
 800c5be:	2c00      	cmp	r4, #0
 800c5c0:	d1fa      	bne.n	800c5b8 <strcat+0x4>
 800c5c2:	3b01      	subs	r3, #1
 800c5c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5cc:	2a00      	cmp	r2, #0
 800c5ce:	d1f9      	bne.n	800c5c4 <strcat+0x10>
 800c5d0:	bd10      	pop	{r4, pc}

0800c5d2 <memset>:
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	4402      	add	r2, r0
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d100      	bne.n	800c5dc <memset+0xa>
 800c5da:	4770      	bx	lr
 800c5dc:	f803 1b01 	strb.w	r1, [r3], #1
 800c5e0:	e7f9      	b.n	800c5d6 <memset+0x4>
	...

0800c5e4 <_sbrk_r>:
 800c5e4:	b538      	push	{r3, r4, r5, lr}
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	4d05      	ldr	r5, [pc, #20]	; (800c600 <_sbrk_r+0x1c>)
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	4608      	mov	r0, r1
 800c5ee:	602b      	str	r3, [r5, #0]
 800c5f0:	f7fc f808 	bl	8008604 <_sbrk>
 800c5f4:	1c43      	adds	r3, r0, #1
 800c5f6:	d102      	bne.n	800c5fe <_sbrk_r+0x1a>
 800c5f8:	682b      	ldr	r3, [r5, #0]
 800c5fa:	b103      	cbz	r3, 800c5fe <_sbrk_r+0x1a>
 800c5fc:	6023      	str	r3, [r4, #0]
 800c5fe:	bd38      	pop	{r3, r4, r5, pc}
 800c600:	200005d8 	.word	0x200005d8

0800c604 <__errno>:
 800c604:	4b01      	ldr	r3, [pc, #4]	; (800c60c <__errno+0x8>)
 800c606:	6818      	ldr	r0, [r3, #0]
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	200000f8 	.word	0x200000f8

0800c610 <__libc_init_array>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	2600      	movs	r6, #0
 800c614:	4d0c      	ldr	r5, [pc, #48]	; (800c648 <__libc_init_array+0x38>)
 800c616:	4c0d      	ldr	r4, [pc, #52]	; (800c64c <__libc_init_array+0x3c>)
 800c618:	1b64      	subs	r4, r4, r5
 800c61a:	10a4      	asrs	r4, r4, #2
 800c61c:	42a6      	cmp	r6, r4
 800c61e:	d109      	bne.n	800c634 <__libc_init_array+0x24>
 800c620:	f000 fbc6 	bl	800cdb0 <_init>
 800c624:	2600      	movs	r6, #0
 800c626:	4d0a      	ldr	r5, [pc, #40]	; (800c650 <__libc_init_array+0x40>)
 800c628:	4c0a      	ldr	r4, [pc, #40]	; (800c654 <__libc_init_array+0x44>)
 800c62a:	1b64      	subs	r4, r4, r5
 800c62c:	10a4      	asrs	r4, r4, #2
 800c62e:	42a6      	cmp	r6, r4
 800c630:	d105      	bne.n	800c63e <__libc_init_array+0x2e>
 800c632:	bd70      	pop	{r4, r5, r6, pc}
 800c634:	f855 3b04 	ldr.w	r3, [r5], #4
 800c638:	4798      	blx	r3
 800c63a:	3601      	adds	r6, #1
 800c63c:	e7ee      	b.n	800c61c <__libc_init_array+0xc>
 800c63e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c642:	4798      	blx	r3
 800c644:	3601      	adds	r6, #1
 800c646:	e7f2      	b.n	800c62e <__libc_init_array+0x1e>
 800c648:	0800dd9c 	.word	0x0800dd9c
 800c64c:	0800dd9c 	.word	0x0800dd9c
 800c650:	0800dd9c 	.word	0x0800dd9c
 800c654:	0800dda0 	.word	0x0800dda0

0800c658 <__retarget_lock_acquire_recursive>:
 800c658:	4770      	bx	lr

0800c65a <__retarget_lock_release_recursive>:
 800c65a:	4770      	bx	lr

0800c65c <strcpy>:
 800c65c:	4603      	mov	r3, r0
 800c65e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c662:	f803 2b01 	strb.w	r2, [r3], #1
 800c666:	2a00      	cmp	r2, #0
 800c668:	d1f9      	bne.n	800c65e <strcpy+0x2>
 800c66a:	4770      	bx	lr

0800c66c <_free_r>:
 800c66c:	b538      	push	{r3, r4, r5, lr}
 800c66e:	4605      	mov	r5, r0
 800c670:	2900      	cmp	r1, #0
 800c672:	d040      	beq.n	800c6f6 <_free_r+0x8a>
 800c674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c678:	1f0c      	subs	r4, r1, #4
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	bfb8      	it	lt
 800c67e:	18e4      	addlt	r4, r4, r3
 800c680:	f7ff ff2a 	bl	800c4d8 <__malloc_lock>
 800c684:	4a1c      	ldr	r2, [pc, #112]	; (800c6f8 <_free_r+0x8c>)
 800c686:	6813      	ldr	r3, [r2, #0]
 800c688:	b933      	cbnz	r3, 800c698 <_free_r+0x2c>
 800c68a:	6063      	str	r3, [r4, #4]
 800c68c:	6014      	str	r4, [r2, #0]
 800c68e:	4628      	mov	r0, r5
 800c690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c694:	f7ff bf26 	b.w	800c4e4 <__malloc_unlock>
 800c698:	42a3      	cmp	r3, r4
 800c69a:	d908      	bls.n	800c6ae <_free_r+0x42>
 800c69c:	6820      	ldr	r0, [r4, #0]
 800c69e:	1821      	adds	r1, r4, r0
 800c6a0:	428b      	cmp	r3, r1
 800c6a2:	bf01      	itttt	eq
 800c6a4:	6819      	ldreq	r1, [r3, #0]
 800c6a6:	685b      	ldreq	r3, [r3, #4]
 800c6a8:	1809      	addeq	r1, r1, r0
 800c6aa:	6021      	streq	r1, [r4, #0]
 800c6ac:	e7ed      	b.n	800c68a <_free_r+0x1e>
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	b10b      	cbz	r3, 800c6b8 <_free_r+0x4c>
 800c6b4:	42a3      	cmp	r3, r4
 800c6b6:	d9fa      	bls.n	800c6ae <_free_r+0x42>
 800c6b8:	6811      	ldr	r1, [r2, #0]
 800c6ba:	1850      	adds	r0, r2, r1
 800c6bc:	42a0      	cmp	r0, r4
 800c6be:	d10b      	bne.n	800c6d8 <_free_r+0x6c>
 800c6c0:	6820      	ldr	r0, [r4, #0]
 800c6c2:	4401      	add	r1, r0
 800c6c4:	1850      	adds	r0, r2, r1
 800c6c6:	4283      	cmp	r3, r0
 800c6c8:	6011      	str	r1, [r2, #0]
 800c6ca:	d1e0      	bne.n	800c68e <_free_r+0x22>
 800c6cc:	6818      	ldr	r0, [r3, #0]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	4408      	add	r0, r1
 800c6d2:	6010      	str	r0, [r2, #0]
 800c6d4:	6053      	str	r3, [r2, #4]
 800c6d6:	e7da      	b.n	800c68e <_free_r+0x22>
 800c6d8:	d902      	bls.n	800c6e0 <_free_r+0x74>
 800c6da:	230c      	movs	r3, #12
 800c6dc:	602b      	str	r3, [r5, #0]
 800c6de:	e7d6      	b.n	800c68e <_free_r+0x22>
 800c6e0:	6820      	ldr	r0, [r4, #0]
 800c6e2:	1821      	adds	r1, r4, r0
 800c6e4:	428b      	cmp	r3, r1
 800c6e6:	bf01      	itttt	eq
 800c6e8:	6819      	ldreq	r1, [r3, #0]
 800c6ea:	685b      	ldreq	r3, [r3, #4]
 800c6ec:	1809      	addeq	r1, r1, r0
 800c6ee:	6021      	streq	r1, [r4, #0]
 800c6f0:	6063      	str	r3, [r4, #4]
 800c6f2:	6054      	str	r4, [r2, #4]
 800c6f4:	e7cb      	b.n	800c68e <_free_r+0x22>
 800c6f6:	bd38      	pop	{r3, r4, r5, pc}
 800c6f8:	20000494 	.word	0x20000494

0800c6fc <__ssputs_r>:
 800c6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c700:	461f      	mov	r7, r3
 800c702:	688e      	ldr	r6, [r1, #8]
 800c704:	4682      	mov	sl, r0
 800c706:	42be      	cmp	r6, r7
 800c708:	460c      	mov	r4, r1
 800c70a:	4690      	mov	r8, r2
 800c70c:	680b      	ldr	r3, [r1, #0]
 800c70e:	d82c      	bhi.n	800c76a <__ssputs_r+0x6e>
 800c710:	898a      	ldrh	r2, [r1, #12]
 800c712:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c716:	d026      	beq.n	800c766 <__ssputs_r+0x6a>
 800c718:	6965      	ldr	r5, [r4, #20]
 800c71a:	6909      	ldr	r1, [r1, #16]
 800c71c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c720:	eba3 0901 	sub.w	r9, r3, r1
 800c724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c728:	1c7b      	adds	r3, r7, #1
 800c72a:	444b      	add	r3, r9
 800c72c:	106d      	asrs	r5, r5, #1
 800c72e:	429d      	cmp	r5, r3
 800c730:	bf38      	it	cc
 800c732:	461d      	movcc	r5, r3
 800c734:	0553      	lsls	r3, r2, #21
 800c736:	d527      	bpl.n	800c788 <__ssputs_r+0x8c>
 800c738:	4629      	mov	r1, r5
 800c73a:	f7ff fe4d 	bl	800c3d8 <_malloc_r>
 800c73e:	4606      	mov	r6, r0
 800c740:	b360      	cbz	r0, 800c79c <__ssputs_r+0xa0>
 800c742:	464a      	mov	r2, r9
 800c744:	6921      	ldr	r1, [r4, #16]
 800c746:	f000 fb1c 	bl	800cd82 <memcpy>
 800c74a:	89a3      	ldrh	r3, [r4, #12]
 800c74c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c754:	81a3      	strh	r3, [r4, #12]
 800c756:	6126      	str	r6, [r4, #16]
 800c758:	444e      	add	r6, r9
 800c75a:	6026      	str	r6, [r4, #0]
 800c75c:	463e      	mov	r6, r7
 800c75e:	6165      	str	r5, [r4, #20]
 800c760:	eba5 0509 	sub.w	r5, r5, r9
 800c764:	60a5      	str	r5, [r4, #8]
 800c766:	42be      	cmp	r6, r7
 800c768:	d900      	bls.n	800c76c <__ssputs_r+0x70>
 800c76a:	463e      	mov	r6, r7
 800c76c:	4632      	mov	r2, r6
 800c76e:	4641      	mov	r1, r8
 800c770:	6820      	ldr	r0, [r4, #0]
 800c772:	f000 fade 	bl	800cd32 <memmove>
 800c776:	2000      	movs	r0, #0
 800c778:	68a3      	ldr	r3, [r4, #8]
 800c77a:	1b9b      	subs	r3, r3, r6
 800c77c:	60a3      	str	r3, [r4, #8]
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	4433      	add	r3, r6
 800c782:	6023      	str	r3, [r4, #0]
 800c784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c788:	462a      	mov	r2, r5
 800c78a:	f000 faa3 	bl	800ccd4 <_realloc_r>
 800c78e:	4606      	mov	r6, r0
 800c790:	2800      	cmp	r0, #0
 800c792:	d1e0      	bne.n	800c756 <__ssputs_r+0x5a>
 800c794:	4650      	mov	r0, sl
 800c796:	6921      	ldr	r1, [r4, #16]
 800c798:	f7ff ff68 	bl	800c66c <_free_r>
 800c79c:	230c      	movs	r3, #12
 800c79e:	f8ca 3000 	str.w	r3, [sl]
 800c7a2:	89a3      	ldrh	r3, [r4, #12]
 800c7a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7ac:	81a3      	strh	r3, [r4, #12]
 800c7ae:	e7e9      	b.n	800c784 <__ssputs_r+0x88>

0800c7b0 <_svfiprintf_r>:
 800c7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b4:	4698      	mov	r8, r3
 800c7b6:	898b      	ldrh	r3, [r1, #12]
 800c7b8:	4607      	mov	r7, r0
 800c7ba:	061b      	lsls	r3, r3, #24
 800c7bc:	460d      	mov	r5, r1
 800c7be:	4614      	mov	r4, r2
 800c7c0:	b09d      	sub	sp, #116	; 0x74
 800c7c2:	d50e      	bpl.n	800c7e2 <_svfiprintf_r+0x32>
 800c7c4:	690b      	ldr	r3, [r1, #16]
 800c7c6:	b963      	cbnz	r3, 800c7e2 <_svfiprintf_r+0x32>
 800c7c8:	2140      	movs	r1, #64	; 0x40
 800c7ca:	f7ff fe05 	bl	800c3d8 <_malloc_r>
 800c7ce:	6028      	str	r0, [r5, #0]
 800c7d0:	6128      	str	r0, [r5, #16]
 800c7d2:	b920      	cbnz	r0, 800c7de <_svfiprintf_r+0x2e>
 800c7d4:	230c      	movs	r3, #12
 800c7d6:	603b      	str	r3, [r7, #0]
 800c7d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7dc:	e0d0      	b.n	800c980 <_svfiprintf_r+0x1d0>
 800c7de:	2340      	movs	r3, #64	; 0x40
 800c7e0:	616b      	str	r3, [r5, #20]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7e6:	2320      	movs	r3, #32
 800c7e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7ec:	2330      	movs	r3, #48	; 0x30
 800c7ee:	f04f 0901 	mov.w	r9, #1
 800c7f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7f6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c998 <_svfiprintf_r+0x1e8>
 800c7fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7fe:	4623      	mov	r3, r4
 800c800:	469a      	mov	sl, r3
 800c802:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c806:	b10a      	cbz	r2, 800c80c <_svfiprintf_r+0x5c>
 800c808:	2a25      	cmp	r2, #37	; 0x25
 800c80a:	d1f9      	bne.n	800c800 <_svfiprintf_r+0x50>
 800c80c:	ebba 0b04 	subs.w	fp, sl, r4
 800c810:	d00b      	beq.n	800c82a <_svfiprintf_r+0x7a>
 800c812:	465b      	mov	r3, fp
 800c814:	4622      	mov	r2, r4
 800c816:	4629      	mov	r1, r5
 800c818:	4638      	mov	r0, r7
 800c81a:	f7ff ff6f 	bl	800c6fc <__ssputs_r>
 800c81e:	3001      	adds	r0, #1
 800c820:	f000 80a9 	beq.w	800c976 <_svfiprintf_r+0x1c6>
 800c824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c826:	445a      	add	r2, fp
 800c828:	9209      	str	r2, [sp, #36]	; 0x24
 800c82a:	f89a 3000 	ldrb.w	r3, [sl]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f000 80a1 	beq.w	800c976 <_svfiprintf_r+0x1c6>
 800c834:	2300      	movs	r3, #0
 800c836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c83a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c83e:	f10a 0a01 	add.w	sl, sl, #1
 800c842:	9304      	str	r3, [sp, #16]
 800c844:	9307      	str	r3, [sp, #28]
 800c846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c84a:	931a      	str	r3, [sp, #104]	; 0x68
 800c84c:	4654      	mov	r4, sl
 800c84e:	2205      	movs	r2, #5
 800c850:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c854:	4850      	ldr	r0, [pc, #320]	; (800c998 <_svfiprintf_r+0x1e8>)
 800c856:	f000 fa86 	bl	800cd66 <memchr>
 800c85a:	9a04      	ldr	r2, [sp, #16]
 800c85c:	b9d8      	cbnz	r0, 800c896 <_svfiprintf_r+0xe6>
 800c85e:	06d0      	lsls	r0, r2, #27
 800c860:	bf44      	itt	mi
 800c862:	2320      	movmi	r3, #32
 800c864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c868:	0711      	lsls	r1, r2, #28
 800c86a:	bf44      	itt	mi
 800c86c:	232b      	movmi	r3, #43	; 0x2b
 800c86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c872:	f89a 3000 	ldrb.w	r3, [sl]
 800c876:	2b2a      	cmp	r3, #42	; 0x2a
 800c878:	d015      	beq.n	800c8a6 <_svfiprintf_r+0xf6>
 800c87a:	4654      	mov	r4, sl
 800c87c:	2000      	movs	r0, #0
 800c87e:	f04f 0c0a 	mov.w	ip, #10
 800c882:	9a07      	ldr	r2, [sp, #28]
 800c884:	4621      	mov	r1, r4
 800c886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c88a:	3b30      	subs	r3, #48	; 0x30
 800c88c:	2b09      	cmp	r3, #9
 800c88e:	d94d      	bls.n	800c92c <_svfiprintf_r+0x17c>
 800c890:	b1b0      	cbz	r0, 800c8c0 <_svfiprintf_r+0x110>
 800c892:	9207      	str	r2, [sp, #28]
 800c894:	e014      	b.n	800c8c0 <_svfiprintf_r+0x110>
 800c896:	eba0 0308 	sub.w	r3, r0, r8
 800c89a:	fa09 f303 	lsl.w	r3, r9, r3
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	46a2      	mov	sl, r4
 800c8a2:	9304      	str	r3, [sp, #16]
 800c8a4:	e7d2      	b.n	800c84c <_svfiprintf_r+0x9c>
 800c8a6:	9b03      	ldr	r3, [sp, #12]
 800c8a8:	1d19      	adds	r1, r3, #4
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	9103      	str	r1, [sp, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	bfbb      	ittet	lt
 800c8b2:	425b      	neglt	r3, r3
 800c8b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8b8:	9307      	strge	r3, [sp, #28]
 800c8ba:	9307      	strlt	r3, [sp, #28]
 800c8bc:	bfb8      	it	lt
 800c8be:	9204      	strlt	r2, [sp, #16]
 800c8c0:	7823      	ldrb	r3, [r4, #0]
 800c8c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c8c4:	d10c      	bne.n	800c8e0 <_svfiprintf_r+0x130>
 800c8c6:	7863      	ldrb	r3, [r4, #1]
 800c8c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ca:	d134      	bne.n	800c936 <_svfiprintf_r+0x186>
 800c8cc:	9b03      	ldr	r3, [sp, #12]
 800c8ce:	3402      	adds	r4, #2
 800c8d0:	1d1a      	adds	r2, r3, #4
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	9203      	str	r2, [sp, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	bfb8      	it	lt
 800c8da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c8de:	9305      	str	r3, [sp, #20]
 800c8e0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c99c <_svfiprintf_r+0x1ec>
 800c8e4:	2203      	movs	r2, #3
 800c8e6:	4650      	mov	r0, sl
 800c8e8:	7821      	ldrb	r1, [r4, #0]
 800c8ea:	f000 fa3c 	bl	800cd66 <memchr>
 800c8ee:	b138      	cbz	r0, 800c900 <_svfiprintf_r+0x150>
 800c8f0:	2240      	movs	r2, #64	; 0x40
 800c8f2:	9b04      	ldr	r3, [sp, #16]
 800c8f4:	eba0 000a 	sub.w	r0, r0, sl
 800c8f8:	4082      	lsls	r2, r0
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	3401      	adds	r4, #1
 800c8fe:	9304      	str	r3, [sp, #16]
 800c900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c904:	2206      	movs	r2, #6
 800c906:	4826      	ldr	r0, [pc, #152]	; (800c9a0 <_svfiprintf_r+0x1f0>)
 800c908:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c90c:	f000 fa2b 	bl	800cd66 <memchr>
 800c910:	2800      	cmp	r0, #0
 800c912:	d038      	beq.n	800c986 <_svfiprintf_r+0x1d6>
 800c914:	4b23      	ldr	r3, [pc, #140]	; (800c9a4 <_svfiprintf_r+0x1f4>)
 800c916:	bb1b      	cbnz	r3, 800c960 <_svfiprintf_r+0x1b0>
 800c918:	9b03      	ldr	r3, [sp, #12]
 800c91a:	3307      	adds	r3, #7
 800c91c:	f023 0307 	bic.w	r3, r3, #7
 800c920:	3308      	adds	r3, #8
 800c922:	9303      	str	r3, [sp, #12]
 800c924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c926:	4433      	add	r3, r6
 800c928:	9309      	str	r3, [sp, #36]	; 0x24
 800c92a:	e768      	b.n	800c7fe <_svfiprintf_r+0x4e>
 800c92c:	460c      	mov	r4, r1
 800c92e:	2001      	movs	r0, #1
 800c930:	fb0c 3202 	mla	r2, ip, r2, r3
 800c934:	e7a6      	b.n	800c884 <_svfiprintf_r+0xd4>
 800c936:	2300      	movs	r3, #0
 800c938:	f04f 0c0a 	mov.w	ip, #10
 800c93c:	4619      	mov	r1, r3
 800c93e:	3401      	adds	r4, #1
 800c940:	9305      	str	r3, [sp, #20]
 800c942:	4620      	mov	r0, r4
 800c944:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c948:	3a30      	subs	r2, #48	; 0x30
 800c94a:	2a09      	cmp	r2, #9
 800c94c:	d903      	bls.n	800c956 <_svfiprintf_r+0x1a6>
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d0c6      	beq.n	800c8e0 <_svfiprintf_r+0x130>
 800c952:	9105      	str	r1, [sp, #20]
 800c954:	e7c4      	b.n	800c8e0 <_svfiprintf_r+0x130>
 800c956:	4604      	mov	r4, r0
 800c958:	2301      	movs	r3, #1
 800c95a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c95e:	e7f0      	b.n	800c942 <_svfiprintf_r+0x192>
 800c960:	ab03      	add	r3, sp, #12
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	462a      	mov	r2, r5
 800c966:	4638      	mov	r0, r7
 800c968:	4b0f      	ldr	r3, [pc, #60]	; (800c9a8 <_svfiprintf_r+0x1f8>)
 800c96a:	a904      	add	r1, sp, #16
 800c96c:	f3af 8000 	nop.w
 800c970:	1c42      	adds	r2, r0, #1
 800c972:	4606      	mov	r6, r0
 800c974:	d1d6      	bne.n	800c924 <_svfiprintf_r+0x174>
 800c976:	89ab      	ldrh	r3, [r5, #12]
 800c978:	065b      	lsls	r3, r3, #25
 800c97a:	f53f af2d 	bmi.w	800c7d8 <_svfiprintf_r+0x28>
 800c97e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c980:	b01d      	add	sp, #116	; 0x74
 800c982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c986:	ab03      	add	r3, sp, #12
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	462a      	mov	r2, r5
 800c98c:	4638      	mov	r0, r7
 800c98e:	4b06      	ldr	r3, [pc, #24]	; (800c9a8 <_svfiprintf_r+0x1f8>)
 800c990:	a904      	add	r1, sp, #16
 800c992:	f000 f87d 	bl	800ca90 <_printf_i>
 800c996:	e7eb      	b.n	800c970 <_svfiprintf_r+0x1c0>
 800c998:	0800dd67 	.word	0x0800dd67
 800c99c:	0800dd6d 	.word	0x0800dd6d
 800c9a0:	0800dd71 	.word	0x0800dd71
 800c9a4:	00000000 	.word	0x00000000
 800c9a8:	0800c6fd 	.word	0x0800c6fd

0800c9ac <_printf_common>:
 800c9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9b0:	4616      	mov	r6, r2
 800c9b2:	4699      	mov	r9, r3
 800c9b4:	688a      	ldr	r2, [r1, #8]
 800c9b6:	690b      	ldr	r3, [r1, #16]
 800c9b8:	4607      	mov	r7, r0
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	bfb8      	it	lt
 800c9be:	4613      	movlt	r3, r2
 800c9c0:	6033      	str	r3, [r6, #0]
 800c9c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9c6:	460c      	mov	r4, r1
 800c9c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9cc:	b10a      	cbz	r2, 800c9d2 <_printf_common+0x26>
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	6033      	str	r3, [r6, #0]
 800c9d2:	6823      	ldr	r3, [r4, #0]
 800c9d4:	0699      	lsls	r1, r3, #26
 800c9d6:	bf42      	ittt	mi
 800c9d8:	6833      	ldrmi	r3, [r6, #0]
 800c9da:	3302      	addmi	r3, #2
 800c9dc:	6033      	strmi	r3, [r6, #0]
 800c9de:	6825      	ldr	r5, [r4, #0]
 800c9e0:	f015 0506 	ands.w	r5, r5, #6
 800c9e4:	d106      	bne.n	800c9f4 <_printf_common+0x48>
 800c9e6:	f104 0a19 	add.w	sl, r4, #25
 800c9ea:	68e3      	ldr	r3, [r4, #12]
 800c9ec:	6832      	ldr	r2, [r6, #0]
 800c9ee:	1a9b      	subs	r3, r3, r2
 800c9f0:	42ab      	cmp	r3, r5
 800c9f2:	dc2b      	bgt.n	800ca4c <_printf_common+0xa0>
 800c9f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9f8:	1e13      	subs	r3, r2, #0
 800c9fa:	6822      	ldr	r2, [r4, #0]
 800c9fc:	bf18      	it	ne
 800c9fe:	2301      	movne	r3, #1
 800ca00:	0692      	lsls	r2, r2, #26
 800ca02:	d430      	bmi.n	800ca66 <_printf_common+0xba>
 800ca04:	4649      	mov	r1, r9
 800ca06:	4638      	mov	r0, r7
 800ca08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca0c:	47c0      	blx	r8
 800ca0e:	3001      	adds	r0, #1
 800ca10:	d023      	beq.n	800ca5a <_printf_common+0xae>
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	6922      	ldr	r2, [r4, #16]
 800ca16:	f003 0306 	and.w	r3, r3, #6
 800ca1a:	2b04      	cmp	r3, #4
 800ca1c:	bf14      	ite	ne
 800ca1e:	2500      	movne	r5, #0
 800ca20:	6833      	ldreq	r3, [r6, #0]
 800ca22:	f04f 0600 	mov.w	r6, #0
 800ca26:	bf08      	it	eq
 800ca28:	68e5      	ldreq	r5, [r4, #12]
 800ca2a:	f104 041a 	add.w	r4, r4, #26
 800ca2e:	bf08      	it	eq
 800ca30:	1aed      	subeq	r5, r5, r3
 800ca32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ca36:	bf08      	it	eq
 800ca38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	bfc4      	itt	gt
 800ca40:	1a9b      	subgt	r3, r3, r2
 800ca42:	18ed      	addgt	r5, r5, r3
 800ca44:	42b5      	cmp	r5, r6
 800ca46:	d11a      	bne.n	800ca7e <_printf_common+0xd2>
 800ca48:	2000      	movs	r0, #0
 800ca4a:	e008      	b.n	800ca5e <_printf_common+0xb2>
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	4652      	mov	r2, sl
 800ca50:	4649      	mov	r1, r9
 800ca52:	4638      	mov	r0, r7
 800ca54:	47c0      	blx	r8
 800ca56:	3001      	adds	r0, #1
 800ca58:	d103      	bne.n	800ca62 <_printf_common+0xb6>
 800ca5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca62:	3501      	adds	r5, #1
 800ca64:	e7c1      	b.n	800c9ea <_printf_common+0x3e>
 800ca66:	2030      	movs	r0, #48	; 0x30
 800ca68:	18e1      	adds	r1, r4, r3
 800ca6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca74:	4422      	add	r2, r4
 800ca76:	3302      	adds	r3, #2
 800ca78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca7c:	e7c2      	b.n	800ca04 <_printf_common+0x58>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	4622      	mov	r2, r4
 800ca82:	4649      	mov	r1, r9
 800ca84:	4638      	mov	r0, r7
 800ca86:	47c0      	blx	r8
 800ca88:	3001      	adds	r0, #1
 800ca8a:	d0e6      	beq.n	800ca5a <_printf_common+0xae>
 800ca8c:	3601      	adds	r6, #1
 800ca8e:	e7d9      	b.n	800ca44 <_printf_common+0x98>

0800ca90 <_printf_i>:
 800ca90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca94:	7e0f      	ldrb	r7, [r1, #24]
 800ca96:	4691      	mov	r9, r2
 800ca98:	2f78      	cmp	r7, #120	; 0x78
 800ca9a:	4680      	mov	r8, r0
 800ca9c:	460c      	mov	r4, r1
 800ca9e:	469a      	mov	sl, r3
 800caa0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800caa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800caa6:	d807      	bhi.n	800cab8 <_printf_i+0x28>
 800caa8:	2f62      	cmp	r7, #98	; 0x62
 800caaa:	d80a      	bhi.n	800cac2 <_printf_i+0x32>
 800caac:	2f00      	cmp	r7, #0
 800caae:	f000 80d5 	beq.w	800cc5c <_printf_i+0x1cc>
 800cab2:	2f58      	cmp	r7, #88	; 0x58
 800cab4:	f000 80c1 	beq.w	800cc3a <_printf_i+0x1aa>
 800cab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cabc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cac0:	e03a      	b.n	800cb38 <_printf_i+0xa8>
 800cac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cac6:	2b15      	cmp	r3, #21
 800cac8:	d8f6      	bhi.n	800cab8 <_printf_i+0x28>
 800caca:	a101      	add	r1, pc, #4	; (adr r1, 800cad0 <_printf_i+0x40>)
 800cacc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cad0:	0800cb29 	.word	0x0800cb29
 800cad4:	0800cb3d 	.word	0x0800cb3d
 800cad8:	0800cab9 	.word	0x0800cab9
 800cadc:	0800cab9 	.word	0x0800cab9
 800cae0:	0800cab9 	.word	0x0800cab9
 800cae4:	0800cab9 	.word	0x0800cab9
 800cae8:	0800cb3d 	.word	0x0800cb3d
 800caec:	0800cab9 	.word	0x0800cab9
 800caf0:	0800cab9 	.word	0x0800cab9
 800caf4:	0800cab9 	.word	0x0800cab9
 800caf8:	0800cab9 	.word	0x0800cab9
 800cafc:	0800cc43 	.word	0x0800cc43
 800cb00:	0800cb69 	.word	0x0800cb69
 800cb04:	0800cbfd 	.word	0x0800cbfd
 800cb08:	0800cab9 	.word	0x0800cab9
 800cb0c:	0800cab9 	.word	0x0800cab9
 800cb10:	0800cc65 	.word	0x0800cc65
 800cb14:	0800cab9 	.word	0x0800cab9
 800cb18:	0800cb69 	.word	0x0800cb69
 800cb1c:	0800cab9 	.word	0x0800cab9
 800cb20:	0800cab9 	.word	0x0800cab9
 800cb24:	0800cc05 	.word	0x0800cc05
 800cb28:	682b      	ldr	r3, [r5, #0]
 800cb2a:	1d1a      	adds	r2, r3, #4
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	602a      	str	r2, [r5, #0]
 800cb30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e0a0      	b.n	800cc7e <_printf_i+0x1ee>
 800cb3c:	6820      	ldr	r0, [r4, #0]
 800cb3e:	682b      	ldr	r3, [r5, #0]
 800cb40:	0607      	lsls	r7, r0, #24
 800cb42:	f103 0104 	add.w	r1, r3, #4
 800cb46:	6029      	str	r1, [r5, #0]
 800cb48:	d501      	bpl.n	800cb4e <_printf_i+0xbe>
 800cb4a:	681e      	ldr	r6, [r3, #0]
 800cb4c:	e003      	b.n	800cb56 <_printf_i+0xc6>
 800cb4e:	0646      	lsls	r6, r0, #25
 800cb50:	d5fb      	bpl.n	800cb4a <_printf_i+0xba>
 800cb52:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb56:	2e00      	cmp	r6, #0
 800cb58:	da03      	bge.n	800cb62 <_printf_i+0xd2>
 800cb5a:	232d      	movs	r3, #45	; 0x2d
 800cb5c:	4276      	negs	r6, r6
 800cb5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb62:	230a      	movs	r3, #10
 800cb64:	4859      	ldr	r0, [pc, #356]	; (800cccc <_printf_i+0x23c>)
 800cb66:	e012      	b.n	800cb8e <_printf_i+0xfe>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	6820      	ldr	r0, [r4, #0]
 800cb6c:	1d19      	adds	r1, r3, #4
 800cb6e:	6029      	str	r1, [r5, #0]
 800cb70:	0605      	lsls	r5, r0, #24
 800cb72:	d501      	bpl.n	800cb78 <_printf_i+0xe8>
 800cb74:	681e      	ldr	r6, [r3, #0]
 800cb76:	e002      	b.n	800cb7e <_printf_i+0xee>
 800cb78:	0641      	lsls	r1, r0, #25
 800cb7a:	d5fb      	bpl.n	800cb74 <_printf_i+0xe4>
 800cb7c:	881e      	ldrh	r6, [r3, #0]
 800cb7e:	2f6f      	cmp	r7, #111	; 0x6f
 800cb80:	bf0c      	ite	eq
 800cb82:	2308      	moveq	r3, #8
 800cb84:	230a      	movne	r3, #10
 800cb86:	4851      	ldr	r0, [pc, #324]	; (800cccc <_printf_i+0x23c>)
 800cb88:	2100      	movs	r1, #0
 800cb8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb8e:	6865      	ldr	r5, [r4, #4]
 800cb90:	2d00      	cmp	r5, #0
 800cb92:	bfa8      	it	ge
 800cb94:	6821      	ldrge	r1, [r4, #0]
 800cb96:	60a5      	str	r5, [r4, #8]
 800cb98:	bfa4      	itt	ge
 800cb9a:	f021 0104 	bicge.w	r1, r1, #4
 800cb9e:	6021      	strge	r1, [r4, #0]
 800cba0:	b90e      	cbnz	r6, 800cba6 <_printf_i+0x116>
 800cba2:	2d00      	cmp	r5, #0
 800cba4:	d04b      	beq.n	800cc3e <_printf_i+0x1ae>
 800cba6:	4615      	mov	r5, r2
 800cba8:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbac:	fb03 6711 	mls	r7, r3, r1, r6
 800cbb0:	5dc7      	ldrb	r7, [r0, r7]
 800cbb2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbb6:	4637      	mov	r7, r6
 800cbb8:	42bb      	cmp	r3, r7
 800cbba:	460e      	mov	r6, r1
 800cbbc:	d9f4      	bls.n	800cba8 <_printf_i+0x118>
 800cbbe:	2b08      	cmp	r3, #8
 800cbc0:	d10b      	bne.n	800cbda <_printf_i+0x14a>
 800cbc2:	6823      	ldr	r3, [r4, #0]
 800cbc4:	07de      	lsls	r6, r3, #31
 800cbc6:	d508      	bpl.n	800cbda <_printf_i+0x14a>
 800cbc8:	6923      	ldr	r3, [r4, #16]
 800cbca:	6861      	ldr	r1, [r4, #4]
 800cbcc:	4299      	cmp	r1, r3
 800cbce:	bfde      	ittt	le
 800cbd0:	2330      	movle	r3, #48	; 0x30
 800cbd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbd6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cbda:	1b52      	subs	r2, r2, r5
 800cbdc:	6122      	str	r2, [r4, #16]
 800cbde:	464b      	mov	r3, r9
 800cbe0:	4621      	mov	r1, r4
 800cbe2:	4640      	mov	r0, r8
 800cbe4:	f8cd a000 	str.w	sl, [sp]
 800cbe8:	aa03      	add	r2, sp, #12
 800cbea:	f7ff fedf 	bl	800c9ac <_printf_common>
 800cbee:	3001      	adds	r0, #1
 800cbf0:	d14a      	bne.n	800cc88 <_printf_i+0x1f8>
 800cbf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbf6:	b004      	add	sp, #16
 800cbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbfc:	6823      	ldr	r3, [r4, #0]
 800cbfe:	f043 0320 	orr.w	r3, r3, #32
 800cc02:	6023      	str	r3, [r4, #0]
 800cc04:	2778      	movs	r7, #120	; 0x78
 800cc06:	4832      	ldr	r0, [pc, #200]	; (800ccd0 <_printf_i+0x240>)
 800cc08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc0c:	6823      	ldr	r3, [r4, #0]
 800cc0e:	6829      	ldr	r1, [r5, #0]
 800cc10:	061f      	lsls	r7, r3, #24
 800cc12:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc16:	d402      	bmi.n	800cc1e <_printf_i+0x18e>
 800cc18:	065f      	lsls	r7, r3, #25
 800cc1a:	bf48      	it	mi
 800cc1c:	b2b6      	uxthmi	r6, r6
 800cc1e:	07df      	lsls	r7, r3, #31
 800cc20:	bf48      	it	mi
 800cc22:	f043 0320 	orrmi.w	r3, r3, #32
 800cc26:	6029      	str	r1, [r5, #0]
 800cc28:	bf48      	it	mi
 800cc2a:	6023      	strmi	r3, [r4, #0]
 800cc2c:	b91e      	cbnz	r6, 800cc36 <_printf_i+0x1a6>
 800cc2e:	6823      	ldr	r3, [r4, #0]
 800cc30:	f023 0320 	bic.w	r3, r3, #32
 800cc34:	6023      	str	r3, [r4, #0]
 800cc36:	2310      	movs	r3, #16
 800cc38:	e7a6      	b.n	800cb88 <_printf_i+0xf8>
 800cc3a:	4824      	ldr	r0, [pc, #144]	; (800cccc <_printf_i+0x23c>)
 800cc3c:	e7e4      	b.n	800cc08 <_printf_i+0x178>
 800cc3e:	4615      	mov	r5, r2
 800cc40:	e7bd      	b.n	800cbbe <_printf_i+0x12e>
 800cc42:	682b      	ldr	r3, [r5, #0]
 800cc44:	6826      	ldr	r6, [r4, #0]
 800cc46:	1d18      	adds	r0, r3, #4
 800cc48:	6961      	ldr	r1, [r4, #20]
 800cc4a:	6028      	str	r0, [r5, #0]
 800cc4c:	0635      	lsls	r5, r6, #24
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	d501      	bpl.n	800cc56 <_printf_i+0x1c6>
 800cc52:	6019      	str	r1, [r3, #0]
 800cc54:	e002      	b.n	800cc5c <_printf_i+0x1cc>
 800cc56:	0670      	lsls	r0, r6, #25
 800cc58:	d5fb      	bpl.n	800cc52 <_printf_i+0x1c2>
 800cc5a:	8019      	strh	r1, [r3, #0]
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	4615      	mov	r5, r2
 800cc60:	6123      	str	r3, [r4, #16]
 800cc62:	e7bc      	b.n	800cbde <_printf_i+0x14e>
 800cc64:	682b      	ldr	r3, [r5, #0]
 800cc66:	2100      	movs	r1, #0
 800cc68:	1d1a      	adds	r2, r3, #4
 800cc6a:	602a      	str	r2, [r5, #0]
 800cc6c:	681d      	ldr	r5, [r3, #0]
 800cc6e:	6862      	ldr	r2, [r4, #4]
 800cc70:	4628      	mov	r0, r5
 800cc72:	f000 f878 	bl	800cd66 <memchr>
 800cc76:	b108      	cbz	r0, 800cc7c <_printf_i+0x1ec>
 800cc78:	1b40      	subs	r0, r0, r5
 800cc7a:	6060      	str	r0, [r4, #4]
 800cc7c:	6863      	ldr	r3, [r4, #4]
 800cc7e:	6123      	str	r3, [r4, #16]
 800cc80:	2300      	movs	r3, #0
 800cc82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc86:	e7aa      	b.n	800cbde <_printf_i+0x14e>
 800cc88:	462a      	mov	r2, r5
 800cc8a:	4649      	mov	r1, r9
 800cc8c:	4640      	mov	r0, r8
 800cc8e:	6923      	ldr	r3, [r4, #16]
 800cc90:	47d0      	blx	sl
 800cc92:	3001      	adds	r0, #1
 800cc94:	d0ad      	beq.n	800cbf2 <_printf_i+0x162>
 800cc96:	6823      	ldr	r3, [r4, #0]
 800cc98:	079b      	lsls	r3, r3, #30
 800cc9a:	d413      	bmi.n	800ccc4 <_printf_i+0x234>
 800cc9c:	68e0      	ldr	r0, [r4, #12]
 800cc9e:	9b03      	ldr	r3, [sp, #12]
 800cca0:	4298      	cmp	r0, r3
 800cca2:	bfb8      	it	lt
 800cca4:	4618      	movlt	r0, r3
 800cca6:	e7a6      	b.n	800cbf6 <_printf_i+0x166>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	4632      	mov	r2, r6
 800ccac:	4649      	mov	r1, r9
 800ccae:	4640      	mov	r0, r8
 800ccb0:	47d0      	blx	sl
 800ccb2:	3001      	adds	r0, #1
 800ccb4:	d09d      	beq.n	800cbf2 <_printf_i+0x162>
 800ccb6:	3501      	adds	r5, #1
 800ccb8:	68e3      	ldr	r3, [r4, #12]
 800ccba:	9903      	ldr	r1, [sp, #12]
 800ccbc:	1a5b      	subs	r3, r3, r1
 800ccbe:	42ab      	cmp	r3, r5
 800ccc0:	dcf2      	bgt.n	800cca8 <_printf_i+0x218>
 800ccc2:	e7eb      	b.n	800cc9c <_printf_i+0x20c>
 800ccc4:	2500      	movs	r5, #0
 800ccc6:	f104 0619 	add.w	r6, r4, #25
 800ccca:	e7f5      	b.n	800ccb8 <_printf_i+0x228>
 800cccc:	0800dd78 	.word	0x0800dd78
 800ccd0:	0800dd89 	.word	0x0800dd89

0800ccd4 <_realloc_r>:
 800ccd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd8:	4680      	mov	r8, r0
 800ccda:	4614      	mov	r4, r2
 800ccdc:	460e      	mov	r6, r1
 800ccde:	b921      	cbnz	r1, 800ccea <_realloc_r+0x16>
 800cce0:	4611      	mov	r1, r2
 800cce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cce6:	f7ff bb77 	b.w	800c3d8 <_malloc_r>
 800ccea:	b92a      	cbnz	r2, 800ccf8 <_realloc_r+0x24>
 800ccec:	f7ff fcbe 	bl	800c66c <_free_r>
 800ccf0:	4625      	mov	r5, r4
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf8:	f000 f851 	bl	800cd9e <_malloc_usable_size_r>
 800ccfc:	4284      	cmp	r4, r0
 800ccfe:	4607      	mov	r7, r0
 800cd00:	d802      	bhi.n	800cd08 <_realloc_r+0x34>
 800cd02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd06:	d812      	bhi.n	800cd2e <_realloc_r+0x5a>
 800cd08:	4621      	mov	r1, r4
 800cd0a:	4640      	mov	r0, r8
 800cd0c:	f7ff fb64 	bl	800c3d8 <_malloc_r>
 800cd10:	4605      	mov	r5, r0
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d0ed      	beq.n	800ccf2 <_realloc_r+0x1e>
 800cd16:	42bc      	cmp	r4, r7
 800cd18:	4622      	mov	r2, r4
 800cd1a:	4631      	mov	r1, r6
 800cd1c:	bf28      	it	cs
 800cd1e:	463a      	movcs	r2, r7
 800cd20:	f000 f82f 	bl	800cd82 <memcpy>
 800cd24:	4631      	mov	r1, r6
 800cd26:	4640      	mov	r0, r8
 800cd28:	f7ff fca0 	bl	800c66c <_free_r>
 800cd2c:	e7e1      	b.n	800ccf2 <_realloc_r+0x1e>
 800cd2e:	4635      	mov	r5, r6
 800cd30:	e7df      	b.n	800ccf2 <_realloc_r+0x1e>

0800cd32 <memmove>:
 800cd32:	4288      	cmp	r0, r1
 800cd34:	b510      	push	{r4, lr}
 800cd36:	eb01 0402 	add.w	r4, r1, r2
 800cd3a:	d902      	bls.n	800cd42 <memmove+0x10>
 800cd3c:	4284      	cmp	r4, r0
 800cd3e:	4623      	mov	r3, r4
 800cd40:	d807      	bhi.n	800cd52 <memmove+0x20>
 800cd42:	1e43      	subs	r3, r0, #1
 800cd44:	42a1      	cmp	r1, r4
 800cd46:	d008      	beq.n	800cd5a <memmove+0x28>
 800cd48:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd4c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd50:	e7f8      	b.n	800cd44 <memmove+0x12>
 800cd52:	4601      	mov	r1, r0
 800cd54:	4402      	add	r2, r0
 800cd56:	428a      	cmp	r2, r1
 800cd58:	d100      	bne.n	800cd5c <memmove+0x2a>
 800cd5a:	bd10      	pop	{r4, pc}
 800cd5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd60:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd64:	e7f7      	b.n	800cd56 <memmove+0x24>

0800cd66 <memchr>:
 800cd66:	4603      	mov	r3, r0
 800cd68:	b510      	push	{r4, lr}
 800cd6a:	b2c9      	uxtb	r1, r1
 800cd6c:	4402      	add	r2, r0
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	4618      	mov	r0, r3
 800cd72:	d101      	bne.n	800cd78 <memchr+0x12>
 800cd74:	2000      	movs	r0, #0
 800cd76:	e003      	b.n	800cd80 <memchr+0x1a>
 800cd78:	7804      	ldrb	r4, [r0, #0]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	428c      	cmp	r4, r1
 800cd7e:	d1f6      	bne.n	800cd6e <memchr+0x8>
 800cd80:	bd10      	pop	{r4, pc}

0800cd82 <memcpy>:
 800cd82:	440a      	add	r2, r1
 800cd84:	4291      	cmp	r1, r2
 800cd86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cd8a:	d100      	bne.n	800cd8e <memcpy+0xc>
 800cd8c:	4770      	bx	lr
 800cd8e:	b510      	push	{r4, lr}
 800cd90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd94:	4291      	cmp	r1, r2
 800cd96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd9a:	d1f9      	bne.n	800cd90 <memcpy+0xe>
 800cd9c:	bd10      	pop	{r4, pc}

0800cd9e <_malloc_usable_size_r>:
 800cd9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cda2:	1f18      	subs	r0, r3, #4
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	bfbc      	itt	lt
 800cda8:	580b      	ldrlt	r3, [r1, r0]
 800cdaa:	18c0      	addlt	r0, r0, r3
 800cdac:	4770      	bx	lr
	...

0800cdb0 <_init>:
 800cdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb2:	bf00      	nop
 800cdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb6:	bc08      	pop	{r3}
 800cdb8:	469e      	mov	lr, r3
 800cdba:	4770      	bx	lr

0800cdbc <_fini>:
 800cdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdbe:	bf00      	nop
 800cdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdc2:	bc08      	pop	{r3}
 800cdc4:	469e      	mov	lr, r3
 800cdc6:	4770      	bx	lr
