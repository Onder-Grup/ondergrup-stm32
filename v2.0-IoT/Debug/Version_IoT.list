
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d100  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  0800d2e4  0800d2e4  0001d2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1a8  0800e1a8  000209a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800e1a8  0800e1a8  000209a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e1a8  0800e1a8  000209a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1a8  0800e1a8  0001e1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1ac  0800e1ac  0001e1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009a8  20000000  0800e1b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  200009a8  0800eb58  000209a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f70  0800eb58  00020f70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000209d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013250  00000000  00000000  00020a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026af  00000000  00000000  00033c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00036318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de6  00000000  00000000  000374a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af02  00000000  00000000  0003828e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000185f5  00000000  00000000  00053190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fc46  00000000  00000000  0006b785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000510c  00000000  00000000  0010b3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001104d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200009a8 	.word	0x200009a8
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d2cc 	.word	0x0800d2cc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200009ac 	.word	0x200009ac
 8000220:	0800d2cc 	.word	0x0800d2cc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00c fc24 	bl	800ca90 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00b fdf2 	bl	800be40 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f008 fd22 	bl	8008ca8 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00c fc12 	bl	800ca90 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00b fde0 	bl	800be40 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f008 fd10 	bl	8008ca8 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00c fc00 	bl	800ca90 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00b fdce 	bl	800be40 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f008 fcfe 	bl	8008ca8 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00c fbee 	bl	800ca90 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00b fdbc 	bl	800be40 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f008 fcec 	bl	8008ca8 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00c fbf9 	bl	800cae0 <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00c fbe6 	bl	800cae0 <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00c fbaa 	bl	800ca90 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00b fd78 	bl	800be40 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f008 fca8 	bl	8008ca8 <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800d2e4 	.word	0x0800d2e4
 8000364:	200009c4 	.word	0x200009c4
 8000368:	0800d2f4 	.word	0x0800d2f4
 800036c:	0800d300 	.word	0x0800d300
 8000370:	0800d308 	.word	0x0800d308
 8000374:	0800d318 	.word	0x0800d318
 8000378:	0800d324 	.word	0x0800d324
 800037c:	0800d328 	.word	0x0800d328
 8000380:	0800d32c 	.word	0x0800d32c

08000384 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b0c6      	sub	sp, #280	; 0x118
 8000388:	af02      	add	r7, sp, #8
 800038a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800038e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800039c:	6019      	str	r1, [r3, #0]
 800039e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003a6:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003a8:	4a31      	ldr	r2, [pc, #196]	; (8000470 <sendMachineData+0xec>)
 80003aa:	4932      	ldr	r1, [pc, #200]	; (8000474 <sendMachineData+0xf0>)
 80003ac:	4832      	ldr	r0, [pc, #200]	; (8000478 <sendMachineData+0xf4>)
 80003ae:	f00c fb6f 	bl	800ca90 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <sendMachineData+0xf4>)
 80003b4:	f7ff ff36 	bl	8000224 <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c4:	492c      	ldr	r1, [pc, #176]	; (8000478 <sendMachineData+0xf4>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f00b fd3a 	bl	800be40 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f008 fc6a 	bl	8008ca8 <HAL_Delay>

	sprintf(local_txA,
 80003d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e8:	4924      	ldr	r1, [pc, #144]	; (800047c <sendMachineData+0xf8>)
 80003ea:	9100      	str	r1, [sp, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4923      	ldr	r1, [pc, #140]	; (8000480 <sendMachineData+0xfc>)
 80003f2:	f00c fb4d 	bl	800ca90 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80003f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff12 	bl	8000224 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <sendMachineData+0x100>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00c fb3d 	bl	800ca90 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f00b fd05 	bl	800be40 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f008 fc35 	bl	8008ca8 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800043e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff feee 	bl	8000224 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f00b fcf1 	bl	800be40 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f008 fc21 	bl	8008ca8 <HAL_Delay>
}
 8000466:	bf00      	nop
 8000468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800d330 	.word	0x0800d330
 8000474:	0800d340 	.word	0x0800d340
 8000478:	200009c4 	.word	0x200009c4
 800047c:	0800d3bc 	.word	0x0800d3bc
 8000480:	0800d360 	.word	0x0800d360
 8000484:	0800d3d0 	.word	0x0800d3d0

08000488 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af02      	add	r7, sp, #8
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	f023 030f 	bic.w	r3, r3, #15
 8000498:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004a0:	7b7b      	ldrb	r3, [r7, #13]
 80004a2:	f043 030c 	orr.w	r3, r3, #12
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004aa:	7b7b      	ldrb	r3, [r7, #13]
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004b4:	7b3b      	ldrb	r3, [r7, #12]
 80004b6:	f043 030c 	orr.w	r3, r3, #12
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004be:	7b3b      	ldrb	r3, [r7, #12]
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004c8:	bf00      	nop
 80004ca:	4825      	ldr	r0, [pc, #148]	; (8000560 <lcd_send_cmd+0xd8>)
 80004cc:	f009 ffe5 	bl	800a49a <HAL_I2C_GetError>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d0f9      	beq.n	80004ca <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004d6:	bf00      	nop
 80004d8:	4821      	ldr	r0, [pc, #132]	; (8000560 <lcd_send_cmd+0xd8>)
 80004da:	f009 ffd1 	bl	800a480 <HAL_I2C_GetState>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b20      	cmp	r3, #32
 80004e2:	d1f9      	bne.n	80004d8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <lcd_send_cmd+0xdc>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d116      	bne.n	800051a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e00f      	b.n	8000512 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	3310      	adds	r3, #16
 80004f6:	443b      	add	r3, r7
 80004f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f022 0208 	bic.w	r2, r2, #8
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	3310      	adds	r3, #16
 8000506:	443b      	add	r3, r7
 8000508:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	3301      	adds	r3, #1
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d9ec      	bls.n	80004f2 <lcd_send_cmd+0x6a>
 8000518:	e015      	b.n	8000546 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	73bb      	strb	r3, [r7, #14]
 800051e:	e00f      	b.n	8000540 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	3310      	adds	r3, #16
 8000524:	443b      	add	r3, r7
 8000526:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	f042 0208 	orr.w	r2, r2, #8
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	3310      	adds	r3, #16
 8000534:	443b      	add	r3, r7
 8000536:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	73bb      	strb	r3, [r7, #14]
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d9ec      	bls.n	8000520 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000546:	f107 0208 	add.w	r2, r7, #8
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2304      	movs	r3, #4
 8000550:	214e      	movs	r1, #78	; 0x4e
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <lcd_send_cmd+0xd8>)
 8000554:	f009 fb34 	bl	8009bc0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000d3c 	.word	0x20000d3c
 8000564:	20000abe 	.word	0x20000abe

08000568 <lcd_send_data>:

void lcd_send_data (char data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f023 030f 	bic.w	r3, r3, #15
 8000578:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	f043 030d 	orr.w	r3, r3, #13
 8000586:	b2db      	uxtb	r3, r3
 8000588:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800058a:	7b7b      	ldrb	r3, [r7, #13]
 800058c:	f043 0309 	orr.w	r3, r3, #9
 8000590:	b2db      	uxtb	r3, r3
 8000592:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000594:	7b3b      	ldrb	r3, [r7, #12]
 8000596:	f043 030d 	orr.w	r3, r3, #13
 800059a:	b2db      	uxtb	r3, r3
 800059c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	f043 0309 	orr.w	r3, r3, #9
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005a8:	bf00      	nop
 80005aa:	4825      	ldr	r0, [pc, #148]	; (8000640 <lcd_send_data+0xd8>)
 80005ac:	f009 ff75 	bl	800a49a <HAL_I2C_GetError>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d0f9      	beq.n	80005aa <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005b6:	bf00      	nop
 80005b8:	4821      	ldr	r0, [pc, #132]	; (8000640 <lcd_send_data+0xd8>)
 80005ba:	f009 ff61 	bl	800a480 <HAL_I2C_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b20      	cmp	r3, #32
 80005c2:	d1f9      	bne.n	80005b8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <lcd_send_data+0xdc>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d116      	bne.n	80005fa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e00f      	b.n	80005f2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3310      	adds	r3, #16
 80005d6:	443b      	add	r3, r7
 80005d8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f022 0208 	bic.w	r2, r2, #8
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	3310      	adds	r3, #16
 80005e6:	443b      	add	r3, r7
 80005e8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d9ec      	bls.n	80005d2 <lcd_send_data+0x6a>
 80005f8:	e015      	b.n	8000626 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	73bb      	strb	r3, [r7, #14]
 80005fe:	e00f      	b.n	8000620 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	3310      	adds	r3, #16
 8000604:	443b      	add	r3, r7
 8000606:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	f042 0208 	orr.w	r2, r2, #8
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	3310      	adds	r3, #16
 8000614:	443b      	add	r3, r7
 8000616:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	3301      	adds	r3, #1
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d9ec      	bls.n	8000600 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2304      	movs	r3, #4
 8000630:	214e      	movs	r1, #78	; 0x4e
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <lcd_send_data+0xd8>)
 8000634:	f009 fac4 	bl	8009bc0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000d3c 	.word	0x20000d3c
 8000644:	20000abe 	.word	0x20000abe

08000648 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000650:	e006      	b.n	8000660 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff84 	bl	8000568 <lcd_send_data>
	while (*str) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f4      	bne.n	8000652 <lcd_send_string+0xa>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f023 030f 	bic.w	r3, r3, #15
 8000684:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800068c:	7b7b      	ldrb	r3, [r7, #13]
 800068e:	f043 030d 	orr.w	r3, r3, #13
 8000692:	b2db      	uxtb	r3, r3
 8000694:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000696:	7b7b      	ldrb	r3, [r7, #13]
 8000698:	f043 0309 	orr.w	r3, r3, #9
 800069c:	b2db      	uxtb	r3, r3
 800069e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	f043 030d 	orr.w	r3, r3, #13
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80006aa:	7b3b      	ldrb	r3, [r7, #12]
 80006ac:	f043 0309 	orr.w	r3, r3, #9
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006b4:	bf00      	nop
 80006b6:	4825      	ldr	r0, [pc, #148]	; (800074c <lcd_send_char+0xd8>)
 80006b8:	f009 feef 	bl	800a49a <HAL_I2C_GetError>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d0f9      	beq.n	80006b6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006c2:	bf00      	nop
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <lcd_send_char+0xd8>)
 80006c6:	f009 fedb 	bl	800a480 <HAL_I2C_GetState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b20      	cmp	r3, #32
 80006ce:	d1f9      	bne.n	80006c4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <lcd_send_char+0xdc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d116      	bne.n	8000706 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e00f      	b.n	80006fe <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3310      	adds	r3, #16
 80006e2:	443b      	add	r3, r7
 80006e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f022 0208 	bic.w	r2, r2, #8
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	3310      	adds	r3, #16
 80006f2:	443b      	add	r3, r7
 80006f4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	3301      	adds	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d9ec      	bls.n	80006de <lcd_send_char+0x6a>
 8000704:	e015      	b.n	8000732 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	73bb      	strb	r3, [r7, #14]
 800070a:	e00f      	b.n	800072c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	3310      	adds	r3, #16
 8000710:	443b      	add	r3, r7
 8000712:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	f042 0208 	orr.w	r2, r2, #8
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	3310      	adds	r3, #16
 8000720:	443b      	add	r3, r7
 8000722:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	3301      	adds	r3, #1
 800072a:	73bb      	strb	r3, [r7, #14]
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d9ec      	bls.n	800070c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2304      	movs	r3, #4
 800073c:	214e      	movs	r1, #78	; 0x4e
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <lcd_send_char+0xd8>)
 8000740:	f009 fa3e 	bl	8009bc0 <HAL_I2C_Master_Transmit>
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000d3c 	.word	0x20000d3c
 8000750:	20000abe 	.word	0x20000abe

08000754 <lcd_init>:

void lcd_init (void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fe95 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f7ff fe92 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000764:	200c      	movs	r0, #12
 8000766:	f7ff fe8f 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	f7ff fe8c 	bl	8000488 <lcd_send_cmd>
	lcd_backlight(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f86d 	bl	8000850 <lcd_backlight>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	460a      	mov	r2, r1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	4613      	mov	r3, r2
 8000788:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d106      	bne.n	800079e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	337f      	adds	r3, #127	; 0x7f
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fe76 	bl	8000488 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800079c:	e008      	b.n	80007b0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d105      	bne.n	80007b0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	3b41      	subs	r3, #65	; 0x41
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe6c 	bl	8000488 <lcd_send_cmd>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	460b      	mov	r3, r1
 80007c6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffd3 	bl	800077a <lcd_gotoxy>
	lcd_send_string(str);
 80007d4:	6838      	ldr	r0, [r7, #0]
 80007d6:	f7ff ff37 	bl	8000648 <lcd_send_string>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	460b      	mov	r3, r1
 80007ee:	71bb      	strb	r3, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80007f4:	79ba      	ldrb	r2, [r7, #6]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffbd 	bl	800077a <lcd_gotoxy>
    lcd_send_char(ch);
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff36 	bl	8000674 <lcd_send_char>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <lcd_clear>:

void lcd_clear(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fe37 	bl	8000488 <lcd_send_cmd>
    HAL_Delay(2);
 800081a:	2002      	movs	r0, #2
 800081c:	f008 fa44 	bl	8008ca8 <HAL_Delay>

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <lcd_delete_char>:

void lcd_delete_char(unsigned char row, unsigned char column) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff9d 	bl	800077a <lcd_gotoxy>

    lcd_send_char(' ');
 8000840:	2020      	movs	r0, #32
 8000842:	f7ff ff17 	bl	8000674 <lcd_send_char>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <lcd_backlight+0x20>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fe11 	bl	8000488 <lcd_send_cmd>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000abe 	.word	0x20000abe

08000874 <lcd_cursor>:

void lcd_cursor(int state) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d106      	bne.n	8000890 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000882:	200e      	movs	r0, #14
 8000884:	f7ff fe00 	bl	8000488 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000888:	200f      	movs	r0, #15
 800088a:	f7ff fdfd 	bl	8000488 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800088e:	e002      	b.n	8000896 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000890:	200c      	movs	r0, #12
 8000892:	f7ff fdf9 	bl	8000488 <lcd_send_cmd>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008a4:	f3bf 8f4f 	dsb	sy
}
 80008a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008b2:	4904      	ldr	r1, [pc, #16]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_SystemReset+0x28>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ba:	f3bf 8f4f 	dsb	sy
}
 80008be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <__NVIC_SystemReset+0x20>
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	05fa0004 	.word	0x05fa0004

080008cc <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff fca5 	bl	8000224 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	3301      	adds	r3, #1
 80008de:	4618      	mov	r0, r3
 80008e0:	f00b ffe0 	bl	800c8a4 <malloc>
 80008e4:	4603      	mov	r3, r0
 80008e6:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <copyText+0x2a>
        strcpy(result, text);
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f00c f941 	bl	800cb78 <strcpy>
    }
    return result;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <menu>:
        }
    }
    return result;
}

void menu(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000904:	2101      	movs	r1, #1
 8000906:	488f      	ldr	r0, [pc, #572]	; (8000b44 <menu+0x244>)
 8000908:	f008 ff9e 	bl	8009848 <HAL_GPIO_ReadPin>
 800090c:	4603      	mov	r3, r0
 800090e:	2b01      	cmp	r3, #1
 8000910:	f040 808e 	bne.w	8000a30 <menu+0x130>
 8000914:	4b8c      	ldr	r3, [pc, #560]	; (8000b48 <menu+0x248>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	f083 0301 	eor.w	r3, r3, #1
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 8086 	beq.w	8000a30 <menu+0x130>
		menuSayac = menuSayac+1;
 8000924:	4b89      	ldr	r3, [pc, #548]	; (8000b4c <menu+0x24c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4b87      	ldr	r3, [pc, #540]	; (8000b4c <menu+0x24c>)
 800092e:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 33) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8000930:	4b86      	ldr	r3, [pc, #536]	; (8000b4c <menu+0x24c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b21      	cmp	r3, #33	; 0x21
 8000936:	d102      	bne.n	800093e <menu+0x3e>
			menuSayac = 1;
 8000938:	4b84      	ldr	r3, [pc, #528]	; (8000b4c <menu+0x24c>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800093e:	4b83      	ldr	r3, [pc, #524]	; (8000b4c <menu+0x24c>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b12      	cmp	r3, #18
 8000944:	d106      	bne.n	8000954 <menu+0x54>
 8000946:	4b82      	ldr	r3, [pc, #520]	; (8000b50 <menu+0x250>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <menu+0x54>
			menuSayac = 21;
 800094e:	4b7f      	ldr	r3, [pc, #508]	; (8000b4c <menu+0x24c>)
 8000950:	2215      	movs	r2, #21
 8000952:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8000954:	4b7d      	ldr	r3, [pc, #500]	; (8000b4c <menu+0x24c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b08      	cmp	r3, #8
 800095a:	d106      	bne.n	800096a <menu+0x6a>
 800095c:	4b7d      	ldr	r3, [pc, #500]	; (8000b54 <menu+0x254>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <menu+0x6a>
			menuSayac = 16;
 8000964:	4b79      	ldr	r3, [pc, #484]	; (8000b4c <menu+0x24c>)
 8000966:	2210      	movs	r2, #16
 8000968:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800096a:	4b78      	ldr	r3, [pc, #480]	; (8000b4c <menu+0x24c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b0d      	cmp	r3, #13
 8000970:	d106      	bne.n	8000980 <menu+0x80>
 8000972:	4b78      	ldr	r3, [pc, #480]	; (8000b54 <menu+0x254>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d102      	bne.n	8000980 <menu+0x80>
			menuSayac = 16;
 800097a:	4b74      	ldr	r3, [pc, #464]	; (8000b4c <menu+0x24c>)
 800097c:	2210      	movs	r2, #16
 800097e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000980:	4b72      	ldr	r3, [pc, #456]	; (8000b4c <menu+0x24c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b09      	cmp	r3, #9
 8000986:	d106      	bne.n	8000996 <menu+0x96>
 8000988:	4b72      	ldr	r3, [pc, #456]	; (8000b54 <menu+0x254>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d102      	bne.n	8000996 <menu+0x96>
			menuSayac = 13;
 8000990:	4b6e      	ldr	r3, [pc, #440]	; (8000b4c <menu+0x24c>)
 8000992:	220d      	movs	r2, #13
 8000994:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000996:	4b6d      	ldr	r3, [pc, #436]	; (8000b4c <menu+0x24c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b0a      	cmp	r3, #10
 800099c:	d10a      	bne.n	80009b4 <menu+0xb4>
 800099e:	4b6e      	ldr	r3, [pc, #440]	; (8000b58 <menu+0x258>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d003      	beq.n	80009ae <menu+0xae>
 80009a6:	4b6c      	ldr	r3, [pc, #432]	; (8000b58 <menu+0x258>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d102      	bne.n	80009b4 <menu+0xb4>
			menuSayac = 11;
 80009ae:	4b67      	ldr	r3, [pc, #412]	; (8000b4c <menu+0x24c>)
 80009b0:	220b      	movs	r2, #11
 80009b2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80009b4:	4b65      	ldr	r3, [pc, #404]	; (8000b4c <menu+0x24c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b0c      	cmp	r3, #12
 80009ba:	d10e      	bne.n	80009da <menu+0xda>
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <menu+0x25c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d003      	beq.n	80009cc <menu+0xcc>
 80009c4:	4b65      	ldr	r3, [pc, #404]	; (8000b5c <menu+0x25c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d106      	bne.n	80009da <menu+0xda>
 80009cc:	4b61      	ldr	r3, [pc, #388]	; (8000b54 <menu+0x254>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d102      	bne.n	80009da <menu+0xda>
			menuSayac = 16;
 80009d4:	4b5d      	ldr	r3, [pc, #372]	; (8000b4c <menu+0x24c>)
 80009d6:	2210      	movs	r2, #16
 80009d8:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80009da:	4b5c      	ldr	r3, [pc, #368]	; (8000b4c <menu+0x24c>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b0c      	cmp	r3, #12
 80009e0:	d10e      	bne.n	8000a00 <menu+0x100>
 80009e2:	4b5e      	ldr	r3, [pc, #376]	; (8000b5c <menu+0x25c>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d003      	beq.n	80009f2 <menu+0xf2>
 80009ea:	4b5c      	ldr	r3, [pc, #368]	; (8000b5c <menu+0x25c>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d106      	bne.n	8000a00 <menu+0x100>
 80009f2:	4b58      	ldr	r3, [pc, #352]	; (8000b54 <menu+0x254>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	d102      	bne.n	8000a00 <menu+0x100>
			menuSayac = 13;
 80009fa:	4b54      	ldr	r3, [pc, #336]	; (8000b4c <menu+0x24c>)
 80009fc:	220d      	movs	r2, #13
 80009fe:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000a00:	4b52      	ldr	r3, [pc, #328]	; (8000b4c <menu+0x24c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d106      	bne.n	8000a16 <menu+0x116>
 8000a08:	4b55      	ldr	r3, [pc, #340]	; (8000b60 <menu+0x260>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d102      	bne.n	8000a16 <menu+0x116>
			menuSayac = 16;
 8000a10:	4b4e      	ldr	r3, [pc, #312]	; (8000b4c <menu+0x24c>)
 8000a12:	2210      	movs	r2, #16
 8000a14:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8000a16:	4b4d      	ldr	r3, [pc, #308]	; (8000b4c <menu+0x24c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b18      	cmp	r3, #24
 8000a1c:	d106      	bne.n	8000a2c <menu+0x12c>
 8000a1e:	4b4c      	ldr	r3, [pc, #304]	; (8000b50 <menu+0x250>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d102      	bne.n	8000a2c <menu+0x12c>
			menuSayac = 26;
 8000a26:	4b49      	ldr	r3, [pc, #292]	; (8000b4c <menu+0x24c>)
 8000a28:	221a      	movs	r2, #26
 8000a2a:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8000a2c:	f004 fbd4 	bl	80051d8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000a30:	2108      	movs	r1, #8
 8000a32:	484c      	ldr	r0, [pc, #304]	; (8000b64 <menu+0x264>)
 8000a34:	f008 ff08 	bl	8009848 <HAL_GPIO_ReadPin>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d175      	bne.n	8000b2a <menu+0x22a>
 8000a3e:	4b42      	ldr	r3, [pc, #264]	; (8000b48 <menu+0x248>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	f083 0301 	eor.w	r3, r3, #1
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d06e      	beq.n	8000b2a <menu+0x22a>
		if (menuSayac <= 1) {
 8000a4c:	4b3f      	ldr	r3, [pc, #252]	; (8000b4c <menu+0x24c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d802      	bhi.n	8000a5a <menu+0x15a>
			menuSayac = 33;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8000a54:	4b3d      	ldr	r3, [pc, #244]	; (8000b4c <menu+0x24c>)
 8000a56:	2221      	movs	r2, #33	; 0x21
 8000a58:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8000a5a:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <menu+0x24c>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <menu+0x24c>)
 8000a64:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8000a66:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <menu+0x24c>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b14      	cmp	r3, #20
 8000a6c:	d106      	bne.n	8000a7c <menu+0x17c>
 8000a6e:	4b38      	ldr	r3, [pc, #224]	; (8000b50 <menu+0x250>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d102      	bne.n	8000a7c <menu+0x17c>
			menuSayac = 17;
 8000a76:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <menu+0x24c>)
 8000a78:	2211      	movs	r2, #17
 8000a7a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8000a7c:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <menu+0x24c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d106      	bne.n	8000a92 <menu+0x192>
 8000a84:	4b33      	ldr	r3, [pc, #204]	; (8000b54 <menu+0x254>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <menu+0x192>
			menuSayac = 7;
 8000a8c:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <menu+0x24c>)
 8000a8e:	2207      	movs	r2, #7
 8000a90:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000a92:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <menu+0x24c>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b0f      	cmp	r3, #15
 8000a98:	d106      	bne.n	8000aa8 <menu+0x1a8>
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <menu+0x254>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d102      	bne.n	8000aa8 <menu+0x1a8>
			menuSayac = 12;
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <menu+0x24c>)
 8000aa4:	220c      	movs	r2, #12
 8000aa6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <menu+0x24c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b0c      	cmp	r3, #12
 8000aae:	d106      	bne.n	8000abe <menu+0x1be>
 8000ab0:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <menu+0x254>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d102      	bne.n	8000abe <menu+0x1be>
			menuSayac = 8;
 8000ab8:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <menu+0x24c>)
 8000aba:	2208      	movs	r2, #8
 8000abc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000abe:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <menu+0x24c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b0a      	cmp	r3, #10
 8000ac4:	d10a      	bne.n	8000adc <menu+0x1dc>
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <menu+0x258>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d003      	beq.n	8000ad6 <menu+0x1d6>
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <menu+0x258>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d102      	bne.n	8000adc <menu+0x1dc>
			menuSayac = 9;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <menu+0x24c>)
 8000ad8:	2209      	movs	r2, #9
 8000ada:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <menu+0x24c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b0c      	cmp	r3, #12
 8000ae2:	d10a      	bne.n	8000afa <menu+0x1fa>
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <menu+0x25c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d003      	beq.n	8000af4 <menu+0x1f4>
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <menu+0x25c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d102      	bne.n	8000afa <menu+0x1fa>
			menuSayac = 11;
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <menu+0x24c>)
 8000af6:	220b      	movs	r2, #11
 8000af8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <menu+0x24c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b0f      	cmp	r3, #15
 8000b00:	d106      	bne.n	8000b10 <menu+0x210>
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <menu+0x260>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d102      	bne.n	8000b10 <menu+0x210>
			menuSayac = 14;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <menu+0x24c>)
 8000b0c:	220e      	movs	r2, #14
 8000b0e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <menu+0x24c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b19      	cmp	r3, #25
 8000b16:	d106      	bne.n	8000b26 <menu+0x226>
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <menu+0x250>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <menu+0x226>
			menuSayac = 23;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <menu+0x24c>)
 8000b22:	2217      	movs	r2, #23
 8000b24:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8000b26:	f004 fb57 	bl	80051d8 <bekle>
	}

	if (menuSayac == 0) {
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <menu+0x24c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d134      	bne.n	8000b9c <menu+0x29c>
		if(dilSecim == 0) {
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <menu+0x268>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d122      	bne.n	8000b80 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8000b3a:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <menu+0x26c>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	2001      	movs	r0, #1
 8000b40:	e016      	b.n	8000b70 <menu+0x270>
 8000b42:	bf00      	nop
 8000b44:	40010800 	.word	0x40010800
 8000b48:	20000b5b 	.word	0x20000b5b
 8000b4c:	20000b2c 	.word	0x20000b2c
 8000b50:	20000b3b 	.word	0x20000b3b
 8000b54:	20000b34 	.word	0x20000b34
 8000b58:	20000b35 	.word	0x20000b35
 8000b5c:	20000b36 	.word	0x20000b36
 8000b60:	20000b37 	.word	0x20000b37
 8000b64:	40011000 	.word	0x40011000
 8000b68:	20000b4d 	.word	0x20000b4d
 8000b6c:	0800d3e0 	.word	0x0800d3e0
 8000b70:	f7ff fe22 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8000b74:	4a94      	ldr	r2, [pc, #592]	; (8000dc8 <menu+0x4c8>)
 8000b76:	2101      	movs	r1, #1
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f7ff fe1d 	bl	80007b8 <lcd_print>
 8000b7e:	e00d      	b.n	8000b9c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8000b80:	4b92      	ldr	r3, [pc, #584]	; (8000dcc <menu+0x4cc>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d109      	bne.n	8000b9c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8000b88:	4a91      	ldr	r2, [pc, #580]	; (8000dd0 <menu+0x4d0>)
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f7ff fe13 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8000b92:	4a90      	ldr	r2, [pc, #576]	; (8000dd4 <menu+0x4d4>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	2002      	movs	r0, #2
 8000b98:	f7ff fe0e 	bl	80007b8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8000b9c:	4b8e      	ldr	r3, [pc, #568]	; (8000dd8 <menu+0x4d8>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	f040 82b5 	bne.w	8001110 <menu+0x810>
		if(dilSecim == 0) {
 8000ba6:	4b89      	ldr	r3, [pc, #548]	; (8000dcc <menu+0x4cc>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d105      	bne.n	8000bba <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8000bae:	4a8b      	ldr	r2, [pc, #556]	; (8000ddc <menu+0x4dc>)
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff fe00 	bl	80007b8 <lcd_print>
 8000bb8:	e008      	b.n	8000bcc <menu+0x2cc>
		} else if(dilSecim == 1) {
 8000bba:	4b84      	ldr	r3, [pc, #528]	; (8000dcc <menu+0x4cc>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d104      	bne.n	8000bcc <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8000bc2:	4a87      	ldr	r2, [pc, #540]	; (8000de0 <menu+0x4e0>)
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff fdf6 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8000bcc:	4b85      	ldr	r3, [pc, #532]	; (8000de4 <menu+0x4e4>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d123      	bne.n	8000c1c <menu+0x31c>
			if(dilSecim == 0) {
 8000bd4:	4b7d      	ldr	r3, [pc, #500]	; (8000dcc <menu+0x4cc>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d105      	bne.n	8000be8 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8000bdc:	4a82      	ldr	r2, [pc, #520]	; (8000de8 <menu+0x4e8>)
 8000bde:	2101      	movs	r1, #1
 8000be0:	2002      	movs	r0, #2
 8000be2:	f7ff fde9 	bl	80007b8 <lcd_print>
 8000be6:	e008      	b.n	8000bfa <menu+0x2fa>

			} else if(dilSecim == 1) {
 8000be8:	4b78      	ldr	r3, [pc, #480]	; (8000dcc <menu+0x4cc>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d104      	bne.n	8000bfa <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8000bf0:	4a7e      	ldr	r2, [pc, #504]	; (8000dec <menu+0x4ec>)
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f7ff fddf 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8000bfa:	4a7d      	ldr	r2, [pc, #500]	; (8000df0 <menu+0x4f0>)
 8000bfc:	210f      	movs	r1, #15
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f7ff fdda 	bl	80007b8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000c04:	4b7b      	ldr	r3, [pc, #492]	; (8000df4 <menu+0x4f4>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	220a      	movs	r2, #10
 8000c0a:	497b      	ldr	r1, [pc, #492]	; (8000df8 <menu+0x4f8>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f00b fe47 	bl	800c8a0 <itoa>
			lcd_print(2, 14, snum);
 8000c12:	4a79      	ldr	r2, [pc, #484]	; (8000df8 <menu+0x4f8>)
 8000c14:	210e      	movs	r1, #14
 8000c16:	2002      	movs	r0, #2
 8000c18:	f7ff fdce 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8000c1c:	4b71      	ldr	r3, [pc, #452]	; (8000de4 <menu+0x4e4>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d123      	bne.n	8000c6c <menu+0x36c>
			if(dilSecim == 0) {
 8000c24:	4b69      	ldr	r3, [pc, #420]	; (8000dcc <menu+0x4cc>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d105      	bne.n	8000c38 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8000c2c:	4a73      	ldr	r2, [pc, #460]	; (8000dfc <menu+0x4fc>)
 8000c2e:	2101      	movs	r1, #1
 8000c30:	2002      	movs	r0, #2
 8000c32:	f7ff fdc1 	bl	80007b8 <lcd_print>
 8000c36:	e008      	b.n	8000c4a <menu+0x34a>
			} else if(dilSecim == 1) {
 8000c38:	4b64      	ldr	r3, [pc, #400]	; (8000dcc <menu+0x4cc>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d104      	bne.n	8000c4a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8000c40:	4a6f      	ldr	r2, [pc, #444]	; (8000e00 <menu+0x500>)
 8000c42:	2101      	movs	r1, #1
 8000c44:	2002      	movs	r0, #2
 8000c46:	f7ff fdb7 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000c4a:	4a6e      	ldr	r2, [pc, #440]	; (8000e04 <menu+0x504>)
 8000c4c:	210f      	movs	r1, #15
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f7ff fdb2 	bl	80007b8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8000c54:	4b6c      	ldr	r3, [pc, #432]	; (8000e08 <menu+0x508>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	220a      	movs	r2, #10
 8000c5a:	4967      	ldr	r1, [pc, #412]	; (8000df8 <menu+0x4f8>)
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f00b fe1f 	bl	800c8a0 <itoa>
			lcd_print(2, 14, snum);
 8000c62:	4a65      	ldr	r2, [pc, #404]	; (8000df8 <menu+0x4f8>)
 8000c64:	210e      	movs	r1, #14
 8000c66:	2002      	movs	r0, #2
 8000c68:	f7ff fda6 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8000c6c:	4b5d      	ldr	r3, [pc, #372]	; (8000de4 <menu+0x4e4>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d123      	bne.n	8000cbc <menu+0x3bc>
			if(dilSecim == 0) {
 8000c74:	4b55      	ldr	r3, [pc, #340]	; (8000dcc <menu+0x4cc>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d105      	bne.n	8000c88 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8000c7c:	4a63      	ldr	r2, [pc, #396]	; (8000e0c <menu+0x50c>)
 8000c7e:	2101      	movs	r1, #1
 8000c80:	2002      	movs	r0, #2
 8000c82:	f7ff fd99 	bl	80007b8 <lcd_print>
 8000c86:	e008      	b.n	8000c9a <menu+0x39a>
			} else if(dilSecim == 1) {
 8000c88:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <menu+0x4cc>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d104      	bne.n	8000c9a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8000c90:	4a5f      	ldr	r2, [pc, #380]	; (8000e10 <menu+0x510>)
 8000c92:	2101      	movs	r1, #1
 8000c94:	2002      	movs	r0, #2
 8000c96:	f7ff fd8f 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000c9a:	4a5a      	ldr	r2, [pc, #360]	; (8000e04 <menu+0x504>)
 8000c9c:	210f      	movs	r1, #15
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	f7ff fd8a 	bl	80007b8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8000ca4:	4b5b      	ldr	r3, [pc, #364]	; (8000e14 <menu+0x514>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	220a      	movs	r2, #10
 8000caa:	4953      	ldr	r1, [pc, #332]	; (8000df8 <menu+0x4f8>)
 8000cac:	4618      	mov	r0, r3
 8000cae:	f00b fdf7 	bl	800c8a0 <itoa>
			lcd_print(2, 14, snum);
 8000cb2:	4a51      	ldr	r2, [pc, #324]	; (8000df8 <menu+0x4f8>)
 8000cb4:	210e      	movs	r1, #14
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f7ff fd7e 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8000cbc:	4b49      	ldr	r3, [pc, #292]	; (8000de4 <menu+0x4e4>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d123      	bne.n	8000d0c <menu+0x40c>
			if(dilSecim == 0) {
 8000cc4:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <menu+0x4cc>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d105      	bne.n	8000cd8 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8000ccc:	4a52      	ldr	r2, [pc, #328]	; (8000e18 <menu+0x518>)
 8000cce:	2101      	movs	r1, #1
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f7ff fd71 	bl	80007b8 <lcd_print>
 8000cd6:	e008      	b.n	8000cea <menu+0x3ea>
			} else if(dilSecim == 1) {
 8000cd8:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <menu+0x4cc>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d104      	bne.n	8000cea <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8000ce0:	4a4e      	ldr	r2, [pc, #312]	; (8000e1c <menu+0x51c>)
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f7ff fd67 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000cea:	4a46      	ldr	r2, [pc, #280]	; (8000e04 <menu+0x504>)
 8000cec:	210f      	movs	r1, #15
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f7ff fd62 	bl	80007b8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000cf4:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <menu+0x520>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	220a      	movs	r2, #10
 8000cfa:	493f      	ldr	r1, [pc, #252]	; (8000df8 <menu+0x4f8>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00b fdcf 	bl	800c8a0 <itoa>
			lcd_print(2, 14, snum);
 8000d02:	4a3d      	ldr	r2, [pc, #244]	; (8000df8 <menu+0x4f8>)
 8000d04:	210e      	movs	r1, #14
 8000d06:	2002      	movs	r0, #2
 8000d08:	f7ff fd56 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8000d0c:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <menu+0x4e4>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d123      	bne.n	8000d5c <menu+0x45c>
			if(dilSecim == 0) {
 8000d14:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <menu+0x4cc>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d105      	bne.n	8000d28 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8000d1c:	4a41      	ldr	r2, [pc, #260]	; (8000e24 <menu+0x524>)
 8000d1e:	2101      	movs	r1, #1
 8000d20:	2002      	movs	r0, #2
 8000d22:	f7ff fd49 	bl	80007b8 <lcd_print>
 8000d26:	e008      	b.n	8000d3a <menu+0x43a>
			} else if(dilSecim == 1) {
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <menu+0x4cc>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d104      	bne.n	8000d3a <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8000d30:	4a3d      	ldr	r2, [pc, #244]	; (8000e28 <menu+0x528>)
 8000d32:	2101      	movs	r1, #1
 8000d34:	2002      	movs	r0, #2
 8000d36:	f7ff fd3f 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000d3a:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <menu+0x504>)
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f7ff fd3a 	bl	80007b8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8000d44:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <menu+0x52c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	220a      	movs	r2, #10
 8000d4a:	492b      	ldr	r1, [pc, #172]	; (8000df8 <menu+0x4f8>)
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f00b fda7 	bl	800c8a0 <itoa>
			lcd_print(2, 14, snum);
 8000d52:	4a29      	ldr	r2, [pc, #164]	; (8000df8 <menu+0x4f8>)
 8000d54:	210e      	movs	r1, #14
 8000d56:	2002      	movs	r0, #2
 8000d58:	f7ff fd2e 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <menu+0x4e4>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b05      	cmp	r3, #5
 8000d62:	d123      	bne.n	8000dac <menu+0x4ac>
			if(dilSecim == 0) {
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <menu+0x4cc>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d105      	bne.n	8000d78 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8000d6c:	4a30      	ldr	r2, [pc, #192]	; (8000e30 <menu+0x530>)
 8000d6e:	2101      	movs	r1, #1
 8000d70:	2002      	movs	r0, #2
 8000d72:	f7ff fd21 	bl	80007b8 <lcd_print>
 8000d76:	e008      	b.n	8000d8a <menu+0x48a>
			} else if(dilSecim == 1) {
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <menu+0x4cc>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d104      	bne.n	8000d8a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8000d80:	4a2c      	ldr	r2, [pc, #176]	; (8000e34 <menu+0x534>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	2002      	movs	r0, #2
 8000d86:	f7ff fd17 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <menu+0x504>)
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	2002      	movs	r0, #2
 8000d90:	f7ff fd12 	bl	80007b8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <menu+0x538>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	220a      	movs	r2, #10
 8000d9a:	4917      	ldr	r1, [pc, #92]	; (8000df8 <menu+0x4f8>)
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f00b fd7f 	bl	800c8a0 <itoa>
			lcd_print(2, 14, snum);
 8000da2:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <menu+0x4f8>)
 8000da4:	210e      	movs	r1, #14
 8000da6:	2002      	movs	r0, #2
 8000da8:	f7ff fd06 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <menu+0x4e4>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b06      	cmp	r3, #6
 8000db2:	d15f      	bne.n	8000e74 <menu+0x574>
			if(dilSecim == 0) {
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <menu+0x4cc>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d141      	bne.n	8000e40 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <menu+0x53c>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f7ff fcf9 	bl	80007b8 <lcd_print>
 8000dc6:	e044      	b.n	8000e52 <menu+0x552>
 8000dc8:	0800d3f4 	.word	0x0800d3f4
 8000dcc:	20000b4d 	.word	0x20000b4d
 8000dd0:	0800d408 	.word	0x0800d408
 8000dd4:	0800d41c 	.word	0x0800d41c
 8000dd8:	20000b2c 	.word	0x20000b2c
 8000ddc:	0800d430 	.word	0x0800d430
 8000de0:	0800d444 	.word	0x0800d444
 8000de4:	20000b2e 	.word	0x20000b2e
 8000de8:	0800d458 	.word	0x0800d458
 8000dec:	0800d468 	.word	0x0800d468
 8000df0:	0800d478 	.word	0x0800d478
 8000df4:	20000b4e 	.word	0x20000b4e
 8000df8:	20000b00 	.word	0x20000b00
 8000dfc:	0800d47c 	.word	0x0800d47c
 8000e00:	0800d48c 	.word	0x0800d48c
 8000e04:	0800d49c 	.word	0x0800d49c
 8000e08:	20000b4f 	.word	0x20000b4f
 8000e0c:	0800d4a0 	.word	0x0800d4a0
 8000e10:	0800d4b0 	.word	0x0800d4b0
 8000e14:	20000b50 	.word	0x20000b50
 8000e18:	0800d4c0 	.word	0x0800d4c0
 8000e1c:	0800d4d0 	.word	0x0800d4d0
 8000e20:	20000b51 	.word	0x20000b51
 8000e24:	0800d4e0 	.word	0x0800d4e0
 8000e28:	0800d4f0 	.word	0x0800d4f0
 8000e2c:	20000b52 	.word	0x20000b52
 8000e30:	0800d500 	.word	0x0800d500
 8000e34:	0800d510 	.word	0x0800d510
 8000e38:	20000b53 	.word	0x20000b53
 8000e3c:	0800d520 	.word	0x0800d520
			} else if(dilSecim == 1) {
 8000e40:	4b4f      	ldr	r3, [pc, #316]	; (8000f80 <menu+0x680>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d104      	bne.n	8000e52 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8000e48:	4a4e      	ldr	r2, [pc, #312]	; (8000f84 <menu+0x684>)
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f7ff fcb3 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000e52:	4a4d      	ldr	r2, [pc, #308]	; (8000f88 <menu+0x688>)
 8000e54:	210f      	movs	r1, #15
 8000e56:	2002      	movs	r0, #2
 8000e58:	f7ff fcae 	bl	80007b8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000e5c:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <menu+0x68c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	220a      	movs	r2, #10
 8000e62:	494b      	ldr	r1, [pc, #300]	; (8000f90 <menu+0x690>)
 8000e64:	4618      	mov	r0, r3
 8000e66:	f00b fd1b 	bl	800c8a0 <itoa>
			lcd_print(2, 14, snum);
 8000e6a:	4a49      	ldr	r2, [pc, #292]	; (8000f90 <menu+0x690>)
 8000e6c:	210e      	movs	r1, #14
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f7ff fca2 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000e74:	4b47      	ldr	r3, [pc, #284]	; (8000f94 <menu+0x694>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b07      	cmp	r3, #7
 8000e7a:	d123      	bne.n	8000ec4 <menu+0x5c4>
			if(dilSecim == 0) {
 8000e7c:	4b40      	ldr	r3, [pc, #256]	; (8000f80 <menu+0x680>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d105      	bne.n	8000e90 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8000e84:	4a44      	ldr	r2, [pc, #272]	; (8000f98 <menu+0x698>)
 8000e86:	2101      	movs	r1, #1
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f7ff fc95 	bl	80007b8 <lcd_print>
 8000e8e:	e008      	b.n	8000ea2 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8000e90:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <menu+0x680>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d104      	bne.n	8000ea2 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8000e98:	4a40      	ldr	r2, [pc, #256]	; (8000f9c <menu+0x69c>)
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f7ff fc8b 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000ea2:	4a39      	ldr	r2, [pc, #228]	; (8000f88 <menu+0x688>)
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f7ff fc86 	bl	80007b8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000eac:	4b3c      	ldr	r3, [pc, #240]	; (8000fa0 <menu+0x6a0>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	220a      	movs	r2, #10
 8000eb2:	4937      	ldr	r1, [pc, #220]	; (8000f90 <menu+0x690>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f00b fcf3 	bl	800c8a0 <itoa>
			lcd_print(2, 14, snum);
 8000eba:	4a35      	ldr	r2, [pc, #212]	; (8000f90 <menu+0x690>)
 8000ebc:	210e      	movs	r1, #14
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f7ff fc7a 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000ec4:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <menu+0x694>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b08      	cmp	r3, #8
 8000eca:	d123      	bne.n	8000f14 <menu+0x614>
			if(dilSecim == 0) {
 8000ecc:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <menu+0x680>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d105      	bne.n	8000ee0 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8000ed4:	4a33      	ldr	r2, [pc, #204]	; (8000fa4 <menu+0x6a4>)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f7ff fc6d 	bl	80007b8 <lcd_print>
 8000ede:	e008      	b.n	8000ef2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8000ee0:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <menu+0x680>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d104      	bne.n	8000ef2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8000ee8:	4a2f      	ldr	r2, [pc, #188]	; (8000fa8 <menu+0x6a8>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	2002      	movs	r0, #2
 8000eee:	f7ff fc63 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000ef2:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <menu+0x688>)
 8000ef4:	210f      	movs	r1, #15
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f7ff fc5e 	bl	80007b8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000efc:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <menu+0x6ac>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	220a      	movs	r2, #10
 8000f02:	4923      	ldr	r1, [pc, #140]	; (8000f90 <menu+0x690>)
 8000f04:	4618      	mov	r0, r3
 8000f06:	f00b fccb 	bl	800c8a0 <itoa>
			lcd_print(2, 14, snum);
 8000f0a:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <menu+0x690>)
 8000f0c:	210e      	movs	r1, #14
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f7ff fc52 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <menu+0x694>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b09      	cmp	r3, #9
 8000f1a:	d123      	bne.n	8000f64 <menu+0x664>
			if(dilSecim == 0) {
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <menu+0x680>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d105      	bne.n	8000f30 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8000f24:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <menu+0x6b0>)
 8000f26:	2101      	movs	r1, #1
 8000f28:	2002      	movs	r0, #2
 8000f2a:	f7ff fc45 	bl	80007b8 <lcd_print>
 8000f2e:	e008      	b.n	8000f42 <menu+0x642>
			} else if(dilSecim == 1) {
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <menu+0x680>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d104      	bne.n	8000f42 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8000f38:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <menu+0x6b4>)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	2002      	movs	r0, #2
 8000f3e:	f7ff fc3b 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8000f42:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <menu+0x6b8>)
 8000f44:	2110      	movs	r1, #16
 8000f46:	2002      	movs	r0, #2
 8000f48:	f7ff fc36 	bl	80007b8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <menu+0x6bc>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	220a      	movs	r2, #10
 8000f52:	490f      	ldr	r1, [pc, #60]	; (8000f90 <menu+0x690>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	f00b fca3 	bl	800c8a0 <itoa>
			lcd_print(2, 15, snum);
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <menu+0x690>)
 8000f5c:	210f      	movs	r1, #15
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f7ff fc2a 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <menu+0x694>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b0a      	cmp	r3, #10
 8000f6a:	d134      	bne.n	8000fd6 <menu+0x6d6>
			if(dilSecim == 0) {
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <menu+0x680>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d127      	bne.n	8000fc4 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <menu+0x6c0>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f7ff fc1d 	bl	80007b8 <lcd_print>
 8000f7e:	e02a      	b.n	8000fd6 <menu+0x6d6>
 8000f80:	20000b4d 	.word	0x20000b4d
 8000f84:	0800d530 	.word	0x0800d530
 8000f88:	0800d49c 	.word	0x0800d49c
 8000f8c:	20000b54 	.word	0x20000b54
 8000f90:	20000b00 	.word	0x20000b00
 8000f94:	20000b2e 	.word	0x20000b2e
 8000f98:	0800d540 	.word	0x0800d540
 8000f9c:	0800d550 	.word	0x0800d550
 8000fa0:	20000b55 	.word	0x20000b55
 8000fa4:	0800d560 	.word	0x0800d560
 8000fa8:	0800d570 	.word	0x0800d570
 8000fac:	20000b56 	.word	0x20000b56
 8000fb0:	0800d580 	.word	0x0800d580
 8000fb4:	0800d590 	.word	0x0800d590
 8000fb8:	0800d5a0 	.word	0x0800d5a0
 8000fbc:	20000b57 	.word	0x20000b57
 8000fc0:	0800d5a4 	.word	0x0800d5a4
			} else if(dilSecim == 1) {
 8000fc4:	4b82      	ldr	r3, [pc, #520]	; (80011d0 <menu+0x8d0>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d104      	bne.n	8000fd6 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8000fcc:	4a81      	ldr	r2, [pc, #516]	; (80011d4 <menu+0x8d4>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f7ff fbf1 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	487f      	ldr	r0, [pc, #508]	; (80011d8 <menu+0x8d8>)
 8000fda:	f008 fc35 	bl	8009848 <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d119      	bne.n	8001018 <menu+0x718>
 8000fe4:	4b7d      	ldr	r3, [pc, #500]	; (80011dc <menu+0x8dc>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f083 0301 	eor.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d012      	beq.n	8001018 <menu+0x718>
 8000ff2:	4b7b      	ldr	r3, [pc, #492]	; (80011e0 <menu+0x8e0>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10e      	bne.n	8001018 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000ffa:	4b7a      	ldr	r3, [pc, #488]	; (80011e4 <menu+0x8e4>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b78      	ldr	r3, [pc, #480]	; (80011e4 <menu+0x8e4>)
 8001004:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001006:	4b77      	ldr	r3, [pc, #476]	; (80011e4 <menu+0x8e4>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b0a      	cmp	r3, #10
 800100c:	d902      	bls.n	8001014 <menu+0x714>
				hataGostermeSirasi = 0;
 800100e:	4b75      	ldr	r3, [pc, #468]	; (80011e4 <menu+0x8e4>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001014:	f004 f8e0 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001018:	2104      	movs	r1, #4
 800101a:	486f      	ldr	r0, [pc, #444]	; (80011d8 <menu+0x8d8>)
 800101c:	f008 fc14 	bl	8009848 <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b01      	cmp	r3, #1
 8001024:	d119      	bne.n	800105a <menu+0x75a>
 8001026:	4b6d      	ldr	r3, [pc, #436]	; (80011dc <menu+0x8dc>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f083 0301 	eor.w	r3, r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d012      	beq.n	800105a <menu+0x75a>
 8001034:	4b6a      	ldr	r3, [pc, #424]	; (80011e0 <menu+0x8e0>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10e      	bne.n	800105a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 800103c:	4b69      	ldr	r3, [pc, #420]	; (80011e4 <menu+0x8e4>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	3b01      	subs	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b67      	ldr	r3, [pc, #412]	; (80011e4 <menu+0x8e4>)
 8001046:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001048:	4b66      	ldr	r3, [pc, #408]	; (80011e4 <menu+0x8e4>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b0b      	cmp	r3, #11
 800104e:	d902      	bls.n	8001056 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001050:	4b64      	ldr	r3, [pc, #400]	; (80011e4 <menu+0x8e4>)
 8001052:	220a      	movs	r2, #10
 8001054:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001056:	f004 f8bf 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800105a:	2108      	movs	r1, #8
 800105c:	485e      	ldr	r0, [pc, #376]	; (80011d8 <menu+0x8d8>)
 800105e:	f008 fbf3 	bl	8009848 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b01      	cmp	r3, #1
 8001066:	d153      	bne.n	8001110 <menu+0x810>
 8001068:	4b5c      	ldr	r3, [pc, #368]	; (80011dc <menu+0x8dc>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	f083 0301 	eor.w	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d04c      	beq.n	8001110 <menu+0x810>
 8001076:	4b5b      	ldr	r3, [pc, #364]	; (80011e4 <menu+0x8e4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b0a      	cmp	r3, #10
 800107c:	d148      	bne.n	8001110 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 800107e:	4b5a      	ldr	r3, [pc, #360]	; (80011e8 <menu+0x8e8>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	4b59      	ldr	r3, [pc, #356]	; (80011ec <menu+0x8ec>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 800108c:	4b58      	ldr	r3, [pc, #352]	; (80011f0 <menu+0x8f0>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	4b56      	ldr	r3, [pc, #344]	; (80011ec <menu+0x8ec>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800109a:	4b56      	ldr	r3, [pc, #344]	; (80011f4 <menu+0x8f4>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	4b52      	ldr	r3, [pc, #328]	; (80011ec <menu+0x8ec>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80010a8:	4b53      	ldr	r3, [pc, #332]	; (80011f8 <menu+0x8f8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	4b4f      	ldr	r3, [pc, #316]	; (80011ec <menu+0x8ec>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80010b6:	4b51      	ldr	r3, [pc, #324]	; (80011fc <menu+0x8fc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	4b4b      	ldr	r3, [pc, #300]	; (80011ec <menu+0x8ec>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80010c4:	4b4e      	ldr	r3, [pc, #312]	; (8001200 <menu+0x900>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	4b48      	ldr	r3, [pc, #288]	; (80011ec <menu+0x8ec>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80010d2:	4b4c      	ldr	r3, [pc, #304]	; (8001204 <menu+0x904>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	4b44      	ldr	r3, [pc, #272]	; (80011ec <menu+0x8ec>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80010e0:	4b49      	ldr	r3, [pc, #292]	; (8001208 <menu+0x908>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	4b41      	ldr	r3, [pc, #260]	; (80011ec <menu+0x8ec>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80010ee:	4b47      	ldr	r3, [pc, #284]	; (800120c <menu+0x90c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <menu+0x8ec>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80010fc:	4b44      	ldr	r3, [pc, #272]	; (8001210 <menu+0x910>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <menu+0x8ec>)
 8001104:	2200      	movs	r2, #0
 8001106:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 800110a:	4b42      	ldr	r3, [pc, #264]	; (8001214 <menu+0x914>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001110:	4b41      	ldr	r3, [pc, #260]	; (8001218 <menu+0x918>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b02      	cmp	r3, #2
 8001116:	f040 80fc 	bne.w	8001312 <menu+0xa12>
		if(dilSecim == 0) {
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <menu+0x8d0>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d105      	bne.n	800112e <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001122:	4a3e      	ldr	r2, [pc, #248]	; (800121c <menu+0x91c>)
 8001124:	2101      	movs	r1, #1
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff fb46 	bl	80007b8 <lcd_print>
 800112c:	e008      	b.n	8001140 <menu+0x840>
		} else if(dilSecim == 1) {
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <menu+0x8d0>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d104      	bne.n	8001140 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001136:	4a3a      	ldr	r2, [pc, #232]	; (8001220 <menu+0x920>)
 8001138:	2101      	movs	r1, #1
 800113a:	2001      	movs	r0, #1
 800113c:	f7ff fb3c 	bl	80007b8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001140:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <menu+0x8e0>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d003      	beq.n	8001150 <menu+0x850>
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <menu+0x8e0>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d112      	bne.n	8001176 <menu+0x876>
			if(dilSecim == 0) {
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <menu+0x8d0>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d105      	bne.n	8001164 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001158:	4a32      	ldr	r2, [pc, #200]	; (8001224 <menu+0x924>)
 800115a:	2101      	movs	r1, #1
 800115c:	2002      	movs	r0, #2
 800115e:	f7ff fb2b 	bl	80007b8 <lcd_print>
 8001162:	e008      	b.n	8001176 <menu+0x876>
			} else if(dilSecim == 1) {
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <menu+0x8d0>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d104      	bne.n	8001176 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 800116c:	4a2e      	ldr	r2, [pc, #184]	; (8001228 <menu+0x928>)
 800116e:	2101      	movs	r1, #1
 8001170:	2002      	movs	r0, #2
 8001172:	f7ff fb21 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <menu+0x92c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d116      	bne.n	80011ac <menu+0x8ac>
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <menu+0x8e0>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d112      	bne.n	80011ac <menu+0x8ac>
			if(dilSecim == 0) {
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <menu+0x8d0>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d105      	bne.n	800119a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 800118e:	4a28      	ldr	r2, [pc, #160]	; (8001230 <menu+0x930>)
 8001190:	2101      	movs	r1, #1
 8001192:	2002      	movs	r0, #2
 8001194:	f7ff fb10 	bl	80007b8 <lcd_print>
 8001198:	e008      	b.n	80011ac <menu+0x8ac>
			} else if(dilSecim == 1) {
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <menu+0x8d0>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d104      	bne.n	80011ac <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 80011a2:	4a24      	ldr	r2, [pc, #144]	; (8001234 <menu+0x934>)
 80011a4:	2101      	movs	r1, #1
 80011a6:	2002      	movs	r0, #2
 80011a8:	f7ff fb06 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <menu+0x92c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d14c      	bne.n	800124e <menu+0x94e>
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <menu+0x8e0>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d148      	bne.n	800124e <menu+0x94e>
			if(dilSecim == 0) {
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <menu+0x8d0>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d13b      	bne.n	800123c <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 80011c4:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <menu+0x938>)
 80011c6:	2101      	movs	r1, #1
 80011c8:	2002      	movs	r0, #2
 80011ca:	f7ff faf5 	bl	80007b8 <lcd_print>
 80011ce:	e03e      	b.n	800124e <menu+0x94e>
 80011d0:	20000b4d 	.word	0x20000b4d
 80011d4:	0800d5b8 	.word	0x0800d5b8
 80011d8:	40010800 	.word	0x40010800
 80011dc:	20000b5b 	.word	0x20000b5b
 80011e0:	20000b3b 	.word	0x20000b3b
 80011e4:	20000b2e 	.word	0x20000b2e
 80011e8:	20000b4e 	.word	0x20000b4e
 80011ec:	20000ac0 	.word	0x20000ac0
 80011f0:	20000b4f 	.word	0x20000b4f
 80011f4:	20000b50 	.word	0x20000b50
 80011f8:	20000b51 	.word	0x20000b51
 80011fc:	20000b52 	.word	0x20000b52
 8001200:	20000b53 	.word	0x20000b53
 8001204:	20000b54 	.word	0x20000b54
 8001208:	20000b55 	.word	0x20000b55
 800120c:	20000b56 	.word	0x20000b56
 8001210:	20000b57 	.word	0x20000b57
 8001214:	20000b58 	.word	0x20000b58
 8001218:	20000b2c 	.word	0x20000b2c
 800121c:	0800d5cc 	.word	0x0800d5cc
 8001220:	0800d5e0 	.word	0x0800d5e0
 8001224:	0800d5f4 	.word	0x0800d5f4
 8001228:	0800d608 	.word	0x0800d608
 800122c:	20000b2d 	.word	0x20000b2d
 8001230:	0800d61c 	.word	0x0800d61c
 8001234:	0800d62c 	.word	0x0800d62c
 8001238:	0800d63c 	.word	0x0800d63c
			} else if(dilSecim == 1) {
 800123c:	4b98      	ldr	r3, [pc, #608]	; (80014a0 <menu+0xba0>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d104      	bne.n	800124e <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001244:	4a97      	ldr	r2, [pc, #604]	; (80014a4 <menu+0xba4>)
 8001246:	2101      	movs	r1, #1
 8001248:	2002      	movs	r0, #2
 800124a:	f7ff fab5 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800124e:	2102      	movs	r1, #2
 8001250:	4895      	ldr	r0, [pc, #596]	; (80014a8 <menu+0xba8>)
 8001252:	f008 faf9 	bl	8009848 <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
 8001258:	2b01      	cmp	r3, #1
 800125a:	d119      	bne.n	8001290 <menu+0x990>
 800125c:	4b93      	ldr	r3, [pc, #588]	; (80014ac <menu+0xbac>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d012      	beq.n	8001290 <menu+0x990>
 800126a:	4b91      	ldr	r3, [pc, #580]	; (80014b0 <menu+0xbb0>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10e      	bne.n	8001290 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001272:	4b90      	ldr	r3, [pc, #576]	; (80014b4 <menu+0xbb4>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b8e      	ldr	r3, [pc, #568]	; (80014b4 <menu+0xbb4>)
 800127c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 800127e:	4b8d      	ldr	r3, [pc, #564]	; (80014b4 <menu+0xbb4>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d902      	bls.n	800128c <menu+0x98c>
				calismaSekli = 0;
 8001286:	4b8b      	ldr	r3, [pc, #556]	; (80014b4 <menu+0xbb4>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800128c:	f003 ffa4 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001290:	2104      	movs	r1, #4
 8001292:	4885      	ldr	r0, [pc, #532]	; (80014a8 <menu+0xba8>)
 8001294:	f008 fad8 	bl	8009848 <HAL_GPIO_ReadPin>
 8001298:	4603      	mov	r3, r0
 800129a:	2b01      	cmp	r3, #1
 800129c:	d119      	bne.n	80012d2 <menu+0x9d2>
 800129e:	4b83      	ldr	r3, [pc, #524]	; (80014ac <menu+0xbac>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	f083 0301 	eor.w	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d012      	beq.n	80012d2 <menu+0x9d2>
 80012ac:	4b80      	ldr	r3, [pc, #512]	; (80014b0 <menu+0xbb0>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10e      	bne.n	80012d2 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 80012b4:	4b7f      	ldr	r3, [pc, #508]	; (80014b4 <menu+0xbb4>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b7d      	ldr	r3, [pc, #500]	; (80014b4 <menu+0xbb4>)
 80012be:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 80012c0:	4b7c      	ldr	r3, [pc, #496]	; (80014b4 <menu+0xbb4>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <menu+0x9ce>
	    		calismaSekli = 1;
 80012c8:	4b7a      	ldr	r3, [pc, #488]	; (80014b4 <menu+0xbb4>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80012ce:	f003 ff83 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80012d2:	2108      	movs	r1, #8
 80012d4:	4874      	ldr	r0, [pc, #464]	; (80014a8 <menu+0xba8>)
 80012d6:	f008 fab7 	bl	8009848 <HAL_GPIO_ReadPin>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d118      	bne.n	8001312 <menu+0xa12>
 80012e0:	4b72      	ldr	r3, [pc, #456]	; (80014ac <menu+0xbac>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	f083 0301 	eor.w	r3, r3, #1
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d011      	beq.n	8001312 <menu+0xa12>
			eepromData[1] = calismaSekli;
 80012ee:	4b71      	ldr	r3, [pc, #452]	; (80014b4 <menu+0xbb4>)
 80012f0:	781a      	ldrb	r2, [r3, #0]
 80012f2:	4b71      	ldr	r3, [pc, #452]	; (80014b8 <menu+0xbb8>)
 80012f4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 80012f6:	4b6f      	ldr	r3, [pc, #444]	; (80014b4 <menu+0xbb4>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d106      	bne.n	800130c <menu+0xa0c>
				altLimit = 1;
 80012fe:	4b6f      	ldr	r3, [pc, #444]	; (80014bc <menu+0xbbc>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001304:	4b6d      	ldr	r3, [pc, #436]	; (80014bc <menu+0xbbc>)
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	4b6b      	ldr	r3, [pc, #428]	; (80014b8 <menu+0xbb8>)
 800130a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800130c:	4b6c      	ldr	r3, [pc, #432]	; (80014c0 <menu+0xbc0>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001312:	4b6c      	ldr	r3, [pc, #432]	; (80014c4 <menu+0xbc4>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b03      	cmp	r3, #3
 8001318:	f040 8083 	bne.w	8001422 <menu+0xb22>
		if(dilSecim == 0) {
 800131c:	4b60      	ldr	r3, [pc, #384]	; (80014a0 <menu+0xba0>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d105      	bne.n	8001330 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001324:	4a68      	ldr	r2, [pc, #416]	; (80014c8 <menu+0xbc8>)
 8001326:	2101      	movs	r1, #1
 8001328:	2001      	movs	r0, #1
 800132a:	f7ff fa45 	bl	80007b8 <lcd_print>
 800132e:	e008      	b.n	8001342 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001330:	4b5b      	ldr	r3, [pc, #364]	; (80014a0 <menu+0xba0>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d104      	bne.n	8001342 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001338:	4a64      	ldr	r2, [pc, #400]	; (80014cc <menu+0xbcc>)
 800133a:	2101      	movs	r1, #1
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff fa3b 	bl	80007b8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001342:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <menu+0xbd0>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d113      	bne.n	8001372 <menu+0xa72>
			if(dilSecim == 0) {
 800134a:	4b55      	ldr	r3, [pc, #340]	; (80014a0 <menu+0xba0>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d105      	bne.n	800135e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001352:	4a60      	ldr	r2, [pc, #384]	; (80014d4 <menu+0xbd4>)
 8001354:	2101      	movs	r1, #1
 8001356:	2002      	movs	r0, #2
 8001358:	f7ff fa2e 	bl	80007b8 <lcd_print>
 800135c:	e012      	b.n	8001384 <menu+0xa84>
			} else if(dilSecim == 1) {
 800135e:	4b50      	ldr	r3, [pc, #320]	; (80014a0 <menu+0xba0>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d10e      	bne.n	8001384 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001366:	4a5c      	ldr	r2, [pc, #368]	; (80014d8 <menu+0xbd8>)
 8001368:	2101      	movs	r1, #1
 800136a:	2002      	movs	r0, #2
 800136c:	f7ff fa24 	bl	80007b8 <lcd_print>
 8001370:	e008      	b.n	8001384 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001372:	4b57      	ldr	r3, [pc, #348]	; (80014d0 <menu+0xbd0>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d104      	bne.n	8001384 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 800137a:	4a58      	ldr	r2, [pc, #352]	; (80014dc <menu+0xbdc>)
 800137c:	2101      	movs	r1, #1
 800137e:	2002      	movs	r0, #2
 8001380:	f7ff fa1a 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001384:	2102      	movs	r1, #2
 8001386:	4848      	ldr	r0, [pc, #288]	; (80014a8 <menu+0xba8>)
 8001388:	f008 fa5e 	bl	8009848 <HAL_GPIO_ReadPin>
 800138c:	4603      	mov	r3, r0
 800138e:	2b01      	cmp	r3, #1
 8001390:	d115      	bne.n	80013be <menu+0xabe>
 8001392:	4b46      	ldr	r3, [pc, #280]	; (80014ac <menu+0xbac>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	f083 0301 	eor.w	r3, r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00e      	beq.n	80013be <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 80013a0:	4b4b      	ldr	r3, [pc, #300]	; (80014d0 <menu+0xbd0>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <menu+0xbd0>)
 80013aa:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 80013ac:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <menu+0xbd0>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d902      	bls.n	80013ba <menu+0xaba>
				emniyetCercevesi = 0;
 80013b4:	4b46      	ldr	r3, [pc, #280]	; (80014d0 <menu+0xbd0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80013ba:	f003 ff0d 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80013be:	2104      	movs	r1, #4
 80013c0:	4839      	ldr	r0, [pc, #228]	; (80014a8 <menu+0xba8>)
 80013c2:	f008 fa41 	bl	8009848 <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d115      	bne.n	80013f8 <menu+0xaf8>
 80013cc:	4b37      	ldr	r3, [pc, #220]	; (80014ac <menu+0xbac>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	f083 0301 	eor.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00e      	beq.n	80013f8 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 80013da:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <menu+0xbd0>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3b01      	subs	r3, #1
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <menu+0xbd0>)
 80013e4:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <menu+0xbd0>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <menu+0xbd0>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80013f4:	f003 fef0 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80013f8:	2108      	movs	r1, #8
 80013fa:	482b      	ldr	r0, [pc, #172]	; (80014a8 <menu+0xba8>)
 80013fc:	f008 fa24 	bl	8009848 <HAL_GPIO_ReadPin>
 8001400:	4603      	mov	r3, r0
 8001402:	2b01      	cmp	r3, #1
 8001404:	d10d      	bne.n	8001422 <menu+0xb22>
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <menu+0xbac>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	f083 0301 	eor.w	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001414:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <menu+0xbd0>)
 8001416:	781a      	ldrb	r2, [r3, #0]
 8001418:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <menu+0xbb8>)
 800141a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 800141c:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <menu+0xbc0>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001422:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <menu+0xbc4>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b04      	cmp	r3, #4
 8001428:	f040 80ba 	bne.w	80015a0 <menu+0xca0>
		if(dilSecim == 0) {
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <menu+0xba0>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d105      	bne.n	8001440 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001434:	4a2a      	ldr	r2, [pc, #168]	; (80014e0 <menu+0xbe0>)
 8001436:	2101      	movs	r1, #1
 8001438:	2001      	movs	r0, #1
 800143a:	f7ff f9bd 	bl	80007b8 <lcd_print>
 800143e:	e008      	b.n	8001452 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <menu+0xba0>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d104      	bne.n	8001452 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001448:	4a26      	ldr	r2, [pc, #152]	; (80014e4 <menu+0xbe4>)
 800144a:	2101      	movs	r1, #1
 800144c:	2001      	movs	r0, #1
 800144e:	f7ff f9b3 	bl	80007b8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <menu+0xbe8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d113      	bne.n	8001482 <menu+0xb82>
			if(dilSecim == 0) {
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <menu+0xba0>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001462:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <menu+0xbd4>)
 8001464:	2101      	movs	r1, #1
 8001466:	2002      	movs	r0, #2
 8001468:	f7ff f9a6 	bl	80007b8 <lcd_print>
 800146c:	e049      	b.n	8001502 <menu+0xc02>
			} else if(dilSecim == 1) {
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <menu+0xba0>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d145      	bne.n	8001502 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001476:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <menu+0xbd8>)
 8001478:	2101      	movs	r1, #1
 800147a:	2002      	movs	r0, #2
 800147c:	f7ff f99c 	bl	80007b8 <lcd_print>
 8001480:	e03f      	b.n	8001502 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <menu+0xbe8>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d13b      	bne.n	8001502 <menu+0xc02>
			if(dilSecim == 0) {
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <menu+0xba0>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d12e      	bne.n	80014f0 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001492:	4a16      	ldr	r2, [pc, #88]	; (80014ec <menu+0xbec>)
 8001494:	2101      	movs	r1, #1
 8001496:	2002      	movs	r0, #2
 8001498:	f7ff f98e 	bl	80007b8 <lcd_print>
 800149c:	e031      	b.n	8001502 <menu+0xc02>
 800149e:	bf00      	nop
 80014a0:	20000b4d 	.word	0x20000b4d
 80014a4:	0800d64c 	.word	0x0800d64c
 80014a8:	40010800 	.word	0x40010800
 80014ac:	20000b5b 	.word	0x20000b5b
 80014b0:	20000b3b 	.word	0x20000b3b
 80014b4:	20000b2d 	.word	0x20000b2d
 80014b8:	20000ac0 	.word	0x20000ac0
 80014bc:	20000b32 	.word	0x20000b32
 80014c0:	20000b58 	.word	0x20000b58
 80014c4:	20000b2c 	.word	0x20000b2c
 80014c8:	0800d65c 	.word	0x0800d65c
 80014cc:	0800d670 	.word	0x0800d670
 80014d0:	20000b30 	.word	0x20000b30
 80014d4:	0800d684 	.word	0x0800d684
 80014d8:	0800d698 	.word	0x0800d698
 80014dc:	0800d6ac 	.word	0x0800d6ac
 80014e0:	0800d6bc 	.word	0x0800d6bc
 80014e4:	0800d6d0 	.word	0x0800d6d0
 80014e8:	20000b31 	.word	0x20000b31
 80014ec:	0800d6e4 	.word	0x0800d6e4
			} else if(dilSecim == 1) {
 80014f0:	4b92      	ldr	r3, [pc, #584]	; (800173c <menu+0xe3c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d104      	bne.n	8001502 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80014f8:	4a91      	ldr	r2, [pc, #580]	; (8001740 <menu+0xe40>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	2002      	movs	r0, #2
 80014fe:	f7ff f95b 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001502:	2102      	movs	r1, #2
 8001504:	488f      	ldr	r0, [pc, #572]	; (8001744 <menu+0xe44>)
 8001506:	f008 f99f 	bl	8009848 <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d115      	bne.n	800153c <menu+0xc3c>
 8001510:	4b8d      	ldr	r3, [pc, #564]	; (8001748 <menu+0xe48>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	f083 0301 	eor.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00e      	beq.n	800153c <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 800151e:	4b8b      	ldr	r3, [pc, #556]	; (800174c <menu+0xe4c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4b89      	ldr	r3, [pc, #548]	; (800174c <menu+0xe4c>)
 8001528:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 800152a:	4b88      	ldr	r3, [pc, #544]	; (800174c <menu+0xe4c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d902      	bls.n	8001538 <menu+0xc38>
				yavaslamaLimit = 0;
 8001532:	4b86      	ldr	r3, [pc, #536]	; (800174c <menu+0xe4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001538:	f003 fe4e 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800153c:	2104      	movs	r1, #4
 800153e:	4881      	ldr	r0, [pc, #516]	; (8001744 <menu+0xe44>)
 8001540:	f008 f982 	bl	8009848 <HAL_GPIO_ReadPin>
 8001544:	4603      	mov	r3, r0
 8001546:	2b01      	cmp	r3, #1
 8001548:	d115      	bne.n	8001576 <menu+0xc76>
 800154a:	4b7f      	ldr	r3, [pc, #508]	; (8001748 <menu+0xe48>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	f083 0301 	eor.w	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00e      	beq.n	8001576 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001558:	4b7c      	ldr	r3, [pc, #496]	; (800174c <menu+0xe4c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	3b01      	subs	r3, #1
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b7a      	ldr	r3, [pc, #488]	; (800174c <menu+0xe4c>)
 8001562:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001564:	4b79      	ldr	r3, [pc, #484]	; (800174c <menu+0xe4c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <menu+0xc72>
		   		yavaslamaLimit = 1;
 800156c:	4b77      	ldr	r3, [pc, #476]	; (800174c <menu+0xe4c>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001572:	f003 fe31 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001576:	2108      	movs	r1, #8
 8001578:	4872      	ldr	r0, [pc, #456]	; (8001744 <menu+0xe44>)
 800157a:	f008 f965 	bl	8009848 <HAL_GPIO_ReadPin>
 800157e:	4603      	mov	r3, r0
 8001580:	2b01      	cmp	r3, #1
 8001582:	d10d      	bne.n	80015a0 <menu+0xca0>
 8001584:	4b70      	ldr	r3, [pc, #448]	; (8001748 <menu+0xe48>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	f083 0301 	eor.w	r3, r3, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d006      	beq.n	80015a0 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001592:	4b6e      	ldr	r3, [pc, #440]	; (800174c <menu+0xe4c>)
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	4b6e      	ldr	r3, [pc, #440]	; (8001750 <menu+0xe50>)
 8001598:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800159a:	4b6e      	ldr	r3, [pc, #440]	; (8001754 <menu+0xe54>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80015a0:	4b6d      	ldr	r3, [pc, #436]	; (8001758 <menu+0xe58>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	f040 80b9 	bne.w	800171c <menu+0xe1c>
		if(dilSecim == 0) {
 80015aa:	4b64      	ldr	r3, [pc, #400]	; (800173c <menu+0xe3c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d105      	bne.n	80015be <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 80015b2:	4a6a      	ldr	r2, [pc, #424]	; (800175c <menu+0xe5c>)
 80015b4:	2101      	movs	r1, #1
 80015b6:	2001      	movs	r0, #1
 80015b8:	f7ff f8fe 	bl	80007b8 <lcd_print>
 80015bc:	e008      	b.n	80015d0 <menu+0xcd0>
		} else if(dilSecim == 1) {
 80015be:	4b5f      	ldr	r3, [pc, #380]	; (800173c <menu+0xe3c>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d104      	bne.n	80015d0 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80015c6:	4a66      	ldr	r2, [pc, #408]	; (8001760 <menu+0xe60>)
 80015c8:	2101      	movs	r1, #1
 80015ca:	2001      	movs	r0, #1
 80015cc:	f7ff f8f4 	bl	80007b8 <lcd_print>
		}

		if(altLimit == 0) {
 80015d0:	4b64      	ldr	r3, [pc, #400]	; (8001764 <menu+0xe64>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d113      	bne.n	8001600 <menu+0xd00>
			if(dilSecim == 0) {
 80015d8:	4b58      	ldr	r3, [pc, #352]	; (800173c <menu+0xe3c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d105      	bne.n	80015ec <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 80015e0:	4a61      	ldr	r2, [pc, #388]	; (8001768 <menu+0xe68>)
 80015e2:	2101      	movs	r1, #1
 80015e4:	2002      	movs	r0, #2
 80015e6:	f7ff f8e7 	bl	80007b8 <lcd_print>
 80015ea:	e020      	b.n	800162e <menu+0xd2e>
			} else if(dilSecim == 1) {
 80015ec:	4b53      	ldr	r3, [pc, #332]	; (800173c <menu+0xe3c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d11c      	bne.n	800162e <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80015f4:	4a5d      	ldr	r2, [pc, #372]	; (800176c <menu+0xe6c>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	2002      	movs	r0, #2
 80015fa:	f7ff f8dd 	bl	80007b8 <lcd_print>
 80015fe:	e016      	b.n	800162e <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001600:	4b58      	ldr	r3, [pc, #352]	; (8001764 <menu+0xe64>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d112      	bne.n	800162e <menu+0xd2e>
			if(dilSecim == 0){
 8001608:	4b4c      	ldr	r3, [pc, #304]	; (800173c <menu+0xe3c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d105      	bne.n	800161c <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001610:	4a57      	ldr	r2, [pc, #348]	; (8001770 <menu+0xe70>)
 8001612:	2101      	movs	r1, #1
 8001614:	2002      	movs	r0, #2
 8001616:	f7ff f8cf 	bl	80007b8 <lcd_print>
 800161a:	e008      	b.n	800162e <menu+0xd2e>
			} else if(dilSecim == 1){
 800161c:	4b47      	ldr	r3, [pc, #284]	; (800173c <menu+0xe3c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d104      	bne.n	800162e <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001624:	4a46      	ldr	r2, [pc, #280]	; (8001740 <menu+0xe40>)
 8001626:	2101      	movs	r1, #1
 8001628:	2002      	movs	r0, #2
 800162a:	f7ff f8c5 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800162e:	2102      	movs	r1, #2
 8001630:	4844      	ldr	r0, [pc, #272]	; (8001744 <menu+0xe44>)
 8001632:	f008 f909 	bl	8009848 <HAL_GPIO_ReadPin>
 8001636:	4603      	mov	r3, r0
 8001638:	2b01      	cmp	r3, #1
 800163a:	d119      	bne.n	8001670 <menu+0xd70>
 800163c:	4b42      	ldr	r3, [pc, #264]	; (8001748 <menu+0xe48>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	f083 0301 	eor.w	r3, r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d012      	beq.n	8001670 <menu+0xd70>
 800164a:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <menu+0xe74>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10e      	bne.n	8001670 <menu+0xd70>
			altLimit = altLimit + 1;
 8001652:	4b44      	ldr	r3, [pc, #272]	; (8001764 <menu+0xe64>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b42      	ldr	r3, [pc, #264]	; (8001764 <menu+0xe64>)
 800165c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <menu+0xe64>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d902      	bls.n	800166c <menu+0xd6c>
				altLimit = 0;
 8001666:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <menu+0xe64>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800166c:	f003 fdb4 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001670:	2104      	movs	r1, #4
 8001672:	4834      	ldr	r0, [pc, #208]	; (8001744 <menu+0xe44>)
 8001674:	f008 f8e8 	bl	8009848 <HAL_GPIO_ReadPin>
 8001678:	4603      	mov	r3, r0
 800167a:	2b01      	cmp	r3, #1
 800167c:	d119      	bne.n	80016b2 <menu+0xdb2>
 800167e:	4b32      	ldr	r3, [pc, #200]	; (8001748 <menu+0xe48>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	f083 0301 	eor.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d012      	beq.n	80016b2 <menu+0xdb2>
 800168c:	4b39      	ldr	r3, [pc, #228]	; (8001774 <menu+0xe74>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10e      	bne.n	80016b2 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001694:	4b33      	ldr	r3, [pc, #204]	; (8001764 <menu+0xe64>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	3b01      	subs	r3, #1
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b31      	ldr	r3, [pc, #196]	; (8001764 <menu+0xe64>)
 800169e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80016a0:	4b30      	ldr	r3, [pc, #192]	; (8001764 <menu+0xe64>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <menu+0xdae>
		   		altLimit = 1;
 80016a8:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <menu+0xe64>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80016ae:	f003 fd93 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80016b2:	2108      	movs	r1, #8
 80016b4:	4823      	ldr	r0, [pc, #140]	; (8001744 <menu+0xe44>)
 80016b6:	f008 f8c7 	bl	8009848 <HAL_GPIO_ReadPin>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d12d      	bne.n	800171c <menu+0xe1c>
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <menu+0xe48>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	f083 0301 	eor.w	r3, r3, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d026      	beq.n	800171c <menu+0xe1c>
			eepromData[5] = altLimit;
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <menu+0xe64>)
 80016d0:	781a      	ldrb	r2, [r3, #0]
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <menu+0xe50>)
 80016d4:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80016d6:	4b23      	ldr	r3, [pc, #140]	; (8001764 <menu+0xe64>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d110      	bne.n	8001700 <menu+0xe00>
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <menu+0xe78>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <menu+0xdee>
 80016e6:	4b24      	ldr	r3, [pc, #144]	; (8001778 <menu+0xe78>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d108      	bne.n	8001700 <menu+0xe00>
				kapiTablaAcKonum = 3;
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <menu+0xe78>)
 80016f0:	2203      	movs	r2, #3
 80016f2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80016f4:	4b20      	ldr	r3, [pc, #128]	; (8001778 <menu+0xe78>)
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <menu+0xe50>)
 80016fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80016fe:	e00a      	b.n	8001716 <menu+0xe16>
			} else if(altLimit == 0) {
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <menu+0xe64>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d106      	bne.n	8001716 <menu+0xe16>
				platformSilindirTipi = 0;
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <menu+0xe7c>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <menu+0xe7c>)
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <menu+0xe50>)
 8001714:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <menu+0xe54>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <menu+0xe58>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b06      	cmp	r3, #6
 8001722:	f040 80b6 	bne.w	8001892 <menu+0xf92>
		if(dilSecim == 0) {
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <menu+0xe3c>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d12a      	bne.n	8001784 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <menu+0xe80>)
 8001730:	2101      	movs	r1, #1
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff f840 	bl	80007b8 <lcd_print>
 8001738:	e02d      	b.n	8001796 <menu+0xe96>
 800173a:	bf00      	nop
 800173c:	20000b4d 	.word	0x20000b4d
 8001740:	0800d6f8 	.word	0x0800d6f8
 8001744:	40010800 	.word	0x40010800
 8001748:	20000b5b 	.word	0x20000b5b
 800174c:	20000b31 	.word	0x20000b31
 8001750:	20000ac0 	.word	0x20000ac0
 8001754:	20000b58 	.word	0x20000b58
 8001758:	20000b2c 	.word	0x20000b2c
 800175c:	0800d70c 	.word	0x0800d70c
 8001760:	0800d720 	.word	0x0800d720
 8001764:	20000b32 	.word	0x20000b32
 8001768:	0800d684 	.word	0x0800d684
 800176c:	0800d698 	.word	0x0800d698
 8001770:	0800d6e4 	.word	0x0800d6e4
 8001774:	20000b2d 	.word	0x20000b2d
 8001778:	20000b39 	.word	0x20000b39
 800177c:	20000b3f 	.word	0x20000b3f
 8001780:	0800d734 	.word	0x0800d734
		} else if(dilSecim == 1){
 8001784:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <menu+0x1070>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d104      	bne.n	8001796 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800178c:	4a79      	ldr	r2, [pc, #484]	; (8001974 <menu+0x1074>)
 800178e:	2101      	movs	r1, #1
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff f811 	bl	80007b8 <lcd_print>
		}
		if(basincSalteri == 0){
 8001796:	4b78      	ldr	r3, [pc, #480]	; (8001978 <menu+0x1078>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d113      	bne.n	80017c6 <menu+0xec6>
			if(dilSecim == 0) {
 800179e:	4b74      	ldr	r3, [pc, #464]	; (8001970 <menu+0x1070>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d105      	bne.n	80017b2 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80017a6:	4a75      	ldr	r2, [pc, #468]	; (800197c <menu+0x107c>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	2002      	movs	r0, #2
 80017ac:	f7ff f804 	bl	80007b8 <lcd_print>
 80017b0:	e020      	b.n	80017f4 <menu+0xef4>
			} else if(dilSecim == 1){
 80017b2:	4b6f      	ldr	r3, [pc, #444]	; (8001970 <menu+0x1070>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d11c      	bne.n	80017f4 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80017ba:	4a71      	ldr	r2, [pc, #452]	; (8001980 <menu+0x1080>)
 80017bc:	2101      	movs	r1, #1
 80017be:	2002      	movs	r0, #2
 80017c0:	f7fe fffa 	bl	80007b8 <lcd_print>
 80017c4:	e016      	b.n	80017f4 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80017c6:	4b6c      	ldr	r3, [pc, #432]	; (8001978 <menu+0x1078>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d112      	bne.n	80017f4 <menu+0xef4>
			if(dilSecim == 0) {
 80017ce:	4b68      	ldr	r3, [pc, #416]	; (8001970 <menu+0x1070>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d105      	bne.n	80017e2 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80017d6:	4a6b      	ldr	r2, [pc, #428]	; (8001984 <menu+0x1084>)
 80017d8:	2101      	movs	r1, #1
 80017da:	2002      	movs	r0, #2
 80017dc:	f7fe ffec 	bl	80007b8 <lcd_print>
 80017e0:	e008      	b.n	80017f4 <menu+0xef4>
			} else if(dilSecim == 1) {
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <menu+0x1070>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d104      	bne.n	80017f4 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80017ea:	4a67      	ldr	r2, [pc, #412]	; (8001988 <menu+0x1088>)
 80017ec:	2101      	movs	r1, #1
 80017ee:	2002      	movs	r0, #2
 80017f0:	f7fe ffe2 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80017f4:	2102      	movs	r1, #2
 80017f6:	4865      	ldr	r0, [pc, #404]	; (800198c <menu+0x108c>)
 80017f8:	f008 f826 	bl	8009848 <HAL_GPIO_ReadPin>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d115      	bne.n	800182e <menu+0xf2e>
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <menu+0x1090>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	f083 0301 	eor.w	r3, r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00e      	beq.n	800182e <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8001810:	4b59      	ldr	r3, [pc, #356]	; (8001978 <menu+0x1078>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	4b57      	ldr	r3, [pc, #348]	; (8001978 <menu+0x1078>)
 800181a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800181c:	4b56      	ldr	r3, [pc, #344]	; (8001978 <menu+0x1078>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d902      	bls.n	800182a <menu+0xf2a>
				basincSalteri = 0;
 8001824:	4b54      	ldr	r3, [pc, #336]	; (8001978 <menu+0x1078>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800182a:	f003 fcd5 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800182e:	2104      	movs	r1, #4
 8001830:	4856      	ldr	r0, [pc, #344]	; (800198c <menu+0x108c>)
 8001832:	f008 f809 	bl	8009848 <HAL_GPIO_ReadPin>
 8001836:	4603      	mov	r3, r0
 8001838:	2b01      	cmp	r3, #1
 800183a:	d115      	bne.n	8001868 <menu+0xf68>
 800183c:	4b54      	ldr	r3, [pc, #336]	; (8001990 <menu+0x1090>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	f083 0301 	eor.w	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00e      	beq.n	8001868 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800184a:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <menu+0x1078>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	3b01      	subs	r3, #1
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b49      	ldr	r3, [pc, #292]	; (8001978 <menu+0x1078>)
 8001854:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001856:	4b48      	ldr	r3, [pc, #288]	; (8001978 <menu+0x1078>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <menu+0xf64>
		   		basincSalteri = 1;
 800185e:	4b46      	ldr	r3, [pc, #280]	; (8001978 <menu+0x1078>)
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001864:	f003 fcb8 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001868:	2108      	movs	r1, #8
 800186a:	4848      	ldr	r0, [pc, #288]	; (800198c <menu+0x108c>)
 800186c:	f007 ffec 	bl	8009848 <HAL_GPIO_ReadPin>
 8001870:	4603      	mov	r3, r0
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10d      	bne.n	8001892 <menu+0xf92>
 8001876:	4b46      	ldr	r3, [pc, #280]	; (8001990 <menu+0x1090>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	f083 0301 	eor.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8001884:	4b3c      	ldr	r3, [pc, #240]	; (8001978 <menu+0x1078>)
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	4b42      	ldr	r3, [pc, #264]	; (8001994 <menu+0x1094>)
 800188a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800188c:	4b42      	ldr	r3, [pc, #264]	; (8001998 <menu+0x1098>)
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001892:	4b42      	ldr	r3, [pc, #264]	; (800199c <menu+0x109c>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b07      	cmp	r3, #7
 8001898:	f040 80f5 	bne.w	8001a86 <menu+0x1186>
		if(dilSecim == 0) {
 800189c:	4b34      	ldr	r3, [pc, #208]	; (8001970 <menu+0x1070>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80018a4:	4a3e      	ldr	r2, [pc, #248]	; (80019a0 <menu+0x10a0>)
 80018a6:	2101      	movs	r1, #1
 80018a8:	2001      	movs	r0, #1
 80018aa:	f7fe ff85 	bl	80007b8 <lcd_print>
 80018ae:	e008      	b.n	80018c2 <menu+0xfc2>
		} else if(dilSecim == 1){
 80018b0:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <menu+0x1070>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d104      	bne.n	80018c2 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80018b8:	4a3a      	ldr	r2, [pc, #232]	; (80019a4 <menu+0x10a4>)
 80018ba:	2101      	movs	r1, #1
 80018bc:	2001      	movs	r0, #1
 80018be:	f7fe ff7b 	bl	80007b8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80018c2:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <menu+0x10a8>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d113      	bne.n	80018f2 <menu+0xff2>
			if(dilSecim == 0) {
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <menu+0x1070>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d105      	bne.n	80018de <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80018d2:	4a2a      	ldr	r2, [pc, #168]	; (800197c <menu+0x107c>)
 80018d4:	2101      	movs	r1, #1
 80018d6:	2002      	movs	r0, #2
 80018d8:	f7fe ff6e 	bl	80007b8 <lcd_print>
 80018dc:	e079      	b.n	80019d2 <menu+0x10d2>
			} else if(dilSecim == 1){
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <menu+0x1070>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d175      	bne.n	80019d2 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80018e6:	4a26      	ldr	r2, [pc, #152]	; (8001980 <menu+0x1080>)
 80018e8:	2101      	movs	r1, #1
 80018ea:	2002      	movs	r0, #2
 80018ec:	f7fe ff64 	bl	80007b8 <lcd_print>
 80018f0:	e06f      	b.n	80019d2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80018f2:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <menu+0x10a8>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d113      	bne.n	8001922 <menu+0x1022>
			if(dilSecim == 0) {
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <menu+0x1070>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d105      	bne.n	800190e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8001902:	4a2a      	ldr	r2, [pc, #168]	; (80019ac <menu+0x10ac>)
 8001904:	2101      	movs	r1, #1
 8001906:	2002      	movs	r0, #2
 8001908:	f7fe ff56 	bl	80007b8 <lcd_print>
 800190c:	e061      	b.n	80019d2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <menu+0x1070>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d15d      	bne.n	80019d2 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8001916:	4a26      	ldr	r2, [pc, #152]	; (80019b0 <menu+0x10b0>)
 8001918:	2101      	movs	r1, #1
 800191a:	2002      	movs	r0, #2
 800191c:	f7fe ff4c 	bl	80007b8 <lcd_print>
 8001920:	e057      	b.n	80019d2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <menu+0x10a8>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d113      	bne.n	8001952 <menu+0x1052>
			if(dilSecim == 0) {
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <menu+0x1070>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d105      	bne.n	800193e <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8001932:	4a20      	ldr	r2, [pc, #128]	; (80019b4 <menu+0x10b4>)
 8001934:	2101      	movs	r1, #1
 8001936:	2002      	movs	r0, #2
 8001938:	f7fe ff3e 	bl	80007b8 <lcd_print>
 800193c:	e049      	b.n	80019d2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <menu+0x1070>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d145      	bne.n	80019d2 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8001946:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <menu+0x10b8>)
 8001948:	2101      	movs	r1, #1
 800194a:	2002      	movs	r0, #2
 800194c:	f7fe ff34 	bl	80007b8 <lcd_print>
 8001950:	e03f      	b.n	80019d2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <menu+0x10a8>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d13b      	bne.n	80019d2 <menu+0x10d2>
			if(dilSecim == 0) {
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <menu+0x1070>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d12e      	bne.n	80019c0 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8001962:	4a16      	ldr	r2, [pc, #88]	; (80019bc <menu+0x10bc>)
 8001964:	2101      	movs	r1, #1
 8001966:	2002      	movs	r0, #2
 8001968:	f7fe ff26 	bl	80007b8 <lcd_print>
 800196c:	e031      	b.n	80019d2 <menu+0x10d2>
 800196e:	bf00      	nop
 8001970:	20000b4d 	.word	0x20000b4d
 8001974:	0800d744 	.word	0x0800d744
 8001978:	20000b33 	.word	0x20000b33
 800197c:	0800d684 	.word	0x0800d684
 8001980:	0800d698 	.word	0x0800d698
 8001984:	0800d6e4 	.word	0x0800d6e4
 8001988:	0800d6f8 	.word	0x0800d6f8
 800198c:	40010800 	.word	0x40010800
 8001990:	20000b5b 	.word	0x20000b5b
 8001994:	20000ac0 	.word	0x20000ac0
 8001998:	20000b58 	.word	0x20000b58
 800199c:	20000b2c 	.word	0x20000b2c
 80019a0:	0800d754 	.word	0x0800d754
 80019a4:	0800d768 	.word	0x0800d768
 80019a8:	20000b34 	.word	0x20000b34
 80019ac:	0800d77c 	.word	0x0800d77c
 80019b0:	0800d790 	.word	0x0800d790
 80019b4:	0800d7a4 	.word	0x0800d7a4
 80019b8:	0800d7b8 	.word	0x0800d7b8
 80019bc:	0800d7cc 	.word	0x0800d7cc
			} else if(dilSecim == 1){
 80019c0:	4b99      	ldr	r3, [pc, #612]	; (8001c28 <menu+0x1328>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d104      	bne.n	80019d2 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80019c8:	4a98      	ldr	r2, [pc, #608]	; (8001c2c <menu+0x132c>)
 80019ca:	2101      	movs	r1, #1
 80019cc:	2002      	movs	r0, #2
 80019ce:	f7fe fef3 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80019d2:	2102      	movs	r1, #2
 80019d4:	4896      	ldr	r0, [pc, #600]	; (8001c30 <menu+0x1330>)
 80019d6:	f007 ff37 	bl	8009848 <HAL_GPIO_ReadPin>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d115      	bne.n	8001a0c <menu+0x110c>
 80019e0:	4b94      	ldr	r3, [pc, #592]	; (8001c34 <menu+0x1334>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	f083 0301 	eor.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00e      	beq.n	8001a0c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80019ee:	4b92      	ldr	r3, [pc, #584]	; (8001c38 <menu+0x1338>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4b90      	ldr	r3, [pc, #576]	; (8001c38 <menu+0x1338>)
 80019f8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80019fa:	4b8f      	ldr	r3, [pc, #572]	; (8001c38 <menu+0x1338>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d902      	bls.n	8001a08 <menu+0x1108>
				kapiSecimleri = 0;
 8001a02:	4b8d      	ldr	r3, [pc, #564]	; (8001c38 <menu+0x1338>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a08:	f003 fbe6 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	4888      	ldr	r0, [pc, #544]	; (8001c30 <menu+0x1330>)
 8001a10:	f007 ff1a 	bl	8009848 <HAL_GPIO_ReadPin>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d115      	bne.n	8001a46 <menu+0x1146>
 8001a1a:	4b86      	ldr	r3, [pc, #536]	; (8001c34 <menu+0x1334>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	f083 0301 	eor.w	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00e      	beq.n	8001a46 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8001a28:	4b83      	ldr	r3, [pc, #524]	; (8001c38 <menu+0x1338>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b81      	ldr	r3, [pc, #516]	; (8001c38 <menu+0x1338>)
 8001a32:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001a34:	4b80      	ldr	r3, [pc, #512]	; (8001c38 <menu+0x1338>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d902      	bls.n	8001a42 <menu+0x1142>
		   		kapiSecimleri = 3;
 8001a3c:	4b7e      	ldr	r3, [pc, #504]	; (8001c38 <menu+0x1338>)
 8001a3e:	2203      	movs	r2, #3
 8001a40:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a42:	f003 fbc9 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a46:	2108      	movs	r1, #8
 8001a48:	4879      	ldr	r0, [pc, #484]	; (8001c30 <menu+0x1330>)
 8001a4a:	f007 fefd 	bl	8009848 <HAL_GPIO_ReadPin>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d118      	bne.n	8001a86 <menu+0x1186>
 8001a54:	4b77      	ldr	r3, [pc, #476]	; (8001c34 <menu+0x1334>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	f083 0301 	eor.w	r3, r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d011      	beq.n	8001a86 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8001a62:	4b75      	ldr	r3, [pc, #468]	; (8001c38 <menu+0x1338>)
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	4b75      	ldr	r3, [pc, #468]	; (8001c3c <menu+0x133c>)
 8001a68:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8001a6a:	4b73      	ldr	r3, [pc, #460]	; (8001c38 <menu+0x1338>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d006      	beq.n	8001a80 <menu+0x1180>
				altLimit = 1;
 8001a72:	4b73      	ldr	r3, [pc, #460]	; (8001c40 <menu+0x1340>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001a78:	4b71      	ldr	r3, [pc, #452]	; (8001c40 <menu+0x1340>)
 8001a7a:	781a      	ldrb	r2, [r3, #0]
 8001a7c:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <menu+0x133c>)
 8001a7e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001a80:	4b70      	ldr	r3, [pc, #448]	; (8001c44 <menu+0x1344>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001a86:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <menu+0x1348>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	f040 8092 	bne.w	8001bb4 <menu+0x12b4>
		if(dilSecim == 0) {
 8001a90:	4b65      	ldr	r3, [pc, #404]	; (8001c28 <menu+0x1328>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8001a98:	4a6c      	ldr	r2, [pc, #432]	; (8001c4c <menu+0x134c>)
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7fe fe8b 	bl	80007b8 <lcd_print>
 8001aa2:	e008      	b.n	8001ab6 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8001aa4:	4b60      	ldr	r3, [pc, #384]	; (8001c28 <menu+0x1328>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d104      	bne.n	8001ab6 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8001aac:	4a68      	ldr	r2, [pc, #416]	; (8001c50 <menu+0x1350>)
 8001aae:	2101      	movs	r1, #1
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7fe fe81 	bl	80007b8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8001ab6:	4b67      	ldr	r3, [pc, #412]	; (8001c54 <menu+0x1354>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d113      	bne.n	8001ae6 <menu+0x11e6>
			if(dilSecim == 0) {
 8001abe:	4b5a      	ldr	r3, [pc, #360]	; (8001c28 <menu+0x1328>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d105      	bne.n	8001ad2 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8001ac6:	4a64      	ldr	r2, [pc, #400]	; (8001c58 <menu+0x1358>)
 8001ac8:	2101      	movs	r1, #1
 8001aca:	2002      	movs	r0, #2
 8001acc:	f7fe fe74 	bl	80007b8 <lcd_print>
 8001ad0:	e020      	b.n	8001b14 <menu+0x1214>
			} else if(dilSecim == 1) {
 8001ad2:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <menu+0x1328>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d11c      	bne.n	8001b14 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8001ada:	4a60      	ldr	r2, [pc, #384]	; (8001c5c <menu+0x135c>)
 8001adc:	2101      	movs	r1, #1
 8001ade:	2002      	movs	r0, #2
 8001ae0:	f7fe fe6a 	bl	80007b8 <lcd_print>
 8001ae4:	e016      	b.n	8001b14 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <menu+0x1354>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d112      	bne.n	8001b14 <menu+0x1214>
			if(dilSecim == 0){
 8001aee:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <menu+0x1328>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d105      	bne.n	8001b02 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8001af6:	4a5a      	ldr	r2, [pc, #360]	; (8001c60 <menu+0x1360>)
 8001af8:	2101      	movs	r1, #1
 8001afa:	2002      	movs	r0, #2
 8001afc:	f7fe fe5c 	bl	80007b8 <lcd_print>
 8001b00:	e008      	b.n	8001b14 <menu+0x1214>
			} else if(dilSecim == 1){
 8001b02:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <menu+0x1328>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d104      	bne.n	8001b14 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8001b0a:	4a56      	ldr	r2, [pc, #344]	; (8001c64 <menu+0x1364>)
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f7fe fe52 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b14:	2102      	movs	r1, #2
 8001b16:	4846      	ldr	r0, [pc, #280]	; (8001c30 <menu+0x1330>)
 8001b18:	f007 fe96 	bl	8009848 <HAL_GPIO_ReadPin>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d115      	bne.n	8001b4e <menu+0x124e>
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <menu+0x1334>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	f083 0301 	eor.w	r3, r3, #1
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00e      	beq.n	8001b4e <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8001b30:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <menu+0x1354>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <menu+0x1354>)
 8001b3a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001b3c:	4b45      	ldr	r3, [pc, #276]	; (8001c54 <menu+0x1354>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d902      	bls.n	8001b4a <menu+0x124a>
				kapiAcTipi = 0;
 8001b44:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <menu+0x1354>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b4a:	f003 fb45 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b4e:	2104      	movs	r1, #4
 8001b50:	4837      	ldr	r0, [pc, #220]	; (8001c30 <menu+0x1330>)
 8001b52:	f007 fe79 	bl	8009848 <HAL_GPIO_ReadPin>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d115      	bne.n	8001b88 <menu+0x1288>
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <menu+0x1334>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	f083 0301 	eor.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00e      	beq.n	8001b88 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8001b6a:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <menu+0x1354>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <menu+0x1354>)
 8001b74:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001b76:	4b37      	ldr	r3, [pc, #220]	; (8001c54 <menu+0x1354>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <menu+0x1284>
		   		kapiAcTipi = 1;
 8001b7e:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <menu+0x1354>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b84:	f003 fb28 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b88:	2108      	movs	r1, #8
 8001b8a:	4829      	ldr	r0, [pc, #164]	; (8001c30 <menu+0x1330>)
 8001b8c:	f007 fe5c 	bl	8009848 <HAL_GPIO_ReadPin>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d10e      	bne.n	8001bb4 <menu+0x12b4>
 8001b96:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <menu+0x1334>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	f083 0301 	eor.w	r3, r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <menu+0x1354>)
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <menu+0x133c>)
 8001baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8001bae:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <menu+0x1344>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001bb4:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <menu+0x1348>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b09      	cmp	r3, #9
 8001bba:	f040 80b9 	bne.w	8001d30 <menu+0x1430>
		if(dilSecim == 0){
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <menu+0x1328>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d105      	bne.n	8001bd2 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8001bc6:	4a28      	ldr	r2, [pc, #160]	; (8001c68 <menu+0x1368>)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f7fe fdf4 	bl	80007b8 <lcd_print>
 8001bd0:	e008      	b.n	8001be4 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <menu+0x1328>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d104      	bne.n	8001be4 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8001bda:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <menu+0x136c>)
 8001bdc:	2101      	movs	r1, #1
 8001bde:	2001      	movs	r0, #1
 8001be0:	f7fe fdea 	bl	80007b8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <menu+0x1370>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8001bec:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <menu+0x1374>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f7fe fde1 	bl	80007b8 <lcd_print>
 8001bf6:	e04c      	b.n	8001c92 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <menu+0x1370>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d13f      	bne.n	8001c80 <menu+0x1380>
			if(dilSecim == 0){
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <menu+0x1328>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8001c08:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <menu+0x1378>)
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	f7fe fdd3 	bl	80007b8 <lcd_print>
 8001c12:	e03e      	b.n	8001c92 <menu+0x1392>
			} else if(dilSecim == 1) {
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <menu+0x1328>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d13a      	bne.n	8001c92 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8001c1c:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <menu+0x137c>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	2002      	movs	r0, #2
 8001c22:	f7fe fdc9 	bl	80007b8 <lcd_print>
 8001c26:	e034      	b.n	8001c92 <menu+0x1392>
 8001c28:	20000b4d 	.word	0x20000b4d
 8001c2c:	0800d7e0 	.word	0x0800d7e0
 8001c30:	40010800 	.word	0x40010800
 8001c34:	20000b5b 	.word	0x20000b5b
 8001c38:	20000b34 	.word	0x20000b34
 8001c3c:	20000ac0 	.word	0x20000ac0
 8001c40:	20000b32 	.word	0x20000b32
 8001c44:	20000b58 	.word	0x20000b58
 8001c48:	20000b2c 	.word	0x20000b2c
 8001c4c:	0800d7f4 	.word	0x0800d7f4
 8001c50:	0800d808 	.word	0x0800d808
 8001c54:	20000b38 	.word	0x20000b38
 8001c58:	0800d81c 	.word	0x0800d81c
 8001c5c:	0800d82c 	.word	0x0800d82c
 8001c60:	0800d83c 	.word	0x0800d83c
 8001c64:	0800d850 	.word	0x0800d850
 8001c68:	0800d864 	.word	0x0800d864
 8001c6c:	0800d878 	.word	0x0800d878
 8001c70:	20000b35 	.word	0x20000b35
 8001c74:	0800d88c 	.word	0x0800d88c
 8001c78:	0800d8a0 	.word	0x0800d8a0
 8001c7c:	0800d8b0 	.word	0x0800d8b0
			}
		} else if(kapi1Tip == 2) {
 8001c80:	4b8a      	ldr	r3, [pc, #552]	; (8001eac <menu+0x15ac>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d104      	bne.n	8001c92 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8001c88:	4a89      	ldr	r2, [pc, #548]	; (8001eb0 <menu+0x15b0>)
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	2002      	movs	r0, #2
 8001c8e:	f7fe fd93 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c92:	2102      	movs	r1, #2
 8001c94:	4887      	ldr	r0, [pc, #540]	; (8001eb4 <menu+0x15b4>)
 8001c96:	f007 fdd7 	bl	8009848 <HAL_GPIO_ReadPin>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d115      	bne.n	8001ccc <menu+0x13cc>
 8001ca0:	4b85      	ldr	r3, [pc, #532]	; (8001eb8 <menu+0x15b8>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	f083 0301 	eor.w	r3, r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00e      	beq.n	8001ccc <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8001cae:	4b7f      	ldr	r3, [pc, #508]	; (8001eac <menu+0x15ac>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b7d      	ldr	r3, [pc, #500]	; (8001eac <menu+0x15ac>)
 8001cb8:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8001cba:	4b7c      	ldr	r3, [pc, #496]	; (8001eac <menu+0x15ac>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d902      	bls.n	8001cc8 <menu+0x13c8>
				kapi1Tip = 0;
 8001cc2:	4b7a      	ldr	r3, [pc, #488]	; (8001eac <menu+0x15ac>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cc8:	f003 fa86 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ccc:	2104      	movs	r1, #4
 8001cce:	4879      	ldr	r0, [pc, #484]	; (8001eb4 <menu+0x15b4>)
 8001cd0:	f007 fdba 	bl	8009848 <HAL_GPIO_ReadPin>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d115      	bne.n	8001d06 <menu+0x1406>
 8001cda:	4b77      	ldr	r3, [pc, #476]	; (8001eb8 <menu+0x15b8>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	f083 0301 	eor.w	r3, r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00e      	beq.n	8001d06 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8001ce8:	4b70      	ldr	r3, [pc, #448]	; (8001eac <menu+0x15ac>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	4b6e      	ldr	r3, [pc, #440]	; (8001eac <menu+0x15ac>)
 8001cf2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001cf4:	4b6d      	ldr	r3, [pc, #436]	; (8001eac <menu+0x15ac>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d902      	bls.n	8001d02 <menu+0x1402>
		   		kapi1Tip = 2;
 8001cfc:	4b6b      	ldr	r3, [pc, #428]	; (8001eac <menu+0x15ac>)
 8001cfe:	2202      	movs	r2, #2
 8001d00:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d02:	f003 fa69 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d06:	2108      	movs	r1, #8
 8001d08:	486a      	ldr	r0, [pc, #424]	; (8001eb4 <menu+0x15b4>)
 8001d0a:	f007 fd9d 	bl	8009848 <HAL_GPIO_ReadPin>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d10d      	bne.n	8001d30 <menu+0x1430>
 8001d14:	4b68      	ldr	r3, [pc, #416]	; (8001eb8 <menu+0x15b8>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	f083 0301 	eor.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d006      	beq.n	8001d30 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8001d22:	4b62      	ldr	r3, [pc, #392]	; (8001eac <menu+0x15ac>)
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	4b65      	ldr	r3, [pc, #404]	; (8001ebc <menu+0x15bc>)
 8001d28:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8001d2a:	4b65      	ldr	r3, [pc, #404]	; (8001ec0 <menu+0x15c0>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001d30:	4b64      	ldr	r3, [pc, #400]	; (8001ec4 <menu+0x15c4>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b0a      	cmp	r3, #10
 8001d36:	d17f      	bne.n	8001e38 <menu+0x1538>
		if(dilSecim == 0) {
 8001d38:	4b63      	ldr	r3, [pc, #396]	; (8001ec8 <menu+0x15c8>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10a      	bne.n	8001d56 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8001d40:	4a62      	ldr	r2, [pc, #392]	; (8001ecc <menu+0x15cc>)
 8001d42:	2101      	movs	r1, #1
 8001d44:	2001      	movs	r0, #1
 8001d46:	f7fe fd37 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001d4a:	4a61      	ldr	r2, [pc, #388]	; (8001ed0 <menu+0x15d0>)
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	2002      	movs	r0, #2
 8001d50:	f7fe fd32 	bl	80007b8 <lcd_print>
 8001d54:	e00d      	b.n	8001d72 <menu+0x1472>
		} else if(dilSecim == 1) {
 8001d56:	4b5c      	ldr	r3, [pc, #368]	; (8001ec8 <menu+0x15c8>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d109      	bne.n	8001d72 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8001d5e:	4a5d      	ldr	r2, [pc, #372]	; (8001ed4 <menu+0x15d4>)
 8001d60:	2101      	movs	r1, #1
 8001d62:	2001      	movs	r0, #1
 8001d64:	f7fe fd28 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001d68:	4a5b      	ldr	r2, [pc, #364]	; (8001ed8 <menu+0x15d8>)
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	2002      	movs	r0, #2
 8001d6e:	f7fe fd23 	bl	80007b8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8001d72:	4b5a      	ldr	r3, [pc, #360]	; (8001edc <menu+0x15dc>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	220a      	movs	r2, #10
 8001d78:	4959      	ldr	r1, [pc, #356]	; (8001ee0 <menu+0x15e0>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f00a fd90 	bl	800c8a0 <itoa>
		lcd_print(2,16,snum);
 8001d80:	4a57      	ldr	r2, [pc, #348]	; (8001ee0 <menu+0x15e0>)
 8001d82:	2110      	movs	r1, #16
 8001d84:	2002      	movs	r0, #2
 8001d86:	f7fe fd17 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	4849      	ldr	r0, [pc, #292]	; (8001eb4 <menu+0x15b4>)
 8001d8e:	f007 fd5b 	bl	8009848 <HAL_GPIO_ReadPin>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d119      	bne.n	8001dcc <menu+0x14cc>
 8001d98:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <menu+0x15b8>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	f083 0301 	eor.w	r3, r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d012      	beq.n	8001dcc <menu+0x14cc>
 8001da6:	4b41      	ldr	r3, [pc, #260]	; (8001eac <menu+0x15ac>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10e      	bne.n	8001dcc <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8001dae:	4b4b      	ldr	r3, [pc, #300]	; (8001edc <menu+0x15dc>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b49      	ldr	r3, [pc, #292]	; (8001edc <menu+0x15dc>)
 8001db8:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001dba:	4b48      	ldr	r3, [pc, #288]	; (8001edc <menu+0x15dc>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d902      	bls.n	8001dc8 <menu+0x14c8>
				kapi1AcSure = 0;
 8001dc2:	4b46      	ldr	r3, [pc, #280]	; (8001edc <menu+0x15dc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dc8:	f003 fa06 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001dcc:	2104      	movs	r1, #4
 8001dce:	4839      	ldr	r0, [pc, #228]	; (8001eb4 <menu+0x15b4>)
 8001dd0:	f007 fd3a 	bl	8009848 <HAL_GPIO_ReadPin>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d119      	bne.n	8001e0e <menu+0x150e>
 8001dda:	4b37      	ldr	r3, [pc, #220]	; (8001eb8 <menu+0x15b8>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	f083 0301 	eor.w	r3, r3, #1
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d012      	beq.n	8001e0e <menu+0x150e>
 8001de8:	4b30      	ldr	r3, [pc, #192]	; (8001eac <menu+0x15ac>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10e      	bne.n	8001e0e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8001df0:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <menu+0x15dc>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b38      	ldr	r3, [pc, #224]	; (8001edc <menu+0x15dc>)
 8001dfa:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001dfc:	4b37      	ldr	r3, [pc, #220]	; (8001edc <menu+0x15dc>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b06      	cmp	r3, #6
 8001e02:	d902      	bls.n	8001e0a <menu+0x150a>
		   		kapi1AcSure = 5;
 8001e04:	4b35      	ldr	r3, [pc, #212]	; (8001edc <menu+0x15dc>)
 8001e06:	2205      	movs	r2, #5
 8001e08:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e0a:	f003 f9e5 	bl	80051d8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e0e:	2108      	movs	r1, #8
 8001e10:	4828      	ldr	r0, [pc, #160]	; (8001eb4 <menu+0x15b4>)
 8001e12:	f007 fd19 	bl	8009848 <HAL_GPIO_ReadPin>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d10d      	bne.n	8001e38 <menu+0x1538>
 8001e1c:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <menu+0x15b8>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	f083 0301 	eor.w	r3, r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d006      	beq.n	8001e38 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <menu+0x15dc>)
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <menu+0x15bc>)
 8001e30:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001e32:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <menu+0x15c0>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <menu+0x15c4>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b0b      	cmp	r3, #11
 8001e3e:	f040 80b5 	bne.w	8001fac <menu+0x16ac>
		if(dilSecim == 0) {
 8001e42:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <menu+0x15c8>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8001e4a:	4a26      	ldr	r2, [pc, #152]	; (8001ee4 <menu+0x15e4>)
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f7fe fcb2 	bl	80007b8 <lcd_print>
 8001e54:	e008      	b.n	8001e68 <menu+0x1568>
		} else if(dilSecim == 1) {
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <menu+0x15c8>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d104      	bne.n	8001e68 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8001e5e:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <menu+0x15e8>)
 8001e60:	2101      	movs	r1, #1
 8001e62:	2001      	movs	r0, #1
 8001e64:	f7fe fca8 	bl	80007b8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8001e68:	4b20      	ldr	r3, [pc, #128]	; (8001eec <menu+0x15ec>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8001e70:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <menu+0x15f0>)
 8001e72:	2101      	movs	r1, #1
 8001e74:	2002      	movs	r0, #2
 8001e76:	f7fe fc9f 	bl	80007b8 <lcd_print>
 8001e7a:	e048      	b.n	8001f0e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <menu+0x15ec>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d13b      	bne.n	8001efc <menu+0x15fc>
			if(dilSecim == 0) {
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <menu+0x15c8>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d105      	bne.n	8001e98 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8001e8c:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <menu+0x15f4>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2002      	movs	r0, #2
 8001e92:	f7fe fc91 	bl	80007b8 <lcd_print>
 8001e96:	e03a      	b.n	8001f0e <menu+0x160e>
			} else if(dilSecim == 1) {
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <menu+0x15c8>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d136      	bne.n	8001f0e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8001ea0:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <menu+0x15f8>)
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f7fe fc87 	bl	80007b8 <lcd_print>
 8001eaa:	e030      	b.n	8001f0e <menu+0x160e>
 8001eac:	20000b35 	.word	0x20000b35
 8001eb0:	0800d8c4 	.word	0x0800d8c4
 8001eb4:	40010800 	.word	0x40010800
 8001eb8:	20000b5b 	.word	0x20000b5b
 8001ebc:	20000ac0 	.word	0x20000ac0
 8001ec0:	20000b58 	.word	0x20000b58
 8001ec4:	20000b2c 	.word	0x20000b2c
 8001ec8:	20000b4d 	.word	0x20000b4d
 8001ecc:	0800d8d4 	.word	0x0800d8d4
 8001ed0:	0800d8e8 	.word	0x0800d8e8
 8001ed4:	0800d8f8 	.word	0x0800d8f8
 8001ed8:	0800d90c 	.word	0x0800d90c
 8001edc:	20000b45 	.word	0x20000b45
 8001ee0:	20000b00 	.word	0x20000b00
 8001ee4:	0800d91c 	.word	0x0800d91c
 8001ee8:	0800d930 	.word	0x0800d930
 8001eec:	20000b36 	.word	0x20000b36
 8001ef0:	0800d88c 	.word	0x0800d88c
 8001ef4:	0800d8a0 	.word	0x0800d8a0
 8001ef8:	0800d8b0 	.word	0x0800d8b0
			}
		} else if(kapi2Tip == 2) {
 8001efc:	4b8a      	ldr	r3, [pc, #552]	; (8002128 <menu+0x1828>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d104      	bne.n	8001f0e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8001f04:	4a89      	ldr	r2, [pc, #548]	; (800212c <menu+0x182c>)
 8001f06:	2101      	movs	r1, #1
 8001f08:	2002      	movs	r0, #2
 8001f0a:	f7fe fc55 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f0e:	2102      	movs	r1, #2
 8001f10:	4887      	ldr	r0, [pc, #540]	; (8002130 <menu+0x1830>)
 8001f12:	f007 fc99 	bl	8009848 <HAL_GPIO_ReadPin>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d115      	bne.n	8001f48 <menu+0x1648>
 8001f1c:	4b85      	ldr	r3, [pc, #532]	; (8002134 <menu+0x1834>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	f083 0301 	eor.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00e      	beq.n	8001f48 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8001f2a:	4b7f      	ldr	r3, [pc, #508]	; (8002128 <menu+0x1828>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4b7d      	ldr	r3, [pc, #500]	; (8002128 <menu+0x1828>)
 8001f34:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001f36:	4b7c      	ldr	r3, [pc, #496]	; (8002128 <menu+0x1828>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d902      	bls.n	8001f44 <menu+0x1644>
				kapi2Tip = 0;
 8001f3e:	4b7a      	ldr	r3, [pc, #488]	; (8002128 <menu+0x1828>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f44:	f003 f948 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f48:	2104      	movs	r1, #4
 8001f4a:	4879      	ldr	r0, [pc, #484]	; (8002130 <menu+0x1830>)
 8001f4c:	f007 fc7c 	bl	8009848 <HAL_GPIO_ReadPin>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d115      	bne.n	8001f82 <menu+0x1682>
 8001f56:	4b77      	ldr	r3, [pc, #476]	; (8002134 <menu+0x1834>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	f083 0301 	eor.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00e      	beq.n	8001f82 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8001f64:	4b70      	ldr	r3, [pc, #448]	; (8002128 <menu+0x1828>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b6e      	ldr	r3, [pc, #440]	; (8002128 <menu+0x1828>)
 8001f6e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001f70:	4b6d      	ldr	r3, [pc, #436]	; (8002128 <menu+0x1828>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d902      	bls.n	8001f7e <menu+0x167e>
		   		kapi2Tip = 2;
 8001f78:	4b6b      	ldr	r3, [pc, #428]	; (8002128 <menu+0x1828>)
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f7e:	f003 f92b 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f82:	2108      	movs	r1, #8
 8001f84:	486a      	ldr	r0, [pc, #424]	; (8002130 <menu+0x1830>)
 8001f86:	f007 fc5f 	bl	8009848 <HAL_GPIO_ReadPin>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d10d      	bne.n	8001fac <menu+0x16ac>
 8001f90:	4b68      	ldr	r3, [pc, #416]	; (8002134 <menu+0x1834>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	f083 0301 	eor.w	r3, r3, #1
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8001f9e:	4b62      	ldr	r3, [pc, #392]	; (8002128 <menu+0x1828>)
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	4b65      	ldr	r3, [pc, #404]	; (8002138 <menu+0x1838>)
 8001fa4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001fa6:	4b65      	ldr	r3, [pc, #404]	; (800213c <menu+0x183c>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001fac:	4b64      	ldr	r3, [pc, #400]	; (8002140 <menu+0x1840>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	d17f      	bne.n	80020b4 <menu+0x17b4>
		if(dilSecim == 0) {
 8001fb4:	4b63      	ldr	r3, [pc, #396]	; (8002144 <menu+0x1844>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10a      	bne.n	8001fd2 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001fbc:	4a62      	ldr	r2, [pc, #392]	; (8002148 <menu+0x1848>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f7fe fbf9 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001fc6:	4a61      	ldr	r2, [pc, #388]	; (800214c <menu+0x184c>)
 8001fc8:	2101      	movs	r1, #1
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f7fe fbf4 	bl	80007b8 <lcd_print>
 8001fd0:	e00d      	b.n	8001fee <menu+0x16ee>
		} else if(dilSecim == 1) {
 8001fd2:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <menu+0x1844>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d109      	bne.n	8001fee <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001fda:	4a5d      	ldr	r2, [pc, #372]	; (8002150 <menu+0x1850>)
 8001fdc:	2101      	movs	r1, #1
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f7fe fbea 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001fe4:	4a5b      	ldr	r2, [pc, #364]	; (8002154 <menu+0x1854>)
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	2002      	movs	r0, #2
 8001fea:	f7fe fbe5 	bl	80007b8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001fee:	4b5a      	ldr	r3, [pc, #360]	; (8002158 <menu+0x1858>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	220a      	movs	r2, #10
 8001ff4:	4959      	ldr	r1, [pc, #356]	; (800215c <menu+0x185c>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f00a fc52 	bl	800c8a0 <itoa>
		lcd_print(2,16,snum);
 8001ffc:	4a57      	ldr	r2, [pc, #348]	; (800215c <menu+0x185c>)
 8001ffe:	2110      	movs	r1, #16
 8002000:	2002      	movs	r0, #2
 8002002:	f7fe fbd9 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002006:	2102      	movs	r1, #2
 8002008:	4849      	ldr	r0, [pc, #292]	; (8002130 <menu+0x1830>)
 800200a:	f007 fc1d 	bl	8009848 <HAL_GPIO_ReadPin>
 800200e:	4603      	mov	r3, r0
 8002010:	2b01      	cmp	r3, #1
 8002012:	d119      	bne.n	8002048 <menu+0x1748>
 8002014:	4b47      	ldr	r3, [pc, #284]	; (8002134 <menu+0x1834>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	f083 0301 	eor.w	r3, r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d012      	beq.n	8002048 <menu+0x1748>
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <menu+0x1828>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10e      	bne.n	8002048 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 800202a:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <menu+0x1858>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	3301      	adds	r3, #1
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b49      	ldr	r3, [pc, #292]	; (8002158 <menu+0x1858>)
 8002034:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002036:	4b48      	ldr	r3, [pc, #288]	; (8002158 <menu+0x1858>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b05      	cmp	r3, #5
 800203c:	d902      	bls.n	8002044 <menu+0x1744>
				kapi2AcSure = 0;
 800203e:	4b46      	ldr	r3, [pc, #280]	; (8002158 <menu+0x1858>)
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002044:	f003 f8c8 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002048:	2104      	movs	r1, #4
 800204a:	4839      	ldr	r0, [pc, #228]	; (8002130 <menu+0x1830>)
 800204c:	f007 fbfc 	bl	8009848 <HAL_GPIO_ReadPin>
 8002050:	4603      	mov	r3, r0
 8002052:	2b01      	cmp	r3, #1
 8002054:	d119      	bne.n	800208a <menu+0x178a>
 8002056:	4b37      	ldr	r3, [pc, #220]	; (8002134 <menu+0x1834>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	f083 0301 	eor.w	r3, r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d012      	beq.n	800208a <menu+0x178a>
 8002064:	4b30      	ldr	r3, [pc, #192]	; (8002128 <menu+0x1828>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10e      	bne.n	800208a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 800206c:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <menu+0x1858>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	3b01      	subs	r3, #1
 8002072:	b2da      	uxtb	r2, r3
 8002074:	4b38      	ldr	r3, [pc, #224]	; (8002158 <menu+0x1858>)
 8002076:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002078:	4b37      	ldr	r3, [pc, #220]	; (8002158 <menu+0x1858>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b06      	cmp	r3, #6
 800207e:	d902      	bls.n	8002086 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002080:	4b35      	ldr	r3, [pc, #212]	; (8002158 <menu+0x1858>)
 8002082:	2205      	movs	r2, #5
 8002084:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002086:	f003 f8a7 	bl	80051d8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800208a:	2108      	movs	r1, #8
 800208c:	4828      	ldr	r0, [pc, #160]	; (8002130 <menu+0x1830>)
 800208e:	f007 fbdb 	bl	8009848 <HAL_GPIO_ReadPin>
 8002092:	4603      	mov	r3, r0
 8002094:	2b01      	cmp	r3, #1
 8002096:	d10d      	bne.n	80020b4 <menu+0x17b4>
 8002098:	4b26      	ldr	r3, [pc, #152]	; (8002134 <menu+0x1834>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	f083 0301 	eor.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 80020a6:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <menu+0x1858>)
 80020a8:	781a      	ldrb	r2, [r3, #0]
 80020aa:	4b23      	ldr	r3, [pc, #140]	; (8002138 <menu+0x1838>)
 80020ac:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80020ae:	4b23      	ldr	r3, [pc, #140]	; (800213c <menu+0x183c>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80020b4:	4b22      	ldr	r3, [pc, #136]	; (8002140 <menu+0x1840>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b0d      	cmp	r3, #13
 80020ba:	f040 80b5 	bne.w	8002228 <menu+0x1928>
		if(dilSecim == 0) {
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <menu+0x1844>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 80020c6:	4a26      	ldr	r2, [pc, #152]	; (8002160 <menu+0x1860>)
 80020c8:	2101      	movs	r1, #1
 80020ca:	2001      	movs	r0, #1
 80020cc:	f7fe fb74 	bl	80007b8 <lcd_print>
 80020d0:	e008      	b.n	80020e4 <menu+0x17e4>
		} else if(dilSecim == 1){
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <menu+0x1844>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d104      	bne.n	80020e4 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 80020da:	4a22      	ldr	r2, [pc, #136]	; (8002164 <menu+0x1864>)
 80020dc:	2101      	movs	r1, #1
 80020de:	2001      	movs	r0, #1
 80020e0:	f7fe fb6a 	bl	80007b8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <menu+0x1868>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 80020ec:	4a1f      	ldr	r2, [pc, #124]	; (800216c <menu+0x186c>)
 80020ee:	2101      	movs	r1, #1
 80020f0:	2002      	movs	r0, #2
 80020f2:	f7fe fb61 	bl	80007b8 <lcd_print>
 80020f6:	e048      	b.n	800218a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <menu+0x1868>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d13b      	bne.n	8002178 <menu+0x1878>
			if(dilSecim == 0) {
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <menu+0x1844>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d105      	bne.n	8002114 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002108:	4a19      	ldr	r2, [pc, #100]	; (8002170 <menu+0x1870>)
 800210a:	2101      	movs	r1, #1
 800210c:	2002      	movs	r0, #2
 800210e:	f7fe fb53 	bl	80007b8 <lcd_print>
 8002112:	e03a      	b.n	800218a <menu+0x188a>
			} else if(dilSecim == 1) {
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <menu+0x1844>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d136      	bne.n	800218a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 800211c:	4a15      	ldr	r2, [pc, #84]	; (8002174 <menu+0x1874>)
 800211e:	2101      	movs	r1, #1
 8002120:	2002      	movs	r0, #2
 8002122:	f7fe fb49 	bl	80007b8 <lcd_print>
 8002126:	e030      	b.n	800218a <menu+0x188a>
 8002128:	20000b36 	.word	0x20000b36
 800212c:	0800d8c4 	.word	0x0800d8c4
 8002130:	40010800 	.word	0x40010800
 8002134:	20000b5b 	.word	0x20000b5b
 8002138:	20000ac0 	.word	0x20000ac0
 800213c:	20000b58 	.word	0x20000b58
 8002140:	20000b2c 	.word	0x20000b2c
 8002144:	20000b4d 	.word	0x20000b4d
 8002148:	0800d944 	.word	0x0800d944
 800214c:	0800d8e8 	.word	0x0800d8e8
 8002150:	0800d958 	.word	0x0800d958
 8002154:	0800d90c 	.word	0x0800d90c
 8002158:	20000b46 	.word	0x20000b46
 800215c:	20000b00 	.word	0x20000b00
 8002160:	0800d96c 	.word	0x0800d96c
 8002164:	0800d980 	.word	0x0800d980
 8002168:	20000b37 	.word	0x20000b37
 800216c:	0800d88c 	.word	0x0800d88c
 8002170:	0800d8a0 	.word	0x0800d8a0
 8002174:	0800d8b0 	.word	0x0800d8b0
			}
		} else if(kapitablaTip == 2) {
 8002178:	4b5b      	ldr	r3, [pc, #364]	; (80022e8 <menu+0x19e8>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d104      	bne.n	800218a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002180:	4a5a      	ldr	r2, [pc, #360]	; (80022ec <menu+0x19ec>)
 8002182:	2101      	movs	r1, #1
 8002184:	2002      	movs	r0, #2
 8002186:	f7fe fb17 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800218a:	2102      	movs	r1, #2
 800218c:	4858      	ldr	r0, [pc, #352]	; (80022f0 <menu+0x19f0>)
 800218e:	f007 fb5b 	bl	8009848 <HAL_GPIO_ReadPin>
 8002192:	4603      	mov	r3, r0
 8002194:	2b01      	cmp	r3, #1
 8002196:	d115      	bne.n	80021c4 <menu+0x18c4>
 8002198:	4b56      	ldr	r3, [pc, #344]	; (80022f4 <menu+0x19f4>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	f083 0301 	eor.w	r3, r3, #1
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00e      	beq.n	80021c4 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 80021a6:	4b50      	ldr	r3, [pc, #320]	; (80022e8 <menu+0x19e8>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	3301      	adds	r3, #1
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4b4e      	ldr	r3, [pc, #312]	; (80022e8 <menu+0x19e8>)
 80021b0:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80021b2:	4b4d      	ldr	r3, [pc, #308]	; (80022e8 <menu+0x19e8>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d902      	bls.n	80021c0 <menu+0x18c0>
				kapitablaTip = 0;
 80021ba:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <menu+0x19e8>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021c0:	f003 f80a 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021c4:	2104      	movs	r1, #4
 80021c6:	484a      	ldr	r0, [pc, #296]	; (80022f0 <menu+0x19f0>)
 80021c8:	f007 fb3e 	bl	8009848 <HAL_GPIO_ReadPin>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d115      	bne.n	80021fe <menu+0x18fe>
 80021d2:	4b48      	ldr	r3, [pc, #288]	; (80022f4 <menu+0x19f4>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	f083 0301 	eor.w	r3, r3, #1
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00e      	beq.n	80021fe <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 80021e0:	4b41      	ldr	r3, [pc, #260]	; (80022e8 <menu+0x19e8>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <menu+0x19e8>)
 80021ea:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80021ec:	4b3e      	ldr	r3, [pc, #248]	; (80022e8 <menu+0x19e8>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d902      	bls.n	80021fa <menu+0x18fa>
		   		kapitablaTip = 2;
 80021f4:	4b3c      	ldr	r3, [pc, #240]	; (80022e8 <menu+0x19e8>)
 80021f6:	2202      	movs	r2, #2
 80021f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021fa:	f002 ffed 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021fe:	2108      	movs	r1, #8
 8002200:	483b      	ldr	r0, [pc, #236]	; (80022f0 <menu+0x19f0>)
 8002202:	f007 fb21 	bl	8009848 <HAL_GPIO_ReadPin>
 8002206:	4603      	mov	r3, r0
 8002208:	2b01      	cmp	r3, #1
 800220a:	d10d      	bne.n	8002228 <menu+0x1928>
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <menu+0x19f4>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	f083 0301 	eor.w	r3, r3, #1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <menu+0x19e8>)
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <menu+0x19f8>)
 8002220:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002222:	4b36      	ldr	r3, [pc, #216]	; (80022fc <menu+0x19fc>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002228:	4b35      	ldr	r3, [pc, #212]	; (8002300 <menu+0x1a00>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b0e      	cmp	r3, #14
 800222e:	f040 80f2 	bne.w	8002416 <menu+0x1b16>
		if(dilSecim == 0) {
 8002232:	4b34      	ldr	r3, [pc, #208]	; (8002304 <menu+0x1a04>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d105      	bne.n	8002246 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 800223a:	4a33      	ldr	r2, [pc, #204]	; (8002308 <menu+0x1a08>)
 800223c:	2101      	movs	r1, #1
 800223e:	2001      	movs	r0, #1
 8002240:	f7fe faba 	bl	80007b8 <lcd_print>
 8002244:	e008      	b.n	8002258 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002246:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <menu+0x1a04>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d104      	bne.n	8002258 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 800224e:	4a2f      	ldr	r2, [pc, #188]	; (800230c <menu+0x1a0c>)
 8002250:	2101      	movs	r1, #1
 8002252:	2001      	movs	r0, #1
 8002254:	f7fe fab0 	bl	80007b8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <menu+0x1a10>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d113      	bne.n	8002288 <menu+0x1988>
			if(dilSecim == 0){
 8002260:	4b28      	ldr	r3, [pc, #160]	; (8002304 <menu+0x1a04>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d105      	bne.n	8002274 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002268:	4a2a      	ldr	r2, [pc, #168]	; (8002314 <menu+0x1a14>)
 800226a:	2101      	movs	r1, #1
 800226c:	2002      	movs	r0, #2
 800226e:	f7fe faa3 	bl	80007b8 <lcd_print>
 8002272:	e071      	b.n	8002358 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <menu+0x1a04>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d16d      	bne.n	8002358 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 800227c:	4a26      	ldr	r2, [pc, #152]	; (8002318 <menu+0x1a18>)
 800227e:	2101      	movs	r1, #1
 8002280:	2002      	movs	r0, #2
 8002282:	f7fe fa99 	bl	80007b8 <lcd_print>
 8002286:	e067      	b.n	8002358 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002288:	4b21      	ldr	r3, [pc, #132]	; (8002310 <menu+0x1a10>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d112      	bne.n	80022b6 <menu+0x19b6>
			if(dilSecim == 0){
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <menu+0x1a04>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d104      	bne.n	80022a2 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002298:	4a20      	ldr	r2, [pc, #128]	; (800231c <menu+0x1a1c>)
 800229a:	2101      	movs	r1, #1
 800229c:	2002      	movs	r0, #2
 800229e:	f7fe fa8b 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <menu+0x1a04>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d156      	bne.n	8002358 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 80022aa:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <menu+0x1a20>)
 80022ac:	2101      	movs	r1, #1
 80022ae:	2002      	movs	r0, #2
 80022b0:	f7fe fa82 	bl	80007b8 <lcd_print>
 80022b4:	e050      	b.n	8002358 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <menu+0x1a10>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d136      	bne.n	800232c <menu+0x1a2c>
			if(dilSecim == 0){
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <menu+0x1a04>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 80022c6:	4a17      	ldr	r2, [pc, #92]	; (8002324 <menu+0x1a24>)
 80022c8:	2101      	movs	r1, #1
 80022ca:	2002      	movs	r0, #2
 80022cc:	f7fe fa74 	bl	80007b8 <lcd_print>
 80022d0:	e042      	b.n	8002358 <menu+0x1a58>
			} else if(dilSecim == 1) {
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <menu+0x1a04>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d13e      	bne.n	8002358 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 80022da:	4a13      	ldr	r2, [pc, #76]	; (8002328 <menu+0x1a28>)
 80022dc:	2101      	movs	r1, #1
 80022de:	2002      	movs	r0, #2
 80022e0:	f7fe fa6a 	bl	80007b8 <lcd_print>
 80022e4:	e038      	b.n	8002358 <menu+0x1a58>
 80022e6:	bf00      	nop
 80022e8:	20000b37 	.word	0x20000b37
 80022ec:	0800d8c4 	.word	0x0800d8c4
 80022f0:	40010800 	.word	0x40010800
 80022f4:	20000b5b 	.word	0x20000b5b
 80022f8:	20000ac0 	.word	0x20000ac0
 80022fc:	20000b58 	.word	0x20000b58
 8002300:	20000b2c 	.word	0x20000b2c
 8002304:	20000b4d 	.word	0x20000b4d
 8002308:	0800d994 	.word	0x0800d994
 800230c:	0800d9a8 	.word	0x0800d9a8
 8002310:	20000b39 	.word	0x20000b39
 8002314:	0800d9bc 	.word	0x0800d9bc
 8002318:	0800d9cc 	.word	0x0800d9cc
 800231c:	0800d9dc 	.word	0x0800d9dc
 8002320:	0800d9ec 	.word	0x0800d9ec
 8002324:	0800d9fc 	.word	0x0800d9fc
 8002328:	0800da10 	.word	0x0800da10
			}
		} else if(kapiTablaAcKonum == 3) {
 800232c:	4b9b      	ldr	r3, [pc, #620]	; (800259c <menu+0x1c9c>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d111      	bne.n	8002358 <menu+0x1a58>
			if(dilSecim == 0) {
 8002334:	4b9a      	ldr	r3, [pc, #616]	; (80025a0 <menu+0x1ca0>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d104      	bne.n	8002346 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 800233c:	4a99      	ldr	r2, [pc, #612]	; (80025a4 <menu+0x1ca4>)
 800233e:	2101      	movs	r1, #1
 8002340:	2002      	movs	r0, #2
 8002342:	f7fe fa39 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8002346:	4b96      	ldr	r3, [pc, #600]	; (80025a0 <menu+0x1ca0>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d104      	bne.n	8002358 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 800234e:	4a96      	ldr	r2, [pc, #600]	; (80025a8 <menu+0x1ca8>)
 8002350:	2101      	movs	r1, #1
 8002352:	2002      	movs	r0, #2
 8002354:	f7fe fa30 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002358:	2102      	movs	r1, #2
 800235a:	4894      	ldr	r0, [pc, #592]	; (80025ac <menu+0x1cac>)
 800235c:	f007 fa74 	bl	8009848 <HAL_GPIO_ReadPin>
 8002360:	4603      	mov	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d115      	bne.n	8002392 <menu+0x1a92>
 8002366:	4b92      	ldr	r3, [pc, #584]	; (80025b0 <menu+0x1cb0>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f083 0301 	eor.w	r3, r3, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00e      	beq.n	8002392 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002374:	4b89      	ldr	r3, [pc, #548]	; (800259c <menu+0x1c9c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	3301      	adds	r3, #1
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b87      	ldr	r3, [pc, #540]	; (800259c <menu+0x1c9c>)
 800237e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002380:	4b86      	ldr	r3, [pc, #536]	; (800259c <menu+0x1c9c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d902      	bls.n	800238e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002388:	4b84      	ldr	r3, [pc, #528]	; (800259c <menu+0x1c9c>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800238e:	f002 ff23 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002392:	2104      	movs	r1, #4
 8002394:	4885      	ldr	r0, [pc, #532]	; (80025ac <menu+0x1cac>)
 8002396:	f007 fa57 	bl	8009848 <HAL_GPIO_ReadPin>
 800239a:	4603      	mov	r3, r0
 800239c:	2b01      	cmp	r3, #1
 800239e:	d115      	bne.n	80023cc <menu+0x1acc>
 80023a0:	4b83      	ldr	r3, [pc, #524]	; (80025b0 <menu+0x1cb0>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	f083 0301 	eor.w	r3, r3, #1
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00e      	beq.n	80023cc <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80023ae:	4b7b      	ldr	r3, [pc, #492]	; (800259c <menu+0x1c9c>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b79      	ldr	r3, [pc, #484]	; (800259c <menu+0x1c9c>)
 80023b8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80023ba:	4b78      	ldr	r3, [pc, #480]	; (800259c <menu+0x1c9c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d902      	bls.n	80023c8 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 80023c2:	4b76      	ldr	r3, [pc, #472]	; (800259c <menu+0x1c9c>)
 80023c4:	2202      	movs	r2, #2
 80023c6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023c8:	f002 ff06 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023cc:	2108      	movs	r1, #8
 80023ce:	4877      	ldr	r0, [pc, #476]	; (80025ac <menu+0x1cac>)
 80023d0:	f007 fa3a 	bl	8009848 <HAL_GPIO_ReadPin>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d11d      	bne.n	8002416 <menu+0x1b16>
 80023da:	4b75      	ldr	r3, [pc, #468]	; (80025b0 <menu+0x1cb0>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	f083 0301 	eor.w	r3, r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d016      	beq.n	8002416 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 80023e8:	4b6c      	ldr	r3, [pc, #432]	; (800259c <menu+0x1c9c>)
 80023ea:	781a      	ldrb	r2, [r3, #0]
 80023ec:	4b71      	ldr	r3, [pc, #452]	; (80025b4 <menu+0x1cb4>)
 80023ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80023f2:	4b6a      	ldr	r3, [pc, #424]	; (800259c <menu+0x1c9c>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <menu+0x1b02>
 80023fa:	4b68      	ldr	r3, [pc, #416]	; (800259c <menu+0x1c9c>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d106      	bne.n	8002410 <menu+0x1b10>
				altLimit = 1;
 8002402:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <menu+0x1cb8>)
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002408:	4b6b      	ldr	r3, [pc, #428]	; (80025b8 <menu+0x1cb8>)
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	4b69      	ldr	r3, [pc, #420]	; (80025b4 <menu+0x1cb4>)
 800240e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002410:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <menu+0x1cbc>)
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002416:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <menu+0x1cc0>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b0f      	cmp	r3, #15
 800241c:	d17f      	bne.n	800251e <menu+0x1c1e>
		if(dilSecim == 0) {
 800241e:	4b60      	ldr	r3, [pc, #384]	; (80025a0 <menu+0x1ca0>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10a      	bne.n	800243c <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002426:	4a67      	ldr	r2, [pc, #412]	; (80025c4 <menu+0x1cc4>)
 8002428:	2101      	movs	r1, #1
 800242a:	2001      	movs	r0, #1
 800242c:	f7fe f9c4 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002430:	4a65      	ldr	r2, [pc, #404]	; (80025c8 <menu+0x1cc8>)
 8002432:	2101      	movs	r1, #1
 8002434:	2002      	movs	r0, #2
 8002436:	f7fe f9bf 	bl	80007b8 <lcd_print>
 800243a:	e00d      	b.n	8002458 <menu+0x1b58>
		} else if(dilSecim == 1) {
 800243c:	4b58      	ldr	r3, [pc, #352]	; (80025a0 <menu+0x1ca0>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d109      	bne.n	8002458 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002444:	4a61      	ldr	r2, [pc, #388]	; (80025cc <menu+0x1ccc>)
 8002446:	2101      	movs	r1, #1
 8002448:	2001      	movs	r0, #1
 800244a:	f7fe f9b5 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800244e:	4a60      	ldr	r2, [pc, #384]	; (80025d0 <menu+0x1cd0>)
 8002450:	2101      	movs	r1, #1
 8002452:	2002      	movs	r0, #2
 8002454:	f7fe f9b0 	bl	80007b8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002458:	4b5e      	ldr	r3, [pc, #376]	; (80025d4 <menu+0x1cd4>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	220a      	movs	r2, #10
 800245e:	495e      	ldr	r1, [pc, #376]	; (80025d8 <menu+0x1cd8>)
 8002460:	4618      	mov	r0, r3
 8002462:	f00a fa1d 	bl	800c8a0 <itoa>
		lcd_print(2,16,snum);
 8002466:	4a5c      	ldr	r2, [pc, #368]	; (80025d8 <menu+0x1cd8>)
 8002468:	2110      	movs	r1, #16
 800246a:	2002      	movs	r0, #2
 800246c:	f7fe f9a4 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002470:	2102      	movs	r1, #2
 8002472:	484e      	ldr	r0, [pc, #312]	; (80025ac <menu+0x1cac>)
 8002474:	f007 f9e8 	bl	8009848 <HAL_GPIO_ReadPin>
 8002478:	4603      	mov	r3, r0
 800247a:	2b01      	cmp	r3, #1
 800247c:	d119      	bne.n	80024b2 <menu+0x1bb2>
 800247e:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <menu+0x1cb0>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	f083 0301 	eor.w	r3, r3, #1
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d012      	beq.n	80024b2 <menu+0x1bb2>
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <menu+0x1cdc>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10e      	bne.n	80024b2 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002494:	4b4f      	ldr	r3, [pc, #316]	; (80025d4 <menu+0x1cd4>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	3301      	adds	r3, #1
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b4d      	ldr	r3, [pc, #308]	; (80025d4 <menu+0x1cd4>)
 800249e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80024a0:	4b4c      	ldr	r3, [pc, #304]	; (80025d4 <menu+0x1cd4>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d902      	bls.n	80024ae <menu+0x1bae>
				kapiTablaAcSure = 0;
 80024a8:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <menu+0x1cd4>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024ae:	f002 fe93 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80024b2:	2104      	movs	r1, #4
 80024b4:	483d      	ldr	r0, [pc, #244]	; (80025ac <menu+0x1cac>)
 80024b6:	f007 f9c7 	bl	8009848 <HAL_GPIO_ReadPin>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d119      	bne.n	80024f4 <menu+0x1bf4>
 80024c0:	4b3b      	ldr	r3, [pc, #236]	; (80025b0 <menu+0x1cb0>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	f083 0301 	eor.w	r3, r3, #1
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d012      	beq.n	80024f4 <menu+0x1bf4>
 80024ce:	4b43      	ldr	r3, [pc, #268]	; (80025dc <menu+0x1cdc>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10e      	bne.n	80024f4 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80024d6:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <menu+0x1cd4>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	3b01      	subs	r3, #1
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <menu+0x1cd4>)
 80024e0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80024e2:	4b3c      	ldr	r3, [pc, #240]	; (80025d4 <menu+0x1cd4>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d902      	bls.n	80024f0 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 80024ea:	4b3a      	ldr	r3, [pc, #232]	; (80025d4 <menu+0x1cd4>)
 80024ec:	2205      	movs	r2, #5
 80024ee:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80024f0:	f002 fe72 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024f4:	2108      	movs	r1, #8
 80024f6:	482d      	ldr	r0, [pc, #180]	; (80025ac <menu+0x1cac>)
 80024f8:	f007 f9a6 	bl	8009848 <HAL_GPIO_ReadPin>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d10d      	bne.n	800251e <menu+0x1c1e>
 8002502:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <menu+0x1cb0>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	f083 0301 	eor.w	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002510:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <menu+0x1cd4>)
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <menu+0x1cb4>)
 8002516:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <menu+0x1cbc>)
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800251e:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <menu+0x1cc0>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b10      	cmp	r3, #16
 8002524:	f040 80bc 	bne.w	80026a0 <menu+0x1da0>
		if(dilSecim == 0) {
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <menu+0x1ca0>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002530:	4a2b      	ldr	r2, [pc, #172]	; (80025e0 <menu+0x1ce0>)
 8002532:	2101      	movs	r1, #1
 8002534:	2001      	movs	r0, #1
 8002536:	f7fe f93f 	bl	80007b8 <lcd_print>
 800253a:	e008      	b.n	800254e <menu+0x1c4e>
		} else if(dilSecim == 1) {
 800253c:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <menu+0x1ca0>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d104      	bne.n	800254e <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002544:	4a27      	ldr	r2, [pc, #156]	; (80025e4 <menu+0x1ce4>)
 8002546:	2101      	movs	r1, #1
 8002548:	2001      	movs	r0, #1
 800254a:	f7fe f935 	bl	80007b8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 800254e:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <menu+0x1ce8>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d113      	bne.n	800257e <menu+0x1c7e>
			if(dilSecim == 0) {
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <menu+0x1ca0>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d105      	bne.n	800256a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 800255e:	4a11      	ldr	r2, [pc, #68]	; (80025a4 <menu+0x1ca4>)
 8002560:	2101      	movs	r1, #1
 8002562:	2002      	movs	r0, #2
 8002564:	f7fe f928 	bl	80007b8 <lcd_print>
 8002568:	e04b      	b.n	8002602 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800256a:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <menu+0x1ca0>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d147      	bne.n	8002602 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002572:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <menu+0x1ca8>)
 8002574:	2101      	movs	r1, #1
 8002576:	2002      	movs	r0, #2
 8002578:	f7fe f91e 	bl	80007b8 <lcd_print>
 800257c:	e041      	b.n	8002602 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <menu+0x1ce8>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d13d      	bne.n	8002602 <menu+0x1d02>
			if(dilSecim == 0) {
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <menu+0x1ca0>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d130      	bne.n	80025f0 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800258e:	4a17      	ldr	r2, [pc, #92]	; (80025ec <menu+0x1cec>)
 8002590:	2101      	movs	r1, #1
 8002592:	2002      	movs	r0, #2
 8002594:	f7fe f910 	bl	80007b8 <lcd_print>
 8002598:	e033      	b.n	8002602 <menu+0x1d02>
 800259a:	bf00      	nop
 800259c:	20000b39 	.word	0x20000b39
 80025a0:	20000b4d 	.word	0x20000b4d
 80025a4:	0800d684 	.word	0x0800d684
 80025a8:	0800d698 	.word	0x0800d698
 80025ac:	40010800 	.word	0x40010800
 80025b0:	20000b5b 	.word	0x20000b5b
 80025b4:	20000ac0 	.word	0x20000ac0
 80025b8:	20000b32 	.word	0x20000b32
 80025bc:	20000b58 	.word	0x20000b58
 80025c0:	20000b2c 	.word	0x20000b2c
 80025c4:	0800da24 	.word	0x0800da24
 80025c8:	0800d8e8 	.word	0x0800d8e8
 80025cc:	0800da38 	.word	0x0800da38
 80025d0:	0800d90c 	.word	0x0800d90c
 80025d4:	20000b47 	.word	0x20000b47
 80025d8:	20000b00 	.word	0x20000b00
 80025dc:	20000b37 	.word	0x20000b37
 80025e0:	0800da4c 	.word	0x0800da4c
 80025e4:	0800da60 	.word	0x0800da60
 80025e8:	20000b3a 	.word	0x20000b3a
 80025ec:	0800d6e4 	.word	0x0800d6e4
			} else if(dilSecim == 1) {
 80025f0:	4b99      	ldr	r3, [pc, #612]	; (8002858 <menu+0x1f58>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d104      	bne.n	8002602 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80025f8:	4a98      	ldr	r2, [pc, #608]	; (800285c <menu+0x1f5c>)
 80025fa:	2101      	movs	r1, #1
 80025fc:	2002      	movs	r0, #2
 80025fe:	f7fe f8db 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002602:	2102      	movs	r1, #2
 8002604:	4896      	ldr	r0, [pc, #600]	; (8002860 <menu+0x1f60>)
 8002606:	f007 f91f 	bl	8009848 <HAL_GPIO_ReadPin>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d115      	bne.n	800263c <menu+0x1d3c>
 8002610:	4b94      	ldr	r3, [pc, #592]	; (8002864 <menu+0x1f64>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	f083 0301 	eor.w	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00e      	beq.n	800263c <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 800261e:	4b92      	ldr	r3, [pc, #584]	; (8002868 <menu+0x1f68>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	3301      	adds	r3, #1
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4b90      	ldr	r3, [pc, #576]	; (8002868 <menu+0x1f68>)
 8002628:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800262a:	4b8f      	ldr	r3, [pc, #572]	; (8002868 <menu+0x1f68>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d902      	bls.n	8002638 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002632:	4b8d      	ldr	r3, [pc, #564]	; (8002868 <menu+0x1f68>)
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002638:	f002 fdce 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800263c:	2104      	movs	r1, #4
 800263e:	4888      	ldr	r0, [pc, #544]	; (8002860 <menu+0x1f60>)
 8002640:	f007 f902 	bl	8009848 <HAL_GPIO_ReadPin>
 8002644:	4603      	mov	r3, r0
 8002646:	2b01      	cmp	r3, #1
 8002648:	d115      	bne.n	8002676 <menu+0x1d76>
 800264a:	4b86      	ldr	r3, [pc, #536]	; (8002864 <menu+0x1f64>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f083 0301 	eor.w	r3, r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00e      	beq.n	8002676 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002658:	4b83      	ldr	r3, [pc, #524]	; (8002868 <menu+0x1f68>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	3b01      	subs	r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	4b81      	ldr	r3, [pc, #516]	; (8002868 <menu+0x1f68>)
 8002662:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002664:	4b80      	ldr	r3, [pc, #512]	; (8002868 <menu+0x1f68>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800266c:	4b7e      	ldr	r3, [pc, #504]	; (8002868 <menu+0x1f68>)
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002672:	f002 fdb1 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002676:	2108      	movs	r1, #8
 8002678:	4879      	ldr	r0, [pc, #484]	; (8002860 <menu+0x1f60>)
 800267a:	f007 f8e5 	bl	8009848 <HAL_GPIO_ReadPin>
 800267e:	4603      	mov	r3, r0
 8002680:	2b01      	cmp	r3, #1
 8002682:	d10d      	bne.n	80026a0 <menu+0x1da0>
 8002684:	4b77      	ldr	r3, [pc, #476]	; (8002864 <menu+0x1f64>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	f083 0301 	eor.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002692:	4b75      	ldr	r3, [pc, #468]	; (8002868 <menu+0x1f68>)
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	4b75      	ldr	r3, [pc, #468]	; (800286c <menu+0x1f6c>)
 8002698:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800269a:	4b75      	ldr	r3, [pc, #468]	; (8002870 <menu+0x1f70>)
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80026a0:	4b74      	ldr	r3, [pc, #464]	; (8002874 <menu+0x1f74>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b11      	cmp	r3, #17
 80026a6:	f040 80c3 	bne.w	8002830 <menu+0x1f30>
		if(dilSecim == 0) {
 80026aa:	4b6b      	ldr	r3, [pc, #428]	; (8002858 <menu+0x1f58>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80026b2:	4a71      	ldr	r2, [pc, #452]	; (8002878 <menu+0x1f78>)
 80026b4:	2101      	movs	r1, #1
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7fe f87e 	bl	80007b8 <lcd_print>
 80026bc:	e008      	b.n	80026d0 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 80026be:	4b66      	ldr	r3, [pc, #408]	; (8002858 <menu+0x1f58>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d104      	bne.n	80026d0 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80026c6:	4a6d      	ldr	r2, [pc, #436]	; (800287c <menu+0x1f7c>)
 80026c8:	2101      	movs	r1, #1
 80026ca:	2001      	movs	r0, #1
 80026cc:	f7fe f874 	bl	80007b8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80026d0:	4b6b      	ldr	r3, [pc, #428]	; (8002880 <menu+0x1f80>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d113      	bne.n	8002700 <menu+0x1e00>
			if(dilSecim == 0){
 80026d8:	4b5f      	ldr	r3, [pc, #380]	; (8002858 <menu+0x1f58>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 80026e0:	4a68      	ldr	r2, [pc, #416]	; (8002884 <menu+0x1f84>)
 80026e2:	2101      	movs	r1, #1
 80026e4:	2002      	movs	r0, #2
 80026e6:	f7fe f867 	bl	80007b8 <lcd_print>
 80026ea:	e038      	b.n	800275e <menu+0x1e5e>
			} else if(dilSecim == 1){
 80026ec:	4b5a      	ldr	r3, [pc, #360]	; (8002858 <menu+0x1f58>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d134      	bne.n	800275e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80026f4:	4a64      	ldr	r2, [pc, #400]	; (8002888 <menu+0x1f88>)
 80026f6:	2101      	movs	r1, #1
 80026f8:	2002      	movs	r0, #2
 80026fa:	f7fe f85d 	bl	80007b8 <lcd_print>
 80026fe:	e02e      	b.n	800275e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002700:	4b5f      	ldr	r3, [pc, #380]	; (8002880 <menu+0x1f80>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d113      	bne.n	8002730 <menu+0x1e30>
			if(dilSecim == 0){
 8002708:	4b53      	ldr	r3, [pc, #332]	; (8002858 <menu+0x1f58>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d105      	bne.n	800271c <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002710:	4a5e      	ldr	r2, [pc, #376]	; (800288c <menu+0x1f8c>)
 8002712:	2101      	movs	r1, #1
 8002714:	2002      	movs	r0, #2
 8002716:	f7fe f84f 	bl	80007b8 <lcd_print>
 800271a:	e020      	b.n	800275e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800271c:	4b4e      	ldr	r3, [pc, #312]	; (8002858 <menu+0x1f58>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d11c      	bne.n	800275e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002724:	4a5a      	ldr	r2, [pc, #360]	; (8002890 <menu+0x1f90>)
 8002726:	2101      	movs	r1, #1
 8002728:	2002      	movs	r0, #2
 800272a:	f7fe f845 	bl	80007b8 <lcd_print>
 800272e:	e016      	b.n	800275e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002730:	4b53      	ldr	r3, [pc, #332]	; (8002880 <menu+0x1f80>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d112      	bne.n	800275e <menu+0x1e5e>
			if(dilSecim == 0) {
 8002738:	4b47      	ldr	r3, [pc, #284]	; (8002858 <menu+0x1f58>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002740:	4a54      	ldr	r2, [pc, #336]	; (8002894 <menu+0x1f94>)
 8002742:	2101      	movs	r1, #1
 8002744:	2002      	movs	r0, #2
 8002746:	f7fe f837 	bl	80007b8 <lcd_print>
 800274a:	e008      	b.n	800275e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800274c:	4b42      	ldr	r3, [pc, #264]	; (8002858 <menu+0x1f58>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d104      	bne.n	800275e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002754:	4a50      	ldr	r2, [pc, #320]	; (8002898 <menu+0x1f98>)
 8002756:	2101      	movs	r1, #1
 8002758:	2002      	movs	r0, #2
 800275a:	f7fe f82d 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800275e:	2102      	movs	r1, #2
 8002760:	483f      	ldr	r0, [pc, #252]	; (8002860 <menu+0x1f60>)
 8002762:	f007 f871 	bl	8009848 <HAL_GPIO_ReadPin>
 8002766:	4603      	mov	r3, r0
 8002768:	2b01      	cmp	r3, #1
 800276a:	d115      	bne.n	8002798 <menu+0x1e98>
 800276c:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <menu+0x1f64>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	f083 0301 	eor.w	r3, r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00e      	beq.n	8002798 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800277a:	4b41      	ldr	r3, [pc, #260]	; (8002880 <menu+0x1f80>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4b3f      	ldr	r3, [pc, #252]	; (8002880 <menu+0x1f80>)
 8002784:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002786:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <menu+0x1f80>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d902      	bls.n	8002794 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800278e:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <menu+0x1f80>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002794:	f002 fd20 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002798:	2104      	movs	r1, #4
 800279a:	4831      	ldr	r0, [pc, #196]	; (8002860 <menu+0x1f60>)
 800279c:	f007 f854 	bl	8009848 <HAL_GPIO_ReadPin>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d115      	bne.n	80027d2 <menu+0x1ed2>
 80027a6:	4b2f      	ldr	r3, [pc, #188]	; (8002864 <menu+0x1f64>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	f083 0301 	eor.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00e      	beq.n	80027d2 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80027b4:	4b32      	ldr	r3, [pc, #200]	; (8002880 <menu+0x1f80>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	4b30      	ldr	r3, [pc, #192]	; (8002880 <menu+0x1f80>)
 80027be:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80027c0:	4b2f      	ldr	r3, [pc, #188]	; (8002880 <menu+0x1f80>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d902      	bls.n	80027ce <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80027c8:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <menu+0x1f80>)
 80027ca:	2202      	movs	r2, #2
 80027cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027ce:	f002 fd03 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027d2:	2108      	movs	r1, #8
 80027d4:	4822      	ldr	r0, [pc, #136]	; (8002860 <menu+0x1f60>)
 80027d6:	f007 f837 	bl	8009848 <HAL_GPIO_ReadPin>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d127      	bne.n	8002830 <menu+0x1f30>
 80027e0:	4b20      	ldr	r3, [pc, #128]	; (8002864 <menu+0x1f64>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	f083 0301 	eor.w	r3, r3, #1
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d020      	beq.n	8002830 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <menu+0x1f80>)
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	4b1e      	ldr	r3, [pc, #120]	; (800286c <menu+0x1f6c>)
 80027f4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <menu+0x1f80>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d003      	beq.n	8002806 <menu+0x1f06>
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <menu+0x1f80>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d106      	bne.n	8002814 <menu+0x1f14>
				calismaSekli = 0;
 8002806:	4b25      	ldr	r3, [pc, #148]	; (800289c <menu+0x1f9c>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800280c:	4b23      	ldr	r3, [pc, #140]	; (800289c <menu+0x1f9c>)
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <menu+0x1f6c>)
 8002812:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002814:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <menu+0x1f80>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d106      	bne.n	800282a <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 800281c:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <menu+0x1fa0>)
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002822:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <menu+0x1fa0>)
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <menu+0x1f6c>)
 8002828:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <menu+0x1f70>)
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <menu+0x1f74>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b12      	cmp	r3, #18
 8002836:	f040 80d5 	bne.w	80029e4 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <menu+0x1f80>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d13c      	bne.n	80028bc <menu+0x1fbc>
			if(dilSecim == 0) {
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <menu+0x1f58>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d12e      	bne.n	80028a8 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800284a:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <menu+0x1fa4>)
 800284c:	2101      	movs	r1, #1
 800284e:	2001      	movs	r0, #1
 8002850:	f7fd ffb2 	bl	80007b8 <lcd_print>
 8002854:	e048      	b.n	80028e8 <menu+0x1fe8>
 8002856:	bf00      	nop
 8002858:	20000b4d 	.word	0x20000b4d
 800285c:	0800d6f8 	.word	0x0800d6f8
 8002860:	40010800 	.word	0x40010800
 8002864:	20000b5b 	.word	0x20000b5b
 8002868:	20000b3a 	.word	0x20000b3a
 800286c:	20000ac0 	.word	0x20000ac0
 8002870:	20000b58 	.word	0x20000b58
 8002874:	20000b2c 	.word	0x20000b2c
 8002878:	0800da74 	.word	0x0800da74
 800287c:	0800da88 	.word	0x0800da88
 8002880:	20000b3b 	.word	0x20000b3b
 8002884:	0800da9c 	.word	0x0800da9c
 8002888:	0800daac 	.word	0x0800daac
 800288c:	0800dabc 	.word	0x0800dabc
 8002890:	0800dacc 	.word	0x0800dacc
 8002894:	0800d684 	.word	0x0800d684
 8002898:	0800d698 	.word	0x0800d698
 800289c:	20000b2d 	.word	0x20000b2d
 80028a0:	20000b3e 	.word	0x20000b3e
 80028a4:	0800dadc 	.word	0x0800dadc
			} else if(dilSecim == 1) {
 80028a8:	4b7b      	ldr	r3, [pc, #492]	; (8002a98 <menu+0x2198>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d11b      	bne.n	80028e8 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80028b0:	4a7a      	ldr	r2, [pc, #488]	; (8002a9c <menu+0x219c>)
 80028b2:	2101      	movs	r1, #1
 80028b4:	2001      	movs	r0, #1
 80028b6:	f7fd ff7f 	bl	80007b8 <lcd_print>
 80028ba:	e015      	b.n	80028e8 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80028bc:	4b78      	ldr	r3, [pc, #480]	; (8002aa0 <menu+0x21a0>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d111      	bne.n	80028e8 <menu+0x1fe8>
			if(dilSecim == 0){
 80028c4:	4b74      	ldr	r3, [pc, #464]	; (8002a98 <menu+0x2198>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d104      	bne.n	80028d6 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80028cc:	4a75      	ldr	r2, [pc, #468]	; (8002aa4 <menu+0x21a4>)
 80028ce:	2101      	movs	r1, #1
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7fd ff71 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 80028d6:	4b70      	ldr	r3, [pc, #448]	; (8002a98 <menu+0x2198>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d104      	bne.n	80028e8 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80028de:	4a72      	ldr	r2, [pc, #456]	; (8002aa8 <menu+0x21a8>)
 80028e0:	2101      	movs	r1, #1
 80028e2:	2001      	movs	r0, #1
 80028e4:	f7fd ff68 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80028e8:	4b70      	ldr	r3, [pc, #448]	; (8002aac <menu+0x21ac>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d113      	bne.n	8002918 <menu+0x2018>
			if(dilSecim == 0) {
 80028f0:	4b69      	ldr	r3, [pc, #420]	; (8002a98 <menu+0x2198>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80028f8:	4a6d      	ldr	r2, [pc, #436]	; (8002ab0 <menu+0x21b0>)
 80028fa:	2101      	movs	r1, #1
 80028fc:	2002      	movs	r0, #2
 80028fe:	f7fd ff5b 	bl	80007b8 <lcd_print>
 8002902:	e020      	b.n	8002946 <menu+0x2046>
			} else if(dilSecim == 1){
 8002904:	4b64      	ldr	r3, [pc, #400]	; (8002a98 <menu+0x2198>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d11c      	bne.n	8002946 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800290c:	4a69      	ldr	r2, [pc, #420]	; (8002ab4 <menu+0x21b4>)
 800290e:	2101      	movs	r1, #1
 8002910:	2002      	movs	r0, #2
 8002912:	f7fd ff51 	bl	80007b8 <lcd_print>
 8002916:	e016      	b.n	8002946 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8002918:	4b64      	ldr	r3, [pc, #400]	; (8002aac <menu+0x21ac>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d112      	bne.n	8002946 <menu+0x2046>
			if(dilSecim == 0){
 8002920:	4b5d      	ldr	r3, [pc, #372]	; (8002a98 <menu+0x2198>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8002928:	4a63      	ldr	r2, [pc, #396]	; (8002ab8 <menu+0x21b8>)
 800292a:	2101      	movs	r1, #1
 800292c:	2002      	movs	r0, #2
 800292e:	f7fd ff43 	bl	80007b8 <lcd_print>
 8002932:	e008      	b.n	8002946 <menu+0x2046>
			} else if(dilSecim == 1){
 8002934:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <menu+0x2198>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d104      	bne.n	8002946 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 800293c:	4a5f      	ldr	r2, [pc, #380]	; (8002abc <menu+0x21bc>)
 800293e:	2101      	movs	r1, #1
 8002940:	2002      	movs	r0, #2
 8002942:	f7fd ff39 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002946:	2102      	movs	r1, #2
 8002948:	485d      	ldr	r0, [pc, #372]	; (8002ac0 <menu+0x21c0>)
 800294a:	f006 ff7d 	bl	8009848 <HAL_GPIO_ReadPin>
 800294e:	4603      	mov	r3, r0
 8002950:	2b01      	cmp	r3, #1
 8002952:	d115      	bne.n	8002980 <menu+0x2080>
 8002954:	4b5b      	ldr	r3, [pc, #364]	; (8002ac4 <menu+0x21c4>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	f083 0301 	eor.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00e      	beq.n	8002980 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002962:	4b52      	ldr	r3, [pc, #328]	; (8002aac <menu+0x21ac>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	3301      	adds	r3, #1
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4b50      	ldr	r3, [pc, #320]	; (8002aac <menu+0x21ac>)
 800296c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800296e:	4b4f      	ldr	r3, [pc, #316]	; (8002aac <menu+0x21ac>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d902      	bls.n	800297c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8002976:	4b4d      	ldr	r3, [pc, #308]	; (8002aac <menu+0x21ac>)
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800297c:	f002 fc2c 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002980:	2104      	movs	r1, #4
 8002982:	484f      	ldr	r0, [pc, #316]	; (8002ac0 <menu+0x21c0>)
 8002984:	f006 ff60 	bl	8009848 <HAL_GPIO_ReadPin>
 8002988:	4603      	mov	r3, r0
 800298a:	2b01      	cmp	r3, #1
 800298c:	d115      	bne.n	80029ba <menu+0x20ba>
 800298e:	4b4d      	ldr	r3, [pc, #308]	; (8002ac4 <menu+0x21c4>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	f083 0301 	eor.w	r3, r3, #1
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00e      	beq.n	80029ba <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800299c:	4b43      	ldr	r3, [pc, #268]	; (8002aac <menu+0x21ac>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	4b41      	ldr	r3, [pc, #260]	; (8002aac <menu+0x21ac>)
 80029a6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80029a8:	4b40      	ldr	r3, [pc, #256]	; (8002aac <menu+0x21ac>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80029b0:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <menu+0x21ac>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029b6:	f002 fc0f 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ba:	2108      	movs	r1, #8
 80029bc:	4840      	ldr	r0, [pc, #256]	; (8002ac0 <menu+0x21c0>)
 80029be:	f006 ff43 	bl	8009848 <HAL_GPIO_ReadPin>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d10d      	bne.n	80029e4 <menu+0x20e4>
 80029c8:	4b3e      	ldr	r3, [pc, #248]	; (8002ac4 <menu+0x21c4>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	f083 0301 	eor.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d006      	beq.n	80029e4 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80029d6:	4b35      	ldr	r3, [pc, #212]	; (8002aac <menu+0x21ac>)
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <menu+0x21c8>)
 80029dc:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80029de:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <menu+0x21cc>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80029e4:	4b3a      	ldr	r3, [pc, #232]	; (8002ad0 <menu+0x21d0>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b13      	cmp	r3, #19
 80029ea:	f040 80d5 	bne.w	8002b98 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80029ee:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <menu+0x21a0>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d113      	bne.n	8002a1e <menu+0x211e>
			if(dilSecim == 0) {
 80029f6:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <menu+0x2198>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80029fe:	4a35      	ldr	r2, [pc, #212]	; (8002ad4 <menu+0x21d4>)
 8002a00:	2101      	movs	r1, #1
 8002a02:	2001      	movs	r0, #1
 8002a04:	f7fd fed8 	bl	80007b8 <lcd_print>
 8002a08:	e01f      	b.n	8002a4a <menu+0x214a>
			} else if(dilSecim == 1) {
 8002a0a:	4b23      	ldr	r3, [pc, #140]	; (8002a98 <menu+0x2198>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d11b      	bne.n	8002a4a <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8002a12:	4a31      	ldr	r2, [pc, #196]	; (8002ad8 <menu+0x21d8>)
 8002a14:	2101      	movs	r1, #1
 8002a16:	2001      	movs	r0, #1
 8002a18:	f7fd fece 	bl	80007b8 <lcd_print>
 8002a1c:	e015      	b.n	8002a4a <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <menu+0x21a0>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d111      	bne.n	8002a4a <menu+0x214a>
			if(dilSecim == 0) {
 8002a26:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <menu+0x2198>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d104      	bne.n	8002a38 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8002a2e:	4a2b      	ldr	r2, [pc, #172]	; (8002adc <menu+0x21dc>)
 8002a30:	2101      	movs	r1, #1
 8002a32:	2001      	movs	r0, #1
 8002a34:	f7fd fec0 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8002a38:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <menu+0x2198>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d104      	bne.n	8002a4a <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8002a40:	4a27      	ldr	r2, [pc, #156]	; (8002ae0 <menu+0x21e0>)
 8002a42:	2101      	movs	r1, #1
 8002a44:	2001      	movs	r0, #1
 8002a46:	f7fd feb7 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002a4a:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <menu+0x21e4>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d113      	bne.n	8002a7a <menu+0x217a>
			if(dilSecim == 0) {
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <menu+0x2198>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d105      	bne.n	8002a66 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8002a5a:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <menu+0x21b0>)
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	2002      	movs	r0, #2
 8002a60:	f7fd feaa 	bl	80007b8 <lcd_print>
 8002a64:	e049      	b.n	8002afa <menu+0x21fa>
			} else if(dilSecim == 1) {
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <menu+0x2198>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d145      	bne.n	8002afa <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8002a6e:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <menu+0x21b4>)
 8002a70:	2101      	movs	r1, #1
 8002a72:	2002      	movs	r0, #2
 8002a74:	f7fd fea0 	bl	80007b8 <lcd_print>
 8002a78:	e03f      	b.n	8002afa <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <menu+0x21e4>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d13b      	bne.n	8002afa <menu+0x21fa>
			if(dilSecim == 0) {
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <menu+0x2198>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d12e      	bne.n	8002ae8 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8002a8a:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <menu+0x21b8>)
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	2002      	movs	r0, #2
 8002a90:	f7fd fe92 	bl	80007b8 <lcd_print>
 8002a94:	e031      	b.n	8002afa <menu+0x21fa>
 8002a96:	bf00      	nop
 8002a98:	20000b4d 	.word	0x20000b4d
 8002a9c:	0800daf0 	.word	0x0800daf0
 8002aa0:	20000b3b 	.word	0x20000b3b
 8002aa4:	0800db00 	.word	0x0800db00
 8002aa8:	0800db14 	.word	0x0800db14
 8002aac:	20000b3c 	.word	0x20000b3c
 8002ab0:	0800d684 	.word	0x0800d684
 8002ab4:	0800d698 	.word	0x0800d698
 8002ab8:	0800d6e4 	.word	0x0800d6e4
 8002abc:	0800d6f8 	.word	0x0800d6f8
 8002ac0:	40010800 	.word	0x40010800
 8002ac4:	20000b5b 	.word	0x20000b5b
 8002ac8:	20000ac0 	.word	0x20000ac0
 8002acc:	20000b58 	.word	0x20000b58
 8002ad0:	20000b2c 	.word	0x20000b2c
 8002ad4:	0800db28 	.word	0x0800db28
 8002ad8:	0800db3c 	.word	0x0800db3c
 8002adc:	0800db50 	.word	0x0800db50
 8002ae0:	0800db64 	.word	0x0800db64
 8002ae4:	20000b3d 	.word	0x20000b3d
			} else if(dilSecim == 1) {
 8002ae8:	4b90      	ldr	r3, [pc, #576]	; (8002d2c <menu+0x242c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d104      	bne.n	8002afa <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8002af0:	4a8f      	ldr	r2, [pc, #572]	; (8002d30 <menu+0x2430>)
 8002af2:	2101      	movs	r1, #1
 8002af4:	2002      	movs	r0, #2
 8002af6:	f7fd fe5f 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002afa:	2102      	movs	r1, #2
 8002afc:	488d      	ldr	r0, [pc, #564]	; (8002d34 <menu+0x2434>)
 8002afe:	f006 fea3 	bl	8009848 <HAL_GPIO_ReadPin>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d115      	bne.n	8002b34 <menu+0x2234>
 8002b08:	4b8b      	ldr	r3, [pc, #556]	; (8002d38 <menu+0x2438>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	f083 0301 	eor.w	r3, r3, #1
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00e      	beq.n	8002b34 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002b16:	4b89      	ldr	r3, [pc, #548]	; (8002d3c <menu+0x243c>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	4b87      	ldr	r3, [pc, #540]	; (8002d3c <menu+0x243c>)
 8002b20:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002b22:	4b86      	ldr	r3, [pc, #536]	; (8002d3c <menu+0x243c>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d902      	bls.n	8002b30 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8002b2a:	4b84      	ldr	r3, [pc, #528]	; (8002d3c <menu+0x243c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b30:	f002 fb52 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b34:	2104      	movs	r1, #4
 8002b36:	487f      	ldr	r0, [pc, #508]	; (8002d34 <menu+0x2434>)
 8002b38:	f006 fe86 	bl	8009848 <HAL_GPIO_ReadPin>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d115      	bne.n	8002b6e <menu+0x226e>
 8002b42:	4b7d      	ldr	r3, [pc, #500]	; (8002d38 <menu+0x2438>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	f083 0301 	eor.w	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002b50:	4b7a      	ldr	r3, [pc, #488]	; (8002d3c <menu+0x243c>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	4b78      	ldr	r3, [pc, #480]	; (8002d3c <menu+0x243c>)
 8002b5a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002b5c:	4b77      	ldr	r3, [pc, #476]	; (8002d3c <menu+0x243c>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8002b64:	4b75      	ldr	r3, [pc, #468]	; (8002d3c <menu+0x243c>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b6a:	f002 fb35 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b6e:	2108      	movs	r1, #8
 8002b70:	4870      	ldr	r0, [pc, #448]	; (8002d34 <menu+0x2434>)
 8002b72:	f006 fe69 	bl	8009848 <HAL_GPIO_ReadPin>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d10d      	bne.n	8002b98 <menu+0x2298>
 8002b7c:	4b6e      	ldr	r3, [pc, #440]	; (8002d38 <menu+0x2438>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	f083 0301 	eor.w	r3, r3, #1
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d006      	beq.n	8002b98 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002b8a:	4b6c      	ldr	r3, [pc, #432]	; (8002d3c <menu+0x243c>)
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	4b6c      	ldr	r3, [pc, #432]	; (8002d40 <menu+0x2440>)
 8002b90:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002b92:	4b6c      	ldr	r3, [pc, #432]	; (8002d44 <menu+0x2444>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002b98:	4b6b      	ldr	r3, [pc, #428]	; (8002d48 <menu+0x2448>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b14      	cmp	r3, #20
 8002b9e:	f040 80b5 	bne.w	8002d0c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8002ba2:	4b6a      	ldr	r3, [pc, #424]	; (8002d4c <menu+0x244c>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d113      	bne.n	8002bd2 <menu+0x22d2>
			if(dilSecim == 0) {
 8002baa:	4b60      	ldr	r3, [pc, #384]	; (8002d2c <menu+0x242c>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d105      	bne.n	8002bbe <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8002bb2:	4a67      	ldr	r2, [pc, #412]	; (8002d50 <menu+0x2450>)
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f7fd fdfe 	bl	80007b8 <lcd_print>
 8002bbc:	e020      	b.n	8002c00 <menu+0x2300>
			} else if(dilSecim == 1) {
 8002bbe:	4b5b      	ldr	r3, [pc, #364]	; (8002d2c <menu+0x242c>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d11c      	bne.n	8002c00 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8002bc6:	4a63      	ldr	r2, [pc, #396]	; (8002d54 <menu+0x2454>)
 8002bc8:	2101      	movs	r1, #1
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f7fd fdf4 	bl	80007b8 <lcd_print>
 8002bd0:	e016      	b.n	8002c00 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8002bd2:	4b5e      	ldr	r3, [pc, #376]	; (8002d4c <menu+0x244c>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d112      	bne.n	8002c00 <menu+0x2300>
			if(dilSecim == 0) {
 8002bda:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <menu+0x242c>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d105      	bne.n	8002bee <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8002be2:	4a5d      	ldr	r2, [pc, #372]	; (8002d58 <menu+0x2458>)
 8002be4:	2101      	movs	r1, #1
 8002be6:	2001      	movs	r0, #1
 8002be8:	f7fd fde6 	bl	80007b8 <lcd_print>
 8002bec:	e008      	b.n	8002c00 <menu+0x2300>
			} else if(dilSecim == 1) {
 8002bee:	4b4f      	ldr	r3, [pc, #316]	; (8002d2c <menu+0x242c>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d104      	bne.n	8002c00 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8002bf6:	4a59      	ldr	r2, [pc, #356]	; (8002d5c <menu+0x245c>)
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	f7fd fddc 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8002c00:	4b57      	ldr	r3, [pc, #348]	; (8002d60 <menu+0x2460>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d113      	bne.n	8002c30 <menu+0x2330>
			if(dilSecim == 0) {
 8002c08:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <menu+0x242c>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d105      	bne.n	8002c1c <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8002c10:	4a54      	ldr	r2, [pc, #336]	; (8002d64 <menu+0x2464>)
 8002c12:	2101      	movs	r1, #1
 8002c14:	2002      	movs	r0, #2
 8002c16:	f7fd fdcf 	bl	80007b8 <lcd_print>
 8002c1a:	e020      	b.n	8002c5e <menu+0x235e>
			} else if(dilSecim == 1) {
 8002c1c:	4b43      	ldr	r3, [pc, #268]	; (8002d2c <menu+0x242c>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d11c      	bne.n	8002c5e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8002c24:	4a50      	ldr	r2, [pc, #320]	; (8002d68 <menu+0x2468>)
 8002c26:	2101      	movs	r1, #1
 8002c28:	2002      	movs	r0, #2
 8002c2a:	f7fd fdc5 	bl	80007b8 <lcd_print>
 8002c2e:	e016      	b.n	8002c5e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8002c30:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <menu+0x2460>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d112      	bne.n	8002c5e <menu+0x235e>
			if(dilSecim == 0) {
 8002c38:	4b3c      	ldr	r3, [pc, #240]	; (8002d2c <menu+0x242c>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8002c40:	4a4a      	ldr	r2, [pc, #296]	; (8002d6c <menu+0x246c>)
 8002c42:	2101      	movs	r1, #1
 8002c44:	2002      	movs	r0, #2
 8002c46:	f7fd fdb7 	bl	80007b8 <lcd_print>
 8002c4a:	e008      	b.n	8002c5e <menu+0x235e>
			} else if(dilSecim == 1) {
 8002c4c:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <menu+0x242c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d104      	bne.n	8002c5e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8002c54:	4a46      	ldr	r2, [pc, #280]	; (8002d70 <menu+0x2470>)
 8002c56:	2101      	movs	r1, #1
 8002c58:	2002      	movs	r0, #2
 8002c5a:	f7fd fdad 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002c5e:	2102      	movs	r1, #2
 8002c60:	4834      	ldr	r0, [pc, #208]	; (8002d34 <menu+0x2434>)
 8002c62:	f006 fdf1 	bl	8009848 <HAL_GPIO_ReadPin>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d119      	bne.n	8002ca0 <menu+0x23a0>
 8002c6c:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <menu+0x2438>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	f083 0301 	eor.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d012      	beq.n	8002ca0 <menu+0x23a0>
 8002c7a:	4b34      	ldr	r3, [pc, #208]	; (8002d4c <menu+0x244c>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d10e      	bne.n	8002ca0 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002c82:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <menu+0x2460>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4b35      	ldr	r3, [pc, #212]	; (8002d60 <menu+0x2460>)
 8002c8c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002c8e:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <menu+0x2460>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d902      	bls.n	8002c9c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8002c96:	4b32      	ldr	r3, [pc, #200]	; (8002d60 <menu+0x2460>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c9c:	f002 fa9c 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002ca0:	2104      	movs	r1, #4
 8002ca2:	4824      	ldr	r0, [pc, #144]	; (8002d34 <menu+0x2434>)
 8002ca4:	f006 fdd0 	bl	8009848 <HAL_GPIO_ReadPin>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d119      	bne.n	8002ce2 <menu+0x23e2>
 8002cae:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <menu+0x2438>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	f083 0301 	eor.w	r3, r3, #1
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d012      	beq.n	8002ce2 <menu+0x23e2>
 8002cbc:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <menu+0x244c>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d10e      	bne.n	8002ce2 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002cc4:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <menu+0x2460>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <menu+0x2460>)
 8002cce:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002cd0:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <menu+0x2460>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8002cd8:	4b21      	ldr	r3, [pc, #132]	; (8002d60 <menu+0x2460>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cde:	f002 fa7b 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ce2:	2108      	movs	r1, #8
 8002ce4:	4813      	ldr	r0, [pc, #76]	; (8002d34 <menu+0x2434>)
 8002ce6:	f006 fdaf 	bl	8009848 <HAL_GPIO_ReadPin>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d10d      	bne.n	8002d0c <menu+0x240c>
 8002cf0:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <menu+0x2438>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	f083 0301 	eor.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8002cfe:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <menu+0x2460>)
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <menu+0x2440>)
 8002d04:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <menu+0x2444>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002d0c:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <menu+0x2448>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b15      	cmp	r3, #21
 8002d12:	f040 80c2 	bne.w	8002e9a <menu+0x259a>
		if(dilSecim == 0) {
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <menu+0x242c>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d12c      	bne.n	8002d78 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8002d1e:	4a15      	ldr	r2, [pc, #84]	; (8002d74 <menu+0x2474>)
 8002d20:	2101      	movs	r1, #1
 8002d22:	2001      	movs	r0, #1
 8002d24:	f7fd fd48 	bl	80007b8 <lcd_print>
 8002d28:	e02f      	b.n	8002d8a <menu+0x248a>
 8002d2a:	bf00      	nop
 8002d2c:	20000b4d 	.word	0x20000b4d
 8002d30:	0800d6f8 	.word	0x0800d6f8
 8002d34:	40010800 	.word	0x40010800
 8002d38:	20000b5b 	.word	0x20000b5b
 8002d3c:	20000b3d 	.word	0x20000b3d
 8002d40:	20000ac0 	.word	0x20000ac0
 8002d44:	20000b58 	.word	0x20000b58
 8002d48:	20000b2c 	.word	0x20000b2c
 8002d4c:	20000b3b 	.word	0x20000b3b
 8002d50:	0800db78 	.word	0x0800db78
 8002d54:	0800db8c 	.word	0x0800db8c
 8002d58:	0800dba0 	.word	0x0800dba0
 8002d5c:	0800dbb4 	.word	0x0800dbb4
 8002d60:	20000b3e 	.word	0x20000b3e
 8002d64:	0800dbc8 	.word	0x0800dbc8
 8002d68:	0800dbdc 	.word	0x0800dbdc
 8002d6c:	0800dbec 	.word	0x0800dbec
 8002d70:	0800dc00 	.word	0x0800dc00
 8002d74:	0800dc10 	.word	0x0800dc10
		} else if(dilSecim == 1) {
 8002d78:	4b9c      	ldr	r3, [pc, #624]	; (8002fec <menu+0x26ec>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d104      	bne.n	8002d8a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8002d80:	4a9b      	ldr	r2, [pc, #620]	; (8002ff0 <menu+0x26f0>)
 8002d82:	2101      	movs	r1, #1
 8002d84:	2001      	movs	r0, #1
 8002d86:	f7fd fd17 	bl	80007b8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8002d8a:	4b9a      	ldr	r3, [pc, #616]	; (8002ff4 <menu+0x26f4>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d112      	bne.n	8002db8 <menu+0x24b8>
			if(dilSecim == 0) {
 8002d92:	4b96      	ldr	r3, [pc, #600]	; (8002fec <menu+0x26ec>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d104      	bne.n	8002da4 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8002d9a:	4a97      	ldr	r2, [pc, #604]	; (8002ff8 <menu+0x26f8>)
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	2002      	movs	r0, #2
 8002da0:	f7fd fd0a 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8002da4:	4b91      	ldr	r3, [pc, #580]	; (8002fec <menu+0x26ec>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d11c      	bne.n	8002de6 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8002dac:	4a93      	ldr	r2, [pc, #588]	; (8002ffc <menu+0x26fc>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	2002      	movs	r0, #2
 8002db2:	f7fd fd01 	bl	80007b8 <lcd_print>
 8002db6:	e016      	b.n	8002de6 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8002db8:	4b8e      	ldr	r3, [pc, #568]	; (8002ff4 <menu+0x26f4>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d112      	bne.n	8002de6 <menu+0x24e6>
			if(dilSecim == 0) {
 8002dc0:	4b8a      	ldr	r3, [pc, #552]	; (8002fec <menu+0x26ec>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8002dc8:	4a8d      	ldr	r2, [pc, #564]	; (8003000 <menu+0x2700>)
 8002dca:	2101      	movs	r1, #1
 8002dcc:	2002      	movs	r0, #2
 8002dce:	f7fd fcf3 	bl	80007b8 <lcd_print>
 8002dd2:	e008      	b.n	8002de6 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8002dd4:	4b85      	ldr	r3, [pc, #532]	; (8002fec <menu+0x26ec>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d104      	bne.n	8002de6 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8002ddc:	4a89      	ldr	r2, [pc, #548]	; (8003004 <menu+0x2704>)
 8002dde:	2101      	movs	r1, #1
 8002de0:	2002      	movs	r0, #2
 8002de2:	f7fd fce9 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002de6:	2102      	movs	r1, #2
 8002de8:	4887      	ldr	r0, [pc, #540]	; (8003008 <menu+0x2708>)
 8002dea:	f006 fd2d 	bl	8009848 <HAL_GPIO_ReadPin>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d115      	bne.n	8002e20 <menu+0x2520>
 8002df4:	4b85      	ldr	r3, [pc, #532]	; (800300c <menu+0x270c>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	f083 0301 	eor.w	r3, r3, #1
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00e      	beq.n	8002e20 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002e02:	4b7c      	ldr	r3, [pc, #496]	; (8002ff4 <menu+0x26f4>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4b7a      	ldr	r3, [pc, #488]	; (8002ff4 <menu+0x26f4>)
 8002e0c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002e0e:	4b79      	ldr	r3, [pc, #484]	; (8002ff4 <menu+0x26f4>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d902      	bls.n	8002e1c <menu+0x251c>
				platformSilindirTipi = 0;
 8002e16:	4b77      	ldr	r3, [pc, #476]	; (8002ff4 <menu+0x26f4>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e1c:	f002 f9dc 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e20:	2104      	movs	r1, #4
 8002e22:	4879      	ldr	r0, [pc, #484]	; (8003008 <menu+0x2708>)
 8002e24:	f006 fd10 	bl	8009848 <HAL_GPIO_ReadPin>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d115      	bne.n	8002e5a <menu+0x255a>
 8002e2e:	4b77      	ldr	r3, [pc, #476]	; (800300c <menu+0x270c>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	f083 0301 	eor.w	r3, r3, #1
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00e      	beq.n	8002e5a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002e3c:	4b6d      	ldr	r3, [pc, #436]	; (8002ff4 <menu+0x26f4>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	4b6b      	ldr	r3, [pc, #428]	; (8002ff4 <menu+0x26f4>)
 8002e46:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002e48:	4b6a      	ldr	r3, [pc, #424]	; (8002ff4 <menu+0x26f4>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8002e50:	4b68      	ldr	r3, [pc, #416]	; (8002ff4 <menu+0x26f4>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e56:	f002 f9bf 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e5a:	2108      	movs	r1, #8
 8002e5c:	486a      	ldr	r0, [pc, #424]	; (8003008 <menu+0x2708>)
 8002e5e:	f006 fcf3 	bl	8009848 <HAL_GPIO_ReadPin>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d118      	bne.n	8002e9a <menu+0x259a>
 8002e68:	4b68      	ldr	r3, [pc, #416]	; (800300c <menu+0x270c>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	f083 0301 	eor.w	r3, r3, #1
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d011      	beq.n	8002e9a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8002e76:	4b5f      	ldr	r3, [pc, #380]	; (8002ff4 <menu+0x26f4>)
 8002e78:	781a      	ldrb	r2, [r3, #0]
 8002e7a:	4b65      	ldr	r3, [pc, #404]	; (8003010 <menu+0x2710>)
 8002e7c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ff4 <menu+0x26f4>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d106      	bne.n	8002e94 <menu+0x2594>
				altLimit = 1;
 8002e86:	4b63      	ldr	r3, [pc, #396]	; (8003014 <menu+0x2714>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002e8c:	4b61      	ldr	r3, [pc, #388]	; (8003014 <menu+0x2714>)
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	4b5f      	ldr	r3, [pc, #380]	; (8003010 <menu+0x2710>)
 8002e92:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002e94:	4b60      	ldr	r3, [pc, #384]	; (8003018 <menu+0x2718>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002e9a:	4b60      	ldr	r3, [pc, #384]	; (800301c <menu+0x271c>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b16      	cmp	r3, #22
 8002ea0:	f040 8081 	bne.w	8002fa6 <menu+0x26a6>
		if(dilSecim == 0) {
 8002ea4:	4b51      	ldr	r3, [pc, #324]	; (8002fec <menu+0x26ec>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002eac:	4a5c      	ldr	r2, [pc, #368]	; (8003020 <menu+0x2720>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f7fd fc81 	bl	80007b8 <lcd_print>
 8002eb6:	e008      	b.n	8002eca <menu+0x25ca>
		} else if(dilSecim == 1) {
 8002eb8:	4b4c      	ldr	r3, [pc, #304]	; (8002fec <menu+0x26ec>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d104      	bne.n	8002eca <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <menu+0x2724>)
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	f7fd fc77 	bl	80007b8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002eca:	4b48      	ldr	r3, [pc, #288]	; (8002fec <menu+0x26ec>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d105      	bne.n	8002ede <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8002ed2:	4a55      	ldr	r2, [pc, #340]	; (8003028 <menu+0x2728>)
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	2002      	movs	r0, #2
 8002ed8:	f7fd fc6e 	bl	80007b8 <lcd_print>
 8002edc:	e008      	b.n	8002ef0 <menu+0x25f0>
			} else if(dilSecim == 1){
 8002ede:	4b43      	ldr	r3, [pc, #268]	; (8002fec <menu+0x26ec>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d104      	bne.n	8002ef0 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8002ee6:	4a51      	ldr	r2, [pc, #324]	; (800302c <menu+0x272c>)
 8002ee8:	2101      	movs	r1, #1
 8002eea:	2002      	movs	r0, #2
 8002eec:	f7fd fc64 	bl	80007b8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002ef0:	4b4f      	ldr	r3, [pc, #316]	; (8003030 <menu+0x2730>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	220a      	movs	r2, #10
 8002ef6:	494f      	ldr	r1, [pc, #316]	; (8003034 <menu+0x2734>)
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f009 fcd1 	bl	800c8a0 <itoa>
		lcd_print(2,16,snum);
 8002efe:	4a4d      	ldr	r2, [pc, #308]	; (8003034 <menu+0x2734>)
 8002f00:	2110      	movs	r1, #16
 8002f02:	2002      	movs	r0, #2
 8002f04:	f7fd fc58 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f08:	2102      	movs	r1, #2
 8002f0a:	483f      	ldr	r0, [pc, #252]	; (8003008 <menu+0x2708>)
 8002f0c:	f006 fc9c 	bl	8009848 <HAL_GPIO_ReadPin>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d115      	bne.n	8002f42 <menu+0x2642>
 8002f16:	4b3d      	ldr	r3, [pc, #244]	; (800300c <menu+0x270c>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	f083 0301 	eor.w	r3, r3, #1
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00e      	beq.n	8002f42 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8002f24:	4b42      	ldr	r3, [pc, #264]	; (8003030 <menu+0x2730>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	4b40      	ldr	r3, [pc, #256]	; (8003030 <menu+0x2730>)
 8002f2e:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002f30:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <menu+0x2730>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d902      	bls.n	8002f3e <menu+0x263e>
				yukariValfTmr = 0;
 8002f38:	4b3d      	ldr	r3, [pc, #244]	; (8003030 <menu+0x2730>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f3e:	f002 f94b 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f42:	2104      	movs	r1, #4
 8002f44:	4830      	ldr	r0, [pc, #192]	; (8003008 <menu+0x2708>)
 8002f46:	f006 fc7f 	bl	8009848 <HAL_GPIO_ReadPin>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d115      	bne.n	8002f7c <menu+0x267c>
 8002f50:	4b2e      	ldr	r3, [pc, #184]	; (800300c <menu+0x270c>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	f083 0301 	eor.w	r3, r3, #1
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00e      	beq.n	8002f7c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8002f5e:	4b34      	ldr	r3, [pc, #208]	; (8003030 <menu+0x2730>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	4b32      	ldr	r3, [pc, #200]	; (8003030 <menu+0x2730>)
 8002f68:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002f6a:	4b31      	ldr	r3, [pc, #196]	; (8003030 <menu+0x2730>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d902      	bls.n	8002f78 <menu+0x2678>
		   		yukariValfTmr = 5;
 8002f72:	4b2f      	ldr	r3, [pc, #188]	; (8003030 <menu+0x2730>)
 8002f74:	2205      	movs	r2, #5
 8002f76:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f78:	f002 f92e 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f7c:	2108      	movs	r1, #8
 8002f7e:	4822      	ldr	r0, [pc, #136]	; (8003008 <menu+0x2708>)
 8002f80:	f006 fc62 	bl	8009848 <HAL_GPIO_ReadPin>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d10d      	bne.n	8002fa6 <menu+0x26a6>
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <menu+0x270c>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	f083 0301 	eor.w	r3, r3, #1
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d006      	beq.n	8002fa6 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8002f98:	4b25      	ldr	r3, [pc, #148]	; (8003030 <menu+0x2730>)
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <menu+0x2710>)
 8002f9e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <menu+0x2718>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <menu+0x271c>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b17      	cmp	r3, #23
 8002fac:	f040 80ac 	bne.w	8003108 <menu+0x2808>
		if(dilSecim == 0) {
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <menu+0x26ec>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d105      	bne.n	8002fc4 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <menu+0x2738>)
 8002fba:	2101      	movs	r1, #1
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	f7fd fbfb 	bl	80007b8 <lcd_print>
 8002fc2:	e008      	b.n	8002fd6 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <menu+0x26ec>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d104      	bne.n	8002fd6 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002fcc:	4a1b      	ldr	r2, [pc, #108]	; (800303c <menu+0x273c>)
 8002fce:	2101      	movs	r1, #1
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f7fd fbf1 	bl	80007b8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <menu+0x26ec>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d130      	bne.n	8003040 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8002fde:	4a12      	ldr	r2, [pc, #72]	; (8003028 <menu+0x2728>)
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	2002      	movs	r0, #2
 8002fe4:	f7fd fbe8 	bl	80007b8 <lcd_print>
 8002fe8:	e033      	b.n	8003052 <menu+0x2752>
 8002fea:	bf00      	nop
 8002fec:	20000b4d 	.word	0x20000b4d
 8002ff0:	0800dc24 	.word	0x0800dc24
 8002ff4:	20000b3f 	.word	0x20000b3f
 8002ff8:	0800dbc8 	.word	0x0800dbc8
 8002ffc:	0800dbdc 	.word	0x0800dbdc
 8003000:	0800dbec 	.word	0x0800dbec
 8003004:	0800dc00 	.word	0x0800dc00
 8003008:	40010800 	.word	0x40010800
 800300c:	20000b5b 	.word	0x20000b5b
 8003010:	20000ac0 	.word	0x20000ac0
 8003014:	20000b32 	.word	0x20000b32
 8003018:	20000b58 	.word	0x20000b58
 800301c:	20000b2c 	.word	0x20000b2c
 8003020:	0800dc34 	.word	0x0800dc34
 8003024:	0800dc48 	.word	0x0800dc48
 8003028:	0800d8e8 	.word	0x0800d8e8
 800302c:	0800dc5c 	.word	0x0800dc5c
 8003030:	20000b40 	.word	0x20000b40
 8003034:	20000b00 	.word	0x20000b00
 8003038:	0800dc6c 	.word	0x0800dc6c
 800303c:	0800dc80 	.word	0x0800dc80
			} else if(dilSecim == 1) {
 8003040:	4b98      	ldr	r3, [pc, #608]	; (80032a4 <menu+0x29a4>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d104      	bne.n	8003052 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003048:	4a97      	ldr	r2, [pc, #604]	; (80032a8 <menu+0x29a8>)
 800304a:	2101      	movs	r1, #1
 800304c:	2002      	movs	r0, #2
 800304e:	f7fd fbb3 	bl	80007b8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003052:	4b96      	ldr	r3, [pc, #600]	; (80032ac <menu+0x29ac>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	220a      	movs	r2, #10
 8003058:	4995      	ldr	r1, [pc, #596]	; (80032b0 <menu+0x29b0>)
 800305a:	4618      	mov	r0, r3
 800305c:	f009 fc20 	bl	800c8a0 <itoa>
		lcd_print(2,16,snum);
 8003060:	4a93      	ldr	r2, [pc, #588]	; (80032b0 <menu+0x29b0>)
 8003062:	2110      	movs	r1, #16
 8003064:	2002      	movs	r0, #2
 8003066:	f7fd fba7 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800306a:	2102      	movs	r1, #2
 800306c:	4891      	ldr	r0, [pc, #580]	; (80032b4 <menu+0x29b4>)
 800306e:	f006 fbeb 	bl	8009848 <HAL_GPIO_ReadPin>
 8003072:	4603      	mov	r3, r0
 8003074:	2b01      	cmp	r3, #1
 8003076:	d115      	bne.n	80030a4 <menu+0x27a4>
 8003078:	4b8f      	ldr	r3, [pc, #572]	; (80032b8 <menu+0x29b8>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	f083 0301 	eor.w	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00e      	beq.n	80030a4 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003086:	4b89      	ldr	r3, [pc, #548]	; (80032ac <menu+0x29ac>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4b87      	ldr	r3, [pc, #540]	; (80032ac <menu+0x29ac>)
 8003090:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003092:	4b86      	ldr	r3, [pc, #536]	; (80032ac <menu+0x29ac>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b05      	cmp	r3, #5
 8003098:	d902      	bls.n	80030a0 <menu+0x27a0>
				asagiValfTmr = 0;
 800309a:	4b84      	ldr	r3, [pc, #528]	; (80032ac <menu+0x29ac>)
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030a0:	f002 f89a 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030a4:	2104      	movs	r1, #4
 80030a6:	4883      	ldr	r0, [pc, #524]	; (80032b4 <menu+0x29b4>)
 80030a8:	f006 fbce 	bl	8009848 <HAL_GPIO_ReadPin>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d115      	bne.n	80030de <menu+0x27de>
 80030b2:	4b81      	ldr	r3, [pc, #516]	; (80032b8 <menu+0x29b8>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	f083 0301 	eor.w	r3, r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00e      	beq.n	80030de <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 80030c0:	4b7a      	ldr	r3, [pc, #488]	; (80032ac <menu+0x29ac>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	4b78      	ldr	r3, [pc, #480]	; (80032ac <menu+0x29ac>)
 80030ca:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80030cc:	4b77      	ldr	r3, [pc, #476]	; (80032ac <menu+0x29ac>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b06      	cmp	r3, #6
 80030d2:	d902      	bls.n	80030da <menu+0x27da>
		   		asagiValfTmr = 5;
 80030d4:	4b75      	ldr	r3, [pc, #468]	; (80032ac <menu+0x29ac>)
 80030d6:	2205      	movs	r2, #5
 80030d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030da:	f002 f87d 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030de:	2108      	movs	r1, #8
 80030e0:	4874      	ldr	r0, [pc, #464]	; (80032b4 <menu+0x29b4>)
 80030e2:	f006 fbb1 	bl	8009848 <HAL_GPIO_ReadPin>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d10d      	bne.n	8003108 <menu+0x2808>
 80030ec:	4b72      	ldr	r3, [pc, #456]	; (80032b8 <menu+0x29b8>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	f083 0301 	eor.w	r3, r3, #1
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 80030fa:	4b6c      	ldr	r3, [pc, #432]	; (80032ac <menu+0x29ac>)
 80030fc:	781a      	ldrb	r2, [r3, #0]
 80030fe:	4b6f      	ldr	r3, [pc, #444]	; (80032bc <menu+0x29bc>)
 8003100:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003102:	4b6f      	ldr	r3, [pc, #444]	; (80032c0 <menu+0x29c0>)
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003108:	4b6e      	ldr	r3, [pc, #440]	; (80032c4 <menu+0x29c4>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b18      	cmp	r3, #24
 800310e:	f040 809d 	bne.w	800324c <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003112:	4b6d      	ldr	r3, [pc, #436]	; (80032c8 <menu+0x29c8>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d113      	bne.n	8003142 <menu+0x2842>
			if(dilSecim == 0) {
 800311a:	4b62      	ldr	r3, [pc, #392]	; (80032a4 <menu+0x29a4>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d105      	bne.n	800312e <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003122:	4a6a      	ldr	r2, [pc, #424]	; (80032cc <menu+0x29cc>)
 8003124:	2101      	movs	r1, #1
 8003126:	2001      	movs	r0, #1
 8003128:	f7fd fb46 	bl	80007b8 <lcd_print>
 800312c:	e020      	b.n	8003170 <menu+0x2870>
			} else if(dilSecim == 1) {
 800312e:	4b5d      	ldr	r3, [pc, #372]	; (80032a4 <menu+0x29a4>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d11c      	bne.n	8003170 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003136:	4a66      	ldr	r2, [pc, #408]	; (80032d0 <menu+0x29d0>)
 8003138:	2101      	movs	r1, #1
 800313a:	2001      	movs	r0, #1
 800313c:	f7fd fb3c 	bl	80007b8 <lcd_print>
 8003140:	e016      	b.n	8003170 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003142:	4b61      	ldr	r3, [pc, #388]	; (80032c8 <menu+0x29c8>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d112      	bne.n	8003170 <menu+0x2870>
			if(dilSecim == 0) {
 800314a:	4b56      	ldr	r3, [pc, #344]	; (80032a4 <menu+0x29a4>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d105      	bne.n	800315e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003152:	4a60      	ldr	r2, [pc, #384]	; (80032d4 <menu+0x29d4>)
 8003154:	2101      	movs	r1, #1
 8003156:	2001      	movs	r0, #1
 8003158:	f7fd fb2e 	bl	80007b8 <lcd_print>
 800315c:	e008      	b.n	8003170 <menu+0x2870>
			} else if(dilSecim == 1) {
 800315e:	4b51      	ldr	r3, [pc, #324]	; (80032a4 <menu+0x29a4>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d104      	bne.n	8003170 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003166:	4a5c      	ldr	r2, [pc, #368]	; (80032d8 <menu+0x29d8>)
 8003168:	2101      	movs	r1, #1
 800316a:	2001      	movs	r0, #1
 800316c:	f7fd fb24 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003170:	4b4c      	ldr	r3, [pc, #304]	; (80032a4 <menu+0x29a4>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003178:	4a58      	ldr	r2, [pc, #352]	; (80032dc <menu+0x29dc>)
 800317a:	2101      	movs	r1, #1
 800317c:	2002      	movs	r0, #2
 800317e:	f7fd fb1b 	bl	80007b8 <lcd_print>
 8003182:	e008      	b.n	8003196 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003184:	4b47      	ldr	r3, [pc, #284]	; (80032a4 <menu+0x29a4>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d104      	bne.n	8003196 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 800318c:	4a46      	ldr	r2, [pc, #280]	; (80032a8 <menu+0x29a8>)
 800318e:	2101      	movs	r1, #1
 8003190:	2002      	movs	r0, #2
 8003192:	f7fd fb11 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003196:	4b52      	ldr	r3, [pc, #328]	; (80032e0 <menu+0x29e0>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	220a      	movs	r2, #10
 800319c:	4944      	ldr	r1, [pc, #272]	; (80032b0 <menu+0x29b0>)
 800319e:	4618      	mov	r0, r3
 80031a0:	f009 fb7e 	bl	800c8a0 <itoa>
		lcd_print(2, 16, snum);
 80031a4:	4a42      	ldr	r2, [pc, #264]	; (80032b0 <menu+0x29b0>)
 80031a6:	2110      	movs	r1, #16
 80031a8:	2002      	movs	r0, #2
 80031aa:	f7fd fb05 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ae:	2102      	movs	r1, #2
 80031b0:	4840      	ldr	r0, [pc, #256]	; (80032b4 <menu+0x29b4>)
 80031b2:	f006 fb49 	bl	8009848 <HAL_GPIO_ReadPin>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d115      	bne.n	80031e8 <menu+0x28e8>
 80031bc:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <menu+0x29b8>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	f083 0301 	eor.w	r3, r3, #1
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00e      	beq.n	80031e8 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80031ca:	4b45      	ldr	r3, [pc, #276]	; (80032e0 <menu+0x29e0>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	3301      	adds	r3, #1
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <menu+0x29e0>)
 80031d4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 80031d6:	4b42      	ldr	r3, [pc, #264]	; (80032e0 <menu+0x29e0>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d902      	bls.n	80031e4 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 80031de:	4b40      	ldr	r3, [pc, #256]	; (80032e0 <menu+0x29e0>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031e4:	f001 fff8 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031e8:	2104      	movs	r1, #4
 80031ea:	4832      	ldr	r0, [pc, #200]	; (80032b4 <menu+0x29b4>)
 80031ec:	f006 fb2c 	bl	8009848 <HAL_GPIO_ReadPin>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d115      	bne.n	8003222 <menu+0x2922>
 80031f6:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <menu+0x29b8>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	f083 0301 	eor.w	r3, r3, #1
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00e      	beq.n	8003222 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003204:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <menu+0x29e0>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	3b01      	subs	r3, #1
 800320a:	b2da      	uxtb	r2, r3
 800320c:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <menu+0x29e0>)
 800320e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003210:	4b33      	ldr	r3, [pc, #204]	; (80032e0 <menu+0x29e0>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b06      	cmp	r3, #6
 8003216:	d902      	bls.n	800321e <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003218:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <menu+0x29e0>)
 800321a:	2205      	movs	r2, #5
 800321c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800321e:	f001 ffdb 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003222:	2108      	movs	r1, #8
 8003224:	4823      	ldr	r0, [pc, #140]	; (80032b4 <menu+0x29b4>)
 8003226:	f006 fb0f 	bl	8009848 <HAL_GPIO_ReadPin>
 800322a:	4603      	mov	r3, r0
 800322c:	2b01      	cmp	r3, #1
 800322e:	d10d      	bne.n	800324c <menu+0x294c>
 8003230:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <menu+0x29b8>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	f083 0301 	eor.w	r3, r3, #1
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d006      	beq.n	800324c <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 800323e:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <menu+0x29e0>)
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <menu+0x29bc>)
 8003244:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003246:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <menu+0x29c0>)
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <menu+0x29c4>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b19      	cmp	r3, #25
 8003252:	f040 80c4 	bne.w	80033de <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003256:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <menu+0x29c8>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d113      	bne.n	8003286 <menu+0x2986>
			if(dilSecim == 0) {
 800325e:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <menu+0x29a4>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d105      	bne.n	8003272 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003266:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <menu+0x29e4>)
 8003268:	2101      	movs	r1, #1
 800326a:	2001      	movs	r0, #1
 800326c:	f7fd faa4 	bl	80007b8 <lcd_print>
 8003270:	e047      	b.n	8003302 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003272:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <menu+0x29a4>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d143      	bne.n	8003302 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 800327a:	4a1b      	ldr	r2, [pc, #108]	; (80032e8 <menu+0x29e8>)
 800327c:	2101      	movs	r1, #1
 800327e:	2001      	movs	r0, #1
 8003280:	f7fd fa9a 	bl	80007b8 <lcd_print>
 8003284:	e03d      	b.n	8003302 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <menu+0x29c8>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d139      	bne.n	8003302 <menu+0x2a02>
			if(dilSecim == 0) {
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <menu+0x29a4>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d12c      	bne.n	80032f0 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003296:	4a15      	ldr	r2, [pc, #84]	; (80032ec <menu+0x29ec>)
 8003298:	2101      	movs	r1, #1
 800329a:	2001      	movs	r0, #1
 800329c:	f7fd fa8c 	bl	80007b8 <lcd_print>
 80032a0:	e02f      	b.n	8003302 <menu+0x2a02>
 80032a2:	bf00      	nop
 80032a4:	20000b4d 	.word	0x20000b4d
 80032a8:	0800dc5c 	.word	0x0800dc5c
 80032ac:	20000b41 	.word	0x20000b41
 80032b0:	20000b00 	.word	0x20000b00
 80032b4:	40010800 	.word	0x40010800
 80032b8:	20000b5b 	.word	0x20000b5b
 80032bc:	20000ac0 	.word	0x20000ac0
 80032c0:	20000b58 	.word	0x20000b58
 80032c4:	20000b2c 	.word	0x20000b2c
 80032c8:	20000b3b 	.word	0x20000b3b
 80032cc:	0800dc94 	.word	0x0800dc94
 80032d0:	0800dca8 	.word	0x0800dca8
 80032d4:	0800dcbc 	.word	0x0800dcbc
 80032d8:	0800dcd0 	.word	0x0800dcd0
 80032dc:	0800d8e8 	.word	0x0800d8e8
 80032e0:	20000b42 	.word	0x20000b42
 80032e4:	0800dce4 	.word	0x0800dce4
 80032e8:	0800dcf8 	.word	0x0800dcf8
 80032ec:	0800dd0c 	.word	0x0800dd0c
			} else if(dilSecim == 1) {
 80032f0:	4b73      	ldr	r3, [pc, #460]	; (80034c0 <menu+0x2bc0>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d104      	bne.n	8003302 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 80032f8:	4a72      	ldr	r2, [pc, #456]	; (80034c4 <menu+0x2bc4>)
 80032fa:	2101      	movs	r1, #1
 80032fc:	2001      	movs	r0, #1
 80032fe:	f7fd fa5b 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003302:	4b6f      	ldr	r3, [pc, #444]	; (80034c0 <menu+0x2bc0>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d105      	bne.n	8003316 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 800330a:	4a6f      	ldr	r2, [pc, #444]	; (80034c8 <menu+0x2bc8>)
 800330c:	2101      	movs	r1, #1
 800330e:	2002      	movs	r0, #2
 8003310:	f7fd fa52 	bl	80007b8 <lcd_print>
 8003314:	e008      	b.n	8003328 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003316:	4b6a      	ldr	r3, [pc, #424]	; (80034c0 <menu+0x2bc0>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d104      	bne.n	8003328 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 800331e:	4a6b      	ldr	r2, [pc, #428]	; (80034cc <menu+0x2bcc>)
 8003320:	2101      	movs	r1, #1
 8003322:	2002      	movs	r0, #2
 8003324:	f7fd fa48 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003328:	4b69      	ldr	r3, [pc, #420]	; (80034d0 <menu+0x2bd0>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	220a      	movs	r2, #10
 800332e:	4969      	ldr	r1, [pc, #420]	; (80034d4 <menu+0x2bd4>)
 8003330:	4618      	mov	r0, r3
 8003332:	f009 fab5 	bl	800c8a0 <itoa>
		lcd_print(2,16,snum);
 8003336:	4a67      	ldr	r2, [pc, #412]	; (80034d4 <menu+0x2bd4>)
 8003338:	2110      	movs	r1, #16
 800333a:	2002      	movs	r0, #2
 800333c:	f7fd fa3c 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003340:	2102      	movs	r1, #2
 8003342:	4865      	ldr	r0, [pc, #404]	; (80034d8 <menu+0x2bd8>)
 8003344:	f006 fa80 	bl	8009848 <HAL_GPIO_ReadPin>
 8003348:	4603      	mov	r3, r0
 800334a:	2b01      	cmp	r3, #1
 800334c:	d115      	bne.n	800337a <menu+0x2a7a>
 800334e:	4b63      	ldr	r3, [pc, #396]	; (80034dc <menu+0x2bdc>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	f083 0301 	eor.w	r3, r3, #1
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00e      	beq.n	800337a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800335c:	4b5c      	ldr	r3, [pc, #368]	; (80034d0 <menu+0x2bd0>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	b2da      	uxtb	r2, r3
 8003364:	4b5a      	ldr	r3, [pc, #360]	; (80034d0 <menu+0x2bd0>)
 8003366:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003368:	4b59      	ldr	r3, [pc, #356]	; (80034d0 <menu+0x2bd0>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b05      	cmp	r3, #5
 800336e:	d902      	bls.n	8003376 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003370:	4b57      	ldr	r3, [pc, #348]	; (80034d0 <menu+0x2bd0>)
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003376:	f001 ff2f 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800337a:	2104      	movs	r1, #4
 800337c:	4856      	ldr	r0, [pc, #344]	; (80034d8 <menu+0x2bd8>)
 800337e:	f006 fa63 	bl	8009848 <HAL_GPIO_ReadPin>
 8003382:	4603      	mov	r3, r0
 8003384:	2b01      	cmp	r3, #1
 8003386:	d115      	bne.n	80033b4 <menu+0x2ab4>
 8003388:	4b54      	ldr	r3, [pc, #336]	; (80034dc <menu+0x2bdc>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	f083 0301 	eor.w	r3, r3, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00e      	beq.n	80033b4 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003396:	4b4e      	ldr	r3, [pc, #312]	; (80034d0 <menu+0x2bd0>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	3b01      	subs	r3, #1
 800339c:	b2da      	uxtb	r2, r3
 800339e:	4b4c      	ldr	r3, [pc, #304]	; (80034d0 <menu+0x2bd0>)
 80033a0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80033a2:	4b4b      	ldr	r3, [pc, #300]	; (80034d0 <menu+0x2bd0>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d902      	bls.n	80033b0 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 80033aa:	4b49      	ldr	r3, [pc, #292]	; (80034d0 <menu+0x2bd0>)
 80033ac:	2205      	movs	r2, #5
 80033ae:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033b0:	f001 ff12 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033b4:	2108      	movs	r1, #8
 80033b6:	4848      	ldr	r0, [pc, #288]	; (80034d8 <menu+0x2bd8>)
 80033b8:	f006 fa46 	bl	8009848 <HAL_GPIO_ReadPin>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10d      	bne.n	80033de <menu+0x2ade>
 80033c2:	4b46      	ldr	r3, [pc, #280]	; (80034dc <menu+0x2bdc>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	f083 0301 	eor.w	r3, r3, #1
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d006      	beq.n	80033de <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 80033d0:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <menu+0x2bd0>)
 80033d2:	781a      	ldrb	r2, [r3, #0]
 80033d4:	4b42      	ldr	r3, [pc, #264]	; (80034e0 <menu+0x2be0>)
 80033d6:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80033d8:	4b42      	ldr	r3, [pc, #264]	; (80034e4 <menu+0x2be4>)
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80033de:	4b42      	ldr	r3, [pc, #264]	; (80034e8 <menu+0x2be8>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b1a      	cmp	r3, #26
 80033e4:	f040 80ec 	bne.w	80035c0 <menu+0x2cc0>
		if(dilSecim == 0) {
 80033e8:	4b35      	ldr	r3, [pc, #212]	; (80034c0 <menu+0x2bc0>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 80033f0:	4a3e      	ldr	r2, [pc, #248]	; (80034ec <menu+0x2bec>)
 80033f2:	2101      	movs	r1, #1
 80033f4:	2001      	movs	r0, #1
 80033f6:	f7fd f9df 	bl	80007b8 <lcd_print>
 80033fa:	e008      	b.n	800340e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 80033fc:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <menu+0x2bc0>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d104      	bne.n	800340e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003404:	4a3a      	ldr	r2, [pc, #232]	; (80034f0 <menu+0x2bf0>)
 8003406:	2101      	movs	r1, #1
 8003408:	2001      	movs	r0, #1
 800340a:	f7fd f9d5 	bl	80007b8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 800340e:	4b39      	ldr	r3, [pc, #228]	; (80034f4 <menu+0x2bf4>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b63      	cmp	r3, #99	; 0x63
 8003414:	d91e      	bls.n	8003454 <menu+0x2b54>
			if(dilSecim == 0) {
 8003416:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <menu+0x2bc0>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 800341e:	4a2a      	ldr	r2, [pc, #168]	; (80034c8 <menu+0x2bc8>)
 8003420:	2101      	movs	r1, #1
 8003422:	2002      	movs	r0, #2
 8003424:	f7fd f9c8 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003428:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <menu+0x2bc0>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d104      	bne.n	800343a <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003430:	4a26      	ldr	r2, [pc, #152]	; (80034cc <menu+0x2bcc>)
 8003432:	2101      	movs	r1, #1
 8003434:	2002      	movs	r0, #2
 8003436:	f7fd f9bf 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800343a:	4b2e      	ldr	r3, [pc, #184]	; (80034f4 <menu+0x2bf4>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	220a      	movs	r2, #10
 8003440:	4924      	ldr	r1, [pc, #144]	; (80034d4 <menu+0x2bd4>)
 8003442:	4618      	mov	r0, r3
 8003444:	f009 fa2c 	bl	800c8a0 <itoa>
			lcd_print(2,14,snum);
 8003448:	4a22      	ldr	r2, [pc, #136]	; (80034d4 <menu+0x2bd4>)
 800344a:	210e      	movs	r1, #14
 800344c:	2002      	movs	r0, #2
 800344e:	f7fd f9b3 	bl	80007b8 <lcd_print>
 8003452:	e066      	b.n	8003522 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003454:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <menu+0x2bf4>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b09      	cmp	r3, #9
 800345a:	d923      	bls.n	80034a4 <menu+0x2ba4>
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <menu+0x2bf4>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b63      	cmp	r3, #99	; 0x63
 8003462:	d81f      	bhi.n	80034a4 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003464:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <menu+0x2bc0>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 800346c:	4a16      	ldr	r2, [pc, #88]	; (80034c8 <menu+0x2bc8>)
 800346e:	2101      	movs	r1, #1
 8003470:	2002      	movs	r0, #2
 8003472:	f7fd f9a1 	bl	80007b8 <lcd_print>
 8003476:	e008      	b.n	800348a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <menu+0x2bc0>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d104      	bne.n	800348a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003480:	4a12      	ldr	r2, [pc, #72]	; (80034cc <menu+0x2bcc>)
 8003482:	2101      	movs	r1, #1
 8003484:	2002      	movs	r0, #2
 8003486:	f7fd f997 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800348a:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <menu+0x2bf4>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	220a      	movs	r2, #10
 8003490:	4910      	ldr	r1, [pc, #64]	; (80034d4 <menu+0x2bd4>)
 8003492:	4618      	mov	r0, r3
 8003494:	f009 fa04 	bl	800c8a0 <itoa>
			lcd_print(2, 15, snum);
 8003498:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <menu+0x2bd4>)
 800349a:	210f      	movs	r1, #15
 800349c:	2002      	movs	r0, #2
 800349e:	f7fd f98b 	bl	80007b8 <lcd_print>
 80034a2:	e03e      	b.n	8003522 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 80034a4:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <menu+0x2bf4>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b09      	cmp	r3, #9
 80034aa:	d83a      	bhi.n	8003522 <menu+0x2c22>
			if(dilSecim == 0) {
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <menu+0x2bc0>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d121      	bne.n	80034f8 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 80034b4:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <menu+0x2bc8>)
 80034b6:	2101      	movs	r1, #1
 80034b8:	2002      	movs	r0, #2
 80034ba:	f7fd f97d 	bl	80007b8 <lcd_print>
 80034be:	e024      	b.n	800350a <menu+0x2c0a>
 80034c0:	20000b4d 	.word	0x20000b4d
 80034c4:	0800dd20 	.word	0x0800dd20
 80034c8:	0800d8e8 	.word	0x0800d8e8
 80034cc:	0800dc5c 	.word	0x0800dc5c
 80034d0:	20000b43 	.word	0x20000b43
 80034d4:	20000b00 	.word	0x20000b00
 80034d8:	40010800 	.word	0x40010800
 80034dc:	20000b5b 	.word	0x20000b5b
 80034e0:	20000ac0 	.word	0x20000ac0
 80034e4:	20000b58 	.word	0x20000b58
 80034e8:	20000b2c 	.word	0x20000b2c
 80034ec:	0800dd34 	.word	0x0800dd34
 80034f0:	0800dd48 	.word	0x0800dd48
 80034f4:	20000b44 	.word	0x20000b44
			} else if(dilSecim == 1) {
 80034f8:	4b8f      	ldr	r3, [pc, #572]	; (8003738 <menu+0x2e38>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d104      	bne.n	800350a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003500:	4a8e      	ldr	r2, [pc, #568]	; (800373c <menu+0x2e3c>)
 8003502:	2101      	movs	r1, #1
 8003504:	2002      	movs	r0, #2
 8003506:	f7fd f957 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800350a:	4b8d      	ldr	r3, [pc, #564]	; (8003740 <menu+0x2e40>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	220a      	movs	r2, #10
 8003510:	498c      	ldr	r1, [pc, #560]	; (8003744 <menu+0x2e44>)
 8003512:	4618      	mov	r0, r3
 8003514:	f009 f9c4 	bl	800c8a0 <itoa>
			lcd_print(2, 16, snum);
 8003518:	4a8a      	ldr	r2, [pc, #552]	; (8003744 <menu+0x2e44>)
 800351a:	2110      	movs	r1, #16
 800351c:	2002      	movs	r0, #2
 800351e:	f7fd f94b 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003522:	2102      	movs	r1, #2
 8003524:	4888      	ldr	r0, [pc, #544]	; (8003748 <menu+0x2e48>)
 8003526:	f006 f98f 	bl	8009848 <HAL_GPIO_ReadPin>
 800352a:	4603      	mov	r3, r0
 800352c:	2b01      	cmp	r3, #1
 800352e:	d115      	bne.n	800355c <menu+0x2c5c>
 8003530:	4b86      	ldr	r3, [pc, #536]	; (800374c <menu+0x2e4c>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	f083 0301 	eor.w	r3, r3, #1
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00e      	beq.n	800355c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 800353e:	4b80      	ldr	r3, [pc, #512]	; (8003740 <menu+0x2e40>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	3301      	adds	r3, #1
 8003544:	b2da      	uxtb	r2, r3
 8003546:	4b7e      	ldr	r3, [pc, #504]	; (8003740 <menu+0x2e40>)
 8003548:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800354a:	4b7d      	ldr	r3, [pc, #500]	; (8003740 <menu+0x2e40>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2bb4      	cmp	r3, #180	; 0xb4
 8003550:	d902      	bls.n	8003558 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003552:	4b7b      	ldr	r3, [pc, #492]	; (8003740 <menu+0x2e40>)
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003558:	f001 fe3e 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800355c:	2104      	movs	r1, #4
 800355e:	487a      	ldr	r0, [pc, #488]	; (8003748 <menu+0x2e48>)
 8003560:	f006 f972 	bl	8009848 <HAL_GPIO_ReadPin>
 8003564:	4603      	mov	r3, r0
 8003566:	2b01      	cmp	r3, #1
 8003568:	d115      	bne.n	8003596 <menu+0x2c96>
 800356a:	4b78      	ldr	r3, [pc, #480]	; (800374c <menu+0x2e4c>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	f083 0301 	eor.w	r3, r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00e      	beq.n	8003596 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003578:	4b71      	ldr	r3, [pc, #452]	; (8003740 <menu+0x2e40>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	3b01      	subs	r3, #1
 800357e:	b2da      	uxtb	r2, r3
 8003580:	4b6f      	ldr	r3, [pc, #444]	; (8003740 <menu+0x2e40>)
 8003582:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003584:	4b6e      	ldr	r3, [pc, #440]	; (8003740 <menu+0x2e40>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2bb5      	cmp	r3, #181	; 0xb5
 800358a:	d902      	bls.n	8003592 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800358c:	4b6c      	ldr	r3, [pc, #432]	; (8003740 <menu+0x2e40>)
 800358e:	22b4      	movs	r2, #180	; 0xb4
 8003590:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003592:	f001 fe21 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003596:	2108      	movs	r1, #8
 8003598:	486b      	ldr	r0, [pc, #428]	; (8003748 <menu+0x2e48>)
 800359a:	f006 f955 	bl	8009848 <HAL_GPIO_ReadPin>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10d      	bne.n	80035c0 <menu+0x2cc0>
 80035a4:	4b69      	ldr	r3, [pc, #420]	; (800374c <menu+0x2e4c>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	f083 0301 	eor.w	r3, r3, #1
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d006      	beq.n	80035c0 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 80035b2:	4b63      	ldr	r3, [pc, #396]	; (8003740 <menu+0x2e40>)
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	4b66      	ldr	r3, [pc, #408]	; (8003750 <menu+0x2e50>)
 80035b8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80035ba:	4b66      	ldr	r3, [pc, #408]	; (8003754 <menu+0x2e54>)
 80035bc:	2201      	movs	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80035c0:	4b65      	ldr	r3, [pc, #404]	; (8003758 <menu+0x2e58>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b1b      	cmp	r3, #27
 80035c6:	f040 8083 	bne.w	80036d0 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 80035ca:	4a64      	ldr	r2, [pc, #400]	; (800375c <menu+0x2e5c>)
 80035cc:	2101      	movs	r1, #1
 80035ce:	2001      	movs	r0, #1
 80035d0:	f7fd f8f2 	bl	80007b8 <lcd_print>

		if(buzzer == 0) {
 80035d4:	4b62      	ldr	r3, [pc, #392]	; (8003760 <menu+0x2e60>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d113      	bne.n	8003604 <menu+0x2d04>
			if(dilSecim == 0) {
 80035dc:	4b56      	ldr	r3, [pc, #344]	; (8003738 <menu+0x2e38>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 80035e4:	4a5f      	ldr	r2, [pc, #380]	; (8003764 <menu+0x2e64>)
 80035e6:	2101      	movs	r1, #1
 80035e8:	2002      	movs	r0, #2
 80035ea:	f7fd f8e5 	bl	80007b8 <lcd_print>
 80035ee:	e020      	b.n	8003632 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80035f0:	4b51      	ldr	r3, [pc, #324]	; (8003738 <menu+0x2e38>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d11c      	bne.n	8003632 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80035f8:	4a5b      	ldr	r2, [pc, #364]	; (8003768 <menu+0x2e68>)
 80035fa:	2101      	movs	r1, #1
 80035fc:	2002      	movs	r0, #2
 80035fe:	f7fd f8db 	bl	80007b8 <lcd_print>
 8003602:	e016      	b.n	8003632 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003604:	4b56      	ldr	r3, [pc, #344]	; (8003760 <menu+0x2e60>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d112      	bne.n	8003632 <menu+0x2d32>
			if(dilSecim == 0) {
 800360c:	4b4a      	ldr	r3, [pc, #296]	; (8003738 <menu+0x2e38>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d105      	bne.n	8003620 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003614:	4a55      	ldr	r2, [pc, #340]	; (800376c <menu+0x2e6c>)
 8003616:	2101      	movs	r1, #1
 8003618:	2002      	movs	r0, #2
 800361a:	f7fd f8cd 	bl	80007b8 <lcd_print>
 800361e:	e008      	b.n	8003632 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003620:	4b45      	ldr	r3, [pc, #276]	; (8003738 <menu+0x2e38>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d104      	bne.n	8003632 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003628:	4a51      	ldr	r2, [pc, #324]	; (8003770 <menu+0x2e70>)
 800362a:	2101      	movs	r1, #1
 800362c:	2002      	movs	r0, #2
 800362e:	f7fd f8c3 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003632:	2102      	movs	r1, #2
 8003634:	4844      	ldr	r0, [pc, #272]	; (8003748 <menu+0x2e48>)
 8003636:	f006 f907 	bl	8009848 <HAL_GPIO_ReadPin>
 800363a:	4603      	mov	r3, r0
 800363c:	2b01      	cmp	r3, #1
 800363e:	d115      	bne.n	800366c <menu+0x2d6c>
 8003640:	4b42      	ldr	r3, [pc, #264]	; (800374c <menu+0x2e4c>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	f083 0301 	eor.w	r3, r3, #1
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00e      	beq.n	800366c <menu+0x2d6c>
			buzzer = buzzer + 1;
 800364e:	4b44      	ldr	r3, [pc, #272]	; (8003760 <menu+0x2e60>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	3301      	adds	r3, #1
 8003654:	b2da      	uxtb	r2, r3
 8003656:	4b42      	ldr	r3, [pc, #264]	; (8003760 <menu+0x2e60>)
 8003658:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800365a:	4b41      	ldr	r3, [pc, #260]	; (8003760 <menu+0x2e60>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d902      	bls.n	8003668 <menu+0x2d68>
				buzzer = 0;
 8003662:	4b3f      	ldr	r3, [pc, #252]	; (8003760 <menu+0x2e60>)
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003668:	f001 fdb6 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800366c:	2104      	movs	r1, #4
 800366e:	4836      	ldr	r0, [pc, #216]	; (8003748 <menu+0x2e48>)
 8003670:	f006 f8ea 	bl	8009848 <HAL_GPIO_ReadPin>
 8003674:	4603      	mov	r3, r0
 8003676:	2b01      	cmp	r3, #1
 8003678:	d115      	bne.n	80036a6 <menu+0x2da6>
 800367a:	4b34      	ldr	r3, [pc, #208]	; (800374c <menu+0x2e4c>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	f083 0301 	eor.w	r3, r3, #1
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00e      	beq.n	80036a6 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003688:	4b35      	ldr	r3, [pc, #212]	; (8003760 <menu+0x2e60>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	3b01      	subs	r3, #1
 800368e:	b2da      	uxtb	r2, r3
 8003690:	4b33      	ldr	r3, [pc, #204]	; (8003760 <menu+0x2e60>)
 8003692:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003694:	4b32      	ldr	r3, [pc, #200]	; (8003760 <menu+0x2e60>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <menu+0x2da2>
		   		buzzer = 1;
 800369c:	4b30      	ldr	r3, [pc, #192]	; (8003760 <menu+0x2e60>)
 800369e:	2201      	movs	r2, #1
 80036a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036a2:	f001 fd99 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036a6:	2108      	movs	r1, #8
 80036a8:	4827      	ldr	r0, [pc, #156]	; (8003748 <menu+0x2e48>)
 80036aa:	f006 f8cd 	bl	8009848 <HAL_GPIO_ReadPin>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d10d      	bne.n	80036d0 <menu+0x2dd0>
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <menu+0x2e4c>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	f083 0301 	eor.w	r3, r3, #1
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d006      	beq.n	80036d0 <menu+0x2dd0>
			eepromData[25] = buzzer;
 80036c2:	4b27      	ldr	r3, [pc, #156]	; (8003760 <menu+0x2e60>)
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	4b22      	ldr	r3, [pc, #136]	; (8003750 <menu+0x2e50>)
 80036c8:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80036ca:	4b22      	ldr	r3, [pc, #136]	; (8003754 <menu+0x2e54>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80036d0:	4b21      	ldr	r3, [pc, #132]	; (8003758 <menu+0x2e58>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b1c      	cmp	r3, #28
 80036d6:	f040 80ab 	bne.w	8003830 <menu+0x2f30>
		calismaSayModu = 0;
 80036da:	4b26      	ldr	r3, [pc, #152]	; (8003774 <menu+0x2e74>)
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80036e0:	4a25      	ldr	r2, [pc, #148]	; (8003778 <menu+0x2e78>)
 80036e2:	2101      	movs	r1, #1
 80036e4:	2001      	movs	r0, #1
 80036e6:	f7fd f867 	bl	80007b8 <lcd_print>

		if(demoMode == 0) {
 80036ea:	4b24      	ldr	r3, [pc, #144]	; (800377c <menu+0x2e7c>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d113      	bne.n	800371a <menu+0x2e1a>
			if(dilSecim == 0) {
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <menu+0x2e38>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80036fa:	4a1a      	ldr	r2, [pc, #104]	; (8003764 <menu+0x2e64>)
 80036fc:	2101      	movs	r1, #1
 80036fe:	2002      	movs	r0, #2
 8003700:	f7fd f85a 	bl	80007b8 <lcd_print>
 8003704:	e045      	b.n	8003792 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003706:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <menu+0x2e38>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d141      	bne.n	8003792 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800370e:	4a16      	ldr	r2, [pc, #88]	; (8003768 <menu+0x2e68>)
 8003710:	2101      	movs	r1, #1
 8003712:	2002      	movs	r0, #2
 8003714:	f7fd f850 	bl	80007b8 <lcd_print>
 8003718:	e03b      	b.n	8003792 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <menu+0x2e7c>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d137      	bne.n	8003792 <menu+0x2e92>
			if(dilSecim == 0){
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <menu+0x2e38>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d12a      	bne.n	8003780 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800372a:	4a10      	ldr	r2, [pc, #64]	; (800376c <menu+0x2e6c>)
 800372c:	2101      	movs	r1, #1
 800372e:	2002      	movs	r0, #2
 8003730:	f7fd f842 	bl	80007b8 <lcd_print>
 8003734:	e02d      	b.n	8003792 <menu+0x2e92>
 8003736:	bf00      	nop
 8003738:	20000b4d 	.word	0x20000b4d
 800373c:	0800dc5c 	.word	0x0800dc5c
 8003740:	20000b44 	.word	0x20000b44
 8003744:	20000b00 	.word	0x20000b00
 8003748:	40010800 	.word	0x40010800
 800374c:	20000b5b 	.word	0x20000b5b
 8003750:	20000ac0 	.word	0x20000ac0
 8003754:	20000b58 	.word	0x20000b58
 8003758:	20000b2c 	.word	0x20000b2c
 800375c:	0800dd5c 	.word	0x0800dd5c
 8003760:	20000b48 	.word	0x20000b48
 8003764:	0800d684 	.word	0x0800d684
 8003768:	0800d698 	.word	0x0800d698
 800376c:	0800d6e4 	.word	0x0800d6e4
 8003770:	0800d6f8 	.word	0x0800d6f8
 8003774:	20000b4c 	.word	0x20000b4c
 8003778:	0800dd70 	.word	0x0800dd70
 800377c:	20000b4a 	.word	0x20000b4a
			} else if(dilSecim == 1) {
 8003780:	4b71      	ldr	r3, [pc, #452]	; (8003948 <menu+0x3048>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d104      	bne.n	8003792 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003788:	4a70      	ldr	r2, [pc, #448]	; (800394c <menu+0x304c>)
 800378a:	2101      	movs	r1, #1
 800378c:	2002      	movs	r0, #2
 800378e:	f7fd f813 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003792:	2102      	movs	r1, #2
 8003794:	486e      	ldr	r0, [pc, #440]	; (8003950 <menu+0x3050>)
 8003796:	f006 f857 	bl	8009848 <HAL_GPIO_ReadPin>
 800379a:	4603      	mov	r3, r0
 800379c:	2b01      	cmp	r3, #1
 800379e:	d115      	bne.n	80037cc <menu+0x2ecc>
 80037a0:	4b6c      	ldr	r3, [pc, #432]	; (8003954 <menu+0x3054>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	f083 0301 	eor.w	r3, r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00e      	beq.n	80037cc <menu+0x2ecc>
			demoMode = demoMode + 1;
 80037ae:	4b6a      	ldr	r3, [pc, #424]	; (8003958 <menu+0x3058>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4b68      	ldr	r3, [pc, #416]	; (8003958 <menu+0x3058>)
 80037b8:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80037ba:	4b67      	ldr	r3, [pc, #412]	; (8003958 <menu+0x3058>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d902      	bls.n	80037c8 <menu+0x2ec8>
				demoMode = 0;
 80037c2:	4b65      	ldr	r3, [pc, #404]	; (8003958 <menu+0x3058>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037c8:	f001 fd06 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037cc:	2104      	movs	r1, #4
 80037ce:	4860      	ldr	r0, [pc, #384]	; (8003950 <menu+0x3050>)
 80037d0:	f006 f83a 	bl	8009848 <HAL_GPIO_ReadPin>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d115      	bne.n	8003806 <menu+0x2f06>
 80037da:	4b5e      	ldr	r3, [pc, #376]	; (8003954 <menu+0x3054>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	f083 0301 	eor.w	r3, r3, #1
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00e      	beq.n	8003806 <menu+0x2f06>
			demoMode = demoMode - 1;
 80037e8:	4b5b      	ldr	r3, [pc, #364]	; (8003958 <menu+0x3058>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	4b59      	ldr	r3, [pc, #356]	; (8003958 <menu+0x3058>)
 80037f2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80037f4:	4b58      	ldr	r3, [pc, #352]	; (8003958 <menu+0x3058>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <menu+0x2f02>
		   		demoMode = 1;
 80037fc:	4b56      	ldr	r3, [pc, #344]	; (8003958 <menu+0x3058>)
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003802:	f001 fce9 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003806:	2108      	movs	r1, #8
 8003808:	4851      	ldr	r0, [pc, #324]	; (8003950 <menu+0x3050>)
 800380a:	f006 f81d 	bl	8009848 <HAL_GPIO_ReadPin>
 800380e:	4603      	mov	r3, r0
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10d      	bne.n	8003830 <menu+0x2f30>
 8003814:	4b4f      	ldr	r3, [pc, #316]	; (8003954 <menu+0x3054>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	f083 0301 	eor.w	r3, r3, #1
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d006      	beq.n	8003830 <menu+0x2f30>
			eepromData[26] = demoMode;
 8003822:	4b4d      	ldr	r3, [pc, #308]	; (8003958 <menu+0x3058>)
 8003824:	781a      	ldrb	r2, [r3, #0]
 8003826:	4b4d      	ldr	r3, [pc, #308]	; (800395c <menu+0x305c>)
 8003828:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800382a:	4b4d      	ldr	r3, [pc, #308]	; (8003960 <menu+0x3060>)
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003830:	4b4c      	ldr	r3, [pc, #304]	; (8003964 <menu+0x3064>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b1d      	cmp	r3, #29
 8003836:	f040 8132 	bne.w	8003a9e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800383a:	4b4b      	ldr	r3, [pc, #300]	; (8003968 <menu+0x3068>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d113      	bne.n	800386a <menu+0x2f6a>
 8003842:	4b4a      	ldr	r3, [pc, #296]	; (800396c <menu+0x306c>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <menu+0x2f6a>
 800384a:	4b49      	ldr	r3, [pc, #292]	; (8003970 <menu+0x3070>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10b      	bne.n	800386a <menu+0x2f6a>
 8003852:	4b48      	ldr	r3, [pc, #288]	; (8003974 <menu+0x3074>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d107      	bne.n	800386a <menu+0x2f6a>
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <menu+0x3078>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8003862:	4b46      	ldr	r3, [pc, #280]	; (800397c <menu+0x307c>)
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e002      	b.n	8003870 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800386a:	4b44      	ldr	r3, [pc, #272]	; (800397c <menu+0x307c>)
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003870:	4b43      	ldr	r3, [pc, #268]	; (8003980 <menu+0x3080>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d154      	bne.n	8003922 <menu+0x3022>
			if(dilSecim == 0) {
 8003878:	4b33      	ldr	r3, [pc, #204]	; (8003948 <menu+0x3048>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d105      	bne.n	800388c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003880:	4a40      	ldr	r2, [pc, #256]	; (8003984 <menu+0x3084>)
 8003882:	2101      	movs	r1, #1
 8003884:	2001      	movs	r0, #1
 8003886:	f7fc ff97 	bl	80007b8 <lcd_print>
 800388a:	e008      	b.n	800389e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800388c:	4b2e      	ldr	r3, [pc, #184]	; (8003948 <menu+0x3048>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d104      	bne.n	800389e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8003894:	4a3c      	ldr	r2, [pc, #240]	; (8003988 <menu+0x3088>)
 8003896:	2101      	movs	r1, #1
 8003898:	2001      	movs	r0, #1
 800389a:	f7fc ff8d 	bl	80007b8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800389e:	4b36      	ldr	r3, [pc, #216]	; (8003978 <menu+0x3078>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	220a      	movs	r2, #10
 80038a4:	4939      	ldr	r1, [pc, #228]	; (800398c <menu+0x308c>)
 80038a6:	4618      	mov	r0, r3
 80038a8:	f008 fffa 	bl	800c8a0 <itoa>
			lcd_print(2, 12, snum);
 80038ac:	4a37      	ldr	r2, [pc, #220]	; (800398c <menu+0x308c>)
 80038ae:	210c      	movs	r1, #12
 80038b0:	2002      	movs	r0, #2
 80038b2:	f7fc ff81 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80038b6:	4b2f      	ldr	r3, [pc, #188]	; (8003974 <menu+0x3074>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	220a      	movs	r2, #10
 80038bc:	4933      	ldr	r1, [pc, #204]	; (800398c <menu+0x308c>)
 80038be:	4618      	mov	r0, r3
 80038c0:	f008 ffee 	bl	800c8a0 <itoa>
			lcd_print(2, 13, snum);
 80038c4:	4a31      	ldr	r2, [pc, #196]	; (800398c <menu+0x308c>)
 80038c6:	210d      	movs	r1, #13
 80038c8:	2002      	movs	r0, #2
 80038ca:	f7fc ff75 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80038ce:	4b28      	ldr	r3, [pc, #160]	; (8003970 <menu+0x3070>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	220a      	movs	r2, #10
 80038d4:	492d      	ldr	r1, [pc, #180]	; (800398c <menu+0x308c>)
 80038d6:	4618      	mov	r0, r3
 80038d8:	f008 ffe2 	bl	800c8a0 <itoa>
			lcd_print(2, 14, snum);
 80038dc:	4a2b      	ldr	r2, [pc, #172]	; (800398c <menu+0x308c>)
 80038de:	210e      	movs	r1, #14
 80038e0:	2002      	movs	r0, #2
 80038e2:	f7fc ff69 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80038e6:	4b21      	ldr	r3, [pc, #132]	; (800396c <menu+0x306c>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	220a      	movs	r2, #10
 80038ec:	4927      	ldr	r1, [pc, #156]	; (800398c <menu+0x308c>)
 80038ee:	4618      	mov	r0, r3
 80038f0:	f008 ffd6 	bl	800c8a0 <itoa>
			lcd_print(2, 15, snum);
 80038f4:	4a25      	ldr	r2, [pc, #148]	; (800398c <menu+0x308c>)
 80038f6:	210f      	movs	r1, #15
 80038f8:	2002      	movs	r0, #2
 80038fa:	f7fc ff5d 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <menu+0x3068>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	220a      	movs	r2, #10
 8003904:	4921      	ldr	r1, [pc, #132]	; (800398c <menu+0x308c>)
 8003906:	4618      	mov	r0, r3
 8003908:	f008 ffca 	bl	800c8a0 <itoa>
			lcd_print(2, 16, snum);
 800390c:	4a1f      	ldr	r2, [pc, #124]	; (800398c <menu+0x308c>)
 800390e:	2110      	movs	r1, #16
 8003910:	2002      	movs	r0, #2
 8003912:	f7fc ff51 	bl	80007b8 <lcd_print>

			lcd_print(2, 1, "           ");
 8003916:	4a1e      	ldr	r2, [pc, #120]	; (8003990 <menu+0x3090>)
 8003918:	2101      	movs	r1, #1
 800391a:	2002      	movs	r0, #2
 800391c:	f7fc ff4c 	bl	80007b8 <lcd_print>
 8003920:	e048      	b.n	80039b4 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8003922:	4b17      	ldr	r3, [pc, #92]	; (8003980 <menu+0x3080>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d144      	bne.n	80039b4 <menu+0x30b4>
			if(dilSecim == 0) {
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <menu+0x3048>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d132      	bne.n	8003998 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003932:	4a14      	ldr	r2, [pc, #80]	; (8003984 <menu+0x3084>)
 8003934:	2101      	movs	r1, #1
 8003936:	2001      	movs	r0, #1
 8003938:	f7fc ff3e 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 800393c:	4a15      	ldr	r2, [pc, #84]	; (8003994 <menu+0x3094>)
 800393e:	2101      	movs	r1, #1
 8003940:	2002      	movs	r0, #2
 8003942:	f7fc ff39 	bl	80007b8 <lcd_print>
 8003946:	e035      	b.n	80039b4 <menu+0x30b4>
 8003948:	20000b4d 	.word	0x20000b4d
 800394c:	0800d6f8 	.word	0x0800d6f8
 8003950:	40010800 	.word	0x40010800
 8003954:	20000b5b 	.word	0x20000b5b
 8003958:	20000b4a 	.word	0x20000b4a
 800395c:	20000ac0 	.word	0x20000ac0
 8003960:	20000b58 	.word	0x20000b58
 8003964:	20000b2c 	.word	0x20000b2c
 8003968:	20000b29 	.word	0x20000b29
 800396c:	20000b2a 	.word	0x20000b2a
 8003970:	20000941 	.word	0x20000941
 8003974:	20000942 	.word	0x20000942
 8003978:	20000b2b 	.word	0x20000b2b
 800397c:	20000b6d 	.word	0x20000b6d
 8003980:	20000b4c 	.word	0x20000b4c
 8003984:	0800dd80 	.word	0x0800dd80
 8003988:	0800dd94 	.word	0x0800dd94
 800398c:	20000b00 	.word	0x20000b00
 8003990:	0800dda8 	.word	0x0800dda8
 8003994:	0800ddb4 	.word	0x0800ddb4
			} else if(dilSecim == 1) {
 8003998:	4b94      	ldr	r3, [pc, #592]	; (8003bec <menu+0x32ec>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d109      	bne.n	80039b4 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80039a0:	4a93      	ldr	r2, [pc, #588]	; (8003bf0 <menu+0x32f0>)
 80039a2:	2101      	movs	r1, #1
 80039a4:	2001      	movs	r0, #1
 80039a6:	f7fc ff07 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80039aa:	4a92      	ldr	r2, [pc, #584]	; (8003bf4 <menu+0x32f4>)
 80039ac:	2101      	movs	r1, #1
 80039ae:	2002      	movs	r0, #2
 80039b0:	f7fc ff02 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80039b4:	2102      	movs	r1, #2
 80039b6:	4890      	ldr	r0, [pc, #576]	; (8003bf8 <menu+0x32f8>)
 80039b8:	f005 ff46 	bl	8009848 <HAL_GPIO_ReadPin>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d119      	bne.n	80039f6 <menu+0x30f6>
 80039c2:	4b8e      	ldr	r3, [pc, #568]	; (8003bfc <menu+0x32fc>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	f083 0301 	eor.w	r3, r3, #1
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d012      	beq.n	80039f6 <menu+0x30f6>
 80039d0:	4b8b      	ldr	r3, [pc, #556]	; (8003c00 <menu+0x3300>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80039d8:	4b8a      	ldr	r3, [pc, #552]	; (8003c04 <menu+0x3304>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	4b88      	ldr	r3, [pc, #544]	; (8003c04 <menu+0x3304>)
 80039e2:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80039e4:	4b87      	ldr	r3, [pc, #540]	; (8003c04 <menu+0x3304>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d902      	bls.n	80039f2 <menu+0x30f2>
				calismaSayModu = 0;
 80039ec:	4b85      	ldr	r3, [pc, #532]	; (8003c04 <menu+0x3304>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039f2:	f001 fbf1 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80039f6:	2104      	movs	r1, #4
 80039f8:	487f      	ldr	r0, [pc, #508]	; (8003bf8 <menu+0x32f8>)
 80039fa:	f005 ff25 	bl	8009848 <HAL_GPIO_ReadPin>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d119      	bne.n	8003a38 <menu+0x3138>
 8003a04:	4b7d      	ldr	r3, [pc, #500]	; (8003bfc <menu+0x32fc>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	f083 0301 	eor.w	r3, r3, #1
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d012      	beq.n	8003a38 <menu+0x3138>
 8003a12:	4b7b      	ldr	r3, [pc, #492]	; (8003c00 <menu+0x3300>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00e      	beq.n	8003a38 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 8003a1a:	4b7a      	ldr	r3, [pc, #488]	; (8003c04 <menu+0x3304>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4b78      	ldr	r3, [pc, #480]	; (8003c04 <menu+0x3304>)
 8003a24:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003a26:	4b77      	ldr	r3, [pc, #476]	; (8003c04 <menu+0x3304>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <menu+0x3134>
		   		calismaSayModu = 1;
 8003a2e:	4b75      	ldr	r3, [pc, #468]	; (8003c04 <menu+0x3304>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a34:	f001 fbd0 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a38:	2108      	movs	r1, #8
 8003a3a:	486f      	ldr	r0, [pc, #444]	; (8003bf8 <menu+0x32f8>)
 8003a3c:	f005 ff04 	bl	8009848 <HAL_GPIO_ReadPin>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d12b      	bne.n	8003a9e <menu+0x319e>
 8003a46:	4b6d      	ldr	r3, [pc, #436]	; (8003bfc <menu+0x32fc>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	f083 0301 	eor.w	r3, r3, #1
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d024      	beq.n	8003a9e <menu+0x319e>
			eepromData[32] = 0;
 8003a54:	4b6c      	ldr	r3, [pc, #432]	; (8003c08 <menu+0x3308>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8003a5c:	4b6a      	ldr	r3, [pc, #424]	; (8003c08 <menu+0x3308>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8003a62:	4b69      	ldr	r3, [pc, #420]	; (8003c08 <menu+0x3308>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8003a68:	4b67      	ldr	r3, [pc, #412]	; (8003c08 <menu+0x3308>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8003a6e:	4b66      	ldr	r3, [pc, #408]	; (8003c08 <menu+0x3308>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8003a74:	4b65      	ldr	r3, [pc, #404]	; (8003c0c <menu+0x330c>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8003a7a:	4b65      	ldr	r3, [pc, #404]	; (8003c10 <menu+0x3310>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8003a80:	4b64      	ldr	r3, [pc, #400]	; (8003c14 <menu+0x3314>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8003a86:	4b64      	ldr	r3, [pc, #400]	; (8003c18 <menu+0x3318>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8003a8c:	4b63      	ldr	r3, [pc, #396]	; (8003c1c <menu+0x331c>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8003a92:	4b5c      	ldr	r3, [pc, #368]	; (8003c04 <menu+0x3304>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003a98:	4b61      	ldr	r3, [pc, #388]	; (8003c20 <menu+0x3320>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003a9e:	4b61      	ldr	r3, [pc, #388]	; (8003c24 <menu+0x3324>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b1e      	cmp	r3, #30
 8003aa4:	d16f      	bne.n	8003b86 <menu+0x3286>
		calismaSayModu = 0;
 8003aa6:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <menu+0x3304>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8003aac:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <menu+0x32ec>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8003ab4:	4a5c      	ldr	r2, [pc, #368]	; (8003c28 <menu+0x3328>)
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	2001      	movs	r0, #1
 8003aba:	f7fc fe7d 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8003abe:	4a5b      	ldr	r2, [pc, #364]	; (8003c2c <menu+0x332c>)
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	f7fc fe78 	bl	80007b8 <lcd_print>
 8003ac8:	e00d      	b.n	8003ae6 <menu+0x31e6>
		} else if(dilSecim == 1) {
 8003aca:	4b48      	ldr	r3, [pc, #288]	; (8003bec <menu+0x32ec>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d109      	bne.n	8003ae6 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8003ad2:	4a57      	ldr	r2, [pc, #348]	; (8003c30 <menu+0x3330>)
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f7fc fe6e 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8003adc:	4a55      	ldr	r2, [pc, #340]	; (8003c34 <menu+0x3334>)
 8003ade:	2101      	movs	r1, #1
 8003ae0:	2002      	movs	r0, #2
 8003ae2:	f7fc fe69 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	4843      	ldr	r0, [pc, #268]	; (8003bf8 <menu+0x32f8>)
 8003aea:	f005 fead 	bl	8009848 <HAL_GPIO_ReadPin>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d115      	bne.n	8003b20 <menu+0x3220>
 8003af4:	4b41      	ldr	r3, [pc, #260]	; (8003bfc <menu+0x32fc>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	f083 0301 	eor.w	r3, r3, #1
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00e      	beq.n	8003b20 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8003b02:	4b3a      	ldr	r3, [pc, #232]	; (8003bec <menu+0x32ec>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	3301      	adds	r3, #1
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	4b38      	ldr	r3, [pc, #224]	; (8003bec <menu+0x32ec>)
 8003b0c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003b0e:	4b37      	ldr	r3, [pc, #220]	; (8003bec <menu+0x32ec>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d902      	bls.n	8003b1c <menu+0x321c>
				dilSecim = 0;
 8003b16:	4b35      	ldr	r3, [pc, #212]	; (8003bec <menu+0x32ec>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003b1c:	f001 fb5c 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b20:	2104      	movs	r1, #4
 8003b22:	4835      	ldr	r0, [pc, #212]	; (8003bf8 <menu+0x32f8>)
 8003b24:	f005 fe90 	bl	8009848 <HAL_GPIO_ReadPin>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d115      	bne.n	8003b5a <menu+0x325a>
 8003b2e:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <menu+0x32fc>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	f083 0301 	eor.w	r3, r3, #1
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00e      	beq.n	8003b5a <menu+0x325a>
			dilSecim = dilSecim - 1;
 8003b3c:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <menu+0x32ec>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	4b29      	ldr	r3, [pc, #164]	; (8003bec <menu+0x32ec>)
 8003b46:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003b48:	4b28      	ldr	r3, [pc, #160]	; (8003bec <menu+0x32ec>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <menu+0x3256>
		   		dilSecim = 1;
 8003b50:	4b26      	ldr	r3, [pc, #152]	; (8003bec <menu+0x32ec>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003b56:	f001 fb3f 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b5a:	2108      	movs	r1, #8
 8003b5c:	4826      	ldr	r0, [pc, #152]	; (8003bf8 <menu+0x32f8>)
 8003b5e:	f005 fe73 	bl	8009848 <HAL_GPIO_ReadPin>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d10e      	bne.n	8003b86 <menu+0x3286>
 8003b68:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <menu+0x32fc>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	f083 0301 	eor.w	r3, r3, #1
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <menu+0x3286>
			eepromData[33] = dilSecim;
 8003b76:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <menu+0x32ec>)
 8003b78:	781a      	ldrb	r2, [r3, #0]
 8003b7a:	4b23      	ldr	r3, [pc, #140]	; (8003c08 <menu+0x3308>)
 8003b7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8003b80:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <menu+0x3320>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003b86:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <menu+0x3324>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b1f      	cmp	r3, #31
 8003b8c:	f040 80b7 	bne.w	8003cfe <menu+0x33fe>
		calismaSayModu = 0;
 8003b90:	4b1c      	ldr	r3, [pc, #112]	; (8003c04 <menu+0x3304>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8003b96:	4a28      	ldr	r2, [pc, #160]	; (8003c38 <menu+0x3338>)
 8003b98:	2101      	movs	r1, #1
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	f7fc fe0c 	bl	80007b8 <lcd_print>

		if(iotMode == 0) {
 8003ba0:	4b26      	ldr	r3, [pc, #152]	; (8003c3c <menu+0x333c>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d113      	bne.n	8003bd0 <menu+0x32d0>
			if(dilSecim == 0) {
 8003ba8:	4b10      	ldr	r3, [pc, #64]	; (8003bec <menu+0x32ec>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d105      	bne.n	8003bbc <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8003bb0:	4a23      	ldr	r2, [pc, #140]	; (8003c40 <menu+0x3340>)
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	2002      	movs	r0, #2
 8003bb6:	f7fc fdff 	bl	80007b8 <lcd_print>
 8003bba:	e050      	b.n	8003c5e <menu+0x335e>
			} else if(dilSecim == 1) {
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <menu+0x32ec>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d14c      	bne.n	8003c5e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8003bc4:	4a1f      	ldr	r2, [pc, #124]	; (8003c44 <menu+0x3344>)
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	2002      	movs	r0, #2
 8003bca:	f7fc fdf5 	bl	80007b8 <lcd_print>
 8003bce:	e046      	b.n	8003c5e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8003bd0:	4b1a      	ldr	r3, [pc, #104]	; (8003c3c <menu+0x333c>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d142      	bne.n	8003c5e <menu+0x335e>
			if(dilSecim == 0){
 8003bd8:	4b04      	ldr	r3, [pc, #16]	; (8003bec <menu+0x32ec>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d135      	bne.n	8003c4c <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8003be0:	4a19      	ldr	r2, [pc, #100]	; (8003c48 <menu+0x3348>)
 8003be2:	2101      	movs	r1, #1
 8003be4:	2002      	movs	r0, #2
 8003be6:	f7fc fde7 	bl	80007b8 <lcd_print>
 8003bea:	e038      	b.n	8003c5e <menu+0x335e>
 8003bec:	20000b4d 	.word	0x20000b4d
 8003bf0:	0800dd94 	.word	0x0800dd94
 8003bf4:	0800ddc8 	.word	0x0800ddc8
 8003bf8:	40010800 	.word	0x40010800
 8003bfc:	20000b5b 	.word	0x20000b5b
 8003c00:	20000b6d 	.word	0x20000b6d
 8003c04:	20000b4c 	.word	0x20000b4c
 8003c08:	20000ac0 	.word	0x20000ac0
 8003c0c:	20000b2b 	.word	0x20000b2b
 8003c10:	20000942 	.word	0x20000942
 8003c14:	20000941 	.word	0x20000941
 8003c18:	20000b2a 	.word	0x20000b2a
 8003c1c:	20000b29 	.word	0x20000b29
 8003c20:	20000b58 	.word	0x20000b58
 8003c24:	20000b2c 	.word	0x20000b2c
 8003c28:	0800dddc 	.word	0x0800dddc
 8003c2c:	0800ddf0 	.word	0x0800ddf0
 8003c30:	0800de04 	.word	0x0800de04
 8003c34:	0800de18 	.word	0x0800de18
 8003c38:	0800de2c 	.word	0x0800de2c
 8003c3c:	20000b4b 	.word	0x20000b4b
 8003c40:	0800d684 	.word	0x0800d684
 8003c44:	0800d698 	.word	0x0800d698
 8003c48:	0800d6e4 	.word	0x0800d6e4
			} else if(dilSecim == 1) {
 8003c4c:	4b46      	ldr	r3, [pc, #280]	; (8003d68 <menu+0x3468>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d104      	bne.n	8003c5e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8003c54:	4a45      	ldr	r2, [pc, #276]	; (8003d6c <menu+0x346c>)
 8003c56:	2101      	movs	r1, #1
 8003c58:	2002      	movs	r0, #2
 8003c5a:	f7fc fdad 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c5e:	2102      	movs	r1, #2
 8003c60:	4843      	ldr	r0, [pc, #268]	; (8003d70 <menu+0x3470>)
 8003c62:	f005 fdf1 	bl	8009848 <HAL_GPIO_ReadPin>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d115      	bne.n	8003c98 <menu+0x3398>
 8003c6c:	4b41      	ldr	r3, [pc, #260]	; (8003d74 <menu+0x3474>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	f083 0301 	eor.w	r3, r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00e      	beq.n	8003c98 <menu+0x3398>
			iotMode = iotMode + 1;
 8003c7a:	4b3f      	ldr	r3, [pc, #252]	; (8003d78 <menu+0x3478>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	4b3d      	ldr	r3, [pc, #244]	; (8003d78 <menu+0x3478>)
 8003c84:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003c86:	4b3c      	ldr	r3, [pc, #240]	; (8003d78 <menu+0x3478>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d902      	bls.n	8003c94 <menu+0x3394>
				iotMode = 0;
 8003c8e:	4b3a      	ldr	r3, [pc, #232]	; (8003d78 <menu+0x3478>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003c94:	f001 faa0 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c98:	2104      	movs	r1, #4
 8003c9a:	4835      	ldr	r0, [pc, #212]	; (8003d70 <menu+0x3470>)
 8003c9c:	f005 fdd4 	bl	8009848 <HAL_GPIO_ReadPin>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d115      	bne.n	8003cd2 <menu+0x33d2>
 8003ca6:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <menu+0x3474>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	f083 0301 	eor.w	r3, r3, #1
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00e      	beq.n	8003cd2 <menu+0x33d2>
			iotMode = iotMode - 1;
 8003cb4:	4b30      	ldr	r3, [pc, #192]	; (8003d78 <menu+0x3478>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <menu+0x3478>)
 8003cbe:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003cc0:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <menu+0x3478>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <menu+0x33ce>
		   		iotMode = 1;
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <menu+0x3478>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003cce:	f001 fa83 	bl	80051d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cd2:	2108      	movs	r1, #8
 8003cd4:	4826      	ldr	r0, [pc, #152]	; (8003d70 <menu+0x3470>)
 8003cd6:	f005 fdb7 	bl	8009848 <HAL_GPIO_ReadPin>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d10e      	bne.n	8003cfe <menu+0x33fe>
 8003ce0:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <menu+0x3474>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	f083 0301 	eor.w	r3, r3, #1
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <menu+0x33fe>
			eepromData[37] = iotMode;
 8003cee:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <menu+0x3478>)
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <menu+0x347c>)
 8003cf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 8003cf8:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <menu+0x3480>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003cfe:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <menu+0x3484>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d12e      	bne.n	8003d64 <menu+0x3464>
		if(dilSecim == 0) {
 8003d06:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <menu+0x3468>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <menu+0x3424>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8003d0e:	4a1e      	ldr	r2, [pc, #120]	; (8003d88 <menu+0x3488>)
 8003d10:	2101      	movs	r1, #1
 8003d12:	2001      	movs	r0, #1
 8003d14:	f7fc fd50 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8003d18:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <menu+0x348c>)
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	2002      	movs	r0, #2
 8003d1e:	f7fc fd4b 	bl	80007b8 <lcd_print>
 8003d22:	e00d      	b.n	8003d40 <menu+0x3440>
		} else if(dilSecim == 1) {
 8003d24:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <menu+0x3468>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d109      	bne.n	8003d40 <menu+0x3440>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8003d2c:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <menu+0x3490>)
 8003d2e:	2101      	movs	r1, #1
 8003d30:	2001      	movs	r0, #1
 8003d32:	f7fc fd41 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8003d36:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <menu+0x3494>)
 8003d38:	2101      	movs	r1, #1
 8003d3a:	2002      	movs	r0, #2
 8003d3c:	f7fc fd3c 	bl	80007b8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003d40:	2108      	movs	r1, #8
 8003d42:	480b      	ldr	r0, [pc, #44]	; (8003d70 <menu+0x3470>)
 8003d44:	f005 fd80 	bl	8009848 <HAL_GPIO_ReadPin>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d10a      	bne.n	8003d64 <menu+0x3464>
			menuGiris = 0;
 8003d4e:	4b12      	ldr	r3, [pc, #72]	; (8003d98 <menu+0x3498>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8003d54:	f7fc fd5c 	bl	8000810 <lcd_clear>
			HAL_Delay(500);
 8003d58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d5c:	f004 ffa4 	bl	8008ca8 <HAL_Delay>
			NVIC_SystemReset();
 8003d60:	f7fc fd9e 	bl	80008a0 <__NVIC_SystemReset>
		}
	}
}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000b4d 	.word	0x20000b4d
 8003d6c:	0800d6f8 	.word	0x0800d6f8
 8003d70:	40010800 	.word	0x40010800
 8003d74:	20000b5b 	.word	0x20000b5b
 8003d78:	20000b4b 	.word	0x20000b4b
 8003d7c:	20000ac0 	.word	0x20000ac0
 8003d80:	20000b58 	.word	0x20000b58
 8003d84:	20000b2c 	.word	0x20000b2c
 8003d88:	0800de40 	.word	0x0800de40
 8003d8c:	0800de54 	.word	0x0800de54
 8003d90:	0800de68 	.word	0x0800de68
 8003d94:	0800de7c 	.word	0x0800de7c
 8003d98:	20000b49 	.word	0x20000b49

08003d9c <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8003da6:	48a9      	ldr	r0, [pc, #676]	; (800404c <loadMenuTexts+0x2b0>)
 8003da8:	f7fc fd90 	bl	80008cc <copyText>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4aa8      	ldr	r2, [pc, #672]	; (8004050 <loadMenuTexts+0x2b4>)
 8003db0:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8003db2:	48a8      	ldr	r0, [pc, #672]	; (8004054 <loadMenuTexts+0x2b8>)
 8003db4:	f7fc fd8a 	bl	80008cc <copyText>
 8003db8:	4603      	mov	r3, r0
 8003dba:	4aa7      	ldr	r2, [pc, #668]	; (8004058 <loadMenuTexts+0x2bc>)
 8003dbc:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8003dbe:	48a7      	ldr	r0, [pc, #668]	; (800405c <loadMenuTexts+0x2c0>)
 8003dc0:	f7fc fd84 	bl	80008cc <copyText>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4aa6      	ldr	r2, [pc, #664]	; (8004060 <loadMenuTexts+0x2c4>)
 8003dc8:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8003dca:	48a6      	ldr	r0, [pc, #664]	; (8004064 <loadMenuTexts+0x2c8>)
 8003dcc:	f7fc fd7e 	bl	80008cc <copyText>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4aa5      	ldr	r2, [pc, #660]	; (8004068 <loadMenuTexts+0x2cc>)
 8003dd4:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8003dd6:	48a5      	ldr	r0, [pc, #660]	; (800406c <loadMenuTexts+0x2d0>)
 8003dd8:	f7fc fd78 	bl	80008cc <copyText>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4aa4      	ldr	r2, [pc, #656]	; (8004070 <loadMenuTexts+0x2d4>)
 8003de0:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8003de2:	48a4      	ldr	r0, [pc, #656]	; (8004074 <loadMenuTexts+0x2d8>)
 8003de4:	f7fc fd72 	bl	80008cc <copyText>
 8003de8:	4603      	mov	r3, r0
 8003dea:	4aa3      	ldr	r2, [pc, #652]	; (8004078 <loadMenuTexts+0x2dc>)
 8003dec:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8003dee:	48a3      	ldr	r0, [pc, #652]	; (800407c <loadMenuTexts+0x2e0>)
 8003df0:	f7fc fd6c 	bl	80008cc <copyText>
 8003df4:	4603      	mov	r3, r0
 8003df6:	4aa2      	ldr	r2, [pc, #648]	; (8004080 <loadMenuTexts+0x2e4>)
 8003df8:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f040 82d1 	bne.w	80043a4 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8003e02:	48a0      	ldr	r0, [pc, #640]	; (8004084 <loadMenuTexts+0x2e8>)
 8003e04:	f7fc fd62 	bl	80008cc <copyText>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	4a9f      	ldr	r2, [pc, #636]	; (8004088 <loadMenuTexts+0x2ec>)
 8003e0c:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8003e0e:	489f      	ldr	r0, [pc, #636]	; (800408c <loadMenuTexts+0x2f0>)
 8003e10:	f7fc fd5c 	bl	80008cc <copyText>
 8003e14:	4603      	mov	r3, r0
 8003e16:	4a9e      	ldr	r2, [pc, #632]	; (8004090 <loadMenuTexts+0x2f4>)
 8003e18:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8003e1a:	489e      	ldr	r0, [pc, #632]	; (8004094 <loadMenuTexts+0x2f8>)
 8003e1c:	f7fc fd56 	bl	80008cc <copyText>
 8003e20:	4603      	mov	r3, r0
 8003e22:	4a9d      	ldr	r2, [pc, #628]	; (8004098 <loadMenuTexts+0x2fc>)
 8003e24:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8003e26:	489d      	ldr	r0, [pc, #628]	; (800409c <loadMenuTexts+0x300>)
 8003e28:	f7fc fd50 	bl	80008cc <copyText>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4a9c      	ldr	r2, [pc, #624]	; (80040a0 <loadMenuTexts+0x304>)
 8003e30:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8003e32:	489c      	ldr	r0, [pc, #624]	; (80040a4 <loadMenuTexts+0x308>)
 8003e34:	f7fc fd4a 	bl	80008cc <copyText>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	4a9b      	ldr	r2, [pc, #620]	; (80040a8 <loadMenuTexts+0x30c>)
 8003e3c:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8003e3e:	489b      	ldr	r0, [pc, #620]	; (80040ac <loadMenuTexts+0x310>)
 8003e40:	f7fc fd44 	bl	80008cc <copyText>
 8003e44:	4603      	mov	r3, r0
 8003e46:	4a9a      	ldr	r2, [pc, #616]	; (80040b0 <loadMenuTexts+0x314>)
 8003e48:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8003e4a:	489a      	ldr	r0, [pc, #616]	; (80040b4 <loadMenuTexts+0x318>)
 8003e4c:	f7fc fd3e 	bl	80008cc <copyText>
 8003e50:	4603      	mov	r3, r0
 8003e52:	4a99      	ldr	r2, [pc, #612]	; (80040b8 <loadMenuTexts+0x31c>)
 8003e54:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8003e56:	4899      	ldr	r0, [pc, #612]	; (80040bc <loadMenuTexts+0x320>)
 8003e58:	f7fc fd38 	bl	80008cc <copyText>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	4a98      	ldr	r2, [pc, #608]	; (80040c0 <loadMenuTexts+0x324>)
 8003e60:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8003e62:	4898      	ldr	r0, [pc, #608]	; (80040c4 <loadMenuTexts+0x328>)
 8003e64:	f7fc fd32 	bl	80008cc <copyText>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	4a97      	ldr	r2, [pc, #604]	; (80040c8 <loadMenuTexts+0x32c>)
 8003e6c:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8003e6e:	4897      	ldr	r0, [pc, #604]	; (80040cc <loadMenuTexts+0x330>)
 8003e70:	f7fc fd2c 	bl	80008cc <copyText>
 8003e74:	4603      	mov	r3, r0
 8003e76:	4a96      	ldr	r2, [pc, #600]	; (80040d0 <loadMenuTexts+0x334>)
 8003e78:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8003e7a:	4896      	ldr	r0, [pc, #600]	; (80040d4 <loadMenuTexts+0x338>)
 8003e7c:	f7fc fd26 	bl	80008cc <copyText>
 8003e80:	4603      	mov	r3, r0
 8003e82:	4a95      	ldr	r2, [pc, #596]	; (80040d8 <loadMenuTexts+0x33c>)
 8003e84:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8003e86:	4895      	ldr	r0, [pc, #596]	; (80040dc <loadMenuTexts+0x340>)
 8003e88:	f7fc fd20 	bl	80008cc <copyText>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	4a94      	ldr	r2, [pc, #592]	; (80040e0 <loadMenuTexts+0x344>)
 8003e90:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8003e92:	4894      	ldr	r0, [pc, #592]	; (80040e4 <loadMenuTexts+0x348>)
 8003e94:	f7fc fd1a 	bl	80008cc <copyText>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	4a93      	ldr	r2, [pc, #588]	; (80040e8 <loadMenuTexts+0x34c>)
 8003e9c:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8003e9e:	4893      	ldr	r0, [pc, #588]	; (80040ec <loadMenuTexts+0x350>)
 8003ea0:	f7fc fd14 	bl	80008cc <copyText>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	4a92      	ldr	r2, [pc, #584]	; (80040f0 <loadMenuTexts+0x354>)
 8003ea8:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8003eaa:	4892      	ldr	r0, [pc, #584]	; (80040f4 <loadMenuTexts+0x358>)
 8003eac:	f7fc fd0e 	bl	80008cc <copyText>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	4a91      	ldr	r2, [pc, #580]	; (80040f8 <loadMenuTexts+0x35c>)
 8003eb4:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8003eb6:	4891      	ldr	r0, [pc, #580]	; (80040fc <loadMenuTexts+0x360>)
 8003eb8:	f7fc fd08 	bl	80008cc <copyText>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	4a90      	ldr	r2, [pc, #576]	; (8004100 <loadMenuTexts+0x364>)
 8003ec0:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8003ec2:	4890      	ldr	r0, [pc, #576]	; (8004104 <loadMenuTexts+0x368>)
 8003ec4:	f7fc fd02 	bl	80008cc <copyText>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	4a8f      	ldr	r2, [pc, #572]	; (8004108 <loadMenuTexts+0x36c>)
 8003ecc:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8003ece:	488f      	ldr	r0, [pc, #572]	; (800410c <loadMenuTexts+0x370>)
 8003ed0:	f7fc fcfc 	bl	80008cc <copyText>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4a8e      	ldr	r2, [pc, #568]	; (8004110 <loadMenuTexts+0x374>)
 8003ed8:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8003eda:	488e      	ldr	r0, [pc, #568]	; (8004114 <loadMenuTexts+0x378>)
 8003edc:	f7fc fcf6 	bl	80008cc <copyText>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	4a8d      	ldr	r2, [pc, #564]	; (8004118 <loadMenuTexts+0x37c>)
 8003ee4:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8003ee6:	488d      	ldr	r0, [pc, #564]	; (800411c <loadMenuTexts+0x380>)
 8003ee8:	f7fc fcf0 	bl	80008cc <copyText>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4a8c      	ldr	r2, [pc, #560]	; (8004120 <loadMenuTexts+0x384>)
 8003ef0:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8003ef2:	488c      	ldr	r0, [pc, #560]	; (8004124 <loadMenuTexts+0x388>)
 8003ef4:	f7fc fcea 	bl	80008cc <copyText>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	4a8b      	ldr	r2, [pc, #556]	; (8004128 <loadMenuTexts+0x38c>)
 8003efc:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8003efe:	488b      	ldr	r0, [pc, #556]	; (800412c <loadMenuTexts+0x390>)
 8003f00:	f7fc fce4 	bl	80008cc <copyText>
 8003f04:	4603      	mov	r3, r0
 8003f06:	4a8a      	ldr	r2, [pc, #552]	; (8004130 <loadMenuTexts+0x394>)
 8003f08:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8003f0a:	488a      	ldr	r0, [pc, #552]	; (8004134 <loadMenuTexts+0x398>)
 8003f0c:	f7fc fcde 	bl	80008cc <copyText>
 8003f10:	4603      	mov	r3, r0
 8003f12:	4a89      	ldr	r2, [pc, #548]	; (8004138 <loadMenuTexts+0x39c>)
 8003f14:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8003f16:	4889      	ldr	r0, [pc, #548]	; (800413c <loadMenuTexts+0x3a0>)
 8003f18:	f7fc fcd8 	bl	80008cc <copyText>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4a88      	ldr	r2, [pc, #544]	; (8004140 <loadMenuTexts+0x3a4>)
 8003f20:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8003f22:	4888      	ldr	r0, [pc, #544]	; (8004144 <loadMenuTexts+0x3a8>)
 8003f24:	f7fc fcd2 	bl	80008cc <copyText>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4a87      	ldr	r2, [pc, #540]	; (8004148 <loadMenuTexts+0x3ac>)
 8003f2c:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8003f2e:	4887      	ldr	r0, [pc, #540]	; (800414c <loadMenuTexts+0x3b0>)
 8003f30:	f7fc fccc 	bl	80008cc <copyText>
 8003f34:	4603      	mov	r3, r0
 8003f36:	4a86      	ldr	r2, [pc, #536]	; (8004150 <loadMenuTexts+0x3b4>)
 8003f38:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8003f3a:	4886      	ldr	r0, [pc, #536]	; (8004154 <loadMenuTexts+0x3b8>)
 8003f3c:	f7fc fcc6 	bl	80008cc <copyText>
 8003f40:	4603      	mov	r3, r0
 8003f42:	4a85      	ldr	r2, [pc, #532]	; (8004158 <loadMenuTexts+0x3bc>)
 8003f44:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8003f46:	4885      	ldr	r0, [pc, #532]	; (800415c <loadMenuTexts+0x3c0>)
 8003f48:	f7fc fcc0 	bl	80008cc <copyText>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	4a84      	ldr	r2, [pc, #528]	; (8004160 <loadMenuTexts+0x3c4>)
 8003f50:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8003f52:	4884      	ldr	r0, [pc, #528]	; (8004164 <loadMenuTexts+0x3c8>)
 8003f54:	f7fc fcba 	bl	80008cc <copyText>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4a83      	ldr	r2, [pc, #524]	; (8004168 <loadMenuTexts+0x3cc>)
 8003f5c:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8003f5e:	4883      	ldr	r0, [pc, #524]	; (800416c <loadMenuTexts+0x3d0>)
 8003f60:	f7fc fcb4 	bl	80008cc <copyText>
 8003f64:	4603      	mov	r3, r0
 8003f66:	4a82      	ldr	r2, [pc, #520]	; (8004170 <loadMenuTexts+0x3d4>)
 8003f68:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8003f6a:	4882      	ldr	r0, [pc, #520]	; (8004174 <loadMenuTexts+0x3d8>)
 8003f6c:	f7fc fcae 	bl	80008cc <copyText>
 8003f70:	4603      	mov	r3, r0
 8003f72:	4a81      	ldr	r2, [pc, #516]	; (8004178 <loadMenuTexts+0x3dc>)
 8003f74:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8003f76:	4881      	ldr	r0, [pc, #516]	; (800417c <loadMenuTexts+0x3e0>)
 8003f78:	f7fc fca8 	bl	80008cc <copyText>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	4a80      	ldr	r2, [pc, #512]	; (8004180 <loadMenuTexts+0x3e4>)
 8003f80:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8003f82:	4880      	ldr	r0, [pc, #512]	; (8004184 <loadMenuTexts+0x3e8>)
 8003f84:	f7fc fca2 	bl	80008cc <copyText>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	4a7f      	ldr	r2, [pc, #508]	; (8004188 <loadMenuTexts+0x3ec>)
 8003f8c:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8003f8e:	487f      	ldr	r0, [pc, #508]	; (800418c <loadMenuTexts+0x3f0>)
 8003f90:	f7fc fc9c 	bl	80008cc <copyText>
 8003f94:	4603      	mov	r3, r0
 8003f96:	4a7e      	ldr	r2, [pc, #504]	; (8004190 <loadMenuTexts+0x3f4>)
 8003f98:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8003f9a:	487e      	ldr	r0, [pc, #504]	; (8004194 <loadMenuTexts+0x3f8>)
 8003f9c:	f7fc fc96 	bl	80008cc <copyText>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	4a7d      	ldr	r2, [pc, #500]	; (8004198 <loadMenuTexts+0x3fc>)
 8003fa4:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8003fa6:	487d      	ldr	r0, [pc, #500]	; (800419c <loadMenuTexts+0x400>)
 8003fa8:	f7fc fc90 	bl	80008cc <copyText>
 8003fac:	4603      	mov	r3, r0
 8003fae:	4a7c      	ldr	r2, [pc, #496]	; (80041a0 <loadMenuTexts+0x404>)
 8003fb0:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8003fb2:	487c      	ldr	r0, [pc, #496]	; (80041a4 <loadMenuTexts+0x408>)
 8003fb4:	f7fc fc8a 	bl	80008cc <copyText>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	4a7b      	ldr	r2, [pc, #492]	; (80041a8 <loadMenuTexts+0x40c>)
 8003fbc:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8003fbe:	487b      	ldr	r0, [pc, #492]	; (80041ac <loadMenuTexts+0x410>)
 8003fc0:	f7fc fc84 	bl	80008cc <copyText>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4a7a      	ldr	r2, [pc, #488]	; (80041b0 <loadMenuTexts+0x414>)
 8003fc8:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8003fca:	487a      	ldr	r0, [pc, #488]	; (80041b4 <loadMenuTexts+0x418>)
 8003fcc:	f7fc fc7e 	bl	80008cc <copyText>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	4a79      	ldr	r2, [pc, #484]	; (80041b8 <loadMenuTexts+0x41c>)
 8003fd4:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8003fd6:	4879      	ldr	r0, [pc, #484]	; (80041bc <loadMenuTexts+0x420>)
 8003fd8:	f7fc fc78 	bl	80008cc <copyText>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4a78      	ldr	r2, [pc, #480]	; (80041c0 <loadMenuTexts+0x424>)
 8003fe0:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8003fe2:	4878      	ldr	r0, [pc, #480]	; (80041c4 <loadMenuTexts+0x428>)
 8003fe4:	f7fc fc72 	bl	80008cc <copyText>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	4a77      	ldr	r2, [pc, #476]	; (80041c8 <loadMenuTexts+0x42c>)
 8003fec:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8003fee:	4877      	ldr	r0, [pc, #476]	; (80041cc <loadMenuTexts+0x430>)
 8003ff0:	f7fc fc6c 	bl	80008cc <copyText>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	4a76      	ldr	r2, [pc, #472]	; (80041d0 <loadMenuTexts+0x434>)
 8003ff8:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8003ffa:	4876      	ldr	r0, [pc, #472]	; (80041d4 <loadMenuTexts+0x438>)
 8003ffc:	f7fc fc66 	bl	80008cc <copyText>
 8004000:	4603      	mov	r3, r0
 8004002:	4a75      	ldr	r2, [pc, #468]	; (80041d8 <loadMenuTexts+0x43c>)
 8004004:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004006:	4875      	ldr	r0, [pc, #468]	; (80041dc <loadMenuTexts+0x440>)
 8004008:	f7fc fc60 	bl	80008cc <copyText>
 800400c:	4603      	mov	r3, r0
 800400e:	4a74      	ldr	r2, [pc, #464]	; (80041e0 <loadMenuTexts+0x444>)
 8004010:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004012:	4874      	ldr	r0, [pc, #464]	; (80041e4 <loadMenuTexts+0x448>)
 8004014:	f7fc fc5a 	bl	80008cc <copyText>
 8004018:	4603      	mov	r3, r0
 800401a:	4a73      	ldr	r2, [pc, #460]	; (80041e8 <loadMenuTexts+0x44c>)
 800401c:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 800401e:	4873      	ldr	r0, [pc, #460]	; (80041ec <loadMenuTexts+0x450>)
 8004020:	f7fc fc54 	bl	80008cc <copyText>
 8004024:	4603      	mov	r3, r0
 8004026:	4a72      	ldr	r2, [pc, #456]	; (80041f0 <loadMenuTexts+0x454>)
 8004028:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 800402a:	4872      	ldr	r0, [pc, #456]	; (80041f4 <loadMenuTexts+0x458>)
 800402c:	f7fc fc4e 	bl	80008cc <copyText>
 8004030:	4603      	mov	r3, r0
 8004032:	4a71      	ldr	r2, [pc, #452]	; (80041f8 <loadMenuTexts+0x45c>)
 8004034:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004036:	4871      	ldr	r0, [pc, #452]	; (80041fc <loadMenuTexts+0x460>)
 8004038:	f7fc fc48 	bl	80008cc <copyText>
 800403c:	4603      	mov	r3, r0
 800403e:	4a70      	ldr	r2, [pc, #448]	; (8004200 <loadMenuTexts+0x464>)
 8004040:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004042:	4870      	ldr	r0, [pc, #448]	; (8004204 <loadMenuTexts+0x468>)
 8004044:	f7fc fc42 	bl	80008cc <copyText>
 8004048:	4603      	mov	r3, r0
 800404a:	e0dd      	b.n	8004208 <loadMenuTexts+0x46c>
 800404c:	20000000 	.word	0x20000000
 8004050:	20000b90 	.word	0x20000b90
 8004054:	20000010 	.word	0x20000010
 8004058:	20000b94 	.word	0x20000b94
 800405c:	20000020 	.word	0x20000020
 8004060:	20000bec 	.word	0x20000bec
 8004064:	20000030 	.word	0x20000030
 8004068:	20000c1c 	.word	0x20000c1c
 800406c:	20000040 	.word	0x20000040
 8004070:	20000c24 	.word	0x20000c24
 8004074:	20000050 	.word	0x20000050
 8004078:	20000c9c 	.word	0x20000c9c
 800407c:	20000060 	.word	0x20000060
 8004080:	20000ca0 	.word	0x20000ca0
 8004084:	20000070 	.word	0x20000070
 8004088:	20000b98 	.word	0x20000b98
 800408c:	20000080 	.word	0x20000080
 8004090:	20000b9c 	.word	0x20000b9c
 8004094:	20000090 	.word	0x20000090
 8004098:	20000ba0 	.word	0x20000ba0
 800409c:	200000a0 	.word	0x200000a0
 80040a0:	20000ba4 	.word	0x20000ba4
 80040a4:	200000b0 	.word	0x200000b0
 80040a8:	20000ba8 	.word	0x20000ba8
 80040ac:	200000c0 	.word	0x200000c0
 80040b0:	20000bac 	.word	0x20000bac
 80040b4:	200000d0 	.word	0x200000d0
 80040b8:	20000bb0 	.word	0x20000bb0
 80040bc:	200000e0 	.word	0x200000e0
 80040c0:	20000bb4 	.word	0x20000bb4
 80040c4:	200000f0 	.word	0x200000f0
 80040c8:	20000bb8 	.word	0x20000bb8
 80040cc:	20000100 	.word	0x20000100
 80040d0:	20000bbc 	.word	0x20000bbc
 80040d4:	20000110 	.word	0x20000110
 80040d8:	20000bc0 	.word	0x20000bc0
 80040dc:	20000120 	.word	0x20000120
 80040e0:	20000bc4 	.word	0x20000bc4
 80040e4:	20000130 	.word	0x20000130
 80040e8:	20000bc8 	.word	0x20000bc8
 80040ec:	20000140 	.word	0x20000140
 80040f0:	20000bcc 	.word	0x20000bcc
 80040f4:	20000150 	.word	0x20000150
 80040f8:	20000bd0 	.word	0x20000bd0
 80040fc:	20000160 	.word	0x20000160
 8004100:	20000bd4 	.word	0x20000bd4
 8004104:	20000170 	.word	0x20000170
 8004108:	20000bd8 	.word	0x20000bd8
 800410c:	20000180 	.word	0x20000180
 8004110:	20000bdc 	.word	0x20000bdc
 8004114:	20000190 	.word	0x20000190
 8004118:	20000be0 	.word	0x20000be0
 800411c:	200001a0 	.word	0x200001a0
 8004120:	20000be4 	.word	0x20000be4
 8004124:	200001b0 	.word	0x200001b0
 8004128:	20000be8 	.word	0x20000be8
 800412c:	200001c0 	.word	0x200001c0
 8004130:	20000bf0 	.word	0x20000bf0
 8004134:	200001d0 	.word	0x200001d0
 8004138:	20000bf4 	.word	0x20000bf4
 800413c:	200001e0 	.word	0x200001e0
 8004140:	20000bf8 	.word	0x20000bf8
 8004144:	200001f0 	.word	0x200001f0
 8004148:	20000bfc 	.word	0x20000bfc
 800414c:	20000200 	.word	0x20000200
 8004150:	20000c00 	.word	0x20000c00
 8004154:	20000210 	.word	0x20000210
 8004158:	20000c04 	.word	0x20000c04
 800415c:	20000220 	.word	0x20000220
 8004160:	20000c08 	.word	0x20000c08
 8004164:	20000230 	.word	0x20000230
 8004168:	20000c0c 	.word	0x20000c0c
 800416c:	20000240 	.word	0x20000240
 8004170:	20000c10 	.word	0x20000c10
 8004174:	20000250 	.word	0x20000250
 8004178:	20000c14 	.word	0x20000c14
 800417c:	20000260 	.word	0x20000260
 8004180:	20000c18 	.word	0x20000c18
 8004184:	20000270 	.word	0x20000270
 8004188:	20000c20 	.word	0x20000c20
 800418c:	20000280 	.word	0x20000280
 8004190:	20000c28 	.word	0x20000c28
 8004194:	20000290 	.word	0x20000290
 8004198:	20000c2c 	.word	0x20000c2c
 800419c:	200002a0 	.word	0x200002a0
 80041a0:	20000c30 	.word	0x20000c30
 80041a4:	200002b0 	.word	0x200002b0
 80041a8:	20000c34 	.word	0x20000c34
 80041ac:	200002c0 	.word	0x200002c0
 80041b0:	20000c38 	.word	0x20000c38
 80041b4:	200002d0 	.word	0x200002d0
 80041b8:	20000c3c 	.word	0x20000c3c
 80041bc:	200002e0 	.word	0x200002e0
 80041c0:	20000c40 	.word	0x20000c40
 80041c4:	200002f0 	.word	0x200002f0
 80041c8:	20000c44 	.word	0x20000c44
 80041cc:	20000300 	.word	0x20000300
 80041d0:	20000c48 	.word	0x20000c48
 80041d4:	20000310 	.word	0x20000310
 80041d8:	20000c4c 	.word	0x20000c4c
 80041dc:	20000320 	.word	0x20000320
 80041e0:	20000c50 	.word	0x20000c50
 80041e4:	20000330 	.word	0x20000330
 80041e8:	20000c54 	.word	0x20000c54
 80041ec:	20000340 	.word	0x20000340
 80041f0:	20000c58 	.word	0x20000c58
 80041f4:	20000350 	.word	0x20000350
 80041f8:	20000c5c 	.word	0x20000c5c
 80041fc:	20000360 	.word	0x20000360
 8004200:	20000c60 	.word	0x20000c60
 8004204:	20000370 	.word	0x20000370
 8004208:	4a3d      	ldr	r2, [pc, #244]	; (8004300 <loadMenuTexts+0x564>)
 800420a:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 800420c:	483d      	ldr	r0, [pc, #244]	; (8004304 <loadMenuTexts+0x568>)
 800420e:	f7fc fb5d 	bl	80008cc <copyText>
 8004212:	4603      	mov	r3, r0
 8004214:	4a3c      	ldr	r2, [pc, #240]	; (8004308 <loadMenuTexts+0x56c>)
 8004216:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8004218:	483c      	ldr	r0, [pc, #240]	; (800430c <loadMenuTexts+0x570>)
 800421a:	f7fc fb57 	bl	80008cc <copyText>
 800421e:	4603      	mov	r3, r0
 8004220:	4a3b      	ldr	r2, [pc, #236]	; (8004310 <loadMenuTexts+0x574>)
 8004222:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8004224:	483b      	ldr	r0, [pc, #236]	; (8004314 <loadMenuTexts+0x578>)
 8004226:	f7fc fb51 	bl	80008cc <copyText>
 800422a:	4603      	mov	r3, r0
 800422c:	4a3a      	ldr	r2, [pc, #232]	; (8004318 <loadMenuTexts+0x57c>)
 800422e:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8004230:	483a      	ldr	r0, [pc, #232]	; (800431c <loadMenuTexts+0x580>)
 8004232:	f7fc fb4b 	bl	80008cc <copyText>
 8004236:	4603      	mov	r3, r0
 8004238:	4a39      	ldr	r2, [pc, #228]	; (8004320 <loadMenuTexts+0x584>)
 800423a:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 800423c:	4839      	ldr	r0, [pc, #228]	; (8004324 <loadMenuTexts+0x588>)
 800423e:	f7fc fb45 	bl	80008cc <copyText>
 8004242:	4603      	mov	r3, r0
 8004244:	4a38      	ldr	r2, [pc, #224]	; (8004328 <loadMenuTexts+0x58c>)
 8004246:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8004248:	4838      	ldr	r0, [pc, #224]	; (800432c <loadMenuTexts+0x590>)
 800424a:	f7fc fb3f 	bl	80008cc <copyText>
 800424e:	4603      	mov	r3, r0
 8004250:	4a37      	ldr	r2, [pc, #220]	; (8004330 <loadMenuTexts+0x594>)
 8004252:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8004254:	4837      	ldr	r0, [pc, #220]	; (8004334 <loadMenuTexts+0x598>)
 8004256:	f7fc fb39 	bl	80008cc <copyText>
 800425a:	4603      	mov	r3, r0
 800425c:	4a36      	ldr	r2, [pc, #216]	; (8004338 <loadMenuTexts+0x59c>)
 800425e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8004260:	4836      	ldr	r0, [pc, #216]	; (800433c <loadMenuTexts+0x5a0>)
 8004262:	f7fc fb33 	bl	80008cc <copyText>
 8004266:	4603      	mov	r3, r0
 8004268:	4a35      	ldr	r2, [pc, #212]	; (8004340 <loadMenuTexts+0x5a4>)
 800426a:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 800426c:	4835      	ldr	r0, [pc, #212]	; (8004344 <loadMenuTexts+0x5a8>)
 800426e:	f7fc fb2d 	bl	80008cc <copyText>
 8004272:	4603      	mov	r3, r0
 8004274:	4a34      	ldr	r2, [pc, #208]	; (8004348 <loadMenuTexts+0x5ac>)
 8004276:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8004278:	4834      	ldr	r0, [pc, #208]	; (800434c <loadMenuTexts+0x5b0>)
 800427a:	f7fc fb27 	bl	80008cc <copyText>
 800427e:	4603      	mov	r3, r0
 8004280:	4a33      	ldr	r2, [pc, #204]	; (8004350 <loadMenuTexts+0x5b4>)
 8004282:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8004284:	4833      	ldr	r0, [pc, #204]	; (8004354 <loadMenuTexts+0x5b8>)
 8004286:	f7fc fb21 	bl	80008cc <copyText>
 800428a:	4603      	mov	r3, r0
 800428c:	4a32      	ldr	r2, [pc, #200]	; (8004358 <loadMenuTexts+0x5bc>)
 800428e:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8004290:	4832      	ldr	r0, [pc, #200]	; (800435c <loadMenuTexts+0x5c0>)
 8004292:	f7fc fb1b 	bl	80008cc <copyText>
 8004296:	4603      	mov	r3, r0
 8004298:	4a31      	ldr	r2, [pc, #196]	; (8004360 <loadMenuTexts+0x5c4>)
 800429a:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 800429c:	4831      	ldr	r0, [pc, #196]	; (8004364 <loadMenuTexts+0x5c8>)
 800429e:	f7fc fb15 	bl	80008cc <copyText>
 80042a2:	4603      	mov	r3, r0
 80042a4:	4a30      	ldr	r2, [pc, #192]	; (8004368 <loadMenuTexts+0x5cc>)
 80042a6:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 80042a8:	4830      	ldr	r0, [pc, #192]	; (800436c <loadMenuTexts+0x5d0>)
 80042aa:	f7fc fb0f 	bl	80008cc <copyText>
 80042ae:	4603      	mov	r3, r0
 80042b0:	4a2f      	ldr	r2, [pc, #188]	; (8004370 <loadMenuTexts+0x5d4>)
 80042b2:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 80042b4:	482f      	ldr	r0, [pc, #188]	; (8004374 <loadMenuTexts+0x5d8>)
 80042b6:	f7fc fb09 	bl	80008cc <copyText>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4a2e      	ldr	r2, [pc, #184]	; (8004378 <loadMenuTexts+0x5dc>)
 80042be:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 80042c0:	482e      	ldr	r0, [pc, #184]	; (800437c <loadMenuTexts+0x5e0>)
 80042c2:	f7fc fb03 	bl	80008cc <copyText>
 80042c6:	4603      	mov	r3, r0
 80042c8:	4a2d      	ldr	r2, [pc, #180]	; (8004380 <loadMenuTexts+0x5e4>)
 80042ca:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 80042cc:	482d      	ldr	r0, [pc, #180]	; (8004384 <loadMenuTexts+0x5e8>)
 80042ce:	f7fc fafd 	bl	80008cc <copyText>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4a2c      	ldr	r2, [pc, #176]	; (8004388 <loadMenuTexts+0x5ec>)
 80042d6:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 80042d8:	482c      	ldr	r0, [pc, #176]	; (800438c <loadMenuTexts+0x5f0>)
 80042da:	f7fc faf7 	bl	80008cc <copyText>
 80042de:	4603      	mov	r3, r0
 80042e0:	4a2b      	ldr	r2, [pc, #172]	; (8004390 <loadMenuTexts+0x5f4>)
 80042e2:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 80042e4:	482b      	ldr	r0, [pc, #172]	; (8004394 <loadMenuTexts+0x5f8>)
 80042e6:	f7fc faf1 	bl	80008cc <copyText>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <loadMenuTexts+0x5fc>)
 80042ee:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 80042f0:	482a      	ldr	r0, [pc, #168]	; (800439c <loadMenuTexts+0x600>)
 80042f2:	f7fc faeb 	bl	80008cc <copyText>
 80042f6:	4603      	mov	r3, r0
 80042f8:	4a29      	ldr	r2, [pc, #164]	; (80043a0 <loadMenuTexts+0x604>)
 80042fa:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 80042fc:	e2d3      	b.n	80048a6 <loadMenuTexts+0xb0a>
 80042fe:	bf00      	nop
 8004300:	20000c64 	.word	0x20000c64
 8004304:	20000380 	.word	0x20000380
 8004308:	20000c68 	.word	0x20000c68
 800430c:	20000390 	.word	0x20000390
 8004310:	20000c6c 	.word	0x20000c6c
 8004314:	200003a0 	.word	0x200003a0
 8004318:	20000c70 	.word	0x20000c70
 800431c:	200003b0 	.word	0x200003b0
 8004320:	20000c74 	.word	0x20000c74
 8004324:	200003c0 	.word	0x200003c0
 8004328:	20000c78 	.word	0x20000c78
 800432c:	200003d0 	.word	0x200003d0
 8004330:	20000c7c 	.word	0x20000c7c
 8004334:	200003e0 	.word	0x200003e0
 8004338:	20000c80 	.word	0x20000c80
 800433c:	200003f0 	.word	0x200003f0
 8004340:	20000c84 	.word	0x20000c84
 8004344:	20000400 	.word	0x20000400
 8004348:	20000c88 	.word	0x20000c88
 800434c:	20000410 	.word	0x20000410
 8004350:	20000c8c 	.word	0x20000c8c
 8004354:	20000420 	.word	0x20000420
 8004358:	20000c90 	.word	0x20000c90
 800435c:	20000430 	.word	0x20000430
 8004360:	20000c94 	.word	0x20000c94
 8004364:	20000440 	.word	0x20000440
 8004368:	20000c98 	.word	0x20000c98
 800436c:	20000450 	.word	0x20000450
 8004370:	20000ca4 	.word	0x20000ca4
 8004374:	20000460 	.word	0x20000460
 8004378:	20000ca8 	.word	0x20000ca8
 800437c:	20000470 	.word	0x20000470
 8004380:	20000cac 	.word	0x20000cac
 8004384:	20000480 	.word	0x20000480
 8004388:	20000cb0 	.word	0x20000cb0
 800438c:	20000490 	.word	0x20000490
 8004390:	20000cb4 	.word	0x20000cb4
 8004394:	200004a0 	.word	0x200004a0
 8004398:	20000cb8 	.word	0x20000cb8
 800439c:	200004b0 	.word	0x200004b0
 80043a0:	20000cbc 	.word	0x20000cbc
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 80043a4:	48a9      	ldr	r0, [pc, #676]	; (800464c <loadMenuTexts+0x8b0>)
 80043a6:	f7fc fa91 	bl	80008cc <copyText>
 80043aa:	4603      	mov	r3, r0
 80043ac:	4aa8      	ldr	r2, [pc, #672]	; (8004650 <loadMenuTexts+0x8b4>)
 80043ae:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 80043b0:	48a8      	ldr	r0, [pc, #672]	; (8004654 <loadMenuTexts+0x8b8>)
 80043b2:	f7fc fa8b 	bl	80008cc <copyText>
 80043b6:	4603      	mov	r3, r0
 80043b8:	4aa7      	ldr	r2, [pc, #668]	; (8004658 <loadMenuTexts+0x8bc>)
 80043ba:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 80043bc:	48a7      	ldr	r0, [pc, #668]	; (800465c <loadMenuTexts+0x8c0>)
 80043be:	f7fc fa85 	bl	80008cc <copyText>
 80043c2:	4603      	mov	r3, r0
 80043c4:	4aa6      	ldr	r2, [pc, #664]	; (8004660 <loadMenuTexts+0x8c4>)
 80043c6:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 80043c8:	48a6      	ldr	r0, [pc, #664]	; (8004664 <loadMenuTexts+0x8c8>)
 80043ca:	f7fc fa7f 	bl	80008cc <copyText>
 80043ce:	4603      	mov	r3, r0
 80043d0:	4aa5      	ldr	r2, [pc, #660]	; (8004668 <loadMenuTexts+0x8cc>)
 80043d2:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 80043d4:	48a5      	ldr	r0, [pc, #660]	; (800466c <loadMenuTexts+0x8d0>)
 80043d6:	f7fc fa79 	bl	80008cc <copyText>
 80043da:	4603      	mov	r3, r0
 80043dc:	4aa4      	ldr	r2, [pc, #656]	; (8004670 <loadMenuTexts+0x8d4>)
 80043de:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 80043e0:	48a4      	ldr	r0, [pc, #656]	; (8004674 <loadMenuTexts+0x8d8>)
 80043e2:	f7fc fa73 	bl	80008cc <copyText>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4aa3      	ldr	r2, [pc, #652]	; (8004678 <loadMenuTexts+0x8dc>)
 80043ea:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 80043ec:	48a3      	ldr	r0, [pc, #652]	; (800467c <loadMenuTexts+0x8e0>)
 80043ee:	f7fc fa6d 	bl	80008cc <copyText>
 80043f2:	4603      	mov	r3, r0
 80043f4:	4aa2      	ldr	r2, [pc, #648]	; (8004680 <loadMenuTexts+0x8e4>)
 80043f6:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 80043f8:	48a2      	ldr	r0, [pc, #648]	; (8004684 <loadMenuTexts+0x8e8>)
 80043fa:	f7fc fa67 	bl	80008cc <copyText>
 80043fe:	4603      	mov	r3, r0
 8004400:	4aa1      	ldr	r2, [pc, #644]	; (8004688 <loadMenuTexts+0x8ec>)
 8004402:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8004404:	48a1      	ldr	r0, [pc, #644]	; (800468c <loadMenuTexts+0x8f0>)
 8004406:	f7fc fa61 	bl	80008cc <copyText>
 800440a:	4603      	mov	r3, r0
 800440c:	4aa0      	ldr	r2, [pc, #640]	; (8004690 <loadMenuTexts+0x8f4>)
 800440e:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8004410:	48a0      	ldr	r0, [pc, #640]	; (8004694 <loadMenuTexts+0x8f8>)
 8004412:	f7fc fa5b 	bl	80008cc <copyText>
 8004416:	4603      	mov	r3, r0
 8004418:	4a9f      	ldr	r2, [pc, #636]	; (8004698 <loadMenuTexts+0x8fc>)
 800441a:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 800441c:	489f      	ldr	r0, [pc, #636]	; (800469c <loadMenuTexts+0x900>)
 800441e:	f7fc fa55 	bl	80008cc <copyText>
 8004422:	4603      	mov	r3, r0
 8004424:	4a9e      	ldr	r2, [pc, #632]	; (80046a0 <loadMenuTexts+0x904>)
 8004426:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8004428:	489e      	ldr	r0, [pc, #632]	; (80046a4 <loadMenuTexts+0x908>)
 800442a:	f7fc fa4f 	bl	80008cc <copyText>
 800442e:	4603      	mov	r3, r0
 8004430:	4a9d      	ldr	r2, [pc, #628]	; (80046a8 <loadMenuTexts+0x90c>)
 8004432:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8004434:	489d      	ldr	r0, [pc, #628]	; (80046ac <loadMenuTexts+0x910>)
 8004436:	f7fc fa49 	bl	80008cc <copyText>
 800443a:	4603      	mov	r3, r0
 800443c:	4a9c      	ldr	r2, [pc, #624]	; (80046b0 <loadMenuTexts+0x914>)
 800443e:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8004440:	489c      	ldr	r0, [pc, #624]	; (80046b4 <loadMenuTexts+0x918>)
 8004442:	f7fc fa43 	bl	80008cc <copyText>
 8004446:	4603      	mov	r3, r0
 8004448:	4a9b      	ldr	r2, [pc, #620]	; (80046b8 <loadMenuTexts+0x91c>)
 800444a:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 800444c:	489b      	ldr	r0, [pc, #620]	; (80046bc <loadMenuTexts+0x920>)
 800444e:	f7fc fa3d 	bl	80008cc <copyText>
 8004452:	4603      	mov	r3, r0
 8004454:	4a9a      	ldr	r2, [pc, #616]	; (80046c0 <loadMenuTexts+0x924>)
 8004456:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8004458:	489a      	ldr	r0, [pc, #616]	; (80046c4 <loadMenuTexts+0x928>)
 800445a:	f7fc fa37 	bl	80008cc <copyText>
 800445e:	4603      	mov	r3, r0
 8004460:	4a99      	ldr	r2, [pc, #612]	; (80046c8 <loadMenuTexts+0x92c>)
 8004462:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8004464:	4899      	ldr	r0, [pc, #612]	; (80046cc <loadMenuTexts+0x930>)
 8004466:	f7fc fa31 	bl	80008cc <copyText>
 800446a:	4603      	mov	r3, r0
 800446c:	4a98      	ldr	r2, [pc, #608]	; (80046d0 <loadMenuTexts+0x934>)
 800446e:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8004470:	4898      	ldr	r0, [pc, #608]	; (80046d4 <loadMenuTexts+0x938>)
 8004472:	f7fc fa2b 	bl	80008cc <copyText>
 8004476:	4603      	mov	r3, r0
 8004478:	4a97      	ldr	r2, [pc, #604]	; (80046d8 <loadMenuTexts+0x93c>)
 800447a:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 800447c:	4897      	ldr	r0, [pc, #604]	; (80046dc <loadMenuTexts+0x940>)
 800447e:	f7fc fa25 	bl	80008cc <copyText>
 8004482:	4603      	mov	r3, r0
 8004484:	4a96      	ldr	r2, [pc, #600]	; (80046e0 <loadMenuTexts+0x944>)
 8004486:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8004488:	4896      	ldr	r0, [pc, #600]	; (80046e4 <loadMenuTexts+0x948>)
 800448a:	f7fc fa1f 	bl	80008cc <copyText>
 800448e:	4603      	mov	r3, r0
 8004490:	4a95      	ldr	r2, [pc, #596]	; (80046e8 <loadMenuTexts+0x94c>)
 8004492:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8004494:	4895      	ldr	r0, [pc, #596]	; (80046ec <loadMenuTexts+0x950>)
 8004496:	f7fc fa19 	bl	80008cc <copyText>
 800449a:	4603      	mov	r3, r0
 800449c:	4a94      	ldr	r2, [pc, #592]	; (80046f0 <loadMenuTexts+0x954>)
 800449e:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 80044a0:	4894      	ldr	r0, [pc, #592]	; (80046f4 <loadMenuTexts+0x958>)
 80044a2:	f7fc fa13 	bl	80008cc <copyText>
 80044a6:	4603      	mov	r3, r0
 80044a8:	4a93      	ldr	r2, [pc, #588]	; (80046f8 <loadMenuTexts+0x95c>)
 80044aa:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 80044ac:	4893      	ldr	r0, [pc, #588]	; (80046fc <loadMenuTexts+0x960>)
 80044ae:	f7fc fa0d 	bl	80008cc <copyText>
 80044b2:	4603      	mov	r3, r0
 80044b4:	4a92      	ldr	r2, [pc, #584]	; (8004700 <loadMenuTexts+0x964>)
 80044b6:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 80044b8:	4892      	ldr	r0, [pc, #584]	; (8004704 <loadMenuTexts+0x968>)
 80044ba:	f7fc fa07 	bl	80008cc <copyText>
 80044be:	4603      	mov	r3, r0
 80044c0:	4a91      	ldr	r2, [pc, #580]	; (8004708 <loadMenuTexts+0x96c>)
 80044c2:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 80044c4:	4891      	ldr	r0, [pc, #580]	; (800470c <loadMenuTexts+0x970>)
 80044c6:	f7fc fa01 	bl	80008cc <copyText>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4a90      	ldr	r2, [pc, #576]	; (8004710 <loadMenuTexts+0x974>)
 80044ce:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 80044d0:	4890      	ldr	r0, [pc, #576]	; (8004714 <loadMenuTexts+0x978>)
 80044d2:	f7fc f9fb 	bl	80008cc <copyText>
 80044d6:	4603      	mov	r3, r0
 80044d8:	4a8f      	ldr	r2, [pc, #572]	; (8004718 <loadMenuTexts+0x97c>)
 80044da:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 80044dc:	488f      	ldr	r0, [pc, #572]	; (800471c <loadMenuTexts+0x980>)
 80044de:	f7fc f9f5 	bl	80008cc <copyText>
 80044e2:	4603      	mov	r3, r0
 80044e4:	4a8e      	ldr	r2, [pc, #568]	; (8004720 <loadMenuTexts+0x984>)
 80044e6:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 80044e8:	488e      	ldr	r0, [pc, #568]	; (8004724 <loadMenuTexts+0x988>)
 80044ea:	f7fc f9ef 	bl	80008cc <copyText>
 80044ee:	4603      	mov	r3, r0
 80044f0:	4a8d      	ldr	r2, [pc, #564]	; (8004728 <loadMenuTexts+0x98c>)
 80044f2:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 80044f4:	488d      	ldr	r0, [pc, #564]	; (800472c <loadMenuTexts+0x990>)
 80044f6:	f7fc f9e9 	bl	80008cc <copyText>
 80044fa:	4603      	mov	r3, r0
 80044fc:	4a8c      	ldr	r2, [pc, #560]	; (8004730 <loadMenuTexts+0x994>)
 80044fe:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8004500:	488c      	ldr	r0, [pc, #560]	; (8004734 <loadMenuTexts+0x998>)
 8004502:	f7fc f9e3 	bl	80008cc <copyText>
 8004506:	4603      	mov	r3, r0
 8004508:	4a8b      	ldr	r2, [pc, #556]	; (8004738 <loadMenuTexts+0x99c>)
 800450a:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 800450c:	488b      	ldr	r0, [pc, #556]	; (800473c <loadMenuTexts+0x9a0>)
 800450e:	f7fc f9dd 	bl	80008cc <copyText>
 8004512:	4603      	mov	r3, r0
 8004514:	4a8a      	ldr	r2, [pc, #552]	; (8004740 <loadMenuTexts+0x9a4>)
 8004516:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8004518:	488a      	ldr	r0, [pc, #552]	; (8004744 <loadMenuTexts+0x9a8>)
 800451a:	f7fc f9d7 	bl	80008cc <copyText>
 800451e:	4603      	mov	r3, r0
 8004520:	4a89      	ldr	r2, [pc, #548]	; (8004748 <loadMenuTexts+0x9ac>)
 8004522:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8004524:	4889      	ldr	r0, [pc, #548]	; (800474c <loadMenuTexts+0x9b0>)
 8004526:	f7fc f9d1 	bl	80008cc <copyText>
 800452a:	4603      	mov	r3, r0
 800452c:	4a88      	ldr	r2, [pc, #544]	; (8004750 <loadMenuTexts+0x9b4>)
 800452e:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8004530:	4888      	ldr	r0, [pc, #544]	; (8004754 <loadMenuTexts+0x9b8>)
 8004532:	f7fc f9cb 	bl	80008cc <copyText>
 8004536:	4603      	mov	r3, r0
 8004538:	4a87      	ldr	r2, [pc, #540]	; (8004758 <loadMenuTexts+0x9bc>)
 800453a:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 800453c:	4887      	ldr	r0, [pc, #540]	; (800475c <loadMenuTexts+0x9c0>)
 800453e:	f7fc f9c5 	bl	80008cc <copyText>
 8004542:	4603      	mov	r3, r0
 8004544:	4a86      	ldr	r2, [pc, #536]	; (8004760 <loadMenuTexts+0x9c4>)
 8004546:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8004548:	4886      	ldr	r0, [pc, #536]	; (8004764 <loadMenuTexts+0x9c8>)
 800454a:	f7fc f9bf 	bl	80008cc <copyText>
 800454e:	4603      	mov	r3, r0
 8004550:	4a85      	ldr	r2, [pc, #532]	; (8004768 <loadMenuTexts+0x9cc>)
 8004552:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8004554:	4885      	ldr	r0, [pc, #532]	; (800476c <loadMenuTexts+0x9d0>)
 8004556:	f7fc f9b9 	bl	80008cc <copyText>
 800455a:	4603      	mov	r3, r0
 800455c:	4a84      	ldr	r2, [pc, #528]	; (8004770 <loadMenuTexts+0x9d4>)
 800455e:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8004560:	4884      	ldr	r0, [pc, #528]	; (8004774 <loadMenuTexts+0x9d8>)
 8004562:	f7fc f9b3 	bl	80008cc <copyText>
 8004566:	4603      	mov	r3, r0
 8004568:	4a83      	ldr	r2, [pc, #524]	; (8004778 <loadMenuTexts+0x9dc>)
 800456a:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 800456c:	4883      	ldr	r0, [pc, #524]	; (800477c <loadMenuTexts+0x9e0>)
 800456e:	f7fc f9ad 	bl	80008cc <copyText>
 8004572:	4603      	mov	r3, r0
 8004574:	4a82      	ldr	r2, [pc, #520]	; (8004780 <loadMenuTexts+0x9e4>)
 8004576:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8004578:	4882      	ldr	r0, [pc, #520]	; (8004784 <loadMenuTexts+0x9e8>)
 800457a:	f7fc f9a7 	bl	80008cc <copyText>
 800457e:	4603      	mov	r3, r0
 8004580:	4a81      	ldr	r2, [pc, #516]	; (8004788 <loadMenuTexts+0x9ec>)
 8004582:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8004584:	4881      	ldr	r0, [pc, #516]	; (800478c <loadMenuTexts+0x9f0>)
 8004586:	f7fc f9a1 	bl	80008cc <copyText>
 800458a:	4603      	mov	r3, r0
 800458c:	4a80      	ldr	r2, [pc, #512]	; (8004790 <loadMenuTexts+0x9f4>)
 800458e:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8004590:	4880      	ldr	r0, [pc, #512]	; (8004794 <loadMenuTexts+0x9f8>)
 8004592:	f7fc f99b 	bl	80008cc <copyText>
 8004596:	4603      	mov	r3, r0
 8004598:	4a7f      	ldr	r2, [pc, #508]	; (8004798 <loadMenuTexts+0x9fc>)
 800459a:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 800459c:	487f      	ldr	r0, [pc, #508]	; (800479c <loadMenuTexts+0xa00>)
 800459e:	f7fc f995 	bl	80008cc <copyText>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4a7e      	ldr	r2, [pc, #504]	; (80047a0 <loadMenuTexts+0xa04>)
 80045a6:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80045a8:	487e      	ldr	r0, [pc, #504]	; (80047a4 <loadMenuTexts+0xa08>)
 80045aa:	f7fc f98f 	bl	80008cc <copyText>
 80045ae:	4603      	mov	r3, r0
 80045b0:	4a7d      	ldr	r2, [pc, #500]	; (80047a8 <loadMenuTexts+0xa0c>)
 80045b2:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80045b4:	487d      	ldr	r0, [pc, #500]	; (80047ac <loadMenuTexts+0xa10>)
 80045b6:	f7fc f989 	bl	80008cc <copyText>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4a7c      	ldr	r2, [pc, #496]	; (80047b0 <loadMenuTexts+0xa14>)
 80045be:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 80045c0:	487c      	ldr	r0, [pc, #496]	; (80047b4 <loadMenuTexts+0xa18>)
 80045c2:	f7fc f983 	bl	80008cc <copyText>
 80045c6:	4603      	mov	r3, r0
 80045c8:	4a7b      	ldr	r2, [pc, #492]	; (80047b8 <loadMenuTexts+0xa1c>)
 80045ca:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 80045cc:	487b      	ldr	r0, [pc, #492]	; (80047bc <loadMenuTexts+0xa20>)
 80045ce:	f7fc f97d 	bl	80008cc <copyText>
 80045d2:	4603      	mov	r3, r0
 80045d4:	4a7a      	ldr	r2, [pc, #488]	; (80047c0 <loadMenuTexts+0xa24>)
 80045d6:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 80045d8:	487a      	ldr	r0, [pc, #488]	; (80047c4 <loadMenuTexts+0xa28>)
 80045da:	f7fc f977 	bl	80008cc <copyText>
 80045de:	4603      	mov	r3, r0
 80045e0:	4a79      	ldr	r2, [pc, #484]	; (80047c8 <loadMenuTexts+0xa2c>)
 80045e2:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 80045e4:	4879      	ldr	r0, [pc, #484]	; (80047cc <loadMenuTexts+0xa30>)
 80045e6:	f7fc f971 	bl	80008cc <copyText>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4a78      	ldr	r2, [pc, #480]	; (80047d0 <loadMenuTexts+0xa34>)
 80045ee:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 80045f0:	4878      	ldr	r0, [pc, #480]	; (80047d4 <loadMenuTexts+0xa38>)
 80045f2:	f7fc f96b 	bl	80008cc <copyText>
 80045f6:	4603      	mov	r3, r0
 80045f8:	4a77      	ldr	r2, [pc, #476]	; (80047d8 <loadMenuTexts+0xa3c>)
 80045fa:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 80045fc:	4877      	ldr	r0, [pc, #476]	; (80047dc <loadMenuTexts+0xa40>)
 80045fe:	f7fc f965 	bl	80008cc <copyText>
 8004602:	4603      	mov	r3, r0
 8004604:	4a76      	ldr	r2, [pc, #472]	; (80047e0 <loadMenuTexts+0xa44>)
 8004606:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8004608:	4876      	ldr	r0, [pc, #472]	; (80047e4 <loadMenuTexts+0xa48>)
 800460a:	f7fc f95f 	bl	80008cc <copyText>
 800460e:	4603      	mov	r3, r0
 8004610:	4a75      	ldr	r2, [pc, #468]	; (80047e8 <loadMenuTexts+0xa4c>)
 8004612:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8004614:	4875      	ldr	r0, [pc, #468]	; (80047ec <loadMenuTexts+0xa50>)
 8004616:	f7fc f959 	bl	80008cc <copyText>
 800461a:	4603      	mov	r3, r0
 800461c:	4a74      	ldr	r2, [pc, #464]	; (80047f0 <loadMenuTexts+0xa54>)
 800461e:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8004620:	4874      	ldr	r0, [pc, #464]	; (80047f4 <loadMenuTexts+0xa58>)
 8004622:	f7fc f953 	bl	80008cc <copyText>
 8004626:	4603      	mov	r3, r0
 8004628:	4a73      	ldr	r2, [pc, #460]	; (80047f8 <loadMenuTexts+0xa5c>)
 800462a:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 800462c:	4873      	ldr	r0, [pc, #460]	; (80047fc <loadMenuTexts+0xa60>)
 800462e:	f7fc f94d 	bl	80008cc <copyText>
 8004632:	4603      	mov	r3, r0
 8004634:	4a72      	ldr	r2, [pc, #456]	; (8004800 <loadMenuTexts+0xa64>)
 8004636:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8004638:	4872      	ldr	r0, [pc, #456]	; (8004804 <loadMenuTexts+0xa68>)
 800463a:	f7fc f947 	bl	80008cc <copyText>
 800463e:	4603      	mov	r3, r0
 8004640:	4a71      	ldr	r2, [pc, #452]	; (8004808 <loadMenuTexts+0xa6c>)
 8004642:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8004644:	4871      	ldr	r0, [pc, #452]	; (800480c <loadMenuTexts+0xa70>)
 8004646:	f7fc f941 	bl	80008cc <copyText>
 800464a:	e0e1      	b.n	8004810 <loadMenuTexts+0xa74>
 800464c:	200004c0 	.word	0x200004c0
 8004650:	20000b98 	.word	0x20000b98
 8004654:	200004d0 	.word	0x200004d0
 8004658:	20000b9c 	.word	0x20000b9c
 800465c:	200004e0 	.word	0x200004e0
 8004660:	20000ba0 	.word	0x20000ba0
 8004664:	200004f0 	.word	0x200004f0
 8004668:	20000ba4 	.word	0x20000ba4
 800466c:	20000500 	.word	0x20000500
 8004670:	20000ba8 	.word	0x20000ba8
 8004674:	20000510 	.word	0x20000510
 8004678:	20000bac 	.word	0x20000bac
 800467c:	20000520 	.word	0x20000520
 8004680:	20000bb0 	.word	0x20000bb0
 8004684:	20000530 	.word	0x20000530
 8004688:	20000bb4 	.word	0x20000bb4
 800468c:	20000540 	.word	0x20000540
 8004690:	20000bb8 	.word	0x20000bb8
 8004694:	20000550 	.word	0x20000550
 8004698:	20000bbc 	.word	0x20000bbc
 800469c:	20000560 	.word	0x20000560
 80046a0:	20000bc0 	.word	0x20000bc0
 80046a4:	20000570 	.word	0x20000570
 80046a8:	20000bc4 	.word	0x20000bc4
 80046ac:	20000580 	.word	0x20000580
 80046b0:	20000bc8 	.word	0x20000bc8
 80046b4:	20000590 	.word	0x20000590
 80046b8:	20000bcc 	.word	0x20000bcc
 80046bc:	200005a0 	.word	0x200005a0
 80046c0:	20000bd0 	.word	0x20000bd0
 80046c4:	200005b0 	.word	0x200005b0
 80046c8:	20000bd4 	.word	0x20000bd4
 80046cc:	200005c0 	.word	0x200005c0
 80046d0:	20000bd8 	.word	0x20000bd8
 80046d4:	200005d0 	.word	0x200005d0
 80046d8:	20000bdc 	.word	0x20000bdc
 80046dc:	200005e0 	.word	0x200005e0
 80046e0:	20000be0 	.word	0x20000be0
 80046e4:	200005f0 	.word	0x200005f0
 80046e8:	20000be4 	.word	0x20000be4
 80046ec:	20000600 	.word	0x20000600
 80046f0:	20000be8 	.word	0x20000be8
 80046f4:	20000610 	.word	0x20000610
 80046f8:	20000bf0 	.word	0x20000bf0
 80046fc:	20000620 	.word	0x20000620
 8004700:	20000bf4 	.word	0x20000bf4
 8004704:	20000630 	.word	0x20000630
 8004708:	20000bf8 	.word	0x20000bf8
 800470c:	20000640 	.word	0x20000640
 8004710:	20000bfc 	.word	0x20000bfc
 8004714:	20000650 	.word	0x20000650
 8004718:	20000c00 	.word	0x20000c00
 800471c:	20000660 	.word	0x20000660
 8004720:	20000c04 	.word	0x20000c04
 8004724:	20000670 	.word	0x20000670
 8004728:	20000c08 	.word	0x20000c08
 800472c:	20000680 	.word	0x20000680
 8004730:	20000c0c 	.word	0x20000c0c
 8004734:	20000690 	.word	0x20000690
 8004738:	20000c10 	.word	0x20000c10
 800473c:	200006a0 	.word	0x200006a0
 8004740:	20000c14 	.word	0x20000c14
 8004744:	200006b0 	.word	0x200006b0
 8004748:	20000c18 	.word	0x20000c18
 800474c:	200006c0 	.word	0x200006c0
 8004750:	20000c20 	.word	0x20000c20
 8004754:	200006d0 	.word	0x200006d0
 8004758:	20000c28 	.word	0x20000c28
 800475c:	200006e0 	.word	0x200006e0
 8004760:	20000c2c 	.word	0x20000c2c
 8004764:	200006f0 	.word	0x200006f0
 8004768:	20000c30 	.word	0x20000c30
 800476c:	20000700 	.word	0x20000700
 8004770:	20000c34 	.word	0x20000c34
 8004774:	20000710 	.word	0x20000710
 8004778:	20000c38 	.word	0x20000c38
 800477c:	20000720 	.word	0x20000720
 8004780:	20000c3c 	.word	0x20000c3c
 8004784:	20000730 	.word	0x20000730
 8004788:	20000c40 	.word	0x20000c40
 800478c:	20000740 	.word	0x20000740
 8004790:	20000c44 	.word	0x20000c44
 8004794:	20000750 	.word	0x20000750
 8004798:	20000c48 	.word	0x20000c48
 800479c:	20000760 	.word	0x20000760
 80047a0:	20000c4c 	.word	0x20000c4c
 80047a4:	20000770 	.word	0x20000770
 80047a8:	20000c50 	.word	0x20000c50
 80047ac:	20000780 	.word	0x20000780
 80047b0:	20000c54 	.word	0x20000c54
 80047b4:	20000790 	.word	0x20000790
 80047b8:	20000c58 	.word	0x20000c58
 80047bc:	200007a0 	.word	0x200007a0
 80047c0:	20000c5c 	.word	0x20000c5c
 80047c4:	200007b0 	.word	0x200007b0
 80047c8:	20000c60 	.word	0x20000c60
 80047cc:	200007c0 	.word	0x200007c0
 80047d0:	20000c64 	.word	0x20000c64
 80047d4:	200007d0 	.word	0x200007d0
 80047d8:	20000c68 	.word	0x20000c68
 80047dc:	200007e0 	.word	0x200007e0
 80047e0:	20000c6c 	.word	0x20000c6c
 80047e4:	200007f0 	.word	0x200007f0
 80047e8:	20000c70 	.word	0x20000c70
 80047ec:	20000800 	.word	0x20000800
 80047f0:	20000c74 	.word	0x20000c74
 80047f4:	20000810 	.word	0x20000810
 80047f8:	20000c78 	.word	0x20000c78
 80047fc:	20000820 	.word	0x20000820
 8004800:	20000c7c 	.word	0x20000c7c
 8004804:	20000830 	.word	0x20000830
 8004808:	20000c80 	.word	0x20000c80
 800480c:	20000840 	.word	0x20000840
 8004810:	4603      	mov	r3, r0
 8004812:	4a27      	ldr	r2, [pc, #156]	; (80048b0 <loadMenuTexts+0xb14>)
 8004814:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8004816:	4827      	ldr	r0, [pc, #156]	; (80048b4 <loadMenuTexts+0xb18>)
 8004818:	f7fc f858 	bl	80008cc <copyText>
 800481c:	4603      	mov	r3, r0
 800481e:	4a26      	ldr	r2, [pc, #152]	; (80048b8 <loadMenuTexts+0xb1c>)
 8004820:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8004822:	4826      	ldr	r0, [pc, #152]	; (80048bc <loadMenuTexts+0xb20>)
 8004824:	f7fc f852 	bl	80008cc <copyText>
 8004828:	4603      	mov	r3, r0
 800482a:	4a25      	ldr	r2, [pc, #148]	; (80048c0 <loadMenuTexts+0xb24>)
 800482c:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 800482e:	4825      	ldr	r0, [pc, #148]	; (80048c4 <loadMenuTexts+0xb28>)
 8004830:	f7fc f84c 	bl	80008cc <copyText>
 8004834:	4603      	mov	r3, r0
 8004836:	4a24      	ldr	r2, [pc, #144]	; (80048c8 <loadMenuTexts+0xb2c>)
 8004838:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 800483a:	4824      	ldr	r0, [pc, #144]	; (80048cc <loadMenuTexts+0xb30>)
 800483c:	f7fc f846 	bl	80008cc <copyText>
 8004840:	4603      	mov	r3, r0
 8004842:	4a23      	ldr	r2, [pc, #140]	; (80048d0 <loadMenuTexts+0xb34>)
 8004844:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8004846:	4823      	ldr	r0, [pc, #140]	; (80048d4 <loadMenuTexts+0xb38>)
 8004848:	f7fc f840 	bl	80008cc <copyText>
 800484c:	4603      	mov	r3, r0
 800484e:	4a22      	ldr	r2, [pc, #136]	; (80048d8 <loadMenuTexts+0xb3c>)
 8004850:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8004852:	4822      	ldr	r0, [pc, #136]	; (80048dc <loadMenuTexts+0xb40>)
 8004854:	f7fc f83a 	bl	80008cc <copyText>
 8004858:	4603      	mov	r3, r0
 800485a:	4a21      	ldr	r2, [pc, #132]	; (80048e0 <loadMenuTexts+0xb44>)
 800485c:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 800485e:	4821      	ldr	r0, [pc, #132]	; (80048e4 <loadMenuTexts+0xb48>)
 8004860:	f7fc f834 	bl	80008cc <copyText>
 8004864:	4603      	mov	r3, r0
 8004866:	4a20      	ldr	r2, [pc, #128]	; (80048e8 <loadMenuTexts+0xb4c>)
 8004868:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 800486a:	4820      	ldr	r0, [pc, #128]	; (80048ec <loadMenuTexts+0xb50>)
 800486c:	f7fc f82e 	bl	80008cc <copyText>
 8004870:	4603      	mov	r3, r0
 8004872:	4a1f      	ldr	r2, [pc, #124]	; (80048f0 <loadMenuTexts+0xb54>)
 8004874:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8004876:	481f      	ldr	r0, [pc, #124]	; (80048f4 <loadMenuTexts+0xb58>)
 8004878:	f7fc f828 	bl	80008cc <copyText>
 800487c:	4603      	mov	r3, r0
 800487e:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <loadMenuTexts+0xb5c>)
 8004880:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 8004882:	481e      	ldr	r0, [pc, #120]	; (80048fc <loadMenuTexts+0xb60>)
 8004884:	f7fc f822 	bl	80008cc <copyText>
 8004888:	4603      	mov	r3, r0
 800488a:	4a1d      	ldr	r2, [pc, #116]	; (8004900 <loadMenuTexts+0xb64>)
 800488c:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 800488e:	481d      	ldr	r0, [pc, #116]	; (8004904 <loadMenuTexts+0xb68>)
 8004890:	f7fc f81c 	bl	80008cc <copyText>
 8004894:	4603      	mov	r3, r0
 8004896:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <loadMenuTexts+0xb6c>)
 8004898:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 800489a:	481c      	ldr	r0, [pc, #112]	; (800490c <loadMenuTexts+0xb70>)
 800489c:	f7fc f816 	bl	80008cc <copyText>
 80048a0:	4603      	mov	r3, r0
 80048a2:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <loadMenuTexts+0xb74>)
 80048a4:	6013      	str	r3, [r2, #0]
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000c84 	.word	0x20000c84
 80048b4:	20000850 	.word	0x20000850
 80048b8:	20000c88 	.word	0x20000c88
 80048bc:	20000860 	.word	0x20000860
 80048c0:	20000c8c 	.word	0x20000c8c
 80048c4:	20000870 	.word	0x20000870
 80048c8:	20000c90 	.word	0x20000c90
 80048cc:	20000880 	.word	0x20000880
 80048d0:	20000c94 	.word	0x20000c94
 80048d4:	20000890 	.word	0x20000890
 80048d8:	20000c98 	.word	0x20000c98
 80048dc:	200008a0 	.word	0x200008a0
 80048e0:	20000ca4 	.word	0x20000ca4
 80048e4:	200008b0 	.word	0x200008b0
 80048e8:	20000ca8 	.word	0x20000ca8
 80048ec:	200008c0 	.word	0x200008c0
 80048f0:	20000cac 	.word	0x20000cac
 80048f4:	200008d0 	.word	0x200008d0
 80048f8:	20000cb0 	.word	0x20000cb0
 80048fc:	200008e0 	.word	0x200008e0
 8004900:	20000cb4 	.word	0x20000cb4
 8004904:	200008f0 	.word	0x200008f0
 8004908:	20000cb8 	.word	0x20000cb8
 800490c:	20000900 	.word	0x20000900
 8004910:	20000cbc 	.word	0x20000cbc

08004914 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	4603      	mov	r3, r0
 800491c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d105      	bne.n	8004930 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004924:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <lcdUpdate+0x9c>)
 8004926:	2101      	movs	r1, #1
 8004928:	2002      	movs	r0, #2
 800492a:	f7fb ff45 	bl	80007b8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 800492e:	e03b      	b.n	80049a8 <lcdUpdate+0x94>
	} else if(y==2) {
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d105      	bne.n	8004942 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004936:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <lcdUpdate+0x9c>)
 8004938:	2102      	movs	r1, #2
 800493a:	2002      	movs	r0, #2
 800493c:	f7fb ff3c 	bl	80007b8 <lcd_print>
}
 8004940:	e032      	b.n	80049a8 <lcdUpdate+0x94>
	} else if(y==3) {
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	2b03      	cmp	r3, #3
 8004946:	d105      	bne.n	8004954 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004948:	4a19      	ldr	r2, [pc, #100]	; (80049b0 <lcdUpdate+0x9c>)
 800494a:	2103      	movs	r1, #3
 800494c:	2002      	movs	r0, #2
 800494e:	f7fb ff33 	bl	80007b8 <lcd_print>
}
 8004952:	e029      	b.n	80049a8 <lcdUpdate+0x94>
	} else if(y==4) {
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	2b04      	cmp	r3, #4
 8004958:	d105      	bne.n	8004966 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800495a:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <lcdUpdate+0x9c>)
 800495c:	2104      	movs	r1, #4
 800495e:	2002      	movs	r0, #2
 8004960:	f7fb ff2a 	bl	80007b8 <lcd_print>
}
 8004964:	e020      	b.n	80049a8 <lcdUpdate+0x94>
	} else if(y==5) {
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	2b05      	cmp	r3, #5
 800496a:	d105      	bne.n	8004978 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 800496c:	4a10      	ldr	r2, [pc, #64]	; (80049b0 <lcdUpdate+0x9c>)
 800496e:	2105      	movs	r1, #5
 8004970:	2002      	movs	r0, #2
 8004972:	f7fb ff21 	bl	80007b8 <lcd_print>
}
 8004976:	e017      	b.n	80049a8 <lcdUpdate+0x94>
	} else if(y==6) {
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	2b06      	cmp	r3, #6
 800497c:	d105      	bne.n	800498a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800497e:	4a0c      	ldr	r2, [pc, #48]	; (80049b0 <lcdUpdate+0x9c>)
 8004980:	2106      	movs	r1, #6
 8004982:	2002      	movs	r0, #2
 8004984:	f7fb ff18 	bl	80007b8 <lcd_print>
}
 8004988:	e00e      	b.n	80049a8 <lcdUpdate+0x94>
	} else if (y==7) {
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	2b07      	cmp	r3, #7
 800498e:	d10b      	bne.n	80049a8 <lcdUpdate+0x94>
		lcd_clear();
 8004990:	f7fb ff3e 	bl	8000810 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8004994:	4a07      	ldr	r2, [pc, #28]	; (80049b4 <lcdUpdate+0xa0>)
 8004996:	2101      	movs	r1, #1
 8004998:	2001      	movs	r0, #1
 800499a:	f7fb ff0d 	bl	80007b8 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 800499e:	4a06      	ldr	r2, [pc, #24]	; (80049b8 <lcdUpdate+0xa4>)
 80049a0:	2101      	movs	r1, #1
 80049a2:	2002      	movs	r0, #2
 80049a4:	f7fb ff08 	bl	80007b8 <lcd_print>
}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	0800d5a0 	.word	0x0800d5a0
 80049b4:	0800de90 	.word	0x0800de90
 80049b8:	0800dea4 	.word	0x0800dea4

080049bc <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d11d      	bne.n	8004a08 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 80049cc:	4b62      	ldr	r3, [pc, #392]	; (8004b58 <hataKoduLcdGoster+0x19c>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 80049d4:	4a61      	ldr	r2, [pc, #388]	; (8004b5c <hataKoduLcdGoster+0x1a0>)
 80049d6:	2101      	movs	r1, #1
 80049d8:	2001      	movs	r0, #1
 80049da:	f7fb feed 	bl	80007b8 <lcd_print>
 80049de:	e008      	b.n	80049f2 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80049e0:	4b5d      	ldr	r3, [pc, #372]	; (8004b58 <hataKoduLcdGoster+0x19c>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d104      	bne.n	80049f2 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 80049e8:	4a5d      	ldr	r2, [pc, #372]	; (8004b60 <hataKoduLcdGoster+0x1a4>)
 80049ea:	2101      	movs	r1, #1
 80049ec:	2001      	movs	r0, #1
 80049ee:	f7fb fee3 	bl	80007b8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 80049f2:	4a5c      	ldr	r2, [pc, #368]	; (8004b64 <hataKoduLcdGoster+0x1a8>)
 80049f4:	2101      	movs	r1, #1
 80049f6:	2002      	movs	r0, #2
 80049f8:	f7fb fede 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 80049fc:	4a5a      	ldr	r2, [pc, #360]	; (8004b68 <hataKoduLcdGoster+0x1ac>)
 80049fe:	2107      	movs	r1, #7
 8004a00:	2002      	movs	r0, #2
 8004a02:	f7fb fed9 	bl	80007b8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8004a06:	e0a3      	b.n	8004b50 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d11d      	bne.n	8004a4a <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8004a0e:	4b52      	ldr	r3, [pc, #328]	; (8004b58 <hataKoduLcdGoster+0x19c>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d105      	bne.n	8004a22 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8004a16:	4a51      	ldr	r2, [pc, #324]	; (8004b5c <hataKoduLcdGoster+0x1a0>)
 8004a18:	2101      	movs	r1, #1
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	f7fb fecc 	bl	80007b8 <lcd_print>
 8004a20:	e008      	b.n	8004a34 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8004a22:	4b4d      	ldr	r3, [pc, #308]	; (8004b58 <hataKoduLcdGoster+0x19c>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d104      	bne.n	8004a34 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004a2a:	4a4d      	ldr	r2, [pc, #308]	; (8004b60 <hataKoduLcdGoster+0x1a4>)
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	2001      	movs	r0, #1
 8004a30:	f7fb fec2 	bl	80007b8 <lcd_print>
		lcd_print(2, 2, "2");
 8004a34:	4a4d      	ldr	r2, [pc, #308]	; (8004b6c <hataKoduLcdGoster+0x1b0>)
 8004a36:	2102      	movs	r1, #2
 8004a38:	2002      	movs	r0, #2
 8004a3a:	f7fb febd 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8004a3e:	4a4a      	ldr	r2, [pc, #296]	; (8004b68 <hataKoduLcdGoster+0x1ac>)
 8004a40:	2107      	movs	r1, #7
 8004a42:	2002      	movs	r0, #2
 8004a44:	f7fb feb8 	bl	80007b8 <lcd_print>
}
 8004a48:	e082      	b.n	8004b50 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d11d      	bne.n	8004a8c <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8004a50:	4b41      	ldr	r3, [pc, #260]	; (8004b58 <hataKoduLcdGoster+0x19c>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8004a58:	4a40      	ldr	r2, [pc, #256]	; (8004b5c <hataKoduLcdGoster+0x1a0>)
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	f7fb feab 	bl	80007b8 <lcd_print>
 8004a62:	e008      	b.n	8004a76 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8004a64:	4b3c      	ldr	r3, [pc, #240]	; (8004b58 <hataKoduLcdGoster+0x19c>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d104      	bne.n	8004a76 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004a6c:	4a3c      	ldr	r2, [pc, #240]	; (8004b60 <hataKoduLcdGoster+0x1a4>)
 8004a6e:	2101      	movs	r1, #1
 8004a70:	2001      	movs	r0, #1
 8004a72:	f7fb fea1 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "3");
 8004a76:	4a3e      	ldr	r2, [pc, #248]	; (8004b70 <hataKoduLcdGoster+0x1b4>)
 8004a78:	2103      	movs	r1, #3
 8004a7a:	2002      	movs	r0, #2
 8004a7c:	f7fb fe9c 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8004a80:	4a39      	ldr	r2, [pc, #228]	; (8004b68 <hataKoduLcdGoster+0x1ac>)
 8004a82:	2107      	movs	r1, #7
 8004a84:	2002      	movs	r0, #2
 8004a86:	f7fb fe97 	bl	80007b8 <lcd_print>
}
 8004a8a:	e061      	b.n	8004b50 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d11d      	bne.n	8004ace <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8004a92:	4b31      	ldr	r3, [pc, #196]	; (8004b58 <hataKoduLcdGoster+0x19c>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d105      	bne.n	8004aa6 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8004a9a:	4a30      	ldr	r2, [pc, #192]	; (8004b5c <hataKoduLcdGoster+0x1a0>)
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	f7fb fe8a 	bl	80007b8 <lcd_print>
 8004aa4:	e008      	b.n	8004ab8 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8004aa6:	4b2c      	ldr	r3, [pc, #176]	; (8004b58 <hataKoduLcdGoster+0x19c>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d104      	bne.n	8004ab8 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004aae:	4a2c      	ldr	r2, [pc, #176]	; (8004b60 <hataKoduLcdGoster+0x1a4>)
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	2001      	movs	r0, #1
 8004ab4:	f7fb fe80 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "4");
 8004ab8:	4a2e      	ldr	r2, [pc, #184]	; (8004b74 <hataKoduLcdGoster+0x1b8>)
 8004aba:	2104      	movs	r1, #4
 8004abc:	2002      	movs	r0, #2
 8004abe:	f7fb fe7b 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8004ac2:	4a29      	ldr	r2, [pc, #164]	; (8004b68 <hataKoduLcdGoster+0x1ac>)
 8004ac4:	2107      	movs	r1, #7
 8004ac6:	2002      	movs	r0, #2
 8004ac8:	f7fb fe76 	bl	80007b8 <lcd_print>
}
 8004acc:	e040      	b.n	8004b50 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	2b05      	cmp	r3, #5
 8004ad2:	d11d      	bne.n	8004b10 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8004ad4:	4b20      	ldr	r3, [pc, #128]	; (8004b58 <hataKoduLcdGoster+0x19c>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8004adc:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <hataKoduLcdGoster+0x1a0>)
 8004ade:	2101      	movs	r1, #1
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	f7fb fe69 	bl	80007b8 <lcd_print>
 8004ae6:	e008      	b.n	8004afa <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <hataKoduLcdGoster+0x19c>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d104      	bne.n	8004afa <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004af0:	4a1b      	ldr	r2, [pc, #108]	; (8004b60 <hataKoduLcdGoster+0x1a4>)
 8004af2:	2101      	movs	r1, #1
 8004af4:	2001      	movs	r0, #1
 8004af6:	f7fb fe5f 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "5");
 8004afa:	4a1f      	ldr	r2, [pc, #124]	; (8004b78 <hataKoduLcdGoster+0x1bc>)
 8004afc:	2105      	movs	r1, #5
 8004afe:	2002      	movs	r0, #2
 8004b00:	f7fb fe5a 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8004b04:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <hataKoduLcdGoster+0x1ac>)
 8004b06:	2107      	movs	r1, #7
 8004b08:	2002      	movs	r0, #2
 8004b0a:	f7fb fe55 	bl	80007b8 <lcd_print>
}
 8004b0e:	e01f      	b.n	8004b50 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	2b06      	cmp	r3, #6
 8004b14:	d11c      	bne.n	8004b50 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8004b16:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <hataKoduLcdGoster+0x19c>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d105      	bne.n	8004b2a <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8004b1e:	4a0f      	ldr	r2, [pc, #60]	; (8004b5c <hataKoduLcdGoster+0x1a0>)
 8004b20:	2101      	movs	r1, #1
 8004b22:	2001      	movs	r0, #1
 8004b24:	f7fb fe48 	bl	80007b8 <lcd_print>
 8004b28:	e008      	b.n	8004b3c <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <hataKoduLcdGoster+0x19c>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d104      	bne.n	8004b3c <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004b32:	4a0b      	ldr	r2, [pc, #44]	; (8004b60 <hataKoduLcdGoster+0x1a4>)
 8004b34:	2101      	movs	r1, #1
 8004b36:	2001      	movs	r0, #1
 8004b38:	f7fb fe3e 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "6");
 8004b3c:	4a0f      	ldr	r2, [pc, #60]	; (8004b7c <hataKoduLcdGoster+0x1c0>)
 8004b3e:	2106      	movs	r1, #6
 8004b40:	2002      	movs	r0, #2
 8004b42:	f7fb fe39 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8004b46:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <hataKoduLcdGoster+0x1ac>)
 8004b48:	2107      	movs	r1, #7
 8004b4a:	2002      	movs	r0, #2
 8004b4c:	f7fb fe34 	bl	80007b8 <lcd_print>
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	20000b4d 	.word	0x20000b4d
 8004b5c:	0800deb8 	.word	0x0800deb8
 8004b60:	0800decc 	.word	0x0800decc
 8004b64:	0800dee0 	.word	0x0800dee0
 8004b68:	0800dee4 	.word	0x0800dee4
 8004b6c:	0800def0 	.word	0x0800def0
 8004b70:	0800def4 	.word	0x0800def4
 8004b74:	0800def8 	.word	0x0800def8
 8004b78:	0800defc 	.word	0x0800defc
 8004b7c:	0800df00 	.word	0x0800df00

08004b80 <convertAndSendData>:

void convertAndSendData() {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8004b86:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <convertAndSendData+0x58>)
 8004b88:	2101      	movs	r1, #1
 8004b8a:	2001      	movs	r0, #1
 8004b8c:	f7fb fe14 	bl	80007b8 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8004b90:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <convertAndSendData+0x5c>)
 8004b92:	2101      	movs	r1, #1
 8004b94:	2002      	movs	r0, #2
 8004b96:	f7fb fe0f 	bl	80007b8 <lcd_print>
	for(int i=0; i<2; i++) {
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	e00a      	b.n	8004bb6 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8004ba0:	f002 fb3a 	bl	8007218 <mergeData>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	490d      	ldr	r1, [pc, #52]	; (8004be0 <convertAndSendData+0x60>)
 8004baa:	480e      	ldr	r0, [pc, #56]	; (8004be4 <convertAndSendData+0x64>)
 8004bac:	f7fb fbea 	bl	8000384 <sendMachineData>
	for(int i=0; i<2; i++) {
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	ddf1      	ble.n	8004ba0 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8004bbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004bc0:	f004 f872 	bl	8008ca8 <HAL_Delay>
	lcd_clear();
 8004bc4:	f7fb fe24 	bl	8000810 <lcd_clear>
	HAL_Delay(500);
 8004bc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004bcc:	f004 f86c 	bl	8008ca8 <HAL_Delay>
}
 8004bd0:	bf00      	nop
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	0800df04 	.word	0x0800df04
 8004bdc:	0800df10 	.word	0x0800df10
 8004be0:	20000cc0 	.word	0x20000cc0
 8004be4:	20000dd8 	.word	0x20000dd8

08004be8 <eepromKontrol>:

void eepromKontrol(int type) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af04      	add	r7, sp, #16
 8004bee:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8004bf0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004bf4:	9302      	str	r3, [sp, #8]
 8004bf6:	233f      	movs	r3, #63	; 0x3f
 8004bf8:	9301      	str	r3, [sp, #4]
 8004bfa:	4b9c      	ldr	r3, [pc, #624]	; (8004e6c <eepromKontrol+0x284>)
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	233f      	movs	r3, #63	; 0x3f
 8004c00:	2200      	movs	r2, #0
 8004c02:	21a0      	movs	r1, #160	; 0xa0
 8004c04:	489a      	ldr	r0, [pc, #616]	; (8004e70 <eepromKontrol+0x288>)
 8004c06:	f005 f9d3 	bl	8009fb0 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8004c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c0e:	f004 f84b 	bl	8008ca8 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8004c12:	4b96      	ldr	r3, [pc, #600]	; (8004e6c <eepromKontrol+0x284>)
 8004c14:	78da      	ldrb	r2, [r3, #3]
 8004c16:	4b97      	ldr	r3, [pc, #604]	; (8004e74 <eepromKontrol+0x28c>)
 8004c18:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8004c1a:	4b94      	ldr	r3, [pc, #592]	; (8004e6c <eepromKontrol+0x284>)
 8004c1c:	785a      	ldrb	r2, [r3, #1]
 8004c1e:	4b96      	ldr	r3, [pc, #600]	; (8004e78 <eepromKontrol+0x290>)
 8004c20:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8004c22:	4b92      	ldr	r3, [pc, #584]	; (8004e6c <eepromKontrol+0x284>)
 8004c24:	789a      	ldrb	r2, [r3, #2]
 8004c26:	4b95      	ldr	r3, [pc, #596]	; (8004e7c <eepromKontrol+0x294>)
 8004c28:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8004c2a:	4b90      	ldr	r3, [pc, #576]	; (8004e6c <eepromKontrol+0x284>)
 8004c2c:	791a      	ldrb	r2, [r3, #4]
 8004c2e:	4b94      	ldr	r3, [pc, #592]	; (8004e80 <eepromKontrol+0x298>)
 8004c30:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8004c32:	4b8e      	ldr	r3, [pc, #568]	; (8004e6c <eepromKontrol+0x284>)
 8004c34:	795a      	ldrb	r2, [r3, #5]
 8004c36:	4b93      	ldr	r3, [pc, #588]	; (8004e84 <eepromKontrol+0x29c>)
 8004c38:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8004c3a:	4b8c      	ldr	r3, [pc, #560]	; (8004e6c <eepromKontrol+0x284>)
 8004c3c:	799a      	ldrb	r2, [r3, #6]
 8004c3e:	4b92      	ldr	r3, [pc, #584]	; (8004e88 <eepromKontrol+0x2a0>)
 8004c40:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8004c42:	4b8a      	ldr	r3, [pc, #552]	; (8004e6c <eepromKontrol+0x284>)
 8004c44:	79da      	ldrb	r2, [r3, #7]
 8004c46:	4b91      	ldr	r3, [pc, #580]	; (8004e8c <eepromKontrol+0x2a4>)
 8004c48:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8004c4a:	4b88      	ldr	r3, [pc, #544]	; (8004e6c <eepromKontrol+0x284>)
 8004c4c:	7a1a      	ldrb	r2, [r3, #8]
 8004c4e:	4b90      	ldr	r3, [pc, #576]	; (8004e90 <eepromKontrol+0x2a8>)
 8004c50:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8004c52:	4b86      	ldr	r3, [pc, #536]	; (8004e6c <eepromKontrol+0x284>)
 8004c54:	7a5a      	ldrb	r2, [r3, #9]
 8004c56:	4b8f      	ldr	r3, [pc, #572]	; (8004e94 <eepromKontrol+0x2ac>)
 8004c58:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8004c5a:	4b84      	ldr	r3, [pc, #528]	; (8004e6c <eepromKontrol+0x284>)
 8004c5c:	7a9a      	ldrb	r2, [r3, #10]
 8004c5e:	4b8e      	ldr	r3, [pc, #568]	; (8004e98 <eepromKontrol+0x2b0>)
 8004c60:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8004c62:	4b82      	ldr	r3, [pc, #520]	; (8004e6c <eepromKontrol+0x284>)
 8004c64:	7ada      	ldrb	r2, [r3, #11]
 8004c66:	4b8d      	ldr	r3, [pc, #564]	; (8004e9c <eepromKontrol+0x2b4>)
 8004c68:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8004c6a:	4b80      	ldr	r3, [pc, #512]	; (8004e6c <eepromKontrol+0x284>)
 8004c6c:	7b1a      	ldrb	r2, [r3, #12]
 8004c6e:	4b8c      	ldr	r3, [pc, #560]	; (8004ea0 <eepromKontrol+0x2b8>)
 8004c70:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8004c72:	4b7e      	ldr	r3, [pc, #504]	; (8004e6c <eepromKontrol+0x284>)
 8004c74:	7b5a      	ldrb	r2, [r3, #13]
 8004c76:	4b8b      	ldr	r3, [pc, #556]	; (8004ea4 <eepromKontrol+0x2bc>)
 8004c78:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8004c7a:	4b7c      	ldr	r3, [pc, #496]	; (8004e6c <eepromKontrol+0x284>)
 8004c7c:	7b9a      	ldrb	r2, [r3, #14]
 8004c7e:	4b8a      	ldr	r3, [pc, #552]	; (8004ea8 <eepromKontrol+0x2c0>)
 8004c80:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8004c82:	4b7a      	ldr	r3, [pc, #488]	; (8004e6c <eepromKontrol+0x284>)
 8004c84:	7bda      	ldrb	r2, [r3, #15]
 8004c86:	4b89      	ldr	r3, [pc, #548]	; (8004eac <eepromKontrol+0x2c4>)
 8004c88:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8004c8a:	4b78      	ldr	r3, [pc, #480]	; (8004e6c <eepromKontrol+0x284>)
 8004c8c:	7c1a      	ldrb	r2, [r3, #16]
 8004c8e:	4b88      	ldr	r3, [pc, #544]	; (8004eb0 <eepromKontrol+0x2c8>)
 8004c90:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8004c92:	4b76      	ldr	r3, [pc, #472]	; (8004e6c <eepromKontrol+0x284>)
 8004c94:	7c5a      	ldrb	r2, [r3, #17]
 8004c96:	4b87      	ldr	r3, [pc, #540]	; (8004eb4 <eepromKontrol+0x2cc>)
 8004c98:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8004c9a:	4b74      	ldr	r3, [pc, #464]	; (8004e6c <eepromKontrol+0x284>)
 8004c9c:	7c9a      	ldrb	r2, [r3, #18]
 8004c9e:	4b86      	ldr	r3, [pc, #536]	; (8004eb8 <eepromKontrol+0x2d0>)
 8004ca0:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8004ca2:	4b72      	ldr	r3, [pc, #456]	; (8004e6c <eepromKontrol+0x284>)
 8004ca4:	7cda      	ldrb	r2, [r3, #19]
 8004ca6:	4b85      	ldr	r3, [pc, #532]	; (8004ebc <eepromKontrol+0x2d4>)
 8004ca8:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8004caa:	4b70      	ldr	r3, [pc, #448]	; (8004e6c <eepromKontrol+0x284>)
 8004cac:	7d1a      	ldrb	r2, [r3, #20]
 8004cae:	4b84      	ldr	r3, [pc, #528]	; (8004ec0 <eepromKontrol+0x2d8>)
 8004cb0:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8004cb2:	4b6e      	ldr	r3, [pc, #440]	; (8004e6c <eepromKontrol+0x284>)
 8004cb4:	7d5a      	ldrb	r2, [r3, #21]
 8004cb6:	4b83      	ldr	r3, [pc, #524]	; (8004ec4 <eepromKontrol+0x2dc>)
 8004cb8:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8004cba:	4b6c      	ldr	r3, [pc, #432]	; (8004e6c <eepromKontrol+0x284>)
 8004cbc:	7d9a      	ldrb	r2, [r3, #22]
 8004cbe:	4b82      	ldr	r3, [pc, #520]	; (8004ec8 <eepromKontrol+0x2e0>)
 8004cc0:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8004cc2:	4b6a      	ldr	r3, [pc, #424]	; (8004e6c <eepromKontrol+0x284>)
 8004cc4:	7dda      	ldrb	r2, [r3, #23]
 8004cc6:	4b81      	ldr	r3, [pc, #516]	; (8004ecc <eepromKontrol+0x2e4>)
 8004cc8:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8004cca:	4b68      	ldr	r3, [pc, #416]	; (8004e6c <eepromKontrol+0x284>)
 8004ccc:	7e1a      	ldrb	r2, [r3, #24]
 8004cce:	4b80      	ldr	r3, [pc, #512]	; (8004ed0 <eepromKontrol+0x2e8>)
 8004cd0:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8004cd2:	4b66      	ldr	r3, [pc, #408]	; (8004e6c <eepromKontrol+0x284>)
 8004cd4:	7e5a      	ldrb	r2, [r3, #25]
 8004cd6:	4b7f      	ldr	r3, [pc, #508]	; (8004ed4 <eepromKontrol+0x2ec>)
 8004cd8:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8004cda:	4b64      	ldr	r3, [pc, #400]	; (8004e6c <eepromKontrol+0x284>)
 8004cdc:	7e9a      	ldrb	r2, [r3, #26]
 8004cde:	4b7e      	ldr	r3, [pc, #504]	; (8004ed8 <eepromKontrol+0x2f0>)
 8004ce0:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8004ce2:	4b62      	ldr	r3, [pc, #392]	; (8004e6c <eepromKontrol+0x284>)
 8004ce4:	7eda      	ldrb	r2, [r3, #27]
 8004ce6:	4b7d      	ldr	r3, [pc, #500]	; (8004edc <eepromKontrol+0x2f4>)
 8004ce8:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8004cea:	4b60      	ldr	r3, [pc, #384]	; (8004e6c <eepromKontrol+0x284>)
 8004cec:	7f1a      	ldrb	r2, [r3, #28]
 8004cee:	4b7c      	ldr	r3, [pc, #496]	; (8004ee0 <eepromKontrol+0x2f8>)
 8004cf0:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8004cf2:	4b5e      	ldr	r3, [pc, #376]	; (8004e6c <eepromKontrol+0x284>)
 8004cf4:	7f5a      	ldrb	r2, [r3, #29]
 8004cf6:	4b7b      	ldr	r3, [pc, #492]	; (8004ee4 <eepromKontrol+0x2fc>)
 8004cf8:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8004cfa:	4b5c      	ldr	r3, [pc, #368]	; (8004e6c <eepromKontrol+0x284>)
 8004cfc:	7f9a      	ldrb	r2, [r3, #30]
 8004cfe:	4b7a      	ldr	r3, [pc, #488]	; (8004ee8 <eepromKontrol+0x300>)
 8004d00:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8004d02:	4b5a      	ldr	r3, [pc, #360]	; (8004e6c <eepromKontrol+0x284>)
 8004d04:	7fda      	ldrb	r2, [r3, #31]
 8004d06:	4b79      	ldr	r3, [pc, #484]	; (8004eec <eepromKontrol+0x304>)
 8004d08:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8004d0a:	4b58      	ldr	r3, [pc, #352]	; (8004e6c <eepromKontrol+0x284>)
 8004d0c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004d10:	4b77      	ldr	r3, [pc, #476]	; (8004ef0 <eepromKontrol+0x308>)
 8004d12:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8004d14:	4b55      	ldr	r3, [pc, #340]	; (8004e6c <eepromKontrol+0x284>)
 8004d16:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004d1a:	4b76      	ldr	r3, [pc, #472]	; (8004ef4 <eepromKontrol+0x30c>)
 8004d1c:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 8004d1e:	4b53      	ldr	r3, [pc, #332]	; (8004e6c <eepromKontrol+0x284>)
 8004d20:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004d24:	4b74      	ldr	r3, [pc, #464]	; (8004ef8 <eepromKontrol+0x310>)
 8004d26:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8004d28:	4b50      	ldr	r3, [pc, #320]	; (8004e6c <eepromKontrol+0x284>)
 8004d2a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004d2e:	4b73      	ldr	r3, [pc, #460]	; (8004efc <eepromKontrol+0x314>)
 8004d30:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8004d32:	4b4e      	ldr	r3, [pc, #312]	; (8004e6c <eepromKontrol+0x284>)
 8004d34:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004d38:	4b71      	ldr	r3, [pc, #452]	; (8004f00 <eepromKontrol+0x318>)
 8004d3a:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8004d3c:	4b4b      	ldr	r3, [pc, #300]	; (8004e6c <eepromKontrol+0x284>)
 8004d3e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004d42:	4b70      	ldr	r3, [pc, #448]	; (8004f04 <eepromKontrol+0x31c>)
 8004d44:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8004d46:	4b49      	ldr	r3, [pc, #292]	; (8004e6c <eepromKontrol+0x284>)
 8004d48:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004d4c:	4b6e      	ldr	r3, [pc, #440]	; (8004f08 <eepromKontrol+0x320>)
 8004d4e:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8004d50:	4b46      	ldr	r3, [pc, #280]	; (8004e6c <eepromKontrol+0x284>)
 8004d52:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004d56:	4b6d      	ldr	r3, [pc, #436]	; (8004f0c <eepromKontrol+0x324>)
 8004d58:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8004d5a:	4b44      	ldr	r3, [pc, #272]	; (8004e6c <eepromKontrol+0x284>)
 8004d5c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004d60:	4b6b      	ldr	r3, [pc, #428]	; (8004f10 <eepromKontrol+0x328>)
 8004d62:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8004d64:	4b41      	ldr	r3, [pc, #260]	; (8004e6c <eepromKontrol+0x284>)
 8004d66:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004d6a:	4b6a      	ldr	r3, [pc, #424]	; (8004f14 <eepromKontrol+0x32c>)
 8004d6c:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8004d6e:	4b3f      	ldr	r3, [pc, #252]	; (8004e6c <eepromKontrol+0x284>)
 8004d70:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004d74:	4b68      	ldr	r3, [pc, #416]	; (8004f18 <eepromKontrol+0x330>)
 8004d76:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8004d78:	4b3c      	ldr	r3, [pc, #240]	; (8004e6c <eepromKontrol+0x284>)
 8004d7a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8004d7e:	4b67      	ldr	r3, [pc, #412]	; (8004f1c <eepromKontrol+0x334>)
 8004d80:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8004d82:	4b3a      	ldr	r3, [pc, #232]	; (8004e6c <eepromKontrol+0x284>)
 8004d84:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004d88:	4b65      	ldr	r3, [pc, #404]	; (8004f20 <eepromKontrol+0x338>)
 8004d8a:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8004d8c:	4b37      	ldr	r3, [pc, #220]	; (8004e6c <eepromKontrol+0x284>)
 8004d8e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004d92:	4b64      	ldr	r3, [pc, #400]	; (8004f24 <eepromKontrol+0x33c>)
 8004d94:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8004d96:	4b35      	ldr	r3, [pc, #212]	; (8004e6c <eepromKontrol+0x284>)
 8004d98:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8004d9c:	4b62      	ldr	r3, [pc, #392]	; (8004f28 <eepromKontrol+0x340>)
 8004d9e:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8004da0:	4b32      	ldr	r3, [pc, #200]	; (8004e6c <eepromKontrol+0x284>)
 8004da2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004da6:	4b61      	ldr	r3, [pc, #388]	; (8004f2c <eepromKontrol+0x344>)
 8004da8:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8004daa:	4b52      	ldr	r3, [pc, #328]	; (8004ef4 <eepromKontrol+0x30c>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe fff4 	bl	8003d9c <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8004db4:	4b4e      	ldr	r3, [pc, #312]	; (8004ef0 <eepromKontrol+0x308>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b09      	cmp	r3, #9
 8004dba:	d902      	bls.n	8004dc2 <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8004dbc:	4b4c      	ldr	r3, [pc, #304]	; (8004ef0 <eepromKontrol+0x308>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8004dc2:	4b4a      	ldr	r3, [pc, #296]	; (8004eec <eepromKontrol+0x304>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b09      	cmp	r3, #9
 8004dc8:	d902      	bls.n	8004dd0 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8004dca:	4b48      	ldr	r3, [pc, #288]	; (8004eec <eepromKontrol+0x304>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8004dd0:	4b45      	ldr	r3, [pc, #276]	; (8004ee8 <eepromKontrol+0x300>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b09      	cmp	r3, #9
 8004dd6:	d902      	bls.n	8004dde <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8004dd8:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <eepromKontrol+0x300>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8004dde:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <eepromKontrol+0x2fc>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b09      	cmp	r3, #9
 8004de4:	d902      	bls.n	8004dec <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8004de6:	4b3f      	ldr	r3, [pc, #252]	; (8004ee4 <eepromKontrol+0x2fc>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8004dec:	4b3c      	ldr	r3, [pc, #240]	; (8004ee0 <eepromKontrol+0x2f8>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b09      	cmp	r3, #9
 8004df2:	d902      	bls.n	8004dfa <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8004df4:	4b3a      	ldr	r3, [pc, #232]	; (8004ee0 <eepromKontrol+0x2f8>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8004dfa:	4b1f      	ldr	r3, [pc, #124]	; (8004e78 <eepromKontrol+0x290>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d902      	bls.n	8004e08 <eepromKontrol+0x220>
	    calismaSekli=0;
 8004e02:	4b1d      	ldr	r3, [pc, #116]	; (8004e78 <eepromKontrol+0x290>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8004e08:	4b1c      	ldr	r3, [pc, #112]	; (8004e7c <eepromKontrol+0x294>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d902      	bls.n	8004e16 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <eepromKontrol+0x294>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <eepromKontrol+0x298>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d902      	bls.n	8004e24 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8004e1e:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <eepromKontrol+0x298>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8004e24:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <eepromKontrol+0x29c>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d902      	bls.n	8004e32 <eepromKontrol+0x24a>
	    altLimit=1;
 8004e2c:	4b15      	ldr	r3, [pc, #84]	; (8004e84 <eepromKontrol+0x29c>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8004e32:	4b15      	ldr	r3, [pc, #84]	; (8004e88 <eepromKontrol+0x2a0>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d902      	bls.n	8004e40 <eepromKontrol+0x258>
	    basincSalteri=1;
 8004e3a:	4b13      	ldr	r3, [pc, #76]	; (8004e88 <eepromKontrol+0x2a0>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8004e40:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <eepromKontrol+0x2a4>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d902      	bls.n	8004e4e <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8004e48:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <eepromKontrol+0x2a4>)
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8004e4e:	4b2d      	ldr	r3, [pc, #180]	; (8004f04 <eepromKontrol+0x31c>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d902      	bls.n	8004e5c <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8004e56:	4b2b      	ldr	r3, [pc, #172]	; (8004f04 <eepromKontrol+0x31c>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8004e5c:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <eepromKontrol+0x2a8>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d965      	bls.n	8004f30 <eepromKontrol+0x348>
	    kapi1Tip=1;
 8004e64:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <eepromKontrol+0x2a8>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e061      	b.n	8004f30 <eepromKontrol+0x348>
 8004e6c:	20000ac0 	.word	0x20000ac0
 8004e70:	20000d3c 	.word	0x20000d3c
 8004e74:	20000aff 	.word	0x20000aff
 8004e78:	20000b2d 	.word	0x20000b2d
 8004e7c:	20000b30 	.word	0x20000b30
 8004e80:	20000b31 	.word	0x20000b31
 8004e84:	20000b32 	.word	0x20000b32
 8004e88:	20000b33 	.word	0x20000b33
 8004e8c:	20000b34 	.word	0x20000b34
 8004e90:	20000b35 	.word	0x20000b35
 8004e94:	20000b45 	.word	0x20000b45
 8004e98:	20000b36 	.word	0x20000b36
 8004e9c:	20000b46 	.word	0x20000b46
 8004ea0:	20000b37 	.word	0x20000b37
 8004ea4:	20000b47 	.word	0x20000b47
 8004ea8:	20000b3a 	.word	0x20000b3a
 8004eac:	20000b3b 	.word	0x20000b3b
 8004eb0:	20000b3c 	.word	0x20000b3c
 8004eb4:	20000b3d 	.word	0x20000b3d
 8004eb8:	20000b3e 	.word	0x20000b3e
 8004ebc:	20000b3f 	.word	0x20000b3f
 8004ec0:	20000b40 	.word	0x20000b40
 8004ec4:	20000b41 	.word	0x20000b41
 8004ec8:	20000b42 	.word	0x20000b42
 8004ecc:	20000b43 	.word	0x20000b43
 8004ed0:	20000b44 	.word	0x20000b44
 8004ed4:	20000b48 	.word	0x20000b48
 8004ed8:	20000b4a 	.word	0x20000b4a
 8004edc:	20000b28 	.word	0x20000b28
 8004ee0:	20000b29 	.word	0x20000b29
 8004ee4:	20000b2a 	.word	0x20000b2a
 8004ee8:	20000941 	.word	0x20000941
 8004eec:	20000942 	.word	0x20000942
 8004ef0:	20000b2b 	.word	0x20000b2b
 8004ef4:	20000b4d 	.word	0x20000b4d
 8004ef8:	20000b4b 	.word	0x20000b4b
 8004efc:	20000b39 	.word	0x20000b39
 8004f00:	20000b4c 	.word	0x20000b4c
 8004f04:	20000b38 	.word	0x20000b38
 8004f08:	20000b4e 	.word	0x20000b4e
 8004f0c:	20000b4f 	.word	0x20000b4f
 8004f10:	20000b50 	.word	0x20000b50
 8004f14:	20000b51 	.word	0x20000b51
 8004f18:	20000b52 	.word	0x20000b52
 8004f1c:	20000b53 	.word	0x20000b53
 8004f20:	20000b54 	.word	0x20000b54
 8004f24:	20000b55 	.word	0x20000b55
 8004f28:	20000b56 	.word	0x20000b56
 8004f2c:	20000b57 	.word	0x20000b57
	}

	if(kapi1AcSure>5) {
 8004f30:	4b55      	ldr	r3, [pc, #340]	; (8005088 <eepromKontrol+0x4a0>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b05      	cmp	r3, #5
 8004f36:	d902      	bls.n	8004f3e <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8004f38:	4b53      	ldr	r3, [pc, #332]	; (8005088 <eepromKontrol+0x4a0>)
 8004f3a:	2205      	movs	r2, #5
 8004f3c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8004f3e:	4b53      	ldr	r3, [pc, #332]	; (800508c <eepromKontrol+0x4a4>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d902      	bls.n	8004f4c <eepromKontrol+0x364>
	    kapi2Tip=1;
 8004f46:	4b51      	ldr	r3, [pc, #324]	; (800508c <eepromKontrol+0x4a4>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8004f4c:	4b50      	ldr	r3, [pc, #320]	; (8005090 <eepromKontrol+0x4a8>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	d902      	bls.n	8004f5a <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8004f54:	4b4e      	ldr	r3, [pc, #312]	; (8005090 <eepromKontrol+0x4a8>)
 8004f56:	2205      	movs	r2, #5
 8004f58:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8004f5a:	4b4e      	ldr	r3, [pc, #312]	; (8005094 <eepromKontrol+0x4ac>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d902      	bls.n	8004f68 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8004f62:	4b4c      	ldr	r3, [pc, #304]	; (8005094 <eepromKontrol+0x4ac>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8004f68:	4b4b      	ldr	r3, [pc, #300]	; (8005098 <eepromKontrol+0x4b0>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d902      	bls.n	8004f76 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8004f70:	4b49      	ldr	r3, [pc, #292]	; (8005098 <eepromKontrol+0x4b0>)
 8004f72:	2202      	movs	r2, #2
 8004f74:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8004f76:	4b49      	ldr	r3, [pc, #292]	; (800509c <eepromKontrol+0x4b4>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d902      	bls.n	8004f84 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8004f7e:	4b47      	ldr	r3, [pc, #284]	; (800509c <eepromKontrol+0x4b4>)
 8004f80:	2205      	movs	r2, #5
 8004f82:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8004f84:	4b46      	ldr	r3, [pc, #280]	; (80050a0 <eepromKontrol+0x4b8>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d902      	bls.n	8004f92 <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8004f8c:	4b44      	ldr	r3, [pc, #272]	; (80050a0 <eepromKontrol+0x4b8>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8004f92:	4b44      	ldr	r3, [pc, #272]	; (80050a4 <eepromKontrol+0x4bc>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d902      	bls.n	8004fa0 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8004f9a:	4b42      	ldr	r3, [pc, #264]	; (80050a4 <eepromKontrol+0x4bc>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8004fa0:	4b41      	ldr	r3, [pc, #260]	; (80050a8 <eepromKontrol+0x4c0>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d902      	bls.n	8004fae <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8004fa8:	4b3f      	ldr	r3, [pc, #252]	; (80050a8 <eepromKontrol+0x4c0>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8004fae:	4b3f      	ldr	r3, [pc, #252]	; (80050ac <eepromKontrol+0x4c4>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d902      	bls.n	8004fbc <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8004fb6:	4b3d      	ldr	r3, [pc, #244]	; (80050ac <eepromKontrol+0x4c4>)
 8004fb8:	2201      	movs	r2, #1
 8004fba:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8004fbc:	4b3c      	ldr	r3, [pc, #240]	; (80050b0 <eepromKontrol+0x4c8>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d902      	bls.n	8004fca <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8004fc4:	4b3a      	ldr	r3, [pc, #232]	; (80050b0 <eepromKontrol+0x4c8>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8004fca:	4b3a      	ldr	r3, [pc, #232]	; (80050b4 <eepromKontrol+0x4cc>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d902      	bls.n	8004fd8 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8004fd2:	4b38      	ldr	r3, [pc, #224]	; (80050b4 <eepromKontrol+0x4cc>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8004fd8:	4b37      	ldr	r3, [pc, #220]	; (80050b8 <eepromKontrol+0x4d0>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b05      	cmp	r3, #5
 8004fde:	d902      	bls.n	8004fe6 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8004fe0:	4b35      	ldr	r3, [pc, #212]	; (80050b8 <eepromKontrol+0x4d0>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8004fe6:	4b35      	ldr	r3, [pc, #212]	; (80050bc <eepromKontrol+0x4d4>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b05      	cmp	r3, #5
 8004fec:	d902      	bls.n	8004ff4 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8004fee:	4b33      	ldr	r3, [pc, #204]	; (80050bc <eepromKontrol+0x4d4>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8004ff4:	4b32      	ldr	r3, [pc, #200]	; (80050c0 <eepromKontrol+0x4d8>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b05      	cmp	r3, #5
 8004ffa:	d902      	bls.n	8005002 <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8004ffc:	4b30      	ldr	r3, [pc, #192]	; (80050c0 <eepromKontrol+0x4d8>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005002:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <eepromKontrol+0x4dc>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b05      	cmp	r3, #5
 8005008:	d902      	bls.n	8005010 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 800500a:	4b2e      	ldr	r3, [pc, #184]	; (80050c4 <eepromKontrol+0x4dc>)
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005010:	4b2d      	ldr	r3, [pc, #180]	; (80050c8 <eepromKontrol+0x4e0>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2bb4      	cmp	r3, #180	; 0xb4
 8005016:	d902      	bls.n	800501e <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005018:	4b2b      	ldr	r3, [pc, #172]	; (80050c8 <eepromKontrol+0x4e0>)
 800501a:	223c      	movs	r2, #60	; 0x3c
 800501c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800501e:	4b2b      	ldr	r3, [pc, #172]	; (80050cc <eepromKontrol+0x4e4>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d902      	bls.n	800502c <eepromKontrol+0x444>
	    buzzer=0;
 8005026:	4b29      	ldr	r3, [pc, #164]	; (80050cc <eepromKontrol+0x4e4>)
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800502c:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <eepromKontrol+0x4e8>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d902      	bls.n	800503a <eepromKontrol+0x452>
	    demoMode=0;
 8005034:	4b26      	ldr	r3, [pc, #152]	; (80050d0 <eepromKontrol+0x4e8>)
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800503a:	4b26      	ldr	r3, [pc, #152]	; (80050d4 <eepromKontrol+0x4ec>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d902      	bls.n	8005048 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005042:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <eepromKontrol+0x4ec>)
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005048:	4b23      	ldr	r3, [pc, #140]	; (80050d8 <eepromKontrol+0x4f0>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d902      	bls.n	8005056 <eepromKontrol+0x46e>
	    dilSecim=0;
 8005050:	4b21      	ldr	r3, [pc, #132]	; (80050d8 <eepromKontrol+0x4f0>)
 8005052:	2200      	movs	r2, #0
 8005054:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005056:	4b21      	ldr	r3, [pc, #132]	; (80050dc <eepromKontrol+0x4f4>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d902      	bls.n	8005064 <eepromKontrol+0x47c>
		iotMode=0;
 800505e:	4b1f      	ldr	r3, [pc, #124]	; (80050dc <eepromKontrol+0x4f4>)
 8005060:	2200      	movs	r2, #0
 8005062:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8005064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005068:	f003 fe1e 	bl	8008ca8 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 800506c:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <eepromKontrol+0x4f4>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d104      	bne.n	800507e <eepromKontrol+0x496>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <eepromKontrol+0x496>
		convertAndSendData();
 800507a:	f7ff fd81 	bl	8004b80 <convertAndSendData>
	}
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000b45 	.word	0x20000b45
 800508c:	20000b36 	.word	0x20000b36
 8005090:	20000b46 	.word	0x20000b46
 8005094:	20000b37 	.word	0x20000b37
 8005098:	20000b39 	.word	0x20000b39
 800509c:	20000b47 	.word	0x20000b47
 80050a0:	20000b3a 	.word	0x20000b3a
 80050a4:	20000b3b 	.word	0x20000b3b
 80050a8:	20000b3c 	.word	0x20000b3c
 80050ac:	20000b3d 	.word	0x20000b3d
 80050b0:	20000b3e 	.word	0x20000b3e
 80050b4:	20000b3f 	.word	0x20000b3f
 80050b8:	20000b40 	.word	0x20000b40
 80050bc:	20000b41 	.word	0x20000b41
 80050c0:	20000b42 	.word	0x20000b42
 80050c4:	20000b43 	.word	0x20000b43
 80050c8:	20000b44 	.word	0x20000b44
 80050cc:	20000b48 	.word	0x20000b48
 80050d0:	20000b4a 	.word	0x20000b4a
 80050d4:	20000b4c 	.word	0x20000b4c
 80050d8:	20000b4d 	.word	0x20000b4d
 80050dc:	20000b4b 	.word	0x20000b4b

080050e0 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 80050e0:	b590      	push	{r4, r7, lr}
 80050e2:	b089      	sub	sp, #36	; 0x24
 80050e4:	af04      	add	r7, sp, #16
 80050e6:	4603      	mov	r3, r0
 80050e8:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80050ea:	4b26      	ldr	r3, [pc, #152]	; (8005184 <hata2EEPROM+0xa4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	1e5a      	subs	r2, r3, #1
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <hata2EEPROM+0xa8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4413      	add	r3, r2
 80050f6:	4a25      	ldr	r2, [pc, #148]	; (800518c <hata2EEPROM+0xac>)
 80050f8:	5cd3      	ldrb	r3, [r2, r3]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80050fe:	f000 f849 	bl	8005194 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8005102:	e000      	b.n	8005106 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005104:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	e012      	b.n	8005132 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 800510c:	4b1e      	ldr	r3, [pc, #120]	; (8005188 <hata2EEPROM+0xa8>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	4a1d      	ldr	r2, [pc, #116]	; (800518c <hata2EEPROM+0xac>)
 8005116:	5cd3      	ldrb	r3, [r2, r3]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d107      	bne.n	800512c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 800511c:	4b1a      	ldr	r3, [pc, #104]	; (8005188 <hata2EEPROM+0xa8>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	4919      	ldr	r1, [pc, #100]	; (800518c <hata2EEPROM+0xac>)
 8005126:	79fa      	ldrb	r2, [r7, #7]
 8005128:	54ca      	strb	r2, [r1, r3]
					break;
 800512a:	e007      	b.n	800513c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3301      	adds	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	4b14      	ldr	r3, [pc, #80]	; (8005184 <hata2EEPROM+0xa4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	429a      	cmp	r2, r3
 800513a:	dbe7      	blt.n	800510c <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 800513c:	4b12      	ldr	r3, [pc, #72]	; (8005188 <hata2EEPROM+0xa8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	b299      	uxth	r1, r3
 8005142:	4b10      	ldr	r3, [pc, #64]	; (8005184 <hata2EEPROM+0xa4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	b298      	uxth	r0, r3
 8005148:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <hata2EEPROM+0xa8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a0f      	ldr	r2, [pc, #60]	; (800518c <hata2EEPROM+0xac>)
 800514e:	4413      	add	r3, r2
 8005150:	4a0c      	ldr	r2, [pc, #48]	; (8005184 <hata2EEPROM+0xa4>)
 8005152:	6812      	ldr	r2, [r2, #0]
 8005154:	b292      	uxth	r2, r2
 8005156:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800515a:	9402      	str	r4, [sp, #8]
 800515c:	9201      	str	r2, [sp, #4]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	4603      	mov	r3, r0
 8005162:	460a      	mov	r2, r1
 8005164:	21a0      	movs	r1, #160	; 0xa0
 8005166:	480a      	ldr	r0, [pc, #40]	; (8005190 <hata2EEPROM+0xb0>)
 8005168:	f004 fe28 	bl	8009dbc <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 800516c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005170:	f003 fd9a 	bl	8008ca8 <HAL_Delay>
	eepromKontrol(1);
 8005174:	2001      	movs	r0, #1
 8005176:	f7ff fd37 	bl	8004be8 <eepromKontrol>
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	bd90      	pop	{r4, r7, pc}
 8005182:	bf00      	nop
 8005184:	20000938 	.word	0x20000938
 8005188:	2000093c 	.word	0x2000093c
 800518c:	20000ac0 	.word	0x20000ac0
 8005190:	20000d3c 	.word	0x20000d3c

08005194 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 800519a:	2300      	movs	r3, #0
 800519c:	607b      	str	r3, [r7, #4]
 800519e:	e009      	b.n	80051b4 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 80051a0:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <eepromDataFillWithEmpty+0x38>)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a8:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <eepromDataFillWithEmpty+0x3c>)
 80051aa:	2100      	movs	r1, #0
 80051ac:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3301      	adds	r3, #1
 80051b2:	607b      	str	r3, [r7, #4]
 80051b4:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <eepromDataFillWithEmpty+0x40>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	dbf0      	blt.n	80051a0 <eepromDataFillWithEmpty+0xc>
	}
}
 80051be:	bf00      	nop
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20000910 	.word	0x20000910
 80051d0:	20000ac0 	.word	0x20000ac0
 80051d4:	20000938 	.word	0x20000938

080051d8 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
	timer1=millis;
 80051dc:	4b47      	ldr	r3, [pc, #284]	; (80052fc <bekle+0x124>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a47      	ldr	r2, [pc, #284]	; (8005300 <bekle+0x128>)
 80051e2:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80051e4:	e002      	b.n	80051ec <bekle+0x14>
    	butonKontrol = 1;
 80051e6:	4b47      	ldr	r3, [pc, #284]	; (8005304 <bekle+0x12c>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80051ec:	2101      	movs	r1, #1
 80051ee:	4846      	ldr	r0, [pc, #280]	; (8005308 <bekle+0x130>)
 80051f0:	f004 fb2a 	bl	8009848 <HAL_GPIO_ReadPin>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d109      	bne.n	800520e <bekle+0x36>
 80051fa:	4b40      	ldr	r3, [pc, #256]	; (80052fc <bekle+0x124>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4b40      	ldr	r3, [pc, #256]	; (8005300 <bekle+0x128>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d0ef      	beq.n	80051e6 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005206:	e002      	b.n	800520e <bekle+0x36>
    	butonKontrol = 1;
 8005208:	4b3e      	ldr	r3, [pc, #248]	; (8005304 <bekle+0x12c>)
 800520a:	2201      	movs	r2, #1
 800520c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800520e:	2108      	movs	r1, #8
 8005210:	483e      	ldr	r0, [pc, #248]	; (800530c <bekle+0x134>)
 8005212:	f004 fb19 	bl	8009848 <HAL_GPIO_ReadPin>
 8005216:	4603      	mov	r3, r0
 8005218:	2b01      	cmp	r3, #1
 800521a:	d109      	bne.n	8005230 <bekle+0x58>
 800521c:	4b37      	ldr	r3, [pc, #220]	; (80052fc <bekle+0x124>)
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	4b37      	ldr	r3, [pc, #220]	; (8005300 <bekle+0x128>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d0ef      	beq.n	8005208 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005228:	e002      	b.n	8005230 <bekle+0x58>
    	butonKontrol = 1;
 800522a:	4b36      	ldr	r3, [pc, #216]	; (8005304 <bekle+0x12c>)
 800522c:	2201      	movs	r2, #1
 800522e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005230:	2102      	movs	r1, #2
 8005232:	4835      	ldr	r0, [pc, #212]	; (8005308 <bekle+0x130>)
 8005234:	f004 fb08 	bl	8009848 <HAL_GPIO_ReadPin>
 8005238:	4603      	mov	r3, r0
 800523a:	2b01      	cmp	r3, #1
 800523c:	d109      	bne.n	8005252 <bekle+0x7a>
 800523e:	4b2f      	ldr	r3, [pc, #188]	; (80052fc <bekle+0x124>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b2f      	ldr	r3, [pc, #188]	; (8005300 <bekle+0x128>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d0ef      	beq.n	800522a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800524a:	e002      	b.n	8005252 <bekle+0x7a>
    	butonKontrol = 1;
 800524c:	4b2d      	ldr	r3, [pc, #180]	; (8005304 <bekle+0x12c>)
 800524e:	2201      	movs	r2, #1
 8005250:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005252:	2104      	movs	r1, #4
 8005254:	482c      	ldr	r0, [pc, #176]	; (8005308 <bekle+0x130>)
 8005256:	f004 faf7 	bl	8009848 <HAL_GPIO_ReadPin>
 800525a:	4603      	mov	r3, r0
 800525c:	2b01      	cmp	r3, #1
 800525e:	d109      	bne.n	8005274 <bekle+0x9c>
 8005260:	4b26      	ldr	r3, [pc, #152]	; (80052fc <bekle+0x124>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b26      	ldr	r3, [pc, #152]	; (8005300 <bekle+0x128>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d0ef      	beq.n	800524c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800526c:	e002      	b.n	8005274 <bekle+0x9c>
    	butonKontrol = 1;
 800526e:	4b25      	ldr	r3, [pc, #148]	; (8005304 <bekle+0x12c>)
 8005270:	2201      	movs	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005274:	2108      	movs	r1, #8
 8005276:	4824      	ldr	r0, [pc, #144]	; (8005308 <bekle+0x130>)
 8005278:	f004 fae6 	bl	8009848 <HAL_GPIO_ReadPin>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d109      	bne.n	8005296 <bekle+0xbe>
 8005282:	4b1e      	ldr	r3, [pc, #120]	; (80052fc <bekle+0x124>)
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	4b1e      	ldr	r3, [pc, #120]	; (8005300 <bekle+0x128>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d0ef      	beq.n	800526e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800528e:	e002      	b.n	8005296 <bekle+0xbe>
    	butonKontrol = 1;
 8005290:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <bekle+0x12c>)
 8005292:	2201      	movs	r2, #1
 8005294:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005296:	2180      	movs	r1, #128	; 0x80
 8005298:	481c      	ldr	r0, [pc, #112]	; (800530c <bekle+0x134>)
 800529a:	f004 fad5 	bl	8009848 <HAL_GPIO_ReadPin>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d109      	bne.n	80052b8 <bekle+0xe0>
 80052a4:	4b15      	ldr	r3, [pc, #84]	; (80052fc <bekle+0x124>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4b15      	ldr	r3, [pc, #84]	; (8005300 <bekle+0x128>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d0ef      	beq.n	8005290 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80052b0:	e002      	b.n	80052b8 <bekle+0xe0>
    	butonKontrol = 1;
 80052b2:	4b14      	ldr	r3, [pc, #80]	; (8005304 <bekle+0x12c>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80052b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052bc:	4813      	ldr	r0, [pc, #76]	; (800530c <bekle+0x134>)
 80052be:	f004 fac3 	bl	8009848 <HAL_GPIO_ReadPin>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <bekle+0x104>
 80052c8:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <bekle+0x124>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <bekle+0x128>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d0ee      	beq.n	80052b2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80052d4:	e002      	b.n	80052dc <bekle+0x104>
    	butonKontrol = 1;
 80052d6:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <bekle+0x12c>)
 80052d8:	2201      	movs	r2, #1
 80052da:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80052dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052e0:	480a      	ldr	r0, [pc, #40]	; (800530c <bekle+0x134>)
 80052e2:	f004 fab1 	bl	8009848 <HAL_GPIO_ReadPin>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d105      	bne.n	80052f8 <bekle+0x120>
 80052ec:	4b03      	ldr	r3, [pc, #12]	; (80052fc <bekle+0x124>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	4b03      	ldr	r3, [pc, #12]	; (8005300 <bekle+0x128>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d0ee      	beq.n	80052d6 <bekle+0xfe>
    }

}
 80052f8:	bf00      	nop
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000b08 	.word	0x20000b08
 8005300:	20000b10 	.word	0x20000b10
 8005304:	20000b5b 	.word	0x20000b5b
 8005308:	40010800 	.word	0x40010800
 800530c:	40011000 	.word	0x40011000

08005310 <i2cTest>:

void i2cTest() {
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8005316:	463b      	mov	r3, r7
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	609a      	str	r2, [r3, #8]
 8005320:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8005322:	4b50      	ldr	r3, [pc, #320]	; (8005464 <i2cTest+0x154>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	4b4e      	ldr	r3, [pc, #312]	; (8005464 <i2cTest+0x154>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0201 	bic.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8005332:	484c      	ldr	r0, [pc, #304]	; (8005464 <i2cTest+0x154>)
 8005334:	f004 fc14 	bl	8009b60 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005338:	23c0      	movs	r3, #192	; 0xc0
 800533a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 800533c:	2311      	movs	r3, #17
 800533e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8005340:	2301      	movs	r3, #1
 8005342:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005344:	2303      	movs	r3, #3
 8005346:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005348:	463b      	mov	r3, r7
 800534a:	4619      	mov	r1, r3
 800534c:	4846      	ldr	r0, [pc, #280]	; (8005468 <i2cTest+0x158>)
 800534e:	f004 f81b 	bl	8009388 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8005352:	2201      	movs	r2, #1
 8005354:	2140      	movs	r1, #64	; 0x40
 8005356:	4844      	ldr	r0, [pc, #272]	; (8005468 <i2cTest+0x158>)
 8005358:	f004 fa8d 	bl	8009876 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800535c:	2201      	movs	r2, #1
 800535e:	2180      	movs	r1, #128	; 0x80
 8005360:	4841      	ldr	r0, [pc, #260]	; (8005468 <i2cTest+0x158>)
 8005362:	f004 fa88 	bl	8009876 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8005366:	200a      	movs	r0, #10
 8005368:	f003 fc9e 	bl	8008ca8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800536c:	bf00      	nop
 800536e:	2140      	movs	r1, #64	; 0x40
 8005370:	483d      	ldr	r0, [pc, #244]	; (8005468 <i2cTest+0x158>)
 8005372:	f004 fa69 	bl	8009848 <HAL_GPIO_ReadPin>
 8005376:	4603      	mov	r3, r0
 8005378:	2b01      	cmp	r3, #1
 800537a:	d006      	beq.n	800538a <i2cTest+0x7a>
 800537c:	2180      	movs	r1, #128	; 0x80
 800537e:	483a      	ldr	r0, [pc, #232]	; (8005468 <i2cTest+0x158>)
 8005380:	f004 fa62 	bl	8009848 <HAL_GPIO_ReadPin>
 8005384:	4603      	mov	r3, r0
 8005386:	2b01      	cmp	r3, #1
 8005388:	d1f1      	bne.n	800536e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800538a:	2200      	movs	r2, #0
 800538c:	2180      	movs	r1, #128	; 0x80
 800538e:	4836      	ldr	r0, [pc, #216]	; (8005468 <i2cTest+0x158>)
 8005390:	f004 fa71 	bl	8009876 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8005394:	200a      	movs	r0, #10
 8005396:	f003 fc87 	bl	8008ca8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800539a:	bf00      	nop
 800539c:	2180      	movs	r1, #128	; 0x80
 800539e:	4832      	ldr	r0, [pc, #200]	; (8005468 <i2cTest+0x158>)
 80053a0:	f004 fa52 	bl	8009848 <HAL_GPIO_ReadPin>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d0f8      	beq.n	800539c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80053aa:	2200      	movs	r2, #0
 80053ac:	2140      	movs	r1, #64	; 0x40
 80053ae:	482e      	ldr	r0, [pc, #184]	; (8005468 <i2cTest+0x158>)
 80053b0:	f004 fa61 	bl	8009876 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80053b4:	200a      	movs	r0, #10
 80053b6:	f003 fc77 	bl	8008ca8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80053ba:	bf00      	nop
 80053bc:	2140      	movs	r1, #64	; 0x40
 80053be:	482a      	ldr	r0, [pc, #168]	; (8005468 <i2cTest+0x158>)
 80053c0:	f004 fa42 	bl	8009848 <HAL_GPIO_ReadPin>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d0f8      	beq.n	80053bc <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80053ca:	2201      	movs	r2, #1
 80053cc:	2140      	movs	r1, #64	; 0x40
 80053ce:	4826      	ldr	r0, [pc, #152]	; (8005468 <i2cTest+0x158>)
 80053d0:	f004 fa51 	bl	8009876 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80053d4:	200a      	movs	r0, #10
 80053d6:	f003 fc67 	bl	8008ca8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80053da:	bf00      	nop
 80053dc:	2140      	movs	r1, #64	; 0x40
 80053de:	4822      	ldr	r0, [pc, #136]	; (8005468 <i2cTest+0x158>)
 80053e0:	f004 fa32 	bl	8009848 <HAL_GPIO_ReadPin>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d1f8      	bne.n	80053dc <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80053ea:	2201      	movs	r2, #1
 80053ec:	2180      	movs	r1, #128	; 0x80
 80053ee:	481e      	ldr	r0, [pc, #120]	; (8005468 <i2cTest+0x158>)
 80053f0:	f004 fa41 	bl	8009876 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80053f4:	200a      	movs	r0, #10
 80053f6:	f003 fc57 	bl	8008ca8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80053fa:	bf00      	nop
 80053fc:	2180      	movs	r1, #128	; 0x80
 80053fe:	481a      	ldr	r0, [pc, #104]	; (8005468 <i2cTest+0x158>)
 8005400:	f004 fa22 	bl	8009848 <HAL_GPIO_ReadPin>
 8005404:	4603      	mov	r3, r0
 8005406:	2b01      	cmp	r3, #1
 8005408:	d1f8      	bne.n	80053fc <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800540a:	23c0      	movs	r3, #192	; 0xc0
 800540c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800540e:	2312      	movs	r3, #18
 8005410:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8005412:	2301      	movs	r3, #1
 8005414:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005416:	2303      	movs	r3, #3
 8005418:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800541a:	463b      	mov	r3, r7
 800541c:	4619      	mov	r1, r3
 800541e:	4812      	ldr	r0, [pc, #72]	; (8005468 <i2cTest+0x158>)
 8005420:	f003 ffb2 	bl	8009388 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8005424:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <i2cTest+0x154>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b0e      	ldr	r3, [pc, #56]	; (8005464 <i2cTest+0x154>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005432:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8005434:	4b0b      	ldr	r3, [pc, #44]	; (8005464 <i2cTest+0x154>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <i2cTest+0x154>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005442:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <i2cTest+0x154>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <i2cTest+0x154>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8005454:	4803      	ldr	r0, [pc, #12]	; (8005464 <i2cTest+0x154>)
 8005456:	f004 fa3f 	bl	80098d8 <HAL_I2C_Init>
}
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000d3c 	.word	0x20000d3c
 8005468:	40010c00 	.word	0x40010c00

0800546c <checkLCDBacklight>:

void checkLCDBacklight() {
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <checkLCDBacklight+0x34>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <checkLCDBacklight+0x38>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	1ad2      	subs	r2, r2, r3
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <checkLCDBacklight+0x3c>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	4619      	mov	r1, r3
 8005480:	460b      	mov	r3, r1
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	429a      	cmp	r2, r3
 800548a:	d303      	bcc.n	8005494 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 800548c:	2000      	movs	r0, #0
 800548e:	f7fb f9df 	bl	8000850 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8005492:	e002      	b.n	800549a <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8005494:	2001      	movs	r0, #1
 8005496:	f7fb f9db 	bl	8000850 <lcd_backlight>
}
 800549a:	bf00      	nop
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000b08 	.word	0x20000b08
 80054a4:	20000b24 	.word	0x20000b24
 80054a8:	20000940 	.word	0x20000940

080054ac <checkBasincSalteri>:

void checkBasincSalteri() {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80054b0:	4b13      	ldr	r3, [pc, #76]	; (8005500 <checkBasincSalteri+0x54>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d102      	bne.n	80054be <checkBasincSalteri+0x12>
		basincVar=1;
 80054b8:	4b12      	ldr	r3, [pc, #72]	; (8005504 <checkBasincSalteri+0x58>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80054be:	4b10      	ldr	r3, [pc, #64]	; (8005500 <checkBasincSalteri+0x54>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d119      	bne.n	80054fa <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80054c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054ca:	480f      	ldr	r0, [pc, #60]	; (8005508 <checkBasincSalteri+0x5c>)
 80054cc:	f004 f9bc 	bl	8009848 <HAL_GPIO_ReadPin>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80054d6:	4b0d      	ldr	r3, [pc, #52]	; (800550c <checkBasincSalteri+0x60>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <checkBasincSalteri+0x64>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d90a      	bls.n	80054fa <checkBasincSalteri+0x4e>
				basincVar=1;
 80054e4:	4b07      	ldr	r3, [pc, #28]	; (8005504 <checkBasincSalteri+0x58>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80054ea:	e006      	b.n	80054fa <checkBasincSalteri+0x4e>
			timer5=millis;
 80054ec:	4b07      	ldr	r3, [pc, #28]	; (800550c <checkBasincSalteri+0x60>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a07      	ldr	r2, [pc, #28]	; (8005510 <checkBasincSalteri+0x64>)
 80054f2:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80054f4:	4b03      	ldr	r3, [pc, #12]	; (8005504 <checkBasincSalteri+0x58>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]
}
 80054fa:	bf00      	nop
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000b33 	.word	0x20000b33
 8005504:	20000b2f 	.word	0x20000b2f
 8005508:	40011000 	.word	0x40011000
 800550c:	20000b08 	.word	0x20000b08
 8005510:	20000b20 	.word	0x20000b20

08005514 <checkBasGonder>:

void checkBasGonder() {
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005518:	4b1b      	ldr	r3, [pc, #108]	; (8005588 <checkBasGonder+0x74>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d10b      	bne.n	8005538 <checkBasGonder+0x24>
 8005520:	4b1a      	ldr	r3, [pc, #104]	; (800558c <checkBasGonder+0x78>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d007      	beq.n	8005538 <checkBasGonder+0x24>
 8005528:	4b19      	ldr	r3, [pc, #100]	; (8005590 <checkBasGonder+0x7c>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d103      	bne.n	8005538 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8005530:	4b18      	ldr	r3, [pc, #96]	; (8005594 <checkBasGonder+0x80>)
 8005532:	2201      	movs	r2, #1
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	e009      	b.n	800554c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8005538:	4b14      	ldr	r3, [pc, #80]	; (800558c <checkBasGonder+0x78>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	f083 0301 	eor.w	r3, r3, #1
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <checkBasGonder+0x80>)
 8005548:	2200      	movs	r2, #0
 800554a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 800554c:	4b0e      	ldr	r3, [pc, #56]	; (8005588 <checkBasGonder+0x74>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d10b      	bne.n	800556c <checkBasGonder+0x58>
 8005554:	4b10      	ldr	r3, [pc, #64]	; (8005598 <checkBasGonder+0x84>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <checkBasGonder+0x58>
 800555c:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <checkBasGonder+0x7c>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d103      	bne.n	800556c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8005564:	4b0d      	ldr	r3, [pc, #52]	; (800559c <checkBasGonder+0x88>)
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800556a:	e009      	b.n	8005580 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 800556c:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <checkBasGonder+0x84>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	f083 0301 	eor.w	r3, r3, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800557a:	4b08      	ldr	r3, [pc, #32]	; (800559c <checkBasGonder+0x88>)
 800557c:	2200      	movs	r2, #0
 800557e:	701a      	strb	r2, [r3, #0]
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr
 8005588:	20000b2d 	.word	0x20000b2d
 800558c:	20000b61 	.word	0x20000b61
 8005590:	20000b3b 	.word	0x20000b3b
 8005594:	20000b68 	.word	0x20000b68
 8005598:	20000b64 	.word	0x20000b64
 800559c:	20000b69 	.word	0x20000b69

080055a0 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80055a4:	4b24      	ldr	r3, [pc, #144]	; (8005638 <checkKapiSecimleri+0x98>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d102      	bne.n	80055b2 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80055ac:	4b23      	ldr	r3, [pc, #140]	; (800563c <checkKapiSecimleri+0x9c>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80055b2:	4b21      	ldr	r3, [pc, #132]	; (8005638 <checkKapiSecimleri+0x98>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d10e      	bne.n	80055d8 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80055ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055be:	4820      	ldr	r0, [pc, #128]	; (8005640 <checkKapiSecimleri+0xa0>)
 80055c0:	f004 f942 	bl	8009848 <HAL_GPIO_ReadPin>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d103      	bne.n	80055d2 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80055ca:	4b1c      	ldr	r3, [pc, #112]	; (800563c <checkKapiSecimleri+0x9c>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	e002      	b.n	80055d8 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80055d2:	4b1a      	ldr	r3, [pc, #104]	; (800563c <checkKapiSecimleri+0x9c>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80055d8:	4b17      	ldr	r3, [pc, #92]	; (8005638 <checkKapiSecimleri+0x98>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d10e      	bne.n	80055fe <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80055e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055e4:	4816      	ldr	r0, [pc, #88]	; (8005640 <checkKapiSecimleri+0xa0>)
 80055e6:	f004 f92f 	bl	8009848 <HAL_GPIO_ReadPin>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d103      	bne.n	80055f8 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80055f0:	4b12      	ldr	r3, [pc, #72]	; (800563c <checkKapiSecimleri+0x9c>)
 80055f2:	2201      	movs	r2, #1
 80055f4:	701a      	strb	r2, [r3, #0]
 80055f6:	e002      	b.n	80055fe <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80055f8:	4b10      	ldr	r3, [pc, #64]	; (800563c <checkKapiSecimleri+0x9c>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80055fe:	4b0e      	ldr	r3, [pc, #56]	; (8005638 <checkKapiSecimleri+0x98>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b03      	cmp	r3, #3
 8005604:	d116      	bne.n	8005634 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8005606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800560a:	480d      	ldr	r0, [pc, #52]	; (8005640 <checkKapiSecimleri+0xa0>)
 800560c:	f004 f91c 	bl	8009848 <HAL_GPIO_ReadPin>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10b      	bne.n	800562e <checkKapiSecimleri+0x8e>
 8005616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800561a:	4809      	ldr	r0, [pc, #36]	; (8005640 <checkKapiSecimleri+0xa0>)
 800561c:	f004 f914 	bl	8009848 <HAL_GPIO_ReadPin>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d103      	bne.n	800562e <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <checkKapiSecimleri+0x9c>)
 8005628:	2201      	movs	r2, #1
 800562a:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 800562c:	e002      	b.n	8005634 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800562e:	4b03      	ldr	r3, [pc, #12]	; (800563c <checkKapiSecimleri+0x9c>)
 8005630:	2200      	movs	r2, #0
 8005632:	701a      	strb	r2, [r3, #0]
}
 8005634:	bf00      	nop
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20000b34 	.word	0x20000b34
 800563c:	20000b7f 	.word	0x20000b7f
 8005640:	40010800 	.word	0x40010800

08005644 <checkAktifCalisma>:

void checkAktifCalisma() {
 8005644:	b580      	push	{r7, lr}
 8005646:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005648:	4b62      	ldr	r3, [pc, #392]	; (80057d4 <checkAktifCalisma+0x190>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f041 8332 	bne.w	8006cb6 <checkAktifCalisma+0x1672>
 8005652:	4b61      	ldr	r3, [pc, #388]	; (80057d8 <checkAktifCalisma+0x194>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	f041 832d 	bne.w	8006cb6 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 800565c:	4b5f      	ldr	r3, [pc, #380]	; (80057dc <checkAktifCalisma+0x198>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d11a      	bne.n	800569a <checkAktifCalisma+0x56>
 8005664:	4b5e      	ldr	r3, [pc, #376]	; (80057e0 <checkAktifCalisma+0x19c>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d116      	bne.n	800569a <checkAktifCalisma+0x56>
 800566c:	4b5d      	ldr	r3, [pc, #372]	; (80057e4 <checkAktifCalisma+0x1a0>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <checkAktifCalisma+0x46>
 8005674:	4b5c      	ldr	r3, [pc, #368]	; (80057e8 <checkAktifCalisma+0x1a4>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	f083 0301 	eor.w	r3, r3, #1
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <checkAktifCalisma+0x46>
 8005682:	4b5a      	ldr	r3, [pc, #360]	; (80057ec <checkAktifCalisma+0x1a8>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d007      	beq.n	800569a <checkAktifCalisma+0x56>
 800568a:	4b59      	ldr	r3, [pc, #356]	; (80057f0 <checkAktifCalisma+0x1ac>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d018      	beq.n	80056c4 <checkAktifCalisma+0x80>
 8005692:	4b58      	ldr	r3, [pc, #352]	; (80057f4 <checkAktifCalisma+0x1b0>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d114      	bne.n	80056c4 <checkAktifCalisma+0x80>
 800569a:	4b57      	ldr	r3, [pc, #348]	; (80057f8 <checkAktifCalisma+0x1b4>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d010      	beq.n	80056c4 <checkAktifCalisma+0x80>
 80056a2:	4b56      	ldr	r3, [pc, #344]	; (80057fc <checkAktifCalisma+0x1b8>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00c      	beq.n	80056c4 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80056aa:	2201      	movs	r2, #1
 80056ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056b0:	4853      	ldr	r0, [pc, #332]	; (8005800 <checkAktifCalisma+0x1bc>)
 80056b2:	f004 f8e0 	bl	8009876 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 80056b6:	4b53      	ldr	r3, [pc, #332]	; (8005804 <checkAktifCalisma+0x1c0>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80056bc:	4b52      	ldr	r3, [pc, #328]	; (8005808 <checkAktifCalisma+0x1c4>)
 80056be:	2201      	movs	r2, #1
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	e008      	b.n	80056d6 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80056c4:	2200      	movs	r2, #0
 80056c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056ca:	484d      	ldr	r0, [pc, #308]	; (8005800 <checkAktifCalisma+0x1bc>)
 80056cc:	f004 f8d3 	bl	8009876 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80056d0:	4b4c      	ldr	r3, [pc, #304]	; (8005804 <checkAktifCalisma+0x1c0>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80056d6:	4b40      	ldr	r3, [pc, #256]	; (80057d8 <checkAktifCalisma+0x194>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d160      	bne.n	80057a0 <checkAktifCalisma+0x15c>
 80056de:	4b46      	ldr	r3, [pc, #280]	; (80057f8 <checkAktifCalisma+0x1b4>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d05c      	beq.n	80057a0 <checkAktifCalisma+0x15c>
 80056e6:	4b45      	ldr	r3, [pc, #276]	; (80057fc <checkAktifCalisma+0x1b8>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d058      	beq.n	80057a0 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80056ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056f2:	4843      	ldr	r0, [pc, #268]	; (8005800 <checkAktifCalisma+0x1bc>)
 80056f4:	f004 f8a8 	bl	8009848 <HAL_GPIO_ReadPin>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <checkAktifCalisma+0xc2>
 80056fe:	4b43      	ldr	r3, [pc, #268]	; (800580c <checkAktifCalisma+0x1c8>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d04c      	beq.n	80057a0 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005706:	2102      	movs	r1, #2
 8005708:	4841      	ldr	r0, [pc, #260]	; (8005810 <checkAktifCalisma+0x1cc>)
 800570a:	f004 f89d 	bl	8009848 <HAL_GPIO_ReadPin>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d145      	bne.n	80057a0 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8005714:	4b3f      	ldr	r3, [pc, #252]	; (8005814 <checkAktifCalisma+0x1d0>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d041      	beq.n	80057a0 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 800571c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005720:	4837      	ldr	r0, [pc, #220]	; (8005800 <checkAktifCalisma+0x1bc>)
 8005722:	f004 f891 	bl	8009848 <HAL_GPIO_ReadPin>
 8005726:	4603      	mov	r3, r0
 8005728:	2b01      	cmp	r3, #1
 800572a:	d10e      	bne.n	800574a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800572c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005730:	4833      	ldr	r0, [pc, #204]	; (8005800 <checkAktifCalisma+0x1bc>)
 8005732:	f004 f889 	bl	8009848 <HAL_GPIO_ReadPin>
 8005736:	4603      	mov	r3, r0
 8005738:	2b01      	cmp	r3, #1
 800573a:	d106      	bne.n	800574a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 800573c:	2140      	movs	r1, #64	; 0x40
 800573e:	4834      	ldr	r0, [pc, #208]	; (8005810 <checkAktifCalisma+0x1cc>)
 8005740:	f004 f882 	bl	8009848 <HAL_GPIO_ReadPin>
 8005744:	4603      	mov	r3, r0
 8005746:	2b01      	cmp	r3, #1
 8005748:	d003      	beq.n	8005752 <checkAktifCalisma+0x10e>
 800574a:	4b24      	ldr	r3, [pc, #144]	; (80057dc <checkAktifCalisma+0x198>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d026      	beq.n	80057a0 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8005752:	4b24      	ldr	r3, [pc, #144]	; (80057e4 <checkAktifCalisma+0x1a0>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	f083 0301 	eor.w	r3, r3, #1
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01f      	beq.n	80057a0 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8005760:	4b1f      	ldr	r3, [pc, #124]	; (80057e0 <checkAktifCalisma+0x19c>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f083 0301 	eor.w	r3, r3, #1
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d018      	beq.n	80057a0 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800576e:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <checkAktifCalisma+0x1ac>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f083 0301 	eor.w	r3, r3, #1
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d011      	beq.n	80057a0 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 800577c:	4b26      	ldr	r3, [pc, #152]	; (8005818 <checkAktifCalisma+0x1d4>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f083 0301 	eor.w	r3, r3, #1
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800578a:	4b24      	ldr	r3, [pc, #144]	; (800581c <checkAktifCalisma+0x1d8>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f083 0301 	eor.w	r3, r3, #1
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8005798:	4b10      	ldr	r3, [pc, #64]	; (80057dc <checkAktifCalisma+0x198>)
 800579a:	2201      	movs	r2, #1
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	e002      	b.n	80057a6 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80057a0:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <checkAktifCalisma+0x198>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80057a6:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <checkAktifCalisma+0x198>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d03a      	beq.n	8005824 <checkAktifCalisma+0x1e0>
 80057ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057b2:	4817      	ldr	r0, [pc, #92]	; (8005810 <checkAktifCalisma+0x1cc>)
 80057b4:	f004 f848 	bl	8009848 <HAL_GPIO_ReadPin>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d132      	bne.n	8005824 <checkAktifCalisma+0x1e0>
 80057be:	4b18      	ldr	r3, [pc, #96]	; (8005820 <checkAktifCalisma+0x1dc>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d02e      	beq.n	8005824 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80057c6:	2201      	movs	r2, #1
 80057c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057cc:	480c      	ldr	r0, [pc, #48]	; (8005800 <checkAktifCalisma+0x1bc>)
 80057ce:	f004 f852 	bl	8009876 <HAL_GPIO_WritePin>
 80057d2:	e02d      	b.n	8005830 <checkAktifCalisma+0x1ec>
 80057d4:	20000b4a 	.word	0x20000b4a
 80057d8:	20000b49 	.word	0x20000b49
 80057dc:	20000b61 	.word	0x20000b61
 80057e0:	20000b62 	.word	0x20000b62
 80057e4:	20000b64 	.word	0x20000b64
 80057e8:	20000b5c 	.word	0x20000b5c
 80057ec:	20000b3f 	.word	0x20000b3f
 80057f0:	20000b63 	.word	0x20000b63
 80057f4:	20000b3e 	.word	0x20000b3e
 80057f8:	20000b7e 	.word	0x20000b7e
 80057fc:	20000b7f 	.word	0x20000b7f
 8005800:	40010c00 	.word	0x40010c00
 8005804:	20000b80 	.word	0x20000b80
 8005808:	20000b6b 	.word	0x20000b6b
 800580c:	20000b68 	.word	0x20000b68
 8005810:	40011000 	.word	0x40011000
 8005814:	20000b2f 	.word	0x20000b2f
 8005818:	20000b66 	.word	0x20000b66
 800581c:	20000b67 	.word	0x20000b67
 8005820:	20000b3a 	.word	0x20000b3a
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005824:	2200      	movs	r2, #0
 8005826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800582a:	4860      	ldr	r0, [pc, #384]	; (80059ac <checkAktifCalisma+0x368>)
 800582c:	f004 f823 	bl	8009876 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005830:	4b5f      	ldr	r3, [pc, #380]	; (80059b0 <checkAktifCalisma+0x36c>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d013      	beq.n	8005860 <checkAktifCalisma+0x21c>
 8005838:	4b5e      	ldr	r3, [pc, #376]	; (80059b4 <checkAktifCalisma+0x370>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d007      	beq.n	8005850 <checkAktifCalisma+0x20c>
 8005840:	4b5c      	ldr	r3, [pc, #368]	; (80059b4 <checkAktifCalisma+0x370>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b02      	cmp	r3, #2
 8005846:	d003      	beq.n	8005850 <checkAktifCalisma+0x20c>
 8005848:	4b5b      	ldr	r3, [pc, #364]	; (80059b8 <checkAktifCalisma+0x374>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d107      	bne.n	8005860 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005850:	2201      	movs	r2, #1
 8005852:	2104      	movs	r1, #4
 8005854:	4855      	ldr	r0, [pc, #340]	; (80059ac <checkAktifCalisma+0x368>)
 8005856:	f004 f80e 	bl	8009876 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800585a:	4b58      	ldr	r3, [pc, #352]	; (80059bc <checkAktifCalisma+0x378>)
 800585c:	2201      	movs	r2, #1
 800585e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005860:	4b56      	ldr	r3, [pc, #344]	; (80059bc <checkAktifCalisma+0x378>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d02f      	beq.n	80058c8 <checkAktifCalisma+0x284>
 8005868:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800586c:	484f      	ldr	r0, [pc, #316]	; (80059ac <checkAktifCalisma+0x368>)
 800586e:	f003 ffeb 	bl	8009848 <HAL_GPIO_ReadPin>
 8005872:	4603      	mov	r3, r0
 8005874:	2b01      	cmp	r3, #1
 8005876:	d106      	bne.n	8005886 <checkAktifCalisma+0x242>
 8005878:	4b51      	ldr	r3, [pc, #324]	; (80059c0 <checkAktifCalisma+0x37c>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	f083 0301 	eor.w	r3, r3, #1
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <checkAktifCalisma+0x250>
 8005886:	2102      	movs	r1, #2
 8005888:	484e      	ldr	r0, [pc, #312]	; (80059c4 <checkAktifCalisma+0x380>)
 800588a:	f003 ffdd 	bl	8009848 <HAL_GPIO_ReadPin>
 800588e:	4603      	mov	r3, r0
 8005890:	2b01      	cmp	r3, #1
 8005892:	d119      	bne.n	80058c8 <checkAktifCalisma+0x284>
 8005894:	4b4c      	ldr	r3, [pc, #304]	; (80059c8 <checkAktifCalisma+0x384>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d015      	beq.n	80058c8 <checkAktifCalisma+0x284>
 800589c:	4b4b      	ldr	r3, [pc, #300]	; (80059cc <checkAktifCalisma+0x388>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d011      	beq.n	80058c8 <checkAktifCalisma+0x284>
 80058a4:	4b4a      	ldr	r3, [pc, #296]	; (80059d0 <checkAktifCalisma+0x38c>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00d      	beq.n	80058c8 <checkAktifCalisma+0x284>
 80058ac:	4b49      	ldr	r3, [pc, #292]	; (80059d4 <checkAktifCalisma+0x390>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	f083 0301 	eor.w	r3, r3, #1
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d006      	beq.n	80058c8 <checkAktifCalisma+0x284>
			timer2=millis;
 80058ba:	4b47      	ldr	r3, [pc, #284]	; (80059d8 <checkAktifCalisma+0x394>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a47      	ldr	r2, [pc, #284]	; (80059dc <checkAktifCalisma+0x398>)
 80058c0:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80058c2:	4b44      	ldr	r3, [pc, #272]	; (80059d4 <checkAktifCalisma+0x390>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80058c8:	4b43      	ldr	r3, [pc, #268]	; (80059d8 <checkAktifCalisma+0x394>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4b43      	ldr	r3, [pc, #268]	; (80059dc <checkAktifCalisma+0x398>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	4a43      	ldr	r2, [pc, #268]	; (80059e0 <checkAktifCalisma+0x39c>)
 80058d4:	7812      	ldrb	r2, [r2, #0]
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d303      	bcc.n	80058e2 <checkAktifCalisma+0x29e>
 80058da:	4b3e      	ldr	r3, [pc, #248]	; (80059d4 <checkAktifCalisma+0x390>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d111      	bne.n	8005906 <checkAktifCalisma+0x2c2>
 80058e2:	4b39      	ldr	r3, [pc, #228]	; (80059c8 <checkAktifCalisma+0x384>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	f083 0301 	eor.w	r3, r3, #1
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <checkAktifCalisma+0x2c2>
 80058f0:	4b36      	ldr	r3, [pc, #216]	; (80059cc <checkAktifCalisma+0x388>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	f083 0301 	eor.w	r3, r3, #1
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d103      	bne.n	8005906 <checkAktifCalisma+0x2c2>
 80058fe:	4b34      	ldr	r3, [pc, #208]	; (80059d0 <checkAktifCalisma+0x38c>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005906:	2200      	movs	r2, #0
 8005908:	2104      	movs	r1, #4
 800590a:	4828      	ldr	r0, [pc, #160]	; (80059ac <checkAktifCalisma+0x368>)
 800590c:	f003 ffb3 	bl	8009876 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005910:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <checkAktifCalisma+0x378>)
 8005912:	2200      	movs	r2, #0
 8005914:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005916:	4b2f      	ldr	r3, [pc, #188]	; (80059d4 <checkAktifCalisma+0x390>)
 8005918:	2200      	movs	r2, #0
 800591a:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 800591c:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <checkAktifCalisma+0x3a0>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005924:	4b30      	ldr	r3, [pc, #192]	; (80059e8 <checkAktifCalisma+0x3a4>)
 8005926:	2201      	movs	r2, #1
 8005928:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800592a:	4b2e      	ldr	r3, [pc, #184]	; (80059e4 <checkAktifCalisma+0x3a0>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d116      	bne.n	8005960 <checkAktifCalisma+0x31c>
 8005932:	4b2e      	ldr	r3, [pc, #184]	; (80059ec <checkAktifCalisma+0x3a8>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d112      	bne.n	8005960 <checkAktifCalisma+0x31c>
 800593a:	2101      	movs	r1, #1
 800593c:	4821      	ldr	r0, [pc, #132]	; (80059c4 <checkAktifCalisma+0x380>)
 800593e:	f003 ff83 	bl	8009848 <HAL_GPIO_ReadPin>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10b      	bne.n	8005960 <checkAktifCalisma+0x31c>
 8005948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800594c:	4817      	ldr	r0, [pc, #92]	; (80059ac <checkAktifCalisma+0x368>)
 800594e:	f003 ff7b 	bl	8009848 <HAL_GPIO_ReadPin>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d103      	bne.n	8005960 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005958:	4b23      	ldr	r3, [pc, #140]	; (80059e8 <checkAktifCalisma+0x3a4>)
 800595a:	2201      	movs	r2, #1
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	e011      	b.n	8005984 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005960:	4b20      	ldr	r3, [pc, #128]	; (80059e4 <checkAktifCalisma+0x3a0>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d10d      	bne.n	8005984 <checkAktifCalisma+0x340>
 8005968:	2101      	movs	r1, #1
 800596a:	4816      	ldr	r0, [pc, #88]	; (80059c4 <checkAktifCalisma+0x380>)
 800596c:	f003 ff6c 	bl	8009848 <HAL_GPIO_ReadPin>
 8005970:	4603      	mov	r3, r0
 8005972:	2b01      	cmp	r3, #1
 8005974:	d106      	bne.n	8005984 <checkAktifCalisma+0x340>
 8005976:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <checkAktifCalisma+0x3a8>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800597e:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <checkAktifCalisma+0x3a4>)
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005984:	4b17      	ldr	r3, [pc, #92]	; (80059e4 <checkAktifCalisma+0x3a0>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d134      	bne.n	80059f6 <checkAktifCalisma+0x3b2>
 800598c:	4b17      	ldr	r3, [pc, #92]	; (80059ec <checkAktifCalisma+0x3a8>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d130      	bne.n	80059f6 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005994:	2101      	movs	r1, #1
 8005996:	480b      	ldr	r0, [pc, #44]	; (80059c4 <checkAktifCalisma+0x380>)
 8005998:	f003 ff56 	bl	8009848 <HAL_GPIO_ReadPin>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d126      	bne.n	80059f0 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80059a2:	4b11      	ldr	r3, [pc, #68]	; (80059e8 <checkAktifCalisma+0x3a4>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	e025      	b.n	80059f6 <checkAktifCalisma+0x3b2>
 80059aa:	bf00      	nop
 80059ac:	40010c00 	.word	0x40010c00
 80059b0:	20000b61 	.word	0x20000b61
 80059b4:	20000b3b 	.word	0x20000b3b
 80059b8:	20000b3f 	.word	0x20000b3f
 80059bc:	20000b65 	.word	0x20000b65
 80059c0:	20000b68 	.word	0x20000b68
 80059c4:	40011000 	.word	0x40011000
 80059c8:	20000b7e 	.word	0x20000b7e
 80059cc:	20000b7f 	.word	0x20000b7f
 80059d0:	20000b2f 	.word	0x20000b2f
 80059d4:	20000b5d 	.word	0x20000b5d
 80059d8:	20000b08 	.word	0x20000b08
 80059dc:	20000b14 	.word	0x20000b14
 80059e0:	20000b40 	.word	0x20000b40
 80059e4:	20000b30 	.word	0x20000b30
 80059e8:	20000b83 	.word	0x20000b83
 80059ec:	20000b2d 	.word	0x20000b2d
			} else {
				cerceveVar=0;
 80059f0:	4b7f      	ldr	r3, [pc, #508]	; (8005bf0 <checkAktifCalisma+0x5ac>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80059f6:	4b7f      	ldr	r3, [pc, #508]	; (8005bf4 <checkAktifCalisma+0x5b0>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d17c      	bne.n	8005af8 <checkAktifCalisma+0x4b4>
 80059fe:	4b7e      	ldr	r3, [pc, #504]	; (8005bf8 <checkAktifCalisma+0x5b4>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d078      	beq.n	8005af8 <checkAktifCalisma+0x4b4>
 8005a06:	4b7d      	ldr	r3, [pc, #500]	; (8005bfc <checkAktifCalisma+0x5b8>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d074      	beq.n	8005af8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a12:	487b      	ldr	r0, [pc, #492]	; (8005c00 <checkAktifCalisma+0x5bc>)
 8005a14:	f003 ff18 	bl	8009848 <HAL_GPIO_ReadPin>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <checkAktifCalisma+0x3e2>
 8005a1e:	4b79      	ldr	r3, [pc, #484]	; (8005c04 <checkAktifCalisma+0x5c0>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d068      	beq.n	8005af8 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005a26:	4b72      	ldr	r3, [pc, #456]	; (8005bf0 <checkAktifCalisma+0x5ac>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d064      	beq.n	8005af8 <checkAktifCalisma+0x4b4>
 8005a2e:	4b76      	ldr	r3, [pc, #472]	; (8005c08 <checkAktifCalisma+0x5c4>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	f083 0301 	eor.w	r3, r3, #1
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d05d      	beq.n	8005af8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005a3c:	2104      	movs	r1, #4
 8005a3e:	4873      	ldr	r0, [pc, #460]	; (8005c0c <checkAktifCalisma+0x5c8>)
 8005a40:	f003 ff02 	bl	8009848 <HAL_GPIO_ReadPin>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <checkAktifCalisma+0x40e>
 8005a4a:	4b71      	ldr	r3, [pc, #452]	; (8005c10 <checkAktifCalisma+0x5cc>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d152      	bne.n	8005af8 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005a52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a56:	486a      	ldr	r0, [pc, #424]	; (8005c00 <checkAktifCalisma+0x5bc>)
 8005a58:	f003 fef6 	bl	8009848 <HAL_GPIO_ReadPin>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d10e      	bne.n	8005a80 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005a62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a66:	4866      	ldr	r0, [pc, #408]	; (8005c00 <checkAktifCalisma+0x5bc>)
 8005a68:	f003 feee 	bl	8009848 <HAL_GPIO_ReadPin>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d106      	bne.n	8005a80 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005a72:	2140      	movs	r1, #64	; 0x40
 8005a74:	4865      	ldr	r0, [pc, #404]	; (8005c0c <checkAktifCalisma+0x5c8>)
 8005a76:	f003 fee7 	bl	8009848 <HAL_GPIO_ReadPin>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d003      	beq.n	8005a88 <checkAktifCalisma+0x444>
 8005a80:	4b64      	ldr	r3, [pc, #400]	; (8005c14 <checkAktifCalisma+0x5d0>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d037      	beq.n	8005af8 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005a88:	4b63      	ldr	r3, [pc, #396]	; (8005c18 <checkAktifCalisma+0x5d4>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	f083 0301 	eor.w	r3, r3, #1
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d030      	beq.n	8005af8 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005a96:	4b61      	ldr	r3, [pc, #388]	; (8005c1c <checkAktifCalisma+0x5d8>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f083 0301 	eor.w	r3, r3, #1
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d029      	beq.n	8005af8 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005aa4:	4b5e      	ldr	r3, [pc, #376]	; (8005c20 <checkAktifCalisma+0x5dc>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	f083 0301 	eor.w	r3, r3, #1
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d022      	beq.n	8005af8 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005ab2:	4b5c      	ldr	r3, [pc, #368]	; (8005c24 <checkAktifCalisma+0x5e0>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	f083 0301 	eor.w	r3, r3, #1
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01b      	beq.n	8005af8 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005ac0:	4b59      	ldr	r3, [pc, #356]	; (8005c28 <checkAktifCalisma+0x5e4>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	f083 0301 	eor.w	r3, r3, #1
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d014      	beq.n	8005af8 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005ace:	4b57      	ldr	r3, [pc, #348]	; (8005c2c <checkAktifCalisma+0x5e8>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f083 0301 	eor.w	r3, r3, #1
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00d      	beq.n	8005af8 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005adc:	2201      	movs	r2, #1
 8005ade:	2102      	movs	r1, #2
 8005ae0:	4847      	ldr	r0, [pc, #284]	; (8005c00 <checkAktifCalisma+0x5bc>)
 8005ae2:	f003 fec8 	bl	8009876 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005ae6:	4b4b      	ldr	r3, [pc, #300]	; (8005c14 <checkAktifCalisma+0x5d0>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005aec:	4b50      	ldr	r3, [pc, #320]	; (8005c30 <checkAktifCalisma+0x5ec>)
 8005aee:	2201      	movs	r2, #1
 8005af0:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8005af2:	4b50      	ldr	r3, [pc, #320]	; (8005c34 <checkAktifCalisma+0x5f0>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005af8:	4b46      	ldr	r3, [pc, #280]	; (8005c14 <checkAktifCalisma+0x5d0>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d033      	beq.n	8005b68 <checkAktifCalisma+0x524>
 8005b00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b04:	483e      	ldr	r0, [pc, #248]	; (8005c00 <checkAktifCalisma+0x5bc>)
 8005b06:	f003 fe9f 	bl	8009848 <HAL_GPIO_ReadPin>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d106      	bne.n	8005b1e <checkAktifCalisma+0x4da>
 8005b10:	4b3c      	ldr	r3, [pc, #240]	; (8005c04 <checkAktifCalisma+0x5c0>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	f083 0301 	eor.w	r3, r3, #1
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <checkAktifCalisma+0x4f0>
 8005b1e:	2104      	movs	r1, #4
 8005b20:	483a      	ldr	r0, [pc, #232]	; (8005c0c <checkAktifCalisma+0x5c8>)
 8005b22:	f003 fe91 	bl	8009848 <HAL_GPIO_ReadPin>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d11d      	bne.n	8005b68 <checkAktifCalisma+0x524>
 8005b2c:	4b38      	ldr	r3, [pc, #224]	; (8005c10 <checkAktifCalisma+0x5cc>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d019      	beq.n	8005b68 <checkAktifCalisma+0x524>
 8005b34:	4b30      	ldr	r3, [pc, #192]	; (8005bf8 <checkAktifCalisma+0x5b4>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d015      	beq.n	8005b68 <checkAktifCalisma+0x524>
 8005b3c:	4b2f      	ldr	r3, [pc, #188]	; (8005bfc <checkAktifCalisma+0x5b8>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d011      	beq.n	8005b68 <checkAktifCalisma+0x524>
 8005b44:	4b2a      	ldr	r3, [pc, #168]	; (8005bf0 <checkAktifCalisma+0x5ac>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00d      	beq.n	8005b68 <checkAktifCalisma+0x524>
 8005b4c:	4b3a      	ldr	r3, [pc, #232]	; (8005c38 <checkAktifCalisma+0x5f4>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	f083 0301 	eor.w	r3, r3, #1
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d006      	beq.n	8005b68 <checkAktifCalisma+0x524>
			timer2=millis;
 8005b5a:	4b38      	ldr	r3, [pc, #224]	; (8005c3c <checkAktifCalisma+0x5f8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a38      	ldr	r2, [pc, #224]	; (8005c40 <checkAktifCalisma+0x5fc>)
 8005b60:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005b62:	4b35      	ldr	r3, [pc, #212]	; (8005c38 <checkAktifCalisma+0x5f4>)
 8005b64:	2201      	movs	r2, #1
 8005b66:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005b68:	4b34      	ldr	r3, [pc, #208]	; (8005c3c <checkAktifCalisma+0x5f8>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4b34      	ldr	r3, [pc, #208]	; (8005c40 <checkAktifCalisma+0x5fc>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	4a34      	ldr	r2, [pc, #208]	; (8005c44 <checkAktifCalisma+0x600>)
 8005b74:	7812      	ldrb	r2, [r2, #0]
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d303      	bcc.n	8005b82 <checkAktifCalisma+0x53e>
 8005b7a:	4b2f      	ldr	r3, [pc, #188]	; (8005c38 <checkAktifCalisma+0x5f4>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d114      	bne.n	8005bac <checkAktifCalisma+0x568>
 8005b82:	4b1d      	ldr	r3, [pc, #116]	; (8005bf8 <checkAktifCalisma+0x5b4>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	f083 0301 	eor.w	r3, r3, #1
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10d      	bne.n	8005bac <checkAktifCalisma+0x568>
 8005b90:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <checkAktifCalisma+0x5b8>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	f083 0301 	eor.w	r3, r3, #1
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <checkAktifCalisma+0x568>
 8005b9e:	4b14      	ldr	r3, [pc, #80]	; (8005bf0 <checkAktifCalisma+0x5ac>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	f083 0301 	eor.w	r3, r3, #1
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00a      	beq.n	8005bc2 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005bac:	2200      	movs	r2, #0
 8005bae:	2102      	movs	r1, #2
 8005bb0:	4813      	ldr	r0, [pc, #76]	; (8005c00 <checkAktifCalisma+0x5bc>)
 8005bb2:	f003 fe60 	bl	8009876 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005bb6:	4b17      	ldr	r3, [pc, #92]	; (8005c14 <checkAktifCalisma+0x5d0>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005bbc:	4b1e      	ldr	r3, [pc, #120]	; (8005c38 <checkAktifCalisma+0x5f4>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005bc2:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <checkAktifCalisma+0x5d0>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d040      	beq.n	8005c4c <checkAktifCalisma+0x608>
 8005bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bce:	480f      	ldr	r0, [pc, #60]	; (8005c0c <checkAktifCalisma+0x5c8>)
 8005bd0:	f003 fe3a 	bl	8009848 <HAL_GPIO_ReadPin>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d138      	bne.n	8005c4c <checkAktifCalisma+0x608>
 8005bda:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <checkAktifCalisma+0x604>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d034      	beq.n	8005c4c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005be2:	2201      	movs	r2, #1
 8005be4:	2101      	movs	r1, #1
 8005be6:	4806      	ldr	r0, [pc, #24]	; (8005c00 <checkAktifCalisma+0x5bc>)
 8005be8:	f003 fe45 	bl	8009876 <HAL_GPIO_WritePin>
 8005bec:	e033      	b.n	8005c56 <checkAktifCalisma+0x612>
 8005bee:	bf00      	nop
 8005bf0:	20000b83 	.word	0x20000b83
 8005bf4:	20000b49 	.word	0x20000b49
 8005bf8:	20000b7e 	.word	0x20000b7e
 8005bfc:	20000b7f 	.word	0x20000b7f
 8005c00:	40010c00 	.word	0x40010c00
 8005c04:	20000b69 	.word	0x20000b69
 8005c08:	20000b7d 	.word	0x20000b7d
 8005c0c:	40011000 	.word	0x40011000
 8005c10:	20000b32 	.word	0x20000b32
 8005c14:	20000b64 	.word	0x20000b64
 8005c18:	20000b61 	.word	0x20000b61
 8005c1c:	20000b65 	.word	0x20000b65
 8005c20:	20000b62 	.word	0x20000b62
 8005c24:	20000b63 	.word	0x20000b63
 8005c28:	20000b66 	.word	0x20000b66
 8005c2c:	20000b67 	.word	0x20000b67
 8005c30:	20000b6c 	.word	0x20000b6c
 8005c34:	20000b8d 	.word	0x20000b8d
 8005c38:	20000b5c 	.word	0x20000b5c
 8005c3c:	20000b08 	.word	0x20000b08
 8005c40:	20000b14 	.word	0x20000b14
 8005c44:	20000b41 	.word	0x20000b41
 8005c48:	20000b31 	.word	0x20000b31
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2101      	movs	r1, #1
 8005c50:	4836      	ldr	r0, [pc, #216]	; (8005d2c <checkAktifCalisma+0x6e8>)
 8005c52:	f003 fe10 	bl	8009876 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005c56:	4b36      	ldr	r3, [pc, #216]	; (8005d30 <checkAktifCalisma+0x6ec>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f040 8080 	bne.w	8005d60 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005c60:	4b34      	ldr	r3, [pc, #208]	; (8005d34 <checkAktifCalisma+0x6f0>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d003      	beq.n	8005c70 <checkAktifCalisma+0x62c>
 8005c68:	4b32      	ldr	r3, [pc, #200]	; (8005d34 <checkAktifCalisma+0x6f0>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d177      	bne.n	8005d60 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005c70:	4b31      	ldr	r3, [pc, #196]	; (8005d38 <checkAktifCalisma+0x6f4>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d073      	beq.n	8005d60 <checkAktifCalisma+0x71c>
 8005c78:	4b30      	ldr	r3, [pc, #192]	; (8005d3c <checkAktifCalisma+0x6f8>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d06f      	beq.n	8005d60 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005c80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c84:	4829      	ldr	r0, [pc, #164]	; (8005d2c <checkAktifCalisma+0x6e8>)
 8005c86:	f003 fddf 	bl	8009848 <HAL_GPIO_ReadPin>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d167      	bne.n	8005d60 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005c90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c94:	482a      	ldr	r0, [pc, #168]	; (8005d40 <checkAktifCalisma+0x6fc>)
 8005c96:	f003 fdd7 	bl	8009848 <HAL_GPIO_ReadPin>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <checkAktifCalisma+0x664>
 8005ca0:	4b28      	ldr	r3, [pc, #160]	; (8005d44 <checkAktifCalisma+0x700>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d15b      	bne.n	8005d60 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005ca8:	2140      	movs	r1, #64	; 0x40
 8005caa:	4825      	ldr	r0, [pc, #148]	; (8005d40 <checkAktifCalisma+0x6fc>)
 8005cac:	f003 fdcc 	bl	8009848 <HAL_GPIO_ReadPin>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d10f      	bne.n	8005cd6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cba:	481c      	ldr	r0, [pc, #112]	; (8005d2c <checkAktifCalisma+0x6e8>)
 8005cbc:	f003 fdc4 	bl	8009848 <HAL_GPIO_ReadPin>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d107      	bne.n	8005cd6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005cc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cca:	4818      	ldr	r0, [pc, #96]	; (8005d2c <checkAktifCalisma+0x6e8>)
 8005ccc:	f003 fdbc 	bl	8009848 <HAL_GPIO_ReadPin>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d003      	beq.n	8005cde <checkAktifCalisma+0x69a>
 8005cd6:	4b1c      	ldr	r3, [pc, #112]	; (8005d48 <checkAktifCalisma+0x704>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d040      	beq.n	8005d60 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005cde:	4b1b      	ldr	r3, [pc, #108]	; (8005d4c <checkAktifCalisma+0x708>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f083 0301 	eor.w	r3, r3, #1
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d039      	beq.n	8005d60 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005cec:	4b18      	ldr	r3, [pc, #96]	; (8005d50 <checkAktifCalisma+0x70c>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	f083 0301 	eor.w	r3, r3, #1
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d032      	beq.n	8005d60 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005cfa:	4b16      	ldr	r3, [pc, #88]	; (8005d54 <checkAktifCalisma+0x710>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	f083 0301 	eor.w	r3, r3, #1
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d02b      	beq.n	8005d60 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005d08:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <checkAktifCalisma+0x714>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	f083 0301 	eor.w	r3, r3, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d024      	beq.n	8005d60 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005d16:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <checkAktifCalisma+0x718>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	f083 0301 	eor.w	r3, r3, #1
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01d      	beq.n	8005d60 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005d24:	4b08      	ldr	r3, [pc, #32]	; (8005d48 <checkAktifCalisma+0x704>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	e01c      	b.n	8005d66 <checkAktifCalisma+0x722>
 8005d2c:	40010c00 	.word	0x40010c00
 8005d30:	20000b49 	.word	0x20000b49
 8005d34:	20000b3b 	.word	0x20000b3b
 8005d38:	20000b7e 	.word	0x20000b7e
 8005d3c:	20000b7f 	.word	0x20000b7f
 8005d40:	40011000 	.word	0x40011000
 8005d44:	20000b3c 	.word	0x20000b3c
 8005d48:	20000b62 	.word	0x20000b62
 8005d4c:	20000b61 	.word	0x20000b61
 8005d50:	20000b65 	.word	0x20000b65
 8005d54:	20000b64 	.word	0x20000b64
 8005d58:	20000b63 	.word	0x20000b63
 8005d5c:	20000b67 	.word	0x20000b67
		} else {
			devmotoryukaricalisiyor=0;
 8005d60:	4b64      	ldr	r3, [pc, #400]	; (8005ef4 <checkAktifCalisma+0x8b0>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005d66:	4b63      	ldr	r3, [pc, #396]	; (8005ef4 <checkAktifCalisma+0x8b0>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d007      	beq.n	8005d7e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005d6e:	2201      	movs	r2, #1
 8005d70:	2120      	movs	r1, #32
 8005d72:	4861      	ldr	r0, [pc, #388]	; (8005ef8 <checkAktifCalisma+0x8b4>)
 8005d74:	f003 fd7f 	bl	8009876 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005d78:	4b60      	ldr	r3, [pc, #384]	; (8005efc <checkAktifCalisma+0x8b8>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005d7e:	4b5f      	ldr	r3, [pc, #380]	; (8005efc <checkAktifCalisma+0x8b8>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d025      	beq.n	8005dd2 <checkAktifCalisma+0x78e>
 8005d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d8a:	485d      	ldr	r0, [pc, #372]	; (8005f00 <checkAktifCalisma+0x8bc>)
 8005d8c:	f003 fd5c 	bl	8009848 <HAL_GPIO_ReadPin>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d007      	beq.n	8005da6 <checkAktifCalisma+0x762>
 8005d96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d9a:	4857      	ldr	r0, [pc, #348]	; (8005ef8 <checkAktifCalisma+0x8b4>)
 8005d9c:	f003 fd54 	bl	8009848 <HAL_GPIO_ReadPin>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d115      	bne.n	8005dd2 <checkAktifCalisma+0x78e>
 8005da6:	4b57      	ldr	r3, [pc, #348]	; (8005f04 <checkAktifCalisma+0x8c0>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d011      	beq.n	8005dd2 <checkAktifCalisma+0x78e>
 8005dae:	4b56      	ldr	r3, [pc, #344]	; (8005f08 <checkAktifCalisma+0x8c4>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00d      	beq.n	8005dd2 <checkAktifCalisma+0x78e>
 8005db6:	4b55      	ldr	r3, [pc, #340]	; (8005f0c <checkAktifCalisma+0x8c8>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	f083 0301 	eor.w	r3, r3, #1
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d006      	beq.n	8005dd2 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005dc4:	4b52      	ldr	r3, [pc, #328]	; (8005f10 <checkAktifCalisma+0x8cc>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a52      	ldr	r2, [pc, #328]	; (8005f14 <checkAktifCalisma+0x8d0>)
 8005dca:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005dcc:	4b4f      	ldr	r3, [pc, #316]	; (8005f0c <checkAktifCalisma+0x8c8>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005dd2:	4b4f      	ldr	r3, [pc, #316]	; (8005f10 <checkAktifCalisma+0x8cc>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b4f      	ldr	r3, [pc, #316]	; (8005f14 <checkAktifCalisma+0x8d0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	4a4e      	ldr	r2, [pc, #312]	; (8005f18 <checkAktifCalisma+0x8d4>)
 8005dde:	7812      	ldrb	r2, [r2, #0]
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d303      	bcc.n	8005dec <checkAktifCalisma+0x7a8>
 8005de4:	4b49      	ldr	r3, [pc, #292]	; (8005f0c <checkAktifCalisma+0x8c8>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10d      	bne.n	8005e08 <checkAktifCalisma+0x7c4>
 8005dec:	4b45      	ldr	r3, [pc, #276]	; (8005f04 <checkAktifCalisma+0x8c0>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f083 0301 	eor.w	r3, r3, #1
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <checkAktifCalisma+0x7c4>
 8005dfa:	4b43      	ldr	r3, [pc, #268]	; (8005f08 <checkAktifCalisma+0x8c4>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	f083 0301 	eor.w	r3, r3, #1
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2120      	movs	r1, #32
 8005e0c:	483a      	ldr	r0, [pc, #232]	; (8005ef8 <checkAktifCalisma+0x8b4>)
 8005e0e:	f003 fd32 	bl	8009876 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8005e12:	4b3a      	ldr	r3, [pc, #232]	; (8005efc <checkAktifCalisma+0x8b8>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005e18:	4b3c      	ldr	r3, [pc, #240]	; (8005f0c <checkAktifCalisma+0x8c8>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005e1e:	4b3f      	ldr	r3, [pc, #252]	; (8005f1c <checkAktifCalisma+0x8d8>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f040 8088 	bne.w	8005f38 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005e28:	4b3d      	ldr	r3, [pc, #244]	; (8005f20 <checkAktifCalisma+0x8dc>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d003      	beq.n	8005e38 <checkAktifCalisma+0x7f4>
 8005e30:	4b3b      	ldr	r3, [pc, #236]	; (8005f20 <checkAktifCalisma+0x8dc>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d17f      	bne.n	8005f38 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005e38:	4b32      	ldr	r3, [pc, #200]	; (8005f04 <checkAktifCalisma+0x8c0>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d07b      	beq.n	8005f38 <checkAktifCalisma+0x8f4>
 8005e40:	4b31      	ldr	r3, [pc, #196]	; (8005f08 <checkAktifCalisma+0x8c4>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d077      	beq.n	8005f38 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005e48:	2140      	movs	r1, #64	; 0x40
 8005e4a:	482b      	ldr	r0, [pc, #172]	; (8005ef8 <checkAktifCalisma+0x8b4>)
 8005e4c:	f003 fcfc 	bl	8009848 <HAL_GPIO_ReadPin>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d170      	bne.n	8005f38 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005e56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e5a:	4827      	ldr	r0, [pc, #156]	; (8005ef8 <checkAktifCalisma+0x8b4>)
 8005e5c:	f003 fcf4 	bl	8009848 <HAL_GPIO_ReadPin>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <checkAktifCalisma+0x82a>
 8005e66:	4b2f      	ldr	r3, [pc, #188]	; (8005f24 <checkAktifCalisma+0x8e0>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d164      	bne.n	8005f38 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e72:	4823      	ldr	r0, [pc, #140]	; (8005f00 <checkAktifCalisma+0x8bc>)
 8005e74:	f003 fce8 	bl	8009848 <HAL_GPIO_ReadPin>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d10f      	bne.n	8005e9e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e82:	481f      	ldr	r0, [pc, #124]	; (8005f00 <checkAktifCalisma+0x8bc>)
 8005e84:	f003 fce0 	bl	8009848 <HAL_GPIO_ReadPin>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d107      	bne.n	8005e9e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e92:	481b      	ldr	r0, [pc, #108]	; (8005f00 <checkAktifCalisma+0x8bc>)
 8005e94:	f003 fcd8 	bl	8009848 <HAL_GPIO_ReadPin>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d003      	beq.n	8005ea6 <checkAktifCalisma+0x862>
 8005e9e:	4b22      	ldr	r3, [pc, #136]	; (8005f28 <checkAktifCalisma+0x8e4>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d048      	beq.n	8005f38 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005ea6:	4b21      	ldr	r3, [pc, #132]	; (8005f2c <checkAktifCalisma+0x8e8>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	f083 0301 	eor.w	r3, r3, #1
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d041      	beq.n	8005f38 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005eb4:	4b1e      	ldr	r3, [pc, #120]	; (8005f30 <checkAktifCalisma+0x8ec>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	f083 0301 	eor.w	r3, r3, #1
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d03a      	beq.n	8005f38 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <checkAktifCalisma+0x8f0>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	f083 0301 	eor.w	r3, r3, #1
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d033      	beq.n	8005f38 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <checkAktifCalisma+0x8b8>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	f083 0301 	eor.w	r3, r3, #1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d02c      	beq.n	8005f38 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8005ede:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <checkAktifCalisma+0x8b0>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	f083 0301 	eor.w	r3, r3, #1
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d025      	beq.n	8005f38 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005eec:	4b0e      	ldr	r3, [pc, #56]	; (8005f28 <checkAktifCalisma+0x8e4>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	e024      	b.n	8005f3e <checkAktifCalisma+0x8fa>
 8005ef4:	20000b62 	.word	0x20000b62
 8005ef8:	40011000 	.word	0x40011000
 8005efc:	20000b66 	.word	0x20000b66
 8005f00:	40010c00 	.word	0x40010c00
 8005f04:	20000b7e 	.word	0x20000b7e
 8005f08:	20000b7f 	.word	0x20000b7f
 8005f0c:	20000b5e 	.word	0x20000b5e
 8005f10:	20000b08 	.word	0x20000b08
 8005f14:	20000b14 	.word	0x20000b14
 8005f18:	20000b42 	.word	0x20000b42
 8005f1c:	20000b49 	.word	0x20000b49
 8005f20:	20000b3b 	.word	0x20000b3b
 8005f24:	20000b3d 	.word	0x20000b3d
 8005f28:	20000b63 	.word	0x20000b63
 8005f2c:	20000b61 	.word	0x20000b61
 8005f30:	20000b65 	.word	0x20000b65
 8005f34:	20000b64 	.word	0x20000b64
		} else {
			devmotorasagicalisiyor=0;
 8005f38:	4b96      	ldr	r3, [pc, #600]	; (8006194 <checkAktifCalisma+0xb50>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005f3e:	4b95      	ldr	r3, [pc, #596]	; (8006194 <checkAktifCalisma+0xb50>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005f46:	2201      	movs	r2, #1
 8005f48:	2110      	movs	r1, #16
 8005f4a:	4893      	ldr	r0, [pc, #588]	; (8006198 <checkAktifCalisma+0xb54>)
 8005f4c:	f003 fc93 	bl	8009876 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005f50:	4b92      	ldr	r3, [pc, #584]	; (800619c <checkAktifCalisma+0xb58>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005f56:	4b91      	ldr	r3, [pc, #580]	; (800619c <checkAktifCalisma+0xb58>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d024      	beq.n	8005fa8 <checkAktifCalisma+0x964>
 8005f5e:	2140      	movs	r1, #64	; 0x40
 8005f60:	488d      	ldr	r0, [pc, #564]	; (8006198 <checkAktifCalisma+0xb54>)
 8005f62:	f003 fc71 	bl	8009848 <HAL_GPIO_ReadPin>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d007      	beq.n	8005f7c <checkAktifCalisma+0x938>
 8005f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f70:	4889      	ldr	r0, [pc, #548]	; (8006198 <checkAktifCalisma+0xb54>)
 8005f72:	f003 fc69 	bl	8009848 <HAL_GPIO_ReadPin>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d115      	bne.n	8005fa8 <checkAktifCalisma+0x964>
 8005f7c:	4b88      	ldr	r3, [pc, #544]	; (80061a0 <checkAktifCalisma+0xb5c>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d011      	beq.n	8005fa8 <checkAktifCalisma+0x964>
 8005f84:	4b87      	ldr	r3, [pc, #540]	; (80061a4 <checkAktifCalisma+0xb60>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00d      	beq.n	8005fa8 <checkAktifCalisma+0x964>
 8005f8c:	4b86      	ldr	r3, [pc, #536]	; (80061a8 <checkAktifCalisma+0xb64>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f083 0301 	eor.w	r3, r3, #1
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d006      	beq.n	8005fa8 <checkAktifCalisma+0x964>
			timer2=millis;
 8005f9a:	4b84      	ldr	r3, [pc, #528]	; (80061ac <checkAktifCalisma+0xb68>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a84      	ldr	r2, [pc, #528]	; (80061b0 <checkAktifCalisma+0xb6c>)
 8005fa0:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005fa2:	4b81      	ldr	r3, [pc, #516]	; (80061a8 <checkAktifCalisma+0xb64>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005fa8:	4b80      	ldr	r3, [pc, #512]	; (80061ac <checkAktifCalisma+0xb68>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	4b80      	ldr	r3, [pc, #512]	; (80061b0 <checkAktifCalisma+0xb6c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	4a80      	ldr	r2, [pc, #512]	; (80061b4 <checkAktifCalisma+0xb70>)
 8005fb4:	7812      	ldrb	r2, [r2, #0]
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d303      	bcc.n	8005fc2 <checkAktifCalisma+0x97e>
 8005fba:	4b7b      	ldr	r3, [pc, #492]	; (80061a8 <checkAktifCalisma+0xb64>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10d      	bne.n	8005fde <checkAktifCalisma+0x99a>
 8005fc2:	4b77      	ldr	r3, [pc, #476]	; (80061a0 <checkAktifCalisma+0xb5c>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	f083 0301 	eor.w	r3, r3, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d106      	bne.n	8005fde <checkAktifCalisma+0x99a>
 8005fd0:	4b74      	ldr	r3, [pc, #464]	; (80061a4 <checkAktifCalisma+0xb60>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	f083 0301 	eor.w	r3, r3, #1
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2110      	movs	r1, #16
 8005fe2:	486d      	ldr	r0, [pc, #436]	; (8006198 <checkAktifCalisma+0xb54>)
 8005fe4:	f003 fc47 	bl	8009876 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005fe8:	4b6c      	ldr	r3, [pc, #432]	; (800619c <checkAktifCalisma+0xb58>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8005fee:	4b6e      	ldr	r3, [pc, #440]	; (80061a8 <checkAktifCalisma+0xb64>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ff8:	486f      	ldr	r0, [pc, #444]	; (80061b8 <checkAktifCalisma+0xb74>)
 8005ffa:	f003 fc25 	bl	8009848 <HAL_GPIO_ReadPin>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d120      	bne.n	8006046 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006008:	486b      	ldr	r0, [pc, #428]	; (80061b8 <checkAktifCalisma+0xb74>)
 800600a:	f003 fc1d 	bl	8009848 <HAL_GPIO_ReadPin>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d118      	bne.n	8006046 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006014:	2104      	movs	r1, #4
 8006016:	4868      	ldr	r0, [pc, #416]	; (80061b8 <checkAktifCalisma+0xb74>)
 8006018:	f003 fc16 	bl	8009848 <HAL_GPIO_ReadPin>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d111      	bne.n	8006046 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006022:	2102      	movs	r1, #2
 8006024:	4864      	ldr	r0, [pc, #400]	; (80061b8 <checkAktifCalisma+0xb74>)
 8006026:	f003 fc0f 	bl	8009848 <HAL_GPIO_ReadPin>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10a      	bne.n	8006046 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006030:	2101      	movs	r1, #1
 8006032:	4861      	ldr	r0, [pc, #388]	; (80061b8 <checkAktifCalisma+0xb74>)
 8006034:	f003 fc08 	bl	8009848 <HAL_GPIO_ReadPin>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d103      	bne.n	8006046 <checkAktifCalisma+0xa02>
			makineStop=1;
 800603e:	4b5f      	ldr	r3, [pc, #380]	; (80061bc <checkAktifCalisma+0xb78>)
 8006040:	2201      	movs	r2, #1
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	e002      	b.n	800604c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006046:	4b5d      	ldr	r3, [pc, #372]	; (80061bc <checkAktifCalisma+0xb78>)
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800604c:	4b5c      	ldr	r3, [pc, #368]	; (80061c0 <checkAktifCalisma+0xb7c>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d144      	bne.n	80060de <checkAktifCalisma+0xa9a>
 8006054:	4b5b      	ldr	r3, [pc, #364]	; (80061c4 <checkAktifCalisma+0xb80>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d003      	beq.n	8006064 <checkAktifCalisma+0xa20>
 800605c:	4b59      	ldr	r3, [pc, #356]	; (80061c4 <checkAktifCalisma+0xb80>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b03      	cmp	r3, #3
 8006062:	d13c      	bne.n	80060de <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006064:	2180      	movs	r1, #128	; 0x80
 8006066:	484c      	ldr	r0, [pc, #304]	; (8006198 <checkAktifCalisma+0xb54>)
 8006068:	f003 fbee 	bl	8009848 <HAL_GPIO_ReadPin>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d103      	bne.n	800607a <checkAktifCalisma+0xa36>
 8006072:	4b55      	ldr	r3, [pc, #340]	; (80061c8 <checkAktifCalisma+0xb84>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00b      	beq.n	8006092 <checkAktifCalisma+0xa4e>
 800607a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800607e:	484e      	ldr	r0, [pc, #312]	; (80061b8 <checkAktifCalisma+0xb74>)
 8006080:	f003 fbe2 	bl	8009848 <HAL_GPIO_ReadPin>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d129      	bne.n	80060de <checkAktifCalisma+0xa9a>
 800608a:	4b4f      	ldr	r3, [pc, #316]	; (80061c8 <checkAktifCalisma+0xb84>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d125      	bne.n	80060de <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006092:	2104      	movs	r1, #4
 8006094:	4840      	ldr	r0, [pc, #256]	; (8006198 <checkAktifCalisma+0xb54>)
 8006096:	f003 fbd7 	bl	8009848 <HAL_GPIO_ReadPin>
 800609a:	4603      	mov	r3, r0
 800609c:	2b01      	cmp	r3, #1
 800609e:	d003      	beq.n	80060a8 <checkAktifCalisma+0xa64>
 80060a0:	4b4a      	ldr	r3, [pc, #296]	; (80061cc <checkAktifCalisma+0xb88>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d11a      	bne.n	80060de <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80060a8:	2102      	movs	r1, #2
 80060aa:	483b      	ldr	r0, [pc, #236]	; (8006198 <checkAktifCalisma+0xb54>)
 80060ac:	f003 fbcc 	bl	8009848 <HAL_GPIO_ReadPin>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d113      	bne.n	80060de <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80060b6:	4b46      	ldr	r3, [pc, #280]	; (80061d0 <checkAktifCalisma+0xb8c>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	f083 0301 	eor.w	r3, r3, #1
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00c      	beq.n	80060de <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80060c4:	4b3d      	ldr	r3, [pc, #244]	; (80061bc <checkAktifCalisma+0xb78>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d008      	beq.n	80060de <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80060cc:	4b41      	ldr	r3, [pc, #260]	; (80061d4 <checkAktifCalisma+0xb90>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80060d2:	4b36      	ldr	r3, [pc, #216]	; (80061ac <checkAktifCalisma+0xb68>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a40      	ldr	r2, [pc, #256]	; (80061d8 <checkAktifCalisma+0xb94>)
 80060d8:	6013      	str	r3, [r2, #0]
			bekle();
 80060da:	f7ff f87d 	bl	80051d8 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80060de:	4b33      	ldr	r3, [pc, #204]	; (80061ac <checkAktifCalisma+0xb68>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b3d      	ldr	r3, [pc, #244]	; (80061d8 <checkAktifCalisma+0xb94>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	4a3c      	ldr	r2, [pc, #240]	; (80061dc <checkAktifCalisma+0xb98>)
 80060ea:	7812      	ldrb	r2, [r2, #0]
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d211      	bcs.n	8006114 <checkAktifCalisma+0xad0>
 80060f0:	2104      	movs	r1, #4
 80060f2:	4829      	ldr	r0, [pc, #164]	; (8006198 <checkAktifCalisma+0xb54>)
 80060f4:	f003 fba8 	bl	8009848 <HAL_GPIO_ReadPin>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <checkAktifCalisma+0xad0>
 80060fe:	4b33      	ldr	r3, [pc, #204]	; (80061cc <checkAktifCalisma+0xb88>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d006      	beq.n	8006114 <checkAktifCalisma+0xad0>
 8006106:	4b2d      	ldr	r3, [pc, #180]	; (80061bc <checkAktifCalisma+0xb78>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	f083 0301 	eor.w	r3, r3, #1
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006114:	4b2f      	ldr	r3, [pc, #188]	; (80061d4 <checkAktifCalisma+0xb90>)
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800611a:	4b29      	ldr	r3, [pc, #164]	; (80061c0 <checkAktifCalisma+0xb7c>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d160      	bne.n	80061e4 <checkAktifCalisma+0xba0>
 8006122:	4b28      	ldr	r3, [pc, #160]	; (80061c4 <checkAktifCalisma+0xb80>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d003      	beq.n	8006132 <checkAktifCalisma+0xaee>
 800612a:	4b26      	ldr	r3, [pc, #152]	; (80061c4 <checkAktifCalisma+0xb80>)
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b03      	cmp	r3, #3
 8006130:	d158      	bne.n	80061e4 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006132:	2104      	movs	r1, #4
 8006134:	4818      	ldr	r0, [pc, #96]	; (8006198 <checkAktifCalisma+0xb54>)
 8006136:	f003 fb87 	bl	8009848 <HAL_GPIO_ReadPin>
 800613a:	4603      	mov	r3, r0
 800613c:	2b01      	cmp	r3, #1
 800613e:	d003      	beq.n	8006148 <checkAktifCalisma+0xb04>
 8006140:	4b22      	ldr	r3, [pc, #136]	; (80061cc <checkAktifCalisma+0xb88>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d14d      	bne.n	80061e4 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006148:	2102      	movs	r1, #2
 800614a:	4813      	ldr	r0, [pc, #76]	; (8006198 <checkAktifCalisma+0xb54>)
 800614c:	f003 fb7c 	bl	8009848 <HAL_GPIO_ReadPin>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d146      	bne.n	80061e4 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006156:	2180      	movs	r1, #128	; 0x80
 8006158:	480f      	ldr	r0, [pc, #60]	; (8006198 <checkAktifCalisma+0xb54>)
 800615a:	f003 fb75 	bl	8009848 <HAL_GPIO_ReadPin>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d103      	bne.n	800616c <checkAktifCalisma+0xb28>
 8006164:	4b18      	ldr	r3, [pc, #96]	; (80061c8 <checkAktifCalisma+0xb84>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00b      	beq.n	8006184 <checkAktifCalisma+0xb40>
 800616c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006170:	4811      	ldr	r0, [pc, #68]	; (80061b8 <checkAktifCalisma+0xb74>)
 8006172:	f003 fb69 	bl	8009848 <HAL_GPIO_ReadPin>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d133      	bne.n	80061e4 <checkAktifCalisma+0xba0>
 800617c:	4b12      	ldr	r3, [pc, #72]	; (80061c8 <checkAktifCalisma+0xb84>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d12f      	bne.n	80061e4 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8006184:	4b0d      	ldr	r3, [pc, #52]	; (80061bc <checkAktifCalisma+0xb78>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d02b      	beq.n	80061e4 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 800618c:	4b14      	ldr	r3, [pc, #80]	; (80061e0 <checkAktifCalisma+0xb9c>)
 800618e:	2201      	movs	r2, #1
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	e02a      	b.n	80061ea <checkAktifCalisma+0xba6>
 8006194:	20000b63 	.word	0x20000b63
 8006198:	40011000 	.word	0x40011000
 800619c:	20000b67 	.word	0x20000b67
 80061a0:	20000b7e 	.word	0x20000b7e
 80061a4:	20000b7f 	.word	0x20000b7f
 80061a8:	20000b5f 	.word	0x20000b5f
 80061ac:	20000b08 	.word	0x20000b08
 80061b0:	20000b14 	.word	0x20000b14
 80061b4:	20000b42 	.word	0x20000b42
 80061b8:	40010c00 	.word	0x40010c00
 80061bc:	20000b6e 	.word	0x20000b6e
 80061c0:	20000b35 	.word	0x20000b35
 80061c4:	20000b34 	.word	0x20000b34
 80061c8:	20000b38 	.word	0x20000b38
 80061cc:	20000b32 	.word	0x20000b32
 80061d0:	20000b5b 	.word	0x20000b5b
 80061d4:	20000b6f 	.word	0x20000b6f
 80061d8:	20000b0c 	.word	0x20000b0c
 80061dc:	20000b45 	.word	0x20000b45
 80061e0:	20000b70 	.word	0x20000b70
		} else {
			kapi1butonkontrol=0;
 80061e4:	4b8b      	ldr	r3, [pc, #556]	; (8006414 <checkAktifCalisma+0xdd0>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80061ea:	4b8b      	ldr	r3, [pc, #556]	; (8006418 <checkAktifCalisma+0xdd4>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d121      	bne.n	8006236 <checkAktifCalisma+0xbf2>
 80061f2:	4b8a      	ldr	r3, [pc, #552]	; (800641c <checkAktifCalisma+0xdd8>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d003      	beq.n	8006202 <checkAktifCalisma+0xbbe>
 80061fa:	4b88      	ldr	r3, [pc, #544]	; (800641c <checkAktifCalisma+0xdd8>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d119      	bne.n	8006236 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006202:	2104      	movs	r1, #4
 8006204:	4886      	ldr	r0, [pc, #536]	; (8006420 <checkAktifCalisma+0xddc>)
 8006206:	f003 fb1f 	bl	8009848 <HAL_GPIO_ReadPin>
 800620a:	4603      	mov	r3, r0
 800620c:	2b01      	cmp	r3, #1
 800620e:	d003      	beq.n	8006218 <checkAktifCalisma+0xbd4>
 8006210:	4b84      	ldr	r3, [pc, #528]	; (8006424 <checkAktifCalisma+0xde0>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10e      	bne.n	8006236 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006218:	2102      	movs	r1, #2
 800621a:	4881      	ldr	r0, [pc, #516]	; (8006420 <checkAktifCalisma+0xddc>)
 800621c:	f003 fb14 	bl	8009848 <HAL_GPIO_ReadPin>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d107      	bne.n	8006236 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8006226:	4b80      	ldr	r3, [pc, #512]	; (8006428 <checkAktifCalisma+0xde4>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800622e:	4b7f      	ldr	r3, [pc, #508]	; (800642c <checkAktifCalisma+0xde8>)
 8006230:	2201      	movs	r2, #1
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	e002      	b.n	800623c <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8006236:	4b7d      	ldr	r3, [pc, #500]	; (800642c <checkAktifCalisma+0xde8>)
 8006238:	2200      	movs	r2, #0
 800623a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 800623c:	4b75      	ldr	r3, [pc, #468]	; (8006414 <checkAktifCalisma+0xdd0>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d107      	bne.n	8006254 <checkAktifCalisma+0xc10>
 8006244:	4b79      	ldr	r3, [pc, #484]	; (800642c <checkAktifCalisma+0xde8>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d103      	bne.n	8006254 <checkAktifCalisma+0xc10>
 800624c:	4b78      	ldr	r3, [pc, #480]	; (8006430 <checkAktifCalisma+0xdec>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006254:	2201      	movs	r2, #1
 8006256:	2180      	movs	r1, #128	; 0x80
 8006258:	4876      	ldr	r0, [pc, #472]	; (8006434 <checkAktifCalisma+0xdf0>)
 800625a:	f003 fb0c 	bl	8009876 <HAL_GPIO_WritePin>
 800625e:	e004      	b.n	800626a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006260:	2200      	movs	r2, #0
 8006262:	2180      	movs	r1, #128	; 0x80
 8006264:	4873      	ldr	r0, [pc, #460]	; (8006434 <checkAktifCalisma+0xdf0>)
 8006266:	f003 fb06 	bl	8009876 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800626a:	4b73      	ldr	r3, [pc, #460]	; (8006438 <checkAktifCalisma+0xdf4>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d141      	bne.n	80062f6 <checkAktifCalisma+0xcb2>
 8006272:	4b6a      	ldr	r3, [pc, #424]	; (800641c <checkAktifCalisma+0xdd8>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d003      	beq.n	8006282 <checkAktifCalisma+0xc3e>
 800627a:	4b68      	ldr	r3, [pc, #416]	; (800641c <checkAktifCalisma+0xdd8>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b03      	cmp	r3, #3
 8006280:	d139      	bne.n	80062f6 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006286:	4866      	ldr	r0, [pc, #408]	; (8006420 <checkAktifCalisma+0xddc>)
 8006288:	f003 fade 	bl	8009848 <HAL_GPIO_ReadPin>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d103      	bne.n	800629a <checkAktifCalisma+0xc56>
 8006292:	4b6a      	ldr	r3, [pc, #424]	; (800643c <checkAktifCalisma+0xdf8>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00b      	beq.n	80062b2 <checkAktifCalisma+0xc6e>
 800629a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800629e:	4868      	ldr	r0, [pc, #416]	; (8006440 <checkAktifCalisma+0xdfc>)
 80062a0:	f003 fad2 	bl	8009848 <HAL_GPIO_ReadPin>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d125      	bne.n	80062f6 <checkAktifCalisma+0xcb2>
 80062aa:	4b64      	ldr	r3, [pc, #400]	; (800643c <checkAktifCalisma+0xdf8>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d121      	bne.n	80062f6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80062b2:	2102      	movs	r1, #2
 80062b4:	485a      	ldr	r0, [pc, #360]	; (8006420 <checkAktifCalisma+0xddc>)
 80062b6:	f003 fac7 	bl	8009848 <HAL_GPIO_ReadPin>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d11a      	bne.n	80062f6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80062c0:	2104      	movs	r1, #4
 80062c2:	4857      	ldr	r0, [pc, #348]	; (8006420 <checkAktifCalisma+0xddc>)
 80062c4:	f003 fac0 	bl	8009848 <HAL_GPIO_ReadPin>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d113      	bne.n	80062f6 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80062ce:	4b56      	ldr	r3, [pc, #344]	; (8006428 <checkAktifCalisma+0xde4>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00f      	beq.n	80062f6 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80062d6:	4b5b      	ldr	r3, [pc, #364]	; (8006444 <checkAktifCalisma+0xe00>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	f083 0301 	eor.w	r3, r3, #1
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d008      	beq.n	80062f6 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80062e4:	4b58      	ldr	r3, [pc, #352]	; (8006448 <checkAktifCalisma+0xe04>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80062ea:	4b58      	ldr	r3, [pc, #352]	; (800644c <checkAktifCalisma+0xe08>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a58      	ldr	r2, [pc, #352]	; (8006450 <checkAktifCalisma+0xe0c>)
 80062f0:	6013      	str	r3, [r2, #0]
			bekle();
 80062f2:	f7fe ff71 	bl	80051d8 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80062f6:	4b55      	ldr	r3, [pc, #340]	; (800644c <checkAktifCalisma+0xe08>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b55      	ldr	r3, [pc, #340]	; (8006450 <checkAktifCalisma+0xe0c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	4a54      	ldr	r2, [pc, #336]	; (8006454 <checkAktifCalisma+0xe10>)
 8006302:	7812      	ldrb	r2, [r2, #0]
 8006304:	4293      	cmp	r3, r2
 8006306:	d20d      	bcs.n	8006324 <checkAktifCalisma+0xce0>
 8006308:	2102      	movs	r1, #2
 800630a:	4845      	ldr	r0, [pc, #276]	; (8006420 <checkAktifCalisma+0xddc>)
 800630c:	f003 fa9c 	bl	8009848 <HAL_GPIO_ReadPin>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <checkAktifCalisma+0xce0>
 8006316:	4b44      	ldr	r3, [pc, #272]	; (8006428 <checkAktifCalisma+0xde4>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	f083 0301 	eor.w	r3, r3, #1
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8006324:	4b48      	ldr	r3, [pc, #288]	; (8006448 <checkAktifCalisma+0xe04>)
 8006326:	2200      	movs	r2, #0
 8006328:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800632a:	4b43      	ldr	r3, [pc, #268]	; (8006438 <checkAktifCalisma+0xdf4>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d135      	bne.n	800639e <checkAktifCalisma+0xd5a>
 8006332:	4b3a      	ldr	r3, [pc, #232]	; (800641c <checkAktifCalisma+0xdd8>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d003      	beq.n	8006342 <checkAktifCalisma+0xcfe>
 800633a:	4b38      	ldr	r3, [pc, #224]	; (800641c <checkAktifCalisma+0xdd8>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b03      	cmp	r3, #3
 8006340:	d12d      	bne.n	800639e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006346:	4836      	ldr	r0, [pc, #216]	; (8006420 <checkAktifCalisma+0xddc>)
 8006348:	f003 fa7e 	bl	8009848 <HAL_GPIO_ReadPin>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <checkAktifCalisma+0xd16>
 8006352:	4b3a      	ldr	r3, [pc, #232]	; (800643c <checkAktifCalisma+0xdf8>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00b      	beq.n	8006372 <checkAktifCalisma+0xd2e>
 800635a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800635e:	4838      	ldr	r0, [pc, #224]	; (8006440 <checkAktifCalisma+0xdfc>)
 8006360:	f003 fa72 	bl	8009848 <HAL_GPIO_ReadPin>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d119      	bne.n	800639e <checkAktifCalisma+0xd5a>
 800636a:	4b34      	ldr	r3, [pc, #208]	; (800643c <checkAktifCalisma+0xdf8>)
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d115      	bne.n	800639e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006372:	2102      	movs	r1, #2
 8006374:	482a      	ldr	r0, [pc, #168]	; (8006420 <checkAktifCalisma+0xddc>)
 8006376:	f003 fa67 	bl	8009848 <HAL_GPIO_ReadPin>
 800637a:	4603      	mov	r3, r0
 800637c:	2b01      	cmp	r3, #1
 800637e:	d10e      	bne.n	800639e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006380:	2104      	movs	r1, #4
 8006382:	4827      	ldr	r0, [pc, #156]	; (8006420 <checkAktifCalisma+0xddc>)
 8006384:	f003 fa60 	bl	8009848 <HAL_GPIO_ReadPin>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d107      	bne.n	800639e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800638e:	4b26      	ldr	r3, [pc, #152]	; (8006428 <checkAktifCalisma+0xde4>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8006396:	4b30      	ldr	r3, [pc, #192]	; (8006458 <checkAktifCalisma+0xe14>)
 8006398:	2201      	movs	r2, #1
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	e002      	b.n	80063a4 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 800639e:	4b2e      	ldr	r3, [pc, #184]	; (8006458 <checkAktifCalisma+0xe14>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80063a4:	4b24      	ldr	r3, [pc, #144]	; (8006438 <checkAktifCalisma+0xdf4>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d11d      	bne.n	80063e8 <checkAktifCalisma+0xda4>
 80063ac:	4b1b      	ldr	r3, [pc, #108]	; (800641c <checkAktifCalisma+0xdd8>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d003      	beq.n	80063bc <checkAktifCalisma+0xd78>
 80063b4:	4b19      	ldr	r3, [pc, #100]	; (800641c <checkAktifCalisma+0xdd8>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d115      	bne.n	80063e8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063bc:	2102      	movs	r1, #2
 80063be:	4818      	ldr	r0, [pc, #96]	; (8006420 <checkAktifCalisma+0xddc>)
 80063c0:	f003 fa42 	bl	8009848 <HAL_GPIO_ReadPin>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d10e      	bne.n	80063e8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80063ca:	2104      	movs	r1, #4
 80063cc:	4814      	ldr	r0, [pc, #80]	; (8006420 <checkAktifCalisma+0xddc>)
 80063ce:	f003 fa3b 	bl	8009848 <HAL_GPIO_ReadPin>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d107      	bne.n	80063e8 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80063d8:	4b13      	ldr	r3, [pc, #76]	; (8006428 <checkAktifCalisma+0xde4>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80063e0:	4b1e      	ldr	r3, [pc, #120]	; (800645c <checkAktifCalisma+0xe18>)
 80063e2:	2201      	movs	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	e002      	b.n	80063ee <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80063e8:	4b1c      	ldr	r3, [pc, #112]	; (800645c <checkAktifCalisma+0xe18>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80063ee:	4b1a      	ldr	r3, [pc, #104]	; (8006458 <checkAktifCalisma+0xe14>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d107      	bne.n	8006406 <checkAktifCalisma+0xdc2>
 80063f6:	4b19      	ldr	r3, [pc, #100]	; (800645c <checkAktifCalisma+0xe18>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d103      	bne.n	8006406 <checkAktifCalisma+0xdc2>
 80063fe:	4b12      	ldr	r3, [pc, #72]	; (8006448 <checkAktifCalisma+0xe04>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d02c      	beq.n	8006460 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006406:	2201      	movs	r2, #1
 8006408:	2140      	movs	r1, #64	; 0x40
 800640a:	480a      	ldr	r0, [pc, #40]	; (8006434 <checkAktifCalisma+0xdf0>)
 800640c:	f003 fa33 	bl	8009876 <HAL_GPIO_WritePin>
 8006410:	e02b      	b.n	800646a <checkAktifCalisma+0xe26>
 8006412:	bf00      	nop
 8006414:	20000b70 	.word	0x20000b70
 8006418:	20000b35 	.word	0x20000b35
 800641c:	20000b34 	.word	0x20000b34
 8006420:	40011000 	.word	0x40011000
 8006424:	20000b32 	.word	0x20000b32
 8006428:	20000b6e 	.word	0x20000b6e
 800642c:	20000b71 	.word	0x20000b71
 8006430:	20000b6f 	.word	0x20000b6f
 8006434:	40010800 	.word	0x40010800
 8006438:	20000b36 	.word	0x20000b36
 800643c:	20000b38 	.word	0x20000b38
 8006440:	40010c00 	.word	0x40010c00
 8006444:	20000b5b 	.word	0x20000b5b
 8006448:	20000b72 	.word	0x20000b72
 800644c:	20000b08 	.word	0x20000b08
 8006450:	20000b0c 	.word	0x20000b0c
 8006454:	20000b46 	.word	0x20000b46
 8006458:	20000b73 	.word	0x20000b73
 800645c:	20000b74 	.word	0x20000b74
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006460:	2200      	movs	r2, #0
 8006462:	2140      	movs	r1, #64	; 0x40
 8006464:	488d      	ldr	r0, [pc, #564]	; (800669c <checkAktifCalisma+0x1058>)
 8006466:	f003 fa06 	bl	8009876 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800646a:	4b8d      	ldr	r3, [pc, #564]	; (80066a0 <checkAktifCalisma+0x105c>)
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <checkAktifCalisma+0xe36>
 8006472:	4b8b      	ldr	r3, [pc, #556]	; (80066a0 <checkAktifCalisma+0x105c>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d115      	bne.n	80064a6 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800647a:	2104      	movs	r1, #4
 800647c:	4889      	ldr	r0, [pc, #548]	; (80066a4 <checkAktifCalisma+0x1060>)
 800647e:	f003 f9e3 	bl	8009848 <HAL_GPIO_ReadPin>
 8006482:	4603      	mov	r3, r0
 8006484:	2b01      	cmp	r3, #1
 8006486:	d003      	beq.n	8006490 <checkAktifCalisma+0xe4c>
 8006488:	4b87      	ldr	r3, [pc, #540]	; (80066a8 <checkAktifCalisma+0x1064>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8006490:	2102      	movs	r1, #2
 8006492:	4884      	ldr	r0, [pc, #528]	; (80066a4 <checkAktifCalisma+0x1060>)
 8006494:	f003 f9d8 	bl	8009848 <HAL_GPIO_ReadPin>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 800649e:	4b83      	ldr	r3, [pc, #524]	; (80066ac <checkAktifCalisma+0x1068>)
 80064a0:	2201      	movs	r2, #1
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	e002      	b.n	80064ac <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 80064a6:	4b81      	ldr	r3, [pc, #516]	; (80066ac <checkAktifCalisma+0x1068>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80064ac:	4b7c      	ldr	r3, [pc, #496]	; (80066a0 <checkAktifCalisma+0x105c>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d003      	beq.n	80064bc <checkAktifCalisma+0xe78>
 80064b4:	4b7a      	ldr	r3, [pc, #488]	; (80066a0 <checkAktifCalisma+0x105c>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d111      	bne.n	80064e0 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80064bc:	2102      	movs	r1, #2
 80064be:	4879      	ldr	r0, [pc, #484]	; (80066a4 <checkAktifCalisma+0x1060>)
 80064c0:	f003 f9c2 	bl	8009848 <HAL_GPIO_ReadPin>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d10a      	bne.n	80064e0 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80064ca:	2104      	movs	r1, #4
 80064cc:	4875      	ldr	r0, [pc, #468]	; (80066a4 <checkAktifCalisma+0x1060>)
 80064ce:	f003 f9bb 	bl	8009848 <HAL_GPIO_ReadPin>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d103      	bne.n	80064e0 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80064d8:	4b75      	ldr	r3, [pc, #468]	; (80066b0 <checkAktifCalisma+0x106c>)
 80064da:	2201      	movs	r2, #1
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	e002      	b.n	80064e6 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80064e0:	4b73      	ldr	r3, [pc, #460]	; (80066b0 <checkAktifCalisma+0x106c>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80064e6:	4b71      	ldr	r3, [pc, #452]	; (80066ac <checkAktifCalisma+0x1068>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00f      	beq.n	800650e <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80064ee:	4b71      	ldr	r3, [pc, #452]	; (80066b4 <checkAktifCalisma+0x1070>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d10b      	bne.n	800650e <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80064f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064fa:	486f      	ldr	r0, [pc, #444]	; (80066b8 <checkAktifCalisma+0x1074>)
 80064fc:	f003 f9a4 	bl	8009848 <HAL_GPIO_ReadPin>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d103      	bne.n	800650e <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8006506:	4b6d      	ldr	r3, [pc, #436]	; (80066bc <checkAktifCalisma+0x1078>)
 8006508:	2201      	movs	r2, #1
 800650a:	701a      	strb	r2, [r3, #0]
 800650c:	e002      	b.n	8006514 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 800650e:	4b6b      	ldr	r3, [pc, #428]	; (80066bc <checkAktifCalisma+0x1078>)
 8006510:	2200      	movs	r2, #0
 8006512:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8006514:	4b66      	ldr	r3, [pc, #408]	; (80066b0 <checkAktifCalisma+0x106c>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00f      	beq.n	800653c <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 800651c:	4b65      	ldr	r3, [pc, #404]	; (80066b4 <checkAktifCalisma+0x1070>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d10b      	bne.n	800653c <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8006524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006528:	4863      	ldr	r0, [pc, #396]	; (80066b8 <checkAktifCalisma+0x1074>)
 800652a:	f003 f98d 	bl	8009848 <HAL_GPIO_ReadPin>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d103      	bne.n	800653c <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8006534:	4b62      	ldr	r3, [pc, #392]	; (80066c0 <checkAktifCalisma+0x107c>)
 8006536:	2201      	movs	r2, #1
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	e002      	b.n	8006542 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 800653c:	4b60      	ldr	r3, [pc, #384]	; (80066c0 <checkAktifCalisma+0x107c>)
 800653e:	2200      	movs	r2, #0
 8006540:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006542:	4b60      	ldr	r3, [pc, #384]	; (80066c4 <checkAktifCalisma+0x1080>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d137      	bne.n	80065ba <checkAktifCalisma+0xf76>
 800654a:	4b5f      	ldr	r3, [pc, #380]	; (80066c8 <checkAktifCalisma+0x1084>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d003      	beq.n	800655a <checkAktifCalisma+0xf16>
 8006552:	4b5d      	ldr	r3, [pc, #372]	; (80066c8 <checkAktifCalisma+0x1084>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b03      	cmp	r3, #3
 8006558:	d12f      	bne.n	80065ba <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800655a:	4b54      	ldr	r3, [pc, #336]	; (80066ac <checkAktifCalisma+0x1068>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d103      	bne.n	800656a <checkAktifCalisma+0xf26>
 8006562:	4b53      	ldr	r3, [pc, #332]	; (80066b0 <checkAktifCalisma+0x106c>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d027      	beq.n	80065ba <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800656a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800656e:	484d      	ldr	r0, [pc, #308]	; (80066a4 <checkAktifCalisma+0x1060>)
 8006570:	f003 f96a 	bl	8009848 <HAL_GPIO_ReadPin>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d103      	bne.n	8006582 <checkAktifCalisma+0xf3e>
 800657a:	4b4e      	ldr	r3, [pc, #312]	; (80066b4 <checkAktifCalisma+0x1070>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d007      	beq.n	8006592 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006582:	4b4e      	ldr	r3, [pc, #312]	; (80066bc <checkAktifCalisma+0x1078>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d103      	bne.n	8006592 <checkAktifCalisma+0xf4e>
 800658a:	4b4d      	ldr	r3, [pc, #308]	; (80066c0 <checkAktifCalisma+0x107c>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d013      	beq.n	80065ba <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8006592:	4b4e      	ldr	r3, [pc, #312]	; (80066cc <checkAktifCalisma+0x1088>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00f      	beq.n	80065ba <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 800659a:	4b4d      	ldr	r3, [pc, #308]	; (80066d0 <checkAktifCalisma+0x108c>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	f083 0301 	eor.w	r3, r3, #1
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d008      	beq.n	80065ba <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 80065a8:	4b4a      	ldr	r3, [pc, #296]	; (80066d4 <checkAktifCalisma+0x1090>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80065ae:	4b4a      	ldr	r3, [pc, #296]	; (80066d8 <checkAktifCalisma+0x1094>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a4a      	ldr	r2, [pc, #296]	; (80066dc <checkAktifCalisma+0x1098>)
 80065b4:	6013      	str	r3, [r2, #0]
			bekle();
 80065b6:	f7fe fe0f 	bl	80051d8 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80065ba:	4b47      	ldr	r3, [pc, #284]	; (80066d8 <checkAktifCalisma+0x1094>)
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	4b47      	ldr	r3, [pc, #284]	; (80066dc <checkAktifCalisma+0x1098>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	4a46      	ldr	r2, [pc, #280]	; (80066e0 <checkAktifCalisma+0x109c>)
 80065c6:	7812      	ldrb	r2, [r2, #0]
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d214      	bcs.n	80065f6 <checkAktifCalisma+0xfb2>
 80065cc:	4b37      	ldr	r3, [pc, #220]	; (80066ac <checkAktifCalisma+0x1068>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	f083 0301 	eor.w	r3, r3, #1
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d006      	beq.n	80065e8 <checkAktifCalisma+0xfa4>
 80065da:	4b35      	ldr	r3, [pc, #212]	; (80066b0 <checkAktifCalisma+0x106c>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	f083 0301 	eor.w	r3, r3, #1
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <checkAktifCalisma+0xfb2>
 80065e8:	4b38      	ldr	r3, [pc, #224]	; (80066cc <checkAktifCalisma+0x1088>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f083 0301 	eor.w	r3, r3, #1
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 80065f6:	4b37      	ldr	r3, [pc, #220]	; (80066d4 <checkAktifCalisma+0x1090>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80065fc:	4b31      	ldr	r3, [pc, #196]	; (80066c4 <checkAktifCalisma+0x1080>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d12b      	bne.n	800665c <checkAktifCalisma+0x1018>
 8006604:	4b30      	ldr	r3, [pc, #192]	; (80066c8 <checkAktifCalisma+0x1084>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b02      	cmp	r3, #2
 800660a:	d003      	beq.n	8006614 <checkAktifCalisma+0xfd0>
 800660c:	4b2e      	ldr	r3, [pc, #184]	; (80066c8 <checkAktifCalisma+0x1084>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b03      	cmp	r3, #3
 8006612:	d123      	bne.n	800665c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006614:	4b25      	ldr	r3, [pc, #148]	; (80066ac <checkAktifCalisma+0x1068>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d103      	bne.n	8006624 <checkAktifCalisma+0xfe0>
 800661c:	4b24      	ldr	r3, [pc, #144]	; (80066b0 <checkAktifCalisma+0x106c>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01b      	beq.n	800665c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006628:	481e      	ldr	r0, [pc, #120]	; (80066a4 <checkAktifCalisma+0x1060>)
 800662a:	f003 f90d 	bl	8009848 <HAL_GPIO_ReadPin>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d103      	bne.n	800663c <checkAktifCalisma+0xff8>
 8006634:	4b1f      	ldr	r3, [pc, #124]	; (80066b4 <checkAktifCalisma+0x1070>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d007      	beq.n	800664c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800663c:	4b1f      	ldr	r3, [pc, #124]	; (80066bc <checkAktifCalisma+0x1078>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d103      	bne.n	800664c <checkAktifCalisma+0x1008>
 8006644:	4b1e      	ldr	r3, [pc, #120]	; (80066c0 <checkAktifCalisma+0x107c>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d007      	beq.n	800665c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 800664c:	4b1f      	ldr	r3, [pc, #124]	; (80066cc <checkAktifCalisma+0x1088>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8006654:	4b23      	ldr	r3, [pc, #140]	; (80066e4 <checkAktifCalisma+0x10a0>)
 8006656:	2201      	movs	r2, #1
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	e002      	b.n	8006662 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 800665c:	4b21      	ldr	r3, [pc, #132]	; (80066e4 <checkAktifCalisma+0x10a0>)
 800665e:	2200      	movs	r2, #0
 8006660:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006662:	4b18      	ldr	r3, [pc, #96]	; (80066c4 <checkAktifCalisma+0x1080>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b02      	cmp	r3, #2
 8006668:	d140      	bne.n	80066ec <checkAktifCalisma+0x10a8>
 800666a:	4b17      	ldr	r3, [pc, #92]	; (80066c8 <checkAktifCalisma+0x1084>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d003      	beq.n	800667a <checkAktifCalisma+0x1036>
 8006672:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <checkAktifCalisma+0x1084>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b03      	cmp	r3, #3
 8006678:	d138      	bne.n	80066ec <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <checkAktifCalisma+0x1068>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d103      	bne.n	800668a <checkAktifCalisma+0x1046>
 8006682:	4b0b      	ldr	r3, [pc, #44]	; (80066b0 <checkAktifCalisma+0x106c>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d030      	beq.n	80066ec <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 800668a:	4b10      	ldr	r3, [pc, #64]	; (80066cc <checkAktifCalisma+0x1088>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d02c      	beq.n	80066ec <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8006692:	4b15      	ldr	r3, [pc, #84]	; (80066e8 <checkAktifCalisma+0x10a4>)
 8006694:	2201      	movs	r2, #1
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	e02b      	b.n	80066f2 <checkAktifCalisma+0x10ae>
 800669a:	bf00      	nop
 800669c:	40010800 	.word	0x40010800
 80066a0:	20000b39 	.word	0x20000b39
 80066a4:	40011000 	.word	0x40011000
 80066a8:	20000b32 	.word	0x20000b32
 80066ac:	20000b78 	.word	0x20000b78
 80066b0:	20000b79 	.word	0x20000b79
 80066b4:	20000b38 	.word	0x20000b38
 80066b8:	40010c00 	.word	0x40010c00
 80066bc:	20000b88 	.word	0x20000b88
 80066c0:	20000b89 	.word	0x20000b89
 80066c4:	20000b37 	.word	0x20000b37
 80066c8:	20000b34 	.word	0x20000b34
 80066cc:	20000b6e 	.word	0x20000b6e
 80066d0:	20000b5b 	.word	0x20000b5b
 80066d4:	20000b75 	.word	0x20000b75
 80066d8:	20000b08 	.word	0x20000b08
 80066dc:	20000b0c 	.word	0x20000b0c
 80066e0:	20000b47 	.word	0x20000b47
 80066e4:	20000b76 	.word	0x20000b76
 80066e8:	20000b77 	.word	0x20000b77
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80066ec:	4b89      	ldr	r3, [pc, #548]	; (8006914 <checkAktifCalisma+0x12d0>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80066f2:	4b89      	ldr	r3, [pc, #548]	; (8006918 <checkAktifCalisma+0x12d4>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d107      	bne.n	800670a <checkAktifCalisma+0x10c6>
 80066fa:	4b88      	ldr	r3, [pc, #544]	; (800691c <checkAktifCalisma+0x12d8>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d103      	bne.n	800670a <checkAktifCalisma+0x10c6>
 8006702:	4b84      	ldr	r3, [pc, #528]	; (8006914 <checkAktifCalisma+0x12d0>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d005      	beq.n	8006716 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800670a:	2201      	movs	r2, #1
 800670c:	2120      	movs	r1, #32
 800670e:	4884      	ldr	r0, [pc, #528]	; (8006920 <checkAktifCalisma+0x12dc>)
 8006710:	f003 f8b1 	bl	8009876 <HAL_GPIO_WritePin>
 8006714:	e004      	b.n	8006720 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006716:	2200      	movs	r2, #0
 8006718:	2120      	movs	r1, #32
 800671a:	4881      	ldr	r0, [pc, #516]	; (8006920 <checkAktifCalisma+0x12dc>)
 800671c:	f003 f8ab 	bl	8009876 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006720:	4b80      	ldr	r3, [pc, #512]	; (8006924 <checkAktifCalisma+0x12e0>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00e      	beq.n	8006746 <checkAktifCalisma+0x1102>
 8006728:	2102      	movs	r1, #2
 800672a:	487f      	ldr	r0, [pc, #508]	; (8006928 <checkAktifCalisma+0x12e4>)
 800672c:	f003 f88c 	bl	8009848 <HAL_GPIO_ReadPin>
 8006730:	4603      	mov	r3, r0
 8006732:	2b01      	cmp	r3, #1
 8006734:	d107      	bne.n	8006746 <checkAktifCalisma+0x1102>
 8006736:	4b7d      	ldr	r3, [pc, #500]	; (800692c <checkAktifCalisma+0x12e8>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d103      	bne.n	8006746 <checkAktifCalisma+0x1102>
 800673e:	4b7c      	ldr	r3, [pc, #496]	; (8006930 <checkAktifCalisma+0x12ec>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d112      	bne.n	800676c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006746:	4b7b      	ldr	r3, [pc, #492]	; (8006934 <checkAktifCalisma+0x12f0>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d066      	beq.n	800681c <checkAktifCalisma+0x11d8>
 800674e:	2104      	movs	r1, #4
 8006750:	4875      	ldr	r0, [pc, #468]	; (8006928 <checkAktifCalisma+0x12e4>)
 8006752:	f003 f879 	bl	8009848 <HAL_GPIO_ReadPin>
 8006756:	4603      	mov	r3, r0
 8006758:	2b01      	cmp	r3, #1
 800675a:	d15f      	bne.n	800681c <checkAktifCalisma+0x11d8>
 800675c:	4b73      	ldr	r3, [pc, #460]	; (800692c <checkAktifCalisma+0x12e8>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d05b      	beq.n	800681c <checkAktifCalisma+0x11d8>
 8006764:	4b72      	ldr	r3, [pc, #456]	; (8006930 <checkAktifCalisma+0x12ec>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d057      	beq.n	800681c <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 800676c:	4b72      	ldr	r3, [pc, #456]	; (8006938 <checkAktifCalisma+0x12f4>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	3301      	adds	r3, #1
 8006772:	b2da      	uxtb	r2, r3
 8006774:	4b70      	ldr	r3, [pc, #448]	; (8006938 <checkAktifCalisma+0x12f4>)
 8006776:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8006778:	4b6f      	ldr	r3, [pc, #444]	; (8006938 <checkAktifCalisma+0x12f4>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b09      	cmp	r3, #9
 800677e:	d908      	bls.n	8006792 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8006780:	4b6d      	ldr	r3, [pc, #436]	; (8006938 <checkAktifCalisma+0x12f4>)
 8006782:	2200      	movs	r2, #0
 8006784:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8006786:	4b6d      	ldr	r3, [pc, #436]	; (800693c <checkAktifCalisma+0x12f8>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	3301      	adds	r3, #1
 800678c:	b2da      	uxtb	r2, r3
 800678e:	4b6b      	ldr	r3, [pc, #428]	; (800693c <checkAktifCalisma+0x12f8>)
 8006790:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8006792:	4b6a      	ldr	r3, [pc, #424]	; (800693c <checkAktifCalisma+0x12f8>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b09      	cmp	r3, #9
 8006798:	d908      	bls.n	80067ac <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 800679a:	4b68      	ldr	r3, [pc, #416]	; (800693c <checkAktifCalisma+0x12f8>)
 800679c:	2200      	movs	r2, #0
 800679e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80067a0:	4b67      	ldr	r3, [pc, #412]	; (8006940 <checkAktifCalisma+0x12fc>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	3301      	adds	r3, #1
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	4b65      	ldr	r3, [pc, #404]	; (8006940 <checkAktifCalisma+0x12fc>)
 80067aa:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80067ac:	4b64      	ldr	r3, [pc, #400]	; (8006940 <checkAktifCalisma+0x12fc>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b09      	cmp	r3, #9
 80067b2:	d908      	bls.n	80067c6 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80067b4:	4b62      	ldr	r3, [pc, #392]	; (8006940 <checkAktifCalisma+0x12fc>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80067ba:	4b62      	ldr	r3, [pc, #392]	; (8006944 <checkAktifCalisma+0x1300>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	3301      	adds	r3, #1
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	4b60      	ldr	r3, [pc, #384]	; (8006944 <checkAktifCalisma+0x1300>)
 80067c4:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80067c6:	4b5f      	ldr	r3, [pc, #380]	; (8006944 <checkAktifCalisma+0x1300>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b09      	cmp	r3, #9
 80067cc:	d908      	bls.n	80067e0 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80067ce:	4b5d      	ldr	r3, [pc, #372]	; (8006944 <checkAktifCalisma+0x1300>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80067d4:	4b5c      	ldr	r3, [pc, #368]	; (8006948 <checkAktifCalisma+0x1304>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	3301      	adds	r3, #1
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	4b5a      	ldr	r3, [pc, #360]	; (8006948 <checkAktifCalisma+0x1304>)
 80067de:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80067e0:	4b59      	ldr	r3, [pc, #356]	; (8006948 <checkAktifCalisma+0x1304>)
 80067e2:	781a      	ldrb	r2, [r3, #0]
 80067e4:	4b59      	ldr	r3, [pc, #356]	; (800694c <checkAktifCalisma+0x1308>)
 80067e6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80067ea:	4b56      	ldr	r3, [pc, #344]	; (8006944 <checkAktifCalisma+0x1300>)
 80067ec:	781a      	ldrb	r2, [r3, #0]
 80067ee:	4b57      	ldr	r3, [pc, #348]	; (800694c <checkAktifCalisma+0x1308>)
 80067f0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80067f2:	4b53      	ldr	r3, [pc, #332]	; (8006940 <checkAktifCalisma+0x12fc>)
 80067f4:	781a      	ldrb	r2, [r3, #0]
 80067f6:	4b55      	ldr	r3, [pc, #340]	; (800694c <checkAktifCalisma+0x1308>)
 80067f8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80067fa:	4b50      	ldr	r3, [pc, #320]	; (800693c <checkAktifCalisma+0x12f8>)
 80067fc:	781a      	ldrb	r2, [r3, #0]
 80067fe:	4b53      	ldr	r3, [pc, #332]	; (800694c <checkAktifCalisma+0x1308>)
 8006800:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006802:	4b4d      	ldr	r3, [pc, #308]	; (8006938 <checkAktifCalisma+0x12f4>)
 8006804:	781a      	ldrb	r2, [r3, #0]
 8006806:	4b51      	ldr	r3, [pc, #324]	; (800694c <checkAktifCalisma+0x1308>)
 8006808:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 800680a:	4b51      	ldr	r3, [pc, #324]	; (8006950 <checkAktifCalisma+0x130c>)
 800680c:	2201      	movs	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006810:	4b44      	ldr	r3, [pc, #272]	; (8006924 <checkAktifCalisma+0x12e0>)
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8006816:	4b47      	ldr	r3, [pc, #284]	; (8006934 <checkAktifCalisma+0x12f0>)
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 800681c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006820:	484c      	ldr	r0, [pc, #304]	; (8006954 <checkAktifCalisma+0x1310>)
 8006822:	f003 f811 	bl	8009848 <HAL_GPIO_ReadPin>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d016      	beq.n	800685a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800682c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006830:	4848      	ldr	r0, [pc, #288]	; (8006954 <checkAktifCalisma+0x1310>)
 8006832:	f003 f809 	bl	8009848 <HAL_GPIO_ReadPin>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00e      	beq.n	800685a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800683c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006840:	4844      	ldr	r0, [pc, #272]	; (8006954 <checkAktifCalisma+0x1310>)
 8006842:	f003 f801 	bl	8009848 <HAL_GPIO_ReadPin>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d006      	beq.n	800685a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800684c:	2140      	movs	r1, #64	; 0x40
 800684e:	4836      	ldr	r0, [pc, #216]	; (8006928 <checkAktifCalisma+0x12e4>)
 8006850:	f002 fffa 	bl	8009848 <HAL_GPIO_ReadPin>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d103      	bne.n	8006862 <checkAktifCalisma+0x121e>
			startBasili=1;
 800685a:	4b3f      	ldr	r3, [pc, #252]	; (8006958 <checkAktifCalisma+0x1314>)
 800685c:	2201      	movs	r2, #1
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e002      	b.n	8006868 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006862:	4b3d      	ldr	r3, [pc, #244]	; (8006958 <checkAktifCalisma+0x1314>)
 8006864:	2200      	movs	r2, #0
 8006866:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006868:	4b3b      	ldr	r3, [pc, #236]	; (8006958 <checkAktifCalisma+0x1314>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d014      	beq.n	800689a <checkAktifCalisma+0x1256>
 8006870:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006874:	4837      	ldr	r0, [pc, #220]	; (8006954 <checkAktifCalisma+0x1310>)
 8006876:	f002 ffe7 	bl	8009848 <HAL_GPIO_ReadPin>
 800687a:	4603      	mov	r3, r0
 800687c:	2b01      	cmp	r3, #1
 800687e:	d10c      	bne.n	800689a <checkAktifCalisma+0x1256>
			hataVar=1;
 8006880:	4b36      	ldr	r3, [pc, #216]	; (800695c <checkAktifCalisma+0x1318>)
 8006882:	2201      	movs	r2, #1
 8006884:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8006886:	2001      	movs	r0, #1
 8006888:	f7fe f898 	bl	80049bc <hataKoduLcdGoster>
			hata2EEPROM(1);
 800688c:	2001      	movs	r0, #1
 800688e:	f7fe fc27 	bl	80050e0 <hata2EEPROM>
			acilstophatasi=1;
 8006892:	4b33      	ldr	r3, [pc, #204]	; (8006960 <checkAktifCalisma+0x131c>)
 8006894:	2201      	movs	r2, #1
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	e018      	b.n	80068cc <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800689a:	4b31      	ldr	r3, [pc, #196]	; (8006960 <checkAktifCalisma+0x131c>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d014      	beq.n	80068cc <checkAktifCalisma+0x1288>
 80068a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068a6:	482b      	ldr	r0, [pc, #172]	; (8006954 <checkAktifCalisma+0x1310>)
 80068a8:	f002 ffce 	bl	8009848 <HAL_GPIO_ReadPin>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10c      	bne.n	80068cc <checkAktifCalisma+0x1288>
 80068b2:	4b29      	ldr	r3, [pc, #164]	; (8006958 <checkAktifCalisma+0x1314>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	f083 0301 	eor.w	r3, r3, #1
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 80068c0:	4b27      	ldr	r3, [pc, #156]	; (8006960 <checkAktifCalisma+0x131c>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80068c6:	2001      	movs	r0, #1
 80068c8:	f7fe f824 	bl	8004914 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80068cc:	4b25      	ldr	r3, [pc, #148]	; (8006964 <checkAktifCalisma+0x1320>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	f083 0301 	eor.w	r3, r3, #1
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d04c      	beq.n	8006974 <checkAktifCalisma+0x1330>
 80068da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068de:	481d      	ldr	r0, [pc, #116]	; (8006954 <checkAktifCalisma+0x1310>)
 80068e0:	f002 ffb2 	bl	8009848 <HAL_GPIO_ReadPin>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <checkAktifCalisma+0x12ae>
 80068ea:	4b1f      	ldr	r3, [pc, #124]	; (8006968 <checkAktifCalisma+0x1324>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d040      	beq.n	8006974 <checkAktifCalisma+0x1330>
 80068f2:	4b1e      	ldr	r3, [pc, #120]	; (800696c <checkAktifCalisma+0x1328>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d13c      	bne.n	8006974 <checkAktifCalisma+0x1330>
			hataVar=1;
 80068fa:	4b18      	ldr	r3, [pc, #96]	; (800695c <checkAktifCalisma+0x1318>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006900:	2002      	movs	r0, #2
 8006902:	f7fe f85b 	bl	80049bc <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006906:	2002      	movs	r0, #2
 8006908:	f7fe fbea 	bl	80050e0 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 800690c:	4b18      	ldr	r3, [pc, #96]	; (8006970 <checkAktifCalisma+0x132c>)
 800690e:	2201      	movs	r2, #1
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	e047      	b.n	80069a4 <checkAktifCalisma+0x1360>
 8006914:	20000b77 	.word	0x20000b77
 8006918:	20000b76 	.word	0x20000b76
 800691c:	20000b75 	.word	0x20000b75
 8006920:	40010800 	.word	0x40010800
 8006924:	20000b6b 	.word	0x20000b6b
 8006928:	40011000 	.word	0x40011000
 800692c:	20000b32 	.word	0x20000b32
 8006930:	20000b6e 	.word	0x20000b6e
 8006934:	20000b6c 	.word	0x20000b6c
 8006938:	20000b29 	.word	0x20000b29
 800693c:	20000b2a 	.word	0x20000b2a
 8006940:	20000941 	.word	0x20000941
 8006944:	20000942 	.word	0x20000942
 8006948:	20000b2b 	.word	0x20000b2b
 800694c:	20000ac0 	.word	0x20000ac0
 8006950:	20000b58 	.word	0x20000b58
 8006954:	40010c00 	.word	0x40010c00
 8006958:	20000b7a 	.word	0x20000b7a
 800695c:	20000b81 	.word	0x20000b81
 8006960:	20000b7c 	.word	0x20000b7c
 8006964:	20000b83 	.word	0x20000b83
 8006968:	20000b8d 	.word	0x20000b8d
 800696c:	20000b30 	.word	0x20000b30
 8006970:	20000b7d 	.word	0x20000b7d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006974:	4b97      	ldr	r3, [pc, #604]	; (8006bd4 <checkAktifCalisma+0x1590>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d013      	beq.n	80069a4 <checkAktifCalisma+0x1360>
 800697c:	4b96      	ldr	r3, [pc, #600]	; (8006bd8 <checkAktifCalisma+0x1594>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00f      	beq.n	80069a4 <checkAktifCalisma+0x1360>
 8006984:	4b95      	ldr	r3, [pc, #596]	; (8006bdc <checkAktifCalisma+0x1598>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	f083 0301 	eor.w	r3, r3, #1
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8006992:	4b90      	ldr	r3, [pc, #576]	; (8006bd4 <checkAktifCalisma+0x1590>)
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006998:	4b91      	ldr	r3, [pc, #580]	; (8006be0 <checkAktifCalisma+0x159c>)
 800699a:	2200      	movs	r2, #0
 800699c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800699e:	2002      	movs	r0, #2
 80069a0:	f7fd ffb8 	bl	8004914 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80069a4:	4b8f      	ldr	r3, [pc, #572]	; (8006be4 <checkAktifCalisma+0x15a0>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d11c      	bne.n	80069e6 <checkAktifCalisma+0x13a2>
 80069ac:	4b8e      	ldr	r3, [pc, #568]	; (8006be8 <checkAktifCalisma+0x15a4>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d118      	bne.n	80069e6 <checkAktifCalisma+0x13a2>
 80069b4:	4b8d      	ldr	r3, [pc, #564]	; (8006bec <checkAktifCalisma+0x15a8>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d014      	beq.n	80069e6 <checkAktifCalisma+0x13a2>
 80069bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069c0:	488b      	ldr	r0, [pc, #556]	; (8006bf0 <checkAktifCalisma+0x15ac>)
 80069c2:	f002 ff41 	bl	8009848 <HAL_GPIO_ReadPin>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d10c      	bne.n	80069e6 <checkAktifCalisma+0x13a2>
			hataVar=1;
 80069cc:	4b89      	ldr	r3, [pc, #548]	; (8006bf4 <checkAktifCalisma+0x15b0>)
 80069ce:	2201      	movs	r2, #1
 80069d0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80069d2:	2003      	movs	r0, #3
 80069d4:	f7fd fff2 	bl	80049bc <hataKoduLcdGoster>
			hata2EEPROM(3);
 80069d8:	2003      	movs	r0, #3
 80069da:	f7fe fb81 	bl	80050e0 <hata2EEPROM>
			basinchatasi=1;
 80069de:	4b86      	ldr	r3, [pc, #536]	; (8006bf8 <checkAktifCalisma+0x15b4>)
 80069e0:	2201      	movs	r2, #1
 80069e2:	701a      	strb	r2, [r3, #0]
 80069e4:	e015      	b.n	8006a12 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80069e6:	4b84      	ldr	r3, [pc, #528]	; (8006bf8 <checkAktifCalisma+0x15b4>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d011      	beq.n	8006a12 <checkAktifCalisma+0x13ce>
 80069ee:	4b7d      	ldr	r3, [pc, #500]	; (8006be4 <checkAktifCalisma+0x15a0>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d10d      	bne.n	8006a12 <checkAktifCalisma+0x13ce>
 80069f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069fa:	4880      	ldr	r0, [pc, #512]	; (8006bfc <checkAktifCalisma+0x15b8>)
 80069fc:	f002 ff24 	bl	8009848 <HAL_GPIO_ReadPin>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d105      	bne.n	8006a12 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8006a06:	4b7c      	ldr	r3, [pc, #496]	; (8006bf8 <checkAktifCalisma+0x15b4>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006a0c:	2003      	movs	r0, #3
 8006a0e:	f7fd ff81 	bl	8004914 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006a12:	4b7b      	ldr	r3, [pc, #492]	; (8006c00 <checkAktifCalisma+0x15bc>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d103      	bne.n	8006a22 <checkAktifCalisma+0x13de>
 8006a1a:	4b7a      	ldr	r3, [pc, #488]	; (8006c04 <checkAktifCalisma+0x15c0>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d01c      	beq.n	8006a5c <checkAktifCalisma+0x1418>
 8006a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a26:	4878      	ldr	r0, [pc, #480]	; (8006c08 <checkAktifCalisma+0x15c4>)
 8006a28:	f002 ff0e 	bl	8009848 <HAL_GPIO_ReadPin>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d114      	bne.n	8006a5c <checkAktifCalisma+0x1418>
 8006a32:	4b76      	ldr	r3, [pc, #472]	; (8006c0c <checkAktifCalisma+0x15c8>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d003      	beq.n	8006a42 <checkAktifCalisma+0x13fe>
 8006a3a:	4b74      	ldr	r3, [pc, #464]	; (8006c0c <checkAktifCalisma+0x15c8>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d10c      	bne.n	8006a5c <checkAktifCalisma+0x1418>
			hataVar=1;
 8006a42:	4b6c      	ldr	r3, [pc, #432]	; (8006bf4 <checkAktifCalisma+0x15b0>)
 8006a44:	2201      	movs	r2, #1
 8006a46:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006a48:	2004      	movs	r0, #4
 8006a4a:	f7fd ffb7 	bl	80049bc <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006a4e:	2004      	movs	r0, #4
 8006a50:	f7fe fb46 	bl	80050e0 <hata2EEPROM>
			katkapisivicihatasi=1;
 8006a54:	4b6e      	ldr	r3, [pc, #440]	; (8006c10 <checkAktifCalisma+0x15cc>)
 8006a56:	2201      	movs	r2, #1
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	e01f      	b.n	8006a9c <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006a5c:	4b6c      	ldr	r3, [pc, #432]	; (8006c10 <checkAktifCalisma+0x15cc>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01b      	beq.n	8006a9c <checkAktifCalisma+0x1458>
 8006a64:	4b6b      	ldr	r3, [pc, #428]	; (8006c14 <checkAktifCalisma+0x15d0>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d017      	beq.n	8006a9c <checkAktifCalisma+0x1458>
 8006a6c:	4b64      	ldr	r3, [pc, #400]	; (8006c00 <checkAktifCalisma+0x15bc>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	f083 0301 	eor.w	r3, r3, #1
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d010      	beq.n	8006a9c <checkAktifCalisma+0x1458>
 8006a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a7e:	4862      	ldr	r0, [pc, #392]	; (8006c08 <checkAktifCalisma+0x15c4>)
 8006a80:	f002 fee2 	bl	8009848 <HAL_GPIO_ReadPin>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d108      	bne.n	8006a9c <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 8006a8a:	4b61      	ldr	r3, [pc, #388]	; (8006c10 <checkAktifCalisma+0x15cc>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006a90:	4b5c      	ldr	r3, [pc, #368]	; (8006c04 <checkAktifCalisma+0x15c0>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006a96:	2004      	movs	r0, #4
 8006a98:	f7fd ff3c 	bl	8004914 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006a9c:	4b58      	ldr	r3, [pc, #352]	; (8006c00 <checkAktifCalisma+0x15bc>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d103      	bne.n	8006aac <checkAktifCalisma+0x1468>
 8006aa4:	4b5c      	ldr	r3, [pc, #368]	; (8006c18 <checkAktifCalisma+0x15d4>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01c      	beq.n	8006ae6 <checkAktifCalisma+0x14a2>
 8006aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ab0:	4855      	ldr	r0, [pc, #340]	; (8006c08 <checkAktifCalisma+0x15c4>)
 8006ab2:	f002 fec9 	bl	8009848 <HAL_GPIO_ReadPin>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d114      	bne.n	8006ae6 <checkAktifCalisma+0x14a2>
 8006abc:	4b53      	ldr	r3, [pc, #332]	; (8006c0c <checkAktifCalisma+0x15c8>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d003      	beq.n	8006acc <checkAktifCalisma+0x1488>
 8006ac4:	4b51      	ldr	r3, [pc, #324]	; (8006c0c <checkAktifCalisma+0x15c8>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d10c      	bne.n	8006ae6 <checkAktifCalisma+0x14a2>
			hataVar=1;
 8006acc:	4b49      	ldr	r3, [pc, #292]	; (8006bf4 <checkAktifCalisma+0x15b0>)
 8006ace:	2201      	movs	r2, #1
 8006ad0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006ad2:	2005      	movs	r0, #5
 8006ad4:	f7fd ff72 	bl	80049bc <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006ad8:	2005      	movs	r0, #5
 8006ada:	f7fe fb01 	bl	80050e0 <hata2EEPROM>
			tablakapisivicihatasi=1;
 8006ade:	4b4f      	ldr	r3, [pc, #316]	; (8006c1c <checkAktifCalisma+0x15d8>)
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	e023      	b.n	8006b2e <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006ae6:	4b4d      	ldr	r3, [pc, #308]	; (8006c1c <checkAktifCalisma+0x15d8>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d01f      	beq.n	8006b2e <checkAktifCalisma+0x14ea>
 8006aee:	4b49      	ldr	r3, [pc, #292]	; (8006c14 <checkAktifCalisma+0x15d0>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d01b      	beq.n	8006b2e <checkAktifCalisma+0x14ea>
 8006af6:	4b42      	ldr	r3, [pc, #264]	; (8006c00 <checkAktifCalisma+0x15bc>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f083 0301 	eor.w	r3, r3, #1
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d014      	beq.n	8006b2e <checkAktifCalisma+0x14ea>
 8006b04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b08:	483f      	ldr	r0, [pc, #252]	; (8006c08 <checkAktifCalisma+0x15c4>)
 8006b0a:	f002 fe9d 	bl	8009848 <HAL_GPIO_ReadPin>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10c      	bne.n	8006b2e <checkAktifCalisma+0x14ea>
 8006b14:	4b3f      	ldr	r3, [pc, #252]	; (8006c14 <checkAktifCalisma+0x15d0>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8006b1c:	4b3f      	ldr	r3, [pc, #252]	; (8006c1c <checkAktifCalisma+0x15d8>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006b22:	4b3d      	ldr	r3, [pc, #244]	; (8006c18 <checkAktifCalisma+0x15d4>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006b28:	2005      	movs	r0, #5
 8006b2a:	f7fd fef3 	bl	8004914 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006b2e:	4b2f      	ldr	r3, [pc, #188]	; (8006bec <checkAktifCalisma+0x15a8>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d107      	bne.n	8006b46 <checkAktifCalisma+0x1502>
 8006b36:	4b29      	ldr	r3, [pc, #164]	; (8006bdc <checkAktifCalisma+0x1598>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d103      	bne.n	8006b46 <checkAktifCalisma+0x1502>
 8006b3e:	4b38      	ldr	r3, [pc, #224]	; (8006c20 <checkAktifCalisma+0x15dc>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d014      	beq.n	8006b70 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8006b46:	4b37      	ldr	r3, [pc, #220]	; (8006c24 <checkAktifCalisma+0x15e0>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4b37      	ldr	r3, [pc, #220]	; (8006c28 <checkAktifCalisma+0x15e4>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	4a36      	ldr	r2, [pc, #216]	; (8006c2c <checkAktifCalisma+0x15e8>)
 8006b52:	7812      	ldrb	r2, [r2, #0]
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d30b      	bcc.n	8006b70 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8006b58:	4b26      	ldr	r3, [pc, #152]	; (8006bf4 <checkAktifCalisma+0x15b0>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006b5e:	2006      	movs	r0, #6
 8006b60:	f7fd ff2c 	bl	80049bc <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006b64:	2006      	movs	r0, #6
 8006b66:	f7fe fabb 	bl	80050e0 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8006b6a:	4b31      	ldr	r3, [pc, #196]	; (8006c30 <checkAktifCalisma+0x15ec>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006b70:	4b2f      	ldr	r3, [pc, #188]	; (8006c30 <checkAktifCalisma+0x15ec>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d013      	beq.n	8006ba0 <checkAktifCalisma+0x155c>
 8006b78:	2108      	movs	r1, #8
 8006b7a:	4823      	ldr	r0, [pc, #140]	; (8006c08 <checkAktifCalisma+0x15c4>)
 8006b7c:	f002 fe64 	bl	8009848 <HAL_GPIO_ReadPin>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00c      	beq.n	8006ba0 <checkAktifCalisma+0x155c>
 8006b86:	4b1e      	ldr	r3, [pc, #120]	; (8006c00 <checkAktifCalisma+0x15bc>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	f083 0301 	eor.w	r3, r3, #1
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8006b94:	4b26      	ldr	r3, [pc, #152]	; (8006c30 <checkAktifCalisma+0x15ec>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006b9a:	2006      	movs	r0, #6
 8006b9c:	f7fd feba 	bl	8004914 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006ba0:	4b24      	ldr	r3, [pc, #144]	; (8006c34 <checkAktifCalisma+0x15f0>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10b      	bne.n	8006bc0 <checkAktifCalisma+0x157c>
 8006ba8:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <checkAktifCalisma+0x1598>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d107      	bne.n	8006bc0 <checkAktifCalisma+0x157c>
 8006bb0:	4b21      	ldr	r3, [pc, #132]	; (8006c38 <checkAktifCalisma+0x15f4>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d103      	bne.n	8006bc0 <checkAktifCalisma+0x157c>
 8006bb8:	4b19      	ldr	r3, [pc, #100]	; (8006c20 <checkAktifCalisma+0x15dc>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d03f      	beq.n	8006c40 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8006bc0:	4b1e      	ldr	r3, [pc, #120]	; (8006c3c <checkAktifCalisma+0x15f8>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	; (8006c04 <checkAktifCalisma+0x15c0>)
 8006bc8:	2201      	movs	r2, #1
 8006bca:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006bcc:	4b12      	ldr	r3, [pc, #72]	; (8006c18 <checkAktifCalisma+0x15d4>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	e03c      	b.n	8006c4e <checkAktifCalisma+0x160a>
 8006bd4:	20000b7d 	.word	0x20000b7d
 8006bd8:	20000b83 	.word	0x20000b83
 8006bdc:	20000b64 	.word	0x20000b64
 8006be0:	20000b8d 	.word	0x20000b8d
 8006be4:	20000b2f 	.word	0x20000b2f
 8006be8:	20000b33 	.word	0x20000b33
 8006bec:	20000b80 	.word	0x20000b80
 8006bf0:	40011000 	.word	0x40011000
 8006bf4:	20000b81 	.word	0x20000b81
 8006bf8:	20000b8a 	.word	0x20000b8a
 8006bfc:	40010c00 	.word	0x40010c00
 8006c00:	20000b7a 	.word	0x20000b7a
 8006c04:	20000b8e 	.word	0x20000b8e
 8006c08:	40010800 	.word	0x40010800
 8006c0c:	20000b34 	.word	0x20000b34
 8006c10:	20000b8b 	.word	0x20000b8b
 8006c14:	20000b6e 	.word	0x20000b6e
 8006c18:	20000b8f 	.word	0x20000b8f
 8006c1c:	20000b8c 	.word	0x20000b8c
 8006c20:	20000b63 	.word	0x20000b63
 8006c24:	20000b08 	.word	0x20000b08
 8006c28:	20000b1c 	.word	0x20000b1c
 8006c2c:	20000b44 	.word	0x20000b44
 8006c30:	20000b7b 	.word	0x20000b7b
 8006c34:	20000b61 	.word	0x20000b61
 8006c38:	20000b62 	.word	0x20000b62
 8006c3c:	20000b82 	.word	0x20000b82
		} else {
			makineCalisiyor=1;
 8006c40:	4b1e      	ldr	r3, [pc, #120]	; (8006cbc <checkAktifCalisma+0x1678>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006c46:	4b1e      	ldr	r3, [pc, #120]	; (8006cc0 <checkAktifCalisma+0x167c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a1e      	ldr	r2, [pc, #120]	; (8006cc4 <checkAktifCalisma+0x1680>)
 8006c4c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006c4e:	4b1e      	ldr	r3, [pc, #120]	; (8006cc8 <checkAktifCalisma+0x1684>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d02f      	beq.n	8006cb6 <checkAktifCalisma+0x1672>
 8006c56:	4b1d      	ldr	r3, [pc, #116]	; (8006ccc <checkAktifCalisma+0x1688>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	f083 0301 	eor.w	r3, r3, #1
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d028      	beq.n	8006cb6 <checkAktifCalisma+0x1672>
 8006c64:	4b1a      	ldr	r3, [pc, #104]	; (8006cd0 <checkAktifCalisma+0x168c>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	f083 0301 	eor.w	r3, r3, #1
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d021      	beq.n	8006cb6 <checkAktifCalisma+0x1672>
 8006c72:	4b18      	ldr	r3, [pc, #96]	; (8006cd4 <checkAktifCalisma+0x1690>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	f083 0301 	eor.w	r3, r3, #1
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d01a      	beq.n	8006cb6 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006c80:	4b15      	ldr	r3, [pc, #84]	; (8006cd8 <checkAktifCalisma+0x1694>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	f083 0301 	eor.w	r3, r3, #1
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d013      	beq.n	8006cb6 <checkAktifCalisma+0x1672>
 8006c8e:	4b13      	ldr	r3, [pc, #76]	; (8006cdc <checkAktifCalisma+0x1698>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	f083 0301 	eor.w	r3, r3, #1
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00c      	beq.n	8006cb6 <checkAktifCalisma+0x1672>
 8006c9c:	4b10      	ldr	r3, [pc, #64]	; (8006ce0 <checkAktifCalisma+0x169c>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	f083 0301 	eor.w	r3, r3, #1
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <checkAktifCalisma+0x1672>
			hataVar=0;
 8006caa:	4b07      	ldr	r3, [pc, #28]	; (8006cc8 <checkAktifCalisma+0x1684>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006cb0:	2007      	movs	r0, #7
 8006cb2:	f7fd fe2f 	bl	8004914 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006cb6:	bf00      	nop
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000b82 	.word	0x20000b82
 8006cc0:	20000b08 	.word	0x20000b08
 8006cc4:	20000b1c 	.word	0x20000b1c
 8006cc8:	20000b81 	.word	0x20000b81
 8006ccc:	20000b7c 	.word	0x20000b7c
 8006cd0:	20000b7d 	.word	0x20000b7d
 8006cd4:	20000b8a 	.word	0x20000b8a
 8006cd8:	20000b8b 	.word	0x20000b8b
 8006cdc:	20000b8c 	.word	0x20000b8c
 8006ce0:	20000b7b 	.word	0x20000b7b

08006ce4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006ce8:	4b8b      	ldr	r3, [pc, #556]	; (8006f18 <checkDemoModCalisma+0x234>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	f040 8229 	bne.w	8007144 <checkDemoModCalisma+0x460>
 8006cf2:	4b8a      	ldr	r3, [pc, #552]	; (8006f1c <checkDemoModCalisma+0x238>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 8224 	beq.w	8007144 <checkDemoModCalisma+0x460>
 8006cfc:	4b88      	ldr	r3, [pc, #544]	; (8006f20 <checkDemoModCalisma+0x23c>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f040 821f 	bne.w	8007144 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006d06:	2102      	movs	r1, #2
 8006d08:	4886      	ldr	r0, [pc, #536]	; (8006f24 <checkDemoModCalisma+0x240>)
 8006d0a:	f002 fd9d 	bl	8009848 <HAL_GPIO_ReadPin>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d11d      	bne.n	8006d50 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006d14:	4b84      	ldr	r3, [pc, #528]	; (8006f28 <checkDemoModCalisma+0x244>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	f083 0301 	eor.w	r3, r3, #1
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d016      	beq.n	8006d50 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006d22:	4b82      	ldr	r3, [pc, #520]	; (8006f2c <checkDemoModCalisma+0x248>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	f083 0301 	eor.w	r3, r3, #1
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00f      	beq.n	8006d50 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006d30:	4b7f      	ldr	r3, [pc, #508]	; (8006f30 <checkDemoModCalisma+0x24c>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	f083 0301 	eor.w	r3, r3, #1
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d008      	beq.n	8006d50 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006d3e:	2201      	movs	r2, #1
 8006d40:	2104      	movs	r1, #4
 8006d42:	487c      	ldr	r0, [pc, #496]	; (8006f34 <checkDemoModCalisma+0x250>)
 8006d44:	f002 fd97 	bl	8009876 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006d48:	4b7b      	ldr	r3, [pc, #492]	; (8006f38 <checkDemoModCalisma+0x254>)
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	e00e      	b.n	8006d6e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006d50:	2102      	movs	r1, #2
 8006d52:	4874      	ldr	r0, [pc, #464]	; (8006f24 <checkDemoModCalisma+0x240>)
 8006d54:	f002 fd78 	bl	8009848 <HAL_GPIO_ReadPin>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d107      	bne.n	8006d6e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2104      	movs	r1, #4
 8006d62:	4874      	ldr	r0, [pc, #464]	; (8006f34 <checkDemoModCalisma+0x250>)
 8006d64:	f002 fd87 	bl	8009876 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006d68:	4b73      	ldr	r3, [pc, #460]	; (8006f38 <checkDemoModCalisma+0x254>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006d6e:	4b72      	ldr	r3, [pc, #456]	; (8006f38 <checkDemoModCalisma+0x254>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10b      	bne.n	8006d8e <checkDemoModCalisma+0xaa>
 8006d76:	4b6d      	ldr	r3, [pc, #436]	; (8006f2c <checkDemoModCalisma+0x248>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d107      	bne.n	8006d8e <checkDemoModCalisma+0xaa>
 8006d7e:	4b6c      	ldr	r3, [pc, #432]	; (8006f30 <checkDemoModCalisma+0x24c>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d103      	bne.n	8006d8e <checkDemoModCalisma+0xaa>
 8006d86:	4b68      	ldr	r3, [pc, #416]	; (8006f28 <checkDemoModCalisma+0x244>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00c      	beq.n	8006da8 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d94:	4867      	ldr	r0, [pc, #412]	; (8006f34 <checkDemoModCalisma+0x250>)
 8006d96:	f002 fd6e 	bl	8009876 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006da0:	4864      	ldr	r0, [pc, #400]	; (8006f34 <checkDemoModCalisma+0x250>)
 8006da2:	f002 fd68 	bl	8009876 <HAL_GPIO_WritePin>
 8006da6:	e00b      	b.n	8006dc0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006da8:	2200      	movs	r2, #0
 8006daa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dae:	4861      	ldr	r0, [pc, #388]	; (8006f34 <checkDemoModCalisma+0x250>)
 8006db0:	f002 fd61 	bl	8009876 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006db4:	2200      	movs	r2, #0
 8006db6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006dba:	485e      	ldr	r0, [pc, #376]	; (8006f34 <checkDemoModCalisma+0x250>)
 8006dbc:	f002 fd5b 	bl	8009876 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006dc0:	2102      	movs	r1, #2
 8006dc2:	4858      	ldr	r0, [pc, #352]	; (8006f24 <checkDemoModCalisma+0x240>)
 8006dc4:	f002 fd40 	bl	8009848 <HAL_GPIO_ReadPin>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d10d      	bne.n	8006dea <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006dce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006dd2:	4854      	ldr	r0, [pc, #336]	; (8006f24 <checkDemoModCalisma+0x240>)
 8006dd4:	f002 fd38 	bl	8009848 <HAL_GPIO_ReadPin>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d105      	bne.n	8006dea <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006dde:	4b56      	ldr	r3, [pc, #344]	; (8006f38 <checkDemoModCalisma+0x254>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	f083 0301 	eor.w	r3, r3, #1
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006dea:	2102      	movs	r1, #2
 8006dec:	484d      	ldr	r0, [pc, #308]	; (8006f24 <checkDemoModCalisma+0x240>)
 8006dee:	f002 fd2b 	bl	8009848 <HAL_GPIO_ReadPin>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d125      	bne.n	8006e44 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006dfc:	4849      	ldr	r0, [pc, #292]	; (8006f24 <checkDemoModCalisma+0x240>)
 8006dfe:	f002 fd23 	bl	8009848 <HAL_GPIO_ReadPin>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d11d      	bne.n	8006e44 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006e08:	4b4b      	ldr	r3, [pc, #300]	; (8006f38 <checkDemoModCalisma+0x254>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	f083 0301 	eor.w	r3, r3, #1
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d016      	beq.n	8006e44 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006e16:	4b44      	ldr	r3, [pc, #272]	; (8006f28 <checkDemoModCalisma+0x244>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	f083 0301 	eor.w	r3, r3, #1
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00f      	beq.n	8006e44 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006e24:	4b42      	ldr	r3, [pc, #264]	; (8006f30 <checkDemoModCalisma+0x24c>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	f083 0301 	eor.w	r3, r3, #1
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d008      	beq.n	8006e44 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006e32:	2201      	movs	r2, #1
 8006e34:	2120      	movs	r1, #32
 8006e36:	483b      	ldr	r0, [pc, #236]	; (8006f24 <checkDemoModCalisma+0x240>)
 8006e38:	f002 fd1d 	bl	8009876 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006e3c:	4b3b      	ldr	r3, [pc, #236]	; (8006f2c <checkDemoModCalisma+0x248>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	701a      	strb	r2, [r3, #0]
 8006e42:	e007      	b.n	8006e54 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006e44:	2200      	movs	r2, #0
 8006e46:	2120      	movs	r1, #32
 8006e48:	4836      	ldr	r0, [pc, #216]	; (8006f24 <checkDemoModCalisma+0x240>)
 8006e4a:	f002 fd14 	bl	8009876 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006e4e:	4b37      	ldr	r3, [pc, #220]	; (8006f2c <checkDemoModCalisma+0x248>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006e54:	2102      	movs	r1, #2
 8006e56:	4833      	ldr	r0, [pc, #204]	; (8006f24 <checkDemoModCalisma+0x240>)
 8006e58:	f002 fcf6 	bl	8009848 <HAL_GPIO_ReadPin>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d125      	bne.n	8006eae <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006e62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e66:	482f      	ldr	r0, [pc, #188]	; (8006f24 <checkDemoModCalisma+0x240>)
 8006e68:	f002 fcee 	bl	8009848 <HAL_GPIO_ReadPin>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d11d      	bne.n	8006eae <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006e72:	4b31      	ldr	r3, [pc, #196]	; (8006f38 <checkDemoModCalisma+0x254>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	f083 0301 	eor.w	r3, r3, #1
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d016      	beq.n	8006eae <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006e80:	4b2a      	ldr	r3, [pc, #168]	; (8006f2c <checkDemoModCalisma+0x248>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f083 0301 	eor.w	r3, r3, #1
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00f      	beq.n	8006eae <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006e8e:	4b26      	ldr	r3, [pc, #152]	; (8006f28 <checkDemoModCalisma+0x244>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	f083 0301 	eor.w	r3, r3, #1
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d008      	beq.n	8006eae <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	2110      	movs	r1, #16
 8006ea0:	4820      	ldr	r0, [pc, #128]	; (8006f24 <checkDemoModCalisma+0x240>)
 8006ea2:	f002 fce8 	bl	8009876 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006ea6:	4b22      	ldr	r3, [pc, #136]	; (8006f30 <checkDemoModCalisma+0x24c>)
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	e007      	b.n	8006ebe <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2110      	movs	r1, #16
 8006eb2:	481c      	ldr	r0, [pc, #112]	; (8006f24 <checkDemoModCalisma+0x240>)
 8006eb4:	f002 fcdf 	bl	8009876 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006eb8:	4b1d      	ldr	r3, [pc, #116]	; (8006f30 <checkDemoModCalisma+0x24c>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006ebe:	2104      	movs	r1, #4
 8006ec0:	4818      	ldr	r0, [pc, #96]	; (8006f24 <checkDemoModCalisma+0x240>)
 8006ec2:	f002 fcc1 	bl	8009848 <HAL_GPIO_ReadPin>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d139      	bne.n	8006f40 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006ecc:	4b1a      	ldr	r3, [pc, #104]	; (8006f38 <checkDemoModCalisma+0x254>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f083 0301 	eor.w	r3, r3, #1
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d032      	beq.n	8006f40 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8006eda:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <checkDemoModCalisma+0x24c>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	f083 0301 	eor.w	r3, r3, #1
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d02b      	beq.n	8006f40 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006ee8:	4b10      	ldr	r3, [pc, #64]	; (8006f2c <checkDemoModCalisma+0x248>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	f083 0301 	eor.w	r3, r3, #1
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d024      	beq.n	8006f40 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	2102      	movs	r1, #2
 8006efa:	480e      	ldr	r0, [pc, #56]	; (8006f34 <checkDemoModCalisma+0x250>)
 8006efc:	f002 fcbb 	bl	8009876 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006f00:	2201      	movs	r2, #1
 8006f02:	2101      	movs	r1, #1
 8006f04:	480b      	ldr	r0, [pc, #44]	; (8006f34 <checkDemoModCalisma+0x250>)
 8006f06:	f002 fcb6 	bl	8009876 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8006f0a:	4b07      	ldr	r3, [pc, #28]	; (8006f28 <checkDemoModCalisma+0x244>)
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <checkDemoModCalisma+0x258>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	701a      	strb	r2, [r3, #0]
 8006f16:	e027      	b.n	8006f68 <checkDemoModCalisma+0x284>
 8006f18:	20000b4a 	.word	0x20000b4a
 8006f1c:	20000b7e 	.word	0x20000b7e
 8006f20:	20000b49 	.word	0x20000b49
 8006f24:	40011000 	.word	0x40011000
 8006f28:	20000b85 	.word	0x20000b85
 8006f2c:	20000b86 	.word	0x20000b86
 8006f30:	20000b87 	.word	0x20000b87
 8006f34:	40010c00 	.word	0x40010c00
 8006f38:	20000b84 	.word	0x20000b84
 8006f3c:	20000b6a 	.word	0x20000b6a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006f40:	2104      	movs	r1, #4
 8006f42:	48a0      	ldr	r0, [pc, #640]	; (80071c4 <checkDemoModCalisma+0x4e0>)
 8006f44:	f002 fc80 	bl	8009848 <HAL_GPIO_ReadPin>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d10c      	bne.n	8006f68 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2102      	movs	r1, #2
 8006f52:	489d      	ldr	r0, [pc, #628]	; (80071c8 <checkDemoModCalisma+0x4e4>)
 8006f54:	f002 fc8f 	bl	8009876 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	489a      	ldr	r0, [pc, #616]	; (80071c8 <checkDemoModCalisma+0x4e4>)
 8006f5e:	f002 fc8a 	bl	8009876 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006f62:	4b9a      	ldr	r3, [pc, #616]	; (80071cc <checkDemoModCalisma+0x4e8>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006f68:	2104      	movs	r1, #4
 8006f6a:	4896      	ldr	r0, [pc, #600]	; (80071c4 <checkDemoModCalisma+0x4e0>)
 8006f6c:	f002 fc6c 	bl	8009848 <HAL_GPIO_ReadPin>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d10d      	bne.n	8006f92 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006f76:	2201      	movs	r2, #1
 8006f78:	2180      	movs	r1, #128	; 0x80
 8006f7a:	4895      	ldr	r0, [pc, #596]	; (80071d0 <checkDemoModCalisma+0x4ec>)
 8006f7c:	f002 fc7b 	bl	8009876 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006f80:	2201      	movs	r2, #1
 8006f82:	2120      	movs	r1, #32
 8006f84:	4892      	ldr	r0, [pc, #584]	; (80071d0 <checkDemoModCalisma+0x4ec>)
 8006f86:	f002 fc76 	bl	8009876 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006f8a:	4b92      	ldr	r3, [pc, #584]	; (80071d4 <checkDemoModCalisma+0x4f0>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a92      	ldr	r2, [pc, #584]	; (80071d8 <checkDemoModCalisma+0x4f4>)
 8006f90:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006f92:	4b90      	ldr	r3, [pc, #576]	; (80071d4 <checkDemoModCalisma+0x4f0>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	4b90      	ldr	r3, [pc, #576]	; (80071d8 <checkDemoModCalisma+0x4f4>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d909      	bls.n	8006fb4 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2180      	movs	r1, #128	; 0x80
 8006fa4:	488a      	ldr	r0, [pc, #552]	; (80071d0 <checkDemoModCalisma+0x4ec>)
 8006fa6:	f002 fc66 	bl	8009876 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006faa:	2200      	movs	r2, #0
 8006fac:	2120      	movs	r1, #32
 8006fae:	4888      	ldr	r0, [pc, #544]	; (80071d0 <checkDemoModCalisma+0x4ec>)
 8006fb0:	f002 fc61 	bl	8009876 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006fb4:	2102      	movs	r1, #2
 8006fb6:	4883      	ldr	r0, [pc, #524]	; (80071c4 <checkDemoModCalisma+0x4e0>)
 8006fb8:	f002 fc46 	bl	8009848 <HAL_GPIO_ReadPin>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d108      	bne.n	8006fd4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	2140      	movs	r1, #64	; 0x40
 8006fc6:	4882      	ldr	r0, [pc, #520]	; (80071d0 <checkDemoModCalisma+0x4ec>)
 8006fc8:	f002 fc55 	bl	8009876 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006fcc:	4b81      	ldr	r3, [pc, #516]	; (80071d4 <checkDemoModCalisma+0x4f0>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a81      	ldr	r2, [pc, #516]	; (80071d8 <checkDemoModCalisma+0x4f4>)
 8006fd2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006fd4:	4b7f      	ldr	r3, [pc, #508]	; (80071d4 <checkDemoModCalisma+0x4f0>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	4b7f      	ldr	r3, [pc, #508]	; (80071d8 <checkDemoModCalisma+0x4f4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d904      	bls.n	8006fec <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2140      	movs	r1, #64	; 0x40
 8006fe6:	487a      	ldr	r0, [pc, #488]	; (80071d0 <checkDemoModCalisma+0x4ec>)
 8006fe8:	f002 fc45 	bl	8009876 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006fec:	4b7b      	ldr	r3, [pc, #492]	; (80071dc <checkDemoModCalisma+0x4f8>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d058      	beq.n	80070a6 <checkDemoModCalisma+0x3c2>
 8006ff4:	4b7a      	ldr	r3, [pc, #488]	; (80071e0 <checkDemoModCalisma+0x4fc>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d054      	beq.n	80070a6 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006ffc:	4b79      	ldr	r3, [pc, #484]	; (80071e4 <checkDemoModCalisma+0x500>)
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	3301      	adds	r3, #1
 8007002:	b2da      	uxtb	r2, r3
 8007004:	4b77      	ldr	r3, [pc, #476]	; (80071e4 <checkDemoModCalisma+0x500>)
 8007006:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007008:	4b76      	ldr	r3, [pc, #472]	; (80071e4 <checkDemoModCalisma+0x500>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b09      	cmp	r3, #9
 800700e:	d908      	bls.n	8007022 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007010:	4b74      	ldr	r3, [pc, #464]	; (80071e4 <checkDemoModCalisma+0x500>)
 8007012:	2200      	movs	r2, #0
 8007014:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007016:	4b74      	ldr	r3, [pc, #464]	; (80071e8 <checkDemoModCalisma+0x504>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	3301      	adds	r3, #1
 800701c:	b2da      	uxtb	r2, r3
 800701e:	4b72      	ldr	r3, [pc, #456]	; (80071e8 <checkDemoModCalisma+0x504>)
 8007020:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007022:	4b71      	ldr	r3, [pc, #452]	; (80071e8 <checkDemoModCalisma+0x504>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b09      	cmp	r3, #9
 8007028:	d908      	bls.n	800703c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800702a:	4b6f      	ldr	r3, [pc, #444]	; (80071e8 <checkDemoModCalisma+0x504>)
 800702c:	2200      	movs	r2, #0
 800702e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007030:	4b6e      	ldr	r3, [pc, #440]	; (80071ec <checkDemoModCalisma+0x508>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	3301      	adds	r3, #1
 8007036:	b2da      	uxtb	r2, r3
 8007038:	4b6c      	ldr	r3, [pc, #432]	; (80071ec <checkDemoModCalisma+0x508>)
 800703a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 800703c:	4b6b      	ldr	r3, [pc, #428]	; (80071ec <checkDemoModCalisma+0x508>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b09      	cmp	r3, #9
 8007042:	d908      	bls.n	8007056 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007044:	4b69      	ldr	r3, [pc, #420]	; (80071ec <checkDemoModCalisma+0x508>)
 8007046:	2200      	movs	r2, #0
 8007048:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800704a:	4b69      	ldr	r3, [pc, #420]	; (80071f0 <checkDemoModCalisma+0x50c>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	3301      	adds	r3, #1
 8007050:	b2da      	uxtb	r2, r3
 8007052:	4b67      	ldr	r3, [pc, #412]	; (80071f0 <checkDemoModCalisma+0x50c>)
 8007054:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007056:	4b66      	ldr	r3, [pc, #408]	; (80071f0 <checkDemoModCalisma+0x50c>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b09      	cmp	r3, #9
 800705c:	d908      	bls.n	8007070 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800705e:	4b64      	ldr	r3, [pc, #400]	; (80071f0 <checkDemoModCalisma+0x50c>)
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007064:	4b63      	ldr	r3, [pc, #396]	; (80071f4 <checkDemoModCalisma+0x510>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	3301      	adds	r3, #1
 800706a:	b2da      	uxtb	r2, r3
 800706c:	4b61      	ldr	r3, [pc, #388]	; (80071f4 <checkDemoModCalisma+0x510>)
 800706e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007070:	4b60      	ldr	r3, [pc, #384]	; (80071f4 <checkDemoModCalisma+0x510>)
 8007072:	781a      	ldrb	r2, [r3, #0]
 8007074:	4b60      	ldr	r3, [pc, #384]	; (80071f8 <checkDemoModCalisma+0x514>)
 8007076:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800707a:	4b5d      	ldr	r3, [pc, #372]	; (80071f0 <checkDemoModCalisma+0x50c>)
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	4b5e      	ldr	r3, [pc, #376]	; (80071f8 <checkDemoModCalisma+0x514>)
 8007080:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007082:	4b5a      	ldr	r3, [pc, #360]	; (80071ec <checkDemoModCalisma+0x508>)
 8007084:	781a      	ldrb	r2, [r3, #0]
 8007086:	4b5c      	ldr	r3, [pc, #368]	; (80071f8 <checkDemoModCalisma+0x514>)
 8007088:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800708a:	4b57      	ldr	r3, [pc, #348]	; (80071e8 <checkDemoModCalisma+0x504>)
 800708c:	781a      	ldrb	r2, [r3, #0]
 800708e:	4b5a      	ldr	r3, [pc, #360]	; (80071f8 <checkDemoModCalisma+0x514>)
 8007090:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007092:	4b54      	ldr	r3, [pc, #336]	; (80071e4 <checkDemoModCalisma+0x500>)
 8007094:	781a      	ldrb	r2, [r3, #0]
 8007096:	4b58      	ldr	r3, [pc, #352]	; (80071f8 <checkDemoModCalisma+0x514>)
 8007098:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800709a:	4b58      	ldr	r3, [pc, #352]	; (80071fc <checkDemoModCalisma+0x518>)
 800709c:	2201      	movs	r2, #1
 800709e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80070a0:	4b4f      	ldr	r3, [pc, #316]	; (80071e0 <checkDemoModCalisma+0x4fc>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80070a6:	4b56      	ldr	r3, [pc, #344]	; (8007200 <checkDemoModCalisma+0x51c>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 8087 	bne.w	80071be <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80070b0:	4a54      	ldr	r2, [pc, #336]	; (8007204 <checkDemoModCalisma+0x520>)
 80070b2:	2101      	movs	r1, #1
 80070b4:	2002      	movs	r0, #2
 80070b6:	f7f9 fb7f 	bl	80007b8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80070ba:	4a53      	ldr	r2, [pc, #332]	; (8007208 <checkDemoModCalisma+0x524>)
 80070bc:	2101      	movs	r1, #1
 80070be:	2001      	movs	r0, #1
 80070c0:	f7f9 fb7a 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80070c4:	4b4b      	ldr	r3, [pc, #300]	; (80071f4 <checkDemoModCalisma+0x510>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	220a      	movs	r2, #10
 80070ca:	4950      	ldr	r1, [pc, #320]	; (800720c <checkDemoModCalisma+0x528>)
 80070cc:	4618      	mov	r0, r3
 80070ce:	f005 fbe7 	bl	800c8a0 <itoa>
			lcd_print(2,12,snum);
 80070d2:	4a4e      	ldr	r2, [pc, #312]	; (800720c <checkDemoModCalisma+0x528>)
 80070d4:	210c      	movs	r1, #12
 80070d6:	2002      	movs	r0, #2
 80070d8:	f7f9 fb6e 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80070dc:	4b44      	ldr	r3, [pc, #272]	; (80071f0 <checkDemoModCalisma+0x50c>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	220a      	movs	r2, #10
 80070e2:	494a      	ldr	r1, [pc, #296]	; (800720c <checkDemoModCalisma+0x528>)
 80070e4:	4618      	mov	r0, r3
 80070e6:	f005 fbdb 	bl	800c8a0 <itoa>
			lcd_print(2,13,snum);
 80070ea:	4a48      	ldr	r2, [pc, #288]	; (800720c <checkDemoModCalisma+0x528>)
 80070ec:	210d      	movs	r1, #13
 80070ee:	2002      	movs	r0, #2
 80070f0:	f7f9 fb62 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80070f4:	4b3d      	ldr	r3, [pc, #244]	; (80071ec <checkDemoModCalisma+0x508>)
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	220a      	movs	r2, #10
 80070fa:	4944      	ldr	r1, [pc, #272]	; (800720c <checkDemoModCalisma+0x528>)
 80070fc:	4618      	mov	r0, r3
 80070fe:	f005 fbcf 	bl	800c8a0 <itoa>
			lcd_print(2,14,snum);
 8007102:	4a42      	ldr	r2, [pc, #264]	; (800720c <checkDemoModCalisma+0x528>)
 8007104:	210e      	movs	r1, #14
 8007106:	2002      	movs	r0, #2
 8007108:	f7f9 fb56 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 800710c:	4b36      	ldr	r3, [pc, #216]	; (80071e8 <checkDemoModCalisma+0x504>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	220a      	movs	r2, #10
 8007112:	493e      	ldr	r1, [pc, #248]	; (800720c <checkDemoModCalisma+0x528>)
 8007114:	4618      	mov	r0, r3
 8007116:	f005 fbc3 	bl	800c8a0 <itoa>
			lcd_print(2,15,snum);
 800711a:	4a3c      	ldr	r2, [pc, #240]	; (800720c <checkDemoModCalisma+0x528>)
 800711c:	210f      	movs	r1, #15
 800711e:	2002      	movs	r0, #2
 8007120:	f7f9 fb4a 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007124:	4b2f      	ldr	r3, [pc, #188]	; (80071e4 <checkDemoModCalisma+0x500>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	220a      	movs	r2, #10
 800712a:	4938      	ldr	r1, [pc, #224]	; (800720c <checkDemoModCalisma+0x528>)
 800712c:	4618      	mov	r0, r3
 800712e:	f005 fbb7 	bl	800c8a0 <itoa>
			lcd_print(2,16,snum);
 8007132:	4a36      	ldr	r2, [pc, #216]	; (800720c <checkDemoModCalisma+0x528>)
 8007134:	2110      	movs	r1, #16
 8007136:	2002      	movs	r0, #2
 8007138:	f7f9 fb3e 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 800713c:	4b34      	ldr	r3, [pc, #208]	; (8007210 <checkDemoModCalisma+0x52c>)
 800713e:	2201      	movs	r2, #1
 8007140:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8007142:	e03c      	b.n	80071be <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007144:	4b33      	ldr	r3, [pc, #204]	; (8007214 <checkDemoModCalisma+0x530>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d003      	beq.n	8007154 <checkDemoModCalisma+0x470>
 800714c:	4b2c      	ldr	r3, [pc, #176]	; (8007200 <checkDemoModCalisma+0x51c>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d134      	bne.n	80071be <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007154:	2200      	movs	r2, #0
 8007156:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800715a:	481b      	ldr	r0, [pc, #108]	; (80071c8 <checkDemoModCalisma+0x4e4>)
 800715c:	f002 fb8b 	bl	8009876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007160:	2200      	movs	r2, #0
 8007162:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007166:	4818      	ldr	r0, [pc, #96]	; (80071c8 <checkDemoModCalisma+0x4e4>)
 8007168:	f002 fb85 	bl	8009876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800716c:	2200      	movs	r2, #0
 800716e:	2104      	movs	r1, #4
 8007170:	4815      	ldr	r0, [pc, #84]	; (80071c8 <checkDemoModCalisma+0x4e4>)
 8007172:	f002 fb80 	bl	8009876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007176:	2200      	movs	r2, #0
 8007178:	2102      	movs	r1, #2
 800717a:	4813      	ldr	r0, [pc, #76]	; (80071c8 <checkDemoModCalisma+0x4e4>)
 800717c:	f002 fb7b 	bl	8009876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007180:	2200      	movs	r2, #0
 8007182:	2101      	movs	r1, #1
 8007184:	4810      	ldr	r0, [pc, #64]	; (80071c8 <checkDemoModCalisma+0x4e4>)
 8007186:	f002 fb76 	bl	8009876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800718a:	2200      	movs	r2, #0
 800718c:	2120      	movs	r1, #32
 800718e:	480d      	ldr	r0, [pc, #52]	; (80071c4 <checkDemoModCalisma+0x4e0>)
 8007190:	f002 fb71 	bl	8009876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007194:	2200      	movs	r2, #0
 8007196:	2110      	movs	r1, #16
 8007198:	480a      	ldr	r0, [pc, #40]	; (80071c4 <checkDemoModCalisma+0x4e0>)
 800719a:	f002 fb6c 	bl	8009876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800719e:	2200      	movs	r2, #0
 80071a0:	2180      	movs	r1, #128	; 0x80
 80071a2:	480b      	ldr	r0, [pc, #44]	; (80071d0 <checkDemoModCalisma+0x4ec>)
 80071a4:	f002 fb67 	bl	8009876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80071a8:	2200      	movs	r2, #0
 80071aa:	2140      	movs	r1, #64	; 0x40
 80071ac:	4808      	ldr	r0, [pc, #32]	; (80071d0 <checkDemoModCalisma+0x4ec>)
 80071ae:	f002 fb62 	bl	8009876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80071b2:	2200      	movs	r2, #0
 80071b4:	2120      	movs	r1, #32
 80071b6:	4806      	ldr	r0, [pc, #24]	; (80071d0 <checkDemoModCalisma+0x4ec>)
 80071b8:	f002 fb5d 	bl	8009876 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80071bc:	e7ff      	b.n	80071be <checkDemoModCalisma+0x4da>
 80071be:	bf00      	nop
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	40011000 	.word	0x40011000
 80071c8:	40010c00 	.word	0x40010c00
 80071cc:	20000b85 	.word	0x20000b85
 80071d0:	40010800 	.word	0x40010800
 80071d4:	20000b08 	.word	0x20000b08
 80071d8:	20000b18 	.word	0x20000b18
 80071dc:	20000b84 	.word	0x20000b84
 80071e0:	20000b6a 	.word	0x20000b6a
 80071e4:	20000b29 	.word	0x20000b29
 80071e8:	20000b2a 	.word	0x20000b2a
 80071ec:	20000941 	.word	0x20000941
 80071f0:	20000942 	.word	0x20000942
 80071f4:	20000b2b 	.word	0x20000b2b
 80071f8:	20000ac0 	.word	0x20000ac0
 80071fc:	20000b58 	.word	0x20000b58
 8007200:	20000b49 	.word	0x20000b49
 8007204:	0800df20 	.word	0x0800df20
 8007208:	0800df2c 	.word	0x0800df2c
 800720c:	20000b00 	.word	0x20000b00
 8007210:	20000b60 	.word	0x20000b60
 8007214:	20000b4a 	.word	0x20000b4a

08007218 <mergeData>:

char* mergeData() {
 8007218:	b580      	push	{r7, lr}
 800721a:	b09e      	sub	sp, #120	; 0x78
 800721c:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 800721e:	2300      	movs	r3, #0
 8007220:	643b      	str	r3, [r7, #64]	; 0x40
 8007222:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007226:	2229      	movs	r2, #41	; 0x29
 8007228:	2100      	movs	r1, #0
 800722a:	4618      	mov	r0, r3
 800722c:	f005 fc50 	bl	800cad0 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007230:	4b6a      	ldr	r3, [pc, #424]	; (80073dc <mergeData+0x1c4>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	713b      	strb	r3, [r7, #4]
 8007236:	4b6a      	ldr	r3, [pc, #424]	; (80073e0 <mergeData+0x1c8>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	717b      	strb	r3, [r7, #5]
 800723c:	4b69      	ldr	r3, [pc, #420]	; (80073e4 <mergeData+0x1cc>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	71bb      	strb	r3, [r7, #6]
 8007242:	4b69      	ldr	r3, [pc, #420]	; (80073e8 <mergeData+0x1d0>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	71fb      	strb	r3, [r7, #7]
 8007248:	4b68      	ldr	r3, [pc, #416]	; (80073ec <mergeData+0x1d4>)
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	723b      	strb	r3, [r7, #8]
 800724e:	4b68      	ldr	r3, [pc, #416]	; (80073f0 <mergeData+0x1d8>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	727b      	strb	r3, [r7, #9]
 8007254:	4b67      	ldr	r3, [pc, #412]	; (80073f4 <mergeData+0x1dc>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	72bb      	strb	r3, [r7, #10]
 800725a:	4b67      	ldr	r3, [pc, #412]	; (80073f8 <mergeData+0x1e0>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	72fb      	strb	r3, [r7, #11]
 8007260:	4b66      	ldr	r3, [pc, #408]	; (80073fc <mergeData+0x1e4>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	733b      	strb	r3, [r7, #12]
 8007266:	4b66      	ldr	r3, [pc, #408]	; (8007400 <mergeData+0x1e8>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	737b      	strb	r3, [r7, #13]
 800726c:	4b65      	ldr	r3, [pc, #404]	; (8007404 <mergeData+0x1ec>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	73bb      	strb	r3, [r7, #14]
 8007272:	4b65      	ldr	r3, [pc, #404]	; (8007408 <mergeData+0x1f0>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	73fb      	strb	r3, [r7, #15]
 8007278:	4b64      	ldr	r3, [pc, #400]	; (800740c <mergeData+0x1f4>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	743b      	strb	r3, [r7, #16]
 800727e:	4b64      	ldr	r3, [pc, #400]	; (8007410 <mergeData+0x1f8>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	747b      	strb	r3, [r7, #17]
 8007284:	4b63      	ldr	r3, [pc, #396]	; (8007414 <mergeData+0x1fc>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	74bb      	strb	r3, [r7, #18]
 800728a:	4b63      	ldr	r3, [pc, #396]	; (8007418 <mergeData+0x200>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	74fb      	strb	r3, [r7, #19]
 8007290:	4b62      	ldr	r3, [pc, #392]	; (800741c <mergeData+0x204>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	753b      	strb	r3, [r7, #20]
 8007296:	4b62      	ldr	r3, [pc, #392]	; (8007420 <mergeData+0x208>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	757b      	strb	r3, [r7, #21]
 800729c:	4b61      	ldr	r3, [pc, #388]	; (8007424 <mergeData+0x20c>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	75bb      	strb	r3, [r7, #22]
 80072a2:	4b61      	ldr	r3, [pc, #388]	; (8007428 <mergeData+0x210>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	75fb      	strb	r3, [r7, #23]
 80072a8:	4b60      	ldr	r3, [pc, #384]	; (800742c <mergeData+0x214>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	763b      	strb	r3, [r7, #24]
 80072ae:	4b60      	ldr	r3, [pc, #384]	; (8007430 <mergeData+0x218>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	767b      	strb	r3, [r7, #25]
 80072b4:	4b5f      	ldr	r3, [pc, #380]	; (8007434 <mergeData+0x21c>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	76bb      	strb	r3, [r7, #26]
 80072ba:	4b5f      	ldr	r3, [pc, #380]	; (8007438 <mergeData+0x220>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	76fb      	strb	r3, [r7, #27]
 80072c0:	4b5e      	ldr	r3, [pc, #376]	; (800743c <mergeData+0x224>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	773b      	strb	r3, [r7, #28]
 80072c6:	4b5e      	ldr	r3, [pc, #376]	; (8007440 <mergeData+0x228>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	777b      	strb	r3, [r7, #29]
 80072cc:	4b5d      	ldr	r3, [pc, #372]	; (8007444 <mergeData+0x22c>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	77bb      	strb	r3, [r7, #30]
 80072d2:	4b5d      	ldr	r3, [pc, #372]	; (8007448 <mergeData+0x230>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	77fb      	strb	r3, [r7, #31]
 80072d8:	4b5c      	ldr	r3, [pc, #368]	; (800744c <mergeData+0x234>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	f887 3020 	strb.w	r3, [r7, #32]
 80072e0:	4b5b      	ldr	r3, [pc, #364]	; (8007450 <mergeData+0x238>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80072e8:	4b5a      	ldr	r3, [pc, #360]	; (8007454 <mergeData+0x23c>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80072f0:	4b59      	ldr	r3, [pc, #356]	; (8007458 <mergeData+0x240>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072f8:	4b58      	ldr	r3, [pc, #352]	; (800745c <mergeData+0x244>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 8007300:	4b57      	ldr	r3, [pc, #348]	; (8007460 <mergeData+0x248>)
 8007302:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 8007306:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 800730a:	4b55      	ldr	r3, [pc, #340]	; (8007460 <mergeData+0x248>)
 800730c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007310:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8007314:	4b52      	ldr	r3, [pc, #328]	; (8007460 <mergeData+0x248>)
 8007316:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800731a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 800731e:	4b50      	ldr	r3, [pc, #320]	; (8007460 <mergeData+0x248>)
 8007320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007324:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 8007328:	4b4d      	ldr	r3, [pc, #308]	; (8007460 <mergeData+0x248>)
 800732a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800732e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 8007332:	4b4b      	ldr	r3, [pc, #300]	; (8007460 <mergeData+0x248>)
 8007334:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007338:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 800733c:	4b48      	ldr	r3, [pc, #288]	; (8007460 <mergeData+0x248>)
 800733e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 8007346:	4b46      	ldr	r3, [pc, #280]	; (8007460 <mergeData+0x248>)
 8007348:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800734c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8007350:	4b43      	ldr	r3, [pc, #268]	; (8007460 <mergeData+0x248>)
 8007352:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007356:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 800735a:	4b41      	ldr	r3, [pc, #260]	; (8007460 <mergeData+0x248>)
 800735c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007360:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8007364:	4b3e      	ldr	r3, [pc, #248]	; (8007460 <mergeData+0x248>)
 8007366:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800736a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800736e:	4b3d      	ldr	r3, [pc, #244]	; (8007464 <mergeData+0x24c>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007376:	2300      	movs	r3, #0
 8007378:	677b      	str	r3, [r7, #116]	; 0x74
 800737a:	e015      	b.n	80073a8 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 800737c:	1d3a      	adds	r2, r7, #4
 800737e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007380:	4413      	add	r3, r2
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	461a      	mov	r2, r3
 8007386:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800738a:	4937      	ldr	r1, [pc, #220]	; (8007468 <mergeData+0x250>)
 800738c:	4618      	mov	r0, r3
 800738e:	f005 fb7f 	bl	800ca90 <siprintf>
	    strcat(combinedString, temp);
 8007392:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007396:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800739a:	4611      	mov	r1, r2
 800739c:	4618      	mov	r0, r3
 800739e:	f005 fb9f 	bl	800cae0 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80073a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073a4:	3301      	adds	r3, #1
 80073a6:	677b      	str	r3, [r7, #116]	; 0x74
 80073a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073aa:	2b2c      	cmp	r3, #44	; 0x2c
 80073ac:	d9e6      	bls.n	800737c <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80073ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7f8 ff36 	bl	8000224 <strlen>
 80073b8:	4603      	mov	r3, r0
 80073ba:	3301      	adds	r3, #1
 80073bc:	4618      	mov	r0, r3
 80073be:	f005 fa71 	bl	800c8a4 <malloc>
 80073c2:	4603      	mov	r3, r0
 80073c4:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 80073c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80073ca:	4619      	mov	r1, r3
 80073cc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80073ce:	f005 fbd3 	bl	800cb78 <strcpy>
	return result;
 80073d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3778      	adds	r7, #120	; 0x78
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	20000b3b 	.word	0x20000b3b
 80073e0:	20000b2d 	.word	0x20000b2d
 80073e4:	20000b30 	.word	0x20000b30
 80073e8:	20000b31 	.word	0x20000b31
 80073ec:	20000b32 	.word	0x20000b32
 80073f0:	20000b39 	.word	0x20000b39
 80073f4:	20000b33 	.word	0x20000b33
 80073f8:	20000b34 	.word	0x20000b34
 80073fc:	20000b38 	.word	0x20000b38
 8007400:	20000b35 	.word	0x20000b35
 8007404:	20000b45 	.word	0x20000b45
 8007408:	20000b36 	.word	0x20000b36
 800740c:	20000b46 	.word	0x20000b46
 8007410:	20000b37 	.word	0x20000b37
 8007414:	20000b47 	.word	0x20000b47
 8007418:	20000b3a 	.word	0x20000b3a
 800741c:	20000b3c 	.word	0x20000b3c
 8007420:	20000b3d 	.word	0x20000b3d
 8007424:	20000b3e 	.word	0x20000b3e
 8007428:	20000b3f 	.word	0x20000b3f
 800742c:	20000b40 	.word	0x20000b40
 8007430:	20000b41 	.word	0x20000b41
 8007434:	20000b42 	.word	0x20000b42
 8007438:	20000b43 	.word	0x20000b43
 800743c:	20000b44 	.word	0x20000b44
 8007440:	20000b48 	.word	0x20000b48
 8007444:	20000b4a 	.word	0x20000b4a
 8007448:	20000b29 	.word	0x20000b29
 800744c:	20000b2a 	.word	0x20000b2a
 8007450:	20000941 	.word	0x20000941
 8007454:	20000942 	.word	0x20000942
 8007458:	20000b2b 	.word	0x20000b2b
 800745c:	20000b4d 	.word	0x20000b4d
 8007460:	20000ac0 	.word	0x20000ac0
 8007464:	20000940 	.word	0x20000940
 8007468:	0800df40 	.word	0x0800df40

0800746c <mainLoop>:

void mainLoop() {
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8007472:	f7fd fffb 	bl	800546c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8007476:	2101      	movs	r1, #1
 8007478:	48ac      	ldr	r0, [pc, #688]	; (800772c <mainLoop+0x2c0>)
 800747a:	f002 f9e5 	bl	8009848 <HAL_GPIO_ReadPin>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d136      	bne.n	80074f2 <mainLoop+0x86>
 8007484:	2108      	movs	r1, #8
 8007486:	48aa      	ldr	r0, [pc, #680]	; (8007730 <mainLoop+0x2c4>)
 8007488:	f002 f9de 	bl	8009848 <HAL_GPIO_ReadPin>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d12f      	bne.n	80074f2 <mainLoop+0x86>
 8007492:	2102      	movs	r1, #2
 8007494:	48a5      	ldr	r0, [pc, #660]	; (800772c <mainLoop+0x2c0>)
 8007496:	f002 f9d7 	bl	8009848 <HAL_GPIO_ReadPin>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d128      	bne.n	80074f2 <mainLoop+0x86>
 80074a0:	2104      	movs	r1, #4
 80074a2:	48a2      	ldr	r0, [pc, #648]	; (800772c <mainLoop+0x2c0>)
 80074a4:	f002 f9d0 	bl	8009848 <HAL_GPIO_ReadPin>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d121      	bne.n	80074f2 <mainLoop+0x86>
 80074ae:	2108      	movs	r1, #8
 80074b0:	489e      	ldr	r0, [pc, #632]	; (800772c <mainLoop+0x2c0>)
 80074b2:	f002 f9c9 	bl	8009848 <HAL_GPIO_ReadPin>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d11a      	bne.n	80074f2 <mainLoop+0x86>
 80074bc:	2180      	movs	r1, #128	; 0x80
 80074be:	489c      	ldr	r0, [pc, #624]	; (8007730 <mainLoop+0x2c4>)
 80074c0:	f002 f9c2 	bl	8009848 <HAL_GPIO_ReadPin>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d113      	bne.n	80074f2 <mainLoop+0x86>
 80074ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80074ce:	4898      	ldr	r0, [pc, #608]	; (8007730 <mainLoop+0x2c4>)
 80074d0:	f002 f9ba 	bl	8009848 <HAL_GPIO_ReadPin>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d10b      	bne.n	80074f2 <mainLoop+0x86>
 80074da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074de:	4894      	ldr	r0, [pc, #592]	; (8007730 <mainLoop+0x2c4>)
 80074e0:	f002 f9b2 	bl	8009848 <HAL_GPIO_ReadPin>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d103      	bne.n	80074f2 <mainLoop+0x86>
			butonKontrol=0;
 80074ea:	4b92      	ldr	r3, [pc, #584]	; (8007734 <mainLoop+0x2c8>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	e003      	b.n	80074fa <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80074f2:	4b91      	ldr	r3, [pc, #580]	; (8007738 <mainLoop+0x2cc>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a91      	ldr	r2, [pc, #580]	; (800773c <mainLoop+0x2d0>)
 80074f8:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80074fa:	4b91      	ldr	r3, [pc, #580]	; (8007740 <mainLoop+0x2d4>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d039      	beq.n	8007576 <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007502:	bf00      	nop
 8007504:	488f      	ldr	r0, [pc, #572]	; (8007744 <mainLoop+0x2d8>)
 8007506:	f002 ffc8 	bl	800a49a <HAL_I2C_GetError>
 800750a:	4603      	mov	r3, r0
 800750c:	2b04      	cmp	r3, #4
 800750e:	d0f9      	beq.n	8007504 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007510:	bf00      	nop
 8007512:	488c      	ldr	r0, [pc, #560]	; (8007744 <mainLoop+0x2d8>)
 8007514:	f002 ffb4 	bl	800a480 <HAL_I2C_GetState>
 8007518:	4603      	mov	r3, r0
 800751a:	2b20      	cmp	r3, #32
 800751c:	d1f9      	bne.n	8007512 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 800751e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007522:	9302      	str	r3, [sp, #8]
 8007524:	233f      	movs	r3, #63	; 0x3f
 8007526:	9301      	str	r3, [sp, #4]
 8007528:	4b87      	ldr	r3, [pc, #540]	; (8007748 <mainLoop+0x2dc>)
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	233f      	movs	r3, #63	; 0x3f
 800752e:	2200      	movs	r2, #0
 8007530:	21a0      	movs	r1, #160	; 0xa0
 8007532:	4884      	ldr	r0, [pc, #528]	; (8007744 <mainLoop+0x2d8>)
 8007534:	f002 fc42 	bl	8009dbc <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 8007538:	2005      	movs	r0, #5
 800753a:	f001 fbb5 	bl	8008ca8 <HAL_Delay>

		  hafizaYaz=0;
 800753e:	4b80      	ldr	r3, [pc, #512]	; (8007740 <mainLoop+0x2d4>)
 8007540:	2200      	movs	r2, #0
 8007542:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8007544:	4b81      	ldr	r3, [pc, #516]	; (800774c <mainLoop+0x2e0>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d105      	bne.n	8007558 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 800754c:	4a80      	ldr	r2, [pc, #512]	; (8007750 <mainLoop+0x2e4>)
 800754e:	2101      	movs	r1, #1
 8007550:	2002      	movs	r0, #2
 8007552:	f7f9 f931 	bl	80007b8 <lcd_print>
 8007556:	e008      	b.n	800756a <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 8007558:	4b7c      	ldr	r3, [pc, #496]	; (800774c <mainLoop+0x2e0>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d104      	bne.n	800756a <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8007560:	4a7c      	ldr	r2, [pc, #496]	; (8007754 <mainLoop+0x2e8>)
 8007562:	2101      	movs	r1, #1
 8007564:	2002      	movs	r0, #2
 8007566:	f7f9 f927 	bl	80007b8 <lcd_print>
		  }

		  HAL_Delay(1000);
 800756a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800756e:	f001 fb9b 	bl	8008ca8 <HAL_Delay>
		  lcd_clear();
 8007572:	f7f9 f94d 	bl	8000810 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8007576:	4b78      	ldr	r3, [pc, #480]	; (8007758 <mainLoop+0x2ec>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	f083 0301 	eor.w	r3, r3, #1
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d06e      	beq.n	8007662 <mainLoop+0x1f6>
 8007584:	486f      	ldr	r0, [pc, #444]	; (8007744 <mainLoop+0x2d8>)
 8007586:	f002 ff7b 	bl	800a480 <HAL_I2C_GetState>
 800758a:	4603      	mov	r3, r0
 800758c:	2b20      	cmp	r3, #32
 800758e:	d168      	bne.n	8007662 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8007590:	4b72      	ldr	r3, [pc, #456]	; (800775c <mainLoop+0x2f0>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	f083 0301 	eor.w	r3, r3, #1
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d044      	beq.n	8007628 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 800759e:	4a70      	ldr	r2, [pc, #448]	; (8007760 <mainLoop+0x2f4>)
 80075a0:	2101      	movs	r1, #1
 80075a2:	2001      	movs	r0, #1
 80075a4:	f7f9 f908 	bl	80007b8 <lcd_print>
			  if(dilSecim==0) {
 80075a8:	4b68      	ldr	r3, [pc, #416]	; (800774c <mainLoop+0x2e0>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d105      	bne.n	80075bc <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 80075b0:	4a6c      	ldr	r2, [pc, #432]	; (8007764 <mainLoop+0x2f8>)
 80075b2:	2101      	movs	r1, #1
 80075b4:	2002      	movs	r0, #2
 80075b6:	f7f9 f8ff 	bl	80007b8 <lcd_print>
 80075ba:	e008      	b.n	80075ce <mainLoop+0x162>
			  } else if(dilSecim==1) {
 80075bc:	4b63      	ldr	r3, [pc, #396]	; (800774c <mainLoop+0x2e0>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d104      	bne.n	80075ce <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 80075c4:	4a68      	ldr	r2, [pc, #416]	; (8007768 <mainLoop+0x2fc>)
 80075c6:	2101      	movs	r1, #1
 80075c8:	2002      	movs	r0, #2
 80075ca:	f7f9 f8f5 	bl	80007b8 <lcd_print>
			  }
			  HAL_Delay(1000);
 80075ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075d2:	f001 fb69 	bl	8008ca8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80075d6:	bf00      	nop
 80075d8:	485a      	ldr	r0, [pc, #360]	; (8007744 <mainLoop+0x2d8>)
 80075da:	f002 ff5e 	bl	800a49a <HAL_I2C_GetError>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d0f9      	beq.n	80075d8 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80075e4:	e003      	b.n	80075ee <mainLoop+0x182>
				  HAL_Delay(1000);
 80075e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075ea:	f001 fb5d 	bl	8008ca8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80075ee:	4855      	ldr	r0, [pc, #340]	; (8007744 <mainLoop+0x2d8>)
 80075f0:	f002 ff46 	bl	800a480 <HAL_I2C_GetState>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d1f5      	bne.n	80075e6 <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 80075fa:	4b54      	ldr	r3, [pc, #336]	; (800774c <mainLoop+0x2e0>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d105      	bne.n	800760e <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 8007602:	4a5a      	ldr	r2, [pc, #360]	; (800776c <mainLoop+0x300>)
 8007604:	2101      	movs	r1, #1
 8007606:	2002      	movs	r0, #2
 8007608:	f7f9 f8d6 	bl	80007b8 <lcd_print>
 800760c:	e008      	b.n	8007620 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 800760e:	4b4f      	ldr	r3, [pc, #316]	; (800774c <mainLoop+0x2e0>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d104      	bne.n	8007620 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 8007616:	4a56      	ldr	r2, [pc, #344]	; (8007770 <mainLoop+0x304>)
 8007618:	2101      	movs	r1, #1
 800761a:	2002      	movs	r0, #2
 800761c:	f7f9 f8cc 	bl	80007b8 <lcd_print>
			  }

			  ilkOkuma=1;
 8007620:	4b4e      	ldr	r3, [pc, #312]	; (800775c <mainLoop+0x2f0>)
 8007622:	2201      	movs	r2, #1
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	e014      	b.n	8007652 <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 8007628:	4b48      	ldr	r3, [pc, #288]	; (800774c <mainLoop+0x2e0>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d105      	bne.n	800763c <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 8007630:	4a50      	ldr	r2, [pc, #320]	; (8007774 <mainLoop+0x308>)
 8007632:	2101      	movs	r1, #1
 8007634:	2002      	movs	r0, #2
 8007636:	f7f9 f8bf 	bl	80007b8 <lcd_print>
 800763a:	e008      	b.n	800764e <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 800763c:	4b43      	ldr	r3, [pc, #268]	; (800774c <mainLoop+0x2e0>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d104      	bne.n	800764e <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 8007644:	4a4c      	ldr	r2, [pc, #304]	; (8007778 <mainLoop+0x30c>)
 8007646:	2101      	movs	r1, #1
 8007648:	2002      	movs	r0, #2
 800764a:	f7f9 f8b5 	bl	80007b8 <lcd_print>
			  }
			  lcd_clear();
 800764e:	f7f9 f8df 	bl	8000810 <lcd_clear>
		  }

		  lcd_clear();
 8007652:	f7f9 f8dd 	bl	8000810 <lcd_clear>

		  eepromKontrol(1);
 8007656:	2001      	movs	r0, #1
 8007658:	f7fd fac6 	bl	8004be8 <eepromKontrol>
		  hafizaOku=1;
 800765c:	4b3e      	ldr	r3, [pc, #248]	; (8007758 <mainLoop+0x2ec>)
 800765e:	2201      	movs	r2, #1
 8007660:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8007662:	4b46      	ldr	r3, [pc, #280]	; (800777c <mainLoop+0x310>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d11c      	bne.n	80076a4 <mainLoop+0x238>
 800766a:	4b45      	ldr	r3, [pc, #276]	; (8007780 <mainLoop+0x314>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	f083 0301 	eor.w	r3, r3, #1
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d015      	beq.n	80076a4 <mainLoop+0x238>
 8007678:	4b42      	ldr	r3, [pc, #264]	; (8007784 <mainLoop+0x318>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d111      	bne.n	80076a4 <mainLoop+0x238>
			lcd_clear();
 8007680:	f7f9 f8c6 	bl	8000810 <lcd_clear>
			HAL_Delay(10);
 8007684:	200a      	movs	r0, #10
 8007686:	f001 fb0f 	bl	8008ca8 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 800768a:	4a3f      	ldr	r2, [pc, #252]	; (8007788 <mainLoop+0x31c>)
 800768c:	2101      	movs	r1, #1
 800768e:	2001      	movs	r0, #1
 8007690:	f7f9 f892 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8007694:	4a3d      	ldr	r2, [pc, #244]	; (800778c <mainLoop+0x320>)
 8007696:	2101      	movs	r1, #1
 8007698:	2002      	movs	r0, #2
 800769a:	f7f9 f88d 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 800769e:	4b38      	ldr	r3, [pc, #224]	; (8007780 <mainLoop+0x314>)
 80076a0:	2201      	movs	r2, #1
 80076a2:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 80076a4:	4b35      	ldr	r3, [pc, #212]	; (800777c <mainLoop+0x310>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d112      	bne.n	80076d2 <mainLoop+0x266>
 80076ac:	2102      	movs	r1, #2
 80076ae:	481f      	ldr	r0, [pc, #124]	; (800772c <mainLoop+0x2c0>)
 80076b0:	f002 f8ca 	bl	8009848 <HAL_GPIO_ReadPin>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d10b      	bne.n	80076d2 <mainLoop+0x266>
 80076ba:	2104      	movs	r1, #4
 80076bc:	481b      	ldr	r0, [pc, #108]	; (800772c <mainLoop+0x2c0>)
 80076be:	f002 f8c3 	bl	8009848 <HAL_GPIO_ReadPin>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d104      	bne.n	80076d2 <mainLoop+0x266>
			menuGiris=1;
 80076c8:	4b2c      	ldr	r3, [pc, #176]	; (800777c <mainLoop+0x310>)
 80076ca:	2201      	movs	r2, #1
 80076cc:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80076ce:	f7f9 f89f 	bl	8000810 <lcd_clear>
		}

		if(menuGiris==1) {
 80076d2:	4b2a      	ldr	r3, [pc, #168]	; (800777c <mainLoop+0x310>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <mainLoop+0x272>
			menu();
 80076da:	f7f9 f911 	bl	8000900 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80076de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80076e2:	4813      	ldr	r0, [pc, #76]	; (8007730 <mainLoop+0x2c4>)
 80076e4:	f002 f8df 	bl	80098a6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80076e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80076ec:	4828      	ldr	r0, [pc, #160]	; (8007790 <mainLoop+0x324>)
 80076ee:	f002 f8ab 	bl	8009848 <HAL_GPIO_ReadPin>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <mainLoop+0x2a2>
 80076f8:	4b26      	ldr	r3, [pc, #152]	; (8007794 <mainLoop+0x328>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	f083 0301 	eor.w	r3, r3, #1
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <mainLoop+0x2a2>
			stopVar=1;
 8007706:	4b24      	ldr	r3, [pc, #144]	; (8007798 <mainLoop+0x32c>)
 8007708:	2201      	movs	r2, #1
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e002      	b.n	8007714 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 800770e:	4b22      	ldr	r3, [pc, #136]	; (8007798 <mainLoop+0x32c>)
 8007710:	2200      	movs	r2, #0
 8007712:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8007714:	f7fd feca 	bl	80054ac <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8007718:	f7fd fefc 	bl	8005514 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 800771c:	f7fd ff40 	bl	80055a0 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8007720:	f7fd ff90 	bl	8005644 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8007724:	f7ff fade 	bl	8006ce4 <checkDemoModCalisma>
		checkLCDBacklight();
 8007728:	e6a3      	b.n	8007472 <mainLoop+0x6>
 800772a:	bf00      	nop
 800772c:	40010800 	.word	0x40010800
 8007730:	40011000 	.word	0x40011000
 8007734:	20000b5b 	.word	0x20000b5b
 8007738:	20000b08 	.word	0x20000b08
 800773c:	20000b24 	.word	0x20000b24
 8007740:	20000b58 	.word	0x20000b58
 8007744:	20000d3c 	.word	0x20000d3c
 8007748:	20000ac0 	.word	0x20000ac0
 800774c:	20000b4d 	.word	0x20000b4d
 8007750:	0800df44 	.word	0x0800df44
 8007754:	0800df58 	.word	0x0800df58
 8007758:	20000b59 	.word	0x20000b59
 800775c:	20000b5a 	.word	0x20000b5a
 8007760:	0800df6c 	.word	0x0800df6c
 8007764:	0800df80 	.word	0x0800df80
 8007768:	0800df94 	.word	0x0800df94
 800776c:	0800dfa8 	.word	0x0800dfa8
 8007770:	0800dfbc 	.word	0x0800dfbc
 8007774:	0800dfd0 	.word	0x0800dfd0
 8007778:	0800dfe4 	.word	0x0800dfe4
 800777c:	20000b49 	.word	0x20000b49
 8007780:	20000b60 	.word	0x20000b60
 8007784:	20000b4a 	.word	0x20000b4a
 8007788:	0800de90 	.word	0x0800de90
 800778c:	0800dea4 	.word	0x0800dea4
 8007790:	40010c00 	.word	0x40010c00
 8007794:	20000b81 	.word	0x20000b81
 8007798:	20000b7e 	.word	0x20000b7e

0800779c <printTemplate>:
	}
}

void printTemplate(int type, int page) {
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80077a6:	20c8      	movs	r0, #200	; 0xc8
 80077a8:	f001 fa7e 	bl	8008ca8 <HAL_Delay>
	if(type == 1 && page == 0) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d13e      	bne.n	8007830 <printTemplate+0x94>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d13b      	bne.n	8007830 <printTemplate+0x94>
		lcd_print(1, 1, "ID: ");
 80077b8:	4a9a      	ldr	r2, [pc, #616]	; (8007a24 <printTemplate+0x288>)
 80077ba:	2101      	movs	r1, #1
 80077bc:	2001      	movs	r0, #1
 80077be:	f7f8 fffb 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "0");
 80077c2:	4a99      	ldr	r2, [pc, #612]	; (8007a28 <printTemplate+0x28c>)
 80077c4:	2103      	movs	r1, #3
 80077c6:	2002      	movs	r0, #2
 80077c8:	f7f8 fff6 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "1");
 80077cc:	4a97      	ldr	r2, [pc, #604]	; (8007a2c <printTemplate+0x290>)
 80077ce:	2104      	movs	r1, #4
 80077d0:	2002      	movs	r0, #2
 80077d2:	f7f8 fff1 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "2");
 80077d6:	4a96      	ldr	r2, [pc, #600]	; (8007a30 <printTemplate+0x294>)
 80077d8:	2105      	movs	r1, #5
 80077da:	2002      	movs	r0, #2
 80077dc:	f7f8 ffec 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "3");
 80077e0:	4a94      	ldr	r2, [pc, #592]	; (8007a34 <printTemplate+0x298>)
 80077e2:	2106      	movs	r1, #6
 80077e4:	2002      	movs	r0, #2
 80077e6:	f7f8 ffe7 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "4");
 80077ea:	4a93      	ldr	r2, [pc, #588]	; (8007a38 <printTemplate+0x29c>)
 80077ec:	2107      	movs	r1, #7
 80077ee:	2002      	movs	r0, #2
 80077f0:	f7f8 ffe2 	bl	80007b8 <lcd_print>
		lcd_print(2, 10, "5");
 80077f4:	4a91      	ldr	r2, [pc, #580]	; (8007a3c <printTemplate+0x2a0>)
 80077f6:	210a      	movs	r1, #10
 80077f8:	2002      	movs	r0, #2
 80077fa:	f7f8 ffdd 	bl	80007b8 <lcd_print>
		lcd_print(2, 11, "6");
 80077fe:	4a90      	ldr	r2, [pc, #576]	; (8007a40 <printTemplate+0x2a4>)
 8007800:	210b      	movs	r1, #11
 8007802:	2002      	movs	r0, #2
 8007804:	f7f8 ffd8 	bl	80007b8 <lcd_print>
		lcd_print(2, 12, "7");
 8007808:	4a8e      	ldr	r2, [pc, #568]	; (8007a44 <printTemplate+0x2a8>)
 800780a:	210c      	movs	r1, #12
 800780c:	2002      	movs	r0, #2
 800780e:	f7f8 ffd3 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "8");
 8007812:	4a8d      	ldr	r2, [pc, #564]	; (8007a48 <printTemplate+0x2ac>)
 8007814:	210d      	movs	r1, #13
 8007816:	2002      	movs	r0, #2
 8007818:	f7f8 ffce 	bl	80007b8 <lcd_print>
		lcd_print(2, 14, "9");
 800781c:	4a8b      	ldr	r2, [pc, #556]	; (8007a4c <printTemplate+0x2b0>)
 800781e:	210e      	movs	r1, #14
 8007820:	2002      	movs	r0, #2
 8007822:	f7f8 ffc9 	bl	80007b8 <lcd_print>
		lcd_gotoxy(2, 3);
 8007826:	2103      	movs	r1, #3
 8007828:	2002      	movs	r0, #2
 800782a:	f7f8 ffa6 	bl	800077a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 800782e:	e0f5      	b.n	8007a1c <printTemplate+0x280>
	} else if(type == 2) {
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b02      	cmp	r3, #2
 8007834:	d178      	bne.n	8007928 <printTemplate+0x18c>
		if(page == 1) {
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d114      	bne.n	8007866 <printTemplate+0xca>
			lcd_clear();
 800783c:	f7f8 ffe8 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8007840:	2064      	movs	r0, #100	; 0x64
 8007842:	f001 fa31 	bl	8008ca8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8007846:	4a82      	ldr	r2, [pc, #520]	; (8007a50 <printTemplate+0x2b4>)
 8007848:	2101      	movs	r1, #1
 800784a:	2001      	movs	r0, #1
 800784c:	f7f8 ffb4 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8007850:	4a80      	ldr	r2, [pc, #512]	; (8007a54 <printTemplate+0x2b8>)
 8007852:	2107      	movs	r1, #7
 8007854:	2001      	movs	r0, #1
 8007856:	f7f8 ffaf 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800785a:	4a7f      	ldr	r2, [pc, #508]	; (8007a58 <printTemplate+0x2bc>)
 800785c:	2101      	movs	r1, #1
 800785e:	2002      	movs	r0, #2
 8007860:	f7f8 ffaa 	bl	80007b8 <lcd_print>
}
 8007864:	e0da      	b.n	8007a1c <printTemplate+0x280>
		} else if(page == 2) {
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b02      	cmp	r3, #2
 800786a:	d114      	bne.n	8007896 <printTemplate+0xfa>
			lcd_clear();
 800786c:	f7f8 ffd0 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8007870:	2064      	movs	r0, #100	; 0x64
 8007872:	f001 fa19 	bl	8008ca8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8007876:	4a76      	ldr	r2, [pc, #472]	; (8007a50 <printTemplate+0x2b4>)
 8007878:	2101      	movs	r1, #1
 800787a:	2001      	movs	r0, #1
 800787c:	f7f8 ff9c 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8007880:	4a74      	ldr	r2, [pc, #464]	; (8007a54 <printTemplate+0x2b8>)
 8007882:	2107      	movs	r1, #7
 8007884:	2001      	movs	r0, #1
 8007886:	f7f8 ff97 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800788a:	4a74      	ldr	r2, [pc, #464]	; (8007a5c <printTemplate+0x2c0>)
 800788c:	2101      	movs	r1, #1
 800788e:	2002      	movs	r0, #2
 8007890:	f7f8 ff92 	bl	80007b8 <lcd_print>
}
 8007894:	e0c2      	b.n	8007a1c <printTemplate+0x280>
		} else if(page == 3) {
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b03      	cmp	r3, #3
 800789a:	d114      	bne.n	80078c6 <printTemplate+0x12a>
			lcd_clear();
 800789c:	f7f8 ffb8 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80078a0:	2064      	movs	r0, #100	; 0x64
 80078a2:	f001 fa01 	bl	8008ca8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80078a6:	4a6a      	ldr	r2, [pc, #424]	; (8007a50 <printTemplate+0x2b4>)
 80078a8:	2101      	movs	r1, #1
 80078aa:	2001      	movs	r0, #1
 80078ac:	f7f8 ff84 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80078b0:	4a68      	ldr	r2, [pc, #416]	; (8007a54 <printTemplate+0x2b8>)
 80078b2:	2107      	movs	r1, #7
 80078b4:	2001      	movs	r0, #1
 80078b6:	f7f8 ff7f 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80078ba:	4a69      	ldr	r2, [pc, #420]	; (8007a60 <printTemplate+0x2c4>)
 80078bc:	2101      	movs	r1, #1
 80078be:	2002      	movs	r0, #2
 80078c0:	f7f8 ff7a 	bl	80007b8 <lcd_print>
}
 80078c4:	e0aa      	b.n	8007a1c <printTemplate+0x280>
		} else if(page == 4) {
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d114      	bne.n	80078f6 <printTemplate+0x15a>
			lcd_clear();
 80078cc:	f7f8 ffa0 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80078d0:	2064      	movs	r0, #100	; 0x64
 80078d2:	f001 f9e9 	bl	8008ca8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80078d6:	4a5e      	ldr	r2, [pc, #376]	; (8007a50 <printTemplate+0x2b4>)
 80078d8:	2101      	movs	r1, #1
 80078da:	2001      	movs	r0, #1
 80078dc:	f7f8 ff6c 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80078e0:	4a5c      	ldr	r2, [pc, #368]	; (8007a54 <printTemplate+0x2b8>)
 80078e2:	2107      	movs	r1, #7
 80078e4:	2001      	movs	r0, #1
 80078e6:	f7f8 ff67 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80078ea:	4a5e      	ldr	r2, [pc, #376]	; (8007a64 <printTemplate+0x2c8>)
 80078ec:	2101      	movs	r1, #1
 80078ee:	2002      	movs	r0, #2
 80078f0:	f7f8 ff62 	bl	80007b8 <lcd_print>
}
 80078f4:	e092      	b.n	8007a1c <printTemplate+0x280>
		} else if(page == 5) {
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b05      	cmp	r3, #5
 80078fa:	f040 808f 	bne.w	8007a1c <printTemplate+0x280>
			lcd_clear();
 80078fe:	f7f8 ff87 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8007902:	2064      	movs	r0, #100	; 0x64
 8007904:	f001 f9d0 	bl	8008ca8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8007908:	4a51      	ldr	r2, [pc, #324]	; (8007a50 <printTemplate+0x2b4>)
 800790a:	2101      	movs	r1, #1
 800790c:	2001      	movs	r0, #1
 800790e:	f7f8 ff53 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8007912:	4a50      	ldr	r2, [pc, #320]	; (8007a54 <printTemplate+0x2b8>)
 8007914:	2107      	movs	r1, #7
 8007916:	2001      	movs	r0, #1
 8007918:	f7f8 ff4e 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800791c:	4a52      	ldr	r2, [pc, #328]	; (8007a68 <printTemplate+0x2cc>)
 800791e:	2101      	movs	r1, #1
 8007920:	2002      	movs	r0, #2
 8007922:	f7f8 ff49 	bl	80007b8 <lcd_print>
}
 8007926:	e079      	b.n	8007a1c <printTemplate+0x280>
	} else if(type == 3) {
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b03      	cmp	r3, #3
 800792c:	d176      	bne.n	8007a1c <printTemplate+0x280>
		if(page == 1) {
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d114      	bne.n	800795e <printTemplate+0x1c2>
			lcd_clear();
 8007934:	f7f8 ff6c 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8007938:	2064      	movs	r0, #100	; 0x64
 800793a:	f001 f9b5 	bl	8008ca8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800793e:	4a4b      	ldr	r2, [pc, #300]	; (8007a6c <printTemplate+0x2d0>)
 8007940:	2101      	movs	r1, #1
 8007942:	2001      	movs	r0, #1
 8007944:	f7f8 ff38 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8007948:	4a49      	ldr	r2, [pc, #292]	; (8007a70 <printTemplate+0x2d4>)
 800794a:	2107      	movs	r1, #7
 800794c:	2001      	movs	r0, #1
 800794e:	f7f8 ff33 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8007952:	4a41      	ldr	r2, [pc, #260]	; (8007a58 <printTemplate+0x2bc>)
 8007954:	2101      	movs	r1, #1
 8007956:	2002      	movs	r0, #2
 8007958:	f7f8 ff2e 	bl	80007b8 <lcd_print>
}
 800795c:	e05e      	b.n	8007a1c <printTemplate+0x280>
		} else if(page == 2) {
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b02      	cmp	r3, #2
 8007962:	d114      	bne.n	800798e <printTemplate+0x1f2>
			lcd_clear();
 8007964:	f7f8 ff54 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8007968:	2064      	movs	r0, #100	; 0x64
 800796a:	f001 f99d 	bl	8008ca8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800796e:	4a3f      	ldr	r2, [pc, #252]	; (8007a6c <printTemplate+0x2d0>)
 8007970:	2101      	movs	r1, #1
 8007972:	2001      	movs	r0, #1
 8007974:	f7f8 ff20 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8007978:	4a3d      	ldr	r2, [pc, #244]	; (8007a70 <printTemplate+0x2d4>)
 800797a:	2107      	movs	r1, #7
 800797c:	2001      	movs	r0, #1
 800797e:	f7f8 ff1b 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8007982:	4a36      	ldr	r2, [pc, #216]	; (8007a5c <printTemplate+0x2c0>)
 8007984:	2101      	movs	r1, #1
 8007986:	2002      	movs	r0, #2
 8007988:	f7f8 ff16 	bl	80007b8 <lcd_print>
}
 800798c:	e046      	b.n	8007a1c <printTemplate+0x280>
		} else if(page == 3) {
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b03      	cmp	r3, #3
 8007992:	d114      	bne.n	80079be <printTemplate+0x222>
			lcd_clear();
 8007994:	f7f8 ff3c 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8007998:	2064      	movs	r0, #100	; 0x64
 800799a:	f001 f985 	bl	8008ca8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800799e:	4a33      	ldr	r2, [pc, #204]	; (8007a6c <printTemplate+0x2d0>)
 80079a0:	2101      	movs	r1, #1
 80079a2:	2001      	movs	r0, #1
 80079a4:	f7f8 ff08 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80079a8:	4a31      	ldr	r2, [pc, #196]	; (8007a70 <printTemplate+0x2d4>)
 80079aa:	2107      	movs	r1, #7
 80079ac:	2001      	movs	r0, #1
 80079ae:	f7f8 ff03 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80079b2:	4a2b      	ldr	r2, [pc, #172]	; (8007a60 <printTemplate+0x2c4>)
 80079b4:	2101      	movs	r1, #1
 80079b6:	2002      	movs	r0, #2
 80079b8:	f7f8 fefe 	bl	80007b8 <lcd_print>
}
 80079bc:	e02e      	b.n	8007a1c <printTemplate+0x280>
		} else if(page == 4) {
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d114      	bne.n	80079ee <printTemplate+0x252>
			lcd_clear();
 80079c4:	f7f8 ff24 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80079c8:	2064      	movs	r0, #100	; 0x64
 80079ca:	f001 f96d 	bl	8008ca8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80079ce:	4a27      	ldr	r2, [pc, #156]	; (8007a6c <printTemplate+0x2d0>)
 80079d0:	2101      	movs	r1, #1
 80079d2:	2001      	movs	r0, #1
 80079d4:	f7f8 fef0 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80079d8:	4a25      	ldr	r2, [pc, #148]	; (8007a70 <printTemplate+0x2d4>)
 80079da:	2107      	movs	r1, #7
 80079dc:	2001      	movs	r0, #1
 80079de:	f7f8 feeb 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80079e2:	4a20      	ldr	r2, [pc, #128]	; (8007a64 <printTemplate+0x2c8>)
 80079e4:	2101      	movs	r1, #1
 80079e6:	2002      	movs	r0, #2
 80079e8:	f7f8 fee6 	bl	80007b8 <lcd_print>
}
 80079ec:	e016      	b.n	8007a1c <printTemplate+0x280>
		} else if(page == 5) {
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b05      	cmp	r3, #5
 80079f2:	d113      	bne.n	8007a1c <printTemplate+0x280>
			lcd_clear();
 80079f4:	f7f8 ff0c 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80079f8:	2064      	movs	r0, #100	; 0x64
 80079fa:	f001 f955 	bl	8008ca8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80079fe:	4a1b      	ldr	r2, [pc, #108]	; (8007a6c <printTemplate+0x2d0>)
 8007a00:	2101      	movs	r1, #1
 8007a02:	2001      	movs	r0, #1
 8007a04:	f7f8 fed8 	bl	80007b8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8007a08:	4a19      	ldr	r2, [pc, #100]	; (8007a70 <printTemplate+0x2d4>)
 8007a0a:	2107      	movs	r1, #7
 8007a0c:	2001      	movs	r0, #1
 8007a0e:	f7f8 fed3 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8007a12:	4a15      	ldr	r2, [pc, #84]	; (8007a68 <printTemplate+0x2cc>)
 8007a14:	2101      	movs	r1, #1
 8007a16:	2002      	movs	r0, #2
 8007a18:	f7f8 fece 	bl	80007b8 <lcd_print>
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	0800dff8 	.word	0x0800dff8
 8007a28:	0800e000 	.word	0x0800e000
 8007a2c:	0800dee0 	.word	0x0800dee0
 8007a30:	0800def0 	.word	0x0800def0
 8007a34:	0800def4 	.word	0x0800def4
 8007a38:	0800def8 	.word	0x0800def8
 8007a3c:	0800defc 	.word	0x0800defc
 8007a40:	0800df00 	.word	0x0800df00
 8007a44:	0800e004 	.word	0x0800e004
 8007a48:	0800e008 	.word	0x0800e008
 8007a4c:	0800e00c 	.word	0x0800e00c
 8007a50:	0800e010 	.word	0x0800e010
 8007a54:	20000ccc 	.word	0x20000ccc
 8007a58:	0800e018 	.word	0x0800e018
 8007a5c:	0800e02c 	.word	0x0800e02c
 8007a60:	0800e040 	.word	0x0800e040
 8007a64:	0800e054 	.word	0x0800e054
 8007a68:	0800e068 	.word	0x0800e068
 8007a6c:	0800e07c 	.word	0x0800e07c
 8007a70:	20000cf0 	.word	0x20000cf0

08007a74 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b098      	sub	sp, #96	; 0x60
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
	char characters[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_+=<>? ";
 8007a7c:	4a08      	ldr	r2, [pc, #32]	; (8007aa0 <getCharFromCursorPosition+0x2c>)
 8007a7e:	f107 030c 	add.w	r3, r7, #12
 8007a82:	4611      	mov	r1, r2
 8007a84:	2251      	movs	r2, #81	; 0x51
 8007a86:	4618      	mov	r0, r3
 8007a88:	f005 f87e 	bl	800cb88 <memcpy>
    return characters[cursorPosition];
 8007a8c:	f107 020c 	add.w	r2, r7, #12
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4413      	add	r3, r2
 8007a94:	781b      	ldrb	r3, [r3, #0]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3760      	adds	r7, #96	; 0x60
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	0800e084 	.word	0x0800e084

08007aa4 <takeMachineID>:

void takeMachineID() {
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
	lcd_cursor(1);
 8007aaa:	2001      	movs	r0, #1
 8007aac:	f7f8 fee2 	bl	8000874 <lcd_cursor>

    int cursorPosition = 3;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	60fb      	str	r3, [r7, #12]
    int machineIDLoc = 0;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60bb      	str	r3, [r7, #8]
    int writeLoc = 5;
 8007ab8:	2305      	movs	r3, #5
 8007aba:	607b      	str	r3, [r7, #4]

    printTemplate(1, 0);
 8007abc:	2100      	movs	r1, #0
 8007abe:	2001      	movs	r0, #1
 8007ac0:	f7ff fe6c 	bl	800779c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007ac4:	2108      	movs	r1, #8
 8007ac6:	4879      	ldr	r0, [pc, #484]	; (8007cac <takeMachineID+0x208>)
 8007ac8:	f001 febe 	bl	8009848 <HAL_GPIO_ReadPin>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d103      	bne.n	8007ada <takeMachineID+0x36>
        	lcd_cursor(0);
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	f7f8 fece 	bl	8000874 <lcd_cursor>

            break;
 8007ad8:	e0e4      	b.n	8007ca4 <takeMachineID+0x200>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007ada:	2101      	movs	r1, #1
 8007adc:	4873      	ldr	r0, [pc, #460]	; (8007cac <takeMachineID+0x208>)
 8007ade:	f001 feb3 	bl	8009848 <HAL_GPIO_ReadPin>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d112      	bne.n	8007b0e <takeMachineID+0x6a>
        	if(cursorPosition == 7) {
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b07      	cmp	r3, #7
 8007aec:	d102      	bne.n	8007af4 <takeMachineID+0x50>
        		cursorPosition = 10;
 8007aee:	230a      	movs	r3, #10
 8007af0:	60fb      	str	r3, [r7, #12]
 8007af2:	e008      	b.n	8007b06 <takeMachineID+0x62>
        	} else if (cursorPosition == 14) {
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b0e      	cmp	r3, #14
 8007af8:	d102      	bne.n	8007b00 <takeMachineID+0x5c>
                cursorPosition = 3;
 8007afa:	2303      	movs	r3, #3
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	e002      	b.n	8007b06 <takeMachineID+0x62>
            } else {
            	cursorPosition++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]
            }

        	HAL_Delay(350);
 8007b06:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8007b0a:	f001 f8cd 	bl	8008ca8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007b0e:	2108      	movs	r1, #8
 8007b10:	4867      	ldr	r0, [pc, #412]	; (8007cb0 <takeMachineID+0x20c>)
 8007b12:	f001 fe99 	bl	8009848 <HAL_GPIO_ReadPin>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d112      	bne.n	8007b42 <takeMachineID+0x9e>
            if (cursorPosition == 3) {
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d102      	bne.n	8007b28 <takeMachineID+0x84>
                cursorPosition = 14;
 8007b22:	230e      	movs	r3, #14
 8007b24:	60fb      	str	r3, [r7, #12]
 8007b26:	e008      	b.n	8007b3a <takeMachineID+0x96>
            } else if(cursorPosition == 10) {
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2b0a      	cmp	r3, #10
 8007b2c:	d102      	bne.n	8007b34 <takeMachineID+0x90>
            	cursorPosition = 7;
 8007b2e:	2307      	movs	r3, #7
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	e002      	b.n	8007b3a <takeMachineID+0x96>
            } else {
            	cursorPosition--;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(350);
 8007b3a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8007b3e:	f001 f8b3 	bl	8008ca8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007b42:	2102      	movs	r1, #2
 8007b44:	4859      	ldr	r0, [pc, #356]	; (8007cac <takeMachineID+0x208>)
 8007b46:	f001 fe7f 	bl	8009848 <HAL_GPIO_ReadPin>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d16c      	bne.n	8007c2a <takeMachineID+0x186>
        	if(cursorPosition == 3) {
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d105      	bne.n	8007b62 <takeMachineID+0xbe>
        		machineID[machineIDLoc] = '0';
 8007b56:	4a57      	ldr	r2, [pc, #348]	; (8007cb4 <takeMachineID+0x210>)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	2230      	movs	r2, #48	; 0x30
 8007b5e:	701a      	strb	r2, [r3, #0]
 8007b60:	e04f      	b.n	8007c02 <takeMachineID+0x15e>
        	} else if(cursorPosition == 4) {
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d105      	bne.n	8007b74 <takeMachineID+0xd0>
        		machineID[machineIDLoc] = '1';
 8007b68:	4a52      	ldr	r2, [pc, #328]	; (8007cb4 <takeMachineID+0x210>)
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	2231      	movs	r2, #49	; 0x31
 8007b70:	701a      	strb	r2, [r3, #0]
 8007b72:	e046      	b.n	8007c02 <takeMachineID+0x15e>
        	} else if(cursorPosition == 5) {
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b05      	cmp	r3, #5
 8007b78:	d105      	bne.n	8007b86 <takeMachineID+0xe2>
        		machineID[machineIDLoc] = '2';
 8007b7a:	4a4e      	ldr	r2, [pc, #312]	; (8007cb4 <takeMachineID+0x210>)
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4413      	add	r3, r2
 8007b80:	2232      	movs	r2, #50	; 0x32
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	e03d      	b.n	8007c02 <takeMachineID+0x15e>
        	} else if(cursorPosition == 6) {
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2b06      	cmp	r3, #6
 8007b8a:	d105      	bne.n	8007b98 <takeMachineID+0xf4>
        		machineID[machineIDLoc] = '3';
 8007b8c:	4a49      	ldr	r2, [pc, #292]	; (8007cb4 <takeMachineID+0x210>)
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	4413      	add	r3, r2
 8007b92:	2233      	movs	r2, #51	; 0x33
 8007b94:	701a      	strb	r2, [r3, #0]
 8007b96:	e034      	b.n	8007c02 <takeMachineID+0x15e>
        	} else if(cursorPosition == 7) {
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b07      	cmp	r3, #7
 8007b9c:	d105      	bne.n	8007baa <takeMachineID+0x106>
        		machineID[machineIDLoc] = '4';
 8007b9e:	4a45      	ldr	r2, [pc, #276]	; (8007cb4 <takeMachineID+0x210>)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	2234      	movs	r2, #52	; 0x34
 8007ba6:	701a      	strb	r2, [r3, #0]
 8007ba8:	e02b      	b.n	8007c02 <takeMachineID+0x15e>
        	} else if(cursorPosition == 10) {
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2b0a      	cmp	r3, #10
 8007bae:	d105      	bne.n	8007bbc <takeMachineID+0x118>
        		machineID[machineIDLoc] = '5';
 8007bb0:	4a40      	ldr	r2, [pc, #256]	; (8007cb4 <takeMachineID+0x210>)
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	2235      	movs	r2, #53	; 0x35
 8007bb8:	701a      	strb	r2, [r3, #0]
 8007bba:	e022      	b.n	8007c02 <takeMachineID+0x15e>
        	} else if(cursorPosition == 11) {
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2b0b      	cmp	r3, #11
 8007bc0:	d105      	bne.n	8007bce <takeMachineID+0x12a>
        		machineID[machineIDLoc] = '6';
 8007bc2:	4a3c      	ldr	r2, [pc, #240]	; (8007cb4 <takeMachineID+0x210>)
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	2236      	movs	r2, #54	; 0x36
 8007bca:	701a      	strb	r2, [r3, #0]
 8007bcc:	e019      	b.n	8007c02 <takeMachineID+0x15e>
        	} else if(cursorPosition == 12) {
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2b0c      	cmp	r3, #12
 8007bd2:	d105      	bne.n	8007be0 <takeMachineID+0x13c>
        		machineID[machineIDLoc] = '7';
 8007bd4:	4a37      	ldr	r2, [pc, #220]	; (8007cb4 <takeMachineID+0x210>)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	4413      	add	r3, r2
 8007bda:	2237      	movs	r2, #55	; 0x37
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	e010      	b.n	8007c02 <takeMachineID+0x15e>
        	} else if(cursorPosition == 13) {
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b0d      	cmp	r3, #13
 8007be4:	d105      	bne.n	8007bf2 <takeMachineID+0x14e>
        		machineID[machineIDLoc] = '8';
 8007be6:	4a33      	ldr	r2, [pc, #204]	; (8007cb4 <takeMachineID+0x210>)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4413      	add	r3, r2
 8007bec:	2238      	movs	r2, #56	; 0x38
 8007bee:	701a      	strb	r2, [r3, #0]
 8007bf0:	e007      	b.n	8007c02 <takeMachineID+0x15e>
        	} else if(cursorPosition == 14) {
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2b0e      	cmp	r3, #14
 8007bf6:	d104      	bne.n	8007c02 <takeMachineID+0x15e>
        		machineID[machineIDLoc] = '9';
 8007bf8:	4a2e      	ldr	r2, [pc, #184]	; (8007cb4 <takeMachineID+0x210>)
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	2239      	movs	r2, #57	; 0x39
 8007c00:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	b2d9      	uxtb	r1, r3
 8007c06:	4a2b      	ldr	r2, [pc, #172]	; (8007cb4 <takeMachineID+0x210>)
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	2001      	movs	r0, #1
 8007c12:	f7f8 fde6 	bl	80007e2 <lcd_print_char>

        	writeLoc++;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	607b      	str	r3, [r7, #4]
        	machineIDLoc++;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(350);
 8007c22:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8007c26:	f001 f83f 	bl	8008ca8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007c2a:	2104      	movs	r1, #4
 8007c2c:	481f      	ldr	r0, [pc, #124]	; (8007cac <takeMachineID+0x208>)
 8007c2e:	f001 fe0b 	bl	8009848 <HAL_GPIO_ReadPin>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d12e      	bne.n	8007c96 <takeMachineID+0x1f2>
            if(strlen(machineID) >= 1) {
 8007c38:	4b1e      	ldr	r3, [pc, #120]	; (8007cb4 <takeMachineID+0x210>)
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d027      	beq.n	8007c90 <takeMachineID+0x1ec>

                machineID[machineIDLoc] = '\0';
 8007c40:	4a1c      	ldr	r2, [pc, #112]	; (8007cb4 <takeMachineID+0x210>)
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4413      	add	r3, r2
 8007c46:	2200      	movs	r2, #0
 8007c48:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	3304      	adds	r3, #4
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	4619      	mov	r1, r3
 8007c54:	2001      	movs	r0, #1
 8007c56:	f7f8 fde5 	bl	8000824 <lcd_delete_char>
                HAL_Delay(50);
 8007c5a:	2032      	movs	r0, #50	; 0x32
 8007c5c:	f001 f824 	bl	8008ca8 <HAL_Delay>

                if(writeLoc > 5) {
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b05      	cmp	r3, #5
 8007c64:	dd03      	ble.n	8007c6e <takeMachineID+0x1ca>
                	writeLoc--;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	607b      	str	r3, [r7, #4]
 8007c6c:	e004      	b.n	8007c78 <takeMachineID+0x1d4>
                } else if(writeLoc < 5) {
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	dc01      	bgt.n	8007c78 <takeMachineID+0x1d4>
                	writeLoc = 5;
 8007c74:	2305      	movs	r3, #5
 8007c76:	607b      	str	r3, [r7, #4]
                }

                if(machineIDLoc > 0) {
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	dd03      	ble.n	8007c86 <takeMachineID+0x1e2>
                	machineIDLoc--;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	60bb      	str	r3, [r7, #8]
 8007c84:	e004      	b.n	8007c90 <takeMachineID+0x1ec>
                } else if(machineIDLoc < 0) {
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	da01      	bge.n	8007c90 <takeMachineID+0x1ec>
                	machineIDLoc = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60bb      	str	r3, [r7, #8]
                }
            }

            HAL_Delay(250);
 8007c90:	20fa      	movs	r0, #250	; 0xfa
 8007c92:	f001 f809 	bl	8008ca8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	2002      	movs	r0, #2
 8007c9e:	f7f8 fd6c 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007ca2:	e70f      	b.n	8007ac4 <takeMachineID+0x20>
    }
}
 8007ca4:	bf00      	nop
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	40010800 	.word	0x40010800
 8007cb0:	40011000 	.word	0x40011000
 8007cb4:	20000cc0 	.word	0x20000cc0

08007cb8 <takeWifiSSID>:

void takeWifiSSID() {
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
    lcd_cursor(1);
 8007cbe:	2001      	movs	r0, #1
 8007cc0:	f7f8 fdd8 	bl	8000874 <lcd_cursor>

    int realCharPos = 1;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	60fb      	str	r3, [r7, #12]
    cursorPosition = 1;
 8007cc8:	4ba1      	ldr	r3, [pc, #644]	; (8007f50 <takeWifiSSID+0x298>)
 8007cca:	2201      	movs	r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]
    page = 1;
 8007cce:	4ba1      	ldr	r3, [pc, #644]	; (8007f54 <takeWifiSSID+0x29c>)
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8007cd8:	2307      	movs	r3, #7
 8007cda:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8007cdc:	2101      	movs	r1, #1
 8007cde:	2002      	movs	r0, #2
 8007ce0:	f7ff fd5c 	bl	800779c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007ce4:	2108      	movs	r1, #8
 8007ce6:	489c      	ldr	r0, [pc, #624]	; (8007f58 <takeWifiSSID+0x2a0>)
 8007ce8:	f001 fdae 	bl	8009848 <HAL_GPIO_ReadPin>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d105      	bne.n	8007cfe <takeWifiSSID+0x46>
            lcd_cursor(0);
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	f7f8 fdbe 	bl	8000874 <lcd_cursor>
            lcd_clear();
 8007cf8:	f7f8 fd8a 	bl	8000810 <lcd_clear>
            break;
 8007cfc:	e142      	b.n	8007f84 <takeWifiSSID+0x2cc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4895      	ldr	r0, [pc, #596]	; (8007f58 <takeWifiSSID+0x2a0>)
 8007d02:	f001 fda1 	bl	8009848 <HAL_GPIO_ReadPin>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d166      	bne.n	8007dda <takeWifiSSID+0x122>
        	realCharPos++;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	60fb      	str	r3, [r7, #12]
        	if(realCharPos > 80) {
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b50      	cmp	r3, #80	; 0x50
 8007d16:	dd01      	ble.n	8007d1c <takeWifiSSID+0x64>
        		realCharPos = 1;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 8007d1c:	4b8c      	ldr	r3, [pc, #560]	; (8007f50 <takeWifiSSID+0x298>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b10      	cmp	r3, #16
 8007d22:	d152      	bne.n	8007dca <takeWifiSSID+0x112>
            	if(page == 1) {
 8007d24:	4b8b      	ldr	r3, [pc, #556]	; (8007f54 <takeWifiSSID+0x29c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d10c      	bne.n	8007d46 <takeWifiSSID+0x8e>
            		cursorPosition = 1;
 8007d2c:	4b88      	ldr	r3, [pc, #544]	; (8007f50 <takeWifiSSID+0x298>)
 8007d2e:	2201      	movs	r2, #1
 8007d30:	601a      	str	r2, [r3, #0]
            		page++;
 8007d32:	4b88      	ldr	r3, [pc, #544]	; (8007f54 <takeWifiSSID+0x29c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3301      	adds	r3, #1
 8007d38:	4a86      	ldr	r2, [pc, #536]	; (8007f54 <takeWifiSSID+0x29c>)
 8007d3a:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8007d3c:	2102      	movs	r1, #2
 8007d3e:	2002      	movs	r0, #2
 8007d40:	f7ff fd2c 	bl	800779c <printTemplate>
 8007d44:	e046      	b.n	8007dd4 <takeWifiSSID+0x11c>
            	} else if(page == 2) {
 8007d46:	4b83      	ldr	r3, [pc, #524]	; (8007f54 <takeWifiSSID+0x29c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d10c      	bne.n	8007d68 <takeWifiSSID+0xb0>
            		cursorPosition = 1;
 8007d4e:	4b80      	ldr	r3, [pc, #512]	; (8007f50 <takeWifiSSID+0x298>)
 8007d50:	2201      	movs	r2, #1
 8007d52:	601a      	str	r2, [r3, #0]
            		page++;
 8007d54:	4b7f      	ldr	r3, [pc, #508]	; (8007f54 <takeWifiSSID+0x29c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	4a7e      	ldr	r2, [pc, #504]	; (8007f54 <takeWifiSSID+0x29c>)
 8007d5c:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8007d5e:	2103      	movs	r1, #3
 8007d60:	2002      	movs	r0, #2
 8007d62:	f7ff fd1b 	bl	800779c <printTemplate>
 8007d66:	e035      	b.n	8007dd4 <takeWifiSSID+0x11c>
            	} else if(page == 3) {
 8007d68:	4b7a      	ldr	r3, [pc, #488]	; (8007f54 <takeWifiSSID+0x29c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d10c      	bne.n	8007d8a <takeWifiSSID+0xd2>
            		cursorPosition = 1;
 8007d70:	4b77      	ldr	r3, [pc, #476]	; (8007f50 <takeWifiSSID+0x298>)
 8007d72:	2201      	movs	r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
            		page++;
 8007d76:	4b77      	ldr	r3, [pc, #476]	; (8007f54 <takeWifiSSID+0x29c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	4a75      	ldr	r2, [pc, #468]	; (8007f54 <takeWifiSSID+0x29c>)
 8007d7e:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8007d80:	2104      	movs	r1, #4
 8007d82:	2002      	movs	r0, #2
 8007d84:	f7ff fd0a 	bl	800779c <printTemplate>
 8007d88:	e024      	b.n	8007dd4 <takeWifiSSID+0x11c>
            	} else if(page == 4) {
 8007d8a:	4b72      	ldr	r3, [pc, #456]	; (8007f54 <takeWifiSSID+0x29c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d10c      	bne.n	8007dac <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8007d92:	4b6f      	ldr	r3, [pc, #444]	; (8007f50 <takeWifiSSID+0x298>)
 8007d94:	2201      	movs	r2, #1
 8007d96:	601a      	str	r2, [r3, #0]
            		page++;
 8007d98:	4b6e      	ldr	r3, [pc, #440]	; (8007f54 <takeWifiSSID+0x29c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	4a6d      	ldr	r2, [pc, #436]	; (8007f54 <takeWifiSSID+0x29c>)
 8007da0:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8007da2:	2105      	movs	r1, #5
 8007da4:	2002      	movs	r0, #2
 8007da6:	f7ff fcf9 	bl	800779c <printTemplate>
 8007daa:	e013      	b.n	8007dd4 <takeWifiSSID+0x11c>
            	} else if(page == 5) {
 8007dac:	4b69      	ldr	r3, [pc, #420]	; (8007f54 <takeWifiSSID+0x29c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b05      	cmp	r3, #5
 8007db2:	d10f      	bne.n	8007dd4 <takeWifiSSID+0x11c>
            		cursorPosition = 1;
 8007db4:	4b66      	ldr	r3, [pc, #408]	; (8007f50 <takeWifiSSID+0x298>)
 8007db6:	2201      	movs	r2, #1
 8007db8:	601a      	str	r2, [r3, #0]
            		page = 1;
 8007dba:	4b66      	ldr	r3, [pc, #408]	; (8007f54 <takeWifiSSID+0x29c>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	2002      	movs	r0, #2
 8007dc4:	f7ff fcea 	bl	800779c <printTemplate>
 8007dc8:	e004      	b.n	8007dd4 <takeWifiSSID+0x11c>
            	}
            } else {
            	cursorPosition++;
 8007dca:	4b61      	ldr	r3, [pc, #388]	; (8007f50 <takeWifiSSID+0x298>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	4a5f      	ldr	r2, [pc, #380]	; (8007f50 <takeWifiSSID+0x298>)
 8007dd2:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007dd4:	20fa      	movs	r0, #250	; 0xfa
 8007dd6:	f000 ff67 	bl	8008ca8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007dda:	2108      	movs	r1, #8
 8007ddc:	485f      	ldr	r0, [pc, #380]	; (8007f5c <takeWifiSSID+0x2a4>)
 8007dde:	f001 fd33 	bl	8009848 <HAL_GPIO_ReadPin>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d15e      	bne.n	8007ea6 <takeWifiSSID+0x1ee>
        	realCharPos--;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	60fb      	str	r3, [r7, #12]
        	if(realCharPos < 1) {
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	dc01      	bgt.n	8007df8 <takeWifiSSID+0x140>
        		realCharPos = 80;
 8007df4:	2350      	movs	r3, #80	; 0x50
 8007df6:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 8007df8:	4b55      	ldr	r3, [pc, #340]	; (8007f50 <takeWifiSSID+0x298>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d14a      	bne.n	8007e96 <takeWifiSSID+0x1de>
            	if(page == 1) {
 8007e00:	4b54      	ldr	r3, [pc, #336]	; (8007f54 <takeWifiSSID+0x29c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d10a      	bne.n	8007e1e <takeWifiSSID+0x166>
            		cursorPosition = 16;
 8007e08:	4b51      	ldr	r3, [pc, #324]	; (8007f50 <takeWifiSSID+0x298>)
 8007e0a:	2210      	movs	r2, #16
 8007e0c:	601a      	str	r2, [r3, #0]
            		page = 5;
 8007e0e:	4b51      	ldr	r3, [pc, #324]	; (8007f54 <takeWifiSSID+0x29c>)
 8007e10:	2205      	movs	r2, #5
 8007e12:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8007e14:	2105      	movs	r1, #5
 8007e16:	2002      	movs	r0, #2
 8007e18:	f7ff fcc0 	bl	800779c <printTemplate>
 8007e1c:	e040      	b.n	8007ea0 <takeWifiSSID+0x1e8>
            	} else if(page == 2) {
 8007e1e:	4b4d      	ldr	r3, [pc, #308]	; (8007f54 <takeWifiSSID+0x29c>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d10a      	bne.n	8007e3c <takeWifiSSID+0x184>
            		cursorPosition = 16;
 8007e26:	4b4a      	ldr	r3, [pc, #296]	; (8007f50 <takeWifiSSID+0x298>)
 8007e28:	2210      	movs	r2, #16
 8007e2a:	601a      	str	r2, [r3, #0]
            		page = 1;
 8007e2c:	4b49      	ldr	r3, [pc, #292]	; (8007f54 <takeWifiSSID+0x29c>)
 8007e2e:	2201      	movs	r2, #1
 8007e30:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8007e32:	2101      	movs	r1, #1
 8007e34:	2002      	movs	r0, #2
 8007e36:	f7ff fcb1 	bl	800779c <printTemplate>
 8007e3a:	e031      	b.n	8007ea0 <takeWifiSSID+0x1e8>
            	} else if(page == 3) {
 8007e3c:	4b45      	ldr	r3, [pc, #276]	; (8007f54 <takeWifiSSID+0x29c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d10a      	bne.n	8007e5a <takeWifiSSID+0x1a2>
            		cursorPosition = 16;
 8007e44:	4b42      	ldr	r3, [pc, #264]	; (8007f50 <takeWifiSSID+0x298>)
 8007e46:	2210      	movs	r2, #16
 8007e48:	601a      	str	r2, [r3, #0]
            		page = 2;
 8007e4a:	4b42      	ldr	r3, [pc, #264]	; (8007f54 <takeWifiSSID+0x29c>)
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8007e50:	2102      	movs	r1, #2
 8007e52:	2002      	movs	r0, #2
 8007e54:	f7ff fca2 	bl	800779c <printTemplate>
 8007e58:	e022      	b.n	8007ea0 <takeWifiSSID+0x1e8>
            	} else if(page == 4) {
 8007e5a:	4b3e      	ldr	r3, [pc, #248]	; (8007f54 <takeWifiSSID+0x29c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d10a      	bne.n	8007e78 <takeWifiSSID+0x1c0>
            		cursorPosition = 16;
 8007e62:	4b3b      	ldr	r3, [pc, #236]	; (8007f50 <takeWifiSSID+0x298>)
 8007e64:	2210      	movs	r2, #16
 8007e66:	601a      	str	r2, [r3, #0]
            		page = 3;
 8007e68:	4b3a      	ldr	r3, [pc, #232]	; (8007f54 <takeWifiSSID+0x29c>)
 8007e6a:	2203      	movs	r2, #3
 8007e6c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8007e6e:	2103      	movs	r1, #3
 8007e70:	2002      	movs	r0, #2
 8007e72:	f7ff fc93 	bl	800779c <printTemplate>
 8007e76:	e013      	b.n	8007ea0 <takeWifiSSID+0x1e8>
            	} else if(page == 5) {
 8007e78:	4b36      	ldr	r3, [pc, #216]	; (8007f54 <takeWifiSSID+0x29c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b05      	cmp	r3, #5
 8007e7e:	d10f      	bne.n	8007ea0 <takeWifiSSID+0x1e8>
            		cursorPosition = 16;
 8007e80:	4b33      	ldr	r3, [pc, #204]	; (8007f50 <takeWifiSSID+0x298>)
 8007e82:	2210      	movs	r2, #16
 8007e84:	601a      	str	r2, [r3, #0]
            		page = 4;
 8007e86:	4b33      	ldr	r3, [pc, #204]	; (8007f54 <takeWifiSSID+0x29c>)
 8007e88:	2204      	movs	r2, #4
 8007e8a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8007e8c:	2104      	movs	r1, #4
 8007e8e:	2002      	movs	r0, #2
 8007e90:	f7ff fc84 	bl	800779c <printTemplate>
 8007e94:	e004      	b.n	8007ea0 <takeWifiSSID+0x1e8>
            	}
            } else {
            	cursorPosition--;
 8007e96:	4b2e      	ldr	r3, [pc, #184]	; (8007f50 <takeWifiSSID+0x298>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	4a2c      	ldr	r2, [pc, #176]	; (8007f50 <takeWifiSSID+0x298>)
 8007e9e:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007ea0:	20fa      	movs	r0, #250	; 0xfa
 8007ea2:	f000 ff01 	bl	8008ca8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007ea6:	2102      	movs	r1, #2
 8007ea8:	482b      	ldr	r0, [pc, #172]	; (8007f58 <takeWifiSSID+0x2a0>)
 8007eaa:	f001 fccd 	bl	8009848 <HAL_GPIO_ReadPin>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d11e      	bne.n	8007ef2 <takeWifiSSID+0x23a>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff fddb 	bl	8007a74 <getCharFromCursorPosition>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4a27      	ldr	r2, [pc, #156]	; (8007f60 <takeWifiSSID+0x2a8>)
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	460a      	mov	r2, r1
 8007eca:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	b2d9      	uxtb	r1, r3
 8007ed0:	4a23      	ldr	r2, [pc, #140]	; (8007f60 <takeWifiSSID+0x2a8>)
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	2001      	movs	r0, #1
 8007edc:	f7f8 fc81 	bl	80007e2 <lcd_print_char>

            writeLoc++;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	60bb      	str	r3, [r7, #8]

            HAL_Delay(250);
 8007eec:	20fa      	movs	r0, #250	; 0xfa
 8007eee:	f000 fedb 	bl	8008ca8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007ef2:	2104      	movs	r1, #4
 8007ef4:	4818      	ldr	r0, [pc, #96]	; (8007f58 <takeWifiSSID+0x2a0>)
 8007ef6:	f001 fca7 	bl	8009848 <HAL_GPIO_ReadPin>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d139      	bne.n	8007f74 <takeWifiSSID+0x2bc>
        	if(strlen(wifiSSID) >= 1) {
 8007f00:	4b17      	ldr	r3, [pc, #92]	; (8007f60 <takeWifiSSID+0x2a8>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d032      	beq.n	8007f6e <takeWifiSSID+0x2b6>
        		wifiSSID[wifiNameLoc] = '\0';
 8007f08:	4a15      	ldr	r2, [pc, #84]	; (8007f60 <takeWifiSSID+0x2a8>)
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	3306      	adds	r3, #6
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	2001      	movs	r0, #1
 8007f1e:	f7f8 fc81 	bl	8000824 <lcd_delete_char>
        		HAL_Delay(50);
 8007f22:	2032      	movs	r0, #50	; 0x32
 8007f24:	f000 fec0 	bl	8008ca8 <HAL_Delay>
        		if(writeLoc > 7) {
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b07      	cmp	r3, #7
 8007f2c:	dd03      	ble.n	8007f36 <takeWifiSSID+0x27e>
        			writeLoc--;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	607b      	str	r3, [r7, #4]
 8007f34:	e004      	b.n	8007f40 <takeWifiSSID+0x288>
        		} else if(writeLoc < 7) {
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b06      	cmp	r3, #6
 8007f3a:	dc01      	bgt.n	8007f40 <takeWifiSSID+0x288>
        			writeLoc = 7;
 8007f3c:	2307      	movs	r3, #7
 8007f3e:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dd0e      	ble.n	8007f64 <takeWifiSSID+0x2ac>
        			wifiNameLoc--;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	60bb      	str	r3, [r7, #8]
 8007f4c:	e00f      	b.n	8007f6e <takeWifiSSID+0x2b6>
 8007f4e:	bf00      	nop
 8007f50:	20000944 	.word	0x20000944
 8007f54:	20000948 	.word	0x20000948
 8007f58:	40010800 	.word	0x40010800
 8007f5c:	40011000 	.word	0x40011000
 8007f60:	20000ccc 	.word	0x20000ccc
        		} else if(wifiNameLoc < 0) {
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	da01      	bge.n	8007f6e <takeWifiSSID+0x2b6>
        			wifiNameLoc = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60bb      	str	r3, [r7, #8]
        		}
        	}

        	HAL_Delay(250);
 8007f6e:	20fa      	movs	r0, #250	; 0xfa
 8007f70:	f000 fe9a 	bl	8008ca8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007f74:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <takeWifiSSID+0x2d4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	2002      	movs	r0, #2
 8007f7e:	f7f8 fbfc 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007f82:	e6af      	b.n	8007ce4 <takeWifiSSID+0x2c>
    }
}
 8007f84:	bf00      	nop
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20000944 	.word	0x20000944

08007f90 <takeWifiPass>:

void takeWifiPass() {
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
    lcd_cursor(1);
 8007f96:	2001      	movs	r0, #1
 8007f98:	f7f8 fc6c 	bl	8000874 <lcd_cursor>

    int realCharPos = 1;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	60fb      	str	r3, [r7, #12]
    cursorPosition = 1;
 8007fa0:	4ba0      	ldr	r3, [pc, #640]	; (8008224 <takeWifiPass+0x294>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	601a      	str	r2, [r3, #0]
    page = 1;
 8007fa6:	4ba0      	ldr	r3, [pc, #640]	; (8008228 <takeWifiPass+0x298>)
 8007fa8:	2201      	movs	r2, #1
 8007faa:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8007fb0:	2307      	movs	r3, #7
 8007fb2:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	2003      	movs	r0, #3
 8007fb8:	f7ff fbf0 	bl	800779c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007fbc:	2108      	movs	r1, #8
 8007fbe:	489b      	ldr	r0, [pc, #620]	; (800822c <takeWifiPass+0x29c>)
 8007fc0:	f001 fc42 	bl	8009848 <HAL_GPIO_ReadPin>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d103      	bne.n	8007fd2 <takeWifiPass+0x42>
            lcd_cursor(0);
 8007fca:	2000      	movs	r0, #0
 8007fcc:	f7f8 fc52 	bl	8000874 <lcd_cursor>
            break;
 8007fd0:	e142      	b.n	8008258 <takeWifiPass+0x2c8>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	4895      	ldr	r0, [pc, #596]	; (800822c <takeWifiPass+0x29c>)
 8007fd6:	f001 fc37 	bl	8009848 <HAL_GPIO_ReadPin>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d166      	bne.n	80080ae <takeWifiPass+0x11e>
        	realCharPos++;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	60fb      	str	r3, [r7, #12]
        	if(realCharPos > 80) {
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2b50      	cmp	r3, #80	; 0x50
 8007fea:	dd01      	ble.n	8007ff0 <takeWifiPass+0x60>
        	    realCharPos = 1;
 8007fec:	2301      	movs	r3, #1
 8007fee:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 8007ff0:	4b8c      	ldr	r3, [pc, #560]	; (8008224 <takeWifiPass+0x294>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b10      	cmp	r3, #16
 8007ff6:	d152      	bne.n	800809e <takeWifiPass+0x10e>
            	if(page == 1) {
 8007ff8:	4b8b      	ldr	r3, [pc, #556]	; (8008228 <takeWifiPass+0x298>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d10c      	bne.n	800801a <takeWifiPass+0x8a>
            		cursorPosition = 1;
 8008000:	4b88      	ldr	r3, [pc, #544]	; (8008224 <takeWifiPass+0x294>)
 8008002:	2201      	movs	r2, #1
 8008004:	601a      	str	r2, [r3, #0]
            		page++;
 8008006:	4b88      	ldr	r3, [pc, #544]	; (8008228 <takeWifiPass+0x298>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3301      	adds	r3, #1
 800800c:	4a86      	ldr	r2, [pc, #536]	; (8008228 <takeWifiPass+0x298>)
 800800e:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8008010:	2102      	movs	r1, #2
 8008012:	2003      	movs	r0, #3
 8008014:	f7ff fbc2 	bl	800779c <printTemplate>
 8008018:	e046      	b.n	80080a8 <takeWifiPass+0x118>
            	} else if(page == 2) {
 800801a:	4b83      	ldr	r3, [pc, #524]	; (8008228 <takeWifiPass+0x298>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d10c      	bne.n	800803c <takeWifiPass+0xac>
            		cursorPosition = 1;
 8008022:	4b80      	ldr	r3, [pc, #512]	; (8008224 <takeWifiPass+0x294>)
 8008024:	2201      	movs	r2, #1
 8008026:	601a      	str	r2, [r3, #0]
            		page++;
 8008028:	4b7f      	ldr	r3, [pc, #508]	; (8008228 <takeWifiPass+0x298>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3301      	adds	r3, #1
 800802e:	4a7e      	ldr	r2, [pc, #504]	; (8008228 <takeWifiPass+0x298>)
 8008030:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 8008032:	2103      	movs	r1, #3
 8008034:	2003      	movs	r0, #3
 8008036:	f7ff fbb1 	bl	800779c <printTemplate>
 800803a:	e035      	b.n	80080a8 <takeWifiPass+0x118>
            	} else if(page == 3) {
 800803c:	4b7a      	ldr	r3, [pc, #488]	; (8008228 <takeWifiPass+0x298>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b03      	cmp	r3, #3
 8008042:	d10c      	bne.n	800805e <takeWifiPass+0xce>
            		cursorPosition = 1;
 8008044:	4b77      	ldr	r3, [pc, #476]	; (8008224 <takeWifiPass+0x294>)
 8008046:	2201      	movs	r2, #1
 8008048:	601a      	str	r2, [r3, #0]
            		page++;
 800804a:	4b77      	ldr	r3, [pc, #476]	; (8008228 <takeWifiPass+0x298>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3301      	adds	r3, #1
 8008050:	4a75      	ldr	r2, [pc, #468]	; (8008228 <takeWifiPass+0x298>)
 8008052:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 8008054:	2104      	movs	r1, #4
 8008056:	2003      	movs	r0, #3
 8008058:	f7ff fba0 	bl	800779c <printTemplate>
 800805c:	e024      	b.n	80080a8 <takeWifiPass+0x118>
            	} else if(page == 4) {
 800805e:	4b72      	ldr	r3, [pc, #456]	; (8008228 <takeWifiPass+0x298>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2b04      	cmp	r3, #4
 8008064:	d10c      	bne.n	8008080 <takeWifiPass+0xf0>
            		cursorPosition = 1;
 8008066:	4b6f      	ldr	r3, [pc, #444]	; (8008224 <takeWifiPass+0x294>)
 8008068:	2201      	movs	r2, #1
 800806a:	601a      	str	r2, [r3, #0]
            		page++;
 800806c:	4b6e      	ldr	r3, [pc, #440]	; (8008228 <takeWifiPass+0x298>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3301      	adds	r3, #1
 8008072:	4a6d      	ldr	r2, [pc, #436]	; (8008228 <takeWifiPass+0x298>)
 8008074:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8008076:	2105      	movs	r1, #5
 8008078:	2003      	movs	r0, #3
 800807a:	f7ff fb8f 	bl	800779c <printTemplate>
 800807e:	e013      	b.n	80080a8 <takeWifiPass+0x118>
            	} else if(page == 5) {
 8008080:	4b69      	ldr	r3, [pc, #420]	; (8008228 <takeWifiPass+0x298>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b05      	cmp	r3, #5
 8008086:	d10f      	bne.n	80080a8 <takeWifiPass+0x118>
            		cursorPosition = 1;
 8008088:	4b66      	ldr	r3, [pc, #408]	; (8008224 <takeWifiPass+0x294>)
 800808a:	2201      	movs	r2, #1
 800808c:	601a      	str	r2, [r3, #0]
            		page = 1;
 800808e:	4b66      	ldr	r3, [pc, #408]	; (8008228 <takeWifiPass+0x298>)
 8008090:	2201      	movs	r2, #1
 8008092:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8008094:	2101      	movs	r1, #1
 8008096:	2003      	movs	r0, #3
 8008098:	f7ff fb80 	bl	800779c <printTemplate>
 800809c:	e004      	b.n	80080a8 <takeWifiPass+0x118>
            	}
            } else {
            	cursorPosition++;
 800809e:	4b61      	ldr	r3, [pc, #388]	; (8008224 <takeWifiPass+0x294>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	4a5f      	ldr	r2, [pc, #380]	; (8008224 <takeWifiPass+0x294>)
 80080a6:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80080a8:	20fa      	movs	r0, #250	; 0xfa
 80080aa:	f000 fdfd 	bl	8008ca8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80080ae:	2108      	movs	r1, #8
 80080b0:	485f      	ldr	r0, [pc, #380]	; (8008230 <takeWifiPass+0x2a0>)
 80080b2:	f001 fbc9 	bl	8009848 <HAL_GPIO_ReadPin>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d15e      	bne.n	800817a <takeWifiPass+0x1ea>
        	realCharPos--;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3b01      	subs	r3, #1
 80080c0:	60fb      	str	r3, [r7, #12]
        	if(realCharPos < 1) {
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	dc01      	bgt.n	80080cc <takeWifiPass+0x13c>
        	    realCharPos = 80;
 80080c8:	2350      	movs	r3, #80	; 0x50
 80080ca:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 80080cc:	4b55      	ldr	r3, [pc, #340]	; (8008224 <takeWifiPass+0x294>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d14a      	bne.n	800816a <takeWifiPass+0x1da>
            	if(page == 1) {
 80080d4:	4b54      	ldr	r3, [pc, #336]	; (8008228 <takeWifiPass+0x298>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d10a      	bne.n	80080f2 <takeWifiPass+0x162>
            		cursorPosition = 16;
 80080dc:	4b51      	ldr	r3, [pc, #324]	; (8008224 <takeWifiPass+0x294>)
 80080de:	2210      	movs	r2, #16
 80080e0:	601a      	str	r2, [r3, #0]
            		page = 5;
 80080e2:	4b51      	ldr	r3, [pc, #324]	; (8008228 <takeWifiPass+0x298>)
 80080e4:	2205      	movs	r2, #5
 80080e6:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80080e8:	2105      	movs	r1, #5
 80080ea:	2003      	movs	r0, #3
 80080ec:	f7ff fb56 	bl	800779c <printTemplate>
 80080f0:	e040      	b.n	8008174 <takeWifiPass+0x1e4>
            	} else if(page == 2) {
 80080f2:	4b4d      	ldr	r3, [pc, #308]	; (8008228 <takeWifiPass+0x298>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d10a      	bne.n	8008110 <takeWifiPass+0x180>
            		cursorPosition = 16;
 80080fa:	4b4a      	ldr	r3, [pc, #296]	; (8008224 <takeWifiPass+0x294>)
 80080fc:	2210      	movs	r2, #16
 80080fe:	601a      	str	r2, [r3, #0]
            		page = 1;
 8008100:	4b49      	ldr	r3, [pc, #292]	; (8008228 <takeWifiPass+0x298>)
 8008102:	2201      	movs	r2, #1
 8008104:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8008106:	2101      	movs	r1, #1
 8008108:	2003      	movs	r0, #3
 800810a:	f7ff fb47 	bl	800779c <printTemplate>
 800810e:	e031      	b.n	8008174 <takeWifiPass+0x1e4>
            	} else if(page == 3) {
 8008110:	4b45      	ldr	r3, [pc, #276]	; (8008228 <takeWifiPass+0x298>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b03      	cmp	r3, #3
 8008116:	d10a      	bne.n	800812e <takeWifiPass+0x19e>
            		cursorPosition = 16;
 8008118:	4b42      	ldr	r3, [pc, #264]	; (8008224 <takeWifiPass+0x294>)
 800811a:	2210      	movs	r2, #16
 800811c:	601a      	str	r2, [r3, #0]
            		page = 2;
 800811e:	4b42      	ldr	r3, [pc, #264]	; (8008228 <takeWifiPass+0x298>)
 8008120:	2202      	movs	r2, #2
 8008122:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8008124:	2102      	movs	r1, #2
 8008126:	2003      	movs	r0, #3
 8008128:	f7ff fb38 	bl	800779c <printTemplate>
 800812c:	e022      	b.n	8008174 <takeWifiPass+0x1e4>
            	} else if(page == 4) {
 800812e:	4b3e      	ldr	r3, [pc, #248]	; (8008228 <takeWifiPass+0x298>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b04      	cmp	r3, #4
 8008134:	d10a      	bne.n	800814c <takeWifiPass+0x1bc>
            		cursorPosition = 16;
 8008136:	4b3b      	ldr	r3, [pc, #236]	; (8008224 <takeWifiPass+0x294>)
 8008138:	2210      	movs	r2, #16
 800813a:	601a      	str	r2, [r3, #0]
            		page = 3;
 800813c:	4b3a      	ldr	r3, [pc, #232]	; (8008228 <takeWifiPass+0x298>)
 800813e:	2203      	movs	r2, #3
 8008140:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 8008142:	2103      	movs	r1, #3
 8008144:	2003      	movs	r0, #3
 8008146:	f7ff fb29 	bl	800779c <printTemplate>
 800814a:	e013      	b.n	8008174 <takeWifiPass+0x1e4>
            	} else if(page == 5) {
 800814c:	4b36      	ldr	r3, [pc, #216]	; (8008228 <takeWifiPass+0x298>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b05      	cmp	r3, #5
 8008152:	d10f      	bne.n	8008174 <takeWifiPass+0x1e4>
            		cursorPosition = 16;
 8008154:	4b33      	ldr	r3, [pc, #204]	; (8008224 <takeWifiPass+0x294>)
 8008156:	2210      	movs	r2, #16
 8008158:	601a      	str	r2, [r3, #0]
            		page = 4;
 800815a:	4b33      	ldr	r3, [pc, #204]	; (8008228 <takeWifiPass+0x298>)
 800815c:	2204      	movs	r2, #4
 800815e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 8008160:	2104      	movs	r1, #4
 8008162:	2003      	movs	r0, #3
 8008164:	f7ff fb1a 	bl	800779c <printTemplate>
 8008168:	e004      	b.n	8008174 <takeWifiPass+0x1e4>
            	}
            } else {
            	cursorPosition--;
 800816a:	4b2e      	ldr	r3, [pc, #184]	; (8008224 <takeWifiPass+0x294>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3b01      	subs	r3, #1
 8008170:	4a2c      	ldr	r2, [pc, #176]	; (8008224 <takeWifiPass+0x294>)
 8008172:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8008174:	20fa      	movs	r0, #250	; 0xfa
 8008176:	f000 fd97 	bl	8008ca8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800817a:	2102      	movs	r1, #2
 800817c:	482b      	ldr	r0, [pc, #172]	; (800822c <takeWifiPass+0x29c>)
 800817e:	f001 fb63 	bl	8009848 <HAL_GPIO_ReadPin>
 8008182:	4603      	mov	r3, r0
 8008184:	2b01      	cmp	r3, #1
 8008186:	d11e      	bne.n	80081c6 <takeWifiPass+0x236>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	3b01      	subs	r3, #1
 800818c:	4618      	mov	r0, r3
 800818e:	f7ff fc71 	bl	8007a74 <getCharFromCursorPosition>
 8008192:	4603      	mov	r3, r0
 8008194:	4619      	mov	r1, r3
 8008196:	4a27      	ldr	r2, [pc, #156]	; (8008234 <takeWifiPass+0x2a4>)
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4413      	add	r3, r2
 800819c:	460a      	mov	r2, r1
 800819e:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	b2d9      	uxtb	r1, r3
 80081a4:	4a23      	ldr	r2, [pc, #140]	; (8008234 <takeWifiPass+0x2a4>)
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4413      	add	r3, r2
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	461a      	mov	r2, r3
 80081ae:	2001      	movs	r0, #1
 80081b0:	f7f8 fb17 	bl	80007e2 <lcd_print_char>

            writeLoc++;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3301      	adds	r3, #1
 80081b8:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	3301      	adds	r3, #1
 80081be:	60bb      	str	r3, [r7, #8]

            HAL_Delay(250);
 80081c0:	20fa      	movs	r0, #250	; 0xfa
 80081c2:	f000 fd71 	bl	8008ca8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80081c6:	2104      	movs	r1, #4
 80081c8:	4818      	ldr	r0, [pc, #96]	; (800822c <takeWifiPass+0x29c>)
 80081ca:	f001 fb3d 	bl	8009848 <HAL_GPIO_ReadPin>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d139      	bne.n	8008248 <takeWifiPass+0x2b8>
            if(strlen(wifiPass) >= 1) {
 80081d4:	4b17      	ldr	r3, [pc, #92]	; (8008234 <takeWifiPass+0x2a4>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d032      	beq.n	8008242 <takeWifiPass+0x2b2>
            	wifiPass[wifiPassLoc] = '\0';
 80081dc:	4a15      	ldr	r2, [pc, #84]	; (8008234 <takeWifiPass+0x2a4>)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	4413      	add	r3, r2
 80081e2:	2200      	movs	r2, #0
 80081e4:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	3306      	adds	r3, #6
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	4619      	mov	r1, r3
 80081f0:	2001      	movs	r0, #1
 80081f2:	f7f8 fb17 	bl	8000824 <lcd_delete_char>
            	HAL_Delay(50);
 80081f6:	2032      	movs	r0, #50	; 0x32
 80081f8:	f000 fd56 	bl	8008ca8 <HAL_Delay>

            	if(writeLoc > 7) {
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b07      	cmp	r3, #7
 8008200:	dd03      	ble.n	800820a <takeWifiPass+0x27a>
            		writeLoc--;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	3b01      	subs	r3, #1
 8008206:	607b      	str	r3, [r7, #4]
 8008208:	e004      	b.n	8008214 <takeWifiPass+0x284>
            	} else if(writeLoc < 7) {
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b06      	cmp	r3, #6
 800820e:	dc01      	bgt.n	8008214 <takeWifiPass+0x284>
            		writeLoc = 7;
 8008210:	2307      	movs	r3, #7
 8008212:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	dd0e      	ble.n	8008238 <takeWifiPass+0x2a8>
            		wifiPassLoc--;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	3b01      	subs	r3, #1
 800821e:	60bb      	str	r3, [r7, #8]
 8008220:	e00f      	b.n	8008242 <takeWifiPass+0x2b2>
 8008222:	bf00      	nop
 8008224:	20000944 	.word	0x20000944
 8008228:	20000948 	.word	0x20000948
 800822c:	40010800 	.word	0x40010800
 8008230:	40011000 	.word	0x40011000
 8008234:	20000cf0 	.word	0x20000cf0
            	} else if(wifiPassLoc < 0) {
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	da01      	bge.n	8008242 <takeWifiPass+0x2b2>
            		wifiPassLoc = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	60bb      	str	r3, [r7, #8]
            	}
            }

            HAL_Delay(250);
 8008242:	20fa      	movs	r0, #250	; 0xfa
 8008244:	f000 fd30 	bl	8008ca8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008248:	4b05      	ldr	r3, [pc, #20]	; (8008260 <takeWifiPass+0x2d0>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	4619      	mov	r1, r3
 8008250:	2002      	movs	r0, #2
 8008252:	f7f8 fa92 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008256:	e6b1      	b.n	8007fbc <takeWifiPass+0x2c>
    }
}
 8008258:	bf00      	nop
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	20000944 	.word	0x20000944

08008264 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 800826c:	4b04      	ldr	r3, [pc, #16]	; (8008280 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3301      	adds	r3, #1
 8008272:	4a03      	ldr	r2, [pc, #12]	; (8008280 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008274:	6013      	str	r3, [r2, #0]
}
 8008276:	bf00      	nop
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	bc80      	pop	{r7}
 800827e:	4770      	bx	lr
 8008280:	20000b08 	.word	0x20000b08

08008284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008288:	f000 fcac 	bl	8008be4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800828c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008290:	f000 fd0a 	bl	8008ca8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008294:	f000 f8dc 	bl	8008450 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008298:	f000 f9fe 	bl	8008698 <MX_GPIO_Init>
  MX_CAN_Init();
 800829c:	f000 f91e 	bl	80084dc <MX_CAN_Init>
  MX_I2C1_Init();
 80082a0:	f000 f950 	bl	8008544 <MX_I2C1_Init>
  MX_TIM1_Init();
 80082a4:	f000 f97c 	bl	80085a0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80082a8:	f000 f9cc 	bl	8008644 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80082ac:	2201      	movs	r2, #1
 80082ae:	2140      	movs	r1, #64	; 0x40
 80082b0:	4857      	ldr	r0, [pc, #348]	; (8008410 <main+0x18c>)
 80082b2:	f001 fae0 	bl	8009876 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80082b6:	2201      	movs	r2, #1
 80082b8:	2180      	movs	r1, #128	; 0x80
 80082ba:	4855      	ldr	r0, [pc, #340]	; (8008410 <main+0x18c>)
 80082bc:	f001 fadb 	bl	8009876 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80082c0:	200a      	movs	r0, #10
 80082c2:	f000 fcf1 	bl	8008ca8 <HAL_Delay>
  lcd_init();
 80082c6:	f7f8 fa45 	bl	8000754 <lcd_init>
  HAL_Delay(10);
 80082ca:	200a      	movs	r0, #10
 80082cc:	f000 fcec 	bl	8008ca8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80082d0:	4850      	ldr	r0, [pc, #320]	; (8008414 <main+0x190>)
 80082d2:	f003 f983 	bl	800b5dc <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80082d6:	bf00      	nop
 80082d8:	484f      	ldr	r0, [pc, #316]	; (8008418 <main+0x194>)
 80082da:	f002 f8de 	bl	800a49a <HAL_I2C_GetError>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b04      	cmp	r3, #4
 80082e2:	d0f9      	beq.n	80082d8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80082e4:	bf00      	nop
 80082e6:	484c      	ldr	r0, [pc, #304]	; (8008418 <main+0x194>)
 80082e8:	f002 f8ca 	bl	800a480 <HAL_I2C_GetState>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b20      	cmp	r3, #32
 80082f0:	d1f9      	bne.n	80082e6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80082f2:	2200      	movs	r2, #0
 80082f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80082f8:	4845      	ldr	r0, [pc, #276]	; (8008410 <main+0x18c>)
 80082fa:	f001 fabc 	bl	8009876 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80082fe:	2200      	movs	r2, #0
 8008300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008304:	4842      	ldr	r0, [pc, #264]	; (8008410 <main+0x18c>)
 8008306:	f001 fab6 	bl	8009876 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800830a:	2200      	movs	r2, #0
 800830c:	2104      	movs	r1, #4
 800830e:	4840      	ldr	r0, [pc, #256]	; (8008410 <main+0x18c>)
 8008310:	f001 fab1 	bl	8009876 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008314:	2200      	movs	r2, #0
 8008316:	2102      	movs	r1, #2
 8008318:	483d      	ldr	r0, [pc, #244]	; (8008410 <main+0x18c>)
 800831a:	f001 faac 	bl	8009876 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800831e:	2200      	movs	r2, #0
 8008320:	2101      	movs	r1, #1
 8008322:	483b      	ldr	r0, [pc, #236]	; (8008410 <main+0x18c>)
 8008324:	f001 faa7 	bl	8009876 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008328:	2200      	movs	r2, #0
 800832a:	2120      	movs	r1, #32
 800832c:	483b      	ldr	r0, [pc, #236]	; (800841c <main+0x198>)
 800832e:	f001 faa2 	bl	8009876 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008332:	2200      	movs	r2, #0
 8008334:	2110      	movs	r1, #16
 8008336:	4839      	ldr	r0, [pc, #228]	; (800841c <main+0x198>)
 8008338:	f001 fa9d 	bl	8009876 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800833c:	2200      	movs	r2, #0
 800833e:	2180      	movs	r1, #128	; 0x80
 8008340:	4837      	ldr	r0, [pc, #220]	; (8008420 <main+0x19c>)
 8008342:	f001 fa98 	bl	8009876 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008346:	2200      	movs	r2, #0
 8008348:	2140      	movs	r1, #64	; 0x40
 800834a:	4835      	ldr	r0, [pc, #212]	; (8008420 <main+0x19c>)
 800834c:	f001 fa93 	bl	8009876 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008350:	2200      	movs	r2, #0
 8008352:	2120      	movs	r1, #32
 8008354:	4832      	ldr	r0, [pc, #200]	; (8008420 <main+0x19c>)
 8008356:	f001 fa8e 	bl	8009876 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800835a:	2200      	movs	r2, #0
 800835c:	2110      	movs	r1, #16
 800835e:	4830      	ldr	r0, [pc, #192]	; (8008420 <main+0x19c>)
 8008360:	f001 fa89 	bl	8009876 <HAL_GPIO_WritePin>

  i2cTest();
 8008364:	f7fc ffd4 	bl	8005310 <i2cTest>
  HAL_Delay(100);
 8008368:	2064      	movs	r0, #100	; 0x64
 800836a:	f000 fc9d 	bl	8008ca8 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 800836e:	4a2d      	ldr	r2, [pc, #180]	; (8008424 <main+0x1a0>)
 8008370:	2101      	movs	r1, #1
 8008372:	2001      	movs	r0, #1
 8008374:	f7f8 fa20 	bl	80007b8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8008378:	4a2b      	ldr	r2, [pc, #172]	; (8008428 <main+0x1a4>)
 800837a:	2101      	movs	r1, #1
 800837c:	2002      	movs	r0, #2
 800837e:	f7f8 fa1b 	bl	80007b8 <lcd_print>
  HAL_Delay(1000);
 8008382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008386:	f000 fc8f 	bl	8008ca8 <HAL_Delay>
  lcd_clear();
 800838a:	f7f8 fa41 	bl	8000810 <lcd_clear>

  eepromKontrol(0);
 800838e:	2000      	movs	r0, #0
 8008390:	f7fc fc2a 	bl	8004be8 <eepromKontrol>

  if(strlen(machineID) == 0) {
 8008394:	4b25      	ldr	r3, [pc, #148]	; (800842c <main+0x1a8>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d101      	bne.n	80083a0 <main+0x11c>
	  takeMachineID();
 800839c:	f7ff fb82 	bl	8007aa4 <takeMachineID>
  }

  lcd_clear();
 80083a0:	f7f8 fa36 	bl	8000810 <lcd_clear>
  HAL_Delay(500);
 80083a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80083a8:	f000 fc7e 	bl	8008ca8 <HAL_Delay>

  if(iotMode == 1) {
 80083ac:	4b20      	ldr	r3, [pc, #128]	; (8008430 <main+0x1ac>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d124      	bne.n	80083fe <main+0x17a>
	  if(strlen(wifiSSID) == 0) {
 80083b4:	4b1f      	ldr	r3, [pc, #124]	; (8008434 <main+0x1b0>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d101      	bne.n	80083c0 <main+0x13c>
	  	  takeWifiSSID();
 80083bc:	f7ff fc7c 	bl	8007cb8 <takeWifiSSID>
	  }

	  lcd_clear();
 80083c0:	f7f8 fa26 	bl	8000810 <lcd_clear>
	  HAL_Delay(500);
 80083c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80083c8:	f000 fc6e 	bl	8008ca8 <HAL_Delay>

	  if(strlen(wifiPass) == 0) {
 80083cc:	4b1a      	ldr	r3, [pc, #104]	; (8008438 <main+0x1b4>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <main+0x154>
		  takeWifiPass();
 80083d4:	f7ff fddc 	bl	8007f90 <takeWifiPass>
	  }

	  lcd_print(1, 1, "Wifi Ayarlaniyor");
 80083d8:	4a18      	ldr	r2, [pc, #96]	; (800843c <main+0x1b8>)
 80083da:	2101      	movs	r1, #1
 80083dc:	2001      	movs	r0, #1
 80083de:	f7f8 f9eb 	bl	80007b8 <lcd_print>
	  lcd_print(2, 1, "Lutfen Bekleyin");
 80083e2:	4a17      	ldr	r2, [pc, #92]	; (8008440 <main+0x1bc>)
 80083e4:	2101      	movs	r1, #1
 80083e6:	2002      	movs	r0, #2
 80083e8:	f7f8 f9e6 	bl	80007b8 <lcd_print>
	  ESP8266_Init(&huart1, wifiSSID, wifiPass);
 80083ec:	4a12      	ldr	r2, [pc, #72]	; (8008438 <main+0x1b4>)
 80083ee:	4911      	ldr	r1, [pc, #68]	; (8008434 <main+0x1b0>)
 80083f0:	4814      	ldr	r0, [pc, #80]	; (8008444 <main+0x1c0>)
 80083f2:	f7f7 ff1f 	bl	8000234 <ESP8266_Init>
	  HAL_Delay(500);
 80083f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80083fa:	f000 fc55 	bl	8008ca8 <HAL_Delay>
  }

  lcd_clear();
 80083fe:	f7f8 fa07 	bl	8000810 <lcd_clear>

  backLightTimer = millis;
 8008402:	4b11      	ldr	r3, [pc, #68]	; (8008448 <main+0x1c4>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a11      	ldr	r2, [pc, #68]	; (800844c <main+0x1c8>)
 8008408:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 800840a:	f7ff f82f 	bl	800746c <mainLoop>
 800840e:	e7fc      	b.n	800840a <main+0x186>
 8008410:	40010c00 	.word	0x40010c00
 8008414:	20000d90 	.word	0x20000d90
 8008418:	20000d3c 	.word	0x20000d3c
 800841c:	40011000 	.word	0x40011000
 8008420:	40010800 	.word	0x40010800
 8008424:	0800e0d8 	.word	0x0800e0d8
 8008428:	0800e0ec 	.word	0x0800e0ec
 800842c:	20000cc0 	.word	0x20000cc0
 8008430:	20000b4b 	.word	0x20000b4b
 8008434:	20000ccc 	.word	0x20000ccc
 8008438:	20000cf0 	.word	0x20000cf0
 800843c:	0800e100 	.word	0x0800e100
 8008440:	0800e114 	.word	0x0800e114
 8008444:	20000dd8 	.word	0x20000dd8
 8008448:	20000b08 	.word	0x20000b08
 800844c:	20000b24 	.word	0x20000b24

08008450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b090      	sub	sp, #64	; 0x40
 8008454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008456:	f107 0318 	add.w	r3, r7, #24
 800845a:	2228      	movs	r2, #40	; 0x28
 800845c:	2100      	movs	r1, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f004 fb36 	bl	800cad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008464:	1d3b      	adds	r3, r7, #4
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	605a      	str	r2, [r3, #4]
 800846c:	609a      	str	r2, [r3, #8]
 800846e:	60da      	str	r2, [r3, #12]
 8008470:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008472:	2301      	movs	r3, #1
 8008474:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800847a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800847c:	2300      	movs	r3, #0
 800847e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008480:	2301      	movs	r3, #1
 8008482:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008484:	2302      	movs	r3, #2
 8008486:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800848c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800848e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008492:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008494:	f107 0318 	add.w	r3, r7, #24
 8008498:	4618      	mov	r0, r3
 800849a:	f002 fc3f 	bl	800ad1c <HAL_RCC_OscConfig>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80084a4:	f000 f9a2 	bl	80087ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80084a8:	230f      	movs	r3, #15
 80084aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80084ac:	2302      	movs	r3, #2
 80084ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80084b0:	2300      	movs	r3, #0
 80084b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80084b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80084ba:	2300      	movs	r3, #0
 80084bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80084be:	1d3b      	adds	r3, r7, #4
 80084c0:	2102      	movs	r1, #2
 80084c2:	4618      	mov	r0, r3
 80084c4:	f002 feac 	bl	800b220 <HAL_RCC_ClockConfig>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80084ce:	f000 f98d 	bl	80087ec <Error_Handler>
  }
}
 80084d2:	bf00      	nop
 80084d4:	3740      	adds	r7, #64	; 0x40
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
	...

080084dc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80084e0:	4b16      	ldr	r3, [pc, #88]	; (800853c <MX_CAN_Init+0x60>)
 80084e2:	4a17      	ldr	r2, [pc, #92]	; (8008540 <MX_CAN_Init+0x64>)
 80084e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80084e6:	4b15      	ldr	r3, [pc, #84]	; (800853c <MX_CAN_Init+0x60>)
 80084e8:	2210      	movs	r2, #16
 80084ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80084ec:	4b13      	ldr	r3, [pc, #76]	; (800853c <MX_CAN_Init+0x60>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80084f2:	4b12      	ldr	r3, [pc, #72]	; (800853c <MX_CAN_Init+0x60>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80084f8:	4b10      	ldr	r3, [pc, #64]	; (800853c <MX_CAN_Init+0x60>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80084fe:	4b0f      	ldr	r3, [pc, #60]	; (800853c <MX_CAN_Init+0x60>)
 8008500:	2200      	movs	r2, #0
 8008502:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008504:	4b0d      	ldr	r3, [pc, #52]	; (800853c <MX_CAN_Init+0x60>)
 8008506:	2200      	movs	r2, #0
 8008508:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800850a:	4b0c      	ldr	r3, [pc, #48]	; (800853c <MX_CAN_Init+0x60>)
 800850c:	2200      	movs	r2, #0
 800850e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008510:	4b0a      	ldr	r3, [pc, #40]	; (800853c <MX_CAN_Init+0x60>)
 8008512:	2200      	movs	r2, #0
 8008514:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008516:	4b09      	ldr	r3, [pc, #36]	; (800853c <MX_CAN_Init+0x60>)
 8008518:	2200      	movs	r2, #0
 800851a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800851c:	4b07      	ldr	r3, [pc, #28]	; (800853c <MX_CAN_Init+0x60>)
 800851e:	2200      	movs	r2, #0
 8008520:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008522:	4b06      	ldr	r3, [pc, #24]	; (800853c <MX_CAN_Init+0x60>)
 8008524:	2200      	movs	r2, #0
 8008526:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008528:	4804      	ldr	r0, [pc, #16]	; (800853c <MX_CAN_Init+0x60>)
 800852a:	f000 fbe1 	bl	8008cf0 <HAL_CAN_Init>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008534:	f000 f95a 	bl	80087ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008538:	bf00      	nop
 800853a:	bd80      	pop	{r7, pc}
 800853c:	20000d14 	.word	0x20000d14
 8008540:	40006400 	.word	0x40006400

08008544 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008548:	4b12      	ldr	r3, [pc, #72]	; (8008594 <MX_I2C1_Init+0x50>)
 800854a:	4a13      	ldr	r2, [pc, #76]	; (8008598 <MX_I2C1_Init+0x54>)
 800854c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800854e:	4b11      	ldr	r3, [pc, #68]	; (8008594 <MX_I2C1_Init+0x50>)
 8008550:	4a12      	ldr	r2, [pc, #72]	; (800859c <MX_I2C1_Init+0x58>)
 8008552:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008554:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <MX_I2C1_Init+0x50>)
 8008556:	2200      	movs	r2, #0
 8008558:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800855a:	4b0e      	ldr	r3, [pc, #56]	; (8008594 <MX_I2C1_Init+0x50>)
 800855c:	2200      	movs	r2, #0
 800855e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008560:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <MX_I2C1_Init+0x50>)
 8008562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008566:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008568:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <MX_I2C1_Init+0x50>)
 800856a:	2200      	movs	r2, #0
 800856c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800856e:	4b09      	ldr	r3, [pc, #36]	; (8008594 <MX_I2C1_Init+0x50>)
 8008570:	2200      	movs	r2, #0
 8008572:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008574:	4b07      	ldr	r3, [pc, #28]	; (8008594 <MX_I2C1_Init+0x50>)
 8008576:	2200      	movs	r2, #0
 8008578:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800857a:	4b06      	ldr	r3, [pc, #24]	; (8008594 <MX_I2C1_Init+0x50>)
 800857c:	2200      	movs	r2, #0
 800857e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008580:	4804      	ldr	r0, [pc, #16]	; (8008594 <MX_I2C1_Init+0x50>)
 8008582:	f001 f9a9 	bl	80098d8 <HAL_I2C_Init>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800858c:	f000 f92e 	bl	80087ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008590:	bf00      	nop
 8008592:	bd80      	pop	{r7, pc}
 8008594:	20000d3c 	.word	0x20000d3c
 8008598:	40005400 	.word	0x40005400
 800859c:	00061a80 	.word	0x00061a80

080085a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80085a6:	f107 0308 	add.w	r3, r7, #8
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	605a      	str	r2, [r3, #4]
 80085b0:	609a      	str	r2, [r3, #8]
 80085b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085b4:	463b      	mov	r3, r7
 80085b6:	2200      	movs	r2, #0
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80085bc:	4b1f      	ldr	r3, [pc, #124]	; (800863c <MX_TIM1_Init+0x9c>)
 80085be:	4a20      	ldr	r2, [pc, #128]	; (8008640 <MX_TIM1_Init+0xa0>)
 80085c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80085c2:	4b1e      	ldr	r3, [pc, #120]	; (800863c <MX_TIM1_Init+0x9c>)
 80085c4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80085c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085ca:	4b1c      	ldr	r3, [pc, #112]	; (800863c <MX_TIM1_Init+0x9c>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80085d0:	4b1a      	ldr	r3, [pc, #104]	; (800863c <MX_TIM1_Init+0x9c>)
 80085d2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80085d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085d8:	4b18      	ldr	r3, [pc, #96]	; (800863c <MX_TIM1_Init+0x9c>)
 80085da:	2200      	movs	r2, #0
 80085dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80085de:	4b17      	ldr	r3, [pc, #92]	; (800863c <MX_TIM1_Init+0x9c>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085e4:	4b15      	ldr	r3, [pc, #84]	; (800863c <MX_TIM1_Init+0x9c>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80085ea:	4814      	ldr	r0, [pc, #80]	; (800863c <MX_TIM1_Init+0x9c>)
 80085ec:	f002 ffa6 	bl	800b53c <HAL_TIM_Base_Init>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80085f6:	f000 f8f9 	bl	80087ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008600:	f107 0308 	add.w	r3, r7, #8
 8008604:	4619      	mov	r1, r3
 8008606:	480d      	ldr	r0, [pc, #52]	; (800863c <MX_TIM1_Init+0x9c>)
 8008608:	f003 f950 	bl	800b8ac <HAL_TIM_ConfigClockSource>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008612:	f000 f8eb 	bl	80087ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008616:	2300      	movs	r3, #0
 8008618:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800861a:	2300      	movs	r3, #0
 800861c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800861e:	463b      	mov	r3, r7
 8008620:	4619      	mov	r1, r3
 8008622:	4806      	ldr	r0, [pc, #24]	; (800863c <MX_TIM1_Init+0x9c>)
 8008624:	f003 fb3e 	bl	800bca4 <HAL_TIMEx_MasterConfigSynchronization>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800862e:	f000 f8dd 	bl	80087ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008632:	bf00      	nop
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20000d90 	.word	0x20000d90
 8008640:	40012c00 	.word	0x40012c00

08008644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008648:	4b11      	ldr	r3, [pc, #68]	; (8008690 <MX_USART1_UART_Init+0x4c>)
 800864a:	4a12      	ldr	r2, [pc, #72]	; (8008694 <MX_USART1_UART_Init+0x50>)
 800864c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800864e:	4b10      	ldr	r3, [pc, #64]	; (8008690 <MX_USART1_UART_Init+0x4c>)
 8008650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008656:	4b0e      	ldr	r3, [pc, #56]	; (8008690 <MX_USART1_UART_Init+0x4c>)
 8008658:	2200      	movs	r2, #0
 800865a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800865c:	4b0c      	ldr	r3, [pc, #48]	; (8008690 <MX_USART1_UART_Init+0x4c>)
 800865e:	2200      	movs	r2, #0
 8008660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008662:	4b0b      	ldr	r3, [pc, #44]	; (8008690 <MX_USART1_UART_Init+0x4c>)
 8008664:	2200      	movs	r2, #0
 8008666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008668:	4b09      	ldr	r3, [pc, #36]	; (8008690 <MX_USART1_UART_Init+0x4c>)
 800866a:	220c      	movs	r2, #12
 800866c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800866e:	4b08      	ldr	r3, [pc, #32]	; (8008690 <MX_USART1_UART_Init+0x4c>)
 8008670:	2200      	movs	r2, #0
 8008672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008674:	4b06      	ldr	r3, [pc, #24]	; (8008690 <MX_USART1_UART_Init+0x4c>)
 8008676:	2200      	movs	r2, #0
 8008678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800867a:	4805      	ldr	r0, [pc, #20]	; (8008690 <MX_USART1_UART_Init+0x4c>)
 800867c:	f003 fb90 	bl	800bda0 <HAL_UART_Init>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008686:	f000 f8b1 	bl	80087ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800868a:	bf00      	nop
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20000dd8 	.word	0x20000dd8
 8008694:	40013800 	.word	0x40013800

08008698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b088      	sub	sp, #32
 800869c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800869e:	f107 0310 	add.w	r3, r7, #16
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	605a      	str	r2, [r3, #4]
 80086a8:	609a      	str	r2, [r3, #8]
 80086aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80086ac:	4b4b      	ldr	r3, [pc, #300]	; (80087dc <MX_GPIO_Init+0x144>)
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	4a4a      	ldr	r2, [pc, #296]	; (80087dc <MX_GPIO_Init+0x144>)
 80086b2:	f043 0310 	orr.w	r3, r3, #16
 80086b6:	6193      	str	r3, [r2, #24]
 80086b8:	4b48      	ldr	r3, [pc, #288]	; (80087dc <MX_GPIO_Init+0x144>)
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	f003 0310 	and.w	r3, r3, #16
 80086c0:	60fb      	str	r3, [r7, #12]
 80086c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80086c4:	4b45      	ldr	r3, [pc, #276]	; (80087dc <MX_GPIO_Init+0x144>)
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	4a44      	ldr	r2, [pc, #272]	; (80087dc <MX_GPIO_Init+0x144>)
 80086ca:	f043 0320 	orr.w	r3, r3, #32
 80086ce:	6193      	str	r3, [r2, #24]
 80086d0:	4b42      	ldr	r3, [pc, #264]	; (80087dc <MX_GPIO_Init+0x144>)
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	f003 0320 	and.w	r3, r3, #32
 80086d8:	60bb      	str	r3, [r7, #8]
 80086da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80086dc:	4b3f      	ldr	r3, [pc, #252]	; (80087dc <MX_GPIO_Init+0x144>)
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	4a3e      	ldr	r2, [pc, #248]	; (80087dc <MX_GPIO_Init+0x144>)
 80086e2:	f043 0304 	orr.w	r3, r3, #4
 80086e6:	6193      	str	r3, [r2, #24]
 80086e8:	4b3c      	ldr	r3, [pc, #240]	; (80087dc <MX_GPIO_Init+0x144>)
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	607b      	str	r3, [r7, #4]
 80086f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80086f4:	4b39      	ldr	r3, [pc, #228]	; (80087dc <MX_GPIO_Init+0x144>)
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	4a38      	ldr	r2, [pc, #224]	; (80087dc <MX_GPIO_Init+0x144>)
 80086fa:	f043 0308 	orr.w	r3, r3, #8
 80086fe:	6193      	str	r3, [r2, #24]
 8008700:	4b36      	ldr	r3, [pc, #216]	; (80087dc <MX_GPIO_Init+0x144>)
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	f003 0308 	and.w	r3, r3, #8
 8008708:	603b      	str	r3, [r7, #0]
 800870a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800870c:	2200      	movs	r2, #0
 800870e:	21f0      	movs	r1, #240	; 0xf0
 8008710:	4833      	ldr	r0, [pc, #204]	; (80087e0 <MX_GPIO_Init+0x148>)
 8008712:	f001 f8b0 	bl	8009876 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008716:	2200      	movs	r2, #0
 8008718:	f241 0130 	movw	r1, #4144	; 0x1030
 800871c:	4831      	ldr	r0, [pc, #196]	; (80087e4 <MX_GPIO_Init+0x14c>)
 800871e:	f001 f8aa 	bl	8009876 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008722:	2200      	movs	r2, #0
 8008724:	f640 4107 	movw	r1, #3079	; 0xc07
 8008728:	482f      	ldr	r0, [pc, #188]	; (80087e8 <MX_GPIO_Init+0x150>)
 800872a:	f001 f8a4 	bl	8009876 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800872e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008732:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008734:	2300      	movs	r3, #0
 8008736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008738:	2300      	movs	r3, #0
 800873a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800873c:	f107 0310 	add.w	r3, r7, #16
 8008740:	4619      	mov	r1, r3
 8008742:	4828      	ldr	r0, [pc, #160]	; (80087e4 <MX_GPIO_Init+0x14c>)
 8008744:	f000 fe20 	bl	8009388 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008748:	f248 130f 	movw	r3, #33039	; 0x810f
 800874c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800874e:	2300      	movs	r3, #0
 8008750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008752:	2300      	movs	r3, #0
 8008754:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008756:	f107 0310 	add.w	r3, r7, #16
 800875a:	4619      	mov	r1, r3
 800875c:	4820      	ldr	r0, [pc, #128]	; (80087e0 <MX_GPIO_Init+0x148>)
 800875e:	f000 fe13 	bl	8009388 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008762:	23f0      	movs	r3, #240	; 0xf0
 8008764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008766:	2301      	movs	r3, #1
 8008768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800876a:	2300      	movs	r3, #0
 800876c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800876e:	2302      	movs	r3, #2
 8008770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008772:	f107 0310 	add.w	r3, r7, #16
 8008776:	4619      	mov	r1, r3
 8008778:	4819      	ldr	r0, [pc, #100]	; (80087e0 <MX_GPIO_Init+0x148>)
 800877a:	f000 fe05 	bl	8009388 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800877e:	f241 0330 	movw	r3, #4144	; 0x1030
 8008782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008784:	2301      	movs	r3, #1
 8008786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008788:	2300      	movs	r3, #0
 800878a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800878c:	2302      	movs	r3, #2
 800878e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008790:	f107 0310 	add.w	r3, r7, #16
 8008794:	4619      	mov	r1, r3
 8008796:	4813      	ldr	r0, [pc, #76]	; (80087e4 <MX_GPIO_Init+0x14c>)
 8008798:	f000 fdf6 	bl	8009388 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800879c:	f640 4307 	movw	r3, #3079	; 0xc07
 80087a0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087a2:	2301      	movs	r3, #1
 80087a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087aa:	2302      	movs	r3, #2
 80087ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087ae:	f107 0310 	add.w	r3, r7, #16
 80087b2:	4619      	mov	r1, r3
 80087b4:	480c      	ldr	r0, [pc, #48]	; (80087e8 <MX_GPIO_Init+0x150>)
 80087b6:	f000 fde7 	bl	8009388 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80087ba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80087be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087c0:	2300      	movs	r3, #0
 80087c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087c8:	f107 0310 	add.w	r3, r7, #16
 80087cc:	4619      	mov	r1, r3
 80087ce:	4806      	ldr	r0, [pc, #24]	; (80087e8 <MX_GPIO_Init+0x150>)
 80087d0:	f000 fdda 	bl	8009388 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80087d4:	bf00      	nop
 80087d6:	3720      	adds	r7, #32
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	40021000 	.word	0x40021000
 80087e0:	40010800 	.word	0x40010800
 80087e4:	40011000 	.word	0x40011000
 80087e8:	40010c00 	.word	0x40010c00

080087ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80087f0:	bf00      	nop
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bc80      	pop	{r7}
 80087f6:	4770      	bx	lr

080087f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80087fe:	4b15      	ldr	r3, [pc, #84]	; (8008854 <HAL_MspInit+0x5c>)
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	4a14      	ldr	r2, [pc, #80]	; (8008854 <HAL_MspInit+0x5c>)
 8008804:	f043 0301 	orr.w	r3, r3, #1
 8008808:	6193      	str	r3, [r2, #24]
 800880a:	4b12      	ldr	r3, [pc, #72]	; (8008854 <HAL_MspInit+0x5c>)
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	60bb      	str	r3, [r7, #8]
 8008814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008816:	4b0f      	ldr	r3, [pc, #60]	; (8008854 <HAL_MspInit+0x5c>)
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	4a0e      	ldr	r2, [pc, #56]	; (8008854 <HAL_MspInit+0x5c>)
 800881c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008820:	61d3      	str	r3, [r2, #28]
 8008822:	4b0c      	ldr	r3, [pc, #48]	; (8008854 <HAL_MspInit+0x5c>)
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800882a:	607b      	str	r3, [r7, #4]
 800882c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800882e:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <HAL_MspInit+0x60>)
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	4a04      	ldr	r2, [pc, #16]	; (8008858 <HAL_MspInit+0x60>)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800884a:	bf00      	nop
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	bc80      	pop	{r7}
 8008852:	4770      	bx	lr
 8008854:	40021000 	.word	0x40021000
 8008858:	40010000 	.word	0x40010000

0800885c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b088      	sub	sp, #32
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008864:	f107 0310 	add.w	r3, r7, #16
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	605a      	str	r2, [r3, #4]
 800886e:	609a      	str	r2, [r3, #8]
 8008870:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a1c      	ldr	r2, [pc, #112]	; (80088e8 <HAL_CAN_MspInit+0x8c>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d131      	bne.n	80088e0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800887c:	4b1b      	ldr	r3, [pc, #108]	; (80088ec <HAL_CAN_MspInit+0x90>)
 800887e:	69db      	ldr	r3, [r3, #28]
 8008880:	4a1a      	ldr	r2, [pc, #104]	; (80088ec <HAL_CAN_MspInit+0x90>)
 8008882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008886:	61d3      	str	r3, [r2, #28]
 8008888:	4b18      	ldr	r3, [pc, #96]	; (80088ec <HAL_CAN_MspInit+0x90>)
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008890:	60fb      	str	r3, [r7, #12]
 8008892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008894:	4b15      	ldr	r3, [pc, #84]	; (80088ec <HAL_CAN_MspInit+0x90>)
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	4a14      	ldr	r2, [pc, #80]	; (80088ec <HAL_CAN_MspInit+0x90>)
 800889a:	f043 0304 	orr.w	r3, r3, #4
 800889e:	6193      	str	r3, [r2, #24]
 80088a0:	4b12      	ldr	r3, [pc, #72]	; (80088ec <HAL_CAN_MspInit+0x90>)
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	60bb      	str	r3, [r7, #8]
 80088aa:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80088ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088b2:	2300      	movs	r3, #0
 80088b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088ba:	f107 0310 	add.w	r3, r7, #16
 80088be:	4619      	mov	r1, r3
 80088c0:	480b      	ldr	r0, [pc, #44]	; (80088f0 <HAL_CAN_MspInit+0x94>)
 80088c2:	f000 fd61 	bl	8009388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80088c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088cc:	2302      	movs	r3, #2
 80088ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80088d0:	2303      	movs	r3, #3
 80088d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088d4:	f107 0310 	add.w	r3, r7, #16
 80088d8:	4619      	mov	r1, r3
 80088da:	4805      	ldr	r0, [pc, #20]	; (80088f0 <HAL_CAN_MspInit+0x94>)
 80088dc:	f000 fd54 	bl	8009388 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80088e0:	bf00      	nop
 80088e2:	3720      	adds	r7, #32
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	40006400 	.word	0x40006400
 80088ec:	40021000 	.word	0x40021000
 80088f0:	40010800 	.word	0x40010800

080088f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088fc:	f107 0310 	add.w	r3, r7, #16
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	605a      	str	r2, [r3, #4]
 8008906:	609a      	str	r2, [r3, #8]
 8008908:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a15      	ldr	r2, [pc, #84]	; (8008964 <HAL_I2C_MspInit+0x70>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d123      	bne.n	800895c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008914:	4b14      	ldr	r3, [pc, #80]	; (8008968 <HAL_I2C_MspInit+0x74>)
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	4a13      	ldr	r2, [pc, #76]	; (8008968 <HAL_I2C_MspInit+0x74>)
 800891a:	f043 0308 	orr.w	r3, r3, #8
 800891e:	6193      	str	r3, [r2, #24]
 8008920:	4b11      	ldr	r3, [pc, #68]	; (8008968 <HAL_I2C_MspInit+0x74>)
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	f003 0308 	and.w	r3, r3, #8
 8008928:	60fb      	str	r3, [r7, #12]
 800892a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800892c:	23c0      	movs	r3, #192	; 0xc0
 800892e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008930:	2312      	movs	r3, #18
 8008932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008934:	2303      	movs	r3, #3
 8008936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008938:	f107 0310 	add.w	r3, r7, #16
 800893c:	4619      	mov	r1, r3
 800893e:	480b      	ldr	r0, [pc, #44]	; (800896c <HAL_I2C_MspInit+0x78>)
 8008940:	f000 fd22 	bl	8009388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008944:	4b08      	ldr	r3, [pc, #32]	; (8008968 <HAL_I2C_MspInit+0x74>)
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	4a07      	ldr	r2, [pc, #28]	; (8008968 <HAL_I2C_MspInit+0x74>)
 800894a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800894e:	61d3      	str	r3, [r2, #28]
 8008950:	4b05      	ldr	r3, [pc, #20]	; (8008968 <HAL_I2C_MspInit+0x74>)
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008958:	60bb      	str	r3, [r7, #8]
 800895a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800895c:	bf00      	nop
 800895e:	3720      	adds	r7, #32
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	40005400 	.word	0x40005400
 8008968:	40021000 	.word	0x40021000
 800896c:	40010c00 	.word	0x40010c00

08008970 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a0a      	ldr	r2, [pc, #40]	; (80089a8 <HAL_I2C_MspDeInit+0x38>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d10d      	bne.n	800899e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008982:	4b0a      	ldr	r3, [pc, #40]	; (80089ac <HAL_I2C_MspDeInit+0x3c>)
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	4a09      	ldr	r2, [pc, #36]	; (80089ac <HAL_I2C_MspDeInit+0x3c>)
 8008988:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800898c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800898e:	2140      	movs	r1, #64	; 0x40
 8008990:	4807      	ldr	r0, [pc, #28]	; (80089b0 <HAL_I2C_MspDeInit+0x40>)
 8008992:	f000 fe8d 	bl	80096b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008996:	2180      	movs	r1, #128	; 0x80
 8008998:	4805      	ldr	r0, [pc, #20]	; (80089b0 <HAL_I2C_MspDeInit+0x40>)
 800899a:	f000 fe89 	bl	80096b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800899e:	bf00      	nop
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	40005400 	.word	0x40005400
 80089ac:	40021000 	.word	0x40021000
 80089b0:	40010c00 	.word	0x40010c00

080089b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a0d      	ldr	r2, [pc, #52]	; (80089f8 <HAL_TIM_Base_MspInit+0x44>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d113      	bne.n	80089ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80089c6:	4b0d      	ldr	r3, [pc, #52]	; (80089fc <HAL_TIM_Base_MspInit+0x48>)
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	4a0c      	ldr	r2, [pc, #48]	; (80089fc <HAL_TIM_Base_MspInit+0x48>)
 80089cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80089d0:	6193      	str	r3, [r2, #24]
 80089d2:	4b0a      	ldr	r3, [pc, #40]	; (80089fc <HAL_TIM_Base_MspInit+0x48>)
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80089de:	2200      	movs	r2, #0
 80089e0:	2100      	movs	r1, #0
 80089e2:	2019      	movs	r0, #25
 80089e4:	f000 fb57 	bl	8009096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80089e8:	2019      	movs	r0, #25
 80089ea:	f000 fb70 	bl	80090ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80089ee:	bf00      	nop
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	40012c00 	.word	0x40012c00
 80089fc:	40021000 	.word	0x40021000

08008a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b088      	sub	sp, #32
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a08:	f107 0310 	add.w	r3, r7, #16
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	605a      	str	r2, [r3, #4]
 8008a12:	609a      	str	r2, [r3, #8]
 8008a14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a20      	ldr	r2, [pc, #128]	; (8008a9c <HAL_UART_MspInit+0x9c>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d139      	bne.n	8008a94 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008a20:	4b1f      	ldr	r3, [pc, #124]	; (8008aa0 <HAL_UART_MspInit+0xa0>)
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	4a1e      	ldr	r2, [pc, #120]	; (8008aa0 <HAL_UART_MspInit+0xa0>)
 8008a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a2a:	6193      	str	r3, [r2, #24]
 8008a2c:	4b1c      	ldr	r3, [pc, #112]	; (8008aa0 <HAL_UART_MspInit+0xa0>)
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a38:	4b19      	ldr	r3, [pc, #100]	; (8008aa0 <HAL_UART_MspInit+0xa0>)
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	4a18      	ldr	r2, [pc, #96]	; (8008aa0 <HAL_UART_MspInit+0xa0>)
 8008a3e:	f043 0304 	orr.w	r3, r3, #4
 8008a42:	6193      	str	r3, [r2, #24]
 8008a44:	4b16      	ldr	r3, [pc, #88]	; (8008aa0 <HAL_UART_MspInit+0xa0>)
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	60bb      	str	r3, [r7, #8]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a56:	2302      	movs	r3, #2
 8008a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a5e:	f107 0310 	add.w	r3, r7, #16
 8008a62:	4619      	mov	r1, r3
 8008a64:	480f      	ldr	r0, [pc, #60]	; (8008aa4 <HAL_UART_MspInit+0xa4>)
 8008a66:	f000 fc8f 	bl	8009388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a70:	2300      	movs	r3, #0
 8008a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a74:	2300      	movs	r3, #0
 8008a76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a78:	f107 0310 	add.w	r3, r7, #16
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4809      	ldr	r0, [pc, #36]	; (8008aa4 <HAL_UART_MspInit+0xa4>)
 8008a80:	f000 fc82 	bl	8009388 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008a84:	2200      	movs	r2, #0
 8008a86:	2100      	movs	r1, #0
 8008a88:	2025      	movs	r0, #37	; 0x25
 8008a8a:	f000 fb04 	bl	8009096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008a8e:	2025      	movs	r0, #37	; 0x25
 8008a90:	f000 fb1d 	bl	80090ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008a94:	bf00      	nop
 8008a96:	3720      	adds	r7, #32
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	40013800 	.word	0x40013800
 8008aa0:	40021000 	.word	0x40021000
 8008aa4:	40010800 	.word	0x40010800

08008aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008aac:	e7fe      	b.n	8008aac <NMI_Handler+0x4>

08008aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ab2:	e7fe      	b.n	8008ab2 <HardFault_Handler+0x4>

08008ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ab8:	e7fe      	b.n	8008ab8 <MemManage_Handler+0x4>

08008aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008aba:	b480      	push	{r7}
 8008abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008abe:	e7fe      	b.n	8008abe <BusFault_Handler+0x4>

08008ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ac4:	e7fe      	b.n	8008ac4 <UsageFault_Handler+0x4>

08008ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008aca:	bf00      	nop
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bc80      	pop	{r7}
 8008ad0:	4770      	bx	lr

08008ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ad6:	bf00      	nop
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bc80      	pop	{r7}
 8008adc:	4770      	bx	lr

08008ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008ae2:	bf00      	nop
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bc80      	pop	{r7}
 8008ae8:	4770      	bx	lr

08008aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008aee:	f000 f8bf 	bl	8008c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008af2:	bf00      	nop
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008afc:	4802      	ldr	r0, [pc, #8]	; (8008b08 <TIM1_UP_IRQHandler+0x10>)
 8008afe:	f002 fdcd 	bl	800b69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008b02:	bf00      	nop
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20000d90 	.word	0x20000d90

08008b0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008b10:	4802      	ldr	r0, [pc, #8]	; (8008b1c <USART1_IRQHandler+0x10>)
 8008b12:	f003 f9cb 	bl	800beac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008b16:	bf00      	nop
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000dd8 	.word	0x20000dd8

08008b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008b28:	4a14      	ldr	r2, [pc, #80]	; (8008b7c <_sbrk+0x5c>)
 8008b2a:	4b15      	ldr	r3, [pc, #84]	; (8008b80 <_sbrk+0x60>)
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008b34:	4b13      	ldr	r3, [pc, #76]	; (8008b84 <_sbrk+0x64>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d102      	bne.n	8008b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008b3c:	4b11      	ldr	r3, [pc, #68]	; (8008b84 <_sbrk+0x64>)
 8008b3e:	4a12      	ldr	r2, [pc, #72]	; (8008b88 <_sbrk+0x68>)
 8008b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008b42:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <_sbrk+0x64>)
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4413      	add	r3, r2
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d207      	bcs.n	8008b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008b50:	f003 ffe6 	bl	800cb20 <__errno>
 8008b54:	4603      	mov	r3, r0
 8008b56:	220c      	movs	r2, #12
 8008b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5e:	e009      	b.n	8008b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008b60:	4b08      	ldr	r3, [pc, #32]	; (8008b84 <_sbrk+0x64>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008b66:	4b07      	ldr	r3, [pc, #28]	; (8008b84 <_sbrk+0x64>)
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	4a05      	ldr	r2, [pc, #20]	; (8008b84 <_sbrk+0x64>)
 8008b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008b72:	68fb      	ldr	r3, [r7, #12]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3718      	adds	r7, #24
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	2000c000 	.word	0x2000c000
 8008b80:	00000400 	.word	0x00000400
 8008b84:	20000e20 	.word	0x20000e20
 8008b88:	20000f70 	.word	0x20000f70

08008b8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008b90:	bf00      	nop
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bc80      	pop	{r7}
 8008b96:	4770      	bx	lr

08008b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008b98:	480c      	ldr	r0, [pc, #48]	; (8008bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008b9a:	490d      	ldr	r1, [pc, #52]	; (8008bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008b9c:	4a0d      	ldr	r2, [pc, #52]	; (8008bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ba0:	e002      	b.n	8008ba8 <LoopCopyDataInit>

08008ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008ba6:	3304      	adds	r3, #4

08008ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008bac:	d3f9      	bcc.n	8008ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008bae:	4a0a      	ldr	r2, [pc, #40]	; (8008bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008bb0:	4c0a      	ldr	r4, [pc, #40]	; (8008bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8008bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008bb4:	e001      	b.n	8008bba <LoopFillZerobss>

08008bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008bb8:	3204      	adds	r2, #4

08008bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008bbc:	d3fb      	bcc.n	8008bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008bbe:	f7ff ffe5 	bl	8008b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008bc2:	f003 ffb3 	bl	800cb2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008bc6:	f7ff fb5d 	bl	8008284 <main>
  bx lr
 8008bca:	4770      	bx	lr
  ldr r0, =_sdata
 8008bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008bd0:	200009a8 	.word	0x200009a8
  ldr r2, =_sidata
 8008bd4:	0800e1b0 	.word	0x0800e1b0
  ldr r2, =_sbss
 8008bd8:	200009a8 	.word	0x200009a8
  ldr r4, =_ebss
 8008bdc:	20000f70 	.word	0x20000f70

08008be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008be0:	e7fe      	b.n	8008be0 <ADC1_2_IRQHandler>
	...

08008be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008be8:	4b08      	ldr	r3, [pc, #32]	; (8008c0c <HAL_Init+0x28>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a07      	ldr	r2, [pc, #28]	; (8008c0c <HAL_Init+0x28>)
 8008bee:	f043 0310 	orr.w	r3, r3, #16
 8008bf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008bf4:	2003      	movs	r0, #3
 8008bf6:	f000 fa43 	bl	8009080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008bfa:	200f      	movs	r0, #15
 8008bfc:	f000 f808 	bl	8008c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008c00:	f7ff fdfa 	bl	80087f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	40022000 	.word	0x40022000

08008c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008c18:	4b12      	ldr	r3, [pc, #72]	; (8008c64 <HAL_InitTick+0x54>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	4b12      	ldr	r3, [pc, #72]	; (8008c68 <HAL_InitTick+0x58>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	4619      	mov	r1, r3
 8008c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fa5b 	bl	80090ea <HAL_SYSTICK_Config>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e00e      	b.n	8008c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b0f      	cmp	r3, #15
 8008c42:	d80a      	bhi.n	8008c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008c44:	2200      	movs	r2, #0
 8008c46:	6879      	ldr	r1, [r7, #4]
 8008c48:	f04f 30ff 	mov.w	r0, #4294967295
 8008c4c:	f000 fa23 	bl	8009096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008c50:	4a06      	ldr	r2, [pc, #24]	; (8008c6c <HAL_InitTick+0x5c>)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	e000      	b.n	8008c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	2000094c 	.word	0x2000094c
 8008c68:	20000954 	.word	0x20000954
 8008c6c:	20000950 	.word	0x20000950

08008c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008c70:	b480      	push	{r7}
 8008c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008c74:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <HAL_IncTick+0x1c>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <HAL_IncTick+0x20>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4413      	add	r3, r2
 8008c80:	4a03      	ldr	r2, [pc, #12]	; (8008c90 <HAL_IncTick+0x20>)
 8008c82:	6013      	str	r3, [r2, #0]
}
 8008c84:	bf00      	nop
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bc80      	pop	{r7}
 8008c8a:	4770      	bx	lr
 8008c8c:	20000954 	.word	0x20000954
 8008c90:	20000e24 	.word	0x20000e24

08008c94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c94:	b480      	push	{r7}
 8008c96:	af00      	add	r7, sp, #0
  return uwTick;
 8008c98:	4b02      	ldr	r3, [pc, #8]	; (8008ca4 <HAL_GetTick+0x10>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bc80      	pop	{r7}
 8008ca2:	4770      	bx	lr
 8008ca4:	20000e24 	.word	0x20000e24

08008ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008cb0:	f7ff fff0 	bl	8008c94 <HAL_GetTick>
 8008cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc0:	d005      	beq.n	8008cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008cc2:	4b0a      	ldr	r3, [pc, #40]	; (8008cec <HAL_Delay+0x44>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4413      	add	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008cce:	bf00      	nop
 8008cd0:	f7ff ffe0 	bl	8008c94 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d8f7      	bhi.n	8008cd0 <HAL_Delay+0x28>
  {
  }
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20000954 	.word	0x20000954

08008cf0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e0ed      	b.n	8008ede <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d102      	bne.n	8008d14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7ff fda4 	bl	800885c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f042 0201 	orr.w	r2, r2, #1
 8008d22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d24:	f7ff ffb6 	bl	8008c94 <HAL_GetTick>
 8008d28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008d2a:	e012      	b.n	8008d52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008d2c:	f7ff ffb2 	bl	8008c94 <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	2b0a      	cmp	r3, #10
 8008d38:	d90b      	bls.n	8008d52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2205      	movs	r2, #5
 8008d4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e0c5      	b.n	8008ede <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f003 0301 	and.w	r3, r3, #1
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0e5      	beq.n	8008d2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 0202 	bic.w	r2, r2, #2
 8008d6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d70:	f7ff ff90 	bl	8008c94 <HAL_GetTick>
 8008d74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008d76:	e012      	b.n	8008d9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008d78:	f7ff ff8c 	bl	8008c94 <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	2b0a      	cmp	r3, #10
 8008d84:	d90b      	bls.n	8008d9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2205      	movs	r2, #5
 8008d96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e09f      	b.n	8008ede <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e5      	bne.n	8008d78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	7e1b      	ldrb	r3, [r3, #24]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d108      	bne.n	8008dc6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	e007      	b.n	8008dd6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	7e5b      	ldrb	r3, [r3, #25]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d108      	bne.n	8008df0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	e007      	b.n	8008e00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	7e9b      	ldrb	r3, [r3, #26]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d108      	bne.n	8008e1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f042 0220 	orr.w	r2, r2, #32
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	e007      	b.n	8008e2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f022 0220 	bic.w	r2, r2, #32
 8008e28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	7edb      	ldrb	r3, [r3, #27]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d108      	bne.n	8008e44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f022 0210 	bic.w	r2, r2, #16
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	e007      	b.n	8008e54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f042 0210 	orr.w	r2, r2, #16
 8008e52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	7f1b      	ldrb	r3, [r3, #28]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d108      	bne.n	8008e6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f042 0208 	orr.w	r2, r2, #8
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	e007      	b.n	8008e7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f022 0208 	bic.w	r2, r2, #8
 8008e7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	7f5b      	ldrb	r3, [r3, #29]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d108      	bne.n	8008e98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f042 0204 	orr.w	r2, r2, #4
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	e007      	b.n	8008ea8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 0204 	bic.w	r2, r2, #4
 8008ea6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	689a      	ldr	r2, [r3, #8]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	431a      	orrs	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	695b      	ldr	r3, [r3, #20]
 8008ebc:	ea42 0103 	orr.w	r1, r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	1e5a      	subs	r2, r3, #1
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <__NVIC_SetPriorityGrouping>:
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f003 0307 	and.w	r3, r3, #7
 8008ef6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ef8:	4b0c      	ldr	r3, [pc, #48]	; (8008f2c <__NVIC_SetPriorityGrouping+0x44>)
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f04:	4013      	ands	r3, r2
 8008f06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f1a:	4a04      	ldr	r2, [pc, #16]	; (8008f2c <__NVIC_SetPriorityGrouping+0x44>)
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	60d3      	str	r3, [r2, #12]
}
 8008f20:	bf00      	nop
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bc80      	pop	{r7}
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	e000ed00 	.word	0xe000ed00

08008f30 <__NVIC_GetPriorityGrouping>:
{
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f34:	4b04      	ldr	r3, [pc, #16]	; (8008f48 <__NVIC_GetPriorityGrouping+0x18>)
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	0a1b      	lsrs	r3, r3, #8
 8008f3a:	f003 0307 	and.w	r3, r3, #7
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bc80      	pop	{r7}
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	e000ed00 	.word	0xe000ed00

08008f4c <__NVIC_EnableIRQ>:
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	db0b      	blt.n	8008f76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	f003 021f 	and.w	r2, r3, #31
 8008f64:	4906      	ldr	r1, [pc, #24]	; (8008f80 <__NVIC_EnableIRQ+0x34>)
 8008f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f6a:	095b      	lsrs	r3, r3, #5
 8008f6c:	2001      	movs	r0, #1
 8008f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8008f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bc80      	pop	{r7}
 8008f7e:	4770      	bx	lr
 8008f80:	e000e100 	.word	0xe000e100

08008f84 <__NVIC_SetPriority>:
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	6039      	str	r1, [r7, #0]
 8008f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	db0a      	blt.n	8008fae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	490c      	ldr	r1, [pc, #48]	; (8008fd0 <__NVIC_SetPriority+0x4c>)
 8008f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fa2:	0112      	lsls	r2, r2, #4
 8008fa4:	b2d2      	uxtb	r2, r2
 8008fa6:	440b      	add	r3, r1
 8008fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008fac:	e00a      	b.n	8008fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	4908      	ldr	r1, [pc, #32]	; (8008fd4 <__NVIC_SetPriority+0x50>)
 8008fb4:	79fb      	ldrb	r3, [r7, #7]
 8008fb6:	f003 030f 	and.w	r3, r3, #15
 8008fba:	3b04      	subs	r3, #4
 8008fbc:	0112      	lsls	r2, r2, #4
 8008fbe:	b2d2      	uxtb	r2, r2
 8008fc0:	440b      	add	r3, r1
 8008fc2:	761a      	strb	r2, [r3, #24]
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bc80      	pop	{r7}
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	e000e100 	.word	0xe000e100
 8008fd4:	e000ed00 	.word	0xe000ed00

08008fd8 <NVIC_EncodePriority>:
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b089      	sub	sp, #36	; 0x24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	f1c3 0307 	rsb	r3, r3, #7
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	bf28      	it	cs
 8008ff6:	2304      	movcs	r3, #4
 8008ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	2b06      	cmp	r3, #6
 8009000:	d902      	bls.n	8009008 <NVIC_EncodePriority+0x30>
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	3b03      	subs	r3, #3
 8009006:	e000      	b.n	800900a <NVIC_EncodePriority+0x32>
 8009008:	2300      	movs	r3, #0
 800900a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800900c:	f04f 32ff 	mov.w	r2, #4294967295
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	fa02 f303 	lsl.w	r3, r2, r3
 8009016:	43da      	mvns	r2, r3
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	401a      	ands	r2, r3
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009020:	f04f 31ff 	mov.w	r1, #4294967295
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	fa01 f303 	lsl.w	r3, r1, r3
 800902a:	43d9      	mvns	r1, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009030:	4313      	orrs	r3, r2
}
 8009032:	4618      	mov	r0, r3
 8009034:	3724      	adds	r7, #36	; 0x24
 8009036:	46bd      	mov	sp, r7
 8009038:	bc80      	pop	{r7}
 800903a:	4770      	bx	lr

0800903c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	3b01      	subs	r3, #1
 8009048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800904c:	d301      	bcc.n	8009052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800904e:	2301      	movs	r3, #1
 8009050:	e00f      	b.n	8009072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009052:	4a0a      	ldr	r2, [pc, #40]	; (800907c <SysTick_Config+0x40>)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	3b01      	subs	r3, #1
 8009058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800905a:	210f      	movs	r1, #15
 800905c:	f04f 30ff 	mov.w	r0, #4294967295
 8009060:	f7ff ff90 	bl	8008f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009064:	4b05      	ldr	r3, [pc, #20]	; (800907c <SysTick_Config+0x40>)
 8009066:	2200      	movs	r2, #0
 8009068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800906a:	4b04      	ldr	r3, [pc, #16]	; (800907c <SysTick_Config+0x40>)
 800906c:	2207      	movs	r2, #7
 800906e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	e000e010 	.word	0xe000e010

08009080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7ff ff2d 	bl	8008ee8 <__NVIC_SetPriorityGrouping>
}
 800908e:	bf00      	nop
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009096:	b580      	push	{r7, lr}
 8009098:	b086      	sub	sp, #24
 800909a:	af00      	add	r7, sp, #0
 800909c:	4603      	mov	r3, r0
 800909e:	60b9      	str	r1, [r7, #8]
 80090a0:	607a      	str	r2, [r7, #4]
 80090a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80090a8:	f7ff ff42 	bl	8008f30 <__NVIC_GetPriorityGrouping>
 80090ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	68b9      	ldr	r1, [r7, #8]
 80090b2:	6978      	ldr	r0, [r7, #20]
 80090b4:	f7ff ff90 	bl	8008fd8 <NVIC_EncodePriority>
 80090b8:	4602      	mov	r2, r0
 80090ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090be:	4611      	mov	r1, r2
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7ff ff5f 	bl	8008f84 <__NVIC_SetPriority>
}
 80090c6:	bf00      	nop
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b082      	sub	sp, #8
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	4603      	mov	r3, r0
 80090d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80090d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090dc:	4618      	mov	r0, r3
 80090de:	f7ff ff35 	bl	8008f4c <__NVIC_EnableIRQ>
}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7ff ffa2 	bl	800903c <SysTick_Config>
 80090f8:	4603      	mov	r3, r0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009102:	b480      	push	{r7}
 8009104:	b085      	sub	sp, #20
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b02      	cmp	r3, #2
 8009118:	d008      	beq.n	800912c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2204      	movs	r2, #4
 800911e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e020      	b.n	800916e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 020e 	bic.w	r2, r2, #14
 800913a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f022 0201 	bic.w	r2, r2, #1
 800914a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009154:	2101      	movs	r1, #1
 8009156:	fa01 f202 	lsl.w	r2, r1, r2
 800915a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800916c:	7bfb      	ldrb	r3, [r7, #15]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	bc80      	pop	{r7}
 8009176:	4770      	bx	lr

08009178 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b02      	cmp	r3, #2
 800918e:	d005      	beq.n	800919c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2204      	movs	r2, #4
 8009194:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	73fb      	strb	r3, [r7, #15]
 800919a:	e0d6      	b.n	800934a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 020e 	bic.w	r2, r2, #14
 80091aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 0201 	bic.w	r2, r2, #1
 80091ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	461a      	mov	r2, r3
 80091c2:	4b64      	ldr	r3, [pc, #400]	; (8009354 <HAL_DMA_Abort_IT+0x1dc>)
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d958      	bls.n	800927a <HAL_DMA_Abort_IT+0x102>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a62      	ldr	r2, [pc, #392]	; (8009358 <HAL_DMA_Abort_IT+0x1e0>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d04f      	beq.n	8009272 <HAL_DMA_Abort_IT+0xfa>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a61      	ldr	r2, [pc, #388]	; (800935c <HAL_DMA_Abort_IT+0x1e4>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d048      	beq.n	800926e <HAL_DMA_Abort_IT+0xf6>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a5f      	ldr	r2, [pc, #380]	; (8009360 <HAL_DMA_Abort_IT+0x1e8>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d040      	beq.n	8009268 <HAL_DMA_Abort_IT+0xf0>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a5e      	ldr	r2, [pc, #376]	; (8009364 <HAL_DMA_Abort_IT+0x1ec>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d038      	beq.n	8009262 <HAL_DMA_Abort_IT+0xea>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a5c      	ldr	r2, [pc, #368]	; (8009368 <HAL_DMA_Abort_IT+0x1f0>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d030      	beq.n	800925c <HAL_DMA_Abort_IT+0xe4>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a5b      	ldr	r2, [pc, #364]	; (800936c <HAL_DMA_Abort_IT+0x1f4>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d028      	beq.n	8009256 <HAL_DMA_Abort_IT+0xde>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a52      	ldr	r2, [pc, #328]	; (8009354 <HAL_DMA_Abort_IT+0x1dc>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d020      	beq.n	8009250 <HAL_DMA_Abort_IT+0xd8>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a57      	ldr	r2, [pc, #348]	; (8009370 <HAL_DMA_Abort_IT+0x1f8>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d019      	beq.n	800924c <HAL_DMA_Abort_IT+0xd4>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a55      	ldr	r2, [pc, #340]	; (8009374 <HAL_DMA_Abort_IT+0x1fc>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d012      	beq.n	8009248 <HAL_DMA_Abort_IT+0xd0>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a54      	ldr	r2, [pc, #336]	; (8009378 <HAL_DMA_Abort_IT+0x200>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d00a      	beq.n	8009242 <HAL_DMA_Abort_IT+0xca>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a52      	ldr	r2, [pc, #328]	; (800937c <HAL_DMA_Abort_IT+0x204>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d102      	bne.n	800923c <HAL_DMA_Abort_IT+0xc4>
 8009236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800923a:	e01b      	b.n	8009274 <HAL_DMA_Abort_IT+0xfc>
 800923c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009240:	e018      	b.n	8009274 <HAL_DMA_Abort_IT+0xfc>
 8009242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009246:	e015      	b.n	8009274 <HAL_DMA_Abort_IT+0xfc>
 8009248:	2310      	movs	r3, #16
 800924a:	e013      	b.n	8009274 <HAL_DMA_Abort_IT+0xfc>
 800924c:	2301      	movs	r3, #1
 800924e:	e011      	b.n	8009274 <HAL_DMA_Abort_IT+0xfc>
 8009250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009254:	e00e      	b.n	8009274 <HAL_DMA_Abort_IT+0xfc>
 8009256:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800925a:	e00b      	b.n	8009274 <HAL_DMA_Abort_IT+0xfc>
 800925c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009260:	e008      	b.n	8009274 <HAL_DMA_Abort_IT+0xfc>
 8009262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009266:	e005      	b.n	8009274 <HAL_DMA_Abort_IT+0xfc>
 8009268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800926c:	e002      	b.n	8009274 <HAL_DMA_Abort_IT+0xfc>
 800926e:	2310      	movs	r3, #16
 8009270:	e000      	b.n	8009274 <HAL_DMA_Abort_IT+0xfc>
 8009272:	2301      	movs	r3, #1
 8009274:	4a42      	ldr	r2, [pc, #264]	; (8009380 <HAL_DMA_Abort_IT+0x208>)
 8009276:	6053      	str	r3, [r2, #4]
 8009278:	e057      	b.n	800932a <HAL_DMA_Abort_IT+0x1b2>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a36      	ldr	r2, [pc, #216]	; (8009358 <HAL_DMA_Abort_IT+0x1e0>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d04f      	beq.n	8009324 <HAL_DMA_Abort_IT+0x1ac>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a34      	ldr	r2, [pc, #208]	; (800935c <HAL_DMA_Abort_IT+0x1e4>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d048      	beq.n	8009320 <HAL_DMA_Abort_IT+0x1a8>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a33      	ldr	r2, [pc, #204]	; (8009360 <HAL_DMA_Abort_IT+0x1e8>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d040      	beq.n	800931a <HAL_DMA_Abort_IT+0x1a2>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a31      	ldr	r2, [pc, #196]	; (8009364 <HAL_DMA_Abort_IT+0x1ec>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d038      	beq.n	8009314 <HAL_DMA_Abort_IT+0x19c>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a30      	ldr	r2, [pc, #192]	; (8009368 <HAL_DMA_Abort_IT+0x1f0>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d030      	beq.n	800930e <HAL_DMA_Abort_IT+0x196>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a2e      	ldr	r2, [pc, #184]	; (800936c <HAL_DMA_Abort_IT+0x1f4>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d028      	beq.n	8009308 <HAL_DMA_Abort_IT+0x190>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a26      	ldr	r2, [pc, #152]	; (8009354 <HAL_DMA_Abort_IT+0x1dc>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d020      	beq.n	8009302 <HAL_DMA_Abort_IT+0x18a>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a2a      	ldr	r2, [pc, #168]	; (8009370 <HAL_DMA_Abort_IT+0x1f8>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d019      	beq.n	80092fe <HAL_DMA_Abort_IT+0x186>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a29      	ldr	r2, [pc, #164]	; (8009374 <HAL_DMA_Abort_IT+0x1fc>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d012      	beq.n	80092fa <HAL_DMA_Abort_IT+0x182>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a27      	ldr	r2, [pc, #156]	; (8009378 <HAL_DMA_Abort_IT+0x200>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d00a      	beq.n	80092f4 <HAL_DMA_Abort_IT+0x17c>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a26      	ldr	r2, [pc, #152]	; (800937c <HAL_DMA_Abort_IT+0x204>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d102      	bne.n	80092ee <HAL_DMA_Abort_IT+0x176>
 80092e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092ec:	e01b      	b.n	8009326 <HAL_DMA_Abort_IT+0x1ae>
 80092ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80092f2:	e018      	b.n	8009326 <HAL_DMA_Abort_IT+0x1ae>
 80092f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092f8:	e015      	b.n	8009326 <HAL_DMA_Abort_IT+0x1ae>
 80092fa:	2310      	movs	r3, #16
 80092fc:	e013      	b.n	8009326 <HAL_DMA_Abort_IT+0x1ae>
 80092fe:	2301      	movs	r3, #1
 8009300:	e011      	b.n	8009326 <HAL_DMA_Abort_IT+0x1ae>
 8009302:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009306:	e00e      	b.n	8009326 <HAL_DMA_Abort_IT+0x1ae>
 8009308:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800930c:	e00b      	b.n	8009326 <HAL_DMA_Abort_IT+0x1ae>
 800930e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009312:	e008      	b.n	8009326 <HAL_DMA_Abort_IT+0x1ae>
 8009314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009318:	e005      	b.n	8009326 <HAL_DMA_Abort_IT+0x1ae>
 800931a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800931e:	e002      	b.n	8009326 <HAL_DMA_Abort_IT+0x1ae>
 8009320:	2310      	movs	r3, #16
 8009322:	e000      	b.n	8009326 <HAL_DMA_Abort_IT+0x1ae>
 8009324:	2301      	movs	r3, #1
 8009326:	4a17      	ldr	r2, [pc, #92]	; (8009384 <HAL_DMA_Abort_IT+0x20c>)
 8009328:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	4798      	blx	r3
    } 
  }
  return status;
 800934a:	7bfb      	ldrb	r3, [r7, #15]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	40020080 	.word	0x40020080
 8009358:	40020008 	.word	0x40020008
 800935c:	4002001c 	.word	0x4002001c
 8009360:	40020030 	.word	0x40020030
 8009364:	40020044 	.word	0x40020044
 8009368:	40020058 	.word	0x40020058
 800936c:	4002006c 	.word	0x4002006c
 8009370:	40020408 	.word	0x40020408
 8009374:	4002041c 	.word	0x4002041c
 8009378:	40020430 	.word	0x40020430
 800937c:	40020444 	.word	0x40020444
 8009380:	40020400 	.word	0x40020400
 8009384:	40020000 	.word	0x40020000

08009388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009388:	b480      	push	{r7}
 800938a:	b08b      	sub	sp, #44	; 0x2c
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009392:	2300      	movs	r3, #0
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009396:	2300      	movs	r3, #0
 8009398:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800939a:	e179      	b.n	8009690 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800939c:	2201      	movs	r2, #1
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	fa02 f303 	lsl.w	r3, r2, r3
 80093a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	69fa      	ldr	r2, [r7, #28]
 80093ac:	4013      	ands	r3, r2
 80093ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	f040 8168 	bne.w	800968a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	4a96      	ldr	r2, [pc, #600]	; (8009618 <HAL_GPIO_Init+0x290>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d05e      	beq.n	8009482 <HAL_GPIO_Init+0xfa>
 80093c4:	4a94      	ldr	r2, [pc, #592]	; (8009618 <HAL_GPIO_Init+0x290>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d875      	bhi.n	80094b6 <HAL_GPIO_Init+0x12e>
 80093ca:	4a94      	ldr	r2, [pc, #592]	; (800961c <HAL_GPIO_Init+0x294>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d058      	beq.n	8009482 <HAL_GPIO_Init+0xfa>
 80093d0:	4a92      	ldr	r2, [pc, #584]	; (800961c <HAL_GPIO_Init+0x294>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d86f      	bhi.n	80094b6 <HAL_GPIO_Init+0x12e>
 80093d6:	4a92      	ldr	r2, [pc, #584]	; (8009620 <HAL_GPIO_Init+0x298>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d052      	beq.n	8009482 <HAL_GPIO_Init+0xfa>
 80093dc:	4a90      	ldr	r2, [pc, #576]	; (8009620 <HAL_GPIO_Init+0x298>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d869      	bhi.n	80094b6 <HAL_GPIO_Init+0x12e>
 80093e2:	4a90      	ldr	r2, [pc, #576]	; (8009624 <HAL_GPIO_Init+0x29c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d04c      	beq.n	8009482 <HAL_GPIO_Init+0xfa>
 80093e8:	4a8e      	ldr	r2, [pc, #568]	; (8009624 <HAL_GPIO_Init+0x29c>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d863      	bhi.n	80094b6 <HAL_GPIO_Init+0x12e>
 80093ee:	4a8e      	ldr	r2, [pc, #568]	; (8009628 <HAL_GPIO_Init+0x2a0>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d046      	beq.n	8009482 <HAL_GPIO_Init+0xfa>
 80093f4:	4a8c      	ldr	r2, [pc, #560]	; (8009628 <HAL_GPIO_Init+0x2a0>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d85d      	bhi.n	80094b6 <HAL_GPIO_Init+0x12e>
 80093fa:	2b12      	cmp	r3, #18
 80093fc:	d82a      	bhi.n	8009454 <HAL_GPIO_Init+0xcc>
 80093fe:	2b12      	cmp	r3, #18
 8009400:	d859      	bhi.n	80094b6 <HAL_GPIO_Init+0x12e>
 8009402:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <HAL_GPIO_Init+0x80>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	08009483 	.word	0x08009483
 800940c:	0800945d 	.word	0x0800945d
 8009410:	0800946f 	.word	0x0800946f
 8009414:	080094b1 	.word	0x080094b1
 8009418:	080094b7 	.word	0x080094b7
 800941c:	080094b7 	.word	0x080094b7
 8009420:	080094b7 	.word	0x080094b7
 8009424:	080094b7 	.word	0x080094b7
 8009428:	080094b7 	.word	0x080094b7
 800942c:	080094b7 	.word	0x080094b7
 8009430:	080094b7 	.word	0x080094b7
 8009434:	080094b7 	.word	0x080094b7
 8009438:	080094b7 	.word	0x080094b7
 800943c:	080094b7 	.word	0x080094b7
 8009440:	080094b7 	.word	0x080094b7
 8009444:	080094b7 	.word	0x080094b7
 8009448:	080094b7 	.word	0x080094b7
 800944c:	08009465 	.word	0x08009465
 8009450:	08009479 	.word	0x08009479
 8009454:	4a75      	ldr	r2, [pc, #468]	; (800962c <HAL_GPIO_Init+0x2a4>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d013      	beq.n	8009482 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800945a:	e02c      	b.n	80094b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	623b      	str	r3, [r7, #32]
          break;
 8009462:	e029      	b.n	80094b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	3304      	adds	r3, #4
 800946a:	623b      	str	r3, [r7, #32]
          break;
 800946c:	e024      	b.n	80094b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	3308      	adds	r3, #8
 8009474:	623b      	str	r3, [r7, #32]
          break;
 8009476:	e01f      	b.n	80094b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	330c      	adds	r3, #12
 800947e:	623b      	str	r3, [r7, #32]
          break;
 8009480:	e01a      	b.n	80094b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d102      	bne.n	8009490 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800948a:	2304      	movs	r3, #4
 800948c:	623b      	str	r3, [r7, #32]
          break;
 800948e:	e013      	b.n	80094b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d105      	bne.n	80094a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009498:	2308      	movs	r3, #8
 800949a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	69fa      	ldr	r2, [r7, #28]
 80094a0:	611a      	str	r2, [r3, #16]
          break;
 80094a2:	e009      	b.n	80094b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80094a4:	2308      	movs	r3, #8
 80094a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	69fa      	ldr	r2, [r7, #28]
 80094ac:	615a      	str	r2, [r3, #20]
          break;
 80094ae:	e003      	b.n	80094b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80094b0:	2300      	movs	r3, #0
 80094b2:	623b      	str	r3, [r7, #32]
          break;
 80094b4:	e000      	b.n	80094b8 <HAL_GPIO_Init+0x130>
          break;
 80094b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	2bff      	cmp	r3, #255	; 0xff
 80094bc:	d801      	bhi.n	80094c2 <HAL_GPIO_Init+0x13a>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	e001      	b.n	80094c6 <HAL_GPIO_Init+0x13e>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	3304      	adds	r3, #4
 80094c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	2bff      	cmp	r3, #255	; 0xff
 80094cc:	d802      	bhi.n	80094d4 <HAL_GPIO_Init+0x14c>
 80094ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	e002      	b.n	80094da <HAL_GPIO_Init+0x152>
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	3b08      	subs	r3, #8
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	210f      	movs	r1, #15
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	fa01 f303 	lsl.w	r3, r1, r3
 80094e8:	43db      	mvns	r3, r3
 80094ea:	401a      	ands	r2, r3
 80094ec:	6a39      	ldr	r1, [r7, #32]
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	fa01 f303 	lsl.w	r3, r1, r3
 80094f4:	431a      	orrs	r2, r3
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 80c1 	beq.w	800968a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009508:	4b49      	ldr	r3, [pc, #292]	; (8009630 <HAL_GPIO_Init+0x2a8>)
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	4a48      	ldr	r2, [pc, #288]	; (8009630 <HAL_GPIO_Init+0x2a8>)
 800950e:	f043 0301 	orr.w	r3, r3, #1
 8009512:	6193      	str	r3, [r2, #24]
 8009514:	4b46      	ldr	r3, [pc, #280]	; (8009630 <HAL_GPIO_Init+0x2a8>)
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	60bb      	str	r3, [r7, #8]
 800951e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009520:	4a44      	ldr	r2, [pc, #272]	; (8009634 <HAL_GPIO_Init+0x2ac>)
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	089b      	lsrs	r3, r3, #2
 8009526:	3302      	adds	r3, #2
 8009528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800952c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	f003 0303 	and.w	r3, r3, #3
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	220f      	movs	r2, #15
 8009538:	fa02 f303 	lsl.w	r3, r2, r3
 800953c:	43db      	mvns	r3, r3
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	4013      	ands	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a3c      	ldr	r2, [pc, #240]	; (8009638 <HAL_GPIO_Init+0x2b0>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d01f      	beq.n	800958c <HAL_GPIO_Init+0x204>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a3b      	ldr	r2, [pc, #236]	; (800963c <HAL_GPIO_Init+0x2b4>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d019      	beq.n	8009588 <HAL_GPIO_Init+0x200>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a3a      	ldr	r2, [pc, #232]	; (8009640 <HAL_GPIO_Init+0x2b8>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d013      	beq.n	8009584 <HAL_GPIO_Init+0x1fc>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a39      	ldr	r2, [pc, #228]	; (8009644 <HAL_GPIO_Init+0x2bc>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d00d      	beq.n	8009580 <HAL_GPIO_Init+0x1f8>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a38      	ldr	r2, [pc, #224]	; (8009648 <HAL_GPIO_Init+0x2c0>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d007      	beq.n	800957c <HAL_GPIO_Init+0x1f4>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a37      	ldr	r2, [pc, #220]	; (800964c <HAL_GPIO_Init+0x2c4>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d101      	bne.n	8009578 <HAL_GPIO_Init+0x1f0>
 8009574:	2305      	movs	r3, #5
 8009576:	e00a      	b.n	800958e <HAL_GPIO_Init+0x206>
 8009578:	2306      	movs	r3, #6
 800957a:	e008      	b.n	800958e <HAL_GPIO_Init+0x206>
 800957c:	2304      	movs	r3, #4
 800957e:	e006      	b.n	800958e <HAL_GPIO_Init+0x206>
 8009580:	2303      	movs	r3, #3
 8009582:	e004      	b.n	800958e <HAL_GPIO_Init+0x206>
 8009584:	2302      	movs	r3, #2
 8009586:	e002      	b.n	800958e <HAL_GPIO_Init+0x206>
 8009588:	2301      	movs	r3, #1
 800958a:	e000      	b.n	800958e <HAL_GPIO_Init+0x206>
 800958c:	2300      	movs	r3, #0
 800958e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009590:	f002 0203 	and.w	r2, r2, #3
 8009594:	0092      	lsls	r2, r2, #2
 8009596:	4093      	lsls	r3, r2
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	4313      	orrs	r3, r2
 800959c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800959e:	4925      	ldr	r1, [pc, #148]	; (8009634 <HAL_GPIO_Init+0x2ac>)
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	089b      	lsrs	r3, r3, #2
 80095a4:	3302      	adds	r3, #2
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d006      	beq.n	80095c6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80095b8:	4b25      	ldr	r3, [pc, #148]	; (8009650 <HAL_GPIO_Init+0x2c8>)
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	4924      	ldr	r1, [pc, #144]	; (8009650 <HAL_GPIO_Init+0x2c8>)
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	608b      	str	r3, [r1, #8]
 80095c4:	e006      	b.n	80095d4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80095c6:	4b22      	ldr	r3, [pc, #136]	; (8009650 <HAL_GPIO_Init+0x2c8>)
 80095c8:	689a      	ldr	r2, [r3, #8]
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	43db      	mvns	r3, r3
 80095ce:	4920      	ldr	r1, [pc, #128]	; (8009650 <HAL_GPIO_Init+0x2c8>)
 80095d0:	4013      	ands	r3, r2
 80095d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d006      	beq.n	80095ee <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80095e0:	4b1b      	ldr	r3, [pc, #108]	; (8009650 <HAL_GPIO_Init+0x2c8>)
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	491a      	ldr	r1, [pc, #104]	; (8009650 <HAL_GPIO_Init+0x2c8>)
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	60cb      	str	r3, [r1, #12]
 80095ec:	e006      	b.n	80095fc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80095ee:	4b18      	ldr	r3, [pc, #96]	; (8009650 <HAL_GPIO_Init+0x2c8>)
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	43db      	mvns	r3, r3
 80095f6:	4916      	ldr	r1, [pc, #88]	; (8009650 <HAL_GPIO_Init+0x2c8>)
 80095f8:	4013      	ands	r3, r2
 80095fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d025      	beq.n	8009654 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009608:	4b11      	ldr	r3, [pc, #68]	; (8009650 <HAL_GPIO_Init+0x2c8>)
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	4910      	ldr	r1, [pc, #64]	; (8009650 <HAL_GPIO_Init+0x2c8>)
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	4313      	orrs	r3, r2
 8009612:	604b      	str	r3, [r1, #4]
 8009614:	e025      	b.n	8009662 <HAL_GPIO_Init+0x2da>
 8009616:	bf00      	nop
 8009618:	10320000 	.word	0x10320000
 800961c:	10310000 	.word	0x10310000
 8009620:	10220000 	.word	0x10220000
 8009624:	10210000 	.word	0x10210000
 8009628:	10120000 	.word	0x10120000
 800962c:	10110000 	.word	0x10110000
 8009630:	40021000 	.word	0x40021000
 8009634:	40010000 	.word	0x40010000
 8009638:	40010800 	.word	0x40010800
 800963c:	40010c00 	.word	0x40010c00
 8009640:	40011000 	.word	0x40011000
 8009644:	40011400 	.word	0x40011400
 8009648:	40011800 	.word	0x40011800
 800964c:	40011c00 	.word	0x40011c00
 8009650:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009654:	4b15      	ldr	r3, [pc, #84]	; (80096ac <HAL_GPIO_Init+0x324>)
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	43db      	mvns	r3, r3
 800965c:	4913      	ldr	r1, [pc, #76]	; (80096ac <HAL_GPIO_Init+0x324>)
 800965e:	4013      	ands	r3, r2
 8009660:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d006      	beq.n	800967c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800966e:	4b0f      	ldr	r3, [pc, #60]	; (80096ac <HAL_GPIO_Init+0x324>)
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	490e      	ldr	r1, [pc, #56]	; (80096ac <HAL_GPIO_Init+0x324>)
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	4313      	orrs	r3, r2
 8009678:	600b      	str	r3, [r1, #0]
 800967a:	e006      	b.n	800968a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800967c:	4b0b      	ldr	r3, [pc, #44]	; (80096ac <HAL_GPIO_Init+0x324>)
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	43db      	mvns	r3, r3
 8009684:	4909      	ldr	r1, [pc, #36]	; (80096ac <HAL_GPIO_Init+0x324>)
 8009686:	4013      	ands	r3, r2
 8009688:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968c:	3301      	adds	r3, #1
 800968e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	fa22 f303 	lsr.w	r3, r2, r3
 800969a:	2b00      	cmp	r3, #0
 800969c:	f47f ae7e 	bne.w	800939c <HAL_GPIO_Init+0x14>
  }
}
 80096a0:	bf00      	nop
 80096a2:	bf00      	nop
 80096a4:	372c      	adds	r7, #44	; 0x2c
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bc80      	pop	{r7}
 80096aa:	4770      	bx	lr
 80096ac:	40010400 	.word	0x40010400

080096b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b089      	sub	sp, #36	; 0x24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80096ba:	2300      	movs	r3, #0
 80096bc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80096be:	e0a6      	b.n	800980e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80096c0:	2201      	movs	r2, #1
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	fa02 f303 	lsl.w	r3, r2, r3
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	4013      	ands	r3, r2
 80096cc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 8099 	beq.w	8009808 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80096d6:	4a54      	ldr	r2, [pc, #336]	; (8009828 <HAL_GPIO_DeInit+0x178>)
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	089b      	lsrs	r3, r3, #2
 80096dc:	3302      	adds	r3, #2
 80096de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096e2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	f003 0303 	and.w	r3, r3, #3
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	220f      	movs	r2, #15
 80096ee:	fa02 f303 	lsl.w	r3, r2, r3
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	4013      	ands	r3, r2
 80096f6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a4c      	ldr	r2, [pc, #304]	; (800982c <HAL_GPIO_DeInit+0x17c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d01f      	beq.n	8009740 <HAL_GPIO_DeInit+0x90>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a4b      	ldr	r2, [pc, #300]	; (8009830 <HAL_GPIO_DeInit+0x180>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d019      	beq.n	800973c <HAL_GPIO_DeInit+0x8c>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a4a      	ldr	r2, [pc, #296]	; (8009834 <HAL_GPIO_DeInit+0x184>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d013      	beq.n	8009738 <HAL_GPIO_DeInit+0x88>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a49      	ldr	r2, [pc, #292]	; (8009838 <HAL_GPIO_DeInit+0x188>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d00d      	beq.n	8009734 <HAL_GPIO_DeInit+0x84>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a48      	ldr	r2, [pc, #288]	; (800983c <HAL_GPIO_DeInit+0x18c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d007      	beq.n	8009730 <HAL_GPIO_DeInit+0x80>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a47      	ldr	r2, [pc, #284]	; (8009840 <HAL_GPIO_DeInit+0x190>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d101      	bne.n	800972c <HAL_GPIO_DeInit+0x7c>
 8009728:	2305      	movs	r3, #5
 800972a:	e00a      	b.n	8009742 <HAL_GPIO_DeInit+0x92>
 800972c:	2306      	movs	r3, #6
 800972e:	e008      	b.n	8009742 <HAL_GPIO_DeInit+0x92>
 8009730:	2304      	movs	r3, #4
 8009732:	e006      	b.n	8009742 <HAL_GPIO_DeInit+0x92>
 8009734:	2303      	movs	r3, #3
 8009736:	e004      	b.n	8009742 <HAL_GPIO_DeInit+0x92>
 8009738:	2302      	movs	r3, #2
 800973a:	e002      	b.n	8009742 <HAL_GPIO_DeInit+0x92>
 800973c:	2301      	movs	r3, #1
 800973e:	e000      	b.n	8009742 <HAL_GPIO_DeInit+0x92>
 8009740:	2300      	movs	r3, #0
 8009742:	69fa      	ldr	r2, [r7, #28]
 8009744:	f002 0203 	and.w	r2, r2, #3
 8009748:	0092      	lsls	r2, r2, #2
 800974a:	4093      	lsls	r3, r2
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	429a      	cmp	r2, r3
 8009750:	d132      	bne.n	80097b8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009752:	4b3c      	ldr	r3, [pc, #240]	; (8009844 <HAL_GPIO_DeInit+0x194>)
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	43db      	mvns	r3, r3
 800975a:	493a      	ldr	r1, [pc, #232]	; (8009844 <HAL_GPIO_DeInit+0x194>)
 800975c:	4013      	ands	r3, r2
 800975e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009760:	4b38      	ldr	r3, [pc, #224]	; (8009844 <HAL_GPIO_DeInit+0x194>)
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	43db      	mvns	r3, r3
 8009768:	4936      	ldr	r1, [pc, #216]	; (8009844 <HAL_GPIO_DeInit+0x194>)
 800976a:	4013      	ands	r3, r2
 800976c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800976e:	4b35      	ldr	r3, [pc, #212]	; (8009844 <HAL_GPIO_DeInit+0x194>)
 8009770:	68da      	ldr	r2, [r3, #12]
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	43db      	mvns	r3, r3
 8009776:	4933      	ldr	r1, [pc, #204]	; (8009844 <HAL_GPIO_DeInit+0x194>)
 8009778:	4013      	ands	r3, r2
 800977a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800977c:	4b31      	ldr	r3, [pc, #196]	; (8009844 <HAL_GPIO_DeInit+0x194>)
 800977e:	689a      	ldr	r2, [r3, #8]
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	43db      	mvns	r3, r3
 8009784:	492f      	ldr	r1, [pc, #188]	; (8009844 <HAL_GPIO_DeInit+0x194>)
 8009786:	4013      	ands	r3, r2
 8009788:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	f003 0303 	and.w	r3, r3, #3
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	220f      	movs	r2, #15
 8009794:	fa02 f303 	lsl.w	r3, r2, r3
 8009798:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800979a:	4a23      	ldr	r2, [pc, #140]	; (8009828 <HAL_GPIO_DeInit+0x178>)
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	089b      	lsrs	r3, r3, #2
 80097a0:	3302      	adds	r3, #2
 80097a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	43da      	mvns	r2, r3
 80097aa:	481f      	ldr	r0, [pc, #124]	; (8009828 <HAL_GPIO_DeInit+0x178>)
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	089b      	lsrs	r3, r3, #2
 80097b0:	400a      	ands	r2, r1
 80097b2:	3302      	adds	r3, #2
 80097b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	2bff      	cmp	r3, #255	; 0xff
 80097bc:	d801      	bhi.n	80097c2 <HAL_GPIO_DeInit+0x112>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	e001      	b.n	80097c6 <HAL_GPIO_DeInit+0x116>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	3304      	adds	r3, #4
 80097c6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	2bff      	cmp	r3, #255	; 0xff
 80097cc:	d802      	bhi.n	80097d4 <HAL_GPIO_DeInit+0x124>
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	e002      	b.n	80097da <HAL_GPIO_DeInit+0x12a>
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	3b08      	subs	r3, #8
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	210f      	movs	r1, #15
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	fa01 f303 	lsl.w	r3, r1, r3
 80097e8:	43db      	mvns	r3, r3
 80097ea:	401a      	ands	r2, r3
 80097ec:	2104      	movs	r1, #4
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	fa01 f303 	lsl.w	r3, r1, r3
 80097f4:	431a      	orrs	r2, r3
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68da      	ldr	r2, [r3, #12]
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	43db      	mvns	r3, r3
 8009802:	401a      	ands	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	3301      	adds	r3, #1
 800980c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	fa22 f303 	lsr.w	r3, r2, r3
 8009816:	2b00      	cmp	r3, #0
 8009818:	f47f af52 	bne.w	80096c0 <HAL_GPIO_DeInit+0x10>
  }
}
 800981c:	bf00      	nop
 800981e:	bf00      	nop
 8009820:	3724      	adds	r7, #36	; 0x24
 8009822:	46bd      	mov	sp, r7
 8009824:	bc80      	pop	{r7}
 8009826:	4770      	bx	lr
 8009828:	40010000 	.word	0x40010000
 800982c:	40010800 	.word	0x40010800
 8009830:	40010c00 	.word	0x40010c00
 8009834:	40011000 	.word	0x40011000
 8009838:	40011400 	.word	0x40011400
 800983c:	40011800 	.word	0x40011800
 8009840:	40011c00 	.word	0x40011c00
 8009844:	40010400 	.word	0x40010400

08009848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689a      	ldr	r2, [r3, #8]
 8009858:	887b      	ldrh	r3, [r7, #2]
 800985a:	4013      	ands	r3, r2
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009860:	2301      	movs	r3, #1
 8009862:	73fb      	strb	r3, [r7, #15]
 8009864:	e001      	b.n	800986a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800986a:	7bfb      	ldrb	r3, [r7, #15]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3714      	adds	r7, #20
 8009870:	46bd      	mov	sp, r7
 8009872:	bc80      	pop	{r7}
 8009874:	4770      	bx	lr

08009876 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	807b      	strh	r3, [r7, #2]
 8009882:	4613      	mov	r3, r2
 8009884:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009886:	787b      	ldrb	r3, [r7, #1]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800988c:	887a      	ldrh	r2, [r7, #2]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009892:	e003      	b.n	800989c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009894:	887b      	ldrh	r3, [r7, #2]
 8009896:	041a      	lsls	r2, r3, #16
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	611a      	str	r2, [r3, #16]
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bc80      	pop	{r7}
 80098a4:	4770      	bx	lr

080098a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b085      	sub	sp, #20
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	460b      	mov	r3, r1
 80098b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80098b8:	887a      	ldrh	r2, [r7, #2]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	4013      	ands	r3, r2
 80098be:	041a      	lsls	r2, r3, #16
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	43d9      	mvns	r1, r3
 80098c4:	887b      	ldrh	r3, [r7, #2]
 80098c6:	400b      	ands	r3, r1
 80098c8:	431a      	orrs	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	611a      	str	r2, [r3, #16]
}
 80098ce:	bf00      	nop
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bc80      	pop	{r7}
 80098d6:	4770      	bx	lr

080098d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d101      	bne.n	80098ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e12b      	b.n	8009b42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d106      	bne.n	8009904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7fe fff8 	bl	80088f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2224      	movs	r2, #36	; 0x24
 8009908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f022 0201 	bic.w	r2, r2, #1
 800991a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800992a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800993a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800993c:	f001 fdb8 	bl	800b4b0 <HAL_RCC_GetPCLK1Freq>
 8009940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	4a81      	ldr	r2, [pc, #516]	; (8009b4c <HAL_I2C_Init+0x274>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d807      	bhi.n	800995c <HAL_I2C_Init+0x84>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	4a80      	ldr	r2, [pc, #512]	; (8009b50 <HAL_I2C_Init+0x278>)
 8009950:	4293      	cmp	r3, r2
 8009952:	bf94      	ite	ls
 8009954:	2301      	movls	r3, #1
 8009956:	2300      	movhi	r3, #0
 8009958:	b2db      	uxtb	r3, r3
 800995a:	e006      	b.n	800996a <HAL_I2C_Init+0x92>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4a7d      	ldr	r2, [pc, #500]	; (8009b54 <HAL_I2C_Init+0x27c>)
 8009960:	4293      	cmp	r3, r2
 8009962:	bf94      	ite	ls
 8009964:	2301      	movls	r3, #1
 8009966:	2300      	movhi	r3, #0
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e0e7      	b.n	8009b42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	4a78      	ldr	r2, [pc, #480]	; (8009b58 <HAL_I2C_Init+0x280>)
 8009976:	fba2 2303 	umull	r2, r3, r2, r3
 800997a:	0c9b      	lsrs	r3, r3, #18
 800997c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	430a      	orrs	r2, r1
 8009990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6a1b      	ldr	r3, [r3, #32]
 8009998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	4a6a      	ldr	r2, [pc, #424]	; (8009b4c <HAL_I2C_Init+0x274>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d802      	bhi.n	80099ac <HAL_I2C_Init+0xd4>
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	3301      	adds	r3, #1
 80099aa:	e009      	b.n	80099c0 <HAL_I2C_Init+0xe8>
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80099b2:	fb02 f303 	mul.w	r3, r2, r3
 80099b6:	4a69      	ldr	r2, [pc, #420]	; (8009b5c <HAL_I2C_Init+0x284>)
 80099b8:	fba2 2303 	umull	r2, r3, r2, r3
 80099bc:	099b      	lsrs	r3, r3, #6
 80099be:	3301      	adds	r3, #1
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	6812      	ldr	r2, [r2, #0]
 80099c4:	430b      	orrs	r3, r1
 80099c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80099d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	495c      	ldr	r1, [pc, #368]	; (8009b4c <HAL_I2C_Init+0x274>)
 80099dc:	428b      	cmp	r3, r1
 80099de:	d819      	bhi.n	8009a14 <HAL_I2C_Init+0x13c>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	1e59      	subs	r1, r3, #1
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80099ee:	1c59      	adds	r1, r3, #1
 80099f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80099f4:	400b      	ands	r3, r1
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00a      	beq.n	8009a10 <HAL_I2C_Init+0x138>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	1e59      	subs	r1, r3, #1
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a08:	3301      	adds	r3, #1
 8009a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a0e:	e051      	b.n	8009ab4 <HAL_I2C_Init+0x1dc>
 8009a10:	2304      	movs	r3, #4
 8009a12:	e04f      	b.n	8009ab4 <HAL_I2C_Init+0x1dc>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d111      	bne.n	8009a40 <HAL_I2C_Init+0x168>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	1e58      	subs	r0, r3, #1
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6859      	ldr	r1, [r3, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	440b      	add	r3, r1
 8009a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a2e:	3301      	adds	r3, #1
 8009a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	bf0c      	ite	eq
 8009a38:	2301      	moveq	r3, #1
 8009a3a:	2300      	movne	r3, #0
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	e012      	b.n	8009a66 <HAL_I2C_Init+0x18e>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	1e58      	subs	r0, r3, #1
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6859      	ldr	r1, [r3, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	440b      	add	r3, r1
 8009a4e:	0099      	lsls	r1, r3, #2
 8009a50:	440b      	add	r3, r1
 8009a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a56:	3301      	adds	r3, #1
 8009a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	bf0c      	ite	eq
 8009a60:	2301      	moveq	r3, #1
 8009a62:	2300      	movne	r3, #0
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <HAL_I2C_Init+0x196>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e022      	b.n	8009ab4 <HAL_I2C_Init+0x1dc>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10e      	bne.n	8009a94 <HAL_I2C_Init+0x1bc>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	1e58      	subs	r0, r3, #1
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6859      	ldr	r1, [r3, #4]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	440b      	add	r3, r1
 8009a84:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a88:	3301      	adds	r3, #1
 8009a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a92:	e00f      	b.n	8009ab4 <HAL_I2C_Init+0x1dc>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	1e58      	subs	r0, r3, #1
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6859      	ldr	r1, [r3, #4]
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	440b      	add	r3, r1
 8009aa2:	0099      	lsls	r1, r3, #2
 8009aa4:	440b      	add	r3, r1
 8009aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009aaa:	3301      	adds	r3, #1
 8009aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ab0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ab4:	6879      	ldr	r1, [r7, #4]
 8009ab6:	6809      	ldr	r1, [r1, #0]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	69da      	ldr	r2, [r3, #28]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	431a      	orrs	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	430a      	orrs	r2, r1
 8009ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009ae2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	6911      	ldr	r1, [r2, #16]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	68d2      	ldr	r2, [r2, #12]
 8009aee:	4311      	orrs	r1, r2
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	6812      	ldr	r2, [r2, #0]
 8009af4:	430b      	orrs	r3, r1
 8009af6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	695a      	ldr	r2, [r3, #20]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	431a      	orrs	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	430a      	orrs	r2, r1
 8009b12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f042 0201 	orr.w	r2, r2, #1
 8009b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	000186a0 	.word	0x000186a0
 8009b50:	001e847f 	.word	0x001e847f
 8009b54:	003d08ff 	.word	0x003d08ff
 8009b58:	431bde83 	.word	0x431bde83
 8009b5c:	10624dd3 	.word	0x10624dd3

08009b60 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d101      	bne.n	8009b72 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e021      	b.n	8009bb6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2224      	movs	r2, #36	; 0x24
 8009b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f022 0201 	bic.w	r2, r2, #1
 8009b88:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7fe fef0 	bl	8008970 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
	...

08009bc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b088      	sub	sp, #32
 8009bc4:	af02      	add	r7, sp, #8
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	607a      	str	r2, [r7, #4]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	460b      	mov	r3, r1
 8009bce:	817b      	strh	r3, [r7, #10]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009bd4:	f7ff f85e 	bl	8008c94 <HAL_GetTick>
 8009bd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b20      	cmp	r3, #32
 8009be4:	f040 80e0 	bne.w	8009da8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	2319      	movs	r3, #25
 8009bee:	2201      	movs	r2, #1
 8009bf0:	4970      	ldr	r1, [pc, #448]	; (8009db4 <HAL_I2C_Master_Transmit+0x1f4>)
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f000 fe5c 	bl	800a8b0 <I2C_WaitOnFlagUntilTimeout>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009bfe:	2302      	movs	r3, #2
 8009c00:	e0d3      	b.n	8009daa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d101      	bne.n	8009c10 <HAL_I2C_Master_Transmit+0x50>
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	e0cc      	b.n	8009daa <HAL_I2C_Master_Transmit+0x1ea>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d007      	beq.n	8009c36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f042 0201 	orr.w	r2, r2, #1
 8009c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2221      	movs	r2, #33	; 0x21
 8009c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2210      	movs	r2, #16
 8009c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	893a      	ldrh	r2, [r7, #8]
 8009c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4a50      	ldr	r2, [pc, #320]	; (8009db8 <HAL_I2C_Master_Transmit+0x1f8>)
 8009c76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009c78:	8979      	ldrh	r1, [r7, #10]
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	6a3a      	ldr	r2, [r7, #32]
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 fc16 	bl	800a4b0 <I2C_MasterRequestWrite>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e08d      	b.n	8009daa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c8e:	2300      	movs	r3, #0
 8009c90:	613b      	str	r3, [r7, #16]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	695b      	ldr	r3, [r3, #20]
 8009c98:	613b      	str	r3, [r7, #16]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	613b      	str	r3, [r7, #16]
 8009ca2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009ca4:	e066      	b.n	8009d74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	6a39      	ldr	r1, [r7, #32]
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f000 ff1a 	bl	800aae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00d      	beq.n	8009cd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cba:	2b04      	cmp	r3, #4
 8009cbc:	d107      	bne.n	8009cce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ccc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e06b      	b.n	8009daa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd6:	781a      	ldrb	r2, [r3, #0]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	f003 0304 	and.w	r3, r3, #4
 8009d0c:	2b04      	cmp	r3, #4
 8009d0e:	d11b      	bne.n	8009d48 <HAL_I2C_Master_Transmit+0x188>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d017      	beq.n	8009d48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1c:	781a      	ldrb	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	3b01      	subs	r3, #1
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d40:	3b01      	subs	r3, #1
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d48:	697a      	ldr	r2, [r7, #20]
 8009d4a:	6a39      	ldr	r1, [r7, #32]
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 ff11 	bl	800ab74 <I2C_WaitOnBTFFlagUntilTimeout>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00d      	beq.n	8009d74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5c:	2b04      	cmp	r3, #4
 8009d5e:	d107      	bne.n	8009d70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e01a      	b.n	8009daa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d194      	bne.n	8009ca6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2220      	movs	r2, #32
 8009d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	e000      	b.n	8009daa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009da8:	2302      	movs	r3, #2
  }
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3718      	adds	r7, #24
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	00100002 	.word	0x00100002
 8009db8:	ffff0000 	.word	0xffff0000

08009dbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b088      	sub	sp, #32
 8009dc0:	af02      	add	r7, sp, #8
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	4608      	mov	r0, r1
 8009dc6:	4611      	mov	r1, r2
 8009dc8:	461a      	mov	r2, r3
 8009dca:	4603      	mov	r3, r0
 8009dcc:	817b      	strh	r3, [r7, #10]
 8009dce:	460b      	mov	r3, r1
 8009dd0:	813b      	strh	r3, [r7, #8]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009dd6:	f7fe ff5d 	bl	8008c94 <HAL_GetTick>
 8009dda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	2b20      	cmp	r3, #32
 8009de6:	f040 80d9 	bne.w	8009f9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	2319      	movs	r3, #25
 8009df0:	2201      	movs	r2, #1
 8009df2:	496d      	ldr	r1, [pc, #436]	; (8009fa8 <HAL_I2C_Mem_Write+0x1ec>)
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f000 fd5b 	bl	800a8b0 <I2C_WaitOnFlagUntilTimeout>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009e00:	2302      	movs	r3, #2
 8009e02:	e0cc      	b.n	8009f9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d101      	bne.n	8009e12 <HAL_I2C_Mem_Write+0x56>
 8009e0e:	2302      	movs	r3, #2
 8009e10:	e0c5      	b.n	8009f9e <HAL_I2C_Mem_Write+0x1e2>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0301 	and.w	r3, r3, #1
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d007      	beq.n	8009e38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f042 0201 	orr.w	r2, r2, #1
 8009e36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2221      	movs	r2, #33	; 0x21
 8009e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2240      	movs	r2, #64	; 0x40
 8009e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6a3a      	ldr	r2, [r7, #32]
 8009e62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	4a4d      	ldr	r2, [pc, #308]	; (8009fac <HAL_I2C_Mem_Write+0x1f0>)
 8009e78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e7a:	88f8      	ldrh	r0, [r7, #6]
 8009e7c:	893a      	ldrh	r2, [r7, #8]
 8009e7e:	8979      	ldrh	r1, [r7, #10]
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	9301      	str	r3, [sp, #4]
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	4603      	mov	r3, r0
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f000 fb92 	bl	800a5b4 <I2C_RequestMemoryWrite>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d052      	beq.n	8009f3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e081      	b.n	8009f9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f000 fe20 	bl	800aae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00d      	beq.n	8009ec6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eae:	2b04      	cmp	r3, #4
 8009eb0:	d107      	bne.n	8009ec2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ec0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e06b      	b.n	8009f9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eca:	781a      	ldrb	r2, [r3, #0]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed6:	1c5a      	adds	r2, r3, #1
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b04      	cmp	r3, #4
 8009f02:	d11b      	bne.n	8009f3c <HAL_I2C_Mem_Write+0x180>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d017      	beq.n	8009f3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f10:	781a      	ldrb	r2, [r3, #0]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1c:	1c5a      	adds	r2, r3, #1
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f26:	3b01      	subs	r3, #1
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	3b01      	subs	r3, #1
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1aa      	bne.n	8009e9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f000 fe13 	bl	800ab74 <I2C_WaitOnBTFFlagUntilTimeout>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00d      	beq.n	8009f70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f58:	2b04      	cmp	r3, #4
 8009f5a:	d107      	bne.n	8009f6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e016      	b.n	8009f9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2220      	movs	r2, #32
 8009f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	e000      	b.n	8009f9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009f9c:	2302      	movs	r3, #2
  }
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	00100002 	.word	0x00100002
 8009fac:	ffff0000 	.word	0xffff0000

08009fb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08c      	sub	sp, #48	; 0x30
 8009fb4:	af02      	add	r7, sp, #8
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	4608      	mov	r0, r1
 8009fba:	4611      	mov	r1, r2
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	817b      	strh	r3, [r7, #10]
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	813b      	strh	r3, [r7, #8]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009fce:	f7fe fe61 	bl	8008c94 <HAL_GetTick>
 8009fd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b20      	cmp	r3, #32
 8009fde:	f040 8244 	bne.w	800a46a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	2319      	movs	r3, #25
 8009fe8:	2201      	movs	r2, #1
 8009fea:	4982      	ldr	r1, [pc, #520]	; (800a1f4 <HAL_I2C_Mem_Read+0x244>)
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f000 fc5f 	bl	800a8b0 <I2C_WaitOnFlagUntilTimeout>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d001      	beq.n	8009ffc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	e237      	b.n	800a46c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a002:	2b01      	cmp	r3, #1
 800a004:	d101      	bne.n	800a00a <HAL_I2C_Mem_Read+0x5a>
 800a006:	2302      	movs	r3, #2
 800a008:	e230      	b.n	800a46c <HAL_I2C_Mem_Read+0x4bc>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f003 0301 	and.w	r3, r3, #1
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d007      	beq.n	800a030 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f042 0201 	orr.w	r2, r2, #1
 800a02e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a03e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2222      	movs	r2, #34	; 0x22
 800a044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2240      	movs	r2, #64	; 0x40
 800a04c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a05a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a060:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a066:	b29a      	uxth	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4a62      	ldr	r2, [pc, #392]	; (800a1f8 <HAL_I2C_Mem_Read+0x248>)
 800a070:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a072:	88f8      	ldrh	r0, [r7, #6]
 800a074:	893a      	ldrh	r2, [r7, #8]
 800a076:	8979      	ldrh	r1, [r7, #10]
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	9301      	str	r3, [sp, #4]
 800a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	4603      	mov	r3, r0
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f000 fb2c 	bl	800a6e0 <I2C_RequestMemoryRead>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e1ec      	b.n	800a46c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a096:	2b00      	cmp	r3, #0
 800a098:	d113      	bne.n	800a0c2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a09a:	2300      	movs	r3, #0
 800a09c:	61fb      	str	r3, [r7, #28]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	695b      	ldr	r3, [r3, #20]
 800a0a4:	61fb      	str	r3, [r7, #28]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	61fb      	str	r3, [r7, #28]
 800a0ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	e1c0      	b.n	800a444 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d11e      	bne.n	800a108 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0da:	b672      	cpsid	i
}
 800a0dc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0de:	2300      	movs	r3, #0
 800a0e0:	61bb      	str	r3, [r7, #24]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	61bb      	str	r3, [r7, #24]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	61bb      	str	r3, [r7, #24]
 800a0f2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a102:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a104:	b662      	cpsie	i
}
 800a106:	e035      	b.n	800a174 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d11e      	bne.n	800a14e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a11e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a120:	b672      	cpsid	i
}
 800a122:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a124:	2300      	movs	r3, #0
 800a126:	617b      	str	r3, [r7, #20]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	617b      	str	r3, [r7, #20]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	617b      	str	r3, [r7, #20]
 800a138:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a148:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a14a:	b662      	cpsie	i
}
 800a14c:	e012      	b.n	800a174 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a15c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a15e:	2300      	movs	r3, #0
 800a160:	613b      	str	r3, [r7, #16]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	613b      	str	r3, [r7, #16]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	613b      	str	r3, [r7, #16]
 800a172:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a174:	e166      	b.n	800a444 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	f200 811f 	bhi.w	800a3be <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a184:	2b01      	cmp	r3, #1
 800a186:	d123      	bne.n	800a1d0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a18a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 fd39 	bl	800ac04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e167      	b.n	800a46c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	691a      	ldr	r2, [r3, #16]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	b2d2      	uxtb	r2, r2
 800a1a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a1ce:	e139      	b.n	800a444 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d152      	bne.n	800a27e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1de:	2200      	movs	r2, #0
 800a1e0:	4906      	ldr	r1, [pc, #24]	; (800a1fc <HAL_I2C_Mem_Read+0x24c>)
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 fb64 	bl	800a8b0 <I2C_WaitOnFlagUntilTimeout>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d008      	beq.n	800a200 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e13c      	b.n	800a46c <HAL_I2C_Mem_Read+0x4bc>
 800a1f2:	bf00      	nop
 800a1f4:	00100002 	.word	0x00100002
 800a1f8:	ffff0000 	.word	0xffff0000
 800a1fc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a200:	b672      	cpsid	i
}
 800a202:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a212:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	691a      	ldr	r2, [r3, #16]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21e:	b2d2      	uxtb	r2, r2
 800a220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	1c5a      	adds	r2, r3, #1
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a230:	3b01      	subs	r3, #1
 800a232:	b29a      	uxth	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	3b01      	subs	r3, #1
 800a240:	b29a      	uxth	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a246:	b662      	cpsie	i
}
 800a248:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	691a      	ldr	r2, [r3, #16]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a254:	b2d2      	uxtb	r2, r2
 800a256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25c:	1c5a      	adds	r2, r3, #1
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a266:	3b01      	subs	r3, #1
 800a268:	b29a      	uxth	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a272:	b29b      	uxth	r3, r3
 800a274:	3b01      	subs	r3, #1
 800a276:	b29a      	uxth	r2, r3
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a27c:	e0e2      	b.n	800a444 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a284:	2200      	movs	r2, #0
 800a286:	497b      	ldr	r1, [pc, #492]	; (800a474 <HAL_I2C_Mem_Read+0x4c4>)
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 fb11 	bl	800a8b0 <I2C_WaitOnFlagUntilTimeout>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d001      	beq.n	800a298 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e0e9      	b.n	800a46c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2a8:	b672      	cpsid	i
}
 800a2aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	691a      	ldr	r2, [r3, #16]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	b2d2      	uxtb	r2, r2
 800a2b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a2de:	4b66      	ldr	r3, [pc, #408]	; (800a478 <HAL_I2C_Mem_Read+0x4c8>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	08db      	lsrs	r3, r3, #3
 800a2e4:	4a65      	ldr	r2, [pc, #404]	; (800a47c <HAL_I2C_Mem_Read+0x4cc>)
 800a2e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ea:	0a1a      	lsrs	r2, r3, #8
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	00da      	lsls	r2, r3, #3
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d118      	bne.n	800a336 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2220      	movs	r2, #32
 800a30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31e:	f043 0220 	orr.w	r2, r3, #32
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a326:	b662      	cpsie	i
}
 800a328:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e09a      	b.n	800a46c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b04      	cmp	r3, #4
 800a342:	d1d9      	bne.n	800a2f8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	691a      	ldr	r2, [r3, #16]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	b2d2      	uxtb	r2, r2
 800a360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a366:	1c5a      	adds	r2, r3, #1
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a370:	3b01      	subs	r3, #1
 800a372:	b29a      	uxth	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	3b01      	subs	r3, #1
 800a380:	b29a      	uxth	r2, r3
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a386:	b662      	cpsie	i
}
 800a388:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	691a      	ldr	r2, [r3, #16]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a394:	b2d2      	uxtb	r2, r2
 800a396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	1c5a      	adds	r2, r3, #1
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a3bc:	e042      	b.n	800a444 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f000 fc1e 	bl	800ac04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e04c      	b.n	800a46c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	691a      	ldr	r2, [r3, #16]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	b2d2      	uxtb	r2, r2
 800a3de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	1c5a      	adds	r2, r3, #1
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	f003 0304 	and.w	r3, r3, #4
 800a40e:	2b04      	cmp	r3, #4
 800a410:	d118      	bne.n	800a444 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	691a      	ldr	r2, [r3, #16]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41c:	b2d2      	uxtb	r2, r2
 800a41e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a424:	1c5a      	adds	r2, r3, #1
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a42e:	3b01      	subs	r3, #1
 800a430:	b29a      	uxth	r2, r3
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	3b01      	subs	r3, #1
 800a43e:	b29a      	uxth	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f47f ae94 	bne.w	800a176 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2220      	movs	r2, #32
 800a452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	e000      	b.n	800a46c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a46a:	2302      	movs	r3, #2
  }
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3728      	adds	r7, #40	; 0x28
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	00010004 	.word	0x00010004
 800a478:	2000094c 	.word	0x2000094c
 800a47c:	14f8b589 	.word	0x14f8b589

0800a480 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a48e:	b2db      	uxtb	r3, r3
}
 800a490:	4618      	mov	r0, r3
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	bc80      	pop	{r7}
 800a498:	4770      	bx	lr

0800a49a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b083      	sub	sp, #12
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bc80      	pop	{r7}
 800a4ae:	4770      	bx	lr

0800a4b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b088      	sub	sp, #32
 800a4b4:	af02      	add	r7, sp, #8
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	607a      	str	r2, [r7, #4]
 800a4ba:	603b      	str	r3, [r7, #0]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	2b08      	cmp	r3, #8
 800a4ca:	d006      	beq.n	800a4da <I2C_MasterRequestWrite+0x2a>
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d003      	beq.n	800a4da <I2C_MasterRequestWrite+0x2a>
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a4d8:	d108      	bne.n	800a4ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	e00b      	b.n	800a504 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f0:	2b12      	cmp	r3, #18
 800a4f2:	d107      	bne.n	800a504 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f000 f9cd 	bl	800a8b0 <I2C_WaitOnFlagUntilTimeout>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00d      	beq.n	800a538 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a52a:	d103      	bne.n	800a534 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a534:	2303      	movs	r3, #3
 800a536:	e035      	b.n	800a5a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a540:	d108      	bne.n	800a554 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a542:	897b      	ldrh	r3, [r7, #10]
 800a544:	b2db      	uxtb	r3, r3
 800a546:	461a      	mov	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a550:	611a      	str	r2, [r3, #16]
 800a552:	e01b      	b.n	800a58c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a554:	897b      	ldrh	r3, [r7, #10]
 800a556:	11db      	asrs	r3, r3, #7
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	f003 0306 	and.w	r3, r3, #6
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	f063 030f 	orn	r3, r3, #15
 800a564:	b2da      	uxtb	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	490e      	ldr	r1, [pc, #56]	; (800a5ac <I2C_MasterRequestWrite+0xfc>)
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 fa16 	bl	800a9a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	e010      	b.n	800a5a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a582:	897b      	ldrh	r3, [r7, #10]
 800a584:	b2da      	uxtb	r2, r3
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	4907      	ldr	r1, [pc, #28]	; (800a5b0 <I2C_MasterRequestWrite+0x100>)
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f000 fa06 	bl	800a9a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e000      	b.n	800a5a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	00010008 	.word	0x00010008
 800a5b0:	00010002 	.word	0x00010002

0800a5b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b088      	sub	sp, #32
 800a5b8:	af02      	add	r7, sp, #8
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	4608      	mov	r0, r1
 800a5be:	4611      	mov	r1, r2
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	817b      	strh	r3, [r7, #10]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	813b      	strh	r3, [r7, #8]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a5dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f000 f960 	bl	800a8b0 <I2C_WaitOnFlagUntilTimeout>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00d      	beq.n	800a612 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a604:	d103      	bne.n	800a60e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a60c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a60e:	2303      	movs	r3, #3
 800a610:	e05f      	b.n	800a6d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a612:	897b      	ldrh	r3, [r7, #10]
 800a614:	b2db      	uxtb	r3, r3
 800a616:	461a      	mov	r2, r3
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a620:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a624:	6a3a      	ldr	r2, [r7, #32]
 800a626:	492d      	ldr	r1, [pc, #180]	; (800a6dc <I2C_RequestMemoryWrite+0x128>)
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f000 f9bb 	bl	800a9a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e04c      	b.n	800a6d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a638:	2300      	movs	r3, #0
 800a63a:	617b      	str	r3, [r7, #20]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	617b      	str	r3, [r7, #20]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	617b      	str	r3, [r7, #20]
 800a64c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a64e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a650:	6a39      	ldr	r1, [r7, #32]
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 fa46 	bl	800aae4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00d      	beq.n	800a67a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a662:	2b04      	cmp	r3, #4
 800a664:	d107      	bne.n	800a676 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a674:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e02b      	b.n	800a6d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a67a:	88fb      	ldrh	r3, [r7, #6]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d105      	bne.n	800a68c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a680:	893b      	ldrh	r3, [r7, #8]
 800a682:	b2da      	uxtb	r2, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	611a      	str	r2, [r3, #16]
 800a68a:	e021      	b.n	800a6d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a68c:	893b      	ldrh	r3, [r7, #8]
 800a68e:	0a1b      	lsrs	r3, r3, #8
 800a690:	b29b      	uxth	r3, r3
 800a692:	b2da      	uxtb	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a69a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a69c:	6a39      	ldr	r1, [r7, #32]
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f000 fa20 	bl	800aae4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00d      	beq.n	800a6c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d107      	bne.n	800a6c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e005      	b.n	800a6d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a6c6:	893b      	ldrh	r3, [r7, #8]
 800a6c8:	b2da      	uxtb	r2, r3
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3718      	adds	r7, #24
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	00010002 	.word	0x00010002

0800a6e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b088      	sub	sp, #32
 800a6e4:	af02      	add	r7, sp, #8
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	4608      	mov	r0, r1
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	817b      	strh	r3, [r7, #10]
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	813b      	strh	r3, [r7, #8]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a708:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a718:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	6a3b      	ldr	r3, [r7, #32]
 800a720:	2200      	movs	r2, #0
 800a722:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 f8c2 	bl	800a8b0 <I2C_WaitOnFlagUntilTimeout>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00d      	beq.n	800a74e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a73c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a740:	d103      	bne.n	800a74a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a748:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e0aa      	b.n	800a8a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a74e:	897b      	ldrh	r3, [r7, #10]
 800a750:	b2db      	uxtb	r3, r3
 800a752:	461a      	mov	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a75c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	6a3a      	ldr	r2, [r7, #32]
 800a762:	4952      	ldr	r1, [pc, #328]	; (800a8ac <I2C_RequestMemoryRead+0x1cc>)
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f000 f91d 	bl	800a9a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d001      	beq.n	800a774 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e097      	b.n	800a8a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a774:	2300      	movs	r3, #0
 800a776:	617b      	str	r3, [r7, #20]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	617b      	str	r3, [r7, #20]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	617b      	str	r3, [r7, #20]
 800a788:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a78a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a78c:	6a39      	ldr	r1, [r7, #32]
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f000 f9a8 	bl	800aae4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00d      	beq.n	800a7b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79e:	2b04      	cmp	r3, #4
 800a7a0:	d107      	bne.n	800a7b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e076      	b.n	800a8a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a7b6:	88fb      	ldrh	r3, [r7, #6]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d105      	bne.n	800a7c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a7bc:	893b      	ldrh	r3, [r7, #8]
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	611a      	str	r2, [r3, #16]
 800a7c6:	e021      	b.n	800a80c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a7c8:	893b      	ldrh	r3, [r7, #8]
 800a7ca:	0a1b      	lsrs	r3, r3, #8
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7d8:	6a39      	ldr	r1, [r7, #32]
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f000 f982 	bl	800aae4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00d      	beq.n	800a802 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ea:	2b04      	cmp	r3, #4
 800a7ec:	d107      	bne.n	800a7fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e050      	b.n	800a8a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a802:	893b      	ldrh	r3, [r7, #8]
 800a804:	b2da      	uxtb	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a80e:	6a39      	ldr	r1, [r7, #32]
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f000 f967 	bl	800aae4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00d      	beq.n	800a838 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a820:	2b04      	cmp	r3, #4
 800a822:	d107      	bne.n	800a834 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a832:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e035      	b.n	800a8a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a846:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	2200      	movs	r2, #0
 800a850:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f000 f82b 	bl	800a8b0 <I2C_WaitOnFlagUntilTimeout>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00d      	beq.n	800a87c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a86a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a86e:	d103      	bne.n	800a878 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a876:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e013      	b.n	800a8a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a87c:	897b      	ldrh	r3, [r7, #10]
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	f043 0301 	orr.w	r3, r3, #1
 800a884:	b2da      	uxtb	r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88e:	6a3a      	ldr	r2, [r7, #32]
 800a890:	4906      	ldr	r1, [pc, #24]	; (800a8ac <I2C_RequestMemoryRead+0x1cc>)
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f000 f886 	bl	800a9a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d001      	beq.n	800a8a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e000      	b.n	800a8a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3718      	adds	r7, #24
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	00010002 	.word	0x00010002

0800a8b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	603b      	str	r3, [r7, #0]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a8c0:	e048      	b.n	800a954 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c8:	d044      	beq.n	800a954 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8ca:	f7fe f9e3 	bl	8008c94 <HAL_GetTick>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	683a      	ldr	r2, [r7, #0]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d302      	bcc.n	800a8e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d139      	bne.n	800a954 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	0c1b      	lsrs	r3, r3, #16
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d10d      	bne.n	800a906 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	695b      	ldr	r3, [r3, #20]
 800a8f0:	43da      	mvns	r2, r3
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	bf0c      	ite	eq
 800a8fc:	2301      	moveq	r3, #1
 800a8fe:	2300      	movne	r3, #0
 800a900:	b2db      	uxtb	r3, r3
 800a902:	461a      	mov	r2, r3
 800a904:	e00c      	b.n	800a920 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	699b      	ldr	r3, [r3, #24]
 800a90c:	43da      	mvns	r2, r3
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	4013      	ands	r3, r2
 800a912:	b29b      	uxth	r3, r3
 800a914:	2b00      	cmp	r3, #0
 800a916:	bf0c      	ite	eq
 800a918:	2301      	moveq	r3, #1
 800a91a:	2300      	movne	r3, #0
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	461a      	mov	r2, r3
 800a920:	79fb      	ldrb	r3, [r7, #7]
 800a922:	429a      	cmp	r2, r3
 800a924:	d116      	bne.n	800a954 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2220      	movs	r2, #32
 800a930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2200      	movs	r2, #0
 800a938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a940:	f043 0220 	orr.w	r2, r3, #32
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e023      	b.n	800a99c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	0c1b      	lsrs	r3, r3, #16
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d10d      	bne.n	800a97a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	695b      	ldr	r3, [r3, #20]
 800a964:	43da      	mvns	r2, r3
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	4013      	ands	r3, r2
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	bf0c      	ite	eq
 800a970:	2301      	moveq	r3, #1
 800a972:	2300      	movne	r3, #0
 800a974:	b2db      	uxtb	r3, r3
 800a976:	461a      	mov	r2, r3
 800a978:	e00c      	b.n	800a994 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	43da      	mvns	r2, r3
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	4013      	ands	r3, r2
 800a986:	b29b      	uxth	r3, r3
 800a988:	2b00      	cmp	r3, #0
 800a98a:	bf0c      	ite	eq
 800a98c:	2301      	moveq	r3, #1
 800a98e:	2300      	movne	r3, #0
 800a990:	b2db      	uxtb	r3, r3
 800a992:	461a      	mov	r2, r3
 800a994:	79fb      	ldrb	r3, [r7, #7]
 800a996:	429a      	cmp	r2, r3
 800a998:	d093      	beq.n	800a8c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a99a:	2300      	movs	r3, #0
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
 800a9b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a9b2:	e071      	b.n	800aa98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9c2:	d123      	bne.n	800aa0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a9dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2220      	movs	r2, #32
 800a9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f8:	f043 0204 	orr.w	r2, r3, #4
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e067      	b.n	800aadc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa12:	d041      	beq.n	800aa98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa14:	f7fe f93e 	bl	8008c94 <HAL_GetTick>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d302      	bcc.n	800aa2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d136      	bne.n	800aa98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	0c1b      	lsrs	r3, r3, #16
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d10c      	bne.n	800aa4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	43da      	mvns	r2, r3
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	4013      	ands	r3, r2
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	bf14      	ite	ne
 800aa46:	2301      	movne	r3, #1
 800aa48:	2300      	moveq	r3, #0
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	e00b      	b.n	800aa66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	699b      	ldr	r3, [r3, #24]
 800aa54:	43da      	mvns	r2, r3
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	4013      	ands	r3, r2
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bf14      	ite	ne
 800aa60:	2301      	movne	r3, #1
 800aa62:	2300      	moveq	r3, #0
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d016      	beq.n	800aa98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2220      	movs	r2, #32
 800aa74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa84:	f043 0220 	orr.w	r2, r3, #32
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e021      	b.n	800aadc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	0c1b      	lsrs	r3, r3, #16
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d10c      	bne.n	800aabc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	43da      	mvns	r2, r3
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	4013      	ands	r3, r2
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	bf14      	ite	ne
 800aab4:	2301      	movne	r3, #1
 800aab6:	2300      	moveq	r3, #0
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	e00b      	b.n	800aad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	43da      	mvns	r2, r3
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	4013      	ands	r3, r2
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	bf14      	ite	ne
 800aace:	2301      	movne	r3, #1
 800aad0:	2300      	moveq	r3, #0
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f47f af6d 	bne.w	800a9b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aaf0:	e034      	b.n	800ab5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f000 f8e3 	bl	800acbe <I2C_IsAcknowledgeFailed>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e034      	b.n	800ab6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab08:	d028      	beq.n	800ab5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab0a:	f7fe f8c3 	bl	8008c94 <HAL_GetTick>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d302      	bcc.n	800ab20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d11d      	bne.n	800ab5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab2a:	2b80      	cmp	r3, #128	; 0x80
 800ab2c:	d016      	beq.n	800ab5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2220      	movs	r2, #32
 800ab38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab48:	f043 0220 	orr.w	r2, r3, #32
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2200      	movs	r2, #0
 800ab54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e007      	b.n	800ab6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	695b      	ldr	r3, [r3, #20]
 800ab62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab66:	2b80      	cmp	r3, #128	; 0x80
 800ab68:	d1c3      	bne.n	800aaf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab80:	e034      	b.n	800abec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f000 f89b 	bl	800acbe <I2C_IsAcknowledgeFailed>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d001      	beq.n	800ab92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e034      	b.n	800abfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab98:	d028      	beq.n	800abec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab9a:	f7fe f87b 	bl	8008c94 <HAL_GetTick>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	1ad3      	subs	r3, r2, r3
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d302      	bcc.n	800abb0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d11d      	bne.n	800abec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	f003 0304 	and.w	r3, r3, #4
 800abba:	2b04      	cmp	r3, #4
 800abbc:	d016      	beq.n	800abec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2220      	movs	r2, #32
 800abc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2200      	movs	r2, #0
 800abd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd8:	f043 0220 	orr.w	r2, r3, #32
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e007      	b.n	800abfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	f003 0304 	and.w	r3, r3, #4
 800abf6:	2b04      	cmp	r3, #4
 800abf8:	d1c3      	bne.n	800ab82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac10:	e049      	b.n	800aca6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	695b      	ldr	r3, [r3, #20]
 800ac18:	f003 0310 	and.w	r3, r3, #16
 800ac1c:	2b10      	cmp	r3, #16
 800ac1e:	d119      	bne.n	800ac54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f06f 0210 	mvn.w	r2, #16
 800ac28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2220      	movs	r2, #32
 800ac34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	e030      	b.n	800acb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac54:	f7fe f81e 	bl	8008c94 <HAL_GetTick>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d302      	bcc.n	800ac6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d11d      	bne.n	800aca6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	695b      	ldr	r3, [r3, #20]
 800ac70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac74:	2b40      	cmp	r3, #64	; 0x40
 800ac76:	d016      	beq.n	800aca6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2220      	movs	r2, #32
 800ac82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac92:	f043 0220 	orr.w	r2, r3, #32
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e007      	b.n	800acb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	695b      	ldr	r3, [r3, #20]
 800acac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb0:	2b40      	cmp	r3, #64	; 0x40
 800acb2:	d1ae      	bne.n	800ac12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b083      	sub	sp, #12
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acd4:	d11b      	bne.n	800ad0e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800acde:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2220      	movs	r2, #32
 800acea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfa:	f043 0204 	orr.w	r2, r3, #4
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e000      	b.n	800ad10 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bc80      	pop	{r7}
 800ad18:	4770      	bx	lr
	...

0800ad1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d101      	bne.n	800ad2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e272      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 8087 	beq.w	800ae4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ad3c:	4b92      	ldr	r3, [pc, #584]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	f003 030c 	and.w	r3, r3, #12
 800ad44:	2b04      	cmp	r3, #4
 800ad46:	d00c      	beq.n	800ad62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ad48:	4b8f      	ldr	r3, [pc, #572]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	f003 030c 	and.w	r3, r3, #12
 800ad50:	2b08      	cmp	r3, #8
 800ad52:	d112      	bne.n	800ad7a <HAL_RCC_OscConfig+0x5e>
 800ad54:	4b8c      	ldr	r3, [pc, #560]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad60:	d10b      	bne.n	800ad7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad62:	4b89      	ldr	r3, [pc, #548]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d06c      	beq.n	800ae48 <HAL_RCC_OscConfig+0x12c>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d168      	bne.n	800ae48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e24c      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad82:	d106      	bne.n	800ad92 <HAL_RCC_OscConfig+0x76>
 800ad84:	4b80      	ldr	r3, [pc, #512]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a7f      	ldr	r2, [pc, #508]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ad8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad8e:	6013      	str	r3, [r2, #0]
 800ad90:	e02e      	b.n	800adf0 <HAL_RCC_OscConfig+0xd4>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10c      	bne.n	800adb4 <HAL_RCC_OscConfig+0x98>
 800ad9a:	4b7b      	ldr	r3, [pc, #492]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a7a      	ldr	r2, [pc, #488]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ada0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ada4:	6013      	str	r3, [r2, #0]
 800ada6:	4b78      	ldr	r3, [pc, #480]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a77      	ldr	r2, [pc, #476]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800adac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800adb0:	6013      	str	r3, [r2, #0]
 800adb2:	e01d      	b.n	800adf0 <HAL_RCC_OscConfig+0xd4>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800adbc:	d10c      	bne.n	800add8 <HAL_RCC_OscConfig+0xbc>
 800adbe:	4b72      	ldr	r3, [pc, #456]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a71      	ldr	r2, [pc, #452]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800adc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800adc8:	6013      	str	r3, [r2, #0]
 800adca:	4b6f      	ldr	r3, [pc, #444]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a6e      	ldr	r2, [pc, #440]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800add0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800add4:	6013      	str	r3, [r2, #0]
 800add6:	e00b      	b.n	800adf0 <HAL_RCC_OscConfig+0xd4>
 800add8:	4b6b      	ldr	r3, [pc, #428]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a6a      	ldr	r2, [pc, #424]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800adde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ade2:	6013      	str	r3, [r2, #0]
 800ade4:	4b68      	ldr	r3, [pc, #416]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a67      	ldr	r2, [pc, #412]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800adea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800adee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d013      	beq.n	800ae20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800adf8:	f7fd ff4c 	bl	8008c94 <HAL_GetTick>
 800adfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adfe:	e008      	b.n	800ae12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae00:	f7fd ff48 	bl	8008c94 <HAL_GetTick>
 800ae04:	4602      	mov	r2, r0
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	2b64      	cmp	r3, #100	; 0x64
 800ae0c:	d901      	bls.n	800ae12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	e200      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae12:	4b5d      	ldr	r3, [pc, #372]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0f0      	beq.n	800ae00 <HAL_RCC_OscConfig+0xe4>
 800ae1e:	e014      	b.n	800ae4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae20:	f7fd ff38 	bl	8008c94 <HAL_GetTick>
 800ae24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae26:	e008      	b.n	800ae3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae28:	f7fd ff34 	bl	8008c94 <HAL_GetTick>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	2b64      	cmp	r3, #100	; 0x64
 800ae34:	d901      	bls.n	800ae3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e1ec      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae3a:	4b53      	ldr	r3, [pc, #332]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1f0      	bne.n	800ae28 <HAL_RCC_OscConfig+0x10c>
 800ae46:	e000      	b.n	800ae4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f003 0302 	and.w	r3, r3, #2
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d063      	beq.n	800af1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ae56:	4b4c      	ldr	r3, [pc, #304]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	f003 030c 	and.w	r3, r3, #12
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00b      	beq.n	800ae7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ae62:	4b49      	ldr	r3, [pc, #292]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	f003 030c 	and.w	r3, r3, #12
 800ae6a:	2b08      	cmp	r3, #8
 800ae6c:	d11c      	bne.n	800aea8 <HAL_RCC_OscConfig+0x18c>
 800ae6e:	4b46      	ldr	r3, [pc, #280]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d116      	bne.n	800aea8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae7a:	4b43      	ldr	r3, [pc, #268]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 0302 	and.w	r3, r3, #2
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d005      	beq.n	800ae92 <HAL_RCC_OscConfig+0x176>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	691b      	ldr	r3, [r3, #16]
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d001      	beq.n	800ae92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e1c0      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae92:	4b3d      	ldr	r3, [pc, #244]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	695b      	ldr	r3, [r3, #20]
 800ae9e:	00db      	lsls	r3, r3, #3
 800aea0:	4939      	ldr	r1, [pc, #228]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800aea2:	4313      	orrs	r3, r2
 800aea4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aea6:	e03a      	b.n	800af1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d020      	beq.n	800aef2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aeb0:	4b36      	ldr	r3, [pc, #216]	; (800af8c <HAL_RCC_OscConfig+0x270>)
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aeb6:	f7fd feed 	bl	8008c94 <HAL_GetTick>
 800aeba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aebc:	e008      	b.n	800aed0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aebe:	f7fd fee9 	bl	8008c94 <HAL_GetTick>
 800aec2:	4602      	mov	r2, r0
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d901      	bls.n	800aed0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	e1a1      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aed0:	4b2d      	ldr	r3, [pc, #180]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 0302 	and.w	r3, r3, #2
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d0f0      	beq.n	800aebe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aedc:	4b2a      	ldr	r3, [pc, #168]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	00db      	lsls	r3, r3, #3
 800aeea:	4927      	ldr	r1, [pc, #156]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800aeec:	4313      	orrs	r3, r2
 800aeee:	600b      	str	r3, [r1, #0]
 800aef0:	e015      	b.n	800af1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aef2:	4b26      	ldr	r3, [pc, #152]	; (800af8c <HAL_RCC_OscConfig+0x270>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aef8:	f7fd fecc 	bl	8008c94 <HAL_GetTick>
 800aefc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aefe:	e008      	b.n	800af12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af00:	f7fd fec8 	bl	8008c94 <HAL_GetTick>
 800af04:	4602      	mov	r2, r0
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	d901      	bls.n	800af12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800af0e:	2303      	movs	r3, #3
 800af10:	e180      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af12:	4b1d      	ldr	r3, [pc, #116]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 0302 	and.w	r3, r3, #2
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1f0      	bne.n	800af00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0308 	and.w	r3, r3, #8
 800af26:	2b00      	cmp	r3, #0
 800af28:	d03a      	beq.n	800afa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	699b      	ldr	r3, [r3, #24]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d019      	beq.n	800af66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af32:	4b17      	ldr	r3, [pc, #92]	; (800af90 <HAL_RCC_OscConfig+0x274>)
 800af34:	2201      	movs	r2, #1
 800af36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af38:	f7fd feac 	bl	8008c94 <HAL_GetTick>
 800af3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af3e:	e008      	b.n	800af52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af40:	f7fd fea8 	bl	8008c94 <HAL_GetTick>
 800af44:	4602      	mov	r2, r0
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	1ad3      	subs	r3, r2, r3
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d901      	bls.n	800af52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800af4e:	2303      	movs	r3, #3
 800af50:	e160      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af52:	4b0d      	ldr	r3, [pc, #52]	; (800af88 <HAL_RCC_OscConfig+0x26c>)
 800af54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af56:	f003 0302 	and.w	r3, r3, #2
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0f0      	beq.n	800af40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800af5e:	2001      	movs	r0, #1
 800af60:	f000 face 	bl	800b500 <RCC_Delay>
 800af64:	e01c      	b.n	800afa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af66:	4b0a      	ldr	r3, [pc, #40]	; (800af90 <HAL_RCC_OscConfig+0x274>)
 800af68:	2200      	movs	r2, #0
 800af6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af6c:	f7fd fe92 	bl	8008c94 <HAL_GetTick>
 800af70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af72:	e00f      	b.n	800af94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af74:	f7fd fe8e 	bl	8008c94 <HAL_GetTick>
 800af78:	4602      	mov	r2, r0
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	2b02      	cmp	r3, #2
 800af80:	d908      	bls.n	800af94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800af82:	2303      	movs	r3, #3
 800af84:	e146      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
 800af86:	bf00      	nop
 800af88:	40021000 	.word	0x40021000
 800af8c:	42420000 	.word	0x42420000
 800af90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af94:	4b92      	ldr	r3, [pc, #584]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800af96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af98:	f003 0302 	and.w	r3, r3, #2
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1e9      	bne.n	800af74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f003 0304 	and.w	r3, r3, #4
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f000 80a6 	beq.w	800b0fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800afae:	2300      	movs	r3, #0
 800afb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800afb2:	4b8b      	ldr	r3, [pc, #556]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800afb4:	69db      	ldr	r3, [r3, #28]
 800afb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d10d      	bne.n	800afda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800afbe:	4b88      	ldr	r3, [pc, #544]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800afc0:	69db      	ldr	r3, [r3, #28]
 800afc2:	4a87      	ldr	r2, [pc, #540]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800afc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afc8:	61d3      	str	r3, [r2, #28]
 800afca:	4b85      	ldr	r3, [pc, #532]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800afcc:	69db      	ldr	r3, [r3, #28]
 800afce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afd2:	60bb      	str	r3, [r7, #8]
 800afd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800afd6:	2301      	movs	r3, #1
 800afd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800afda:	4b82      	ldr	r3, [pc, #520]	; (800b1e4 <HAL_RCC_OscConfig+0x4c8>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d118      	bne.n	800b018 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800afe6:	4b7f      	ldr	r3, [pc, #508]	; (800b1e4 <HAL_RCC_OscConfig+0x4c8>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a7e      	ldr	r2, [pc, #504]	; (800b1e4 <HAL_RCC_OscConfig+0x4c8>)
 800afec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aff2:	f7fd fe4f 	bl	8008c94 <HAL_GetTick>
 800aff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aff8:	e008      	b.n	800b00c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800affa:	f7fd fe4b 	bl	8008c94 <HAL_GetTick>
 800affe:	4602      	mov	r2, r0
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	2b64      	cmp	r3, #100	; 0x64
 800b006:	d901      	bls.n	800b00c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b008:	2303      	movs	r3, #3
 800b00a:	e103      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b00c:	4b75      	ldr	r3, [pc, #468]	; (800b1e4 <HAL_RCC_OscConfig+0x4c8>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b014:	2b00      	cmp	r3, #0
 800b016:	d0f0      	beq.n	800affa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d106      	bne.n	800b02e <HAL_RCC_OscConfig+0x312>
 800b020:	4b6f      	ldr	r3, [pc, #444]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b022:	6a1b      	ldr	r3, [r3, #32]
 800b024:	4a6e      	ldr	r2, [pc, #440]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b026:	f043 0301 	orr.w	r3, r3, #1
 800b02a:	6213      	str	r3, [r2, #32]
 800b02c:	e02d      	b.n	800b08a <HAL_RCC_OscConfig+0x36e>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10c      	bne.n	800b050 <HAL_RCC_OscConfig+0x334>
 800b036:	4b6a      	ldr	r3, [pc, #424]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	4a69      	ldr	r2, [pc, #420]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b03c:	f023 0301 	bic.w	r3, r3, #1
 800b040:	6213      	str	r3, [r2, #32]
 800b042:	4b67      	ldr	r3, [pc, #412]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	4a66      	ldr	r2, [pc, #408]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b048:	f023 0304 	bic.w	r3, r3, #4
 800b04c:	6213      	str	r3, [r2, #32]
 800b04e:	e01c      	b.n	800b08a <HAL_RCC_OscConfig+0x36e>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	2b05      	cmp	r3, #5
 800b056:	d10c      	bne.n	800b072 <HAL_RCC_OscConfig+0x356>
 800b058:	4b61      	ldr	r3, [pc, #388]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b05a:	6a1b      	ldr	r3, [r3, #32]
 800b05c:	4a60      	ldr	r2, [pc, #384]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b05e:	f043 0304 	orr.w	r3, r3, #4
 800b062:	6213      	str	r3, [r2, #32]
 800b064:	4b5e      	ldr	r3, [pc, #376]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b066:	6a1b      	ldr	r3, [r3, #32]
 800b068:	4a5d      	ldr	r2, [pc, #372]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b06a:	f043 0301 	orr.w	r3, r3, #1
 800b06e:	6213      	str	r3, [r2, #32]
 800b070:	e00b      	b.n	800b08a <HAL_RCC_OscConfig+0x36e>
 800b072:	4b5b      	ldr	r3, [pc, #364]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	4a5a      	ldr	r2, [pc, #360]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b078:	f023 0301 	bic.w	r3, r3, #1
 800b07c:	6213      	str	r3, [r2, #32]
 800b07e:	4b58      	ldr	r3, [pc, #352]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	4a57      	ldr	r2, [pc, #348]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b084:	f023 0304 	bic.w	r3, r3, #4
 800b088:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d015      	beq.n	800b0be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b092:	f7fd fdff 	bl	8008c94 <HAL_GetTick>
 800b096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b098:	e00a      	b.n	800b0b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b09a:	f7fd fdfb 	bl	8008c94 <HAL_GetTick>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d901      	bls.n	800b0b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e0b1      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0b0:	4b4b      	ldr	r3, [pc, #300]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b0b2:	6a1b      	ldr	r3, [r3, #32]
 800b0b4:	f003 0302 	and.w	r3, r3, #2
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d0ee      	beq.n	800b09a <HAL_RCC_OscConfig+0x37e>
 800b0bc:	e014      	b.n	800b0e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0be:	f7fd fde9 	bl	8008c94 <HAL_GetTick>
 800b0c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b0c4:	e00a      	b.n	800b0dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0c6:	f7fd fde5 	bl	8008c94 <HAL_GetTick>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d901      	bls.n	800b0dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b0d8:	2303      	movs	r3, #3
 800b0da:	e09b      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b0dc:	4b40      	ldr	r3, [pc, #256]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b0de:	6a1b      	ldr	r3, [r3, #32]
 800b0e0:	f003 0302 	and.w	r3, r3, #2
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1ee      	bne.n	800b0c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b0e8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d105      	bne.n	800b0fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b0ee:	4b3c      	ldr	r3, [pc, #240]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b0f0:	69db      	ldr	r3, [r3, #28]
 800b0f2:	4a3b      	ldr	r2, [pc, #236]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b0f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	69db      	ldr	r3, [r3, #28]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 8087 	beq.w	800b212 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b104:	4b36      	ldr	r3, [pc, #216]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	f003 030c 	and.w	r3, r3, #12
 800b10c:	2b08      	cmp	r3, #8
 800b10e:	d061      	beq.n	800b1d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	69db      	ldr	r3, [r3, #28]
 800b114:	2b02      	cmp	r3, #2
 800b116:	d146      	bne.n	800b1a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b118:	4b33      	ldr	r3, [pc, #204]	; (800b1e8 <HAL_RCC_OscConfig+0x4cc>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b11e:	f7fd fdb9 	bl	8008c94 <HAL_GetTick>
 800b122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b124:	e008      	b.n	800b138 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b126:	f7fd fdb5 	bl	8008c94 <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	2b02      	cmp	r3, #2
 800b132:	d901      	bls.n	800b138 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b134:	2303      	movs	r3, #3
 800b136:	e06d      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b138:	4b29      	ldr	r3, [pc, #164]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1f0      	bne.n	800b126 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a1b      	ldr	r3, [r3, #32]
 800b148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b14c:	d108      	bne.n	800b160 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b14e:	4b24      	ldr	r3, [pc, #144]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	4921      	ldr	r1, [pc, #132]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b15c:	4313      	orrs	r3, r2
 800b15e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b160:	4b1f      	ldr	r3, [pc, #124]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a19      	ldr	r1, [r3, #32]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b170:	430b      	orrs	r3, r1
 800b172:	491b      	ldr	r1, [pc, #108]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b174:	4313      	orrs	r3, r2
 800b176:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b178:	4b1b      	ldr	r3, [pc, #108]	; (800b1e8 <HAL_RCC_OscConfig+0x4cc>)
 800b17a:	2201      	movs	r2, #1
 800b17c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b17e:	f7fd fd89 	bl	8008c94 <HAL_GetTick>
 800b182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b184:	e008      	b.n	800b198 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b186:	f7fd fd85 	bl	8008c94 <HAL_GetTick>
 800b18a:	4602      	mov	r2, r0
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	2b02      	cmp	r3, #2
 800b192:	d901      	bls.n	800b198 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b194:	2303      	movs	r3, #3
 800b196:	e03d      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b198:	4b11      	ldr	r3, [pc, #68]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d0f0      	beq.n	800b186 <HAL_RCC_OscConfig+0x46a>
 800b1a4:	e035      	b.n	800b212 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1a6:	4b10      	ldr	r3, [pc, #64]	; (800b1e8 <HAL_RCC_OscConfig+0x4cc>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1ac:	f7fd fd72 	bl	8008c94 <HAL_GetTick>
 800b1b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b1b2:	e008      	b.n	800b1c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1b4:	f7fd fd6e 	bl	8008c94 <HAL_GetTick>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d901      	bls.n	800b1c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b1c2:	2303      	movs	r3, #3
 800b1c4:	e026      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b1c6:	4b06      	ldr	r3, [pc, #24]	; (800b1e0 <HAL_RCC_OscConfig+0x4c4>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1f0      	bne.n	800b1b4 <HAL_RCC_OscConfig+0x498>
 800b1d2:	e01e      	b.n	800b212 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	69db      	ldr	r3, [r3, #28]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d107      	bne.n	800b1ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e019      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
 800b1e0:	40021000 	.word	0x40021000
 800b1e4:	40007000 	.word	0x40007000
 800b1e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b1ec:	4b0b      	ldr	r3, [pc, #44]	; (800b21c <HAL_RCC_OscConfig+0x500>)
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a1b      	ldr	r3, [r3, #32]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d106      	bne.n	800b20e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d001      	beq.n	800b212 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e000      	b.n	800b214 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3718      	adds	r7, #24
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	40021000 	.word	0x40021000

0800b220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	e0d0      	b.n	800b3d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b234:	4b6a      	ldr	r3, [pc, #424]	; (800b3e0 <HAL_RCC_ClockConfig+0x1c0>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 0307 	and.w	r3, r3, #7
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d910      	bls.n	800b264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b242:	4b67      	ldr	r3, [pc, #412]	; (800b3e0 <HAL_RCC_ClockConfig+0x1c0>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f023 0207 	bic.w	r2, r3, #7
 800b24a:	4965      	ldr	r1, [pc, #404]	; (800b3e0 <HAL_RCC_ClockConfig+0x1c0>)
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	4313      	orrs	r3, r2
 800b250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b252:	4b63      	ldr	r3, [pc, #396]	; (800b3e0 <HAL_RCC_ClockConfig+0x1c0>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0307 	and.w	r3, r3, #7
 800b25a:	683a      	ldr	r2, [r7, #0]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d001      	beq.n	800b264 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	e0b8      	b.n	800b3d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f003 0302 	and.w	r3, r3, #2
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d020      	beq.n	800b2b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d005      	beq.n	800b288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b27c:	4b59      	ldr	r3, [pc, #356]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	4a58      	ldr	r2, [pc, #352]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b282:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b286:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 0308 	and.w	r3, r3, #8
 800b290:	2b00      	cmp	r3, #0
 800b292:	d005      	beq.n	800b2a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b294:	4b53      	ldr	r3, [pc, #332]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	4a52      	ldr	r2, [pc, #328]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b29a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b29e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2a0:	4b50      	ldr	r3, [pc, #320]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	494d      	ldr	r1, [pc, #308]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 0301 	and.w	r3, r3, #1
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d040      	beq.n	800b340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d107      	bne.n	800b2d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2c6:	4b47      	ldr	r3, [pc, #284]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d115      	bne.n	800b2fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e07f      	b.n	800b3d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d107      	bne.n	800b2ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2de:	4b41      	ldr	r3, [pc, #260]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d109      	bne.n	800b2fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e073      	b.n	800b3d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2ee:	4b3d      	ldr	r3, [pc, #244]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f003 0302 	and.w	r3, r3, #2
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d101      	bne.n	800b2fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e06b      	b.n	800b3d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b2fe:	4b39      	ldr	r3, [pc, #228]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	f023 0203 	bic.w	r2, r3, #3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	4936      	ldr	r1, [pc, #216]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b30c:	4313      	orrs	r3, r2
 800b30e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b310:	f7fd fcc0 	bl	8008c94 <HAL_GetTick>
 800b314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b316:	e00a      	b.n	800b32e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b318:	f7fd fcbc 	bl	8008c94 <HAL_GetTick>
 800b31c:	4602      	mov	r2, r0
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	f241 3288 	movw	r2, #5000	; 0x1388
 800b326:	4293      	cmp	r3, r2
 800b328:	d901      	bls.n	800b32e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b32a:	2303      	movs	r3, #3
 800b32c:	e053      	b.n	800b3d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b32e:	4b2d      	ldr	r3, [pc, #180]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	f003 020c 	and.w	r2, r3, #12
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d1eb      	bne.n	800b318 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b340:	4b27      	ldr	r3, [pc, #156]	; (800b3e0 <HAL_RCC_ClockConfig+0x1c0>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f003 0307 	and.w	r3, r3, #7
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d210      	bcs.n	800b370 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b34e:	4b24      	ldr	r3, [pc, #144]	; (800b3e0 <HAL_RCC_ClockConfig+0x1c0>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f023 0207 	bic.w	r2, r3, #7
 800b356:	4922      	ldr	r1, [pc, #136]	; (800b3e0 <HAL_RCC_ClockConfig+0x1c0>)
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b35e:	4b20      	ldr	r3, [pc, #128]	; (800b3e0 <HAL_RCC_ClockConfig+0x1c0>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f003 0307 	and.w	r3, r3, #7
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d001      	beq.n	800b370 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	e032      	b.n	800b3d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 0304 	and.w	r3, r3, #4
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d008      	beq.n	800b38e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b37c:	4b19      	ldr	r3, [pc, #100]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	4916      	ldr	r1, [pc, #88]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b38a:	4313      	orrs	r3, r2
 800b38c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 0308 	and.w	r3, r3, #8
 800b396:	2b00      	cmp	r3, #0
 800b398:	d009      	beq.n	800b3ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b39a:	4b12      	ldr	r3, [pc, #72]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	00db      	lsls	r3, r3, #3
 800b3a8:	490e      	ldr	r1, [pc, #56]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b3ae:	f000 f821 	bl	800b3f4 <HAL_RCC_GetSysClockFreq>
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	4b0b      	ldr	r3, [pc, #44]	; (800b3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	091b      	lsrs	r3, r3, #4
 800b3ba:	f003 030f 	and.w	r3, r3, #15
 800b3be:	490a      	ldr	r1, [pc, #40]	; (800b3e8 <HAL_RCC_ClockConfig+0x1c8>)
 800b3c0:	5ccb      	ldrb	r3, [r1, r3]
 800b3c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c6:	4a09      	ldr	r2, [pc, #36]	; (800b3ec <HAL_RCC_ClockConfig+0x1cc>)
 800b3c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b3ca:	4b09      	ldr	r3, [pc, #36]	; (800b3f0 <HAL_RCC_ClockConfig+0x1d0>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fd fc1e 	bl	8008c10 <HAL_InitTick>

  return HAL_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	40022000 	.word	0x40022000
 800b3e4:	40021000 	.word	0x40021000
 800b3e8:	0800e124 	.word	0x0800e124
 800b3ec:	2000094c 	.word	0x2000094c
 800b3f0:	20000950 	.word	0x20000950

0800b3f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b087      	sub	sp, #28
 800b3f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60fb      	str	r3, [r7, #12]
 800b3fe:	2300      	movs	r3, #0
 800b400:	60bb      	str	r3, [r7, #8]
 800b402:	2300      	movs	r3, #0
 800b404:	617b      	str	r3, [r7, #20]
 800b406:	2300      	movs	r3, #0
 800b408:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b40a:	2300      	movs	r3, #0
 800b40c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b40e:	4b1e      	ldr	r3, [pc, #120]	; (800b488 <HAL_RCC_GetSysClockFreq+0x94>)
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f003 030c 	and.w	r3, r3, #12
 800b41a:	2b04      	cmp	r3, #4
 800b41c:	d002      	beq.n	800b424 <HAL_RCC_GetSysClockFreq+0x30>
 800b41e:	2b08      	cmp	r3, #8
 800b420:	d003      	beq.n	800b42a <HAL_RCC_GetSysClockFreq+0x36>
 800b422:	e027      	b.n	800b474 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b424:	4b19      	ldr	r3, [pc, #100]	; (800b48c <HAL_RCC_GetSysClockFreq+0x98>)
 800b426:	613b      	str	r3, [r7, #16]
      break;
 800b428:	e027      	b.n	800b47a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	0c9b      	lsrs	r3, r3, #18
 800b42e:	f003 030f 	and.w	r3, r3, #15
 800b432:	4a17      	ldr	r2, [pc, #92]	; (800b490 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b434:	5cd3      	ldrb	r3, [r2, r3]
 800b436:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d010      	beq.n	800b464 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b442:	4b11      	ldr	r3, [pc, #68]	; (800b488 <HAL_RCC_GetSysClockFreq+0x94>)
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	0c5b      	lsrs	r3, r3, #17
 800b448:	f003 0301 	and.w	r3, r3, #1
 800b44c:	4a11      	ldr	r2, [pc, #68]	; (800b494 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b44e:	5cd3      	ldrb	r3, [r2, r3]
 800b450:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a0d      	ldr	r2, [pc, #52]	; (800b48c <HAL_RCC_GetSysClockFreq+0x98>)
 800b456:	fb03 f202 	mul.w	r2, r3, r2
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b460:	617b      	str	r3, [r7, #20]
 800b462:	e004      	b.n	800b46e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a0c      	ldr	r2, [pc, #48]	; (800b498 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b468:	fb02 f303 	mul.w	r3, r2, r3
 800b46c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	613b      	str	r3, [r7, #16]
      break;
 800b472:	e002      	b.n	800b47a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b474:	4b05      	ldr	r3, [pc, #20]	; (800b48c <HAL_RCC_GetSysClockFreq+0x98>)
 800b476:	613b      	str	r3, [r7, #16]
      break;
 800b478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b47a:	693b      	ldr	r3, [r7, #16]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	371c      	adds	r7, #28
 800b480:	46bd      	mov	sp, r7
 800b482:	bc80      	pop	{r7}
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	40021000 	.word	0x40021000
 800b48c:	007a1200 	.word	0x007a1200
 800b490:	0800e13c 	.word	0x0800e13c
 800b494:	0800e14c 	.word	0x0800e14c
 800b498:	003d0900 	.word	0x003d0900

0800b49c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b49c:	b480      	push	{r7}
 800b49e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b4a0:	4b02      	ldr	r3, [pc, #8]	; (800b4ac <HAL_RCC_GetHCLKFreq+0x10>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bc80      	pop	{r7}
 800b4aa:	4770      	bx	lr
 800b4ac:	2000094c 	.word	0x2000094c

0800b4b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b4b4:	f7ff fff2 	bl	800b49c <HAL_RCC_GetHCLKFreq>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	4b05      	ldr	r3, [pc, #20]	; (800b4d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	0a1b      	lsrs	r3, r3, #8
 800b4c0:	f003 0307 	and.w	r3, r3, #7
 800b4c4:	4903      	ldr	r1, [pc, #12]	; (800b4d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b4c6:	5ccb      	ldrb	r3, [r1, r3]
 800b4c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	40021000 	.word	0x40021000
 800b4d4:	0800e134 	.word	0x0800e134

0800b4d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b4dc:	f7ff ffde 	bl	800b49c <HAL_RCC_GetHCLKFreq>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	4b05      	ldr	r3, [pc, #20]	; (800b4f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	0adb      	lsrs	r3, r3, #11
 800b4e8:	f003 0307 	and.w	r3, r3, #7
 800b4ec:	4903      	ldr	r1, [pc, #12]	; (800b4fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b4ee:	5ccb      	ldrb	r3, [r1, r3]
 800b4f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	40021000 	.word	0x40021000
 800b4fc:	0800e134 	.word	0x0800e134

0800b500 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b508:	4b0a      	ldr	r3, [pc, #40]	; (800b534 <RCC_Delay+0x34>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a0a      	ldr	r2, [pc, #40]	; (800b538 <RCC_Delay+0x38>)
 800b50e:	fba2 2303 	umull	r2, r3, r2, r3
 800b512:	0a5b      	lsrs	r3, r3, #9
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	fb02 f303 	mul.w	r3, r2, r3
 800b51a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b51c:	bf00      	nop
  }
  while (Delay --);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	1e5a      	subs	r2, r3, #1
 800b522:	60fa      	str	r2, [r7, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1f9      	bne.n	800b51c <RCC_Delay+0x1c>
}
 800b528:	bf00      	nop
 800b52a:	bf00      	nop
 800b52c:	3714      	adds	r7, #20
 800b52e:	46bd      	mov	sp, r7
 800b530:	bc80      	pop	{r7}
 800b532:	4770      	bx	lr
 800b534:	2000094c 	.word	0x2000094c
 800b538:	10624dd3 	.word	0x10624dd3

0800b53c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e041      	b.n	800b5d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d106      	bne.n	800b568 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7fd fa26 	bl	80089b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3304      	adds	r3, #4
 800b578:	4619      	mov	r1, r3
 800b57a:	4610      	mov	r0, r2
 800b57c:	f000 fa82 	bl	800ba84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
	...

0800b5dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d001      	beq.n	800b5f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e044      	b.n	800b67e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68da      	ldr	r2, [r3, #12]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f042 0201 	orr.w	r2, r2, #1
 800b60a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a1d      	ldr	r2, [pc, #116]	; (800b688 <HAL_TIM_Base_Start_IT+0xac>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d018      	beq.n	800b648 <HAL_TIM_Base_Start_IT+0x6c>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a1c      	ldr	r2, [pc, #112]	; (800b68c <HAL_TIM_Base_Start_IT+0xb0>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d013      	beq.n	800b648 <HAL_TIM_Base_Start_IT+0x6c>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b628:	d00e      	beq.n	800b648 <HAL_TIM_Base_Start_IT+0x6c>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a18      	ldr	r2, [pc, #96]	; (800b690 <HAL_TIM_Base_Start_IT+0xb4>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d009      	beq.n	800b648 <HAL_TIM_Base_Start_IT+0x6c>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a16      	ldr	r2, [pc, #88]	; (800b694 <HAL_TIM_Base_Start_IT+0xb8>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d004      	beq.n	800b648 <HAL_TIM_Base_Start_IT+0x6c>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a15      	ldr	r2, [pc, #84]	; (800b698 <HAL_TIM_Base_Start_IT+0xbc>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d111      	bne.n	800b66c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	f003 0307 	and.w	r3, r3, #7
 800b652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2b06      	cmp	r3, #6
 800b658:	d010      	beq.n	800b67c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f042 0201 	orr.w	r2, r2, #1
 800b668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b66a:	e007      	b.n	800b67c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f042 0201 	orr.w	r2, r2, #1
 800b67a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3714      	adds	r7, #20
 800b682:	46bd      	mov	sp, r7
 800b684:	bc80      	pop	{r7}
 800b686:	4770      	bx	lr
 800b688:	40012c00 	.word	0x40012c00
 800b68c:	40013400 	.word	0x40013400
 800b690:	40000400 	.word	0x40000400
 800b694:	40000800 	.word	0x40000800
 800b698:	40000c00 	.word	0x40000c00

0800b69c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	f003 0302 	and.w	r3, r3, #2
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d122      	bne.n	800b6f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	f003 0302 	and.w	r3, r3, #2
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d11b      	bne.n	800b6f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f06f 0202 	mvn.w	r2, #2
 800b6c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	699b      	ldr	r3, [r3, #24]
 800b6d6:	f003 0303 	and.w	r3, r3, #3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d003      	beq.n	800b6e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f9b4 	bl	800ba4c <HAL_TIM_IC_CaptureCallback>
 800b6e4:	e005      	b.n	800b6f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f9a7 	bl	800ba3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f9b6 	bl	800ba5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	f003 0304 	and.w	r3, r3, #4
 800b702:	2b04      	cmp	r3, #4
 800b704:	d122      	bne.n	800b74c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	f003 0304 	and.w	r3, r3, #4
 800b710:	2b04      	cmp	r3, #4
 800b712:	d11b      	bne.n	800b74c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f06f 0204 	mvn.w	r2, #4
 800b71c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2202      	movs	r2, #2
 800b722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	699b      	ldr	r3, [r3, #24]
 800b72a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d003      	beq.n	800b73a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f98a 	bl	800ba4c <HAL_TIM_IC_CaptureCallback>
 800b738:	e005      	b.n	800b746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f97d 	bl	800ba3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 f98c 	bl	800ba5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	f003 0308 	and.w	r3, r3, #8
 800b756:	2b08      	cmp	r3, #8
 800b758:	d122      	bne.n	800b7a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	f003 0308 	and.w	r3, r3, #8
 800b764:	2b08      	cmp	r3, #8
 800b766:	d11b      	bne.n	800b7a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f06f 0208 	mvn.w	r2, #8
 800b770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2204      	movs	r2, #4
 800b776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	69db      	ldr	r3, [r3, #28]
 800b77e:	f003 0303 	and.w	r3, r3, #3
 800b782:	2b00      	cmp	r3, #0
 800b784:	d003      	beq.n	800b78e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 f960 	bl	800ba4c <HAL_TIM_IC_CaptureCallback>
 800b78c:	e005      	b.n	800b79a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f953 	bl	800ba3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f962 	bl	800ba5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	691b      	ldr	r3, [r3, #16]
 800b7a6:	f003 0310 	and.w	r3, r3, #16
 800b7aa:	2b10      	cmp	r3, #16
 800b7ac:	d122      	bne.n	800b7f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	f003 0310 	and.w	r3, r3, #16
 800b7b8:	2b10      	cmp	r3, #16
 800b7ba:	d11b      	bne.n	800b7f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f06f 0210 	mvn.w	r2, #16
 800b7c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2208      	movs	r2, #8
 800b7ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	69db      	ldr	r3, [r3, #28]
 800b7d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d003      	beq.n	800b7e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 f936 	bl	800ba4c <HAL_TIM_IC_CaptureCallback>
 800b7e0:	e005      	b.n	800b7ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f929 	bl	800ba3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 f938 	bl	800ba5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d10e      	bne.n	800b820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	f003 0301 	and.w	r3, r3, #1
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d107      	bne.n	800b820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f06f 0201 	mvn.w	r2, #1
 800b818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7fc fd22 	bl	8008264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	691b      	ldr	r3, [r3, #16]
 800b826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b82a:	2b80      	cmp	r3, #128	; 0x80
 800b82c:	d10e      	bne.n	800b84c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b838:	2b80      	cmp	r3, #128	; 0x80
 800b83a:	d107      	bne.n	800b84c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 faa1 	bl	800bd8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b856:	2b40      	cmp	r3, #64	; 0x40
 800b858:	d10e      	bne.n	800b878 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b864:	2b40      	cmp	r3, #64	; 0x40
 800b866:	d107      	bne.n	800b878 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 f8fc 	bl	800ba70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	691b      	ldr	r3, [r3, #16]
 800b87e:	f003 0320 	and.w	r3, r3, #32
 800b882:	2b20      	cmp	r3, #32
 800b884:	d10e      	bne.n	800b8a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	f003 0320 	and.w	r3, r3, #32
 800b890:	2b20      	cmp	r3, #32
 800b892:	d107      	bne.n	800b8a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f06f 0220 	mvn.w	r2, #32
 800b89c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fa6c 	bl	800bd7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8a4:	bf00      	nop
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d101      	bne.n	800b8c8 <HAL_TIM_ConfigClockSource+0x1c>
 800b8c4:	2302      	movs	r3, #2
 800b8c6:	e0b4      	b.n	800ba32 <HAL_TIM_ConfigClockSource+0x186>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b8e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b900:	d03e      	beq.n	800b980 <HAL_TIM_ConfigClockSource+0xd4>
 800b902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b906:	f200 8087 	bhi.w	800ba18 <HAL_TIM_ConfigClockSource+0x16c>
 800b90a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b90e:	f000 8086 	beq.w	800ba1e <HAL_TIM_ConfigClockSource+0x172>
 800b912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b916:	d87f      	bhi.n	800ba18 <HAL_TIM_ConfigClockSource+0x16c>
 800b918:	2b70      	cmp	r3, #112	; 0x70
 800b91a:	d01a      	beq.n	800b952 <HAL_TIM_ConfigClockSource+0xa6>
 800b91c:	2b70      	cmp	r3, #112	; 0x70
 800b91e:	d87b      	bhi.n	800ba18 <HAL_TIM_ConfigClockSource+0x16c>
 800b920:	2b60      	cmp	r3, #96	; 0x60
 800b922:	d050      	beq.n	800b9c6 <HAL_TIM_ConfigClockSource+0x11a>
 800b924:	2b60      	cmp	r3, #96	; 0x60
 800b926:	d877      	bhi.n	800ba18 <HAL_TIM_ConfigClockSource+0x16c>
 800b928:	2b50      	cmp	r3, #80	; 0x50
 800b92a:	d03c      	beq.n	800b9a6 <HAL_TIM_ConfigClockSource+0xfa>
 800b92c:	2b50      	cmp	r3, #80	; 0x50
 800b92e:	d873      	bhi.n	800ba18 <HAL_TIM_ConfigClockSource+0x16c>
 800b930:	2b40      	cmp	r3, #64	; 0x40
 800b932:	d058      	beq.n	800b9e6 <HAL_TIM_ConfigClockSource+0x13a>
 800b934:	2b40      	cmp	r3, #64	; 0x40
 800b936:	d86f      	bhi.n	800ba18 <HAL_TIM_ConfigClockSource+0x16c>
 800b938:	2b30      	cmp	r3, #48	; 0x30
 800b93a:	d064      	beq.n	800ba06 <HAL_TIM_ConfigClockSource+0x15a>
 800b93c:	2b30      	cmp	r3, #48	; 0x30
 800b93e:	d86b      	bhi.n	800ba18 <HAL_TIM_ConfigClockSource+0x16c>
 800b940:	2b20      	cmp	r3, #32
 800b942:	d060      	beq.n	800ba06 <HAL_TIM_ConfigClockSource+0x15a>
 800b944:	2b20      	cmp	r3, #32
 800b946:	d867      	bhi.n	800ba18 <HAL_TIM_ConfigClockSource+0x16c>
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d05c      	beq.n	800ba06 <HAL_TIM_ConfigClockSource+0x15a>
 800b94c:	2b10      	cmp	r3, #16
 800b94e:	d05a      	beq.n	800ba06 <HAL_TIM_ConfigClockSource+0x15a>
 800b950:	e062      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b962:	f000 f980 	bl	800bc66 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b974:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	609a      	str	r2, [r3, #8]
      break;
 800b97e:	e04f      	b.n	800ba20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b990:	f000 f969 	bl	800bc66 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	689a      	ldr	r2, [r3, #8]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b9a2:	609a      	str	r2, [r3, #8]
      break;
 800b9a4:	e03c      	b.n	800ba20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	f000 f8e0 	bl	800bb78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2150      	movs	r1, #80	; 0x50
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f000 f937 	bl	800bc32 <TIM_ITRx_SetConfig>
      break;
 800b9c4:	e02c      	b.n	800ba20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	f000 f8fe 	bl	800bbd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2160      	movs	r1, #96	; 0x60
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f000 f927 	bl	800bc32 <TIM_ITRx_SetConfig>
      break;
 800b9e4:	e01c      	b.n	800ba20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	f000 f8c0 	bl	800bb78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2140      	movs	r1, #64	; 0x40
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f000 f917 	bl	800bc32 <TIM_ITRx_SetConfig>
      break;
 800ba04:	e00c      	b.n	800ba20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4619      	mov	r1, r3
 800ba10:	4610      	mov	r0, r2
 800ba12:	f000 f90e 	bl	800bc32 <TIM_ITRx_SetConfig>
      break;
 800ba16:	e003      	b.n	800ba20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba1c:	e000      	b.n	800ba20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ba1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b083      	sub	sp, #12
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba42:	bf00      	nop
 800ba44:	370c      	adds	r7, #12
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bc80      	pop	{r7}
 800ba4a:	4770      	bx	lr

0800ba4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba54:	bf00      	nop
 800ba56:	370c      	adds	r7, #12
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bc80      	pop	{r7}
 800ba5c:	4770      	bx	lr

0800ba5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba5e:	b480      	push	{r7}
 800ba60:	b083      	sub	sp, #12
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba66:	bf00      	nop
 800ba68:	370c      	adds	r7, #12
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bc80      	pop	{r7}
 800ba6e:	4770      	bx	lr

0800ba70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba78:	bf00      	nop
 800ba7a:	370c      	adds	r7, #12
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bc80      	pop	{r7}
 800ba80:	4770      	bx	lr
	...

0800ba84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a33      	ldr	r2, [pc, #204]	; (800bb64 <TIM_Base_SetConfig+0xe0>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d013      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4a32      	ldr	r2, [pc, #200]	; (800bb68 <TIM_Base_SetConfig+0xe4>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d00f      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baaa:	d00b      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4a2f      	ldr	r2, [pc, #188]	; (800bb6c <TIM_Base_SetConfig+0xe8>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d007      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a2e      	ldr	r2, [pc, #184]	; (800bb70 <TIM_Base_SetConfig+0xec>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d003      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a2d      	ldr	r2, [pc, #180]	; (800bb74 <TIM_Base_SetConfig+0xf0>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d108      	bne.n	800bad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a22      	ldr	r2, [pc, #136]	; (800bb64 <TIM_Base_SetConfig+0xe0>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d013      	beq.n	800bb06 <TIM_Base_SetConfig+0x82>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a21      	ldr	r2, [pc, #132]	; (800bb68 <TIM_Base_SetConfig+0xe4>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d00f      	beq.n	800bb06 <TIM_Base_SetConfig+0x82>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baec:	d00b      	beq.n	800bb06 <TIM_Base_SetConfig+0x82>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a1e      	ldr	r2, [pc, #120]	; (800bb6c <TIM_Base_SetConfig+0xe8>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d007      	beq.n	800bb06 <TIM_Base_SetConfig+0x82>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a1d      	ldr	r2, [pc, #116]	; (800bb70 <TIM_Base_SetConfig+0xec>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d003      	beq.n	800bb06 <TIM_Base_SetConfig+0x82>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a1c      	ldr	r2, [pc, #112]	; (800bb74 <TIM_Base_SetConfig+0xf0>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d108      	bne.n	800bb18 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	4313      	orrs	r3, r2
 800bb16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	695b      	ldr	r3, [r3, #20]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	689a      	ldr	r2, [r3, #8]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a09      	ldr	r2, [pc, #36]	; (800bb64 <TIM_Base_SetConfig+0xe0>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d003      	beq.n	800bb4c <TIM_Base_SetConfig+0xc8>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a08      	ldr	r2, [pc, #32]	; (800bb68 <TIM_Base_SetConfig+0xe4>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d103      	bne.n	800bb54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	691a      	ldr	r2, [r3, #16]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	615a      	str	r2, [r3, #20]
}
 800bb5a:	bf00      	nop
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bc80      	pop	{r7}
 800bb62:	4770      	bx	lr
 800bb64:	40012c00 	.word	0x40012c00
 800bb68:	40013400 	.word	0x40013400
 800bb6c:	40000400 	.word	0x40000400
 800bb70:	40000800 	.word	0x40000800
 800bb74:	40000c00 	.word	0x40000c00

0800bb78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b087      	sub	sp, #28
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6a1b      	ldr	r3, [r3, #32]
 800bb88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6a1b      	ldr	r3, [r3, #32]
 800bb8e:	f023 0201 	bic.w	r2, r3, #1
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	011b      	lsls	r3, r3, #4
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	f023 030a 	bic.w	r3, r3, #10
 800bbb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	621a      	str	r2, [r3, #32]
}
 800bbca:	bf00      	nop
 800bbcc:	371c      	adds	r7, #28
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bc80      	pop	{r7}
 800bbd2:	4770      	bx	lr

0800bbd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b087      	sub	sp, #28
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6a1b      	ldr	r3, [r3, #32]
 800bbe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	f023 0210 	bic.w	r2, r3, #16
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	031b      	lsls	r3, r3, #12
 800bc04:	693a      	ldr	r2, [r7, #16]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	011b      	lsls	r3, r3, #4
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	693a      	ldr	r2, [r7, #16]
 800bc20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	621a      	str	r2, [r3, #32]
}
 800bc28:	bf00      	nop
 800bc2a:	371c      	adds	r7, #28
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bc80      	pop	{r7}
 800bc30:	4770      	bx	lr

0800bc32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc32:	b480      	push	{r7}
 800bc34:	b085      	sub	sp, #20
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
 800bc3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	f043 0307 	orr.w	r3, r3, #7
 800bc54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	609a      	str	r2, [r3, #8]
}
 800bc5c:	bf00      	nop
 800bc5e:	3714      	adds	r7, #20
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bc80      	pop	{r7}
 800bc64:	4770      	bx	lr

0800bc66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b087      	sub	sp, #28
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	60f8      	str	r0, [r7, #12]
 800bc6e:	60b9      	str	r1, [r7, #8]
 800bc70:	607a      	str	r2, [r7, #4]
 800bc72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	021a      	lsls	r2, r3, #8
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	431a      	orrs	r2, r3
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	4313      	orrs	r3, r2
 800bc92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	609a      	str	r2, [r3, #8]
}
 800bc9a:	bf00      	nop
 800bc9c:	371c      	adds	r7, #28
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bc80      	pop	{r7}
 800bca2:	4770      	bx	lr

0800bca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d101      	bne.n	800bcbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bcb8:	2302      	movs	r3, #2
 800bcba:	e050      	b.n	800bd5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2202      	movs	r2, #2
 800bcc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a1b      	ldr	r2, [pc, #108]	; (800bd68 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d018      	beq.n	800bd32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a19      	ldr	r2, [pc, #100]	; (800bd6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d013      	beq.n	800bd32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd12:	d00e      	beq.n	800bd32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a15      	ldr	r2, [pc, #84]	; (800bd70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d009      	beq.n	800bd32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a14      	ldr	r2, [pc, #80]	; (800bd74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d004      	beq.n	800bd32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a12      	ldr	r2, [pc, #72]	; (800bd78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d10c      	bne.n	800bd4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68ba      	ldr	r2, [r7, #8]
 800bd4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3714      	adds	r7, #20
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bc80      	pop	{r7}
 800bd66:	4770      	bx	lr
 800bd68:	40012c00 	.word	0x40012c00
 800bd6c:	40013400 	.word	0x40013400
 800bd70:	40000400 	.word	0x40000400
 800bd74:	40000800 	.word	0x40000800
 800bd78:	40000c00 	.word	0x40000c00

0800bd7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd84:	bf00      	nop
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bc80      	pop	{r7}
 800bd8c:	4770      	bx	lr

0800bd8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b083      	sub	sp, #12
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd96:	bf00      	nop
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bc80      	pop	{r7}
 800bd9e:	4770      	bx	lr

0800bda0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d101      	bne.n	800bdb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e042      	b.n	800be38 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d106      	bne.n	800bdcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f7fc fe1a 	bl	8008a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2224      	movs	r2, #36	; 0x24
 800bdd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	68da      	ldr	r2, [r3, #12]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bde2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 fcb5 	bl	800c754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	691a      	ldr	r2, [r3, #16]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bdf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	695a      	ldr	r2, [r3, #20]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68da      	ldr	r2, [r3, #12]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2220      	movs	r2, #32
 800be24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2220      	movs	r2, #32
 800be2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	4613      	mov	r3, r2
 800be4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2b20      	cmp	r3, #32
 800be58:	d121      	bne.n	800be9e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d002      	beq.n	800be66 <HAL_UART_Transmit_IT+0x26>
 800be60:	88fb      	ldrh	r3, [r7, #6]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d101      	bne.n	800be6a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800be66:	2301      	movs	r3, #1
 800be68:	e01a      	b.n	800bea0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	88fa      	ldrh	r2, [r7, #6]
 800be74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	88fa      	ldrh	r2, [r7, #6]
 800be7a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2200      	movs	r2, #0
 800be80:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2221      	movs	r2, #33	; 0x21
 800be86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68da      	ldr	r2, [r3, #12]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800be98:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	e000      	b.n	800bea0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800be9e:	2302      	movs	r3, #2
  }
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bc80      	pop	{r7}
 800bea8:	4770      	bx	lr
	...

0800beac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b0ba      	sub	sp, #232	; 0xe8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	695b      	ldr	r3, [r3, #20]
 800bece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bed2:	2300      	movs	r3, #0
 800bed4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bed8:	2300      	movs	r3, #0
 800beda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bee2:	f003 030f 	and.w	r3, r3, #15
 800bee6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800beea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d10f      	bne.n	800bf12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bef6:	f003 0320 	and.w	r3, r3, #32
 800befa:	2b00      	cmp	r3, #0
 800befc:	d009      	beq.n	800bf12 <HAL_UART_IRQHandler+0x66>
 800befe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf02:	f003 0320 	and.w	r3, r3, #32
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 fb63 	bl	800c5d6 <UART_Receive_IT>
      return;
 800bf10:	e25b      	b.n	800c3ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bf12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 80de 	beq.w	800c0d8 <HAL_UART_IRQHandler+0x22c>
 800bf1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf20:	f003 0301 	and.w	r3, r3, #1
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d106      	bne.n	800bf36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bf28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f000 80d1 	beq.w	800c0d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bf36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf3a:	f003 0301 	and.w	r3, r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00b      	beq.n	800bf5a <HAL_UART_IRQHandler+0xae>
 800bf42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d005      	beq.n	800bf5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf52:	f043 0201 	orr.w	r2, r3, #1
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf5e:	f003 0304 	and.w	r3, r3, #4
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00b      	beq.n	800bf7e <HAL_UART_IRQHandler+0xd2>
 800bf66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf6a:	f003 0301 	and.w	r3, r3, #1
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d005      	beq.n	800bf7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf76:	f043 0202 	orr.w	r2, r3, #2
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf82:	f003 0302 	and.w	r3, r3, #2
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00b      	beq.n	800bfa2 <HAL_UART_IRQHandler+0xf6>
 800bf8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf8e:	f003 0301 	and.w	r3, r3, #1
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d005      	beq.n	800bfa2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf9a:	f043 0204 	orr.w	r2, r3, #4
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bfa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfa6:	f003 0308 	and.w	r3, r3, #8
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d011      	beq.n	800bfd2 <HAL_UART_IRQHandler+0x126>
 800bfae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfb2:	f003 0320 	and.w	r3, r3, #32
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d105      	bne.n	800bfc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bfba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfbe:	f003 0301 	and.w	r3, r3, #1
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d005      	beq.n	800bfd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfca:	f043 0208 	orr.w	r2, r3, #8
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f000 81f2 	beq.w	800c3c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bfdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfe0:	f003 0320 	and.w	r3, r3, #32
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d008      	beq.n	800bffa <HAL_UART_IRQHandler+0x14e>
 800bfe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfec:	f003 0320 	and.w	r3, r3, #32
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d002      	beq.n	800bffa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 faee 	bl	800c5d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	695b      	ldr	r3, [r3, #20]
 800c000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c004:	2b00      	cmp	r3, #0
 800c006:	bf14      	ite	ne
 800c008:	2301      	movne	r3, #1
 800c00a:	2300      	moveq	r3, #0
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c016:	f003 0308 	and.w	r3, r3, #8
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d103      	bne.n	800c026 <HAL_UART_IRQHandler+0x17a>
 800c01e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c022:	2b00      	cmp	r3, #0
 800c024:	d04f      	beq.n	800c0c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f9f8 	bl	800c41c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c036:	2b00      	cmp	r3, #0
 800c038:	d041      	beq.n	800c0be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	3314      	adds	r3, #20
 800c040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c048:	e853 3f00 	ldrex	r3, [r3]
 800c04c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c050:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c058:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	3314      	adds	r3, #20
 800c062:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c066:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c06a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c072:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c076:	e841 2300 	strex	r3, r2, [r1]
 800c07a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c07e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1d9      	bne.n	800c03a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d013      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c092:	4a7e      	ldr	r2, [pc, #504]	; (800c28c <HAL_UART_IRQHandler+0x3e0>)
 800c094:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7fd f86c 	bl	8009178 <HAL_DMA_Abort_IT>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d016      	beq.n	800c0d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c0b0:	4610      	mov	r0, r2
 800c0b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0b4:	e00e      	b.n	800c0d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 f99c 	bl	800c3f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0bc:	e00a      	b.n	800c0d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 f998 	bl	800c3f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0c4:	e006      	b.n	800c0d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f994 	bl	800c3f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c0d2:	e175      	b.n	800c3c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0d4:	bf00      	nop
    return;
 800c0d6:	e173      	b.n	800c3c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	f040 814f 	bne.w	800c380 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0e6:	f003 0310 	and.w	r3, r3, #16
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f000 8148 	beq.w	800c380 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0f4:	f003 0310 	and.w	r3, r3, #16
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f000 8141 	beq.w	800c380 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c0fe:	2300      	movs	r3, #0
 800c100:	60bb      	str	r3, [r7, #8]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	60bb      	str	r3, [r7, #8]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	60bb      	str	r3, [r7, #8]
 800c112:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	695b      	ldr	r3, [r3, #20]
 800c11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c11e:	2b00      	cmp	r3, #0
 800c120:	f000 80b6 	beq.w	800c290 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c130:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c134:	2b00      	cmp	r3, #0
 800c136:	f000 8145 	beq.w	800c3c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c13e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c142:	429a      	cmp	r2, r3
 800c144:	f080 813e 	bcs.w	800c3c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c14e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c154:	699b      	ldr	r3, [r3, #24]
 800c156:	2b20      	cmp	r3, #32
 800c158:	f000 8088 	beq.w	800c26c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	330c      	adds	r3, #12
 800c162:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c166:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c16a:	e853 3f00 	ldrex	r3, [r3]
 800c16e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c172:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c17a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	330c      	adds	r3, #12
 800c184:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c188:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c18c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c190:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c194:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c198:	e841 2300 	strex	r3, r2, [r1]
 800c19c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c1a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d1d9      	bne.n	800c15c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	3314      	adds	r3, #20
 800c1ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1b2:	e853 3f00 	ldrex	r3, [r3]
 800c1b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c1b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1ba:	f023 0301 	bic.w	r3, r3, #1
 800c1be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	3314      	adds	r3, #20
 800c1c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c1cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c1d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c1d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c1d8:	e841 2300 	strex	r3, r2, [r1]
 800c1dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c1de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1e1      	bne.n	800c1a8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	3314      	adds	r3, #20
 800c1ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1ee:	e853 3f00 	ldrex	r3, [r3]
 800c1f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c1f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	3314      	adds	r3, #20
 800c204:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c208:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c20a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c20e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c210:	e841 2300 	strex	r3, r2, [r1]
 800c214:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1e3      	bne.n	800c1e4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2220      	movs	r2, #32
 800c220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	330c      	adds	r3, #12
 800c230:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c234:	e853 3f00 	ldrex	r3, [r3]
 800c238:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c23a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c23c:	f023 0310 	bic.w	r3, r3, #16
 800c240:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	330c      	adds	r3, #12
 800c24a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c24e:	65ba      	str	r2, [r7, #88]	; 0x58
 800c250:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c252:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c254:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c256:	e841 2300 	strex	r3, r2, [r1]
 800c25a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c25c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1e3      	bne.n	800c22a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c266:	4618      	mov	r0, r3
 800c268:	f7fc ff4b 	bl	8009102 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2202      	movs	r2, #2
 800c270:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	b29b      	uxth	r3, r3
 800c280:	4619      	mov	r1, r3
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 f8bf 	bl	800c406 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c288:	e09c      	b.n	800c3c4 <HAL_UART_IRQHandler+0x518>
 800c28a:	bf00      	nop
 800c28c:	0800c4e1 	.word	0x0800c4e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c298:	b29b      	uxth	r3, r3
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f000 808e 	beq.w	800c3c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c2ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	f000 8089 	beq.w	800c3c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	330c      	adds	r3, #12
 800c2bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c0:	e853 3f00 	ldrex	r3, [r3]
 800c2c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	330c      	adds	r3, #12
 800c2d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c2da:	647a      	str	r2, [r7, #68]	; 0x44
 800c2dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c2e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2e2:	e841 2300 	strex	r3, r2, [r1]
 800c2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1e3      	bne.n	800c2b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	3314      	adds	r3, #20
 800c2f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f8:	e853 3f00 	ldrex	r3, [r3]
 800c2fc:	623b      	str	r3, [r7, #32]
   return(result);
 800c2fe:	6a3b      	ldr	r3, [r7, #32]
 800c300:	f023 0301 	bic.w	r3, r3, #1
 800c304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	3314      	adds	r3, #20
 800c30e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c312:	633a      	str	r2, [r7, #48]	; 0x30
 800c314:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c31a:	e841 2300 	strex	r3, r2, [r1]
 800c31e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c322:	2b00      	cmp	r3, #0
 800c324:	d1e3      	bne.n	800c2ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2220      	movs	r2, #32
 800c32a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	330c      	adds	r3, #12
 800c33a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	e853 3f00 	ldrex	r3, [r3]
 800c342:	60fb      	str	r3, [r7, #12]
   return(result);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f023 0310 	bic.w	r3, r3, #16
 800c34a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	330c      	adds	r3, #12
 800c354:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c358:	61fa      	str	r2, [r7, #28]
 800c35a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35c:	69b9      	ldr	r1, [r7, #24]
 800c35e:	69fa      	ldr	r2, [r7, #28]
 800c360:	e841 2300 	strex	r3, r2, [r1]
 800c364:	617b      	str	r3, [r7, #20]
   return(result);
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1e3      	bne.n	800c334 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2202      	movs	r2, #2
 800c370:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c372:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c376:	4619      	mov	r1, r3
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 f844 	bl	800c406 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c37e:	e023      	b.n	800c3c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d009      	beq.n	800c3a0 <HAL_UART_IRQHandler+0x4f4>
 800c38c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c394:	2b00      	cmp	r3, #0
 800c396:	d003      	beq.n	800c3a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 f8b5 	bl	800c508 <UART_Transmit_IT>
    return;
 800c39e:	e014      	b.n	800c3ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c3a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00e      	beq.n	800c3ca <HAL_UART_IRQHandler+0x51e>
 800c3ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d008      	beq.n	800c3ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 f8f4 	bl	800c5a6 <UART_EndTransmit_IT>
    return;
 800c3be:	e004      	b.n	800c3ca <HAL_UART_IRQHandler+0x51e>
    return;
 800c3c0:	bf00      	nop
 800c3c2:	e002      	b.n	800c3ca <HAL_UART_IRQHandler+0x51e>
      return;
 800c3c4:	bf00      	nop
 800c3c6:	e000      	b.n	800c3ca <HAL_UART_IRQHandler+0x51e>
      return;
 800c3c8:	bf00      	nop
  }
}
 800c3ca:	37e8      	adds	r7, #232	; 0xe8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bc80      	pop	{r7}
 800c3e0:	4770      	bx	lr

0800c3e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3e2:	b480      	push	{r7}
 800c3e4:	b083      	sub	sp, #12
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c3ea:	bf00      	nop
 800c3ec:	370c      	adds	r7, #12
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bc80      	pop	{r7}
 800c3f2:	4770      	bx	lr

0800c3f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c3fc:	bf00      	nop
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	bc80      	pop	{r7}
 800c404:	4770      	bx	lr

0800c406 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c406:	b480      	push	{r7}
 800c408:	b083      	sub	sp, #12
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	460b      	mov	r3, r1
 800c410:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c412:	bf00      	nop
 800c414:	370c      	adds	r7, #12
 800c416:	46bd      	mov	sp, r7
 800c418:	bc80      	pop	{r7}
 800c41a:	4770      	bx	lr

0800c41c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b095      	sub	sp, #84	; 0x54
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	330c      	adds	r3, #12
 800c42a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42e:	e853 3f00 	ldrex	r3, [r3]
 800c432:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c436:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c43a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	330c      	adds	r3, #12
 800c442:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c444:	643a      	str	r2, [r7, #64]	; 0x40
 800c446:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c448:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c44a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c44c:	e841 2300 	strex	r3, r2, [r1]
 800c450:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c454:	2b00      	cmp	r3, #0
 800c456:	d1e5      	bne.n	800c424 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3314      	adds	r3, #20
 800c45e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c460:	6a3b      	ldr	r3, [r7, #32]
 800c462:	e853 3f00 	ldrex	r3, [r3]
 800c466:	61fb      	str	r3, [r7, #28]
   return(result);
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	f023 0301 	bic.w	r3, r3, #1
 800c46e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	3314      	adds	r3, #20
 800c476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c478:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c47a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c47e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c480:	e841 2300 	strex	r3, r2, [r1]
 800c484:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1e5      	bne.n	800c458 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c490:	2b01      	cmp	r3, #1
 800c492:	d119      	bne.n	800c4c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	330c      	adds	r3, #12
 800c49a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	e853 3f00 	ldrex	r3, [r3]
 800c4a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	f023 0310 	bic.w	r3, r3, #16
 800c4aa:	647b      	str	r3, [r7, #68]	; 0x44
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	330c      	adds	r3, #12
 800c4b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4b4:	61ba      	str	r2, [r7, #24]
 800c4b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b8:	6979      	ldr	r1, [r7, #20]
 800c4ba:	69ba      	ldr	r2, [r7, #24]
 800c4bc:	e841 2300 	strex	r3, r2, [r1]
 800c4c0:	613b      	str	r3, [r7, #16]
   return(result);
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1e5      	bne.n	800c494 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2220      	movs	r2, #32
 800c4cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c4d6:	bf00      	nop
 800c4d8:	3754      	adds	r7, #84	; 0x54
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bc80      	pop	{r7}
 800c4de:	4770      	bx	lr

0800c4e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f7ff ff7a 	bl	800c3f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c500:	bf00      	nop
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c516:	b2db      	uxtb	r3, r3
 800c518:	2b21      	cmp	r3, #33	; 0x21
 800c51a:	d13e      	bne.n	800c59a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c524:	d114      	bne.n	800c550 <UART_Transmit_IT+0x48>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d110      	bne.n	800c550 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6a1b      	ldr	r3, [r3, #32]
 800c532:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	881b      	ldrh	r3, [r3, #0]
 800c538:	461a      	mov	r2, r3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c542:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6a1b      	ldr	r3, [r3, #32]
 800c548:	1c9a      	adds	r2, r3, #2
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	621a      	str	r2, [r3, #32]
 800c54e:	e008      	b.n	800c562 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6a1b      	ldr	r3, [r3, #32]
 800c554:	1c59      	adds	r1, r3, #1
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	6211      	str	r1, [r2, #32]
 800c55a:	781a      	ldrb	r2, [r3, #0]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c566:	b29b      	uxth	r3, r3
 800c568:	3b01      	subs	r3, #1
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	4619      	mov	r1, r3
 800c570:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c572:	2b00      	cmp	r3, #0
 800c574:	d10f      	bne.n	800c596 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	68da      	ldr	r2, [r3, #12]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c584:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68da      	ldr	r2, [r3, #12]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c594:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c596:	2300      	movs	r3, #0
 800c598:	e000      	b.n	800c59c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c59a:	2302      	movs	r3, #2
  }
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bc80      	pop	{r7}
 800c5a4:	4770      	bx	lr

0800c5a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b082      	sub	sp, #8
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68da      	ldr	r2, [r3, #12]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2220      	movs	r2, #32
 800c5c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f7ff ff02 	bl	800c3d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3708      	adds	r7, #8
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b08c      	sub	sp, #48	; 0x30
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	2b22      	cmp	r3, #34	; 0x22
 800c5e8:	f040 80ae 	bne.w	800c748 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	689b      	ldr	r3, [r3, #8]
 800c5f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5f4:	d117      	bne.n	800c626 <UART_Receive_IT+0x50>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d113      	bne.n	800c626 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c5fe:	2300      	movs	r3, #0
 800c600:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c606:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	b29b      	uxth	r3, r3
 800c610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c614:	b29a      	uxth	r2, r3
 800c616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c618:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c61e:	1c9a      	adds	r2, r3, #2
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	629a      	str	r2, [r3, #40]	; 0x28
 800c624:	e026      	b.n	800c674 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c62a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c62c:	2300      	movs	r3, #0
 800c62e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c638:	d007      	beq.n	800c64a <UART_Receive_IT+0x74>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d10a      	bne.n	800c658 <UART_Receive_IT+0x82>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	691b      	ldr	r3, [r3, #16]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d106      	bne.n	800c658 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	b2da      	uxtb	r2, r3
 800c652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c654:	701a      	strb	r2, [r3, #0]
 800c656:	e008      	b.n	800c66a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c664:	b2da      	uxtb	r2, r3
 800c666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c668:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c66e:	1c5a      	adds	r2, r3, #1
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c678:	b29b      	uxth	r3, r3
 800c67a:	3b01      	subs	r3, #1
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	4619      	mov	r1, r3
 800c682:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c684:	2b00      	cmp	r3, #0
 800c686:	d15d      	bne.n	800c744 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	68da      	ldr	r2, [r3, #12]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f022 0220 	bic.w	r2, r2, #32
 800c696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	68da      	ldr	r2, [r3, #12]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c6a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	695a      	ldr	r2, [r3, #20]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f022 0201 	bic.w	r2, r2, #1
 800c6b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2220      	movs	r2, #32
 800c6bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d135      	bne.n	800c73a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	330c      	adds	r3, #12
 800c6da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	e853 3f00 	ldrex	r3, [r3]
 800c6e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	f023 0310 	bic.w	r3, r3, #16
 800c6ea:	627b      	str	r3, [r7, #36]	; 0x24
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	330c      	adds	r3, #12
 800c6f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6f4:	623a      	str	r2, [r7, #32]
 800c6f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f8:	69f9      	ldr	r1, [r7, #28]
 800c6fa:	6a3a      	ldr	r2, [r7, #32]
 800c6fc:	e841 2300 	strex	r3, r2, [r1]
 800c700:	61bb      	str	r3, [r7, #24]
   return(result);
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d1e5      	bne.n	800c6d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f003 0310 	and.w	r3, r3, #16
 800c712:	2b10      	cmp	r3, #16
 800c714:	d10a      	bne.n	800c72c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c716:	2300      	movs	r3, #0
 800c718:	60fb      	str	r3, [r7, #12]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	60fb      	str	r3, [r7, #12]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	60fb      	str	r3, [r7, #12]
 800c72a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c730:	4619      	mov	r1, r3
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f7ff fe67 	bl	800c406 <HAL_UARTEx_RxEventCallback>
 800c738:	e002      	b.n	800c740 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f7ff fe51 	bl	800c3e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c740:	2300      	movs	r3, #0
 800c742:	e002      	b.n	800c74a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c744:	2300      	movs	r3, #0
 800c746:	e000      	b.n	800c74a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c748:	2302      	movs	r3, #2
  }
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3730      	adds	r7, #48	; 0x30
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
	...

0800c754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	68da      	ldr	r2, [r3, #12]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	430a      	orrs	r2, r1
 800c770:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	689a      	ldr	r2, [r3, #8]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	431a      	orrs	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	695b      	ldr	r3, [r3, #20]
 800c780:	4313      	orrs	r3, r2
 800c782:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c78e:	f023 030c 	bic.w	r3, r3, #12
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	6812      	ldr	r2, [r2, #0]
 800c796:	68b9      	ldr	r1, [r7, #8]
 800c798:	430b      	orrs	r3, r1
 800c79a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	699a      	ldr	r2, [r3, #24]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	430a      	orrs	r2, r1
 800c7b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a2c      	ldr	r2, [pc, #176]	; (800c868 <UART_SetConfig+0x114>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d103      	bne.n	800c7c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c7bc:	f7fe fe8c 	bl	800b4d8 <HAL_RCC_GetPCLK2Freq>
 800c7c0:	60f8      	str	r0, [r7, #12]
 800c7c2:	e002      	b.n	800c7ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c7c4:	f7fe fe74 	bl	800b4b0 <HAL_RCC_GetPCLK1Freq>
 800c7c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	4613      	mov	r3, r2
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4413      	add	r3, r2
 800c7d2:	009a      	lsls	r2, r3, #2
 800c7d4:	441a      	add	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7e0:	4a22      	ldr	r2, [pc, #136]	; (800c86c <UART_SetConfig+0x118>)
 800c7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7e6:	095b      	lsrs	r3, r3, #5
 800c7e8:	0119      	lsls	r1, r3, #4
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4413      	add	r3, r2
 800c7f2:	009a      	lsls	r2, r3, #2
 800c7f4:	441a      	add	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c800:	4b1a      	ldr	r3, [pc, #104]	; (800c86c <UART_SetConfig+0x118>)
 800c802:	fba3 0302 	umull	r0, r3, r3, r2
 800c806:	095b      	lsrs	r3, r3, #5
 800c808:	2064      	movs	r0, #100	; 0x64
 800c80a:	fb00 f303 	mul.w	r3, r0, r3
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	011b      	lsls	r3, r3, #4
 800c812:	3332      	adds	r3, #50	; 0x32
 800c814:	4a15      	ldr	r2, [pc, #84]	; (800c86c <UART_SetConfig+0x118>)
 800c816:	fba2 2303 	umull	r2, r3, r2, r3
 800c81a:	095b      	lsrs	r3, r3, #5
 800c81c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c820:	4419      	add	r1, r3
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	4613      	mov	r3, r2
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	4413      	add	r3, r2
 800c82a:	009a      	lsls	r2, r3, #2
 800c82c:	441a      	add	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	fbb2 f2f3 	udiv	r2, r2, r3
 800c838:	4b0c      	ldr	r3, [pc, #48]	; (800c86c <UART_SetConfig+0x118>)
 800c83a:	fba3 0302 	umull	r0, r3, r3, r2
 800c83e:	095b      	lsrs	r3, r3, #5
 800c840:	2064      	movs	r0, #100	; 0x64
 800c842:	fb00 f303 	mul.w	r3, r0, r3
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	011b      	lsls	r3, r3, #4
 800c84a:	3332      	adds	r3, #50	; 0x32
 800c84c:	4a07      	ldr	r2, [pc, #28]	; (800c86c <UART_SetConfig+0x118>)
 800c84e:	fba2 2303 	umull	r2, r3, r2, r3
 800c852:	095b      	lsrs	r3, r3, #5
 800c854:	f003 020f 	and.w	r2, r3, #15
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	440a      	add	r2, r1
 800c85e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c860:	bf00      	nop
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	40013800 	.word	0x40013800
 800c86c:	51eb851f 	.word	0x51eb851f

0800c870 <__itoa>:
 800c870:	1e93      	subs	r3, r2, #2
 800c872:	2b22      	cmp	r3, #34	; 0x22
 800c874:	b510      	push	{r4, lr}
 800c876:	460c      	mov	r4, r1
 800c878:	d904      	bls.n	800c884 <__itoa+0x14>
 800c87a:	2300      	movs	r3, #0
 800c87c:	461c      	mov	r4, r3
 800c87e:	700b      	strb	r3, [r1, #0]
 800c880:	4620      	mov	r0, r4
 800c882:	bd10      	pop	{r4, pc}
 800c884:	2a0a      	cmp	r2, #10
 800c886:	d109      	bne.n	800c89c <__itoa+0x2c>
 800c888:	2800      	cmp	r0, #0
 800c88a:	da07      	bge.n	800c89c <__itoa+0x2c>
 800c88c:	232d      	movs	r3, #45	; 0x2d
 800c88e:	700b      	strb	r3, [r1, #0]
 800c890:	2101      	movs	r1, #1
 800c892:	4240      	negs	r0, r0
 800c894:	4421      	add	r1, r4
 800c896:	f000 f8b9 	bl	800ca0c <__utoa>
 800c89a:	e7f1      	b.n	800c880 <__itoa+0x10>
 800c89c:	2100      	movs	r1, #0
 800c89e:	e7f9      	b.n	800c894 <__itoa+0x24>

0800c8a0 <itoa>:
 800c8a0:	f7ff bfe6 	b.w	800c870 <__itoa>

0800c8a4 <malloc>:
 800c8a4:	4b02      	ldr	r3, [pc, #8]	; (800c8b0 <malloc+0xc>)
 800c8a6:	4601      	mov	r1, r0
 800c8a8:	6818      	ldr	r0, [r3, #0]
 800c8aa:	f000 b823 	b.w	800c8f4 <_malloc_r>
 800c8ae:	bf00      	nop
 800c8b0:	200009a4 	.word	0x200009a4

0800c8b4 <sbrk_aligned>:
 800c8b4:	b570      	push	{r4, r5, r6, lr}
 800c8b6:	4e0e      	ldr	r6, [pc, #56]	; (800c8f0 <sbrk_aligned+0x3c>)
 800c8b8:	460c      	mov	r4, r1
 800c8ba:	6831      	ldr	r1, [r6, #0]
 800c8bc:	4605      	mov	r5, r0
 800c8be:	b911      	cbnz	r1, 800c8c6 <sbrk_aligned+0x12>
 800c8c0:	f000 f91e 	bl	800cb00 <_sbrk_r>
 800c8c4:	6030      	str	r0, [r6, #0]
 800c8c6:	4621      	mov	r1, r4
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	f000 f919 	bl	800cb00 <_sbrk_r>
 800c8ce:	1c43      	adds	r3, r0, #1
 800c8d0:	d00a      	beq.n	800c8e8 <sbrk_aligned+0x34>
 800c8d2:	1cc4      	adds	r4, r0, #3
 800c8d4:	f024 0403 	bic.w	r4, r4, #3
 800c8d8:	42a0      	cmp	r0, r4
 800c8da:	d007      	beq.n	800c8ec <sbrk_aligned+0x38>
 800c8dc:	1a21      	subs	r1, r4, r0
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f000 f90e 	bl	800cb00 <_sbrk_r>
 800c8e4:	3001      	adds	r0, #1
 800c8e6:	d101      	bne.n	800c8ec <sbrk_aligned+0x38>
 800c8e8:	f04f 34ff 	mov.w	r4, #4294967295
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	bd70      	pop	{r4, r5, r6, pc}
 800c8f0:	20000e2c 	.word	0x20000e2c

0800c8f4 <_malloc_r>:
 800c8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8f8:	1ccd      	adds	r5, r1, #3
 800c8fa:	f025 0503 	bic.w	r5, r5, #3
 800c8fe:	3508      	adds	r5, #8
 800c900:	2d0c      	cmp	r5, #12
 800c902:	bf38      	it	cc
 800c904:	250c      	movcc	r5, #12
 800c906:	2d00      	cmp	r5, #0
 800c908:	4607      	mov	r7, r0
 800c90a:	db01      	blt.n	800c910 <_malloc_r+0x1c>
 800c90c:	42a9      	cmp	r1, r5
 800c90e:	d905      	bls.n	800c91c <_malloc_r+0x28>
 800c910:	230c      	movs	r3, #12
 800c912:	2600      	movs	r6, #0
 800c914:	603b      	str	r3, [r7, #0]
 800c916:	4630      	mov	r0, r6
 800c918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c91c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c9f0 <_malloc_r+0xfc>
 800c920:	f000 f868 	bl	800c9f4 <__malloc_lock>
 800c924:	f8d8 3000 	ldr.w	r3, [r8]
 800c928:	461c      	mov	r4, r3
 800c92a:	bb5c      	cbnz	r4, 800c984 <_malloc_r+0x90>
 800c92c:	4629      	mov	r1, r5
 800c92e:	4638      	mov	r0, r7
 800c930:	f7ff ffc0 	bl	800c8b4 <sbrk_aligned>
 800c934:	1c43      	adds	r3, r0, #1
 800c936:	4604      	mov	r4, r0
 800c938:	d155      	bne.n	800c9e6 <_malloc_r+0xf2>
 800c93a:	f8d8 4000 	ldr.w	r4, [r8]
 800c93e:	4626      	mov	r6, r4
 800c940:	2e00      	cmp	r6, #0
 800c942:	d145      	bne.n	800c9d0 <_malloc_r+0xdc>
 800c944:	2c00      	cmp	r4, #0
 800c946:	d048      	beq.n	800c9da <_malloc_r+0xe6>
 800c948:	6823      	ldr	r3, [r4, #0]
 800c94a:	4631      	mov	r1, r6
 800c94c:	4638      	mov	r0, r7
 800c94e:	eb04 0903 	add.w	r9, r4, r3
 800c952:	f000 f8d5 	bl	800cb00 <_sbrk_r>
 800c956:	4581      	cmp	r9, r0
 800c958:	d13f      	bne.n	800c9da <_malloc_r+0xe6>
 800c95a:	6821      	ldr	r1, [r4, #0]
 800c95c:	4638      	mov	r0, r7
 800c95e:	1a6d      	subs	r5, r5, r1
 800c960:	4629      	mov	r1, r5
 800c962:	f7ff ffa7 	bl	800c8b4 <sbrk_aligned>
 800c966:	3001      	adds	r0, #1
 800c968:	d037      	beq.n	800c9da <_malloc_r+0xe6>
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	442b      	add	r3, r5
 800c96e:	6023      	str	r3, [r4, #0]
 800c970:	f8d8 3000 	ldr.w	r3, [r8]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d038      	beq.n	800c9ea <_malloc_r+0xf6>
 800c978:	685a      	ldr	r2, [r3, #4]
 800c97a:	42a2      	cmp	r2, r4
 800c97c:	d12b      	bne.n	800c9d6 <_malloc_r+0xe2>
 800c97e:	2200      	movs	r2, #0
 800c980:	605a      	str	r2, [r3, #4]
 800c982:	e00f      	b.n	800c9a4 <_malloc_r+0xb0>
 800c984:	6822      	ldr	r2, [r4, #0]
 800c986:	1b52      	subs	r2, r2, r5
 800c988:	d41f      	bmi.n	800c9ca <_malloc_r+0xd6>
 800c98a:	2a0b      	cmp	r2, #11
 800c98c:	d917      	bls.n	800c9be <_malloc_r+0xca>
 800c98e:	1961      	adds	r1, r4, r5
 800c990:	42a3      	cmp	r3, r4
 800c992:	6025      	str	r5, [r4, #0]
 800c994:	bf18      	it	ne
 800c996:	6059      	strne	r1, [r3, #4]
 800c998:	6863      	ldr	r3, [r4, #4]
 800c99a:	bf08      	it	eq
 800c99c:	f8c8 1000 	streq.w	r1, [r8]
 800c9a0:	5162      	str	r2, [r4, r5]
 800c9a2:	604b      	str	r3, [r1, #4]
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	f104 060b 	add.w	r6, r4, #11
 800c9aa:	f000 f829 	bl	800ca00 <__malloc_unlock>
 800c9ae:	f026 0607 	bic.w	r6, r6, #7
 800c9b2:	1d23      	adds	r3, r4, #4
 800c9b4:	1af2      	subs	r2, r6, r3
 800c9b6:	d0ae      	beq.n	800c916 <_malloc_r+0x22>
 800c9b8:	1b9b      	subs	r3, r3, r6
 800c9ba:	50a3      	str	r3, [r4, r2]
 800c9bc:	e7ab      	b.n	800c916 <_malloc_r+0x22>
 800c9be:	42a3      	cmp	r3, r4
 800c9c0:	6862      	ldr	r2, [r4, #4]
 800c9c2:	d1dd      	bne.n	800c980 <_malloc_r+0x8c>
 800c9c4:	f8c8 2000 	str.w	r2, [r8]
 800c9c8:	e7ec      	b.n	800c9a4 <_malloc_r+0xb0>
 800c9ca:	4623      	mov	r3, r4
 800c9cc:	6864      	ldr	r4, [r4, #4]
 800c9ce:	e7ac      	b.n	800c92a <_malloc_r+0x36>
 800c9d0:	4634      	mov	r4, r6
 800c9d2:	6876      	ldr	r6, [r6, #4]
 800c9d4:	e7b4      	b.n	800c940 <_malloc_r+0x4c>
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	e7cc      	b.n	800c974 <_malloc_r+0x80>
 800c9da:	230c      	movs	r3, #12
 800c9dc:	4638      	mov	r0, r7
 800c9de:	603b      	str	r3, [r7, #0]
 800c9e0:	f000 f80e 	bl	800ca00 <__malloc_unlock>
 800c9e4:	e797      	b.n	800c916 <_malloc_r+0x22>
 800c9e6:	6025      	str	r5, [r4, #0]
 800c9e8:	e7dc      	b.n	800c9a4 <_malloc_r+0xb0>
 800c9ea:	605b      	str	r3, [r3, #4]
 800c9ec:	deff      	udf	#255	; 0xff
 800c9ee:	bf00      	nop
 800c9f0:	20000e28 	.word	0x20000e28

0800c9f4 <__malloc_lock>:
 800c9f4:	4801      	ldr	r0, [pc, #4]	; (800c9fc <__malloc_lock+0x8>)
 800c9f6:	f000 b8bd 	b.w	800cb74 <__retarget_lock_acquire_recursive>
 800c9fa:	bf00      	nop
 800c9fc:	20000f6c 	.word	0x20000f6c

0800ca00 <__malloc_unlock>:
 800ca00:	4801      	ldr	r0, [pc, #4]	; (800ca08 <__malloc_unlock+0x8>)
 800ca02:	f000 b8b8 	b.w	800cb76 <__retarget_lock_release_recursive>
 800ca06:	bf00      	nop
 800ca08:	20000f6c 	.word	0x20000f6c

0800ca0c <__utoa>:
 800ca0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca0e:	b08b      	sub	sp, #44	; 0x2c
 800ca10:	4605      	mov	r5, r0
 800ca12:	460b      	mov	r3, r1
 800ca14:	466e      	mov	r6, sp
 800ca16:	4c1d      	ldr	r4, [pc, #116]	; (800ca8c <__utoa+0x80>)
 800ca18:	f104 0c20 	add.w	ip, r4, #32
 800ca1c:	4637      	mov	r7, r6
 800ca1e:	6820      	ldr	r0, [r4, #0]
 800ca20:	6861      	ldr	r1, [r4, #4]
 800ca22:	3408      	adds	r4, #8
 800ca24:	c703      	stmia	r7!, {r0, r1}
 800ca26:	4564      	cmp	r4, ip
 800ca28:	463e      	mov	r6, r7
 800ca2a:	d1f7      	bne.n	800ca1c <__utoa+0x10>
 800ca2c:	7921      	ldrb	r1, [r4, #4]
 800ca2e:	6820      	ldr	r0, [r4, #0]
 800ca30:	7139      	strb	r1, [r7, #4]
 800ca32:	1e91      	subs	r1, r2, #2
 800ca34:	2922      	cmp	r1, #34	; 0x22
 800ca36:	6038      	str	r0, [r7, #0]
 800ca38:	f04f 0100 	mov.w	r1, #0
 800ca3c:	d904      	bls.n	800ca48 <__utoa+0x3c>
 800ca3e:	7019      	strb	r1, [r3, #0]
 800ca40:	460b      	mov	r3, r1
 800ca42:	4618      	mov	r0, r3
 800ca44:	b00b      	add	sp, #44	; 0x2c
 800ca46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca48:	1e58      	subs	r0, r3, #1
 800ca4a:	4684      	mov	ip, r0
 800ca4c:	fbb5 f7f2 	udiv	r7, r5, r2
 800ca50:	fb02 5617 	mls	r6, r2, r7, r5
 800ca54:	3628      	adds	r6, #40	; 0x28
 800ca56:	446e      	add	r6, sp
 800ca58:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ca5c:	460c      	mov	r4, r1
 800ca5e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ca62:	462e      	mov	r6, r5
 800ca64:	42b2      	cmp	r2, r6
 800ca66:	463d      	mov	r5, r7
 800ca68:	f101 0101 	add.w	r1, r1, #1
 800ca6c:	d9ee      	bls.n	800ca4c <__utoa+0x40>
 800ca6e:	2200      	movs	r2, #0
 800ca70:	545a      	strb	r2, [r3, r1]
 800ca72:	1919      	adds	r1, r3, r4
 800ca74:	1aa5      	subs	r5, r4, r2
 800ca76:	42aa      	cmp	r2, r5
 800ca78:	dae3      	bge.n	800ca42 <__utoa+0x36>
 800ca7a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ca7e:	780e      	ldrb	r6, [r1, #0]
 800ca80:	3201      	adds	r2, #1
 800ca82:	7006      	strb	r6, [r0, #0]
 800ca84:	f801 5901 	strb.w	r5, [r1], #-1
 800ca88:	e7f4      	b.n	800ca74 <__utoa+0x68>
 800ca8a:	bf00      	nop
 800ca8c:	0800e14e 	.word	0x0800e14e

0800ca90 <siprintf>:
 800ca90:	b40e      	push	{r1, r2, r3}
 800ca92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca96:	b500      	push	{lr}
 800ca98:	b09c      	sub	sp, #112	; 0x70
 800ca9a:	ab1d      	add	r3, sp, #116	; 0x74
 800ca9c:	9002      	str	r0, [sp, #8]
 800ca9e:	9006      	str	r0, [sp, #24]
 800caa0:	9107      	str	r1, [sp, #28]
 800caa2:	9104      	str	r1, [sp, #16]
 800caa4:	4808      	ldr	r0, [pc, #32]	; (800cac8 <siprintf+0x38>)
 800caa6:	4909      	ldr	r1, [pc, #36]	; (800cacc <siprintf+0x3c>)
 800caa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800caac:	9105      	str	r1, [sp, #20]
 800caae:	6800      	ldr	r0, [r0, #0]
 800cab0:	a902      	add	r1, sp, #8
 800cab2:	9301      	str	r3, [sp, #4]
 800cab4:	f000 f918 	bl	800cce8 <_svfiprintf_r>
 800cab8:	2200      	movs	r2, #0
 800caba:	9b02      	ldr	r3, [sp, #8]
 800cabc:	701a      	strb	r2, [r3, #0]
 800cabe:	b01c      	add	sp, #112	; 0x70
 800cac0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cac4:	b003      	add	sp, #12
 800cac6:	4770      	bx	lr
 800cac8:	200009a4 	.word	0x200009a4
 800cacc:	ffff0208 	.word	0xffff0208

0800cad0 <memset>:
 800cad0:	4603      	mov	r3, r0
 800cad2:	4402      	add	r2, r0
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d100      	bne.n	800cada <memset+0xa>
 800cad8:	4770      	bx	lr
 800cada:	f803 1b01 	strb.w	r1, [r3], #1
 800cade:	e7f9      	b.n	800cad4 <memset+0x4>

0800cae0 <strcat>:
 800cae0:	4602      	mov	r2, r0
 800cae2:	b510      	push	{r4, lr}
 800cae4:	7814      	ldrb	r4, [r2, #0]
 800cae6:	4613      	mov	r3, r2
 800cae8:	3201      	adds	r2, #1
 800caea:	2c00      	cmp	r4, #0
 800caec:	d1fa      	bne.n	800cae4 <strcat+0x4>
 800caee:	3b01      	subs	r3, #1
 800caf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800caf4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caf8:	2a00      	cmp	r2, #0
 800cafa:	d1f9      	bne.n	800caf0 <strcat+0x10>
 800cafc:	bd10      	pop	{r4, pc}
	...

0800cb00 <_sbrk_r>:
 800cb00:	b538      	push	{r3, r4, r5, lr}
 800cb02:	2300      	movs	r3, #0
 800cb04:	4d05      	ldr	r5, [pc, #20]	; (800cb1c <_sbrk_r+0x1c>)
 800cb06:	4604      	mov	r4, r0
 800cb08:	4608      	mov	r0, r1
 800cb0a:	602b      	str	r3, [r5, #0]
 800cb0c:	f7fc f808 	bl	8008b20 <_sbrk>
 800cb10:	1c43      	adds	r3, r0, #1
 800cb12:	d102      	bne.n	800cb1a <_sbrk_r+0x1a>
 800cb14:	682b      	ldr	r3, [r5, #0]
 800cb16:	b103      	cbz	r3, 800cb1a <_sbrk_r+0x1a>
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	bd38      	pop	{r3, r4, r5, pc}
 800cb1c:	20000f68 	.word	0x20000f68

0800cb20 <__errno>:
 800cb20:	4b01      	ldr	r3, [pc, #4]	; (800cb28 <__errno+0x8>)
 800cb22:	6818      	ldr	r0, [r3, #0]
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	200009a4 	.word	0x200009a4

0800cb2c <__libc_init_array>:
 800cb2c:	b570      	push	{r4, r5, r6, lr}
 800cb2e:	2600      	movs	r6, #0
 800cb30:	4d0c      	ldr	r5, [pc, #48]	; (800cb64 <__libc_init_array+0x38>)
 800cb32:	4c0d      	ldr	r4, [pc, #52]	; (800cb68 <__libc_init_array+0x3c>)
 800cb34:	1b64      	subs	r4, r4, r5
 800cb36:	10a4      	asrs	r4, r4, #2
 800cb38:	42a6      	cmp	r6, r4
 800cb3a:	d109      	bne.n	800cb50 <__libc_init_array+0x24>
 800cb3c:	f000 fbc6 	bl	800d2cc <_init>
 800cb40:	2600      	movs	r6, #0
 800cb42:	4d0a      	ldr	r5, [pc, #40]	; (800cb6c <__libc_init_array+0x40>)
 800cb44:	4c0a      	ldr	r4, [pc, #40]	; (800cb70 <__libc_init_array+0x44>)
 800cb46:	1b64      	subs	r4, r4, r5
 800cb48:	10a4      	asrs	r4, r4, #2
 800cb4a:	42a6      	cmp	r6, r4
 800cb4c:	d105      	bne.n	800cb5a <__libc_init_array+0x2e>
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb54:	4798      	blx	r3
 800cb56:	3601      	adds	r6, #1
 800cb58:	e7ee      	b.n	800cb38 <__libc_init_array+0xc>
 800cb5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb5e:	4798      	blx	r3
 800cb60:	3601      	adds	r6, #1
 800cb62:	e7f2      	b.n	800cb4a <__libc_init_array+0x1e>
 800cb64:	0800e1a8 	.word	0x0800e1a8
 800cb68:	0800e1a8 	.word	0x0800e1a8
 800cb6c:	0800e1a8 	.word	0x0800e1a8
 800cb70:	0800e1ac 	.word	0x0800e1ac

0800cb74 <__retarget_lock_acquire_recursive>:
 800cb74:	4770      	bx	lr

0800cb76 <__retarget_lock_release_recursive>:
 800cb76:	4770      	bx	lr

0800cb78 <strcpy>:
 800cb78:	4603      	mov	r3, r0
 800cb7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb7e:	f803 2b01 	strb.w	r2, [r3], #1
 800cb82:	2a00      	cmp	r2, #0
 800cb84:	d1f9      	bne.n	800cb7a <strcpy+0x2>
 800cb86:	4770      	bx	lr

0800cb88 <memcpy>:
 800cb88:	440a      	add	r2, r1
 800cb8a:	4291      	cmp	r1, r2
 800cb8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb90:	d100      	bne.n	800cb94 <memcpy+0xc>
 800cb92:	4770      	bx	lr
 800cb94:	b510      	push	{r4, lr}
 800cb96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb9a:	4291      	cmp	r1, r2
 800cb9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cba0:	d1f9      	bne.n	800cb96 <memcpy+0xe>
 800cba2:	bd10      	pop	{r4, pc}

0800cba4 <_free_r>:
 800cba4:	b538      	push	{r3, r4, r5, lr}
 800cba6:	4605      	mov	r5, r0
 800cba8:	2900      	cmp	r1, #0
 800cbaa:	d040      	beq.n	800cc2e <_free_r+0x8a>
 800cbac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbb0:	1f0c      	subs	r4, r1, #4
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	bfb8      	it	lt
 800cbb6:	18e4      	addlt	r4, r4, r3
 800cbb8:	f7ff ff1c 	bl	800c9f4 <__malloc_lock>
 800cbbc:	4a1c      	ldr	r2, [pc, #112]	; (800cc30 <_free_r+0x8c>)
 800cbbe:	6813      	ldr	r3, [r2, #0]
 800cbc0:	b933      	cbnz	r3, 800cbd0 <_free_r+0x2c>
 800cbc2:	6063      	str	r3, [r4, #4]
 800cbc4:	6014      	str	r4, [r2, #0]
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbcc:	f7ff bf18 	b.w	800ca00 <__malloc_unlock>
 800cbd0:	42a3      	cmp	r3, r4
 800cbd2:	d908      	bls.n	800cbe6 <_free_r+0x42>
 800cbd4:	6820      	ldr	r0, [r4, #0]
 800cbd6:	1821      	adds	r1, r4, r0
 800cbd8:	428b      	cmp	r3, r1
 800cbda:	bf01      	itttt	eq
 800cbdc:	6819      	ldreq	r1, [r3, #0]
 800cbde:	685b      	ldreq	r3, [r3, #4]
 800cbe0:	1809      	addeq	r1, r1, r0
 800cbe2:	6021      	streq	r1, [r4, #0]
 800cbe4:	e7ed      	b.n	800cbc2 <_free_r+0x1e>
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	b10b      	cbz	r3, 800cbf0 <_free_r+0x4c>
 800cbec:	42a3      	cmp	r3, r4
 800cbee:	d9fa      	bls.n	800cbe6 <_free_r+0x42>
 800cbf0:	6811      	ldr	r1, [r2, #0]
 800cbf2:	1850      	adds	r0, r2, r1
 800cbf4:	42a0      	cmp	r0, r4
 800cbf6:	d10b      	bne.n	800cc10 <_free_r+0x6c>
 800cbf8:	6820      	ldr	r0, [r4, #0]
 800cbfa:	4401      	add	r1, r0
 800cbfc:	1850      	adds	r0, r2, r1
 800cbfe:	4283      	cmp	r3, r0
 800cc00:	6011      	str	r1, [r2, #0]
 800cc02:	d1e0      	bne.n	800cbc6 <_free_r+0x22>
 800cc04:	6818      	ldr	r0, [r3, #0]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	4408      	add	r0, r1
 800cc0a:	6010      	str	r0, [r2, #0]
 800cc0c:	6053      	str	r3, [r2, #4]
 800cc0e:	e7da      	b.n	800cbc6 <_free_r+0x22>
 800cc10:	d902      	bls.n	800cc18 <_free_r+0x74>
 800cc12:	230c      	movs	r3, #12
 800cc14:	602b      	str	r3, [r5, #0]
 800cc16:	e7d6      	b.n	800cbc6 <_free_r+0x22>
 800cc18:	6820      	ldr	r0, [r4, #0]
 800cc1a:	1821      	adds	r1, r4, r0
 800cc1c:	428b      	cmp	r3, r1
 800cc1e:	bf01      	itttt	eq
 800cc20:	6819      	ldreq	r1, [r3, #0]
 800cc22:	685b      	ldreq	r3, [r3, #4]
 800cc24:	1809      	addeq	r1, r1, r0
 800cc26:	6021      	streq	r1, [r4, #0]
 800cc28:	6063      	str	r3, [r4, #4]
 800cc2a:	6054      	str	r4, [r2, #4]
 800cc2c:	e7cb      	b.n	800cbc6 <_free_r+0x22>
 800cc2e:	bd38      	pop	{r3, r4, r5, pc}
 800cc30:	20000e28 	.word	0x20000e28

0800cc34 <__ssputs_r>:
 800cc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc38:	461f      	mov	r7, r3
 800cc3a:	688e      	ldr	r6, [r1, #8]
 800cc3c:	4682      	mov	sl, r0
 800cc3e:	42be      	cmp	r6, r7
 800cc40:	460c      	mov	r4, r1
 800cc42:	4690      	mov	r8, r2
 800cc44:	680b      	ldr	r3, [r1, #0]
 800cc46:	d82c      	bhi.n	800cca2 <__ssputs_r+0x6e>
 800cc48:	898a      	ldrh	r2, [r1, #12]
 800cc4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc4e:	d026      	beq.n	800cc9e <__ssputs_r+0x6a>
 800cc50:	6965      	ldr	r5, [r4, #20]
 800cc52:	6909      	ldr	r1, [r1, #16]
 800cc54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc58:	eba3 0901 	sub.w	r9, r3, r1
 800cc5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc60:	1c7b      	adds	r3, r7, #1
 800cc62:	444b      	add	r3, r9
 800cc64:	106d      	asrs	r5, r5, #1
 800cc66:	429d      	cmp	r5, r3
 800cc68:	bf38      	it	cc
 800cc6a:	461d      	movcc	r5, r3
 800cc6c:	0553      	lsls	r3, r2, #21
 800cc6e:	d527      	bpl.n	800ccc0 <__ssputs_r+0x8c>
 800cc70:	4629      	mov	r1, r5
 800cc72:	f7ff fe3f 	bl	800c8f4 <_malloc_r>
 800cc76:	4606      	mov	r6, r0
 800cc78:	b360      	cbz	r0, 800ccd4 <__ssputs_r+0xa0>
 800cc7a:	464a      	mov	r2, r9
 800cc7c:	6921      	ldr	r1, [r4, #16]
 800cc7e:	f7ff ff83 	bl	800cb88 <memcpy>
 800cc82:	89a3      	ldrh	r3, [r4, #12]
 800cc84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc8c:	81a3      	strh	r3, [r4, #12]
 800cc8e:	6126      	str	r6, [r4, #16]
 800cc90:	444e      	add	r6, r9
 800cc92:	6026      	str	r6, [r4, #0]
 800cc94:	463e      	mov	r6, r7
 800cc96:	6165      	str	r5, [r4, #20]
 800cc98:	eba5 0509 	sub.w	r5, r5, r9
 800cc9c:	60a5      	str	r5, [r4, #8]
 800cc9e:	42be      	cmp	r6, r7
 800cca0:	d900      	bls.n	800cca4 <__ssputs_r+0x70>
 800cca2:	463e      	mov	r6, r7
 800cca4:	4632      	mov	r2, r6
 800cca6:	4641      	mov	r1, r8
 800cca8:	6820      	ldr	r0, [r4, #0]
 800ccaa:	f000 faaf 	bl	800d20c <memmove>
 800ccae:	2000      	movs	r0, #0
 800ccb0:	68a3      	ldr	r3, [r4, #8]
 800ccb2:	1b9b      	subs	r3, r3, r6
 800ccb4:	60a3      	str	r3, [r4, #8]
 800ccb6:	6823      	ldr	r3, [r4, #0]
 800ccb8:	4433      	add	r3, r6
 800ccba:	6023      	str	r3, [r4, #0]
 800ccbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccc0:	462a      	mov	r2, r5
 800ccc2:	f000 facb 	bl	800d25c <_realloc_r>
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d1e0      	bne.n	800cc8e <__ssputs_r+0x5a>
 800cccc:	4650      	mov	r0, sl
 800ccce:	6921      	ldr	r1, [r4, #16]
 800ccd0:	f7ff ff68 	bl	800cba4 <_free_r>
 800ccd4:	230c      	movs	r3, #12
 800ccd6:	f8ca 3000 	str.w	r3, [sl]
 800ccda:	89a3      	ldrh	r3, [r4, #12]
 800ccdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cce4:	81a3      	strh	r3, [r4, #12]
 800cce6:	e7e9      	b.n	800ccbc <__ssputs_r+0x88>

0800cce8 <_svfiprintf_r>:
 800cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccec:	4698      	mov	r8, r3
 800ccee:	898b      	ldrh	r3, [r1, #12]
 800ccf0:	4607      	mov	r7, r0
 800ccf2:	061b      	lsls	r3, r3, #24
 800ccf4:	460d      	mov	r5, r1
 800ccf6:	4614      	mov	r4, r2
 800ccf8:	b09d      	sub	sp, #116	; 0x74
 800ccfa:	d50e      	bpl.n	800cd1a <_svfiprintf_r+0x32>
 800ccfc:	690b      	ldr	r3, [r1, #16]
 800ccfe:	b963      	cbnz	r3, 800cd1a <_svfiprintf_r+0x32>
 800cd00:	2140      	movs	r1, #64	; 0x40
 800cd02:	f7ff fdf7 	bl	800c8f4 <_malloc_r>
 800cd06:	6028      	str	r0, [r5, #0]
 800cd08:	6128      	str	r0, [r5, #16]
 800cd0a:	b920      	cbnz	r0, 800cd16 <_svfiprintf_r+0x2e>
 800cd0c:	230c      	movs	r3, #12
 800cd0e:	603b      	str	r3, [r7, #0]
 800cd10:	f04f 30ff 	mov.w	r0, #4294967295
 800cd14:	e0d0      	b.n	800ceb8 <_svfiprintf_r+0x1d0>
 800cd16:	2340      	movs	r3, #64	; 0x40
 800cd18:	616b      	str	r3, [r5, #20]
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd1e:	2320      	movs	r3, #32
 800cd20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd24:	2330      	movs	r3, #48	; 0x30
 800cd26:	f04f 0901 	mov.w	r9, #1
 800cd2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd2e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ced0 <_svfiprintf_r+0x1e8>
 800cd32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd36:	4623      	mov	r3, r4
 800cd38:	469a      	mov	sl, r3
 800cd3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd3e:	b10a      	cbz	r2, 800cd44 <_svfiprintf_r+0x5c>
 800cd40:	2a25      	cmp	r2, #37	; 0x25
 800cd42:	d1f9      	bne.n	800cd38 <_svfiprintf_r+0x50>
 800cd44:	ebba 0b04 	subs.w	fp, sl, r4
 800cd48:	d00b      	beq.n	800cd62 <_svfiprintf_r+0x7a>
 800cd4a:	465b      	mov	r3, fp
 800cd4c:	4622      	mov	r2, r4
 800cd4e:	4629      	mov	r1, r5
 800cd50:	4638      	mov	r0, r7
 800cd52:	f7ff ff6f 	bl	800cc34 <__ssputs_r>
 800cd56:	3001      	adds	r0, #1
 800cd58:	f000 80a9 	beq.w	800ceae <_svfiprintf_r+0x1c6>
 800cd5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd5e:	445a      	add	r2, fp
 800cd60:	9209      	str	r2, [sp, #36]	; 0x24
 800cd62:	f89a 3000 	ldrb.w	r3, [sl]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f000 80a1 	beq.w	800ceae <_svfiprintf_r+0x1c6>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd76:	f10a 0a01 	add.w	sl, sl, #1
 800cd7a:	9304      	str	r3, [sp, #16]
 800cd7c:	9307      	str	r3, [sp, #28]
 800cd7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd82:	931a      	str	r3, [sp, #104]	; 0x68
 800cd84:	4654      	mov	r4, sl
 800cd86:	2205      	movs	r2, #5
 800cd88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd8c:	4850      	ldr	r0, [pc, #320]	; (800ced0 <_svfiprintf_r+0x1e8>)
 800cd8e:	f000 fa57 	bl	800d240 <memchr>
 800cd92:	9a04      	ldr	r2, [sp, #16]
 800cd94:	b9d8      	cbnz	r0, 800cdce <_svfiprintf_r+0xe6>
 800cd96:	06d0      	lsls	r0, r2, #27
 800cd98:	bf44      	itt	mi
 800cd9a:	2320      	movmi	r3, #32
 800cd9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cda0:	0711      	lsls	r1, r2, #28
 800cda2:	bf44      	itt	mi
 800cda4:	232b      	movmi	r3, #43	; 0x2b
 800cda6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdaa:	f89a 3000 	ldrb.w	r3, [sl]
 800cdae:	2b2a      	cmp	r3, #42	; 0x2a
 800cdb0:	d015      	beq.n	800cdde <_svfiprintf_r+0xf6>
 800cdb2:	4654      	mov	r4, sl
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	f04f 0c0a 	mov.w	ip, #10
 800cdba:	9a07      	ldr	r2, [sp, #28]
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdc2:	3b30      	subs	r3, #48	; 0x30
 800cdc4:	2b09      	cmp	r3, #9
 800cdc6:	d94d      	bls.n	800ce64 <_svfiprintf_r+0x17c>
 800cdc8:	b1b0      	cbz	r0, 800cdf8 <_svfiprintf_r+0x110>
 800cdca:	9207      	str	r2, [sp, #28]
 800cdcc:	e014      	b.n	800cdf8 <_svfiprintf_r+0x110>
 800cdce:	eba0 0308 	sub.w	r3, r0, r8
 800cdd2:	fa09 f303 	lsl.w	r3, r9, r3
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	46a2      	mov	sl, r4
 800cdda:	9304      	str	r3, [sp, #16]
 800cddc:	e7d2      	b.n	800cd84 <_svfiprintf_r+0x9c>
 800cdde:	9b03      	ldr	r3, [sp, #12]
 800cde0:	1d19      	adds	r1, r3, #4
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	9103      	str	r1, [sp, #12]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	bfbb      	ittet	lt
 800cdea:	425b      	neglt	r3, r3
 800cdec:	f042 0202 	orrlt.w	r2, r2, #2
 800cdf0:	9307      	strge	r3, [sp, #28]
 800cdf2:	9307      	strlt	r3, [sp, #28]
 800cdf4:	bfb8      	it	lt
 800cdf6:	9204      	strlt	r2, [sp, #16]
 800cdf8:	7823      	ldrb	r3, [r4, #0]
 800cdfa:	2b2e      	cmp	r3, #46	; 0x2e
 800cdfc:	d10c      	bne.n	800ce18 <_svfiprintf_r+0x130>
 800cdfe:	7863      	ldrb	r3, [r4, #1]
 800ce00:	2b2a      	cmp	r3, #42	; 0x2a
 800ce02:	d134      	bne.n	800ce6e <_svfiprintf_r+0x186>
 800ce04:	9b03      	ldr	r3, [sp, #12]
 800ce06:	3402      	adds	r4, #2
 800ce08:	1d1a      	adds	r2, r3, #4
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	9203      	str	r2, [sp, #12]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	bfb8      	it	lt
 800ce12:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce16:	9305      	str	r3, [sp, #20]
 800ce18:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ced4 <_svfiprintf_r+0x1ec>
 800ce1c:	2203      	movs	r2, #3
 800ce1e:	4650      	mov	r0, sl
 800ce20:	7821      	ldrb	r1, [r4, #0]
 800ce22:	f000 fa0d 	bl	800d240 <memchr>
 800ce26:	b138      	cbz	r0, 800ce38 <_svfiprintf_r+0x150>
 800ce28:	2240      	movs	r2, #64	; 0x40
 800ce2a:	9b04      	ldr	r3, [sp, #16]
 800ce2c:	eba0 000a 	sub.w	r0, r0, sl
 800ce30:	4082      	lsls	r2, r0
 800ce32:	4313      	orrs	r3, r2
 800ce34:	3401      	adds	r4, #1
 800ce36:	9304      	str	r3, [sp, #16]
 800ce38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce3c:	2206      	movs	r2, #6
 800ce3e:	4826      	ldr	r0, [pc, #152]	; (800ced8 <_svfiprintf_r+0x1f0>)
 800ce40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce44:	f000 f9fc 	bl	800d240 <memchr>
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d038      	beq.n	800cebe <_svfiprintf_r+0x1d6>
 800ce4c:	4b23      	ldr	r3, [pc, #140]	; (800cedc <_svfiprintf_r+0x1f4>)
 800ce4e:	bb1b      	cbnz	r3, 800ce98 <_svfiprintf_r+0x1b0>
 800ce50:	9b03      	ldr	r3, [sp, #12]
 800ce52:	3307      	adds	r3, #7
 800ce54:	f023 0307 	bic.w	r3, r3, #7
 800ce58:	3308      	adds	r3, #8
 800ce5a:	9303      	str	r3, [sp, #12]
 800ce5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce5e:	4433      	add	r3, r6
 800ce60:	9309      	str	r3, [sp, #36]	; 0x24
 800ce62:	e768      	b.n	800cd36 <_svfiprintf_r+0x4e>
 800ce64:	460c      	mov	r4, r1
 800ce66:	2001      	movs	r0, #1
 800ce68:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce6c:	e7a6      	b.n	800cdbc <_svfiprintf_r+0xd4>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	f04f 0c0a 	mov.w	ip, #10
 800ce74:	4619      	mov	r1, r3
 800ce76:	3401      	adds	r4, #1
 800ce78:	9305      	str	r3, [sp, #20]
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce80:	3a30      	subs	r2, #48	; 0x30
 800ce82:	2a09      	cmp	r2, #9
 800ce84:	d903      	bls.n	800ce8e <_svfiprintf_r+0x1a6>
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d0c6      	beq.n	800ce18 <_svfiprintf_r+0x130>
 800ce8a:	9105      	str	r1, [sp, #20]
 800ce8c:	e7c4      	b.n	800ce18 <_svfiprintf_r+0x130>
 800ce8e:	4604      	mov	r4, r0
 800ce90:	2301      	movs	r3, #1
 800ce92:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce96:	e7f0      	b.n	800ce7a <_svfiprintf_r+0x192>
 800ce98:	ab03      	add	r3, sp, #12
 800ce9a:	9300      	str	r3, [sp, #0]
 800ce9c:	462a      	mov	r2, r5
 800ce9e:	4638      	mov	r0, r7
 800cea0:	4b0f      	ldr	r3, [pc, #60]	; (800cee0 <_svfiprintf_r+0x1f8>)
 800cea2:	a904      	add	r1, sp, #16
 800cea4:	f3af 8000 	nop.w
 800cea8:	1c42      	adds	r2, r0, #1
 800ceaa:	4606      	mov	r6, r0
 800ceac:	d1d6      	bne.n	800ce5c <_svfiprintf_r+0x174>
 800ceae:	89ab      	ldrh	r3, [r5, #12]
 800ceb0:	065b      	lsls	r3, r3, #25
 800ceb2:	f53f af2d 	bmi.w	800cd10 <_svfiprintf_r+0x28>
 800ceb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ceb8:	b01d      	add	sp, #116	; 0x74
 800ceba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cebe:	ab03      	add	r3, sp, #12
 800cec0:	9300      	str	r3, [sp, #0]
 800cec2:	462a      	mov	r2, r5
 800cec4:	4638      	mov	r0, r7
 800cec6:	4b06      	ldr	r3, [pc, #24]	; (800cee0 <_svfiprintf_r+0x1f8>)
 800cec8:	a904      	add	r1, sp, #16
 800ceca:	f000 f87d 	bl	800cfc8 <_printf_i>
 800cece:	e7eb      	b.n	800cea8 <_svfiprintf_r+0x1c0>
 800ced0:	0800e173 	.word	0x0800e173
 800ced4:	0800e179 	.word	0x0800e179
 800ced8:	0800e17d 	.word	0x0800e17d
 800cedc:	00000000 	.word	0x00000000
 800cee0:	0800cc35 	.word	0x0800cc35

0800cee4 <_printf_common>:
 800cee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee8:	4616      	mov	r6, r2
 800ceea:	4699      	mov	r9, r3
 800ceec:	688a      	ldr	r2, [r1, #8]
 800ceee:	690b      	ldr	r3, [r1, #16]
 800cef0:	4607      	mov	r7, r0
 800cef2:	4293      	cmp	r3, r2
 800cef4:	bfb8      	it	lt
 800cef6:	4613      	movlt	r3, r2
 800cef8:	6033      	str	r3, [r6, #0]
 800cefa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cefe:	460c      	mov	r4, r1
 800cf00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf04:	b10a      	cbz	r2, 800cf0a <_printf_common+0x26>
 800cf06:	3301      	adds	r3, #1
 800cf08:	6033      	str	r3, [r6, #0]
 800cf0a:	6823      	ldr	r3, [r4, #0]
 800cf0c:	0699      	lsls	r1, r3, #26
 800cf0e:	bf42      	ittt	mi
 800cf10:	6833      	ldrmi	r3, [r6, #0]
 800cf12:	3302      	addmi	r3, #2
 800cf14:	6033      	strmi	r3, [r6, #0]
 800cf16:	6825      	ldr	r5, [r4, #0]
 800cf18:	f015 0506 	ands.w	r5, r5, #6
 800cf1c:	d106      	bne.n	800cf2c <_printf_common+0x48>
 800cf1e:	f104 0a19 	add.w	sl, r4, #25
 800cf22:	68e3      	ldr	r3, [r4, #12]
 800cf24:	6832      	ldr	r2, [r6, #0]
 800cf26:	1a9b      	subs	r3, r3, r2
 800cf28:	42ab      	cmp	r3, r5
 800cf2a:	dc2b      	bgt.n	800cf84 <_printf_common+0xa0>
 800cf2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf30:	1e13      	subs	r3, r2, #0
 800cf32:	6822      	ldr	r2, [r4, #0]
 800cf34:	bf18      	it	ne
 800cf36:	2301      	movne	r3, #1
 800cf38:	0692      	lsls	r2, r2, #26
 800cf3a:	d430      	bmi.n	800cf9e <_printf_common+0xba>
 800cf3c:	4649      	mov	r1, r9
 800cf3e:	4638      	mov	r0, r7
 800cf40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf44:	47c0      	blx	r8
 800cf46:	3001      	adds	r0, #1
 800cf48:	d023      	beq.n	800cf92 <_printf_common+0xae>
 800cf4a:	6823      	ldr	r3, [r4, #0]
 800cf4c:	6922      	ldr	r2, [r4, #16]
 800cf4e:	f003 0306 	and.w	r3, r3, #6
 800cf52:	2b04      	cmp	r3, #4
 800cf54:	bf14      	ite	ne
 800cf56:	2500      	movne	r5, #0
 800cf58:	6833      	ldreq	r3, [r6, #0]
 800cf5a:	f04f 0600 	mov.w	r6, #0
 800cf5e:	bf08      	it	eq
 800cf60:	68e5      	ldreq	r5, [r4, #12]
 800cf62:	f104 041a 	add.w	r4, r4, #26
 800cf66:	bf08      	it	eq
 800cf68:	1aed      	subeq	r5, r5, r3
 800cf6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cf6e:	bf08      	it	eq
 800cf70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf74:	4293      	cmp	r3, r2
 800cf76:	bfc4      	itt	gt
 800cf78:	1a9b      	subgt	r3, r3, r2
 800cf7a:	18ed      	addgt	r5, r5, r3
 800cf7c:	42b5      	cmp	r5, r6
 800cf7e:	d11a      	bne.n	800cfb6 <_printf_common+0xd2>
 800cf80:	2000      	movs	r0, #0
 800cf82:	e008      	b.n	800cf96 <_printf_common+0xb2>
 800cf84:	2301      	movs	r3, #1
 800cf86:	4652      	mov	r2, sl
 800cf88:	4649      	mov	r1, r9
 800cf8a:	4638      	mov	r0, r7
 800cf8c:	47c0      	blx	r8
 800cf8e:	3001      	adds	r0, #1
 800cf90:	d103      	bne.n	800cf9a <_printf_common+0xb6>
 800cf92:	f04f 30ff 	mov.w	r0, #4294967295
 800cf96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf9a:	3501      	adds	r5, #1
 800cf9c:	e7c1      	b.n	800cf22 <_printf_common+0x3e>
 800cf9e:	2030      	movs	r0, #48	; 0x30
 800cfa0:	18e1      	adds	r1, r4, r3
 800cfa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cfa6:	1c5a      	adds	r2, r3, #1
 800cfa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfac:	4422      	add	r2, r4
 800cfae:	3302      	adds	r3, #2
 800cfb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfb4:	e7c2      	b.n	800cf3c <_printf_common+0x58>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	4622      	mov	r2, r4
 800cfba:	4649      	mov	r1, r9
 800cfbc:	4638      	mov	r0, r7
 800cfbe:	47c0      	blx	r8
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	d0e6      	beq.n	800cf92 <_printf_common+0xae>
 800cfc4:	3601      	adds	r6, #1
 800cfc6:	e7d9      	b.n	800cf7c <_printf_common+0x98>

0800cfc8 <_printf_i>:
 800cfc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfcc:	7e0f      	ldrb	r7, [r1, #24]
 800cfce:	4691      	mov	r9, r2
 800cfd0:	2f78      	cmp	r7, #120	; 0x78
 800cfd2:	4680      	mov	r8, r0
 800cfd4:	460c      	mov	r4, r1
 800cfd6:	469a      	mov	sl, r3
 800cfd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cfda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cfde:	d807      	bhi.n	800cff0 <_printf_i+0x28>
 800cfe0:	2f62      	cmp	r7, #98	; 0x62
 800cfe2:	d80a      	bhi.n	800cffa <_printf_i+0x32>
 800cfe4:	2f00      	cmp	r7, #0
 800cfe6:	f000 80d5 	beq.w	800d194 <_printf_i+0x1cc>
 800cfea:	2f58      	cmp	r7, #88	; 0x58
 800cfec:	f000 80c1 	beq.w	800d172 <_printf_i+0x1aa>
 800cff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cff8:	e03a      	b.n	800d070 <_printf_i+0xa8>
 800cffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cffe:	2b15      	cmp	r3, #21
 800d000:	d8f6      	bhi.n	800cff0 <_printf_i+0x28>
 800d002:	a101      	add	r1, pc, #4	; (adr r1, 800d008 <_printf_i+0x40>)
 800d004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d008:	0800d061 	.word	0x0800d061
 800d00c:	0800d075 	.word	0x0800d075
 800d010:	0800cff1 	.word	0x0800cff1
 800d014:	0800cff1 	.word	0x0800cff1
 800d018:	0800cff1 	.word	0x0800cff1
 800d01c:	0800cff1 	.word	0x0800cff1
 800d020:	0800d075 	.word	0x0800d075
 800d024:	0800cff1 	.word	0x0800cff1
 800d028:	0800cff1 	.word	0x0800cff1
 800d02c:	0800cff1 	.word	0x0800cff1
 800d030:	0800cff1 	.word	0x0800cff1
 800d034:	0800d17b 	.word	0x0800d17b
 800d038:	0800d0a1 	.word	0x0800d0a1
 800d03c:	0800d135 	.word	0x0800d135
 800d040:	0800cff1 	.word	0x0800cff1
 800d044:	0800cff1 	.word	0x0800cff1
 800d048:	0800d19d 	.word	0x0800d19d
 800d04c:	0800cff1 	.word	0x0800cff1
 800d050:	0800d0a1 	.word	0x0800d0a1
 800d054:	0800cff1 	.word	0x0800cff1
 800d058:	0800cff1 	.word	0x0800cff1
 800d05c:	0800d13d 	.word	0x0800d13d
 800d060:	682b      	ldr	r3, [r5, #0]
 800d062:	1d1a      	adds	r2, r3, #4
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	602a      	str	r2, [r5, #0]
 800d068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d06c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d070:	2301      	movs	r3, #1
 800d072:	e0a0      	b.n	800d1b6 <_printf_i+0x1ee>
 800d074:	6820      	ldr	r0, [r4, #0]
 800d076:	682b      	ldr	r3, [r5, #0]
 800d078:	0607      	lsls	r7, r0, #24
 800d07a:	f103 0104 	add.w	r1, r3, #4
 800d07e:	6029      	str	r1, [r5, #0]
 800d080:	d501      	bpl.n	800d086 <_printf_i+0xbe>
 800d082:	681e      	ldr	r6, [r3, #0]
 800d084:	e003      	b.n	800d08e <_printf_i+0xc6>
 800d086:	0646      	lsls	r6, r0, #25
 800d088:	d5fb      	bpl.n	800d082 <_printf_i+0xba>
 800d08a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d08e:	2e00      	cmp	r6, #0
 800d090:	da03      	bge.n	800d09a <_printf_i+0xd2>
 800d092:	232d      	movs	r3, #45	; 0x2d
 800d094:	4276      	negs	r6, r6
 800d096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d09a:	230a      	movs	r3, #10
 800d09c:	4859      	ldr	r0, [pc, #356]	; (800d204 <_printf_i+0x23c>)
 800d09e:	e012      	b.n	800d0c6 <_printf_i+0xfe>
 800d0a0:	682b      	ldr	r3, [r5, #0]
 800d0a2:	6820      	ldr	r0, [r4, #0]
 800d0a4:	1d19      	adds	r1, r3, #4
 800d0a6:	6029      	str	r1, [r5, #0]
 800d0a8:	0605      	lsls	r5, r0, #24
 800d0aa:	d501      	bpl.n	800d0b0 <_printf_i+0xe8>
 800d0ac:	681e      	ldr	r6, [r3, #0]
 800d0ae:	e002      	b.n	800d0b6 <_printf_i+0xee>
 800d0b0:	0641      	lsls	r1, r0, #25
 800d0b2:	d5fb      	bpl.n	800d0ac <_printf_i+0xe4>
 800d0b4:	881e      	ldrh	r6, [r3, #0]
 800d0b6:	2f6f      	cmp	r7, #111	; 0x6f
 800d0b8:	bf0c      	ite	eq
 800d0ba:	2308      	moveq	r3, #8
 800d0bc:	230a      	movne	r3, #10
 800d0be:	4851      	ldr	r0, [pc, #324]	; (800d204 <_printf_i+0x23c>)
 800d0c0:	2100      	movs	r1, #0
 800d0c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0c6:	6865      	ldr	r5, [r4, #4]
 800d0c8:	2d00      	cmp	r5, #0
 800d0ca:	bfa8      	it	ge
 800d0cc:	6821      	ldrge	r1, [r4, #0]
 800d0ce:	60a5      	str	r5, [r4, #8]
 800d0d0:	bfa4      	itt	ge
 800d0d2:	f021 0104 	bicge.w	r1, r1, #4
 800d0d6:	6021      	strge	r1, [r4, #0]
 800d0d8:	b90e      	cbnz	r6, 800d0de <_printf_i+0x116>
 800d0da:	2d00      	cmp	r5, #0
 800d0dc:	d04b      	beq.n	800d176 <_printf_i+0x1ae>
 800d0de:	4615      	mov	r5, r2
 800d0e0:	fbb6 f1f3 	udiv	r1, r6, r3
 800d0e4:	fb03 6711 	mls	r7, r3, r1, r6
 800d0e8:	5dc7      	ldrb	r7, [r0, r7]
 800d0ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d0ee:	4637      	mov	r7, r6
 800d0f0:	42bb      	cmp	r3, r7
 800d0f2:	460e      	mov	r6, r1
 800d0f4:	d9f4      	bls.n	800d0e0 <_printf_i+0x118>
 800d0f6:	2b08      	cmp	r3, #8
 800d0f8:	d10b      	bne.n	800d112 <_printf_i+0x14a>
 800d0fa:	6823      	ldr	r3, [r4, #0]
 800d0fc:	07de      	lsls	r6, r3, #31
 800d0fe:	d508      	bpl.n	800d112 <_printf_i+0x14a>
 800d100:	6923      	ldr	r3, [r4, #16]
 800d102:	6861      	ldr	r1, [r4, #4]
 800d104:	4299      	cmp	r1, r3
 800d106:	bfde      	ittt	le
 800d108:	2330      	movle	r3, #48	; 0x30
 800d10a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d10e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d112:	1b52      	subs	r2, r2, r5
 800d114:	6122      	str	r2, [r4, #16]
 800d116:	464b      	mov	r3, r9
 800d118:	4621      	mov	r1, r4
 800d11a:	4640      	mov	r0, r8
 800d11c:	f8cd a000 	str.w	sl, [sp]
 800d120:	aa03      	add	r2, sp, #12
 800d122:	f7ff fedf 	bl	800cee4 <_printf_common>
 800d126:	3001      	adds	r0, #1
 800d128:	d14a      	bne.n	800d1c0 <_printf_i+0x1f8>
 800d12a:	f04f 30ff 	mov.w	r0, #4294967295
 800d12e:	b004      	add	sp, #16
 800d130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d134:	6823      	ldr	r3, [r4, #0]
 800d136:	f043 0320 	orr.w	r3, r3, #32
 800d13a:	6023      	str	r3, [r4, #0]
 800d13c:	2778      	movs	r7, #120	; 0x78
 800d13e:	4832      	ldr	r0, [pc, #200]	; (800d208 <_printf_i+0x240>)
 800d140:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d144:	6823      	ldr	r3, [r4, #0]
 800d146:	6829      	ldr	r1, [r5, #0]
 800d148:	061f      	lsls	r7, r3, #24
 800d14a:	f851 6b04 	ldr.w	r6, [r1], #4
 800d14e:	d402      	bmi.n	800d156 <_printf_i+0x18e>
 800d150:	065f      	lsls	r7, r3, #25
 800d152:	bf48      	it	mi
 800d154:	b2b6      	uxthmi	r6, r6
 800d156:	07df      	lsls	r7, r3, #31
 800d158:	bf48      	it	mi
 800d15a:	f043 0320 	orrmi.w	r3, r3, #32
 800d15e:	6029      	str	r1, [r5, #0]
 800d160:	bf48      	it	mi
 800d162:	6023      	strmi	r3, [r4, #0]
 800d164:	b91e      	cbnz	r6, 800d16e <_printf_i+0x1a6>
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	f023 0320 	bic.w	r3, r3, #32
 800d16c:	6023      	str	r3, [r4, #0]
 800d16e:	2310      	movs	r3, #16
 800d170:	e7a6      	b.n	800d0c0 <_printf_i+0xf8>
 800d172:	4824      	ldr	r0, [pc, #144]	; (800d204 <_printf_i+0x23c>)
 800d174:	e7e4      	b.n	800d140 <_printf_i+0x178>
 800d176:	4615      	mov	r5, r2
 800d178:	e7bd      	b.n	800d0f6 <_printf_i+0x12e>
 800d17a:	682b      	ldr	r3, [r5, #0]
 800d17c:	6826      	ldr	r6, [r4, #0]
 800d17e:	1d18      	adds	r0, r3, #4
 800d180:	6961      	ldr	r1, [r4, #20]
 800d182:	6028      	str	r0, [r5, #0]
 800d184:	0635      	lsls	r5, r6, #24
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	d501      	bpl.n	800d18e <_printf_i+0x1c6>
 800d18a:	6019      	str	r1, [r3, #0]
 800d18c:	e002      	b.n	800d194 <_printf_i+0x1cc>
 800d18e:	0670      	lsls	r0, r6, #25
 800d190:	d5fb      	bpl.n	800d18a <_printf_i+0x1c2>
 800d192:	8019      	strh	r1, [r3, #0]
 800d194:	2300      	movs	r3, #0
 800d196:	4615      	mov	r5, r2
 800d198:	6123      	str	r3, [r4, #16]
 800d19a:	e7bc      	b.n	800d116 <_printf_i+0x14e>
 800d19c:	682b      	ldr	r3, [r5, #0]
 800d19e:	2100      	movs	r1, #0
 800d1a0:	1d1a      	adds	r2, r3, #4
 800d1a2:	602a      	str	r2, [r5, #0]
 800d1a4:	681d      	ldr	r5, [r3, #0]
 800d1a6:	6862      	ldr	r2, [r4, #4]
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	f000 f849 	bl	800d240 <memchr>
 800d1ae:	b108      	cbz	r0, 800d1b4 <_printf_i+0x1ec>
 800d1b0:	1b40      	subs	r0, r0, r5
 800d1b2:	6060      	str	r0, [r4, #4]
 800d1b4:	6863      	ldr	r3, [r4, #4]
 800d1b6:	6123      	str	r3, [r4, #16]
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1be:	e7aa      	b.n	800d116 <_printf_i+0x14e>
 800d1c0:	462a      	mov	r2, r5
 800d1c2:	4649      	mov	r1, r9
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	6923      	ldr	r3, [r4, #16]
 800d1c8:	47d0      	blx	sl
 800d1ca:	3001      	adds	r0, #1
 800d1cc:	d0ad      	beq.n	800d12a <_printf_i+0x162>
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	079b      	lsls	r3, r3, #30
 800d1d2:	d413      	bmi.n	800d1fc <_printf_i+0x234>
 800d1d4:	68e0      	ldr	r0, [r4, #12]
 800d1d6:	9b03      	ldr	r3, [sp, #12]
 800d1d8:	4298      	cmp	r0, r3
 800d1da:	bfb8      	it	lt
 800d1dc:	4618      	movlt	r0, r3
 800d1de:	e7a6      	b.n	800d12e <_printf_i+0x166>
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	4632      	mov	r2, r6
 800d1e4:	4649      	mov	r1, r9
 800d1e6:	4640      	mov	r0, r8
 800d1e8:	47d0      	blx	sl
 800d1ea:	3001      	adds	r0, #1
 800d1ec:	d09d      	beq.n	800d12a <_printf_i+0x162>
 800d1ee:	3501      	adds	r5, #1
 800d1f0:	68e3      	ldr	r3, [r4, #12]
 800d1f2:	9903      	ldr	r1, [sp, #12]
 800d1f4:	1a5b      	subs	r3, r3, r1
 800d1f6:	42ab      	cmp	r3, r5
 800d1f8:	dcf2      	bgt.n	800d1e0 <_printf_i+0x218>
 800d1fa:	e7eb      	b.n	800d1d4 <_printf_i+0x20c>
 800d1fc:	2500      	movs	r5, #0
 800d1fe:	f104 0619 	add.w	r6, r4, #25
 800d202:	e7f5      	b.n	800d1f0 <_printf_i+0x228>
 800d204:	0800e184 	.word	0x0800e184
 800d208:	0800e195 	.word	0x0800e195

0800d20c <memmove>:
 800d20c:	4288      	cmp	r0, r1
 800d20e:	b510      	push	{r4, lr}
 800d210:	eb01 0402 	add.w	r4, r1, r2
 800d214:	d902      	bls.n	800d21c <memmove+0x10>
 800d216:	4284      	cmp	r4, r0
 800d218:	4623      	mov	r3, r4
 800d21a:	d807      	bhi.n	800d22c <memmove+0x20>
 800d21c:	1e43      	subs	r3, r0, #1
 800d21e:	42a1      	cmp	r1, r4
 800d220:	d008      	beq.n	800d234 <memmove+0x28>
 800d222:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d22a:	e7f8      	b.n	800d21e <memmove+0x12>
 800d22c:	4601      	mov	r1, r0
 800d22e:	4402      	add	r2, r0
 800d230:	428a      	cmp	r2, r1
 800d232:	d100      	bne.n	800d236 <memmove+0x2a>
 800d234:	bd10      	pop	{r4, pc}
 800d236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d23a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d23e:	e7f7      	b.n	800d230 <memmove+0x24>

0800d240 <memchr>:
 800d240:	4603      	mov	r3, r0
 800d242:	b510      	push	{r4, lr}
 800d244:	b2c9      	uxtb	r1, r1
 800d246:	4402      	add	r2, r0
 800d248:	4293      	cmp	r3, r2
 800d24a:	4618      	mov	r0, r3
 800d24c:	d101      	bne.n	800d252 <memchr+0x12>
 800d24e:	2000      	movs	r0, #0
 800d250:	e003      	b.n	800d25a <memchr+0x1a>
 800d252:	7804      	ldrb	r4, [r0, #0]
 800d254:	3301      	adds	r3, #1
 800d256:	428c      	cmp	r4, r1
 800d258:	d1f6      	bne.n	800d248 <memchr+0x8>
 800d25a:	bd10      	pop	{r4, pc}

0800d25c <_realloc_r>:
 800d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d260:	4680      	mov	r8, r0
 800d262:	4614      	mov	r4, r2
 800d264:	460e      	mov	r6, r1
 800d266:	b921      	cbnz	r1, 800d272 <_realloc_r+0x16>
 800d268:	4611      	mov	r1, r2
 800d26a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d26e:	f7ff bb41 	b.w	800c8f4 <_malloc_r>
 800d272:	b92a      	cbnz	r2, 800d280 <_realloc_r+0x24>
 800d274:	f7ff fc96 	bl	800cba4 <_free_r>
 800d278:	4625      	mov	r5, r4
 800d27a:	4628      	mov	r0, r5
 800d27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d280:	f000 f81b 	bl	800d2ba <_malloc_usable_size_r>
 800d284:	4284      	cmp	r4, r0
 800d286:	4607      	mov	r7, r0
 800d288:	d802      	bhi.n	800d290 <_realloc_r+0x34>
 800d28a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d28e:	d812      	bhi.n	800d2b6 <_realloc_r+0x5a>
 800d290:	4621      	mov	r1, r4
 800d292:	4640      	mov	r0, r8
 800d294:	f7ff fb2e 	bl	800c8f4 <_malloc_r>
 800d298:	4605      	mov	r5, r0
 800d29a:	2800      	cmp	r0, #0
 800d29c:	d0ed      	beq.n	800d27a <_realloc_r+0x1e>
 800d29e:	42bc      	cmp	r4, r7
 800d2a0:	4622      	mov	r2, r4
 800d2a2:	4631      	mov	r1, r6
 800d2a4:	bf28      	it	cs
 800d2a6:	463a      	movcs	r2, r7
 800d2a8:	f7ff fc6e 	bl	800cb88 <memcpy>
 800d2ac:	4631      	mov	r1, r6
 800d2ae:	4640      	mov	r0, r8
 800d2b0:	f7ff fc78 	bl	800cba4 <_free_r>
 800d2b4:	e7e1      	b.n	800d27a <_realloc_r+0x1e>
 800d2b6:	4635      	mov	r5, r6
 800d2b8:	e7df      	b.n	800d27a <_realloc_r+0x1e>

0800d2ba <_malloc_usable_size_r>:
 800d2ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2be:	1f18      	subs	r0, r3, #4
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	bfbc      	itt	lt
 800d2c4:	580b      	ldrlt	r3, [r1, r0]
 800d2c6:	18c0      	addlt	r0, r0, r3
 800d2c8:	4770      	bx	lr
	...

0800d2cc <_init>:
 800d2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ce:	bf00      	nop
 800d2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2d2:	bc08      	pop	{r3}
 800d2d4:	469e      	mov	lr, r3
 800d2d6:	4770      	bx	lr

0800d2d8 <_fini>:
 800d2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2da:	bf00      	nop
 800d2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2de:	bc08      	pop	{r3}
 800d2e0:	469e      	mov	lr, r3
 800d2e2:	4770      	bx	lr
