
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccd4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001034  0800ceb8  0800ceb8  0001ceb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800deec  0800deec  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800deec  0800deec  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800deec  0800deec  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800deec  0800deec  0001deec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800def0  0800def0  0001def0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800def4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000fc  0800dff0  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800dff0  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   000169a5  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003520  00000000  00000000  00036b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  0003a030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e56  00000000  00000000  0003b2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003c106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c351  00000000  00000000  000587ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee27  00000000  00000000  00074afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051f0  00000000  00000000  00113924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cea0 	.word	0x0800cea0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800cea0 	.word	0x0800cea0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b08c      	sub	sp, #48	; 0x30
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fc98 	bl	8009b84 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fb10 	bl	800887c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	200003a8 	.word	0x200003a8
 80004c0:	200001f9 	.word	0x200001f9
 80004c4:	20000221 	.word	0x20000221
 80004c8:	20000224 	.word	0x20000224
 80004cc:	20000225 	.word	0x20000225
 80004d0:	20000226 	.word	0x20000226
 80004d4:	20000227 	.word	0x20000227
 80004d8:	20000228 	.word	0x20000228
 80004dc:	20000229 	.word	0x20000229
 80004e0:	20000239 	.word	0x20000239
 80004e4:	2000022a 	.word	0x2000022a
 80004e8:	2000023a 	.word	0x2000023a
 80004ec:	2000022b 	.word	0x2000022b
 80004f0:	2000023b 	.word	0x2000023b
 80004f4:	2000022e 	.word	0x2000022e
 80004f8:	2000022f 	.word	0x2000022f
 80004fc:	20000230 	.word	0x20000230
 8000500:	20000231 	.word	0x20000231
 8000504:	20000232 	.word	0x20000232
 8000508:	20000233 	.word	0x20000233
 800050c:	20000234 	.word	0x20000234
 8000510:	20000235 	.word	0x20000235
 8000514:	20000236 	.word	0x20000236
 8000518:	20000237 	.word	0x20000237
 800051c:	20000238 	.word	0x20000238
 8000520:	2000023c 	.word	0x2000023c
 8000524:	2000023e 	.word	0x2000023e
 8000528:	2000021c 	.word	0x2000021c
 800052c:	2000021d 	.word	0x2000021d
 8000530:	2000021e 	.word	0x2000021e
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	2000021f 	.word	0x2000021f
 8000540:	20000241 	.word	0x20000241
 8000544:	2000023f 	.word	0x2000023f
 8000548:	2000022d 	.word	0x2000022d
 800054c:	20000240 	.word	0x20000240
 8000550:	2000022c 	.word	0x2000022c
 8000554:	20000242 	.word	0x20000242
 8000558:	20000243 	.word	0x20000243
 800055c:	20000244 	.word	0x20000244
 8000560:	20000245 	.word	0x20000245
 8000564:	20000246 	.word	0x20000246
 8000568:	20000247 	.word	0x20000247
 800056c:	20000248 	.word	0x20000248
 8000570:	20000249 	.word	0x20000249
 8000574:	2000024a 	.word	0x2000024a
 8000578:	2000024b 	.word	0x2000024b
 800057c:	200001f8 	.word	0x200001f8
	}

	if(kapi1AcSure>5) {
 8000580:	4ba4      	ldr	r3, [pc, #656]	; (8000814 <eepromKontrol+0x5e0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4ba2      	ldr	r3, [pc, #648]	; (8000814 <eepromKontrol+0x5e0>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4ba2      	ldr	r3, [pc, #648]	; (8000818 <eepromKontrol+0x5e4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4ba0      	ldr	r3, [pc, #640]	; (8000818 <eepromKontrol+0x5e4>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b9f      	ldr	r3, [pc, #636]	; (800081c <eepromKontrol+0x5e8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b9d      	ldr	r3, [pc, #628]	; (800081c <eepromKontrol+0x5e8>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b9d      	ldr	r3, [pc, #628]	; (8000820 <eepromKontrol+0x5ec>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b9b      	ldr	r3, [pc, #620]	; (8000820 <eepromKontrol+0x5ec>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b9a      	ldr	r3, [pc, #616]	; (8000824 <eepromKontrol+0x5f0>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b98      	ldr	r3, [pc, #608]	; (8000824 <eepromKontrol+0x5f0>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b98      	ldr	r3, [pc, #608]	; (8000828 <eepromKontrol+0x5f4>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b96      	ldr	r3, [pc, #600]	; (8000828 <eepromKontrol+0x5f4>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b95      	ldr	r3, [pc, #596]	; (800082c <eepromKontrol+0x5f8>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b93      	ldr	r3, [pc, #588]	; (800082c <eepromKontrol+0x5f8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b93      	ldr	r3, [pc, #588]	; (8000830 <eepromKontrol+0x5fc>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b91      	ldr	r3, [pc, #580]	; (8000830 <eepromKontrol+0x5fc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b90      	ldr	r3, [pc, #576]	; (8000834 <eepromKontrol+0x600>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b8e      	ldr	r3, [pc, #568]	; (8000834 <eepromKontrol+0x600>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b8e      	ldr	r3, [pc, #568]	; (8000838 <eepromKontrol+0x604>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b8c      	ldr	r3, [pc, #560]	; (8000838 <eepromKontrol+0x604>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b8b      	ldr	r3, [pc, #556]	; (800083c <eepromKontrol+0x608>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b89      	ldr	r3, [pc, #548]	; (800083c <eepromKontrol+0x608>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b89      	ldr	r3, [pc, #548]	; (8000840 <eepromKontrol+0x60c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b87      	ldr	r3, [pc, #540]	; (8000840 <eepromKontrol+0x60c>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b86      	ldr	r3, [pc, #536]	; (8000844 <eepromKontrol+0x610>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b84      	ldr	r3, [pc, #528]	; (8000844 <eepromKontrol+0x610>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b84      	ldr	r3, [pc, #528]	; (8000848 <eepromKontrol+0x614>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b82      	ldr	r3, [pc, #520]	; (8000848 <eepromKontrol+0x614>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b81      	ldr	r3, [pc, #516]	; (800084c <eepromKontrol+0x618>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b7f      	ldr	r3, [pc, #508]	; (800084c <eepromKontrol+0x618>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b7f      	ldr	r3, [pc, #508]	; (8000850 <eepromKontrol+0x61c>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b7d      	ldr	r3, [pc, #500]	; (8000850 <eepromKontrol+0x61c>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b7c      	ldr	r3, [pc, #496]	; (8000854 <eepromKontrol+0x620>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b7a      	ldr	r3, [pc, #488]	; (8000854 <eepromKontrol+0x620>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b7a      	ldr	r3, [pc, #488]	; (8000858 <eepromKontrol+0x624>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b78      	ldr	r3, [pc, #480]	; (8000858 <eepromKontrol+0x624>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b77      	ldr	r3, [pc, #476]	; (800085c <eepromKontrol+0x628>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b75      	ldr	r3, [pc, #468]	; (800085c <eepromKontrol+0x628>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b75      	ldr	r3, [pc, #468]	; (8000860 <eepromKontrol+0x62c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b73      	ldr	r3, [pc, #460]	; (8000860 <eepromKontrol+0x62c>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b72      	ldr	r3, [pc, #456]	; (8000864 <eepromKontrol+0x630>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b70      	ldr	r3, [pc, #448]	; (8000864 <eepromKontrol+0x630>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b70      	ldr	r3, [pc, #448]	; (8000868 <eepromKontrol+0x634>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b6e      	ldr	r3, [pc, #440]	; (8000868 <eepromKontrol+0x634>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineIDInt, &eepromData[idStartPos], 12);
 80006b4:	4b6d      	ldr	r3, [pc, #436]	; (800086c <eepromKontrol+0x638>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a6d      	ldr	r2, [pc, #436]	; (8000870 <eepromKontrol+0x63c>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b6d      	ldr	r3, [pc, #436]	; (8000874 <eepromKontrol+0x640>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	convertArrays(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 f924 	bl	8000918 <convertArrays>
	HAL_Delay(250);
 80006d0:	20fa      	movs	r0, #250	; 0xfa
 80006d2:	f008 f8d3 	bl	800887c <HAL_Delay>
	memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
 80006d6:	4b68      	ldr	r3, [pc, #416]	; (8000878 <eepromKontrol+0x644>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a65      	ldr	r2, [pc, #404]	; (8000870 <eepromKontrol+0x63c>)
 80006dc:	441a      	add	r2, r3
 80006de:	4b67      	ldr	r3, [pc, #412]	; (800087c <eepromKontrol+0x648>)
 80006e0:	6811      	ldr	r1, [r2, #0]
 80006e2:	6855      	ldr	r5, [r2, #4]
 80006e4:	6894      	ldr	r4, [r2, #8]
 80006e6:	68d0      	ldr	r0, [r2, #12]
 80006e8:	6019      	str	r1, [r3, #0]
 80006ea:	605d      	str	r5, [r3, #4]
 80006ec:	609c      	str	r4, [r3, #8]
 80006ee:	60d8      	str	r0, [r3, #12]
 80006f0:	6911      	ldr	r1, [r2, #16]
 80006f2:	6119      	str	r1, [r3, #16]
	convertArrays(2);
 80006f4:	2002      	movs	r0, #2
 80006f6:	f000 f90f 	bl	8000918 <convertArrays>
	HAL_Delay(250);
 80006fa:	20fa      	movs	r0, #250	; 0xfa
 80006fc:	f008 f8be 	bl	800887c <HAL_Delay>
	memcpy(wifiPassInt, &eepromData[passStartPos], 20);
 8000700:	4b5f      	ldr	r3, [pc, #380]	; (8000880 <eepromKontrol+0x64c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a5a      	ldr	r2, [pc, #360]	; (8000870 <eepromKontrol+0x63c>)
 8000706:	441a      	add	r2, r3
 8000708:	4b5e      	ldr	r3, [pc, #376]	; (8000884 <eepromKontrol+0x650>)
 800070a:	6811      	ldr	r1, [r2, #0]
 800070c:	6855      	ldr	r5, [r2, #4]
 800070e:	6894      	ldr	r4, [r2, #8]
 8000710:	68d0      	ldr	r0, [r2, #12]
 8000712:	6019      	str	r1, [r3, #0]
 8000714:	605d      	str	r5, [r3, #4]
 8000716:	609c      	str	r4, [r3, #8]
 8000718:	60d8      	str	r0, [r3, #12]
 800071a:	6911      	ldr	r1, [r2, #16]
 800071c:	6119      	str	r1, [r3, #16]
	convertArrays(3);
 800071e:	2003      	movs	r0, #3
 8000720:	f000 f8fa 	bl	8000918 <convertArrays>
	HAL_Delay(250);
 8000724:	20fa      	movs	r0, #250	; 0xfa
 8000726:	f008 f8a9 	bl	800887c <HAL_Delay>
	if(dilSecim == 0) {
 800072a:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <eepromKontrol+0x630>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d105      	bne.n	800073e <eepromKontrol+0x50a>
		lcd_print(1, 1, "MAKINE ID       ");
 8000732:	4a55      	ldr	r2, [pc, #340]	; (8000888 <eepromKontrol+0x654>)
 8000734:	2101      	movs	r1, #1
 8000736:	2001      	movs	r0, #1
 8000738:	f007 fb4a 	bl	8007dd0 <lcd_print>
 800073c:	e004      	b.n	8000748 <eepromKontrol+0x514>
	} else {
		lcd_print(1, 1, "MACHINE ID      ");
 800073e:	4a53      	ldr	r2, [pc, #332]	; (800088c <eepromKontrol+0x658>)
 8000740:	2101      	movs	r1, #1
 8000742:	2001      	movs	r0, #1
 8000744:	f007 fb44 	bl	8007dd0 <lcd_print>
	}
	lcd_print(2, 1, machineID);
 8000748:	4a51      	ldr	r2, [pc, #324]	; (8000890 <eepromKontrol+0x65c>)
 800074a:	2101      	movs	r1, #1
 800074c:	2002      	movs	r0, #2
 800074e:	f007 fb3f 	bl	8007dd0 <lcd_print>
	lcd_print(2, 13, "    ");
 8000752:	4a50      	ldr	r2, [pc, #320]	; (8000894 <eepromKontrol+0x660>)
 8000754:	210d      	movs	r1, #13
 8000756:	2002      	movs	r0, #2
 8000758:	f007 fb3a 	bl	8007dd0 <lcd_print>
	HAL_Delay(5000);
 800075c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000760:	f008 f88c 	bl	800887c <HAL_Delay>
	int ssidLength = strlen(wifiSSID);
 8000764:	484c      	ldr	r0, [pc, #304]	; (8000898 <eepromKontrol+0x664>)
 8000766:	f7ff fd5d 	bl	8000224 <strlen>
 800076a:	4603      	mov	r3, r0
 800076c:	61fb      	str	r3, [r7, #28]
	lcd_print(1, 1, "WIFI SSID       ");
 800076e:	4a4b      	ldr	r2, [pc, #300]	; (800089c <eepromKontrol+0x668>)
 8000770:	2101      	movs	r1, #1
 8000772:	2001      	movs	r0, #1
 8000774:	f007 fb2c 	bl	8007dd0 <lcd_print>
	if(ssidLength == 16) {
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	2b10      	cmp	r3, #16
 800077c:	d105      	bne.n	800078a <eepromKontrol+0x556>
		lcd_print(2, 1, wifiSSID);
 800077e:	4a46      	ldr	r2, [pc, #280]	; (8000898 <eepromKontrol+0x664>)
 8000780:	2101      	movs	r1, #1
 8000782:	2002      	movs	r0, #2
 8000784:	f007 fb24 	bl	8007dd0 <lcd_print>
 8000788:	e02d      	b.n	80007e6 <eepromKontrol+0x5b2>
	} else if(ssidLength < 16) {
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	2b0f      	cmp	r3, #15
 800078e:	dc13      	bgt.n	80007b8 <eepromKontrol+0x584>
		for(int i=0; i<16-ssidLength; i++) {
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	e009      	b.n	80007aa <eepromKontrol+0x576>
			lcd_delete_char(2, ssidLength);
 8000796:	69f9      	ldr	r1, [r7, #28]
 8000798:	2002      	movs	r0, #2
 800079a:	f007 fb4f 	bl	8007e3c <lcd_delete_char>
			ssidLength++;
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3301      	adds	r3, #1
 80007a2:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<16-ssidLength; i++) {
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	3301      	adds	r3, #1
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	f1c3 0310 	rsb	r3, r3, #16
 80007b0:	69ba      	ldr	r2, [r7, #24]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	dbef      	blt.n	8000796 <eepromKontrol+0x562>
 80007b6:	e016      	b.n	80007e6 <eepromKontrol+0x5b2>
		}
	} else {
		int lcdVal = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]

		//Eğer ssid 16'dan büyükse buraya ekle
		for(int i=0; i<16; i++) {
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	e00e      	b.n	80007e0 <eepromKontrol+0x5ac>
			lcd_print_char(2, lcdVal, wifiSSID[i]);
 80007c2:	4a35      	ldr	r2, [pc, #212]	; (8000898 <eepromKontrol+0x664>)
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	4413      	add	r3, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	6979      	ldr	r1, [r7, #20]
 80007ce:	2002      	movs	r0, #2
 80007d0:	f007 fb13 	bl	8007dfa <lcd_print_char>
			lcdVal++;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	3301      	adds	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<16; i++) {
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	3301      	adds	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	2b0f      	cmp	r3, #15
 80007e4:	dded      	ble.n	80007c2 <eepromKontrol+0x58e>
		}
	}
	HAL_Delay(5000);
 80007e6:	f241 3088 	movw	r0, #5000	; 0x1388
 80007ea:	f008 f847 	bl	800887c <HAL_Delay>
	int passLength = strlen(wifiPass);
 80007ee:	482c      	ldr	r0, [pc, #176]	; (80008a0 <eepromKontrol+0x66c>)
 80007f0:	f7ff fd18 	bl	8000224 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	60fb      	str	r3, [r7, #12]
	lcd_print(1, 1, "WIFI PASS       ");
 80007f8:	4a2a      	ldr	r2, [pc, #168]	; (80008a4 <eepromKontrol+0x670>)
 80007fa:	2101      	movs	r1, #1
 80007fc:	2001      	movs	r0, #1
 80007fe:	f007 fae7 	bl	8007dd0 <lcd_print>
	if(passLength == 16) {
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2b10      	cmp	r3, #16
 8000806:	d14f      	bne.n	80008a8 <eepromKontrol+0x674>
		lcd_print(2, 1, wifiPass);
 8000808:	4a25      	ldr	r2, [pc, #148]	; (80008a0 <eepromKontrol+0x66c>)
 800080a:	2101      	movs	r1, #1
 800080c:	2002      	movs	r0, #2
 800080e:	f007 fadf 	bl	8007dd0 <lcd_print>
 8000812:	e077      	b.n	8000904 <eepromKontrol+0x6d0>
 8000814:	20000239 	.word	0x20000239
 8000818:	2000022a 	.word	0x2000022a
 800081c:	2000023a 	.word	0x2000023a
 8000820:	2000022b 	.word	0x2000022b
 8000824:	2000022d 	.word	0x2000022d
 8000828:	2000023b 	.word	0x2000023b
 800082c:	2000022e 	.word	0x2000022e
 8000830:	2000022f 	.word	0x2000022f
 8000834:	20000230 	.word	0x20000230
 8000838:	20000231 	.word	0x20000231
 800083c:	20000232 	.word	0x20000232
 8000840:	20000233 	.word	0x20000233
 8000844:	20000234 	.word	0x20000234
 8000848:	20000235 	.word	0x20000235
 800084c:	20000236 	.word	0x20000236
 8000850:	20000237 	.word	0x20000237
 8000854:	20000238 	.word	0x20000238
 8000858:	2000023c 	.word	0x2000023c
 800085c:	2000023e 	.word	0x2000023e
 8000860:	20000240 	.word	0x20000240
 8000864:	20000241 	.word	0x20000241
 8000868:	2000023f 	.word	0x2000023f
 800086c:	20000004 	.word	0x20000004
 8000870:	20000118 	.word	0x20000118
 8000874:	200001c4 	.word	0x200001c4
 8000878:	20000008 	.word	0x20000008
 800087c:	200001d0 	.word	0x200001d0
 8000880:	2000000c 	.word	0x2000000c
 8000884:	200001e4 	.word	0x200001e4
 8000888:	0800ceb8 	.word	0x0800ceb8
 800088c:	0800cecc 	.word	0x0800cecc
 8000890:	20000190 	.word	0x20000190
 8000894:	0800cee0 	.word	0x0800cee0
 8000898:	2000019c 	.word	0x2000019c
 800089c:	0800cee8 	.word	0x0800cee8
 80008a0:	200001b0 	.word	0x200001b0
 80008a4:	0800cefc 	.word	0x0800cefc
	} else if(passLength < 16) {
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2b0f      	cmp	r3, #15
 80008ac:	dc13      	bgt.n	80008d6 <eepromKontrol+0x6a2>
		for(int i=0; i<16-passLength; i++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	e009      	b.n	80008c8 <eepromKontrol+0x694>
			lcd_delete_char(2, passLength);
 80008b4:	68f9      	ldr	r1, [r7, #12]
 80008b6:	2002      	movs	r0, #2
 80008b8:	f007 fac0 	bl	8007e3c <lcd_delete_char>
			passLength++;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3301      	adds	r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<16-passLength; i++) {
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	3301      	adds	r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f1c3 0310 	rsb	r3, r3, #16
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dbef      	blt.n	80008b4 <eepromKontrol+0x680>
 80008d4:	e016      	b.n	8000904 <eepromKontrol+0x6d0>
		}
	} else {
		int lcdVal = 1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	607b      	str	r3, [r7, #4]

		//Eğer pass 16'dan büyükse buraya ekle
		for(int i=0; i<16; i++) {
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	e00e      	b.n	80008fe <eepromKontrol+0x6ca>
			lcd_print_char(2, lcdVal, wifiPass[i]);
 80008e0:	4a0c      	ldr	r2, [pc, #48]	; (8000914 <eepromKontrol+0x6e0>)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	4413      	add	r3, r2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	2002      	movs	r0, #2
 80008ee:	f007 fa84 	bl	8007dfa <lcd_print_char>
			lcdVal++;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3301      	adds	r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
		for(int i=0; i<16; i++) {
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	dded      	ble.n	80008e0 <eepromKontrol+0x6ac>
		}
	}
	HAL_Delay(5000);
 8000904:	f241 3088 	movw	r0, #5000	; 0x1388
 8000908:	f007 ffb8 	bl	800887c <HAL_Delay>
}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bdb0      	pop	{r4, r5, r7, pc}
 8000914:	200001b0 	.word	0x200001b0

08000918 <convertArrays>:

void convertArrays(int state) {
 8000918:	b480      	push	{r7}
 800091a:	b087      	sub	sp, #28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d115      	bne.n	8000952 <convertArrays+0x3a>
		for(int i=0; i<12; i++) {
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	e00e      	b.n	800094a <convertArrays+0x32>
			machineID[i] = idCharactersArray[machineIDInt[i]];
 800092c:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <convertArrays+0xa0>)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	4413      	add	r3, r2
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <convertArrays+0xa4>)
 8000938:	5c99      	ldrb	r1, [r3, r2]
 800093a:	4a21      	ldr	r2, [pc, #132]	; (80009c0 <convertArrays+0xa8>)
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	4413      	add	r3, r2
 8000940:	460a      	mov	r2, r1
 8000942:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<12; i++) {
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	3301      	adds	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	2b0b      	cmp	r3, #11
 800094e:	dded      	ble.n	800092c <convertArrays+0x14>
	} else {
		for(int i=0; i<20; i++) {
			wifiPass[i] = charactersArray[wifiPassInt[i]];
		}
	}
}
 8000950:	e02d      	b.n	80009ae <convertArrays+0x96>
	} else if(state == 2) {
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d115      	bne.n	8000984 <convertArrays+0x6c>
		for(int i=0; i<20; i++) {
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	e00e      	b.n	800097c <convertArrays+0x64>
			wifiSSID[i] = charactersArray[wifiSSIDInt[i]];
 800095e:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <convertArrays+0xac>)
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	4413      	add	r3, r2
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <convertArrays+0xb0>)
 800096a:	5c99      	ldrb	r1, [r3, r2]
 800096c:	4a17      	ldr	r2, [pc, #92]	; (80009cc <convertArrays+0xb4>)
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	4413      	add	r3, r2
 8000972:	460a      	mov	r2, r1
 8000974:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<20; i++) {
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	3301      	adds	r3, #1
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	2b13      	cmp	r3, #19
 8000980:	dded      	ble.n	800095e <convertArrays+0x46>
}
 8000982:	e014      	b.n	80009ae <convertArrays+0x96>
		for(int i=0; i<20; i++) {
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	e00e      	b.n	80009a8 <convertArrays+0x90>
			wifiPass[i] = charactersArray[wifiPassInt[i]];
 800098a:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <convertArrays+0xb8>)
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4413      	add	r3, r2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <convertArrays+0xb0>)
 8000996:	5c99      	ldrb	r1, [r3, r2]
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <convertArrays+0xbc>)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4413      	add	r3, r2
 800099e:	460a      	mov	r2, r1
 80009a0:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<20; i++) {
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b13      	cmp	r3, #19
 80009ac:	dded      	ble.n	800098a <convertArrays+0x72>
}
 80009ae:	bf00      	nop
 80009b0:	371c      	adds	r7, #28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	200001c4 	.word	0x200001c4
 80009bc:	20000010 	.word	0x20000010
 80009c0:	20000190 	.word	0x20000190
 80009c4:	200001d0 	.word	0x200001d0
 80009c8:	2000001c 	.word	0x2000001c
 80009cc:	2000019c 	.word	0x2000019c
 80009d0:	200001e4 	.word	0x200001e4
 80009d4:	200001b0 	.word	0x200001b0

080009d8 <resetEEPROM4Wifi>:

void resetEEPROM4Wifi(int state) {
 80009d8:	b480      	push	{r7}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d11e      	bne.n	8000a24 <resetEEPROM4Wifi+0x4c>
		int eepromVal = idStartPos;
 80009e6:	4b32      	ldr	r3, [pc, #200]	; (8000ab0 <resetEEPROM4Wifi+0xd8>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
 80009f0:	e014      	b.n	8000a1c <resetEEPROM4Wifi+0x44>
			machineID[i] = '\0';
 80009f2:	4a30      	ldr	r2, [pc, #192]	; (8000ab4 <resetEEPROM4Wifi+0xdc>)
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	4413      	add	r3, r2
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
			machineIDInt[i] = '\0';
 80009fc:	4a2e      	ldr	r2, [pc, #184]	; (8000ab8 <resetEEPROM4Wifi+0xe0>)
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	4413      	add	r3, r2
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 8000a06:	4a2d      	ldr	r2, [pc, #180]	; (8000abc <resetEEPROM4Wifi+0xe4>)
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	3301      	adds	r3, #1
 8000a14:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	2b0b      	cmp	r3, #11
 8000a20:	dde7      	ble.n	80009f2 <resetEEPROM4Wifi+0x1a>
			wifiPassInt[i] = '\0';
			eepromData[eepromVal] = '\0';
			eepromVal++;
		}
	}
}
 8000a22:	e03f      	b.n	8000aa4 <resetEEPROM4Wifi+0xcc>
	} else if(state == 2) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d11e      	bne.n	8000a68 <resetEEPROM4Wifi+0x90>
		int eepromVal = ssidStartPos;
 8000a2a:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <resetEEPROM4Wifi+0xe8>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	e014      	b.n	8000a60 <resetEEPROM4Wifi+0x88>
			wifiSSID[i] = '\0';
 8000a36:	4a23      	ldr	r2, [pc, #140]	; (8000ac4 <resetEEPROM4Wifi+0xec>)
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
			wifiSSIDInt[i] = '\0';
 8000a40:	4a21      	ldr	r2, [pc, #132]	; (8000ac8 <resetEEPROM4Wifi+0xf0>)
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	4413      	add	r3, r2
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <resetEEPROM4Wifi+0xe4>)
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	4413      	add	r3, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	3301      	adds	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	2b13      	cmp	r3, #19
 8000a64:	dde7      	ble.n	8000a36 <resetEEPROM4Wifi+0x5e>
}
 8000a66:	e01d      	b.n	8000aa4 <resetEEPROM4Wifi+0xcc>
		int eepromVal = passStartPos;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <resetEEPROM4Wifi+0xf4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	e014      	b.n	8000a9e <resetEEPROM4Wifi+0xc6>
			wifiPass[i] = '\0';
 8000a74:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <resetEEPROM4Wifi+0xf8>)
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	4413      	add	r3, r2
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
			wifiPassInt[i] = '\0';
 8000a7e:	4a15      	ldr	r2, [pc, #84]	; (8000ad4 <resetEEPROM4Wifi+0xfc>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4413      	add	r3, r2
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 8000a88:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <resetEEPROM4Wifi+0xe4>)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	3301      	adds	r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	2b13      	cmp	r3, #19
 8000aa2:	dde7      	ble.n	8000a74 <resetEEPROM4Wifi+0x9c>
}
 8000aa4:	bf00      	nop
 8000aa6:	3724      	adds	r7, #36	; 0x24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000004 	.word	0x20000004
 8000ab4:	20000190 	.word	0x20000190
 8000ab8:	200001c4 	.word	0x200001c4
 8000abc:	20000118 	.word	0x20000118
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	2000019c 	.word	0x2000019c
 8000ac8:	200001d0 	.word	0x200001d0
 8000acc:	2000000c 	.word	0x2000000c
 8000ad0:	200001b0 	.word	0x200001b0
 8000ad4:	200001e4 	.word	0x200001e4

08000ad8 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b0c6      	sub	sp, #280	; 0x118
 8000adc:	af02      	add	r7, sp, #8
 8000ade:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ae6:	6018      	str	r0, [r3, #0]
 8000ae8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000af0:	6019      	str	r1, [r3, #0]
 8000af2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000af6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000afa:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000afc:	4a31      	ldr	r2, [pc, #196]	; (8000bc4 <sendMachineData+0xec>)
 8000afe:	4932      	ldr	r1, [pc, #200]	; (8000bc8 <sendMachineData+0xf0>)
 8000b00:	4832      	ldr	r0, [pc, #200]	; (8000bcc <sendMachineData+0xf4>)
 8000b02:	f00b fd6d 	bl	800c5e0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000b06:	4831      	ldr	r0, [pc, #196]	; (8000bcc <sendMachineData+0xf4>)
 8000b08:	f7ff fb8c 	bl	8000224 <strlen>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b18:	492c      	ldr	r1, [pc, #176]	; (8000bcc <sendMachineData+0xf4>)
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	f00a ff7a 	bl	800ba14 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000b20:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b24:	f007 feaa 	bl	800887c <HAL_Delay>

	sprintf(local_txA,
 8000b28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b2c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b30:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b34:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000b38:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000b3c:	4924      	ldr	r1, [pc, #144]	; (8000bd0 <sendMachineData+0xf8>)
 8000b3e:	9100      	str	r1, [sp, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	4923      	ldr	r1, [pc, #140]	; (8000bd4 <sendMachineData+0xfc>)
 8000b46:	f00b fd4b 	bl	800c5e0 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000b4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fb68 	bl	8000224 <strlen>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000b62:	491d      	ldr	r1, [pc, #116]	; (8000bd8 <sendMachineData+0x100>)
 8000b64:	4618      	mov	r0, r3
 8000b66:	f00b fd3b 	bl	800c5e0 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fb58 	bl	8000224 <strlen>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	f107 0110 	add.w	r1, r7, #16
 8000b7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b84:	6818      	ldr	r0, [r3, #0]
 8000b86:	f00a ff45 	bl	800ba14 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000b8a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b8e:	f007 fe75 	bl	800887c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000b92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fb44 	bl	8000224 <strlen>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000ba4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	f00a ff31 	bl	800ba14 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000bb2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000bb6:	f007 fe61 	bl	800887c <HAL_Delay>
}
 8000bba:	bf00      	nop
 8000bbc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	0800cf60 	.word	0x0800cf60
 8000bc8:	0800cf70 	.word	0x0800cf70
 8000bcc:	20000284 	.word	0x20000284
 8000bd0:	0800cfec 	.word	0x0800cfec
 8000bd4:	0800cf90 	.word	0x0800cf90
 8000bd8:	0800d000 	.word	0x0800d000

08000bdc <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <hata2EEPROM+0xa4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	1e5a      	subs	r2, r3, #1
 8000bec:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <hata2EEPROM+0xa8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a25      	ldr	r2, [pc, #148]	; (8000c88 <hata2EEPROM+0xac>)
 8000bf4:	5cd3      	ldrb	r3, [r2, r3]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d002      	beq.n	8000c00 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000bfa:	f000 f92b 	bl	8000e54 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000bfe:	e000      	b.n	8000c02 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000c00:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	e012      	b.n	8000c2e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <hata2EEPROM+0xa8>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <hata2EEPROM+0xac>)
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d107      	bne.n	8000c28 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <hata2EEPROM+0xa8>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4919      	ldr	r1, [pc, #100]	; (8000c88 <hata2EEPROM+0xac>)
 8000c22:	79fa      	ldrb	r2, [r7, #7]
 8000c24:	54ca      	strb	r2, [r1, r3]
					break;
 8000c26:	e007      	b.n	8000c38 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <hata2EEPROM+0xa4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	dbe7      	blt.n	8000c08 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <hata2EEPROM+0xa8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	b299      	uxth	r1, r3
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <hata2EEPROM+0xa4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	b298      	uxth	r0, r3
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <hata2EEPROM+0xa8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <hata2EEPROM+0xac>)
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <hata2EEPROM+0xa4>)
 8000c4e:	6812      	ldr	r2, [r2, #0]
 8000c50:	b292      	uxth	r2, r2
 8000c52:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000c56:	9402      	str	r4, [sp, #8]
 8000c58:	9201      	str	r2, [sp, #4]
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	460a      	mov	r2, r1
 8000c60:	21a0      	movs	r1, #160	; 0xa0
 8000c62:	480a      	ldr	r0, [pc, #40]	; (8000c8c <hata2EEPROM+0xb0>)
 8000c64:	f008 fe94 	bl	8009990 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000c68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c6c:	f007 fe06 	bl	800887c <HAL_Delay>
	eepromKontrol(1);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff fadf 	bl	8000234 <eepromKontrol>
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd90      	pop	{r4, r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000098 	.word	0x20000098
 8000c84:	2000009c 	.word	0x2000009c
 8000c88:	20000118 	.word	0x20000118
 8000c8c:	200003a8 	.word	0x200003a8

08000c90 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d11d      	bne.n	8000cdc <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000ca0:	4b62      	ldr	r3, [pc, #392]	; (8000e2c <hataKoduLcdGoster+0x19c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d105      	bne.n	8000cb4 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000ca8:	4a61      	ldr	r2, [pc, #388]	; (8000e30 <hataKoduLcdGoster+0x1a0>)
 8000caa:	2101      	movs	r1, #1
 8000cac:	2001      	movs	r0, #1
 8000cae:	f007 f88f 	bl	8007dd0 <lcd_print>
 8000cb2:	e008      	b.n	8000cc6 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000cb4:	4b5d      	ldr	r3, [pc, #372]	; (8000e2c <hataKoduLcdGoster+0x19c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d104      	bne.n	8000cc6 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000cbc:	4a5d      	ldr	r2, [pc, #372]	; (8000e34 <hataKoduLcdGoster+0x1a4>)
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f007 f885 	bl	8007dd0 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000cc6:	4a5c      	ldr	r2, [pc, #368]	; (8000e38 <hataKoduLcdGoster+0x1a8>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f007 f880 	bl	8007dd0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000cd0:	4a5a      	ldr	r2, [pc, #360]	; (8000e3c <hataKoduLcdGoster+0x1ac>)
 8000cd2:	2107      	movs	r1, #7
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f007 f87b 	bl	8007dd0 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000cda:	e0a3      	b.n	8000e24 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d11d      	bne.n	8000d1e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000ce2:	4b52      	ldr	r3, [pc, #328]	; (8000e2c <hataKoduLcdGoster+0x19c>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d105      	bne.n	8000cf6 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000cea:	4a51      	ldr	r2, [pc, #324]	; (8000e30 <hataKoduLcdGoster+0x1a0>)
 8000cec:	2101      	movs	r1, #1
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f007 f86e 	bl	8007dd0 <lcd_print>
 8000cf4:	e008      	b.n	8000d08 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000cf6:	4b4d      	ldr	r3, [pc, #308]	; (8000e2c <hataKoduLcdGoster+0x19c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d104      	bne.n	8000d08 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000cfe:	4a4d      	ldr	r2, [pc, #308]	; (8000e34 <hataKoduLcdGoster+0x1a4>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	2001      	movs	r0, #1
 8000d04:	f007 f864 	bl	8007dd0 <lcd_print>
		lcd_print(2, 2, "2");
 8000d08:	4a4d      	ldr	r2, [pc, #308]	; (8000e40 <hataKoduLcdGoster+0x1b0>)
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	f007 f85f 	bl	8007dd0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d12:	4a4a      	ldr	r2, [pc, #296]	; (8000e3c <hataKoduLcdGoster+0x1ac>)
 8000d14:	2107      	movs	r1, #7
 8000d16:	2002      	movs	r0, #2
 8000d18:	f007 f85a 	bl	8007dd0 <lcd_print>
}
 8000d1c:	e082      	b.n	8000e24 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d11d      	bne.n	8000d60 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000d24:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <hataKoduLcdGoster+0x19c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d105      	bne.n	8000d38 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000d2c:	4a40      	ldr	r2, [pc, #256]	; (8000e30 <hataKoduLcdGoster+0x1a0>)
 8000d2e:	2101      	movs	r1, #1
 8000d30:	2001      	movs	r0, #1
 8000d32:	f007 f84d 	bl	8007dd0 <lcd_print>
 8000d36:	e008      	b.n	8000d4a <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000d38:	4b3c      	ldr	r3, [pc, #240]	; (8000e2c <hataKoduLcdGoster+0x19c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d104      	bne.n	8000d4a <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000d40:	4a3c      	ldr	r2, [pc, #240]	; (8000e34 <hataKoduLcdGoster+0x1a4>)
 8000d42:	2101      	movs	r1, #1
 8000d44:	2001      	movs	r0, #1
 8000d46:	f007 f843 	bl	8007dd0 <lcd_print>
		lcd_print(2, 3, "3");
 8000d4a:	4a3e      	ldr	r2, [pc, #248]	; (8000e44 <hataKoduLcdGoster+0x1b4>)
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	2002      	movs	r0, #2
 8000d50:	f007 f83e 	bl	8007dd0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d54:	4a39      	ldr	r2, [pc, #228]	; (8000e3c <hataKoduLcdGoster+0x1ac>)
 8000d56:	2107      	movs	r1, #7
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f007 f839 	bl	8007dd0 <lcd_print>
}
 8000d5e:	e061      	b.n	8000e24 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	d11d      	bne.n	8000da2 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000d66:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <hataKoduLcdGoster+0x19c>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d105      	bne.n	8000d7a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000d6e:	4a30      	ldr	r2, [pc, #192]	; (8000e30 <hataKoduLcdGoster+0x1a0>)
 8000d70:	2101      	movs	r1, #1
 8000d72:	2001      	movs	r0, #1
 8000d74:	f007 f82c 	bl	8007dd0 <lcd_print>
 8000d78:	e008      	b.n	8000d8c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <hataKoduLcdGoster+0x19c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d104      	bne.n	8000d8c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000d82:	4a2c      	ldr	r2, [pc, #176]	; (8000e34 <hataKoduLcdGoster+0x1a4>)
 8000d84:	2101      	movs	r1, #1
 8000d86:	2001      	movs	r0, #1
 8000d88:	f007 f822 	bl	8007dd0 <lcd_print>
		lcd_print(2, 4, "4");
 8000d8c:	4a2e      	ldr	r2, [pc, #184]	; (8000e48 <hataKoduLcdGoster+0x1b8>)
 8000d8e:	2104      	movs	r1, #4
 8000d90:	2002      	movs	r0, #2
 8000d92:	f007 f81d 	bl	8007dd0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d96:	4a29      	ldr	r2, [pc, #164]	; (8000e3c <hataKoduLcdGoster+0x1ac>)
 8000d98:	2107      	movs	r1, #7
 8000d9a:	2002      	movs	r0, #2
 8000d9c:	f007 f818 	bl	8007dd0 <lcd_print>
}
 8000da0:	e040      	b.n	8000e24 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	d11d      	bne.n	8000de4 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <hataKoduLcdGoster+0x19c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d105      	bne.n	8000dbc <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000db0:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <hataKoduLcdGoster+0x1a0>)
 8000db2:	2101      	movs	r1, #1
 8000db4:	2001      	movs	r0, #1
 8000db6:	f007 f80b 	bl	8007dd0 <lcd_print>
 8000dba:	e008      	b.n	8000dce <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <hataKoduLcdGoster+0x19c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d104      	bne.n	8000dce <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <hataKoduLcdGoster+0x1a4>)
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f007 f801 	bl	8007dd0 <lcd_print>
		lcd_print(2, 5, "5");
 8000dce:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <hataKoduLcdGoster+0x1bc>)
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f006 fffc 	bl	8007dd0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <hataKoduLcdGoster+0x1ac>)
 8000dda:	2107      	movs	r1, #7
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f006 fff7 	bl	8007dd0 <lcd_print>
}
 8000de2:	e01f      	b.n	8000e24 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d11c      	bne.n	8000e24 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <hataKoduLcdGoster+0x19c>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d105      	bne.n	8000dfe <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000df2:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <hataKoduLcdGoster+0x1a0>)
 8000df4:	2101      	movs	r1, #1
 8000df6:	2001      	movs	r0, #1
 8000df8:	f006 ffea 	bl	8007dd0 <lcd_print>
 8000dfc:	e008      	b.n	8000e10 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <hataKoduLcdGoster+0x19c>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d104      	bne.n	8000e10 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <hataKoduLcdGoster+0x1a4>)
 8000e08:	2101      	movs	r1, #1
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f006 ffe0 	bl	8007dd0 <lcd_print>
		lcd_print(2, 6, "6");
 8000e10:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <hataKoduLcdGoster+0x1c0>)
 8000e12:	2106      	movs	r1, #6
 8000e14:	2002      	movs	r0, #2
 8000e16:	f006 ffdb 	bl	8007dd0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <hataKoduLcdGoster+0x1ac>)
 8000e1c:	2107      	movs	r1, #7
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f006 ffd6 	bl	8007dd0 <lcd_print>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000241 	.word	0x20000241
 8000e30:	0800d08c 	.word	0x0800d08c
 8000e34:	0800d09c 	.word	0x0800d09c
 8000e38:	0800d0ac 	.word	0x0800d0ac
 8000e3c:	0800d0b0 	.word	0x0800d0b0
 8000e40:	0800d0bc 	.word	0x0800d0bc
 8000e44:	0800d0c0 	.word	0x0800d0c0
 8000e48:	0800d0c4 	.word	0x0800d0c4
 8000e4c:	0800d0c8 	.word	0x0800d0c8
 8000e50:	0800d0cc 	.word	0x0800d0cc

08000e54 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	e009      	b.n	8000e74 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <eepromDataFillWithEmpty+0x38>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e68:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <eepromDataFillWithEmpty+0x3c>)
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3301      	adds	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <eepromDataFillWithEmpty+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	dbf0      	blt.n	8000e60 <eepromDataFillWithEmpty+0xc>
	}
}
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000070 	.word	0x20000070
 8000e90:	20000118 	.word	0x20000118
 8000e94:	20000098 	.word	0x20000098

08000e98 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000eaa:	4b50      	ldr	r3, [pc, #320]	; (8000fec <i2cTest+0x154>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b4e      	ldr	r3, [pc, #312]	; (8000fec <i2cTest+0x154>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 0201 	bic.w	r2, r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000eba:	484c      	ldr	r0, [pc, #304]	; (8000fec <i2cTest+0x154>)
 8000ebc:	f008 fc3a 	bl	8009734 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec0:	23c0      	movs	r3, #192	; 0xc0
 8000ec2:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000ec4:	2311      	movs	r3, #17
 8000ec6:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4846      	ldr	r0, [pc, #280]	; (8000ff0 <i2cTest+0x158>)
 8000ed6:	f008 f841 	bl	8008f5c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2140      	movs	r1, #64	; 0x40
 8000ede:	4844      	ldr	r0, [pc, #272]	; (8000ff0 <i2cTest+0x158>)
 8000ee0:	f008 fab3 	bl	800944a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2180      	movs	r1, #128	; 0x80
 8000ee8:	4841      	ldr	r0, [pc, #260]	; (8000ff0 <i2cTest+0x158>)
 8000eea:	f008 faae 	bl	800944a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000eee:	200a      	movs	r0, #10
 8000ef0:	f007 fcc4 	bl	800887c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000ef4:	bf00      	nop
 8000ef6:	2140      	movs	r1, #64	; 0x40
 8000ef8:	483d      	ldr	r0, [pc, #244]	; (8000ff0 <i2cTest+0x158>)
 8000efa:	f008 fa8f 	bl	800941c <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d006      	beq.n	8000f12 <i2cTest+0x7a>
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	483a      	ldr	r0, [pc, #232]	; (8000ff0 <i2cTest+0x158>)
 8000f08:	f008 fa88 	bl	800941c <HAL_GPIO_ReadPin>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d1f1      	bne.n	8000ef6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	4836      	ldr	r0, [pc, #216]	; (8000ff0 <i2cTest+0x158>)
 8000f18:	f008 fa97 	bl	800944a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000f1c:	200a      	movs	r0, #10
 8000f1e:	f007 fcad 	bl	800887c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000f22:	bf00      	nop
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	4832      	ldr	r0, [pc, #200]	; (8000ff0 <i2cTest+0x158>)
 8000f28:	f008 fa78 	bl	800941c <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d0f8      	beq.n	8000f24 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2140      	movs	r1, #64	; 0x40
 8000f36:	482e      	ldr	r0, [pc, #184]	; (8000ff0 <i2cTest+0x158>)
 8000f38:	f008 fa87 	bl	800944a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f3c:	200a      	movs	r0, #10
 8000f3e:	f007 fc9d 	bl	800887c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000f42:	bf00      	nop
 8000f44:	2140      	movs	r1, #64	; 0x40
 8000f46:	482a      	ldr	r0, [pc, #168]	; (8000ff0 <i2cTest+0x158>)
 8000f48:	f008 fa68 	bl	800941c <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d0f8      	beq.n	8000f44 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2140      	movs	r1, #64	; 0x40
 8000f56:	4826      	ldr	r0, [pc, #152]	; (8000ff0 <i2cTest+0x158>)
 8000f58:	f008 fa77 	bl	800944a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f007 fc8d 	bl	800887c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000f62:	bf00      	nop
 8000f64:	2140      	movs	r1, #64	; 0x40
 8000f66:	4822      	ldr	r0, [pc, #136]	; (8000ff0 <i2cTest+0x158>)
 8000f68:	f008 fa58 	bl	800941c <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d1f8      	bne.n	8000f64 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	481e      	ldr	r0, [pc, #120]	; (8000ff0 <i2cTest+0x158>)
 8000f78:	f008 fa67 	bl	800944a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000f7c:	200a      	movs	r0, #10
 8000f7e:	f007 fc7d 	bl	800887c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000f82:	bf00      	nop
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	481a      	ldr	r0, [pc, #104]	; (8000ff0 <i2cTest+0x158>)
 8000f88:	f008 fa48 	bl	800941c <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d1f8      	bne.n	8000f84 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f92:	23c0      	movs	r3, #192	; 0xc0
 8000f94:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000f96:	2312      	movs	r3, #18
 8000f98:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <i2cTest+0x158>)
 8000fa8:	f007 ffd8 	bl	8008f5c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <i2cTest+0x154>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <i2cTest+0x154>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fba:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <i2cTest+0x154>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <i2cTest+0x154>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fca:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <i2cTest+0x154>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <i2cTest+0x154>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0201 	orr.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <i2cTest+0x154>)
 8000fde:	f008 fa65 	bl	80094ac <HAL_I2C_Init>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200003a8 	.word	0x200003a8
 8000ff0:	40010c00 	.word	0x40010c00

08000ff4 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000ffe:	20c8      	movs	r0, #200	; 0xc8
 8001000:	f007 fc3c 	bl	800887c <HAL_Delay>
	lcd_clear();
 8001004:	f006 ff10 	bl	8007e28 <lcd_clear>
	if(type == 1 && page == 0) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d143      	bne.n	8001096 <printTemplate+0xa2>
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d140      	bne.n	8001096 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8001014:	4a9d      	ldr	r2, [pc, #628]	; (800128c <printTemplate+0x298>)
 8001016:	2101      	movs	r1, #1
 8001018:	2001      	movs	r0, #1
 800101a:	f006 fed9 	bl	8007dd0 <lcd_print>
		lcd_print(2, 3, "0");
 800101e:	4a9c      	ldr	r2, [pc, #624]	; (8001290 <printTemplate+0x29c>)
 8001020:	2103      	movs	r1, #3
 8001022:	2002      	movs	r0, #2
 8001024:	f006 fed4 	bl	8007dd0 <lcd_print>
		lcd_print(2, 4, "1");
 8001028:	4a9a      	ldr	r2, [pc, #616]	; (8001294 <printTemplate+0x2a0>)
 800102a:	2104      	movs	r1, #4
 800102c:	2002      	movs	r0, #2
 800102e:	f006 fecf 	bl	8007dd0 <lcd_print>
		lcd_print(2, 5, "2");
 8001032:	4a99      	ldr	r2, [pc, #612]	; (8001298 <printTemplate+0x2a4>)
 8001034:	2105      	movs	r1, #5
 8001036:	2002      	movs	r0, #2
 8001038:	f006 feca 	bl	8007dd0 <lcd_print>
		lcd_print(2, 6, "3");
 800103c:	4a97      	ldr	r2, [pc, #604]	; (800129c <printTemplate+0x2a8>)
 800103e:	2106      	movs	r1, #6
 8001040:	2002      	movs	r0, #2
 8001042:	f006 fec5 	bl	8007dd0 <lcd_print>
		lcd_print(2, 7, "4");
 8001046:	4a96      	ldr	r2, [pc, #600]	; (80012a0 <printTemplate+0x2ac>)
 8001048:	2107      	movs	r1, #7
 800104a:	2002      	movs	r0, #2
 800104c:	f006 fec0 	bl	8007dd0 <lcd_print>
		lcd_print(2, 10, "5");
 8001050:	4a94      	ldr	r2, [pc, #592]	; (80012a4 <printTemplate+0x2b0>)
 8001052:	210a      	movs	r1, #10
 8001054:	2002      	movs	r0, #2
 8001056:	f006 febb 	bl	8007dd0 <lcd_print>
		lcd_print(2, 11, "6");
 800105a:	4a93      	ldr	r2, [pc, #588]	; (80012a8 <printTemplate+0x2b4>)
 800105c:	210b      	movs	r1, #11
 800105e:	2002      	movs	r0, #2
 8001060:	f006 feb6 	bl	8007dd0 <lcd_print>
		lcd_print(2, 12, "7");
 8001064:	4a91      	ldr	r2, [pc, #580]	; (80012ac <printTemplate+0x2b8>)
 8001066:	210c      	movs	r1, #12
 8001068:	2002      	movs	r0, #2
 800106a:	f006 feb1 	bl	8007dd0 <lcd_print>
		lcd_print(2, 13, "8");
 800106e:	4a90      	ldr	r2, [pc, #576]	; (80012b0 <printTemplate+0x2bc>)
 8001070:	210d      	movs	r1, #13
 8001072:	2002      	movs	r0, #2
 8001074:	f006 feac 	bl	8007dd0 <lcd_print>
		lcd_print(2, 14, "9");
 8001078:	4a8e      	ldr	r2, [pc, #568]	; (80012b4 <printTemplate+0x2c0>)
 800107a:	210e      	movs	r1, #14
 800107c:	2002      	movs	r0, #2
 800107e:	f006 fea7 	bl	8007dd0 <lcd_print>
		lcd_print(1, 5, machineID);
 8001082:	4a8d      	ldr	r2, [pc, #564]	; (80012b8 <printTemplate+0x2c4>)
 8001084:	2105      	movs	r1, #5
 8001086:	2001      	movs	r0, #1
 8001088:	f006 fea2 	bl	8007dd0 <lcd_print>
		lcd_gotoxy(2, 3);
 800108c:	2103      	movs	r1, #3
 800108e:	2002      	movs	r0, #2
 8001090:	f006 fe7f 	bl	8007d92 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8001094:	e0f5      	b.n	8001282 <printTemplate+0x28e>
	} else if(type == 2) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d178      	bne.n	800118e <printTemplate+0x19a>
		if(page == 1) {
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d114      	bne.n	80010cc <printTemplate+0xd8>
			lcd_clear();
 80010a2:	f006 fec1 	bl	8007e28 <lcd_clear>
			HAL_Delay(100);
 80010a6:	2064      	movs	r0, #100	; 0x64
 80010a8:	f007 fbe8 	bl	800887c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80010ac:	4a83      	ldr	r2, [pc, #524]	; (80012bc <printTemplate+0x2c8>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	2001      	movs	r0, #1
 80010b2:	f006 fe8d 	bl	8007dd0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80010b6:	4a82      	ldr	r2, [pc, #520]	; (80012c0 <printTemplate+0x2cc>)
 80010b8:	2107      	movs	r1, #7
 80010ba:	2001      	movs	r0, #1
 80010bc:	f006 fe88 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80010c0:	4a80      	ldr	r2, [pc, #512]	; (80012c4 <printTemplate+0x2d0>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	2002      	movs	r0, #2
 80010c6:	f006 fe83 	bl	8007dd0 <lcd_print>
}
 80010ca:	e0da      	b.n	8001282 <printTemplate+0x28e>
		} else if(page == 2) {
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d114      	bne.n	80010fc <printTemplate+0x108>
			lcd_clear();
 80010d2:	f006 fea9 	bl	8007e28 <lcd_clear>
			HAL_Delay(100);
 80010d6:	2064      	movs	r0, #100	; 0x64
 80010d8:	f007 fbd0 	bl	800887c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80010dc:	4a77      	ldr	r2, [pc, #476]	; (80012bc <printTemplate+0x2c8>)
 80010de:	2101      	movs	r1, #1
 80010e0:	2001      	movs	r0, #1
 80010e2:	f006 fe75 	bl	8007dd0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80010e6:	4a76      	ldr	r2, [pc, #472]	; (80012c0 <printTemplate+0x2cc>)
 80010e8:	2107      	movs	r1, #7
 80010ea:	2001      	movs	r0, #1
 80010ec:	f006 fe70 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80010f0:	4a75      	ldr	r2, [pc, #468]	; (80012c8 <printTemplate+0x2d4>)
 80010f2:	2101      	movs	r1, #1
 80010f4:	2002      	movs	r0, #2
 80010f6:	f006 fe6b 	bl	8007dd0 <lcd_print>
}
 80010fa:	e0c2      	b.n	8001282 <printTemplate+0x28e>
		} else if(page == 3) {
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d114      	bne.n	800112c <printTemplate+0x138>
			lcd_clear();
 8001102:	f006 fe91 	bl	8007e28 <lcd_clear>
			HAL_Delay(100);
 8001106:	2064      	movs	r0, #100	; 0x64
 8001108:	f007 fbb8 	bl	800887c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800110c:	4a6b      	ldr	r2, [pc, #428]	; (80012bc <printTemplate+0x2c8>)
 800110e:	2101      	movs	r1, #1
 8001110:	2001      	movs	r0, #1
 8001112:	f006 fe5d 	bl	8007dd0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001116:	4a6a      	ldr	r2, [pc, #424]	; (80012c0 <printTemplate+0x2cc>)
 8001118:	2107      	movs	r1, #7
 800111a:	2001      	movs	r0, #1
 800111c:	f006 fe58 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001120:	4a6a      	ldr	r2, [pc, #424]	; (80012cc <printTemplate+0x2d8>)
 8001122:	2101      	movs	r1, #1
 8001124:	2002      	movs	r0, #2
 8001126:	f006 fe53 	bl	8007dd0 <lcd_print>
}
 800112a:	e0aa      	b.n	8001282 <printTemplate+0x28e>
		} else if(page == 4) {
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	2b04      	cmp	r3, #4
 8001130:	d114      	bne.n	800115c <printTemplate+0x168>
			lcd_clear();
 8001132:	f006 fe79 	bl	8007e28 <lcd_clear>
			HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	; 0x64
 8001138:	f007 fba0 	bl	800887c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800113c:	4a5f      	ldr	r2, [pc, #380]	; (80012bc <printTemplate+0x2c8>)
 800113e:	2101      	movs	r1, #1
 8001140:	2001      	movs	r0, #1
 8001142:	f006 fe45 	bl	8007dd0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001146:	4a5e      	ldr	r2, [pc, #376]	; (80012c0 <printTemplate+0x2cc>)
 8001148:	2107      	movs	r1, #7
 800114a:	2001      	movs	r0, #1
 800114c:	f006 fe40 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001150:	4a5f      	ldr	r2, [pc, #380]	; (80012d0 <printTemplate+0x2dc>)
 8001152:	2101      	movs	r1, #1
 8001154:	2002      	movs	r0, #2
 8001156:	f006 fe3b 	bl	8007dd0 <lcd_print>
}
 800115a:	e092      	b.n	8001282 <printTemplate+0x28e>
		} else if(page == 5) {
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b05      	cmp	r3, #5
 8001160:	f040 808f 	bne.w	8001282 <printTemplate+0x28e>
			lcd_clear();
 8001164:	f006 fe60 	bl	8007e28 <lcd_clear>
			HAL_Delay(100);
 8001168:	2064      	movs	r0, #100	; 0x64
 800116a:	f007 fb87 	bl	800887c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800116e:	4a53      	ldr	r2, [pc, #332]	; (80012bc <printTemplate+0x2c8>)
 8001170:	2101      	movs	r1, #1
 8001172:	2001      	movs	r0, #1
 8001174:	f006 fe2c 	bl	8007dd0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001178:	4a51      	ldr	r2, [pc, #324]	; (80012c0 <printTemplate+0x2cc>)
 800117a:	2107      	movs	r1, #7
 800117c:	2001      	movs	r0, #1
 800117e:	f006 fe27 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001182:	4a54      	ldr	r2, [pc, #336]	; (80012d4 <printTemplate+0x2e0>)
 8001184:	2101      	movs	r1, #1
 8001186:	2002      	movs	r0, #2
 8001188:	f006 fe22 	bl	8007dd0 <lcd_print>
}
 800118c:	e079      	b.n	8001282 <printTemplate+0x28e>
	} else if(type == 3) {
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b03      	cmp	r3, #3
 8001192:	d176      	bne.n	8001282 <printTemplate+0x28e>
		if(page == 1) {
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d114      	bne.n	80011c4 <printTemplate+0x1d0>
			lcd_clear();
 800119a:	f006 fe45 	bl	8007e28 <lcd_clear>
			HAL_Delay(100);
 800119e:	2064      	movs	r0, #100	; 0x64
 80011a0:	f007 fb6c 	bl	800887c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011a4:	4a4c      	ldr	r2, [pc, #304]	; (80012d8 <printTemplate+0x2e4>)
 80011a6:	2101      	movs	r1, #1
 80011a8:	2001      	movs	r0, #1
 80011aa:	f006 fe11 	bl	8007dd0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80011ae:	4a4b      	ldr	r2, [pc, #300]	; (80012dc <printTemplate+0x2e8>)
 80011b0:	2107      	movs	r1, #7
 80011b2:	2001      	movs	r0, #1
 80011b4:	f006 fe0c 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80011b8:	4a42      	ldr	r2, [pc, #264]	; (80012c4 <printTemplate+0x2d0>)
 80011ba:	2101      	movs	r1, #1
 80011bc:	2002      	movs	r0, #2
 80011be:	f006 fe07 	bl	8007dd0 <lcd_print>
}
 80011c2:	e05e      	b.n	8001282 <printTemplate+0x28e>
		} else if(page == 2) {
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d114      	bne.n	80011f4 <printTemplate+0x200>
			lcd_clear();
 80011ca:	f006 fe2d 	bl	8007e28 <lcd_clear>
			HAL_Delay(100);
 80011ce:	2064      	movs	r0, #100	; 0x64
 80011d0:	f007 fb54 	bl	800887c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80011d4:	4a40      	ldr	r2, [pc, #256]	; (80012d8 <printTemplate+0x2e4>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	2001      	movs	r0, #1
 80011da:	f006 fdf9 	bl	8007dd0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80011de:	4a3f      	ldr	r2, [pc, #252]	; (80012dc <printTemplate+0x2e8>)
 80011e0:	2107      	movs	r1, #7
 80011e2:	2001      	movs	r0, #1
 80011e4:	f006 fdf4 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80011e8:	4a37      	ldr	r2, [pc, #220]	; (80012c8 <printTemplate+0x2d4>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	2002      	movs	r0, #2
 80011ee:	f006 fdef 	bl	8007dd0 <lcd_print>
}
 80011f2:	e046      	b.n	8001282 <printTemplate+0x28e>
		} else if(page == 3) {
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d114      	bne.n	8001224 <printTemplate+0x230>
			lcd_clear();
 80011fa:	f006 fe15 	bl	8007e28 <lcd_clear>
			HAL_Delay(100);
 80011fe:	2064      	movs	r0, #100	; 0x64
 8001200:	f007 fb3c 	bl	800887c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001204:	4a34      	ldr	r2, [pc, #208]	; (80012d8 <printTemplate+0x2e4>)
 8001206:	2101      	movs	r1, #1
 8001208:	2001      	movs	r0, #1
 800120a:	f006 fde1 	bl	8007dd0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800120e:	4a33      	ldr	r2, [pc, #204]	; (80012dc <printTemplate+0x2e8>)
 8001210:	2107      	movs	r1, #7
 8001212:	2001      	movs	r0, #1
 8001214:	f006 fddc 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001218:	4a2c      	ldr	r2, [pc, #176]	; (80012cc <printTemplate+0x2d8>)
 800121a:	2101      	movs	r1, #1
 800121c:	2002      	movs	r0, #2
 800121e:	f006 fdd7 	bl	8007dd0 <lcd_print>
}
 8001222:	e02e      	b.n	8001282 <printTemplate+0x28e>
		} else if(page == 4) {
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b04      	cmp	r3, #4
 8001228:	d114      	bne.n	8001254 <printTemplate+0x260>
			lcd_clear();
 800122a:	f006 fdfd 	bl	8007e28 <lcd_clear>
			HAL_Delay(100);
 800122e:	2064      	movs	r0, #100	; 0x64
 8001230:	f007 fb24 	bl	800887c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001234:	4a28      	ldr	r2, [pc, #160]	; (80012d8 <printTemplate+0x2e4>)
 8001236:	2101      	movs	r1, #1
 8001238:	2001      	movs	r0, #1
 800123a:	f006 fdc9 	bl	8007dd0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800123e:	4a27      	ldr	r2, [pc, #156]	; (80012dc <printTemplate+0x2e8>)
 8001240:	2107      	movs	r1, #7
 8001242:	2001      	movs	r0, #1
 8001244:	f006 fdc4 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001248:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <printTemplate+0x2dc>)
 800124a:	2101      	movs	r1, #1
 800124c:	2002      	movs	r0, #2
 800124e:	f006 fdbf 	bl	8007dd0 <lcd_print>
}
 8001252:	e016      	b.n	8001282 <printTemplate+0x28e>
		} else if(page == 5) {
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2b05      	cmp	r3, #5
 8001258:	d113      	bne.n	8001282 <printTemplate+0x28e>
			lcd_clear();
 800125a:	f006 fde5 	bl	8007e28 <lcd_clear>
			HAL_Delay(100);
 800125e:	2064      	movs	r0, #100	; 0x64
 8001260:	f007 fb0c 	bl	800887c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001264:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <printTemplate+0x2e4>)
 8001266:	2101      	movs	r1, #1
 8001268:	2001      	movs	r0, #1
 800126a:	f006 fdb1 	bl	8007dd0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800126e:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <printTemplate+0x2e8>)
 8001270:	2107      	movs	r1, #7
 8001272:	2001      	movs	r0, #1
 8001274:	f006 fdac 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001278:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <printTemplate+0x2e0>)
 800127a:	2101      	movs	r1, #1
 800127c:	2002      	movs	r0, #2
 800127e:	f006 fda7 	bl	8007dd0 <lcd_print>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	0800d0d0 	.word	0x0800d0d0
 8001290:	0800d0d8 	.word	0x0800d0d8
 8001294:	0800d0dc 	.word	0x0800d0dc
 8001298:	0800d0e0 	.word	0x0800d0e0
 800129c:	0800d0e4 	.word	0x0800d0e4
 80012a0:	0800d0e8 	.word	0x0800d0e8
 80012a4:	0800d0ec 	.word	0x0800d0ec
 80012a8:	0800d0f0 	.word	0x0800d0f0
 80012ac:	0800d0f4 	.word	0x0800d0f4
 80012b0:	0800d0f8 	.word	0x0800d0f8
 80012b4:	0800d0fc 	.word	0x0800d0fc
 80012b8:	20000190 	.word	0x20000190
 80012bc:	0800d100 	.word	0x0800d100
 80012c0:	2000019c 	.word	0x2000019c
 80012c4:	0800d108 	.word	0x0800d108
 80012c8:	0800d11c 	.word	0x0800d11c
 80012cc:	0800d130 	.word	0x0800d130
 80012d0:	0800d144 	.word	0x0800d144
 80012d4:	0800d158 	.word	0x0800d158
 80012d8:	0800d16c 	.word	0x0800d16c
 80012dc:	200001b0 	.word	0x200001b0

080012e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012e4:	f3bf 8f4f 	dsb	sy
}
 80012e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <__NVIC_SystemReset+0x24>)
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012f2:	4904      	ldr	r1, [pc, #16]	; (8001304 <__NVIC_SystemReset+0x24>)
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <__NVIC_SystemReset+0x28>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80012fa:	f3bf 8f4f 	dsb	sy
}
 80012fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <__NVIC_SystemReset+0x20>
 8001304:	e000ed00 	.word	0xe000ed00
 8001308:	05fa0004 	.word	0x05fa0004

0800130c <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 800130c:	b580      	push	{r7, lr}
 800130e:	b092      	sub	sp, #72	; 0x48
 8001310:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001312:	2101      	movs	r1, #1
 8001314:	488e      	ldr	r0, [pc, #568]	; (8001550 <menu+0x244>)
 8001316:	f008 f881 	bl	800941c <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	2b01      	cmp	r3, #1
 800131e:	f040 808e 	bne.w	800143e <menu+0x132>
 8001322:	4b8c      	ldr	r3, [pc, #560]	; (8001554 <menu+0x248>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	f083 0301 	eor.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8086 	beq.w	800143e <menu+0x132>
		menuSayac = menuSayac+1;
 8001332:	4b89      	ldr	r3, [pc, #548]	; (8001558 <menu+0x24c>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b87      	ldr	r3, [pc, #540]	; (8001558 <menu+0x24c>)
 800133c:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800133e:	4b86      	ldr	r3, [pc, #536]	; (8001558 <menu+0x24c>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b24      	cmp	r3, #36	; 0x24
 8001344:	d102      	bne.n	800134c <menu+0x40>
			menuSayac = 1;
 8001346:	4b84      	ldr	r3, [pc, #528]	; (8001558 <menu+0x24c>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 800134c:	4b82      	ldr	r3, [pc, #520]	; (8001558 <menu+0x24c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b12      	cmp	r3, #18
 8001352:	d106      	bne.n	8001362 <menu+0x56>
 8001354:	4b81      	ldr	r3, [pc, #516]	; (800155c <menu+0x250>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <menu+0x56>
			menuSayac = 21;
 800135c:	4b7e      	ldr	r3, [pc, #504]	; (8001558 <menu+0x24c>)
 800135e:	2215      	movs	r2, #21
 8001360:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001362:	4b7d      	ldr	r3, [pc, #500]	; (8001558 <menu+0x24c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b08      	cmp	r3, #8
 8001368:	d106      	bne.n	8001378 <menu+0x6c>
 800136a:	4b7d      	ldr	r3, [pc, #500]	; (8001560 <menu+0x254>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <menu+0x6c>
			menuSayac = 16;
 8001372:	4b79      	ldr	r3, [pc, #484]	; (8001558 <menu+0x24c>)
 8001374:	2210      	movs	r2, #16
 8001376:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001378:	4b77      	ldr	r3, [pc, #476]	; (8001558 <menu+0x24c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b0d      	cmp	r3, #13
 800137e:	d106      	bne.n	800138e <menu+0x82>
 8001380:	4b77      	ldr	r3, [pc, #476]	; (8001560 <menu+0x254>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d102      	bne.n	800138e <menu+0x82>
			menuSayac = 16;
 8001388:	4b73      	ldr	r3, [pc, #460]	; (8001558 <menu+0x24c>)
 800138a:	2210      	movs	r2, #16
 800138c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800138e:	4b72      	ldr	r3, [pc, #456]	; (8001558 <menu+0x24c>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b09      	cmp	r3, #9
 8001394:	d106      	bne.n	80013a4 <menu+0x98>
 8001396:	4b72      	ldr	r3, [pc, #456]	; (8001560 <menu+0x254>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d102      	bne.n	80013a4 <menu+0x98>
			menuSayac = 13;
 800139e:	4b6e      	ldr	r3, [pc, #440]	; (8001558 <menu+0x24c>)
 80013a0:	220d      	movs	r2, #13
 80013a2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80013a4:	4b6c      	ldr	r3, [pc, #432]	; (8001558 <menu+0x24c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b0a      	cmp	r3, #10
 80013aa:	d10a      	bne.n	80013c2 <menu+0xb6>
 80013ac:	4b6d      	ldr	r3, [pc, #436]	; (8001564 <menu+0x258>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d003      	beq.n	80013bc <menu+0xb0>
 80013b4:	4b6b      	ldr	r3, [pc, #428]	; (8001564 <menu+0x258>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d102      	bne.n	80013c2 <menu+0xb6>
			menuSayac = 11;
 80013bc:	4b66      	ldr	r3, [pc, #408]	; (8001558 <menu+0x24c>)
 80013be:	220b      	movs	r2, #11
 80013c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80013c2:	4b65      	ldr	r3, [pc, #404]	; (8001558 <menu+0x24c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b0c      	cmp	r3, #12
 80013c8:	d10e      	bne.n	80013e8 <menu+0xdc>
 80013ca:	4b67      	ldr	r3, [pc, #412]	; (8001568 <menu+0x25c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d003      	beq.n	80013da <menu+0xce>
 80013d2:	4b65      	ldr	r3, [pc, #404]	; (8001568 <menu+0x25c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d106      	bne.n	80013e8 <menu+0xdc>
 80013da:	4b61      	ldr	r3, [pc, #388]	; (8001560 <menu+0x254>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d102      	bne.n	80013e8 <menu+0xdc>
			menuSayac = 16;
 80013e2:	4b5d      	ldr	r3, [pc, #372]	; (8001558 <menu+0x24c>)
 80013e4:	2210      	movs	r2, #16
 80013e6:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80013e8:	4b5b      	ldr	r3, [pc, #364]	; (8001558 <menu+0x24c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b0c      	cmp	r3, #12
 80013ee:	d10e      	bne.n	800140e <menu+0x102>
 80013f0:	4b5d      	ldr	r3, [pc, #372]	; (8001568 <menu+0x25c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d003      	beq.n	8001400 <menu+0xf4>
 80013f8:	4b5b      	ldr	r3, [pc, #364]	; (8001568 <menu+0x25c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d106      	bne.n	800140e <menu+0x102>
 8001400:	4b57      	ldr	r3, [pc, #348]	; (8001560 <menu+0x254>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b03      	cmp	r3, #3
 8001406:	d102      	bne.n	800140e <menu+0x102>
			menuSayac = 13;
 8001408:	4b53      	ldr	r3, [pc, #332]	; (8001558 <menu+0x24c>)
 800140a:	220d      	movs	r2, #13
 800140c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800140e:	4b52      	ldr	r3, [pc, #328]	; (8001558 <menu+0x24c>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	d106      	bne.n	8001424 <menu+0x118>
 8001416:	4b55      	ldr	r3, [pc, #340]	; (800156c <menu+0x260>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d102      	bne.n	8001424 <menu+0x118>
			menuSayac = 16;
 800141e:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <menu+0x24c>)
 8001420:	2210      	movs	r2, #16
 8001422:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001424:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <menu+0x24c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b18      	cmp	r3, #24
 800142a:	d106      	bne.n	800143a <menu+0x12e>
 800142c:	4b4b      	ldr	r3, [pc, #300]	; (800155c <menu+0x250>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <menu+0x12e>
			menuSayac = 26;
 8001434:	4b48      	ldr	r3, [pc, #288]	; (8001558 <menu+0x24c>)
 8001436:	221a      	movs	r2, #26
 8001438:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800143a:	f003 fbdb 	bl	8004bf4 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 800143e:	2108      	movs	r1, #8
 8001440:	484b      	ldr	r0, [pc, #300]	; (8001570 <menu+0x264>)
 8001442:	f007 ffeb 	bl	800941c <HAL_GPIO_ReadPin>
 8001446:	4603      	mov	r3, r0
 8001448:	2b01      	cmp	r3, #1
 800144a:	d175      	bne.n	8001538 <menu+0x22c>
 800144c:	4b41      	ldr	r3, [pc, #260]	; (8001554 <menu+0x248>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	f083 0301 	eor.w	r3, r3, #1
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d06e      	beq.n	8001538 <menu+0x22c>
		if (menuSayac <= 1) {
 800145a:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <menu+0x24c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d802      	bhi.n	8001468 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <menu+0x24c>)
 8001464:	2224      	movs	r2, #36	; 0x24
 8001466:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001468:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <menu+0x24c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	3b01      	subs	r3, #1
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b39      	ldr	r3, [pc, #228]	; (8001558 <menu+0x24c>)
 8001472:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001474:	4b38      	ldr	r3, [pc, #224]	; (8001558 <menu+0x24c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b14      	cmp	r3, #20
 800147a:	d106      	bne.n	800148a <menu+0x17e>
 800147c:	4b37      	ldr	r3, [pc, #220]	; (800155c <menu+0x250>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <menu+0x17e>
			menuSayac = 17;
 8001484:	4b34      	ldr	r3, [pc, #208]	; (8001558 <menu+0x24c>)
 8001486:	2211      	movs	r2, #17
 8001488:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <menu+0x24c>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b0f      	cmp	r3, #15
 8001490:	d106      	bne.n	80014a0 <menu+0x194>
 8001492:	4b33      	ldr	r3, [pc, #204]	; (8001560 <menu+0x254>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <menu+0x194>
			menuSayac = 7;
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <menu+0x24c>)
 800149c:	2207      	movs	r2, #7
 800149e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <menu+0x24c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	d106      	bne.n	80014b6 <menu+0x1aa>
 80014a8:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <menu+0x254>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d102      	bne.n	80014b6 <menu+0x1aa>
			menuSayac = 12;
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <menu+0x24c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <menu+0x24c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	d106      	bne.n	80014cc <menu+0x1c0>
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <menu+0x254>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d102      	bne.n	80014cc <menu+0x1c0>
			menuSayac = 8;
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <menu+0x24c>)
 80014c8:	2208      	movs	r2, #8
 80014ca:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <menu+0x24c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b0a      	cmp	r3, #10
 80014d2:	d10a      	bne.n	80014ea <menu+0x1de>
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <menu+0x258>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d003      	beq.n	80014e4 <menu+0x1d8>
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <menu+0x258>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d102      	bne.n	80014ea <menu+0x1de>
			menuSayac = 9;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <menu+0x24c>)
 80014e6:	2209      	movs	r2, #9
 80014e8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <menu+0x24c>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b0c      	cmp	r3, #12
 80014f0:	d10a      	bne.n	8001508 <menu+0x1fc>
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <menu+0x25c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d003      	beq.n	8001502 <menu+0x1f6>
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <menu+0x25c>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d102      	bne.n	8001508 <menu+0x1fc>
			menuSayac = 11;
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <menu+0x24c>)
 8001504:	220b      	movs	r2, #11
 8001506:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <menu+0x24c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d106      	bne.n	800151e <menu+0x212>
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <menu+0x260>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d102      	bne.n	800151e <menu+0x212>
			menuSayac = 14;
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <menu+0x24c>)
 800151a:	220e      	movs	r2, #14
 800151c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <menu+0x24c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b19      	cmp	r3, #25
 8001524:	d106      	bne.n	8001534 <menu+0x228>
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <menu+0x250>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <menu+0x228>
			menuSayac = 23;
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <menu+0x24c>)
 8001530:	2217      	movs	r2, #23
 8001532:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001534:	f003 fb5e 	bl	8004bf4 <bekle>
	}

	if (menuSayac == 0) {
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <menu+0x24c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d133      	bne.n	80015a8 <menu+0x29c>
		if(dilSecim == 0) {
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <menu+0x268>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d121      	bne.n	800158c <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001548:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <menu+0x26c>)
 800154a:	2101      	movs	r1, #1
 800154c:	2001      	movs	r0, #1
 800154e:	e015      	b.n	800157c <menu+0x270>
 8001550:	40010800 	.word	0x40010800
 8001554:	2000024f 	.word	0x2000024f
 8001558:	20000220 	.word	0x20000220
 800155c:	2000022f 	.word	0x2000022f
 8001560:	20000228 	.word	0x20000228
 8001564:	20000229 	.word	0x20000229
 8001568:	2000022a 	.word	0x2000022a
 800156c:	2000022b 	.word	0x2000022b
 8001570:	40011000 	.word	0x40011000
 8001574:	20000241 	.word	0x20000241
 8001578:	0800d174 	.word	0x0800d174
 800157c:	f006 fc28 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001580:	4a94      	ldr	r2, [pc, #592]	; (80017d4 <menu+0x4c8>)
 8001582:	2101      	movs	r1, #1
 8001584:	2002      	movs	r0, #2
 8001586:	f006 fc23 	bl	8007dd0 <lcd_print>
 800158a:	e00d      	b.n	80015a8 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 800158c:	4b92      	ldr	r3, [pc, #584]	; (80017d8 <menu+0x4cc>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d109      	bne.n	80015a8 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001594:	4a91      	ldr	r2, [pc, #580]	; (80017dc <menu+0x4d0>)
 8001596:	2101      	movs	r1, #1
 8001598:	2001      	movs	r0, #1
 800159a:	f006 fc19 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800159e:	4a90      	ldr	r2, [pc, #576]	; (80017e0 <menu+0x4d4>)
 80015a0:	2101      	movs	r1, #1
 80015a2:	2002      	movs	r0, #2
 80015a4:	f006 fc14 	bl	8007dd0 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80015a8:	4b8e      	ldr	r3, [pc, #568]	; (80017e4 <menu+0x4d8>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	f040 82b5 	bne.w	8001b1c <menu+0x810>
		if(dilSecim == 0) {
 80015b2:	4b89      	ldr	r3, [pc, #548]	; (80017d8 <menu+0x4cc>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d105      	bne.n	80015c6 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80015ba:	4a8b      	ldr	r2, [pc, #556]	; (80017e8 <menu+0x4dc>)
 80015bc:	2101      	movs	r1, #1
 80015be:	2001      	movs	r0, #1
 80015c0:	f006 fc06 	bl	8007dd0 <lcd_print>
 80015c4:	e008      	b.n	80015d8 <menu+0x2cc>
		} else if(dilSecim == 1) {
 80015c6:	4b84      	ldr	r3, [pc, #528]	; (80017d8 <menu+0x4cc>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d104      	bne.n	80015d8 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80015ce:	4a87      	ldr	r2, [pc, #540]	; (80017ec <menu+0x4e0>)
 80015d0:	2101      	movs	r1, #1
 80015d2:	2001      	movs	r0, #1
 80015d4:	f006 fbfc 	bl	8007dd0 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80015d8:	4b85      	ldr	r3, [pc, #532]	; (80017f0 <menu+0x4e4>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d123      	bne.n	8001628 <menu+0x31c>
			if(dilSecim == 0) {
 80015e0:	4b7d      	ldr	r3, [pc, #500]	; (80017d8 <menu+0x4cc>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d105      	bne.n	80015f4 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80015e8:	4a82      	ldr	r2, [pc, #520]	; (80017f4 <menu+0x4e8>)
 80015ea:	2101      	movs	r1, #1
 80015ec:	2002      	movs	r0, #2
 80015ee:	f006 fbef 	bl	8007dd0 <lcd_print>
 80015f2:	e008      	b.n	8001606 <menu+0x2fa>

			} else if(dilSecim == 1) {
 80015f4:	4b78      	ldr	r3, [pc, #480]	; (80017d8 <menu+0x4cc>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d104      	bne.n	8001606 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80015fc:	4a7e      	ldr	r2, [pc, #504]	; (80017f8 <menu+0x4ec>)
 80015fe:	2101      	movs	r1, #1
 8001600:	2002      	movs	r0, #2
 8001602:	f006 fbe5 	bl	8007dd0 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001606:	4a7d      	ldr	r2, [pc, #500]	; (80017fc <menu+0x4f0>)
 8001608:	210f      	movs	r1, #15
 800160a:	2002      	movs	r0, #2
 800160c:	f006 fbe0 	bl	8007dd0 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001610:	4b7b      	ldr	r3, [pc, #492]	; (8001800 <menu+0x4f4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	220a      	movs	r2, #10
 8001616:	497b      	ldr	r1, [pc, #492]	; (8001804 <menu+0x4f8>)
 8001618:	4618      	mov	r0, r3
 800161a:	f00a ff2b 	bl	800c474 <itoa>
			lcd_print(2, 14, snum);
 800161e:	4a79      	ldr	r2, [pc, #484]	; (8001804 <menu+0x4f8>)
 8001620:	210e      	movs	r1, #14
 8001622:	2002      	movs	r0, #2
 8001624:	f006 fbd4 	bl	8007dd0 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001628:	4b71      	ldr	r3, [pc, #452]	; (80017f0 <menu+0x4e4>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d123      	bne.n	8001678 <menu+0x36c>
			if(dilSecim == 0) {
 8001630:	4b69      	ldr	r3, [pc, #420]	; (80017d8 <menu+0x4cc>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d105      	bne.n	8001644 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001638:	4a73      	ldr	r2, [pc, #460]	; (8001808 <menu+0x4fc>)
 800163a:	2101      	movs	r1, #1
 800163c:	2002      	movs	r0, #2
 800163e:	f006 fbc7 	bl	8007dd0 <lcd_print>
 8001642:	e008      	b.n	8001656 <menu+0x34a>
			} else if(dilSecim == 1) {
 8001644:	4b64      	ldr	r3, [pc, #400]	; (80017d8 <menu+0x4cc>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d104      	bne.n	8001656 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 800164c:	4a6f      	ldr	r2, [pc, #444]	; (800180c <menu+0x500>)
 800164e:	2101      	movs	r1, #1
 8001650:	2002      	movs	r0, #2
 8001652:	f006 fbbd 	bl	8007dd0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001656:	4a6e      	ldr	r2, [pc, #440]	; (8001810 <menu+0x504>)
 8001658:	210f      	movs	r1, #15
 800165a:	2002      	movs	r0, #2
 800165c:	f006 fbb8 	bl	8007dd0 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001660:	4b6c      	ldr	r3, [pc, #432]	; (8001814 <menu+0x508>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	220a      	movs	r2, #10
 8001666:	4967      	ldr	r1, [pc, #412]	; (8001804 <menu+0x4f8>)
 8001668:	4618      	mov	r0, r3
 800166a:	f00a ff03 	bl	800c474 <itoa>
			lcd_print(2, 14, snum);
 800166e:	4a65      	ldr	r2, [pc, #404]	; (8001804 <menu+0x4f8>)
 8001670:	210e      	movs	r1, #14
 8001672:	2002      	movs	r0, #2
 8001674:	f006 fbac 	bl	8007dd0 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001678:	4b5d      	ldr	r3, [pc, #372]	; (80017f0 <menu+0x4e4>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d123      	bne.n	80016c8 <menu+0x3bc>
			if(dilSecim == 0) {
 8001680:	4b55      	ldr	r3, [pc, #340]	; (80017d8 <menu+0x4cc>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d105      	bne.n	8001694 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001688:	4a63      	ldr	r2, [pc, #396]	; (8001818 <menu+0x50c>)
 800168a:	2101      	movs	r1, #1
 800168c:	2002      	movs	r0, #2
 800168e:	f006 fb9f 	bl	8007dd0 <lcd_print>
 8001692:	e008      	b.n	80016a6 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001694:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <menu+0x4cc>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d104      	bne.n	80016a6 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 800169c:	4a5f      	ldr	r2, [pc, #380]	; (800181c <menu+0x510>)
 800169e:	2101      	movs	r1, #1
 80016a0:	2002      	movs	r0, #2
 80016a2:	f006 fb95 	bl	8007dd0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016a6:	4a5a      	ldr	r2, [pc, #360]	; (8001810 <menu+0x504>)
 80016a8:	210f      	movs	r1, #15
 80016aa:	2002      	movs	r0, #2
 80016ac:	f006 fb90 	bl	8007dd0 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80016b0:	4b5b      	ldr	r3, [pc, #364]	; (8001820 <menu+0x514>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	220a      	movs	r2, #10
 80016b6:	4953      	ldr	r1, [pc, #332]	; (8001804 <menu+0x4f8>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f00a fedb 	bl	800c474 <itoa>
			lcd_print(2, 14, snum);
 80016be:	4a51      	ldr	r2, [pc, #324]	; (8001804 <menu+0x4f8>)
 80016c0:	210e      	movs	r1, #14
 80016c2:	2002      	movs	r0, #2
 80016c4:	f006 fb84 	bl	8007dd0 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80016c8:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <menu+0x4e4>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d123      	bne.n	8001718 <menu+0x40c>
			if(dilSecim == 0) {
 80016d0:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <menu+0x4cc>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d105      	bne.n	80016e4 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80016d8:	4a52      	ldr	r2, [pc, #328]	; (8001824 <menu+0x518>)
 80016da:	2101      	movs	r1, #1
 80016dc:	2002      	movs	r0, #2
 80016de:	f006 fb77 	bl	8007dd0 <lcd_print>
 80016e2:	e008      	b.n	80016f6 <menu+0x3ea>
			} else if(dilSecim == 1) {
 80016e4:	4b3c      	ldr	r3, [pc, #240]	; (80017d8 <menu+0x4cc>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d104      	bne.n	80016f6 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80016ec:	4a4e      	ldr	r2, [pc, #312]	; (8001828 <menu+0x51c>)
 80016ee:	2101      	movs	r1, #1
 80016f0:	2002      	movs	r0, #2
 80016f2:	f006 fb6d 	bl	8007dd0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016f6:	4a46      	ldr	r2, [pc, #280]	; (8001810 <menu+0x504>)
 80016f8:	210f      	movs	r1, #15
 80016fa:	2002      	movs	r0, #2
 80016fc:	f006 fb68 	bl	8007dd0 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001700:	4b4a      	ldr	r3, [pc, #296]	; (800182c <menu+0x520>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	220a      	movs	r2, #10
 8001706:	493f      	ldr	r1, [pc, #252]	; (8001804 <menu+0x4f8>)
 8001708:	4618      	mov	r0, r3
 800170a:	f00a feb3 	bl	800c474 <itoa>
			lcd_print(2, 14, snum);
 800170e:	4a3d      	ldr	r2, [pc, #244]	; (8001804 <menu+0x4f8>)
 8001710:	210e      	movs	r1, #14
 8001712:	2002      	movs	r0, #2
 8001714:	f006 fb5c 	bl	8007dd0 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001718:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <menu+0x4e4>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b04      	cmp	r3, #4
 800171e:	d123      	bne.n	8001768 <menu+0x45c>
			if(dilSecim == 0) {
 8001720:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <menu+0x4cc>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d105      	bne.n	8001734 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001728:	4a41      	ldr	r2, [pc, #260]	; (8001830 <menu+0x524>)
 800172a:	2101      	movs	r1, #1
 800172c:	2002      	movs	r0, #2
 800172e:	f006 fb4f 	bl	8007dd0 <lcd_print>
 8001732:	e008      	b.n	8001746 <menu+0x43a>
			} else if(dilSecim == 1) {
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <menu+0x4cc>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d104      	bne.n	8001746 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 800173c:	4a3d      	ldr	r2, [pc, #244]	; (8001834 <menu+0x528>)
 800173e:	2101      	movs	r1, #1
 8001740:	2002      	movs	r0, #2
 8001742:	f006 fb45 	bl	8007dd0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001746:	4a32      	ldr	r2, [pc, #200]	; (8001810 <menu+0x504>)
 8001748:	210f      	movs	r1, #15
 800174a:	2002      	movs	r0, #2
 800174c:	f006 fb40 	bl	8007dd0 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001750:	4b39      	ldr	r3, [pc, #228]	; (8001838 <menu+0x52c>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	220a      	movs	r2, #10
 8001756:	492b      	ldr	r1, [pc, #172]	; (8001804 <menu+0x4f8>)
 8001758:	4618      	mov	r0, r3
 800175a:	f00a fe8b 	bl	800c474 <itoa>
			lcd_print(2, 14, snum);
 800175e:	4a29      	ldr	r2, [pc, #164]	; (8001804 <menu+0x4f8>)
 8001760:	210e      	movs	r1, #14
 8001762:	2002      	movs	r0, #2
 8001764:	f006 fb34 	bl	8007dd0 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <menu+0x4e4>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d123      	bne.n	80017b8 <menu+0x4ac>
			if(dilSecim == 0) {
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <menu+0x4cc>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001778:	4a30      	ldr	r2, [pc, #192]	; (800183c <menu+0x530>)
 800177a:	2101      	movs	r1, #1
 800177c:	2002      	movs	r0, #2
 800177e:	f006 fb27 	bl	8007dd0 <lcd_print>
 8001782:	e008      	b.n	8001796 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <menu+0x4cc>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d104      	bne.n	8001796 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 800178c:	4a2c      	ldr	r2, [pc, #176]	; (8001840 <menu+0x534>)
 800178e:	2101      	movs	r1, #1
 8001790:	2002      	movs	r0, #2
 8001792:	f006 fb1d 	bl	8007dd0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001796:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <menu+0x504>)
 8001798:	210f      	movs	r1, #15
 800179a:	2002      	movs	r0, #2
 800179c:	f006 fb18 	bl	8007dd0 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80017a0:	4b28      	ldr	r3, [pc, #160]	; (8001844 <menu+0x538>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	220a      	movs	r2, #10
 80017a6:	4917      	ldr	r1, [pc, #92]	; (8001804 <menu+0x4f8>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f00a fe63 	bl	800c474 <itoa>
			lcd_print(2, 14, snum);
 80017ae:	4a15      	ldr	r2, [pc, #84]	; (8001804 <menu+0x4f8>)
 80017b0:	210e      	movs	r1, #14
 80017b2:	2002      	movs	r0, #2
 80017b4:	f006 fb0c 	bl	8007dd0 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <menu+0x4e4>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b06      	cmp	r3, #6
 80017be:	d15f      	bne.n	8001880 <menu+0x574>
			if(dilSecim == 0) {
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <menu+0x4cc>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d141      	bne.n	800184c <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80017c8:	4a1f      	ldr	r2, [pc, #124]	; (8001848 <menu+0x53c>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	2002      	movs	r0, #2
 80017ce:	f006 faff 	bl	8007dd0 <lcd_print>
 80017d2:	e044      	b.n	800185e <menu+0x552>
 80017d4:	0800d188 	.word	0x0800d188
 80017d8:	20000241 	.word	0x20000241
 80017dc:	0800d19c 	.word	0x0800d19c
 80017e0:	0800d1b0 	.word	0x0800d1b0
 80017e4:	20000220 	.word	0x20000220
 80017e8:	0800d1c4 	.word	0x0800d1c4
 80017ec:	0800d1d8 	.word	0x0800d1d8
 80017f0:	20000222 	.word	0x20000222
 80017f4:	0800d1ec 	.word	0x0800d1ec
 80017f8:	0800d1fc 	.word	0x0800d1fc
 80017fc:	0800d20c 	.word	0x0800d20c
 8001800:	20000242 	.word	0x20000242
 8001804:	20000188 	.word	0x20000188
 8001808:	0800d210 	.word	0x0800d210
 800180c:	0800d220 	.word	0x0800d220
 8001810:	0800d230 	.word	0x0800d230
 8001814:	20000243 	.word	0x20000243
 8001818:	0800d234 	.word	0x0800d234
 800181c:	0800d244 	.word	0x0800d244
 8001820:	20000244 	.word	0x20000244
 8001824:	0800d254 	.word	0x0800d254
 8001828:	0800d264 	.word	0x0800d264
 800182c:	20000245 	.word	0x20000245
 8001830:	0800d274 	.word	0x0800d274
 8001834:	0800d284 	.word	0x0800d284
 8001838:	20000246 	.word	0x20000246
 800183c:	0800d294 	.word	0x0800d294
 8001840:	0800d2a4 	.word	0x0800d2a4
 8001844:	20000247 	.word	0x20000247
 8001848:	0800d2b4 	.word	0x0800d2b4
			} else if(dilSecim == 1) {
 800184c:	4b4f      	ldr	r3, [pc, #316]	; (800198c <menu+0x680>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d104      	bne.n	800185e <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001854:	4a4e      	ldr	r2, [pc, #312]	; (8001990 <menu+0x684>)
 8001856:	2101      	movs	r1, #1
 8001858:	2002      	movs	r0, #2
 800185a:	f006 fab9 	bl	8007dd0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800185e:	4a4d      	ldr	r2, [pc, #308]	; (8001994 <menu+0x688>)
 8001860:	210f      	movs	r1, #15
 8001862:	2002      	movs	r0, #2
 8001864:	f006 fab4 	bl	8007dd0 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001868:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <menu+0x68c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	220a      	movs	r2, #10
 800186e:	494b      	ldr	r1, [pc, #300]	; (800199c <menu+0x690>)
 8001870:	4618      	mov	r0, r3
 8001872:	f00a fdff 	bl	800c474 <itoa>
			lcd_print(2, 14, snum);
 8001876:	4a49      	ldr	r2, [pc, #292]	; (800199c <menu+0x690>)
 8001878:	210e      	movs	r1, #14
 800187a:	2002      	movs	r0, #2
 800187c:	f006 faa8 	bl	8007dd0 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001880:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <menu+0x694>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b07      	cmp	r3, #7
 8001886:	d123      	bne.n	80018d0 <menu+0x5c4>
			if(dilSecim == 0) {
 8001888:	4b40      	ldr	r3, [pc, #256]	; (800198c <menu+0x680>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001890:	4a44      	ldr	r2, [pc, #272]	; (80019a4 <menu+0x698>)
 8001892:	2101      	movs	r1, #1
 8001894:	2002      	movs	r0, #2
 8001896:	f006 fa9b 	bl	8007dd0 <lcd_print>
 800189a:	e008      	b.n	80018ae <menu+0x5a2>
			} else if(dilSecim == 1) {
 800189c:	4b3b      	ldr	r3, [pc, #236]	; (800198c <menu+0x680>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d104      	bne.n	80018ae <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 80018a4:	4a40      	ldr	r2, [pc, #256]	; (80019a8 <menu+0x69c>)
 80018a6:	2101      	movs	r1, #1
 80018a8:	2002      	movs	r0, #2
 80018aa:	f006 fa91 	bl	8007dd0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018ae:	4a39      	ldr	r2, [pc, #228]	; (8001994 <menu+0x688>)
 80018b0:	210f      	movs	r1, #15
 80018b2:	2002      	movs	r0, #2
 80018b4:	f006 fa8c 	bl	8007dd0 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80018b8:	4b3c      	ldr	r3, [pc, #240]	; (80019ac <menu+0x6a0>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	220a      	movs	r2, #10
 80018be:	4937      	ldr	r1, [pc, #220]	; (800199c <menu+0x690>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f00a fdd7 	bl	800c474 <itoa>
			lcd_print(2, 14, snum);
 80018c6:	4a35      	ldr	r2, [pc, #212]	; (800199c <menu+0x690>)
 80018c8:	210e      	movs	r1, #14
 80018ca:	2002      	movs	r0, #2
 80018cc:	f006 fa80 	bl	8007dd0 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80018d0:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <menu+0x694>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d123      	bne.n	8001920 <menu+0x614>
			if(dilSecim == 0) {
 80018d8:	4b2c      	ldr	r3, [pc, #176]	; (800198c <menu+0x680>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d105      	bne.n	80018ec <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 80018e0:	4a33      	ldr	r2, [pc, #204]	; (80019b0 <menu+0x6a4>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	2002      	movs	r0, #2
 80018e6:	f006 fa73 	bl	8007dd0 <lcd_print>
 80018ea:	e008      	b.n	80018fe <menu+0x5f2>
			} else if(dilSecim == 1) {
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <menu+0x680>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d104      	bne.n	80018fe <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 80018f4:	4a2f      	ldr	r2, [pc, #188]	; (80019b4 <menu+0x6a8>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	2002      	movs	r0, #2
 80018fa:	f006 fa69 	bl	8007dd0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018fe:	4a25      	ldr	r2, [pc, #148]	; (8001994 <menu+0x688>)
 8001900:	210f      	movs	r1, #15
 8001902:	2002      	movs	r0, #2
 8001904:	f006 fa64 	bl	8007dd0 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <menu+0x6ac>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	220a      	movs	r2, #10
 800190e:	4923      	ldr	r1, [pc, #140]	; (800199c <menu+0x690>)
 8001910:	4618      	mov	r0, r3
 8001912:	f00a fdaf 	bl	800c474 <itoa>
			lcd_print(2, 14, snum);
 8001916:	4a21      	ldr	r2, [pc, #132]	; (800199c <menu+0x690>)
 8001918:	210e      	movs	r1, #14
 800191a:	2002      	movs	r0, #2
 800191c:	f006 fa58 	bl	8007dd0 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001920:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <menu+0x694>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b09      	cmp	r3, #9
 8001926:	d123      	bne.n	8001970 <menu+0x664>
			if(dilSecim == 0) {
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <menu+0x680>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001930:	4a22      	ldr	r2, [pc, #136]	; (80019bc <menu+0x6b0>)
 8001932:	2101      	movs	r1, #1
 8001934:	2002      	movs	r0, #2
 8001936:	f006 fa4b 	bl	8007dd0 <lcd_print>
 800193a:	e008      	b.n	800194e <menu+0x642>
			} else if(dilSecim == 1) {
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <menu+0x680>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d104      	bne.n	800194e <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001944:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <menu+0x6b4>)
 8001946:	2101      	movs	r1, #1
 8001948:	2002      	movs	r0, #2
 800194a:	f006 fa41 	bl	8007dd0 <lcd_print>
			}
			lcd_print(2, 16, " ");
 800194e:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <menu+0x6b8>)
 8001950:	2110      	movs	r1, #16
 8001952:	2002      	movs	r0, #2
 8001954:	f006 fa3c 	bl	8007dd0 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <menu+0x6bc>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	220a      	movs	r2, #10
 800195e:	490f      	ldr	r1, [pc, #60]	; (800199c <menu+0x690>)
 8001960:	4618      	mov	r0, r3
 8001962:	f00a fd87 	bl	800c474 <itoa>
			lcd_print(2, 15, snum);
 8001966:	4a0d      	ldr	r2, [pc, #52]	; (800199c <menu+0x690>)
 8001968:	210f      	movs	r1, #15
 800196a:	2002      	movs	r0, #2
 800196c:	f006 fa30 	bl	8007dd0 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <menu+0x694>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b0a      	cmp	r3, #10
 8001976:	d134      	bne.n	80019e2 <menu+0x6d6>
			if(dilSecim == 0) {
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <menu+0x680>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d127      	bne.n	80019d0 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001980:	4a12      	ldr	r2, [pc, #72]	; (80019cc <menu+0x6c0>)
 8001982:	2101      	movs	r1, #1
 8001984:	2002      	movs	r0, #2
 8001986:	f006 fa23 	bl	8007dd0 <lcd_print>
 800198a:	e02a      	b.n	80019e2 <menu+0x6d6>
 800198c:	20000241 	.word	0x20000241
 8001990:	0800d2c4 	.word	0x0800d2c4
 8001994:	0800d230 	.word	0x0800d230
 8001998:	20000248 	.word	0x20000248
 800199c:	20000188 	.word	0x20000188
 80019a0:	20000222 	.word	0x20000222
 80019a4:	0800d2d4 	.word	0x0800d2d4
 80019a8:	0800d2e4 	.word	0x0800d2e4
 80019ac:	20000249 	.word	0x20000249
 80019b0:	0800d2f4 	.word	0x0800d2f4
 80019b4:	0800d304 	.word	0x0800d304
 80019b8:	2000024a 	.word	0x2000024a
 80019bc:	0800d314 	.word	0x0800d314
 80019c0:	0800d324 	.word	0x0800d324
 80019c4:	0800d334 	.word	0x0800d334
 80019c8:	2000024b 	.word	0x2000024b
 80019cc:	0800d338 	.word	0x0800d338
			} else if(dilSecim == 1) {
 80019d0:	4b82      	ldr	r3, [pc, #520]	; (8001bdc <menu+0x8d0>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d104      	bne.n	80019e2 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 80019d8:	4a81      	ldr	r2, [pc, #516]	; (8001be0 <menu+0x8d4>)
 80019da:	2101      	movs	r1, #1
 80019dc:	2002      	movs	r0, #2
 80019de:	f006 f9f7 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019e2:	2102      	movs	r1, #2
 80019e4:	487f      	ldr	r0, [pc, #508]	; (8001be4 <menu+0x8d8>)
 80019e6:	f007 fd19 	bl	800941c <HAL_GPIO_ReadPin>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d119      	bne.n	8001a24 <menu+0x718>
 80019f0:	4b7d      	ldr	r3, [pc, #500]	; (8001be8 <menu+0x8dc>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	f083 0301 	eor.w	r3, r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d012      	beq.n	8001a24 <menu+0x718>
 80019fe:	4b7b      	ldr	r3, [pc, #492]	; (8001bec <menu+0x8e0>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10e      	bne.n	8001a24 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001a06:	4b7a      	ldr	r3, [pc, #488]	; (8001bf0 <menu+0x8e4>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b78      	ldr	r3, [pc, #480]	; (8001bf0 <menu+0x8e4>)
 8001a10:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001a12:	4b77      	ldr	r3, [pc, #476]	; (8001bf0 <menu+0x8e4>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b0a      	cmp	r3, #10
 8001a18:	d902      	bls.n	8001a20 <menu+0x714>
				hataGostermeSirasi = 0;
 8001a1a:	4b75      	ldr	r3, [pc, #468]	; (8001bf0 <menu+0x8e4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a20:	f003 f8e8 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a24:	2104      	movs	r1, #4
 8001a26:	486f      	ldr	r0, [pc, #444]	; (8001be4 <menu+0x8d8>)
 8001a28:	f007 fcf8 	bl	800941c <HAL_GPIO_ReadPin>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d119      	bne.n	8001a66 <menu+0x75a>
 8001a32:	4b6d      	ldr	r3, [pc, #436]	; (8001be8 <menu+0x8dc>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f083 0301 	eor.w	r3, r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d012      	beq.n	8001a66 <menu+0x75a>
 8001a40:	4b6a      	ldr	r3, [pc, #424]	; (8001bec <menu+0x8e0>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10e      	bne.n	8001a66 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001a48:	4b69      	ldr	r3, [pc, #420]	; (8001bf0 <menu+0x8e4>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b67      	ldr	r3, [pc, #412]	; (8001bf0 <menu+0x8e4>)
 8001a52:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001a54:	4b66      	ldr	r3, [pc, #408]	; (8001bf0 <menu+0x8e4>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b0b      	cmp	r3, #11
 8001a5a:	d902      	bls.n	8001a62 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001a5c:	4b64      	ldr	r3, [pc, #400]	; (8001bf0 <menu+0x8e4>)
 8001a5e:	220a      	movs	r2, #10
 8001a60:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a62:	f003 f8c7 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001a66:	2108      	movs	r1, #8
 8001a68:	485e      	ldr	r0, [pc, #376]	; (8001be4 <menu+0x8d8>)
 8001a6a:	f007 fcd7 	bl	800941c <HAL_GPIO_ReadPin>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d153      	bne.n	8001b1c <menu+0x810>
 8001a74:	4b5c      	ldr	r3, [pc, #368]	; (8001be8 <menu+0x8dc>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	f083 0301 	eor.w	r3, r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d04c      	beq.n	8001b1c <menu+0x810>
 8001a82:	4b5b      	ldr	r3, [pc, #364]	; (8001bf0 <menu+0x8e4>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b0a      	cmp	r3, #10
 8001a88:	d148      	bne.n	8001b1c <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001a8a:	4b5a      	ldr	r3, [pc, #360]	; (8001bf4 <menu+0x8e8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <menu+0x8ec>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001a98:	4b58      	ldr	r3, [pc, #352]	; (8001bfc <menu+0x8f0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	4b56      	ldr	r3, [pc, #344]	; (8001bf8 <menu+0x8ec>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001aa6:	4b56      	ldr	r3, [pc, #344]	; (8001c00 <menu+0x8f4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	4b52      	ldr	r3, [pc, #328]	; (8001bf8 <menu+0x8ec>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <menu+0x8f8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	4b4f      	ldr	r3, [pc, #316]	; (8001bf8 <menu+0x8ec>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001ac2:	4b51      	ldr	r3, [pc, #324]	; (8001c08 <menu+0x8fc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <menu+0x8ec>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001ad0:	4b4e      	ldr	r3, [pc, #312]	; (8001c0c <menu+0x900>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <menu+0x8ec>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001ade:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <menu+0x904>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	4b44      	ldr	r3, [pc, #272]	; (8001bf8 <menu+0x8ec>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001aec:	4b49      	ldr	r3, [pc, #292]	; (8001c14 <menu+0x908>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
 8001af2:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <menu+0x8ec>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001afa:	4b47      	ldr	r3, [pc, #284]	; (8001c18 <menu+0x90c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <menu+0x8ec>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001b08:	4b44      	ldr	r3, [pc, #272]	; (8001c1c <menu+0x910>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <menu+0x8ec>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001b16:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <menu+0x914>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001b1c:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <menu+0x918>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	f040 80fc 	bne.w	8001d1e <menu+0xa12>
		if(dilSecim == 0) {
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <menu+0x8d0>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d105      	bne.n	8001b3a <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001b2e:	4a3e      	ldr	r2, [pc, #248]	; (8001c28 <menu+0x91c>)
 8001b30:	2101      	movs	r1, #1
 8001b32:	2001      	movs	r0, #1
 8001b34:	f006 f94c 	bl	8007dd0 <lcd_print>
 8001b38:	e008      	b.n	8001b4c <menu+0x840>
		} else if(dilSecim == 1) {
 8001b3a:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <menu+0x8d0>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d104      	bne.n	8001b4c <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001b42:	4a3a      	ldr	r2, [pc, #232]	; (8001c2c <menu+0x920>)
 8001b44:	2101      	movs	r1, #1
 8001b46:	2001      	movs	r0, #1
 8001b48:	f006 f942 	bl	8007dd0 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <menu+0x8e0>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d003      	beq.n	8001b5c <menu+0x850>
 8001b54:	4b25      	ldr	r3, [pc, #148]	; (8001bec <menu+0x8e0>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d112      	bne.n	8001b82 <menu+0x876>
			if(dilSecim == 0) {
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <menu+0x8d0>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d105      	bne.n	8001b70 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001b64:	4a32      	ldr	r2, [pc, #200]	; (8001c30 <menu+0x924>)
 8001b66:	2101      	movs	r1, #1
 8001b68:	2002      	movs	r0, #2
 8001b6a:	f006 f931 	bl	8007dd0 <lcd_print>
 8001b6e:	e008      	b.n	8001b82 <menu+0x876>
			} else if(dilSecim == 1) {
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <menu+0x8d0>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d104      	bne.n	8001b82 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001b78:	4a2e      	ldr	r2, [pc, #184]	; (8001c34 <menu+0x928>)
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	2002      	movs	r0, #2
 8001b7e:	f006 f927 	bl	8007dd0 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <menu+0x92c>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d116      	bne.n	8001bb8 <menu+0x8ac>
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <menu+0x8e0>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d112      	bne.n	8001bb8 <menu+0x8ac>
			if(dilSecim == 0) {
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <menu+0x8d0>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001b9a:	4a28      	ldr	r2, [pc, #160]	; (8001c3c <menu+0x930>)
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	2002      	movs	r0, #2
 8001ba0:	f006 f916 	bl	8007dd0 <lcd_print>
 8001ba4:	e008      	b.n	8001bb8 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <menu+0x8d0>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d104      	bne.n	8001bb8 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001bae:	4a24      	ldr	r2, [pc, #144]	; (8001c40 <menu+0x934>)
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	f006 f90c 	bl	8007dd0 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <menu+0x92c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d14c      	bne.n	8001c5a <menu+0x94e>
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <menu+0x8e0>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d148      	bne.n	8001c5a <menu+0x94e>
			if(dilSecim == 0) {
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <menu+0x8d0>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d13b      	bne.n	8001c48 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001bd0:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <menu+0x938>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	f006 f8fb 	bl	8007dd0 <lcd_print>
 8001bda:	e03e      	b.n	8001c5a <menu+0x94e>
 8001bdc:	20000241 	.word	0x20000241
 8001be0:	0800d34c 	.word	0x0800d34c
 8001be4:	40010800 	.word	0x40010800
 8001be8:	2000024f 	.word	0x2000024f
 8001bec:	2000022f 	.word	0x2000022f
 8001bf0:	20000222 	.word	0x20000222
 8001bf4:	20000242 	.word	0x20000242
 8001bf8:	20000118 	.word	0x20000118
 8001bfc:	20000243 	.word	0x20000243
 8001c00:	20000244 	.word	0x20000244
 8001c04:	20000245 	.word	0x20000245
 8001c08:	20000246 	.word	0x20000246
 8001c0c:	20000247 	.word	0x20000247
 8001c10:	20000248 	.word	0x20000248
 8001c14:	20000249 	.word	0x20000249
 8001c18:	2000024a 	.word	0x2000024a
 8001c1c:	2000024b 	.word	0x2000024b
 8001c20:	2000024c 	.word	0x2000024c
 8001c24:	20000220 	.word	0x20000220
 8001c28:	0800d360 	.word	0x0800d360
 8001c2c:	0800d374 	.word	0x0800d374
 8001c30:	0800d388 	.word	0x0800d388
 8001c34:	0800d39c 	.word	0x0800d39c
 8001c38:	20000221 	.word	0x20000221
 8001c3c:	0800d3b0 	.word	0x0800d3b0
 8001c40:	0800d3c0 	.word	0x0800d3c0
 8001c44:	0800d3d0 	.word	0x0800d3d0
			} else if(dilSecim == 1) {
 8001c48:	4b98      	ldr	r3, [pc, #608]	; (8001eac <menu+0xba0>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d104      	bne.n	8001c5a <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001c50:	4a97      	ldr	r2, [pc, #604]	; (8001eb0 <menu+0xba4>)
 8001c52:	2101      	movs	r1, #1
 8001c54:	2002      	movs	r0, #2
 8001c56:	f006 f8bb 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	4895      	ldr	r0, [pc, #596]	; (8001eb4 <menu+0xba8>)
 8001c5e:	f007 fbdd 	bl	800941c <HAL_GPIO_ReadPin>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d119      	bne.n	8001c9c <menu+0x990>
 8001c68:	4b93      	ldr	r3, [pc, #588]	; (8001eb8 <menu+0xbac>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	f083 0301 	eor.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d012      	beq.n	8001c9c <menu+0x990>
 8001c76:	4b91      	ldr	r3, [pc, #580]	; (8001ebc <menu+0xbb0>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10e      	bne.n	8001c9c <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001c7e:	4b90      	ldr	r3, [pc, #576]	; (8001ec0 <menu+0xbb4>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b8e      	ldr	r3, [pc, #568]	; (8001ec0 <menu+0xbb4>)
 8001c88:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001c8a:	4b8d      	ldr	r3, [pc, #564]	; (8001ec0 <menu+0xbb4>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d902      	bls.n	8001c98 <menu+0x98c>
				calismaSekli = 0;
 8001c92:	4b8b      	ldr	r3, [pc, #556]	; (8001ec0 <menu+0xbb4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c98:	f002 ffac 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	4885      	ldr	r0, [pc, #532]	; (8001eb4 <menu+0xba8>)
 8001ca0:	f007 fbbc 	bl	800941c <HAL_GPIO_ReadPin>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d119      	bne.n	8001cde <menu+0x9d2>
 8001caa:	4b83      	ldr	r3, [pc, #524]	; (8001eb8 <menu+0xbac>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	f083 0301 	eor.w	r3, r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d012      	beq.n	8001cde <menu+0x9d2>
 8001cb8:	4b80      	ldr	r3, [pc, #512]	; (8001ebc <menu+0xbb0>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10e      	bne.n	8001cde <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001cc0:	4b7f      	ldr	r3, [pc, #508]	; (8001ec0 <menu+0xbb4>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b7d      	ldr	r3, [pc, #500]	; (8001ec0 <menu+0xbb4>)
 8001cca:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001ccc:	4b7c      	ldr	r3, [pc, #496]	; (8001ec0 <menu+0xbb4>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <menu+0x9ce>
	    		calismaSekli = 1;
 8001cd4:	4b7a      	ldr	r3, [pc, #488]	; (8001ec0 <menu+0xbb4>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001cda:	f002 ff8b 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cde:	2108      	movs	r1, #8
 8001ce0:	4874      	ldr	r0, [pc, #464]	; (8001eb4 <menu+0xba8>)
 8001ce2:	f007 fb9b 	bl	800941c <HAL_GPIO_ReadPin>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d118      	bne.n	8001d1e <menu+0xa12>
 8001cec:	4b72      	ldr	r3, [pc, #456]	; (8001eb8 <menu+0xbac>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	f083 0301 	eor.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d011      	beq.n	8001d1e <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001cfa:	4b71      	ldr	r3, [pc, #452]	; (8001ec0 <menu+0xbb4>)
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	4b71      	ldr	r3, [pc, #452]	; (8001ec4 <menu+0xbb8>)
 8001d00:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001d02:	4b6f      	ldr	r3, [pc, #444]	; (8001ec0 <menu+0xbb4>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d106      	bne.n	8001d18 <menu+0xa0c>
				altLimit = 1;
 8001d0a:	4b6f      	ldr	r3, [pc, #444]	; (8001ec8 <menu+0xbbc>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001d10:	4b6d      	ldr	r3, [pc, #436]	; (8001ec8 <menu+0xbbc>)
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	4b6b      	ldr	r3, [pc, #428]	; (8001ec4 <menu+0xbb8>)
 8001d16:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001d18:	4b6c      	ldr	r3, [pc, #432]	; (8001ecc <menu+0xbc0>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001d1e:	4b6c      	ldr	r3, [pc, #432]	; (8001ed0 <menu+0xbc4>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	f040 8083 	bne.w	8001e2e <menu+0xb22>
		if(dilSecim == 0) {
 8001d28:	4b60      	ldr	r3, [pc, #384]	; (8001eac <menu+0xba0>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d105      	bne.n	8001d3c <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001d30:	4a68      	ldr	r2, [pc, #416]	; (8001ed4 <menu+0xbc8>)
 8001d32:	2101      	movs	r1, #1
 8001d34:	2001      	movs	r0, #1
 8001d36:	f006 f84b 	bl	8007dd0 <lcd_print>
 8001d3a:	e008      	b.n	8001d4e <menu+0xa42>
		} else if(dilSecim == 1) {
 8001d3c:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <menu+0xba0>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d104      	bne.n	8001d4e <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001d44:	4a64      	ldr	r2, [pc, #400]	; (8001ed8 <menu+0xbcc>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f006 f841 	bl	8007dd0 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001d4e:	4b63      	ldr	r3, [pc, #396]	; (8001edc <menu+0xbd0>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d113      	bne.n	8001d7e <menu+0xa72>
			if(dilSecim == 0) {
 8001d56:	4b55      	ldr	r3, [pc, #340]	; (8001eac <menu+0xba0>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d105      	bne.n	8001d6a <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001d5e:	4a60      	ldr	r2, [pc, #384]	; (8001ee0 <menu+0xbd4>)
 8001d60:	2101      	movs	r1, #1
 8001d62:	2002      	movs	r0, #2
 8001d64:	f006 f834 	bl	8007dd0 <lcd_print>
 8001d68:	e012      	b.n	8001d90 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001d6a:	4b50      	ldr	r3, [pc, #320]	; (8001eac <menu+0xba0>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d10e      	bne.n	8001d90 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001d72:	4a5c      	ldr	r2, [pc, #368]	; (8001ee4 <menu+0xbd8>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	2002      	movs	r0, #2
 8001d78:	f006 f82a 	bl	8007dd0 <lcd_print>
 8001d7c:	e008      	b.n	8001d90 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001d7e:	4b57      	ldr	r3, [pc, #348]	; (8001edc <menu+0xbd0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d104      	bne.n	8001d90 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001d86:	4a58      	ldr	r2, [pc, #352]	; (8001ee8 <menu+0xbdc>)
 8001d88:	2101      	movs	r1, #1
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f006 f820 	bl	8007dd0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d90:	2102      	movs	r1, #2
 8001d92:	4848      	ldr	r0, [pc, #288]	; (8001eb4 <menu+0xba8>)
 8001d94:	f007 fb42 	bl	800941c <HAL_GPIO_ReadPin>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d115      	bne.n	8001dca <menu+0xabe>
 8001d9e:	4b46      	ldr	r3, [pc, #280]	; (8001eb8 <menu+0xbac>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	f083 0301 	eor.w	r3, r3, #1
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00e      	beq.n	8001dca <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001dac:	4b4b      	ldr	r3, [pc, #300]	; (8001edc <menu+0xbd0>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	4b49      	ldr	r3, [pc, #292]	; (8001edc <menu+0xbd0>)
 8001db6:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001db8:	4b48      	ldr	r3, [pc, #288]	; (8001edc <menu+0xbd0>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d902      	bls.n	8001dc6 <menu+0xaba>
				emniyetCercevesi = 0;
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <menu+0xbd0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dc6:	f002 ff15 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dca:	2104      	movs	r1, #4
 8001dcc:	4839      	ldr	r0, [pc, #228]	; (8001eb4 <menu+0xba8>)
 8001dce:	f007 fb25 	bl	800941c <HAL_GPIO_ReadPin>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d115      	bne.n	8001e04 <menu+0xaf8>
 8001dd8:	4b37      	ldr	r3, [pc, #220]	; (8001eb8 <menu+0xbac>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	f083 0301 	eor.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00e      	beq.n	8001e04 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001de6:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <menu+0xbd0>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <menu+0xbd0>)
 8001df0:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001df2:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <menu+0xbd0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001dfa:	4b38      	ldr	r3, [pc, #224]	; (8001edc <menu+0xbd0>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e00:	f002 fef8 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001e04:	2108      	movs	r1, #8
 8001e06:	482b      	ldr	r0, [pc, #172]	; (8001eb4 <menu+0xba8>)
 8001e08:	f007 fb08 	bl	800941c <HAL_GPIO_ReadPin>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d10d      	bne.n	8001e2e <menu+0xb22>
 8001e12:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <menu+0xbac>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	f083 0301 	eor.w	r3, r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001e20:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <menu+0xbd0>)
 8001e22:	781a      	ldrb	r2, [r3, #0]
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <menu+0xbb8>)
 8001e26:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001e28:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <menu+0xbc0>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001e2e:	4b28      	ldr	r3, [pc, #160]	; (8001ed0 <menu+0xbc4>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	f040 80ba 	bne.w	8001fac <menu+0xca0>
		if(dilSecim == 0) {
 8001e38:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <menu+0xba0>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001e40:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <menu+0xbe0>)
 8001e42:	2101      	movs	r1, #1
 8001e44:	2001      	movs	r0, #1
 8001e46:	f005 ffc3 	bl	8007dd0 <lcd_print>
 8001e4a:	e008      	b.n	8001e5e <menu+0xb52>
		} else if(dilSecim == 1) {
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <menu+0xba0>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d104      	bne.n	8001e5e <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001e54:	4a26      	ldr	r2, [pc, #152]	; (8001ef0 <menu+0xbe4>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f005 ffb9 	bl	8007dd0 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001e5e:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <menu+0xbe8>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d113      	bne.n	8001e8e <menu+0xb82>
			if(dilSecim == 0) {
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <menu+0xba0>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d105      	bne.n	8001e7a <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <menu+0xbd4>)
 8001e70:	2101      	movs	r1, #1
 8001e72:	2002      	movs	r0, #2
 8001e74:	f005 ffac 	bl	8007dd0 <lcd_print>
 8001e78:	e049      	b.n	8001f0e <menu+0xc02>
			} else if(dilSecim == 1) {
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <menu+0xba0>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d145      	bne.n	8001f0e <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <menu+0xbd8>)
 8001e84:	2101      	movs	r1, #1
 8001e86:	2002      	movs	r0, #2
 8001e88:	f005 ffa2 	bl	8007dd0 <lcd_print>
 8001e8c:	e03f      	b.n	8001f0e <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <menu+0xbe8>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d13b      	bne.n	8001f0e <menu+0xc02>
			if(dilSecim == 0) {
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <menu+0xba0>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d12e      	bne.n	8001efc <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001e9e:	4a16      	ldr	r2, [pc, #88]	; (8001ef8 <menu+0xbec>)
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	2002      	movs	r0, #2
 8001ea4:	f005 ff94 	bl	8007dd0 <lcd_print>
 8001ea8:	e031      	b.n	8001f0e <menu+0xc02>
 8001eaa:	bf00      	nop
 8001eac:	20000241 	.word	0x20000241
 8001eb0:	0800d3e0 	.word	0x0800d3e0
 8001eb4:	40010800 	.word	0x40010800
 8001eb8:	2000024f 	.word	0x2000024f
 8001ebc:	2000022f 	.word	0x2000022f
 8001ec0:	20000221 	.word	0x20000221
 8001ec4:	20000118 	.word	0x20000118
 8001ec8:	20000226 	.word	0x20000226
 8001ecc:	2000024c 	.word	0x2000024c
 8001ed0:	20000220 	.word	0x20000220
 8001ed4:	0800d3f0 	.word	0x0800d3f0
 8001ed8:	0800d404 	.word	0x0800d404
 8001edc:	20000224 	.word	0x20000224
 8001ee0:	0800d418 	.word	0x0800d418
 8001ee4:	0800d42c 	.word	0x0800d42c
 8001ee8:	0800d440 	.word	0x0800d440
 8001eec:	0800d450 	.word	0x0800d450
 8001ef0:	0800d464 	.word	0x0800d464
 8001ef4:	20000225 	.word	0x20000225
 8001ef8:	0800d478 	.word	0x0800d478
			} else if(dilSecim == 1) {
 8001efc:	4b92      	ldr	r3, [pc, #584]	; (8002148 <menu+0xe3c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d104      	bne.n	8001f0e <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001f04:	4a91      	ldr	r2, [pc, #580]	; (800214c <menu+0xe40>)
 8001f06:	2101      	movs	r1, #1
 8001f08:	2002      	movs	r0, #2
 8001f0a:	f005 ff61 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f0e:	2102      	movs	r1, #2
 8001f10:	488f      	ldr	r0, [pc, #572]	; (8002150 <menu+0xe44>)
 8001f12:	f007 fa83 	bl	800941c <HAL_GPIO_ReadPin>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d115      	bne.n	8001f48 <menu+0xc3c>
 8001f1c:	4b8d      	ldr	r3, [pc, #564]	; (8002154 <menu+0xe48>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	f083 0301 	eor.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00e      	beq.n	8001f48 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001f2a:	4b8b      	ldr	r3, [pc, #556]	; (8002158 <menu+0xe4c>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4b89      	ldr	r3, [pc, #548]	; (8002158 <menu+0xe4c>)
 8001f34:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001f36:	4b88      	ldr	r3, [pc, #544]	; (8002158 <menu+0xe4c>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d902      	bls.n	8001f44 <menu+0xc38>
				yavaslamaLimit = 0;
 8001f3e:	4b86      	ldr	r3, [pc, #536]	; (8002158 <menu+0xe4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f44:	f002 fe56 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f48:	2104      	movs	r1, #4
 8001f4a:	4881      	ldr	r0, [pc, #516]	; (8002150 <menu+0xe44>)
 8001f4c:	f007 fa66 	bl	800941c <HAL_GPIO_ReadPin>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d115      	bne.n	8001f82 <menu+0xc76>
 8001f56:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <menu+0xe48>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	f083 0301 	eor.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00e      	beq.n	8001f82 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001f64:	4b7c      	ldr	r3, [pc, #496]	; (8002158 <menu+0xe4c>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <menu+0xe4c>)
 8001f6e:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001f70:	4b79      	ldr	r3, [pc, #484]	; (8002158 <menu+0xe4c>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001f78:	4b77      	ldr	r3, [pc, #476]	; (8002158 <menu+0xe4c>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f7e:	f002 fe39 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f82:	2108      	movs	r1, #8
 8001f84:	4872      	ldr	r0, [pc, #456]	; (8002150 <menu+0xe44>)
 8001f86:	f007 fa49 	bl	800941c <HAL_GPIO_ReadPin>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d10d      	bne.n	8001fac <menu+0xca0>
 8001f90:	4b70      	ldr	r3, [pc, #448]	; (8002154 <menu+0xe48>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	f083 0301 	eor.w	r3, r3, #1
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001f9e:	4b6e      	ldr	r3, [pc, #440]	; (8002158 <menu+0xe4c>)
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	4b6e      	ldr	r3, [pc, #440]	; (800215c <menu+0xe50>)
 8001fa4:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001fa6:	4b6e      	ldr	r3, [pc, #440]	; (8002160 <menu+0xe54>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001fac:	4b6d      	ldr	r3, [pc, #436]	; (8002164 <menu+0xe58>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	f040 80b9 	bne.w	8002128 <menu+0xe1c>
		if(dilSecim == 0) {
 8001fb6:	4b64      	ldr	r3, [pc, #400]	; (8002148 <menu+0xe3c>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d105      	bne.n	8001fca <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001fbe:	4a6a      	ldr	r2, [pc, #424]	; (8002168 <menu+0xe5c>)
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f005 ff04 	bl	8007dd0 <lcd_print>
 8001fc8:	e008      	b.n	8001fdc <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001fca:	4b5f      	ldr	r3, [pc, #380]	; (8002148 <menu+0xe3c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d104      	bne.n	8001fdc <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001fd2:	4a66      	ldr	r2, [pc, #408]	; (800216c <menu+0xe60>)
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f005 fefa 	bl	8007dd0 <lcd_print>
		}

		if(altLimit == 0) {
 8001fdc:	4b64      	ldr	r3, [pc, #400]	; (8002170 <menu+0xe64>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d113      	bne.n	800200c <menu+0xd00>
			if(dilSecim == 0) {
 8001fe4:	4b58      	ldr	r3, [pc, #352]	; (8002148 <menu+0xe3c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d105      	bne.n	8001ff8 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001fec:	4a61      	ldr	r2, [pc, #388]	; (8002174 <menu+0xe68>)
 8001fee:	2101      	movs	r1, #1
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	f005 feed 	bl	8007dd0 <lcd_print>
 8001ff6:	e020      	b.n	800203a <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001ff8:	4b53      	ldr	r3, [pc, #332]	; (8002148 <menu+0xe3c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d11c      	bne.n	800203a <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8002000:	4a5d      	ldr	r2, [pc, #372]	; (8002178 <menu+0xe6c>)
 8002002:	2101      	movs	r1, #1
 8002004:	2002      	movs	r0, #2
 8002006:	f005 fee3 	bl	8007dd0 <lcd_print>
 800200a:	e016      	b.n	800203a <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 800200c:	4b58      	ldr	r3, [pc, #352]	; (8002170 <menu+0xe64>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d112      	bne.n	800203a <menu+0xd2e>
			if(dilSecim == 0){
 8002014:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <menu+0xe3c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 800201c:	4a57      	ldr	r2, [pc, #348]	; (800217c <menu+0xe70>)
 800201e:	2101      	movs	r1, #1
 8002020:	2002      	movs	r0, #2
 8002022:	f005 fed5 	bl	8007dd0 <lcd_print>
 8002026:	e008      	b.n	800203a <menu+0xd2e>
			} else if(dilSecim == 1){
 8002028:	4b47      	ldr	r3, [pc, #284]	; (8002148 <menu+0xe3c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d104      	bne.n	800203a <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002030:	4a46      	ldr	r2, [pc, #280]	; (800214c <menu+0xe40>)
 8002032:	2101      	movs	r1, #1
 8002034:	2002      	movs	r0, #2
 8002036:	f005 fecb 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800203a:	2102      	movs	r1, #2
 800203c:	4844      	ldr	r0, [pc, #272]	; (8002150 <menu+0xe44>)
 800203e:	f007 f9ed 	bl	800941c <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	2b01      	cmp	r3, #1
 8002046:	d119      	bne.n	800207c <menu+0xd70>
 8002048:	4b42      	ldr	r3, [pc, #264]	; (8002154 <menu+0xe48>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	f083 0301 	eor.w	r3, r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d012      	beq.n	800207c <menu+0xd70>
 8002056:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <menu+0xe74>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10e      	bne.n	800207c <menu+0xd70>
			altLimit = altLimit + 1;
 800205e:	4b44      	ldr	r3, [pc, #272]	; (8002170 <menu+0xe64>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b42      	ldr	r3, [pc, #264]	; (8002170 <menu+0xe64>)
 8002068:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800206a:	4b41      	ldr	r3, [pc, #260]	; (8002170 <menu+0xe64>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d902      	bls.n	8002078 <menu+0xd6c>
				altLimit = 0;
 8002072:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <menu+0xe64>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002078:	f002 fdbc 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 800207c:	2104      	movs	r1, #4
 800207e:	4834      	ldr	r0, [pc, #208]	; (8002150 <menu+0xe44>)
 8002080:	f007 f9cc 	bl	800941c <HAL_GPIO_ReadPin>
 8002084:	4603      	mov	r3, r0
 8002086:	2b01      	cmp	r3, #1
 8002088:	d119      	bne.n	80020be <menu+0xdb2>
 800208a:	4b32      	ldr	r3, [pc, #200]	; (8002154 <menu+0xe48>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f083 0301 	eor.w	r3, r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d012      	beq.n	80020be <menu+0xdb2>
 8002098:	4b39      	ldr	r3, [pc, #228]	; (8002180 <menu+0xe74>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10e      	bne.n	80020be <menu+0xdb2>
			altLimit = altLimit - 1;
 80020a0:	4b33      	ldr	r3, [pc, #204]	; (8002170 <menu+0xe64>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <menu+0xe64>)
 80020aa:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80020ac:	4b30      	ldr	r3, [pc, #192]	; (8002170 <menu+0xe64>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <menu+0xdae>
		   		altLimit = 1;
 80020b4:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <menu+0xe64>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020ba:	f002 fd9b 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020be:	2108      	movs	r1, #8
 80020c0:	4823      	ldr	r0, [pc, #140]	; (8002150 <menu+0xe44>)
 80020c2:	f007 f9ab 	bl	800941c <HAL_GPIO_ReadPin>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d12d      	bne.n	8002128 <menu+0xe1c>
 80020cc:	4b21      	ldr	r3, [pc, #132]	; (8002154 <menu+0xe48>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	f083 0301 	eor.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d026      	beq.n	8002128 <menu+0xe1c>
			eepromData[5] = altLimit;
 80020da:	4b25      	ldr	r3, [pc, #148]	; (8002170 <menu+0xe64>)
 80020dc:	781a      	ldrb	r2, [r3, #0]
 80020de:	4b1f      	ldr	r3, [pc, #124]	; (800215c <menu+0xe50>)
 80020e0:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80020e2:	4b23      	ldr	r3, [pc, #140]	; (8002170 <menu+0xe64>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d110      	bne.n	800210c <menu+0xe00>
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <menu+0xe78>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <menu+0xdee>
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <menu+0xe78>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d108      	bne.n	800210c <menu+0xe00>
				kapiTablaAcKonum = 3;
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <menu+0xe78>)
 80020fc:	2203      	movs	r2, #3
 80020fe:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <menu+0xe78>)
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	4b15      	ldr	r3, [pc, #84]	; (800215c <menu+0xe50>)
 8002106:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800210a:	e00a      	b.n	8002122 <menu+0xe16>
			} else if(altLimit == 0) {
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <menu+0xe64>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <menu+0xe16>
				platformSilindirTipi = 0;
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <menu+0xe7c>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <menu+0xe7c>)
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	4b0f      	ldr	r3, [pc, #60]	; (800215c <menu+0xe50>)
 8002120:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <menu+0xe54>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <menu+0xe58>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b06      	cmp	r3, #6
 800212e:	f040 80b6 	bne.w	800229e <menu+0xf92>
		if(dilSecim == 0) {
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <menu+0xe3c>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d12a      	bne.n	8002190 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800213a:	4a14      	ldr	r2, [pc, #80]	; (800218c <menu+0xe80>)
 800213c:	2101      	movs	r1, #1
 800213e:	2001      	movs	r0, #1
 8002140:	f005 fe46 	bl	8007dd0 <lcd_print>
 8002144:	e02d      	b.n	80021a2 <menu+0xe96>
 8002146:	bf00      	nop
 8002148:	20000241 	.word	0x20000241
 800214c:	0800d48c 	.word	0x0800d48c
 8002150:	40010800 	.word	0x40010800
 8002154:	2000024f 	.word	0x2000024f
 8002158:	20000225 	.word	0x20000225
 800215c:	20000118 	.word	0x20000118
 8002160:	2000024c 	.word	0x2000024c
 8002164:	20000220 	.word	0x20000220
 8002168:	0800d4a0 	.word	0x0800d4a0
 800216c:	0800d4b4 	.word	0x0800d4b4
 8002170:	20000226 	.word	0x20000226
 8002174:	0800d418 	.word	0x0800d418
 8002178:	0800d42c 	.word	0x0800d42c
 800217c:	0800d478 	.word	0x0800d478
 8002180:	20000221 	.word	0x20000221
 8002184:	2000022d 	.word	0x2000022d
 8002188:	20000233 	.word	0x20000233
 800218c:	0800d4c8 	.word	0x0800d4c8
		} else if(dilSecim == 1){
 8002190:	4b7a      	ldr	r3, [pc, #488]	; (800237c <menu+0x1070>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d104      	bne.n	80021a2 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002198:	4a79      	ldr	r2, [pc, #484]	; (8002380 <menu+0x1074>)
 800219a:	2101      	movs	r1, #1
 800219c:	2001      	movs	r0, #1
 800219e:	f005 fe17 	bl	8007dd0 <lcd_print>
		}
		if(basincSalteri == 0){
 80021a2:	4b78      	ldr	r3, [pc, #480]	; (8002384 <menu+0x1078>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d113      	bne.n	80021d2 <menu+0xec6>
			if(dilSecim == 0) {
 80021aa:	4b74      	ldr	r3, [pc, #464]	; (800237c <menu+0x1070>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d105      	bne.n	80021be <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80021b2:	4a75      	ldr	r2, [pc, #468]	; (8002388 <menu+0x107c>)
 80021b4:	2101      	movs	r1, #1
 80021b6:	2002      	movs	r0, #2
 80021b8:	f005 fe0a 	bl	8007dd0 <lcd_print>
 80021bc:	e020      	b.n	8002200 <menu+0xef4>
			} else if(dilSecim == 1){
 80021be:	4b6f      	ldr	r3, [pc, #444]	; (800237c <menu+0x1070>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d11c      	bne.n	8002200 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80021c6:	4a71      	ldr	r2, [pc, #452]	; (800238c <menu+0x1080>)
 80021c8:	2101      	movs	r1, #1
 80021ca:	2002      	movs	r0, #2
 80021cc:	f005 fe00 	bl	8007dd0 <lcd_print>
 80021d0:	e016      	b.n	8002200 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80021d2:	4b6c      	ldr	r3, [pc, #432]	; (8002384 <menu+0x1078>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d112      	bne.n	8002200 <menu+0xef4>
			if(dilSecim == 0) {
 80021da:	4b68      	ldr	r3, [pc, #416]	; (800237c <menu+0x1070>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80021e2:	4a6b      	ldr	r2, [pc, #428]	; (8002390 <menu+0x1084>)
 80021e4:	2101      	movs	r1, #1
 80021e6:	2002      	movs	r0, #2
 80021e8:	f005 fdf2 	bl	8007dd0 <lcd_print>
 80021ec:	e008      	b.n	8002200 <menu+0xef4>
			} else if(dilSecim == 1) {
 80021ee:	4b63      	ldr	r3, [pc, #396]	; (800237c <menu+0x1070>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d104      	bne.n	8002200 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80021f6:	4a67      	ldr	r2, [pc, #412]	; (8002394 <menu+0x1088>)
 80021f8:	2101      	movs	r1, #1
 80021fa:	2002      	movs	r0, #2
 80021fc:	f005 fde8 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002200:	2102      	movs	r1, #2
 8002202:	4865      	ldr	r0, [pc, #404]	; (8002398 <menu+0x108c>)
 8002204:	f007 f90a 	bl	800941c <HAL_GPIO_ReadPin>
 8002208:	4603      	mov	r3, r0
 800220a:	2b01      	cmp	r3, #1
 800220c:	d115      	bne.n	800223a <menu+0xf2e>
 800220e:	4b63      	ldr	r3, [pc, #396]	; (800239c <menu+0x1090>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	f083 0301 	eor.w	r3, r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00e      	beq.n	800223a <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 800221c:	4b59      	ldr	r3, [pc, #356]	; (8002384 <menu+0x1078>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	3301      	adds	r3, #1
 8002222:	b2da      	uxtb	r2, r3
 8002224:	4b57      	ldr	r3, [pc, #348]	; (8002384 <menu+0x1078>)
 8002226:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002228:	4b56      	ldr	r3, [pc, #344]	; (8002384 <menu+0x1078>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d902      	bls.n	8002236 <menu+0xf2a>
				basincSalteri = 0;
 8002230:	4b54      	ldr	r3, [pc, #336]	; (8002384 <menu+0x1078>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002236:	f002 fcdd 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800223a:	2104      	movs	r1, #4
 800223c:	4856      	ldr	r0, [pc, #344]	; (8002398 <menu+0x108c>)
 800223e:	f007 f8ed 	bl	800941c <HAL_GPIO_ReadPin>
 8002242:	4603      	mov	r3, r0
 8002244:	2b01      	cmp	r3, #1
 8002246:	d115      	bne.n	8002274 <menu+0xf68>
 8002248:	4b54      	ldr	r3, [pc, #336]	; (800239c <menu+0x1090>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f083 0301 	eor.w	r3, r3, #1
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00e      	beq.n	8002274 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8002256:	4b4b      	ldr	r3, [pc, #300]	; (8002384 <menu+0x1078>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	3b01      	subs	r3, #1
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b49      	ldr	r3, [pc, #292]	; (8002384 <menu+0x1078>)
 8002260:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002262:	4b48      	ldr	r3, [pc, #288]	; (8002384 <menu+0x1078>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <menu+0xf64>
		   		basincSalteri = 1;
 800226a:	4b46      	ldr	r3, [pc, #280]	; (8002384 <menu+0x1078>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002270:	f002 fcc0 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002274:	2108      	movs	r1, #8
 8002276:	4848      	ldr	r0, [pc, #288]	; (8002398 <menu+0x108c>)
 8002278:	f007 f8d0 	bl	800941c <HAL_GPIO_ReadPin>
 800227c:	4603      	mov	r3, r0
 800227e:	2b01      	cmp	r3, #1
 8002280:	d10d      	bne.n	800229e <menu+0xf92>
 8002282:	4b46      	ldr	r3, [pc, #280]	; (800239c <menu+0x1090>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002290:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <menu+0x1078>)
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	4b42      	ldr	r3, [pc, #264]	; (80023a0 <menu+0x1094>)
 8002296:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002298:	4b42      	ldr	r3, [pc, #264]	; (80023a4 <menu+0x1098>)
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800229e:	4b42      	ldr	r3, [pc, #264]	; (80023a8 <menu+0x109c>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b07      	cmp	r3, #7
 80022a4:	f040 80f5 	bne.w	8002492 <menu+0x1186>
		if(dilSecim == 0) {
 80022a8:	4b34      	ldr	r3, [pc, #208]	; (800237c <menu+0x1070>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d105      	bne.n	80022bc <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80022b0:	4a3e      	ldr	r2, [pc, #248]	; (80023ac <menu+0x10a0>)
 80022b2:	2101      	movs	r1, #1
 80022b4:	2001      	movs	r0, #1
 80022b6:	f005 fd8b 	bl	8007dd0 <lcd_print>
 80022ba:	e008      	b.n	80022ce <menu+0xfc2>
		} else if(dilSecim == 1){
 80022bc:	4b2f      	ldr	r3, [pc, #188]	; (800237c <menu+0x1070>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d104      	bne.n	80022ce <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80022c4:	4a3a      	ldr	r2, [pc, #232]	; (80023b0 <menu+0x10a4>)
 80022c6:	2101      	movs	r1, #1
 80022c8:	2001      	movs	r0, #1
 80022ca:	f005 fd81 	bl	8007dd0 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80022ce:	4b39      	ldr	r3, [pc, #228]	; (80023b4 <menu+0x10a8>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d113      	bne.n	80022fe <menu+0xff2>
			if(dilSecim == 0) {
 80022d6:	4b29      	ldr	r3, [pc, #164]	; (800237c <menu+0x1070>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80022de:	4a2a      	ldr	r2, [pc, #168]	; (8002388 <menu+0x107c>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	2002      	movs	r0, #2
 80022e4:	f005 fd74 	bl	8007dd0 <lcd_print>
 80022e8:	e079      	b.n	80023de <menu+0x10d2>
			} else if(dilSecim == 1){
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <menu+0x1070>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d175      	bne.n	80023de <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80022f2:	4a26      	ldr	r2, [pc, #152]	; (800238c <menu+0x1080>)
 80022f4:	2101      	movs	r1, #1
 80022f6:	2002      	movs	r0, #2
 80022f8:	f005 fd6a 	bl	8007dd0 <lcd_print>
 80022fc:	e06f      	b.n	80023de <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80022fe:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <menu+0x10a8>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d113      	bne.n	800232e <menu+0x1022>
			if(dilSecim == 0) {
 8002306:	4b1d      	ldr	r3, [pc, #116]	; (800237c <menu+0x1070>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800230e:	4a2a      	ldr	r2, [pc, #168]	; (80023b8 <menu+0x10ac>)
 8002310:	2101      	movs	r1, #1
 8002312:	2002      	movs	r0, #2
 8002314:	f005 fd5c 	bl	8007dd0 <lcd_print>
 8002318:	e061      	b.n	80023de <menu+0x10d2>
			} else if(dilSecim == 1) {
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <menu+0x1070>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d15d      	bne.n	80023de <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8002322:	4a26      	ldr	r2, [pc, #152]	; (80023bc <menu+0x10b0>)
 8002324:	2101      	movs	r1, #1
 8002326:	2002      	movs	r0, #2
 8002328:	f005 fd52 	bl	8007dd0 <lcd_print>
 800232c:	e057      	b.n	80023de <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 800232e:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <menu+0x10a8>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d113      	bne.n	800235e <menu+0x1052>
			if(dilSecim == 0) {
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <menu+0x1070>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 800233e:	4a20      	ldr	r2, [pc, #128]	; (80023c0 <menu+0x10b4>)
 8002340:	2101      	movs	r1, #1
 8002342:	2002      	movs	r0, #2
 8002344:	f005 fd44 	bl	8007dd0 <lcd_print>
 8002348:	e049      	b.n	80023de <menu+0x10d2>
			} else if(dilSecim == 1) {
 800234a:	4b0c      	ldr	r3, [pc, #48]	; (800237c <menu+0x1070>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d145      	bne.n	80023de <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002352:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <menu+0x10b8>)
 8002354:	2101      	movs	r1, #1
 8002356:	2002      	movs	r0, #2
 8002358:	f005 fd3a 	bl	8007dd0 <lcd_print>
 800235c:	e03f      	b.n	80023de <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <menu+0x10a8>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b03      	cmp	r3, #3
 8002364:	d13b      	bne.n	80023de <menu+0x10d2>
			if(dilSecim == 0) {
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <menu+0x1070>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d12e      	bne.n	80023cc <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800236e:	4a16      	ldr	r2, [pc, #88]	; (80023c8 <menu+0x10bc>)
 8002370:	2101      	movs	r1, #1
 8002372:	2002      	movs	r0, #2
 8002374:	f005 fd2c 	bl	8007dd0 <lcd_print>
 8002378:	e031      	b.n	80023de <menu+0x10d2>
 800237a:	bf00      	nop
 800237c:	20000241 	.word	0x20000241
 8002380:	0800d4d8 	.word	0x0800d4d8
 8002384:	20000227 	.word	0x20000227
 8002388:	0800d418 	.word	0x0800d418
 800238c:	0800d42c 	.word	0x0800d42c
 8002390:	0800d478 	.word	0x0800d478
 8002394:	0800d48c 	.word	0x0800d48c
 8002398:	40010800 	.word	0x40010800
 800239c:	2000024f 	.word	0x2000024f
 80023a0:	20000118 	.word	0x20000118
 80023a4:	2000024c 	.word	0x2000024c
 80023a8:	20000220 	.word	0x20000220
 80023ac:	0800d4e8 	.word	0x0800d4e8
 80023b0:	0800d4fc 	.word	0x0800d4fc
 80023b4:	20000228 	.word	0x20000228
 80023b8:	0800d510 	.word	0x0800d510
 80023bc:	0800d524 	.word	0x0800d524
 80023c0:	0800d538 	.word	0x0800d538
 80023c4:	0800d54c 	.word	0x0800d54c
 80023c8:	0800d560 	.word	0x0800d560
			} else if(dilSecim == 1){
 80023cc:	4b99      	ldr	r3, [pc, #612]	; (8002634 <menu+0x1328>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d104      	bne.n	80023de <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80023d4:	4a98      	ldr	r2, [pc, #608]	; (8002638 <menu+0x132c>)
 80023d6:	2101      	movs	r1, #1
 80023d8:	2002      	movs	r0, #2
 80023da:	f005 fcf9 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023de:	2102      	movs	r1, #2
 80023e0:	4896      	ldr	r0, [pc, #600]	; (800263c <menu+0x1330>)
 80023e2:	f007 f81b 	bl	800941c <HAL_GPIO_ReadPin>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d115      	bne.n	8002418 <menu+0x110c>
 80023ec:	4b94      	ldr	r3, [pc, #592]	; (8002640 <menu+0x1334>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00e      	beq.n	8002418 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80023fa:	4b92      	ldr	r3, [pc, #584]	; (8002644 <menu+0x1338>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	3301      	adds	r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b90      	ldr	r3, [pc, #576]	; (8002644 <menu+0x1338>)
 8002404:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002406:	4b8f      	ldr	r3, [pc, #572]	; (8002644 <menu+0x1338>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d902      	bls.n	8002414 <menu+0x1108>
				kapiSecimleri = 0;
 800240e:	4b8d      	ldr	r3, [pc, #564]	; (8002644 <menu+0x1338>)
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002414:	f002 fbee 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002418:	2104      	movs	r1, #4
 800241a:	4888      	ldr	r0, [pc, #544]	; (800263c <menu+0x1330>)
 800241c:	f006 fffe 	bl	800941c <HAL_GPIO_ReadPin>
 8002420:	4603      	mov	r3, r0
 8002422:	2b01      	cmp	r3, #1
 8002424:	d115      	bne.n	8002452 <menu+0x1146>
 8002426:	4b86      	ldr	r3, [pc, #536]	; (8002640 <menu+0x1334>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	f083 0301 	eor.w	r3, r3, #1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002434:	4b83      	ldr	r3, [pc, #524]	; (8002644 <menu+0x1338>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	3b01      	subs	r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b81      	ldr	r3, [pc, #516]	; (8002644 <menu+0x1338>)
 800243e:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002440:	4b80      	ldr	r3, [pc, #512]	; (8002644 <menu+0x1338>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b04      	cmp	r3, #4
 8002446:	d902      	bls.n	800244e <menu+0x1142>
		   		kapiSecimleri = 3;
 8002448:	4b7e      	ldr	r3, [pc, #504]	; (8002644 <menu+0x1338>)
 800244a:	2203      	movs	r2, #3
 800244c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800244e:	f002 fbd1 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002452:	2108      	movs	r1, #8
 8002454:	4879      	ldr	r0, [pc, #484]	; (800263c <menu+0x1330>)
 8002456:	f006 ffe1 	bl	800941c <HAL_GPIO_ReadPin>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d118      	bne.n	8002492 <menu+0x1186>
 8002460:	4b77      	ldr	r3, [pc, #476]	; (8002640 <menu+0x1334>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	f083 0301 	eor.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d011      	beq.n	8002492 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 800246e:	4b75      	ldr	r3, [pc, #468]	; (8002644 <menu+0x1338>)
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	4b75      	ldr	r3, [pc, #468]	; (8002648 <menu+0x133c>)
 8002474:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002476:	4b73      	ldr	r3, [pc, #460]	; (8002644 <menu+0x1338>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d006      	beq.n	800248c <menu+0x1180>
				altLimit = 1;
 800247e:	4b73      	ldr	r3, [pc, #460]	; (800264c <menu+0x1340>)
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002484:	4b71      	ldr	r3, [pc, #452]	; (800264c <menu+0x1340>)
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <menu+0x133c>)
 800248a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800248c:	4b70      	ldr	r3, [pc, #448]	; (8002650 <menu+0x1344>)
 800248e:	2201      	movs	r2, #1
 8002490:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002492:	4b70      	ldr	r3, [pc, #448]	; (8002654 <menu+0x1348>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b08      	cmp	r3, #8
 8002498:	f040 8092 	bne.w	80025c0 <menu+0x12b4>
		if(dilSecim == 0) {
 800249c:	4b65      	ldr	r3, [pc, #404]	; (8002634 <menu+0x1328>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80024a4:	4a6c      	ldr	r2, [pc, #432]	; (8002658 <menu+0x134c>)
 80024a6:	2101      	movs	r1, #1
 80024a8:	2001      	movs	r0, #1
 80024aa:	f005 fc91 	bl	8007dd0 <lcd_print>
 80024ae:	e008      	b.n	80024c2 <menu+0x11b6>
		} else if(dilSecim == 1) {
 80024b0:	4b60      	ldr	r3, [pc, #384]	; (8002634 <menu+0x1328>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d104      	bne.n	80024c2 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80024b8:	4a68      	ldr	r2, [pc, #416]	; (800265c <menu+0x1350>)
 80024ba:	2101      	movs	r1, #1
 80024bc:	2001      	movs	r0, #1
 80024be:	f005 fc87 	bl	8007dd0 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80024c2:	4b67      	ldr	r3, [pc, #412]	; (8002660 <menu+0x1354>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d113      	bne.n	80024f2 <menu+0x11e6>
			if(dilSecim == 0) {
 80024ca:	4b5a      	ldr	r3, [pc, #360]	; (8002634 <menu+0x1328>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d105      	bne.n	80024de <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80024d2:	4a64      	ldr	r2, [pc, #400]	; (8002664 <menu+0x1358>)
 80024d4:	2101      	movs	r1, #1
 80024d6:	2002      	movs	r0, #2
 80024d8:	f005 fc7a 	bl	8007dd0 <lcd_print>
 80024dc:	e020      	b.n	8002520 <menu+0x1214>
			} else if(dilSecim == 1) {
 80024de:	4b55      	ldr	r3, [pc, #340]	; (8002634 <menu+0x1328>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d11c      	bne.n	8002520 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80024e6:	4a60      	ldr	r2, [pc, #384]	; (8002668 <menu+0x135c>)
 80024e8:	2101      	movs	r1, #1
 80024ea:	2002      	movs	r0, #2
 80024ec:	f005 fc70 	bl	8007dd0 <lcd_print>
 80024f0:	e016      	b.n	8002520 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80024f2:	4b5b      	ldr	r3, [pc, #364]	; (8002660 <menu+0x1354>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d112      	bne.n	8002520 <menu+0x1214>
			if(dilSecim == 0){
 80024fa:	4b4e      	ldr	r3, [pc, #312]	; (8002634 <menu+0x1328>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d105      	bne.n	800250e <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002502:	4a5a      	ldr	r2, [pc, #360]	; (800266c <menu+0x1360>)
 8002504:	2101      	movs	r1, #1
 8002506:	2002      	movs	r0, #2
 8002508:	f005 fc62 	bl	8007dd0 <lcd_print>
 800250c:	e008      	b.n	8002520 <menu+0x1214>
			} else if(dilSecim == 1){
 800250e:	4b49      	ldr	r3, [pc, #292]	; (8002634 <menu+0x1328>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d104      	bne.n	8002520 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8002516:	4a56      	ldr	r2, [pc, #344]	; (8002670 <menu+0x1364>)
 8002518:	2101      	movs	r1, #1
 800251a:	2002      	movs	r0, #2
 800251c:	f005 fc58 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002520:	2102      	movs	r1, #2
 8002522:	4846      	ldr	r0, [pc, #280]	; (800263c <menu+0x1330>)
 8002524:	f006 ff7a 	bl	800941c <HAL_GPIO_ReadPin>
 8002528:	4603      	mov	r3, r0
 800252a:	2b01      	cmp	r3, #1
 800252c:	d115      	bne.n	800255a <menu+0x124e>
 800252e:	4b44      	ldr	r3, [pc, #272]	; (8002640 <menu+0x1334>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	f083 0301 	eor.w	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00e      	beq.n	800255a <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 800253c:	4b48      	ldr	r3, [pc, #288]	; (8002660 <menu+0x1354>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b46      	ldr	r3, [pc, #280]	; (8002660 <menu+0x1354>)
 8002546:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002548:	4b45      	ldr	r3, [pc, #276]	; (8002660 <menu+0x1354>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d902      	bls.n	8002556 <menu+0x124a>
				kapiAcTipi = 0;
 8002550:	4b43      	ldr	r3, [pc, #268]	; (8002660 <menu+0x1354>)
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002556:	f002 fb4d 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800255a:	2104      	movs	r1, #4
 800255c:	4837      	ldr	r0, [pc, #220]	; (800263c <menu+0x1330>)
 800255e:	f006 ff5d 	bl	800941c <HAL_GPIO_ReadPin>
 8002562:	4603      	mov	r3, r0
 8002564:	2b01      	cmp	r3, #1
 8002566:	d115      	bne.n	8002594 <menu+0x1288>
 8002568:	4b35      	ldr	r3, [pc, #212]	; (8002640 <menu+0x1334>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	f083 0301 	eor.w	r3, r3, #1
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00e      	beq.n	8002594 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002576:	4b3a      	ldr	r3, [pc, #232]	; (8002660 <menu+0x1354>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	3b01      	subs	r3, #1
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b38      	ldr	r3, [pc, #224]	; (8002660 <menu+0x1354>)
 8002580:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002582:	4b37      	ldr	r3, [pc, #220]	; (8002660 <menu+0x1354>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <menu+0x1284>
		   		kapiAcTipi = 1;
 800258a:	4b35      	ldr	r3, [pc, #212]	; (8002660 <menu+0x1354>)
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002590:	f002 fb30 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002594:	2108      	movs	r1, #8
 8002596:	4829      	ldr	r0, [pc, #164]	; (800263c <menu+0x1330>)
 8002598:	f006 ff40 	bl	800941c <HAL_GPIO_ReadPin>
 800259c:	4603      	mov	r3, r0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d10e      	bne.n	80025c0 <menu+0x12b4>
 80025a2:	4b27      	ldr	r3, [pc, #156]	; (8002640 <menu+0x1334>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	f083 0301 	eor.w	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80025b0:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <menu+0x1354>)
 80025b2:	781a      	ldrb	r2, [r3, #0]
 80025b4:	4b24      	ldr	r3, [pc, #144]	; (8002648 <menu+0x133c>)
 80025b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80025ba:	4b25      	ldr	r3, [pc, #148]	; (8002650 <menu+0x1344>)
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <menu+0x1348>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b09      	cmp	r3, #9
 80025c6:	f040 80b9 	bne.w	800273c <menu+0x1430>
		if(dilSecim == 0){
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <menu+0x1328>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80025d2:	4a28      	ldr	r2, [pc, #160]	; (8002674 <menu+0x1368>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	2001      	movs	r0, #1
 80025d8:	f005 fbfa 	bl	8007dd0 <lcd_print>
 80025dc:	e008      	b.n	80025f0 <menu+0x12e4>
		} else if(dilSecim == 1) {
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <menu+0x1328>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d104      	bne.n	80025f0 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80025e6:	4a24      	ldr	r2, [pc, #144]	; (8002678 <menu+0x136c>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	2001      	movs	r0, #1
 80025ec:	f005 fbf0 	bl	8007dd0 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <menu+0x1370>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80025f8:	4a21      	ldr	r2, [pc, #132]	; (8002680 <menu+0x1374>)
 80025fa:	2101      	movs	r1, #1
 80025fc:	2002      	movs	r0, #2
 80025fe:	f005 fbe7 	bl	8007dd0 <lcd_print>
 8002602:	e04c      	b.n	800269e <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <menu+0x1370>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d13f      	bne.n	800268c <menu+0x1380>
			if(dilSecim == 0){
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <menu+0x1328>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d105      	bne.n	8002620 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002614:	4a1b      	ldr	r2, [pc, #108]	; (8002684 <menu+0x1378>)
 8002616:	2101      	movs	r1, #1
 8002618:	2002      	movs	r0, #2
 800261a:	f005 fbd9 	bl	8007dd0 <lcd_print>
 800261e:	e03e      	b.n	800269e <menu+0x1392>
			} else if(dilSecim == 1) {
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <menu+0x1328>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d13a      	bne.n	800269e <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002628:	4a17      	ldr	r2, [pc, #92]	; (8002688 <menu+0x137c>)
 800262a:	2101      	movs	r1, #1
 800262c:	2002      	movs	r0, #2
 800262e:	f005 fbcf 	bl	8007dd0 <lcd_print>
 8002632:	e034      	b.n	800269e <menu+0x1392>
 8002634:	20000241 	.word	0x20000241
 8002638:	0800d574 	.word	0x0800d574
 800263c:	40010800 	.word	0x40010800
 8002640:	2000024f 	.word	0x2000024f
 8002644:	20000228 	.word	0x20000228
 8002648:	20000118 	.word	0x20000118
 800264c:	20000226 	.word	0x20000226
 8002650:	2000024c 	.word	0x2000024c
 8002654:	20000220 	.word	0x20000220
 8002658:	0800d588 	.word	0x0800d588
 800265c:	0800d59c 	.word	0x0800d59c
 8002660:	2000022c 	.word	0x2000022c
 8002664:	0800d5b0 	.word	0x0800d5b0
 8002668:	0800d5c0 	.word	0x0800d5c0
 800266c:	0800d5d0 	.word	0x0800d5d0
 8002670:	0800d5e4 	.word	0x0800d5e4
 8002674:	0800d5f8 	.word	0x0800d5f8
 8002678:	0800d60c 	.word	0x0800d60c
 800267c:	20000229 	.word	0x20000229
 8002680:	0800d620 	.word	0x0800d620
 8002684:	0800d634 	.word	0x0800d634
 8002688:	0800d644 	.word	0x0800d644
			}
		} else if(kapi1Tip == 2) {
 800268c:	4b8a      	ldr	r3, [pc, #552]	; (80028b8 <menu+0x15ac>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d104      	bne.n	800269e <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002694:	4a89      	ldr	r2, [pc, #548]	; (80028bc <menu+0x15b0>)
 8002696:	2101      	movs	r1, #1
 8002698:	2002      	movs	r0, #2
 800269a:	f005 fb99 	bl	8007dd0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800269e:	2102      	movs	r1, #2
 80026a0:	4887      	ldr	r0, [pc, #540]	; (80028c0 <menu+0x15b4>)
 80026a2:	f006 febb 	bl	800941c <HAL_GPIO_ReadPin>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d115      	bne.n	80026d8 <menu+0x13cc>
 80026ac:	4b85      	ldr	r3, [pc, #532]	; (80028c4 <menu+0x15b8>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	f083 0301 	eor.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00e      	beq.n	80026d8 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80026ba:	4b7f      	ldr	r3, [pc, #508]	; (80028b8 <menu+0x15ac>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	3301      	adds	r3, #1
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4b7d      	ldr	r3, [pc, #500]	; (80028b8 <menu+0x15ac>)
 80026c4:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80026c6:	4b7c      	ldr	r3, [pc, #496]	; (80028b8 <menu+0x15ac>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d902      	bls.n	80026d4 <menu+0x13c8>
				kapi1Tip = 0;
 80026ce:	4b7a      	ldr	r3, [pc, #488]	; (80028b8 <menu+0x15ac>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026d4:	f002 fa8e 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026d8:	2104      	movs	r1, #4
 80026da:	4879      	ldr	r0, [pc, #484]	; (80028c0 <menu+0x15b4>)
 80026dc:	f006 fe9e 	bl	800941c <HAL_GPIO_ReadPin>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d115      	bne.n	8002712 <menu+0x1406>
 80026e6:	4b77      	ldr	r3, [pc, #476]	; (80028c4 <menu+0x15b8>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	f083 0301 	eor.w	r3, r3, #1
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00e      	beq.n	8002712 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80026f4:	4b70      	ldr	r3, [pc, #448]	; (80028b8 <menu+0x15ac>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	4b6e      	ldr	r3, [pc, #440]	; (80028b8 <menu+0x15ac>)
 80026fe:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002700:	4b6d      	ldr	r3, [pc, #436]	; (80028b8 <menu+0x15ac>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d902      	bls.n	800270e <menu+0x1402>
		   		kapi1Tip = 2;
 8002708:	4b6b      	ldr	r3, [pc, #428]	; (80028b8 <menu+0x15ac>)
 800270a:	2202      	movs	r2, #2
 800270c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800270e:	f002 fa71 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002712:	2108      	movs	r1, #8
 8002714:	486a      	ldr	r0, [pc, #424]	; (80028c0 <menu+0x15b4>)
 8002716:	f006 fe81 	bl	800941c <HAL_GPIO_ReadPin>
 800271a:	4603      	mov	r3, r0
 800271c:	2b01      	cmp	r3, #1
 800271e:	d10d      	bne.n	800273c <menu+0x1430>
 8002720:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <menu+0x15b8>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	f083 0301 	eor.w	r3, r3, #1
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <menu+0x1430>
			eepromData[8] = kapi1Tip;
 800272e:	4b62      	ldr	r3, [pc, #392]	; (80028b8 <menu+0x15ac>)
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	4b65      	ldr	r3, [pc, #404]	; (80028c8 <menu+0x15bc>)
 8002734:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002736:	4b65      	ldr	r3, [pc, #404]	; (80028cc <menu+0x15c0>)
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 800273c:	4b64      	ldr	r3, [pc, #400]	; (80028d0 <menu+0x15c4>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b0a      	cmp	r3, #10
 8002742:	d17f      	bne.n	8002844 <menu+0x1538>
		if(dilSecim == 0) {
 8002744:	4b63      	ldr	r3, [pc, #396]	; (80028d4 <menu+0x15c8>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 800274c:	4a62      	ldr	r2, [pc, #392]	; (80028d8 <menu+0x15cc>)
 800274e:	2101      	movs	r1, #1
 8002750:	2001      	movs	r0, #1
 8002752:	f005 fb3d 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002756:	4a61      	ldr	r2, [pc, #388]	; (80028dc <menu+0x15d0>)
 8002758:	2101      	movs	r1, #1
 800275a:	2002      	movs	r0, #2
 800275c:	f005 fb38 	bl	8007dd0 <lcd_print>
 8002760:	e00d      	b.n	800277e <menu+0x1472>
		} else if(dilSecim == 1) {
 8002762:	4b5c      	ldr	r3, [pc, #368]	; (80028d4 <menu+0x15c8>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d109      	bne.n	800277e <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800276a:	4a5d      	ldr	r2, [pc, #372]	; (80028e0 <menu+0x15d4>)
 800276c:	2101      	movs	r1, #1
 800276e:	2001      	movs	r0, #1
 8002770:	f005 fb2e 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002774:	4a5b      	ldr	r2, [pc, #364]	; (80028e4 <menu+0x15d8>)
 8002776:	2101      	movs	r1, #1
 8002778:	2002      	movs	r0, #2
 800277a:	f005 fb29 	bl	8007dd0 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800277e:	4b5a      	ldr	r3, [pc, #360]	; (80028e8 <menu+0x15dc>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	220a      	movs	r2, #10
 8002784:	4959      	ldr	r1, [pc, #356]	; (80028ec <menu+0x15e0>)
 8002786:	4618      	mov	r0, r3
 8002788:	f009 fe74 	bl	800c474 <itoa>
		lcd_print(2,16,snum);
 800278c:	4a57      	ldr	r2, [pc, #348]	; (80028ec <menu+0x15e0>)
 800278e:	2110      	movs	r1, #16
 8002790:	2002      	movs	r0, #2
 8002792:	f005 fb1d 	bl	8007dd0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002796:	2102      	movs	r1, #2
 8002798:	4849      	ldr	r0, [pc, #292]	; (80028c0 <menu+0x15b4>)
 800279a:	f006 fe3f 	bl	800941c <HAL_GPIO_ReadPin>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d119      	bne.n	80027d8 <menu+0x14cc>
 80027a4:	4b47      	ldr	r3, [pc, #284]	; (80028c4 <menu+0x15b8>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	f083 0301 	eor.w	r3, r3, #1
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d012      	beq.n	80027d8 <menu+0x14cc>
 80027b2:	4b41      	ldr	r3, [pc, #260]	; (80028b8 <menu+0x15ac>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10e      	bne.n	80027d8 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80027ba:	4b4b      	ldr	r3, [pc, #300]	; (80028e8 <menu+0x15dc>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <menu+0x15dc>)
 80027c4:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80027c6:	4b48      	ldr	r3, [pc, #288]	; (80028e8 <menu+0x15dc>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d902      	bls.n	80027d4 <menu+0x14c8>
				kapi1AcSure = 0;
 80027ce:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <menu+0x15dc>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027d4:	f002 fa0e 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80027d8:	2104      	movs	r1, #4
 80027da:	4839      	ldr	r0, [pc, #228]	; (80028c0 <menu+0x15b4>)
 80027dc:	f006 fe1e 	bl	800941c <HAL_GPIO_ReadPin>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d119      	bne.n	800281a <menu+0x150e>
 80027e6:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <menu+0x15b8>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	f083 0301 	eor.w	r3, r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d012      	beq.n	800281a <menu+0x150e>
 80027f4:	4b30      	ldr	r3, [pc, #192]	; (80028b8 <menu+0x15ac>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10e      	bne.n	800281a <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80027fc:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <menu+0x15dc>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	3b01      	subs	r3, #1
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <menu+0x15dc>)
 8002806:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002808:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <menu+0x15dc>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b06      	cmp	r3, #6
 800280e:	d902      	bls.n	8002816 <menu+0x150a>
		   		kapi1AcSure = 5;
 8002810:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <menu+0x15dc>)
 8002812:	2205      	movs	r2, #5
 8002814:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002816:	f002 f9ed 	bl	8004bf4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800281a:	2108      	movs	r1, #8
 800281c:	4828      	ldr	r0, [pc, #160]	; (80028c0 <menu+0x15b4>)
 800281e:	f006 fdfd 	bl	800941c <HAL_GPIO_ReadPin>
 8002822:	4603      	mov	r3, r0
 8002824:	2b01      	cmp	r3, #1
 8002826:	d10d      	bne.n	8002844 <menu+0x1538>
 8002828:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <menu+0x15b8>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	f083 0301 	eor.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d006      	beq.n	8002844 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002836:	4b2c      	ldr	r3, [pc, #176]	; (80028e8 <menu+0x15dc>)
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <menu+0x15bc>)
 800283c:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <menu+0x15c0>)
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <menu+0x15c4>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b0b      	cmp	r3, #11
 800284a:	f040 80b5 	bne.w	80029b8 <menu+0x16ac>
		if(dilSecim == 0) {
 800284e:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <menu+0x15c8>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d105      	bne.n	8002862 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002856:	4a26      	ldr	r2, [pc, #152]	; (80028f0 <menu+0x15e4>)
 8002858:	2101      	movs	r1, #1
 800285a:	2001      	movs	r0, #1
 800285c:	f005 fab8 	bl	8007dd0 <lcd_print>
 8002860:	e008      	b.n	8002874 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002862:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <menu+0x15c8>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d104      	bne.n	8002874 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800286a:	4a22      	ldr	r2, [pc, #136]	; (80028f4 <menu+0x15e8>)
 800286c:	2101      	movs	r1, #1
 800286e:	2001      	movs	r0, #1
 8002870:	f005 faae 	bl	8007dd0 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002874:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <menu+0x15ec>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 800287c:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <menu+0x15f0>)
 800287e:	2101      	movs	r1, #1
 8002880:	2002      	movs	r0, #2
 8002882:	f005 faa5 	bl	8007dd0 <lcd_print>
 8002886:	e048      	b.n	800291a <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <menu+0x15ec>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d13b      	bne.n	8002908 <menu+0x15fc>
			if(dilSecim == 0) {
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <menu+0x15c8>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002898:	4a19      	ldr	r2, [pc, #100]	; (8002900 <menu+0x15f4>)
 800289a:	2101      	movs	r1, #1
 800289c:	2002      	movs	r0, #2
 800289e:	f005 fa97 	bl	8007dd0 <lcd_print>
 80028a2:	e03a      	b.n	800291a <menu+0x160e>
			} else if(dilSecim == 1) {
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <menu+0x15c8>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d136      	bne.n	800291a <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80028ac:	4a15      	ldr	r2, [pc, #84]	; (8002904 <menu+0x15f8>)
 80028ae:	2101      	movs	r1, #1
 80028b0:	2002      	movs	r0, #2
 80028b2:	f005 fa8d 	bl	8007dd0 <lcd_print>
 80028b6:	e030      	b.n	800291a <menu+0x160e>
 80028b8:	20000229 	.word	0x20000229
 80028bc:	0800d658 	.word	0x0800d658
 80028c0:	40010800 	.word	0x40010800
 80028c4:	2000024f 	.word	0x2000024f
 80028c8:	20000118 	.word	0x20000118
 80028cc:	2000024c 	.word	0x2000024c
 80028d0:	20000220 	.word	0x20000220
 80028d4:	20000241 	.word	0x20000241
 80028d8:	0800d668 	.word	0x0800d668
 80028dc:	0800d67c 	.word	0x0800d67c
 80028e0:	0800d68c 	.word	0x0800d68c
 80028e4:	0800d6a0 	.word	0x0800d6a0
 80028e8:	20000239 	.word	0x20000239
 80028ec:	20000188 	.word	0x20000188
 80028f0:	0800d6b0 	.word	0x0800d6b0
 80028f4:	0800d6c4 	.word	0x0800d6c4
 80028f8:	2000022a 	.word	0x2000022a
 80028fc:	0800d620 	.word	0x0800d620
 8002900:	0800d634 	.word	0x0800d634
 8002904:	0800d644 	.word	0x0800d644
			}
		} else if(kapi2Tip == 2) {
 8002908:	4b8a      	ldr	r3, [pc, #552]	; (8002b34 <menu+0x1828>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d104      	bne.n	800291a <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002910:	4a89      	ldr	r2, [pc, #548]	; (8002b38 <menu+0x182c>)
 8002912:	2101      	movs	r1, #1
 8002914:	2002      	movs	r0, #2
 8002916:	f005 fa5b 	bl	8007dd0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800291a:	2102      	movs	r1, #2
 800291c:	4887      	ldr	r0, [pc, #540]	; (8002b3c <menu+0x1830>)
 800291e:	f006 fd7d 	bl	800941c <HAL_GPIO_ReadPin>
 8002922:	4603      	mov	r3, r0
 8002924:	2b01      	cmp	r3, #1
 8002926:	d115      	bne.n	8002954 <menu+0x1648>
 8002928:	4b85      	ldr	r3, [pc, #532]	; (8002b40 <menu+0x1834>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	f083 0301 	eor.w	r3, r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00e      	beq.n	8002954 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002936:	4b7f      	ldr	r3, [pc, #508]	; (8002b34 <menu+0x1828>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	3301      	adds	r3, #1
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4b7d      	ldr	r3, [pc, #500]	; (8002b34 <menu+0x1828>)
 8002940:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002942:	4b7c      	ldr	r3, [pc, #496]	; (8002b34 <menu+0x1828>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d902      	bls.n	8002950 <menu+0x1644>
				kapi2Tip = 0;
 800294a:	4b7a      	ldr	r3, [pc, #488]	; (8002b34 <menu+0x1828>)
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002950:	f002 f950 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002954:	2104      	movs	r1, #4
 8002956:	4879      	ldr	r0, [pc, #484]	; (8002b3c <menu+0x1830>)
 8002958:	f006 fd60 	bl	800941c <HAL_GPIO_ReadPin>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d115      	bne.n	800298e <menu+0x1682>
 8002962:	4b77      	ldr	r3, [pc, #476]	; (8002b40 <menu+0x1834>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	f083 0301 	eor.w	r3, r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00e      	beq.n	800298e <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002970:	4b70      	ldr	r3, [pc, #448]	; (8002b34 <menu+0x1828>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	3b01      	subs	r3, #1
 8002976:	b2da      	uxtb	r2, r3
 8002978:	4b6e      	ldr	r3, [pc, #440]	; (8002b34 <menu+0x1828>)
 800297a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 800297c:	4b6d      	ldr	r3, [pc, #436]	; (8002b34 <menu+0x1828>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d902      	bls.n	800298a <menu+0x167e>
		   		kapi2Tip = 2;
 8002984:	4b6b      	ldr	r3, [pc, #428]	; (8002b34 <menu+0x1828>)
 8002986:	2202      	movs	r2, #2
 8002988:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800298a:	f002 f933 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800298e:	2108      	movs	r1, #8
 8002990:	486a      	ldr	r0, [pc, #424]	; (8002b3c <menu+0x1830>)
 8002992:	f006 fd43 	bl	800941c <HAL_GPIO_ReadPin>
 8002996:	4603      	mov	r3, r0
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10d      	bne.n	80029b8 <menu+0x16ac>
 800299c:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <menu+0x1834>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	f083 0301 	eor.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 80029aa:	4b62      	ldr	r3, [pc, #392]	; (8002b34 <menu+0x1828>)
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	4b65      	ldr	r3, [pc, #404]	; (8002b44 <menu+0x1838>)
 80029b0:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80029b2:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <menu+0x183c>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80029b8:	4b64      	ldr	r3, [pc, #400]	; (8002b4c <menu+0x1840>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b0c      	cmp	r3, #12
 80029be:	d17f      	bne.n	8002ac0 <menu+0x17b4>
		if(dilSecim == 0) {
 80029c0:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <menu+0x1844>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 80029c8:	4a62      	ldr	r2, [pc, #392]	; (8002b54 <menu+0x1848>)
 80029ca:	2101      	movs	r1, #1
 80029cc:	2001      	movs	r0, #1
 80029ce:	f005 f9ff 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80029d2:	4a61      	ldr	r2, [pc, #388]	; (8002b58 <menu+0x184c>)
 80029d4:	2101      	movs	r1, #1
 80029d6:	2002      	movs	r0, #2
 80029d8:	f005 f9fa 	bl	8007dd0 <lcd_print>
 80029dc:	e00d      	b.n	80029fa <menu+0x16ee>
		} else if(dilSecim == 1) {
 80029de:	4b5c      	ldr	r3, [pc, #368]	; (8002b50 <menu+0x1844>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d109      	bne.n	80029fa <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 80029e6:	4a5d      	ldr	r2, [pc, #372]	; (8002b5c <menu+0x1850>)
 80029e8:	2101      	movs	r1, #1
 80029ea:	2001      	movs	r0, #1
 80029ec:	f005 f9f0 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80029f0:	4a5b      	ldr	r2, [pc, #364]	; (8002b60 <menu+0x1854>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	2002      	movs	r0, #2
 80029f6:	f005 f9eb 	bl	8007dd0 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 80029fa:	4b5a      	ldr	r3, [pc, #360]	; (8002b64 <menu+0x1858>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	220a      	movs	r2, #10
 8002a00:	4959      	ldr	r1, [pc, #356]	; (8002b68 <menu+0x185c>)
 8002a02:	4618      	mov	r0, r3
 8002a04:	f009 fd36 	bl	800c474 <itoa>
		lcd_print(2,16,snum);
 8002a08:	4a57      	ldr	r2, [pc, #348]	; (8002b68 <menu+0x185c>)
 8002a0a:	2110      	movs	r1, #16
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f005 f9df 	bl	8007dd0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a12:	2102      	movs	r1, #2
 8002a14:	4849      	ldr	r0, [pc, #292]	; (8002b3c <menu+0x1830>)
 8002a16:	f006 fd01 	bl	800941c <HAL_GPIO_ReadPin>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d119      	bne.n	8002a54 <menu+0x1748>
 8002a20:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <menu+0x1834>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	f083 0301 	eor.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d012      	beq.n	8002a54 <menu+0x1748>
 8002a2e:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <menu+0x1828>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10e      	bne.n	8002a54 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002a36:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <menu+0x1858>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4b49      	ldr	r3, [pc, #292]	; (8002b64 <menu+0x1858>)
 8002a40:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002a42:	4b48      	ldr	r3, [pc, #288]	; (8002b64 <menu+0x1858>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d902      	bls.n	8002a50 <menu+0x1744>
				kapi2AcSure = 0;
 8002a4a:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <menu+0x1858>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a50:	f002 f8d0 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a54:	2104      	movs	r1, #4
 8002a56:	4839      	ldr	r0, [pc, #228]	; (8002b3c <menu+0x1830>)
 8002a58:	f006 fce0 	bl	800941c <HAL_GPIO_ReadPin>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d119      	bne.n	8002a96 <menu+0x178a>
 8002a62:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <menu+0x1834>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	f083 0301 	eor.w	r3, r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d012      	beq.n	8002a96 <menu+0x178a>
 8002a70:	4b30      	ldr	r3, [pc, #192]	; (8002b34 <menu+0x1828>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10e      	bne.n	8002a96 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002a78:	4b3a      	ldr	r3, [pc, #232]	; (8002b64 <menu+0x1858>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	4b38      	ldr	r3, [pc, #224]	; (8002b64 <menu+0x1858>)
 8002a82:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002a84:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <menu+0x1858>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b06      	cmp	r3, #6
 8002a8a:	d902      	bls.n	8002a92 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002a8c:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <menu+0x1858>)
 8002a8e:	2205      	movs	r2, #5
 8002a90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a92:	f002 f8af 	bl	8004bf4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a96:	2108      	movs	r1, #8
 8002a98:	4828      	ldr	r0, [pc, #160]	; (8002b3c <menu+0x1830>)
 8002a9a:	f006 fcbf 	bl	800941c <HAL_GPIO_ReadPin>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d10d      	bne.n	8002ac0 <menu+0x17b4>
 8002aa4:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <menu+0x1834>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	f083 0301 	eor.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d006      	beq.n	8002ac0 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002ab2:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <menu+0x1858>)
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <menu+0x1838>)
 8002ab8:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002aba:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <menu+0x183c>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002ac0:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <menu+0x1840>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b0d      	cmp	r3, #13
 8002ac6:	f040 80b5 	bne.w	8002c34 <menu+0x1928>
		if(dilSecim == 0) {
 8002aca:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <menu+0x1844>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002ad2:	4a26      	ldr	r2, [pc, #152]	; (8002b6c <menu+0x1860>)
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f005 f97a 	bl	8007dd0 <lcd_print>
 8002adc:	e008      	b.n	8002af0 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002ade:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <menu+0x1844>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d104      	bne.n	8002af0 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002ae6:	4a22      	ldr	r2, [pc, #136]	; (8002b70 <menu+0x1864>)
 8002ae8:	2101      	movs	r1, #1
 8002aea:	2001      	movs	r0, #1
 8002aec:	f005 f970 	bl	8007dd0 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002af0:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <menu+0x1868>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002af8:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <menu+0x186c>)
 8002afa:	2101      	movs	r1, #1
 8002afc:	2002      	movs	r0, #2
 8002afe:	f005 f967 	bl	8007dd0 <lcd_print>
 8002b02:	e048      	b.n	8002b96 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002b04:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <menu+0x1868>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d13b      	bne.n	8002b84 <menu+0x1878>
			if(dilSecim == 0) {
 8002b0c:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <menu+0x1844>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d105      	bne.n	8002b20 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002b14:	4a19      	ldr	r2, [pc, #100]	; (8002b7c <menu+0x1870>)
 8002b16:	2101      	movs	r1, #1
 8002b18:	2002      	movs	r0, #2
 8002b1a:	f005 f959 	bl	8007dd0 <lcd_print>
 8002b1e:	e03a      	b.n	8002b96 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <menu+0x1844>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d136      	bne.n	8002b96 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002b28:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <menu+0x1874>)
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	2002      	movs	r0, #2
 8002b2e:	f005 f94f 	bl	8007dd0 <lcd_print>
 8002b32:	e030      	b.n	8002b96 <menu+0x188a>
 8002b34:	2000022a 	.word	0x2000022a
 8002b38:	0800d658 	.word	0x0800d658
 8002b3c:	40010800 	.word	0x40010800
 8002b40:	2000024f 	.word	0x2000024f
 8002b44:	20000118 	.word	0x20000118
 8002b48:	2000024c 	.word	0x2000024c
 8002b4c:	20000220 	.word	0x20000220
 8002b50:	20000241 	.word	0x20000241
 8002b54:	0800d6d8 	.word	0x0800d6d8
 8002b58:	0800d67c 	.word	0x0800d67c
 8002b5c:	0800d6ec 	.word	0x0800d6ec
 8002b60:	0800d6a0 	.word	0x0800d6a0
 8002b64:	2000023a 	.word	0x2000023a
 8002b68:	20000188 	.word	0x20000188
 8002b6c:	0800d700 	.word	0x0800d700
 8002b70:	0800d714 	.word	0x0800d714
 8002b74:	2000022b 	.word	0x2000022b
 8002b78:	0800d620 	.word	0x0800d620
 8002b7c:	0800d634 	.word	0x0800d634
 8002b80:	0800d644 	.word	0x0800d644
			}
		} else if(kapitablaTip == 2) {
 8002b84:	4b5b      	ldr	r3, [pc, #364]	; (8002cf4 <menu+0x19e8>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d104      	bne.n	8002b96 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002b8c:	4a5a      	ldr	r2, [pc, #360]	; (8002cf8 <menu+0x19ec>)
 8002b8e:	2101      	movs	r1, #1
 8002b90:	2002      	movs	r0, #2
 8002b92:	f005 f91d 	bl	8007dd0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b96:	2102      	movs	r1, #2
 8002b98:	4858      	ldr	r0, [pc, #352]	; (8002cfc <menu+0x19f0>)
 8002b9a:	f006 fc3f 	bl	800941c <HAL_GPIO_ReadPin>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d115      	bne.n	8002bd0 <menu+0x18c4>
 8002ba4:	4b56      	ldr	r3, [pc, #344]	; (8002d00 <menu+0x19f4>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	f083 0301 	eor.w	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00e      	beq.n	8002bd0 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002bb2:	4b50      	ldr	r3, [pc, #320]	; (8002cf4 <menu+0x19e8>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4b4e      	ldr	r3, [pc, #312]	; (8002cf4 <menu+0x19e8>)
 8002bbc:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002bbe:	4b4d      	ldr	r3, [pc, #308]	; (8002cf4 <menu+0x19e8>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d902      	bls.n	8002bcc <menu+0x18c0>
				kapitablaTip = 0;
 8002bc6:	4b4b      	ldr	r3, [pc, #300]	; (8002cf4 <menu+0x19e8>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bcc:	f002 f812 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bd0:	2104      	movs	r1, #4
 8002bd2:	484a      	ldr	r0, [pc, #296]	; (8002cfc <menu+0x19f0>)
 8002bd4:	f006 fc22 	bl	800941c <HAL_GPIO_ReadPin>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d115      	bne.n	8002c0a <menu+0x18fe>
 8002bde:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <menu+0x19f4>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	f083 0301 	eor.w	r3, r3, #1
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00e      	beq.n	8002c0a <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002bec:	4b41      	ldr	r3, [pc, #260]	; (8002cf4 <menu+0x19e8>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <menu+0x19e8>)
 8002bf6:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002bf8:	4b3e      	ldr	r3, [pc, #248]	; (8002cf4 <menu+0x19e8>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d902      	bls.n	8002c06 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002c00:	4b3c      	ldr	r3, [pc, #240]	; (8002cf4 <menu+0x19e8>)
 8002c02:	2202      	movs	r2, #2
 8002c04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c06:	f001 fff5 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c0a:	2108      	movs	r1, #8
 8002c0c:	483b      	ldr	r0, [pc, #236]	; (8002cfc <menu+0x19f0>)
 8002c0e:	f006 fc05 	bl	800941c <HAL_GPIO_ReadPin>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d10d      	bne.n	8002c34 <menu+0x1928>
 8002c18:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <menu+0x19f4>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	f083 0301 	eor.w	r3, r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002c26:	4b33      	ldr	r3, [pc, #204]	; (8002cf4 <menu+0x19e8>)
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <menu+0x19f8>)
 8002c2c:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002c2e:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <menu+0x19fc>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002c34:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <menu+0x1a00>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b0e      	cmp	r3, #14
 8002c3a:	f040 80f2 	bne.w	8002e22 <menu+0x1b16>
		if(dilSecim == 0) {
 8002c3e:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <menu+0x1a04>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002c46:	4a33      	ldr	r2, [pc, #204]	; (8002d14 <menu+0x1a08>)
 8002c48:	2101      	movs	r1, #1
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f005 f8c0 	bl	8007dd0 <lcd_print>
 8002c50:	e008      	b.n	8002c64 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002c52:	4b2f      	ldr	r3, [pc, #188]	; (8002d10 <menu+0x1a04>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d104      	bne.n	8002c64 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002c5a:	4a2f      	ldr	r2, [pc, #188]	; (8002d18 <menu+0x1a0c>)
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f005 f8b6 	bl	8007dd0 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002c64:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <menu+0x1a10>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d113      	bne.n	8002c94 <menu+0x1988>
			if(dilSecim == 0){
 8002c6c:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <menu+0x1a04>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002c74:	4a2a      	ldr	r2, [pc, #168]	; (8002d20 <menu+0x1a14>)
 8002c76:	2101      	movs	r1, #1
 8002c78:	2002      	movs	r0, #2
 8002c7a:	f005 f8a9 	bl	8007dd0 <lcd_print>
 8002c7e:	e071      	b.n	8002d64 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002c80:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <menu+0x1a04>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d16d      	bne.n	8002d64 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002c88:	4a26      	ldr	r2, [pc, #152]	; (8002d24 <menu+0x1a18>)
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2002      	movs	r0, #2
 8002c8e:	f005 f89f 	bl	8007dd0 <lcd_print>
 8002c92:	e067      	b.n	8002d64 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002c94:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <menu+0x1a10>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d112      	bne.n	8002cc2 <menu+0x19b6>
			if(dilSecim == 0){
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <menu+0x1a04>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002ca4:	4a20      	ldr	r2, [pc, #128]	; (8002d28 <menu+0x1a1c>)
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	2002      	movs	r0, #2
 8002caa:	f005 f891 	bl	8007dd0 <lcd_print>
			}
			if(dilSecim == 1){
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <menu+0x1a04>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d156      	bne.n	8002d64 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <menu+0x1a20>)
 8002cb8:	2101      	movs	r1, #1
 8002cba:	2002      	movs	r0, #2
 8002cbc:	f005 f888 	bl	8007dd0 <lcd_print>
 8002cc0:	e050      	b.n	8002d64 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002cc2:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <menu+0x1a10>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d136      	bne.n	8002d38 <menu+0x1a2c>
			if(dilSecim == 0){
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <menu+0x1a04>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d105      	bne.n	8002cde <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002cd2:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <menu+0x1a24>)
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	2002      	movs	r0, #2
 8002cd8:	f005 f87a 	bl	8007dd0 <lcd_print>
 8002cdc:	e042      	b.n	8002d64 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <menu+0x1a04>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d13e      	bne.n	8002d64 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002ce6:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <menu+0x1a28>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	2002      	movs	r0, #2
 8002cec:	f005 f870 	bl	8007dd0 <lcd_print>
 8002cf0:	e038      	b.n	8002d64 <menu+0x1a58>
 8002cf2:	bf00      	nop
 8002cf4:	2000022b 	.word	0x2000022b
 8002cf8:	0800d658 	.word	0x0800d658
 8002cfc:	40010800 	.word	0x40010800
 8002d00:	2000024f 	.word	0x2000024f
 8002d04:	20000118 	.word	0x20000118
 8002d08:	2000024c 	.word	0x2000024c
 8002d0c:	20000220 	.word	0x20000220
 8002d10:	20000241 	.word	0x20000241
 8002d14:	0800d728 	.word	0x0800d728
 8002d18:	0800d73c 	.word	0x0800d73c
 8002d1c:	2000022d 	.word	0x2000022d
 8002d20:	0800d750 	.word	0x0800d750
 8002d24:	0800d760 	.word	0x0800d760
 8002d28:	0800d770 	.word	0x0800d770
 8002d2c:	0800d780 	.word	0x0800d780
 8002d30:	0800d790 	.word	0x0800d790
 8002d34:	0800d7a4 	.word	0x0800d7a4
			}
		} else if(kapiTablaAcKonum == 3) {
 8002d38:	4b9b      	ldr	r3, [pc, #620]	; (8002fa8 <menu+0x1c9c>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d111      	bne.n	8002d64 <menu+0x1a58>
			if(dilSecim == 0) {
 8002d40:	4b9a      	ldr	r3, [pc, #616]	; (8002fac <menu+0x1ca0>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002d48:	4a99      	ldr	r2, [pc, #612]	; (8002fb0 <menu+0x1ca4>)
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	2002      	movs	r0, #2
 8002d4e:	f005 f83f 	bl	8007dd0 <lcd_print>
			}
			if(dilSecim == 1) {
 8002d52:	4b96      	ldr	r3, [pc, #600]	; (8002fac <menu+0x1ca0>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d104      	bne.n	8002d64 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002d5a:	4a96      	ldr	r2, [pc, #600]	; (8002fb4 <menu+0x1ca8>)
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	2002      	movs	r0, #2
 8002d60:	f005 f836 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d64:	2102      	movs	r1, #2
 8002d66:	4894      	ldr	r0, [pc, #592]	; (8002fb8 <menu+0x1cac>)
 8002d68:	f006 fb58 	bl	800941c <HAL_GPIO_ReadPin>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d115      	bne.n	8002d9e <menu+0x1a92>
 8002d72:	4b92      	ldr	r3, [pc, #584]	; (8002fbc <menu+0x1cb0>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	f083 0301 	eor.w	r3, r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00e      	beq.n	8002d9e <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002d80:	4b89      	ldr	r3, [pc, #548]	; (8002fa8 <menu+0x1c9c>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	3301      	adds	r3, #1
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	4b87      	ldr	r3, [pc, #540]	; (8002fa8 <menu+0x1c9c>)
 8002d8a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002d8c:	4b86      	ldr	r3, [pc, #536]	; (8002fa8 <menu+0x1c9c>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d902      	bls.n	8002d9a <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002d94:	4b84      	ldr	r3, [pc, #528]	; (8002fa8 <menu+0x1c9c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d9a:	f001 ff2b 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d9e:	2104      	movs	r1, #4
 8002da0:	4885      	ldr	r0, [pc, #532]	; (8002fb8 <menu+0x1cac>)
 8002da2:	f006 fb3b 	bl	800941c <HAL_GPIO_ReadPin>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d115      	bne.n	8002dd8 <menu+0x1acc>
 8002dac:	4b83      	ldr	r3, [pc, #524]	; (8002fbc <menu+0x1cb0>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	f083 0301 	eor.w	r3, r3, #1
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00e      	beq.n	8002dd8 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002dba:	4b7b      	ldr	r3, [pc, #492]	; (8002fa8 <menu+0x1c9c>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4b79      	ldr	r3, [pc, #484]	; (8002fa8 <menu+0x1c9c>)
 8002dc4:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002dc6:	4b78      	ldr	r3, [pc, #480]	; (8002fa8 <menu+0x1c9c>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d902      	bls.n	8002dd4 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002dce:	4b76      	ldr	r3, [pc, #472]	; (8002fa8 <menu+0x1c9c>)
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dd4:	f001 ff0e 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dd8:	2108      	movs	r1, #8
 8002dda:	4877      	ldr	r0, [pc, #476]	; (8002fb8 <menu+0x1cac>)
 8002ddc:	f006 fb1e 	bl	800941c <HAL_GPIO_ReadPin>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d11d      	bne.n	8002e22 <menu+0x1b16>
 8002de6:	4b75      	ldr	r3, [pc, #468]	; (8002fbc <menu+0x1cb0>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	f083 0301 	eor.w	r3, r3, #1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d016      	beq.n	8002e22 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002df4:	4b6c      	ldr	r3, [pc, #432]	; (8002fa8 <menu+0x1c9c>)
 8002df6:	781a      	ldrb	r2, [r3, #0]
 8002df8:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <menu+0x1cb4>)
 8002dfa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002dfe:	4b6a      	ldr	r3, [pc, #424]	; (8002fa8 <menu+0x1c9c>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <menu+0x1b02>
 8002e06:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <menu+0x1c9c>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d106      	bne.n	8002e1c <menu+0x1b10>
				altLimit = 1;
 8002e0e:	4b6d      	ldr	r3, [pc, #436]	; (8002fc4 <menu+0x1cb8>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002e14:	4b6b      	ldr	r3, [pc, #428]	; (8002fc4 <menu+0x1cb8>)
 8002e16:	781a      	ldrb	r2, [r3, #0]
 8002e18:	4b69      	ldr	r3, [pc, #420]	; (8002fc0 <menu+0x1cb4>)
 8002e1a:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002e1c:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <menu+0x1cbc>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002e22:	4b6a      	ldr	r3, [pc, #424]	; (8002fcc <menu+0x1cc0>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b0f      	cmp	r3, #15
 8002e28:	d17f      	bne.n	8002f2a <menu+0x1c1e>
		if(dilSecim == 0) {
 8002e2a:	4b60      	ldr	r3, [pc, #384]	; (8002fac <menu+0x1ca0>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002e32:	4a67      	ldr	r2, [pc, #412]	; (8002fd0 <menu+0x1cc4>)
 8002e34:	2101      	movs	r1, #1
 8002e36:	2001      	movs	r0, #1
 8002e38:	f004 ffca 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002e3c:	4a65      	ldr	r2, [pc, #404]	; (8002fd4 <menu+0x1cc8>)
 8002e3e:	2101      	movs	r1, #1
 8002e40:	2002      	movs	r0, #2
 8002e42:	f004 ffc5 	bl	8007dd0 <lcd_print>
 8002e46:	e00d      	b.n	8002e64 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002e48:	4b58      	ldr	r3, [pc, #352]	; (8002fac <menu+0x1ca0>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d109      	bne.n	8002e64 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002e50:	4a61      	ldr	r2, [pc, #388]	; (8002fd8 <menu+0x1ccc>)
 8002e52:	2101      	movs	r1, #1
 8002e54:	2001      	movs	r0, #1
 8002e56:	f004 ffbb 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002e5a:	4a60      	ldr	r2, [pc, #384]	; (8002fdc <menu+0x1cd0>)
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	2002      	movs	r0, #2
 8002e60:	f004 ffb6 	bl	8007dd0 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002e64:	4b5e      	ldr	r3, [pc, #376]	; (8002fe0 <menu+0x1cd4>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	220a      	movs	r2, #10
 8002e6a:	495e      	ldr	r1, [pc, #376]	; (8002fe4 <menu+0x1cd8>)
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f009 fb01 	bl	800c474 <itoa>
		lcd_print(2,16,snum);
 8002e72:	4a5c      	ldr	r2, [pc, #368]	; (8002fe4 <menu+0x1cd8>)
 8002e74:	2110      	movs	r1, #16
 8002e76:	2002      	movs	r0, #2
 8002e78:	f004 ffaa 	bl	8007dd0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002e7c:	2102      	movs	r1, #2
 8002e7e:	484e      	ldr	r0, [pc, #312]	; (8002fb8 <menu+0x1cac>)
 8002e80:	f006 facc 	bl	800941c <HAL_GPIO_ReadPin>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d119      	bne.n	8002ebe <menu+0x1bb2>
 8002e8a:	4b4c      	ldr	r3, [pc, #304]	; (8002fbc <menu+0x1cb0>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	f083 0301 	eor.w	r3, r3, #1
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d012      	beq.n	8002ebe <menu+0x1bb2>
 8002e98:	4b53      	ldr	r3, [pc, #332]	; (8002fe8 <menu+0x1cdc>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10e      	bne.n	8002ebe <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002ea0:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <menu+0x1cd4>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	4b4d      	ldr	r3, [pc, #308]	; (8002fe0 <menu+0x1cd4>)
 8002eaa:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002eac:	4b4c      	ldr	r3, [pc, #304]	; (8002fe0 <menu+0x1cd4>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	d902      	bls.n	8002eba <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002eb4:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <menu+0x1cd4>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002eba:	f001 fe9b 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002ebe:	2104      	movs	r1, #4
 8002ec0:	483d      	ldr	r0, [pc, #244]	; (8002fb8 <menu+0x1cac>)
 8002ec2:	f006 faab 	bl	800941c <HAL_GPIO_ReadPin>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d119      	bne.n	8002f00 <menu+0x1bf4>
 8002ecc:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <menu+0x1cb0>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	f083 0301 	eor.w	r3, r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d012      	beq.n	8002f00 <menu+0x1bf4>
 8002eda:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <menu+0x1cdc>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10e      	bne.n	8002f00 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002ee2:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <menu+0x1cd4>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	4b3d      	ldr	r3, [pc, #244]	; (8002fe0 <menu+0x1cd4>)
 8002eec:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002eee:	4b3c      	ldr	r3, [pc, #240]	; (8002fe0 <menu+0x1cd4>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d902      	bls.n	8002efc <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002ef6:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <menu+0x1cd4>)
 8002ef8:	2205      	movs	r2, #5
 8002efa:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002efc:	f001 fe7a 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f00:	2108      	movs	r1, #8
 8002f02:	482d      	ldr	r0, [pc, #180]	; (8002fb8 <menu+0x1cac>)
 8002f04:	f006 fa8a 	bl	800941c <HAL_GPIO_ReadPin>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d10d      	bne.n	8002f2a <menu+0x1c1e>
 8002f0e:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <menu+0x1cb0>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	f083 0301 	eor.w	r3, r3, #1
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d006      	beq.n	8002f2a <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002f1c:	4b30      	ldr	r3, [pc, #192]	; (8002fe0 <menu+0x1cd4>)
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <menu+0x1cb4>)
 8002f22:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002f24:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <menu+0x1cbc>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002f2a:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <menu+0x1cc0>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b10      	cmp	r3, #16
 8002f30:	f040 80bc 	bne.w	80030ac <menu+0x1da0>
		if(dilSecim == 0) {
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <menu+0x1ca0>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002f3c:	4a2b      	ldr	r2, [pc, #172]	; (8002fec <menu+0x1ce0>)
 8002f3e:	2101      	movs	r1, #1
 8002f40:	2001      	movs	r0, #1
 8002f42:	f004 ff45 	bl	8007dd0 <lcd_print>
 8002f46:	e008      	b.n	8002f5a <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002f48:	4b18      	ldr	r3, [pc, #96]	; (8002fac <menu+0x1ca0>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d104      	bne.n	8002f5a <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002f50:	4a27      	ldr	r2, [pc, #156]	; (8002ff0 <menu+0x1ce4>)
 8002f52:	2101      	movs	r1, #1
 8002f54:	2001      	movs	r0, #1
 8002f56:	f004 ff3b 	bl	8007dd0 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002f5a:	4b26      	ldr	r3, [pc, #152]	; (8002ff4 <menu+0x1ce8>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d113      	bne.n	8002f8a <menu+0x1c7e>
			if(dilSecim == 0) {
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <menu+0x1ca0>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d105      	bne.n	8002f76 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002f6a:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <menu+0x1ca4>)
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	2002      	movs	r0, #2
 8002f70:	f004 ff2e 	bl	8007dd0 <lcd_print>
 8002f74:	e04b      	b.n	800300e <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <menu+0x1ca0>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d147      	bne.n	800300e <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002f7e:	4a0d      	ldr	r2, [pc, #52]	; (8002fb4 <menu+0x1ca8>)
 8002f80:	2101      	movs	r1, #1
 8002f82:	2002      	movs	r0, #2
 8002f84:	f004 ff24 	bl	8007dd0 <lcd_print>
 8002f88:	e041      	b.n	800300e <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <menu+0x1ce8>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d13d      	bne.n	800300e <menu+0x1d02>
			if(dilSecim == 0) {
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <menu+0x1ca0>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d130      	bne.n	8002ffc <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002f9a:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <menu+0x1cec>)
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	2002      	movs	r0, #2
 8002fa0:	f004 ff16 	bl	8007dd0 <lcd_print>
 8002fa4:	e033      	b.n	800300e <menu+0x1d02>
 8002fa6:	bf00      	nop
 8002fa8:	2000022d 	.word	0x2000022d
 8002fac:	20000241 	.word	0x20000241
 8002fb0:	0800d418 	.word	0x0800d418
 8002fb4:	0800d42c 	.word	0x0800d42c
 8002fb8:	40010800 	.word	0x40010800
 8002fbc:	2000024f 	.word	0x2000024f
 8002fc0:	20000118 	.word	0x20000118
 8002fc4:	20000226 	.word	0x20000226
 8002fc8:	2000024c 	.word	0x2000024c
 8002fcc:	20000220 	.word	0x20000220
 8002fd0:	0800d7b8 	.word	0x0800d7b8
 8002fd4:	0800d67c 	.word	0x0800d67c
 8002fd8:	0800d7cc 	.word	0x0800d7cc
 8002fdc:	0800d6a0 	.word	0x0800d6a0
 8002fe0:	2000023b 	.word	0x2000023b
 8002fe4:	20000188 	.word	0x20000188
 8002fe8:	2000022b 	.word	0x2000022b
 8002fec:	0800d7e0 	.word	0x0800d7e0
 8002ff0:	0800d7f4 	.word	0x0800d7f4
 8002ff4:	2000022e 	.word	0x2000022e
 8002ff8:	0800d478 	.word	0x0800d478
			} else if(dilSecim == 1) {
 8002ffc:	4b99      	ldr	r3, [pc, #612]	; (8003264 <menu+0x1f58>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d104      	bne.n	800300e <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8003004:	4a98      	ldr	r2, [pc, #608]	; (8003268 <menu+0x1f5c>)
 8003006:	2101      	movs	r1, #1
 8003008:	2002      	movs	r0, #2
 800300a:	f004 fee1 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800300e:	2102      	movs	r1, #2
 8003010:	4896      	ldr	r0, [pc, #600]	; (800326c <menu+0x1f60>)
 8003012:	f006 fa03 	bl	800941c <HAL_GPIO_ReadPin>
 8003016:	4603      	mov	r3, r0
 8003018:	2b01      	cmp	r3, #1
 800301a:	d115      	bne.n	8003048 <menu+0x1d3c>
 800301c:	4b94      	ldr	r3, [pc, #592]	; (8003270 <menu+0x1f64>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	f083 0301 	eor.w	r3, r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00e      	beq.n	8003048 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 800302a:	4b92      	ldr	r3, [pc, #584]	; (8003274 <menu+0x1f68>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4b90      	ldr	r3, [pc, #576]	; (8003274 <menu+0x1f68>)
 8003034:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8003036:	4b8f      	ldr	r3, [pc, #572]	; (8003274 <menu+0x1f68>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d902      	bls.n	8003044 <menu+0x1d38>
				yukariYavasLimit = 0;
 800303e:	4b8d      	ldr	r3, [pc, #564]	; (8003274 <menu+0x1f68>)
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003044:	f001 fdd6 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003048:	2104      	movs	r1, #4
 800304a:	4888      	ldr	r0, [pc, #544]	; (800326c <menu+0x1f60>)
 800304c:	f006 f9e6 	bl	800941c <HAL_GPIO_ReadPin>
 8003050:	4603      	mov	r3, r0
 8003052:	2b01      	cmp	r3, #1
 8003054:	d115      	bne.n	8003082 <menu+0x1d76>
 8003056:	4b86      	ldr	r3, [pc, #536]	; (8003270 <menu+0x1f64>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	f083 0301 	eor.w	r3, r3, #1
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00e      	beq.n	8003082 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003064:	4b83      	ldr	r3, [pc, #524]	; (8003274 <menu+0x1f68>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	3b01      	subs	r3, #1
 800306a:	b2da      	uxtb	r2, r3
 800306c:	4b81      	ldr	r3, [pc, #516]	; (8003274 <menu+0x1f68>)
 800306e:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003070:	4b80      	ldr	r3, [pc, #512]	; (8003274 <menu+0x1f68>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003078:	4b7e      	ldr	r3, [pc, #504]	; (8003274 <menu+0x1f68>)
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800307e:	f001 fdb9 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003082:	2108      	movs	r1, #8
 8003084:	4879      	ldr	r0, [pc, #484]	; (800326c <menu+0x1f60>)
 8003086:	f006 f9c9 	bl	800941c <HAL_GPIO_ReadPin>
 800308a:	4603      	mov	r3, r0
 800308c:	2b01      	cmp	r3, #1
 800308e:	d10d      	bne.n	80030ac <menu+0x1da0>
 8003090:	4b77      	ldr	r3, [pc, #476]	; (8003270 <menu+0x1f64>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	f083 0301 	eor.w	r3, r3, #1
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d006      	beq.n	80030ac <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 800309e:	4b75      	ldr	r3, [pc, #468]	; (8003274 <menu+0x1f68>)
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	4b75      	ldr	r3, [pc, #468]	; (8003278 <menu+0x1f6c>)
 80030a4:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80030a6:	4b75      	ldr	r3, [pc, #468]	; (800327c <menu+0x1f70>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80030ac:	4b74      	ldr	r3, [pc, #464]	; (8003280 <menu+0x1f74>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b11      	cmp	r3, #17
 80030b2:	f040 80c3 	bne.w	800323c <menu+0x1f30>
		if(dilSecim == 0) {
 80030b6:	4b6b      	ldr	r3, [pc, #428]	; (8003264 <menu+0x1f58>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d105      	bne.n	80030ca <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80030be:	4a71      	ldr	r2, [pc, #452]	; (8003284 <menu+0x1f78>)
 80030c0:	2101      	movs	r1, #1
 80030c2:	2001      	movs	r0, #1
 80030c4:	f004 fe84 	bl	8007dd0 <lcd_print>
 80030c8:	e008      	b.n	80030dc <menu+0x1dd0>
		} else if(dilSecim == 1) {
 80030ca:	4b66      	ldr	r3, [pc, #408]	; (8003264 <menu+0x1f58>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d104      	bne.n	80030dc <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80030d2:	4a6d      	ldr	r2, [pc, #436]	; (8003288 <menu+0x1f7c>)
 80030d4:	2101      	movs	r1, #1
 80030d6:	2001      	movs	r0, #1
 80030d8:	f004 fe7a 	bl	8007dd0 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80030dc:	4b6b      	ldr	r3, [pc, #428]	; (800328c <menu+0x1f80>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d113      	bne.n	800310c <menu+0x1e00>
			if(dilSecim == 0){
 80030e4:	4b5f      	ldr	r3, [pc, #380]	; (8003264 <menu+0x1f58>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d105      	bne.n	80030f8 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 80030ec:	4a68      	ldr	r2, [pc, #416]	; (8003290 <menu+0x1f84>)
 80030ee:	2101      	movs	r1, #1
 80030f0:	2002      	movs	r0, #2
 80030f2:	f004 fe6d 	bl	8007dd0 <lcd_print>
 80030f6:	e038      	b.n	800316a <menu+0x1e5e>
			} else if(dilSecim == 1){
 80030f8:	4b5a      	ldr	r3, [pc, #360]	; (8003264 <menu+0x1f58>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d134      	bne.n	800316a <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003100:	4a64      	ldr	r2, [pc, #400]	; (8003294 <menu+0x1f88>)
 8003102:	2101      	movs	r1, #1
 8003104:	2002      	movs	r0, #2
 8003106:	f004 fe63 	bl	8007dd0 <lcd_print>
 800310a:	e02e      	b.n	800316a <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800310c:	4b5f      	ldr	r3, [pc, #380]	; (800328c <menu+0x1f80>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d113      	bne.n	800313c <menu+0x1e30>
			if(dilSecim == 0){
 8003114:	4b53      	ldr	r3, [pc, #332]	; (8003264 <menu+0x1f58>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d105      	bne.n	8003128 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 800311c:	4a5e      	ldr	r2, [pc, #376]	; (8003298 <menu+0x1f8c>)
 800311e:	2101      	movs	r1, #1
 8003120:	2002      	movs	r0, #2
 8003122:	f004 fe55 	bl	8007dd0 <lcd_print>
 8003126:	e020      	b.n	800316a <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003128:	4b4e      	ldr	r3, [pc, #312]	; (8003264 <menu+0x1f58>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d11c      	bne.n	800316a <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003130:	4a5a      	ldr	r2, [pc, #360]	; (800329c <menu+0x1f90>)
 8003132:	2101      	movs	r1, #1
 8003134:	2002      	movs	r0, #2
 8003136:	f004 fe4b 	bl	8007dd0 <lcd_print>
 800313a:	e016      	b.n	800316a <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 800313c:	4b53      	ldr	r3, [pc, #332]	; (800328c <menu+0x1f80>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d112      	bne.n	800316a <menu+0x1e5e>
			if(dilSecim == 0) {
 8003144:	4b47      	ldr	r3, [pc, #284]	; (8003264 <menu+0x1f58>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 800314c:	4a54      	ldr	r2, [pc, #336]	; (80032a0 <menu+0x1f94>)
 800314e:	2101      	movs	r1, #1
 8003150:	2002      	movs	r0, #2
 8003152:	f004 fe3d 	bl	8007dd0 <lcd_print>
 8003156:	e008      	b.n	800316a <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003158:	4b42      	ldr	r3, [pc, #264]	; (8003264 <menu+0x1f58>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d104      	bne.n	800316a <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003160:	4a50      	ldr	r2, [pc, #320]	; (80032a4 <menu+0x1f98>)
 8003162:	2101      	movs	r1, #1
 8003164:	2002      	movs	r0, #2
 8003166:	f004 fe33 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800316a:	2102      	movs	r1, #2
 800316c:	483f      	ldr	r0, [pc, #252]	; (800326c <menu+0x1f60>)
 800316e:	f006 f955 	bl	800941c <HAL_GPIO_ReadPin>
 8003172:	4603      	mov	r3, r0
 8003174:	2b01      	cmp	r3, #1
 8003176:	d115      	bne.n	80031a4 <menu+0x1e98>
 8003178:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <menu+0x1f64>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	f083 0301 	eor.w	r3, r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00e      	beq.n	80031a4 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003186:	4b41      	ldr	r3, [pc, #260]	; (800328c <menu+0x1f80>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	3301      	adds	r3, #1
 800318c:	b2da      	uxtb	r2, r3
 800318e:	4b3f      	ldr	r3, [pc, #252]	; (800328c <menu+0x1f80>)
 8003190:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003192:	4b3e      	ldr	r3, [pc, #248]	; (800328c <menu+0x1f80>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d902      	bls.n	80031a0 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800319a:	4b3c      	ldr	r3, [pc, #240]	; (800328c <menu+0x1f80>)
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031a0:	f001 fd28 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031a4:	2104      	movs	r1, #4
 80031a6:	4831      	ldr	r0, [pc, #196]	; (800326c <menu+0x1f60>)
 80031a8:	f006 f938 	bl	800941c <HAL_GPIO_ReadPin>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d115      	bne.n	80031de <menu+0x1ed2>
 80031b2:	4b2f      	ldr	r3, [pc, #188]	; (8003270 <menu+0x1f64>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	f083 0301 	eor.w	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00e      	beq.n	80031de <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80031c0:	4b32      	ldr	r3, [pc, #200]	; (800328c <menu+0x1f80>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	4b30      	ldr	r3, [pc, #192]	; (800328c <menu+0x1f80>)
 80031ca:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80031cc:	4b2f      	ldr	r3, [pc, #188]	; (800328c <menu+0x1f80>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d902      	bls.n	80031da <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80031d4:	4b2d      	ldr	r3, [pc, #180]	; (800328c <menu+0x1f80>)
 80031d6:	2202      	movs	r2, #2
 80031d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031da:	f001 fd0b 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031de:	2108      	movs	r1, #8
 80031e0:	4822      	ldr	r0, [pc, #136]	; (800326c <menu+0x1f60>)
 80031e2:	f006 f91b 	bl	800941c <HAL_GPIO_ReadPin>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d127      	bne.n	800323c <menu+0x1f30>
 80031ec:	4b20      	ldr	r3, [pc, #128]	; (8003270 <menu+0x1f64>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	f083 0301 	eor.w	r3, r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d020      	beq.n	800323c <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80031fa:	4b24      	ldr	r3, [pc, #144]	; (800328c <menu+0x1f80>)
 80031fc:	781a      	ldrb	r2, [r3, #0]
 80031fe:	4b1e      	ldr	r3, [pc, #120]	; (8003278 <menu+0x1f6c>)
 8003200:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003202:	4b22      	ldr	r3, [pc, #136]	; (800328c <menu+0x1f80>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d003      	beq.n	8003212 <menu+0x1f06>
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <menu+0x1f80>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d106      	bne.n	8003220 <menu+0x1f14>
				calismaSekli = 0;
 8003212:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <menu+0x1f9c>)
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003218:	4b23      	ldr	r3, [pc, #140]	; (80032a8 <menu+0x1f9c>)
 800321a:	781a      	ldrb	r2, [r3, #0]
 800321c:	4b16      	ldr	r3, [pc, #88]	; (8003278 <menu+0x1f6c>)
 800321e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <menu+0x1f80>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d106      	bne.n	8003236 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003228:	4b20      	ldr	r3, [pc, #128]	; (80032ac <menu+0x1fa0>)
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800322e:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <menu+0x1fa0>)
 8003230:	781a      	ldrb	r2, [r3, #0]
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <menu+0x1f6c>)
 8003234:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003236:	4b11      	ldr	r3, [pc, #68]	; (800327c <menu+0x1f70>)
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <menu+0x1f74>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b12      	cmp	r3, #18
 8003242:	f040 80d5 	bne.w	80033f0 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <menu+0x1f80>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d13c      	bne.n	80032c8 <menu+0x1fbc>
			if(dilSecim == 0) {
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <menu+0x1f58>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d12e      	bne.n	80032b4 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003256:	4a16      	ldr	r2, [pc, #88]	; (80032b0 <menu+0x1fa4>)
 8003258:	2101      	movs	r1, #1
 800325a:	2001      	movs	r0, #1
 800325c:	f004 fdb8 	bl	8007dd0 <lcd_print>
 8003260:	e048      	b.n	80032f4 <menu+0x1fe8>
 8003262:	bf00      	nop
 8003264:	20000241 	.word	0x20000241
 8003268:	0800d48c 	.word	0x0800d48c
 800326c:	40010800 	.word	0x40010800
 8003270:	2000024f 	.word	0x2000024f
 8003274:	2000022e 	.word	0x2000022e
 8003278:	20000118 	.word	0x20000118
 800327c:	2000024c 	.word	0x2000024c
 8003280:	20000220 	.word	0x20000220
 8003284:	0800d808 	.word	0x0800d808
 8003288:	0800d81c 	.word	0x0800d81c
 800328c:	2000022f 	.word	0x2000022f
 8003290:	0800d830 	.word	0x0800d830
 8003294:	0800d840 	.word	0x0800d840
 8003298:	0800d850 	.word	0x0800d850
 800329c:	0800d860 	.word	0x0800d860
 80032a0:	0800d418 	.word	0x0800d418
 80032a4:	0800d42c 	.word	0x0800d42c
 80032a8:	20000221 	.word	0x20000221
 80032ac:	20000232 	.word	0x20000232
 80032b0:	0800d870 	.word	0x0800d870
			} else if(dilSecim == 1) {
 80032b4:	4b7b      	ldr	r3, [pc, #492]	; (80034a4 <menu+0x2198>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d11b      	bne.n	80032f4 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80032bc:	4a7a      	ldr	r2, [pc, #488]	; (80034a8 <menu+0x219c>)
 80032be:	2101      	movs	r1, #1
 80032c0:	2001      	movs	r0, #1
 80032c2:	f004 fd85 	bl	8007dd0 <lcd_print>
 80032c6:	e015      	b.n	80032f4 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032c8:	4b78      	ldr	r3, [pc, #480]	; (80034ac <menu+0x21a0>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d111      	bne.n	80032f4 <menu+0x1fe8>
			if(dilSecim == 0){
 80032d0:	4b74      	ldr	r3, [pc, #464]	; (80034a4 <menu+0x2198>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d104      	bne.n	80032e2 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80032d8:	4a75      	ldr	r2, [pc, #468]	; (80034b0 <menu+0x21a4>)
 80032da:	2101      	movs	r1, #1
 80032dc:	2001      	movs	r0, #1
 80032de:	f004 fd77 	bl	8007dd0 <lcd_print>
			}
			if(dilSecim == 1){
 80032e2:	4b70      	ldr	r3, [pc, #448]	; (80034a4 <menu+0x2198>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d104      	bne.n	80032f4 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80032ea:	4a72      	ldr	r2, [pc, #456]	; (80034b4 <menu+0x21a8>)
 80032ec:	2101      	movs	r1, #1
 80032ee:	2001      	movs	r0, #1
 80032f0:	f004 fd6e 	bl	8007dd0 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80032f4:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <menu+0x21ac>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d113      	bne.n	8003324 <menu+0x2018>
			if(dilSecim == 0) {
 80032fc:	4b69      	ldr	r3, [pc, #420]	; (80034a4 <menu+0x2198>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003304:	4a6d      	ldr	r2, [pc, #436]	; (80034bc <menu+0x21b0>)
 8003306:	2101      	movs	r1, #1
 8003308:	2002      	movs	r0, #2
 800330a:	f004 fd61 	bl	8007dd0 <lcd_print>
 800330e:	e020      	b.n	8003352 <menu+0x2046>
			} else if(dilSecim == 1){
 8003310:	4b64      	ldr	r3, [pc, #400]	; (80034a4 <menu+0x2198>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d11c      	bne.n	8003352 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003318:	4a69      	ldr	r2, [pc, #420]	; (80034c0 <menu+0x21b4>)
 800331a:	2101      	movs	r1, #1
 800331c:	2002      	movs	r0, #2
 800331e:	f004 fd57 	bl	8007dd0 <lcd_print>
 8003322:	e016      	b.n	8003352 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003324:	4b64      	ldr	r3, [pc, #400]	; (80034b8 <menu+0x21ac>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d112      	bne.n	8003352 <menu+0x2046>
			if(dilSecim == 0){
 800332c:	4b5d      	ldr	r3, [pc, #372]	; (80034a4 <menu+0x2198>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d105      	bne.n	8003340 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003334:	4a63      	ldr	r2, [pc, #396]	; (80034c4 <menu+0x21b8>)
 8003336:	2101      	movs	r1, #1
 8003338:	2002      	movs	r0, #2
 800333a:	f004 fd49 	bl	8007dd0 <lcd_print>
 800333e:	e008      	b.n	8003352 <menu+0x2046>
			} else if(dilSecim == 1){
 8003340:	4b58      	ldr	r3, [pc, #352]	; (80034a4 <menu+0x2198>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d104      	bne.n	8003352 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003348:	4a5f      	ldr	r2, [pc, #380]	; (80034c8 <menu+0x21bc>)
 800334a:	2101      	movs	r1, #1
 800334c:	2002      	movs	r0, #2
 800334e:	f004 fd3f 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003352:	2102      	movs	r1, #2
 8003354:	485d      	ldr	r0, [pc, #372]	; (80034cc <menu+0x21c0>)
 8003356:	f006 f861 	bl	800941c <HAL_GPIO_ReadPin>
 800335a:	4603      	mov	r3, r0
 800335c:	2b01      	cmp	r3, #1
 800335e:	d115      	bne.n	800338c <menu+0x2080>
 8003360:	4b5b      	ldr	r3, [pc, #364]	; (80034d0 <menu+0x21c4>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	f083 0301 	eor.w	r3, r3, #1
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00e      	beq.n	800338c <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800336e:	4b52      	ldr	r3, [pc, #328]	; (80034b8 <menu+0x21ac>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	3301      	adds	r3, #1
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4b50      	ldr	r3, [pc, #320]	; (80034b8 <menu+0x21ac>)
 8003378:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800337a:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <menu+0x21ac>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d902      	bls.n	8003388 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003382:	4b4d      	ldr	r3, [pc, #308]	; (80034b8 <menu+0x21ac>)
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003388:	f001 fc34 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800338c:	2104      	movs	r1, #4
 800338e:	484f      	ldr	r0, [pc, #316]	; (80034cc <menu+0x21c0>)
 8003390:	f006 f844 	bl	800941c <HAL_GPIO_ReadPin>
 8003394:	4603      	mov	r3, r0
 8003396:	2b01      	cmp	r3, #1
 8003398:	d115      	bne.n	80033c6 <menu+0x20ba>
 800339a:	4b4d      	ldr	r3, [pc, #308]	; (80034d0 <menu+0x21c4>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	f083 0301 	eor.w	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00e      	beq.n	80033c6 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80033a8:	4b43      	ldr	r3, [pc, #268]	; (80034b8 <menu+0x21ac>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <menu+0x21ac>)
 80033b2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80033b4:	4b40      	ldr	r3, [pc, #256]	; (80034b8 <menu+0x21ac>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80033bc:	4b3e      	ldr	r3, [pc, #248]	; (80034b8 <menu+0x21ac>)
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033c2:	f001 fc17 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033c6:	2108      	movs	r1, #8
 80033c8:	4840      	ldr	r0, [pc, #256]	; (80034cc <menu+0x21c0>)
 80033ca:	f006 f827 	bl	800941c <HAL_GPIO_ReadPin>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d10d      	bne.n	80033f0 <menu+0x20e4>
 80033d4:	4b3e      	ldr	r3, [pc, #248]	; (80034d0 <menu+0x21c4>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	f083 0301 	eor.w	r3, r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d006      	beq.n	80033f0 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80033e2:	4b35      	ldr	r3, [pc, #212]	; (80034b8 <menu+0x21ac>)
 80033e4:	781a      	ldrb	r2, [r3, #0]
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <menu+0x21c8>)
 80033e8:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80033ea:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <menu+0x21cc>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80033f0:	4b3a      	ldr	r3, [pc, #232]	; (80034dc <menu+0x21d0>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b13      	cmp	r3, #19
 80033f6:	f040 80d5 	bne.w	80035a4 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80033fa:	4b2c      	ldr	r3, [pc, #176]	; (80034ac <menu+0x21a0>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d113      	bne.n	800342a <menu+0x211e>
			if(dilSecim == 0) {
 8003402:	4b28      	ldr	r3, [pc, #160]	; (80034a4 <menu+0x2198>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d105      	bne.n	8003416 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800340a:	4a35      	ldr	r2, [pc, #212]	; (80034e0 <menu+0x21d4>)
 800340c:	2101      	movs	r1, #1
 800340e:	2001      	movs	r0, #1
 8003410:	f004 fcde 	bl	8007dd0 <lcd_print>
 8003414:	e01f      	b.n	8003456 <menu+0x214a>
			} else if(dilSecim == 1) {
 8003416:	4b23      	ldr	r3, [pc, #140]	; (80034a4 <menu+0x2198>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d11b      	bne.n	8003456 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800341e:	4a31      	ldr	r2, [pc, #196]	; (80034e4 <menu+0x21d8>)
 8003420:	2101      	movs	r1, #1
 8003422:	2001      	movs	r0, #1
 8003424:	f004 fcd4 	bl	8007dd0 <lcd_print>
 8003428:	e015      	b.n	8003456 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <menu+0x21a0>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d111      	bne.n	8003456 <menu+0x214a>
			if(dilSecim == 0) {
 8003432:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <menu+0x2198>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d104      	bne.n	8003444 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800343a:	4a2b      	ldr	r2, [pc, #172]	; (80034e8 <menu+0x21dc>)
 800343c:	2101      	movs	r1, #1
 800343e:	2001      	movs	r0, #1
 8003440:	f004 fcc6 	bl	8007dd0 <lcd_print>
			}
			if(dilSecim == 1) {
 8003444:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <menu+0x2198>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d104      	bne.n	8003456 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 800344c:	4a27      	ldr	r2, [pc, #156]	; (80034ec <menu+0x21e0>)
 800344e:	2101      	movs	r1, #1
 8003450:	2001      	movs	r0, #1
 8003452:	f004 fcbd 	bl	8007dd0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003456:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <menu+0x21e4>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d113      	bne.n	8003486 <menu+0x217a>
			if(dilSecim == 0) {
 800345e:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <menu+0x2198>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d105      	bne.n	8003472 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8003466:	4a15      	ldr	r2, [pc, #84]	; (80034bc <menu+0x21b0>)
 8003468:	2101      	movs	r1, #1
 800346a:	2002      	movs	r0, #2
 800346c:	f004 fcb0 	bl	8007dd0 <lcd_print>
 8003470:	e049      	b.n	8003506 <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003472:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <menu+0x2198>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d145      	bne.n	8003506 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800347a:	4a11      	ldr	r2, [pc, #68]	; (80034c0 <menu+0x21b4>)
 800347c:	2101      	movs	r1, #1
 800347e:	2002      	movs	r0, #2
 8003480:	f004 fca6 	bl	8007dd0 <lcd_print>
 8003484:	e03f      	b.n	8003506 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003486:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <menu+0x21e4>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d13b      	bne.n	8003506 <menu+0x21fa>
			if(dilSecim == 0) {
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <menu+0x2198>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d12e      	bne.n	80034f4 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003496:	4a0b      	ldr	r2, [pc, #44]	; (80034c4 <menu+0x21b8>)
 8003498:	2101      	movs	r1, #1
 800349a:	2002      	movs	r0, #2
 800349c:	f004 fc98 	bl	8007dd0 <lcd_print>
 80034a0:	e031      	b.n	8003506 <menu+0x21fa>
 80034a2:	bf00      	nop
 80034a4:	20000241 	.word	0x20000241
 80034a8:	0800d884 	.word	0x0800d884
 80034ac:	2000022f 	.word	0x2000022f
 80034b0:	0800d894 	.word	0x0800d894
 80034b4:	0800d8a8 	.word	0x0800d8a8
 80034b8:	20000230 	.word	0x20000230
 80034bc:	0800d418 	.word	0x0800d418
 80034c0:	0800d42c 	.word	0x0800d42c
 80034c4:	0800d478 	.word	0x0800d478
 80034c8:	0800d48c 	.word	0x0800d48c
 80034cc:	40010800 	.word	0x40010800
 80034d0:	2000024f 	.word	0x2000024f
 80034d4:	20000118 	.word	0x20000118
 80034d8:	2000024c 	.word	0x2000024c
 80034dc:	20000220 	.word	0x20000220
 80034e0:	0800d8bc 	.word	0x0800d8bc
 80034e4:	0800d8d0 	.word	0x0800d8d0
 80034e8:	0800d8e4 	.word	0x0800d8e4
 80034ec:	0800d8f8 	.word	0x0800d8f8
 80034f0:	20000231 	.word	0x20000231
			} else if(dilSecim == 1) {
 80034f4:	4b90      	ldr	r3, [pc, #576]	; (8003738 <menu+0x242c>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d104      	bne.n	8003506 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80034fc:	4a8f      	ldr	r2, [pc, #572]	; (800373c <menu+0x2430>)
 80034fe:	2101      	movs	r1, #1
 8003500:	2002      	movs	r0, #2
 8003502:	f004 fc65 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003506:	2102      	movs	r1, #2
 8003508:	488d      	ldr	r0, [pc, #564]	; (8003740 <menu+0x2434>)
 800350a:	f005 ff87 	bl	800941c <HAL_GPIO_ReadPin>
 800350e:	4603      	mov	r3, r0
 8003510:	2b01      	cmp	r3, #1
 8003512:	d115      	bne.n	8003540 <menu+0x2234>
 8003514:	4b8b      	ldr	r3, [pc, #556]	; (8003744 <menu+0x2438>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	f083 0301 	eor.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00e      	beq.n	8003540 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003522:	4b89      	ldr	r3, [pc, #548]	; (8003748 <menu+0x243c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	3301      	adds	r3, #1
 8003528:	b2da      	uxtb	r2, r3
 800352a:	4b87      	ldr	r3, [pc, #540]	; (8003748 <menu+0x243c>)
 800352c:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800352e:	4b86      	ldr	r3, [pc, #536]	; (8003748 <menu+0x243c>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d902      	bls.n	800353c <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8003536:	4b84      	ldr	r3, [pc, #528]	; (8003748 <menu+0x243c>)
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800353c:	f001 fb5a 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003540:	2104      	movs	r1, #4
 8003542:	487f      	ldr	r0, [pc, #508]	; (8003740 <menu+0x2434>)
 8003544:	f005 ff6a 	bl	800941c <HAL_GPIO_ReadPin>
 8003548:	4603      	mov	r3, r0
 800354a:	2b01      	cmp	r3, #1
 800354c:	d115      	bne.n	800357a <menu+0x226e>
 800354e:	4b7d      	ldr	r3, [pc, #500]	; (8003744 <menu+0x2438>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	f083 0301 	eor.w	r3, r3, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00e      	beq.n	800357a <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 800355c:	4b7a      	ldr	r3, [pc, #488]	; (8003748 <menu+0x243c>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	3b01      	subs	r3, #1
 8003562:	b2da      	uxtb	r2, r3
 8003564:	4b78      	ldr	r3, [pc, #480]	; (8003748 <menu+0x243c>)
 8003566:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003568:	4b77      	ldr	r3, [pc, #476]	; (8003748 <menu+0x243c>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003570:	4b75      	ldr	r3, [pc, #468]	; (8003748 <menu+0x243c>)
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003576:	f001 fb3d 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800357a:	2108      	movs	r1, #8
 800357c:	4870      	ldr	r0, [pc, #448]	; (8003740 <menu+0x2434>)
 800357e:	f005 ff4d 	bl	800941c <HAL_GPIO_ReadPin>
 8003582:	4603      	mov	r3, r0
 8003584:	2b01      	cmp	r3, #1
 8003586:	d10d      	bne.n	80035a4 <menu+0x2298>
 8003588:	4b6e      	ldr	r3, [pc, #440]	; (8003744 <menu+0x2438>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	f083 0301 	eor.w	r3, r3, #1
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003596:	4b6c      	ldr	r3, [pc, #432]	; (8003748 <menu+0x243c>)
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	4b6c      	ldr	r3, [pc, #432]	; (800374c <menu+0x2440>)
 800359c:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800359e:	4b6c      	ldr	r3, [pc, #432]	; (8003750 <menu+0x2444>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80035a4:	4b6b      	ldr	r3, [pc, #428]	; (8003754 <menu+0x2448>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b14      	cmp	r3, #20
 80035aa:	f040 80b5 	bne.w	8003718 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80035ae:	4b6a      	ldr	r3, [pc, #424]	; (8003758 <menu+0x244c>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d113      	bne.n	80035de <menu+0x22d2>
			if(dilSecim == 0) {
 80035b6:	4b60      	ldr	r3, [pc, #384]	; (8003738 <menu+0x242c>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80035be:	4a67      	ldr	r2, [pc, #412]	; (800375c <menu+0x2450>)
 80035c0:	2101      	movs	r1, #1
 80035c2:	2001      	movs	r0, #1
 80035c4:	f004 fc04 	bl	8007dd0 <lcd_print>
 80035c8:	e020      	b.n	800360c <menu+0x2300>
			} else if(dilSecim == 1) {
 80035ca:	4b5b      	ldr	r3, [pc, #364]	; (8003738 <menu+0x242c>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d11c      	bne.n	800360c <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80035d2:	4a63      	ldr	r2, [pc, #396]	; (8003760 <menu+0x2454>)
 80035d4:	2101      	movs	r1, #1
 80035d6:	2001      	movs	r0, #1
 80035d8:	f004 fbfa 	bl	8007dd0 <lcd_print>
 80035dc:	e016      	b.n	800360c <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80035de:	4b5e      	ldr	r3, [pc, #376]	; (8003758 <menu+0x244c>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d112      	bne.n	800360c <menu+0x2300>
			if(dilSecim == 0) {
 80035e6:	4b54      	ldr	r3, [pc, #336]	; (8003738 <menu+0x242c>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d105      	bne.n	80035fa <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80035ee:	4a5d      	ldr	r2, [pc, #372]	; (8003764 <menu+0x2458>)
 80035f0:	2101      	movs	r1, #1
 80035f2:	2001      	movs	r0, #1
 80035f4:	f004 fbec 	bl	8007dd0 <lcd_print>
 80035f8:	e008      	b.n	800360c <menu+0x2300>
			} else if(dilSecim == 1) {
 80035fa:	4b4f      	ldr	r3, [pc, #316]	; (8003738 <menu+0x242c>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d104      	bne.n	800360c <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003602:	4a59      	ldr	r2, [pc, #356]	; (8003768 <menu+0x245c>)
 8003604:	2101      	movs	r1, #1
 8003606:	2001      	movs	r0, #1
 8003608:	f004 fbe2 	bl	8007dd0 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 800360c:	4b57      	ldr	r3, [pc, #348]	; (800376c <menu+0x2460>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d113      	bne.n	800363c <menu+0x2330>
			if(dilSecim == 0) {
 8003614:	4b48      	ldr	r3, [pc, #288]	; (8003738 <menu+0x242c>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d105      	bne.n	8003628 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 800361c:	4a54      	ldr	r2, [pc, #336]	; (8003770 <menu+0x2464>)
 800361e:	2101      	movs	r1, #1
 8003620:	2002      	movs	r0, #2
 8003622:	f004 fbd5 	bl	8007dd0 <lcd_print>
 8003626:	e020      	b.n	800366a <menu+0x235e>
			} else if(dilSecim == 1) {
 8003628:	4b43      	ldr	r3, [pc, #268]	; (8003738 <menu+0x242c>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d11c      	bne.n	800366a <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003630:	4a50      	ldr	r2, [pc, #320]	; (8003774 <menu+0x2468>)
 8003632:	2101      	movs	r1, #1
 8003634:	2002      	movs	r0, #2
 8003636:	f004 fbcb 	bl	8007dd0 <lcd_print>
 800363a:	e016      	b.n	800366a <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 800363c:	4b4b      	ldr	r3, [pc, #300]	; (800376c <menu+0x2460>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d112      	bne.n	800366a <menu+0x235e>
			if(dilSecim == 0) {
 8003644:	4b3c      	ldr	r3, [pc, #240]	; (8003738 <menu+0x242c>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d105      	bne.n	8003658 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 800364c:	4a4a      	ldr	r2, [pc, #296]	; (8003778 <menu+0x246c>)
 800364e:	2101      	movs	r1, #1
 8003650:	2002      	movs	r0, #2
 8003652:	f004 fbbd 	bl	8007dd0 <lcd_print>
 8003656:	e008      	b.n	800366a <menu+0x235e>
			} else if(dilSecim == 1) {
 8003658:	4b37      	ldr	r3, [pc, #220]	; (8003738 <menu+0x242c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d104      	bne.n	800366a <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003660:	4a46      	ldr	r2, [pc, #280]	; (800377c <menu+0x2470>)
 8003662:	2101      	movs	r1, #1
 8003664:	2002      	movs	r0, #2
 8003666:	f004 fbb3 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800366a:	2102      	movs	r1, #2
 800366c:	4834      	ldr	r0, [pc, #208]	; (8003740 <menu+0x2434>)
 800366e:	f005 fed5 	bl	800941c <HAL_GPIO_ReadPin>
 8003672:	4603      	mov	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d119      	bne.n	80036ac <menu+0x23a0>
 8003678:	4b32      	ldr	r3, [pc, #200]	; (8003744 <menu+0x2438>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	f083 0301 	eor.w	r3, r3, #1
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d012      	beq.n	80036ac <menu+0x23a0>
 8003686:	4b34      	ldr	r3, [pc, #208]	; (8003758 <menu+0x244c>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d10e      	bne.n	80036ac <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800368e:	4b37      	ldr	r3, [pc, #220]	; (800376c <menu+0x2460>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	3301      	adds	r3, #1
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4b35      	ldr	r3, [pc, #212]	; (800376c <menu+0x2460>)
 8003698:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800369a:	4b34      	ldr	r3, [pc, #208]	; (800376c <menu+0x2460>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d902      	bls.n	80036a8 <menu+0x239c>
				devirmeSilindirTipi = 0;
 80036a2:	4b32      	ldr	r3, [pc, #200]	; (800376c <menu+0x2460>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036a8:	f001 faa4 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80036ac:	2104      	movs	r1, #4
 80036ae:	4824      	ldr	r0, [pc, #144]	; (8003740 <menu+0x2434>)
 80036b0:	f005 feb4 	bl	800941c <HAL_GPIO_ReadPin>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d119      	bne.n	80036ee <menu+0x23e2>
 80036ba:	4b22      	ldr	r3, [pc, #136]	; (8003744 <menu+0x2438>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	f083 0301 	eor.w	r3, r3, #1
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d012      	beq.n	80036ee <menu+0x23e2>
 80036c8:	4b23      	ldr	r3, [pc, #140]	; (8003758 <menu+0x244c>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d10e      	bne.n	80036ee <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80036d0:	4b26      	ldr	r3, [pc, #152]	; (800376c <menu+0x2460>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	4b24      	ldr	r3, [pc, #144]	; (800376c <menu+0x2460>)
 80036da:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80036dc:	4b23      	ldr	r3, [pc, #140]	; (800376c <menu+0x2460>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80036e4:	4b21      	ldr	r3, [pc, #132]	; (800376c <menu+0x2460>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036ea:	f001 fa83 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ee:	2108      	movs	r1, #8
 80036f0:	4813      	ldr	r0, [pc, #76]	; (8003740 <menu+0x2434>)
 80036f2:	f005 fe93 	bl	800941c <HAL_GPIO_ReadPin>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d10d      	bne.n	8003718 <menu+0x240c>
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <menu+0x2438>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	f083 0301 	eor.w	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d006      	beq.n	8003718 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800370a:	4b18      	ldr	r3, [pc, #96]	; (800376c <menu+0x2460>)
 800370c:	781a      	ldrb	r2, [r3, #0]
 800370e:	4b0f      	ldr	r3, [pc, #60]	; (800374c <menu+0x2440>)
 8003710:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003712:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <menu+0x2444>)
 8003714:	2201      	movs	r2, #1
 8003716:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003718:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <menu+0x2448>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b15      	cmp	r3, #21
 800371e:	f040 80c2 	bne.w	80038a6 <menu+0x259a>
		if(dilSecim == 0) {
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <menu+0x242c>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d12c      	bne.n	8003784 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800372a:	4a15      	ldr	r2, [pc, #84]	; (8003780 <menu+0x2474>)
 800372c:	2101      	movs	r1, #1
 800372e:	2001      	movs	r0, #1
 8003730:	f004 fb4e 	bl	8007dd0 <lcd_print>
 8003734:	e02f      	b.n	8003796 <menu+0x248a>
 8003736:	bf00      	nop
 8003738:	20000241 	.word	0x20000241
 800373c:	0800d48c 	.word	0x0800d48c
 8003740:	40010800 	.word	0x40010800
 8003744:	2000024f 	.word	0x2000024f
 8003748:	20000231 	.word	0x20000231
 800374c:	20000118 	.word	0x20000118
 8003750:	2000024c 	.word	0x2000024c
 8003754:	20000220 	.word	0x20000220
 8003758:	2000022f 	.word	0x2000022f
 800375c:	0800d90c 	.word	0x0800d90c
 8003760:	0800d920 	.word	0x0800d920
 8003764:	0800d934 	.word	0x0800d934
 8003768:	0800d948 	.word	0x0800d948
 800376c:	20000232 	.word	0x20000232
 8003770:	0800d95c 	.word	0x0800d95c
 8003774:	0800d970 	.word	0x0800d970
 8003778:	0800d980 	.word	0x0800d980
 800377c:	0800d994 	.word	0x0800d994
 8003780:	0800d9a4 	.word	0x0800d9a4
		} else if(dilSecim == 1) {
 8003784:	4b9c      	ldr	r3, [pc, #624]	; (80039f8 <menu+0x26ec>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d104      	bne.n	8003796 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 800378c:	4a9b      	ldr	r2, [pc, #620]	; (80039fc <menu+0x26f0>)
 800378e:	2101      	movs	r1, #1
 8003790:	2001      	movs	r0, #1
 8003792:	f004 fb1d 	bl	8007dd0 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003796:	4b9a      	ldr	r3, [pc, #616]	; (8003a00 <menu+0x26f4>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d112      	bne.n	80037c4 <menu+0x24b8>
			if(dilSecim == 0) {
 800379e:	4b96      	ldr	r3, [pc, #600]	; (80039f8 <menu+0x26ec>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d104      	bne.n	80037b0 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80037a6:	4a97      	ldr	r2, [pc, #604]	; (8003a04 <menu+0x26f8>)
 80037a8:	2101      	movs	r1, #1
 80037aa:	2002      	movs	r0, #2
 80037ac:	f004 fb10 	bl	8007dd0 <lcd_print>
			}
			if(dilSecim == 1) {
 80037b0:	4b91      	ldr	r3, [pc, #580]	; (80039f8 <menu+0x26ec>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d11c      	bne.n	80037f2 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80037b8:	4a93      	ldr	r2, [pc, #588]	; (8003a08 <menu+0x26fc>)
 80037ba:	2101      	movs	r1, #1
 80037bc:	2002      	movs	r0, #2
 80037be:	f004 fb07 	bl	8007dd0 <lcd_print>
 80037c2:	e016      	b.n	80037f2 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80037c4:	4b8e      	ldr	r3, [pc, #568]	; (8003a00 <menu+0x26f4>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d112      	bne.n	80037f2 <menu+0x24e6>
			if(dilSecim == 0) {
 80037cc:	4b8a      	ldr	r3, [pc, #552]	; (80039f8 <menu+0x26ec>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d105      	bne.n	80037e0 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80037d4:	4a8d      	ldr	r2, [pc, #564]	; (8003a0c <menu+0x2700>)
 80037d6:	2101      	movs	r1, #1
 80037d8:	2002      	movs	r0, #2
 80037da:	f004 faf9 	bl	8007dd0 <lcd_print>
 80037de:	e008      	b.n	80037f2 <menu+0x24e6>
			} else if(dilSecim == 1) {
 80037e0:	4b85      	ldr	r3, [pc, #532]	; (80039f8 <menu+0x26ec>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d104      	bne.n	80037f2 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 80037e8:	4a89      	ldr	r2, [pc, #548]	; (8003a10 <menu+0x2704>)
 80037ea:	2101      	movs	r1, #1
 80037ec:	2002      	movs	r0, #2
 80037ee:	f004 faef 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037f2:	2102      	movs	r1, #2
 80037f4:	4887      	ldr	r0, [pc, #540]	; (8003a14 <menu+0x2708>)
 80037f6:	f005 fe11 	bl	800941c <HAL_GPIO_ReadPin>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d115      	bne.n	800382c <menu+0x2520>
 8003800:	4b85      	ldr	r3, [pc, #532]	; (8003a18 <menu+0x270c>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	f083 0301 	eor.w	r3, r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00e      	beq.n	800382c <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 800380e:	4b7c      	ldr	r3, [pc, #496]	; (8003a00 <menu+0x26f4>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4b7a      	ldr	r3, [pc, #488]	; (8003a00 <menu+0x26f4>)
 8003818:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800381a:	4b79      	ldr	r3, [pc, #484]	; (8003a00 <menu+0x26f4>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d902      	bls.n	8003828 <menu+0x251c>
				platformSilindirTipi = 0;
 8003822:	4b77      	ldr	r3, [pc, #476]	; (8003a00 <menu+0x26f4>)
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003828:	f001 f9e4 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800382c:	2104      	movs	r1, #4
 800382e:	4879      	ldr	r0, [pc, #484]	; (8003a14 <menu+0x2708>)
 8003830:	f005 fdf4 	bl	800941c <HAL_GPIO_ReadPin>
 8003834:	4603      	mov	r3, r0
 8003836:	2b01      	cmp	r3, #1
 8003838:	d115      	bne.n	8003866 <menu+0x255a>
 800383a:	4b77      	ldr	r3, [pc, #476]	; (8003a18 <menu+0x270c>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	f083 0301 	eor.w	r3, r3, #1
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00e      	beq.n	8003866 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003848:	4b6d      	ldr	r3, [pc, #436]	; (8003a00 <menu+0x26f4>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	3b01      	subs	r3, #1
 800384e:	b2da      	uxtb	r2, r3
 8003850:	4b6b      	ldr	r3, [pc, #428]	; (8003a00 <menu+0x26f4>)
 8003852:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003854:	4b6a      	ldr	r3, [pc, #424]	; (8003a00 <menu+0x26f4>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <menu+0x2556>
		   		platformSilindirTipi = 1;
 800385c:	4b68      	ldr	r3, [pc, #416]	; (8003a00 <menu+0x26f4>)
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003862:	f001 f9c7 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003866:	2108      	movs	r1, #8
 8003868:	486a      	ldr	r0, [pc, #424]	; (8003a14 <menu+0x2708>)
 800386a:	f005 fdd7 	bl	800941c <HAL_GPIO_ReadPin>
 800386e:	4603      	mov	r3, r0
 8003870:	2b01      	cmp	r3, #1
 8003872:	d118      	bne.n	80038a6 <menu+0x259a>
 8003874:	4b68      	ldr	r3, [pc, #416]	; (8003a18 <menu+0x270c>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	f083 0301 	eor.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d011      	beq.n	80038a6 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003882:	4b5f      	ldr	r3, [pc, #380]	; (8003a00 <menu+0x26f4>)
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	4b65      	ldr	r3, [pc, #404]	; (8003a1c <menu+0x2710>)
 8003888:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800388a:	4b5d      	ldr	r3, [pc, #372]	; (8003a00 <menu+0x26f4>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d106      	bne.n	80038a0 <menu+0x2594>
				altLimit = 1;
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <menu+0x2714>)
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003898:	4b61      	ldr	r3, [pc, #388]	; (8003a20 <menu+0x2714>)
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	4b5f      	ldr	r3, [pc, #380]	; (8003a1c <menu+0x2710>)
 800389e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80038a0:	4b60      	ldr	r3, [pc, #384]	; (8003a24 <menu+0x2718>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80038a6:	4b60      	ldr	r3, [pc, #384]	; (8003a28 <menu+0x271c>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b16      	cmp	r3, #22
 80038ac:	f040 8081 	bne.w	80039b2 <menu+0x26a6>
		if(dilSecim == 0) {
 80038b0:	4b51      	ldr	r3, [pc, #324]	; (80039f8 <menu+0x26ec>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80038b8:	4a5c      	ldr	r2, [pc, #368]	; (8003a2c <menu+0x2720>)
 80038ba:	2101      	movs	r1, #1
 80038bc:	2001      	movs	r0, #1
 80038be:	f004 fa87 	bl	8007dd0 <lcd_print>
 80038c2:	e008      	b.n	80038d6 <menu+0x25ca>
		} else if(dilSecim == 1) {
 80038c4:	4b4c      	ldr	r3, [pc, #304]	; (80039f8 <menu+0x26ec>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d104      	bne.n	80038d6 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80038cc:	4a58      	ldr	r2, [pc, #352]	; (8003a30 <menu+0x2724>)
 80038ce:	2101      	movs	r1, #1
 80038d0:	2001      	movs	r0, #1
 80038d2:	f004 fa7d 	bl	8007dd0 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80038d6:	4b48      	ldr	r3, [pc, #288]	; (80039f8 <menu+0x26ec>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d105      	bne.n	80038ea <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 80038de:	4a55      	ldr	r2, [pc, #340]	; (8003a34 <menu+0x2728>)
 80038e0:	2101      	movs	r1, #1
 80038e2:	2002      	movs	r0, #2
 80038e4:	f004 fa74 	bl	8007dd0 <lcd_print>
 80038e8:	e008      	b.n	80038fc <menu+0x25f0>
			} else if(dilSecim == 1){
 80038ea:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <menu+0x26ec>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d104      	bne.n	80038fc <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 80038f2:	4a51      	ldr	r2, [pc, #324]	; (8003a38 <menu+0x272c>)
 80038f4:	2101      	movs	r1, #1
 80038f6:	2002      	movs	r0, #2
 80038f8:	f004 fa6a 	bl	8007dd0 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 80038fc:	4b4f      	ldr	r3, [pc, #316]	; (8003a3c <menu+0x2730>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	220a      	movs	r2, #10
 8003902:	494f      	ldr	r1, [pc, #316]	; (8003a40 <menu+0x2734>)
 8003904:	4618      	mov	r0, r3
 8003906:	f008 fdb5 	bl	800c474 <itoa>
		lcd_print(2,16,snum);
 800390a:	4a4d      	ldr	r2, [pc, #308]	; (8003a40 <menu+0x2734>)
 800390c:	2110      	movs	r1, #16
 800390e:	2002      	movs	r0, #2
 8003910:	f004 fa5e 	bl	8007dd0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003914:	2102      	movs	r1, #2
 8003916:	483f      	ldr	r0, [pc, #252]	; (8003a14 <menu+0x2708>)
 8003918:	f005 fd80 	bl	800941c <HAL_GPIO_ReadPin>
 800391c:	4603      	mov	r3, r0
 800391e:	2b01      	cmp	r3, #1
 8003920:	d115      	bne.n	800394e <menu+0x2642>
 8003922:	4b3d      	ldr	r3, [pc, #244]	; (8003a18 <menu+0x270c>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	f083 0301 	eor.w	r3, r3, #1
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00e      	beq.n	800394e <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003930:	4b42      	ldr	r3, [pc, #264]	; (8003a3c <menu+0x2730>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	3301      	adds	r3, #1
 8003936:	b2da      	uxtb	r2, r3
 8003938:	4b40      	ldr	r3, [pc, #256]	; (8003a3c <menu+0x2730>)
 800393a:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 800393c:	4b3f      	ldr	r3, [pc, #252]	; (8003a3c <menu+0x2730>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b05      	cmp	r3, #5
 8003942:	d902      	bls.n	800394a <menu+0x263e>
				yukariValfTmr = 0;
 8003944:	4b3d      	ldr	r3, [pc, #244]	; (8003a3c <menu+0x2730>)
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800394a:	f001 f953 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800394e:	2104      	movs	r1, #4
 8003950:	4830      	ldr	r0, [pc, #192]	; (8003a14 <menu+0x2708>)
 8003952:	f005 fd63 	bl	800941c <HAL_GPIO_ReadPin>
 8003956:	4603      	mov	r3, r0
 8003958:	2b01      	cmp	r3, #1
 800395a:	d115      	bne.n	8003988 <menu+0x267c>
 800395c:	4b2e      	ldr	r3, [pc, #184]	; (8003a18 <menu+0x270c>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	f083 0301 	eor.w	r3, r3, #1
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00e      	beq.n	8003988 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 800396a:	4b34      	ldr	r3, [pc, #208]	; (8003a3c <menu+0x2730>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	3b01      	subs	r3, #1
 8003970:	b2da      	uxtb	r2, r3
 8003972:	4b32      	ldr	r3, [pc, #200]	; (8003a3c <menu+0x2730>)
 8003974:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003976:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <menu+0x2730>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b06      	cmp	r3, #6
 800397c:	d902      	bls.n	8003984 <menu+0x2678>
		   		yukariValfTmr = 5;
 800397e:	4b2f      	ldr	r3, [pc, #188]	; (8003a3c <menu+0x2730>)
 8003980:	2205      	movs	r2, #5
 8003982:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003984:	f001 f936 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003988:	2108      	movs	r1, #8
 800398a:	4822      	ldr	r0, [pc, #136]	; (8003a14 <menu+0x2708>)
 800398c:	f005 fd46 	bl	800941c <HAL_GPIO_ReadPin>
 8003990:	4603      	mov	r3, r0
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10d      	bne.n	80039b2 <menu+0x26a6>
 8003996:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <menu+0x270c>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	f083 0301 	eor.w	r3, r3, #1
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d006      	beq.n	80039b2 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 80039a4:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <menu+0x2730>)
 80039a6:	781a      	ldrb	r2, [r3, #0]
 80039a8:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <menu+0x2710>)
 80039aa:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80039ac:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <menu+0x2718>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <menu+0x271c>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b17      	cmp	r3, #23
 80039b8:	f040 80ac 	bne.w	8003b14 <menu+0x2808>
		if(dilSecim == 0) {
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <menu+0x26ec>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d105      	bne.n	80039d0 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80039c4:	4a1f      	ldr	r2, [pc, #124]	; (8003a44 <menu+0x2738>)
 80039c6:	2101      	movs	r1, #1
 80039c8:	2001      	movs	r0, #1
 80039ca:	f004 fa01 	bl	8007dd0 <lcd_print>
 80039ce:	e008      	b.n	80039e2 <menu+0x26d6>
		} else if(dilSecim == 1) {
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <menu+0x26ec>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d104      	bne.n	80039e2 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 80039d8:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <menu+0x273c>)
 80039da:	2101      	movs	r1, #1
 80039dc:	2001      	movs	r0, #1
 80039de:	f004 f9f7 	bl	8007dd0 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <menu+0x26ec>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d130      	bne.n	8003a4c <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 80039ea:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <menu+0x2728>)
 80039ec:	2101      	movs	r1, #1
 80039ee:	2002      	movs	r0, #2
 80039f0:	f004 f9ee 	bl	8007dd0 <lcd_print>
 80039f4:	e033      	b.n	8003a5e <menu+0x2752>
 80039f6:	bf00      	nop
 80039f8:	20000241 	.word	0x20000241
 80039fc:	0800d9b8 	.word	0x0800d9b8
 8003a00:	20000233 	.word	0x20000233
 8003a04:	0800d95c 	.word	0x0800d95c
 8003a08:	0800d970 	.word	0x0800d970
 8003a0c:	0800d980 	.word	0x0800d980
 8003a10:	0800d994 	.word	0x0800d994
 8003a14:	40010800 	.word	0x40010800
 8003a18:	2000024f 	.word	0x2000024f
 8003a1c:	20000118 	.word	0x20000118
 8003a20:	20000226 	.word	0x20000226
 8003a24:	2000024c 	.word	0x2000024c
 8003a28:	20000220 	.word	0x20000220
 8003a2c:	0800d9c8 	.word	0x0800d9c8
 8003a30:	0800d9dc 	.word	0x0800d9dc
 8003a34:	0800d67c 	.word	0x0800d67c
 8003a38:	0800d9f0 	.word	0x0800d9f0
 8003a3c:	20000234 	.word	0x20000234
 8003a40:	20000188 	.word	0x20000188
 8003a44:	0800da00 	.word	0x0800da00
 8003a48:	0800da14 	.word	0x0800da14
			} else if(dilSecim == 1) {
 8003a4c:	4b98      	ldr	r3, [pc, #608]	; (8003cb0 <menu+0x29a4>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d104      	bne.n	8003a5e <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003a54:	4a97      	ldr	r2, [pc, #604]	; (8003cb4 <menu+0x29a8>)
 8003a56:	2101      	movs	r1, #1
 8003a58:	2002      	movs	r0, #2
 8003a5a:	f004 f9b9 	bl	8007dd0 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003a5e:	4b96      	ldr	r3, [pc, #600]	; (8003cb8 <menu+0x29ac>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	220a      	movs	r2, #10
 8003a64:	4995      	ldr	r1, [pc, #596]	; (8003cbc <menu+0x29b0>)
 8003a66:	4618      	mov	r0, r3
 8003a68:	f008 fd04 	bl	800c474 <itoa>
		lcd_print(2,16,snum);
 8003a6c:	4a93      	ldr	r2, [pc, #588]	; (8003cbc <menu+0x29b0>)
 8003a6e:	2110      	movs	r1, #16
 8003a70:	2002      	movs	r0, #2
 8003a72:	f004 f9ad 	bl	8007dd0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a76:	2102      	movs	r1, #2
 8003a78:	4891      	ldr	r0, [pc, #580]	; (8003cc0 <menu+0x29b4>)
 8003a7a:	f005 fccf 	bl	800941c <HAL_GPIO_ReadPin>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d115      	bne.n	8003ab0 <menu+0x27a4>
 8003a84:	4b8f      	ldr	r3, [pc, #572]	; (8003cc4 <menu+0x29b8>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	f083 0301 	eor.w	r3, r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00e      	beq.n	8003ab0 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003a92:	4b89      	ldr	r3, [pc, #548]	; (8003cb8 <menu+0x29ac>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	3301      	adds	r3, #1
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4b87      	ldr	r3, [pc, #540]	; (8003cb8 <menu+0x29ac>)
 8003a9c:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003a9e:	4b86      	ldr	r3, [pc, #536]	; (8003cb8 <menu+0x29ac>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b05      	cmp	r3, #5
 8003aa4:	d902      	bls.n	8003aac <menu+0x27a0>
				asagiValfTmr = 0;
 8003aa6:	4b84      	ldr	r3, [pc, #528]	; (8003cb8 <menu+0x29ac>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003aac:	f001 f8a2 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ab0:	2104      	movs	r1, #4
 8003ab2:	4883      	ldr	r0, [pc, #524]	; (8003cc0 <menu+0x29b4>)
 8003ab4:	f005 fcb2 	bl	800941c <HAL_GPIO_ReadPin>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d115      	bne.n	8003aea <menu+0x27de>
 8003abe:	4b81      	ldr	r3, [pc, #516]	; (8003cc4 <menu+0x29b8>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	f083 0301 	eor.w	r3, r3, #1
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00e      	beq.n	8003aea <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003acc:	4b7a      	ldr	r3, [pc, #488]	; (8003cb8 <menu+0x29ac>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	4b78      	ldr	r3, [pc, #480]	; (8003cb8 <menu+0x29ac>)
 8003ad6:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003ad8:	4b77      	ldr	r3, [pc, #476]	; (8003cb8 <menu+0x29ac>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b06      	cmp	r3, #6
 8003ade:	d902      	bls.n	8003ae6 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003ae0:	4b75      	ldr	r3, [pc, #468]	; (8003cb8 <menu+0x29ac>)
 8003ae2:	2205      	movs	r2, #5
 8003ae4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ae6:	f001 f885 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aea:	2108      	movs	r1, #8
 8003aec:	4874      	ldr	r0, [pc, #464]	; (8003cc0 <menu+0x29b4>)
 8003aee:	f005 fc95 	bl	800941c <HAL_GPIO_ReadPin>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d10d      	bne.n	8003b14 <menu+0x2808>
 8003af8:	4b72      	ldr	r3, [pc, #456]	; (8003cc4 <menu+0x29b8>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	f083 0301 	eor.w	r3, r3, #1
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d006      	beq.n	8003b14 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003b06:	4b6c      	ldr	r3, [pc, #432]	; (8003cb8 <menu+0x29ac>)
 8003b08:	781a      	ldrb	r2, [r3, #0]
 8003b0a:	4b6f      	ldr	r3, [pc, #444]	; (8003cc8 <menu+0x29bc>)
 8003b0c:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003b0e:	4b6f      	ldr	r3, [pc, #444]	; (8003ccc <menu+0x29c0>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003b14:	4b6e      	ldr	r3, [pc, #440]	; (8003cd0 <menu+0x29c4>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b18      	cmp	r3, #24
 8003b1a:	f040 809d 	bne.w	8003c58 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003b1e:	4b6d      	ldr	r3, [pc, #436]	; (8003cd4 <menu+0x29c8>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d113      	bne.n	8003b4e <menu+0x2842>
			if(dilSecim == 0) {
 8003b26:	4b62      	ldr	r3, [pc, #392]	; (8003cb0 <menu+0x29a4>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003b2e:	4a6a      	ldr	r2, [pc, #424]	; (8003cd8 <menu+0x29cc>)
 8003b30:	2101      	movs	r1, #1
 8003b32:	2001      	movs	r0, #1
 8003b34:	f004 f94c 	bl	8007dd0 <lcd_print>
 8003b38:	e020      	b.n	8003b7c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003b3a:	4b5d      	ldr	r3, [pc, #372]	; (8003cb0 <menu+0x29a4>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d11c      	bne.n	8003b7c <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003b42:	4a66      	ldr	r2, [pc, #408]	; (8003cdc <menu+0x29d0>)
 8003b44:	2101      	movs	r1, #1
 8003b46:	2001      	movs	r0, #1
 8003b48:	f004 f942 	bl	8007dd0 <lcd_print>
 8003b4c:	e016      	b.n	8003b7c <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b4e:	4b61      	ldr	r3, [pc, #388]	; (8003cd4 <menu+0x29c8>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d112      	bne.n	8003b7c <menu+0x2870>
			if(dilSecim == 0) {
 8003b56:	4b56      	ldr	r3, [pc, #344]	; (8003cb0 <menu+0x29a4>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d105      	bne.n	8003b6a <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003b5e:	4a60      	ldr	r2, [pc, #384]	; (8003ce0 <menu+0x29d4>)
 8003b60:	2101      	movs	r1, #1
 8003b62:	2001      	movs	r0, #1
 8003b64:	f004 f934 	bl	8007dd0 <lcd_print>
 8003b68:	e008      	b.n	8003b7c <menu+0x2870>
			} else if(dilSecim == 1) {
 8003b6a:	4b51      	ldr	r3, [pc, #324]	; (8003cb0 <menu+0x29a4>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d104      	bne.n	8003b7c <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003b72:	4a5c      	ldr	r2, [pc, #368]	; (8003ce4 <menu+0x29d8>)
 8003b74:	2101      	movs	r1, #1
 8003b76:	2001      	movs	r0, #1
 8003b78:	f004 f92a 	bl	8007dd0 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003b7c:	4b4c      	ldr	r3, [pc, #304]	; (8003cb0 <menu+0x29a4>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d105      	bne.n	8003b90 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b84:	4a58      	ldr	r2, [pc, #352]	; (8003ce8 <menu+0x29dc>)
 8003b86:	2101      	movs	r1, #1
 8003b88:	2002      	movs	r0, #2
 8003b8a:	f004 f921 	bl	8007dd0 <lcd_print>
 8003b8e:	e008      	b.n	8003ba2 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003b90:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <menu+0x29a4>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d104      	bne.n	8003ba2 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003b98:	4a46      	ldr	r2, [pc, #280]	; (8003cb4 <menu+0x29a8>)
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	2002      	movs	r0, #2
 8003b9e:	f004 f917 	bl	8007dd0 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003ba2:	4b52      	ldr	r3, [pc, #328]	; (8003cec <menu+0x29e0>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	220a      	movs	r2, #10
 8003ba8:	4944      	ldr	r1, [pc, #272]	; (8003cbc <menu+0x29b0>)
 8003baa:	4618      	mov	r0, r3
 8003bac:	f008 fc62 	bl	800c474 <itoa>
		lcd_print(2, 16, snum);
 8003bb0:	4a42      	ldr	r2, [pc, #264]	; (8003cbc <menu+0x29b0>)
 8003bb2:	2110      	movs	r1, #16
 8003bb4:	2002      	movs	r0, #2
 8003bb6:	f004 f90b 	bl	8007dd0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bba:	2102      	movs	r1, #2
 8003bbc:	4840      	ldr	r0, [pc, #256]	; (8003cc0 <menu+0x29b4>)
 8003bbe:	f005 fc2d 	bl	800941c <HAL_GPIO_ReadPin>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d115      	bne.n	8003bf4 <menu+0x28e8>
 8003bc8:	4b3e      	ldr	r3, [pc, #248]	; (8003cc4 <menu+0x29b8>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	f083 0301 	eor.w	r3, r3, #1
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00e      	beq.n	8003bf4 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003bd6:	4b45      	ldr	r3, [pc, #276]	; (8003cec <menu+0x29e0>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4b43      	ldr	r3, [pc, #268]	; (8003cec <menu+0x29e0>)
 8003be0:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003be2:	4b42      	ldr	r3, [pc, #264]	; (8003cec <menu+0x29e0>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	d902      	bls.n	8003bf0 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003bea:	4b40      	ldr	r3, [pc, #256]	; (8003cec <menu+0x29e0>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003bf0:	f001 f800 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bf4:	2104      	movs	r1, #4
 8003bf6:	4832      	ldr	r0, [pc, #200]	; (8003cc0 <menu+0x29b4>)
 8003bf8:	f005 fc10 	bl	800941c <HAL_GPIO_ReadPin>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d115      	bne.n	8003c2e <menu+0x2922>
 8003c02:	4b30      	ldr	r3, [pc, #192]	; (8003cc4 <menu+0x29b8>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	f083 0301 	eor.w	r3, r3, #1
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003c10:	4b36      	ldr	r3, [pc, #216]	; (8003cec <menu+0x29e0>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	4b34      	ldr	r3, [pc, #208]	; (8003cec <menu+0x29e0>)
 8003c1a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003c1c:	4b33      	ldr	r3, [pc, #204]	; (8003cec <menu+0x29e0>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b06      	cmp	r3, #6
 8003c22:	d902      	bls.n	8003c2a <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003c24:	4b31      	ldr	r3, [pc, #196]	; (8003cec <menu+0x29e0>)
 8003c26:	2205      	movs	r2, #5
 8003c28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c2a:	f000 ffe3 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c2e:	2108      	movs	r1, #8
 8003c30:	4823      	ldr	r0, [pc, #140]	; (8003cc0 <menu+0x29b4>)
 8003c32:	f005 fbf3 	bl	800941c <HAL_GPIO_ReadPin>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d10d      	bne.n	8003c58 <menu+0x294c>
 8003c3c:	4b21      	ldr	r3, [pc, #132]	; (8003cc4 <menu+0x29b8>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	f083 0301 	eor.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d006      	beq.n	8003c58 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003c4a:	4b28      	ldr	r3, [pc, #160]	; (8003cec <menu+0x29e0>)
 8003c4c:	781a      	ldrb	r2, [r3, #0]
 8003c4e:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <menu+0x29bc>)
 8003c50:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003c52:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <menu+0x29c0>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003c58:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <menu+0x29c4>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b19      	cmp	r3, #25
 8003c5e:	f040 80c4 	bne.w	8003dea <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003c62:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <menu+0x29c8>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d113      	bne.n	8003c92 <menu+0x2986>
			if(dilSecim == 0) {
 8003c6a:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <menu+0x29a4>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d105      	bne.n	8003c7e <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003c72:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <menu+0x29e4>)
 8003c74:	2101      	movs	r1, #1
 8003c76:	2001      	movs	r0, #1
 8003c78:	f004 f8aa 	bl	8007dd0 <lcd_print>
 8003c7c:	e047      	b.n	8003d0e <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <menu+0x29a4>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d143      	bne.n	8003d0e <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003c86:	4a1b      	ldr	r2, [pc, #108]	; (8003cf4 <menu+0x29e8>)
 8003c88:	2101      	movs	r1, #1
 8003c8a:	2001      	movs	r0, #1
 8003c8c:	f004 f8a0 	bl	8007dd0 <lcd_print>
 8003c90:	e03d      	b.n	8003d0e <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <menu+0x29c8>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d139      	bne.n	8003d0e <menu+0x2a02>
			if(dilSecim == 0) {
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <menu+0x29a4>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d12c      	bne.n	8003cfc <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003ca2:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <menu+0x29ec>)
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	2001      	movs	r0, #1
 8003ca8:	f004 f892 	bl	8007dd0 <lcd_print>
 8003cac:	e02f      	b.n	8003d0e <menu+0x2a02>
 8003cae:	bf00      	nop
 8003cb0:	20000241 	.word	0x20000241
 8003cb4:	0800d9f0 	.word	0x0800d9f0
 8003cb8:	20000235 	.word	0x20000235
 8003cbc:	20000188 	.word	0x20000188
 8003cc0:	40010800 	.word	0x40010800
 8003cc4:	2000024f 	.word	0x2000024f
 8003cc8:	20000118 	.word	0x20000118
 8003ccc:	2000024c 	.word	0x2000024c
 8003cd0:	20000220 	.word	0x20000220
 8003cd4:	2000022f 	.word	0x2000022f
 8003cd8:	0800da28 	.word	0x0800da28
 8003cdc:	0800da3c 	.word	0x0800da3c
 8003ce0:	0800da50 	.word	0x0800da50
 8003ce4:	0800da64 	.word	0x0800da64
 8003ce8:	0800d67c 	.word	0x0800d67c
 8003cec:	20000236 	.word	0x20000236
 8003cf0:	0800da78 	.word	0x0800da78
 8003cf4:	0800da8c 	.word	0x0800da8c
 8003cf8:	0800daa0 	.word	0x0800daa0
			} else if(dilSecim == 1) {
 8003cfc:	4b73      	ldr	r3, [pc, #460]	; (8003ecc <menu+0x2bc0>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d104      	bne.n	8003d0e <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003d04:	4a72      	ldr	r2, [pc, #456]	; (8003ed0 <menu+0x2bc4>)
 8003d06:	2101      	movs	r1, #1
 8003d08:	2001      	movs	r0, #1
 8003d0a:	f004 f861 	bl	8007dd0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003d0e:	4b6f      	ldr	r3, [pc, #444]	; (8003ecc <menu+0x2bc0>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d105      	bne.n	8003d22 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d16:	4a6f      	ldr	r2, [pc, #444]	; (8003ed4 <menu+0x2bc8>)
 8003d18:	2101      	movs	r1, #1
 8003d1a:	2002      	movs	r0, #2
 8003d1c:	f004 f858 	bl	8007dd0 <lcd_print>
 8003d20:	e008      	b.n	8003d34 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003d22:	4b6a      	ldr	r3, [pc, #424]	; (8003ecc <menu+0x2bc0>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d104      	bne.n	8003d34 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003d2a:	4a6b      	ldr	r2, [pc, #428]	; (8003ed8 <menu+0x2bcc>)
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	2002      	movs	r0, #2
 8003d30:	f004 f84e 	bl	8007dd0 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003d34:	4b69      	ldr	r3, [pc, #420]	; (8003edc <menu+0x2bd0>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	220a      	movs	r2, #10
 8003d3a:	4969      	ldr	r1, [pc, #420]	; (8003ee0 <menu+0x2bd4>)
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f008 fb99 	bl	800c474 <itoa>
		lcd_print(2,16,snum);
 8003d42:	4a67      	ldr	r2, [pc, #412]	; (8003ee0 <menu+0x2bd4>)
 8003d44:	2110      	movs	r1, #16
 8003d46:	2002      	movs	r0, #2
 8003d48:	f004 f842 	bl	8007dd0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	4865      	ldr	r0, [pc, #404]	; (8003ee4 <menu+0x2bd8>)
 8003d50:	f005 fb64 	bl	800941c <HAL_GPIO_ReadPin>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d115      	bne.n	8003d86 <menu+0x2a7a>
 8003d5a:	4b63      	ldr	r3, [pc, #396]	; (8003ee8 <menu+0x2bdc>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	f083 0301 	eor.w	r3, r3, #1
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00e      	beq.n	8003d86 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003d68:	4b5c      	ldr	r3, [pc, #368]	; (8003edc <menu+0x2bd0>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	4b5a      	ldr	r3, [pc, #360]	; (8003edc <menu+0x2bd0>)
 8003d72:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003d74:	4b59      	ldr	r3, [pc, #356]	; (8003edc <menu+0x2bd0>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d902      	bls.n	8003d82 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003d7c:	4b57      	ldr	r3, [pc, #348]	; (8003edc <menu+0x2bd0>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d82:	f000 ff37 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d86:	2104      	movs	r1, #4
 8003d88:	4856      	ldr	r0, [pc, #344]	; (8003ee4 <menu+0x2bd8>)
 8003d8a:	f005 fb47 	bl	800941c <HAL_GPIO_ReadPin>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d115      	bne.n	8003dc0 <menu+0x2ab4>
 8003d94:	4b54      	ldr	r3, [pc, #336]	; (8003ee8 <menu+0x2bdc>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	f083 0301 	eor.w	r3, r3, #1
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00e      	beq.n	8003dc0 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003da2:	4b4e      	ldr	r3, [pc, #312]	; (8003edc <menu+0x2bd0>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	4b4c      	ldr	r3, [pc, #304]	; (8003edc <menu+0x2bd0>)
 8003dac:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003dae:	4b4b      	ldr	r3, [pc, #300]	; (8003edc <menu+0x2bd0>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b06      	cmp	r3, #6
 8003db4:	d902      	bls.n	8003dbc <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003db6:	4b49      	ldr	r3, [pc, #292]	; (8003edc <menu+0x2bd0>)
 8003db8:	2205      	movs	r2, #5
 8003dba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003dbc:	f000 ff1a 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dc0:	2108      	movs	r1, #8
 8003dc2:	4848      	ldr	r0, [pc, #288]	; (8003ee4 <menu+0x2bd8>)
 8003dc4:	f005 fb2a 	bl	800941c <HAL_GPIO_ReadPin>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d10d      	bne.n	8003dea <menu+0x2ade>
 8003dce:	4b46      	ldr	r3, [pc, #280]	; (8003ee8 <menu+0x2bdc>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	f083 0301 	eor.w	r3, r3, #1
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d006      	beq.n	8003dea <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003ddc:	4b3f      	ldr	r3, [pc, #252]	; (8003edc <menu+0x2bd0>)
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	4b42      	ldr	r3, [pc, #264]	; (8003eec <menu+0x2be0>)
 8003de2:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003de4:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <menu+0x2be4>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003dea:	4b42      	ldr	r3, [pc, #264]	; (8003ef4 <menu+0x2be8>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b1a      	cmp	r3, #26
 8003df0:	f040 80ec 	bne.w	8003fcc <menu+0x2cc0>
		if(dilSecim == 0) {
 8003df4:	4b35      	ldr	r3, [pc, #212]	; (8003ecc <menu+0x2bc0>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d105      	bne.n	8003e08 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003dfc:	4a3e      	ldr	r2, [pc, #248]	; (8003ef8 <menu+0x2bec>)
 8003dfe:	2101      	movs	r1, #1
 8003e00:	2001      	movs	r0, #1
 8003e02:	f003 ffe5 	bl	8007dd0 <lcd_print>
 8003e06:	e008      	b.n	8003e1a <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003e08:	4b30      	ldr	r3, [pc, #192]	; (8003ecc <menu+0x2bc0>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d104      	bne.n	8003e1a <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003e10:	4a3a      	ldr	r2, [pc, #232]	; (8003efc <menu+0x2bf0>)
 8003e12:	2101      	movs	r1, #1
 8003e14:	2001      	movs	r0, #1
 8003e16:	f003 ffdb 	bl	8007dd0 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003e1a:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <menu+0x2bf4>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b63      	cmp	r3, #99	; 0x63
 8003e20:	d91e      	bls.n	8003e60 <menu+0x2b54>
			if(dilSecim == 0) {
 8003e22:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <menu+0x2bc0>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d104      	bne.n	8003e34 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e2a:	4a2a      	ldr	r2, [pc, #168]	; (8003ed4 <menu+0x2bc8>)
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	2002      	movs	r0, #2
 8003e30:	f003 ffce 	bl	8007dd0 <lcd_print>
			}
			if(dilSecim == 1) {
 8003e34:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <menu+0x2bc0>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d104      	bne.n	8003e46 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003e3c:	4a26      	ldr	r2, [pc, #152]	; (8003ed8 <menu+0x2bcc>)
 8003e3e:	2101      	movs	r1, #1
 8003e40:	2002      	movs	r0, #2
 8003e42:	f003 ffc5 	bl	8007dd0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e46:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <menu+0x2bf4>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	220a      	movs	r2, #10
 8003e4c:	4924      	ldr	r1, [pc, #144]	; (8003ee0 <menu+0x2bd4>)
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f008 fb10 	bl	800c474 <itoa>
			lcd_print(2,14,snum);
 8003e54:	4a22      	ldr	r2, [pc, #136]	; (8003ee0 <menu+0x2bd4>)
 8003e56:	210e      	movs	r1, #14
 8003e58:	2002      	movs	r0, #2
 8003e5a:	f003 ffb9 	bl	8007dd0 <lcd_print>
 8003e5e:	e066      	b.n	8003f2e <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003e60:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <menu+0x2bf4>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b09      	cmp	r3, #9
 8003e66:	d923      	bls.n	8003eb0 <menu+0x2ba4>
 8003e68:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <menu+0x2bf4>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b63      	cmp	r3, #99	; 0x63
 8003e6e:	d81f      	bhi.n	8003eb0 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003e70:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <menu+0x2bc0>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e78:	4a16      	ldr	r2, [pc, #88]	; (8003ed4 <menu+0x2bc8>)
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	2002      	movs	r0, #2
 8003e7e:	f003 ffa7 	bl	8007dd0 <lcd_print>
 8003e82:	e008      	b.n	8003e96 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003e84:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <menu+0x2bc0>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d104      	bne.n	8003e96 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003e8c:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <menu+0x2bcc>)
 8003e8e:	2101      	movs	r1, #1
 8003e90:	2002      	movs	r0, #2
 8003e92:	f003 ff9d 	bl	8007dd0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e96:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <menu+0x2bf4>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	220a      	movs	r2, #10
 8003e9c:	4910      	ldr	r1, [pc, #64]	; (8003ee0 <menu+0x2bd4>)
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f008 fae8 	bl	800c474 <itoa>
			lcd_print(2, 15, snum);
 8003ea4:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <menu+0x2bd4>)
 8003ea6:	210f      	movs	r1, #15
 8003ea8:	2002      	movs	r0, #2
 8003eaa:	f003 ff91 	bl	8007dd0 <lcd_print>
 8003eae:	e03e      	b.n	8003f2e <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <menu+0x2bf4>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b09      	cmp	r3, #9
 8003eb6:	d83a      	bhi.n	8003f2e <menu+0x2c22>
			if(dilSecim == 0) {
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <menu+0x2bc0>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d121      	bne.n	8003f04 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ec0:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <menu+0x2bc8>)
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	2002      	movs	r0, #2
 8003ec6:	f003 ff83 	bl	8007dd0 <lcd_print>
 8003eca:	e024      	b.n	8003f16 <menu+0x2c0a>
 8003ecc:	20000241 	.word	0x20000241
 8003ed0:	0800dab4 	.word	0x0800dab4
 8003ed4:	0800d67c 	.word	0x0800d67c
 8003ed8:	0800d9f0 	.word	0x0800d9f0
 8003edc:	20000237 	.word	0x20000237
 8003ee0:	20000188 	.word	0x20000188
 8003ee4:	40010800 	.word	0x40010800
 8003ee8:	2000024f 	.word	0x2000024f
 8003eec:	20000118 	.word	0x20000118
 8003ef0:	2000024c 	.word	0x2000024c
 8003ef4:	20000220 	.word	0x20000220
 8003ef8:	0800dac8 	.word	0x0800dac8
 8003efc:	0800dadc 	.word	0x0800dadc
 8003f00:	20000238 	.word	0x20000238
			} else if(dilSecim == 1) {
 8003f04:	4b8f      	ldr	r3, [pc, #572]	; (8004144 <menu+0x2e38>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d104      	bne.n	8003f16 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003f0c:	4a8e      	ldr	r2, [pc, #568]	; (8004148 <menu+0x2e3c>)
 8003f0e:	2101      	movs	r1, #1
 8003f10:	2002      	movs	r0, #2
 8003f12:	f003 ff5d 	bl	8007dd0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f16:	4b8d      	ldr	r3, [pc, #564]	; (800414c <menu+0x2e40>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	220a      	movs	r2, #10
 8003f1c:	498c      	ldr	r1, [pc, #560]	; (8004150 <menu+0x2e44>)
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f008 faa8 	bl	800c474 <itoa>
			lcd_print(2, 16, snum);
 8003f24:	4a8a      	ldr	r2, [pc, #552]	; (8004150 <menu+0x2e44>)
 8003f26:	2110      	movs	r1, #16
 8003f28:	2002      	movs	r0, #2
 8003f2a:	f003 ff51 	bl	8007dd0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f2e:	2102      	movs	r1, #2
 8003f30:	4888      	ldr	r0, [pc, #544]	; (8004154 <menu+0x2e48>)
 8003f32:	f005 fa73 	bl	800941c <HAL_GPIO_ReadPin>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d115      	bne.n	8003f68 <menu+0x2c5c>
 8003f3c:	4b86      	ldr	r3, [pc, #536]	; (8004158 <menu+0x2e4c>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	f083 0301 	eor.w	r3, r3, #1
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00e      	beq.n	8003f68 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003f4a:	4b80      	ldr	r3, [pc, #512]	; (800414c <menu+0x2e40>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	4b7e      	ldr	r3, [pc, #504]	; (800414c <menu+0x2e40>)
 8003f54:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003f56:	4b7d      	ldr	r3, [pc, #500]	; (800414c <menu+0x2e40>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2bb4      	cmp	r3, #180	; 0xb4
 8003f5c:	d902      	bls.n	8003f64 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003f5e:	4b7b      	ldr	r3, [pc, #492]	; (800414c <menu+0x2e40>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f64:	f000 fe46 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f68:	2104      	movs	r1, #4
 8003f6a:	487a      	ldr	r0, [pc, #488]	; (8004154 <menu+0x2e48>)
 8003f6c:	f005 fa56 	bl	800941c <HAL_GPIO_ReadPin>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d115      	bne.n	8003fa2 <menu+0x2c96>
 8003f76:	4b78      	ldr	r3, [pc, #480]	; (8004158 <menu+0x2e4c>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	f083 0301 	eor.w	r3, r3, #1
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00e      	beq.n	8003fa2 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003f84:	4b71      	ldr	r3, [pc, #452]	; (800414c <menu+0x2e40>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	4b6f      	ldr	r3, [pc, #444]	; (800414c <menu+0x2e40>)
 8003f8e:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003f90:	4b6e      	ldr	r3, [pc, #440]	; (800414c <menu+0x2e40>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2bb5      	cmp	r3, #181	; 0xb5
 8003f96:	d902      	bls.n	8003f9e <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003f98:	4b6c      	ldr	r3, [pc, #432]	; (800414c <menu+0x2e40>)
 8003f9a:	22b4      	movs	r2, #180	; 0xb4
 8003f9c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f9e:	f000 fe29 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fa2:	2108      	movs	r1, #8
 8003fa4:	486b      	ldr	r0, [pc, #428]	; (8004154 <menu+0x2e48>)
 8003fa6:	f005 fa39 	bl	800941c <HAL_GPIO_ReadPin>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d10d      	bne.n	8003fcc <menu+0x2cc0>
 8003fb0:	4b69      	ldr	r3, [pc, #420]	; (8004158 <menu+0x2e4c>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	f083 0301 	eor.w	r3, r3, #1
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d006      	beq.n	8003fcc <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003fbe:	4b63      	ldr	r3, [pc, #396]	; (800414c <menu+0x2e40>)
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	4b66      	ldr	r3, [pc, #408]	; (800415c <menu+0x2e50>)
 8003fc4:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003fc6:	4b66      	ldr	r3, [pc, #408]	; (8004160 <menu+0x2e54>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003fcc:	4b65      	ldr	r3, [pc, #404]	; (8004164 <menu+0x2e58>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b1b      	cmp	r3, #27
 8003fd2:	f040 8083 	bne.w	80040dc <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003fd6:	4a64      	ldr	r2, [pc, #400]	; (8004168 <menu+0x2e5c>)
 8003fd8:	2101      	movs	r1, #1
 8003fda:	2001      	movs	r0, #1
 8003fdc:	f003 fef8 	bl	8007dd0 <lcd_print>

		if(buzzer == 0) {
 8003fe0:	4b62      	ldr	r3, [pc, #392]	; (800416c <menu+0x2e60>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d113      	bne.n	8004010 <menu+0x2d04>
			if(dilSecim == 0) {
 8003fe8:	4b56      	ldr	r3, [pc, #344]	; (8004144 <menu+0x2e38>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d105      	bne.n	8003ffc <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003ff0:	4a5f      	ldr	r2, [pc, #380]	; (8004170 <menu+0x2e64>)
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	2002      	movs	r0, #2
 8003ff6:	f003 feeb 	bl	8007dd0 <lcd_print>
 8003ffa:	e020      	b.n	800403e <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003ffc:	4b51      	ldr	r3, [pc, #324]	; (8004144 <menu+0x2e38>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d11c      	bne.n	800403e <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8004004:	4a5b      	ldr	r2, [pc, #364]	; (8004174 <menu+0x2e68>)
 8004006:	2101      	movs	r1, #1
 8004008:	2002      	movs	r0, #2
 800400a:	f003 fee1 	bl	8007dd0 <lcd_print>
 800400e:	e016      	b.n	800403e <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8004010:	4b56      	ldr	r3, [pc, #344]	; (800416c <menu+0x2e60>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d112      	bne.n	800403e <menu+0x2d32>
			if(dilSecim == 0) {
 8004018:	4b4a      	ldr	r3, [pc, #296]	; (8004144 <menu+0x2e38>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d105      	bne.n	800402c <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004020:	4a55      	ldr	r2, [pc, #340]	; (8004178 <menu+0x2e6c>)
 8004022:	2101      	movs	r1, #1
 8004024:	2002      	movs	r0, #2
 8004026:	f003 fed3 	bl	8007dd0 <lcd_print>
 800402a:	e008      	b.n	800403e <menu+0x2d32>
			} else if(dilSecim == 1) {
 800402c:	4b45      	ldr	r3, [pc, #276]	; (8004144 <menu+0x2e38>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d104      	bne.n	800403e <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8004034:	4a51      	ldr	r2, [pc, #324]	; (800417c <menu+0x2e70>)
 8004036:	2101      	movs	r1, #1
 8004038:	2002      	movs	r0, #2
 800403a:	f003 fec9 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800403e:	2102      	movs	r1, #2
 8004040:	4844      	ldr	r0, [pc, #272]	; (8004154 <menu+0x2e48>)
 8004042:	f005 f9eb 	bl	800941c <HAL_GPIO_ReadPin>
 8004046:	4603      	mov	r3, r0
 8004048:	2b01      	cmp	r3, #1
 800404a:	d115      	bne.n	8004078 <menu+0x2d6c>
 800404c:	4b42      	ldr	r3, [pc, #264]	; (8004158 <menu+0x2e4c>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	f083 0301 	eor.w	r3, r3, #1
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00e      	beq.n	8004078 <menu+0x2d6c>
			buzzer = buzzer + 1;
 800405a:	4b44      	ldr	r3, [pc, #272]	; (800416c <menu+0x2e60>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	3301      	adds	r3, #1
 8004060:	b2da      	uxtb	r2, r3
 8004062:	4b42      	ldr	r3, [pc, #264]	; (800416c <menu+0x2e60>)
 8004064:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8004066:	4b41      	ldr	r3, [pc, #260]	; (800416c <menu+0x2e60>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d902      	bls.n	8004074 <menu+0x2d68>
				buzzer = 0;
 800406e:	4b3f      	ldr	r3, [pc, #252]	; (800416c <menu+0x2e60>)
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004074:	f000 fdbe 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004078:	2104      	movs	r1, #4
 800407a:	4836      	ldr	r0, [pc, #216]	; (8004154 <menu+0x2e48>)
 800407c:	f005 f9ce 	bl	800941c <HAL_GPIO_ReadPin>
 8004080:	4603      	mov	r3, r0
 8004082:	2b01      	cmp	r3, #1
 8004084:	d115      	bne.n	80040b2 <menu+0x2da6>
 8004086:	4b34      	ldr	r3, [pc, #208]	; (8004158 <menu+0x2e4c>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	f083 0301 	eor.w	r3, r3, #1
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00e      	beq.n	80040b2 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004094:	4b35      	ldr	r3, [pc, #212]	; (800416c <menu+0x2e60>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	3b01      	subs	r3, #1
 800409a:	b2da      	uxtb	r2, r3
 800409c:	4b33      	ldr	r3, [pc, #204]	; (800416c <menu+0x2e60>)
 800409e:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80040a0:	4b32      	ldr	r3, [pc, #200]	; (800416c <menu+0x2e60>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <menu+0x2da2>
		   		buzzer = 1;
 80040a8:	4b30      	ldr	r3, [pc, #192]	; (800416c <menu+0x2e60>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80040ae:	f000 fda1 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80040b2:	2108      	movs	r1, #8
 80040b4:	4827      	ldr	r0, [pc, #156]	; (8004154 <menu+0x2e48>)
 80040b6:	f005 f9b1 	bl	800941c <HAL_GPIO_ReadPin>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d10d      	bne.n	80040dc <menu+0x2dd0>
 80040c0:	4b25      	ldr	r3, [pc, #148]	; (8004158 <menu+0x2e4c>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	f083 0301 	eor.w	r3, r3, #1
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d006      	beq.n	80040dc <menu+0x2dd0>
			eepromData[25] = buzzer;
 80040ce:	4b27      	ldr	r3, [pc, #156]	; (800416c <menu+0x2e60>)
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	4b22      	ldr	r3, [pc, #136]	; (800415c <menu+0x2e50>)
 80040d4:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80040d6:	4b22      	ldr	r3, [pc, #136]	; (8004160 <menu+0x2e54>)
 80040d8:	2201      	movs	r2, #1
 80040da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80040dc:	4b21      	ldr	r3, [pc, #132]	; (8004164 <menu+0x2e58>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b1c      	cmp	r3, #28
 80040e2:	f040 80ab 	bne.w	800423c <menu+0x2f30>
		calismaSayModu = 0;
 80040e6:	4b26      	ldr	r3, [pc, #152]	; (8004180 <menu+0x2e74>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80040ec:	4a25      	ldr	r2, [pc, #148]	; (8004184 <menu+0x2e78>)
 80040ee:	2101      	movs	r1, #1
 80040f0:	2001      	movs	r0, #1
 80040f2:	f003 fe6d 	bl	8007dd0 <lcd_print>

		if(demoMode == 0) {
 80040f6:	4b24      	ldr	r3, [pc, #144]	; (8004188 <menu+0x2e7c>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d113      	bne.n	8004126 <menu+0x2e1a>
			if(dilSecim == 0) {
 80040fe:	4b11      	ldr	r3, [pc, #68]	; (8004144 <menu+0x2e38>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d105      	bne.n	8004112 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8004106:	4a1a      	ldr	r2, [pc, #104]	; (8004170 <menu+0x2e64>)
 8004108:	2101      	movs	r1, #1
 800410a:	2002      	movs	r0, #2
 800410c:	f003 fe60 	bl	8007dd0 <lcd_print>
 8004110:	e045      	b.n	800419e <menu+0x2e92>
			} else if(dilSecim == 1) {
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <menu+0x2e38>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d141      	bne.n	800419e <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800411a:	4a16      	ldr	r2, [pc, #88]	; (8004174 <menu+0x2e68>)
 800411c:	2101      	movs	r1, #1
 800411e:	2002      	movs	r0, #2
 8004120:	f003 fe56 	bl	8007dd0 <lcd_print>
 8004124:	e03b      	b.n	800419e <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8004126:	4b18      	ldr	r3, [pc, #96]	; (8004188 <menu+0x2e7c>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d137      	bne.n	800419e <menu+0x2e92>
			if(dilSecim == 0){
 800412e:	4b05      	ldr	r3, [pc, #20]	; (8004144 <menu+0x2e38>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d12a      	bne.n	800418c <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8004136:	4a10      	ldr	r2, [pc, #64]	; (8004178 <menu+0x2e6c>)
 8004138:	2101      	movs	r1, #1
 800413a:	2002      	movs	r0, #2
 800413c:	f003 fe48 	bl	8007dd0 <lcd_print>
 8004140:	e02d      	b.n	800419e <menu+0x2e92>
 8004142:	bf00      	nop
 8004144:	20000241 	.word	0x20000241
 8004148:	0800d9f0 	.word	0x0800d9f0
 800414c:	20000238 	.word	0x20000238
 8004150:	20000188 	.word	0x20000188
 8004154:	40010800 	.word	0x40010800
 8004158:	2000024f 	.word	0x2000024f
 800415c:	20000118 	.word	0x20000118
 8004160:	2000024c 	.word	0x2000024c
 8004164:	20000220 	.word	0x20000220
 8004168:	0800daf0 	.word	0x0800daf0
 800416c:	2000023c 	.word	0x2000023c
 8004170:	0800d418 	.word	0x0800d418
 8004174:	0800d42c 	.word	0x0800d42c
 8004178:	0800d478 	.word	0x0800d478
 800417c:	0800d48c 	.word	0x0800d48c
 8004180:	20000240 	.word	0x20000240
 8004184:	0800db04 	.word	0x0800db04
 8004188:	2000023e 	.word	0x2000023e
			} else if(dilSecim == 1) {
 800418c:	4b71      	ldr	r3, [pc, #452]	; (8004354 <menu+0x3048>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d104      	bne.n	800419e <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004194:	4a70      	ldr	r2, [pc, #448]	; (8004358 <menu+0x304c>)
 8004196:	2101      	movs	r1, #1
 8004198:	2002      	movs	r0, #2
 800419a:	f003 fe19 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800419e:	2102      	movs	r1, #2
 80041a0:	486e      	ldr	r0, [pc, #440]	; (800435c <menu+0x3050>)
 80041a2:	f005 f93b 	bl	800941c <HAL_GPIO_ReadPin>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d115      	bne.n	80041d8 <menu+0x2ecc>
 80041ac:	4b6c      	ldr	r3, [pc, #432]	; (8004360 <menu+0x3054>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	f083 0301 	eor.w	r3, r3, #1
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00e      	beq.n	80041d8 <menu+0x2ecc>
			demoMode = demoMode + 1;
 80041ba:	4b6a      	ldr	r3, [pc, #424]	; (8004364 <menu+0x3058>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	3301      	adds	r3, #1
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	4b68      	ldr	r3, [pc, #416]	; (8004364 <menu+0x3058>)
 80041c4:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80041c6:	4b67      	ldr	r3, [pc, #412]	; (8004364 <menu+0x3058>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d902      	bls.n	80041d4 <menu+0x2ec8>
				demoMode = 0;
 80041ce:	4b65      	ldr	r3, [pc, #404]	; (8004364 <menu+0x3058>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80041d4:	f000 fd0e 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80041d8:	2104      	movs	r1, #4
 80041da:	4860      	ldr	r0, [pc, #384]	; (800435c <menu+0x3050>)
 80041dc:	f005 f91e 	bl	800941c <HAL_GPIO_ReadPin>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d115      	bne.n	8004212 <menu+0x2f06>
 80041e6:	4b5e      	ldr	r3, [pc, #376]	; (8004360 <menu+0x3054>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	f083 0301 	eor.w	r3, r3, #1
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00e      	beq.n	8004212 <menu+0x2f06>
			demoMode = demoMode - 1;
 80041f4:	4b5b      	ldr	r3, [pc, #364]	; (8004364 <menu+0x3058>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	4b59      	ldr	r3, [pc, #356]	; (8004364 <menu+0x3058>)
 80041fe:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004200:	4b58      	ldr	r3, [pc, #352]	; (8004364 <menu+0x3058>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <menu+0x2f02>
		   		demoMode = 1;
 8004208:	4b56      	ldr	r3, [pc, #344]	; (8004364 <menu+0x3058>)
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800420e:	f000 fcf1 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004212:	2108      	movs	r1, #8
 8004214:	4851      	ldr	r0, [pc, #324]	; (800435c <menu+0x3050>)
 8004216:	f005 f901 	bl	800941c <HAL_GPIO_ReadPin>
 800421a:	4603      	mov	r3, r0
 800421c:	2b01      	cmp	r3, #1
 800421e:	d10d      	bne.n	800423c <menu+0x2f30>
 8004220:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <menu+0x3054>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	f083 0301 	eor.w	r3, r3, #1
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d006      	beq.n	800423c <menu+0x2f30>
			eepromData[26] = demoMode;
 800422e:	4b4d      	ldr	r3, [pc, #308]	; (8004364 <menu+0x3058>)
 8004230:	781a      	ldrb	r2, [r3, #0]
 8004232:	4b4d      	ldr	r3, [pc, #308]	; (8004368 <menu+0x305c>)
 8004234:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004236:	4b4d      	ldr	r3, [pc, #308]	; (800436c <menu+0x3060>)
 8004238:	2201      	movs	r2, #1
 800423a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 800423c:	4b4c      	ldr	r3, [pc, #304]	; (8004370 <menu+0x3064>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b1d      	cmp	r3, #29
 8004242:	f040 8132 	bne.w	80044aa <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004246:	4b4b      	ldr	r3, [pc, #300]	; (8004374 <menu+0x3068>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d113      	bne.n	8004276 <menu+0x2f6a>
 800424e:	4b4a      	ldr	r3, [pc, #296]	; (8004378 <menu+0x306c>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10f      	bne.n	8004276 <menu+0x2f6a>
 8004256:	4b49      	ldr	r3, [pc, #292]	; (800437c <menu+0x3070>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <menu+0x2f6a>
 800425e:	4b48      	ldr	r3, [pc, #288]	; (8004380 <menu+0x3074>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d107      	bne.n	8004276 <menu+0x2f6a>
 8004266:	4b47      	ldr	r3, [pc, #284]	; (8004384 <menu+0x3078>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d103      	bne.n	8004276 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800426e:	4b46      	ldr	r3, [pc, #280]	; (8004388 <menu+0x307c>)
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	e002      	b.n	800427c <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004276:	4b44      	ldr	r3, [pc, #272]	; (8004388 <menu+0x307c>)
 8004278:	2201      	movs	r2, #1
 800427a:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 800427c:	4b43      	ldr	r3, [pc, #268]	; (800438c <menu+0x3080>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d154      	bne.n	800432e <menu+0x3022>
			if(dilSecim == 0) {
 8004284:	4b33      	ldr	r3, [pc, #204]	; (8004354 <menu+0x3048>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800428c:	4a40      	ldr	r2, [pc, #256]	; (8004390 <menu+0x3084>)
 800428e:	2101      	movs	r1, #1
 8004290:	2001      	movs	r0, #1
 8004292:	f003 fd9d 	bl	8007dd0 <lcd_print>
 8004296:	e008      	b.n	80042aa <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004298:	4b2e      	ldr	r3, [pc, #184]	; (8004354 <menu+0x3048>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d104      	bne.n	80042aa <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80042a0:	4a3c      	ldr	r2, [pc, #240]	; (8004394 <menu+0x3088>)
 80042a2:	2101      	movs	r1, #1
 80042a4:	2001      	movs	r0, #1
 80042a6:	f003 fd93 	bl	8007dd0 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80042aa:	4b36      	ldr	r3, [pc, #216]	; (8004384 <menu+0x3078>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	220a      	movs	r2, #10
 80042b0:	4939      	ldr	r1, [pc, #228]	; (8004398 <menu+0x308c>)
 80042b2:	4618      	mov	r0, r3
 80042b4:	f008 f8de 	bl	800c474 <itoa>
			lcd_print(2, 12, snum);
 80042b8:	4a37      	ldr	r2, [pc, #220]	; (8004398 <menu+0x308c>)
 80042ba:	210c      	movs	r1, #12
 80042bc:	2002      	movs	r0, #2
 80042be:	f003 fd87 	bl	8007dd0 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80042c2:	4b2f      	ldr	r3, [pc, #188]	; (8004380 <menu+0x3074>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	220a      	movs	r2, #10
 80042c8:	4933      	ldr	r1, [pc, #204]	; (8004398 <menu+0x308c>)
 80042ca:	4618      	mov	r0, r3
 80042cc:	f008 f8d2 	bl	800c474 <itoa>
			lcd_print(2, 13, snum);
 80042d0:	4a31      	ldr	r2, [pc, #196]	; (8004398 <menu+0x308c>)
 80042d2:	210d      	movs	r1, #13
 80042d4:	2002      	movs	r0, #2
 80042d6:	f003 fd7b 	bl	8007dd0 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80042da:	4b28      	ldr	r3, [pc, #160]	; (800437c <menu+0x3070>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	220a      	movs	r2, #10
 80042e0:	492d      	ldr	r1, [pc, #180]	; (8004398 <menu+0x308c>)
 80042e2:	4618      	mov	r0, r3
 80042e4:	f008 f8c6 	bl	800c474 <itoa>
			lcd_print(2, 14, snum);
 80042e8:	4a2b      	ldr	r2, [pc, #172]	; (8004398 <menu+0x308c>)
 80042ea:	210e      	movs	r1, #14
 80042ec:	2002      	movs	r0, #2
 80042ee:	f003 fd6f 	bl	8007dd0 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80042f2:	4b21      	ldr	r3, [pc, #132]	; (8004378 <menu+0x306c>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	220a      	movs	r2, #10
 80042f8:	4927      	ldr	r1, [pc, #156]	; (8004398 <menu+0x308c>)
 80042fa:	4618      	mov	r0, r3
 80042fc:	f008 f8ba 	bl	800c474 <itoa>
			lcd_print(2, 15, snum);
 8004300:	4a25      	ldr	r2, [pc, #148]	; (8004398 <menu+0x308c>)
 8004302:	210f      	movs	r1, #15
 8004304:	2002      	movs	r0, #2
 8004306:	f003 fd63 	bl	8007dd0 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800430a:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <menu+0x3068>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	220a      	movs	r2, #10
 8004310:	4921      	ldr	r1, [pc, #132]	; (8004398 <menu+0x308c>)
 8004312:	4618      	mov	r0, r3
 8004314:	f008 f8ae 	bl	800c474 <itoa>
			lcd_print(2, 16, snum);
 8004318:	4a1f      	ldr	r2, [pc, #124]	; (8004398 <menu+0x308c>)
 800431a:	2110      	movs	r1, #16
 800431c:	2002      	movs	r0, #2
 800431e:	f003 fd57 	bl	8007dd0 <lcd_print>

			lcd_print(2, 1, "           ");
 8004322:	4a1e      	ldr	r2, [pc, #120]	; (800439c <menu+0x3090>)
 8004324:	2101      	movs	r1, #1
 8004326:	2002      	movs	r0, #2
 8004328:	f003 fd52 	bl	8007dd0 <lcd_print>
 800432c:	e048      	b.n	80043c0 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 800432e:	4b17      	ldr	r3, [pc, #92]	; (800438c <menu+0x3080>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d144      	bne.n	80043c0 <menu+0x30b4>
			if(dilSecim == 0) {
 8004336:	4b07      	ldr	r3, [pc, #28]	; (8004354 <menu+0x3048>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d132      	bne.n	80043a4 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800433e:	4a14      	ldr	r2, [pc, #80]	; (8004390 <menu+0x3084>)
 8004340:	2101      	movs	r1, #1
 8004342:	2001      	movs	r0, #1
 8004344:	f003 fd44 	bl	8007dd0 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004348:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <menu+0x3094>)
 800434a:	2101      	movs	r1, #1
 800434c:	2002      	movs	r0, #2
 800434e:	f003 fd3f 	bl	8007dd0 <lcd_print>
 8004352:	e035      	b.n	80043c0 <menu+0x30b4>
 8004354:	20000241 	.word	0x20000241
 8004358:	0800d48c 	.word	0x0800d48c
 800435c:	40010800 	.word	0x40010800
 8004360:	2000024f 	.word	0x2000024f
 8004364:	2000023e 	.word	0x2000023e
 8004368:	20000118 	.word	0x20000118
 800436c:	2000024c 	.word	0x2000024c
 8004370:	20000220 	.word	0x20000220
 8004374:	2000021d 	.word	0x2000021d
 8004378:	2000021e 	.word	0x2000021e
 800437c:	20000000 	.word	0x20000000
 8004380:	20000001 	.word	0x20000001
 8004384:	2000021f 	.word	0x2000021f
 8004388:	20000261 	.word	0x20000261
 800438c:	20000240 	.word	0x20000240
 8004390:	0800db14 	.word	0x0800db14
 8004394:	0800db28 	.word	0x0800db28
 8004398:	20000188 	.word	0x20000188
 800439c:	0800db3c 	.word	0x0800db3c
 80043a0:	0800db48 	.word	0x0800db48
			} else if(dilSecim == 1) {
 80043a4:	4b94      	ldr	r3, [pc, #592]	; (80045f8 <menu+0x32ec>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d109      	bne.n	80043c0 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80043ac:	4a93      	ldr	r2, [pc, #588]	; (80045fc <menu+0x32f0>)
 80043ae:	2101      	movs	r1, #1
 80043b0:	2001      	movs	r0, #1
 80043b2:	f003 fd0d 	bl	8007dd0 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80043b6:	4a92      	ldr	r2, [pc, #584]	; (8004600 <menu+0x32f4>)
 80043b8:	2101      	movs	r1, #1
 80043ba:	2002      	movs	r0, #2
 80043bc:	f003 fd08 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80043c0:	2102      	movs	r1, #2
 80043c2:	4890      	ldr	r0, [pc, #576]	; (8004604 <menu+0x32f8>)
 80043c4:	f005 f82a 	bl	800941c <HAL_GPIO_ReadPin>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d119      	bne.n	8004402 <menu+0x30f6>
 80043ce:	4b8e      	ldr	r3, [pc, #568]	; (8004608 <menu+0x32fc>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	f083 0301 	eor.w	r3, r3, #1
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d012      	beq.n	8004402 <menu+0x30f6>
 80043dc:	4b8b      	ldr	r3, [pc, #556]	; (800460c <menu+0x3300>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00e      	beq.n	8004402 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80043e4:	4b8a      	ldr	r3, [pc, #552]	; (8004610 <menu+0x3304>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	3301      	adds	r3, #1
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	4b88      	ldr	r3, [pc, #544]	; (8004610 <menu+0x3304>)
 80043ee:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80043f0:	4b87      	ldr	r3, [pc, #540]	; (8004610 <menu+0x3304>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d902      	bls.n	80043fe <menu+0x30f2>
				calismaSayModu = 0;
 80043f8:	4b85      	ldr	r3, [pc, #532]	; (8004610 <menu+0x3304>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80043fe:	f000 fbf9 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004402:	2104      	movs	r1, #4
 8004404:	487f      	ldr	r0, [pc, #508]	; (8004604 <menu+0x32f8>)
 8004406:	f005 f809 	bl	800941c <HAL_GPIO_ReadPin>
 800440a:	4603      	mov	r3, r0
 800440c:	2b01      	cmp	r3, #1
 800440e:	d119      	bne.n	8004444 <menu+0x3138>
 8004410:	4b7d      	ldr	r3, [pc, #500]	; (8004608 <menu+0x32fc>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	f083 0301 	eor.w	r3, r3, #1
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d012      	beq.n	8004444 <menu+0x3138>
 800441e:	4b7b      	ldr	r3, [pc, #492]	; (800460c <menu+0x3300>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00e      	beq.n	8004444 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 8004426:	4b7a      	ldr	r3, [pc, #488]	; (8004610 <menu+0x3304>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	3b01      	subs	r3, #1
 800442c:	b2da      	uxtb	r2, r3
 800442e:	4b78      	ldr	r3, [pc, #480]	; (8004610 <menu+0x3304>)
 8004430:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004432:	4b77      	ldr	r3, [pc, #476]	; (8004610 <menu+0x3304>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <menu+0x3134>
		   		calismaSayModu = 1;
 800443a:	4b75      	ldr	r3, [pc, #468]	; (8004610 <menu+0x3304>)
 800443c:	2201      	movs	r2, #1
 800443e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004440:	f000 fbd8 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004444:	2108      	movs	r1, #8
 8004446:	486f      	ldr	r0, [pc, #444]	; (8004604 <menu+0x32f8>)
 8004448:	f004 ffe8 	bl	800941c <HAL_GPIO_ReadPin>
 800444c:	4603      	mov	r3, r0
 800444e:	2b01      	cmp	r3, #1
 8004450:	d12b      	bne.n	80044aa <menu+0x319e>
 8004452:	4b6d      	ldr	r3, [pc, #436]	; (8004608 <menu+0x32fc>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	f083 0301 	eor.w	r3, r3, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d024      	beq.n	80044aa <menu+0x319e>
			eepromData[32] = 0;
 8004460:	4b6c      	ldr	r3, [pc, #432]	; (8004614 <menu+0x3308>)
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004468:	4b6a      	ldr	r3, [pc, #424]	; (8004614 <menu+0x3308>)
 800446a:	2200      	movs	r2, #0
 800446c:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800446e:	4b69      	ldr	r3, [pc, #420]	; (8004614 <menu+0x3308>)
 8004470:	2200      	movs	r2, #0
 8004472:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004474:	4b67      	ldr	r3, [pc, #412]	; (8004614 <menu+0x3308>)
 8004476:	2200      	movs	r2, #0
 8004478:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800447a:	4b66      	ldr	r3, [pc, #408]	; (8004614 <menu+0x3308>)
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004480:	4b65      	ldr	r3, [pc, #404]	; (8004618 <menu+0x330c>)
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004486:	4b65      	ldr	r3, [pc, #404]	; (800461c <menu+0x3310>)
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 800448c:	4b64      	ldr	r3, [pc, #400]	; (8004620 <menu+0x3314>)
 800448e:	2200      	movs	r2, #0
 8004490:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004492:	4b64      	ldr	r3, [pc, #400]	; (8004624 <menu+0x3318>)
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004498:	4b63      	ldr	r3, [pc, #396]	; (8004628 <menu+0x331c>)
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800449e:	4b5c      	ldr	r3, [pc, #368]	; (8004610 <menu+0x3304>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80044a4:	4b61      	ldr	r3, [pc, #388]	; (800462c <menu+0x3320>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80044aa:	4b61      	ldr	r3, [pc, #388]	; (8004630 <menu+0x3324>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b1e      	cmp	r3, #30
 80044b0:	d16f      	bne.n	8004592 <menu+0x3286>
		calismaSayModu = 0;
 80044b2:	4b57      	ldr	r3, [pc, #348]	; (8004610 <menu+0x3304>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80044b8:	4b4f      	ldr	r3, [pc, #316]	; (80045f8 <menu+0x32ec>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80044c0:	4a5c      	ldr	r2, [pc, #368]	; (8004634 <menu+0x3328>)
 80044c2:	2101      	movs	r1, #1
 80044c4:	2001      	movs	r0, #1
 80044c6:	f003 fc83 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80044ca:	4a5b      	ldr	r2, [pc, #364]	; (8004638 <menu+0x332c>)
 80044cc:	2101      	movs	r1, #1
 80044ce:	2002      	movs	r0, #2
 80044d0:	f003 fc7e 	bl	8007dd0 <lcd_print>
 80044d4:	e00d      	b.n	80044f2 <menu+0x31e6>
		} else if(dilSecim == 1) {
 80044d6:	4b48      	ldr	r3, [pc, #288]	; (80045f8 <menu+0x32ec>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d109      	bne.n	80044f2 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80044de:	4a57      	ldr	r2, [pc, #348]	; (800463c <menu+0x3330>)
 80044e0:	2101      	movs	r1, #1
 80044e2:	2001      	movs	r0, #1
 80044e4:	f003 fc74 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80044e8:	4a55      	ldr	r2, [pc, #340]	; (8004640 <menu+0x3334>)
 80044ea:	2101      	movs	r1, #1
 80044ec:	2002      	movs	r0, #2
 80044ee:	f003 fc6f 	bl	8007dd0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80044f2:	2102      	movs	r1, #2
 80044f4:	4843      	ldr	r0, [pc, #268]	; (8004604 <menu+0x32f8>)
 80044f6:	f004 ff91 	bl	800941c <HAL_GPIO_ReadPin>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d115      	bne.n	800452c <menu+0x3220>
 8004500:	4b41      	ldr	r3, [pc, #260]	; (8004608 <menu+0x32fc>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	f083 0301 	eor.w	r3, r3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00e      	beq.n	800452c <menu+0x3220>
			dilSecim = dilSecim + 1;
 800450e:	4b3a      	ldr	r3, [pc, #232]	; (80045f8 <menu+0x32ec>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	3301      	adds	r3, #1
 8004514:	b2da      	uxtb	r2, r3
 8004516:	4b38      	ldr	r3, [pc, #224]	; (80045f8 <menu+0x32ec>)
 8004518:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800451a:	4b37      	ldr	r3, [pc, #220]	; (80045f8 <menu+0x32ec>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d902      	bls.n	8004528 <menu+0x321c>
				dilSecim = 0;
 8004522:	4b35      	ldr	r3, [pc, #212]	; (80045f8 <menu+0x32ec>)
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004528:	f000 fb64 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800452c:	2104      	movs	r1, #4
 800452e:	4835      	ldr	r0, [pc, #212]	; (8004604 <menu+0x32f8>)
 8004530:	f004 ff74 	bl	800941c <HAL_GPIO_ReadPin>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d115      	bne.n	8004566 <menu+0x325a>
 800453a:	4b33      	ldr	r3, [pc, #204]	; (8004608 <menu+0x32fc>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	f083 0301 	eor.w	r3, r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00e      	beq.n	8004566 <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004548:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <menu+0x32ec>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	3b01      	subs	r3, #1
 800454e:	b2da      	uxtb	r2, r3
 8004550:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <menu+0x32ec>)
 8004552:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004554:	4b28      	ldr	r3, [pc, #160]	; (80045f8 <menu+0x32ec>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <menu+0x3256>
		   		dilSecim = 1;
 800455c:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <menu+0x32ec>)
 800455e:	2201      	movs	r2, #1
 8004560:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004562:	f000 fb47 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004566:	2108      	movs	r1, #8
 8004568:	4826      	ldr	r0, [pc, #152]	; (8004604 <menu+0x32f8>)
 800456a:	f004 ff57 	bl	800941c <HAL_GPIO_ReadPin>
 800456e:	4603      	mov	r3, r0
 8004570:	2b01      	cmp	r3, #1
 8004572:	d10e      	bne.n	8004592 <menu+0x3286>
 8004574:	4b24      	ldr	r3, [pc, #144]	; (8004608 <menu+0x32fc>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	f083 0301 	eor.w	r3, r3, #1
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004582:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <menu+0x32ec>)
 8004584:	781a      	ldrb	r2, [r3, #0]
 8004586:	4b23      	ldr	r3, [pc, #140]	; (8004614 <menu+0x3308>)
 8004588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 800458c:	4b27      	ldr	r3, [pc, #156]	; (800462c <menu+0x3320>)
 800458e:	2201      	movs	r2, #1
 8004590:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004592:	4b27      	ldr	r3, [pc, #156]	; (8004630 <menu+0x3324>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b1f      	cmp	r3, #31
 8004598:	f040 80b7 	bne.w	800470a <menu+0x33fe>
		calismaSayModu = 0;
 800459c:	4b1c      	ldr	r3, [pc, #112]	; (8004610 <menu+0x3304>)
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80045a2:	4a28      	ldr	r2, [pc, #160]	; (8004644 <menu+0x3338>)
 80045a4:	2101      	movs	r1, #1
 80045a6:	2001      	movs	r0, #1
 80045a8:	f003 fc12 	bl	8007dd0 <lcd_print>

		if(iotMode == 0) {
 80045ac:	4b26      	ldr	r3, [pc, #152]	; (8004648 <menu+0x333c>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d113      	bne.n	80045dc <menu+0x32d0>
			if(dilSecim == 0) {
 80045b4:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <menu+0x32ec>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80045bc:	4a23      	ldr	r2, [pc, #140]	; (800464c <menu+0x3340>)
 80045be:	2101      	movs	r1, #1
 80045c0:	2002      	movs	r0, #2
 80045c2:	f003 fc05 	bl	8007dd0 <lcd_print>
 80045c6:	e050      	b.n	800466a <menu+0x335e>
			} else if(dilSecim == 1) {
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <menu+0x32ec>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d14c      	bne.n	800466a <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80045d0:	4a1f      	ldr	r2, [pc, #124]	; (8004650 <menu+0x3344>)
 80045d2:	2101      	movs	r1, #1
 80045d4:	2002      	movs	r0, #2
 80045d6:	f003 fbfb 	bl	8007dd0 <lcd_print>
 80045da:	e046      	b.n	800466a <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <menu+0x333c>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d142      	bne.n	800466a <menu+0x335e>
			if(dilSecim == 0) {
 80045e4:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <menu+0x32ec>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d135      	bne.n	8004658 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80045ec:	4a19      	ldr	r2, [pc, #100]	; (8004654 <menu+0x3348>)
 80045ee:	2101      	movs	r1, #1
 80045f0:	2002      	movs	r0, #2
 80045f2:	f003 fbed 	bl	8007dd0 <lcd_print>
 80045f6:	e038      	b.n	800466a <menu+0x335e>
 80045f8:	20000241 	.word	0x20000241
 80045fc:	0800db28 	.word	0x0800db28
 8004600:	0800db5c 	.word	0x0800db5c
 8004604:	40010800 	.word	0x40010800
 8004608:	2000024f 	.word	0x2000024f
 800460c:	20000261 	.word	0x20000261
 8004610:	20000240 	.word	0x20000240
 8004614:	20000118 	.word	0x20000118
 8004618:	2000021f 	.word	0x2000021f
 800461c:	20000001 	.word	0x20000001
 8004620:	20000000 	.word	0x20000000
 8004624:	2000021e 	.word	0x2000021e
 8004628:	2000021d 	.word	0x2000021d
 800462c:	2000024c 	.word	0x2000024c
 8004630:	20000220 	.word	0x20000220
 8004634:	0800db70 	.word	0x0800db70
 8004638:	0800db84 	.word	0x0800db84
 800463c:	0800db98 	.word	0x0800db98
 8004640:	0800dbac 	.word	0x0800dbac
 8004644:	0800dbc0 	.word	0x0800dbc0
 8004648:	2000023f 	.word	0x2000023f
 800464c:	0800d418 	.word	0x0800d418
 8004650:	0800d42c 	.word	0x0800d42c
 8004654:	0800d478 	.word	0x0800d478
			} else if(dilSecim == 1) {
 8004658:	4b97      	ldr	r3, [pc, #604]	; (80048b8 <menu+0x35ac>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d104      	bne.n	800466a <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004660:	4a96      	ldr	r2, [pc, #600]	; (80048bc <menu+0x35b0>)
 8004662:	2101      	movs	r1, #1
 8004664:	2002      	movs	r0, #2
 8004666:	f003 fbb3 	bl	8007dd0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800466a:	2102      	movs	r1, #2
 800466c:	4894      	ldr	r0, [pc, #592]	; (80048c0 <menu+0x35b4>)
 800466e:	f004 fed5 	bl	800941c <HAL_GPIO_ReadPin>
 8004672:	4603      	mov	r3, r0
 8004674:	2b01      	cmp	r3, #1
 8004676:	d115      	bne.n	80046a4 <menu+0x3398>
 8004678:	4b92      	ldr	r3, [pc, #584]	; (80048c4 <menu+0x35b8>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	f083 0301 	eor.w	r3, r3, #1
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00e      	beq.n	80046a4 <menu+0x3398>
			iotMode = iotMode + 1;
 8004686:	4b90      	ldr	r3, [pc, #576]	; (80048c8 <menu+0x35bc>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	3301      	adds	r3, #1
 800468c:	b2da      	uxtb	r2, r3
 800468e:	4b8e      	ldr	r3, [pc, #568]	; (80048c8 <menu+0x35bc>)
 8004690:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004692:	4b8d      	ldr	r3, [pc, #564]	; (80048c8 <menu+0x35bc>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d902      	bls.n	80046a0 <menu+0x3394>
				iotMode = 0;
 800469a:	4b8b      	ldr	r3, [pc, #556]	; (80048c8 <menu+0x35bc>)
 800469c:	2200      	movs	r2, #0
 800469e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80046a0:	f000 faa8 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046a4:	2104      	movs	r1, #4
 80046a6:	4886      	ldr	r0, [pc, #536]	; (80048c0 <menu+0x35b4>)
 80046a8:	f004 feb8 	bl	800941c <HAL_GPIO_ReadPin>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d115      	bne.n	80046de <menu+0x33d2>
 80046b2:	4b84      	ldr	r3, [pc, #528]	; (80048c4 <menu+0x35b8>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	f083 0301 	eor.w	r3, r3, #1
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00e      	beq.n	80046de <menu+0x33d2>
			iotMode = iotMode - 1;
 80046c0:	4b81      	ldr	r3, [pc, #516]	; (80048c8 <menu+0x35bc>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	4b7f      	ldr	r3, [pc, #508]	; (80048c8 <menu+0x35bc>)
 80046ca:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80046cc:	4b7e      	ldr	r3, [pc, #504]	; (80048c8 <menu+0x35bc>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <menu+0x33ce>
		   		iotMode = 1;
 80046d4:	4b7c      	ldr	r3, [pc, #496]	; (80048c8 <menu+0x35bc>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80046da:	f000 fa8b 	bl	8004bf4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046de:	2108      	movs	r1, #8
 80046e0:	4877      	ldr	r0, [pc, #476]	; (80048c0 <menu+0x35b4>)
 80046e2:	f004 fe9b 	bl	800941c <HAL_GPIO_ReadPin>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d10e      	bne.n	800470a <menu+0x33fe>
 80046ec:	4b75      	ldr	r3, [pc, #468]	; (80048c4 <menu+0x35b8>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	f083 0301 	eor.w	r3, r3, #1
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <menu+0x33fe>
			eepromData[48] = iotMode;
 80046fa:	4b73      	ldr	r3, [pc, #460]	; (80048c8 <menu+0x35bc>)
 80046fc:	781a      	ldrb	r2, [r3, #0]
 80046fe:	4b73      	ldr	r3, [pc, #460]	; (80048cc <menu+0x35c0>)
 8004700:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004704:	4b72      	ldr	r3, [pc, #456]	; (80048d0 <menu+0x35c4>)
 8004706:	2201      	movs	r2, #1
 8004708:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800470a:	4b72      	ldr	r3, [pc, #456]	; (80048d4 <menu+0x35c8>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b20      	cmp	r3, #32
 8004710:	d13f      	bne.n	8004792 <menu+0x3486>
		calismaSayModu = 0;
 8004712:	4b71      	ldr	r3, [pc, #452]	; (80048d8 <menu+0x35cc>)
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004718:	4b67      	ldr	r3, [pc, #412]	; (80048b8 <menu+0x35ac>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d105      	bne.n	800472c <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 8004720:	4a6e      	ldr	r2, [pc, #440]	; (80048dc <menu+0x35d0>)
 8004722:	2101      	movs	r1, #1
 8004724:	2001      	movs	r0, #1
 8004726:	f003 fb53 	bl	8007dd0 <lcd_print>
 800472a:	e004      	b.n	8004736 <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 800472c:	4a6c      	ldr	r2, [pc, #432]	; (80048e0 <menu+0x35d4>)
 800472e:	2101      	movs	r1, #1
 8004730:	2001      	movs	r0, #1
 8004732:	f003 fb4d 	bl	8007dd0 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 8004736:	4a6b      	ldr	r2, [pc, #428]	; (80048e4 <menu+0x35d8>)
 8004738:	2101      	movs	r1, #1
 800473a:	2002      	movs	r0, #2
 800473c:	f003 fb48 	bl	8007dd0 <lcd_print>
		lcd_print(2, 13, "    ");
 8004740:	4a69      	ldr	r2, [pc, #420]	; (80048e8 <menu+0x35dc>)
 8004742:	210d      	movs	r1, #13
 8004744:	2002      	movs	r0, #2
 8004746:	f003 fb43 	bl	8007dd0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800474a:	2102      	movs	r1, #2
 800474c:	485c      	ldr	r0, [pc, #368]	; (80048c0 <menu+0x35b4>)
 800474e:	f004 fe65 	bl	800941c <HAL_GPIO_ReadPin>
 8004752:	4603      	mov	r3, r0
 8004754:	2b01      	cmp	r3, #1
 8004756:	d11c      	bne.n	8004792 <menu+0x3486>
 8004758:	2104      	movs	r1, #4
 800475a:	4859      	ldr	r0, [pc, #356]	; (80048c0 <menu+0x35b4>)
 800475c:	f004 fe5e 	bl	800941c <HAL_GPIO_ReadPin>
 8004760:	4603      	mov	r3, r0
 8004762:	2b01      	cmp	r3, #1
 8004764:	d115      	bne.n	8004792 <menu+0x3486>
 8004766:	4b57      	ldr	r3, [pc, #348]	; (80048c4 <menu+0x35b8>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	f083 0301 	eor.w	r3, r3, #1
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00e      	beq.n	8004792 <menu+0x3486>
			takeMachineID();
 8004774:	f002 fb4a 	bl	8006e0c <takeMachineID>

			HAL_Delay(250);
 8004778:	20fa      	movs	r0, #250	; 0xfa
 800477a:	f004 f87f 	bl	800887c <HAL_Delay>
			lcd_print(2, 1, machineID);
 800477e:	4a59      	ldr	r2, [pc, #356]	; (80048e4 <menu+0x35d8>)
 8004780:	2101      	movs	r1, #1
 8004782:	2002      	movs	r0, #2
 8004784:	f003 fb24 	bl	8007dd0 <lcd_print>
			lcd_print(2, 13, "    ");
 8004788:	4a57      	ldr	r2, [pc, #348]	; (80048e8 <menu+0x35dc>)
 800478a:	210d      	movs	r1, #13
 800478c:	2002      	movs	r0, #2
 800478e:	f003 fb1f 	bl	8007dd0 <lcd_print>
		}
	}

	if (menuSayac == 33) {
 8004792:	4b50      	ldr	r3, [pc, #320]	; (80048d4 <menu+0x35c8>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b21      	cmp	r3, #33	; 0x21
 8004798:	f040 80bf 	bne.w	800491a <menu+0x360e>
		calismaSayModu = 0;
 800479c:	4b4e      	ldr	r3, [pc, #312]	; (80048d8 <menu+0x35cc>)
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]
		int ssidLength = strlen(wifiSSID);
 80047a2:	4852      	ldr	r0, [pc, #328]	; (80048ec <menu+0x35e0>)
 80047a4:	f7fb fd3e 	bl	8000224 <strlen>
 80047a8:	4603      	mov	r3, r0
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34

		lcd_print(1, 1, "WIFI SSID       ");
 80047ac:	4a50      	ldr	r2, [pc, #320]	; (80048f0 <menu+0x35e4>)
 80047ae:	2101      	movs	r1, #1
 80047b0:	2001      	movs	r0, #1
 80047b2:	f003 fb0d 	bl	8007dd0 <lcd_print>
		if(ssidLength == 16) {
 80047b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d105      	bne.n	80047c8 <menu+0x34bc>
			lcd_print(2, 1, wifiSSID);
 80047bc:	4a4b      	ldr	r2, [pc, #300]	; (80048ec <menu+0x35e0>)
 80047be:	2101      	movs	r1, #1
 80047c0:	2002      	movs	r0, #2
 80047c2:	f003 fb05 	bl	8007dd0 <lcd_print>
 80047c6:	e030      	b.n	800482a <menu+0x351e>
		} else if(ssidLength < 16) {
 80047c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ca:	2b0f      	cmp	r3, #15
 80047cc:	dc15      	bgt.n	80047fa <menu+0x34ee>
			for(int i=0; i<16-ssidLength; i++) {
 80047ce:	2300      	movs	r3, #0
 80047d0:	633b      	str	r3, [r7, #48]	; 0x30
 80047d2:	e00b      	b.n	80047ec <menu+0x34e0>
				lcd_delete_char(2, ssidLength);
 80047d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	4619      	mov	r1, r3
 80047da:	2002      	movs	r0, #2
 80047dc:	f003 fb2e 	bl	8007e3c <lcd_delete_char>
				ssidLength++;
 80047e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e2:	3301      	adds	r3, #1
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
			for(int i=0; i<16-ssidLength; i++) {
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	3301      	adds	r3, #1
 80047ea:	633b      	str	r3, [r7, #48]	; 0x30
 80047ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ee:	f1c3 0310 	rsb	r3, r3, #16
 80047f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f4:	429a      	cmp	r2, r3
 80047f6:	dbed      	blt.n	80047d4 <menu+0x34c8>
 80047f8:	e017      	b.n	800482a <menu+0x351e>
			}
		} else {
			int lcdVal = 1;
 80047fa:	2301      	movs	r3, #1
 80047fc:	62fb      	str	r3, [r7, #44]	; 0x2c

			//Eğer ssid 16'dan büyükse buraya ekle
			for(int i=0; i<16; i++) {
 80047fe:	2300      	movs	r3, #0
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28
 8004802:	e00f      	b.n	8004824 <menu+0x3518>
				lcd_print_char(2, lcdVal, wifiSSID[i]);
 8004804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004806:	b2d9      	uxtb	r1, r3
 8004808:	4a38      	ldr	r2, [pc, #224]	; (80048ec <menu+0x35e0>)
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	4413      	add	r3, r2
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	2002      	movs	r0, #2
 8004814:	f003 faf1 	bl	8007dfa <lcd_print_char>
				lcdVal++;
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	3301      	adds	r3, #1
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(int i=0; i<16; i++) {
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	3301      	adds	r3, #1
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	2b0f      	cmp	r3, #15
 8004828:	ddec      	ble.n	8004804 <menu+0x34f8>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800482a:	2102      	movs	r1, #2
 800482c:	4824      	ldr	r0, [pc, #144]	; (80048c0 <menu+0x35b4>)
 800482e:	f004 fdf5 	bl	800941c <HAL_GPIO_ReadPin>
 8004832:	4603      	mov	r3, r0
 8004834:	2b01      	cmp	r3, #1
 8004836:	d170      	bne.n	800491a <menu+0x360e>
 8004838:	2104      	movs	r1, #4
 800483a:	4821      	ldr	r0, [pc, #132]	; (80048c0 <menu+0x35b4>)
 800483c:	f004 fdee 	bl	800941c <HAL_GPIO_ReadPin>
 8004840:	4603      	mov	r3, r0
 8004842:	2b01      	cmp	r3, #1
 8004844:	d169      	bne.n	800491a <menu+0x360e>
 8004846:	4b1f      	ldr	r3, [pc, #124]	; (80048c4 <menu+0x35b8>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	f083 0301 	eor.w	r3, r3, #1
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d062      	beq.n	800491a <menu+0x360e>
			takeWifiSSID();
 8004854:	f002 fc6c 	bl	8007130 <takeWifiSSID>

			ssidLength = strlen(wifiSSID);
 8004858:	4824      	ldr	r0, [pc, #144]	; (80048ec <menu+0x35e0>)
 800485a:	f7fb fce3 	bl	8000224 <strlen>
 800485e:	4603      	mov	r3, r0
 8004860:	637b      	str	r3, [r7, #52]	; 0x34

			HAL_Delay(250);
 8004862:	20fa      	movs	r0, #250	; 0xfa
 8004864:	f004 f80a 	bl	800887c <HAL_Delay>
			if(ssidLength == 16) {
 8004868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486a:	2b10      	cmp	r3, #16
 800486c:	d105      	bne.n	800487a <menu+0x356e>
				lcd_print(2, 1, wifiSSID);
 800486e:	4a1f      	ldr	r2, [pc, #124]	; (80048ec <menu+0x35e0>)
 8004870:	2101      	movs	r1, #1
 8004872:	2002      	movs	r0, #2
 8004874:	f003 faac 	bl	8007dd0 <lcd_print>
 8004878:	e04f      	b.n	800491a <menu+0x360e>
			} else if(ssidLength < 16) {
 800487a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487c:	2b0f      	cmp	r3, #15
 800487e:	dc15      	bgt.n	80048ac <menu+0x35a0>
				for(int i=0; i<16-ssidLength; i++) {
 8004880:	2300      	movs	r3, #0
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
 8004884:	e00b      	b.n	800489e <menu+0x3592>
					lcd_delete_char(2, ssidLength);
 8004886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004888:	b2db      	uxtb	r3, r3
 800488a:	4619      	mov	r1, r3
 800488c:	2002      	movs	r0, #2
 800488e:	f003 fad5 	bl	8007e3c <lcd_delete_char>
					ssidLength++;
 8004892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004894:	3301      	adds	r3, #1
 8004896:	637b      	str	r3, [r7, #52]	; 0x34
				for(int i=0; i<16-ssidLength; i++) {
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	3301      	adds	r3, #1
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
 800489e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a0:	f1c3 0310 	rsb	r3, r3, #16
 80048a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a6:	429a      	cmp	r2, r3
 80048a8:	dbed      	blt.n	8004886 <menu+0x357a>
 80048aa:	e036      	b.n	800491a <menu+0x360e>
				}
			} else {
				int lcdVal = 1;
 80048ac:	2301      	movs	r3, #1
 80048ae:	623b      	str	r3, [r7, #32]

				//Eğer ssid 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	e02e      	b.n	8004914 <menu+0x3608>
 80048b6:	bf00      	nop
 80048b8:	20000241 	.word	0x20000241
 80048bc:	0800d48c 	.word	0x0800d48c
 80048c0:	40010800 	.word	0x40010800
 80048c4:	2000024f 	.word	0x2000024f
 80048c8:	2000023f 	.word	0x2000023f
 80048cc:	20000118 	.word	0x20000118
 80048d0:	2000024c 	.word	0x2000024c
 80048d4:	20000220 	.word	0x20000220
 80048d8:	20000240 	.word	0x20000240
 80048dc:	0800dbd4 	.word	0x0800dbd4
 80048e0:	0800dbe8 	.word	0x0800dbe8
 80048e4:	20000190 	.word	0x20000190
 80048e8:	0800dbfc 	.word	0x0800dbfc
 80048ec:	2000019c 	.word	0x2000019c
 80048f0:	0800dc04 	.word	0x0800dc04
					lcd_print_char(2, lcdVal, wifiSSID[i]);
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	b2d9      	uxtb	r1, r3
 80048f8:	4a85      	ldr	r2, [pc, #532]	; (8004b10 <menu+0x3804>)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4413      	add	r3, r2
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	2002      	movs	r0, #2
 8004904:	f003 fa79 	bl	8007dfa <lcd_print_char>
					lcdVal++;
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	3301      	adds	r3, #1
 800490c:	623b      	str	r3, [r7, #32]
				for(int i=0; i<16; i++) {
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3301      	adds	r3, #1
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b0f      	cmp	r3, #15
 8004918:	ddec      	ble.n	80048f4 <menu+0x35e8>
				}
			}
		}
	}

	if (menuSayac == 34) {
 800491a:	4b7e      	ldr	r3, [pc, #504]	; (8004b14 <menu+0x3808>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b22      	cmp	r3, #34	; 0x22
 8004920:	f040 80a0 	bne.w	8004a64 <menu+0x3758>
		calismaSayModu = 0;
 8004924:	4b7c      	ldr	r3, [pc, #496]	; (8004b18 <menu+0x380c>)
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
		int passLength = strlen(wifiPass);
 800492a:	487c      	ldr	r0, [pc, #496]	; (8004b1c <menu+0x3810>)
 800492c:	f7fb fc7a 	bl	8000224 <strlen>
 8004930:	4603      	mov	r3, r0
 8004932:	61bb      	str	r3, [r7, #24]

		lcd_print(1, 1, "WIFI PASS       ");
 8004934:	4a7a      	ldr	r2, [pc, #488]	; (8004b20 <menu+0x3814>)
 8004936:	2101      	movs	r1, #1
 8004938:	2001      	movs	r0, #1
 800493a:	f003 fa49 	bl	8007dd0 <lcd_print>
		if(passLength == 16) {
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	2b10      	cmp	r3, #16
 8004942:	d105      	bne.n	8004950 <menu+0x3644>
			lcd_print(2, 1, wifiPass);
 8004944:	4a75      	ldr	r2, [pc, #468]	; (8004b1c <menu+0x3810>)
 8004946:	2101      	movs	r1, #1
 8004948:	2002      	movs	r0, #2
 800494a:	f003 fa41 	bl	8007dd0 <lcd_print>
 800494e:	e030      	b.n	80049b2 <menu+0x36a6>
		} else if(passLength < 16) {
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2b0f      	cmp	r3, #15
 8004954:	dc15      	bgt.n	8004982 <menu+0x3676>
			for(int i=0; i<16-passLength; i++) {
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	e00b      	b.n	8004974 <menu+0x3668>
				lcd_delete_char(2, passLength);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	4619      	mov	r1, r3
 8004962:	2002      	movs	r0, #2
 8004964:	f003 fa6a 	bl	8007e3c <lcd_delete_char>
				passLength++;
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	3301      	adds	r3, #1
 800496c:	61bb      	str	r3, [r7, #24]
			for(int i=0; i<16-passLength; i++) {
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	3301      	adds	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f1c3 0310 	rsb	r3, r3, #16
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	429a      	cmp	r2, r3
 800497e:	dbed      	blt.n	800495c <menu+0x3650>
 8004980:	e017      	b.n	80049b2 <menu+0x36a6>
			}
		} else {
			int lcdVal = 1;
 8004982:	2301      	movs	r3, #1
 8004984:	613b      	str	r3, [r7, #16]

			//Eğer pass 16'dan büyükse buraya ekle
			for(int i=0; i<16; i++) {
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	e00f      	b.n	80049ac <menu+0x36a0>
				lcd_print_char(2, lcdVal, wifiPass[i]);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	b2d9      	uxtb	r1, r3
 8004990:	4a62      	ldr	r2, [pc, #392]	; (8004b1c <menu+0x3810>)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4413      	add	r3, r2
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	2002      	movs	r0, #2
 800499c:	f003 fa2d 	bl	8007dfa <lcd_print_char>
				lcdVal++;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	3301      	adds	r3, #1
 80049a4:	613b      	str	r3, [r7, #16]
			for(int i=0; i<16; i++) {
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3301      	adds	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b0f      	cmp	r3, #15
 80049b0:	ddec      	ble.n	800498c <menu+0x3680>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049b2:	2102      	movs	r1, #2
 80049b4:	485b      	ldr	r0, [pc, #364]	; (8004b24 <menu+0x3818>)
 80049b6:	f004 fd31 	bl	800941c <HAL_GPIO_ReadPin>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d151      	bne.n	8004a64 <menu+0x3758>
 80049c0:	2104      	movs	r1, #4
 80049c2:	4858      	ldr	r0, [pc, #352]	; (8004b24 <menu+0x3818>)
 80049c4:	f004 fd2a 	bl	800941c <HAL_GPIO_ReadPin>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d14a      	bne.n	8004a64 <menu+0x3758>
 80049ce:	4b56      	ldr	r3, [pc, #344]	; (8004b28 <menu+0x381c>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	f083 0301 	eor.w	r3, r3, #1
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d043      	beq.n	8004a64 <menu+0x3758>
			takeWifiPass();
 80049dc:	f002 fd4a 	bl	8007474 <takeWifiPass>

			passLength = strlen(wifiPass);
 80049e0:	484e      	ldr	r0, [pc, #312]	; (8004b1c <menu+0x3810>)
 80049e2:	f7fb fc1f 	bl	8000224 <strlen>
 80049e6:	4603      	mov	r3, r0
 80049e8:	61bb      	str	r3, [r7, #24]

			HAL_Delay(250);
 80049ea:	20fa      	movs	r0, #250	; 0xfa
 80049ec:	f003 ff46 	bl	800887c <HAL_Delay>
			if(passLength == 16) {
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d105      	bne.n	8004a02 <menu+0x36f6>
				lcd_print(2, 1, wifiPass);
 80049f6:	4a49      	ldr	r2, [pc, #292]	; (8004b1c <menu+0x3810>)
 80049f8:	2101      	movs	r1, #1
 80049fa:	2002      	movs	r0, #2
 80049fc:	f003 f9e8 	bl	8007dd0 <lcd_print>
 8004a00:	e030      	b.n	8004a64 <menu+0x3758>
			} else if(passLength < 16) {
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b0f      	cmp	r3, #15
 8004a06:	dc15      	bgt.n	8004a34 <menu+0x3728>
				for(int i=0; i<16-passLength; i++) {
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	e00b      	b.n	8004a26 <menu+0x371a>
					lcd_delete_char(2, passLength);
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	4619      	mov	r1, r3
 8004a14:	2002      	movs	r0, #2
 8004a16:	f003 fa11 	bl	8007e3c <lcd_delete_char>
					passLength++;
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	61bb      	str	r3, [r7, #24]
				for(int i=0; i<16-passLength; i++) {
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	3301      	adds	r3, #1
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	f1c3 0310 	rsb	r3, r3, #16
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	dbed      	blt.n	8004a0e <menu+0x3702>
 8004a32:	e017      	b.n	8004a64 <menu+0x3758>
				}
			} else {
				int lcdVal = 1;
 8004a34:	2301      	movs	r3, #1
 8004a36:	607b      	str	r3, [r7, #4]

				//Eğer pass 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 8004a38:	2300      	movs	r3, #0
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	e00f      	b.n	8004a5e <menu+0x3752>
					lcd_print_char(2, lcdVal, wifiPass[i]);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	b2d9      	uxtb	r1, r3
 8004a42:	4a36      	ldr	r2, [pc, #216]	; (8004b1c <menu+0x3810>)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4413      	add	r3, r2
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2002      	movs	r0, #2
 8004a4e:	f003 f9d4 	bl	8007dfa <lcd_print_char>
					lcdVal++;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3301      	adds	r3, #1
 8004a56:	607b      	str	r3, [r7, #4]
				for(int i=0; i<16; i++) {
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	603b      	str	r3, [r7, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b0f      	cmp	r3, #15
 8004a62:	ddec      	ble.n	8004a3e <menu+0x3732>
				}
			}
		}
	}

	if (menuSayac == 35) {
 8004a64:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <menu+0x3808>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b23      	cmp	r3, #35	; 0x23
 8004a6a:	d14d      	bne.n	8004b08 <menu+0x37fc>
		if(dilSecim == 0) {
 8004a6c:	4b2f      	ldr	r3, [pc, #188]	; (8004b2c <menu+0x3820>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <menu+0x377e>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004a74:	4a2e      	ldr	r2, [pc, #184]	; (8004b30 <menu+0x3824>)
 8004a76:	2101      	movs	r1, #1
 8004a78:	2001      	movs	r0, #1
 8004a7a:	f003 f9a9 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004a7e:	4a2d      	ldr	r2, [pc, #180]	; (8004b34 <menu+0x3828>)
 8004a80:	2101      	movs	r1, #1
 8004a82:	2002      	movs	r0, #2
 8004a84:	f003 f9a4 	bl	8007dd0 <lcd_print>
 8004a88:	e00d      	b.n	8004aa6 <menu+0x379a>
		} else if(dilSecim == 1) {
 8004a8a:	4b28      	ldr	r3, [pc, #160]	; (8004b2c <menu+0x3820>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d109      	bne.n	8004aa6 <menu+0x379a>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004a92:	4a29      	ldr	r2, [pc, #164]	; (8004b38 <menu+0x382c>)
 8004a94:	2101      	movs	r1, #1
 8004a96:	2001      	movs	r0, #1
 8004a98:	f003 f99a 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004a9c:	4a27      	ldr	r2, [pc, #156]	; (8004b3c <menu+0x3830>)
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	2002      	movs	r0, #2
 8004aa2:	f003 f995 	bl	8007dd0 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004aa6:	2108      	movs	r1, #8
 8004aa8:	481e      	ldr	r0, [pc, #120]	; (8004b24 <menu+0x3818>)
 8004aaa:	f004 fcb7 	bl	800941c <HAL_GPIO_ReadPin>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d129      	bne.n	8004b08 <menu+0x37fc>
			menuGiris = 0;
 8004ab4:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <menu+0x3834>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004aba:	bf00      	nop
 8004abc:	4821      	ldr	r0, [pc, #132]	; (8004b44 <menu+0x3838>)
 8004abe:	f005 fad6 	bl	800a06e <HAL_I2C_GetError>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d0f9      	beq.n	8004abc <menu+0x37b0>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004ac8:	bf00      	nop
 8004aca:	481e      	ldr	r0, [pc, #120]	; (8004b44 <menu+0x3838>)
 8004acc:	f005 fac2 	bl	800a054 <HAL_I2C_GetState>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d1f9      	bne.n	8004aca <menu+0x37be>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004ad6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004ada:	9302      	str	r3, [sp, #8]
 8004adc:	236e      	movs	r3, #110	; 0x6e
 8004ade:	9301      	str	r3, [sp, #4]
 8004ae0:	4b19      	ldr	r3, [pc, #100]	; (8004b48 <menu+0x383c>)
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	236e      	movs	r3, #110	; 0x6e
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	21a0      	movs	r1, #160	; 0xa0
 8004aea:	4816      	ldr	r0, [pc, #88]	; (8004b44 <menu+0x3838>)
 8004aec:	f004 ff50 	bl	8009990 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8004af0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004af4:	f003 fec2 	bl	800887c <HAL_Delay>

			lcd_clear();
 8004af8:	f003 f996 	bl	8007e28 <lcd_clear>
			HAL_Delay(500);
 8004afc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b00:	f003 febc 	bl	800887c <HAL_Delay>
			NVIC_SystemReset();
 8004b04:	f7fc fbec 	bl	80012e0 <__NVIC_SystemReset>
		}
	}
}
 8004b08:	bf00      	nop
 8004b0a:	3738      	adds	r7, #56	; 0x38
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	2000019c 	.word	0x2000019c
 8004b14:	20000220 	.word	0x20000220
 8004b18:	20000240 	.word	0x20000240
 8004b1c:	200001b0 	.word	0x200001b0
 8004b20:	0800dc18 	.word	0x0800dc18
 8004b24:	40010800 	.word	0x40010800
 8004b28:	2000024f 	.word	0x2000024f
 8004b2c:	20000241 	.word	0x20000241
 8004b30:	0800dc2c 	.word	0x0800dc2c
 8004b34:	0800dc40 	.word	0x0800dc40
 8004b38:	0800dc54 	.word	0x0800dc54
 8004b3c:	0800dc68 	.word	0x0800dc68
 8004b40:	2000023d 	.word	0x2000023d
 8004b44:	200003a8 	.word	0x200003a8
 8004b48:	20000118 	.word	0x20000118

08004b4c <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d105      	bne.n	8004b68 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004b5c:	4a22      	ldr	r2, [pc, #136]	; (8004be8 <lcdUpdate+0x9c>)
 8004b5e:	2101      	movs	r1, #1
 8004b60:	2002      	movs	r0, #2
 8004b62:	f003 f935 	bl	8007dd0 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004b66:	e03b      	b.n	8004be0 <lcdUpdate+0x94>
	} else if(y==2) {
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d105      	bne.n	8004b7a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004b6e:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <lcdUpdate+0x9c>)
 8004b70:	2102      	movs	r1, #2
 8004b72:	2002      	movs	r0, #2
 8004b74:	f003 f92c 	bl	8007dd0 <lcd_print>
}
 8004b78:	e032      	b.n	8004be0 <lcdUpdate+0x94>
	} else if(y==3) {
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d105      	bne.n	8004b8c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004b80:	4a19      	ldr	r2, [pc, #100]	; (8004be8 <lcdUpdate+0x9c>)
 8004b82:	2103      	movs	r1, #3
 8004b84:	2002      	movs	r0, #2
 8004b86:	f003 f923 	bl	8007dd0 <lcd_print>
}
 8004b8a:	e029      	b.n	8004be0 <lcdUpdate+0x94>
	} else if(y==4) {
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d105      	bne.n	8004b9e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004b92:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <lcdUpdate+0x9c>)
 8004b94:	2104      	movs	r1, #4
 8004b96:	2002      	movs	r0, #2
 8004b98:	f003 f91a 	bl	8007dd0 <lcd_print>
}
 8004b9c:	e020      	b.n	8004be0 <lcdUpdate+0x94>
	} else if(y==5) {
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	2b05      	cmp	r3, #5
 8004ba2:	d105      	bne.n	8004bb0 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004ba4:	4a10      	ldr	r2, [pc, #64]	; (8004be8 <lcdUpdate+0x9c>)
 8004ba6:	2105      	movs	r1, #5
 8004ba8:	2002      	movs	r0, #2
 8004baa:	f003 f911 	bl	8007dd0 <lcd_print>
}
 8004bae:	e017      	b.n	8004be0 <lcdUpdate+0x94>
	} else if(y==6) {
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d105      	bne.n	8004bc2 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004bb6:	4a0c      	ldr	r2, [pc, #48]	; (8004be8 <lcdUpdate+0x9c>)
 8004bb8:	2106      	movs	r1, #6
 8004bba:	2002      	movs	r0, #2
 8004bbc:	f003 f908 	bl	8007dd0 <lcd_print>
}
 8004bc0:	e00e      	b.n	8004be0 <lcdUpdate+0x94>
	} else if (y==7) {
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	2b07      	cmp	r3, #7
 8004bc6:	d10b      	bne.n	8004be0 <lcdUpdate+0x94>
		lcd_clear();
 8004bc8:	f003 f92e 	bl	8007e28 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004bcc:	4a07      	ldr	r2, [pc, #28]	; (8004bec <lcdUpdate+0xa0>)
 8004bce:	2104      	movs	r1, #4
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	f003 f8fd 	bl	8007dd0 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004bd6:	4a06      	ldr	r2, [pc, #24]	; (8004bf0 <lcdUpdate+0xa4>)
 8004bd8:	2106      	movs	r1, #6
 8004bda:	2002      	movs	r0, #2
 8004bdc:	f003 f8f8 	bl	8007dd0 <lcd_print>
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	0800dc7c 	.word	0x0800dc7c
 8004bec:	0800dc80 	.word	0x0800dc80
 8004bf0:	0800dc88 	.word	0x0800dc88

08004bf4 <bekle>:

void bekle() {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
	timer1=millis;
 8004bf8:	4b47      	ldr	r3, [pc, #284]	; (8004d18 <bekle+0x124>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a47      	ldr	r2, [pc, #284]	; (8004d1c <bekle+0x128>)
 8004bfe:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c00:	e002      	b.n	8004c08 <bekle+0x14>
    	butonKontrol = 1;
 8004c02:	4b47      	ldr	r3, [pc, #284]	; (8004d20 <bekle+0x12c>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c08:	2101      	movs	r1, #1
 8004c0a:	4846      	ldr	r0, [pc, #280]	; (8004d24 <bekle+0x130>)
 8004c0c:	f004 fc06 	bl	800941c <HAL_GPIO_ReadPin>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d109      	bne.n	8004c2a <bekle+0x36>
 8004c16:	4b40      	ldr	r3, [pc, #256]	; (8004d18 <bekle+0x124>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b40      	ldr	r3, [pc, #256]	; (8004d1c <bekle+0x128>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d0ef      	beq.n	8004c02 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c22:	e002      	b.n	8004c2a <bekle+0x36>
    	butonKontrol = 1;
 8004c24:	4b3e      	ldr	r3, [pc, #248]	; (8004d20 <bekle+0x12c>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c2a:	2108      	movs	r1, #8
 8004c2c:	483e      	ldr	r0, [pc, #248]	; (8004d28 <bekle+0x134>)
 8004c2e:	f004 fbf5 	bl	800941c <HAL_GPIO_ReadPin>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d109      	bne.n	8004c4c <bekle+0x58>
 8004c38:	4b37      	ldr	r3, [pc, #220]	; (8004d18 <bekle+0x124>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	4b37      	ldr	r3, [pc, #220]	; (8004d1c <bekle+0x128>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d0ef      	beq.n	8004c24 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c44:	e002      	b.n	8004c4c <bekle+0x58>
    	butonKontrol = 1;
 8004c46:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <bekle+0x12c>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c4c:	2102      	movs	r1, #2
 8004c4e:	4835      	ldr	r0, [pc, #212]	; (8004d24 <bekle+0x130>)
 8004c50:	f004 fbe4 	bl	800941c <HAL_GPIO_ReadPin>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d109      	bne.n	8004c6e <bekle+0x7a>
 8004c5a:	4b2f      	ldr	r3, [pc, #188]	; (8004d18 <bekle+0x124>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b2f      	ldr	r3, [pc, #188]	; (8004d1c <bekle+0x128>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d0ef      	beq.n	8004c46 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c66:	e002      	b.n	8004c6e <bekle+0x7a>
    	butonKontrol = 1;
 8004c68:	4b2d      	ldr	r3, [pc, #180]	; (8004d20 <bekle+0x12c>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c6e:	2104      	movs	r1, #4
 8004c70:	482c      	ldr	r0, [pc, #176]	; (8004d24 <bekle+0x130>)
 8004c72:	f004 fbd3 	bl	800941c <HAL_GPIO_ReadPin>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d109      	bne.n	8004c90 <bekle+0x9c>
 8004c7c:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <bekle+0x124>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b26      	ldr	r3, [pc, #152]	; (8004d1c <bekle+0x128>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d0ef      	beq.n	8004c68 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c88:	e002      	b.n	8004c90 <bekle+0x9c>
    	butonKontrol = 1;
 8004c8a:	4b25      	ldr	r3, [pc, #148]	; (8004d20 <bekle+0x12c>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c90:	2108      	movs	r1, #8
 8004c92:	4824      	ldr	r0, [pc, #144]	; (8004d24 <bekle+0x130>)
 8004c94:	f004 fbc2 	bl	800941c <HAL_GPIO_ReadPin>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d109      	bne.n	8004cb2 <bekle+0xbe>
 8004c9e:	4b1e      	ldr	r3, [pc, #120]	; (8004d18 <bekle+0x124>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <bekle+0x128>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d0ef      	beq.n	8004c8a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004caa:	e002      	b.n	8004cb2 <bekle+0xbe>
    	butonKontrol = 1;
 8004cac:	4b1c      	ldr	r3, [pc, #112]	; (8004d20 <bekle+0x12c>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cb2:	2180      	movs	r1, #128	; 0x80
 8004cb4:	481c      	ldr	r0, [pc, #112]	; (8004d28 <bekle+0x134>)
 8004cb6:	f004 fbb1 	bl	800941c <HAL_GPIO_ReadPin>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d109      	bne.n	8004cd4 <bekle+0xe0>
 8004cc0:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <bekle+0x124>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <bekle+0x128>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d0ef      	beq.n	8004cac <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ccc:	e002      	b.n	8004cd4 <bekle+0xe0>
    	butonKontrol = 1;
 8004cce:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <bekle+0x12c>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cd8:	4813      	ldr	r0, [pc, #76]	; (8004d28 <bekle+0x134>)
 8004cda:	f004 fb9f 	bl	800941c <HAL_GPIO_ReadPin>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <bekle+0x104>
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <bekle+0x124>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <bekle+0x128>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d0ee      	beq.n	8004cce <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cf0:	e002      	b.n	8004cf8 <bekle+0x104>
    	butonKontrol = 1;
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <bekle+0x12c>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cfc:	480a      	ldr	r0, [pc, #40]	; (8004d28 <bekle+0x134>)
 8004cfe:	f004 fb8d 	bl	800941c <HAL_GPIO_ReadPin>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d105      	bne.n	8004d14 <bekle+0x120>
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <bekle+0x124>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4b03      	ldr	r3, [pc, #12]	; (8004d1c <bekle+0x128>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d0ee      	beq.n	8004cf2 <bekle+0xfe>
    }

}
 8004d14:	bf00      	nop
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	200001fc 	.word	0x200001fc
 8004d1c:	20000204 	.word	0x20000204
 8004d20:	2000024f 	.word	0x2000024f
 8004d24:	40010800 	.word	0x40010800
 8004d28:	40011000 	.word	0x40011000

08004d2c <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <checkLCDBacklight+0x24>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <checkLCDBacklight+0x28>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b3b      	cmp	r3, #59	; 0x3b
 8004d3c:	d903      	bls.n	8004d46 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004d3e:	2000      	movs	r0, #0
 8004d40:	f003 f892 	bl	8007e68 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004d44:	e002      	b.n	8004d4c <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004d46:	2001      	movs	r0, #1
 8004d48:	f003 f88e 	bl	8007e68 <lcd_backlight>
}
 8004d4c:	bf00      	nop
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	200001fc 	.word	0x200001fc
 8004d54:	20000218 	.word	0x20000218

08004d58 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004d5c:	4b13      	ldr	r3, [pc, #76]	; (8004dac <checkBasincSalteri+0x54>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <checkBasincSalteri+0x12>
		basincVar=1;
 8004d64:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <checkBasincSalteri+0x58>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004d6a:	4b10      	ldr	r3, [pc, #64]	; (8004dac <checkBasincSalteri+0x54>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d119      	bne.n	8004da6 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d76:	480f      	ldr	r0, [pc, #60]	; (8004db4 <checkBasincSalteri+0x5c>)
 8004d78:	f004 fb50 	bl	800941c <HAL_GPIO_ReadPin>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <checkBasincSalteri+0x60>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <checkBasincSalteri+0x64>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d90a      	bls.n	8004da6 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004d90:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <checkBasincSalteri+0x58>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004d96:	e006      	b.n	8004da6 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004d98:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <checkBasincSalteri+0x60>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a07      	ldr	r2, [pc, #28]	; (8004dbc <checkBasincSalteri+0x64>)
 8004d9e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <checkBasincSalteri+0x58>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
}
 8004da6:	bf00      	nop
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000227 	.word	0x20000227
 8004db0:	20000223 	.word	0x20000223
 8004db4:	40011000 	.word	0x40011000
 8004db8:	200001fc 	.word	0x200001fc
 8004dbc:	20000214 	.word	0x20000214

08004dc0 <checkBasGonder>:

void checkBasGonder() {
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004dc4:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <checkBasGonder+0x74>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d10b      	bne.n	8004de4 <checkBasGonder+0x24>
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <checkBasGonder+0x78>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d007      	beq.n	8004de4 <checkBasGonder+0x24>
 8004dd4:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <checkBasGonder+0x7c>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d103      	bne.n	8004de4 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004ddc:	4b18      	ldr	r3, [pc, #96]	; (8004e40 <checkBasGonder+0x80>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	e009      	b.n	8004df8 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004de4:	4b14      	ldr	r3, [pc, #80]	; (8004e38 <checkBasGonder+0x78>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	f083 0301 	eor.w	r3, r3, #1
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004df2:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <checkBasGonder+0x80>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004df8:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <checkBasGonder+0x74>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d10b      	bne.n	8004e18 <checkBasGonder+0x58>
 8004e00:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <checkBasGonder+0x84>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d007      	beq.n	8004e18 <checkBasGonder+0x58>
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <checkBasGonder+0x7c>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d103      	bne.n	8004e18 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004e10:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <checkBasGonder+0x88>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004e16:	e009      	b.n	8004e2c <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <checkBasGonder+0x84>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	f083 0301 	eor.w	r3, r3, #1
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004e26:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <checkBasGonder+0x88>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr
 8004e34:	20000221 	.word	0x20000221
 8004e38:	20000255 	.word	0x20000255
 8004e3c:	2000022f 	.word	0x2000022f
 8004e40:	2000025c 	.word	0x2000025c
 8004e44:	20000258 	.word	0x20000258
 8004e48:	2000025d 	.word	0x2000025d

08004e4c <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004e50:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <checkKapiSecimleri+0x98>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004e58:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <checkKapiSecimleri+0x9c>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004e5e:	4b21      	ldr	r3, [pc, #132]	; (8004ee4 <checkKapiSecimleri+0x98>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d10e      	bne.n	8004e84 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004e66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e6a:	4820      	ldr	r0, [pc, #128]	; (8004eec <checkKapiSecimleri+0xa0>)
 8004e6c:	f004 fad6 	bl	800941c <HAL_GPIO_ReadPin>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d103      	bne.n	8004e7e <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004e76:	4b1c      	ldr	r3, [pc, #112]	; (8004ee8 <checkKapiSecimleri+0x9c>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	e002      	b.n	8004e84 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004e7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <checkKapiSecimleri+0x9c>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004e84:	4b17      	ldr	r3, [pc, #92]	; (8004ee4 <checkKapiSecimleri+0x98>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d10e      	bne.n	8004eaa <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004e8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e90:	4816      	ldr	r0, [pc, #88]	; (8004eec <checkKapiSecimleri+0xa0>)
 8004e92:	f004 fac3 	bl	800941c <HAL_GPIO_ReadPin>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d103      	bne.n	8004ea4 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004e9c:	4b12      	ldr	r3, [pc, #72]	; (8004ee8 <checkKapiSecimleri+0x9c>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
 8004ea2:	e002      	b.n	8004eaa <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004ea4:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <checkKapiSecimleri+0x9c>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004eaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ee4 <checkKapiSecimleri+0x98>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d116      	bne.n	8004ee0 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004eb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eb6:	480d      	ldr	r0, [pc, #52]	; (8004eec <checkKapiSecimleri+0xa0>)
 8004eb8:	f004 fab0 	bl	800941c <HAL_GPIO_ReadPin>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10b      	bne.n	8004eda <checkKapiSecimleri+0x8e>
 8004ec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ec6:	4809      	ldr	r0, [pc, #36]	; (8004eec <checkKapiSecimleri+0xa0>)
 8004ec8:	f004 faa8 	bl	800941c <HAL_GPIO_ReadPin>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d103      	bne.n	8004eda <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004ed2:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <checkKapiSecimleri+0x9c>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004ed8:	e002      	b.n	8004ee0 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004eda:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <checkKapiSecimleri+0x9c>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	701a      	strb	r2, [r3, #0]
}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20000228 	.word	0x20000228
 8004ee8:	20000273 	.word	0x20000273
 8004eec:	40010800 	.word	0x40010800

08004ef0 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004ef4:	4b62      	ldr	r3, [pc, #392]	; (8005080 <checkAktifCalisma+0x190>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f041 833e 	bne.w	800657a <checkAktifCalisma+0x168a>
 8004efe:	4b61      	ldr	r3, [pc, #388]	; (8005084 <checkAktifCalisma+0x194>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f041 8339 	bne.w	800657a <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004f08:	4b5f      	ldr	r3, [pc, #380]	; (8005088 <checkAktifCalisma+0x198>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d11a      	bne.n	8004f46 <checkAktifCalisma+0x56>
 8004f10:	4b5e      	ldr	r3, [pc, #376]	; (800508c <checkAktifCalisma+0x19c>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d116      	bne.n	8004f46 <checkAktifCalisma+0x56>
 8004f18:	4b5d      	ldr	r3, [pc, #372]	; (8005090 <checkAktifCalisma+0x1a0>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <checkAktifCalisma+0x46>
 8004f20:	4b5c      	ldr	r3, [pc, #368]	; (8005094 <checkAktifCalisma+0x1a4>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	f083 0301 	eor.w	r3, r3, #1
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <checkAktifCalisma+0x46>
 8004f2e:	4b5a      	ldr	r3, [pc, #360]	; (8005098 <checkAktifCalisma+0x1a8>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d007      	beq.n	8004f46 <checkAktifCalisma+0x56>
 8004f36:	4b59      	ldr	r3, [pc, #356]	; (800509c <checkAktifCalisma+0x1ac>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d018      	beq.n	8004f70 <checkAktifCalisma+0x80>
 8004f3e:	4b58      	ldr	r3, [pc, #352]	; (80050a0 <checkAktifCalisma+0x1b0>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d114      	bne.n	8004f70 <checkAktifCalisma+0x80>
 8004f46:	4b57      	ldr	r3, [pc, #348]	; (80050a4 <checkAktifCalisma+0x1b4>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d010      	beq.n	8004f70 <checkAktifCalisma+0x80>
 8004f4e:	4b56      	ldr	r3, [pc, #344]	; (80050a8 <checkAktifCalisma+0x1b8>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00c      	beq.n	8004f70 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004f56:	2201      	movs	r2, #1
 8004f58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f5c:	4853      	ldr	r0, [pc, #332]	; (80050ac <checkAktifCalisma+0x1bc>)
 8004f5e:	f004 fa74 	bl	800944a <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004f62:	4b53      	ldr	r3, [pc, #332]	; (80050b0 <checkAktifCalisma+0x1c0>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004f68:	4b52      	ldr	r3, [pc, #328]	; (80050b4 <checkAktifCalisma+0x1c4>)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e008      	b.n	8004f82 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004f70:	2200      	movs	r2, #0
 8004f72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f76:	484d      	ldr	r0, [pc, #308]	; (80050ac <checkAktifCalisma+0x1bc>)
 8004f78:	f004 fa67 	bl	800944a <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004f7c:	4b4c      	ldr	r3, [pc, #304]	; (80050b0 <checkAktifCalisma+0x1c0>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004f82:	4b40      	ldr	r3, [pc, #256]	; (8005084 <checkAktifCalisma+0x194>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d160      	bne.n	800504c <checkAktifCalisma+0x15c>
 8004f8a:	4b46      	ldr	r3, [pc, #280]	; (80050a4 <checkAktifCalisma+0x1b4>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d05c      	beq.n	800504c <checkAktifCalisma+0x15c>
 8004f92:	4b45      	ldr	r3, [pc, #276]	; (80050a8 <checkAktifCalisma+0x1b8>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d058      	beq.n	800504c <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f9e:	4843      	ldr	r0, [pc, #268]	; (80050ac <checkAktifCalisma+0x1bc>)
 8004fa0:	f004 fa3c 	bl	800941c <HAL_GPIO_ReadPin>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <checkAktifCalisma+0xc2>
 8004faa:	4b43      	ldr	r3, [pc, #268]	; (80050b8 <checkAktifCalisma+0x1c8>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d04c      	beq.n	800504c <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004fb2:	2102      	movs	r1, #2
 8004fb4:	4841      	ldr	r0, [pc, #260]	; (80050bc <checkAktifCalisma+0x1cc>)
 8004fb6:	f004 fa31 	bl	800941c <HAL_GPIO_ReadPin>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d145      	bne.n	800504c <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004fc0:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <checkAktifCalisma+0x1d0>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d041      	beq.n	800504c <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004fc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fcc:	4837      	ldr	r0, [pc, #220]	; (80050ac <checkAktifCalisma+0x1bc>)
 8004fce:	f004 fa25 	bl	800941c <HAL_GPIO_ReadPin>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d10e      	bne.n	8004ff6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004fd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fdc:	4833      	ldr	r0, [pc, #204]	; (80050ac <checkAktifCalisma+0x1bc>)
 8004fde:	f004 fa1d 	bl	800941c <HAL_GPIO_ReadPin>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d106      	bne.n	8004ff6 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004fe8:	2140      	movs	r1, #64	; 0x40
 8004fea:	4834      	ldr	r0, [pc, #208]	; (80050bc <checkAktifCalisma+0x1cc>)
 8004fec:	f004 fa16 	bl	800941c <HAL_GPIO_ReadPin>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d003      	beq.n	8004ffe <checkAktifCalisma+0x10e>
 8004ff6:	4b24      	ldr	r3, [pc, #144]	; (8005088 <checkAktifCalisma+0x198>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d026      	beq.n	800504c <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004ffe:	4b24      	ldr	r3, [pc, #144]	; (8005090 <checkAktifCalisma+0x1a0>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	f083 0301 	eor.w	r3, r3, #1
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01f      	beq.n	800504c <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 800500c:	4b1f      	ldr	r3, [pc, #124]	; (800508c <checkAktifCalisma+0x19c>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	f083 0301 	eor.w	r3, r3, #1
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d018      	beq.n	800504c <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800501a:	4b20      	ldr	r3, [pc, #128]	; (800509c <checkAktifCalisma+0x1ac>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	f083 0301 	eor.w	r3, r3, #1
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d011      	beq.n	800504c <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8005028:	4b26      	ldr	r3, [pc, #152]	; (80050c4 <checkAktifCalisma+0x1d4>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	f083 0301 	eor.w	r3, r3, #1
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8005036:	4b24      	ldr	r3, [pc, #144]	; (80050c8 <checkAktifCalisma+0x1d8>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	f083 0301 	eor.w	r3, r3, #1
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8005044:	4b10      	ldr	r3, [pc, #64]	; (8005088 <checkAktifCalisma+0x198>)
 8005046:	2201      	movs	r2, #1
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	e002      	b.n	8005052 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 800504c:	4b0e      	ldr	r3, [pc, #56]	; (8005088 <checkAktifCalisma+0x198>)
 800504e:	2200      	movs	r2, #0
 8005050:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005052:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <checkAktifCalisma+0x198>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d03a      	beq.n	80050d0 <checkAktifCalisma+0x1e0>
 800505a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800505e:	4817      	ldr	r0, [pc, #92]	; (80050bc <checkAktifCalisma+0x1cc>)
 8005060:	f004 f9dc 	bl	800941c <HAL_GPIO_ReadPin>
 8005064:	4603      	mov	r3, r0
 8005066:	2b01      	cmp	r3, #1
 8005068:	d132      	bne.n	80050d0 <checkAktifCalisma+0x1e0>
 800506a:	4b18      	ldr	r3, [pc, #96]	; (80050cc <checkAktifCalisma+0x1dc>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d02e      	beq.n	80050d0 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005072:	2201      	movs	r2, #1
 8005074:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005078:	480c      	ldr	r0, [pc, #48]	; (80050ac <checkAktifCalisma+0x1bc>)
 800507a:	f004 f9e6 	bl	800944a <HAL_GPIO_WritePin>
 800507e:	e02d      	b.n	80050dc <checkAktifCalisma+0x1ec>
 8005080:	2000023e 	.word	0x2000023e
 8005084:	2000023d 	.word	0x2000023d
 8005088:	20000255 	.word	0x20000255
 800508c:	20000256 	.word	0x20000256
 8005090:	20000258 	.word	0x20000258
 8005094:	20000250 	.word	0x20000250
 8005098:	20000233 	.word	0x20000233
 800509c:	20000257 	.word	0x20000257
 80050a0:	20000232 	.word	0x20000232
 80050a4:	20000272 	.word	0x20000272
 80050a8:	20000273 	.word	0x20000273
 80050ac:	40010c00 	.word	0x40010c00
 80050b0:	20000274 	.word	0x20000274
 80050b4:	2000025f 	.word	0x2000025f
 80050b8:	2000025c 	.word	0x2000025c
 80050bc:	40011000 	.word	0x40011000
 80050c0:	20000223 	.word	0x20000223
 80050c4:	2000025a 	.word	0x2000025a
 80050c8:	2000025b 	.word	0x2000025b
 80050cc:	2000022e 	.word	0x2000022e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80050d0:	2200      	movs	r2, #0
 80050d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050d6:	4860      	ldr	r0, [pc, #384]	; (8005258 <checkAktifCalisma+0x368>)
 80050d8:	f004 f9b7 	bl	800944a <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80050dc:	4b5f      	ldr	r3, [pc, #380]	; (800525c <checkAktifCalisma+0x36c>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d013      	beq.n	800510c <checkAktifCalisma+0x21c>
 80050e4:	4b5e      	ldr	r3, [pc, #376]	; (8005260 <checkAktifCalisma+0x370>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d007      	beq.n	80050fc <checkAktifCalisma+0x20c>
 80050ec:	4b5c      	ldr	r3, [pc, #368]	; (8005260 <checkAktifCalisma+0x370>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d003      	beq.n	80050fc <checkAktifCalisma+0x20c>
 80050f4:	4b5b      	ldr	r3, [pc, #364]	; (8005264 <checkAktifCalisma+0x374>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d107      	bne.n	800510c <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80050fc:	2201      	movs	r2, #1
 80050fe:	2104      	movs	r1, #4
 8005100:	4855      	ldr	r0, [pc, #340]	; (8005258 <checkAktifCalisma+0x368>)
 8005102:	f004 f9a2 	bl	800944a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8005106:	4b58      	ldr	r3, [pc, #352]	; (8005268 <checkAktifCalisma+0x378>)
 8005108:	2201      	movs	r2, #1
 800510a:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800510c:	4b56      	ldr	r3, [pc, #344]	; (8005268 <checkAktifCalisma+0x378>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d02f      	beq.n	8005174 <checkAktifCalisma+0x284>
 8005114:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005118:	484f      	ldr	r0, [pc, #316]	; (8005258 <checkAktifCalisma+0x368>)
 800511a:	f004 f97f 	bl	800941c <HAL_GPIO_ReadPin>
 800511e:	4603      	mov	r3, r0
 8005120:	2b01      	cmp	r3, #1
 8005122:	d106      	bne.n	8005132 <checkAktifCalisma+0x242>
 8005124:	4b51      	ldr	r3, [pc, #324]	; (800526c <checkAktifCalisma+0x37c>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	f083 0301 	eor.w	r3, r3, #1
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <checkAktifCalisma+0x250>
 8005132:	2102      	movs	r1, #2
 8005134:	484e      	ldr	r0, [pc, #312]	; (8005270 <checkAktifCalisma+0x380>)
 8005136:	f004 f971 	bl	800941c <HAL_GPIO_ReadPin>
 800513a:	4603      	mov	r3, r0
 800513c:	2b01      	cmp	r3, #1
 800513e:	d119      	bne.n	8005174 <checkAktifCalisma+0x284>
 8005140:	4b4c      	ldr	r3, [pc, #304]	; (8005274 <checkAktifCalisma+0x384>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d015      	beq.n	8005174 <checkAktifCalisma+0x284>
 8005148:	4b4b      	ldr	r3, [pc, #300]	; (8005278 <checkAktifCalisma+0x388>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d011      	beq.n	8005174 <checkAktifCalisma+0x284>
 8005150:	4b4a      	ldr	r3, [pc, #296]	; (800527c <checkAktifCalisma+0x38c>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00d      	beq.n	8005174 <checkAktifCalisma+0x284>
 8005158:	4b49      	ldr	r3, [pc, #292]	; (8005280 <checkAktifCalisma+0x390>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	f083 0301 	eor.w	r3, r3, #1
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d006      	beq.n	8005174 <checkAktifCalisma+0x284>
			timer2=millis;
 8005166:	4b47      	ldr	r3, [pc, #284]	; (8005284 <checkAktifCalisma+0x394>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a47      	ldr	r2, [pc, #284]	; (8005288 <checkAktifCalisma+0x398>)
 800516c:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 800516e:	4b44      	ldr	r3, [pc, #272]	; (8005280 <checkAktifCalisma+0x390>)
 8005170:	2201      	movs	r2, #1
 8005172:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005174:	4b43      	ldr	r3, [pc, #268]	; (8005284 <checkAktifCalisma+0x394>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b43      	ldr	r3, [pc, #268]	; (8005288 <checkAktifCalisma+0x398>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	4a43      	ldr	r2, [pc, #268]	; (800528c <checkAktifCalisma+0x39c>)
 8005180:	7812      	ldrb	r2, [r2, #0]
 8005182:	4293      	cmp	r3, r2
 8005184:	d303      	bcc.n	800518e <checkAktifCalisma+0x29e>
 8005186:	4b3e      	ldr	r3, [pc, #248]	; (8005280 <checkAktifCalisma+0x390>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d111      	bne.n	80051b2 <checkAktifCalisma+0x2c2>
 800518e:	4b39      	ldr	r3, [pc, #228]	; (8005274 <checkAktifCalisma+0x384>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	f083 0301 	eor.w	r3, r3, #1
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <checkAktifCalisma+0x2c2>
 800519c:	4b36      	ldr	r3, [pc, #216]	; (8005278 <checkAktifCalisma+0x388>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	f083 0301 	eor.w	r3, r3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <checkAktifCalisma+0x2c2>
 80051aa:	4b34      	ldr	r3, [pc, #208]	; (800527c <checkAktifCalisma+0x38c>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80051b2:	2200      	movs	r2, #0
 80051b4:	2104      	movs	r1, #4
 80051b6:	4828      	ldr	r0, [pc, #160]	; (8005258 <checkAktifCalisma+0x368>)
 80051b8:	f004 f947 	bl	800944a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80051bc:	4b2a      	ldr	r3, [pc, #168]	; (8005268 <checkAktifCalisma+0x378>)
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80051c2:	4b2f      	ldr	r3, [pc, #188]	; (8005280 <checkAktifCalisma+0x390>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80051c8:	4b31      	ldr	r3, [pc, #196]	; (8005290 <checkAktifCalisma+0x3a0>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d102      	bne.n	80051d6 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80051d0:	4b30      	ldr	r3, [pc, #192]	; (8005294 <checkAktifCalisma+0x3a4>)
 80051d2:	2201      	movs	r2, #1
 80051d4:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80051d6:	4b2e      	ldr	r3, [pc, #184]	; (8005290 <checkAktifCalisma+0x3a0>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d116      	bne.n	800520c <checkAktifCalisma+0x31c>
 80051de:	4b2e      	ldr	r3, [pc, #184]	; (8005298 <checkAktifCalisma+0x3a8>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d112      	bne.n	800520c <checkAktifCalisma+0x31c>
 80051e6:	2101      	movs	r1, #1
 80051e8:	4821      	ldr	r0, [pc, #132]	; (8005270 <checkAktifCalisma+0x380>)
 80051ea:	f004 f917 	bl	800941c <HAL_GPIO_ReadPin>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <checkAktifCalisma+0x31c>
 80051f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051f8:	4817      	ldr	r0, [pc, #92]	; (8005258 <checkAktifCalisma+0x368>)
 80051fa:	f004 f90f 	bl	800941c <HAL_GPIO_ReadPin>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d103      	bne.n	800520c <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005204:	4b23      	ldr	r3, [pc, #140]	; (8005294 <checkAktifCalisma+0x3a4>)
 8005206:	2201      	movs	r2, #1
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e011      	b.n	8005230 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800520c:	4b20      	ldr	r3, [pc, #128]	; (8005290 <checkAktifCalisma+0x3a0>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d10d      	bne.n	8005230 <checkAktifCalisma+0x340>
 8005214:	2101      	movs	r1, #1
 8005216:	4816      	ldr	r0, [pc, #88]	; (8005270 <checkAktifCalisma+0x380>)
 8005218:	f004 f900 	bl	800941c <HAL_GPIO_ReadPin>
 800521c:	4603      	mov	r3, r0
 800521e:	2b01      	cmp	r3, #1
 8005220:	d106      	bne.n	8005230 <checkAktifCalisma+0x340>
 8005222:	4b1d      	ldr	r3, [pc, #116]	; (8005298 <checkAktifCalisma+0x3a8>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d102      	bne.n	8005230 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800522a:	4b1a      	ldr	r3, [pc, #104]	; (8005294 <checkAktifCalisma+0x3a4>)
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005230:	4b17      	ldr	r3, [pc, #92]	; (8005290 <checkAktifCalisma+0x3a0>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d134      	bne.n	80052a2 <checkAktifCalisma+0x3b2>
 8005238:	4b17      	ldr	r3, [pc, #92]	; (8005298 <checkAktifCalisma+0x3a8>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d130      	bne.n	80052a2 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005240:	2101      	movs	r1, #1
 8005242:	480b      	ldr	r0, [pc, #44]	; (8005270 <checkAktifCalisma+0x380>)
 8005244:	f004 f8ea 	bl	800941c <HAL_GPIO_ReadPin>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d126      	bne.n	800529c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800524e:	4b11      	ldr	r3, [pc, #68]	; (8005294 <checkAktifCalisma+0x3a4>)
 8005250:	2201      	movs	r2, #1
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	e025      	b.n	80052a2 <checkAktifCalisma+0x3b2>
 8005256:	bf00      	nop
 8005258:	40010c00 	.word	0x40010c00
 800525c:	20000255 	.word	0x20000255
 8005260:	2000022f 	.word	0x2000022f
 8005264:	20000233 	.word	0x20000233
 8005268:	20000259 	.word	0x20000259
 800526c:	2000025c 	.word	0x2000025c
 8005270:	40011000 	.word	0x40011000
 8005274:	20000272 	.word	0x20000272
 8005278:	20000273 	.word	0x20000273
 800527c:	20000223 	.word	0x20000223
 8005280:	20000251 	.word	0x20000251
 8005284:	200001fc 	.word	0x200001fc
 8005288:	20000208 	.word	0x20000208
 800528c:	20000234 	.word	0x20000234
 8005290:	20000224 	.word	0x20000224
 8005294:	20000277 	.word	0x20000277
 8005298:	20000221 	.word	0x20000221
			} else {
				cerceveVar=0;
 800529c:	4b7f      	ldr	r3, [pc, #508]	; (800549c <checkAktifCalisma+0x5ac>)
 800529e:	2200      	movs	r2, #0
 80052a0:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80052a2:	4b7f      	ldr	r3, [pc, #508]	; (80054a0 <checkAktifCalisma+0x5b0>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d17c      	bne.n	80053a4 <checkAktifCalisma+0x4b4>
 80052aa:	4b7e      	ldr	r3, [pc, #504]	; (80054a4 <checkAktifCalisma+0x5b4>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d078      	beq.n	80053a4 <checkAktifCalisma+0x4b4>
 80052b2:	4b7d      	ldr	r3, [pc, #500]	; (80054a8 <checkAktifCalisma+0x5b8>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d074      	beq.n	80053a4 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80052ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052be:	487b      	ldr	r0, [pc, #492]	; (80054ac <checkAktifCalisma+0x5bc>)
 80052c0:	f004 f8ac 	bl	800941c <HAL_GPIO_ReadPin>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <checkAktifCalisma+0x3e2>
 80052ca:	4b79      	ldr	r3, [pc, #484]	; (80054b0 <checkAktifCalisma+0x5c0>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d068      	beq.n	80053a4 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80052d2:	4b72      	ldr	r3, [pc, #456]	; (800549c <checkAktifCalisma+0x5ac>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d064      	beq.n	80053a4 <checkAktifCalisma+0x4b4>
 80052da:	4b76      	ldr	r3, [pc, #472]	; (80054b4 <checkAktifCalisma+0x5c4>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	f083 0301 	eor.w	r3, r3, #1
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d05d      	beq.n	80053a4 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80052e8:	2104      	movs	r1, #4
 80052ea:	4873      	ldr	r0, [pc, #460]	; (80054b8 <checkAktifCalisma+0x5c8>)
 80052ec:	f004 f896 	bl	800941c <HAL_GPIO_ReadPin>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <checkAktifCalisma+0x40e>
 80052f6:	4b71      	ldr	r3, [pc, #452]	; (80054bc <checkAktifCalisma+0x5cc>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d152      	bne.n	80053a4 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80052fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005302:	486a      	ldr	r0, [pc, #424]	; (80054ac <checkAktifCalisma+0x5bc>)
 8005304:	f004 f88a 	bl	800941c <HAL_GPIO_ReadPin>
 8005308:	4603      	mov	r3, r0
 800530a:	2b01      	cmp	r3, #1
 800530c:	d10e      	bne.n	800532c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800530e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005312:	4866      	ldr	r0, [pc, #408]	; (80054ac <checkAktifCalisma+0x5bc>)
 8005314:	f004 f882 	bl	800941c <HAL_GPIO_ReadPin>
 8005318:	4603      	mov	r3, r0
 800531a:	2b01      	cmp	r3, #1
 800531c:	d106      	bne.n	800532c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800531e:	2140      	movs	r1, #64	; 0x40
 8005320:	4865      	ldr	r0, [pc, #404]	; (80054b8 <checkAktifCalisma+0x5c8>)
 8005322:	f004 f87b 	bl	800941c <HAL_GPIO_ReadPin>
 8005326:	4603      	mov	r3, r0
 8005328:	2b01      	cmp	r3, #1
 800532a:	d003      	beq.n	8005334 <checkAktifCalisma+0x444>
 800532c:	4b64      	ldr	r3, [pc, #400]	; (80054c0 <checkAktifCalisma+0x5d0>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d037      	beq.n	80053a4 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005334:	4b63      	ldr	r3, [pc, #396]	; (80054c4 <checkAktifCalisma+0x5d4>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	f083 0301 	eor.w	r3, r3, #1
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d030      	beq.n	80053a4 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005342:	4b61      	ldr	r3, [pc, #388]	; (80054c8 <checkAktifCalisma+0x5d8>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	f083 0301 	eor.w	r3, r3, #1
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d029      	beq.n	80053a4 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005350:	4b5e      	ldr	r3, [pc, #376]	; (80054cc <checkAktifCalisma+0x5dc>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f083 0301 	eor.w	r3, r3, #1
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d022      	beq.n	80053a4 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800535e:	4b5c      	ldr	r3, [pc, #368]	; (80054d0 <checkAktifCalisma+0x5e0>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	f083 0301 	eor.w	r3, r3, #1
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01b      	beq.n	80053a4 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 800536c:	4b59      	ldr	r3, [pc, #356]	; (80054d4 <checkAktifCalisma+0x5e4>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	f083 0301 	eor.w	r3, r3, #1
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d014      	beq.n	80053a4 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800537a:	4b57      	ldr	r3, [pc, #348]	; (80054d8 <checkAktifCalisma+0x5e8>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	f083 0301 	eor.w	r3, r3, #1
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00d      	beq.n	80053a4 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005388:	2201      	movs	r2, #1
 800538a:	2102      	movs	r1, #2
 800538c:	4847      	ldr	r0, [pc, #284]	; (80054ac <checkAktifCalisma+0x5bc>)
 800538e:	f004 f85c 	bl	800944a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005392:	4b4b      	ldr	r3, [pc, #300]	; (80054c0 <checkAktifCalisma+0x5d0>)
 8005394:	2201      	movs	r2, #1
 8005396:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005398:	4b50      	ldr	r3, [pc, #320]	; (80054dc <checkAktifCalisma+0x5ec>)
 800539a:	2201      	movs	r2, #1
 800539c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800539e:	4b50      	ldr	r3, [pc, #320]	; (80054e0 <checkAktifCalisma+0x5f0>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80053a4:	4b46      	ldr	r3, [pc, #280]	; (80054c0 <checkAktifCalisma+0x5d0>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d033      	beq.n	8005414 <checkAktifCalisma+0x524>
 80053ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053b0:	483e      	ldr	r0, [pc, #248]	; (80054ac <checkAktifCalisma+0x5bc>)
 80053b2:	f004 f833 	bl	800941c <HAL_GPIO_ReadPin>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d106      	bne.n	80053ca <checkAktifCalisma+0x4da>
 80053bc:	4b3c      	ldr	r3, [pc, #240]	; (80054b0 <checkAktifCalisma+0x5c0>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	f083 0301 	eor.w	r3, r3, #1
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <checkAktifCalisma+0x4f0>
 80053ca:	2104      	movs	r1, #4
 80053cc:	483a      	ldr	r0, [pc, #232]	; (80054b8 <checkAktifCalisma+0x5c8>)
 80053ce:	f004 f825 	bl	800941c <HAL_GPIO_ReadPin>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d11d      	bne.n	8005414 <checkAktifCalisma+0x524>
 80053d8:	4b38      	ldr	r3, [pc, #224]	; (80054bc <checkAktifCalisma+0x5cc>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d019      	beq.n	8005414 <checkAktifCalisma+0x524>
 80053e0:	4b30      	ldr	r3, [pc, #192]	; (80054a4 <checkAktifCalisma+0x5b4>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d015      	beq.n	8005414 <checkAktifCalisma+0x524>
 80053e8:	4b2f      	ldr	r3, [pc, #188]	; (80054a8 <checkAktifCalisma+0x5b8>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d011      	beq.n	8005414 <checkAktifCalisma+0x524>
 80053f0:	4b2a      	ldr	r3, [pc, #168]	; (800549c <checkAktifCalisma+0x5ac>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00d      	beq.n	8005414 <checkAktifCalisma+0x524>
 80053f8:	4b3a      	ldr	r3, [pc, #232]	; (80054e4 <checkAktifCalisma+0x5f4>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	f083 0301 	eor.w	r3, r3, #1
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d006      	beq.n	8005414 <checkAktifCalisma+0x524>
			timer2=millis;
 8005406:	4b38      	ldr	r3, [pc, #224]	; (80054e8 <checkAktifCalisma+0x5f8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a38      	ldr	r2, [pc, #224]	; (80054ec <checkAktifCalisma+0x5fc>)
 800540c:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800540e:	4b35      	ldr	r3, [pc, #212]	; (80054e4 <checkAktifCalisma+0x5f4>)
 8005410:	2201      	movs	r2, #1
 8005412:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005414:	4b34      	ldr	r3, [pc, #208]	; (80054e8 <checkAktifCalisma+0x5f8>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4b34      	ldr	r3, [pc, #208]	; (80054ec <checkAktifCalisma+0x5fc>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	4a34      	ldr	r2, [pc, #208]	; (80054f0 <checkAktifCalisma+0x600>)
 8005420:	7812      	ldrb	r2, [r2, #0]
 8005422:	4293      	cmp	r3, r2
 8005424:	d303      	bcc.n	800542e <checkAktifCalisma+0x53e>
 8005426:	4b2f      	ldr	r3, [pc, #188]	; (80054e4 <checkAktifCalisma+0x5f4>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d114      	bne.n	8005458 <checkAktifCalisma+0x568>
 800542e:	4b1d      	ldr	r3, [pc, #116]	; (80054a4 <checkAktifCalisma+0x5b4>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	f083 0301 	eor.w	r3, r3, #1
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10d      	bne.n	8005458 <checkAktifCalisma+0x568>
 800543c:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <checkAktifCalisma+0x5b8>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	f083 0301 	eor.w	r3, r3, #1
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <checkAktifCalisma+0x568>
 800544a:	4b14      	ldr	r3, [pc, #80]	; (800549c <checkAktifCalisma+0x5ac>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	f083 0301 	eor.w	r3, r3, #1
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005458:	2200      	movs	r2, #0
 800545a:	2102      	movs	r1, #2
 800545c:	4813      	ldr	r0, [pc, #76]	; (80054ac <checkAktifCalisma+0x5bc>)
 800545e:	f003 fff4 	bl	800944a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005462:	4b17      	ldr	r3, [pc, #92]	; (80054c0 <checkAktifCalisma+0x5d0>)
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005468:	4b1e      	ldr	r3, [pc, #120]	; (80054e4 <checkAktifCalisma+0x5f4>)
 800546a:	2200      	movs	r2, #0
 800546c:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800546e:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <checkAktifCalisma+0x5d0>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d040      	beq.n	80054f8 <checkAktifCalisma+0x608>
 8005476:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800547a:	480f      	ldr	r0, [pc, #60]	; (80054b8 <checkAktifCalisma+0x5c8>)
 800547c:	f003 ffce 	bl	800941c <HAL_GPIO_ReadPin>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d138      	bne.n	80054f8 <checkAktifCalisma+0x608>
 8005486:	4b1b      	ldr	r3, [pc, #108]	; (80054f4 <checkAktifCalisma+0x604>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d034      	beq.n	80054f8 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800548e:	2201      	movs	r2, #1
 8005490:	2101      	movs	r1, #1
 8005492:	4806      	ldr	r0, [pc, #24]	; (80054ac <checkAktifCalisma+0x5bc>)
 8005494:	f003 ffd9 	bl	800944a <HAL_GPIO_WritePin>
 8005498:	e033      	b.n	8005502 <checkAktifCalisma+0x612>
 800549a:	bf00      	nop
 800549c:	20000277 	.word	0x20000277
 80054a0:	2000023d 	.word	0x2000023d
 80054a4:	20000272 	.word	0x20000272
 80054a8:	20000273 	.word	0x20000273
 80054ac:	40010c00 	.word	0x40010c00
 80054b0:	2000025d 	.word	0x2000025d
 80054b4:	20000271 	.word	0x20000271
 80054b8:	40011000 	.word	0x40011000
 80054bc:	20000226 	.word	0x20000226
 80054c0:	20000258 	.word	0x20000258
 80054c4:	20000255 	.word	0x20000255
 80054c8:	20000259 	.word	0x20000259
 80054cc:	20000256 	.word	0x20000256
 80054d0:	20000257 	.word	0x20000257
 80054d4:	2000025a 	.word	0x2000025a
 80054d8:	2000025b 	.word	0x2000025b
 80054dc:	20000260 	.word	0x20000260
 80054e0:	20000281 	.word	0x20000281
 80054e4:	20000250 	.word	0x20000250
 80054e8:	200001fc 	.word	0x200001fc
 80054ec:	20000208 	.word	0x20000208
 80054f0:	20000235 	.word	0x20000235
 80054f4:	20000225 	.word	0x20000225
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80054f8:	2200      	movs	r2, #0
 80054fa:	2101      	movs	r1, #1
 80054fc:	4836      	ldr	r0, [pc, #216]	; (80055d8 <checkAktifCalisma+0x6e8>)
 80054fe:	f003 ffa4 	bl	800944a <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005502:	4b36      	ldr	r3, [pc, #216]	; (80055dc <checkAktifCalisma+0x6ec>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f040 8080 	bne.w	800560c <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800550c:	4b34      	ldr	r3, [pc, #208]	; (80055e0 <checkAktifCalisma+0x6f0>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d003      	beq.n	800551c <checkAktifCalisma+0x62c>
 8005514:	4b32      	ldr	r3, [pc, #200]	; (80055e0 <checkAktifCalisma+0x6f0>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d177      	bne.n	800560c <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 800551c:	4b31      	ldr	r3, [pc, #196]	; (80055e4 <checkAktifCalisma+0x6f4>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d073      	beq.n	800560c <checkAktifCalisma+0x71c>
 8005524:	4b30      	ldr	r3, [pc, #192]	; (80055e8 <checkAktifCalisma+0x6f8>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d06f      	beq.n	800560c <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 800552c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005530:	4829      	ldr	r0, [pc, #164]	; (80055d8 <checkAktifCalisma+0x6e8>)
 8005532:	f003 ff73 	bl	800941c <HAL_GPIO_ReadPin>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d167      	bne.n	800560c <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 800553c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005540:	482a      	ldr	r0, [pc, #168]	; (80055ec <checkAktifCalisma+0x6fc>)
 8005542:	f003 ff6b 	bl	800941c <HAL_GPIO_ReadPin>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <checkAktifCalisma+0x664>
 800554c:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <checkAktifCalisma+0x700>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d15b      	bne.n	800560c <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005554:	2140      	movs	r1, #64	; 0x40
 8005556:	4825      	ldr	r0, [pc, #148]	; (80055ec <checkAktifCalisma+0x6fc>)
 8005558:	f003 ff60 	bl	800941c <HAL_GPIO_ReadPin>
 800555c:	4603      	mov	r3, r0
 800555e:	2b01      	cmp	r3, #1
 8005560:	d10f      	bne.n	8005582 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005566:	481c      	ldr	r0, [pc, #112]	; (80055d8 <checkAktifCalisma+0x6e8>)
 8005568:	f003 ff58 	bl	800941c <HAL_GPIO_ReadPin>
 800556c:	4603      	mov	r3, r0
 800556e:	2b01      	cmp	r3, #1
 8005570:	d107      	bne.n	8005582 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005576:	4818      	ldr	r0, [pc, #96]	; (80055d8 <checkAktifCalisma+0x6e8>)
 8005578:	f003 ff50 	bl	800941c <HAL_GPIO_ReadPin>
 800557c:	4603      	mov	r3, r0
 800557e:	2b01      	cmp	r3, #1
 8005580:	d003      	beq.n	800558a <checkAktifCalisma+0x69a>
 8005582:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <checkAktifCalisma+0x704>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d040      	beq.n	800560c <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800558a:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <checkAktifCalisma+0x708>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	f083 0301 	eor.w	r3, r3, #1
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d039      	beq.n	800560c <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005598:	4b18      	ldr	r3, [pc, #96]	; (80055fc <checkAktifCalisma+0x70c>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	f083 0301 	eor.w	r3, r3, #1
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d032      	beq.n	800560c <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80055a6:	4b16      	ldr	r3, [pc, #88]	; (8005600 <checkAktifCalisma+0x710>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	f083 0301 	eor.w	r3, r3, #1
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d02b      	beq.n	800560c <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80055b4:	4b13      	ldr	r3, [pc, #76]	; (8005604 <checkAktifCalisma+0x714>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	f083 0301 	eor.w	r3, r3, #1
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d024      	beq.n	800560c <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80055c2:	4b11      	ldr	r3, [pc, #68]	; (8005608 <checkAktifCalisma+0x718>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	f083 0301 	eor.w	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01d      	beq.n	800560c <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80055d0:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <checkAktifCalisma+0x704>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	e01c      	b.n	8005612 <checkAktifCalisma+0x722>
 80055d8:	40010c00 	.word	0x40010c00
 80055dc:	2000023d 	.word	0x2000023d
 80055e0:	2000022f 	.word	0x2000022f
 80055e4:	20000272 	.word	0x20000272
 80055e8:	20000273 	.word	0x20000273
 80055ec:	40011000 	.word	0x40011000
 80055f0:	20000230 	.word	0x20000230
 80055f4:	20000256 	.word	0x20000256
 80055f8:	20000255 	.word	0x20000255
 80055fc:	20000259 	.word	0x20000259
 8005600:	20000258 	.word	0x20000258
 8005604:	20000257 	.word	0x20000257
 8005608:	2000025b 	.word	0x2000025b
		} else {
			devmotoryukaricalisiyor=0;
 800560c:	4b64      	ldr	r3, [pc, #400]	; (80057a0 <checkAktifCalisma+0x8b0>)
 800560e:	2200      	movs	r2, #0
 8005610:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8005612:	4b63      	ldr	r3, [pc, #396]	; (80057a0 <checkAktifCalisma+0x8b0>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800561a:	2201      	movs	r2, #1
 800561c:	2120      	movs	r1, #32
 800561e:	4861      	ldr	r0, [pc, #388]	; (80057a4 <checkAktifCalisma+0x8b4>)
 8005620:	f003 ff13 	bl	800944a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005624:	4b60      	ldr	r3, [pc, #384]	; (80057a8 <checkAktifCalisma+0x8b8>)
 8005626:	2201      	movs	r2, #1
 8005628:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800562a:	4b5f      	ldr	r3, [pc, #380]	; (80057a8 <checkAktifCalisma+0x8b8>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d025      	beq.n	800567e <checkAktifCalisma+0x78e>
 8005632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005636:	485d      	ldr	r0, [pc, #372]	; (80057ac <checkAktifCalisma+0x8bc>)
 8005638:	f003 fef0 	bl	800941c <HAL_GPIO_ReadPin>
 800563c:	4603      	mov	r3, r0
 800563e:	2b01      	cmp	r3, #1
 8005640:	d007      	beq.n	8005652 <checkAktifCalisma+0x762>
 8005642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005646:	4857      	ldr	r0, [pc, #348]	; (80057a4 <checkAktifCalisma+0x8b4>)
 8005648:	f003 fee8 	bl	800941c <HAL_GPIO_ReadPin>
 800564c:	4603      	mov	r3, r0
 800564e:	2b01      	cmp	r3, #1
 8005650:	d115      	bne.n	800567e <checkAktifCalisma+0x78e>
 8005652:	4b57      	ldr	r3, [pc, #348]	; (80057b0 <checkAktifCalisma+0x8c0>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d011      	beq.n	800567e <checkAktifCalisma+0x78e>
 800565a:	4b56      	ldr	r3, [pc, #344]	; (80057b4 <checkAktifCalisma+0x8c4>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00d      	beq.n	800567e <checkAktifCalisma+0x78e>
 8005662:	4b55      	ldr	r3, [pc, #340]	; (80057b8 <checkAktifCalisma+0x8c8>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	f083 0301 	eor.w	r3, r3, #1
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d006      	beq.n	800567e <checkAktifCalisma+0x78e>
			timer2=millis;
 8005670:	4b52      	ldr	r3, [pc, #328]	; (80057bc <checkAktifCalisma+0x8cc>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a52      	ldr	r2, [pc, #328]	; (80057c0 <checkAktifCalisma+0x8d0>)
 8005676:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005678:	4b4f      	ldr	r3, [pc, #316]	; (80057b8 <checkAktifCalisma+0x8c8>)
 800567a:	2201      	movs	r2, #1
 800567c:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800567e:	4b4f      	ldr	r3, [pc, #316]	; (80057bc <checkAktifCalisma+0x8cc>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	4b4f      	ldr	r3, [pc, #316]	; (80057c0 <checkAktifCalisma+0x8d0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	4a4e      	ldr	r2, [pc, #312]	; (80057c4 <checkAktifCalisma+0x8d4>)
 800568a:	7812      	ldrb	r2, [r2, #0]
 800568c:	4293      	cmp	r3, r2
 800568e:	d303      	bcc.n	8005698 <checkAktifCalisma+0x7a8>
 8005690:	4b49      	ldr	r3, [pc, #292]	; (80057b8 <checkAktifCalisma+0x8c8>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10d      	bne.n	80056b4 <checkAktifCalisma+0x7c4>
 8005698:	4b45      	ldr	r3, [pc, #276]	; (80057b0 <checkAktifCalisma+0x8c0>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	f083 0301 	eor.w	r3, r3, #1
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <checkAktifCalisma+0x7c4>
 80056a6:	4b43      	ldr	r3, [pc, #268]	; (80057b4 <checkAktifCalisma+0x8c4>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	f083 0301 	eor.w	r3, r3, #1
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80056b4:	2200      	movs	r2, #0
 80056b6:	2120      	movs	r1, #32
 80056b8:	483a      	ldr	r0, [pc, #232]	; (80057a4 <checkAktifCalisma+0x8b4>)
 80056ba:	f003 fec6 	bl	800944a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80056be:	4b3a      	ldr	r3, [pc, #232]	; (80057a8 <checkAktifCalisma+0x8b8>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80056c4:	4b3c      	ldr	r3, [pc, #240]	; (80057b8 <checkAktifCalisma+0x8c8>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80056ca:	4b3f      	ldr	r3, [pc, #252]	; (80057c8 <checkAktifCalisma+0x8d8>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f040 8088 	bne.w	80057e4 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80056d4:	4b3d      	ldr	r3, [pc, #244]	; (80057cc <checkAktifCalisma+0x8dc>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d003      	beq.n	80056e4 <checkAktifCalisma+0x7f4>
 80056dc:	4b3b      	ldr	r3, [pc, #236]	; (80057cc <checkAktifCalisma+0x8dc>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d17f      	bne.n	80057e4 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80056e4:	4b32      	ldr	r3, [pc, #200]	; (80057b0 <checkAktifCalisma+0x8c0>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d07b      	beq.n	80057e4 <checkAktifCalisma+0x8f4>
 80056ec:	4b31      	ldr	r3, [pc, #196]	; (80057b4 <checkAktifCalisma+0x8c4>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d077      	beq.n	80057e4 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80056f4:	2140      	movs	r1, #64	; 0x40
 80056f6:	482b      	ldr	r0, [pc, #172]	; (80057a4 <checkAktifCalisma+0x8b4>)
 80056f8:	f003 fe90 	bl	800941c <HAL_GPIO_ReadPin>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d170      	bne.n	80057e4 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005706:	4827      	ldr	r0, [pc, #156]	; (80057a4 <checkAktifCalisma+0x8b4>)
 8005708:	f003 fe88 	bl	800941c <HAL_GPIO_ReadPin>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <checkAktifCalisma+0x82a>
 8005712:	4b2f      	ldr	r3, [pc, #188]	; (80057d0 <checkAktifCalisma+0x8e0>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d164      	bne.n	80057e4 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800571a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800571e:	4823      	ldr	r0, [pc, #140]	; (80057ac <checkAktifCalisma+0x8bc>)
 8005720:	f003 fe7c 	bl	800941c <HAL_GPIO_ReadPin>
 8005724:	4603      	mov	r3, r0
 8005726:	2b01      	cmp	r3, #1
 8005728:	d10f      	bne.n	800574a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800572a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800572e:	481f      	ldr	r0, [pc, #124]	; (80057ac <checkAktifCalisma+0x8bc>)
 8005730:	f003 fe74 	bl	800941c <HAL_GPIO_ReadPin>
 8005734:	4603      	mov	r3, r0
 8005736:	2b01      	cmp	r3, #1
 8005738:	d107      	bne.n	800574a <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800573a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800573e:	481b      	ldr	r0, [pc, #108]	; (80057ac <checkAktifCalisma+0x8bc>)
 8005740:	f003 fe6c 	bl	800941c <HAL_GPIO_ReadPin>
 8005744:	4603      	mov	r3, r0
 8005746:	2b01      	cmp	r3, #1
 8005748:	d003      	beq.n	8005752 <checkAktifCalisma+0x862>
 800574a:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <checkAktifCalisma+0x8e4>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d048      	beq.n	80057e4 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005752:	4b21      	ldr	r3, [pc, #132]	; (80057d8 <checkAktifCalisma+0x8e8>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	f083 0301 	eor.w	r3, r3, #1
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d041      	beq.n	80057e4 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005760:	4b1e      	ldr	r3, [pc, #120]	; (80057dc <checkAktifCalisma+0x8ec>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f083 0301 	eor.w	r3, r3, #1
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d03a      	beq.n	80057e4 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800576e:	4b1c      	ldr	r3, [pc, #112]	; (80057e0 <checkAktifCalisma+0x8f0>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f083 0301 	eor.w	r3, r3, #1
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d033      	beq.n	80057e4 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 800577c:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <checkAktifCalisma+0x8b8>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f083 0301 	eor.w	r3, r3, #1
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d02c      	beq.n	80057e4 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800578a:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <checkAktifCalisma+0x8b0>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f083 0301 	eor.w	r3, r3, #1
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d025      	beq.n	80057e4 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005798:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <checkAktifCalisma+0x8e4>)
 800579a:	2201      	movs	r2, #1
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	e024      	b.n	80057ea <checkAktifCalisma+0x8fa>
 80057a0:	20000256 	.word	0x20000256
 80057a4:	40011000 	.word	0x40011000
 80057a8:	2000025a 	.word	0x2000025a
 80057ac:	40010c00 	.word	0x40010c00
 80057b0:	20000272 	.word	0x20000272
 80057b4:	20000273 	.word	0x20000273
 80057b8:	20000252 	.word	0x20000252
 80057bc:	200001fc 	.word	0x200001fc
 80057c0:	20000208 	.word	0x20000208
 80057c4:	20000236 	.word	0x20000236
 80057c8:	2000023d 	.word	0x2000023d
 80057cc:	2000022f 	.word	0x2000022f
 80057d0:	20000231 	.word	0x20000231
 80057d4:	20000257 	.word	0x20000257
 80057d8:	20000255 	.word	0x20000255
 80057dc:	20000259 	.word	0x20000259
 80057e0:	20000258 	.word	0x20000258
		} else {
			devmotorasagicalisiyor=0;
 80057e4:	4b96      	ldr	r3, [pc, #600]	; (8005a40 <checkAktifCalisma+0xb50>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80057ea:	4b95      	ldr	r3, [pc, #596]	; (8005a40 <checkAktifCalisma+0xb50>)
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d007      	beq.n	8005802 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80057f2:	2201      	movs	r2, #1
 80057f4:	2110      	movs	r1, #16
 80057f6:	4893      	ldr	r0, [pc, #588]	; (8005a44 <checkAktifCalisma+0xb54>)
 80057f8:	f003 fe27 	bl	800944a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80057fc:	4b92      	ldr	r3, [pc, #584]	; (8005a48 <checkAktifCalisma+0xb58>)
 80057fe:	2201      	movs	r2, #1
 8005800:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005802:	4b91      	ldr	r3, [pc, #580]	; (8005a48 <checkAktifCalisma+0xb58>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d024      	beq.n	8005854 <checkAktifCalisma+0x964>
 800580a:	2140      	movs	r1, #64	; 0x40
 800580c:	488d      	ldr	r0, [pc, #564]	; (8005a44 <checkAktifCalisma+0xb54>)
 800580e:	f003 fe05 	bl	800941c <HAL_GPIO_ReadPin>
 8005812:	4603      	mov	r3, r0
 8005814:	2b01      	cmp	r3, #1
 8005816:	d007      	beq.n	8005828 <checkAktifCalisma+0x938>
 8005818:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800581c:	4889      	ldr	r0, [pc, #548]	; (8005a44 <checkAktifCalisma+0xb54>)
 800581e:	f003 fdfd 	bl	800941c <HAL_GPIO_ReadPin>
 8005822:	4603      	mov	r3, r0
 8005824:	2b01      	cmp	r3, #1
 8005826:	d115      	bne.n	8005854 <checkAktifCalisma+0x964>
 8005828:	4b88      	ldr	r3, [pc, #544]	; (8005a4c <checkAktifCalisma+0xb5c>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d011      	beq.n	8005854 <checkAktifCalisma+0x964>
 8005830:	4b87      	ldr	r3, [pc, #540]	; (8005a50 <checkAktifCalisma+0xb60>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00d      	beq.n	8005854 <checkAktifCalisma+0x964>
 8005838:	4b86      	ldr	r3, [pc, #536]	; (8005a54 <checkAktifCalisma+0xb64>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f083 0301 	eor.w	r3, r3, #1
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d006      	beq.n	8005854 <checkAktifCalisma+0x964>
			timer2=millis;
 8005846:	4b84      	ldr	r3, [pc, #528]	; (8005a58 <checkAktifCalisma+0xb68>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a84      	ldr	r2, [pc, #528]	; (8005a5c <checkAktifCalisma+0xb6c>)
 800584c:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800584e:	4b81      	ldr	r3, [pc, #516]	; (8005a54 <checkAktifCalisma+0xb64>)
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005854:	4b80      	ldr	r3, [pc, #512]	; (8005a58 <checkAktifCalisma+0xb68>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	4b80      	ldr	r3, [pc, #512]	; (8005a5c <checkAktifCalisma+0xb6c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	4a80      	ldr	r2, [pc, #512]	; (8005a60 <checkAktifCalisma+0xb70>)
 8005860:	7812      	ldrb	r2, [r2, #0]
 8005862:	4293      	cmp	r3, r2
 8005864:	d303      	bcc.n	800586e <checkAktifCalisma+0x97e>
 8005866:	4b7b      	ldr	r3, [pc, #492]	; (8005a54 <checkAktifCalisma+0xb64>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10d      	bne.n	800588a <checkAktifCalisma+0x99a>
 800586e:	4b77      	ldr	r3, [pc, #476]	; (8005a4c <checkAktifCalisma+0xb5c>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	f083 0301 	eor.w	r3, r3, #1
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d106      	bne.n	800588a <checkAktifCalisma+0x99a>
 800587c:	4b74      	ldr	r3, [pc, #464]	; (8005a50 <checkAktifCalisma+0xb60>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	f083 0301 	eor.w	r3, r3, #1
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800588a:	2200      	movs	r2, #0
 800588c:	2110      	movs	r1, #16
 800588e:	486d      	ldr	r0, [pc, #436]	; (8005a44 <checkAktifCalisma+0xb54>)
 8005890:	f003 fddb 	bl	800944a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005894:	4b6c      	ldr	r3, [pc, #432]	; (8005a48 <checkAktifCalisma+0xb58>)
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800589a:	4b6e      	ldr	r3, [pc, #440]	; (8005a54 <checkAktifCalisma+0xb64>)
 800589c:	2200      	movs	r2, #0
 800589e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80058a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058a4:	486f      	ldr	r0, [pc, #444]	; (8005a64 <checkAktifCalisma+0xb74>)
 80058a6:	f003 fdb9 	bl	800941c <HAL_GPIO_ReadPin>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d120      	bne.n	80058f2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80058b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058b4:	486b      	ldr	r0, [pc, #428]	; (8005a64 <checkAktifCalisma+0xb74>)
 80058b6:	f003 fdb1 	bl	800941c <HAL_GPIO_ReadPin>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d118      	bne.n	80058f2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80058c0:	2104      	movs	r1, #4
 80058c2:	4868      	ldr	r0, [pc, #416]	; (8005a64 <checkAktifCalisma+0xb74>)
 80058c4:	f003 fdaa 	bl	800941c <HAL_GPIO_ReadPin>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d111      	bne.n	80058f2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80058ce:	2102      	movs	r1, #2
 80058d0:	4864      	ldr	r0, [pc, #400]	; (8005a64 <checkAktifCalisma+0xb74>)
 80058d2:	f003 fda3 	bl	800941c <HAL_GPIO_ReadPin>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80058dc:	2101      	movs	r1, #1
 80058de:	4861      	ldr	r0, [pc, #388]	; (8005a64 <checkAktifCalisma+0xb74>)
 80058e0:	f003 fd9c 	bl	800941c <HAL_GPIO_ReadPin>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <checkAktifCalisma+0xa02>
			makineStop=1;
 80058ea:	4b5f      	ldr	r3, [pc, #380]	; (8005a68 <checkAktifCalisma+0xb78>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	701a      	strb	r2, [r3, #0]
 80058f0:	e002      	b.n	80058f8 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80058f2:	4b5d      	ldr	r3, [pc, #372]	; (8005a68 <checkAktifCalisma+0xb78>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058f8:	4b5c      	ldr	r3, [pc, #368]	; (8005a6c <checkAktifCalisma+0xb7c>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d144      	bne.n	800598a <checkAktifCalisma+0xa9a>
 8005900:	4b5b      	ldr	r3, [pc, #364]	; (8005a70 <checkAktifCalisma+0xb80>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d003      	beq.n	8005910 <checkAktifCalisma+0xa20>
 8005908:	4b59      	ldr	r3, [pc, #356]	; (8005a70 <checkAktifCalisma+0xb80>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b03      	cmp	r3, #3
 800590e:	d13c      	bne.n	800598a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005910:	2180      	movs	r1, #128	; 0x80
 8005912:	484c      	ldr	r0, [pc, #304]	; (8005a44 <checkAktifCalisma+0xb54>)
 8005914:	f003 fd82 	bl	800941c <HAL_GPIO_ReadPin>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d103      	bne.n	8005926 <checkAktifCalisma+0xa36>
 800591e:	4b55      	ldr	r3, [pc, #340]	; (8005a74 <checkAktifCalisma+0xb84>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00b      	beq.n	800593e <checkAktifCalisma+0xa4e>
 8005926:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800592a:	484e      	ldr	r0, [pc, #312]	; (8005a64 <checkAktifCalisma+0xb74>)
 800592c:	f003 fd76 	bl	800941c <HAL_GPIO_ReadPin>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d129      	bne.n	800598a <checkAktifCalisma+0xa9a>
 8005936:	4b4f      	ldr	r3, [pc, #316]	; (8005a74 <checkAktifCalisma+0xb84>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d125      	bne.n	800598a <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800593e:	2104      	movs	r1, #4
 8005940:	4840      	ldr	r0, [pc, #256]	; (8005a44 <checkAktifCalisma+0xb54>)
 8005942:	f003 fd6b 	bl	800941c <HAL_GPIO_ReadPin>
 8005946:	4603      	mov	r3, r0
 8005948:	2b01      	cmp	r3, #1
 800594a:	d003      	beq.n	8005954 <checkAktifCalisma+0xa64>
 800594c:	4b4a      	ldr	r3, [pc, #296]	; (8005a78 <checkAktifCalisma+0xb88>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d11a      	bne.n	800598a <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005954:	2102      	movs	r1, #2
 8005956:	483b      	ldr	r0, [pc, #236]	; (8005a44 <checkAktifCalisma+0xb54>)
 8005958:	f003 fd60 	bl	800941c <HAL_GPIO_ReadPin>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d113      	bne.n	800598a <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005962:	4b46      	ldr	r3, [pc, #280]	; (8005a7c <checkAktifCalisma+0xb8c>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	f083 0301 	eor.w	r3, r3, #1
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00c      	beq.n	800598a <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005970:	4b3d      	ldr	r3, [pc, #244]	; (8005a68 <checkAktifCalisma+0xb78>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d008      	beq.n	800598a <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005978:	4b41      	ldr	r3, [pc, #260]	; (8005a80 <checkAktifCalisma+0xb90>)
 800597a:	2201      	movs	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800597e:	4b36      	ldr	r3, [pc, #216]	; (8005a58 <checkAktifCalisma+0xb68>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a40      	ldr	r2, [pc, #256]	; (8005a84 <checkAktifCalisma+0xb94>)
 8005984:	6013      	str	r3, [r2, #0]
			bekle();
 8005986:	f7ff f935 	bl	8004bf4 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800598a:	4b33      	ldr	r3, [pc, #204]	; (8005a58 <checkAktifCalisma+0xb68>)
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	4b3d      	ldr	r3, [pc, #244]	; (8005a84 <checkAktifCalisma+0xb94>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	4a3c      	ldr	r2, [pc, #240]	; (8005a88 <checkAktifCalisma+0xb98>)
 8005996:	7812      	ldrb	r2, [r2, #0]
 8005998:	4293      	cmp	r3, r2
 800599a:	d211      	bcs.n	80059c0 <checkAktifCalisma+0xad0>
 800599c:	2104      	movs	r1, #4
 800599e:	4829      	ldr	r0, [pc, #164]	; (8005a44 <checkAktifCalisma+0xb54>)
 80059a0:	f003 fd3c 	bl	800941c <HAL_GPIO_ReadPin>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <checkAktifCalisma+0xad0>
 80059aa:	4b33      	ldr	r3, [pc, #204]	; (8005a78 <checkAktifCalisma+0xb88>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d006      	beq.n	80059c0 <checkAktifCalisma+0xad0>
 80059b2:	4b2d      	ldr	r3, [pc, #180]	; (8005a68 <checkAktifCalisma+0xb78>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	f083 0301 	eor.w	r3, r3, #1
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80059c0:	4b2f      	ldr	r3, [pc, #188]	; (8005a80 <checkAktifCalisma+0xb90>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059c6:	4b29      	ldr	r3, [pc, #164]	; (8005a6c <checkAktifCalisma+0xb7c>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d160      	bne.n	8005a90 <checkAktifCalisma+0xba0>
 80059ce:	4b28      	ldr	r3, [pc, #160]	; (8005a70 <checkAktifCalisma+0xb80>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d003      	beq.n	80059de <checkAktifCalisma+0xaee>
 80059d6:	4b26      	ldr	r3, [pc, #152]	; (8005a70 <checkAktifCalisma+0xb80>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d158      	bne.n	8005a90 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80059de:	2104      	movs	r1, #4
 80059e0:	4818      	ldr	r0, [pc, #96]	; (8005a44 <checkAktifCalisma+0xb54>)
 80059e2:	f003 fd1b 	bl	800941c <HAL_GPIO_ReadPin>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d003      	beq.n	80059f4 <checkAktifCalisma+0xb04>
 80059ec:	4b22      	ldr	r3, [pc, #136]	; (8005a78 <checkAktifCalisma+0xb88>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d14d      	bne.n	8005a90 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80059f4:	2102      	movs	r1, #2
 80059f6:	4813      	ldr	r0, [pc, #76]	; (8005a44 <checkAktifCalisma+0xb54>)
 80059f8:	f003 fd10 	bl	800941c <HAL_GPIO_ReadPin>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d146      	bne.n	8005a90 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a02:	2180      	movs	r1, #128	; 0x80
 8005a04:	480f      	ldr	r0, [pc, #60]	; (8005a44 <checkAktifCalisma+0xb54>)
 8005a06:	f003 fd09 	bl	800941c <HAL_GPIO_ReadPin>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d103      	bne.n	8005a18 <checkAktifCalisma+0xb28>
 8005a10:	4b18      	ldr	r3, [pc, #96]	; (8005a74 <checkAktifCalisma+0xb84>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00b      	beq.n	8005a30 <checkAktifCalisma+0xb40>
 8005a18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a1c:	4811      	ldr	r0, [pc, #68]	; (8005a64 <checkAktifCalisma+0xb74>)
 8005a1e:	f003 fcfd 	bl	800941c <HAL_GPIO_ReadPin>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d133      	bne.n	8005a90 <checkAktifCalisma+0xba0>
 8005a28:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <checkAktifCalisma+0xb84>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d12f      	bne.n	8005a90 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005a30:	4b0d      	ldr	r3, [pc, #52]	; (8005a68 <checkAktifCalisma+0xb78>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d02b      	beq.n	8005a90 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005a38:	4b14      	ldr	r3, [pc, #80]	; (8005a8c <checkAktifCalisma+0xb9c>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	e02a      	b.n	8005a96 <checkAktifCalisma+0xba6>
 8005a40:	20000257 	.word	0x20000257
 8005a44:	40011000 	.word	0x40011000
 8005a48:	2000025b 	.word	0x2000025b
 8005a4c:	20000272 	.word	0x20000272
 8005a50:	20000273 	.word	0x20000273
 8005a54:	20000253 	.word	0x20000253
 8005a58:	200001fc 	.word	0x200001fc
 8005a5c:	20000208 	.word	0x20000208
 8005a60:	20000236 	.word	0x20000236
 8005a64:	40010c00 	.word	0x40010c00
 8005a68:	20000262 	.word	0x20000262
 8005a6c:	20000229 	.word	0x20000229
 8005a70:	20000228 	.word	0x20000228
 8005a74:	2000022c 	.word	0x2000022c
 8005a78:	20000226 	.word	0x20000226
 8005a7c:	2000024f 	.word	0x2000024f
 8005a80:	20000263 	.word	0x20000263
 8005a84:	20000200 	.word	0x20000200
 8005a88:	20000239 	.word	0x20000239
 8005a8c:	20000264 	.word	0x20000264
		} else {
			kapi1butonkontrol=0;
 8005a90:	4b8b      	ldr	r3, [pc, #556]	; (8005cc0 <checkAktifCalisma+0xdd0>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a96:	4b8b      	ldr	r3, [pc, #556]	; (8005cc4 <checkAktifCalisma+0xdd4>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d121      	bne.n	8005ae2 <checkAktifCalisma+0xbf2>
 8005a9e:	4b8a      	ldr	r3, [pc, #552]	; (8005cc8 <checkAktifCalisma+0xdd8>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d003      	beq.n	8005aae <checkAktifCalisma+0xbbe>
 8005aa6:	4b88      	ldr	r3, [pc, #544]	; (8005cc8 <checkAktifCalisma+0xdd8>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d119      	bne.n	8005ae2 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005aae:	2104      	movs	r1, #4
 8005ab0:	4886      	ldr	r0, [pc, #536]	; (8005ccc <checkAktifCalisma+0xddc>)
 8005ab2:	f003 fcb3 	bl	800941c <HAL_GPIO_ReadPin>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d003      	beq.n	8005ac4 <checkAktifCalisma+0xbd4>
 8005abc:	4b84      	ldr	r3, [pc, #528]	; (8005cd0 <checkAktifCalisma+0xde0>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10e      	bne.n	8005ae2 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	4881      	ldr	r0, [pc, #516]	; (8005ccc <checkAktifCalisma+0xddc>)
 8005ac8:	f003 fca8 	bl	800941c <HAL_GPIO_ReadPin>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d107      	bne.n	8005ae2 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005ad2:	4b80      	ldr	r3, [pc, #512]	; (8005cd4 <checkAktifCalisma+0xde4>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005ada:	4b7f      	ldr	r3, [pc, #508]	; (8005cd8 <checkAktifCalisma+0xde8>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	701a      	strb	r2, [r3, #0]
 8005ae0:	e002      	b.n	8005ae8 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005ae2:	4b7d      	ldr	r3, [pc, #500]	; (8005cd8 <checkAktifCalisma+0xde8>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005ae8:	4b75      	ldr	r3, [pc, #468]	; (8005cc0 <checkAktifCalisma+0xdd0>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d107      	bne.n	8005b00 <checkAktifCalisma+0xc10>
 8005af0:	4b79      	ldr	r3, [pc, #484]	; (8005cd8 <checkAktifCalisma+0xde8>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d103      	bne.n	8005b00 <checkAktifCalisma+0xc10>
 8005af8:	4b78      	ldr	r3, [pc, #480]	; (8005cdc <checkAktifCalisma+0xdec>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d005      	beq.n	8005b0c <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005b00:	2201      	movs	r2, #1
 8005b02:	2180      	movs	r1, #128	; 0x80
 8005b04:	4876      	ldr	r0, [pc, #472]	; (8005ce0 <checkAktifCalisma+0xdf0>)
 8005b06:	f003 fca0 	bl	800944a <HAL_GPIO_WritePin>
 8005b0a:	e004      	b.n	8005b16 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2180      	movs	r1, #128	; 0x80
 8005b10:	4873      	ldr	r0, [pc, #460]	; (8005ce0 <checkAktifCalisma+0xdf0>)
 8005b12:	f003 fc9a 	bl	800944a <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b16:	4b73      	ldr	r3, [pc, #460]	; (8005ce4 <checkAktifCalisma+0xdf4>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d141      	bne.n	8005ba2 <checkAktifCalisma+0xcb2>
 8005b1e:	4b6a      	ldr	r3, [pc, #424]	; (8005cc8 <checkAktifCalisma+0xdd8>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d003      	beq.n	8005b2e <checkAktifCalisma+0xc3e>
 8005b26:	4b68      	ldr	r3, [pc, #416]	; (8005cc8 <checkAktifCalisma+0xdd8>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d139      	bne.n	8005ba2 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b32:	4866      	ldr	r0, [pc, #408]	; (8005ccc <checkAktifCalisma+0xddc>)
 8005b34:	f003 fc72 	bl	800941c <HAL_GPIO_ReadPin>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <checkAktifCalisma+0xc56>
 8005b3e:	4b6a      	ldr	r3, [pc, #424]	; (8005ce8 <checkAktifCalisma+0xdf8>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00b      	beq.n	8005b5e <checkAktifCalisma+0xc6e>
 8005b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b4a:	4868      	ldr	r0, [pc, #416]	; (8005cec <checkAktifCalisma+0xdfc>)
 8005b4c:	f003 fc66 	bl	800941c <HAL_GPIO_ReadPin>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d125      	bne.n	8005ba2 <checkAktifCalisma+0xcb2>
 8005b56:	4b64      	ldr	r3, [pc, #400]	; (8005ce8 <checkAktifCalisma+0xdf8>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d121      	bne.n	8005ba2 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b5e:	2102      	movs	r1, #2
 8005b60:	485a      	ldr	r0, [pc, #360]	; (8005ccc <checkAktifCalisma+0xddc>)
 8005b62:	f003 fc5b 	bl	800941c <HAL_GPIO_ReadPin>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d11a      	bne.n	8005ba2 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b6c:	2104      	movs	r1, #4
 8005b6e:	4857      	ldr	r0, [pc, #348]	; (8005ccc <checkAktifCalisma+0xddc>)
 8005b70:	f003 fc54 	bl	800941c <HAL_GPIO_ReadPin>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d113      	bne.n	8005ba2 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005b7a:	4b56      	ldr	r3, [pc, #344]	; (8005cd4 <checkAktifCalisma+0xde4>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00f      	beq.n	8005ba2 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005b82:	4b5b      	ldr	r3, [pc, #364]	; (8005cf0 <checkAktifCalisma+0xe00>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	f083 0301 	eor.w	r3, r3, #1
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005b90:	4b58      	ldr	r3, [pc, #352]	; (8005cf4 <checkAktifCalisma+0xe04>)
 8005b92:	2201      	movs	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005b96:	4b58      	ldr	r3, [pc, #352]	; (8005cf8 <checkAktifCalisma+0xe08>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a58      	ldr	r2, [pc, #352]	; (8005cfc <checkAktifCalisma+0xe0c>)
 8005b9c:	6013      	str	r3, [r2, #0]
			bekle();
 8005b9e:	f7ff f829 	bl	8004bf4 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005ba2:	4b55      	ldr	r3, [pc, #340]	; (8005cf8 <checkAktifCalisma+0xe08>)
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	4b55      	ldr	r3, [pc, #340]	; (8005cfc <checkAktifCalisma+0xe0c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	4a54      	ldr	r2, [pc, #336]	; (8005d00 <checkAktifCalisma+0xe10>)
 8005bae:	7812      	ldrb	r2, [r2, #0]
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d20d      	bcs.n	8005bd0 <checkAktifCalisma+0xce0>
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	4845      	ldr	r0, [pc, #276]	; (8005ccc <checkAktifCalisma+0xddc>)
 8005bb8:	f003 fc30 	bl	800941c <HAL_GPIO_ReadPin>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d006      	beq.n	8005bd0 <checkAktifCalisma+0xce0>
 8005bc2:	4b44      	ldr	r3, [pc, #272]	; (8005cd4 <checkAktifCalisma+0xde4>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	f083 0301 	eor.w	r3, r3, #1
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005bd0:	4b48      	ldr	r3, [pc, #288]	; (8005cf4 <checkAktifCalisma+0xe04>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005bd6:	4b43      	ldr	r3, [pc, #268]	; (8005ce4 <checkAktifCalisma+0xdf4>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d135      	bne.n	8005c4a <checkAktifCalisma+0xd5a>
 8005bde:	4b3a      	ldr	r3, [pc, #232]	; (8005cc8 <checkAktifCalisma+0xdd8>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d003      	beq.n	8005bee <checkAktifCalisma+0xcfe>
 8005be6:	4b38      	ldr	r3, [pc, #224]	; (8005cc8 <checkAktifCalisma+0xdd8>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d12d      	bne.n	8005c4a <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bf2:	4836      	ldr	r0, [pc, #216]	; (8005ccc <checkAktifCalisma+0xddc>)
 8005bf4:	f003 fc12 	bl	800941c <HAL_GPIO_ReadPin>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d103      	bne.n	8005c06 <checkAktifCalisma+0xd16>
 8005bfe:	4b3a      	ldr	r3, [pc, #232]	; (8005ce8 <checkAktifCalisma+0xdf8>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00b      	beq.n	8005c1e <checkAktifCalisma+0xd2e>
 8005c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c0a:	4838      	ldr	r0, [pc, #224]	; (8005cec <checkAktifCalisma+0xdfc>)
 8005c0c:	f003 fc06 	bl	800941c <HAL_GPIO_ReadPin>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d119      	bne.n	8005c4a <checkAktifCalisma+0xd5a>
 8005c16:	4b34      	ldr	r3, [pc, #208]	; (8005ce8 <checkAktifCalisma+0xdf8>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d115      	bne.n	8005c4a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c1e:	2102      	movs	r1, #2
 8005c20:	482a      	ldr	r0, [pc, #168]	; (8005ccc <checkAktifCalisma+0xddc>)
 8005c22:	f003 fbfb 	bl	800941c <HAL_GPIO_ReadPin>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d10e      	bne.n	8005c4a <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005c2c:	2104      	movs	r1, #4
 8005c2e:	4827      	ldr	r0, [pc, #156]	; (8005ccc <checkAktifCalisma+0xddc>)
 8005c30:	f003 fbf4 	bl	800941c <HAL_GPIO_ReadPin>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d107      	bne.n	8005c4a <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005c3a:	4b26      	ldr	r3, [pc, #152]	; (8005cd4 <checkAktifCalisma+0xde4>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005c42:	4b30      	ldr	r3, [pc, #192]	; (8005d04 <checkAktifCalisma+0xe14>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	e002      	b.n	8005c50 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005c4a:	4b2e      	ldr	r3, [pc, #184]	; (8005d04 <checkAktifCalisma+0xe14>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005c50:	4b24      	ldr	r3, [pc, #144]	; (8005ce4 <checkAktifCalisma+0xdf4>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d11d      	bne.n	8005c94 <checkAktifCalisma+0xda4>
 8005c58:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <checkAktifCalisma+0xdd8>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d003      	beq.n	8005c68 <checkAktifCalisma+0xd78>
 8005c60:	4b19      	ldr	r3, [pc, #100]	; (8005cc8 <checkAktifCalisma+0xdd8>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d115      	bne.n	8005c94 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c68:	2102      	movs	r1, #2
 8005c6a:	4818      	ldr	r0, [pc, #96]	; (8005ccc <checkAktifCalisma+0xddc>)
 8005c6c:	f003 fbd6 	bl	800941c <HAL_GPIO_ReadPin>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d10e      	bne.n	8005c94 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005c76:	2104      	movs	r1, #4
 8005c78:	4814      	ldr	r0, [pc, #80]	; (8005ccc <checkAktifCalisma+0xddc>)
 8005c7a:	f003 fbcf 	bl	800941c <HAL_GPIO_ReadPin>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d107      	bne.n	8005c94 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005c84:	4b13      	ldr	r3, [pc, #76]	; (8005cd4 <checkAktifCalisma+0xde4>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005c8c:	4b1e      	ldr	r3, [pc, #120]	; (8005d08 <checkAktifCalisma+0xe18>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	e002      	b.n	8005c9a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005c94:	4b1c      	ldr	r3, [pc, #112]	; (8005d08 <checkAktifCalisma+0xe18>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005c9a:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <checkAktifCalisma+0xe14>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d107      	bne.n	8005cb2 <checkAktifCalisma+0xdc2>
 8005ca2:	4b19      	ldr	r3, [pc, #100]	; (8005d08 <checkAktifCalisma+0xe18>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <checkAktifCalisma+0xdc2>
 8005caa:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <checkAktifCalisma+0xe04>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d02c      	beq.n	8005d0c <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	2140      	movs	r1, #64	; 0x40
 8005cb6:	480a      	ldr	r0, [pc, #40]	; (8005ce0 <checkAktifCalisma+0xdf0>)
 8005cb8:	f003 fbc7 	bl	800944a <HAL_GPIO_WritePin>
 8005cbc:	e02b      	b.n	8005d16 <checkAktifCalisma+0xe26>
 8005cbe:	bf00      	nop
 8005cc0:	20000264 	.word	0x20000264
 8005cc4:	20000229 	.word	0x20000229
 8005cc8:	20000228 	.word	0x20000228
 8005ccc:	40011000 	.word	0x40011000
 8005cd0:	20000226 	.word	0x20000226
 8005cd4:	20000262 	.word	0x20000262
 8005cd8:	20000265 	.word	0x20000265
 8005cdc:	20000263 	.word	0x20000263
 8005ce0:	40010800 	.word	0x40010800
 8005ce4:	2000022a 	.word	0x2000022a
 8005ce8:	2000022c 	.word	0x2000022c
 8005cec:	40010c00 	.word	0x40010c00
 8005cf0:	2000024f 	.word	0x2000024f
 8005cf4:	20000266 	.word	0x20000266
 8005cf8:	200001fc 	.word	0x200001fc
 8005cfc:	20000200 	.word	0x20000200
 8005d00:	2000023a 	.word	0x2000023a
 8005d04:	20000267 	.word	0x20000267
 8005d08:	20000268 	.word	0x20000268
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2140      	movs	r1, #64	; 0x40
 8005d10:	488d      	ldr	r0, [pc, #564]	; (8005f48 <checkAktifCalisma+0x1058>)
 8005d12:	f003 fb9a 	bl	800944a <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005d16:	4b8d      	ldr	r3, [pc, #564]	; (8005f4c <checkAktifCalisma+0x105c>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <checkAktifCalisma+0xe36>
 8005d1e:	4b8b      	ldr	r3, [pc, #556]	; (8005f4c <checkAktifCalisma+0x105c>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d115      	bne.n	8005d52 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005d26:	2104      	movs	r1, #4
 8005d28:	4889      	ldr	r0, [pc, #548]	; (8005f50 <checkAktifCalisma+0x1060>)
 8005d2a:	f003 fb77 	bl	800941c <HAL_GPIO_ReadPin>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d003      	beq.n	8005d3c <checkAktifCalisma+0xe4c>
 8005d34:	4b87      	ldr	r3, [pc, #540]	; (8005f54 <checkAktifCalisma+0x1064>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10a      	bne.n	8005d52 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	4884      	ldr	r0, [pc, #528]	; (8005f50 <checkAktifCalisma+0x1060>)
 8005d40:	f003 fb6c 	bl	800941c <HAL_GPIO_ReadPin>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d103      	bne.n	8005d52 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005d4a:	4b83      	ldr	r3, [pc, #524]	; (8005f58 <checkAktifCalisma+0x1068>)
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	e002      	b.n	8005d58 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005d52:	4b81      	ldr	r3, [pc, #516]	; (8005f58 <checkAktifCalisma+0x1068>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005d58:	4b7c      	ldr	r3, [pc, #496]	; (8005f4c <checkAktifCalisma+0x105c>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d003      	beq.n	8005d68 <checkAktifCalisma+0xe78>
 8005d60:	4b7a      	ldr	r3, [pc, #488]	; (8005f4c <checkAktifCalisma+0x105c>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d111      	bne.n	8005d8c <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005d68:	2102      	movs	r1, #2
 8005d6a:	4879      	ldr	r0, [pc, #484]	; (8005f50 <checkAktifCalisma+0x1060>)
 8005d6c:	f003 fb56 	bl	800941c <HAL_GPIO_ReadPin>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d10a      	bne.n	8005d8c <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005d76:	2104      	movs	r1, #4
 8005d78:	4875      	ldr	r0, [pc, #468]	; (8005f50 <checkAktifCalisma+0x1060>)
 8005d7a:	f003 fb4f 	bl	800941c <HAL_GPIO_ReadPin>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d103      	bne.n	8005d8c <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005d84:	4b75      	ldr	r3, [pc, #468]	; (8005f5c <checkAktifCalisma+0x106c>)
 8005d86:	2201      	movs	r2, #1
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	e002      	b.n	8005d92 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005d8c:	4b73      	ldr	r3, [pc, #460]	; (8005f5c <checkAktifCalisma+0x106c>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005d92:	4b71      	ldr	r3, [pc, #452]	; (8005f58 <checkAktifCalisma+0x1068>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00f      	beq.n	8005dba <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005d9a:	4b71      	ldr	r3, [pc, #452]	; (8005f60 <checkAktifCalisma+0x1070>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d10b      	bne.n	8005dba <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005da6:	486f      	ldr	r0, [pc, #444]	; (8005f64 <checkAktifCalisma+0x1074>)
 8005da8:	f003 fb38 	bl	800941c <HAL_GPIO_ReadPin>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d103      	bne.n	8005dba <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005db2:	4b6d      	ldr	r3, [pc, #436]	; (8005f68 <checkAktifCalisma+0x1078>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	e002      	b.n	8005dc0 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005dba:	4b6b      	ldr	r3, [pc, #428]	; (8005f68 <checkAktifCalisma+0x1078>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005dc0:	4b66      	ldr	r3, [pc, #408]	; (8005f5c <checkAktifCalisma+0x106c>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00f      	beq.n	8005de8 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005dc8:	4b65      	ldr	r3, [pc, #404]	; (8005f60 <checkAktifCalisma+0x1070>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d10b      	bne.n	8005de8 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dd4:	4863      	ldr	r0, [pc, #396]	; (8005f64 <checkAktifCalisma+0x1074>)
 8005dd6:	f003 fb21 	bl	800941c <HAL_GPIO_ReadPin>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d103      	bne.n	8005de8 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005de0:	4b62      	ldr	r3, [pc, #392]	; (8005f6c <checkAktifCalisma+0x107c>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	e002      	b.n	8005dee <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005de8:	4b60      	ldr	r3, [pc, #384]	; (8005f6c <checkAktifCalisma+0x107c>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005dee:	4b60      	ldr	r3, [pc, #384]	; (8005f70 <checkAktifCalisma+0x1080>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d137      	bne.n	8005e66 <checkAktifCalisma+0xf76>
 8005df6:	4b5f      	ldr	r3, [pc, #380]	; (8005f74 <checkAktifCalisma+0x1084>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d003      	beq.n	8005e06 <checkAktifCalisma+0xf16>
 8005dfe:	4b5d      	ldr	r3, [pc, #372]	; (8005f74 <checkAktifCalisma+0x1084>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d12f      	bne.n	8005e66 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e06:	4b54      	ldr	r3, [pc, #336]	; (8005f58 <checkAktifCalisma+0x1068>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d103      	bne.n	8005e16 <checkAktifCalisma+0xf26>
 8005e0e:	4b53      	ldr	r3, [pc, #332]	; (8005f5c <checkAktifCalisma+0x106c>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d027      	beq.n	8005e66 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005e16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e1a:	484d      	ldr	r0, [pc, #308]	; (8005f50 <checkAktifCalisma+0x1060>)
 8005e1c:	f003 fafe 	bl	800941c <HAL_GPIO_ReadPin>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <checkAktifCalisma+0xf3e>
 8005e26:	4b4e      	ldr	r3, [pc, #312]	; (8005f60 <checkAktifCalisma+0x1070>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005e2e:	4b4e      	ldr	r3, [pc, #312]	; (8005f68 <checkAktifCalisma+0x1078>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d103      	bne.n	8005e3e <checkAktifCalisma+0xf4e>
 8005e36:	4b4d      	ldr	r3, [pc, #308]	; (8005f6c <checkAktifCalisma+0x107c>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d013      	beq.n	8005e66 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005e3e:	4b4e      	ldr	r3, [pc, #312]	; (8005f78 <checkAktifCalisma+0x1088>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00f      	beq.n	8005e66 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005e46:	4b4d      	ldr	r3, [pc, #308]	; (8005f7c <checkAktifCalisma+0x108c>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	f083 0301 	eor.w	r3, r3, #1
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005e54:	4b4a      	ldr	r3, [pc, #296]	; (8005f80 <checkAktifCalisma+0x1090>)
 8005e56:	2201      	movs	r2, #1
 8005e58:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005e5a:	4b4a      	ldr	r3, [pc, #296]	; (8005f84 <checkAktifCalisma+0x1094>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a4a      	ldr	r2, [pc, #296]	; (8005f88 <checkAktifCalisma+0x1098>)
 8005e60:	6013      	str	r3, [r2, #0]
			bekle();
 8005e62:	f7fe fec7 	bl	8004bf4 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005e66:	4b47      	ldr	r3, [pc, #284]	; (8005f84 <checkAktifCalisma+0x1094>)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4b47      	ldr	r3, [pc, #284]	; (8005f88 <checkAktifCalisma+0x1098>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	4a46      	ldr	r2, [pc, #280]	; (8005f8c <checkAktifCalisma+0x109c>)
 8005e72:	7812      	ldrb	r2, [r2, #0]
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d214      	bcs.n	8005ea2 <checkAktifCalisma+0xfb2>
 8005e78:	4b37      	ldr	r3, [pc, #220]	; (8005f58 <checkAktifCalisma+0x1068>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	f083 0301 	eor.w	r3, r3, #1
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d006      	beq.n	8005e94 <checkAktifCalisma+0xfa4>
 8005e86:	4b35      	ldr	r3, [pc, #212]	; (8005f5c <checkAktifCalisma+0x106c>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	f083 0301 	eor.w	r3, r3, #1
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <checkAktifCalisma+0xfb2>
 8005e94:	4b38      	ldr	r3, [pc, #224]	; (8005f78 <checkAktifCalisma+0x1088>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	f083 0301 	eor.w	r3, r3, #1
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005ea2:	4b37      	ldr	r3, [pc, #220]	; (8005f80 <checkAktifCalisma+0x1090>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005ea8:	4b31      	ldr	r3, [pc, #196]	; (8005f70 <checkAktifCalisma+0x1080>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d12b      	bne.n	8005f08 <checkAktifCalisma+0x1018>
 8005eb0:	4b30      	ldr	r3, [pc, #192]	; (8005f74 <checkAktifCalisma+0x1084>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d003      	beq.n	8005ec0 <checkAktifCalisma+0xfd0>
 8005eb8:	4b2e      	ldr	r3, [pc, #184]	; (8005f74 <checkAktifCalisma+0x1084>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d123      	bne.n	8005f08 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005ec0:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <checkAktifCalisma+0x1068>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d103      	bne.n	8005ed0 <checkAktifCalisma+0xfe0>
 8005ec8:	4b24      	ldr	r3, [pc, #144]	; (8005f5c <checkAktifCalisma+0x106c>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01b      	beq.n	8005f08 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ed4:	481e      	ldr	r0, [pc, #120]	; (8005f50 <checkAktifCalisma+0x1060>)
 8005ed6:	f003 faa1 	bl	800941c <HAL_GPIO_ReadPin>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d103      	bne.n	8005ee8 <checkAktifCalisma+0xff8>
 8005ee0:	4b1f      	ldr	r3, [pc, #124]	; (8005f60 <checkAktifCalisma+0x1070>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005ee8:	4b1f      	ldr	r3, [pc, #124]	; (8005f68 <checkAktifCalisma+0x1078>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d103      	bne.n	8005ef8 <checkAktifCalisma+0x1008>
 8005ef0:	4b1e      	ldr	r3, [pc, #120]	; (8005f6c <checkAktifCalisma+0x107c>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005ef8:	4b1f      	ldr	r3, [pc, #124]	; (8005f78 <checkAktifCalisma+0x1088>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005f00:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <checkAktifCalisma+0x10a0>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e002      	b.n	8005f0e <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005f08:	4b21      	ldr	r3, [pc, #132]	; (8005f90 <checkAktifCalisma+0x10a0>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005f0e:	4b18      	ldr	r3, [pc, #96]	; (8005f70 <checkAktifCalisma+0x1080>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d140      	bne.n	8005f98 <checkAktifCalisma+0x10a8>
 8005f16:	4b17      	ldr	r3, [pc, #92]	; (8005f74 <checkAktifCalisma+0x1084>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d003      	beq.n	8005f26 <checkAktifCalisma+0x1036>
 8005f1e:	4b15      	ldr	r3, [pc, #84]	; (8005f74 <checkAktifCalisma+0x1084>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d138      	bne.n	8005f98 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005f26:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <checkAktifCalisma+0x1068>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d103      	bne.n	8005f36 <checkAktifCalisma+0x1046>
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <checkAktifCalisma+0x106c>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d030      	beq.n	8005f98 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005f36:	4b10      	ldr	r3, [pc, #64]	; (8005f78 <checkAktifCalisma+0x1088>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02c      	beq.n	8005f98 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005f3e:	4b15      	ldr	r3, [pc, #84]	; (8005f94 <checkAktifCalisma+0x10a4>)
 8005f40:	2201      	movs	r2, #1
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	e02b      	b.n	8005f9e <checkAktifCalisma+0x10ae>
 8005f46:	bf00      	nop
 8005f48:	40010800 	.word	0x40010800
 8005f4c:	2000022d 	.word	0x2000022d
 8005f50:	40011000 	.word	0x40011000
 8005f54:	20000226 	.word	0x20000226
 8005f58:	2000026c 	.word	0x2000026c
 8005f5c:	2000026d 	.word	0x2000026d
 8005f60:	2000022c 	.word	0x2000022c
 8005f64:	40010c00 	.word	0x40010c00
 8005f68:	2000027c 	.word	0x2000027c
 8005f6c:	2000027d 	.word	0x2000027d
 8005f70:	2000022b 	.word	0x2000022b
 8005f74:	20000228 	.word	0x20000228
 8005f78:	20000262 	.word	0x20000262
 8005f7c:	2000024f 	.word	0x2000024f
 8005f80:	20000269 	.word	0x20000269
 8005f84:	200001fc 	.word	0x200001fc
 8005f88:	20000200 	.word	0x20000200
 8005f8c:	2000023b 	.word	0x2000023b
 8005f90:	2000026a 	.word	0x2000026a
 8005f94:	2000026b 	.word	0x2000026b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005f98:	4b8b      	ldr	r3, [pc, #556]	; (80061c8 <checkAktifCalisma+0x12d8>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005f9e:	4b8b      	ldr	r3, [pc, #556]	; (80061cc <checkAktifCalisma+0x12dc>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d107      	bne.n	8005fb6 <checkAktifCalisma+0x10c6>
 8005fa6:	4b8a      	ldr	r3, [pc, #552]	; (80061d0 <checkAktifCalisma+0x12e0>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d103      	bne.n	8005fb6 <checkAktifCalisma+0x10c6>
 8005fae:	4b86      	ldr	r3, [pc, #536]	; (80061c8 <checkAktifCalisma+0x12d8>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	2120      	movs	r1, #32
 8005fba:	4886      	ldr	r0, [pc, #536]	; (80061d4 <checkAktifCalisma+0x12e4>)
 8005fbc:	f003 fa45 	bl	800944a <HAL_GPIO_WritePin>
 8005fc0:	e004      	b.n	8005fcc <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2120      	movs	r1, #32
 8005fc6:	4883      	ldr	r0, [pc, #524]	; (80061d4 <checkAktifCalisma+0x12e4>)
 8005fc8:	f003 fa3f 	bl	800944a <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005fcc:	4b82      	ldr	r3, [pc, #520]	; (80061d8 <checkAktifCalisma+0x12e8>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00e      	beq.n	8005ff2 <checkAktifCalisma+0x1102>
 8005fd4:	2102      	movs	r1, #2
 8005fd6:	4881      	ldr	r0, [pc, #516]	; (80061dc <checkAktifCalisma+0x12ec>)
 8005fd8:	f003 fa20 	bl	800941c <HAL_GPIO_ReadPin>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d107      	bne.n	8005ff2 <checkAktifCalisma+0x1102>
 8005fe2:	4b7f      	ldr	r3, [pc, #508]	; (80061e0 <checkAktifCalisma+0x12f0>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d103      	bne.n	8005ff2 <checkAktifCalisma+0x1102>
 8005fea:	4b7e      	ldr	r3, [pc, #504]	; (80061e4 <checkAktifCalisma+0x12f4>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d112      	bne.n	8006018 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005ff2:	4b7d      	ldr	r3, [pc, #500]	; (80061e8 <checkAktifCalisma+0x12f8>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d066      	beq.n	80060c8 <checkAktifCalisma+0x11d8>
 8005ffa:	2104      	movs	r1, #4
 8005ffc:	4877      	ldr	r0, [pc, #476]	; (80061dc <checkAktifCalisma+0x12ec>)
 8005ffe:	f003 fa0d 	bl	800941c <HAL_GPIO_ReadPin>
 8006002:	4603      	mov	r3, r0
 8006004:	2b01      	cmp	r3, #1
 8006006:	d15f      	bne.n	80060c8 <checkAktifCalisma+0x11d8>
 8006008:	4b75      	ldr	r3, [pc, #468]	; (80061e0 <checkAktifCalisma+0x12f0>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d05b      	beq.n	80060c8 <checkAktifCalisma+0x11d8>
 8006010:	4b74      	ldr	r3, [pc, #464]	; (80061e4 <checkAktifCalisma+0x12f4>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d057      	beq.n	80060c8 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8006018:	4b74      	ldr	r3, [pc, #464]	; (80061ec <checkAktifCalisma+0x12fc>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	3301      	adds	r3, #1
 800601e:	b2da      	uxtb	r2, r3
 8006020:	4b72      	ldr	r3, [pc, #456]	; (80061ec <checkAktifCalisma+0x12fc>)
 8006022:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8006024:	4b71      	ldr	r3, [pc, #452]	; (80061ec <checkAktifCalisma+0x12fc>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b09      	cmp	r3, #9
 800602a:	d908      	bls.n	800603e <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 800602c:	4b6f      	ldr	r3, [pc, #444]	; (80061ec <checkAktifCalisma+0x12fc>)
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8006032:	4b6f      	ldr	r3, [pc, #444]	; (80061f0 <checkAktifCalisma+0x1300>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	3301      	adds	r3, #1
 8006038:	b2da      	uxtb	r2, r3
 800603a:	4b6d      	ldr	r3, [pc, #436]	; (80061f0 <checkAktifCalisma+0x1300>)
 800603c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 800603e:	4b6c      	ldr	r3, [pc, #432]	; (80061f0 <checkAktifCalisma+0x1300>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b09      	cmp	r3, #9
 8006044:	d908      	bls.n	8006058 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8006046:	4b6a      	ldr	r3, [pc, #424]	; (80061f0 <checkAktifCalisma+0x1300>)
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 800604c:	4b69      	ldr	r3, [pc, #420]	; (80061f4 <checkAktifCalisma+0x1304>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	3301      	adds	r3, #1
 8006052:	b2da      	uxtb	r2, r3
 8006054:	4b67      	ldr	r3, [pc, #412]	; (80061f4 <checkAktifCalisma+0x1304>)
 8006056:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8006058:	4b66      	ldr	r3, [pc, #408]	; (80061f4 <checkAktifCalisma+0x1304>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b09      	cmp	r3, #9
 800605e:	d908      	bls.n	8006072 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8006060:	4b64      	ldr	r3, [pc, #400]	; (80061f4 <checkAktifCalisma+0x1304>)
 8006062:	2200      	movs	r2, #0
 8006064:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8006066:	4b64      	ldr	r3, [pc, #400]	; (80061f8 <checkAktifCalisma+0x1308>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	3301      	adds	r3, #1
 800606c:	b2da      	uxtb	r2, r3
 800606e:	4b62      	ldr	r3, [pc, #392]	; (80061f8 <checkAktifCalisma+0x1308>)
 8006070:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8006072:	4b61      	ldr	r3, [pc, #388]	; (80061f8 <checkAktifCalisma+0x1308>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b09      	cmp	r3, #9
 8006078:	d908      	bls.n	800608c <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 800607a:	4b5f      	ldr	r3, [pc, #380]	; (80061f8 <checkAktifCalisma+0x1308>)
 800607c:	2200      	movs	r2, #0
 800607e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8006080:	4b5e      	ldr	r3, [pc, #376]	; (80061fc <checkAktifCalisma+0x130c>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	b2da      	uxtb	r2, r3
 8006088:	4b5c      	ldr	r3, [pc, #368]	; (80061fc <checkAktifCalisma+0x130c>)
 800608a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800608c:	4b5b      	ldr	r3, [pc, #364]	; (80061fc <checkAktifCalisma+0x130c>)
 800608e:	781a      	ldrb	r2, [r3, #0]
 8006090:	4b5b      	ldr	r3, [pc, #364]	; (8006200 <checkAktifCalisma+0x1310>)
 8006092:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006096:	4b58      	ldr	r3, [pc, #352]	; (80061f8 <checkAktifCalisma+0x1308>)
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	4b59      	ldr	r3, [pc, #356]	; (8006200 <checkAktifCalisma+0x1310>)
 800609c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800609e:	4b55      	ldr	r3, [pc, #340]	; (80061f4 <checkAktifCalisma+0x1304>)
 80060a0:	781a      	ldrb	r2, [r3, #0]
 80060a2:	4b57      	ldr	r3, [pc, #348]	; (8006200 <checkAktifCalisma+0x1310>)
 80060a4:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80060a6:	4b52      	ldr	r3, [pc, #328]	; (80061f0 <checkAktifCalisma+0x1300>)
 80060a8:	781a      	ldrb	r2, [r3, #0]
 80060aa:	4b55      	ldr	r3, [pc, #340]	; (8006200 <checkAktifCalisma+0x1310>)
 80060ac:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80060ae:	4b4f      	ldr	r3, [pc, #316]	; (80061ec <checkAktifCalisma+0x12fc>)
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	4b53      	ldr	r3, [pc, #332]	; (8006200 <checkAktifCalisma+0x1310>)
 80060b4:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80060b6:	4b53      	ldr	r3, [pc, #332]	; (8006204 <checkAktifCalisma+0x1314>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80060bc:	4b46      	ldr	r3, [pc, #280]	; (80061d8 <checkAktifCalisma+0x12e8>)
 80060be:	2200      	movs	r2, #0
 80060c0:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80060c2:	4b49      	ldr	r3, [pc, #292]	; (80061e8 <checkAktifCalisma+0x12f8>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80060c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060cc:	484e      	ldr	r0, [pc, #312]	; (8006208 <checkAktifCalisma+0x1318>)
 80060ce:	f003 f9a5 	bl	800941c <HAL_GPIO_ReadPin>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d016      	beq.n	8006106 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80060d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060dc:	484a      	ldr	r0, [pc, #296]	; (8006208 <checkAktifCalisma+0x1318>)
 80060de:	f003 f99d 	bl	800941c <HAL_GPIO_ReadPin>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00e      	beq.n	8006106 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80060e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060ec:	4846      	ldr	r0, [pc, #280]	; (8006208 <checkAktifCalisma+0x1318>)
 80060ee:	f003 f995 	bl	800941c <HAL_GPIO_ReadPin>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d006      	beq.n	8006106 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80060f8:	2140      	movs	r1, #64	; 0x40
 80060fa:	4838      	ldr	r0, [pc, #224]	; (80061dc <checkAktifCalisma+0x12ec>)
 80060fc:	f003 f98e 	bl	800941c <HAL_GPIO_ReadPin>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d103      	bne.n	800610e <checkAktifCalisma+0x121e>
			startBasili=1;
 8006106:	4b41      	ldr	r3, [pc, #260]	; (800620c <checkAktifCalisma+0x131c>)
 8006108:	2201      	movs	r2, #1
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	e002      	b.n	8006114 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800610e:	4b3f      	ldr	r3, [pc, #252]	; (800620c <checkAktifCalisma+0x131c>)
 8006110:	2200      	movs	r2, #0
 8006112:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006114:	4b3d      	ldr	r3, [pc, #244]	; (800620c <checkAktifCalisma+0x131c>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d016      	beq.n	800614a <checkAktifCalisma+0x125a>
 800611c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006120:	4839      	ldr	r0, [pc, #228]	; (8006208 <checkAktifCalisma+0x1318>)
 8006122:	f003 f97b 	bl	800941c <HAL_GPIO_ReadPin>
 8006126:	4603      	mov	r3, r0
 8006128:	2b01      	cmp	r3, #1
 800612a:	d10e      	bne.n	800614a <checkAktifCalisma+0x125a>
			hataVar=1;
 800612c:	4b38      	ldr	r3, [pc, #224]	; (8006210 <checkAktifCalisma+0x1320>)
 800612e:	2201      	movs	r2, #1
 8006130:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8006132:	2001      	movs	r0, #1
 8006134:	f7fa fdac 	bl	8000c90 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006138:	2001      	movs	r0, #1
 800613a:	f7fa fd4f 	bl	8000bdc <hata2EEPROM>
			convertAndSendData();
 800613e:	f001 fc4d 	bl	80079dc <convertAndSendData>
			acilstophatasi=1;
 8006142:	4b34      	ldr	r3, [pc, #208]	; (8006214 <checkAktifCalisma+0x1324>)
 8006144:	2201      	movs	r2, #1
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	e018      	b.n	800617c <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 800614a:	4b32      	ldr	r3, [pc, #200]	; (8006214 <checkAktifCalisma+0x1324>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d014      	beq.n	800617c <checkAktifCalisma+0x128c>
 8006152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006156:	482c      	ldr	r0, [pc, #176]	; (8006208 <checkAktifCalisma+0x1318>)
 8006158:	f003 f960 	bl	800941c <HAL_GPIO_ReadPin>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10c      	bne.n	800617c <checkAktifCalisma+0x128c>
 8006162:	4b2a      	ldr	r3, [pc, #168]	; (800620c <checkAktifCalisma+0x131c>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	f083 0301 	eor.w	r3, r3, #1
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006170:	4b28      	ldr	r3, [pc, #160]	; (8006214 <checkAktifCalisma+0x1324>)
 8006172:	2200      	movs	r2, #0
 8006174:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006176:	2001      	movs	r0, #1
 8006178:	f7fe fce8 	bl	8004b4c <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 800617c:	4b26      	ldr	r3, [pc, #152]	; (8006218 <checkAktifCalisma+0x1328>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	f083 0301 	eor.w	r3, r3, #1
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d04e      	beq.n	8006228 <checkAktifCalisma+0x1338>
 800618a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800618e:	481e      	ldr	r0, [pc, #120]	; (8006208 <checkAktifCalisma+0x1318>)
 8006190:	f003 f944 	bl	800941c <HAL_GPIO_ReadPin>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <checkAktifCalisma+0x12b2>
 800619a:	4b20      	ldr	r3, [pc, #128]	; (800621c <checkAktifCalisma+0x132c>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d042      	beq.n	8006228 <checkAktifCalisma+0x1338>
 80061a2:	4b1f      	ldr	r3, [pc, #124]	; (8006220 <checkAktifCalisma+0x1330>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d13e      	bne.n	8006228 <checkAktifCalisma+0x1338>
			hataVar=1;
 80061aa:	4b19      	ldr	r3, [pc, #100]	; (8006210 <checkAktifCalisma+0x1320>)
 80061ac:	2201      	movs	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80061b0:	2002      	movs	r0, #2
 80061b2:	f7fa fd6d 	bl	8000c90 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80061b6:	2002      	movs	r0, #2
 80061b8:	f7fa fd10 	bl	8000bdc <hata2EEPROM>
			convertAndSendData();
 80061bc:	f001 fc0e 	bl	80079dc <convertAndSendData>
			emniyetCercevesihatasi=1;
 80061c0:	4b18      	ldr	r3, [pc, #96]	; (8006224 <checkAktifCalisma+0x1334>)
 80061c2:	2201      	movs	r2, #1
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	e047      	b.n	8006258 <checkAktifCalisma+0x1368>
 80061c8:	2000026b 	.word	0x2000026b
 80061cc:	2000026a 	.word	0x2000026a
 80061d0:	20000269 	.word	0x20000269
 80061d4:	40010800 	.word	0x40010800
 80061d8:	2000025f 	.word	0x2000025f
 80061dc:	40011000 	.word	0x40011000
 80061e0:	20000226 	.word	0x20000226
 80061e4:	20000262 	.word	0x20000262
 80061e8:	20000260 	.word	0x20000260
 80061ec:	2000021d 	.word	0x2000021d
 80061f0:	2000021e 	.word	0x2000021e
 80061f4:	20000000 	.word	0x20000000
 80061f8:	20000001 	.word	0x20000001
 80061fc:	2000021f 	.word	0x2000021f
 8006200:	20000118 	.word	0x20000118
 8006204:	2000024c 	.word	0x2000024c
 8006208:	40010c00 	.word	0x40010c00
 800620c:	2000026e 	.word	0x2000026e
 8006210:	20000275 	.word	0x20000275
 8006214:	20000270 	.word	0x20000270
 8006218:	20000277 	.word	0x20000277
 800621c:	20000281 	.word	0x20000281
 8006220:	20000224 	.word	0x20000224
 8006224:	20000271 	.word	0x20000271
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006228:	4b9b      	ldr	r3, [pc, #620]	; (8006498 <checkAktifCalisma+0x15a8>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d013      	beq.n	8006258 <checkAktifCalisma+0x1368>
 8006230:	4b9a      	ldr	r3, [pc, #616]	; (800649c <checkAktifCalisma+0x15ac>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00f      	beq.n	8006258 <checkAktifCalisma+0x1368>
 8006238:	4b99      	ldr	r3, [pc, #612]	; (80064a0 <checkAktifCalisma+0x15b0>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	f083 0301 	eor.w	r3, r3, #1
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d008      	beq.n	8006258 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8006246:	4b94      	ldr	r3, [pc, #592]	; (8006498 <checkAktifCalisma+0x15a8>)
 8006248:	2200      	movs	r2, #0
 800624a:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 800624c:	4b95      	ldr	r3, [pc, #596]	; (80064a4 <checkAktifCalisma+0x15b4>)
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006252:	2002      	movs	r0, #2
 8006254:	f7fe fc7a 	bl	8004b4c <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006258:	4b93      	ldr	r3, [pc, #588]	; (80064a8 <checkAktifCalisma+0x15b8>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d11e      	bne.n	800629e <checkAktifCalisma+0x13ae>
 8006260:	4b92      	ldr	r3, [pc, #584]	; (80064ac <checkAktifCalisma+0x15bc>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d11a      	bne.n	800629e <checkAktifCalisma+0x13ae>
 8006268:	4b91      	ldr	r3, [pc, #580]	; (80064b0 <checkAktifCalisma+0x15c0>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d016      	beq.n	800629e <checkAktifCalisma+0x13ae>
 8006270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006274:	488f      	ldr	r0, [pc, #572]	; (80064b4 <checkAktifCalisma+0x15c4>)
 8006276:	f003 f8d1 	bl	800941c <HAL_GPIO_ReadPin>
 800627a:	4603      	mov	r3, r0
 800627c:	2b01      	cmp	r3, #1
 800627e:	d10e      	bne.n	800629e <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006280:	4b8d      	ldr	r3, [pc, #564]	; (80064b8 <checkAktifCalisma+0x15c8>)
 8006282:	2201      	movs	r2, #1
 8006284:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8006286:	2003      	movs	r0, #3
 8006288:	f7fa fd02 	bl	8000c90 <hataKoduLcdGoster>
			hata2EEPROM(3);
 800628c:	2003      	movs	r0, #3
 800628e:	f7fa fca5 	bl	8000bdc <hata2EEPROM>
			convertAndSendData();
 8006292:	f001 fba3 	bl	80079dc <convertAndSendData>
			basinchatasi=1;
 8006296:	4b89      	ldr	r3, [pc, #548]	; (80064bc <checkAktifCalisma+0x15cc>)
 8006298:	2201      	movs	r2, #1
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	e015      	b.n	80062ca <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800629e:	4b87      	ldr	r3, [pc, #540]	; (80064bc <checkAktifCalisma+0x15cc>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d011      	beq.n	80062ca <checkAktifCalisma+0x13da>
 80062a6:	4b80      	ldr	r3, [pc, #512]	; (80064a8 <checkAktifCalisma+0x15b8>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d10d      	bne.n	80062ca <checkAktifCalisma+0x13da>
 80062ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062b2:	4883      	ldr	r0, [pc, #524]	; (80064c0 <checkAktifCalisma+0x15d0>)
 80062b4:	f003 f8b2 	bl	800941c <HAL_GPIO_ReadPin>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d105      	bne.n	80062ca <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80062be:	4b7f      	ldr	r3, [pc, #508]	; (80064bc <checkAktifCalisma+0x15cc>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80062c4:	2003      	movs	r0, #3
 80062c6:	f7fe fc41 	bl	8004b4c <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80062ca:	4b7e      	ldr	r3, [pc, #504]	; (80064c4 <checkAktifCalisma+0x15d4>)
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d103      	bne.n	80062da <checkAktifCalisma+0x13ea>
 80062d2:	4b7d      	ldr	r3, [pc, #500]	; (80064c8 <checkAktifCalisma+0x15d8>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d01e      	beq.n	8006318 <checkAktifCalisma+0x1428>
 80062da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062de:	487b      	ldr	r0, [pc, #492]	; (80064cc <checkAktifCalisma+0x15dc>)
 80062e0:	f003 f89c 	bl	800941c <HAL_GPIO_ReadPin>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d116      	bne.n	8006318 <checkAktifCalisma+0x1428>
 80062ea:	4b79      	ldr	r3, [pc, #484]	; (80064d0 <checkAktifCalisma+0x15e0>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d003      	beq.n	80062fa <checkAktifCalisma+0x140a>
 80062f2:	4b77      	ldr	r3, [pc, #476]	; (80064d0 <checkAktifCalisma+0x15e0>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d10e      	bne.n	8006318 <checkAktifCalisma+0x1428>
			hataVar=1;
 80062fa:	4b6f      	ldr	r3, [pc, #444]	; (80064b8 <checkAktifCalisma+0x15c8>)
 80062fc:	2201      	movs	r2, #1
 80062fe:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006300:	2004      	movs	r0, #4
 8006302:	f7fa fcc5 	bl	8000c90 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006306:	2004      	movs	r0, #4
 8006308:	f7fa fc68 	bl	8000bdc <hata2EEPROM>
			convertAndSendData();
 800630c:	f001 fb66 	bl	80079dc <convertAndSendData>
			katkapisivicihatasi=1;
 8006310:	4b70      	ldr	r3, [pc, #448]	; (80064d4 <checkAktifCalisma+0x15e4>)
 8006312:	2201      	movs	r2, #1
 8006314:	701a      	strb	r2, [r3, #0]
 8006316:	e01f      	b.n	8006358 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006318:	4b6e      	ldr	r3, [pc, #440]	; (80064d4 <checkAktifCalisma+0x15e4>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01b      	beq.n	8006358 <checkAktifCalisma+0x1468>
 8006320:	4b6d      	ldr	r3, [pc, #436]	; (80064d8 <checkAktifCalisma+0x15e8>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d017      	beq.n	8006358 <checkAktifCalisma+0x1468>
 8006328:	4b66      	ldr	r3, [pc, #408]	; (80064c4 <checkAktifCalisma+0x15d4>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f083 0301 	eor.w	r3, r3, #1
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d010      	beq.n	8006358 <checkAktifCalisma+0x1468>
 8006336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800633a:	4864      	ldr	r0, [pc, #400]	; (80064cc <checkAktifCalisma+0x15dc>)
 800633c:	f003 f86e 	bl	800941c <HAL_GPIO_ReadPin>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d108      	bne.n	8006358 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8006346:	4b63      	ldr	r3, [pc, #396]	; (80064d4 <checkAktifCalisma+0x15e4>)
 8006348:	2200      	movs	r2, #0
 800634a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 800634c:	4b5e      	ldr	r3, [pc, #376]	; (80064c8 <checkAktifCalisma+0x15d8>)
 800634e:	2200      	movs	r2, #0
 8006350:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006352:	2004      	movs	r0, #4
 8006354:	f7fe fbfa 	bl	8004b4c <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006358:	4b5a      	ldr	r3, [pc, #360]	; (80064c4 <checkAktifCalisma+0x15d4>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d103      	bne.n	8006368 <checkAktifCalisma+0x1478>
 8006360:	4b5e      	ldr	r3, [pc, #376]	; (80064dc <checkAktifCalisma+0x15ec>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01e      	beq.n	80063a6 <checkAktifCalisma+0x14b6>
 8006368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800636c:	4857      	ldr	r0, [pc, #348]	; (80064cc <checkAktifCalisma+0x15dc>)
 800636e:	f003 f855 	bl	800941c <HAL_GPIO_ReadPin>
 8006372:	4603      	mov	r3, r0
 8006374:	2b01      	cmp	r3, #1
 8006376:	d116      	bne.n	80063a6 <checkAktifCalisma+0x14b6>
 8006378:	4b55      	ldr	r3, [pc, #340]	; (80064d0 <checkAktifCalisma+0x15e0>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d003      	beq.n	8006388 <checkAktifCalisma+0x1498>
 8006380:	4b53      	ldr	r3, [pc, #332]	; (80064d0 <checkAktifCalisma+0x15e0>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b03      	cmp	r3, #3
 8006386:	d10e      	bne.n	80063a6 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006388:	4b4b      	ldr	r3, [pc, #300]	; (80064b8 <checkAktifCalisma+0x15c8>)
 800638a:	2201      	movs	r2, #1
 800638c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800638e:	2005      	movs	r0, #5
 8006390:	f7fa fc7e 	bl	8000c90 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006394:	2005      	movs	r0, #5
 8006396:	f7fa fc21 	bl	8000bdc <hata2EEPROM>
			convertAndSendData();
 800639a:	f001 fb1f 	bl	80079dc <convertAndSendData>
			tablakapisivicihatasi=1;
 800639e:	4b50      	ldr	r3, [pc, #320]	; (80064e0 <checkAktifCalisma+0x15f0>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	e023      	b.n	80063ee <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80063a6:	4b4e      	ldr	r3, [pc, #312]	; (80064e0 <checkAktifCalisma+0x15f0>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d01f      	beq.n	80063ee <checkAktifCalisma+0x14fe>
 80063ae:	4b4a      	ldr	r3, [pc, #296]	; (80064d8 <checkAktifCalisma+0x15e8>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01b      	beq.n	80063ee <checkAktifCalisma+0x14fe>
 80063b6:	4b43      	ldr	r3, [pc, #268]	; (80064c4 <checkAktifCalisma+0x15d4>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	f083 0301 	eor.w	r3, r3, #1
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d014      	beq.n	80063ee <checkAktifCalisma+0x14fe>
 80063c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063c8:	4840      	ldr	r0, [pc, #256]	; (80064cc <checkAktifCalisma+0x15dc>)
 80063ca:	f003 f827 	bl	800941c <HAL_GPIO_ReadPin>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10c      	bne.n	80063ee <checkAktifCalisma+0x14fe>
 80063d4:	4b40      	ldr	r3, [pc, #256]	; (80064d8 <checkAktifCalisma+0x15e8>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80063dc:	4b40      	ldr	r3, [pc, #256]	; (80064e0 <checkAktifCalisma+0x15f0>)
 80063de:	2200      	movs	r2, #0
 80063e0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80063e2:	4b3e      	ldr	r3, [pc, #248]	; (80064dc <checkAktifCalisma+0x15ec>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80063e8:	2005      	movs	r0, #5
 80063ea:	f7fe fbaf 	bl	8004b4c <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80063ee:	4b30      	ldr	r3, [pc, #192]	; (80064b0 <checkAktifCalisma+0x15c0>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d107      	bne.n	8006406 <checkAktifCalisma+0x1516>
 80063f6:	4b2a      	ldr	r3, [pc, #168]	; (80064a0 <checkAktifCalisma+0x15b0>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d103      	bne.n	8006406 <checkAktifCalisma+0x1516>
 80063fe:	4b39      	ldr	r3, [pc, #228]	; (80064e4 <checkAktifCalisma+0x15f4>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d016      	beq.n	8006434 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8006406:	4b38      	ldr	r3, [pc, #224]	; (80064e8 <checkAktifCalisma+0x15f8>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4b38      	ldr	r3, [pc, #224]	; (80064ec <checkAktifCalisma+0x15fc>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	4a37      	ldr	r2, [pc, #220]	; (80064f0 <checkAktifCalisma+0x1600>)
 8006412:	7812      	ldrb	r2, [r2, #0]
 8006414:	4293      	cmp	r3, r2
 8006416:	d30d      	bcc.n	8006434 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006418:	4b27      	ldr	r3, [pc, #156]	; (80064b8 <checkAktifCalisma+0x15c8>)
 800641a:	2201      	movs	r2, #1
 800641c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800641e:	2006      	movs	r0, #6
 8006420:	f7fa fc36 	bl	8000c90 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006424:	2006      	movs	r0, #6
 8006426:	f7fa fbd9 	bl	8000bdc <hata2EEPROM>
			  	convertAndSendData();
 800642a:	f001 fad7 	bl	80079dc <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800642e:	4b31      	ldr	r3, [pc, #196]	; (80064f4 <checkAktifCalisma+0x1604>)
 8006430:	2201      	movs	r2, #1
 8006432:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006434:	4b2f      	ldr	r3, [pc, #188]	; (80064f4 <checkAktifCalisma+0x1604>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d013      	beq.n	8006464 <checkAktifCalisma+0x1574>
 800643c:	2108      	movs	r1, #8
 800643e:	4823      	ldr	r0, [pc, #140]	; (80064cc <checkAktifCalisma+0x15dc>)
 8006440:	f002 ffec 	bl	800941c <HAL_GPIO_ReadPin>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00c      	beq.n	8006464 <checkAktifCalisma+0x1574>
 800644a:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <checkAktifCalisma+0x15d4>)
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	f083 0301 	eor.w	r3, r3, #1
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006458:	4b26      	ldr	r3, [pc, #152]	; (80064f4 <checkAktifCalisma+0x1604>)
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800645e:	2006      	movs	r0, #6
 8006460:	f7fe fb74 	bl	8004b4c <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006464:	4b24      	ldr	r3, [pc, #144]	; (80064f8 <checkAktifCalisma+0x1608>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10b      	bne.n	8006484 <checkAktifCalisma+0x1594>
 800646c:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <checkAktifCalisma+0x15b0>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d107      	bne.n	8006484 <checkAktifCalisma+0x1594>
 8006474:	4b21      	ldr	r3, [pc, #132]	; (80064fc <checkAktifCalisma+0x160c>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d103      	bne.n	8006484 <checkAktifCalisma+0x1594>
 800647c:	4b19      	ldr	r3, [pc, #100]	; (80064e4 <checkAktifCalisma+0x15f4>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d03f      	beq.n	8006504 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006484:	4b1e      	ldr	r3, [pc, #120]	; (8006500 <checkAktifCalisma+0x1610>)
 8006486:	2200      	movs	r2, #0
 8006488:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800648a:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <checkAktifCalisma+0x15d8>)
 800648c:	2201      	movs	r2, #1
 800648e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006490:	4b12      	ldr	r3, [pc, #72]	; (80064dc <checkAktifCalisma+0x15ec>)
 8006492:	2201      	movs	r2, #1
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	e03c      	b.n	8006512 <checkAktifCalisma+0x1622>
 8006498:	20000271 	.word	0x20000271
 800649c:	20000277 	.word	0x20000277
 80064a0:	20000258 	.word	0x20000258
 80064a4:	20000281 	.word	0x20000281
 80064a8:	20000223 	.word	0x20000223
 80064ac:	20000227 	.word	0x20000227
 80064b0:	20000274 	.word	0x20000274
 80064b4:	40011000 	.word	0x40011000
 80064b8:	20000275 	.word	0x20000275
 80064bc:	2000027e 	.word	0x2000027e
 80064c0:	40010c00 	.word	0x40010c00
 80064c4:	2000026e 	.word	0x2000026e
 80064c8:	20000282 	.word	0x20000282
 80064cc:	40010800 	.word	0x40010800
 80064d0:	20000228 	.word	0x20000228
 80064d4:	2000027f 	.word	0x2000027f
 80064d8:	20000262 	.word	0x20000262
 80064dc:	20000283 	.word	0x20000283
 80064e0:	20000280 	.word	0x20000280
 80064e4:	20000257 	.word	0x20000257
 80064e8:	200001fc 	.word	0x200001fc
 80064ec:	20000210 	.word	0x20000210
 80064f0:	20000238 	.word	0x20000238
 80064f4:	2000026f 	.word	0x2000026f
 80064f8:	20000255 	.word	0x20000255
 80064fc:	20000256 	.word	0x20000256
 8006500:	20000276 	.word	0x20000276
		} else {
			makineCalisiyor=1;
 8006504:	4b1e      	ldr	r3, [pc, #120]	; (8006580 <checkAktifCalisma+0x1690>)
 8006506:	2201      	movs	r2, #1
 8006508:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800650a:	4b1e      	ldr	r3, [pc, #120]	; (8006584 <checkAktifCalisma+0x1694>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1e      	ldr	r2, [pc, #120]	; (8006588 <checkAktifCalisma+0x1698>)
 8006510:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006512:	4b1e      	ldr	r3, [pc, #120]	; (800658c <checkAktifCalisma+0x169c>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d02f      	beq.n	800657a <checkAktifCalisma+0x168a>
 800651a:	4b1d      	ldr	r3, [pc, #116]	; (8006590 <checkAktifCalisma+0x16a0>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	f083 0301 	eor.w	r3, r3, #1
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d028      	beq.n	800657a <checkAktifCalisma+0x168a>
 8006528:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <checkAktifCalisma+0x16a4>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	f083 0301 	eor.w	r3, r3, #1
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d021      	beq.n	800657a <checkAktifCalisma+0x168a>
 8006536:	4b18      	ldr	r3, [pc, #96]	; (8006598 <checkAktifCalisma+0x16a8>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	f083 0301 	eor.w	r3, r3, #1
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d01a      	beq.n	800657a <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006544:	4b15      	ldr	r3, [pc, #84]	; (800659c <checkAktifCalisma+0x16ac>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	f083 0301 	eor.w	r3, r3, #1
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d013      	beq.n	800657a <checkAktifCalisma+0x168a>
 8006552:	4b13      	ldr	r3, [pc, #76]	; (80065a0 <checkAktifCalisma+0x16b0>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	f083 0301 	eor.w	r3, r3, #1
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00c      	beq.n	800657a <checkAktifCalisma+0x168a>
 8006560:	4b10      	ldr	r3, [pc, #64]	; (80065a4 <checkAktifCalisma+0x16b4>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f083 0301 	eor.w	r3, r3, #1
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <checkAktifCalisma+0x168a>
			hataVar=0;
 800656e:	4b07      	ldr	r3, [pc, #28]	; (800658c <checkAktifCalisma+0x169c>)
 8006570:	2200      	movs	r2, #0
 8006572:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006574:	2007      	movs	r0, #7
 8006576:	f7fe fae9 	bl	8004b4c <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800657a:	bf00      	nop
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000276 	.word	0x20000276
 8006584:	200001fc 	.word	0x200001fc
 8006588:	20000210 	.word	0x20000210
 800658c:	20000275 	.word	0x20000275
 8006590:	20000270 	.word	0x20000270
 8006594:	20000271 	.word	0x20000271
 8006598:	2000027e 	.word	0x2000027e
 800659c:	2000027f 	.word	0x2000027f
 80065a0:	20000280 	.word	0x20000280
 80065a4:	2000026f 	.word	0x2000026f

080065a8 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80065ac:	4b8b      	ldr	r3, [pc, #556]	; (80067dc <checkDemoModCalisma+0x234>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	f040 8229 	bne.w	8006a08 <checkDemoModCalisma+0x460>
 80065b6:	4b8a      	ldr	r3, [pc, #552]	; (80067e0 <checkDemoModCalisma+0x238>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 8224 	beq.w	8006a08 <checkDemoModCalisma+0x460>
 80065c0:	4b88      	ldr	r3, [pc, #544]	; (80067e4 <checkDemoModCalisma+0x23c>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f040 821f 	bne.w	8006a08 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80065ca:	2102      	movs	r1, #2
 80065cc:	4886      	ldr	r0, [pc, #536]	; (80067e8 <checkDemoModCalisma+0x240>)
 80065ce:	f002 ff25 	bl	800941c <HAL_GPIO_ReadPin>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d11d      	bne.n	8006614 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80065d8:	4b84      	ldr	r3, [pc, #528]	; (80067ec <checkDemoModCalisma+0x244>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	f083 0301 	eor.w	r3, r3, #1
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d016      	beq.n	8006614 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80065e6:	4b82      	ldr	r3, [pc, #520]	; (80067f0 <checkDemoModCalisma+0x248>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	f083 0301 	eor.w	r3, r3, #1
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00f      	beq.n	8006614 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80065f4:	4b7f      	ldr	r3, [pc, #508]	; (80067f4 <checkDemoModCalisma+0x24c>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	f083 0301 	eor.w	r3, r3, #1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d008      	beq.n	8006614 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006602:	2201      	movs	r2, #1
 8006604:	2104      	movs	r1, #4
 8006606:	487c      	ldr	r0, [pc, #496]	; (80067f8 <checkDemoModCalisma+0x250>)
 8006608:	f002 ff1f 	bl	800944a <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 800660c:	4b7b      	ldr	r3, [pc, #492]	; (80067fc <checkDemoModCalisma+0x254>)
 800660e:	2201      	movs	r2, #1
 8006610:	701a      	strb	r2, [r3, #0]
 8006612:	e00e      	b.n	8006632 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006614:	2102      	movs	r1, #2
 8006616:	4874      	ldr	r0, [pc, #464]	; (80067e8 <checkDemoModCalisma+0x240>)
 8006618:	f002 ff00 	bl	800941c <HAL_GPIO_ReadPin>
 800661c:	4603      	mov	r3, r0
 800661e:	2b01      	cmp	r3, #1
 8006620:	d107      	bne.n	8006632 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006622:	2200      	movs	r2, #0
 8006624:	2104      	movs	r1, #4
 8006626:	4874      	ldr	r0, [pc, #464]	; (80067f8 <checkDemoModCalisma+0x250>)
 8006628:	f002 ff0f 	bl	800944a <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 800662c:	4b73      	ldr	r3, [pc, #460]	; (80067fc <checkDemoModCalisma+0x254>)
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006632:	4b72      	ldr	r3, [pc, #456]	; (80067fc <checkDemoModCalisma+0x254>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10b      	bne.n	8006652 <checkDemoModCalisma+0xaa>
 800663a:	4b6d      	ldr	r3, [pc, #436]	; (80067f0 <checkDemoModCalisma+0x248>)
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d107      	bne.n	8006652 <checkDemoModCalisma+0xaa>
 8006642:	4b6c      	ldr	r3, [pc, #432]	; (80067f4 <checkDemoModCalisma+0x24c>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d103      	bne.n	8006652 <checkDemoModCalisma+0xaa>
 800664a:	4b68      	ldr	r3, [pc, #416]	; (80067ec <checkDemoModCalisma+0x244>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00c      	beq.n	800666c <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006652:	2201      	movs	r2, #1
 8006654:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006658:	4867      	ldr	r0, [pc, #412]	; (80067f8 <checkDemoModCalisma+0x250>)
 800665a:	f002 fef6 	bl	800944a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800665e:	2201      	movs	r2, #1
 8006660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006664:	4864      	ldr	r0, [pc, #400]	; (80067f8 <checkDemoModCalisma+0x250>)
 8006666:	f002 fef0 	bl	800944a <HAL_GPIO_WritePin>
 800666a:	e00b      	b.n	8006684 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800666c:	2200      	movs	r2, #0
 800666e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006672:	4861      	ldr	r0, [pc, #388]	; (80067f8 <checkDemoModCalisma+0x250>)
 8006674:	f002 fee9 	bl	800944a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006678:	2200      	movs	r2, #0
 800667a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800667e:	485e      	ldr	r0, [pc, #376]	; (80067f8 <checkDemoModCalisma+0x250>)
 8006680:	f002 fee3 	bl	800944a <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006684:	2102      	movs	r1, #2
 8006686:	4858      	ldr	r0, [pc, #352]	; (80067e8 <checkDemoModCalisma+0x240>)
 8006688:	f002 fec8 	bl	800941c <HAL_GPIO_ReadPin>
 800668c:	4603      	mov	r3, r0
 800668e:	2b01      	cmp	r3, #1
 8006690:	d10d      	bne.n	80066ae <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006696:	4854      	ldr	r0, [pc, #336]	; (80067e8 <checkDemoModCalisma+0x240>)
 8006698:	f002 fec0 	bl	800941c <HAL_GPIO_ReadPin>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d105      	bne.n	80066ae <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80066a2:	4b56      	ldr	r3, [pc, #344]	; (80067fc <checkDemoModCalisma+0x254>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	f083 0301 	eor.w	r3, r3, #1
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80066ae:	2102      	movs	r1, #2
 80066b0:	484d      	ldr	r0, [pc, #308]	; (80067e8 <checkDemoModCalisma+0x240>)
 80066b2:	f002 feb3 	bl	800941c <HAL_GPIO_ReadPin>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d125      	bne.n	8006708 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80066bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066c0:	4849      	ldr	r0, [pc, #292]	; (80067e8 <checkDemoModCalisma+0x240>)
 80066c2:	f002 feab 	bl	800941c <HAL_GPIO_ReadPin>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d11d      	bne.n	8006708 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80066cc:	4b4b      	ldr	r3, [pc, #300]	; (80067fc <checkDemoModCalisma+0x254>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	f083 0301 	eor.w	r3, r3, #1
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d016      	beq.n	8006708 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80066da:	4b44      	ldr	r3, [pc, #272]	; (80067ec <checkDemoModCalisma+0x244>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	f083 0301 	eor.w	r3, r3, #1
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00f      	beq.n	8006708 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80066e8:	4b42      	ldr	r3, [pc, #264]	; (80067f4 <checkDemoModCalisma+0x24c>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	f083 0301 	eor.w	r3, r3, #1
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d008      	beq.n	8006708 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80066f6:	2201      	movs	r2, #1
 80066f8:	2120      	movs	r1, #32
 80066fa:	483b      	ldr	r0, [pc, #236]	; (80067e8 <checkDemoModCalisma+0x240>)
 80066fc:	f002 fea5 	bl	800944a <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006700:	4b3b      	ldr	r3, [pc, #236]	; (80067f0 <checkDemoModCalisma+0x248>)
 8006702:	2201      	movs	r2, #1
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	e007      	b.n	8006718 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006708:	2200      	movs	r2, #0
 800670a:	2120      	movs	r1, #32
 800670c:	4836      	ldr	r0, [pc, #216]	; (80067e8 <checkDemoModCalisma+0x240>)
 800670e:	f002 fe9c 	bl	800944a <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8006712:	4b37      	ldr	r3, [pc, #220]	; (80067f0 <checkDemoModCalisma+0x248>)
 8006714:	2200      	movs	r2, #0
 8006716:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006718:	2102      	movs	r1, #2
 800671a:	4833      	ldr	r0, [pc, #204]	; (80067e8 <checkDemoModCalisma+0x240>)
 800671c:	f002 fe7e 	bl	800941c <HAL_GPIO_ReadPin>
 8006720:	4603      	mov	r3, r0
 8006722:	2b01      	cmp	r3, #1
 8006724:	d125      	bne.n	8006772 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006726:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800672a:	482f      	ldr	r0, [pc, #188]	; (80067e8 <checkDemoModCalisma+0x240>)
 800672c:	f002 fe76 	bl	800941c <HAL_GPIO_ReadPin>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d11d      	bne.n	8006772 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006736:	4b31      	ldr	r3, [pc, #196]	; (80067fc <checkDemoModCalisma+0x254>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	f083 0301 	eor.w	r3, r3, #1
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d016      	beq.n	8006772 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006744:	4b2a      	ldr	r3, [pc, #168]	; (80067f0 <checkDemoModCalisma+0x248>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	f083 0301 	eor.w	r3, r3, #1
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00f      	beq.n	8006772 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006752:	4b26      	ldr	r3, [pc, #152]	; (80067ec <checkDemoModCalisma+0x244>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	f083 0301 	eor.w	r3, r3, #1
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d008      	beq.n	8006772 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006760:	2201      	movs	r2, #1
 8006762:	2110      	movs	r1, #16
 8006764:	4820      	ldr	r0, [pc, #128]	; (80067e8 <checkDemoModCalisma+0x240>)
 8006766:	f002 fe70 	bl	800944a <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800676a:	4b22      	ldr	r3, [pc, #136]	; (80067f4 <checkDemoModCalisma+0x24c>)
 800676c:	2201      	movs	r2, #1
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	e007      	b.n	8006782 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006772:	2200      	movs	r2, #0
 8006774:	2110      	movs	r1, #16
 8006776:	481c      	ldr	r0, [pc, #112]	; (80067e8 <checkDemoModCalisma+0x240>)
 8006778:	f002 fe67 	bl	800944a <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 800677c:	4b1d      	ldr	r3, [pc, #116]	; (80067f4 <checkDemoModCalisma+0x24c>)
 800677e:	2200      	movs	r2, #0
 8006780:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006782:	2104      	movs	r1, #4
 8006784:	4818      	ldr	r0, [pc, #96]	; (80067e8 <checkDemoModCalisma+0x240>)
 8006786:	f002 fe49 	bl	800941c <HAL_GPIO_ReadPin>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d139      	bne.n	8006804 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006790:	4b1a      	ldr	r3, [pc, #104]	; (80067fc <checkDemoModCalisma+0x254>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	f083 0301 	eor.w	r3, r3, #1
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d032      	beq.n	8006804 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800679e:	4b15      	ldr	r3, [pc, #84]	; (80067f4 <checkDemoModCalisma+0x24c>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	f083 0301 	eor.w	r3, r3, #1
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d02b      	beq.n	8006804 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80067ac:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <checkDemoModCalisma+0x248>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	f083 0301 	eor.w	r3, r3, #1
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d024      	beq.n	8006804 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80067ba:	2201      	movs	r2, #1
 80067bc:	2102      	movs	r1, #2
 80067be:	480e      	ldr	r0, [pc, #56]	; (80067f8 <checkDemoModCalisma+0x250>)
 80067c0:	f002 fe43 	bl	800944a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80067c4:	2201      	movs	r2, #1
 80067c6:	2101      	movs	r1, #1
 80067c8:	480b      	ldr	r0, [pc, #44]	; (80067f8 <checkDemoModCalisma+0x250>)
 80067ca:	f002 fe3e 	bl	800944a <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80067ce:	4b07      	ldr	r3, [pc, #28]	; (80067ec <checkDemoModCalisma+0x244>)
 80067d0:	2201      	movs	r2, #1
 80067d2:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80067d4:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <checkDemoModCalisma+0x258>)
 80067d6:	2201      	movs	r2, #1
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	e027      	b.n	800682c <checkDemoModCalisma+0x284>
 80067dc:	2000023e 	.word	0x2000023e
 80067e0:	20000272 	.word	0x20000272
 80067e4:	2000023d 	.word	0x2000023d
 80067e8:	40011000 	.word	0x40011000
 80067ec:	20000279 	.word	0x20000279
 80067f0:	2000027a 	.word	0x2000027a
 80067f4:	2000027b 	.word	0x2000027b
 80067f8:	40010c00 	.word	0x40010c00
 80067fc:	20000278 	.word	0x20000278
 8006800:	2000025e 	.word	0x2000025e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006804:	2104      	movs	r1, #4
 8006806:	48a0      	ldr	r0, [pc, #640]	; (8006a88 <checkDemoModCalisma+0x4e0>)
 8006808:	f002 fe08 	bl	800941c <HAL_GPIO_ReadPin>
 800680c:	4603      	mov	r3, r0
 800680e:	2b01      	cmp	r3, #1
 8006810:	d10c      	bne.n	800682c <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006812:	2200      	movs	r2, #0
 8006814:	2102      	movs	r1, #2
 8006816:	489d      	ldr	r0, [pc, #628]	; (8006a8c <checkDemoModCalisma+0x4e4>)
 8006818:	f002 fe17 	bl	800944a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800681c:	2200      	movs	r2, #0
 800681e:	2101      	movs	r1, #1
 8006820:	489a      	ldr	r0, [pc, #616]	; (8006a8c <checkDemoModCalisma+0x4e4>)
 8006822:	f002 fe12 	bl	800944a <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006826:	4b9a      	ldr	r3, [pc, #616]	; (8006a90 <checkDemoModCalisma+0x4e8>)
 8006828:	2200      	movs	r2, #0
 800682a:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 800682c:	2104      	movs	r1, #4
 800682e:	4896      	ldr	r0, [pc, #600]	; (8006a88 <checkDemoModCalisma+0x4e0>)
 8006830:	f002 fdf4 	bl	800941c <HAL_GPIO_ReadPin>
 8006834:	4603      	mov	r3, r0
 8006836:	2b01      	cmp	r3, #1
 8006838:	d10d      	bne.n	8006856 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800683a:	2201      	movs	r2, #1
 800683c:	2180      	movs	r1, #128	; 0x80
 800683e:	4895      	ldr	r0, [pc, #596]	; (8006a94 <checkDemoModCalisma+0x4ec>)
 8006840:	f002 fe03 	bl	800944a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006844:	2201      	movs	r2, #1
 8006846:	2120      	movs	r1, #32
 8006848:	4892      	ldr	r0, [pc, #584]	; (8006a94 <checkDemoModCalisma+0x4ec>)
 800684a:	f002 fdfe 	bl	800944a <HAL_GPIO_WritePin>
			timer3 = millis;
 800684e:	4b92      	ldr	r3, [pc, #584]	; (8006a98 <checkDemoModCalisma+0x4f0>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a92      	ldr	r2, [pc, #584]	; (8006a9c <checkDemoModCalisma+0x4f4>)
 8006854:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006856:	4b90      	ldr	r3, [pc, #576]	; (8006a98 <checkDemoModCalisma+0x4f0>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b90      	ldr	r3, [pc, #576]	; (8006a9c <checkDemoModCalisma+0x4f4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b04      	cmp	r3, #4
 8006862:	d909      	bls.n	8006878 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006864:	2200      	movs	r2, #0
 8006866:	2180      	movs	r1, #128	; 0x80
 8006868:	488a      	ldr	r0, [pc, #552]	; (8006a94 <checkDemoModCalisma+0x4ec>)
 800686a:	f002 fdee 	bl	800944a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800686e:	2200      	movs	r2, #0
 8006870:	2120      	movs	r1, #32
 8006872:	4888      	ldr	r0, [pc, #544]	; (8006a94 <checkDemoModCalisma+0x4ec>)
 8006874:	f002 fde9 	bl	800944a <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006878:	2102      	movs	r1, #2
 800687a:	4883      	ldr	r0, [pc, #524]	; (8006a88 <checkDemoModCalisma+0x4e0>)
 800687c:	f002 fdce 	bl	800941c <HAL_GPIO_ReadPin>
 8006880:	4603      	mov	r3, r0
 8006882:	2b01      	cmp	r3, #1
 8006884:	d108      	bne.n	8006898 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006886:	2201      	movs	r2, #1
 8006888:	2140      	movs	r1, #64	; 0x40
 800688a:	4882      	ldr	r0, [pc, #520]	; (8006a94 <checkDemoModCalisma+0x4ec>)
 800688c:	f002 fddd 	bl	800944a <HAL_GPIO_WritePin>
			timer3 = millis;
 8006890:	4b81      	ldr	r3, [pc, #516]	; (8006a98 <checkDemoModCalisma+0x4f0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a81      	ldr	r2, [pc, #516]	; (8006a9c <checkDemoModCalisma+0x4f4>)
 8006896:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006898:	4b7f      	ldr	r3, [pc, #508]	; (8006a98 <checkDemoModCalisma+0x4f0>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	4b7f      	ldr	r3, [pc, #508]	; (8006a9c <checkDemoModCalisma+0x4f4>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d904      	bls.n	80068b0 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80068a6:	2200      	movs	r2, #0
 80068a8:	2140      	movs	r1, #64	; 0x40
 80068aa:	487a      	ldr	r0, [pc, #488]	; (8006a94 <checkDemoModCalisma+0x4ec>)
 80068ac:	f002 fdcd 	bl	800944a <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80068b0:	4b7b      	ldr	r3, [pc, #492]	; (8006aa0 <checkDemoModCalisma+0x4f8>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d058      	beq.n	800696a <checkDemoModCalisma+0x3c2>
 80068b8:	4b7a      	ldr	r3, [pc, #488]	; (8006aa4 <checkDemoModCalisma+0x4fc>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d054      	beq.n	800696a <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80068c0:	4b79      	ldr	r3, [pc, #484]	; (8006aa8 <checkDemoModCalisma+0x500>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	3301      	adds	r3, #1
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	4b77      	ldr	r3, [pc, #476]	; (8006aa8 <checkDemoModCalisma+0x500>)
 80068ca:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80068cc:	4b76      	ldr	r3, [pc, #472]	; (8006aa8 <checkDemoModCalisma+0x500>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b09      	cmp	r3, #9
 80068d2:	d908      	bls.n	80068e6 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80068d4:	4b74      	ldr	r3, [pc, #464]	; (8006aa8 <checkDemoModCalisma+0x500>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80068da:	4b74      	ldr	r3, [pc, #464]	; (8006aac <checkDemoModCalisma+0x504>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	3301      	adds	r3, #1
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	4b72      	ldr	r3, [pc, #456]	; (8006aac <checkDemoModCalisma+0x504>)
 80068e4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80068e6:	4b71      	ldr	r3, [pc, #452]	; (8006aac <checkDemoModCalisma+0x504>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b09      	cmp	r3, #9
 80068ec:	d908      	bls.n	8006900 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80068ee:	4b6f      	ldr	r3, [pc, #444]	; (8006aac <checkDemoModCalisma+0x504>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80068f4:	4b6e      	ldr	r3, [pc, #440]	; (8006ab0 <checkDemoModCalisma+0x508>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	3301      	adds	r3, #1
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	4b6c      	ldr	r3, [pc, #432]	; (8006ab0 <checkDemoModCalisma+0x508>)
 80068fe:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006900:	4b6b      	ldr	r3, [pc, #428]	; (8006ab0 <checkDemoModCalisma+0x508>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b09      	cmp	r3, #9
 8006906:	d908      	bls.n	800691a <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006908:	4b69      	ldr	r3, [pc, #420]	; (8006ab0 <checkDemoModCalisma+0x508>)
 800690a:	2200      	movs	r2, #0
 800690c:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800690e:	4b69      	ldr	r3, [pc, #420]	; (8006ab4 <checkDemoModCalisma+0x50c>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	3301      	adds	r3, #1
 8006914:	b2da      	uxtb	r2, r3
 8006916:	4b67      	ldr	r3, [pc, #412]	; (8006ab4 <checkDemoModCalisma+0x50c>)
 8006918:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800691a:	4b66      	ldr	r3, [pc, #408]	; (8006ab4 <checkDemoModCalisma+0x50c>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	2b09      	cmp	r3, #9
 8006920:	d908      	bls.n	8006934 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8006922:	4b64      	ldr	r3, [pc, #400]	; (8006ab4 <checkDemoModCalisma+0x50c>)
 8006924:	2200      	movs	r2, #0
 8006926:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006928:	4b63      	ldr	r3, [pc, #396]	; (8006ab8 <checkDemoModCalisma+0x510>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	b2da      	uxtb	r2, r3
 8006930:	4b61      	ldr	r3, [pc, #388]	; (8006ab8 <checkDemoModCalisma+0x510>)
 8006932:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006934:	4b60      	ldr	r3, [pc, #384]	; (8006ab8 <checkDemoModCalisma+0x510>)
 8006936:	781a      	ldrb	r2, [r3, #0]
 8006938:	4b60      	ldr	r3, [pc, #384]	; (8006abc <checkDemoModCalisma+0x514>)
 800693a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800693e:	4b5d      	ldr	r3, [pc, #372]	; (8006ab4 <checkDemoModCalisma+0x50c>)
 8006940:	781a      	ldrb	r2, [r3, #0]
 8006942:	4b5e      	ldr	r3, [pc, #376]	; (8006abc <checkDemoModCalisma+0x514>)
 8006944:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006946:	4b5a      	ldr	r3, [pc, #360]	; (8006ab0 <checkDemoModCalisma+0x508>)
 8006948:	781a      	ldrb	r2, [r3, #0]
 800694a:	4b5c      	ldr	r3, [pc, #368]	; (8006abc <checkDemoModCalisma+0x514>)
 800694c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800694e:	4b57      	ldr	r3, [pc, #348]	; (8006aac <checkDemoModCalisma+0x504>)
 8006950:	781a      	ldrb	r2, [r3, #0]
 8006952:	4b5a      	ldr	r3, [pc, #360]	; (8006abc <checkDemoModCalisma+0x514>)
 8006954:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006956:	4b54      	ldr	r3, [pc, #336]	; (8006aa8 <checkDemoModCalisma+0x500>)
 8006958:	781a      	ldrb	r2, [r3, #0]
 800695a:	4b58      	ldr	r3, [pc, #352]	; (8006abc <checkDemoModCalisma+0x514>)
 800695c:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800695e:	4b58      	ldr	r3, [pc, #352]	; (8006ac0 <checkDemoModCalisma+0x518>)
 8006960:	2201      	movs	r2, #1
 8006962:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006964:	4b4f      	ldr	r3, [pc, #316]	; (8006aa4 <checkDemoModCalisma+0x4fc>)
 8006966:	2200      	movs	r2, #0
 8006968:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800696a:	4b56      	ldr	r3, [pc, #344]	; (8006ac4 <checkDemoModCalisma+0x51c>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 8087 	bne.w	8006a82 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006974:	4a54      	ldr	r2, [pc, #336]	; (8006ac8 <checkDemoModCalisma+0x520>)
 8006976:	2101      	movs	r1, #1
 8006978:	2002      	movs	r0, #2
 800697a:	f001 fa29 	bl	8007dd0 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800697e:	4a53      	ldr	r2, [pc, #332]	; (8006acc <checkDemoModCalisma+0x524>)
 8006980:	2101      	movs	r1, #1
 8006982:	2001      	movs	r0, #1
 8006984:	f001 fa24 	bl	8007dd0 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006988:	4b4b      	ldr	r3, [pc, #300]	; (8006ab8 <checkDemoModCalisma+0x510>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	220a      	movs	r2, #10
 800698e:	4950      	ldr	r1, [pc, #320]	; (8006ad0 <checkDemoModCalisma+0x528>)
 8006990:	4618      	mov	r0, r3
 8006992:	f005 fd6f 	bl	800c474 <itoa>
			lcd_print(2,12,snum);
 8006996:	4a4e      	ldr	r2, [pc, #312]	; (8006ad0 <checkDemoModCalisma+0x528>)
 8006998:	210c      	movs	r1, #12
 800699a:	2002      	movs	r0, #2
 800699c:	f001 fa18 	bl	8007dd0 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80069a0:	4b44      	ldr	r3, [pc, #272]	; (8006ab4 <checkDemoModCalisma+0x50c>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	220a      	movs	r2, #10
 80069a6:	494a      	ldr	r1, [pc, #296]	; (8006ad0 <checkDemoModCalisma+0x528>)
 80069a8:	4618      	mov	r0, r3
 80069aa:	f005 fd63 	bl	800c474 <itoa>
			lcd_print(2,13,snum);
 80069ae:	4a48      	ldr	r2, [pc, #288]	; (8006ad0 <checkDemoModCalisma+0x528>)
 80069b0:	210d      	movs	r1, #13
 80069b2:	2002      	movs	r0, #2
 80069b4:	f001 fa0c 	bl	8007dd0 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80069b8:	4b3d      	ldr	r3, [pc, #244]	; (8006ab0 <checkDemoModCalisma+0x508>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	220a      	movs	r2, #10
 80069be:	4944      	ldr	r1, [pc, #272]	; (8006ad0 <checkDemoModCalisma+0x528>)
 80069c0:	4618      	mov	r0, r3
 80069c2:	f005 fd57 	bl	800c474 <itoa>
			lcd_print(2,14,snum);
 80069c6:	4a42      	ldr	r2, [pc, #264]	; (8006ad0 <checkDemoModCalisma+0x528>)
 80069c8:	210e      	movs	r1, #14
 80069ca:	2002      	movs	r0, #2
 80069cc:	f001 fa00 	bl	8007dd0 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80069d0:	4b36      	ldr	r3, [pc, #216]	; (8006aac <checkDemoModCalisma+0x504>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	220a      	movs	r2, #10
 80069d6:	493e      	ldr	r1, [pc, #248]	; (8006ad0 <checkDemoModCalisma+0x528>)
 80069d8:	4618      	mov	r0, r3
 80069da:	f005 fd4b 	bl	800c474 <itoa>
			lcd_print(2,15,snum);
 80069de:	4a3c      	ldr	r2, [pc, #240]	; (8006ad0 <checkDemoModCalisma+0x528>)
 80069e0:	210f      	movs	r1, #15
 80069e2:	2002      	movs	r0, #2
 80069e4:	f001 f9f4 	bl	8007dd0 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80069e8:	4b2f      	ldr	r3, [pc, #188]	; (8006aa8 <checkDemoModCalisma+0x500>)
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	220a      	movs	r2, #10
 80069ee:	4938      	ldr	r1, [pc, #224]	; (8006ad0 <checkDemoModCalisma+0x528>)
 80069f0:	4618      	mov	r0, r3
 80069f2:	f005 fd3f 	bl	800c474 <itoa>
			lcd_print(2,16,snum);
 80069f6:	4a36      	ldr	r2, [pc, #216]	; (8006ad0 <checkDemoModCalisma+0x528>)
 80069f8:	2110      	movs	r1, #16
 80069fa:	2002      	movs	r0, #2
 80069fc:	f001 f9e8 	bl	8007dd0 <lcd_print>
			mesajYazildi=1;
 8006a00:	4b34      	ldr	r3, [pc, #208]	; (8006ad4 <checkDemoModCalisma+0x52c>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006a06:	e03c      	b.n	8006a82 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006a08:	4b33      	ldr	r3, [pc, #204]	; (8006ad8 <checkDemoModCalisma+0x530>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d003      	beq.n	8006a18 <checkDemoModCalisma+0x470>
 8006a10:	4b2c      	ldr	r3, [pc, #176]	; (8006ac4 <checkDemoModCalisma+0x51c>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d134      	bne.n	8006a82 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a1e:	481b      	ldr	r0, [pc, #108]	; (8006a8c <checkDemoModCalisma+0x4e4>)
 8006a20:	f002 fd13 	bl	800944a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006a24:	2200      	movs	r2, #0
 8006a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a2a:	4818      	ldr	r0, [pc, #96]	; (8006a8c <checkDemoModCalisma+0x4e4>)
 8006a2c:	f002 fd0d 	bl	800944a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006a30:	2200      	movs	r2, #0
 8006a32:	2104      	movs	r1, #4
 8006a34:	4815      	ldr	r0, [pc, #84]	; (8006a8c <checkDemoModCalisma+0x4e4>)
 8006a36:	f002 fd08 	bl	800944a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2102      	movs	r1, #2
 8006a3e:	4813      	ldr	r0, [pc, #76]	; (8006a8c <checkDemoModCalisma+0x4e4>)
 8006a40:	f002 fd03 	bl	800944a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006a44:	2200      	movs	r2, #0
 8006a46:	2101      	movs	r1, #1
 8006a48:	4810      	ldr	r0, [pc, #64]	; (8006a8c <checkDemoModCalisma+0x4e4>)
 8006a4a:	f002 fcfe 	bl	800944a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2120      	movs	r1, #32
 8006a52:	480d      	ldr	r0, [pc, #52]	; (8006a88 <checkDemoModCalisma+0x4e0>)
 8006a54:	f002 fcf9 	bl	800944a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2110      	movs	r1, #16
 8006a5c:	480a      	ldr	r0, [pc, #40]	; (8006a88 <checkDemoModCalisma+0x4e0>)
 8006a5e:	f002 fcf4 	bl	800944a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006a62:	2200      	movs	r2, #0
 8006a64:	2180      	movs	r1, #128	; 0x80
 8006a66:	480b      	ldr	r0, [pc, #44]	; (8006a94 <checkDemoModCalisma+0x4ec>)
 8006a68:	f002 fcef 	bl	800944a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2140      	movs	r1, #64	; 0x40
 8006a70:	4808      	ldr	r0, [pc, #32]	; (8006a94 <checkDemoModCalisma+0x4ec>)
 8006a72:	f002 fcea 	bl	800944a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006a76:	2200      	movs	r2, #0
 8006a78:	2120      	movs	r1, #32
 8006a7a:	4806      	ldr	r0, [pc, #24]	; (8006a94 <checkDemoModCalisma+0x4ec>)
 8006a7c:	f002 fce5 	bl	800944a <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006a80:	e7ff      	b.n	8006a82 <checkDemoModCalisma+0x4da>
 8006a82:	bf00      	nop
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40011000 	.word	0x40011000
 8006a8c:	40010c00 	.word	0x40010c00
 8006a90:	20000279 	.word	0x20000279
 8006a94:	40010800 	.word	0x40010800
 8006a98:	200001fc 	.word	0x200001fc
 8006a9c:	2000020c 	.word	0x2000020c
 8006aa0:	20000278 	.word	0x20000278
 8006aa4:	2000025e 	.word	0x2000025e
 8006aa8:	2000021d 	.word	0x2000021d
 8006aac:	2000021e 	.word	0x2000021e
 8006ab0:	20000000 	.word	0x20000000
 8006ab4:	20000001 	.word	0x20000001
 8006ab8:	2000021f 	.word	0x2000021f
 8006abc:	20000118 	.word	0x20000118
 8006ac0:	2000024c 	.word	0x2000024c
 8006ac4:	2000023d 	.word	0x2000023d
 8006ac8:	0800dc8c 	.word	0x0800dc8c
 8006acc:	0800dc98 	.word	0x0800dc98
 8006ad0:	20000188 	.word	0x20000188
 8006ad4:	20000254 	.word	0x20000254
 8006ad8:	2000023e 	.word	0x2000023e

08006adc <mainLoop>:

void mainLoop() {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006ae2:	f7fe f923 	bl	8004d2c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	48ac      	ldr	r0, [pc, #688]	; (8006d9c <mainLoop+0x2c0>)
 8006aea:	f002 fc97 	bl	800941c <HAL_GPIO_ReadPin>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d136      	bne.n	8006b62 <mainLoop+0x86>
 8006af4:	2108      	movs	r1, #8
 8006af6:	48aa      	ldr	r0, [pc, #680]	; (8006da0 <mainLoop+0x2c4>)
 8006af8:	f002 fc90 	bl	800941c <HAL_GPIO_ReadPin>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d12f      	bne.n	8006b62 <mainLoop+0x86>
 8006b02:	2102      	movs	r1, #2
 8006b04:	48a5      	ldr	r0, [pc, #660]	; (8006d9c <mainLoop+0x2c0>)
 8006b06:	f002 fc89 	bl	800941c <HAL_GPIO_ReadPin>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d128      	bne.n	8006b62 <mainLoop+0x86>
 8006b10:	2104      	movs	r1, #4
 8006b12:	48a2      	ldr	r0, [pc, #648]	; (8006d9c <mainLoop+0x2c0>)
 8006b14:	f002 fc82 	bl	800941c <HAL_GPIO_ReadPin>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d121      	bne.n	8006b62 <mainLoop+0x86>
 8006b1e:	2108      	movs	r1, #8
 8006b20:	489e      	ldr	r0, [pc, #632]	; (8006d9c <mainLoop+0x2c0>)
 8006b22:	f002 fc7b 	bl	800941c <HAL_GPIO_ReadPin>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d11a      	bne.n	8006b62 <mainLoop+0x86>
 8006b2c:	2180      	movs	r1, #128	; 0x80
 8006b2e:	489c      	ldr	r0, [pc, #624]	; (8006da0 <mainLoop+0x2c4>)
 8006b30:	f002 fc74 	bl	800941c <HAL_GPIO_ReadPin>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d113      	bne.n	8006b62 <mainLoop+0x86>
 8006b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b3e:	4898      	ldr	r0, [pc, #608]	; (8006da0 <mainLoop+0x2c4>)
 8006b40:	f002 fc6c 	bl	800941c <HAL_GPIO_ReadPin>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d10b      	bne.n	8006b62 <mainLoop+0x86>
 8006b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b4e:	4894      	ldr	r0, [pc, #592]	; (8006da0 <mainLoop+0x2c4>)
 8006b50:	f002 fc64 	bl	800941c <HAL_GPIO_ReadPin>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d103      	bne.n	8006b62 <mainLoop+0x86>
			butonKontrol=0;
 8006b5a:	4b92      	ldr	r3, [pc, #584]	; (8006da4 <mainLoop+0x2c8>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	701a      	strb	r2, [r3, #0]
 8006b60:	e003      	b.n	8006b6a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006b62:	4b91      	ldr	r3, [pc, #580]	; (8006da8 <mainLoop+0x2cc>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a91      	ldr	r2, [pc, #580]	; (8006dac <mainLoop+0x2d0>)
 8006b68:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006b6a:	4b91      	ldr	r3, [pc, #580]	; (8006db0 <mainLoop+0x2d4>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d03a      	beq.n	8006be8 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b72:	bf00      	nop
 8006b74:	488f      	ldr	r0, [pc, #572]	; (8006db4 <mainLoop+0x2d8>)
 8006b76:	f003 fa7a 	bl	800a06e <HAL_I2C_GetError>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d0f9      	beq.n	8006b74 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006b80:	bf00      	nop
 8006b82:	488c      	ldr	r0, [pc, #560]	; (8006db4 <mainLoop+0x2d8>)
 8006b84:	f003 fa66 	bl	800a054 <HAL_I2C_GetState>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d1f9      	bne.n	8006b82 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006b8e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006b92:	9302      	str	r3, [sp, #8]
 8006b94:	236e      	movs	r3, #110	; 0x6e
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	4b87      	ldr	r3, [pc, #540]	; (8006db8 <mainLoop+0x2dc>)
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	236e      	movs	r3, #110	; 0x6e
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	21a0      	movs	r1, #160	; 0xa0
 8006ba2:	4884      	ldr	r0, [pc, #528]	; (8006db4 <mainLoop+0x2d8>)
 8006ba4:	f002 fef4 	bl	8009990 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006ba8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bac:	f001 fe66 	bl	800887c <HAL_Delay>

		  hafizaYaz=0;
 8006bb0:	4b7f      	ldr	r3, [pc, #508]	; (8006db0 <mainLoop+0x2d4>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006bb6:	4b81      	ldr	r3, [pc, #516]	; (8006dbc <mainLoop+0x2e0>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d105      	bne.n	8006bca <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006bbe:	4a80      	ldr	r2, [pc, #512]	; (8006dc0 <mainLoop+0x2e4>)
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	2002      	movs	r0, #2
 8006bc4:	f001 f904 	bl	8007dd0 <lcd_print>
 8006bc8:	e008      	b.n	8006bdc <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006bca:	4b7c      	ldr	r3, [pc, #496]	; (8006dbc <mainLoop+0x2e0>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d104      	bne.n	8006bdc <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006bd2:	4a7c      	ldr	r2, [pc, #496]	; (8006dc4 <mainLoop+0x2e8>)
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	2002      	movs	r0, #2
 8006bd8:	f001 f8fa 	bl	8007dd0 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006be0:	f001 fe4c 	bl	800887c <HAL_Delay>
		  lcd_clear();
 8006be4:	f001 f920 	bl	8007e28 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006be8:	4b77      	ldr	r3, [pc, #476]	; (8006dc8 <mainLoop+0x2ec>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	f083 0301 	eor.w	r3, r3, #1
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d06d      	beq.n	8006cd2 <mainLoop+0x1f6>
 8006bf6:	486f      	ldr	r0, [pc, #444]	; (8006db4 <mainLoop+0x2d8>)
 8006bf8:	f003 fa2c 	bl	800a054 <HAL_I2C_GetState>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d167      	bne.n	8006cd2 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006c02:	4b72      	ldr	r3, [pc, #456]	; (8006dcc <mainLoop+0x2f0>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	f083 0301 	eor.w	r3, r3, #1
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d044      	beq.n	8006c9a <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006c10:	4a6f      	ldr	r2, [pc, #444]	; (8006dd0 <mainLoop+0x2f4>)
 8006c12:	2101      	movs	r1, #1
 8006c14:	2001      	movs	r0, #1
 8006c16:	f001 f8db 	bl	8007dd0 <lcd_print>
			  if(dilSecim==0) {
 8006c1a:	4b68      	ldr	r3, [pc, #416]	; (8006dbc <mainLoop+0x2e0>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d105      	bne.n	8006c2e <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006c22:	4a6c      	ldr	r2, [pc, #432]	; (8006dd4 <mainLoop+0x2f8>)
 8006c24:	2101      	movs	r1, #1
 8006c26:	2002      	movs	r0, #2
 8006c28:	f001 f8d2 	bl	8007dd0 <lcd_print>
 8006c2c:	e008      	b.n	8006c40 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006c2e:	4b63      	ldr	r3, [pc, #396]	; (8006dbc <mainLoop+0x2e0>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d104      	bne.n	8006c40 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006c36:	4a68      	ldr	r2, [pc, #416]	; (8006dd8 <mainLoop+0x2fc>)
 8006c38:	2101      	movs	r1, #1
 8006c3a:	2002      	movs	r0, #2
 8006c3c:	f001 f8c8 	bl	8007dd0 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c44:	f001 fe1a 	bl	800887c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006c48:	bf00      	nop
 8006c4a:	485a      	ldr	r0, [pc, #360]	; (8006db4 <mainLoop+0x2d8>)
 8006c4c:	f003 fa0f 	bl	800a06e <HAL_I2C_GetError>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d0f9      	beq.n	8006c4a <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006c56:	e003      	b.n	8006c60 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c5c:	f001 fe0e 	bl	800887c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006c60:	4854      	ldr	r0, [pc, #336]	; (8006db4 <mainLoop+0x2d8>)
 8006c62:	f003 f9f7 	bl	800a054 <HAL_I2C_GetState>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d1f5      	bne.n	8006c58 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006c6c:	4b53      	ldr	r3, [pc, #332]	; (8006dbc <mainLoop+0x2e0>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d105      	bne.n	8006c80 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006c74:	4a59      	ldr	r2, [pc, #356]	; (8006ddc <mainLoop+0x300>)
 8006c76:	2101      	movs	r1, #1
 8006c78:	2002      	movs	r0, #2
 8006c7a:	f001 f8a9 	bl	8007dd0 <lcd_print>
 8006c7e:	e008      	b.n	8006c92 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006c80:	4b4e      	ldr	r3, [pc, #312]	; (8006dbc <mainLoop+0x2e0>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d104      	bne.n	8006c92 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006c88:	4a55      	ldr	r2, [pc, #340]	; (8006de0 <mainLoop+0x304>)
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	2002      	movs	r0, #2
 8006c8e:	f001 f89f 	bl	8007dd0 <lcd_print>
			  }

			  ilkOkuma=1;
 8006c92:	4b4e      	ldr	r3, [pc, #312]	; (8006dcc <mainLoop+0x2f0>)
 8006c94:	2201      	movs	r2, #1
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	e014      	b.n	8006cc4 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006c9a:	4b48      	ldr	r3, [pc, #288]	; (8006dbc <mainLoop+0x2e0>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d105      	bne.n	8006cae <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006ca2:	4a50      	ldr	r2, [pc, #320]	; (8006de4 <mainLoop+0x308>)
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	2002      	movs	r0, #2
 8006ca8:	f001 f892 	bl	8007dd0 <lcd_print>
 8006cac:	e008      	b.n	8006cc0 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006cae:	4b43      	ldr	r3, [pc, #268]	; (8006dbc <mainLoop+0x2e0>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d104      	bne.n	8006cc0 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006cb6:	4a4c      	ldr	r2, [pc, #304]	; (8006de8 <mainLoop+0x30c>)
 8006cb8:	2101      	movs	r1, #1
 8006cba:	2002      	movs	r0, #2
 8006cbc:	f001 f888 	bl	8007dd0 <lcd_print>
			  }
			  lcd_clear();
 8006cc0:	f001 f8b2 	bl	8007e28 <lcd_clear>
		  }

		  lcd_clear();
 8006cc4:	f001 f8b0 	bl	8007e28 <lcd_clear>

		  eepromKontrol();
 8006cc8:	f7f9 fab4 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006ccc:	4b3e      	ldr	r3, [pc, #248]	; (8006dc8 <mainLoop+0x2ec>)
 8006cce:	2201      	movs	r2, #1
 8006cd0:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006cd2:	4b46      	ldr	r3, [pc, #280]	; (8006dec <mainLoop+0x310>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d11c      	bne.n	8006d14 <mainLoop+0x238>
 8006cda:	4b45      	ldr	r3, [pc, #276]	; (8006df0 <mainLoop+0x314>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	f083 0301 	eor.w	r3, r3, #1
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d015      	beq.n	8006d14 <mainLoop+0x238>
 8006ce8:	4b42      	ldr	r3, [pc, #264]	; (8006df4 <mainLoop+0x318>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d111      	bne.n	8006d14 <mainLoop+0x238>
			lcd_clear();
 8006cf0:	f001 f89a 	bl	8007e28 <lcd_clear>
			HAL_Delay(10);
 8006cf4:	200a      	movs	r0, #10
 8006cf6:	f001 fdc1 	bl	800887c <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006cfa:	4a3f      	ldr	r2, [pc, #252]	; (8006df8 <mainLoop+0x31c>)
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	2001      	movs	r0, #1
 8006d00:	f001 f866 	bl	8007dd0 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006d04:	4a3d      	ldr	r2, [pc, #244]	; (8006dfc <mainLoop+0x320>)
 8006d06:	2101      	movs	r1, #1
 8006d08:	2002      	movs	r0, #2
 8006d0a:	f001 f861 	bl	8007dd0 <lcd_print>
			mesajYazildi=1;
 8006d0e:	4b38      	ldr	r3, [pc, #224]	; (8006df0 <mainLoop+0x314>)
 8006d10:	2201      	movs	r2, #1
 8006d12:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006d14:	4b35      	ldr	r3, [pc, #212]	; (8006dec <mainLoop+0x310>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d112      	bne.n	8006d42 <mainLoop+0x266>
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	481f      	ldr	r0, [pc, #124]	; (8006d9c <mainLoop+0x2c0>)
 8006d20:	f002 fb7c 	bl	800941c <HAL_GPIO_ReadPin>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d10b      	bne.n	8006d42 <mainLoop+0x266>
 8006d2a:	2104      	movs	r1, #4
 8006d2c:	481b      	ldr	r0, [pc, #108]	; (8006d9c <mainLoop+0x2c0>)
 8006d2e:	f002 fb75 	bl	800941c <HAL_GPIO_ReadPin>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d104      	bne.n	8006d42 <mainLoop+0x266>
			menuGiris=1;
 8006d38:	4b2c      	ldr	r3, [pc, #176]	; (8006dec <mainLoop+0x310>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006d3e:	f001 f873 	bl	8007e28 <lcd_clear>
		}

		if(menuGiris==1) {
 8006d42:	4b2a      	ldr	r3, [pc, #168]	; (8006dec <mainLoop+0x310>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <mainLoop+0x272>
			menu();
 8006d4a:	f7fa fadf 	bl	800130c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d52:	4813      	ldr	r0, [pc, #76]	; (8006da0 <mainLoop+0x2c4>)
 8006d54:	f002 fb91 	bl	800947a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006d58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d5c:	4828      	ldr	r0, [pc, #160]	; (8006e00 <mainLoop+0x324>)
 8006d5e:	f002 fb5d 	bl	800941c <HAL_GPIO_ReadPin>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <mainLoop+0x2a2>
 8006d68:	4b26      	ldr	r3, [pc, #152]	; (8006e04 <mainLoop+0x328>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	f083 0301 	eor.w	r3, r3, #1
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <mainLoop+0x2a2>
			stopVar=1;
 8006d76:	4b24      	ldr	r3, [pc, #144]	; (8006e08 <mainLoop+0x32c>)
 8006d78:	2201      	movs	r2, #1
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	e002      	b.n	8006d84 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006d7e:	4b22      	ldr	r3, [pc, #136]	; (8006e08 <mainLoop+0x32c>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006d84:	f7fd ffe8 	bl	8004d58 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006d88:	f7fe f81a 	bl	8004dc0 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006d8c:	f7fe f85e 	bl	8004e4c <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006d90:	f7fe f8ae 	bl	8004ef0 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006d94:	f7ff fc08 	bl	80065a8 <checkDemoModCalisma>
		checkLCDBacklight();
 8006d98:	e6a3      	b.n	8006ae2 <mainLoop+0x6>
 8006d9a:	bf00      	nop
 8006d9c:	40010800 	.word	0x40010800
 8006da0:	40011000 	.word	0x40011000
 8006da4:	2000024f 	.word	0x2000024f
 8006da8:	200001fc 	.word	0x200001fc
 8006dac:	20000218 	.word	0x20000218
 8006db0:	2000024c 	.word	0x2000024c
 8006db4:	200003a8 	.word	0x200003a8
 8006db8:	20000118 	.word	0x20000118
 8006dbc:	20000241 	.word	0x20000241
 8006dc0:	0800dcac 	.word	0x0800dcac
 8006dc4:	0800dcc0 	.word	0x0800dcc0
 8006dc8:	2000024d 	.word	0x2000024d
 8006dcc:	2000024e 	.word	0x2000024e
 8006dd0:	0800dcd4 	.word	0x0800dcd4
 8006dd4:	0800dce8 	.word	0x0800dce8
 8006dd8:	0800dcfc 	.word	0x0800dcfc
 8006ddc:	0800dd10 	.word	0x0800dd10
 8006de0:	0800dd24 	.word	0x0800dd24
 8006de4:	0800dd38 	.word	0x0800dd38
 8006de8:	0800dd4c 	.word	0x0800dd4c
 8006dec:	2000023d 	.word	0x2000023d
 8006df0:	20000254 	.word	0x20000254
 8006df4:	2000023e 	.word	0x2000023e
 8006df8:	0800dd60 	.word	0x0800dd60
 8006dfc:	0800dd74 	.word	0x0800dd74
 8006e00:	40010c00 	.word	0x40010c00
 8006e04:	20000275 	.word	0x20000275
 8006e08:	20000272 	.word	0x20000272

08006e0c <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006e12:	2001      	movs	r0, #1
 8006e14:	f001 f83a 	bl	8007e8c <lcd_cursor>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006e18:	2305      	movs	r3, #5
 8006e1a:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006e20:	2300      	movs	r3, #0
 8006e22:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006e24:	4ba0      	ldr	r3, [pc, #640]	; (80070a8 <takeMachineID+0x29c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	603b      	str	r3, [r7, #0]

    resetEEPROM4Wifi(1);
 8006e2a:	2001      	movs	r0, #1
 8006e2c:	f7f9 fdd4 	bl	80009d8 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8006e30:	2064      	movs	r0, #100	; 0x64
 8006e32:	f001 fd23 	bl	800887c <HAL_Delay>

    printTemplate(1, 0);
 8006e36:	2100      	movs	r1, #0
 8006e38:	2001      	movs	r0, #1
 8006e3a:	f7fa f8db 	bl	8000ff4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e3e:	2108      	movs	r1, #8
 8006e40:	489a      	ldr	r0, [pc, #616]	; (80070ac <takeMachineID+0x2a0>)
 8006e42:	f002 faeb 	bl	800941c <HAL_GPIO_ReadPin>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d12b      	bne.n	8006ea4 <takeMachineID+0x98>
        	lcd_cursor(0);
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	f001 f81d 	bl	8007e8c <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006e52:	4897      	ldr	r0, [pc, #604]	; (80070b0 <takeMachineID+0x2a4>)
 8006e54:	f7f9 f9e6 	bl	8000224 <strlen>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b0c      	cmp	r3, #12
 8006e5c:	d010      	beq.n	8006e80 <takeMachineID+0x74>
        		lcd_clear();
 8006e5e:	f000 ffe3 	bl	8007e28 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006e62:	4a94      	ldr	r2, [pc, #592]	; (80070b4 <takeMachineID+0x2a8>)
 8006e64:	2101      	movs	r1, #1
 8006e66:	2001      	movs	r0, #1
 8006e68:	f000 ffb2 	bl	8007dd0 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006e6c:	4a92      	ldr	r2, [pc, #584]	; (80070b8 <takeMachineID+0x2ac>)
 8006e6e:	2101      	movs	r1, #1
 8006e70:	2002      	movs	r0, #2
 8006e72:	f000 ffad 	bl	8007dd0 <lcd_print>
        		HAL_Delay(1200);
 8006e76:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006e7a:	f001 fcff 	bl	800887c <HAL_Delay>
        		goto mainSection;
 8006e7e:	e7c8      	b.n	8006e12 <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006e80:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e84:	9302      	str	r3, [sp, #8]
 8006e86:	236e      	movs	r3, #110	; 0x6e
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	4b8c      	ldr	r3, [pc, #560]	; (80070bc <takeMachineID+0x2b0>)
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	236e      	movs	r3, #110	; 0x6e
 8006e90:	2200      	movs	r2, #0
 8006e92:	21a0      	movs	r1, #160	; 0xa0
 8006e94:	488a      	ldr	r0, [pc, #552]	; (80070c0 <takeMachineID+0x2b4>)
 8006e96:	f002 fd7b 	bl	8009990 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e9e:	f001 fced 	bl	800887c <HAL_Delay>

            	break;
 8006ea2:	e13f      	b.n	8007124 <takeMachineID+0x318>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	4881      	ldr	r0, [pc, #516]	; (80070ac <takeMachineID+0x2a0>)
 8006ea8:	f002 fab8 	bl	800941c <HAL_GPIO_ReadPin>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d111      	bne.n	8006ed6 <takeMachineID+0xca>
        	if(cursorPosition == 7) {
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b07      	cmp	r3, #7
 8006eb6:	d102      	bne.n	8006ebe <takeMachineID+0xb2>
        		cursorPosition = 10;
 8006eb8:	230a      	movs	r3, #10
 8006eba:	60bb      	str	r3, [r7, #8]
 8006ebc:	e008      	b.n	8006ed0 <takeMachineID+0xc4>
        	} else if (cursorPosition == 14) {
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b0e      	cmp	r3, #14
 8006ec2:	d102      	bne.n	8006eca <takeMachineID+0xbe>
                cursorPosition = 3;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	60bb      	str	r3, [r7, #8]
 8006ec8:	e002      	b.n	8006ed0 <takeMachineID+0xc4>
            } else {
            	cursorPosition++;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006ed0:	2096      	movs	r0, #150	; 0x96
 8006ed2:	f001 fcd3 	bl	800887c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006ed6:	2108      	movs	r1, #8
 8006ed8:	487a      	ldr	r0, [pc, #488]	; (80070c4 <takeMachineID+0x2b8>)
 8006eda:	f002 fa9f 	bl	800941c <HAL_GPIO_ReadPin>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d111      	bne.n	8006f08 <takeMachineID+0xfc>
            if (cursorPosition == 3) {
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d102      	bne.n	8006ef0 <takeMachineID+0xe4>
                cursorPosition = 14;
 8006eea:	230e      	movs	r3, #14
 8006eec:	60bb      	str	r3, [r7, #8]
 8006eee:	e008      	b.n	8006f02 <takeMachineID+0xf6>
            } else if(cursorPosition == 10) {
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b0a      	cmp	r3, #10
 8006ef4:	d102      	bne.n	8006efc <takeMachineID+0xf0>
            	cursorPosition = 7;
 8006ef6:	2307      	movs	r3, #7
 8006ef8:	60bb      	str	r3, [r7, #8]
 8006efa:	e002      	b.n	8006f02 <takeMachineID+0xf6>
            } else {
            	cursorPosition--;
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	3b01      	subs	r3, #1
 8006f00:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006f02:	2096      	movs	r0, #150	; 0x96
 8006f04:	f001 fcba 	bl	800887c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006f08:	2102      	movs	r1, #2
 8006f0a:	4868      	ldr	r0, [pc, #416]	; (80070ac <takeMachineID+0x2a0>)
 8006f0c:	f002 fa86 	bl	800941c <HAL_GPIO_ReadPin>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	f040 80ac 	bne.w	8007070 <takeMachineID+0x264>
        	if(cursorPosition == 3) {
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d10a      	bne.n	8006f34 <takeMachineID+0x128>
        		machineID[arrayPos] = '0';
 8006f1e:	4a64      	ldr	r2, [pc, #400]	; (80070b0 <takeMachineID+0x2a4>)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4413      	add	r3, r2
 8006f24:	2230      	movs	r2, #48	; 0x30
 8006f26:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006f28:	4a64      	ldr	r2, [pc, #400]	; (80070bc <takeMachineID+0x2b0>)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	2200      	movs	r2, #0
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	e07c      	b.n	800702e <takeMachineID+0x222>
        	} else if(cursorPosition == 4) {
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d10a      	bne.n	8006f50 <takeMachineID+0x144>
        		machineID[arrayPos] = '1';
 8006f3a:	4a5d      	ldr	r2, [pc, #372]	; (80070b0 <takeMachineID+0x2a4>)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4413      	add	r3, r2
 8006f40:	2231      	movs	r2, #49	; 0x31
 8006f42:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006f44:	4a5d      	ldr	r2, [pc, #372]	; (80070bc <takeMachineID+0x2b0>)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	4413      	add	r3, r2
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	701a      	strb	r2, [r3, #0]
 8006f4e:	e06e      	b.n	800702e <takeMachineID+0x222>
        	} else if(cursorPosition == 5) {
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b05      	cmp	r3, #5
 8006f54:	d10a      	bne.n	8006f6c <takeMachineID+0x160>
        		machineID[arrayPos] = '2';
 8006f56:	4a56      	ldr	r2, [pc, #344]	; (80070b0 <takeMachineID+0x2a4>)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	2232      	movs	r2, #50	; 0x32
 8006f5e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006f60:	4a56      	ldr	r2, [pc, #344]	; (80070bc <takeMachineID+0x2b0>)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	4413      	add	r3, r2
 8006f66:	2202      	movs	r2, #2
 8006f68:	701a      	strb	r2, [r3, #0]
 8006f6a:	e060      	b.n	800702e <takeMachineID+0x222>
        	} else if(cursorPosition == 6) {
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2b06      	cmp	r3, #6
 8006f70:	d10a      	bne.n	8006f88 <takeMachineID+0x17c>
        		machineID[arrayPos] = '3';
 8006f72:	4a4f      	ldr	r2, [pc, #316]	; (80070b0 <takeMachineID+0x2a4>)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4413      	add	r3, r2
 8006f78:	2233      	movs	r2, #51	; 0x33
 8006f7a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006f7c:	4a4f      	ldr	r2, [pc, #316]	; (80070bc <takeMachineID+0x2b0>)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	4413      	add	r3, r2
 8006f82:	2203      	movs	r2, #3
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	e052      	b.n	800702e <takeMachineID+0x222>
        	} else if(cursorPosition == 7) {
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b07      	cmp	r3, #7
 8006f8c:	d10a      	bne.n	8006fa4 <takeMachineID+0x198>
        		machineID[arrayPos] = '4';
 8006f8e:	4a48      	ldr	r2, [pc, #288]	; (80070b0 <takeMachineID+0x2a4>)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4413      	add	r3, r2
 8006f94:	2234      	movs	r2, #52	; 0x34
 8006f96:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006f98:	4a48      	ldr	r2, [pc, #288]	; (80070bc <takeMachineID+0x2b0>)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	701a      	strb	r2, [r3, #0]
 8006fa2:	e044      	b.n	800702e <takeMachineID+0x222>
        	} else if(cursorPosition == 10) {
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b0a      	cmp	r3, #10
 8006fa8:	d10a      	bne.n	8006fc0 <takeMachineID+0x1b4>
        		machineID[arrayPos] = '5';
 8006faa:	4a41      	ldr	r2, [pc, #260]	; (80070b0 <takeMachineID+0x2a4>)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4413      	add	r3, r2
 8006fb0:	2235      	movs	r2, #53	; 0x35
 8006fb2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006fb4:	4a41      	ldr	r2, [pc, #260]	; (80070bc <takeMachineID+0x2b0>)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	4413      	add	r3, r2
 8006fba:	2205      	movs	r2, #5
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	e036      	b.n	800702e <takeMachineID+0x222>
        	} else if(cursorPosition == 11) {
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b0b      	cmp	r3, #11
 8006fc4:	d10a      	bne.n	8006fdc <takeMachineID+0x1d0>
        		machineID[arrayPos] = '6';
 8006fc6:	4a3a      	ldr	r2, [pc, #232]	; (80070b0 <takeMachineID+0x2a4>)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4413      	add	r3, r2
 8006fcc:	2236      	movs	r2, #54	; 0x36
 8006fce:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006fd0:	4a3a      	ldr	r2, [pc, #232]	; (80070bc <takeMachineID+0x2b0>)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	2206      	movs	r2, #6
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	e028      	b.n	800702e <takeMachineID+0x222>
        	} else if(cursorPosition == 12) {
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b0c      	cmp	r3, #12
 8006fe0:	d10a      	bne.n	8006ff8 <takeMachineID+0x1ec>
        		machineID[arrayPos] = '7';
 8006fe2:	4a33      	ldr	r2, [pc, #204]	; (80070b0 <takeMachineID+0x2a4>)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	2237      	movs	r2, #55	; 0x37
 8006fea:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006fec:	4a33      	ldr	r2, [pc, #204]	; (80070bc <takeMachineID+0x2b0>)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	2207      	movs	r2, #7
 8006ff4:	701a      	strb	r2, [r3, #0]
 8006ff6:	e01a      	b.n	800702e <takeMachineID+0x222>
        	} else if(cursorPosition == 13) {
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b0d      	cmp	r3, #13
 8006ffc:	d10a      	bne.n	8007014 <takeMachineID+0x208>
        		machineID[arrayPos] = '8';
 8006ffe:	4a2c      	ldr	r2, [pc, #176]	; (80070b0 <takeMachineID+0x2a4>)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4413      	add	r3, r2
 8007004:	2238      	movs	r2, #56	; 0x38
 8007006:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007008:	4a2c      	ldr	r2, [pc, #176]	; (80070bc <takeMachineID+0x2b0>)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	4413      	add	r3, r2
 800700e:	2208      	movs	r2, #8
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	e00c      	b.n	800702e <takeMachineID+0x222>
        	} else if(cursorPosition == 14) {
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b0e      	cmp	r3, #14
 8007018:	d109      	bne.n	800702e <takeMachineID+0x222>
        		machineID[arrayPos] = '9';
 800701a:	4a25      	ldr	r2, [pc, #148]	; (80070b0 <takeMachineID+0x2a4>)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4413      	add	r3, r2
 8007020:	2239      	movs	r2, #57	; 0x39
 8007022:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007024:	4a25      	ldr	r2, [pc, #148]	; (80070bc <takeMachineID+0x2b0>)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	4413      	add	r3, r2
 800702a:	2209      	movs	r2, #9
 800702c:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	b2d9      	uxtb	r1, r3
 8007032:	4a1f      	ldr	r2, [pc, #124]	; (80070b0 <takeMachineID+0x2a4>)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4413      	add	r3, r2
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	2001      	movs	r0, #1
 800703e:	f000 fedc 	bl	8007dfa <lcd_print_char>

        	writeLoc++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3301      	adds	r3, #1
 800704c:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	3301      	adds	r3, #1
 8007052:	603b      	str	r3, [r7, #0]

        	machineID[machineIDCharacterLimit] = '\0';
 8007054:	4b16      	ldr	r3, [pc, #88]	; (80070b0 <takeMachineID+0x2a4>)
 8007056:	2200      	movs	r2, #0
 8007058:	731a      	strb	r2, [r3, #12]
        	machineIDInt[machineIDCharacterLimit] = '\0';
 800705a:	4b1b      	ldr	r3, [pc, #108]	; (80070c8 <takeMachineID+0x2bc>)
 800705c:	2200      	movs	r2, #0
 800705e:	731a      	strb	r2, [r3, #12]
        	eepromData[eepromVal] = '\0';
 8007060:	4a16      	ldr	r2, [pc, #88]	; (80070bc <takeMachineID+0x2b0>)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	4413      	add	r3, r2
 8007066:	2200      	movs	r2, #0
 8007068:	701a      	strb	r2, [r3, #0]

        	HAL_Delay(150);
 800706a:	2096      	movs	r0, #150	; 0x96
 800706c:	f001 fc06 	bl	800887c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007070:	2104      	movs	r1, #4
 8007072:	480e      	ldr	r0, [pc, #56]	; (80070ac <takeMachineID+0x2a0>)
 8007074:	f002 f9d2 	bl	800941c <HAL_GPIO_ReadPin>
 8007078:	4603      	mov	r3, r0
 800707a:	2b01      	cmp	r3, #1
 800707c:	d14b      	bne.n	8007116 <takeMachineID+0x30a>
            if(strlen(machineID) >= 1) {
 800707e:	4b0c      	ldr	r3, [pc, #48]	; (80070b0 <takeMachineID+0x2a4>)
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d044      	beq.n	8007110 <takeMachineID+0x304>
                machineID[arrayPos] = '\0';
 8007086:	4a0a      	ldr	r2, [pc, #40]	; (80070b0 <takeMachineID+0x2a4>)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4413      	add	r3, r2
 800708c:	2200      	movs	r2, #0
 800708e:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007090:	4a0a      	ldr	r2, [pc, #40]	; (80070bc <takeMachineID+0x2b0>)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	4413      	add	r3, r2
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b05      	cmp	r3, #5
 800709e:	dd15      	ble.n	80070cc <takeMachineID+0x2c0>
                	writeLoc--;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3b01      	subs	r3, #1
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	e016      	b.n	80070d6 <takeMachineID+0x2ca>
 80070a8:	20000004 	.word	0x20000004
 80070ac:	40010800 	.word	0x40010800
 80070b0:	20000190 	.word	0x20000190
 80070b4:	0800dd88 	.word	0x0800dd88
 80070b8:	0800dd9c 	.word	0x0800dd9c
 80070bc:	20000118 	.word	0x20000118
 80070c0:	200003a8 	.word	0x200003a8
 80070c4:	40011000 	.word	0x40011000
 80070c8:	200001c4 	.word	0x200001c4
                } else if(writeLoc < 5) {
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	dc01      	bgt.n	80070d6 <takeMachineID+0x2ca>
                	writeLoc = 5;
 80070d2:	2305      	movs	r3, #5
 80070d4:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	dd06      	ble.n	80070ea <takeMachineID+0x2de>
                	arrayPos--;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3b01      	subs	r3, #1
 80070e0:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	603b      	str	r3, [r7, #0]
 80070e8:	e007      	b.n	80070fa <takeMachineID+0x2ee>
                } else if(arrayPos < 0) {
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	da04      	bge.n	80070fa <takeMachineID+0x2ee>
                	arrayPos = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 80070f4:	4b0d      	ldr	r3, [pc, #52]	; (800712c <takeMachineID+0x320>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	3304      	adds	r3, #4
 8007100:	b2db      	uxtb	r3, r3
 8007102:	4619      	mov	r1, r3
 8007104:	2001      	movs	r0, #1
 8007106:	f000 fe99 	bl	8007e3c <lcd_delete_char>
                HAL_Delay(50);
 800710a:	2032      	movs	r0, #50	; 0x32
 800710c:	f001 fbb6 	bl	800887c <HAL_Delay>
            }

            HAL_Delay(150);
 8007110:	2096      	movs	r0, #150	; 0x96
 8007112:	f001 fbb3 	bl	800887c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	4619      	mov	r1, r3
 800711c:	2002      	movs	r0, #2
 800711e:	f000 fe38 	bl	8007d92 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007122:	e68c      	b.n	8006e3e <takeMachineID+0x32>
    }
}
 8007124:	bf00      	nop
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	20000004 	.word	0x20000004

08007130 <takeWifiSSID>:

void takeWifiSSID() {
 8007130:	b580      	push	{r7, lr}
 8007132:	b08a      	sub	sp, #40	; 0x28
 8007134:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8007136:	2001      	movs	r0, #1
 8007138:	f000 fea8 	bl	8007e8c <lcd_cursor>

    resetEEPROM4Wifi(2);
 800713c:	2002      	movs	r0, #2
 800713e:	f7f9 fc4b 	bl	80009d8 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8007142:	2064      	movs	r0, #100	; 0x64
 8007144:	f001 fb9a 	bl	800887c <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007148:	2301      	movs	r3, #1
 800714a:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800714c:	2307      	movs	r3, #7
 800714e:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007150:	2301      	movs	r3, #1
 8007152:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007154:	2300      	movs	r3, #0
 8007156:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007158:	4ba3      	ldr	r3, [pc, #652]	; (80073e8 <takeWifiSSID+0x2b8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 800715e:	2101      	movs	r1, #1
 8007160:	2002      	movs	r0, #2
 8007162:	f7f9 ff47 	bl	8000ff4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007166:	2108      	movs	r1, #8
 8007168:	48a0      	ldr	r0, [pc, #640]	; (80073ec <takeWifiSSID+0x2bc>)
 800716a:	f002 f957 	bl	800941c <HAL_GPIO_ReadPin>
 800716e:	4603      	mov	r3, r0
 8007170:	2b01      	cmp	r3, #1
 8007172:	d12b      	bne.n	80071cc <takeWifiSSID+0x9c>
            lcd_cursor(0);
 8007174:	2000      	movs	r0, #0
 8007176:	f000 fe89 	bl	8007e8c <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 800717a:	489d      	ldr	r0, [pc, #628]	; (80073f0 <takeWifiSSID+0x2c0>)
 800717c:	f7f9 f852 	bl	8000224 <strlen>
 8007180:	4603      	mov	r3, r0
 8007182:	2b14      	cmp	r3, #20
 8007184:	d910      	bls.n	80071a8 <takeWifiSSID+0x78>
                lcd_clear();
 8007186:	f000 fe4f 	bl	8007e28 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 800718a:	4a9a      	ldr	r2, [pc, #616]	; (80073f4 <takeWifiSSID+0x2c4>)
 800718c:	2101      	movs	r1, #1
 800718e:	2001      	movs	r0, #1
 8007190:	f000 fe1e 	bl	8007dd0 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007194:	4a98      	ldr	r2, [pc, #608]	; (80073f8 <takeWifiSSID+0x2c8>)
 8007196:	2101      	movs	r1, #1
 8007198:	2002      	movs	r0, #2
 800719a:	f000 fe19 	bl	8007dd0 <lcd_print>
                HAL_Delay(1250);
 800719e:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80071a2:	f001 fb6b 	bl	800887c <HAL_Delay>
                goto mainSSIDSection;
 80071a6:	e7c6      	b.n	8007136 <takeWifiSSID+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80071a8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80071ac:	9302      	str	r3, [sp, #8]
 80071ae:	236e      	movs	r3, #110	; 0x6e
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	4b92      	ldr	r3, [pc, #584]	; (80073fc <takeWifiSSID+0x2cc>)
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	236e      	movs	r3, #110	; 0x6e
 80071b8:	2200      	movs	r2, #0
 80071ba:	21a0      	movs	r1, #160	; 0xa0
 80071bc:	4890      	ldr	r0, [pc, #576]	; (8007400 <takeWifiSSID+0x2d0>)
 80071be:	f002 fbe7 	bl	8009990 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80071c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071c6:	f001 fb59 	bl	800887c <HAL_Delay>

            	break;
 80071ca:	e14d      	b.n	8007468 <takeWifiSSID+0x338>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80071cc:	2101      	movs	r1, #1
 80071ce:	4887      	ldr	r0, [pc, #540]	; (80073ec <takeWifiSSID+0x2bc>)
 80071d0:	f002 f924 	bl	800941c <HAL_GPIO_ReadPin>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d14d      	bne.n	8007276 <takeWifiSSID+0x146>
        	if(cursorPosition > 80) {
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b50      	cmp	r3, #80	; 0x50
 80071de:	dd01      	ble.n	80071e4 <takeWifiSSID+0xb4>
        		cursorPosition = 1;
 80071e0:	2301      	movs	r3, #1
 80071e2:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b10      	cmp	r3, #16
 80071e8:	d13f      	bne.n	800726a <takeWifiSSID+0x13a>
            	if(page == 1) {
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d109      	bne.n	8007204 <takeWifiSSID+0xd4>
            		cursorPosition = 1;
 80071f0:	2301      	movs	r3, #1
 80071f2:	60fb      	str	r3, [r7, #12]
            		page++;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	3301      	adds	r3, #1
 80071f8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80071fa:	2102      	movs	r1, #2
 80071fc:	2002      	movs	r0, #2
 80071fe:	f7f9 fef9 	bl	8000ff4 <printTemplate>
 8007202:	e035      	b.n	8007270 <takeWifiSSID+0x140>
            	} else if(page == 2) {
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d109      	bne.n	800721e <takeWifiSSID+0xee>
            		cursorPosition = 1;
 800720a:	2301      	movs	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]
            		page++;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	3301      	adds	r3, #1
 8007212:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007214:	2103      	movs	r1, #3
 8007216:	2002      	movs	r0, #2
 8007218:	f7f9 feec 	bl	8000ff4 <printTemplate>
 800721c:	e028      	b.n	8007270 <takeWifiSSID+0x140>
            	} else if(page == 3) {
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b03      	cmp	r3, #3
 8007222:	d109      	bne.n	8007238 <takeWifiSSID+0x108>
            		cursorPosition = 1;
 8007224:	2301      	movs	r3, #1
 8007226:	60fb      	str	r3, [r7, #12]
            		page++;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	3301      	adds	r3, #1
 800722c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800722e:	2104      	movs	r1, #4
 8007230:	2002      	movs	r0, #2
 8007232:	f7f9 fedf 	bl	8000ff4 <printTemplate>
 8007236:	e01b      	b.n	8007270 <takeWifiSSID+0x140>
            	} else if(page == 4) {
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b04      	cmp	r3, #4
 800723c:	d109      	bne.n	8007252 <takeWifiSSID+0x122>
            		cursorPosition = 1;
 800723e:	2301      	movs	r3, #1
 8007240:	60fb      	str	r3, [r7, #12]
            		page++;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	3301      	adds	r3, #1
 8007246:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007248:	2105      	movs	r1, #5
 800724a:	2002      	movs	r0, #2
 800724c:	f7f9 fed2 	bl	8000ff4 <printTemplate>
 8007250:	e00e      	b.n	8007270 <takeWifiSSID+0x140>
            	} else if(page == 5) {
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2b05      	cmp	r3, #5
 8007256:	d10b      	bne.n	8007270 <takeWifiSSID+0x140>
            		cursorPosition = 1;
 8007258:	2301      	movs	r3, #1
 800725a:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800725c:	2301      	movs	r3, #1
 800725e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007260:	2101      	movs	r1, #1
 8007262:	2002      	movs	r0, #2
 8007264:	f7f9 fec6 	bl	8000ff4 <printTemplate>
 8007268:	e002      	b.n	8007270 <takeWifiSSID+0x140>
            	}
            } else {
            	cursorPosition++;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007270:	2096      	movs	r0, #150	; 0x96
 8007272:	f001 fb03 	bl	800887c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007276:	2108      	movs	r1, #8
 8007278:	4862      	ldr	r0, [pc, #392]	; (8007404 <takeWifiSSID+0x2d4>)
 800727a:	f002 f8cf 	bl	800941c <HAL_GPIO_ReadPin>
 800727e:	4603      	mov	r3, r0
 8007280:	2b01      	cmp	r3, #1
 8007282:	d149      	bne.n	8007318 <takeWifiSSID+0x1e8>
        	if(cursorPosition < 1) {
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	dc01      	bgt.n	800728e <takeWifiSSID+0x15e>
        		cursorPosition = 80;
 800728a:	2350      	movs	r3, #80	; 0x50
 800728c:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d13b      	bne.n	800730c <takeWifiSSID+0x1dc>
            	if(page == 1) {
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d108      	bne.n	80072ac <takeWifiSSID+0x17c>
            		cursorPosition = 16;
 800729a:	2310      	movs	r3, #16
 800729c:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800729e:	2305      	movs	r3, #5
 80072a0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80072a2:	2105      	movs	r1, #5
 80072a4:	2002      	movs	r0, #2
 80072a6:	f7f9 fea5 	bl	8000ff4 <printTemplate>
 80072aa:	e032      	b.n	8007312 <takeWifiSSID+0x1e2>
            	} else if(page == 2) {
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d108      	bne.n	80072c4 <takeWifiSSID+0x194>
            		cursorPosition = 16;
 80072b2:	2310      	movs	r3, #16
 80072b4:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80072b6:	2301      	movs	r3, #1
 80072b8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80072ba:	2101      	movs	r1, #1
 80072bc:	2002      	movs	r0, #2
 80072be:	f7f9 fe99 	bl	8000ff4 <printTemplate>
 80072c2:	e026      	b.n	8007312 <takeWifiSSID+0x1e2>
            	} else if(page == 3) {
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d108      	bne.n	80072dc <takeWifiSSID+0x1ac>
            		cursorPosition = 16;
 80072ca:	2310      	movs	r3, #16
 80072cc:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80072ce:	2302      	movs	r3, #2
 80072d0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80072d2:	2102      	movs	r1, #2
 80072d4:	2002      	movs	r0, #2
 80072d6:	f7f9 fe8d 	bl	8000ff4 <printTemplate>
 80072da:	e01a      	b.n	8007312 <takeWifiSSID+0x1e2>
            	} else if(page == 4) {
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d108      	bne.n	80072f4 <takeWifiSSID+0x1c4>
            		cursorPosition = 16;
 80072e2:	2310      	movs	r3, #16
 80072e4:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80072e6:	2303      	movs	r3, #3
 80072e8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80072ea:	2103      	movs	r1, #3
 80072ec:	2002      	movs	r0, #2
 80072ee:	f7f9 fe81 	bl	8000ff4 <printTemplate>
 80072f2:	e00e      	b.n	8007312 <takeWifiSSID+0x1e2>
            	} else if(page == 5) {
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2b05      	cmp	r3, #5
 80072f8:	d10b      	bne.n	8007312 <takeWifiSSID+0x1e2>
            		cursorPosition = 16;
 80072fa:	2310      	movs	r3, #16
 80072fc:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80072fe:	2304      	movs	r3, #4
 8007300:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007302:	2104      	movs	r1, #4
 8007304:	2002      	movs	r0, #2
 8007306:	f7f9 fe75 	bl	8000ff4 <printTemplate>
 800730a:	e002      	b.n	8007312 <takeWifiSSID+0x1e2>
            	}
            } else {
            	cursorPosition--;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	3b01      	subs	r3, #1
 8007310:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007312:	2096      	movs	r0, #150	; 0x96
 8007314:	f001 fab2 	bl	800887c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007318:	2102      	movs	r1, #2
 800731a:	4834      	ldr	r0, [pc, #208]	; (80073ec <takeWifiSSID+0x2bc>)
 800731c:	f002 f87e 	bl	800941c <HAL_GPIO_ReadPin>
 8007320:	4603      	mov	r3, r0
 8007322:	2b01      	cmp	r3, #1
 8007324:	d13f      	bne.n	80073a6 <takeWifiSSID+0x276>
        	wifiSSID[arrayPosition] = charactersArray[cursorPosition - 1];
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3b01      	subs	r3, #1
 800732a:	4a37      	ldr	r2, [pc, #220]	; (8007408 <takeWifiSSID+0x2d8>)
 800732c:	5cd1      	ldrb	r1, [r2, r3]
 800732e:	4a30      	ldr	r2, [pc, #192]	; (80073f0 <takeWifiSSID+0x2c0>)
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4413      	add	r3, r2
 8007334:	460a      	mov	r2, r1
 8007336:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[arrayPosition] = cursorPosition - 1;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b2d9      	uxtb	r1, r3
 8007340:	4a32      	ldr	r2, [pc, #200]	; (800740c <takeWifiSSID+0x2dc>)
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4413      	add	r3, r2
 8007346:	460a      	mov	r2, r1
 8007348:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition - 1;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	b2db      	uxtb	r3, r3
 800734e:	3b01      	subs	r3, #1
 8007350:	b2d9      	uxtb	r1, r3
 8007352:	4a2a      	ldr	r2, [pc, #168]	; (80073fc <takeWifiSSID+0x2cc>)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4413      	add	r3, r2
 8007358:	460a      	mov	r2, r1
 800735a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[arrayPosition]);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	b2d9      	uxtb	r1, r3
 8007360:	4a23      	ldr	r2, [pc, #140]	; (80073f0 <takeWifiSSID+0x2c0>)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	4413      	add	r3, r2
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	461a      	mov	r2, r3
 800736a:	2001      	movs	r0, #1
 800736c:	f000 fd45 	bl	8007dfa <lcd_print_char>

            writeLoc++;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	3301      	adds	r3, #1
 8007374:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	3301      	adds	r3, #1
 800737a:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3301      	adds	r3, #1
 8007380:	607b      	str	r3, [r7, #4]

            wifiSSID[arrayPosition] = '\0';
 8007382:	4a1b      	ldr	r2, [pc, #108]	; (80073f0 <takeWifiSSID+0x2c0>)
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4413      	add	r3, r2
 8007388:	2200      	movs	r2, #0
 800738a:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[arrayPosition] = '\0';
 800738c:	4a1f      	ldr	r2, [pc, #124]	; (800740c <takeWifiSSID+0x2dc>)
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	4413      	add	r3, r2
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 8007396:	4a19      	ldr	r2, [pc, #100]	; (80073fc <takeWifiSSID+0x2cc>)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4413      	add	r3, r2
 800739c:	2200      	movs	r2, #0
 800739e:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80073a0:	2096      	movs	r0, #150	; 0x96
 80073a2:	f001 fa6b 	bl	800887c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80073a6:	2104      	movs	r1, #4
 80073a8:	4810      	ldr	r0, [pc, #64]	; (80073ec <takeWifiSSID+0x2bc>)
 80073aa:	f002 f837 	bl	800941c <HAL_GPIO_ReadPin>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d152      	bne.n	800745a <takeWifiSSID+0x32a>
        	if(strlen(wifiSSID) >= 1) {
 80073b4:	4b0e      	ldr	r3, [pc, #56]	; (80073f0 <takeWifiSSID+0x2c0>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d04b      	beq.n	8007454 <takeWifiSSID+0x324>
        		wifiSSID[arrayPosition] = '\0';
 80073bc:	4a0c      	ldr	r2, [pc, #48]	; (80073f0 <takeWifiSSID+0x2c0>)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	4413      	add	r3, r2
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
        		wifiSSIDInt[arrayPosition] = '\0';
 80073c6:	4a11      	ldr	r2, [pc, #68]	; (800740c <takeWifiSSID+0x2dc>)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4413      	add	r3, r2
 80073cc:	2200      	movs	r2, #0
 80073ce:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 80073d0:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <takeWifiSSID+0x2cc>)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4413      	add	r3, r2
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	2b07      	cmp	r3, #7
 80073de:	dd17      	ble.n	8007410 <takeWifiSSID+0x2e0>
        			writeLoc--;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	613b      	str	r3, [r7, #16]
 80073e6:	e018      	b.n	800741a <takeWifiSSID+0x2ea>
 80073e8:	20000008 	.word	0x20000008
 80073ec:	40010800 	.word	0x40010800
 80073f0:	2000019c 	.word	0x2000019c
 80073f4:	0800ddb0 	.word	0x0800ddb0
 80073f8:	0800ddc4 	.word	0x0800ddc4
 80073fc:	20000118 	.word	0x20000118
 8007400:	200003a8 	.word	0x200003a8
 8007404:	40011000 	.word	0x40011000
 8007408:	2000001c 	.word	0x2000001c
 800740c:	200001d0 	.word	0x200001d0
        		} else if(writeLoc < 7) {
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	2b06      	cmp	r3, #6
 8007414:	dc01      	bgt.n	800741a <takeWifiSSID+0x2ea>
        			writeLoc = 7;
 8007416:	2307      	movs	r3, #7
 8007418:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	dd06      	ble.n	800742e <takeWifiSSID+0x2fe>
        			arrayPosition--;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	3b01      	subs	r3, #1
 8007424:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3b01      	subs	r3, #1
 800742a:	607b      	str	r3, [r7, #4]
 800742c:	e007      	b.n	800743e <takeWifiSSID+0x30e>
        		} else if(arrayPosition < 0) {
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	da04      	bge.n	800743e <takeWifiSSID+0x30e>
        			arrayPosition = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007438:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <takeWifiSSID+0x340>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	b2db      	uxtb	r3, r3
 8007442:	3306      	adds	r3, #6
 8007444:	b2db      	uxtb	r3, r3
 8007446:	4619      	mov	r1, r3
 8007448:	2001      	movs	r0, #1
 800744a:	f000 fcf7 	bl	8007e3c <lcd_delete_char>
        		HAL_Delay(50);
 800744e:	2032      	movs	r0, #50	; 0x32
 8007450:	f001 fa14 	bl	800887c <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007454:	2096      	movs	r0, #150	; 0x96
 8007456:	f001 fa11 	bl	800887c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	4619      	mov	r1, r3
 8007460:	2002      	movs	r0, #2
 8007462:	f000 fc96 	bl	8007d92 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007466:	e67e      	b.n	8007166 <takeWifiSSID+0x36>
    }
}
 8007468:	bf00      	nop
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	20000008 	.word	0x20000008

08007474 <takeWifiPass>:

void takeWifiPass() {
 8007474:	b580      	push	{r7, lr}
 8007476:	b08a      	sub	sp, #40	; 0x28
 8007478:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 800747a:	2001      	movs	r0, #1
 800747c:	f000 fd06 	bl	8007e8c <lcd_cursor>

    resetEEPROM4Wifi(3);
 8007480:	2003      	movs	r0, #3
 8007482:	f7f9 faa9 	bl	80009d8 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8007486:	2064      	movs	r0, #100	; 0x64
 8007488:	f001 f9f8 	bl	800887c <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800748c:	2301      	movs	r3, #1
 800748e:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterlerin yazılacağı başlangıç karakteri
 8007490:	2307      	movs	r3, #7
 8007492:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının seçim yaparken kullandığı işaretçi değişkeni
 8007494:	2301      	movs	r3, #1
 8007496:	60fb      	str	r3, [r7, #12]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarmak için kullanılacak olan değişken
 8007498:	2300      	movs	r3, #0
 800749a:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma aktarırken kullanılacak olan değişken
 800749c:	4b6c      	ldr	r3, [pc, #432]	; (8007650 <takeWifiPass+0x1dc>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 80074a2:	2101      	movs	r1, #1
 80074a4:	2003      	movs	r0, #3
 80074a6:	f7f9 fda5 	bl	8000ff4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80074aa:	2108      	movs	r1, #8
 80074ac:	4869      	ldr	r0, [pc, #420]	; (8007654 <takeWifiPass+0x1e0>)
 80074ae:	f001 ffb5 	bl	800941c <HAL_GPIO_ReadPin>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d12b      	bne.n	8007510 <takeWifiPass+0x9c>
            lcd_cursor(0);
 80074b8:	2000      	movs	r0, #0
 80074ba:	f000 fce7 	bl	8007e8c <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 80074be:	4866      	ldr	r0, [pc, #408]	; (8007658 <takeWifiPass+0x1e4>)
 80074c0:	f7f8 feb0 	bl	8000224 <strlen>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b14      	cmp	r3, #20
 80074c8:	d910      	bls.n	80074ec <takeWifiPass+0x78>
                lcd_clear();
 80074ca:	f000 fcad 	bl	8007e28 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80074ce:	4a63      	ldr	r2, [pc, #396]	; (800765c <takeWifiPass+0x1e8>)
 80074d0:	2101      	movs	r1, #1
 80074d2:	2001      	movs	r0, #1
 80074d4:	f000 fc7c 	bl	8007dd0 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80074d8:	4a61      	ldr	r2, [pc, #388]	; (8007660 <takeWifiPass+0x1ec>)
 80074da:	2101      	movs	r1, #1
 80074dc:	2002      	movs	r0, #2
 80074de:	f000 fc77 	bl	8007dd0 <lcd_print>
                HAL_Delay(1200);
 80074e2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80074e6:	f001 f9c9 	bl	800887c <HAL_Delay>
                goto mainPASSSection;
 80074ea:	e7c6      	b.n	800747a <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80074ec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80074f0:	9302      	str	r3, [sp, #8]
 80074f2:	236e      	movs	r3, #110	; 0x6e
 80074f4:	9301      	str	r3, [sp, #4]
 80074f6:	4b5b      	ldr	r3, [pc, #364]	; (8007664 <takeWifiPass+0x1f0>)
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	236e      	movs	r3, #110	; 0x6e
 80074fc:	2200      	movs	r2, #0
 80074fe:	21a0      	movs	r1, #160	; 0xa0
 8007500:	4859      	ldr	r0, [pc, #356]	; (8007668 <takeWifiPass+0x1f4>)
 8007502:	f002 fa45 	bl	8009990 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800750a:	f001 f9b7 	bl	800887c <HAL_Delay>

            	break;
 800750e:	e134      	b.n	800777a <takeWifiPass+0x306>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007510:	2101      	movs	r1, #1
 8007512:	4850      	ldr	r0, [pc, #320]	; (8007654 <takeWifiPass+0x1e0>)
 8007514:	f001 ff82 	bl	800941c <HAL_GPIO_ReadPin>
 8007518:	4603      	mov	r3, r0
 800751a:	2b01      	cmp	r3, #1
 800751c:	d14d      	bne.n	80075ba <takeWifiPass+0x146>
        	if(cursorPosition > 80) {
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2b50      	cmp	r3, #80	; 0x50
 8007522:	dd01      	ble.n	8007528 <takeWifiPass+0xb4>
        	    cursorPosition = 1;
 8007524:	2301      	movs	r3, #1
 8007526:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b10      	cmp	r3, #16
 800752c:	d13f      	bne.n	80075ae <takeWifiPass+0x13a>
            	if(page == 1) {
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d109      	bne.n	8007548 <takeWifiPass+0xd4>
            		cursorPosition = 1;
 8007534:	2301      	movs	r3, #1
 8007536:	60fb      	str	r3, [r7, #12]
            		page++;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	3301      	adds	r3, #1
 800753c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800753e:	2102      	movs	r1, #2
 8007540:	2003      	movs	r0, #3
 8007542:	f7f9 fd57 	bl	8000ff4 <printTemplate>
 8007546:	e035      	b.n	80075b4 <takeWifiPass+0x140>
            	} else if(page == 2) {
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	2b02      	cmp	r3, #2
 800754c:	d109      	bne.n	8007562 <takeWifiPass+0xee>
            		cursorPosition = 1;
 800754e:	2301      	movs	r3, #1
 8007550:	60fb      	str	r3, [r7, #12]
            		page++;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	3301      	adds	r3, #1
 8007556:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007558:	2103      	movs	r1, #3
 800755a:	2003      	movs	r0, #3
 800755c:	f7f9 fd4a 	bl	8000ff4 <printTemplate>
 8007560:	e028      	b.n	80075b4 <takeWifiPass+0x140>
            	} else if(page == 3) {
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b03      	cmp	r3, #3
 8007566:	d109      	bne.n	800757c <takeWifiPass+0x108>
            		cursorPosition = 1;
 8007568:	2301      	movs	r3, #1
 800756a:	60fb      	str	r3, [r7, #12]
            		page++;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	3301      	adds	r3, #1
 8007570:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007572:	2104      	movs	r1, #4
 8007574:	2003      	movs	r0, #3
 8007576:	f7f9 fd3d 	bl	8000ff4 <printTemplate>
 800757a:	e01b      	b.n	80075b4 <takeWifiPass+0x140>
            	} else if(page == 4) {
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	2b04      	cmp	r3, #4
 8007580:	d109      	bne.n	8007596 <takeWifiPass+0x122>
            		cursorPosition = 1;
 8007582:	2301      	movs	r3, #1
 8007584:	60fb      	str	r3, [r7, #12]
            		page++;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	3301      	adds	r3, #1
 800758a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800758c:	2105      	movs	r1, #5
 800758e:	2003      	movs	r0, #3
 8007590:	f7f9 fd30 	bl	8000ff4 <printTemplate>
 8007594:	e00e      	b.n	80075b4 <takeWifiPass+0x140>
            	} else if(page == 5) {
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2b05      	cmp	r3, #5
 800759a:	d10b      	bne.n	80075b4 <takeWifiPass+0x140>
            		cursorPosition = 1;
 800759c:	2301      	movs	r3, #1
 800759e:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80075a0:	2301      	movs	r3, #1
 80075a2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80075a4:	2101      	movs	r1, #1
 80075a6:	2003      	movs	r0, #3
 80075a8:	f7f9 fd24 	bl	8000ff4 <printTemplate>
 80075ac:	e002      	b.n	80075b4 <takeWifiPass+0x140>
            	}
            } else {
            	cursorPosition++;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3301      	adds	r3, #1
 80075b2:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80075b4:	2096      	movs	r0, #150	; 0x96
 80075b6:	f001 f961 	bl	800887c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80075ba:	2108      	movs	r1, #8
 80075bc:	482b      	ldr	r0, [pc, #172]	; (800766c <takeWifiPass+0x1f8>)
 80075be:	f001 ff2d 	bl	800941c <HAL_GPIO_ReadPin>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d159      	bne.n	800767c <takeWifiPass+0x208>
        	if(cursorPosition < 1) {
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	dc01      	bgt.n	80075d2 <takeWifiPass+0x15e>
        	    cursorPosition = 80;
 80075ce:	2350      	movs	r3, #80	; 0x50
 80075d0:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d14b      	bne.n	8007670 <takeWifiPass+0x1fc>
            	if(page == 1) {
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d108      	bne.n	80075f0 <takeWifiPass+0x17c>
            		cursorPosition = 16;
 80075de:	2310      	movs	r3, #16
 80075e0:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80075e2:	2305      	movs	r3, #5
 80075e4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80075e6:	2105      	movs	r1, #5
 80075e8:	2003      	movs	r0, #3
 80075ea:	f7f9 fd03 	bl	8000ff4 <printTemplate>
 80075ee:	e042      	b.n	8007676 <takeWifiPass+0x202>
            	} else if(page == 2) {
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d108      	bne.n	8007608 <takeWifiPass+0x194>
            		cursorPosition = 16;
 80075f6:	2310      	movs	r3, #16
 80075f8:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80075fa:	2301      	movs	r3, #1
 80075fc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80075fe:	2101      	movs	r1, #1
 8007600:	2003      	movs	r0, #3
 8007602:	f7f9 fcf7 	bl	8000ff4 <printTemplate>
 8007606:	e036      	b.n	8007676 <takeWifiPass+0x202>
            	} else if(page == 3) {
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	2b03      	cmp	r3, #3
 800760c:	d108      	bne.n	8007620 <takeWifiPass+0x1ac>
            		cursorPosition = 16;
 800760e:	2310      	movs	r3, #16
 8007610:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007612:	2302      	movs	r3, #2
 8007614:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007616:	2102      	movs	r1, #2
 8007618:	2003      	movs	r0, #3
 800761a:	f7f9 fceb 	bl	8000ff4 <printTemplate>
 800761e:	e02a      	b.n	8007676 <takeWifiPass+0x202>
            	} else if(page == 4) {
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	2b04      	cmp	r3, #4
 8007624:	d108      	bne.n	8007638 <takeWifiPass+0x1c4>
            		cursorPosition = 16;
 8007626:	2310      	movs	r3, #16
 8007628:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800762a:	2303      	movs	r3, #3
 800762c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800762e:	2103      	movs	r1, #3
 8007630:	2003      	movs	r0, #3
 8007632:	f7f9 fcdf 	bl	8000ff4 <printTemplate>
 8007636:	e01e      	b.n	8007676 <takeWifiPass+0x202>
            	} else if(page == 5) {
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2b05      	cmp	r3, #5
 800763c:	d11b      	bne.n	8007676 <takeWifiPass+0x202>
            		cursorPosition = 16;
 800763e:	2310      	movs	r3, #16
 8007640:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007642:	2304      	movs	r3, #4
 8007644:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007646:	2104      	movs	r1, #4
 8007648:	2003      	movs	r0, #3
 800764a:	f7f9 fcd3 	bl	8000ff4 <printTemplate>
 800764e:	e012      	b.n	8007676 <takeWifiPass+0x202>
 8007650:	2000000c 	.word	0x2000000c
 8007654:	40010800 	.word	0x40010800
 8007658:	200001b0 	.word	0x200001b0
 800765c:	0800ddb0 	.word	0x0800ddb0
 8007660:	0800ddd8 	.word	0x0800ddd8
 8007664:	20000118 	.word	0x20000118
 8007668:	200003a8 	.word	0x200003a8
 800766c:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3b01      	subs	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007676:	2096      	movs	r0, #150	; 0x96
 8007678:	f001 f900 	bl	800887c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800767c:	2102      	movs	r1, #2
 800767e:	4841      	ldr	r0, [pc, #260]	; (8007784 <takeWifiPass+0x310>)
 8007680:	f001 fecc 	bl	800941c <HAL_GPIO_ReadPin>
 8007684:	4603      	mov	r3, r0
 8007686:	2b01      	cmp	r3, #1
 8007688:	d13f      	bne.n	800770a <takeWifiPass+0x296>
        	wifiPass[arrayPos] = charactersArray[cursorPosition - 1];
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3b01      	subs	r3, #1
 800768e:	4a3e      	ldr	r2, [pc, #248]	; (8007788 <takeWifiPass+0x314>)
 8007690:	5cd1      	ldrb	r1, [r2, r3]
 8007692:	4a3e      	ldr	r2, [pc, #248]	; (800778c <takeWifiPass+0x318>)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4413      	add	r3, r2
 8007698:	460a      	mov	r2, r1
 800769a:	701a      	strb	r2, [r3, #0]
        	wifiPassInt[arrayPos] = cursorPosition - 1;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	3b01      	subs	r3, #1
 80076a2:	b2d9      	uxtb	r1, r3
 80076a4:	4a3a      	ldr	r2, [pc, #232]	; (8007790 <takeWifiPass+0x31c>)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	4413      	add	r3, r2
 80076aa:	460a      	mov	r2, r1
 80076ac:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = cursorPosition - 1;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	b2d9      	uxtb	r1, r3
 80076b6:	4a37      	ldr	r2, [pc, #220]	; (8007794 <takeWifiPass+0x320>)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4413      	add	r3, r2
 80076bc:	460a      	mov	r2, r1
 80076be:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[arrayPos]);
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	b2d9      	uxtb	r1, r3
 80076c4:	4a31      	ldr	r2, [pc, #196]	; (800778c <takeWifiPass+0x318>)
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	4413      	add	r3, r2
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	2001      	movs	r0, #1
 80076d0:	f000 fb93 	bl	8007dfa <lcd_print_char>

            writeLoc++;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	3301      	adds	r3, #1
 80076d8:	613b      	str	r3, [r7, #16]
            arrayPos++;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	3301      	adds	r3, #1
 80076de:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3301      	adds	r3, #1
 80076e4:	607b      	str	r3, [r7, #4]

            wifiPass[arrayPos] = '\0';
 80076e6:	4a29      	ldr	r2, [pc, #164]	; (800778c <takeWifiPass+0x318>)
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	4413      	add	r3, r2
 80076ec:	2200      	movs	r2, #0
 80076ee:	701a      	strb	r2, [r3, #0]
            wifiPassInt[arrayPos] = '\0';
 80076f0:	4a27      	ldr	r2, [pc, #156]	; (8007790 <takeWifiPass+0x31c>)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	4413      	add	r3, r2
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 80076fa:	4a26      	ldr	r2, [pc, #152]	; (8007794 <takeWifiPass+0x320>)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4413      	add	r3, r2
 8007700:	2200      	movs	r2, #0
 8007702:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007704:	2096      	movs	r0, #150	; 0x96
 8007706:	f001 f8b9 	bl	800887c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800770a:	2104      	movs	r1, #4
 800770c:	481d      	ldr	r0, [pc, #116]	; (8007784 <takeWifiPass+0x310>)
 800770e:	f001 fe85 	bl	800941c <HAL_GPIO_ReadPin>
 8007712:	4603      	mov	r3, r0
 8007714:	2b01      	cmp	r3, #1
 8007716:	d129      	bne.n	800776c <takeWifiPass+0x2f8>
            if(strlen(wifiPass) >= 1) {
 8007718:	4b1c      	ldr	r3, [pc, #112]	; (800778c <takeWifiPass+0x318>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d022      	beq.n	8007766 <takeWifiPass+0x2f2>
            	wifiPass[arrayPos] = '\0';
 8007720:	4a1a      	ldr	r2, [pc, #104]	; (800778c <takeWifiPass+0x318>)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	4413      	add	r3, r2
 8007726:	2200      	movs	r2, #0
 8007728:	701a      	strb	r2, [r3, #0]
            	wifiPassInt[arrayPos] = '\0';
 800772a:	4a19      	ldr	r2, [pc, #100]	; (8007790 <takeWifiPass+0x31c>)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	4413      	add	r3, r2
 8007730:	2200      	movs	r2, #0
 8007732:	701a      	strb	r2, [r3, #0]
            	eepromData[eepromVal] = '\0';
 8007734:	4a17      	ldr	r2, [pc, #92]	; (8007794 <takeWifiPass+0x320>)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4413      	add	r3, r2
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]

            	writeLoc--;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	3b01      	subs	r3, #1
 8007742:	613b      	str	r3, [r7, #16]
            	arrayPos--;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	3b01      	subs	r3, #1
 8007748:	60bb      	str	r3, [r7, #8]
            	eepromVal--;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3b01      	subs	r3, #1
 800774e:	607b      	str	r3, [r7, #4]

            	lcd_delete_char(1, 6+arrayPos);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	3306      	adds	r3, #6
 8007756:	b2db      	uxtb	r3, r3
 8007758:	4619      	mov	r1, r3
 800775a:	2001      	movs	r0, #1
 800775c:	f000 fb6e 	bl	8007e3c <lcd_delete_char>
            	HAL_Delay(50);
 8007760:	2032      	movs	r0, #50	; 0x32
 8007762:	f001 f88b 	bl	800887c <HAL_Delay>
            }

            HAL_Delay(150);
 8007766:	2096      	movs	r0, #150	; 0x96
 8007768:	f001 f888 	bl	800887c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	4619      	mov	r1, r3
 8007772:	2002      	movs	r0, #2
 8007774:	f000 fb0d 	bl	8007d92 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007778:	e697      	b.n	80074aa <takeWifiPass+0x36>
    }
}
 800777a:	bf00      	nop
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	40010800 	.word	0x40010800
 8007788:	2000001c 	.word	0x2000001c
 800778c:	200001b0 	.word	0x200001b0
 8007790:	200001e4 	.word	0x200001e4
 8007794:	20000118 	.word	0x20000118

08007798 <mergeData>:

char* mergeData() {
 8007798:	b580      	push	{r7, lr}
 800779a:	b09c      	sub	sp, #112	; 0x70
 800779c:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 800779e:	2300      	movs	r3, #0
 80077a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077a6:	2228      	movs	r2, #40	; 0x28
 80077a8:	2100      	movs	r1, #0
 80077aa:	4618      	mov	r0, r3
 80077ac:	f004 ff89 	bl	800c6c2 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80077b0:	4b67      	ldr	r3, [pc, #412]	; (8007950 <mergeData+0x1b8>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	713b      	strb	r3, [r7, #4]
 80077b6:	4b67      	ldr	r3, [pc, #412]	; (8007954 <mergeData+0x1bc>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	717b      	strb	r3, [r7, #5]
 80077bc:	4b66      	ldr	r3, [pc, #408]	; (8007958 <mergeData+0x1c0>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	71bb      	strb	r3, [r7, #6]
 80077c2:	4b66      	ldr	r3, [pc, #408]	; (800795c <mergeData+0x1c4>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	71fb      	strb	r3, [r7, #7]
 80077c8:	4b65      	ldr	r3, [pc, #404]	; (8007960 <mergeData+0x1c8>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	723b      	strb	r3, [r7, #8]
 80077ce:	4b65      	ldr	r3, [pc, #404]	; (8007964 <mergeData+0x1cc>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	727b      	strb	r3, [r7, #9]
 80077d4:	4b64      	ldr	r3, [pc, #400]	; (8007968 <mergeData+0x1d0>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	72bb      	strb	r3, [r7, #10]
 80077da:	4b64      	ldr	r3, [pc, #400]	; (800796c <mergeData+0x1d4>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	72fb      	strb	r3, [r7, #11]
 80077e0:	4b63      	ldr	r3, [pc, #396]	; (8007970 <mergeData+0x1d8>)
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	733b      	strb	r3, [r7, #12]
 80077e6:	4b63      	ldr	r3, [pc, #396]	; (8007974 <mergeData+0x1dc>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	737b      	strb	r3, [r7, #13]
 80077ec:	4b62      	ldr	r3, [pc, #392]	; (8007978 <mergeData+0x1e0>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	73bb      	strb	r3, [r7, #14]
 80077f2:	4b62      	ldr	r3, [pc, #392]	; (800797c <mergeData+0x1e4>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	73fb      	strb	r3, [r7, #15]
 80077f8:	4b61      	ldr	r3, [pc, #388]	; (8007980 <mergeData+0x1e8>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	743b      	strb	r3, [r7, #16]
 80077fe:	4b61      	ldr	r3, [pc, #388]	; (8007984 <mergeData+0x1ec>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	747b      	strb	r3, [r7, #17]
 8007804:	4b60      	ldr	r3, [pc, #384]	; (8007988 <mergeData+0x1f0>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	74bb      	strb	r3, [r7, #18]
 800780a:	4b60      	ldr	r3, [pc, #384]	; (800798c <mergeData+0x1f4>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	74fb      	strb	r3, [r7, #19]
 8007810:	4b5f      	ldr	r3, [pc, #380]	; (8007990 <mergeData+0x1f8>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	753b      	strb	r3, [r7, #20]
 8007816:	4b5f      	ldr	r3, [pc, #380]	; (8007994 <mergeData+0x1fc>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	757b      	strb	r3, [r7, #21]
 800781c:	4b5e      	ldr	r3, [pc, #376]	; (8007998 <mergeData+0x200>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	75bb      	strb	r3, [r7, #22]
 8007822:	4b5e      	ldr	r3, [pc, #376]	; (800799c <mergeData+0x204>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	75fb      	strb	r3, [r7, #23]
 8007828:	4b5d      	ldr	r3, [pc, #372]	; (80079a0 <mergeData+0x208>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	763b      	strb	r3, [r7, #24]
 800782e:	4b5d      	ldr	r3, [pc, #372]	; (80079a4 <mergeData+0x20c>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	767b      	strb	r3, [r7, #25]
 8007834:	4b5c      	ldr	r3, [pc, #368]	; (80079a8 <mergeData+0x210>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	76bb      	strb	r3, [r7, #26]
 800783a:	4b5c      	ldr	r3, [pc, #368]	; (80079ac <mergeData+0x214>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	76fb      	strb	r3, [r7, #27]
 8007840:	4b5b      	ldr	r3, [pc, #364]	; (80079b0 <mergeData+0x218>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	773b      	strb	r3, [r7, #28]
 8007846:	4b5b      	ldr	r3, [pc, #364]	; (80079b4 <mergeData+0x21c>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	777b      	strb	r3, [r7, #29]
 800784c:	4b5a      	ldr	r3, [pc, #360]	; (80079b8 <mergeData+0x220>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	77bb      	strb	r3, [r7, #30]
 8007852:	4b5a      	ldr	r3, [pc, #360]	; (80079bc <mergeData+0x224>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	77fb      	strb	r3, [r7, #31]
 8007858:	4b59      	ldr	r3, [pc, #356]	; (80079c0 <mergeData+0x228>)
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	f887 3020 	strb.w	r3, [r7, #32]
 8007860:	4b58      	ldr	r3, [pc, #352]	; (80079c4 <mergeData+0x22c>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007868:	4b57      	ldr	r3, [pc, #348]	; (80079c8 <mergeData+0x230>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007870:	4b56      	ldr	r3, [pc, #344]	; (80079cc <mergeData+0x234>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007878:	4b55      	ldr	r3, [pc, #340]	; (80079d0 <mergeData+0x238>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007880:	4b54      	ldr	r3, [pc, #336]	; (80079d4 <mergeData+0x23c>)
 8007882:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007886:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 800788a:	4b52      	ldr	r3, [pc, #328]	; (80079d4 <mergeData+0x23c>)
 800788c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007890:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007894:	4b4f      	ldr	r3, [pc, #316]	; (80079d4 <mergeData+0x23c>)
 8007896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800789a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 800789e:	4b4d      	ldr	r3, [pc, #308]	; (80079d4 <mergeData+0x23c>)
 80078a0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80078a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 80078a8:	4b4a      	ldr	r3, [pc, #296]	; (80079d4 <mergeData+0x23c>)
 80078aa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80078ae:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 80078b2:	4b48      	ldr	r3, [pc, #288]	; (80079d4 <mergeData+0x23c>)
 80078b4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80078b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 80078bc:	4b45      	ldr	r3, [pc, #276]	; (80079d4 <mergeData+0x23c>)
 80078be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80078c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 80078c6:	4b43      	ldr	r3, [pc, #268]	; (80079d4 <mergeData+0x23c>)
 80078c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80078cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 80078d0:	4b40      	ldr	r3, [pc, #256]	; (80079d4 <mergeData+0x23c>)
 80078d2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80078d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 80078da:	4b3e      	ldr	r3, [pc, #248]	; (80079d4 <mergeData+0x23c>)
 80078dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80078e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80078e4:	2306      	movs	r3, #6
 80078e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80078ea:	2300      	movs	r3, #0
 80078ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078ee:	e015      	b.n	800791c <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 80078f0:	1d3a      	adds	r2, r7, #4
 80078f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f4:	4413      	add	r3, r2
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078fe:	4936      	ldr	r1, [pc, #216]	; (80079d8 <mergeData+0x240>)
 8007900:	4618      	mov	r0, r3
 8007902:	f004 fe6d 	bl	800c5e0 <siprintf>
	    strcat(combinedString, temp);
 8007906:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800790a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800790e:	4611      	mov	r1, r2
 8007910:	4618      	mov	r0, r3
 8007912:	f004 fec7 	bl	800c6a4 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007918:	3301      	adds	r3, #1
 800791a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800791c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800791e:	2b2b      	cmp	r3, #43	; 0x2b
 8007920:	d9e6      	bls.n	80078f0 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007922:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007926:	4618      	mov	r0, r3
 8007928:	f7f8 fc7c 	bl	8000224 <strlen>
 800792c:	4603      	mov	r3, r0
 800792e:	3301      	adds	r3, #1
 8007930:	4618      	mov	r0, r3
 8007932:	f004 fda1 	bl	800c478 <malloc>
 8007936:	4603      	mov	r3, r0
 8007938:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 800793a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800793e:	4619      	mov	r1, r3
 8007940:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007942:	f004 ff03 	bl	800c74c <strcpy>
	return result;
 8007946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8007948:	4618      	mov	r0, r3
 800794a:	3770      	adds	r7, #112	; 0x70
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	2000022f 	.word	0x2000022f
 8007954:	20000221 	.word	0x20000221
 8007958:	20000224 	.word	0x20000224
 800795c:	20000225 	.word	0x20000225
 8007960:	20000226 	.word	0x20000226
 8007964:	2000022d 	.word	0x2000022d
 8007968:	20000227 	.word	0x20000227
 800796c:	20000228 	.word	0x20000228
 8007970:	2000022c 	.word	0x2000022c
 8007974:	20000229 	.word	0x20000229
 8007978:	20000239 	.word	0x20000239
 800797c:	2000022a 	.word	0x2000022a
 8007980:	2000023a 	.word	0x2000023a
 8007984:	2000022b 	.word	0x2000022b
 8007988:	2000023b 	.word	0x2000023b
 800798c:	2000022e 	.word	0x2000022e
 8007990:	20000230 	.word	0x20000230
 8007994:	20000231 	.word	0x20000231
 8007998:	20000232 	.word	0x20000232
 800799c:	20000233 	.word	0x20000233
 80079a0:	20000234 	.word	0x20000234
 80079a4:	20000235 	.word	0x20000235
 80079a8:	20000236 	.word	0x20000236
 80079ac:	20000237 	.word	0x20000237
 80079b0:	20000238 	.word	0x20000238
 80079b4:	2000023c 	.word	0x2000023c
 80079b8:	2000023e 	.word	0x2000023e
 80079bc:	2000021d 	.word	0x2000021d
 80079c0:	2000021e 	.word	0x2000021e
 80079c4:	20000000 	.word	0x20000000
 80079c8:	20000001 	.word	0x20000001
 80079cc:	2000021f 	.word	0x2000021f
 80079d0:	20000241 	.word	0x20000241
 80079d4:	20000118 	.word	0x20000118
 80079d8:	0800ddec 	.word	0x0800ddec

080079dc <convertAndSendData>:

void convertAndSendData() {
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 80079e0:	4b14      	ldr	r3, [pc, #80]	; (8007a34 <convertAndSendData+0x58>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10a      	bne.n	80079fe <convertAndSendData+0x22>
		lcd_print(1, 1, "  Veri  Esleme  ");
 80079e8:	4a13      	ldr	r2, [pc, #76]	; (8007a38 <convertAndSendData+0x5c>)
 80079ea:	2101      	movs	r1, #1
 80079ec:	2001      	movs	r0, #1
 80079ee:	f000 f9ef 	bl	8007dd0 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 80079f2:	4a12      	ldr	r2, [pc, #72]	; (8007a3c <convertAndSendData+0x60>)
 80079f4:	2101      	movs	r1, #1
 80079f6:	2002      	movs	r0, #2
 80079f8:	f000 f9ea 	bl	8007dd0 <lcd_print>
 80079fc:	e009      	b.n	8007a12 <convertAndSendData+0x36>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80079fe:	4a10      	ldr	r2, [pc, #64]	; (8007a40 <convertAndSendData+0x64>)
 8007a00:	2101      	movs	r1, #1
 8007a02:	2001      	movs	r0, #1
 8007a04:	f000 f9e4 	bl	8007dd0 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007a08:	4a0e      	ldr	r2, [pc, #56]	; (8007a44 <convertAndSendData+0x68>)
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	2002      	movs	r0, #2
 8007a0e:	f000 f9df 	bl	8007dd0 <lcd_print>
	}

	sendMachineData(&huart1, machineID, mergeData());
 8007a12:	f7ff fec1 	bl	8007798 <mergeData>
 8007a16:	4603      	mov	r3, r0
 8007a18:	461a      	mov	r2, r3
 8007a1a:	490b      	ldr	r1, [pc, #44]	; (8007a48 <convertAndSendData+0x6c>)
 8007a1c:	480b      	ldr	r0, [pc, #44]	; (8007a4c <convertAndSendData+0x70>)
 8007a1e:	f7f9 f85b 	bl	8000ad8 <sendMachineData>

	HAL_Delay(500);
 8007a22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a26:	f000 ff29 	bl	800887c <HAL_Delay>
	lcd_clear();
 8007a2a:	f000 f9fd 	bl	8007e28 <lcd_clear>
}
 8007a2e:	bf00      	nop
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20000241 	.word	0x20000241
 8007a38:	0800ddf0 	.word	0x0800ddf0
 8007a3c:	0800de04 	.word	0x0800de04
 8007a40:	0800de18 	.word	0x0800de18
 8007a44:	0800de2c 	.word	0x0800de2c
 8007a48:	20000190 	.word	0x20000190
 8007a4c:	20000444 	.word	0x20000444

08007a50 <iotSetup>:

void iotSetup() {
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007a54:	4b0e      	ldr	r3, [pc, #56]	; (8007a90 <iotSetup+0x40>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d017      	beq.n	8007a8c <iotSetup+0x3c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 8007a5c:	480d      	ldr	r0, [pc, #52]	; (8007a94 <iotSetup+0x44>)
 8007a5e:	f7f8 fbe1 	bl	8000224 <strlen>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b0c      	cmp	r3, #12
 8007a66:	d001      	beq.n	8007a6c <iotSetup+0x1c>
			takeMachineID();
 8007a68:	f7ff f9d0 	bl	8006e0c <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007a6c:	480a      	ldr	r0, [pc, #40]	; (8007a98 <iotSetup+0x48>)
 8007a6e:	f7f8 fbd9 	bl	8000224 <strlen>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d801      	bhi.n	8007a7c <iotSetup+0x2c>
			takeWifiSSID();
 8007a78:	f7ff fb5a 	bl	8007130 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007a7c:	4807      	ldr	r0, [pc, #28]	; (8007a9c <iotSetup+0x4c>)
 8007a7e:	f7f8 fbd1 	bl	8000224 <strlen>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d801      	bhi.n	8007a8c <iotSetup+0x3c>
			takeWifiPass();
 8007a88:	f7ff fcf4 	bl	8007474 <takeWifiPass>
	}

	//ESP8266_Init(&huart1, wifiSSID, wifiPass);
	//HAL_Delay(500);
	//convertAndSendData();
}
 8007a8c:	bf00      	nop
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	2000023f 	.word	0x2000023f
 8007a94:	20000190 	.word	0x20000190
 8007a98:	2000019c 	.word	0x2000019c
 8007a9c:	200001b0 	.word	0x200001b0

08007aa0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af02      	add	r7, sp, #8
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	f023 030f 	bic.w	r3, r3, #15
 8007ab0:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007ab8:	7b7b      	ldrb	r3, [r7, #13]
 8007aba:	f043 030c 	orr.w	r3, r3, #12
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007ac2:	7b7b      	ldrb	r3, [r7, #13]
 8007ac4:	f043 0308 	orr.w	r3, r3, #8
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007acc:	7b3b      	ldrb	r3, [r7, #12]
 8007ace:	f043 030c 	orr.w	r3, r3, #12
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007ad6:	7b3b      	ldrb	r3, [r7, #12]
 8007ad8:	f043 0308 	orr.w	r3, r3, #8
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ae0:	bf00      	nop
 8007ae2:	4825      	ldr	r0, [pc, #148]	; (8007b78 <lcd_send_cmd+0xd8>)
 8007ae4:	f002 fac3 	bl	800a06e <HAL_I2C_GetError>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	d0f9      	beq.n	8007ae2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007aee:	bf00      	nop
 8007af0:	4821      	ldr	r0, [pc, #132]	; (8007b78 <lcd_send_cmd+0xd8>)
 8007af2:	f002 faaf 	bl	800a054 <HAL_I2C_GetState>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	d1f9      	bne.n	8007af0 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007afc:	4b1f      	ldr	r3, [pc, #124]	; (8007b7c <lcd_send_cmd+0xdc>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d116      	bne.n	8007b32 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007b04:	2300      	movs	r3, #0
 8007b06:	73fb      	strb	r3, [r7, #15]
 8007b08:	e00f      	b.n	8007b2a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	443b      	add	r3, r7
 8007b10:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	f022 0208 	bic.w	r2, r2, #8
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	3310      	adds	r3, #16
 8007b1e:	443b      	add	r3, r7
 8007b20:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	3301      	adds	r3, #1
 8007b28:	73fb      	strb	r3, [r7, #15]
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	2b03      	cmp	r3, #3
 8007b2e:	d9ec      	bls.n	8007b0a <lcd_send_cmd+0x6a>
 8007b30:	e015      	b.n	8007b5e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007b32:	2300      	movs	r3, #0
 8007b34:	73bb      	strb	r3, [r7, #14]
 8007b36:	e00f      	b.n	8007b58 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	3310      	adds	r3, #16
 8007b3c:	443b      	add	r3, r7
 8007b3e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	f042 0208 	orr.w	r2, r2, #8
 8007b48:	b2d2      	uxtb	r2, r2
 8007b4a:	3310      	adds	r3, #16
 8007b4c:	443b      	add	r3, r7
 8007b4e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	3301      	adds	r3, #1
 8007b56:	73bb      	strb	r3, [r7, #14]
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d9ec      	bls.n	8007b38 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007b5e:	f107 0208 	add.w	r2, r7, #8
 8007b62:	2364      	movs	r3, #100	; 0x64
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	2304      	movs	r3, #4
 8007b68:	214e      	movs	r1, #78	; 0x4e
 8007b6a:	4803      	ldr	r0, [pc, #12]	; (8007b78 <lcd_send_cmd+0xd8>)
 8007b6c:	f001 fe12 	bl	8009794 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007b70:	bf00      	nop
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	200003a8 	.word	0x200003a8
 8007b7c:	2000037e 	.word	0x2000037e

08007b80 <lcd_send_data>:

void lcd_send_data (char data) {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	4603      	mov	r3, r0
 8007b88:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	f023 030f 	bic.w	r3, r3, #15
 8007b90:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	011b      	lsls	r3, r3, #4
 8007b96:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007b98:	7b7b      	ldrb	r3, [r7, #13]
 8007b9a:	f043 030d 	orr.w	r3, r3, #13
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007ba2:	7b7b      	ldrb	r3, [r7, #13]
 8007ba4:	f043 0309 	orr.w	r3, r3, #9
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007bac:	7b3b      	ldrb	r3, [r7, #12]
 8007bae:	f043 030d 	orr.w	r3, r3, #13
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007bb6:	7b3b      	ldrb	r3, [r7, #12]
 8007bb8:	f043 0309 	orr.w	r3, r3, #9
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007bc0:	bf00      	nop
 8007bc2:	4825      	ldr	r0, [pc, #148]	; (8007c58 <lcd_send_data+0xd8>)
 8007bc4:	f002 fa53 	bl	800a06e <HAL_I2C_GetError>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	d0f9      	beq.n	8007bc2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007bce:	bf00      	nop
 8007bd0:	4821      	ldr	r0, [pc, #132]	; (8007c58 <lcd_send_data+0xd8>)
 8007bd2:	f002 fa3f 	bl	800a054 <HAL_I2C_GetState>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b20      	cmp	r3, #32
 8007bda:	d1f9      	bne.n	8007bd0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007bdc:	4b1f      	ldr	r3, [pc, #124]	; (8007c5c <lcd_send_data+0xdc>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d116      	bne.n	8007c12 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007be4:	2300      	movs	r3, #0
 8007be6:	73fb      	strb	r3, [r7, #15]
 8007be8:	e00f      	b.n	8007c0a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	3310      	adds	r3, #16
 8007bee:	443b      	add	r3, r7
 8007bf0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	f022 0208 	bic.w	r2, r2, #8
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	3310      	adds	r3, #16
 8007bfe:	443b      	add	r3, r7
 8007c00:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
 8007c06:	3301      	adds	r3, #1
 8007c08:	73fb      	strb	r3, [r7, #15]
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d9ec      	bls.n	8007bea <lcd_send_data+0x6a>
 8007c10:	e015      	b.n	8007c3e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007c12:	2300      	movs	r3, #0
 8007c14:	73bb      	strb	r3, [r7, #14]
 8007c16:	e00f      	b.n	8007c38 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	3310      	adds	r3, #16
 8007c1c:	443b      	add	r3, r7
 8007c1e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	f042 0208 	orr.w	r2, r2, #8
 8007c28:	b2d2      	uxtb	r2, r2
 8007c2a:	3310      	adds	r3, #16
 8007c2c:	443b      	add	r3, r7
 8007c2e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	3301      	adds	r3, #1
 8007c36:	73bb      	strb	r3, [r7, #14]
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d9ec      	bls.n	8007c18 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007c3e:	f107 0208 	add.w	r2, r7, #8
 8007c42:	2364      	movs	r3, #100	; 0x64
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	2304      	movs	r3, #4
 8007c48:	214e      	movs	r1, #78	; 0x4e
 8007c4a:	4803      	ldr	r0, [pc, #12]	; (8007c58 <lcd_send_data+0xd8>)
 8007c4c:	f001 fda2 	bl	8009794 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007c50:	bf00      	nop
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	200003a8 	.word	0x200003a8
 8007c5c:	2000037e 	.word	0x2000037e

08007c60 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007c68:	e006      	b.n	8007c78 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff ff84 	bl	8007b80 <lcd_send_data>
	while (*str) {
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1f4      	bne.n	8007c6a <lcd_send_string+0xa>
	}
}
 8007c80:	bf00      	nop
 8007c82:	bf00      	nop
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <lcd_send_char>:

void lcd_send_char(char ch) {
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af02      	add	r7, sp, #8
 8007c92:	4603      	mov	r3, r0
 8007c94:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007c96:	79fb      	ldrb	r3, [r7, #7]
 8007c98:	f023 030f 	bic.w	r3, r3, #15
 8007c9c:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	011b      	lsls	r3, r3, #4
 8007ca2:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007ca4:	7b7b      	ldrb	r3, [r7, #13]
 8007ca6:	f043 030d 	orr.w	r3, r3, #13
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007cae:	7b7b      	ldrb	r3, [r7, #13]
 8007cb0:	f043 0309 	orr.w	r3, r3, #9
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007cb8:	7b3b      	ldrb	r3, [r7, #12]
 8007cba:	f043 030d 	orr.w	r3, r3, #13
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007cc2:	7b3b      	ldrb	r3, [r7, #12]
 8007cc4:	f043 0309 	orr.w	r3, r3, #9
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ccc:	bf00      	nop
 8007cce:	4825      	ldr	r0, [pc, #148]	; (8007d64 <lcd_send_char+0xd8>)
 8007cd0:	f002 f9cd 	bl	800a06e <HAL_I2C_GetError>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d0f9      	beq.n	8007cce <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007cda:	bf00      	nop
 8007cdc:	4821      	ldr	r0, [pc, #132]	; (8007d64 <lcd_send_char+0xd8>)
 8007cde:	f002 f9b9 	bl	800a054 <HAL_I2C_GetState>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b20      	cmp	r3, #32
 8007ce6:	d1f9      	bne.n	8007cdc <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007ce8:	4b1f      	ldr	r3, [pc, #124]	; (8007d68 <lcd_send_char+0xdc>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d116      	bne.n	8007d1e <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73fb      	strb	r3, [r7, #15]
 8007cf4:	e00f      	b.n	8007d16 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
 8007cf8:	3310      	adds	r3, #16
 8007cfa:	443b      	add	r3, r7
 8007cfc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	f022 0208 	bic.w	r2, r2, #8
 8007d06:	b2d2      	uxtb	r2, r2
 8007d08:	3310      	adds	r3, #16
 8007d0a:	443b      	add	r3, r7
 8007d0c:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	3301      	adds	r3, #1
 8007d14:	73fb      	strb	r3, [r7, #15]
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	d9ec      	bls.n	8007cf6 <lcd_send_char+0x6a>
 8007d1c:	e015      	b.n	8007d4a <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007d1e:	2300      	movs	r3, #0
 8007d20:	73bb      	strb	r3, [r7, #14]
 8007d22:	e00f      	b.n	8007d44 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	3310      	adds	r3, #16
 8007d28:	443b      	add	r3, r7
 8007d2a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	f042 0208 	orr.w	r2, r2, #8
 8007d34:	b2d2      	uxtb	r2, r2
 8007d36:	3310      	adds	r3, #16
 8007d38:	443b      	add	r3, r7
 8007d3a:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	3301      	adds	r3, #1
 8007d42:	73bb      	strb	r3, [r7, #14]
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d9ec      	bls.n	8007d24 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007d4a:	f107 0208 	add.w	r2, r7, #8
 8007d4e:	2364      	movs	r3, #100	; 0x64
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	2304      	movs	r3, #4
 8007d54:	214e      	movs	r1, #78	; 0x4e
 8007d56:	4803      	ldr	r0, [pc, #12]	; (8007d64 <lcd_send_char+0xd8>)
 8007d58:	f001 fd1c 	bl	8009794 <HAL_I2C_Master_Transmit>
}
 8007d5c:	bf00      	nop
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	200003a8 	.word	0x200003a8
 8007d68:	2000037e 	.word	0x2000037e

08007d6c <lcd_init>:

void lcd_init (void) {
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007d70:	2002      	movs	r0, #2
 8007d72:	f7ff fe95 	bl	8007aa0 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007d76:	2028      	movs	r0, #40	; 0x28
 8007d78:	f7ff fe92 	bl	8007aa0 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007d7c:	200c      	movs	r0, #12
 8007d7e:	f7ff fe8f 	bl	8007aa0 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007d82:	2080      	movs	r0, #128	; 0x80
 8007d84:	f7ff fe8c 	bl	8007aa0 <lcd_send_cmd>
	lcd_backlight(1);
 8007d88:	2001      	movs	r0, #1
 8007d8a:	f000 f86d 	bl	8007e68 <lcd_backlight>
}
 8007d8e:	bf00      	nop
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	4603      	mov	r3, r0
 8007d9a:	460a      	mov	r2, r1
 8007d9c:	71fb      	strb	r3, [r7, #7]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007da2:	79fb      	ldrb	r3, [r7, #7]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d106      	bne.n	8007db6 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007da8:	79bb      	ldrb	r3, [r7, #6]
 8007daa:	337f      	adds	r3, #127	; 0x7f
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff fe76 	bl	8007aa0 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007db4:	e008      	b.n	8007dc8 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d105      	bne.n	8007dc8 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007dbc:	79bb      	ldrb	r3, [r7, #6]
 8007dbe:	3b41      	subs	r3, #65	; 0x41
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7ff fe6c 	bl	8007aa0 <lcd_send_cmd>
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	603a      	str	r2, [r7, #0]
 8007dda:	71fb      	strb	r3, [r7, #7]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007de0:	79ba      	ldrb	r2, [r7, #6]
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	4611      	mov	r1, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff ffd3 	bl	8007d92 <lcd_gotoxy>
	lcd_send_string(str);
 8007dec:	6838      	ldr	r0, [r7, #0]
 8007dee:	f7ff ff37 	bl	8007c60 <lcd_send_string>
}
 8007df2:	bf00      	nop
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	4603      	mov	r3, r0
 8007e02:	71fb      	strb	r3, [r7, #7]
 8007e04:	460b      	mov	r3, r1
 8007e06:	71bb      	strb	r3, [r7, #6]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007e0c:	79ba      	ldrb	r2, [r7, #6]
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	4611      	mov	r1, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff ffbd 	bl	8007d92 <lcd_gotoxy>
    lcd_send_char(ch);
 8007e18:	797b      	ldrb	r3, [r7, #5]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7ff ff36 	bl	8007c8c <lcd_send_char>
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <lcd_clear>:

void lcd_clear(void) {
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	f7ff fe37 	bl	8007aa0 <lcd_send_cmd>
    HAL_Delay(2);
 8007e32:	2002      	movs	r0, #2
 8007e34:	f000 fd22 	bl	800887c <HAL_Delay>
}
 8007e38:	bf00      	nop
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	460a      	mov	r2, r1
 8007e46:	71fb      	strb	r3, [r7, #7]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007e4c:	79ba      	ldrb	r2, [r7, #6]
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	4611      	mov	r1, r2
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff ff9d 	bl	8007d92 <lcd_gotoxy>

    lcd_send_char(' ');
 8007e58:	2020      	movs	r0, #32
 8007e5a:	f7ff ff17 	bl	8007c8c <lcd_send_char>
}
 8007e5e:	bf00      	nop
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007e72:	4a05      	ldr	r2, [pc, #20]	; (8007e88 <lcd_backlight+0x20>)
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007e78:	2000      	movs	r0, #0
 8007e7a:	f7ff fe11 	bl	8007aa0 <lcd_send_cmd>
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	2000037e 	.word	0x2000037e

08007e8c <lcd_cursor>:

void lcd_cursor(int state) {
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d106      	bne.n	8007ea8 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007e9a:	200e      	movs	r0, #14
 8007e9c:	f7ff fe00 	bl	8007aa0 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007ea0:	200f      	movs	r0, #15
 8007ea2:	f7ff fdfd 	bl	8007aa0 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007ea6:	e002      	b.n	8007eae <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007ea8:	200c      	movs	r0, #12
 8007eaa:	f7ff fdf9 	bl	8007aa0 <lcd_send_cmd>
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
	...

08007eb8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007ec0:	4b04      	ldr	r3, [pc, #16]	; (8007ed4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	4a03      	ldr	r2, [pc, #12]	; (8007ed4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007ec8:	6013      	str	r3, [r2, #0]
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc80      	pop	{r7}
 8007ed2:	4770      	bx	lr
 8007ed4:	200001fc 	.word	0x200001fc

08007ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007edc:	f000 fc6c 	bl	80087b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007ee0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ee4:	f000 fcca 	bl	800887c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ee8:	f000 f89c 	bl	8008024 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007eec:	f000 f9be 	bl	800826c <MX_GPIO_Init>
  MX_CAN_Init();
 8007ef0:	f000 f8de 	bl	80080b0 <MX_CAN_Init>
  MX_I2C1_Init();
 8007ef4:	f000 f910 	bl	8008118 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007ef8:	f000 f93c 	bl	8008174 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007efc:	f000 f98c 	bl	8008218 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007f00:	2201      	movs	r2, #1
 8007f02:	2140      	movs	r1, #64	; 0x40
 8007f04:	483e      	ldr	r0, [pc, #248]	; (8008000 <main+0x128>)
 8007f06:	f001 faa0 	bl	800944a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	2180      	movs	r1, #128	; 0x80
 8007f0e:	483c      	ldr	r0, [pc, #240]	; (8008000 <main+0x128>)
 8007f10:	f001 fa9b 	bl	800944a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007f14:	200a      	movs	r0, #10
 8007f16:	f000 fcb1 	bl	800887c <HAL_Delay>
  lcd_init();
 8007f1a:	f7ff ff27 	bl	8007d6c <lcd_init>
  HAL_Delay(10);
 8007f1e:	200a      	movs	r0, #10
 8007f20:	f000 fcac 	bl	800887c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007f24:	4837      	ldr	r0, [pc, #220]	; (8008004 <main+0x12c>)
 8007f26:	f003 f943 	bl	800b1b0 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007f2a:	bf00      	nop
 8007f2c:	4836      	ldr	r0, [pc, #216]	; (8008008 <main+0x130>)
 8007f2e:	f002 f89e 	bl	800a06e <HAL_I2C_GetError>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	d0f9      	beq.n	8007f2c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007f38:	bf00      	nop
 8007f3a:	4833      	ldr	r0, [pc, #204]	; (8008008 <main+0x130>)
 8007f3c:	f002 f88a 	bl	800a054 <HAL_I2C_GetState>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b20      	cmp	r3, #32
 8007f44:	d1f9      	bne.n	8007f3a <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007f46:	2200      	movs	r2, #0
 8007f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f4c:	482c      	ldr	r0, [pc, #176]	; (8008000 <main+0x128>)
 8007f4e:	f001 fa7c 	bl	800944a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007f52:	2200      	movs	r2, #0
 8007f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f58:	4829      	ldr	r0, [pc, #164]	; (8008000 <main+0x128>)
 8007f5a:	f001 fa76 	bl	800944a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007f5e:	2200      	movs	r2, #0
 8007f60:	2104      	movs	r1, #4
 8007f62:	4827      	ldr	r0, [pc, #156]	; (8008000 <main+0x128>)
 8007f64:	f001 fa71 	bl	800944a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2102      	movs	r1, #2
 8007f6c:	4824      	ldr	r0, [pc, #144]	; (8008000 <main+0x128>)
 8007f6e:	f001 fa6c 	bl	800944a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007f72:	2200      	movs	r2, #0
 8007f74:	2101      	movs	r1, #1
 8007f76:	4822      	ldr	r0, [pc, #136]	; (8008000 <main+0x128>)
 8007f78:	f001 fa67 	bl	800944a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2120      	movs	r1, #32
 8007f80:	4822      	ldr	r0, [pc, #136]	; (800800c <main+0x134>)
 8007f82:	f001 fa62 	bl	800944a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f86:	2200      	movs	r2, #0
 8007f88:	2110      	movs	r1, #16
 8007f8a:	4820      	ldr	r0, [pc, #128]	; (800800c <main+0x134>)
 8007f8c:	f001 fa5d 	bl	800944a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f90:	2200      	movs	r2, #0
 8007f92:	2180      	movs	r1, #128	; 0x80
 8007f94:	481e      	ldr	r0, [pc, #120]	; (8008010 <main+0x138>)
 8007f96:	f001 fa58 	bl	800944a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2140      	movs	r1, #64	; 0x40
 8007f9e:	481c      	ldr	r0, [pc, #112]	; (8008010 <main+0x138>)
 8007fa0:	f001 fa53 	bl	800944a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2120      	movs	r1, #32
 8007fa8:	4819      	ldr	r0, [pc, #100]	; (8008010 <main+0x138>)
 8007faa:	f001 fa4e 	bl	800944a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2110      	movs	r1, #16
 8007fb2:	4817      	ldr	r0, [pc, #92]	; (8008010 <main+0x138>)
 8007fb4:	f001 fa49 	bl	800944a <HAL_GPIO_WritePin>

  i2cTest();
 8007fb8:	f7f8 ff6e 	bl	8000e98 <i2cTest>
  HAL_Delay(100);
 8007fbc:	2064      	movs	r0, #100	; 0x64
 8007fbe:	f000 fc5d 	bl	800887c <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007fc2:	4a14      	ldr	r2, [pc, #80]	; (8008014 <main+0x13c>)
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	2001      	movs	r0, #1
 8007fc8:	f7ff ff02 	bl	8007dd0 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007fcc:	4a12      	ldr	r2, [pc, #72]	; (8008018 <main+0x140>)
 8007fce:	2101      	movs	r1, #1
 8007fd0:	2002      	movs	r0, #2
 8007fd2:	f7ff fefd 	bl	8007dd0 <lcd_print>
  HAL_Delay(1000);
 8007fd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007fda:	f000 fc4f 	bl	800887c <HAL_Delay>
  lcd_clear();
 8007fde:	f7ff ff23 	bl	8007e28 <lcd_clear>

  eepromKontrol();
 8007fe2:	f7f8 f927 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007fe6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007fea:	f000 fc47 	bl	800887c <HAL_Delay>

  backLightTimer = millis;
 8007fee:	4b0b      	ldr	r3, [pc, #44]	; (800801c <main+0x144>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a0b      	ldr	r2, [pc, #44]	; (8008020 <main+0x148>)
 8007ff4:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007ff6:	f7ff fd2b 	bl	8007a50 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007ffa:	f7fe fd6f 	bl	8006adc <mainLoop>
 8007ffe:	e7fc      	b.n	8007ffa <main+0x122>
 8008000:	40010c00 	.word	0x40010c00
 8008004:	200003fc 	.word	0x200003fc
 8008008:	200003a8 	.word	0x200003a8
 800800c:	40011000 	.word	0x40011000
 8008010:	40010800 	.word	0x40010800
 8008014:	0800de40 	.word	0x0800de40
 8008018:	0800de54 	.word	0x0800de54
 800801c:	200001fc 	.word	0x200001fc
 8008020:	20000218 	.word	0x20000218

08008024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b090      	sub	sp, #64	; 0x40
 8008028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800802a:	f107 0318 	add.w	r3, r7, #24
 800802e:	2228      	movs	r2, #40	; 0x28
 8008030:	2100      	movs	r1, #0
 8008032:	4618      	mov	r0, r3
 8008034:	f004 fb45 	bl	800c6c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008038:	1d3b      	adds	r3, r7, #4
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	605a      	str	r2, [r3, #4]
 8008040:	609a      	str	r2, [r3, #8]
 8008042:	60da      	str	r2, [r3, #12]
 8008044:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008046:	2301      	movs	r3, #1
 8008048:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800804a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800804e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008050:	2300      	movs	r3, #0
 8008052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008054:	2301      	movs	r3, #1
 8008056:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008058:	2302      	movs	r3, #2
 800805a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800805c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008060:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008062:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008066:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008068:	f107 0318 	add.w	r3, r7, #24
 800806c:	4618      	mov	r0, r3
 800806e:	f002 fc3f 	bl	800a8f0 <HAL_RCC_OscConfig>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008078:	f000 f9a2 	bl	80083c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800807c:	230f      	movs	r3, #15
 800807e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008080:	2302      	movs	r3, #2
 8008082:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800808c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800808e:	2300      	movs	r3, #0
 8008090:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008092:	1d3b      	adds	r3, r7, #4
 8008094:	2102      	movs	r1, #2
 8008096:	4618      	mov	r0, r3
 8008098:	f002 feac 	bl	800adf4 <HAL_RCC_ClockConfig>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80080a2:	f000 f98d 	bl	80083c0 <Error_Handler>
  }
}
 80080a6:	bf00      	nop
 80080a8:	3740      	adds	r7, #64	; 0x40
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
	...

080080b0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80080b4:	4b16      	ldr	r3, [pc, #88]	; (8008110 <MX_CAN_Init+0x60>)
 80080b6:	4a17      	ldr	r2, [pc, #92]	; (8008114 <MX_CAN_Init+0x64>)
 80080b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80080ba:	4b15      	ldr	r3, [pc, #84]	; (8008110 <MX_CAN_Init+0x60>)
 80080bc:	2210      	movs	r2, #16
 80080be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80080c0:	4b13      	ldr	r3, [pc, #76]	; (8008110 <MX_CAN_Init+0x60>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80080c6:	4b12      	ldr	r3, [pc, #72]	; (8008110 <MX_CAN_Init+0x60>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80080cc:	4b10      	ldr	r3, [pc, #64]	; (8008110 <MX_CAN_Init+0x60>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80080d2:	4b0f      	ldr	r3, [pc, #60]	; (8008110 <MX_CAN_Init+0x60>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80080d8:	4b0d      	ldr	r3, [pc, #52]	; (8008110 <MX_CAN_Init+0x60>)
 80080da:	2200      	movs	r2, #0
 80080dc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80080de:	4b0c      	ldr	r3, [pc, #48]	; (8008110 <MX_CAN_Init+0x60>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80080e4:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <MX_CAN_Init+0x60>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80080ea:	4b09      	ldr	r3, [pc, #36]	; (8008110 <MX_CAN_Init+0x60>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <MX_CAN_Init+0x60>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80080f6:	4b06      	ldr	r3, [pc, #24]	; (8008110 <MX_CAN_Init+0x60>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80080fc:	4804      	ldr	r0, [pc, #16]	; (8008110 <MX_CAN_Init+0x60>)
 80080fe:	f000 fbe1 	bl	80088c4 <HAL_CAN_Init>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008108:	f000 f95a 	bl	80083c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 800810c:	bf00      	nop
 800810e:	bd80      	pop	{r7, pc}
 8008110:	20000380 	.word	0x20000380
 8008114:	40006400 	.word	0x40006400

08008118 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800811c:	4b12      	ldr	r3, [pc, #72]	; (8008168 <MX_I2C1_Init+0x50>)
 800811e:	4a13      	ldr	r2, [pc, #76]	; (800816c <MX_I2C1_Init+0x54>)
 8008120:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008122:	4b11      	ldr	r3, [pc, #68]	; (8008168 <MX_I2C1_Init+0x50>)
 8008124:	4a12      	ldr	r2, [pc, #72]	; (8008170 <MX_I2C1_Init+0x58>)
 8008126:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008128:	4b0f      	ldr	r3, [pc, #60]	; (8008168 <MX_I2C1_Init+0x50>)
 800812a:	2200      	movs	r2, #0
 800812c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800812e:	4b0e      	ldr	r3, [pc, #56]	; (8008168 <MX_I2C1_Init+0x50>)
 8008130:	2200      	movs	r2, #0
 8008132:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008134:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <MX_I2C1_Init+0x50>)
 8008136:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800813a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800813c:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <MX_I2C1_Init+0x50>)
 800813e:	2200      	movs	r2, #0
 8008140:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008142:	4b09      	ldr	r3, [pc, #36]	; (8008168 <MX_I2C1_Init+0x50>)
 8008144:	2200      	movs	r2, #0
 8008146:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008148:	4b07      	ldr	r3, [pc, #28]	; (8008168 <MX_I2C1_Init+0x50>)
 800814a:	2200      	movs	r2, #0
 800814c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800814e:	4b06      	ldr	r3, [pc, #24]	; (8008168 <MX_I2C1_Init+0x50>)
 8008150:	2200      	movs	r2, #0
 8008152:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008154:	4804      	ldr	r0, [pc, #16]	; (8008168 <MX_I2C1_Init+0x50>)
 8008156:	f001 f9a9 	bl	80094ac <HAL_I2C_Init>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008160:	f000 f92e 	bl	80083c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008164:	bf00      	nop
 8008166:	bd80      	pop	{r7, pc}
 8008168:	200003a8 	.word	0x200003a8
 800816c:	40005400 	.word	0x40005400
 8008170:	00061a80 	.word	0x00061a80

08008174 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800817a:	f107 0308 	add.w	r3, r7, #8
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	605a      	str	r2, [r3, #4]
 8008184:	609a      	str	r2, [r3, #8]
 8008186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008188:	463b      	mov	r3, r7
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008190:	4b1f      	ldr	r3, [pc, #124]	; (8008210 <MX_TIM1_Init+0x9c>)
 8008192:	4a20      	ldr	r2, [pc, #128]	; (8008214 <MX_TIM1_Init+0xa0>)
 8008194:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008196:	4b1e      	ldr	r3, [pc, #120]	; (8008210 <MX_TIM1_Init+0x9c>)
 8008198:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800819c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800819e:	4b1c      	ldr	r3, [pc, #112]	; (8008210 <MX_TIM1_Init+0x9c>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80081a4:	4b1a      	ldr	r3, [pc, #104]	; (8008210 <MX_TIM1_Init+0x9c>)
 80081a6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80081aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081ac:	4b18      	ldr	r3, [pc, #96]	; (8008210 <MX_TIM1_Init+0x9c>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80081b2:	4b17      	ldr	r3, [pc, #92]	; (8008210 <MX_TIM1_Init+0x9c>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80081b8:	4b15      	ldr	r3, [pc, #84]	; (8008210 <MX_TIM1_Init+0x9c>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80081be:	4814      	ldr	r0, [pc, #80]	; (8008210 <MX_TIM1_Init+0x9c>)
 80081c0:	f002 ffa6 	bl	800b110 <HAL_TIM_Base_Init>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80081ca:	f000 f8f9 	bl	80083c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80081ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80081d4:	f107 0308 	add.w	r3, r7, #8
 80081d8:	4619      	mov	r1, r3
 80081da:	480d      	ldr	r0, [pc, #52]	; (8008210 <MX_TIM1_Init+0x9c>)
 80081dc:	f003 f950 	bl	800b480 <HAL_TIM_ConfigClockSource>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80081e6:	f000 f8eb 	bl	80083c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081ea:	2300      	movs	r3, #0
 80081ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80081f2:	463b      	mov	r3, r7
 80081f4:	4619      	mov	r1, r3
 80081f6:	4806      	ldr	r0, [pc, #24]	; (8008210 <MX_TIM1_Init+0x9c>)
 80081f8:	f003 fb3e 	bl	800b878 <HAL_TIMEx_MasterConfigSynchronization>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008202:	f000 f8dd 	bl	80083c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008206:	bf00      	nop
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	200003fc 	.word	0x200003fc
 8008214:	40012c00 	.word	0x40012c00

08008218 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800821c:	4b11      	ldr	r3, [pc, #68]	; (8008264 <MX_USART1_UART_Init+0x4c>)
 800821e:	4a12      	ldr	r2, [pc, #72]	; (8008268 <MX_USART1_UART_Init+0x50>)
 8008220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008222:	4b10      	ldr	r3, [pc, #64]	; (8008264 <MX_USART1_UART_Init+0x4c>)
 8008224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800822a:	4b0e      	ldr	r3, [pc, #56]	; (8008264 <MX_USART1_UART_Init+0x4c>)
 800822c:	2200      	movs	r2, #0
 800822e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008230:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <MX_USART1_UART_Init+0x4c>)
 8008232:	2200      	movs	r2, #0
 8008234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008236:	4b0b      	ldr	r3, [pc, #44]	; (8008264 <MX_USART1_UART_Init+0x4c>)
 8008238:	2200      	movs	r2, #0
 800823a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800823c:	4b09      	ldr	r3, [pc, #36]	; (8008264 <MX_USART1_UART_Init+0x4c>)
 800823e:	220c      	movs	r2, #12
 8008240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008242:	4b08      	ldr	r3, [pc, #32]	; (8008264 <MX_USART1_UART_Init+0x4c>)
 8008244:	2200      	movs	r2, #0
 8008246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008248:	4b06      	ldr	r3, [pc, #24]	; (8008264 <MX_USART1_UART_Init+0x4c>)
 800824a:	2200      	movs	r2, #0
 800824c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800824e:	4805      	ldr	r0, [pc, #20]	; (8008264 <MX_USART1_UART_Init+0x4c>)
 8008250:	f003 fb90 	bl	800b974 <HAL_UART_Init>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800825a:	f000 f8b1 	bl	80083c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800825e:	bf00      	nop
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20000444 	.word	0x20000444
 8008268:	40013800 	.word	0x40013800

0800826c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008272:	f107 0310 	add.w	r3, r7, #16
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	605a      	str	r2, [r3, #4]
 800827c:	609a      	str	r2, [r3, #8]
 800827e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008280:	4b4b      	ldr	r3, [pc, #300]	; (80083b0 <MX_GPIO_Init+0x144>)
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	4a4a      	ldr	r2, [pc, #296]	; (80083b0 <MX_GPIO_Init+0x144>)
 8008286:	f043 0310 	orr.w	r3, r3, #16
 800828a:	6193      	str	r3, [r2, #24]
 800828c:	4b48      	ldr	r3, [pc, #288]	; (80083b0 <MX_GPIO_Init+0x144>)
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	f003 0310 	and.w	r3, r3, #16
 8008294:	60fb      	str	r3, [r7, #12]
 8008296:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008298:	4b45      	ldr	r3, [pc, #276]	; (80083b0 <MX_GPIO_Init+0x144>)
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	4a44      	ldr	r2, [pc, #272]	; (80083b0 <MX_GPIO_Init+0x144>)
 800829e:	f043 0320 	orr.w	r3, r3, #32
 80082a2:	6193      	str	r3, [r2, #24]
 80082a4:	4b42      	ldr	r3, [pc, #264]	; (80083b0 <MX_GPIO_Init+0x144>)
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	f003 0320 	and.w	r3, r3, #32
 80082ac:	60bb      	str	r3, [r7, #8]
 80082ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082b0:	4b3f      	ldr	r3, [pc, #252]	; (80083b0 <MX_GPIO_Init+0x144>)
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	4a3e      	ldr	r2, [pc, #248]	; (80083b0 <MX_GPIO_Init+0x144>)
 80082b6:	f043 0304 	orr.w	r3, r3, #4
 80082ba:	6193      	str	r3, [r2, #24]
 80082bc:	4b3c      	ldr	r3, [pc, #240]	; (80083b0 <MX_GPIO_Init+0x144>)
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	607b      	str	r3, [r7, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80082c8:	4b39      	ldr	r3, [pc, #228]	; (80083b0 <MX_GPIO_Init+0x144>)
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	4a38      	ldr	r2, [pc, #224]	; (80083b0 <MX_GPIO_Init+0x144>)
 80082ce:	f043 0308 	orr.w	r3, r3, #8
 80082d2:	6193      	str	r3, [r2, #24]
 80082d4:	4b36      	ldr	r3, [pc, #216]	; (80083b0 <MX_GPIO_Init+0x144>)
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	f003 0308 	and.w	r3, r3, #8
 80082dc:	603b      	str	r3, [r7, #0]
 80082de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80082e0:	2200      	movs	r2, #0
 80082e2:	21f0      	movs	r1, #240	; 0xf0
 80082e4:	4833      	ldr	r0, [pc, #204]	; (80083b4 <MX_GPIO_Init+0x148>)
 80082e6:	f001 f8b0 	bl	800944a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80082ea:	2200      	movs	r2, #0
 80082ec:	f241 0130 	movw	r1, #4144	; 0x1030
 80082f0:	4831      	ldr	r0, [pc, #196]	; (80083b8 <MX_GPIO_Init+0x14c>)
 80082f2:	f001 f8aa 	bl	800944a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80082f6:	2200      	movs	r2, #0
 80082f8:	f640 4107 	movw	r1, #3079	; 0xc07
 80082fc:	482f      	ldr	r0, [pc, #188]	; (80083bc <MX_GPIO_Init+0x150>)
 80082fe:	f001 f8a4 	bl	800944a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008302:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008306:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008308:	2300      	movs	r3, #0
 800830a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800830c:	2300      	movs	r3, #0
 800830e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008310:	f107 0310 	add.w	r3, r7, #16
 8008314:	4619      	mov	r1, r3
 8008316:	4828      	ldr	r0, [pc, #160]	; (80083b8 <MX_GPIO_Init+0x14c>)
 8008318:	f000 fe20 	bl	8008f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 800831c:	f248 130f 	movw	r3, #33039	; 0x810f
 8008320:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008322:	2300      	movs	r3, #0
 8008324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008326:	2300      	movs	r3, #0
 8008328:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800832a:	f107 0310 	add.w	r3, r7, #16
 800832e:	4619      	mov	r1, r3
 8008330:	4820      	ldr	r0, [pc, #128]	; (80083b4 <MX_GPIO_Init+0x148>)
 8008332:	f000 fe13 	bl	8008f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008336:	23f0      	movs	r3, #240	; 0xf0
 8008338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800833a:	2301      	movs	r3, #1
 800833c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800833e:	2300      	movs	r3, #0
 8008340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008342:	2302      	movs	r3, #2
 8008344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008346:	f107 0310 	add.w	r3, r7, #16
 800834a:	4619      	mov	r1, r3
 800834c:	4819      	ldr	r0, [pc, #100]	; (80083b4 <MX_GPIO_Init+0x148>)
 800834e:	f000 fe05 	bl	8008f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008352:	f241 0330 	movw	r3, #4144	; 0x1030
 8008356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008358:	2301      	movs	r3, #1
 800835a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800835c:	2300      	movs	r3, #0
 800835e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008360:	2302      	movs	r3, #2
 8008362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008364:	f107 0310 	add.w	r3, r7, #16
 8008368:	4619      	mov	r1, r3
 800836a:	4813      	ldr	r0, [pc, #76]	; (80083b8 <MX_GPIO_Init+0x14c>)
 800836c:	f000 fdf6 	bl	8008f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008370:	f640 4307 	movw	r3, #3079	; 0xc07
 8008374:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008376:	2301      	movs	r3, #1
 8008378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800837a:	2300      	movs	r3, #0
 800837c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800837e:	2302      	movs	r3, #2
 8008380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008382:	f107 0310 	add.w	r3, r7, #16
 8008386:	4619      	mov	r1, r3
 8008388:	480c      	ldr	r0, [pc, #48]	; (80083bc <MX_GPIO_Init+0x150>)
 800838a:	f000 fde7 	bl	8008f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800838e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008394:	2300      	movs	r3, #0
 8008396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008398:	2300      	movs	r3, #0
 800839a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800839c:	f107 0310 	add.w	r3, r7, #16
 80083a0:	4619      	mov	r1, r3
 80083a2:	4806      	ldr	r0, [pc, #24]	; (80083bc <MX_GPIO_Init+0x150>)
 80083a4:	f000 fdda 	bl	8008f5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80083a8:	bf00      	nop
 80083aa:	3720      	adds	r7, #32
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	40021000 	.word	0x40021000
 80083b4:	40010800 	.word	0x40010800
 80083b8:	40011000 	.word	0x40011000
 80083bc:	40010c00 	.word	0x40010c00

080083c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80083c4:	bf00      	nop
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bc80      	pop	{r7}
 80083ca:	4770      	bx	lr

080083cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80083d2:	4b15      	ldr	r3, [pc, #84]	; (8008428 <HAL_MspInit+0x5c>)
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	4a14      	ldr	r2, [pc, #80]	; (8008428 <HAL_MspInit+0x5c>)
 80083d8:	f043 0301 	orr.w	r3, r3, #1
 80083dc:	6193      	str	r3, [r2, #24]
 80083de:	4b12      	ldr	r3, [pc, #72]	; (8008428 <HAL_MspInit+0x5c>)
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	60bb      	str	r3, [r7, #8]
 80083e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80083ea:	4b0f      	ldr	r3, [pc, #60]	; (8008428 <HAL_MspInit+0x5c>)
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	4a0e      	ldr	r2, [pc, #56]	; (8008428 <HAL_MspInit+0x5c>)
 80083f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083f4:	61d3      	str	r3, [r2, #28]
 80083f6:	4b0c      	ldr	r3, [pc, #48]	; (8008428 <HAL_MspInit+0x5c>)
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083fe:	607b      	str	r3, [r7, #4]
 8008400:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008402:	4b0a      	ldr	r3, [pc, #40]	; (800842c <HAL_MspInit+0x60>)
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	4a04      	ldr	r2, [pc, #16]	; (800842c <HAL_MspInit+0x60>)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800841e:	bf00      	nop
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	bc80      	pop	{r7}
 8008426:	4770      	bx	lr
 8008428:	40021000 	.word	0x40021000
 800842c:	40010000 	.word	0x40010000

08008430 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008438:	f107 0310 	add.w	r3, r7, #16
 800843c:	2200      	movs	r2, #0
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	605a      	str	r2, [r3, #4]
 8008442:	609a      	str	r2, [r3, #8]
 8008444:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a1c      	ldr	r2, [pc, #112]	; (80084bc <HAL_CAN_MspInit+0x8c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d131      	bne.n	80084b4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008450:	4b1b      	ldr	r3, [pc, #108]	; (80084c0 <HAL_CAN_MspInit+0x90>)
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	4a1a      	ldr	r2, [pc, #104]	; (80084c0 <HAL_CAN_MspInit+0x90>)
 8008456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800845a:	61d3      	str	r3, [r2, #28]
 800845c:	4b18      	ldr	r3, [pc, #96]	; (80084c0 <HAL_CAN_MspInit+0x90>)
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008464:	60fb      	str	r3, [r7, #12]
 8008466:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008468:	4b15      	ldr	r3, [pc, #84]	; (80084c0 <HAL_CAN_MspInit+0x90>)
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	4a14      	ldr	r2, [pc, #80]	; (80084c0 <HAL_CAN_MspInit+0x90>)
 800846e:	f043 0304 	orr.w	r3, r3, #4
 8008472:	6193      	str	r3, [r2, #24]
 8008474:	4b12      	ldr	r3, [pc, #72]	; (80084c0 <HAL_CAN_MspInit+0x90>)
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	60bb      	str	r3, [r7, #8]
 800847e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008480:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008484:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008486:	2300      	movs	r3, #0
 8008488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800848a:	2300      	movs	r3, #0
 800848c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800848e:	f107 0310 	add.w	r3, r7, #16
 8008492:	4619      	mov	r1, r3
 8008494:	480b      	ldr	r0, [pc, #44]	; (80084c4 <HAL_CAN_MspInit+0x94>)
 8008496:	f000 fd61 	bl	8008f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800849a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800849e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084a0:	2302      	movs	r3, #2
 80084a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084a4:	2303      	movs	r3, #3
 80084a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084a8:	f107 0310 	add.w	r3, r7, #16
 80084ac:	4619      	mov	r1, r3
 80084ae:	4805      	ldr	r0, [pc, #20]	; (80084c4 <HAL_CAN_MspInit+0x94>)
 80084b0:	f000 fd54 	bl	8008f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80084b4:	bf00      	nop
 80084b6:	3720      	adds	r7, #32
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	40006400 	.word	0x40006400
 80084c0:	40021000 	.word	0x40021000
 80084c4:	40010800 	.word	0x40010800

080084c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b088      	sub	sp, #32
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084d0:	f107 0310 	add.w	r3, r7, #16
 80084d4:	2200      	movs	r2, #0
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	605a      	str	r2, [r3, #4]
 80084da:	609a      	str	r2, [r3, #8]
 80084dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a15      	ldr	r2, [pc, #84]	; (8008538 <HAL_I2C_MspInit+0x70>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d123      	bne.n	8008530 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084e8:	4b14      	ldr	r3, [pc, #80]	; (800853c <HAL_I2C_MspInit+0x74>)
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	4a13      	ldr	r2, [pc, #76]	; (800853c <HAL_I2C_MspInit+0x74>)
 80084ee:	f043 0308 	orr.w	r3, r3, #8
 80084f2:	6193      	str	r3, [r2, #24]
 80084f4:	4b11      	ldr	r3, [pc, #68]	; (800853c <HAL_I2C_MspInit+0x74>)
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	f003 0308 	and.w	r3, r3, #8
 80084fc:	60fb      	str	r3, [r7, #12]
 80084fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008500:	23c0      	movs	r3, #192	; 0xc0
 8008502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008504:	2312      	movs	r3, #18
 8008506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008508:	2303      	movs	r3, #3
 800850a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800850c:	f107 0310 	add.w	r3, r7, #16
 8008510:	4619      	mov	r1, r3
 8008512:	480b      	ldr	r0, [pc, #44]	; (8008540 <HAL_I2C_MspInit+0x78>)
 8008514:	f000 fd22 	bl	8008f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008518:	4b08      	ldr	r3, [pc, #32]	; (800853c <HAL_I2C_MspInit+0x74>)
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	4a07      	ldr	r2, [pc, #28]	; (800853c <HAL_I2C_MspInit+0x74>)
 800851e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008522:	61d3      	str	r3, [r2, #28]
 8008524:	4b05      	ldr	r3, [pc, #20]	; (800853c <HAL_I2C_MspInit+0x74>)
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800852c:	60bb      	str	r3, [r7, #8]
 800852e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008530:	bf00      	nop
 8008532:	3720      	adds	r7, #32
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	40005400 	.word	0x40005400
 800853c:	40021000 	.word	0x40021000
 8008540:	40010c00 	.word	0x40010c00

08008544 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a0a      	ldr	r2, [pc, #40]	; (800857c <HAL_I2C_MspDeInit+0x38>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d10d      	bne.n	8008572 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008556:	4b0a      	ldr	r3, [pc, #40]	; (8008580 <HAL_I2C_MspDeInit+0x3c>)
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	4a09      	ldr	r2, [pc, #36]	; (8008580 <HAL_I2C_MspDeInit+0x3c>)
 800855c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008560:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008562:	2140      	movs	r1, #64	; 0x40
 8008564:	4807      	ldr	r0, [pc, #28]	; (8008584 <HAL_I2C_MspDeInit+0x40>)
 8008566:	f000 fe8d 	bl	8009284 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800856a:	2180      	movs	r1, #128	; 0x80
 800856c:	4805      	ldr	r0, [pc, #20]	; (8008584 <HAL_I2C_MspDeInit+0x40>)
 800856e:	f000 fe89 	bl	8009284 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008572:	bf00      	nop
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	40005400 	.word	0x40005400
 8008580:	40021000 	.word	0x40021000
 8008584:	40010c00 	.word	0x40010c00

08008588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a0d      	ldr	r2, [pc, #52]	; (80085cc <HAL_TIM_Base_MspInit+0x44>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d113      	bne.n	80085c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800859a:	4b0d      	ldr	r3, [pc, #52]	; (80085d0 <HAL_TIM_Base_MspInit+0x48>)
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	4a0c      	ldr	r2, [pc, #48]	; (80085d0 <HAL_TIM_Base_MspInit+0x48>)
 80085a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80085a4:	6193      	str	r3, [r2, #24]
 80085a6:	4b0a      	ldr	r3, [pc, #40]	; (80085d0 <HAL_TIM_Base_MspInit+0x48>)
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80085b2:	2200      	movs	r2, #0
 80085b4:	2100      	movs	r1, #0
 80085b6:	2019      	movs	r0, #25
 80085b8:	f000 fb57 	bl	8008c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80085bc:	2019      	movs	r0, #25
 80085be:	f000 fb70 	bl	8008ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80085c2:	bf00      	nop
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	40012c00 	.word	0x40012c00
 80085d0:	40021000 	.word	0x40021000

080085d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085dc:	f107 0310 	add.w	r3, r7, #16
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	605a      	str	r2, [r3, #4]
 80085e6:	609a      	str	r2, [r3, #8]
 80085e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a20      	ldr	r2, [pc, #128]	; (8008670 <HAL_UART_MspInit+0x9c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d139      	bne.n	8008668 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80085f4:	4b1f      	ldr	r3, [pc, #124]	; (8008674 <HAL_UART_MspInit+0xa0>)
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	4a1e      	ldr	r2, [pc, #120]	; (8008674 <HAL_UART_MspInit+0xa0>)
 80085fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085fe:	6193      	str	r3, [r2, #24]
 8008600:	4b1c      	ldr	r3, [pc, #112]	; (8008674 <HAL_UART_MspInit+0xa0>)
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800860c:	4b19      	ldr	r3, [pc, #100]	; (8008674 <HAL_UART_MspInit+0xa0>)
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	4a18      	ldr	r2, [pc, #96]	; (8008674 <HAL_UART_MspInit+0xa0>)
 8008612:	f043 0304 	orr.w	r3, r3, #4
 8008616:	6193      	str	r3, [r2, #24]
 8008618:	4b16      	ldr	r3, [pc, #88]	; (8008674 <HAL_UART_MspInit+0xa0>)
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	60bb      	str	r3, [r7, #8]
 8008622:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008628:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800862a:	2302      	movs	r3, #2
 800862c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800862e:	2303      	movs	r3, #3
 8008630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008632:	f107 0310 	add.w	r3, r7, #16
 8008636:	4619      	mov	r1, r3
 8008638:	480f      	ldr	r0, [pc, #60]	; (8008678 <HAL_UART_MspInit+0xa4>)
 800863a:	f000 fc8f 	bl	8008f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800863e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008642:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008644:	2300      	movs	r3, #0
 8008646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008648:	2300      	movs	r3, #0
 800864a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800864c:	f107 0310 	add.w	r3, r7, #16
 8008650:	4619      	mov	r1, r3
 8008652:	4809      	ldr	r0, [pc, #36]	; (8008678 <HAL_UART_MspInit+0xa4>)
 8008654:	f000 fc82 	bl	8008f5c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008658:	2200      	movs	r2, #0
 800865a:	2100      	movs	r1, #0
 800865c:	2025      	movs	r0, #37	; 0x25
 800865e:	f000 fb04 	bl	8008c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008662:	2025      	movs	r0, #37	; 0x25
 8008664:	f000 fb1d 	bl	8008ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008668:	bf00      	nop
 800866a:	3720      	adds	r7, #32
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	40013800 	.word	0x40013800
 8008674:	40021000 	.word	0x40021000
 8008678:	40010800 	.word	0x40010800

0800867c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800867c:	b480      	push	{r7}
 800867e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008680:	e7fe      	b.n	8008680 <NMI_Handler+0x4>

08008682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008682:	b480      	push	{r7}
 8008684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008686:	e7fe      	b.n	8008686 <HardFault_Handler+0x4>

08008688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008688:	b480      	push	{r7}
 800868a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800868c:	e7fe      	b.n	800868c <MemManage_Handler+0x4>

0800868e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800868e:	b480      	push	{r7}
 8008690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008692:	e7fe      	b.n	8008692 <BusFault_Handler+0x4>

08008694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008694:	b480      	push	{r7}
 8008696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008698:	e7fe      	b.n	8008698 <UsageFault_Handler+0x4>

0800869a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800869a:	b480      	push	{r7}
 800869c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800869e:	bf00      	nop
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr

080086a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80086a6:	b480      	push	{r7}
 80086a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80086aa:	bf00      	nop
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bc80      	pop	{r7}
 80086b0:	4770      	bx	lr

080086b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80086b2:	b480      	push	{r7}
 80086b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80086b6:	bf00      	nop
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bc80      	pop	{r7}
 80086bc:	4770      	bx	lr

080086be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80086c2:	f000 f8bf 	bl	8008844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80086c6:	bf00      	nop
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80086d0:	4802      	ldr	r0, [pc, #8]	; (80086dc <TIM1_UP_IRQHandler+0x10>)
 80086d2:	f002 fdcd 	bl	800b270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80086d6:	bf00      	nop
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	200003fc 	.word	0x200003fc

080086e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80086e4:	4802      	ldr	r0, [pc, #8]	; (80086f0 <USART1_IRQHandler+0x10>)
 80086e6:	f003 f9cb 	bl	800ba80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80086ea:	bf00      	nop
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20000444 	.word	0x20000444

080086f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80086fc:	4a14      	ldr	r2, [pc, #80]	; (8008750 <_sbrk+0x5c>)
 80086fe:	4b15      	ldr	r3, [pc, #84]	; (8008754 <_sbrk+0x60>)
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008708:	4b13      	ldr	r3, [pc, #76]	; (8008758 <_sbrk+0x64>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008710:	4b11      	ldr	r3, [pc, #68]	; (8008758 <_sbrk+0x64>)
 8008712:	4a12      	ldr	r2, [pc, #72]	; (800875c <_sbrk+0x68>)
 8008714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008716:	4b10      	ldr	r3, [pc, #64]	; (8008758 <_sbrk+0x64>)
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4413      	add	r3, r2
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	429a      	cmp	r2, r3
 8008722:	d207      	bcs.n	8008734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008724:	f003 ffe6 	bl	800c6f4 <__errno>
 8008728:	4603      	mov	r3, r0
 800872a:	220c      	movs	r2, #12
 800872c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800872e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008732:	e009      	b.n	8008748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008734:	4b08      	ldr	r3, [pc, #32]	; (8008758 <_sbrk+0x64>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800873a:	4b07      	ldr	r3, [pc, #28]	; (8008758 <_sbrk+0x64>)
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4413      	add	r3, r2
 8008742:	4a05      	ldr	r2, [pc, #20]	; (8008758 <_sbrk+0x64>)
 8008744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008746:	68fb      	ldr	r3, [r7, #12]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3718      	adds	r7, #24
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	2000c000 	.word	0x2000c000
 8008754:	00000400 	.word	0x00000400
 8008758:	2000048c 	.word	0x2000048c
 800875c:	200005e0 	.word	0x200005e0

08008760 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008760:	b480      	push	{r7}
 8008762:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008764:	bf00      	nop
 8008766:	46bd      	mov	sp, r7
 8008768:	bc80      	pop	{r7}
 800876a:	4770      	bx	lr

0800876c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800876c:	480c      	ldr	r0, [pc, #48]	; (80087a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800876e:	490d      	ldr	r1, [pc, #52]	; (80087a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008770:	4a0d      	ldr	r2, [pc, #52]	; (80087a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008774:	e002      	b.n	800877c <LoopCopyDataInit>

08008776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800877a:	3304      	adds	r3, #4

0800877c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800877c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800877e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008780:	d3f9      	bcc.n	8008776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008782:	4a0a      	ldr	r2, [pc, #40]	; (80087ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008784:	4c0a      	ldr	r4, [pc, #40]	; (80087b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008788:	e001      	b.n	800878e <LoopFillZerobss>

0800878a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800878a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800878c:	3204      	adds	r2, #4

0800878e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800878e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008790:	d3fb      	bcc.n	800878a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008792:	f7ff ffe5 	bl	8008760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008796:	f003 ffb3 	bl	800c700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800879a:	f7ff fb9d 	bl	8007ed8 <main>
  bx lr
 800879e:	4770      	bx	lr
  ldr r0, =_sdata
 80087a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80087a4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80087a8:	0800def4 	.word	0x0800def4
  ldr r2, =_sbss
 80087ac:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80087b0:	200005dc 	.word	0x200005dc

080087b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80087b4:	e7fe      	b.n	80087b4 <ADC1_2_IRQHandler>
	...

080087b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80087bc:	4b08      	ldr	r3, [pc, #32]	; (80087e0 <HAL_Init+0x28>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a07      	ldr	r2, [pc, #28]	; (80087e0 <HAL_Init+0x28>)
 80087c2:	f043 0310 	orr.w	r3, r3, #16
 80087c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087c8:	2003      	movs	r0, #3
 80087ca:	f000 fa43 	bl	8008c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80087ce:	200f      	movs	r0, #15
 80087d0:	f000 f808 	bl	80087e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80087d4:	f7ff fdfa 	bl	80083cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	40022000 	.word	0x40022000

080087e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80087ec:	4b12      	ldr	r3, [pc, #72]	; (8008838 <HAL_InitTick+0x54>)
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	4b12      	ldr	r3, [pc, #72]	; (800883c <HAL_InitTick+0x58>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	4619      	mov	r1, r3
 80087f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80087fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fa5b 	bl	8008cbe <HAL_SYSTICK_Config>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e00e      	b.n	8008830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b0f      	cmp	r3, #15
 8008816:	d80a      	bhi.n	800882e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008818:	2200      	movs	r2, #0
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008820:	f000 fa23 	bl	8008c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008824:	4a06      	ldr	r2, [pc, #24]	; (8008840 <HAL_InitTick+0x5c>)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	e000      	b.n	8008830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
}
 8008830:	4618      	mov	r0, r3
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	200000a0 	.word	0x200000a0
 800883c:	200000a8 	.word	0x200000a8
 8008840:	200000a4 	.word	0x200000a4

08008844 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008844:	b480      	push	{r7}
 8008846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008848:	4b05      	ldr	r3, [pc, #20]	; (8008860 <HAL_IncTick+0x1c>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	461a      	mov	r2, r3
 800884e:	4b05      	ldr	r3, [pc, #20]	; (8008864 <HAL_IncTick+0x20>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4413      	add	r3, r2
 8008854:	4a03      	ldr	r2, [pc, #12]	; (8008864 <HAL_IncTick+0x20>)
 8008856:	6013      	str	r3, [r2, #0]
}
 8008858:	bf00      	nop
 800885a:	46bd      	mov	sp, r7
 800885c:	bc80      	pop	{r7}
 800885e:	4770      	bx	lr
 8008860:	200000a8 	.word	0x200000a8
 8008864:	20000490 	.word	0x20000490

08008868 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008868:	b480      	push	{r7}
 800886a:	af00      	add	r7, sp, #0
  return uwTick;
 800886c:	4b02      	ldr	r3, [pc, #8]	; (8008878 <HAL_GetTick+0x10>)
 800886e:	681b      	ldr	r3, [r3, #0]
}
 8008870:	4618      	mov	r0, r3
 8008872:	46bd      	mov	sp, r7
 8008874:	bc80      	pop	{r7}
 8008876:	4770      	bx	lr
 8008878:	20000490 	.word	0x20000490

0800887c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008884:	f7ff fff0 	bl	8008868 <HAL_GetTick>
 8008888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008894:	d005      	beq.n	80088a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008896:	4b0a      	ldr	r3, [pc, #40]	; (80088c0 <HAL_Delay+0x44>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4413      	add	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80088a2:	bf00      	nop
 80088a4:	f7ff ffe0 	bl	8008868 <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d8f7      	bhi.n	80088a4 <HAL_Delay+0x28>
  {
  }
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	200000a8 	.word	0x200000a8

080088c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e0ed      	b.n	8008ab2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d102      	bne.n	80088e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff fda4 	bl	8008430 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0201 	orr.w	r2, r2, #1
 80088f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088f8:	f7ff ffb6 	bl	8008868 <HAL_GetTick>
 80088fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088fe:	e012      	b.n	8008926 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008900:	f7ff ffb2 	bl	8008868 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b0a      	cmp	r3, #10
 800890c:	d90b      	bls.n	8008926 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2205      	movs	r2, #5
 800891e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e0c5      	b.n	8008ab2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0e5      	beq.n	8008900 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 0202 	bic.w	r2, r2, #2
 8008942:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008944:	f7ff ff90 	bl	8008868 <HAL_GetTick>
 8008948:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800894a:	e012      	b.n	8008972 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800894c:	f7ff ff8c 	bl	8008868 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b0a      	cmp	r3, #10
 8008958:	d90b      	bls.n	8008972 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2205      	movs	r2, #5
 800896a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e09f      	b.n	8008ab2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f003 0302 	and.w	r3, r3, #2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1e5      	bne.n	800894c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	7e1b      	ldrb	r3, [r3, #24]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d108      	bne.n	800899a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	e007      	b.n	80089aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	7e5b      	ldrb	r3, [r3, #25]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d108      	bne.n	80089c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	e007      	b.n	80089d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	7e9b      	ldrb	r3, [r3, #26]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d108      	bne.n	80089ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0220 	orr.w	r2, r2, #32
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	e007      	b.n	80089fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f022 0220 	bic.w	r2, r2, #32
 80089fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	7edb      	ldrb	r3, [r3, #27]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d108      	bne.n	8008a18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f022 0210 	bic.w	r2, r2, #16
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	e007      	b.n	8008a28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0210 	orr.w	r2, r2, #16
 8008a26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	7f1b      	ldrb	r3, [r3, #28]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d108      	bne.n	8008a42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f042 0208 	orr.w	r2, r2, #8
 8008a3e:	601a      	str	r2, [r3, #0]
 8008a40:	e007      	b.n	8008a52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0208 	bic.w	r2, r2, #8
 8008a50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	7f5b      	ldrb	r3, [r3, #29]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d108      	bne.n	8008a6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f042 0204 	orr.w	r2, r2, #4
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	e007      	b.n	8008a7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0204 	bic.w	r2, r2, #4
 8008a7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	689a      	ldr	r2, [r3, #8]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	431a      	orrs	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	ea42 0103 	orr.w	r1, r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	1e5a      	subs	r2, r3, #1
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <__NVIC_SetPriorityGrouping>:
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f003 0307 	and.w	r3, r3, #7
 8008aca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008acc:	4b0c      	ldr	r3, [pc, #48]	; (8008b00 <__NVIC_SetPriorityGrouping+0x44>)
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ad8:	4013      	ands	r3, r2
 8008ada:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008aee:	4a04      	ldr	r2, [pc, #16]	; (8008b00 <__NVIC_SetPriorityGrouping+0x44>)
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	60d3      	str	r3, [r2, #12]
}
 8008af4:	bf00      	nop
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bc80      	pop	{r7}
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	e000ed00 	.word	0xe000ed00

08008b04 <__NVIC_GetPriorityGrouping>:
{
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b08:	4b04      	ldr	r3, [pc, #16]	; (8008b1c <__NVIC_GetPriorityGrouping+0x18>)
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	0a1b      	lsrs	r3, r3, #8
 8008b0e:	f003 0307 	and.w	r3, r3, #7
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bc80      	pop	{r7}
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	e000ed00 	.word	0xe000ed00

08008b20 <__NVIC_EnableIRQ>:
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	db0b      	blt.n	8008b4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	f003 021f 	and.w	r2, r3, #31
 8008b38:	4906      	ldr	r1, [pc, #24]	; (8008b54 <__NVIC_EnableIRQ+0x34>)
 8008b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b3e:	095b      	lsrs	r3, r3, #5
 8008b40:	2001      	movs	r0, #1
 8008b42:	fa00 f202 	lsl.w	r2, r0, r2
 8008b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bc80      	pop	{r7}
 8008b52:	4770      	bx	lr
 8008b54:	e000e100 	.word	0xe000e100

08008b58 <__NVIC_SetPriority>:
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	6039      	str	r1, [r7, #0]
 8008b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	db0a      	blt.n	8008b82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	490c      	ldr	r1, [pc, #48]	; (8008ba4 <__NVIC_SetPriority+0x4c>)
 8008b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b76:	0112      	lsls	r2, r2, #4
 8008b78:	b2d2      	uxtb	r2, r2
 8008b7a:	440b      	add	r3, r1
 8008b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b80:	e00a      	b.n	8008b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	4908      	ldr	r1, [pc, #32]	; (8008ba8 <__NVIC_SetPriority+0x50>)
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	f003 030f 	and.w	r3, r3, #15
 8008b8e:	3b04      	subs	r3, #4
 8008b90:	0112      	lsls	r2, r2, #4
 8008b92:	b2d2      	uxtb	r2, r2
 8008b94:	440b      	add	r3, r1
 8008b96:	761a      	strb	r2, [r3, #24]
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bc80      	pop	{r7}
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	e000e100 	.word	0xe000e100
 8008ba8:	e000ed00 	.word	0xe000ed00

08008bac <NVIC_EncodePriority>:
{
 8008bac:	b480      	push	{r7}
 8008bae:	b089      	sub	sp, #36	; 0x24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f003 0307 	and.w	r3, r3, #7
 8008bbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	f1c3 0307 	rsb	r3, r3, #7
 8008bc6:	2b04      	cmp	r3, #4
 8008bc8:	bf28      	it	cs
 8008bca:	2304      	movcs	r3, #4
 8008bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	3304      	adds	r3, #4
 8008bd2:	2b06      	cmp	r3, #6
 8008bd4:	d902      	bls.n	8008bdc <NVIC_EncodePriority+0x30>
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	3b03      	subs	r3, #3
 8008bda:	e000      	b.n	8008bde <NVIC_EncodePriority+0x32>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bea:	43da      	mvns	r2, r3
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	401a      	ands	r2, r3
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008bf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8008bfe:	43d9      	mvns	r1, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c04:	4313      	orrs	r3, r2
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3724      	adds	r7, #36	; 0x24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bc80      	pop	{r7}
 8008c0e:	4770      	bx	lr

08008c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c20:	d301      	bcc.n	8008c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c22:	2301      	movs	r3, #1
 8008c24:	e00f      	b.n	8008c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c26:	4a0a      	ldr	r2, [pc, #40]	; (8008c50 <SysTick_Config+0x40>)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c2e:	210f      	movs	r1, #15
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c34:	f7ff ff90 	bl	8008b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c38:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <SysTick_Config+0x40>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c3e:	4b04      	ldr	r3, [pc, #16]	; (8008c50 <SysTick_Config+0x40>)
 8008c40:	2207      	movs	r2, #7
 8008c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	e000e010 	.word	0xe000e010

08008c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff ff2d 	bl	8008abc <__NVIC_SetPriorityGrouping>
}
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b086      	sub	sp, #24
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	4603      	mov	r3, r0
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	607a      	str	r2, [r7, #4]
 8008c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c7c:	f7ff ff42 	bl	8008b04 <__NVIC_GetPriorityGrouping>
 8008c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	68b9      	ldr	r1, [r7, #8]
 8008c86:	6978      	ldr	r0, [r7, #20]
 8008c88:	f7ff ff90 	bl	8008bac <NVIC_EncodePriority>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c92:	4611      	mov	r1, r2
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7ff ff5f 	bl	8008b58 <__NVIC_SetPriority>
}
 8008c9a:	bf00      	nop
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	4603      	mov	r3, r0
 8008caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7ff ff35 	bl	8008b20 <__NVIC_EnableIRQ>
}
 8008cb6:	bf00      	nop
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff ffa2 	bl	8008c10 <SysTick_Config>
 8008ccc:	4603      	mov	r3, r0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b085      	sub	sp, #20
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d008      	beq.n	8008d00 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2204      	movs	r2, #4
 8008cf2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e020      	b.n	8008d42 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f022 020e 	bic.w	r2, r2, #14
 8008d0e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0201 	bic.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d28:	2101      	movs	r1, #1
 8008d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8008d2e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3714      	adds	r7, #20
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bc80      	pop	{r7}
 8008d4a:	4770      	bx	lr

08008d4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d005      	beq.n	8008d70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2204      	movs	r2, #4
 8008d68:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	73fb      	strb	r3, [r7, #15]
 8008d6e:	e0d6      	b.n	8008f1e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 020e 	bic.w	r2, r2, #14
 8008d7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f022 0201 	bic.w	r2, r2, #1
 8008d8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	461a      	mov	r2, r3
 8008d96:	4b64      	ldr	r3, [pc, #400]	; (8008f28 <HAL_DMA_Abort_IT+0x1dc>)
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d958      	bls.n	8008e4e <HAL_DMA_Abort_IT+0x102>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a62      	ldr	r2, [pc, #392]	; (8008f2c <HAL_DMA_Abort_IT+0x1e0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d04f      	beq.n	8008e46 <HAL_DMA_Abort_IT+0xfa>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a61      	ldr	r2, [pc, #388]	; (8008f30 <HAL_DMA_Abort_IT+0x1e4>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d048      	beq.n	8008e42 <HAL_DMA_Abort_IT+0xf6>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a5f      	ldr	r2, [pc, #380]	; (8008f34 <HAL_DMA_Abort_IT+0x1e8>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d040      	beq.n	8008e3c <HAL_DMA_Abort_IT+0xf0>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a5e      	ldr	r2, [pc, #376]	; (8008f38 <HAL_DMA_Abort_IT+0x1ec>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d038      	beq.n	8008e36 <HAL_DMA_Abort_IT+0xea>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a5c      	ldr	r2, [pc, #368]	; (8008f3c <HAL_DMA_Abort_IT+0x1f0>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d030      	beq.n	8008e30 <HAL_DMA_Abort_IT+0xe4>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a5b      	ldr	r2, [pc, #364]	; (8008f40 <HAL_DMA_Abort_IT+0x1f4>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d028      	beq.n	8008e2a <HAL_DMA_Abort_IT+0xde>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a52      	ldr	r2, [pc, #328]	; (8008f28 <HAL_DMA_Abort_IT+0x1dc>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d020      	beq.n	8008e24 <HAL_DMA_Abort_IT+0xd8>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a57      	ldr	r2, [pc, #348]	; (8008f44 <HAL_DMA_Abort_IT+0x1f8>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d019      	beq.n	8008e20 <HAL_DMA_Abort_IT+0xd4>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a55      	ldr	r2, [pc, #340]	; (8008f48 <HAL_DMA_Abort_IT+0x1fc>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d012      	beq.n	8008e1c <HAL_DMA_Abort_IT+0xd0>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a54      	ldr	r2, [pc, #336]	; (8008f4c <HAL_DMA_Abort_IT+0x200>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d00a      	beq.n	8008e16 <HAL_DMA_Abort_IT+0xca>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a52      	ldr	r2, [pc, #328]	; (8008f50 <HAL_DMA_Abort_IT+0x204>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d102      	bne.n	8008e10 <HAL_DMA_Abort_IT+0xc4>
 8008e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e0e:	e01b      	b.n	8008e48 <HAL_DMA_Abort_IT+0xfc>
 8008e10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e14:	e018      	b.n	8008e48 <HAL_DMA_Abort_IT+0xfc>
 8008e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e1a:	e015      	b.n	8008e48 <HAL_DMA_Abort_IT+0xfc>
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	e013      	b.n	8008e48 <HAL_DMA_Abort_IT+0xfc>
 8008e20:	2301      	movs	r3, #1
 8008e22:	e011      	b.n	8008e48 <HAL_DMA_Abort_IT+0xfc>
 8008e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e28:	e00e      	b.n	8008e48 <HAL_DMA_Abort_IT+0xfc>
 8008e2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e2e:	e00b      	b.n	8008e48 <HAL_DMA_Abort_IT+0xfc>
 8008e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e34:	e008      	b.n	8008e48 <HAL_DMA_Abort_IT+0xfc>
 8008e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e3a:	e005      	b.n	8008e48 <HAL_DMA_Abort_IT+0xfc>
 8008e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e40:	e002      	b.n	8008e48 <HAL_DMA_Abort_IT+0xfc>
 8008e42:	2310      	movs	r3, #16
 8008e44:	e000      	b.n	8008e48 <HAL_DMA_Abort_IT+0xfc>
 8008e46:	2301      	movs	r3, #1
 8008e48:	4a42      	ldr	r2, [pc, #264]	; (8008f54 <HAL_DMA_Abort_IT+0x208>)
 8008e4a:	6053      	str	r3, [r2, #4]
 8008e4c:	e057      	b.n	8008efe <HAL_DMA_Abort_IT+0x1b2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a36      	ldr	r2, [pc, #216]	; (8008f2c <HAL_DMA_Abort_IT+0x1e0>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d04f      	beq.n	8008ef8 <HAL_DMA_Abort_IT+0x1ac>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a34      	ldr	r2, [pc, #208]	; (8008f30 <HAL_DMA_Abort_IT+0x1e4>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d048      	beq.n	8008ef4 <HAL_DMA_Abort_IT+0x1a8>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a33      	ldr	r2, [pc, #204]	; (8008f34 <HAL_DMA_Abort_IT+0x1e8>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d040      	beq.n	8008eee <HAL_DMA_Abort_IT+0x1a2>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a31      	ldr	r2, [pc, #196]	; (8008f38 <HAL_DMA_Abort_IT+0x1ec>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d038      	beq.n	8008ee8 <HAL_DMA_Abort_IT+0x19c>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a30      	ldr	r2, [pc, #192]	; (8008f3c <HAL_DMA_Abort_IT+0x1f0>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d030      	beq.n	8008ee2 <HAL_DMA_Abort_IT+0x196>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a2e      	ldr	r2, [pc, #184]	; (8008f40 <HAL_DMA_Abort_IT+0x1f4>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d028      	beq.n	8008edc <HAL_DMA_Abort_IT+0x190>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a26      	ldr	r2, [pc, #152]	; (8008f28 <HAL_DMA_Abort_IT+0x1dc>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d020      	beq.n	8008ed6 <HAL_DMA_Abort_IT+0x18a>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a2a      	ldr	r2, [pc, #168]	; (8008f44 <HAL_DMA_Abort_IT+0x1f8>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d019      	beq.n	8008ed2 <HAL_DMA_Abort_IT+0x186>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a29      	ldr	r2, [pc, #164]	; (8008f48 <HAL_DMA_Abort_IT+0x1fc>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d012      	beq.n	8008ece <HAL_DMA_Abort_IT+0x182>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a27      	ldr	r2, [pc, #156]	; (8008f4c <HAL_DMA_Abort_IT+0x200>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d00a      	beq.n	8008ec8 <HAL_DMA_Abort_IT+0x17c>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a26      	ldr	r2, [pc, #152]	; (8008f50 <HAL_DMA_Abort_IT+0x204>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d102      	bne.n	8008ec2 <HAL_DMA_Abort_IT+0x176>
 8008ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ec0:	e01b      	b.n	8008efa <HAL_DMA_Abort_IT+0x1ae>
 8008ec2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ec6:	e018      	b.n	8008efa <HAL_DMA_Abort_IT+0x1ae>
 8008ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ecc:	e015      	b.n	8008efa <HAL_DMA_Abort_IT+0x1ae>
 8008ece:	2310      	movs	r3, #16
 8008ed0:	e013      	b.n	8008efa <HAL_DMA_Abort_IT+0x1ae>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e011      	b.n	8008efa <HAL_DMA_Abort_IT+0x1ae>
 8008ed6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008eda:	e00e      	b.n	8008efa <HAL_DMA_Abort_IT+0x1ae>
 8008edc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ee0:	e00b      	b.n	8008efa <HAL_DMA_Abort_IT+0x1ae>
 8008ee2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ee6:	e008      	b.n	8008efa <HAL_DMA_Abort_IT+0x1ae>
 8008ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eec:	e005      	b.n	8008efa <HAL_DMA_Abort_IT+0x1ae>
 8008eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ef2:	e002      	b.n	8008efa <HAL_DMA_Abort_IT+0x1ae>
 8008ef4:	2310      	movs	r3, #16
 8008ef6:	e000      	b.n	8008efa <HAL_DMA_Abort_IT+0x1ae>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	4a17      	ldr	r2, [pc, #92]	; (8008f58 <HAL_DMA_Abort_IT+0x20c>)
 8008efc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	4798      	blx	r3
    } 
  }
  return status;
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	40020080 	.word	0x40020080
 8008f2c:	40020008 	.word	0x40020008
 8008f30:	4002001c 	.word	0x4002001c
 8008f34:	40020030 	.word	0x40020030
 8008f38:	40020044 	.word	0x40020044
 8008f3c:	40020058 	.word	0x40020058
 8008f40:	4002006c 	.word	0x4002006c
 8008f44:	40020408 	.word	0x40020408
 8008f48:	4002041c 	.word	0x4002041c
 8008f4c:	40020430 	.word	0x40020430
 8008f50:	40020444 	.word	0x40020444
 8008f54:	40020400 	.word	0x40020400
 8008f58:	40020000 	.word	0x40020000

08008f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b08b      	sub	sp, #44	; 0x2c
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f66:	2300      	movs	r3, #0
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f6e:	e179      	b.n	8009264 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008f70:	2201      	movs	r2, #1
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	fa02 f303 	lsl.w	r3, r2, r3
 8008f78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	4013      	ands	r3, r2
 8008f82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	f040 8168 	bne.w	800925e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	4a96      	ldr	r2, [pc, #600]	; (80091ec <HAL_GPIO_Init+0x290>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d05e      	beq.n	8009056 <HAL_GPIO_Init+0xfa>
 8008f98:	4a94      	ldr	r2, [pc, #592]	; (80091ec <HAL_GPIO_Init+0x290>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d875      	bhi.n	800908a <HAL_GPIO_Init+0x12e>
 8008f9e:	4a94      	ldr	r2, [pc, #592]	; (80091f0 <HAL_GPIO_Init+0x294>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d058      	beq.n	8009056 <HAL_GPIO_Init+0xfa>
 8008fa4:	4a92      	ldr	r2, [pc, #584]	; (80091f0 <HAL_GPIO_Init+0x294>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d86f      	bhi.n	800908a <HAL_GPIO_Init+0x12e>
 8008faa:	4a92      	ldr	r2, [pc, #584]	; (80091f4 <HAL_GPIO_Init+0x298>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d052      	beq.n	8009056 <HAL_GPIO_Init+0xfa>
 8008fb0:	4a90      	ldr	r2, [pc, #576]	; (80091f4 <HAL_GPIO_Init+0x298>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d869      	bhi.n	800908a <HAL_GPIO_Init+0x12e>
 8008fb6:	4a90      	ldr	r2, [pc, #576]	; (80091f8 <HAL_GPIO_Init+0x29c>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d04c      	beq.n	8009056 <HAL_GPIO_Init+0xfa>
 8008fbc:	4a8e      	ldr	r2, [pc, #568]	; (80091f8 <HAL_GPIO_Init+0x29c>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d863      	bhi.n	800908a <HAL_GPIO_Init+0x12e>
 8008fc2:	4a8e      	ldr	r2, [pc, #568]	; (80091fc <HAL_GPIO_Init+0x2a0>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d046      	beq.n	8009056 <HAL_GPIO_Init+0xfa>
 8008fc8:	4a8c      	ldr	r2, [pc, #560]	; (80091fc <HAL_GPIO_Init+0x2a0>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d85d      	bhi.n	800908a <HAL_GPIO_Init+0x12e>
 8008fce:	2b12      	cmp	r3, #18
 8008fd0:	d82a      	bhi.n	8009028 <HAL_GPIO_Init+0xcc>
 8008fd2:	2b12      	cmp	r3, #18
 8008fd4:	d859      	bhi.n	800908a <HAL_GPIO_Init+0x12e>
 8008fd6:	a201      	add	r2, pc, #4	; (adr r2, 8008fdc <HAL_GPIO_Init+0x80>)
 8008fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fdc:	08009057 	.word	0x08009057
 8008fe0:	08009031 	.word	0x08009031
 8008fe4:	08009043 	.word	0x08009043
 8008fe8:	08009085 	.word	0x08009085
 8008fec:	0800908b 	.word	0x0800908b
 8008ff0:	0800908b 	.word	0x0800908b
 8008ff4:	0800908b 	.word	0x0800908b
 8008ff8:	0800908b 	.word	0x0800908b
 8008ffc:	0800908b 	.word	0x0800908b
 8009000:	0800908b 	.word	0x0800908b
 8009004:	0800908b 	.word	0x0800908b
 8009008:	0800908b 	.word	0x0800908b
 800900c:	0800908b 	.word	0x0800908b
 8009010:	0800908b 	.word	0x0800908b
 8009014:	0800908b 	.word	0x0800908b
 8009018:	0800908b 	.word	0x0800908b
 800901c:	0800908b 	.word	0x0800908b
 8009020:	08009039 	.word	0x08009039
 8009024:	0800904d 	.word	0x0800904d
 8009028:	4a75      	ldr	r2, [pc, #468]	; (8009200 <HAL_GPIO_Init+0x2a4>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d013      	beq.n	8009056 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800902e:	e02c      	b.n	800908a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	623b      	str	r3, [r7, #32]
          break;
 8009036:	e029      	b.n	800908c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	3304      	adds	r3, #4
 800903e:	623b      	str	r3, [r7, #32]
          break;
 8009040:	e024      	b.n	800908c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	3308      	adds	r3, #8
 8009048:	623b      	str	r3, [r7, #32]
          break;
 800904a:	e01f      	b.n	800908c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	330c      	adds	r3, #12
 8009052:	623b      	str	r3, [r7, #32]
          break;
 8009054:	e01a      	b.n	800908c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d102      	bne.n	8009064 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800905e:	2304      	movs	r3, #4
 8009060:	623b      	str	r3, [r7, #32]
          break;
 8009062:	e013      	b.n	800908c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d105      	bne.n	8009078 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800906c:	2308      	movs	r3, #8
 800906e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	69fa      	ldr	r2, [r7, #28]
 8009074:	611a      	str	r2, [r3, #16]
          break;
 8009076:	e009      	b.n	800908c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009078:	2308      	movs	r3, #8
 800907a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	615a      	str	r2, [r3, #20]
          break;
 8009082:	e003      	b.n	800908c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009084:	2300      	movs	r3, #0
 8009086:	623b      	str	r3, [r7, #32]
          break;
 8009088:	e000      	b.n	800908c <HAL_GPIO_Init+0x130>
          break;
 800908a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	2bff      	cmp	r3, #255	; 0xff
 8009090:	d801      	bhi.n	8009096 <HAL_GPIO_Init+0x13a>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	e001      	b.n	800909a <HAL_GPIO_Init+0x13e>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	3304      	adds	r3, #4
 800909a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	2bff      	cmp	r3, #255	; 0xff
 80090a0:	d802      	bhi.n	80090a8 <HAL_GPIO_Init+0x14c>
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	e002      	b.n	80090ae <HAL_GPIO_Init+0x152>
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	3b08      	subs	r3, #8
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	210f      	movs	r1, #15
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	fa01 f303 	lsl.w	r3, r1, r3
 80090bc:	43db      	mvns	r3, r3
 80090be:	401a      	ands	r2, r3
 80090c0:	6a39      	ldr	r1, [r7, #32]
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	fa01 f303 	lsl.w	r3, r1, r3
 80090c8:	431a      	orrs	r2, r3
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 80c1 	beq.w	800925e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80090dc:	4b49      	ldr	r3, [pc, #292]	; (8009204 <HAL_GPIO_Init+0x2a8>)
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	4a48      	ldr	r2, [pc, #288]	; (8009204 <HAL_GPIO_Init+0x2a8>)
 80090e2:	f043 0301 	orr.w	r3, r3, #1
 80090e6:	6193      	str	r3, [r2, #24]
 80090e8:	4b46      	ldr	r3, [pc, #280]	; (8009204 <HAL_GPIO_Init+0x2a8>)
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	60bb      	str	r3, [r7, #8]
 80090f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80090f4:	4a44      	ldr	r2, [pc, #272]	; (8009208 <HAL_GPIO_Init+0x2ac>)
 80090f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f8:	089b      	lsrs	r3, r3, #2
 80090fa:	3302      	adds	r3, #2
 80090fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009100:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009104:	f003 0303 	and.w	r3, r3, #3
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	220f      	movs	r2, #15
 800910c:	fa02 f303 	lsl.w	r3, r2, r3
 8009110:	43db      	mvns	r3, r3
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	4013      	ands	r3, r2
 8009116:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a3c      	ldr	r2, [pc, #240]	; (800920c <HAL_GPIO_Init+0x2b0>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d01f      	beq.n	8009160 <HAL_GPIO_Init+0x204>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a3b      	ldr	r2, [pc, #236]	; (8009210 <HAL_GPIO_Init+0x2b4>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d019      	beq.n	800915c <HAL_GPIO_Init+0x200>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a3a      	ldr	r2, [pc, #232]	; (8009214 <HAL_GPIO_Init+0x2b8>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d013      	beq.n	8009158 <HAL_GPIO_Init+0x1fc>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a39      	ldr	r2, [pc, #228]	; (8009218 <HAL_GPIO_Init+0x2bc>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d00d      	beq.n	8009154 <HAL_GPIO_Init+0x1f8>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a38      	ldr	r2, [pc, #224]	; (800921c <HAL_GPIO_Init+0x2c0>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d007      	beq.n	8009150 <HAL_GPIO_Init+0x1f4>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a37      	ldr	r2, [pc, #220]	; (8009220 <HAL_GPIO_Init+0x2c4>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d101      	bne.n	800914c <HAL_GPIO_Init+0x1f0>
 8009148:	2305      	movs	r3, #5
 800914a:	e00a      	b.n	8009162 <HAL_GPIO_Init+0x206>
 800914c:	2306      	movs	r3, #6
 800914e:	e008      	b.n	8009162 <HAL_GPIO_Init+0x206>
 8009150:	2304      	movs	r3, #4
 8009152:	e006      	b.n	8009162 <HAL_GPIO_Init+0x206>
 8009154:	2303      	movs	r3, #3
 8009156:	e004      	b.n	8009162 <HAL_GPIO_Init+0x206>
 8009158:	2302      	movs	r3, #2
 800915a:	e002      	b.n	8009162 <HAL_GPIO_Init+0x206>
 800915c:	2301      	movs	r3, #1
 800915e:	e000      	b.n	8009162 <HAL_GPIO_Init+0x206>
 8009160:	2300      	movs	r3, #0
 8009162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009164:	f002 0203 	and.w	r2, r2, #3
 8009168:	0092      	lsls	r2, r2, #2
 800916a:	4093      	lsls	r3, r2
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	4313      	orrs	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009172:	4925      	ldr	r1, [pc, #148]	; (8009208 <HAL_GPIO_Init+0x2ac>)
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	089b      	lsrs	r3, r3, #2
 8009178:	3302      	adds	r3, #2
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d006      	beq.n	800919a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800918c:	4b25      	ldr	r3, [pc, #148]	; (8009224 <HAL_GPIO_Init+0x2c8>)
 800918e:	689a      	ldr	r2, [r3, #8]
 8009190:	4924      	ldr	r1, [pc, #144]	; (8009224 <HAL_GPIO_Init+0x2c8>)
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	4313      	orrs	r3, r2
 8009196:	608b      	str	r3, [r1, #8]
 8009198:	e006      	b.n	80091a8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800919a:	4b22      	ldr	r3, [pc, #136]	; (8009224 <HAL_GPIO_Init+0x2c8>)
 800919c:	689a      	ldr	r2, [r3, #8]
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	43db      	mvns	r3, r3
 80091a2:	4920      	ldr	r1, [pc, #128]	; (8009224 <HAL_GPIO_Init+0x2c8>)
 80091a4:	4013      	ands	r3, r2
 80091a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d006      	beq.n	80091c2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80091b4:	4b1b      	ldr	r3, [pc, #108]	; (8009224 <HAL_GPIO_Init+0x2c8>)
 80091b6:	68da      	ldr	r2, [r3, #12]
 80091b8:	491a      	ldr	r1, [pc, #104]	; (8009224 <HAL_GPIO_Init+0x2c8>)
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	4313      	orrs	r3, r2
 80091be:	60cb      	str	r3, [r1, #12]
 80091c0:	e006      	b.n	80091d0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80091c2:	4b18      	ldr	r3, [pc, #96]	; (8009224 <HAL_GPIO_Init+0x2c8>)
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	43db      	mvns	r3, r3
 80091ca:	4916      	ldr	r1, [pc, #88]	; (8009224 <HAL_GPIO_Init+0x2c8>)
 80091cc:	4013      	ands	r3, r2
 80091ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d025      	beq.n	8009228 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80091dc:	4b11      	ldr	r3, [pc, #68]	; (8009224 <HAL_GPIO_Init+0x2c8>)
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	4910      	ldr	r1, [pc, #64]	; (8009224 <HAL_GPIO_Init+0x2c8>)
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	604b      	str	r3, [r1, #4]
 80091e8:	e025      	b.n	8009236 <HAL_GPIO_Init+0x2da>
 80091ea:	bf00      	nop
 80091ec:	10320000 	.word	0x10320000
 80091f0:	10310000 	.word	0x10310000
 80091f4:	10220000 	.word	0x10220000
 80091f8:	10210000 	.word	0x10210000
 80091fc:	10120000 	.word	0x10120000
 8009200:	10110000 	.word	0x10110000
 8009204:	40021000 	.word	0x40021000
 8009208:	40010000 	.word	0x40010000
 800920c:	40010800 	.word	0x40010800
 8009210:	40010c00 	.word	0x40010c00
 8009214:	40011000 	.word	0x40011000
 8009218:	40011400 	.word	0x40011400
 800921c:	40011800 	.word	0x40011800
 8009220:	40011c00 	.word	0x40011c00
 8009224:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009228:	4b15      	ldr	r3, [pc, #84]	; (8009280 <HAL_GPIO_Init+0x324>)
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	43db      	mvns	r3, r3
 8009230:	4913      	ldr	r1, [pc, #76]	; (8009280 <HAL_GPIO_Init+0x324>)
 8009232:	4013      	ands	r3, r2
 8009234:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800923e:	2b00      	cmp	r3, #0
 8009240:	d006      	beq.n	8009250 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009242:	4b0f      	ldr	r3, [pc, #60]	; (8009280 <HAL_GPIO_Init+0x324>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	490e      	ldr	r1, [pc, #56]	; (8009280 <HAL_GPIO_Init+0x324>)
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	4313      	orrs	r3, r2
 800924c:	600b      	str	r3, [r1, #0]
 800924e:	e006      	b.n	800925e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009250:	4b0b      	ldr	r3, [pc, #44]	; (8009280 <HAL_GPIO_Init+0x324>)
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	43db      	mvns	r3, r3
 8009258:	4909      	ldr	r1, [pc, #36]	; (8009280 <HAL_GPIO_Init+0x324>)
 800925a:	4013      	ands	r3, r2
 800925c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	3301      	adds	r3, #1
 8009262:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	fa22 f303 	lsr.w	r3, r2, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	f47f ae7e 	bne.w	8008f70 <HAL_GPIO_Init+0x14>
  }
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop
 8009278:	372c      	adds	r7, #44	; 0x2c
 800927a:	46bd      	mov	sp, r7
 800927c:	bc80      	pop	{r7}
 800927e:	4770      	bx	lr
 8009280:	40010400 	.word	0x40010400

08009284 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009284:	b480      	push	{r7}
 8009286:	b089      	sub	sp, #36	; 0x24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800928e:	2300      	movs	r3, #0
 8009290:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009292:	e0a6      	b.n	80093e2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009294:	2201      	movs	r2, #1
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	fa02 f303 	lsl.w	r3, r2, r3
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	4013      	ands	r3, r2
 80092a0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 8099 	beq.w	80093dc <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80092aa:	4a54      	ldr	r2, [pc, #336]	; (80093fc <HAL_GPIO_DeInit+0x178>)
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	089b      	lsrs	r3, r3, #2
 80092b0:	3302      	adds	r3, #2
 80092b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092b6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	f003 0303 	and.w	r3, r3, #3
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	220f      	movs	r2, #15
 80092c2:	fa02 f303 	lsl.w	r3, r2, r3
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	4013      	ands	r3, r2
 80092ca:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a4c      	ldr	r2, [pc, #304]	; (8009400 <HAL_GPIO_DeInit+0x17c>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d01f      	beq.n	8009314 <HAL_GPIO_DeInit+0x90>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a4b      	ldr	r2, [pc, #300]	; (8009404 <HAL_GPIO_DeInit+0x180>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d019      	beq.n	8009310 <HAL_GPIO_DeInit+0x8c>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a4a      	ldr	r2, [pc, #296]	; (8009408 <HAL_GPIO_DeInit+0x184>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d013      	beq.n	800930c <HAL_GPIO_DeInit+0x88>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a49      	ldr	r2, [pc, #292]	; (800940c <HAL_GPIO_DeInit+0x188>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d00d      	beq.n	8009308 <HAL_GPIO_DeInit+0x84>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a48      	ldr	r2, [pc, #288]	; (8009410 <HAL_GPIO_DeInit+0x18c>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d007      	beq.n	8009304 <HAL_GPIO_DeInit+0x80>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a47      	ldr	r2, [pc, #284]	; (8009414 <HAL_GPIO_DeInit+0x190>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d101      	bne.n	8009300 <HAL_GPIO_DeInit+0x7c>
 80092fc:	2305      	movs	r3, #5
 80092fe:	e00a      	b.n	8009316 <HAL_GPIO_DeInit+0x92>
 8009300:	2306      	movs	r3, #6
 8009302:	e008      	b.n	8009316 <HAL_GPIO_DeInit+0x92>
 8009304:	2304      	movs	r3, #4
 8009306:	e006      	b.n	8009316 <HAL_GPIO_DeInit+0x92>
 8009308:	2303      	movs	r3, #3
 800930a:	e004      	b.n	8009316 <HAL_GPIO_DeInit+0x92>
 800930c:	2302      	movs	r3, #2
 800930e:	e002      	b.n	8009316 <HAL_GPIO_DeInit+0x92>
 8009310:	2301      	movs	r3, #1
 8009312:	e000      	b.n	8009316 <HAL_GPIO_DeInit+0x92>
 8009314:	2300      	movs	r3, #0
 8009316:	69fa      	ldr	r2, [r7, #28]
 8009318:	f002 0203 	and.w	r2, r2, #3
 800931c:	0092      	lsls	r2, r2, #2
 800931e:	4093      	lsls	r3, r2
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	429a      	cmp	r2, r3
 8009324:	d132      	bne.n	800938c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009326:	4b3c      	ldr	r3, [pc, #240]	; (8009418 <HAL_GPIO_DeInit+0x194>)
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	43db      	mvns	r3, r3
 800932e:	493a      	ldr	r1, [pc, #232]	; (8009418 <HAL_GPIO_DeInit+0x194>)
 8009330:	4013      	ands	r3, r2
 8009332:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009334:	4b38      	ldr	r3, [pc, #224]	; (8009418 <HAL_GPIO_DeInit+0x194>)
 8009336:	685a      	ldr	r2, [r3, #4]
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	43db      	mvns	r3, r3
 800933c:	4936      	ldr	r1, [pc, #216]	; (8009418 <HAL_GPIO_DeInit+0x194>)
 800933e:	4013      	ands	r3, r2
 8009340:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009342:	4b35      	ldr	r3, [pc, #212]	; (8009418 <HAL_GPIO_DeInit+0x194>)
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	43db      	mvns	r3, r3
 800934a:	4933      	ldr	r1, [pc, #204]	; (8009418 <HAL_GPIO_DeInit+0x194>)
 800934c:	4013      	ands	r3, r2
 800934e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009350:	4b31      	ldr	r3, [pc, #196]	; (8009418 <HAL_GPIO_DeInit+0x194>)
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	43db      	mvns	r3, r3
 8009358:	492f      	ldr	r1, [pc, #188]	; (8009418 <HAL_GPIO_DeInit+0x194>)
 800935a:	4013      	ands	r3, r2
 800935c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	f003 0303 	and.w	r3, r3, #3
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	220f      	movs	r2, #15
 8009368:	fa02 f303 	lsl.w	r3, r2, r3
 800936c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800936e:	4a23      	ldr	r2, [pc, #140]	; (80093fc <HAL_GPIO_DeInit+0x178>)
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	089b      	lsrs	r3, r3, #2
 8009374:	3302      	adds	r3, #2
 8009376:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	43da      	mvns	r2, r3
 800937e:	481f      	ldr	r0, [pc, #124]	; (80093fc <HAL_GPIO_DeInit+0x178>)
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	089b      	lsrs	r3, r3, #2
 8009384:	400a      	ands	r2, r1
 8009386:	3302      	adds	r3, #2
 8009388:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	2bff      	cmp	r3, #255	; 0xff
 8009390:	d801      	bhi.n	8009396 <HAL_GPIO_DeInit+0x112>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	e001      	b.n	800939a <HAL_GPIO_DeInit+0x116>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3304      	adds	r3, #4
 800939a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	2bff      	cmp	r3, #255	; 0xff
 80093a0:	d802      	bhi.n	80093a8 <HAL_GPIO_DeInit+0x124>
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	e002      	b.n	80093ae <HAL_GPIO_DeInit+0x12a>
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	3b08      	subs	r3, #8
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	210f      	movs	r1, #15
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	fa01 f303 	lsl.w	r3, r1, r3
 80093bc:	43db      	mvns	r3, r3
 80093be:	401a      	ands	r2, r3
 80093c0:	2104      	movs	r1, #4
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	fa01 f303 	lsl.w	r3, r1, r3
 80093c8:	431a      	orrs	r2, r3
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68da      	ldr	r2, [r3, #12]
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	43db      	mvns	r3, r3
 80093d6:	401a      	ands	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	60da      	str	r2, [r3, #12]
    }

    position++;
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	3301      	adds	r3, #1
 80093e0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	fa22 f303 	lsr.w	r3, r2, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f47f af52 	bne.w	8009294 <HAL_GPIO_DeInit+0x10>
  }
}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	3724      	adds	r7, #36	; 0x24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bc80      	pop	{r7}
 80093fa:	4770      	bx	lr
 80093fc:	40010000 	.word	0x40010000
 8009400:	40010800 	.word	0x40010800
 8009404:	40010c00 	.word	0x40010c00
 8009408:	40011000 	.word	0x40011000
 800940c:	40011400 	.word	0x40011400
 8009410:	40011800 	.word	0x40011800
 8009414:	40011c00 	.word	0x40011c00
 8009418:	40010400 	.word	0x40010400

0800941c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	460b      	mov	r3, r1
 8009426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	689a      	ldr	r2, [r3, #8]
 800942c:	887b      	ldrh	r3, [r7, #2]
 800942e:	4013      	ands	r3, r2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009434:	2301      	movs	r3, #1
 8009436:	73fb      	strb	r3, [r7, #15]
 8009438:	e001      	b.n	800943e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800943a:	2300      	movs	r3, #0
 800943c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800943e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3714      	adds	r7, #20
 8009444:	46bd      	mov	sp, r7
 8009446:	bc80      	pop	{r7}
 8009448:	4770      	bx	lr

0800944a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800944a:	b480      	push	{r7}
 800944c:	b083      	sub	sp, #12
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	460b      	mov	r3, r1
 8009454:	807b      	strh	r3, [r7, #2]
 8009456:	4613      	mov	r3, r2
 8009458:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800945a:	787b      	ldrb	r3, [r7, #1]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d003      	beq.n	8009468 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009460:	887a      	ldrh	r2, [r7, #2]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009466:	e003      	b.n	8009470 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009468:	887b      	ldrh	r3, [r7, #2]
 800946a:	041a      	lsls	r2, r3, #16
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	611a      	str	r2, [r3, #16]
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	bc80      	pop	{r7}
 8009478:	4770      	bx	lr

0800947a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800947a:	b480      	push	{r7}
 800947c:	b085      	sub	sp, #20
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	460b      	mov	r3, r1
 8009484:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800948c:	887a      	ldrh	r2, [r7, #2]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	4013      	ands	r3, r2
 8009492:	041a      	lsls	r2, r3, #16
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	43d9      	mvns	r1, r3
 8009498:	887b      	ldrh	r3, [r7, #2]
 800949a:	400b      	ands	r3, r1
 800949c:	431a      	orrs	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	611a      	str	r2, [r3, #16]
}
 80094a2:	bf00      	nop
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bc80      	pop	{r7}
 80094aa:	4770      	bx	lr

080094ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d101      	bne.n	80094be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e12b      	b.n	8009716 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d106      	bne.n	80094d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7fe fff8 	bl	80084c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2224      	movs	r2, #36	; 0x24
 80094dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f022 0201 	bic.w	r2, r2, #1
 80094ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800950e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009510:	f001 fdb8 	bl	800b084 <HAL_RCC_GetPCLK1Freq>
 8009514:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	4a81      	ldr	r2, [pc, #516]	; (8009720 <HAL_I2C_Init+0x274>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d807      	bhi.n	8009530 <HAL_I2C_Init+0x84>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4a80      	ldr	r2, [pc, #512]	; (8009724 <HAL_I2C_Init+0x278>)
 8009524:	4293      	cmp	r3, r2
 8009526:	bf94      	ite	ls
 8009528:	2301      	movls	r3, #1
 800952a:	2300      	movhi	r3, #0
 800952c:	b2db      	uxtb	r3, r3
 800952e:	e006      	b.n	800953e <HAL_I2C_Init+0x92>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	4a7d      	ldr	r2, [pc, #500]	; (8009728 <HAL_I2C_Init+0x27c>)
 8009534:	4293      	cmp	r3, r2
 8009536:	bf94      	ite	ls
 8009538:	2301      	movls	r3, #1
 800953a:	2300      	movhi	r3, #0
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e0e7      	b.n	8009716 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	4a78      	ldr	r2, [pc, #480]	; (800972c <HAL_I2C_Init+0x280>)
 800954a:	fba2 2303 	umull	r2, r3, r2, r3
 800954e:	0c9b      	lsrs	r3, r3, #18
 8009550:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	430a      	orrs	r2, r1
 8009564:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6a1b      	ldr	r3, [r3, #32]
 800956c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	4a6a      	ldr	r2, [pc, #424]	; (8009720 <HAL_I2C_Init+0x274>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d802      	bhi.n	8009580 <HAL_I2C_Init+0xd4>
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	3301      	adds	r3, #1
 800957e:	e009      	b.n	8009594 <HAL_I2C_Init+0xe8>
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009586:	fb02 f303 	mul.w	r3, r2, r3
 800958a:	4a69      	ldr	r2, [pc, #420]	; (8009730 <HAL_I2C_Init+0x284>)
 800958c:	fba2 2303 	umull	r2, r3, r2, r3
 8009590:	099b      	lsrs	r3, r3, #6
 8009592:	3301      	adds	r3, #1
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	430b      	orrs	r3, r1
 800959a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80095a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	495c      	ldr	r1, [pc, #368]	; (8009720 <HAL_I2C_Init+0x274>)
 80095b0:	428b      	cmp	r3, r1
 80095b2:	d819      	bhi.n	80095e8 <HAL_I2C_Init+0x13c>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	1e59      	subs	r1, r3, #1
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	005b      	lsls	r3, r3, #1
 80095be:	fbb1 f3f3 	udiv	r3, r1, r3
 80095c2:	1c59      	adds	r1, r3, #1
 80095c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80095c8:	400b      	ands	r3, r1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00a      	beq.n	80095e4 <HAL_I2C_Init+0x138>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	1e59      	subs	r1, r3, #1
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	005b      	lsls	r3, r3, #1
 80095d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80095dc:	3301      	adds	r3, #1
 80095de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095e2:	e051      	b.n	8009688 <HAL_I2C_Init+0x1dc>
 80095e4:	2304      	movs	r3, #4
 80095e6:	e04f      	b.n	8009688 <HAL_I2C_Init+0x1dc>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d111      	bne.n	8009614 <HAL_I2C_Init+0x168>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	1e58      	subs	r0, r3, #1
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6859      	ldr	r1, [r3, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	005b      	lsls	r3, r3, #1
 80095fc:	440b      	add	r3, r1
 80095fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009602:	3301      	adds	r3, #1
 8009604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009608:	2b00      	cmp	r3, #0
 800960a:	bf0c      	ite	eq
 800960c:	2301      	moveq	r3, #1
 800960e:	2300      	movne	r3, #0
 8009610:	b2db      	uxtb	r3, r3
 8009612:	e012      	b.n	800963a <HAL_I2C_Init+0x18e>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	1e58      	subs	r0, r3, #1
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6859      	ldr	r1, [r3, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	440b      	add	r3, r1
 8009622:	0099      	lsls	r1, r3, #2
 8009624:	440b      	add	r3, r1
 8009626:	fbb0 f3f3 	udiv	r3, r0, r3
 800962a:	3301      	adds	r3, #1
 800962c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009630:	2b00      	cmp	r3, #0
 8009632:	bf0c      	ite	eq
 8009634:	2301      	moveq	r3, #1
 8009636:	2300      	movne	r3, #0
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <HAL_I2C_Init+0x196>
 800963e:	2301      	movs	r3, #1
 8009640:	e022      	b.n	8009688 <HAL_I2C_Init+0x1dc>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10e      	bne.n	8009668 <HAL_I2C_Init+0x1bc>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	1e58      	subs	r0, r3, #1
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6859      	ldr	r1, [r3, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	440b      	add	r3, r1
 8009658:	fbb0 f3f3 	udiv	r3, r0, r3
 800965c:	3301      	adds	r3, #1
 800965e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009666:	e00f      	b.n	8009688 <HAL_I2C_Init+0x1dc>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	1e58      	subs	r0, r3, #1
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6859      	ldr	r1, [r3, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	440b      	add	r3, r1
 8009676:	0099      	lsls	r1, r3, #2
 8009678:	440b      	add	r3, r1
 800967a:	fbb0 f3f3 	udiv	r3, r0, r3
 800967e:	3301      	adds	r3, #1
 8009680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009688:	6879      	ldr	r1, [r7, #4]
 800968a:	6809      	ldr	r1, [r1, #0]
 800968c:	4313      	orrs	r3, r2
 800968e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	69da      	ldr	r2, [r3, #28]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	431a      	orrs	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80096b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	6911      	ldr	r1, [r2, #16]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	68d2      	ldr	r2, [r2, #12]
 80096c2:	4311      	orrs	r1, r2
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	6812      	ldr	r2, [r2, #0]
 80096c8:	430b      	orrs	r3, r1
 80096ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	695a      	ldr	r2, [r3, #20]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	431a      	orrs	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	430a      	orrs	r2, r1
 80096e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f042 0201 	orr.w	r2, r2, #1
 80096f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2220      	movs	r2, #32
 8009702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	000186a0 	.word	0x000186a0
 8009724:	001e847f 	.word	0x001e847f
 8009728:	003d08ff 	.word	0x003d08ff
 800972c:	431bde83 	.word	0x431bde83
 8009730:	10624dd3 	.word	0x10624dd3

08009734 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e021      	b.n	800978a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2224      	movs	r2, #36	; 0x24
 800974a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f022 0201 	bic.w	r2, r2, #1
 800975c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7fe fef0 	bl	8008544 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
	...

08009794 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b088      	sub	sp, #32
 8009798:	af02      	add	r7, sp, #8
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	607a      	str	r2, [r7, #4]
 800979e:	461a      	mov	r2, r3
 80097a0:	460b      	mov	r3, r1
 80097a2:	817b      	strh	r3, [r7, #10]
 80097a4:	4613      	mov	r3, r2
 80097a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80097a8:	f7ff f85e 	bl	8008868 <HAL_GetTick>
 80097ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b20      	cmp	r3, #32
 80097b8:	f040 80e0 	bne.w	800997c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	2319      	movs	r3, #25
 80097c2:	2201      	movs	r2, #1
 80097c4:	4970      	ldr	r1, [pc, #448]	; (8009988 <HAL_I2C_Master_Transmit+0x1f4>)
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f000 fe5c 	bl	800a484 <I2C_WaitOnFlagUntilTimeout>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80097d2:	2302      	movs	r3, #2
 80097d4:	e0d3      	b.n	800997e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d101      	bne.n	80097e4 <HAL_I2C_Master_Transmit+0x50>
 80097e0:	2302      	movs	r3, #2
 80097e2:	e0cc      	b.n	800997e <HAL_I2C_Master_Transmit+0x1ea>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d007      	beq.n	800980a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f042 0201 	orr.w	r2, r2, #1
 8009808:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009818:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2221      	movs	r2, #33	; 0x21
 800981e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2210      	movs	r2, #16
 8009826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	893a      	ldrh	r2, [r7, #8]
 800983a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009840:	b29a      	uxth	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	4a50      	ldr	r2, [pc, #320]	; (800998c <HAL_I2C_Master_Transmit+0x1f8>)
 800984a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800984c:	8979      	ldrh	r1, [r7, #10]
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	6a3a      	ldr	r2, [r7, #32]
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 fc16 	bl	800a084 <I2C_MasterRequestWrite>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e08d      	b.n	800997e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009862:	2300      	movs	r3, #0
 8009864:	613b      	str	r3, [r7, #16]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	613b      	str	r3, [r7, #16]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	613b      	str	r3, [r7, #16]
 8009876:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009878:	e066      	b.n	8009948 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	6a39      	ldr	r1, [r7, #32]
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 ff1a 	bl	800a6b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00d      	beq.n	80098a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988e:	2b04      	cmp	r3, #4
 8009890:	d107      	bne.n	80098a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e06b      	b.n	800997e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098aa:	781a      	ldrb	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b6:	1c5a      	adds	r2, r3, #1
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	3b01      	subs	r3, #1
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ce:	3b01      	subs	r3, #1
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	f003 0304 	and.w	r3, r3, #4
 80098e0:	2b04      	cmp	r3, #4
 80098e2:	d11b      	bne.n	800991c <HAL_I2C_Master_Transmit+0x188>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d017      	beq.n	800991c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f0:	781a      	ldrb	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009906:	b29b      	uxth	r3, r3
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009914:	3b01      	subs	r3, #1
 8009916:	b29a      	uxth	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	6a39      	ldr	r1, [r7, #32]
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 ff11 	bl	800a748 <I2C_WaitOnBTFFlagUntilTimeout>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00d      	beq.n	8009948 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009930:	2b04      	cmp	r3, #4
 8009932:	d107      	bne.n	8009944 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009942:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e01a      	b.n	800997e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800994c:	2b00      	cmp	r3, #0
 800994e:	d194      	bne.n	800987a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800995e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2220      	movs	r2, #32
 8009964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	e000      	b.n	800997e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800997c:	2302      	movs	r3, #2
  }
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	00100002 	.word	0x00100002
 800998c:	ffff0000 	.word	0xffff0000

08009990 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af02      	add	r7, sp, #8
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	4608      	mov	r0, r1
 800999a:	4611      	mov	r1, r2
 800999c:	461a      	mov	r2, r3
 800999e:	4603      	mov	r3, r0
 80099a0:	817b      	strh	r3, [r7, #10]
 80099a2:	460b      	mov	r3, r1
 80099a4:	813b      	strh	r3, [r7, #8]
 80099a6:	4613      	mov	r3, r2
 80099a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80099aa:	f7fe ff5d 	bl	8008868 <HAL_GetTick>
 80099ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	f040 80d9 	bne.w	8009b70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	2319      	movs	r3, #25
 80099c4:	2201      	movs	r2, #1
 80099c6:	496d      	ldr	r1, [pc, #436]	; (8009b7c <HAL_I2C_Mem_Write+0x1ec>)
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 fd5b 	bl	800a484 <I2C_WaitOnFlagUntilTimeout>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80099d4:	2302      	movs	r3, #2
 80099d6:	e0cc      	b.n	8009b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d101      	bne.n	80099e6 <HAL_I2C_Mem_Write+0x56>
 80099e2:	2302      	movs	r3, #2
 80099e4:	e0c5      	b.n	8009b72 <HAL_I2C_Mem_Write+0x1e2>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d007      	beq.n	8009a0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f042 0201 	orr.w	r2, r2, #1
 8009a0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2221      	movs	r2, #33	; 0x21
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2240      	movs	r2, #64	; 0x40
 8009a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6a3a      	ldr	r2, [r7, #32]
 8009a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	4a4d      	ldr	r2, [pc, #308]	; (8009b80 <HAL_I2C_Mem_Write+0x1f0>)
 8009a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a4e:	88f8      	ldrh	r0, [r7, #6]
 8009a50:	893a      	ldrh	r2, [r7, #8]
 8009a52:	8979      	ldrh	r1, [r7, #10]
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	9301      	str	r3, [sp, #4]
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f000 fb92 	bl	800a188 <I2C_RequestMemoryWrite>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d052      	beq.n	8009b10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e081      	b.n	8009b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f000 fe20 	bl	800a6b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00d      	beq.n	8009a9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a82:	2b04      	cmp	r3, #4
 8009a84:	d107      	bne.n	8009a96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e06b      	b.n	8009b72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9e:	781a      	ldrb	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	f003 0304 	and.w	r3, r3, #4
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	d11b      	bne.n	8009b10 <HAL_I2C_Mem_Write+0x180>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d017      	beq.n	8009b10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	781a      	ldrb	r2, [r3, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009afa:	3b01      	subs	r3, #1
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1aa      	bne.n	8009a6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f000 fe13 	bl	800a748 <I2C_WaitOnBTFFlagUntilTimeout>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00d      	beq.n	8009b44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2c:	2b04      	cmp	r3, #4
 8009b2e:	d107      	bne.n	8009b40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	e016      	b.n	8009b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e000      	b.n	8009b72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009b70:	2302      	movs	r3, #2
  }
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3718      	adds	r7, #24
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	00100002 	.word	0x00100002
 8009b80:	ffff0000 	.word	0xffff0000

08009b84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08c      	sub	sp, #48	; 0x30
 8009b88:	af02      	add	r7, sp, #8
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	4608      	mov	r0, r1
 8009b8e:	4611      	mov	r1, r2
 8009b90:	461a      	mov	r2, r3
 8009b92:	4603      	mov	r3, r0
 8009b94:	817b      	strh	r3, [r7, #10]
 8009b96:	460b      	mov	r3, r1
 8009b98:	813b      	strh	r3, [r7, #8]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ba2:	f7fe fe61 	bl	8008868 <HAL_GetTick>
 8009ba6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b20      	cmp	r3, #32
 8009bb2:	f040 8244 	bne.w	800a03e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	2319      	movs	r3, #25
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	4982      	ldr	r1, [pc, #520]	; (8009dc8 <HAL_I2C_Mem_Read+0x244>)
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 fc5f 	bl	800a484 <I2C_WaitOnFlagUntilTimeout>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009bcc:	2302      	movs	r3, #2
 8009bce:	e237      	b.n	800a040 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d101      	bne.n	8009bde <HAL_I2C_Mem_Read+0x5a>
 8009bda:	2302      	movs	r3, #2
 8009bdc:	e230      	b.n	800a040 <HAL_I2C_Mem_Read+0x4bc>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 0301 	and.w	r3, r3, #1
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d007      	beq.n	8009c04 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f042 0201 	orr.w	r2, r2, #1
 8009c02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2222      	movs	r2, #34	; 0x22
 8009c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2240      	movs	r2, #64	; 0x40
 8009c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009c34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4a62      	ldr	r2, [pc, #392]	; (8009dcc <HAL_I2C_Mem_Read+0x248>)
 8009c44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009c46:	88f8      	ldrh	r0, [r7, #6]
 8009c48:	893a      	ldrh	r2, [r7, #8]
 8009c4a:	8979      	ldrh	r1, [r7, #10]
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	9301      	str	r3, [sp, #4]
 8009c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	4603      	mov	r3, r0
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f000 fb2c 	bl	800a2b4 <I2C_RequestMemoryRead>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e1ec      	b.n	800a040 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d113      	bne.n	8009c96 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c6e:	2300      	movs	r3, #0
 8009c70:	61fb      	str	r3, [r7, #28]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	695b      	ldr	r3, [r3, #20]
 8009c78:	61fb      	str	r3, [r7, #28]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	61fb      	str	r3, [r7, #28]
 8009c82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	e1c0      	b.n	800a018 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d11e      	bne.n	8009cdc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cae:	b672      	cpsid	i
}
 8009cb0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	61bb      	str	r3, [r7, #24]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	699b      	ldr	r3, [r3, #24]
 8009cc4:	61bb      	str	r3, [r7, #24]
 8009cc6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009cd8:	b662      	cpsie	i
}
 8009cda:	e035      	b.n	8009d48 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d11e      	bne.n	8009d22 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cf2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cf4:	b672      	cpsid	i
}
 8009cf6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	617b      	str	r3, [r7, #20]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	617b      	str	r3, [r7, #20]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009d1e:	b662      	cpsie	i
}
 8009d20:	e012      	b.n	8009d48 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d30:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d32:	2300      	movs	r3, #0
 8009d34:	613b      	str	r3, [r7, #16]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	695b      	ldr	r3, [r3, #20]
 8009d3c:	613b      	str	r3, [r7, #16]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	613b      	str	r3, [r7, #16]
 8009d46:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009d48:	e166      	b.n	800a018 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d4e:	2b03      	cmp	r3, #3
 8009d50:	f200 811f 	bhi.w	8009f92 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d123      	bne.n	8009da4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f000 fd39 	bl	800a7d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e167      	b.n	800a040 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	691a      	ldr	r2, [r3, #16]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7a:	b2d2      	uxtb	r2, r2
 8009d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d82:	1c5a      	adds	r2, r3, #1
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009da2:	e139      	b.n	800a018 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d152      	bne.n	8009e52 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db2:	2200      	movs	r2, #0
 8009db4:	4906      	ldr	r1, [pc, #24]	; (8009dd0 <HAL_I2C_Mem_Read+0x24c>)
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 fb64 	bl	800a484 <I2C_WaitOnFlagUntilTimeout>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d008      	beq.n	8009dd4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e13c      	b.n	800a040 <HAL_I2C_Mem_Read+0x4bc>
 8009dc6:	bf00      	nop
 8009dc8:	00100002 	.word	0x00100002
 8009dcc:	ffff0000 	.word	0xffff0000
 8009dd0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009dd4:	b672      	cpsid	i
}
 8009dd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009de6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	691a      	ldr	r2, [r3, #16]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	b2d2      	uxtb	r2, r2
 8009df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e04:	3b01      	subs	r3, #1
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	3b01      	subs	r3, #1
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009e1a:	b662      	cpsie	i
}
 8009e1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	691a      	ldr	r2, [r3, #16]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e28:	b2d2      	uxtb	r2, r2
 8009e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e30:	1c5a      	adds	r2, r3, #1
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e50:	e0e2      	b.n	800a018 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e58:	2200      	movs	r2, #0
 8009e5a:	497b      	ldr	r1, [pc, #492]	; (800a048 <HAL_I2C_Mem_Read+0x4c4>)
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f000 fb11 	bl	800a484 <I2C_WaitOnFlagUntilTimeout>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e0e9      	b.n	800a040 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e7c:	b672      	cpsid	i
}
 8009e7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	691a      	ldr	r2, [r3, #16]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	b2d2      	uxtb	r2, r2
 8009e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009eb2:	4b66      	ldr	r3, [pc, #408]	; (800a04c <HAL_I2C_Mem_Read+0x4c8>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	08db      	lsrs	r3, r3, #3
 8009eb8:	4a65      	ldr	r2, [pc, #404]	; (800a050 <HAL_I2C_Mem_Read+0x4cc>)
 8009eba:	fba2 2303 	umull	r2, r3, r2, r3
 8009ebe:	0a1a      	lsrs	r2, r3, #8
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	00da      	lsls	r2, r3, #3
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009ecc:	6a3b      	ldr	r3, [r7, #32]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009ed2:	6a3b      	ldr	r3, [r7, #32]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d118      	bne.n	8009f0a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2220      	movs	r2, #32
 8009ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef2:	f043 0220 	orr.w	r2, r3, #32
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009efa:	b662      	cpsie	i
}
 8009efc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e09a      	b.n	800a040 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	f003 0304 	and.w	r3, r3, #4
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	d1d9      	bne.n	8009ecc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	691a      	ldr	r2, [r3, #16]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f32:	b2d2      	uxtb	r2, r2
 8009f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3a:	1c5a      	adds	r2, r3, #1
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f44:	3b01      	subs	r3, #1
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	3b01      	subs	r3, #1
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009f5a:	b662      	cpsie	i
}
 8009f5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	691a      	ldr	r2, [r3, #16]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	b2d2      	uxtb	r2, r2
 8009f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f90:	e042      	b.n	800a018 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f000 fc1e 	bl	800a7d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d001      	beq.n	8009fa6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e04c      	b.n	800a040 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	691a      	ldr	r2, [r3, #16]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb0:	b2d2      	uxtb	r2, r2
 8009fb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb8:	1c5a      	adds	r2, r3, #1
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	f003 0304 	and.w	r3, r3, #4
 8009fe2:	2b04      	cmp	r3, #4
 8009fe4:	d118      	bne.n	800a018 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	691a      	ldr	r2, [r3, #16]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff0:	b2d2      	uxtb	r2, r2
 8009ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a002:	3b01      	subs	r3, #1
 800a004:	b29a      	uxth	r2, r3
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a00e:	b29b      	uxth	r3, r3
 800a010:	3b01      	subs	r3, #1
 800a012:	b29a      	uxth	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f47f ae94 	bne.w	8009d4a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2220      	movs	r2, #32
 800a026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	e000      	b.n	800a040 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a03e:	2302      	movs	r3, #2
  }
}
 800a040:	4618      	mov	r0, r3
 800a042:	3728      	adds	r7, #40	; 0x28
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	00010004 	.word	0x00010004
 800a04c:	200000a0 	.word	0x200000a0
 800a050:	14f8b589 	.word	0x14f8b589

0800a054 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a062:	b2db      	uxtb	r3, r3
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	bc80      	pop	{r7}
 800a06c:	4770      	bx	lr

0800a06e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a06e:	b480      	push	{r7}
 800a070:	b083      	sub	sp, #12
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	bc80      	pop	{r7}
 800a082:	4770      	bx	lr

0800a084 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af02      	add	r7, sp, #8
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	607a      	str	r2, [r7, #4]
 800a08e:	603b      	str	r3, [r7, #0]
 800a090:	460b      	mov	r3, r1
 800a092:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a098:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2b08      	cmp	r3, #8
 800a09e:	d006      	beq.n	800a0ae <I2C_MasterRequestWrite+0x2a>
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d003      	beq.n	800a0ae <I2C_MasterRequestWrite+0x2a>
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a0ac:	d108      	bne.n	800a0c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	e00b      	b.n	800a0d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c4:	2b12      	cmp	r3, #18
 800a0c6:	d107      	bne.n	800a0d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f000 f9cd 	bl	800a484 <I2C_WaitOnFlagUntilTimeout>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00d      	beq.n	800a10c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0fe:	d103      	bne.n	800a108 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e035      	b.n	800a178 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a114:	d108      	bne.n	800a128 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a116:	897b      	ldrh	r3, [r7, #10]
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	461a      	mov	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a124:	611a      	str	r2, [r3, #16]
 800a126:	e01b      	b.n	800a160 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a128:	897b      	ldrh	r3, [r7, #10]
 800a12a:	11db      	asrs	r3, r3, #7
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	f003 0306 	and.w	r3, r3, #6
 800a132:	b2db      	uxtb	r3, r3
 800a134:	f063 030f 	orn	r3, r3, #15
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	490e      	ldr	r1, [pc, #56]	; (800a180 <I2C_MasterRequestWrite+0xfc>)
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f000 fa16 	bl	800a578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e010      	b.n	800a178 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a156:	897b      	ldrh	r3, [r7, #10]
 800a158:	b2da      	uxtb	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	4907      	ldr	r1, [pc, #28]	; (800a184 <I2C_MasterRequestWrite+0x100>)
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 fa06 	bl	800a578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e000      	b.n	800a178 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	00010008 	.word	0x00010008
 800a184:	00010002 	.word	0x00010002

0800a188 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af02      	add	r7, sp, #8
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	4608      	mov	r0, r1
 800a192:	4611      	mov	r1, r2
 800a194:	461a      	mov	r2, r3
 800a196:	4603      	mov	r3, r0
 800a198:	817b      	strh	r3, [r7, #10]
 800a19a:	460b      	mov	r3, r1
 800a19c:	813b      	strh	r3, [r7, #8]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f000 f960 	bl	800a484 <I2C_WaitOnFlagUntilTimeout>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00d      	beq.n	800a1e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1d8:	d103      	bne.n	800a1e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	e05f      	b.n	800a2a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1e6:	897b      	ldrh	r3, [r7, #10]
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	6a3a      	ldr	r2, [r7, #32]
 800a1fa:	492d      	ldr	r1, [pc, #180]	; (800a2b0 <I2C_RequestMemoryWrite+0x128>)
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f9bb 	bl	800a578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	e04c      	b.n	800a2a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a20c:	2300      	movs	r3, #0
 800a20e:	617b      	str	r3, [r7, #20]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	617b      	str	r3, [r7, #20]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	617b      	str	r3, [r7, #20]
 800a220:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a224:	6a39      	ldr	r1, [r7, #32]
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f000 fa46 	bl	800a6b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00d      	beq.n	800a24e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a236:	2b04      	cmp	r3, #4
 800a238:	d107      	bne.n	800a24a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a248:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e02b      	b.n	800a2a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a24e:	88fb      	ldrh	r3, [r7, #6]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d105      	bne.n	800a260 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a254:	893b      	ldrh	r3, [r7, #8]
 800a256:	b2da      	uxtb	r2, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	611a      	str	r2, [r3, #16]
 800a25e:	e021      	b.n	800a2a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a260:	893b      	ldrh	r3, [r7, #8]
 800a262:	0a1b      	lsrs	r3, r3, #8
 800a264:	b29b      	uxth	r3, r3
 800a266:	b2da      	uxtb	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a26e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a270:	6a39      	ldr	r1, [r7, #32]
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 fa20 	bl	800a6b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00d      	beq.n	800a29a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a282:	2b04      	cmp	r3, #4
 800a284:	d107      	bne.n	800a296 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a294:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e005      	b.n	800a2a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a29a:	893b      	ldrh	r3, [r7, #8]
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	00010002 	.word	0x00010002

0800a2b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b088      	sub	sp, #32
 800a2b8:	af02      	add	r7, sp, #8
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	4608      	mov	r0, r1
 800a2be:	4611      	mov	r1, r2
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	817b      	strh	r3, [r7, #10]
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	813b      	strh	r3, [r7, #8]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a2dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f000 f8c2 	bl	800a484 <I2C_WaitOnFlagUntilTimeout>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00d      	beq.n	800a322 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a314:	d103      	bne.n	800a31e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a31c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e0aa      	b.n	800a478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a322:	897b      	ldrh	r3, [r7, #10]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	461a      	mov	r2, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a330:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	6a3a      	ldr	r2, [r7, #32]
 800a336:	4952      	ldr	r1, [pc, #328]	; (800a480 <I2C_RequestMemoryRead+0x1cc>)
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f000 f91d 	bl	800a578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	e097      	b.n	800a478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a348:	2300      	movs	r3, #0
 800a34a:	617b      	str	r3, [r7, #20]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	695b      	ldr	r3, [r3, #20]
 800a352:	617b      	str	r3, [r7, #20]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	617b      	str	r3, [r7, #20]
 800a35c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a35e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a360:	6a39      	ldr	r1, [r7, #32]
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f000 f9a8 	bl	800a6b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00d      	beq.n	800a38a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a372:	2b04      	cmp	r3, #4
 800a374:	d107      	bne.n	800a386 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a384:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e076      	b.n	800a478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a38a:	88fb      	ldrh	r3, [r7, #6]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d105      	bne.n	800a39c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a390:	893b      	ldrh	r3, [r7, #8]
 800a392:	b2da      	uxtb	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	611a      	str	r2, [r3, #16]
 800a39a:	e021      	b.n	800a3e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a39c:	893b      	ldrh	r3, [r7, #8]
 800a39e:	0a1b      	lsrs	r3, r3, #8
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ac:	6a39      	ldr	r1, [r7, #32]
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 f982 	bl	800a6b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00d      	beq.n	800a3d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3be:	2b04      	cmp	r3, #4
 800a3c0:	d107      	bne.n	800a3d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e050      	b.n	800a478 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a3d6:	893b      	ldrh	r3, [r7, #8]
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e2:	6a39      	ldr	r1, [r7, #32]
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f000 f967 	bl	800a6b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00d      	beq.n	800a40c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f4:	2b04      	cmp	r3, #4
 800a3f6:	d107      	bne.n	800a408 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a406:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e035      	b.n	800a478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a41a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	2200      	movs	r2, #0
 800a424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f000 f82b 	bl	800a484 <I2C_WaitOnFlagUntilTimeout>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00d      	beq.n	800a450 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a43e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a442:	d103      	bne.n	800a44c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a44a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e013      	b.n	800a478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a450:	897b      	ldrh	r3, [r7, #10]
 800a452:	b2db      	uxtb	r3, r3
 800a454:	f043 0301 	orr.w	r3, r3, #1
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	6a3a      	ldr	r2, [r7, #32]
 800a464:	4906      	ldr	r1, [pc, #24]	; (800a480 <I2C_RequestMemoryRead+0x1cc>)
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f000 f886 	bl	800a578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e000      	b.n	800a478 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	00010002 	.word	0x00010002

0800a484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	603b      	str	r3, [r7, #0]
 800a490:	4613      	mov	r3, r2
 800a492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a494:	e048      	b.n	800a528 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a49c:	d044      	beq.n	800a528 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a49e:	f7fe f9e3 	bl	8008868 <HAL_GetTick>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d302      	bcc.n	800a4b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d139      	bne.n	800a528 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	0c1b      	lsrs	r3, r3, #16
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d10d      	bne.n	800a4da <I2C_WaitOnFlagUntilTimeout+0x56>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	695b      	ldr	r3, [r3, #20]
 800a4c4:	43da      	mvns	r2, r3
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	bf0c      	ite	eq
 800a4d0:	2301      	moveq	r3, #1
 800a4d2:	2300      	movne	r3, #0
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	e00c      	b.n	800a4f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	43da      	mvns	r2, r3
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	bf0c      	ite	eq
 800a4ec:	2301      	moveq	r3, #1
 800a4ee:	2300      	movne	r3, #0
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	79fb      	ldrb	r3, [r7, #7]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d116      	bne.n	800a528 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2220      	movs	r2, #32
 800a504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a514:	f043 0220 	orr.w	r2, r3, #32
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e023      	b.n	800a570 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	0c1b      	lsrs	r3, r3, #16
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d10d      	bne.n	800a54e <I2C_WaitOnFlagUntilTimeout+0xca>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	43da      	mvns	r2, r3
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	4013      	ands	r3, r2
 800a53e:	b29b      	uxth	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	bf0c      	ite	eq
 800a544:	2301      	moveq	r3, #1
 800a546:	2300      	movne	r3, #0
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	461a      	mov	r2, r3
 800a54c:	e00c      	b.n	800a568 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	43da      	mvns	r2, r3
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	4013      	ands	r3, r2
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bf0c      	ite	eq
 800a560:	2301      	moveq	r3, #1
 800a562:	2300      	movne	r3, #0
 800a564:	b2db      	uxtb	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	79fb      	ldrb	r3, [r7, #7]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d093      	beq.n	800a496 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
 800a584:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a586:	e071      	b.n	800a66c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	695b      	ldr	r3, [r3, #20]
 800a58e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a596:	d123      	bne.n	800a5e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a5b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2220      	movs	r2, #32
 800a5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5cc:	f043 0204 	orr.w	r2, r3, #4
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e067      	b.n	800a6b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5e6:	d041      	beq.n	800a66c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5e8:	f7fe f93e 	bl	8008868 <HAL_GetTick>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d302      	bcc.n	800a5fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d136      	bne.n	800a66c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	0c1b      	lsrs	r3, r3, #16
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b01      	cmp	r3, #1
 800a606:	d10c      	bne.n	800a622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	43da      	mvns	r2, r3
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	4013      	ands	r3, r2
 800a614:	b29b      	uxth	r3, r3
 800a616:	2b00      	cmp	r3, #0
 800a618:	bf14      	ite	ne
 800a61a:	2301      	movne	r3, #1
 800a61c:	2300      	moveq	r3, #0
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	e00b      	b.n	800a63a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	43da      	mvns	r2, r3
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	4013      	ands	r3, r2
 800a62e:	b29b      	uxth	r3, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	bf14      	ite	ne
 800a634:	2301      	movne	r3, #1
 800a636:	2300      	moveq	r3, #0
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d016      	beq.n	800a66c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2220      	movs	r2, #32
 800a648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a658:	f043 0220 	orr.w	r2, r3, #32
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e021      	b.n	800a6b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	0c1b      	lsrs	r3, r3, #16
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2b01      	cmp	r3, #1
 800a674:	d10c      	bne.n	800a690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	695b      	ldr	r3, [r3, #20]
 800a67c:	43da      	mvns	r2, r3
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	4013      	ands	r3, r2
 800a682:	b29b      	uxth	r3, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	bf14      	ite	ne
 800a688:	2301      	movne	r3, #1
 800a68a:	2300      	moveq	r3, #0
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	e00b      	b.n	800a6a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	43da      	mvns	r2, r3
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	4013      	ands	r3, r2
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	bf14      	ite	ne
 800a6a2:	2301      	movne	r3, #1
 800a6a4:	2300      	moveq	r3, #0
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f47f af6d 	bne.w	800a588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6c4:	e034      	b.n	800a730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f000 f8e3 	bl	800a892 <I2C_IsAcknowledgeFailed>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e034      	b.n	800a740 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6dc:	d028      	beq.n	800a730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6de:	f7fe f8c3 	bl	8008868 <HAL_GetTick>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d302      	bcc.n	800a6f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d11d      	bne.n	800a730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6fe:	2b80      	cmp	r3, #128	; 0x80
 800a700:	d016      	beq.n	800a730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2220      	movs	r2, #32
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71c:	f043 0220 	orr.w	r2, r3, #32
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e007      	b.n	800a740 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a73a:	2b80      	cmp	r3, #128	; 0x80
 800a73c:	d1c3      	bne.n	800a6c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a754:	e034      	b.n	800a7c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 f89b 	bl	800a892 <I2C_IsAcknowledgeFailed>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	e034      	b.n	800a7d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a76c:	d028      	beq.n	800a7c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a76e:	f7fe f87b 	bl	8008868 <HAL_GetTick>
 800a772:	4602      	mov	r2, r0
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d302      	bcc.n	800a784 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d11d      	bne.n	800a7c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	f003 0304 	and.w	r3, r3, #4
 800a78e:	2b04      	cmp	r3, #4
 800a790:	d016      	beq.n	800a7c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ac:	f043 0220 	orr.w	r2, r3, #32
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e007      	b.n	800a7d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	f003 0304 	and.w	r3, r3, #4
 800a7ca:	2b04      	cmp	r3, #4
 800a7cc:	d1c3      	bne.n	800a756 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7e4:	e049      	b.n	800a87a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	f003 0310 	and.w	r3, r3, #16
 800a7f0:	2b10      	cmp	r3, #16
 800a7f2:	d119      	bne.n	800a828 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f06f 0210 	mvn.w	r2, #16
 800a7fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2220      	movs	r2, #32
 800a808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	e030      	b.n	800a88a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a828:	f7fe f81e 	bl	8008868 <HAL_GetTick>
 800a82c:	4602      	mov	r2, r0
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	429a      	cmp	r2, r3
 800a836:	d302      	bcc.n	800a83e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d11d      	bne.n	800a87a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	695b      	ldr	r3, [r3, #20]
 800a844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a848:	2b40      	cmp	r3, #64	; 0x40
 800a84a:	d016      	beq.n	800a87a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2220      	movs	r2, #32
 800a856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a866:	f043 0220 	orr.w	r2, r3, #32
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	e007      	b.n	800a88a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	695b      	ldr	r3, [r3, #20]
 800a880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a884:	2b40      	cmp	r3, #64	; 0x40
 800a886:	d1ae      	bne.n	800a7e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a892:	b480      	push	{r7}
 800a894:	b083      	sub	sp, #12
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	695b      	ldr	r3, [r3, #20]
 800a8a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8a8:	d11b      	bne.n	800a8e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a8b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ce:	f043 0204 	orr.w	r2, r3, #4
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e000      	b.n	800a8e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bc80      	pop	{r7}
 800a8ec:	4770      	bx	lr
	...

0800a8f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e272      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 8087 	beq.w	800aa1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a910:	4b92      	ldr	r3, [pc, #584]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	f003 030c 	and.w	r3, r3, #12
 800a918:	2b04      	cmp	r3, #4
 800a91a:	d00c      	beq.n	800a936 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a91c:	4b8f      	ldr	r3, [pc, #572]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	f003 030c 	and.w	r3, r3, #12
 800a924:	2b08      	cmp	r3, #8
 800a926:	d112      	bne.n	800a94e <HAL_RCC_OscConfig+0x5e>
 800a928:	4b8c      	ldr	r3, [pc, #560]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a934:	d10b      	bne.n	800a94e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a936:	4b89      	ldr	r3, [pc, #548]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d06c      	beq.n	800aa1c <HAL_RCC_OscConfig+0x12c>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d168      	bne.n	800aa1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e24c      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a956:	d106      	bne.n	800a966 <HAL_RCC_OscConfig+0x76>
 800a958:	4b80      	ldr	r3, [pc, #512]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a7f      	ldr	r2, [pc, #508]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a95e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a962:	6013      	str	r3, [r2, #0]
 800a964:	e02e      	b.n	800a9c4 <HAL_RCC_OscConfig+0xd4>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10c      	bne.n	800a988 <HAL_RCC_OscConfig+0x98>
 800a96e:	4b7b      	ldr	r3, [pc, #492]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a7a      	ldr	r2, [pc, #488]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a978:	6013      	str	r3, [r2, #0]
 800a97a:	4b78      	ldr	r3, [pc, #480]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a77      	ldr	r2, [pc, #476]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a980:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	e01d      	b.n	800a9c4 <HAL_RCC_OscConfig+0xd4>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a990:	d10c      	bne.n	800a9ac <HAL_RCC_OscConfig+0xbc>
 800a992:	4b72      	ldr	r3, [pc, #456]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a71      	ldr	r2, [pc, #452]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a99c:	6013      	str	r3, [r2, #0]
 800a99e:	4b6f      	ldr	r3, [pc, #444]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a6e      	ldr	r2, [pc, #440]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a9a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	e00b      	b.n	800a9c4 <HAL_RCC_OscConfig+0xd4>
 800a9ac:	4b6b      	ldr	r3, [pc, #428]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a6a      	ldr	r2, [pc, #424]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a9b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9b6:	6013      	str	r3, [r2, #0]
 800a9b8:	4b68      	ldr	r3, [pc, #416]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a67      	ldr	r2, [pc, #412]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a9be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d013      	beq.n	800a9f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9cc:	f7fd ff4c 	bl	8008868 <HAL_GetTick>
 800a9d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9d2:	e008      	b.n	800a9e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9d4:	f7fd ff48 	bl	8008868 <HAL_GetTick>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	2b64      	cmp	r3, #100	; 0x64
 800a9e0:	d901      	bls.n	800a9e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	e200      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9e6:	4b5d      	ldr	r3, [pc, #372]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d0f0      	beq.n	800a9d4 <HAL_RCC_OscConfig+0xe4>
 800a9f2:	e014      	b.n	800aa1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9f4:	f7fd ff38 	bl	8008868 <HAL_GetTick>
 800a9f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9fa:	e008      	b.n	800aa0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9fc:	f7fd ff34 	bl	8008868 <HAL_GetTick>
 800aa00:	4602      	mov	r2, r0
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	2b64      	cmp	r3, #100	; 0x64
 800aa08:	d901      	bls.n	800aa0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	e1ec      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa0e:	4b53      	ldr	r3, [pc, #332]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1f0      	bne.n	800a9fc <HAL_RCC_OscConfig+0x10c>
 800aa1a:	e000      	b.n	800aa1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0302 	and.w	r3, r3, #2
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d063      	beq.n	800aaf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aa2a:	4b4c      	ldr	r3, [pc, #304]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f003 030c 	and.w	r3, r3, #12
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00b      	beq.n	800aa4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800aa36:	4b49      	ldr	r3, [pc, #292]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	f003 030c 	and.w	r3, r3, #12
 800aa3e:	2b08      	cmp	r3, #8
 800aa40:	d11c      	bne.n	800aa7c <HAL_RCC_OscConfig+0x18c>
 800aa42:	4b46      	ldr	r3, [pc, #280]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d116      	bne.n	800aa7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa4e:	4b43      	ldr	r3, [pc, #268]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 0302 	and.w	r3, r3, #2
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d005      	beq.n	800aa66 <HAL_RCC_OscConfig+0x176>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d001      	beq.n	800aa66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	e1c0      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa66:	4b3d      	ldr	r3, [pc, #244]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	4939      	ldr	r1, [pc, #228]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800aa76:	4313      	orrs	r3, r2
 800aa78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa7a:	e03a      	b.n	800aaf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d020      	beq.n	800aac6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa84:	4b36      	ldr	r3, [pc, #216]	; (800ab60 <HAL_RCC_OscConfig+0x270>)
 800aa86:	2201      	movs	r2, #1
 800aa88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa8a:	f7fd feed 	bl	8008868 <HAL_GetTick>
 800aa8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa90:	e008      	b.n	800aaa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa92:	f7fd fee9 	bl	8008868 <HAL_GetTick>
 800aa96:	4602      	mov	r2, r0
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d901      	bls.n	800aaa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	e1a1      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aaa4:	4b2d      	ldr	r3, [pc, #180]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f003 0302 	and.w	r3, r3, #2
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d0f0      	beq.n	800aa92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aab0:	4b2a      	ldr	r3, [pc, #168]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	00db      	lsls	r3, r3, #3
 800aabe:	4927      	ldr	r1, [pc, #156]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800aac0:	4313      	orrs	r3, r2
 800aac2:	600b      	str	r3, [r1, #0]
 800aac4:	e015      	b.n	800aaf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aac6:	4b26      	ldr	r3, [pc, #152]	; (800ab60 <HAL_RCC_OscConfig+0x270>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aacc:	f7fd fecc 	bl	8008868 <HAL_GetTick>
 800aad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aad2:	e008      	b.n	800aae6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aad4:	f7fd fec8 	bl	8008868 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	2b02      	cmp	r3, #2
 800aae0:	d901      	bls.n	800aae6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e180      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aae6:	4b1d      	ldr	r3, [pc, #116]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1f0      	bne.n	800aad4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f003 0308 	and.w	r3, r3, #8
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d03a      	beq.n	800ab74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	699b      	ldr	r3, [r3, #24]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d019      	beq.n	800ab3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab06:	4b17      	ldr	r3, [pc, #92]	; (800ab64 <HAL_RCC_OscConfig+0x274>)
 800ab08:	2201      	movs	r2, #1
 800ab0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab0c:	f7fd feac 	bl	8008868 <HAL_GetTick>
 800ab10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab12:	e008      	b.n	800ab26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab14:	f7fd fea8 	bl	8008868 <HAL_GetTick>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d901      	bls.n	800ab26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ab22:	2303      	movs	r3, #3
 800ab24:	e160      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab26:	4b0d      	ldr	r3, [pc, #52]	; (800ab5c <HAL_RCC_OscConfig+0x26c>)
 800ab28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2a:	f003 0302 	and.w	r3, r3, #2
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d0f0      	beq.n	800ab14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ab32:	2001      	movs	r0, #1
 800ab34:	f000 face 	bl	800b0d4 <RCC_Delay>
 800ab38:	e01c      	b.n	800ab74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab3a:	4b0a      	ldr	r3, [pc, #40]	; (800ab64 <HAL_RCC_OscConfig+0x274>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab40:	f7fd fe92 	bl	8008868 <HAL_GetTick>
 800ab44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab46:	e00f      	b.n	800ab68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab48:	f7fd fe8e 	bl	8008868 <HAL_GetTick>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d908      	bls.n	800ab68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e146      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
 800ab5a:	bf00      	nop
 800ab5c:	40021000 	.word	0x40021000
 800ab60:	42420000 	.word	0x42420000
 800ab64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab68:	4b92      	ldr	r3, [pc, #584]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	f003 0302 	and.w	r3, r3, #2
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1e9      	bne.n	800ab48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 0304 	and.w	r3, r3, #4
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f000 80a6 	beq.w	800acce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab82:	2300      	movs	r3, #0
 800ab84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab86:	4b8b      	ldr	r3, [pc, #556]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ab88:	69db      	ldr	r3, [r3, #28]
 800ab8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10d      	bne.n	800abae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab92:	4b88      	ldr	r3, [pc, #544]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ab94:	69db      	ldr	r3, [r3, #28]
 800ab96:	4a87      	ldr	r2, [pc, #540]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ab98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab9c:	61d3      	str	r3, [r2, #28]
 800ab9e:	4b85      	ldr	r3, [pc, #532]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800aba0:	69db      	ldr	r3, [r3, #28]
 800aba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aba6:	60bb      	str	r3, [r7, #8]
 800aba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800abaa:	2301      	movs	r3, #1
 800abac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abae:	4b82      	ldr	r3, [pc, #520]	; (800adb8 <HAL_RCC_OscConfig+0x4c8>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d118      	bne.n	800abec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800abba:	4b7f      	ldr	r3, [pc, #508]	; (800adb8 <HAL_RCC_OscConfig+0x4c8>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a7e      	ldr	r2, [pc, #504]	; (800adb8 <HAL_RCC_OscConfig+0x4c8>)
 800abc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800abc6:	f7fd fe4f 	bl	8008868 <HAL_GetTick>
 800abca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abcc:	e008      	b.n	800abe0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abce:	f7fd fe4b 	bl	8008868 <HAL_GetTick>
 800abd2:	4602      	mov	r2, r0
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	2b64      	cmp	r3, #100	; 0x64
 800abda:	d901      	bls.n	800abe0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800abdc:	2303      	movs	r3, #3
 800abde:	e103      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abe0:	4b75      	ldr	r3, [pc, #468]	; (800adb8 <HAL_RCC_OscConfig+0x4c8>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d0f0      	beq.n	800abce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d106      	bne.n	800ac02 <HAL_RCC_OscConfig+0x312>
 800abf4:	4b6f      	ldr	r3, [pc, #444]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800abf6:	6a1b      	ldr	r3, [r3, #32]
 800abf8:	4a6e      	ldr	r2, [pc, #440]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800abfa:	f043 0301 	orr.w	r3, r3, #1
 800abfe:	6213      	str	r3, [r2, #32]
 800ac00:	e02d      	b.n	800ac5e <HAL_RCC_OscConfig+0x36e>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d10c      	bne.n	800ac24 <HAL_RCC_OscConfig+0x334>
 800ac0a:	4b6a      	ldr	r3, [pc, #424]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac0c:	6a1b      	ldr	r3, [r3, #32]
 800ac0e:	4a69      	ldr	r2, [pc, #420]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac10:	f023 0301 	bic.w	r3, r3, #1
 800ac14:	6213      	str	r3, [r2, #32]
 800ac16:	4b67      	ldr	r3, [pc, #412]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac18:	6a1b      	ldr	r3, [r3, #32]
 800ac1a:	4a66      	ldr	r2, [pc, #408]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac1c:	f023 0304 	bic.w	r3, r3, #4
 800ac20:	6213      	str	r3, [r2, #32]
 800ac22:	e01c      	b.n	800ac5e <HAL_RCC_OscConfig+0x36e>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	2b05      	cmp	r3, #5
 800ac2a:	d10c      	bne.n	800ac46 <HAL_RCC_OscConfig+0x356>
 800ac2c:	4b61      	ldr	r3, [pc, #388]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac2e:	6a1b      	ldr	r3, [r3, #32]
 800ac30:	4a60      	ldr	r2, [pc, #384]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac32:	f043 0304 	orr.w	r3, r3, #4
 800ac36:	6213      	str	r3, [r2, #32]
 800ac38:	4b5e      	ldr	r3, [pc, #376]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac3a:	6a1b      	ldr	r3, [r3, #32]
 800ac3c:	4a5d      	ldr	r2, [pc, #372]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac3e:	f043 0301 	orr.w	r3, r3, #1
 800ac42:	6213      	str	r3, [r2, #32]
 800ac44:	e00b      	b.n	800ac5e <HAL_RCC_OscConfig+0x36e>
 800ac46:	4b5b      	ldr	r3, [pc, #364]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	4a5a      	ldr	r2, [pc, #360]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac4c:	f023 0301 	bic.w	r3, r3, #1
 800ac50:	6213      	str	r3, [r2, #32]
 800ac52:	4b58      	ldr	r3, [pc, #352]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac54:	6a1b      	ldr	r3, [r3, #32]
 800ac56:	4a57      	ldr	r2, [pc, #348]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac58:	f023 0304 	bic.w	r3, r3, #4
 800ac5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d015      	beq.n	800ac92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac66:	f7fd fdff 	bl	8008868 <HAL_GetTick>
 800ac6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac6c:	e00a      	b.n	800ac84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac6e:	f7fd fdfb 	bl	8008868 <HAL_GetTick>
 800ac72:	4602      	mov	r2, r0
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d901      	bls.n	800ac84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ac80:	2303      	movs	r3, #3
 800ac82:	e0b1      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac84:	4b4b      	ldr	r3, [pc, #300]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ac86:	6a1b      	ldr	r3, [r3, #32]
 800ac88:	f003 0302 	and.w	r3, r3, #2
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d0ee      	beq.n	800ac6e <HAL_RCC_OscConfig+0x37e>
 800ac90:	e014      	b.n	800acbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac92:	f7fd fde9 	bl	8008868 <HAL_GetTick>
 800ac96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac98:	e00a      	b.n	800acb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac9a:	f7fd fde5 	bl	8008868 <HAL_GetTick>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d901      	bls.n	800acb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800acac:	2303      	movs	r3, #3
 800acae:	e09b      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800acb0:	4b40      	ldr	r3, [pc, #256]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800acb2:	6a1b      	ldr	r3, [r3, #32]
 800acb4:	f003 0302 	and.w	r3, r3, #2
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1ee      	bne.n	800ac9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d105      	bne.n	800acce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800acc2:	4b3c      	ldr	r3, [pc, #240]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800acc4:	69db      	ldr	r3, [r3, #28]
 800acc6:	4a3b      	ldr	r2, [pc, #236]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800acc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800accc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	69db      	ldr	r3, [r3, #28]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f000 8087 	beq.w	800ade6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800acd8:	4b36      	ldr	r3, [pc, #216]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	f003 030c 	and.w	r3, r3, #12
 800ace0:	2b08      	cmp	r3, #8
 800ace2:	d061      	beq.n	800ada8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	69db      	ldr	r3, [r3, #28]
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d146      	bne.n	800ad7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acec:	4b33      	ldr	r3, [pc, #204]	; (800adbc <HAL_RCC_OscConfig+0x4cc>)
 800acee:	2200      	movs	r2, #0
 800acf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acf2:	f7fd fdb9 	bl	8008868 <HAL_GetTick>
 800acf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acf8:	e008      	b.n	800ad0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acfa:	f7fd fdb5 	bl	8008868 <HAL_GetTick>
 800acfe:	4602      	mov	r2, r0
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	1ad3      	subs	r3, r2, r3
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d901      	bls.n	800ad0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ad08:	2303      	movs	r3, #3
 800ad0a:	e06d      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad0c:	4b29      	ldr	r3, [pc, #164]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d1f0      	bne.n	800acfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a1b      	ldr	r3, [r3, #32]
 800ad1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad20:	d108      	bne.n	800ad34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ad22:	4b24      	ldr	r3, [pc, #144]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	4921      	ldr	r1, [pc, #132]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad30:	4313      	orrs	r3, r2
 800ad32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad34:	4b1f      	ldr	r3, [pc, #124]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a19      	ldr	r1, [r3, #32]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad44:	430b      	orrs	r3, r1
 800ad46:	491b      	ldr	r1, [pc, #108]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad4c:	4b1b      	ldr	r3, [pc, #108]	; (800adbc <HAL_RCC_OscConfig+0x4cc>)
 800ad4e:	2201      	movs	r2, #1
 800ad50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad52:	f7fd fd89 	bl	8008868 <HAL_GetTick>
 800ad56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad58:	e008      	b.n	800ad6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad5a:	f7fd fd85 	bl	8008868 <HAL_GetTick>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	1ad3      	subs	r3, r2, r3
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d901      	bls.n	800ad6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ad68:	2303      	movs	r3, #3
 800ad6a:	e03d      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad6c:	4b11      	ldr	r3, [pc, #68]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d0f0      	beq.n	800ad5a <HAL_RCC_OscConfig+0x46a>
 800ad78:	e035      	b.n	800ade6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad7a:	4b10      	ldr	r3, [pc, #64]	; (800adbc <HAL_RCC_OscConfig+0x4cc>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad80:	f7fd fd72 	bl	8008868 <HAL_GetTick>
 800ad84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad86:	e008      	b.n	800ad9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad88:	f7fd fd6e 	bl	8008868 <HAL_GetTick>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d901      	bls.n	800ad9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ad96:	2303      	movs	r3, #3
 800ad98:	e026      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad9a:	4b06      	ldr	r3, [pc, #24]	; (800adb4 <HAL_RCC_OscConfig+0x4c4>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1f0      	bne.n	800ad88 <HAL_RCC_OscConfig+0x498>
 800ada6:	e01e      	b.n	800ade6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	69db      	ldr	r3, [r3, #28]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d107      	bne.n	800adc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e019      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
 800adb4:	40021000 	.word	0x40021000
 800adb8:	40007000 	.word	0x40007000
 800adbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800adc0:	4b0b      	ldr	r3, [pc, #44]	; (800adf0 <HAL_RCC_OscConfig+0x500>)
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a1b      	ldr	r3, [r3, #32]
 800add0:	429a      	cmp	r2, r3
 800add2:	d106      	bne.n	800ade2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adde:	429a      	cmp	r2, r3
 800ade0:	d001      	beq.n	800ade6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	e000      	b.n	800ade8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3718      	adds	r7, #24
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	40021000 	.word	0x40021000

0800adf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d101      	bne.n	800ae08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e0d0      	b.n	800afaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ae08:	4b6a      	ldr	r3, [pc, #424]	; (800afb4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0307 	and.w	r3, r3, #7
 800ae10:	683a      	ldr	r2, [r7, #0]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d910      	bls.n	800ae38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae16:	4b67      	ldr	r3, [pc, #412]	; (800afb4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f023 0207 	bic.w	r2, r3, #7
 800ae1e:	4965      	ldr	r1, [pc, #404]	; (800afb4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae26:	4b63      	ldr	r3, [pc, #396]	; (800afb4 <HAL_RCC_ClockConfig+0x1c0>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 0307 	and.w	r3, r3, #7
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d001      	beq.n	800ae38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e0b8      	b.n	800afaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f003 0302 	and.w	r3, r3, #2
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d020      	beq.n	800ae86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 0304 	and.w	r3, r3, #4
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d005      	beq.n	800ae5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae50:	4b59      	ldr	r3, [pc, #356]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	4a58      	ldr	r2, [pc, #352]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ae5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f003 0308 	and.w	r3, r3, #8
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d005      	beq.n	800ae74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae68:	4b53      	ldr	r3, [pc, #332]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	4a52      	ldr	r2, [pc, #328]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ae72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae74:	4b50      	ldr	r3, [pc, #320]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	494d      	ldr	r1, [pc, #308]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae82:	4313      	orrs	r3, r2
 800ae84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d040      	beq.n	800af14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d107      	bne.n	800aeaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae9a:	4b47      	ldr	r3, [pc, #284]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d115      	bne.n	800aed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e07f      	b.n	800afaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d107      	bne.n	800aec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aeb2:	4b41      	ldr	r3, [pc, #260]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d109      	bne.n	800aed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	e073      	b.n	800afaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aec2:	4b3d      	ldr	r3, [pc, #244]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 0302 	and.w	r3, r3, #2
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	e06b      	b.n	800afaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aed2:	4b39      	ldr	r3, [pc, #228]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	f023 0203 	bic.w	r2, r3, #3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	4936      	ldr	r1, [pc, #216]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800aee0:	4313      	orrs	r3, r2
 800aee2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aee4:	f7fd fcc0 	bl	8008868 <HAL_GetTick>
 800aee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aeea:	e00a      	b.n	800af02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aeec:	f7fd fcbc 	bl	8008868 <HAL_GetTick>
 800aef0:	4602      	mov	r2, r0
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d901      	bls.n	800af02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aefe:	2303      	movs	r3, #3
 800af00:	e053      	b.n	800afaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af02:	4b2d      	ldr	r3, [pc, #180]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	f003 020c 	and.w	r2, r3, #12
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	429a      	cmp	r2, r3
 800af12:	d1eb      	bne.n	800aeec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800af14:	4b27      	ldr	r3, [pc, #156]	; (800afb4 <HAL_RCC_ClockConfig+0x1c0>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 0307 	and.w	r3, r3, #7
 800af1c:	683a      	ldr	r2, [r7, #0]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d210      	bcs.n	800af44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af22:	4b24      	ldr	r3, [pc, #144]	; (800afb4 <HAL_RCC_ClockConfig+0x1c0>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f023 0207 	bic.w	r2, r3, #7
 800af2a:	4922      	ldr	r1, [pc, #136]	; (800afb4 <HAL_RCC_ClockConfig+0x1c0>)
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	4313      	orrs	r3, r2
 800af30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af32:	4b20      	ldr	r3, [pc, #128]	; (800afb4 <HAL_RCC_ClockConfig+0x1c0>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 0307 	and.w	r3, r3, #7
 800af3a:	683a      	ldr	r2, [r7, #0]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d001      	beq.n	800af44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e032      	b.n	800afaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0304 	and.w	r3, r3, #4
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d008      	beq.n	800af62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af50:	4b19      	ldr	r3, [pc, #100]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	4916      	ldr	r1, [pc, #88]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800af5e:	4313      	orrs	r3, r2
 800af60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f003 0308 	and.w	r3, r3, #8
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d009      	beq.n	800af82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800af6e:	4b12      	ldr	r3, [pc, #72]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	00db      	lsls	r3, r3, #3
 800af7c:	490e      	ldr	r1, [pc, #56]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800af7e:	4313      	orrs	r3, r2
 800af80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800af82:	f000 f821 	bl	800afc8 <HAL_RCC_GetSysClockFreq>
 800af86:	4602      	mov	r2, r0
 800af88:	4b0b      	ldr	r3, [pc, #44]	; (800afb8 <HAL_RCC_ClockConfig+0x1c4>)
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	091b      	lsrs	r3, r3, #4
 800af8e:	f003 030f 	and.w	r3, r3, #15
 800af92:	490a      	ldr	r1, [pc, #40]	; (800afbc <HAL_RCC_ClockConfig+0x1c8>)
 800af94:	5ccb      	ldrb	r3, [r1, r3]
 800af96:	fa22 f303 	lsr.w	r3, r2, r3
 800af9a:	4a09      	ldr	r2, [pc, #36]	; (800afc0 <HAL_RCC_ClockConfig+0x1cc>)
 800af9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800af9e:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <HAL_RCC_ClockConfig+0x1d0>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fd fc1e 	bl	80087e4 <HAL_InitTick>

  return HAL_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	40022000 	.word	0x40022000
 800afb8:	40021000 	.word	0x40021000
 800afbc:	0800de68 	.word	0x0800de68
 800afc0:	200000a0 	.word	0x200000a0
 800afc4:	200000a4 	.word	0x200000a4

0800afc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afc8:	b480      	push	{r7}
 800afca:	b087      	sub	sp, #28
 800afcc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800afce:	2300      	movs	r3, #0
 800afd0:	60fb      	str	r3, [r7, #12]
 800afd2:	2300      	movs	r3, #0
 800afd4:	60bb      	str	r3, [r7, #8]
 800afd6:	2300      	movs	r3, #0
 800afd8:	617b      	str	r3, [r7, #20]
 800afda:	2300      	movs	r3, #0
 800afdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800afde:	2300      	movs	r3, #0
 800afe0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800afe2:	4b1e      	ldr	r3, [pc, #120]	; (800b05c <HAL_RCC_GetSysClockFreq+0x94>)
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f003 030c 	and.w	r3, r3, #12
 800afee:	2b04      	cmp	r3, #4
 800aff0:	d002      	beq.n	800aff8 <HAL_RCC_GetSysClockFreq+0x30>
 800aff2:	2b08      	cmp	r3, #8
 800aff4:	d003      	beq.n	800affe <HAL_RCC_GetSysClockFreq+0x36>
 800aff6:	e027      	b.n	800b048 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aff8:	4b19      	ldr	r3, [pc, #100]	; (800b060 <HAL_RCC_GetSysClockFreq+0x98>)
 800affa:	613b      	str	r3, [r7, #16]
      break;
 800affc:	e027      	b.n	800b04e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	0c9b      	lsrs	r3, r3, #18
 800b002:	f003 030f 	and.w	r3, r3, #15
 800b006:	4a17      	ldr	r2, [pc, #92]	; (800b064 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b008:	5cd3      	ldrb	r3, [r2, r3]
 800b00a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d010      	beq.n	800b038 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b016:	4b11      	ldr	r3, [pc, #68]	; (800b05c <HAL_RCC_GetSysClockFreq+0x94>)
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	0c5b      	lsrs	r3, r3, #17
 800b01c:	f003 0301 	and.w	r3, r3, #1
 800b020:	4a11      	ldr	r2, [pc, #68]	; (800b068 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b022:	5cd3      	ldrb	r3, [r2, r3]
 800b024:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a0d      	ldr	r2, [pc, #52]	; (800b060 <HAL_RCC_GetSysClockFreq+0x98>)
 800b02a:	fb03 f202 	mul.w	r2, r3, r2
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	fbb2 f3f3 	udiv	r3, r2, r3
 800b034:	617b      	str	r3, [r7, #20]
 800b036:	e004      	b.n	800b042 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a0c      	ldr	r2, [pc, #48]	; (800b06c <HAL_RCC_GetSysClockFreq+0xa4>)
 800b03c:	fb02 f303 	mul.w	r3, r2, r3
 800b040:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	613b      	str	r3, [r7, #16]
      break;
 800b046:	e002      	b.n	800b04e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b048:	4b05      	ldr	r3, [pc, #20]	; (800b060 <HAL_RCC_GetSysClockFreq+0x98>)
 800b04a:	613b      	str	r3, [r7, #16]
      break;
 800b04c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b04e:	693b      	ldr	r3, [r7, #16]
}
 800b050:	4618      	mov	r0, r3
 800b052:	371c      	adds	r7, #28
 800b054:	46bd      	mov	sp, r7
 800b056:	bc80      	pop	{r7}
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	40021000 	.word	0x40021000
 800b060:	007a1200 	.word	0x007a1200
 800b064:	0800de80 	.word	0x0800de80
 800b068:	0800de90 	.word	0x0800de90
 800b06c:	003d0900 	.word	0x003d0900

0800b070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b070:	b480      	push	{r7}
 800b072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b074:	4b02      	ldr	r3, [pc, #8]	; (800b080 <HAL_RCC_GetHCLKFreq+0x10>)
 800b076:	681b      	ldr	r3, [r3, #0]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bc80      	pop	{r7}
 800b07e:	4770      	bx	lr
 800b080:	200000a0 	.word	0x200000a0

0800b084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b088:	f7ff fff2 	bl	800b070 <HAL_RCC_GetHCLKFreq>
 800b08c:	4602      	mov	r2, r0
 800b08e:	4b05      	ldr	r3, [pc, #20]	; (800b0a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	0a1b      	lsrs	r3, r3, #8
 800b094:	f003 0307 	and.w	r3, r3, #7
 800b098:	4903      	ldr	r1, [pc, #12]	; (800b0a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b09a:	5ccb      	ldrb	r3, [r1, r3]
 800b09c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	40021000 	.word	0x40021000
 800b0a8:	0800de78 	.word	0x0800de78

0800b0ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b0b0:	f7ff ffde 	bl	800b070 <HAL_RCC_GetHCLKFreq>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <HAL_RCC_GetPCLK2Freq+0x20>)
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	0adb      	lsrs	r3, r3, #11
 800b0bc:	f003 0307 	and.w	r3, r3, #7
 800b0c0:	4903      	ldr	r1, [pc, #12]	; (800b0d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b0c2:	5ccb      	ldrb	r3, [r1, r3]
 800b0c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	40021000 	.word	0x40021000
 800b0d0:	0800de78 	.word	0x0800de78

0800b0d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b0dc:	4b0a      	ldr	r3, [pc, #40]	; (800b108 <RCC_Delay+0x34>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a0a      	ldr	r2, [pc, #40]	; (800b10c <RCC_Delay+0x38>)
 800b0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e6:	0a5b      	lsrs	r3, r3, #9
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	fb02 f303 	mul.w	r3, r2, r3
 800b0ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b0f0:	bf00      	nop
  }
  while (Delay --);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	1e5a      	subs	r2, r3, #1
 800b0f6:	60fa      	str	r2, [r7, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1f9      	bne.n	800b0f0 <RCC_Delay+0x1c>
}
 800b0fc:	bf00      	nop
 800b0fe:	bf00      	nop
 800b100:	3714      	adds	r7, #20
 800b102:	46bd      	mov	sp, r7
 800b104:	bc80      	pop	{r7}
 800b106:	4770      	bx	lr
 800b108:	200000a0 	.word	0x200000a0
 800b10c:	10624dd3 	.word	0x10624dd3

0800b110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e041      	b.n	800b1a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d106      	bne.n	800b13c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7fd fa26 	bl	8008588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2202      	movs	r2, #2
 800b140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3304      	adds	r3, #4
 800b14c:	4619      	mov	r1, r3
 800b14e:	4610      	mov	r0, r2
 800b150:	f000 fa82 	bl	800b658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
	...

0800b1b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d001      	beq.n	800b1c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e044      	b.n	800b252 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2202      	movs	r2, #2
 800b1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68da      	ldr	r2, [r3, #12]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f042 0201 	orr.w	r2, r2, #1
 800b1de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a1d      	ldr	r2, [pc, #116]	; (800b25c <HAL_TIM_Base_Start_IT+0xac>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d018      	beq.n	800b21c <HAL_TIM_Base_Start_IT+0x6c>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a1c      	ldr	r2, [pc, #112]	; (800b260 <HAL_TIM_Base_Start_IT+0xb0>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d013      	beq.n	800b21c <HAL_TIM_Base_Start_IT+0x6c>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1fc:	d00e      	beq.n	800b21c <HAL_TIM_Base_Start_IT+0x6c>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a18      	ldr	r2, [pc, #96]	; (800b264 <HAL_TIM_Base_Start_IT+0xb4>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d009      	beq.n	800b21c <HAL_TIM_Base_Start_IT+0x6c>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a16      	ldr	r2, [pc, #88]	; (800b268 <HAL_TIM_Base_Start_IT+0xb8>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d004      	beq.n	800b21c <HAL_TIM_Base_Start_IT+0x6c>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a15      	ldr	r2, [pc, #84]	; (800b26c <HAL_TIM_Base_Start_IT+0xbc>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d111      	bne.n	800b240 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	f003 0307 	and.w	r3, r3, #7
 800b226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2b06      	cmp	r3, #6
 800b22c:	d010      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f042 0201 	orr.w	r2, r2, #1
 800b23c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b23e:	e007      	b.n	800b250 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f042 0201 	orr.w	r2, r2, #1
 800b24e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	bc80      	pop	{r7}
 800b25a:	4770      	bx	lr
 800b25c:	40012c00 	.word	0x40012c00
 800b260:	40013400 	.word	0x40013400
 800b264:	40000400 	.word	0x40000400
 800b268:	40000800 	.word	0x40000800
 800b26c:	40000c00 	.word	0x40000c00

0800b270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	f003 0302 	and.w	r3, r3, #2
 800b282:	2b02      	cmp	r3, #2
 800b284:	d122      	bne.n	800b2cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	f003 0302 	and.w	r3, r3, #2
 800b290:	2b02      	cmp	r3, #2
 800b292:	d11b      	bne.n	800b2cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f06f 0202 	mvn.w	r2, #2
 800b29c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	f003 0303 	and.w	r3, r3, #3
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f9b4 	bl	800b620 <HAL_TIM_IC_CaptureCallback>
 800b2b8:	e005      	b.n	800b2c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f9a7 	bl	800b60e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f9b6 	bl	800b632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	691b      	ldr	r3, [r3, #16]
 800b2d2:	f003 0304 	and.w	r3, r3, #4
 800b2d6:	2b04      	cmp	r3, #4
 800b2d8:	d122      	bne.n	800b320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f003 0304 	and.w	r3, r3, #4
 800b2e4:	2b04      	cmp	r3, #4
 800b2e6:	d11b      	bne.n	800b320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f06f 0204 	mvn.w	r2, #4
 800b2f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2202      	movs	r2, #2
 800b2f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b302:	2b00      	cmp	r3, #0
 800b304:	d003      	beq.n	800b30e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f98a 	bl	800b620 <HAL_TIM_IC_CaptureCallback>
 800b30c:	e005      	b.n	800b31a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f97d 	bl	800b60e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f98c 	bl	800b632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	f003 0308 	and.w	r3, r3, #8
 800b32a:	2b08      	cmp	r3, #8
 800b32c:	d122      	bne.n	800b374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	f003 0308 	and.w	r3, r3, #8
 800b338:	2b08      	cmp	r3, #8
 800b33a:	d11b      	bne.n	800b374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f06f 0208 	mvn.w	r2, #8
 800b344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2204      	movs	r2, #4
 800b34a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	69db      	ldr	r3, [r3, #28]
 800b352:	f003 0303 	and.w	r3, r3, #3
 800b356:	2b00      	cmp	r3, #0
 800b358:	d003      	beq.n	800b362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 f960 	bl	800b620 <HAL_TIM_IC_CaptureCallback>
 800b360:	e005      	b.n	800b36e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f953 	bl	800b60e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f962 	bl	800b632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2200      	movs	r2, #0
 800b372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	f003 0310 	and.w	r3, r3, #16
 800b37e:	2b10      	cmp	r3, #16
 800b380:	d122      	bne.n	800b3c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	f003 0310 	and.w	r3, r3, #16
 800b38c:	2b10      	cmp	r3, #16
 800b38e:	d11b      	bne.n	800b3c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f06f 0210 	mvn.w	r2, #16
 800b398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2208      	movs	r2, #8
 800b39e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	69db      	ldr	r3, [r3, #28]
 800b3a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d003      	beq.n	800b3b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 f936 	bl	800b620 <HAL_TIM_IC_CaptureCallback>
 800b3b4:	e005      	b.n	800b3c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f929 	bl	800b60e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 f938 	bl	800b632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	f003 0301 	and.w	r3, r3, #1
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d10e      	bne.n	800b3f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	f003 0301 	and.w	r3, r3, #1
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d107      	bne.n	800b3f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f06f 0201 	mvn.w	r2, #1
 800b3ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7fc fd62 	bl	8007eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	691b      	ldr	r3, [r3, #16]
 800b3fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3fe:	2b80      	cmp	r3, #128	; 0x80
 800b400:	d10e      	bne.n	800b420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b40c:	2b80      	cmp	r3, #128	; 0x80
 800b40e:	d107      	bne.n	800b420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 faa1 	bl	800b962 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b42a:	2b40      	cmp	r3, #64	; 0x40
 800b42c:	d10e      	bne.n	800b44c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b438:	2b40      	cmp	r3, #64	; 0x40
 800b43a:	d107      	bne.n	800b44c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f8fc 	bl	800b644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	f003 0320 	and.w	r3, r3, #32
 800b456:	2b20      	cmp	r3, #32
 800b458:	d10e      	bne.n	800b478 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	f003 0320 	and.w	r3, r3, #32
 800b464:	2b20      	cmp	r3, #32
 800b466:	d107      	bne.n	800b478 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f06f 0220 	mvn.w	r2, #32
 800b470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 fa6c 	bl	800b950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b478:	bf00      	nop
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b48a:	2300      	movs	r3, #0
 800b48c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b494:	2b01      	cmp	r3, #1
 800b496:	d101      	bne.n	800b49c <HAL_TIM_ConfigClockSource+0x1c>
 800b498:	2302      	movs	r3, #2
 800b49a:	e0b4      	b.n	800b606 <HAL_TIM_ConfigClockSource+0x186>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b4ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4d4:	d03e      	beq.n	800b554 <HAL_TIM_ConfigClockSource+0xd4>
 800b4d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4da:	f200 8087 	bhi.w	800b5ec <HAL_TIM_ConfigClockSource+0x16c>
 800b4de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4e2:	f000 8086 	beq.w	800b5f2 <HAL_TIM_ConfigClockSource+0x172>
 800b4e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ea:	d87f      	bhi.n	800b5ec <HAL_TIM_ConfigClockSource+0x16c>
 800b4ec:	2b70      	cmp	r3, #112	; 0x70
 800b4ee:	d01a      	beq.n	800b526 <HAL_TIM_ConfigClockSource+0xa6>
 800b4f0:	2b70      	cmp	r3, #112	; 0x70
 800b4f2:	d87b      	bhi.n	800b5ec <HAL_TIM_ConfigClockSource+0x16c>
 800b4f4:	2b60      	cmp	r3, #96	; 0x60
 800b4f6:	d050      	beq.n	800b59a <HAL_TIM_ConfigClockSource+0x11a>
 800b4f8:	2b60      	cmp	r3, #96	; 0x60
 800b4fa:	d877      	bhi.n	800b5ec <HAL_TIM_ConfigClockSource+0x16c>
 800b4fc:	2b50      	cmp	r3, #80	; 0x50
 800b4fe:	d03c      	beq.n	800b57a <HAL_TIM_ConfigClockSource+0xfa>
 800b500:	2b50      	cmp	r3, #80	; 0x50
 800b502:	d873      	bhi.n	800b5ec <HAL_TIM_ConfigClockSource+0x16c>
 800b504:	2b40      	cmp	r3, #64	; 0x40
 800b506:	d058      	beq.n	800b5ba <HAL_TIM_ConfigClockSource+0x13a>
 800b508:	2b40      	cmp	r3, #64	; 0x40
 800b50a:	d86f      	bhi.n	800b5ec <HAL_TIM_ConfigClockSource+0x16c>
 800b50c:	2b30      	cmp	r3, #48	; 0x30
 800b50e:	d064      	beq.n	800b5da <HAL_TIM_ConfigClockSource+0x15a>
 800b510:	2b30      	cmp	r3, #48	; 0x30
 800b512:	d86b      	bhi.n	800b5ec <HAL_TIM_ConfigClockSource+0x16c>
 800b514:	2b20      	cmp	r3, #32
 800b516:	d060      	beq.n	800b5da <HAL_TIM_ConfigClockSource+0x15a>
 800b518:	2b20      	cmp	r3, #32
 800b51a:	d867      	bhi.n	800b5ec <HAL_TIM_ConfigClockSource+0x16c>
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d05c      	beq.n	800b5da <HAL_TIM_ConfigClockSource+0x15a>
 800b520:	2b10      	cmp	r3, #16
 800b522:	d05a      	beq.n	800b5da <HAL_TIM_ConfigClockSource+0x15a>
 800b524:	e062      	b.n	800b5ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b536:	f000 f980 	bl	800b83a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b548:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	68ba      	ldr	r2, [r7, #8]
 800b550:	609a      	str	r2, [r3, #8]
      break;
 800b552:	e04f      	b.n	800b5f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b564:	f000 f969 	bl	800b83a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	689a      	ldr	r2, [r3, #8]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b576:	609a      	str	r2, [r3, #8]
      break;
 800b578:	e03c      	b.n	800b5f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b586:	461a      	mov	r2, r3
 800b588:	f000 f8e0 	bl	800b74c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2150      	movs	r1, #80	; 0x50
 800b592:	4618      	mov	r0, r3
 800b594:	f000 f937 	bl	800b806 <TIM_ITRx_SetConfig>
      break;
 800b598:	e02c      	b.n	800b5f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f000 f8fe 	bl	800b7a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2160      	movs	r1, #96	; 0x60
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f000 f927 	bl	800b806 <TIM_ITRx_SetConfig>
      break;
 800b5b8:	e01c      	b.n	800b5f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	f000 f8c0 	bl	800b74c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2140      	movs	r1, #64	; 0x40
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 f917 	bl	800b806 <TIM_ITRx_SetConfig>
      break;
 800b5d8:	e00c      	b.n	800b5f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	4610      	mov	r0, r2
 800b5e6:	f000 f90e 	bl	800b806 <TIM_ITRx_SetConfig>
      break;
 800b5ea:	e003      	b.n	800b5f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b5f0:	e000      	b.n	800b5f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b5f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b604:	7bfb      	ldrb	r3, [r7, #15]
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b60e:	b480      	push	{r7}
 800b610:	b083      	sub	sp, #12
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b616:	bf00      	nop
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bc80      	pop	{r7}
 800b61e:	4770      	bx	lr

0800b620 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bc80      	pop	{r7}
 800b630:	4770      	bx	lr

0800b632 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b632:	b480      	push	{r7}
 800b634:	b083      	sub	sp, #12
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b63a:	bf00      	nop
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	bc80      	pop	{r7}
 800b642:	4770      	bx	lr

0800b644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b64c:	bf00      	nop
 800b64e:	370c      	adds	r7, #12
 800b650:	46bd      	mov	sp, r7
 800b652:	bc80      	pop	{r7}
 800b654:	4770      	bx	lr
	...

0800b658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a33      	ldr	r2, [pc, #204]	; (800b738 <TIM_Base_SetConfig+0xe0>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d013      	beq.n	800b698 <TIM_Base_SetConfig+0x40>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a32      	ldr	r2, [pc, #200]	; (800b73c <TIM_Base_SetConfig+0xe4>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d00f      	beq.n	800b698 <TIM_Base_SetConfig+0x40>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b67e:	d00b      	beq.n	800b698 <TIM_Base_SetConfig+0x40>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a2f      	ldr	r2, [pc, #188]	; (800b740 <TIM_Base_SetConfig+0xe8>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d007      	beq.n	800b698 <TIM_Base_SetConfig+0x40>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a2e      	ldr	r2, [pc, #184]	; (800b744 <TIM_Base_SetConfig+0xec>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d003      	beq.n	800b698 <TIM_Base_SetConfig+0x40>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a2d      	ldr	r2, [pc, #180]	; (800b748 <TIM_Base_SetConfig+0xf0>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d108      	bne.n	800b6aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b69e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a22      	ldr	r2, [pc, #136]	; (800b738 <TIM_Base_SetConfig+0xe0>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d013      	beq.n	800b6da <TIM_Base_SetConfig+0x82>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a21      	ldr	r2, [pc, #132]	; (800b73c <TIM_Base_SetConfig+0xe4>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d00f      	beq.n	800b6da <TIM_Base_SetConfig+0x82>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c0:	d00b      	beq.n	800b6da <TIM_Base_SetConfig+0x82>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a1e      	ldr	r2, [pc, #120]	; (800b740 <TIM_Base_SetConfig+0xe8>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d007      	beq.n	800b6da <TIM_Base_SetConfig+0x82>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a1d      	ldr	r2, [pc, #116]	; (800b744 <TIM_Base_SetConfig+0xec>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d003      	beq.n	800b6da <TIM_Base_SetConfig+0x82>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a1c      	ldr	r2, [pc, #112]	; (800b748 <TIM_Base_SetConfig+0xf0>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d108      	bne.n	800b6ec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	695b      	ldr	r3, [r3, #20]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	689a      	ldr	r2, [r3, #8]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a09      	ldr	r2, [pc, #36]	; (800b738 <TIM_Base_SetConfig+0xe0>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d003      	beq.n	800b720 <TIM_Base_SetConfig+0xc8>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a08      	ldr	r2, [pc, #32]	; (800b73c <TIM_Base_SetConfig+0xe4>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d103      	bne.n	800b728 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	691a      	ldr	r2, [r3, #16]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2201      	movs	r2, #1
 800b72c:	615a      	str	r2, [r3, #20]
}
 800b72e:	bf00      	nop
 800b730:	3714      	adds	r7, #20
 800b732:	46bd      	mov	sp, r7
 800b734:	bc80      	pop	{r7}
 800b736:	4770      	bx	lr
 800b738:	40012c00 	.word	0x40012c00
 800b73c:	40013400 	.word	0x40013400
 800b740:	40000400 	.word	0x40000400
 800b744:	40000800 	.word	0x40000800
 800b748:	40000c00 	.word	0x40000c00

0800b74c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b087      	sub	sp, #28
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6a1b      	ldr	r3, [r3, #32]
 800b75c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	f023 0201 	bic.w	r2, r3, #1
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	699b      	ldr	r3, [r3, #24]
 800b76e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	011b      	lsls	r3, r3, #4
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	4313      	orrs	r3, r2
 800b780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	f023 030a 	bic.w	r3, r3, #10
 800b788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	4313      	orrs	r3, r2
 800b790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	621a      	str	r2, [r3, #32]
}
 800b79e:	bf00      	nop
 800b7a0:	371c      	adds	r7, #28
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bc80      	pop	{r7}
 800b7a6:	4770      	bx	lr

0800b7a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b087      	sub	sp, #28
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6a1b      	ldr	r3, [r3, #32]
 800b7b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6a1b      	ldr	r3, [r3, #32]
 800b7be:	f023 0210 	bic.w	r2, r3, #16
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	031b      	lsls	r3, r3, #12
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	011b      	lsls	r3, r3, #4
 800b7ea:	697a      	ldr	r2, [r7, #20]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	697a      	ldr	r2, [r7, #20]
 800b7fa:	621a      	str	r2, [r3, #32]
}
 800b7fc:	bf00      	nop
 800b7fe:	371c      	adds	r7, #28
 800b800:	46bd      	mov	sp, r7
 800b802:	bc80      	pop	{r7}
 800b804:	4770      	bx	lr

0800b806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b806:	b480      	push	{r7}
 800b808:	b085      	sub	sp, #20
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b81c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	4313      	orrs	r3, r2
 800b824:	f043 0307 	orr.w	r3, r3, #7
 800b828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	609a      	str	r2, [r3, #8]
}
 800b830:	bf00      	nop
 800b832:	3714      	adds	r7, #20
 800b834:	46bd      	mov	sp, r7
 800b836:	bc80      	pop	{r7}
 800b838:	4770      	bx	lr

0800b83a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b83a:	b480      	push	{r7}
 800b83c:	b087      	sub	sp, #28
 800b83e:	af00      	add	r7, sp, #0
 800b840:	60f8      	str	r0, [r7, #12]
 800b842:	60b9      	str	r1, [r7, #8]
 800b844:	607a      	str	r2, [r7, #4]
 800b846:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b854:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	021a      	lsls	r2, r3, #8
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	431a      	orrs	r2, r3
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	4313      	orrs	r3, r2
 800b862:	697a      	ldr	r2, [r7, #20]
 800b864:	4313      	orrs	r3, r2
 800b866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	609a      	str	r2, [r3, #8]
}
 800b86e:	bf00      	nop
 800b870:	371c      	adds	r7, #28
 800b872:	46bd      	mov	sp, r7
 800b874:	bc80      	pop	{r7}
 800b876:	4770      	bx	lr

0800b878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d101      	bne.n	800b890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b88c:	2302      	movs	r3, #2
 800b88e:	e050      	b.n	800b932 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2202      	movs	r2, #2
 800b89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a1b      	ldr	r2, [pc, #108]	; (800b93c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d018      	beq.n	800b906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a19      	ldr	r2, [pc, #100]	; (800b940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d013      	beq.n	800b906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e6:	d00e      	beq.n	800b906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a15      	ldr	r2, [pc, #84]	; (800b944 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d009      	beq.n	800b906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a14      	ldr	r2, [pc, #80]	; (800b948 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d004      	beq.n	800b906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a12      	ldr	r2, [pc, #72]	; (800b94c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d10c      	bne.n	800b920 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b90c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	4313      	orrs	r3, r2
 800b916:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	bc80      	pop	{r7}
 800b93a:	4770      	bx	lr
 800b93c:	40012c00 	.word	0x40012c00
 800b940:	40013400 	.word	0x40013400
 800b944:	40000400 	.word	0x40000400
 800b948:	40000800 	.word	0x40000800
 800b94c:	40000c00 	.word	0x40000c00

0800b950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bc80      	pop	{r7}
 800b960:	4770      	bx	lr

0800b962 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b962:	b480      	push	{r7}
 800b964:	b083      	sub	sp, #12
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b96a:	bf00      	nop
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	bc80      	pop	{r7}
 800b972:	4770      	bx	lr

0800b974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d101      	bne.n	800b986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b982:	2301      	movs	r3, #1
 800b984:	e042      	b.n	800ba0c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d106      	bne.n	800b9a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7fc fe1a 	bl	80085d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2224      	movs	r2, #36	; 0x24
 800b9a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68da      	ldr	r2, [r3, #12]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b9b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 fcb5 	bl	800c328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	691a      	ldr	r2, [r3, #16]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	695a      	ldr	r2, [r3, #20]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68da      	ldr	r2, [r3, #12]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b9ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2220      	movs	r2, #32
 800b9f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2220      	movs	r2, #32
 800ba00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ba0a:	2300      	movs	r3, #0
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	4613      	mov	r3, r2
 800ba20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	2b20      	cmp	r3, #32
 800ba2c:	d121      	bne.n	800ba72 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <HAL_UART_Transmit_IT+0x26>
 800ba34:	88fb      	ldrh	r3, [r7, #6]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d101      	bne.n	800ba3e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e01a      	b.n	800ba74 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	88fa      	ldrh	r2, [r7, #6]
 800ba48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	88fa      	ldrh	r2, [r7, #6]
 800ba4e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2200      	movs	r2, #0
 800ba54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2221      	movs	r2, #33	; 0x21
 800ba5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68da      	ldr	r2, [r3, #12]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ba6c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	e000      	b.n	800ba74 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800ba72:	2302      	movs	r3, #2
  }
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3714      	adds	r7, #20
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bc80      	pop	{r7}
 800ba7c:	4770      	bx	lr
	...

0800ba80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b0ba      	sub	sp, #232	; 0xe8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	695b      	ldr	r3, [r3, #20]
 800baa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800baa6:	2300      	movs	r3, #0
 800baa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800baac:	2300      	movs	r3, #0
 800baae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bab6:	f003 030f 	and.w	r3, r3, #15
 800baba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800babe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10f      	bne.n	800bae6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baca:	f003 0320 	and.w	r3, r3, #32
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d009      	beq.n	800bae6 <HAL_UART_IRQHandler+0x66>
 800bad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bad6:	f003 0320 	and.w	r3, r3, #32
 800bada:	2b00      	cmp	r3, #0
 800badc:	d003      	beq.n	800bae6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fb63 	bl	800c1aa <UART_Receive_IT>
      return;
 800bae4:	e25b      	b.n	800bf9e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800baea:	2b00      	cmp	r3, #0
 800baec:	f000 80de 	beq.w	800bcac <HAL_UART_IRQHandler+0x22c>
 800baf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800baf4:	f003 0301 	and.w	r3, r3, #1
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d106      	bne.n	800bb0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bafc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f000 80d1 	beq.w	800bcac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bb0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb0e:	f003 0301 	and.w	r3, r3, #1
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00b      	beq.n	800bb2e <HAL_UART_IRQHandler+0xae>
 800bb16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d005      	beq.n	800bb2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb26:	f043 0201 	orr.w	r2, r3, #1
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb32:	f003 0304 	and.w	r3, r3, #4
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00b      	beq.n	800bb52 <HAL_UART_IRQHandler+0xd2>
 800bb3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb3e:	f003 0301 	and.w	r3, r3, #1
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d005      	beq.n	800bb52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb4a:	f043 0202 	orr.w	r2, r3, #2
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb56:	f003 0302 	and.w	r3, r3, #2
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00b      	beq.n	800bb76 <HAL_UART_IRQHandler+0xf6>
 800bb5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb62:	f003 0301 	and.w	r3, r3, #1
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d005      	beq.n	800bb76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb6e:	f043 0204 	orr.w	r2, r3, #4
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bb76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb7a:	f003 0308 	and.w	r3, r3, #8
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d011      	beq.n	800bba6 <HAL_UART_IRQHandler+0x126>
 800bb82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb86:	f003 0320 	and.w	r3, r3, #32
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d105      	bne.n	800bb9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb92:	f003 0301 	and.w	r3, r3, #1
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d005      	beq.n	800bba6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb9e:	f043 0208 	orr.w	r2, r3, #8
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 81f2 	beq.w	800bf94 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bbb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbb4:	f003 0320 	and.w	r3, r3, #32
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d008      	beq.n	800bbce <HAL_UART_IRQHandler+0x14e>
 800bbbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbc0:	f003 0320 	and.w	r3, r3, #32
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d002      	beq.n	800bbce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 faee 	bl	800c1aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	695b      	ldr	r3, [r3, #20]
 800bbd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	bf14      	ite	ne
 800bbdc:	2301      	movne	r3, #1
 800bbde:	2300      	moveq	r3, #0
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbea:	f003 0308 	and.w	r3, r3, #8
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d103      	bne.n	800bbfa <HAL_UART_IRQHandler+0x17a>
 800bbf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d04f      	beq.n	800bc9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 f9f8 	bl	800bff0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d041      	beq.n	800bc92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3314      	adds	r3, #20
 800bc14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bc1c:	e853 3f00 	ldrex	r3, [r3]
 800bc20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bc24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bc28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	3314      	adds	r3, #20
 800bc36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bc3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bc3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bc46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bc4a:	e841 2300 	strex	r3, r2, [r1]
 800bc4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bc52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1d9      	bne.n	800bc0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d013      	beq.n	800bc8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc66:	4a7e      	ldr	r2, [pc, #504]	; (800be60 <HAL_UART_IRQHandler+0x3e0>)
 800bc68:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fd f86c 	bl	8008d4c <HAL_DMA_Abort_IT>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d016      	beq.n	800bca8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bc84:	4610      	mov	r0, r2
 800bc86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc88:	e00e      	b.n	800bca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 f99c 	bl	800bfc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc90:	e00a      	b.n	800bca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 f998 	bl	800bfc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc98:	e006      	b.n	800bca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 f994 	bl	800bfc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bca6:	e175      	b.n	800bf94 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bca8:	bf00      	nop
    return;
 800bcaa:	e173      	b.n	800bf94 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	f040 814f 	bne.w	800bf54 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bcb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcba:	f003 0310 	and.w	r3, r3, #16
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f000 8148 	beq.w	800bf54 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bcc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcc8:	f003 0310 	and.w	r3, r3, #16
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f000 8141 	beq.w	800bf54 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60bb      	str	r3, [r7, #8]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	60bb      	str	r3, [r7, #8]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	60bb      	str	r3, [r7, #8]
 800bce6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	695b      	ldr	r3, [r3, #20]
 800bcee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f000 80b6 	beq.w	800be64 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f000 8145 	beq.w	800bf98 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bd12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd16:	429a      	cmp	r2, r3
 800bd18:	f080 813e 	bcs.w	800bf98 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd28:	699b      	ldr	r3, [r3, #24]
 800bd2a:	2b20      	cmp	r3, #32
 800bd2c:	f000 8088 	beq.w	800be40 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	330c      	adds	r3, #12
 800bd36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd3e:	e853 3f00 	ldrex	r3, [r3]
 800bd42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bd46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	330c      	adds	r3, #12
 800bd58:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bd5c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bd60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd64:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bd68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bd6c:	e841 2300 	strex	r3, r2, [r1]
 800bd70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bd74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1d9      	bne.n	800bd30 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	3314      	adds	r3, #20
 800bd82:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd86:	e853 3f00 	ldrex	r3, [r3]
 800bd8a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd8e:	f023 0301 	bic.w	r3, r3, #1
 800bd92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3314      	adds	r3, #20
 800bd9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bda0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bda4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bda8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bdac:	e841 2300 	strex	r3, r2, [r1]
 800bdb0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bdb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1e1      	bne.n	800bd7c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	3314      	adds	r3, #20
 800bdbe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdc2:	e853 3f00 	ldrex	r3, [r3]
 800bdc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bdc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3314      	adds	r3, #20
 800bdd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bddc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bdde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bde2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bde4:	e841 2300 	strex	r3, r2, [r1]
 800bde8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bdea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1e3      	bne.n	800bdb8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2220      	movs	r2, #32
 800bdf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	330c      	adds	r3, #12
 800be04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be08:	e853 3f00 	ldrex	r3, [r3]
 800be0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be10:	f023 0310 	bic.w	r3, r3, #16
 800be14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	330c      	adds	r3, #12
 800be1e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800be22:	65ba      	str	r2, [r7, #88]	; 0x58
 800be24:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be2a:	e841 2300 	strex	r3, r2, [r1]
 800be2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1e3      	bne.n	800bdfe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fc ff4b 	bl	8008cd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2202      	movs	r2, #2
 800be44:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be4e:	b29b      	uxth	r3, r3
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	b29b      	uxth	r3, r3
 800be54:	4619      	mov	r1, r3
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f8bf 	bl	800bfda <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be5c:	e09c      	b.n	800bf98 <HAL_UART_IRQHandler+0x518>
 800be5e:	bf00      	nop
 800be60:	0800c0b5 	.word	0x0800c0b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	1ad3      	subs	r3, r2, r3
 800be70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be78:	b29b      	uxth	r3, r3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 808e 	beq.w	800bf9c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800be80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be84:	2b00      	cmp	r3, #0
 800be86:	f000 8089 	beq.w	800bf9c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	330c      	adds	r3, #12
 800be90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be94:	e853 3f00 	ldrex	r3, [r3]
 800be98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bea0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	330c      	adds	r3, #12
 800beaa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800beae:	647a      	str	r2, [r7, #68]	; 0x44
 800beb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800beb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beb6:	e841 2300 	strex	r3, r2, [r1]
 800beba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1e3      	bne.n	800be8a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	3314      	adds	r3, #20
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	e853 3f00 	ldrex	r3, [r3]
 800bed0:	623b      	str	r3, [r7, #32]
   return(result);
 800bed2:	6a3b      	ldr	r3, [r7, #32]
 800bed4:	f023 0301 	bic.w	r3, r3, #1
 800bed8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	3314      	adds	r3, #20
 800bee2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bee6:	633a      	str	r2, [r7, #48]	; 0x30
 800bee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800beec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beee:	e841 2300 	strex	r3, r2, [r1]
 800bef2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1e3      	bne.n	800bec2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2220      	movs	r2, #32
 800befe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	330c      	adds	r3, #12
 800bf0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	e853 3f00 	ldrex	r3, [r3]
 800bf16:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f023 0310 	bic.w	r3, r3, #16
 800bf1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	330c      	adds	r3, #12
 800bf28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bf2c:	61fa      	str	r2, [r7, #28]
 800bf2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf30:	69b9      	ldr	r1, [r7, #24]
 800bf32:	69fa      	ldr	r2, [r7, #28]
 800bf34:	e841 2300 	strex	r3, r2, [r1]
 800bf38:	617b      	str	r3, [r7, #20]
   return(result);
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1e3      	bne.n	800bf08 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2202      	movs	r2, #2
 800bf44:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 f844 	bl	800bfda <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bf52:	e023      	b.n	800bf9c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bf54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d009      	beq.n	800bf74 <HAL_UART_IRQHandler+0x4f4>
 800bf60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d003      	beq.n	800bf74 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 f8b5 	bl	800c0dc <UART_Transmit_IT>
    return;
 800bf72:	e014      	b.n	800bf9e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bf74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00e      	beq.n	800bf9e <HAL_UART_IRQHandler+0x51e>
 800bf80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d008      	beq.n	800bf9e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 f8f4 	bl	800c17a <UART_EndTransmit_IT>
    return;
 800bf92:	e004      	b.n	800bf9e <HAL_UART_IRQHandler+0x51e>
    return;
 800bf94:	bf00      	nop
 800bf96:	e002      	b.n	800bf9e <HAL_UART_IRQHandler+0x51e>
      return;
 800bf98:	bf00      	nop
 800bf9a:	e000      	b.n	800bf9e <HAL_UART_IRQHandler+0x51e>
      return;
 800bf9c:	bf00      	nop
  }
}
 800bf9e:	37e8      	adds	r7, #232	; 0xe8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bfac:	bf00      	nop
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bc80      	pop	{r7}
 800bfb4:	4770      	bx	lr

0800bfb6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bfb6:	b480      	push	{r7}
 800bfb8:	b083      	sub	sp, #12
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bfbe:	bf00      	nop
 800bfc0:	370c      	adds	r7, #12
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bc80      	pop	{r7}
 800bfc6:	4770      	bx	lr

0800bfc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bfd0:	bf00      	nop
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bc80      	pop	{r7}
 800bfd8:	4770      	bx	lr

0800bfda <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bfda:	b480      	push	{r7}
 800bfdc:	b083      	sub	sp, #12
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bfe6:	bf00      	nop
 800bfe8:	370c      	adds	r7, #12
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bc80      	pop	{r7}
 800bfee:	4770      	bx	lr

0800bff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b095      	sub	sp, #84	; 0x54
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	330c      	adds	r3, #12
 800bffe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c002:	e853 3f00 	ldrex	r3, [r3]
 800c006:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c00e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	330c      	adds	r3, #12
 800c016:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c018:	643a      	str	r2, [r7, #64]	; 0x40
 800c01a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c01e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c020:	e841 2300 	strex	r3, r2, [r1]
 800c024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1e5      	bne.n	800bff8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3314      	adds	r3, #20
 800c032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c034:	6a3b      	ldr	r3, [r7, #32]
 800c036:	e853 3f00 	ldrex	r3, [r3]
 800c03a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	f023 0301 	bic.w	r3, r3, #1
 800c042:	64bb      	str	r3, [r7, #72]	; 0x48
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3314      	adds	r3, #20
 800c04a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c04c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c04e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c054:	e841 2300 	strex	r3, r2, [r1]
 800c058:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1e5      	bne.n	800c02c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c064:	2b01      	cmp	r3, #1
 800c066:	d119      	bne.n	800c09c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	330c      	adds	r3, #12
 800c06e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	e853 3f00 	ldrex	r3, [r3]
 800c076:	60bb      	str	r3, [r7, #8]
   return(result);
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	f023 0310 	bic.w	r3, r3, #16
 800c07e:	647b      	str	r3, [r7, #68]	; 0x44
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	330c      	adds	r3, #12
 800c086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c088:	61ba      	str	r2, [r7, #24]
 800c08a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08c:	6979      	ldr	r1, [r7, #20]
 800c08e:	69ba      	ldr	r2, [r7, #24]
 800c090:	e841 2300 	strex	r3, r2, [r1]
 800c094:	613b      	str	r3, [r7, #16]
   return(result);
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1e5      	bne.n	800c068 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2220      	movs	r2, #32
 800c0a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c0aa:	bf00      	nop
 800c0ac:	3754      	adds	r7, #84	; 0x54
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bc80      	pop	{r7}
 800c0b2:	4770      	bx	lr

0800c0b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0ce:	68f8      	ldr	r0, [r7, #12]
 800c0d0:	f7ff ff7a 	bl	800bfc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0d4:	bf00      	nop
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	2b21      	cmp	r3, #33	; 0x21
 800c0ee:	d13e      	bne.n	800c16e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0f8:	d114      	bne.n	800c124 <UART_Transmit_IT+0x48>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	691b      	ldr	r3, [r3, #16]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d110      	bne.n	800c124 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a1b      	ldr	r3, [r3, #32]
 800c106:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	461a      	mov	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c116:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6a1b      	ldr	r3, [r3, #32]
 800c11c:	1c9a      	adds	r2, r3, #2
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	621a      	str	r2, [r3, #32]
 800c122:	e008      	b.n	800c136 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a1b      	ldr	r3, [r3, #32]
 800c128:	1c59      	adds	r1, r3, #1
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	6211      	str	r1, [r2, #32]
 800c12e:	781a      	ldrb	r2, [r3, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	3b01      	subs	r3, #1
 800c13e:	b29b      	uxth	r3, r3
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	4619      	mov	r1, r3
 800c144:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10f      	bne.n	800c16a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68da      	ldr	r2, [r3, #12]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c158:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68da      	ldr	r2, [r3, #12]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c168:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	e000      	b.n	800c170 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c16e:	2302      	movs	r3, #2
  }
}
 800c170:	4618      	mov	r0, r3
 800c172:	3714      	adds	r7, #20
 800c174:	46bd      	mov	sp, r7
 800c176:	bc80      	pop	{r7}
 800c178:	4770      	bx	lr

0800c17a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b082      	sub	sp, #8
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	68da      	ldr	r2, [r3, #12]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c190:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2220      	movs	r2, #32
 800c196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7ff ff02 	bl	800bfa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b08c      	sub	sp, #48	; 0x30
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b22      	cmp	r3, #34	; 0x22
 800c1bc:	f040 80ae 	bne.w	800c31c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1c8:	d117      	bne.n	800c1fa <UART_Receive_IT+0x50>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d113      	bne.n	800c1fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1e8:	b29a      	uxth	r2, r3
 800c1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1f2:	1c9a      	adds	r2, r3, #2
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	629a      	str	r2, [r3, #40]	; 0x28
 800c1f8:	e026      	b.n	800c248 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c200:	2300      	movs	r3, #0
 800c202:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c20c:	d007      	beq.n	800c21e <UART_Receive_IT+0x74>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	689b      	ldr	r3, [r3, #8]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10a      	bne.n	800c22c <UART_Receive_IT+0x82>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d106      	bne.n	800c22c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	b2da      	uxtb	r2, r3
 800c226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c228:	701a      	strb	r2, [r3, #0]
 800c22a:	e008      	b.n	800c23e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	b2db      	uxtb	r3, r3
 800c234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c238:	b2da      	uxtb	r2, r3
 800c23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c242:	1c5a      	adds	r2, r3, #1
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	3b01      	subs	r3, #1
 800c250:	b29b      	uxth	r3, r3
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	4619      	mov	r1, r3
 800c256:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d15d      	bne.n	800c318 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	68da      	ldr	r2, [r3, #12]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f022 0220 	bic.w	r2, r2, #32
 800c26a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68da      	ldr	r2, [r3, #12]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c27a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	695a      	ldr	r2, [r3, #20]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f022 0201 	bic.w	r2, r2, #1
 800c28a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2220      	movs	r2, #32
 800c290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d135      	bne.n	800c30e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	330c      	adds	r3, #12
 800c2ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	e853 3f00 	ldrex	r3, [r3]
 800c2b6:	613b      	str	r3, [r7, #16]
   return(result);
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	f023 0310 	bic.w	r3, r3, #16
 800c2be:	627b      	str	r3, [r7, #36]	; 0x24
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	330c      	adds	r3, #12
 800c2c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2c8:	623a      	str	r2, [r7, #32]
 800c2ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2cc:	69f9      	ldr	r1, [r7, #28]
 800c2ce:	6a3a      	ldr	r2, [r7, #32]
 800c2d0:	e841 2300 	strex	r3, r2, [r1]
 800c2d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1e5      	bne.n	800c2a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 0310 	and.w	r3, r3, #16
 800c2e6:	2b10      	cmp	r3, #16
 800c2e8:	d10a      	bne.n	800c300 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	60fb      	str	r3, [r7, #12]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	60fb      	str	r3, [r7, #12]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	60fb      	str	r3, [r7, #12]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7ff fe67 	bl	800bfda <HAL_UARTEx_RxEventCallback>
 800c30c:	e002      	b.n	800c314 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7ff fe51 	bl	800bfb6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c314:	2300      	movs	r3, #0
 800c316:	e002      	b.n	800c31e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	e000      	b.n	800c31e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c31c:	2302      	movs	r3, #2
  }
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3730      	adds	r7, #48	; 0x30
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
	...

0800c328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	691b      	ldr	r3, [r3, #16]
 800c336:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	68da      	ldr	r2, [r3, #12]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	430a      	orrs	r2, r1
 800c344:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	689a      	ldr	r2, [r3, #8]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	431a      	orrs	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	695b      	ldr	r3, [r3, #20]
 800c354:	4313      	orrs	r3, r2
 800c356:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c362:	f023 030c 	bic.w	r3, r3, #12
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	6812      	ldr	r2, [r2, #0]
 800c36a:	68b9      	ldr	r1, [r7, #8]
 800c36c:	430b      	orrs	r3, r1
 800c36e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	695b      	ldr	r3, [r3, #20]
 800c376:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	699a      	ldr	r2, [r3, #24]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	430a      	orrs	r2, r1
 800c384:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a2c      	ldr	r2, [pc, #176]	; (800c43c <UART_SetConfig+0x114>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d103      	bne.n	800c398 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c390:	f7fe fe8c 	bl	800b0ac <HAL_RCC_GetPCLK2Freq>
 800c394:	60f8      	str	r0, [r7, #12]
 800c396:	e002      	b.n	800c39e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c398:	f7fe fe74 	bl	800b084 <HAL_RCC_GetPCLK1Freq>
 800c39c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	009a      	lsls	r2, r3, #2
 800c3a8:	441a      	add	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3b4:	4a22      	ldr	r2, [pc, #136]	; (800c440 <UART_SetConfig+0x118>)
 800c3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ba:	095b      	lsrs	r3, r3, #5
 800c3bc:	0119      	lsls	r1, r3, #4
 800c3be:	68fa      	ldr	r2, [r7, #12]
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	4413      	add	r3, r2
 800c3c6:	009a      	lsls	r2, r3, #2
 800c3c8:	441a      	add	r2, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c3d4:	4b1a      	ldr	r3, [pc, #104]	; (800c440 <UART_SetConfig+0x118>)
 800c3d6:	fba3 0302 	umull	r0, r3, r3, r2
 800c3da:	095b      	lsrs	r3, r3, #5
 800c3dc:	2064      	movs	r0, #100	; 0x64
 800c3de:	fb00 f303 	mul.w	r3, r0, r3
 800c3e2:	1ad3      	subs	r3, r2, r3
 800c3e4:	011b      	lsls	r3, r3, #4
 800c3e6:	3332      	adds	r3, #50	; 0x32
 800c3e8:	4a15      	ldr	r2, [pc, #84]	; (800c440 <UART_SetConfig+0x118>)
 800c3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ee:	095b      	lsrs	r3, r3, #5
 800c3f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3f4:	4419      	add	r1, r3
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	009a      	lsls	r2, r3, #2
 800c400:	441a      	add	r2, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	fbb2 f2f3 	udiv	r2, r2, r3
 800c40c:	4b0c      	ldr	r3, [pc, #48]	; (800c440 <UART_SetConfig+0x118>)
 800c40e:	fba3 0302 	umull	r0, r3, r3, r2
 800c412:	095b      	lsrs	r3, r3, #5
 800c414:	2064      	movs	r0, #100	; 0x64
 800c416:	fb00 f303 	mul.w	r3, r0, r3
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	011b      	lsls	r3, r3, #4
 800c41e:	3332      	adds	r3, #50	; 0x32
 800c420:	4a07      	ldr	r2, [pc, #28]	; (800c440 <UART_SetConfig+0x118>)
 800c422:	fba2 2303 	umull	r2, r3, r2, r3
 800c426:	095b      	lsrs	r3, r3, #5
 800c428:	f003 020f 	and.w	r2, r3, #15
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	440a      	add	r2, r1
 800c432:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c434:	bf00      	nop
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	40013800 	.word	0x40013800
 800c440:	51eb851f 	.word	0x51eb851f

0800c444 <__itoa>:
 800c444:	1e93      	subs	r3, r2, #2
 800c446:	2b22      	cmp	r3, #34	; 0x22
 800c448:	b510      	push	{r4, lr}
 800c44a:	460c      	mov	r4, r1
 800c44c:	d904      	bls.n	800c458 <__itoa+0x14>
 800c44e:	2300      	movs	r3, #0
 800c450:	461c      	mov	r4, r3
 800c452:	700b      	strb	r3, [r1, #0]
 800c454:	4620      	mov	r0, r4
 800c456:	bd10      	pop	{r4, pc}
 800c458:	2a0a      	cmp	r2, #10
 800c45a:	d109      	bne.n	800c470 <__itoa+0x2c>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	da07      	bge.n	800c470 <__itoa+0x2c>
 800c460:	232d      	movs	r3, #45	; 0x2d
 800c462:	700b      	strb	r3, [r1, #0]
 800c464:	2101      	movs	r1, #1
 800c466:	4240      	negs	r0, r0
 800c468:	4421      	add	r1, r4
 800c46a:	f000 f8d9 	bl	800c620 <__utoa>
 800c46e:	e7f1      	b.n	800c454 <__itoa+0x10>
 800c470:	2100      	movs	r1, #0
 800c472:	e7f9      	b.n	800c468 <__itoa+0x24>

0800c474 <itoa>:
 800c474:	f7ff bfe6 	b.w	800c444 <__itoa>

0800c478 <malloc>:
 800c478:	4b02      	ldr	r3, [pc, #8]	; (800c484 <malloc+0xc>)
 800c47a:	4601      	mov	r1, r0
 800c47c:	6818      	ldr	r0, [r3, #0]
 800c47e:	f000 b823 	b.w	800c4c8 <_malloc_r>
 800c482:	bf00      	nop
 800c484:	200000f8 	.word	0x200000f8

0800c488 <sbrk_aligned>:
 800c488:	b570      	push	{r4, r5, r6, lr}
 800c48a:	4e0e      	ldr	r6, [pc, #56]	; (800c4c4 <sbrk_aligned+0x3c>)
 800c48c:	460c      	mov	r4, r1
 800c48e:	6831      	ldr	r1, [r6, #0]
 800c490:	4605      	mov	r5, r0
 800c492:	b911      	cbnz	r1, 800c49a <sbrk_aligned+0x12>
 800c494:	f000 f91e 	bl	800c6d4 <_sbrk_r>
 800c498:	6030      	str	r0, [r6, #0]
 800c49a:	4621      	mov	r1, r4
 800c49c:	4628      	mov	r0, r5
 800c49e:	f000 f919 	bl	800c6d4 <_sbrk_r>
 800c4a2:	1c43      	adds	r3, r0, #1
 800c4a4:	d00a      	beq.n	800c4bc <sbrk_aligned+0x34>
 800c4a6:	1cc4      	adds	r4, r0, #3
 800c4a8:	f024 0403 	bic.w	r4, r4, #3
 800c4ac:	42a0      	cmp	r0, r4
 800c4ae:	d007      	beq.n	800c4c0 <sbrk_aligned+0x38>
 800c4b0:	1a21      	subs	r1, r4, r0
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f000 f90e 	bl	800c6d4 <_sbrk_r>
 800c4b8:	3001      	adds	r0, #1
 800c4ba:	d101      	bne.n	800c4c0 <sbrk_aligned+0x38>
 800c4bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	bd70      	pop	{r4, r5, r6, pc}
 800c4c4:	20000498 	.word	0x20000498

0800c4c8 <_malloc_r>:
 800c4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4cc:	1ccd      	adds	r5, r1, #3
 800c4ce:	f025 0503 	bic.w	r5, r5, #3
 800c4d2:	3508      	adds	r5, #8
 800c4d4:	2d0c      	cmp	r5, #12
 800c4d6:	bf38      	it	cc
 800c4d8:	250c      	movcc	r5, #12
 800c4da:	2d00      	cmp	r5, #0
 800c4dc:	4607      	mov	r7, r0
 800c4de:	db01      	blt.n	800c4e4 <_malloc_r+0x1c>
 800c4e0:	42a9      	cmp	r1, r5
 800c4e2:	d905      	bls.n	800c4f0 <_malloc_r+0x28>
 800c4e4:	230c      	movs	r3, #12
 800c4e6:	2600      	movs	r6, #0
 800c4e8:	603b      	str	r3, [r7, #0]
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c5c4 <_malloc_r+0xfc>
 800c4f4:	f000 f868 	bl	800c5c8 <__malloc_lock>
 800c4f8:	f8d8 3000 	ldr.w	r3, [r8]
 800c4fc:	461c      	mov	r4, r3
 800c4fe:	bb5c      	cbnz	r4, 800c558 <_malloc_r+0x90>
 800c500:	4629      	mov	r1, r5
 800c502:	4638      	mov	r0, r7
 800c504:	f7ff ffc0 	bl	800c488 <sbrk_aligned>
 800c508:	1c43      	adds	r3, r0, #1
 800c50a:	4604      	mov	r4, r0
 800c50c:	d155      	bne.n	800c5ba <_malloc_r+0xf2>
 800c50e:	f8d8 4000 	ldr.w	r4, [r8]
 800c512:	4626      	mov	r6, r4
 800c514:	2e00      	cmp	r6, #0
 800c516:	d145      	bne.n	800c5a4 <_malloc_r+0xdc>
 800c518:	2c00      	cmp	r4, #0
 800c51a:	d048      	beq.n	800c5ae <_malloc_r+0xe6>
 800c51c:	6823      	ldr	r3, [r4, #0]
 800c51e:	4631      	mov	r1, r6
 800c520:	4638      	mov	r0, r7
 800c522:	eb04 0903 	add.w	r9, r4, r3
 800c526:	f000 f8d5 	bl	800c6d4 <_sbrk_r>
 800c52a:	4581      	cmp	r9, r0
 800c52c:	d13f      	bne.n	800c5ae <_malloc_r+0xe6>
 800c52e:	6821      	ldr	r1, [r4, #0]
 800c530:	4638      	mov	r0, r7
 800c532:	1a6d      	subs	r5, r5, r1
 800c534:	4629      	mov	r1, r5
 800c536:	f7ff ffa7 	bl	800c488 <sbrk_aligned>
 800c53a:	3001      	adds	r0, #1
 800c53c:	d037      	beq.n	800c5ae <_malloc_r+0xe6>
 800c53e:	6823      	ldr	r3, [r4, #0]
 800c540:	442b      	add	r3, r5
 800c542:	6023      	str	r3, [r4, #0]
 800c544:	f8d8 3000 	ldr.w	r3, [r8]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d038      	beq.n	800c5be <_malloc_r+0xf6>
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	42a2      	cmp	r2, r4
 800c550:	d12b      	bne.n	800c5aa <_malloc_r+0xe2>
 800c552:	2200      	movs	r2, #0
 800c554:	605a      	str	r2, [r3, #4]
 800c556:	e00f      	b.n	800c578 <_malloc_r+0xb0>
 800c558:	6822      	ldr	r2, [r4, #0]
 800c55a:	1b52      	subs	r2, r2, r5
 800c55c:	d41f      	bmi.n	800c59e <_malloc_r+0xd6>
 800c55e:	2a0b      	cmp	r2, #11
 800c560:	d917      	bls.n	800c592 <_malloc_r+0xca>
 800c562:	1961      	adds	r1, r4, r5
 800c564:	42a3      	cmp	r3, r4
 800c566:	6025      	str	r5, [r4, #0]
 800c568:	bf18      	it	ne
 800c56a:	6059      	strne	r1, [r3, #4]
 800c56c:	6863      	ldr	r3, [r4, #4]
 800c56e:	bf08      	it	eq
 800c570:	f8c8 1000 	streq.w	r1, [r8]
 800c574:	5162      	str	r2, [r4, r5]
 800c576:	604b      	str	r3, [r1, #4]
 800c578:	4638      	mov	r0, r7
 800c57a:	f104 060b 	add.w	r6, r4, #11
 800c57e:	f000 f829 	bl	800c5d4 <__malloc_unlock>
 800c582:	f026 0607 	bic.w	r6, r6, #7
 800c586:	1d23      	adds	r3, r4, #4
 800c588:	1af2      	subs	r2, r6, r3
 800c58a:	d0ae      	beq.n	800c4ea <_malloc_r+0x22>
 800c58c:	1b9b      	subs	r3, r3, r6
 800c58e:	50a3      	str	r3, [r4, r2]
 800c590:	e7ab      	b.n	800c4ea <_malloc_r+0x22>
 800c592:	42a3      	cmp	r3, r4
 800c594:	6862      	ldr	r2, [r4, #4]
 800c596:	d1dd      	bne.n	800c554 <_malloc_r+0x8c>
 800c598:	f8c8 2000 	str.w	r2, [r8]
 800c59c:	e7ec      	b.n	800c578 <_malloc_r+0xb0>
 800c59e:	4623      	mov	r3, r4
 800c5a0:	6864      	ldr	r4, [r4, #4]
 800c5a2:	e7ac      	b.n	800c4fe <_malloc_r+0x36>
 800c5a4:	4634      	mov	r4, r6
 800c5a6:	6876      	ldr	r6, [r6, #4]
 800c5a8:	e7b4      	b.n	800c514 <_malloc_r+0x4c>
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	e7cc      	b.n	800c548 <_malloc_r+0x80>
 800c5ae:	230c      	movs	r3, #12
 800c5b0:	4638      	mov	r0, r7
 800c5b2:	603b      	str	r3, [r7, #0]
 800c5b4:	f000 f80e 	bl	800c5d4 <__malloc_unlock>
 800c5b8:	e797      	b.n	800c4ea <_malloc_r+0x22>
 800c5ba:	6025      	str	r5, [r4, #0]
 800c5bc:	e7dc      	b.n	800c578 <_malloc_r+0xb0>
 800c5be:	605b      	str	r3, [r3, #4]
 800c5c0:	deff      	udf	#255	; 0xff
 800c5c2:	bf00      	nop
 800c5c4:	20000494 	.word	0x20000494

0800c5c8 <__malloc_lock>:
 800c5c8:	4801      	ldr	r0, [pc, #4]	; (800c5d0 <__malloc_lock+0x8>)
 800c5ca:	f000 b8bd 	b.w	800c748 <__retarget_lock_acquire_recursive>
 800c5ce:	bf00      	nop
 800c5d0:	200005d4 	.word	0x200005d4

0800c5d4 <__malloc_unlock>:
 800c5d4:	4801      	ldr	r0, [pc, #4]	; (800c5dc <__malloc_unlock+0x8>)
 800c5d6:	f000 b8b8 	b.w	800c74a <__retarget_lock_release_recursive>
 800c5da:	bf00      	nop
 800c5dc:	200005d4 	.word	0x200005d4

0800c5e0 <siprintf>:
 800c5e0:	b40e      	push	{r1, r2, r3}
 800c5e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5e6:	b500      	push	{lr}
 800c5e8:	b09c      	sub	sp, #112	; 0x70
 800c5ea:	ab1d      	add	r3, sp, #116	; 0x74
 800c5ec:	9002      	str	r0, [sp, #8]
 800c5ee:	9006      	str	r0, [sp, #24]
 800c5f0:	9107      	str	r1, [sp, #28]
 800c5f2:	9104      	str	r1, [sp, #16]
 800c5f4:	4808      	ldr	r0, [pc, #32]	; (800c618 <siprintf+0x38>)
 800c5f6:	4909      	ldr	r1, [pc, #36]	; (800c61c <siprintf+0x3c>)
 800c5f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5fc:	9105      	str	r1, [sp, #20]
 800c5fe:	6800      	ldr	r0, [r0, #0]
 800c600:	a902      	add	r1, sp, #8
 800c602:	9301      	str	r3, [sp, #4]
 800c604:	f000 f94c 	bl	800c8a0 <_svfiprintf_r>
 800c608:	2200      	movs	r2, #0
 800c60a:	9b02      	ldr	r3, [sp, #8]
 800c60c:	701a      	strb	r2, [r3, #0]
 800c60e:	b01c      	add	sp, #112	; 0x70
 800c610:	f85d eb04 	ldr.w	lr, [sp], #4
 800c614:	b003      	add	sp, #12
 800c616:	4770      	bx	lr
 800c618:	200000f8 	.word	0x200000f8
 800c61c:	ffff0208 	.word	0xffff0208

0800c620 <__utoa>:
 800c620:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c622:	b08b      	sub	sp, #44	; 0x2c
 800c624:	4605      	mov	r5, r0
 800c626:	460b      	mov	r3, r1
 800c628:	466e      	mov	r6, sp
 800c62a:	4c1d      	ldr	r4, [pc, #116]	; (800c6a0 <__utoa+0x80>)
 800c62c:	f104 0c20 	add.w	ip, r4, #32
 800c630:	4637      	mov	r7, r6
 800c632:	6820      	ldr	r0, [r4, #0]
 800c634:	6861      	ldr	r1, [r4, #4]
 800c636:	3408      	adds	r4, #8
 800c638:	c703      	stmia	r7!, {r0, r1}
 800c63a:	4564      	cmp	r4, ip
 800c63c:	463e      	mov	r6, r7
 800c63e:	d1f7      	bne.n	800c630 <__utoa+0x10>
 800c640:	7921      	ldrb	r1, [r4, #4]
 800c642:	6820      	ldr	r0, [r4, #0]
 800c644:	7139      	strb	r1, [r7, #4]
 800c646:	1e91      	subs	r1, r2, #2
 800c648:	2922      	cmp	r1, #34	; 0x22
 800c64a:	6038      	str	r0, [r7, #0]
 800c64c:	f04f 0100 	mov.w	r1, #0
 800c650:	d904      	bls.n	800c65c <__utoa+0x3c>
 800c652:	7019      	strb	r1, [r3, #0]
 800c654:	460b      	mov	r3, r1
 800c656:	4618      	mov	r0, r3
 800c658:	b00b      	add	sp, #44	; 0x2c
 800c65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c65c:	1e58      	subs	r0, r3, #1
 800c65e:	4684      	mov	ip, r0
 800c660:	fbb5 f7f2 	udiv	r7, r5, r2
 800c664:	fb02 5617 	mls	r6, r2, r7, r5
 800c668:	3628      	adds	r6, #40	; 0x28
 800c66a:	446e      	add	r6, sp
 800c66c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c670:	460c      	mov	r4, r1
 800c672:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c676:	462e      	mov	r6, r5
 800c678:	42b2      	cmp	r2, r6
 800c67a:	463d      	mov	r5, r7
 800c67c:	f101 0101 	add.w	r1, r1, #1
 800c680:	d9ee      	bls.n	800c660 <__utoa+0x40>
 800c682:	2200      	movs	r2, #0
 800c684:	545a      	strb	r2, [r3, r1]
 800c686:	1919      	adds	r1, r3, r4
 800c688:	1aa5      	subs	r5, r4, r2
 800c68a:	42aa      	cmp	r2, r5
 800c68c:	dae3      	bge.n	800c656 <__utoa+0x36>
 800c68e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c692:	780e      	ldrb	r6, [r1, #0]
 800c694:	3201      	adds	r2, #1
 800c696:	7006      	strb	r6, [r0, #0]
 800c698:	f801 5901 	strb.w	r5, [r1], #-1
 800c69c:	e7f4      	b.n	800c688 <__utoa+0x68>
 800c69e:	bf00      	nop
 800c6a0:	0800de92 	.word	0x0800de92

0800c6a4 <strcat>:
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	b510      	push	{r4, lr}
 800c6a8:	7814      	ldrb	r4, [r2, #0]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	3201      	adds	r2, #1
 800c6ae:	2c00      	cmp	r4, #0
 800c6b0:	d1fa      	bne.n	800c6a8 <strcat+0x4>
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6bc:	2a00      	cmp	r2, #0
 800c6be:	d1f9      	bne.n	800c6b4 <strcat+0x10>
 800c6c0:	bd10      	pop	{r4, pc}

0800c6c2 <memset>:
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	4402      	add	r2, r0
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d100      	bne.n	800c6cc <memset+0xa>
 800c6ca:	4770      	bx	lr
 800c6cc:	f803 1b01 	strb.w	r1, [r3], #1
 800c6d0:	e7f9      	b.n	800c6c6 <memset+0x4>
	...

0800c6d4 <_sbrk_r>:
 800c6d4:	b538      	push	{r3, r4, r5, lr}
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	4d05      	ldr	r5, [pc, #20]	; (800c6f0 <_sbrk_r+0x1c>)
 800c6da:	4604      	mov	r4, r0
 800c6dc:	4608      	mov	r0, r1
 800c6de:	602b      	str	r3, [r5, #0]
 800c6e0:	f7fc f808 	bl	80086f4 <_sbrk>
 800c6e4:	1c43      	adds	r3, r0, #1
 800c6e6:	d102      	bne.n	800c6ee <_sbrk_r+0x1a>
 800c6e8:	682b      	ldr	r3, [r5, #0]
 800c6ea:	b103      	cbz	r3, 800c6ee <_sbrk_r+0x1a>
 800c6ec:	6023      	str	r3, [r4, #0]
 800c6ee:	bd38      	pop	{r3, r4, r5, pc}
 800c6f0:	200005d8 	.word	0x200005d8

0800c6f4 <__errno>:
 800c6f4:	4b01      	ldr	r3, [pc, #4]	; (800c6fc <__errno+0x8>)
 800c6f6:	6818      	ldr	r0, [r3, #0]
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	200000f8 	.word	0x200000f8

0800c700 <__libc_init_array>:
 800c700:	b570      	push	{r4, r5, r6, lr}
 800c702:	2600      	movs	r6, #0
 800c704:	4d0c      	ldr	r5, [pc, #48]	; (800c738 <__libc_init_array+0x38>)
 800c706:	4c0d      	ldr	r4, [pc, #52]	; (800c73c <__libc_init_array+0x3c>)
 800c708:	1b64      	subs	r4, r4, r5
 800c70a:	10a4      	asrs	r4, r4, #2
 800c70c:	42a6      	cmp	r6, r4
 800c70e:	d109      	bne.n	800c724 <__libc_init_array+0x24>
 800c710:	f000 fbc6 	bl	800cea0 <_init>
 800c714:	2600      	movs	r6, #0
 800c716:	4d0a      	ldr	r5, [pc, #40]	; (800c740 <__libc_init_array+0x40>)
 800c718:	4c0a      	ldr	r4, [pc, #40]	; (800c744 <__libc_init_array+0x44>)
 800c71a:	1b64      	subs	r4, r4, r5
 800c71c:	10a4      	asrs	r4, r4, #2
 800c71e:	42a6      	cmp	r6, r4
 800c720:	d105      	bne.n	800c72e <__libc_init_array+0x2e>
 800c722:	bd70      	pop	{r4, r5, r6, pc}
 800c724:	f855 3b04 	ldr.w	r3, [r5], #4
 800c728:	4798      	blx	r3
 800c72a:	3601      	adds	r6, #1
 800c72c:	e7ee      	b.n	800c70c <__libc_init_array+0xc>
 800c72e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c732:	4798      	blx	r3
 800c734:	3601      	adds	r6, #1
 800c736:	e7f2      	b.n	800c71e <__libc_init_array+0x1e>
 800c738:	0800deec 	.word	0x0800deec
 800c73c:	0800deec 	.word	0x0800deec
 800c740:	0800deec 	.word	0x0800deec
 800c744:	0800def0 	.word	0x0800def0

0800c748 <__retarget_lock_acquire_recursive>:
 800c748:	4770      	bx	lr

0800c74a <__retarget_lock_release_recursive>:
 800c74a:	4770      	bx	lr

0800c74c <strcpy>:
 800c74c:	4603      	mov	r3, r0
 800c74e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c752:	f803 2b01 	strb.w	r2, [r3], #1
 800c756:	2a00      	cmp	r2, #0
 800c758:	d1f9      	bne.n	800c74e <strcpy+0x2>
 800c75a:	4770      	bx	lr

0800c75c <_free_r>:
 800c75c:	b538      	push	{r3, r4, r5, lr}
 800c75e:	4605      	mov	r5, r0
 800c760:	2900      	cmp	r1, #0
 800c762:	d040      	beq.n	800c7e6 <_free_r+0x8a>
 800c764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c768:	1f0c      	subs	r4, r1, #4
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	bfb8      	it	lt
 800c76e:	18e4      	addlt	r4, r4, r3
 800c770:	f7ff ff2a 	bl	800c5c8 <__malloc_lock>
 800c774:	4a1c      	ldr	r2, [pc, #112]	; (800c7e8 <_free_r+0x8c>)
 800c776:	6813      	ldr	r3, [r2, #0]
 800c778:	b933      	cbnz	r3, 800c788 <_free_r+0x2c>
 800c77a:	6063      	str	r3, [r4, #4]
 800c77c:	6014      	str	r4, [r2, #0]
 800c77e:	4628      	mov	r0, r5
 800c780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c784:	f7ff bf26 	b.w	800c5d4 <__malloc_unlock>
 800c788:	42a3      	cmp	r3, r4
 800c78a:	d908      	bls.n	800c79e <_free_r+0x42>
 800c78c:	6820      	ldr	r0, [r4, #0]
 800c78e:	1821      	adds	r1, r4, r0
 800c790:	428b      	cmp	r3, r1
 800c792:	bf01      	itttt	eq
 800c794:	6819      	ldreq	r1, [r3, #0]
 800c796:	685b      	ldreq	r3, [r3, #4]
 800c798:	1809      	addeq	r1, r1, r0
 800c79a:	6021      	streq	r1, [r4, #0]
 800c79c:	e7ed      	b.n	800c77a <_free_r+0x1e>
 800c79e:	461a      	mov	r2, r3
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	b10b      	cbz	r3, 800c7a8 <_free_r+0x4c>
 800c7a4:	42a3      	cmp	r3, r4
 800c7a6:	d9fa      	bls.n	800c79e <_free_r+0x42>
 800c7a8:	6811      	ldr	r1, [r2, #0]
 800c7aa:	1850      	adds	r0, r2, r1
 800c7ac:	42a0      	cmp	r0, r4
 800c7ae:	d10b      	bne.n	800c7c8 <_free_r+0x6c>
 800c7b0:	6820      	ldr	r0, [r4, #0]
 800c7b2:	4401      	add	r1, r0
 800c7b4:	1850      	adds	r0, r2, r1
 800c7b6:	4283      	cmp	r3, r0
 800c7b8:	6011      	str	r1, [r2, #0]
 800c7ba:	d1e0      	bne.n	800c77e <_free_r+0x22>
 800c7bc:	6818      	ldr	r0, [r3, #0]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	4408      	add	r0, r1
 800c7c2:	6010      	str	r0, [r2, #0]
 800c7c4:	6053      	str	r3, [r2, #4]
 800c7c6:	e7da      	b.n	800c77e <_free_r+0x22>
 800c7c8:	d902      	bls.n	800c7d0 <_free_r+0x74>
 800c7ca:	230c      	movs	r3, #12
 800c7cc:	602b      	str	r3, [r5, #0]
 800c7ce:	e7d6      	b.n	800c77e <_free_r+0x22>
 800c7d0:	6820      	ldr	r0, [r4, #0]
 800c7d2:	1821      	adds	r1, r4, r0
 800c7d4:	428b      	cmp	r3, r1
 800c7d6:	bf01      	itttt	eq
 800c7d8:	6819      	ldreq	r1, [r3, #0]
 800c7da:	685b      	ldreq	r3, [r3, #4]
 800c7dc:	1809      	addeq	r1, r1, r0
 800c7de:	6021      	streq	r1, [r4, #0]
 800c7e0:	6063      	str	r3, [r4, #4]
 800c7e2:	6054      	str	r4, [r2, #4]
 800c7e4:	e7cb      	b.n	800c77e <_free_r+0x22>
 800c7e6:	bd38      	pop	{r3, r4, r5, pc}
 800c7e8:	20000494 	.word	0x20000494

0800c7ec <__ssputs_r>:
 800c7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f0:	461f      	mov	r7, r3
 800c7f2:	688e      	ldr	r6, [r1, #8]
 800c7f4:	4682      	mov	sl, r0
 800c7f6:	42be      	cmp	r6, r7
 800c7f8:	460c      	mov	r4, r1
 800c7fa:	4690      	mov	r8, r2
 800c7fc:	680b      	ldr	r3, [r1, #0]
 800c7fe:	d82c      	bhi.n	800c85a <__ssputs_r+0x6e>
 800c800:	898a      	ldrh	r2, [r1, #12]
 800c802:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c806:	d026      	beq.n	800c856 <__ssputs_r+0x6a>
 800c808:	6965      	ldr	r5, [r4, #20]
 800c80a:	6909      	ldr	r1, [r1, #16]
 800c80c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c810:	eba3 0901 	sub.w	r9, r3, r1
 800c814:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c818:	1c7b      	adds	r3, r7, #1
 800c81a:	444b      	add	r3, r9
 800c81c:	106d      	asrs	r5, r5, #1
 800c81e:	429d      	cmp	r5, r3
 800c820:	bf38      	it	cc
 800c822:	461d      	movcc	r5, r3
 800c824:	0553      	lsls	r3, r2, #21
 800c826:	d527      	bpl.n	800c878 <__ssputs_r+0x8c>
 800c828:	4629      	mov	r1, r5
 800c82a:	f7ff fe4d 	bl	800c4c8 <_malloc_r>
 800c82e:	4606      	mov	r6, r0
 800c830:	b360      	cbz	r0, 800c88c <__ssputs_r+0xa0>
 800c832:	464a      	mov	r2, r9
 800c834:	6921      	ldr	r1, [r4, #16]
 800c836:	f000 fb1c 	bl	800ce72 <memcpy>
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	6126      	str	r6, [r4, #16]
 800c848:	444e      	add	r6, r9
 800c84a:	6026      	str	r6, [r4, #0]
 800c84c:	463e      	mov	r6, r7
 800c84e:	6165      	str	r5, [r4, #20]
 800c850:	eba5 0509 	sub.w	r5, r5, r9
 800c854:	60a5      	str	r5, [r4, #8]
 800c856:	42be      	cmp	r6, r7
 800c858:	d900      	bls.n	800c85c <__ssputs_r+0x70>
 800c85a:	463e      	mov	r6, r7
 800c85c:	4632      	mov	r2, r6
 800c85e:	4641      	mov	r1, r8
 800c860:	6820      	ldr	r0, [r4, #0]
 800c862:	f000 fade 	bl	800ce22 <memmove>
 800c866:	2000      	movs	r0, #0
 800c868:	68a3      	ldr	r3, [r4, #8]
 800c86a:	1b9b      	subs	r3, r3, r6
 800c86c:	60a3      	str	r3, [r4, #8]
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	4433      	add	r3, r6
 800c872:	6023      	str	r3, [r4, #0]
 800c874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c878:	462a      	mov	r2, r5
 800c87a:	f000 faa3 	bl	800cdc4 <_realloc_r>
 800c87e:	4606      	mov	r6, r0
 800c880:	2800      	cmp	r0, #0
 800c882:	d1e0      	bne.n	800c846 <__ssputs_r+0x5a>
 800c884:	4650      	mov	r0, sl
 800c886:	6921      	ldr	r1, [r4, #16]
 800c888:	f7ff ff68 	bl	800c75c <_free_r>
 800c88c:	230c      	movs	r3, #12
 800c88e:	f8ca 3000 	str.w	r3, [sl]
 800c892:	89a3      	ldrh	r3, [r4, #12]
 800c894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c89c:	81a3      	strh	r3, [r4, #12]
 800c89e:	e7e9      	b.n	800c874 <__ssputs_r+0x88>

0800c8a0 <_svfiprintf_r>:
 800c8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a4:	4698      	mov	r8, r3
 800c8a6:	898b      	ldrh	r3, [r1, #12]
 800c8a8:	4607      	mov	r7, r0
 800c8aa:	061b      	lsls	r3, r3, #24
 800c8ac:	460d      	mov	r5, r1
 800c8ae:	4614      	mov	r4, r2
 800c8b0:	b09d      	sub	sp, #116	; 0x74
 800c8b2:	d50e      	bpl.n	800c8d2 <_svfiprintf_r+0x32>
 800c8b4:	690b      	ldr	r3, [r1, #16]
 800c8b6:	b963      	cbnz	r3, 800c8d2 <_svfiprintf_r+0x32>
 800c8b8:	2140      	movs	r1, #64	; 0x40
 800c8ba:	f7ff fe05 	bl	800c4c8 <_malloc_r>
 800c8be:	6028      	str	r0, [r5, #0]
 800c8c0:	6128      	str	r0, [r5, #16]
 800c8c2:	b920      	cbnz	r0, 800c8ce <_svfiprintf_r+0x2e>
 800c8c4:	230c      	movs	r3, #12
 800c8c6:	603b      	str	r3, [r7, #0]
 800c8c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8cc:	e0d0      	b.n	800ca70 <_svfiprintf_r+0x1d0>
 800c8ce:	2340      	movs	r3, #64	; 0x40
 800c8d0:	616b      	str	r3, [r5, #20]
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c8d6:	2320      	movs	r3, #32
 800c8d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8dc:	2330      	movs	r3, #48	; 0x30
 800c8de:	f04f 0901 	mov.w	r9, #1
 800c8e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8e6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ca88 <_svfiprintf_r+0x1e8>
 800c8ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8ee:	4623      	mov	r3, r4
 800c8f0:	469a      	mov	sl, r3
 800c8f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8f6:	b10a      	cbz	r2, 800c8fc <_svfiprintf_r+0x5c>
 800c8f8:	2a25      	cmp	r2, #37	; 0x25
 800c8fa:	d1f9      	bne.n	800c8f0 <_svfiprintf_r+0x50>
 800c8fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c900:	d00b      	beq.n	800c91a <_svfiprintf_r+0x7a>
 800c902:	465b      	mov	r3, fp
 800c904:	4622      	mov	r2, r4
 800c906:	4629      	mov	r1, r5
 800c908:	4638      	mov	r0, r7
 800c90a:	f7ff ff6f 	bl	800c7ec <__ssputs_r>
 800c90e:	3001      	adds	r0, #1
 800c910:	f000 80a9 	beq.w	800ca66 <_svfiprintf_r+0x1c6>
 800c914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c916:	445a      	add	r2, fp
 800c918:	9209      	str	r2, [sp, #36]	; 0x24
 800c91a:	f89a 3000 	ldrb.w	r3, [sl]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f000 80a1 	beq.w	800ca66 <_svfiprintf_r+0x1c6>
 800c924:	2300      	movs	r3, #0
 800c926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c92a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c92e:	f10a 0a01 	add.w	sl, sl, #1
 800c932:	9304      	str	r3, [sp, #16]
 800c934:	9307      	str	r3, [sp, #28]
 800c936:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c93a:	931a      	str	r3, [sp, #104]	; 0x68
 800c93c:	4654      	mov	r4, sl
 800c93e:	2205      	movs	r2, #5
 800c940:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c944:	4850      	ldr	r0, [pc, #320]	; (800ca88 <_svfiprintf_r+0x1e8>)
 800c946:	f000 fa86 	bl	800ce56 <memchr>
 800c94a:	9a04      	ldr	r2, [sp, #16]
 800c94c:	b9d8      	cbnz	r0, 800c986 <_svfiprintf_r+0xe6>
 800c94e:	06d0      	lsls	r0, r2, #27
 800c950:	bf44      	itt	mi
 800c952:	2320      	movmi	r3, #32
 800c954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c958:	0711      	lsls	r1, r2, #28
 800c95a:	bf44      	itt	mi
 800c95c:	232b      	movmi	r3, #43	; 0x2b
 800c95e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c962:	f89a 3000 	ldrb.w	r3, [sl]
 800c966:	2b2a      	cmp	r3, #42	; 0x2a
 800c968:	d015      	beq.n	800c996 <_svfiprintf_r+0xf6>
 800c96a:	4654      	mov	r4, sl
 800c96c:	2000      	movs	r0, #0
 800c96e:	f04f 0c0a 	mov.w	ip, #10
 800c972:	9a07      	ldr	r2, [sp, #28]
 800c974:	4621      	mov	r1, r4
 800c976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c97a:	3b30      	subs	r3, #48	; 0x30
 800c97c:	2b09      	cmp	r3, #9
 800c97e:	d94d      	bls.n	800ca1c <_svfiprintf_r+0x17c>
 800c980:	b1b0      	cbz	r0, 800c9b0 <_svfiprintf_r+0x110>
 800c982:	9207      	str	r2, [sp, #28]
 800c984:	e014      	b.n	800c9b0 <_svfiprintf_r+0x110>
 800c986:	eba0 0308 	sub.w	r3, r0, r8
 800c98a:	fa09 f303 	lsl.w	r3, r9, r3
 800c98e:	4313      	orrs	r3, r2
 800c990:	46a2      	mov	sl, r4
 800c992:	9304      	str	r3, [sp, #16]
 800c994:	e7d2      	b.n	800c93c <_svfiprintf_r+0x9c>
 800c996:	9b03      	ldr	r3, [sp, #12]
 800c998:	1d19      	adds	r1, r3, #4
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	9103      	str	r1, [sp, #12]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	bfbb      	ittet	lt
 800c9a2:	425b      	neglt	r3, r3
 800c9a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c9a8:	9307      	strge	r3, [sp, #28]
 800c9aa:	9307      	strlt	r3, [sp, #28]
 800c9ac:	bfb8      	it	lt
 800c9ae:	9204      	strlt	r2, [sp, #16]
 800c9b0:	7823      	ldrb	r3, [r4, #0]
 800c9b2:	2b2e      	cmp	r3, #46	; 0x2e
 800c9b4:	d10c      	bne.n	800c9d0 <_svfiprintf_r+0x130>
 800c9b6:	7863      	ldrb	r3, [r4, #1]
 800c9b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c9ba:	d134      	bne.n	800ca26 <_svfiprintf_r+0x186>
 800c9bc:	9b03      	ldr	r3, [sp, #12]
 800c9be:	3402      	adds	r4, #2
 800c9c0:	1d1a      	adds	r2, r3, #4
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	9203      	str	r2, [sp, #12]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	bfb8      	it	lt
 800c9ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c9ce:	9305      	str	r3, [sp, #20]
 800c9d0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ca8c <_svfiprintf_r+0x1ec>
 800c9d4:	2203      	movs	r2, #3
 800c9d6:	4650      	mov	r0, sl
 800c9d8:	7821      	ldrb	r1, [r4, #0]
 800c9da:	f000 fa3c 	bl	800ce56 <memchr>
 800c9de:	b138      	cbz	r0, 800c9f0 <_svfiprintf_r+0x150>
 800c9e0:	2240      	movs	r2, #64	; 0x40
 800c9e2:	9b04      	ldr	r3, [sp, #16]
 800c9e4:	eba0 000a 	sub.w	r0, r0, sl
 800c9e8:	4082      	lsls	r2, r0
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	3401      	adds	r4, #1
 800c9ee:	9304      	str	r3, [sp, #16]
 800c9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f4:	2206      	movs	r2, #6
 800c9f6:	4826      	ldr	r0, [pc, #152]	; (800ca90 <_svfiprintf_r+0x1f0>)
 800c9f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9fc:	f000 fa2b 	bl	800ce56 <memchr>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d038      	beq.n	800ca76 <_svfiprintf_r+0x1d6>
 800ca04:	4b23      	ldr	r3, [pc, #140]	; (800ca94 <_svfiprintf_r+0x1f4>)
 800ca06:	bb1b      	cbnz	r3, 800ca50 <_svfiprintf_r+0x1b0>
 800ca08:	9b03      	ldr	r3, [sp, #12]
 800ca0a:	3307      	adds	r3, #7
 800ca0c:	f023 0307 	bic.w	r3, r3, #7
 800ca10:	3308      	adds	r3, #8
 800ca12:	9303      	str	r3, [sp, #12]
 800ca14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca16:	4433      	add	r3, r6
 800ca18:	9309      	str	r3, [sp, #36]	; 0x24
 800ca1a:	e768      	b.n	800c8ee <_svfiprintf_r+0x4e>
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	2001      	movs	r0, #1
 800ca20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca24:	e7a6      	b.n	800c974 <_svfiprintf_r+0xd4>
 800ca26:	2300      	movs	r3, #0
 800ca28:	f04f 0c0a 	mov.w	ip, #10
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	3401      	adds	r4, #1
 800ca30:	9305      	str	r3, [sp, #20]
 800ca32:	4620      	mov	r0, r4
 800ca34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca38:	3a30      	subs	r2, #48	; 0x30
 800ca3a:	2a09      	cmp	r2, #9
 800ca3c:	d903      	bls.n	800ca46 <_svfiprintf_r+0x1a6>
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d0c6      	beq.n	800c9d0 <_svfiprintf_r+0x130>
 800ca42:	9105      	str	r1, [sp, #20]
 800ca44:	e7c4      	b.n	800c9d0 <_svfiprintf_r+0x130>
 800ca46:	4604      	mov	r4, r0
 800ca48:	2301      	movs	r3, #1
 800ca4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca4e:	e7f0      	b.n	800ca32 <_svfiprintf_r+0x192>
 800ca50:	ab03      	add	r3, sp, #12
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	462a      	mov	r2, r5
 800ca56:	4638      	mov	r0, r7
 800ca58:	4b0f      	ldr	r3, [pc, #60]	; (800ca98 <_svfiprintf_r+0x1f8>)
 800ca5a:	a904      	add	r1, sp, #16
 800ca5c:	f3af 8000 	nop.w
 800ca60:	1c42      	adds	r2, r0, #1
 800ca62:	4606      	mov	r6, r0
 800ca64:	d1d6      	bne.n	800ca14 <_svfiprintf_r+0x174>
 800ca66:	89ab      	ldrh	r3, [r5, #12]
 800ca68:	065b      	lsls	r3, r3, #25
 800ca6a:	f53f af2d 	bmi.w	800c8c8 <_svfiprintf_r+0x28>
 800ca6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca70:	b01d      	add	sp, #116	; 0x74
 800ca72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca76:	ab03      	add	r3, sp, #12
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	462a      	mov	r2, r5
 800ca7c:	4638      	mov	r0, r7
 800ca7e:	4b06      	ldr	r3, [pc, #24]	; (800ca98 <_svfiprintf_r+0x1f8>)
 800ca80:	a904      	add	r1, sp, #16
 800ca82:	f000 f87d 	bl	800cb80 <_printf_i>
 800ca86:	e7eb      	b.n	800ca60 <_svfiprintf_r+0x1c0>
 800ca88:	0800deb7 	.word	0x0800deb7
 800ca8c:	0800debd 	.word	0x0800debd
 800ca90:	0800dec1 	.word	0x0800dec1
 800ca94:	00000000 	.word	0x00000000
 800ca98:	0800c7ed 	.word	0x0800c7ed

0800ca9c <_printf_common>:
 800ca9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caa0:	4616      	mov	r6, r2
 800caa2:	4699      	mov	r9, r3
 800caa4:	688a      	ldr	r2, [r1, #8]
 800caa6:	690b      	ldr	r3, [r1, #16]
 800caa8:	4607      	mov	r7, r0
 800caaa:	4293      	cmp	r3, r2
 800caac:	bfb8      	it	lt
 800caae:	4613      	movlt	r3, r2
 800cab0:	6033      	str	r3, [r6, #0]
 800cab2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cab6:	460c      	mov	r4, r1
 800cab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cabc:	b10a      	cbz	r2, 800cac2 <_printf_common+0x26>
 800cabe:	3301      	adds	r3, #1
 800cac0:	6033      	str	r3, [r6, #0]
 800cac2:	6823      	ldr	r3, [r4, #0]
 800cac4:	0699      	lsls	r1, r3, #26
 800cac6:	bf42      	ittt	mi
 800cac8:	6833      	ldrmi	r3, [r6, #0]
 800caca:	3302      	addmi	r3, #2
 800cacc:	6033      	strmi	r3, [r6, #0]
 800cace:	6825      	ldr	r5, [r4, #0]
 800cad0:	f015 0506 	ands.w	r5, r5, #6
 800cad4:	d106      	bne.n	800cae4 <_printf_common+0x48>
 800cad6:	f104 0a19 	add.w	sl, r4, #25
 800cada:	68e3      	ldr	r3, [r4, #12]
 800cadc:	6832      	ldr	r2, [r6, #0]
 800cade:	1a9b      	subs	r3, r3, r2
 800cae0:	42ab      	cmp	r3, r5
 800cae2:	dc2b      	bgt.n	800cb3c <_printf_common+0xa0>
 800cae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cae8:	1e13      	subs	r3, r2, #0
 800caea:	6822      	ldr	r2, [r4, #0]
 800caec:	bf18      	it	ne
 800caee:	2301      	movne	r3, #1
 800caf0:	0692      	lsls	r2, r2, #26
 800caf2:	d430      	bmi.n	800cb56 <_printf_common+0xba>
 800caf4:	4649      	mov	r1, r9
 800caf6:	4638      	mov	r0, r7
 800caf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cafc:	47c0      	blx	r8
 800cafe:	3001      	adds	r0, #1
 800cb00:	d023      	beq.n	800cb4a <_printf_common+0xae>
 800cb02:	6823      	ldr	r3, [r4, #0]
 800cb04:	6922      	ldr	r2, [r4, #16]
 800cb06:	f003 0306 	and.w	r3, r3, #6
 800cb0a:	2b04      	cmp	r3, #4
 800cb0c:	bf14      	ite	ne
 800cb0e:	2500      	movne	r5, #0
 800cb10:	6833      	ldreq	r3, [r6, #0]
 800cb12:	f04f 0600 	mov.w	r6, #0
 800cb16:	bf08      	it	eq
 800cb18:	68e5      	ldreq	r5, [r4, #12]
 800cb1a:	f104 041a 	add.w	r4, r4, #26
 800cb1e:	bf08      	it	eq
 800cb20:	1aed      	subeq	r5, r5, r3
 800cb22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cb26:	bf08      	it	eq
 800cb28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	bfc4      	itt	gt
 800cb30:	1a9b      	subgt	r3, r3, r2
 800cb32:	18ed      	addgt	r5, r5, r3
 800cb34:	42b5      	cmp	r5, r6
 800cb36:	d11a      	bne.n	800cb6e <_printf_common+0xd2>
 800cb38:	2000      	movs	r0, #0
 800cb3a:	e008      	b.n	800cb4e <_printf_common+0xb2>
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	4652      	mov	r2, sl
 800cb40:	4649      	mov	r1, r9
 800cb42:	4638      	mov	r0, r7
 800cb44:	47c0      	blx	r8
 800cb46:	3001      	adds	r0, #1
 800cb48:	d103      	bne.n	800cb52 <_printf_common+0xb6>
 800cb4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb52:	3501      	adds	r5, #1
 800cb54:	e7c1      	b.n	800cada <_printf_common+0x3e>
 800cb56:	2030      	movs	r0, #48	; 0x30
 800cb58:	18e1      	adds	r1, r4, r3
 800cb5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb5e:	1c5a      	adds	r2, r3, #1
 800cb60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb64:	4422      	add	r2, r4
 800cb66:	3302      	adds	r3, #2
 800cb68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb6c:	e7c2      	b.n	800caf4 <_printf_common+0x58>
 800cb6e:	2301      	movs	r3, #1
 800cb70:	4622      	mov	r2, r4
 800cb72:	4649      	mov	r1, r9
 800cb74:	4638      	mov	r0, r7
 800cb76:	47c0      	blx	r8
 800cb78:	3001      	adds	r0, #1
 800cb7a:	d0e6      	beq.n	800cb4a <_printf_common+0xae>
 800cb7c:	3601      	adds	r6, #1
 800cb7e:	e7d9      	b.n	800cb34 <_printf_common+0x98>

0800cb80 <_printf_i>:
 800cb80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb84:	7e0f      	ldrb	r7, [r1, #24]
 800cb86:	4691      	mov	r9, r2
 800cb88:	2f78      	cmp	r7, #120	; 0x78
 800cb8a:	4680      	mov	r8, r0
 800cb8c:	460c      	mov	r4, r1
 800cb8e:	469a      	mov	sl, r3
 800cb90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb96:	d807      	bhi.n	800cba8 <_printf_i+0x28>
 800cb98:	2f62      	cmp	r7, #98	; 0x62
 800cb9a:	d80a      	bhi.n	800cbb2 <_printf_i+0x32>
 800cb9c:	2f00      	cmp	r7, #0
 800cb9e:	f000 80d5 	beq.w	800cd4c <_printf_i+0x1cc>
 800cba2:	2f58      	cmp	r7, #88	; 0x58
 800cba4:	f000 80c1 	beq.w	800cd2a <_printf_i+0x1aa>
 800cba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cbb0:	e03a      	b.n	800cc28 <_printf_i+0xa8>
 800cbb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cbb6:	2b15      	cmp	r3, #21
 800cbb8:	d8f6      	bhi.n	800cba8 <_printf_i+0x28>
 800cbba:	a101      	add	r1, pc, #4	; (adr r1, 800cbc0 <_printf_i+0x40>)
 800cbbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cbc0:	0800cc19 	.word	0x0800cc19
 800cbc4:	0800cc2d 	.word	0x0800cc2d
 800cbc8:	0800cba9 	.word	0x0800cba9
 800cbcc:	0800cba9 	.word	0x0800cba9
 800cbd0:	0800cba9 	.word	0x0800cba9
 800cbd4:	0800cba9 	.word	0x0800cba9
 800cbd8:	0800cc2d 	.word	0x0800cc2d
 800cbdc:	0800cba9 	.word	0x0800cba9
 800cbe0:	0800cba9 	.word	0x0800cba9
 800cbe4:	0800cba9 	.word	0x0800cba9
 800cbe8:	0800cba9 	.word	0x0800cba9
 800cbec:	0800cd33 	.word	0x0800cd33
 800cbf0:	0800cc59 	.word	0x0800cc59
 800cbf4:	0800cced 	.word	0x0800cced
 800cbf8:	0800cba9 	.word	0x0800cba9
 800cbfc:	0800cba9 	.word	0x0800cba9
 800cc00:	0800cd55 	.word	0x0800cd55
 800cc04:	0800cba9 	.word	0x0800cba9
 800cc08:	0800cc59 	.word	0x0800cc59
 800cc0c:	0800cba9 	.word	0x0800cba9
 800cc10:	0800cba9 	.word	0x0800cba9
 800cc14:	0800ccf5 	.word	0x0800ccf5
 800cc18:	682b      	ldr	r3, [r5, #0]
 800cc1a:	1d1a      	adds	r2, r3, #4
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	602a      	str	r2, [r5, #0]
 800cc20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc28:	2301      	movs	r3, #1
 800cc2a:	e0a0      	b.n	800cd6e <_printf_i+0x1ee>
 800cc2c:	6820      	ldr	r0, [r4, #0]
 800cc2e:	682b      	ldr	r3, [r5, #0]
 800cc30:	0607      	lsls	r7, r0, #24
 800cc32:	f103 0104 	add.w	r1, r3, #4
 800cc36:	6029      	str	r1, [r5, #0]
 800cc38:	d501      	bpl.n	800cc3e <_printf_i+0xbe>
 800cc3a:	681e      	ldr	r6, [r3, #0]
 800cc3c:	e003      	b.n	800cc46 <_printf_i+0xc6>
 800cc3e:	0646      	lsls	r6, r0, #25
 800cc40:	d5fb      	bpl.n	800cc3a <_printf_i+0xba>
 800cc42:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cc46:	2e00      	cmp	r6, #0
 800cc48:	da03      	bge.n	800cc52 <_printf_i+0xd2>
 800cc4a:	232d      	movs	r3, #45	; 0x2d
 800cc4c:	4276      	negs	r6, r6
 800cc4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc52:	230a      	movs	r3, #10
 800cc54:	4859      	ldr	r0, [pc, #356]	; (800cdbc <_printf_i+0x23c>)
 800cc56:	e012      	b.n	800cc7e <_printf_i+0xfe>
 800cc58:	682b      	ldr	r3, [r5, #0]
 800cc5a:	6820      	ldr	r0, [r4, #0]
 800cc5c:	1d19      	adds	r1, r3, #4
 800cc5e:	6029      	str	r1, [r5, #0]
 800cc60:	0605      	lsls	r5, r0, #24
 800cc62:	d501      	bpl.n	800cc68 <_printf_i+0xe8>
 800cc64:	681e      	ldr	r6, [r3, #0]
 800cc66:	e002      	b.n	800cc6e <_printf_i+0xee>
 800cc68:	0641      	lsls	r1, r0, #25
 800cc6a:	d5fb      	bpl.n	800cc64 <_printf_i+0xe4>
 800cc6c:	881e      	ldrh	r6, [r3, #0]
 800cc6e:	2f6f      	cmp	r7, #111	; 0x6f
 800cc70:	bf0c      	ite	eq
 800cc72:	2308      	moveq	r3, #8
 800cc74:	230a      	movne	r3, #10
 800cc76:	4851      	ldr	r0, [pc, #324]	; (800cdbc <_printf_i+0x23c>)
 800cc78:	2100      	movs	r1, #0
 800cc7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc7e:	6865      	ldr	r5, [r4, #4]
 800cc80:	2d00      	cmp	r5, #0
 800cc82:	bfa8      	it	ge
 800cc84:	6821      	ldrge	r1, [r4, #0]
 800cc86:	60a5      	str	r5, [r4, #8]
 800cc88:	bfa4      	itt	ge
 800cc8a:	f021 0104 	bicge.w	r1, r1, #4
 800cc8e:	6021      	strge	r1, [r4, #0]
 800cc90:	b90e      	cbnz	r6, 800cc96 <_printf_i+0x116>
 800cc92:	2d00      	cmp	r5, #0
 800cc94:	d04b      	beq.n	800cd2e <_printf_i+0x1ae>
 800cc96:	4615      	mov	r5, r2
 800cc98:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc9c:	fb03 6711 	mls	r7, r3, r1, r6
 800cca0:	5dc7      	ldrb	r7, [r0, r7]
 800cca2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cca6:	4637      	mov	r7, r6
 800cca8:	42bb      	cmp	r3, r7
 800ccaa:	460e      	mov	r6, r1
 800ccac:	d9f4      	bls.n	800cc98 <_printf_i+0x118>
 800ccae:	2b08      	cmp	r3, #8
 800ccb0:	d10b      	bne.n	800ccca <_printf_i+0x14a>
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	07de      	lsls	r6, r3, #31
 800ccb6:	d508      	bpl.n	800ccca <_printf_i+0x14a>
 800ccb8:	6923      	ldr	r3, [r4, #16]
 800ccba:	6861      	ldr	r1, [r4, #4]
 800ccbc:	4299      	cmp	r1, r3
 800ccbe:	bfde      	ittt	le
 800ccc0:	2330      	movle	r3, #48	; 0x30
 800ccc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ccc6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ccca:	1b52      	subs	r2, r2, r5
 800cccc:	6122      	str	r2, [r4, #16]
 800ccce:	464b      	mov	r3, r9
 800ccd0:	4621      	mov	r1, r4
 800ccd2:	4640      	mov	r0, r8
 800ccd4:	f8cd a000 	str.w	sl, [sp]
 800ccd8:	aa03      	add	r2, sp, #12
 800ccda:	f7ff fedf 	bl	800ca9c <_printf_common>
 800ccde:	3001      	adds	r0, #1
 800cce0:	d14a      	bne.n	800cd78 <_printf_i+0x1f8>
 800cce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cce6:	b004      	add	sp, #16
 800cce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccec:	6823      	ldr	r3, [r4, #0]
 800ccee:	f043 0320 	orr.w	r3, r3, #32
 800ccf2:	6023      	str	r3, [r4, #0]
 800ccf4:	2778      	movs	r7, #120	; 0x78
 800ccf6:	4832      	ldr	r0, [pc, #200]	; (800cdc0 <_printf_i+0x240>)
 800ccf8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ccfc:	6823      	ldr	r3, [r4, #0]
 800ccfe:	6829      	ldr	r1, [r5, #0]
 800cd00:	061f      	lsls	r7, r3, #24
 800cd02:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd06:	d402      	bmi.n	800cd0e <_printf_i+0x18e>
 800cd08:	065f      	lsls	r7, r3, #25
 800cd0a:	bf48      	it	mi
 800cd0c:	b2b6      	uxthmi	r6, r6
 800cd0e:	07df      	lsls	r7, r3, #31
 800cd10:	bf48      	it	mi
 800cd12:	f043 0320 	orrmi.w	r3, r3, #32
 800cd16:	6029      	str	r1, [r5, #0]
 800cd18:	bf48      	it	mi
 800cd1a:	6023      	strmi	r3, [r4, #0]
 800cd1c:	b91e      	cbnz	r6, 800cd26 <_printf_i+0x1a6>
 800cd1e:	6823      	ldr	r3, [r4, #0]
 800cd20:	f023 0320 	bic.w	r3, r3, #32
 800cd24:	6023      	str	r3, [r4, #0]
 800cd26:	2310      	movs	r3, #16
 800cd28:	e7a6      	b.n	800cc78 <_printf_i+0xf8>
 800cd2a:	4824      	ldr	r0, [pc, #144]	; (800cdbc <_printf_i+0x23c>)
 800cd2c:	e7e4      	b.n	800ccf8 <_printf_i+0x178>
 800cd2e:	4615      	mov	r5, r2
 800cd30:	e7bd      	b.n	800ccae <_printf_i+0x12e>
 800cd32:	682b      	ldr	r3, [r5, #0]
 800cd34:	6826      	ldr	r6, [r4, #0]
 800cd36:	1d18      	adds	r0, r3, #4
 800cd38:	6961      	ldr	r1, [r4, #20]
 800cd3a:	6028      	str	r0, [r5, #0]
 800cd3c:	0635      	lsls	r5, r6, #24
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	d501      	bpl.n	800cd46 <_printf_i+0x1c6>
 800cd42:	6019      	str	r1, [r3, #0]
 800cd44:	e002      	b.n	800cd4c <_printf_i+0x1cc>
 800cd46:	0670      	lsls	r0, r6, #25
 800cd48:	d5fb      	bpl.n	800cd42 <_printf_i+0x1c2>
 800cd4a:	8019      	strh	r1, [r3, #0]
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	4615      	mov	r5, r2
 800cd50:	6123      	str	r3, [r4, #16]
 800cd52:	e7bc      	b.n	800ccce <_printf_i+0x14e>
 800cd54:	682b      	ldr	r3, [r5, #0]
 800cd56:	2100      	movs	r1, #0
 800cd58:	1d1a      	adds	r2, r3, #4
 800cd5a:	602a      	str	r2, [r5, #0]
 800cd5c:	681d      	ldr	r5, [r3, #0]
 800cd5e:	6862      	ldr	r2, [r4, #4]
 800cd60:	4628      	mov	r0, r5
 800cd62:	f000 f878 	bl	800ce56 <memchr>
 800cd66:	b108      	cbz	r0, 800cd6c <_printf_i+0x1ec>
 800cd68:	1b40      	subs	r0, r0, r5
 800cd6a:	6060      	str	r0, [r4, #4]
 800cd6c:	6863      	ldr	r3, [r4, #4]
 800cd6e:	6123      	str	r3, [r4, #16]
 800cd70:	2300      	movs	r3, #0
 800cd72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd76:	e7aa      	b.n	800ccce <_printf_i+0x14e>
 800cd78:	462a      	mov	r2, r5
 800cd7a:	4649      	mov	r1, r9
 800cd7c:	4640      	mov	r0, r8
 800cd7e:	6923      	ldr	r3, [r4, #16]
 800cd80:	47d0      	blx	sl
 800cd82:	3001      	adds	r0, #1
 800cd84:	d0ad      	beq.n	800cce2 <_printf_i+0x162>
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	079b      	lsls	r3, r3, #30
 800cd8a:	d413      	bmi.n	800cdb4 <_printf_i+0x234>
 800cd8c:	68e0      	ldr	r0, [r4, #12]
 800cd8e:	9b03      	ldr	r3, [sp, #12]
 800cd90:	4298      	cmp	r0, r3
 800cd92:	bfb8      	it	lt
 800cd94:	4618      	movlt	r0, r3
 800cd96:	e7a6      	b.n	800cce6 <_printf_i+0x166>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	4632      	mov	r2, r6
 800cd9c:	4649      	mov	r1, r9
 800cd9e:	4640      	mov	r0, r8
 800cda0:	47d0      	blx	sl
 800cda2:	3001      	adds	r0, #1
 800cda4:	d09d      	beq.n	800cce2 <_printf_i+0x162>
 800cda6:	3501      	adds	r5, #1
 800cda8:	68e3      	ldr	r3, [r4, #12]
 800cdaa:	9903      	ldr	r1, [sp, #12]
 800cdac:	1a5b      	subs	r3, r3, r1
 800cdae:	42ab      	cmp	r3, r5
 800cdb0:	dcf2      	bgt.n	800cd98 <_printf_i+0x218>
 800cdb2:	e7eb      	b.n	800cd8c <_printf_i+0x20c>
 800cdb4:	2500      	movs	r5, #0
 800cdb6:	f104 0619 	add.w	r6, r4, #25
 800cdba:	e7f5      	b.n	800cda8 <_printf_i+0x228>
 800cdbc:	0800dec8 	.word	0x0800dec8
 800cdc0:	0800ded9 	.word	0x0800ded9

0800cdc4 <_realloc_r>:
 800cdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc8:	4680      	mov	r8, r0
 800cdca:	4614      	mov	r4, r2
 800cdcc:	460e      	mov	r6, r1
 800cdce:	b921      	cbnz	r1, 800cdda <_realloc_r+0x16>
 800cdd0:	4611      	mov	r1, r2
 800cdd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd6:	f7ff bb77 	b.w	800c4c8 <_malloc_r>
 800cdda:	b92a      	cbnz	r2, 800cde8 <_realloc_r+0x24>
 800cddc:	f7ff fcbe 	bl	800c75c <_free_r>
 800cde0:	4625      	mov	r5, r4
 800cde2:	4628      	mov	r0, r5
 800cde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cde8:	f000 f851 	bl	800ce8e <_malloc_usable_size_r>
 800cdec:	4284      	cmp	r4, r0
 800cdee:	4607      	mov	r7, r0
 800cdf0:	d802      	bhi.n	800cdf8 <_realloc_r+0x34>
 800cdf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cdf6:	d812      	bhi.n	800ce1e <_realloc_r+0x5a>
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	f7ff fb64 	bl	800c4c8 <_malloc_r>
 800ce00:	4605      	mov	r5, r0
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d0ed      	beq.n	800cde2 <_realloc_r+0x1e>
 800ce06:	42bc      	cmp	r4, r7
 800ce08:	4622      	mov	r2, r4
 800ce0a:	4631      	mov	r1, r6
 800ce0c:	bf28      	it	cs
 800ce0e:	463a      	movcs	r2, r7
 800ce10:	f000 f82f 	bl	800ce72 <memcpy>
 800ce14:	4631      	mov	r1, r6
 800ce16:	4640      	mov	r0, r8
 800ce18:	f7ff fca0 	bl	800c75c <_free_r>
 800ce1c:	e7e1      	b.n	800cde2 <_realloc_r+0x1e>
 800ce1e:	4635      	mov	r5, r6
 800ce20:	e7df      	b.n	800cde2 <_realloc_r+0x1e>

0800ce22 <memmove>:
 800ce22:	4288      	cmp	r0, r1
 800ce24:	b510      	push	{r4, lr}
 800ce26:	eb01 0402 	add.w	r4, r1, r2
 800ce2a:	d902      	bls.n	800ce32 <memmove+0x10>
 800ce2c:	4284      	cmp	r4, r0
 800ce2e:	4623      	mov	r3, r4
 800ce30:	d807      	bhi.n	800ce42 <memmove+0x20>
 800ce32:	1e43      	subs	r3, r0, #1
 800ce34:	42a1      	cmp	r1, r4
 800ce36:	d008      	beq.n	800ce4a <memmove+0x28>
 800ce38:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce40:	e7f8      	b.n	800ce34 <memmove+0x12>
 800ce42:	4601      	mov	r1, r0
 800ce44:	4402      	add	r2, r0
 800ce46:	428a      	cmp	r2, r1
 800ce48:	d100      	bne.n	800ce4c <memmove+0x2a>
 800ce4a:	bd10      	pop	{r4, pc}
 800ce4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce50:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce54:	e7f7      	b.n	800ce46 <memmove+0x24>

0800ce56 <memchr>:
 800ce56:	4603      	mov	r3, r0
 800ce58:	b510      	push	{r4, lr}
 800ce5a:	b2c9      	uxtb	r1, r1
 800ce5c:	4402      	add	r2, r0
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	4618      	mov	r0, r3
 800ce62:	d101      	bne.n	800ce68 <memchr+0x12>
 800ce64:	2000      	movs	r0, #0
 800ce66:	e003      	b.n	800ce70 <memchr+0x1a>
 800ce68:	7804      	ldrb	r4, [r0, #0]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	428c      	cmp	r4, r1
 800ce6e:	d1f6      	bne.n	800ce5e <memchr+0x8>
 800ce70:	bd10      	pop	{r4, pc}

0800ce72 <memcpy>:
 800ce72:	440a      	add	r2, r1
 800ce74:	4291      	cmp	r1, r2
 800ce76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce7a:	d100      	bne.n	800ce7e <memcpy+0xc>
 800ce7c:	4770      	bx	lr
 800ce7e:	b510      	push	{r4, lr}
 800ce80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce84:	4291      	cmp	r1, r2
 800ce86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce8a:	d1f9      	bne.n	800ce80 <memcpy+0xe>
 800ce8c:	bd10      	pop	{r4, pc}

0800ce8e <_malloc_usable_size_r>:
 800ce8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce92:	1f18      	subs	r0, r3, #4
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	bfbc      	itt	lt
 800ce98:	580b      	ldrlt	r3, [r1, r0]
 800ce9a:	18c0      	addlt	r0, r0, r3
 800ce9c:	4770      	bx	lr
	...

0800cea0 <_init>:
 800cea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea2:	bf00      	nop
 800cea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cea6:	bc08      	pop	{r3}
 800cea8:	469e      	mov	lr, r3
 800ceaa:	4770      	bx	lr

0800ceac <_fini>:
 800ceac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceae:	bf00      	nop
 800ceb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceb2:	bc08      	pop	{r3}
 800ceb4:	469e      	mov	lr, r3
 800ceb6:	4770      	bx	lr
