
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb08  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd4  0800ccec  0800ccec  0001ccec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcc0  0800dcc0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800dcc0  0800dcc0  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dcc0  0800dcc0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcc0  0800dcc0  0001dcc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcc4  0800dcc4  0001dcc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800dcc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000fc  0800ddc4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800ddc4  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   000167f7  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c4  00000000  00000000  0003695f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00039e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e7b  00000000  00000000  0003b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003bf2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c279  00000000  00000000  000585d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee50  00000000  00000000  00074849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005210  00000000  00000000  0011369c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001188ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ccd4 	.word	0x0800ccd4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800ccd4 	.word	0x0800ccd4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fbb2 	bl	80099b8 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fa2a 	bl	80086b0 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	200003a8 	.word	0x200003a8
 80004c0:	200001f9 	.word	0x200001f9
 80004c4:	20000221 	.word	0x20000221
 80004c8:	20000224 	.word	0x20000224
 80004cc:	20000225 	.word	0x20000225
 80004d0:	20000226 	.word	0x20000226
 80004d4:	20000227 	.word	0x20000227
 80004d8:	20000228 	.word	0x20000228
 80004dc:	20000229 	.word	0x20000229
 80004e0:	20000239 	.word	0x20000239
 80004e4:	2000022a 	.word	0x2000022a
 80004e8:	2000023a 	.word	0x2000023a
 80004ec:	2000022b 	.word	0x2000022b
 80004f0:	2000023b 	.word	0x2000023b
 80004f4:	2000022e 	.word	0x2000022e
 80004f8:	2000022f 	.word	0x2000022f
 80004fc:	20000230 	.word	0x20000230
 8000500:	20000231 	.word	0x20000231
 8000504:	20000232 	.word	0x20000232
 8000508:	20000233 	.word	0x20000233
 800050c:	20000234 	.word	0x20000234
 8000510:	20000235 	.word	0x20000235
 8000514:	20000236 	.word	0x20000236
 8000518:	20000237 	.word	0x20000237
 800051c:	20000238 	.word	0x20000238
 8000520:	2000023c 	.word	0x2000023c
 8000524:	2000023e 	.word	0x2000023e
 8000528:	2000021c 	.word	0x2000021c
 800052c:	2000021d 	.word	0x2000021d
 8000530:	2000021e 	.word	0x2000021e
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	2000021f 	.word	0x2000021f
 8000540:	20000241 	.word	0x20000241
 8000544:	2000023f 	.word	0x2000023f
 8000548:	2000022d 	.word	0x2000022d
 800054c:	20000240 	.word	0x20000240
 8000550:	2000022c 	.word	0x2000022c
 8000554:	20000242 	.word	0x20000242
 8000558:	20000243 	.word	0x20000243
 800055c:	20000244 	.word	0x20000244
 8000560:	20000245 	.word	0x20000245
 8000564:	20000246 	.word	0x20000246
 8000568:	20000247 	.word	0x20000247
 800056c:	20000248 	.word	0x20000248
 8000570:	20000249 	.word	0x20000249
 8000574:	2000024a 	.word	0x2000024a
 8000578:	2000024b 	.word	0x2000024b
 800057c:	200001f8 	.word	0x200001f8
	}

	if(kapi1AcSure>5) {
 8000580:	4b6b      	ldr	r3, [pc, #428]	; (8000730 <eepromKontrol+0x4fc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b69      	ldr	r3, [pc, #420]	; (8000730 <eepromKontrol+0x4fc>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b69      	ldr	r3, [pc, #420]	; (8000734 <eepromKontrol+0x500>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b67      	ldr	r3, [pc, #412]	; (8000734 <eepromKontrol+0x500>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b66      	ldr	r3, [pc, #408]	; (8000738 <eepromKontrol+0x504>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b64      	ldr	r3, [pc, #400]	; (8000738 <eepromKontrol+0x504>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b64      	ldr	r3, [pc, #400]	; (800073c <eepromKontrol+0x508>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b62      	ldr	r3, [pc, #392]	; (800073c <eepromKontrol+0x508>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b61      	ldr	r3, [pc, #388]	; (8000740 <eepromKontrol+0x50c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b5f      	ldr	r3, [pc, #380]	; (8000740 <eepromKontrol+0x50c>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b5f      	ldr	r3, [pc, #380]	; (8000744 <eepromKontrol+0x510>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b5d      	ldr	r3, [pc, #372]	; (8000744 <eepromKontrol+0x510>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <eepromKontrol+0x514>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b5a      	ldr	r3, [pc, #360]	; (8000748 <eepromKontrol+0x514>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b5a      	ldr	r3, [pc, #360]	; (800074c <eepromKontrol+0x518>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b58      	ldr	r3, [pc, #352]	; (800074c <eepromKontrol+0x518>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b57      	ldr	r3, [pc, #348]	; (8000750 <eepromKontrol+0x51c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b55      	ldr	r3, [pc, #340]	; (8000750 <eepromKontrol+0x51c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b55      	ldr	r3, [pc, #340]	; (8000754 <eepromKontrol+0x520>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b53      	ldr	r3, [pc, #332]	; (8000754 <eepromKontrol+0x520>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b52      	ldr	r3, [pc, #328]	; (8000758 <eepromKontrol+0x524>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b50      	ldr	r3, [pc, #320]	; (8000758 <eepromKontrol+0x524>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b50      	ldr	r3, [pc, #320]	; (800075c <eepromKontrol+0x528>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b4e      	ldr	r3, [pc, #312]	; (800075c <eepromKontrol+0x528>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b4d      	ldr	r3, [pc, #308]	; (8000760 <eepromKontrol+0x52c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <eepromKontrol+0x52c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b4b      	ldr	r3, [pc, #300]	; (8000764 <eepromKontrol+0x530>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b49      	ldr	r3, [pc, #292]	; (8000764 <eepromKontrol+0x530>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b48      	ldr	r3, [pc, #288]	; (8000768 <eepromKontrol+0x534>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b46      	ldr	r3, [pc, #280]	; (8000768 <eepromKontrol+0x534>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <eepromKontrol+0x538>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b44      	ldr	r3, [pc, #272]	; (800076c <eepromKontrol+0x538>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b43      	ldr	r3, [pc, #268]	; (8000770 <eepromKontrol+0x53c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b41      	ldr	r3, [pc, #260]	; (8000770 <eepromKontrol+0x53c>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b41      	ldr	r3, [pc, #260]	; (8000774 <eepromKontrol+0x540>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b3f      	ldr	r3, [pc, #252]	; (8000774 <eepromKontrol+0x540>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <eepromKontrol+0x544>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b3c      	ldr	r3, [pc, #240]	; (8000778 <eepromKontrol+0x544>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b3c      	ldr	r3, [pc, #240]	; (800077c <eepromKontrol+0x548>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b3a      	ldr	r3, [pc, #232]	; (800077c <eepromKontrol+0x548>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <eepromKontrol+0x54c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b37      	ldr	r3, [pc, #220]	; (8000780 <eepromKontrol+0x54c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b37      	ldr	r3, [pc, #220]	; (8000784 <eepromKontrol+0x550>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <eepromKontrol+0x550>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineIDInt, &eepromData[idStartPos], 12);
 80006b4:	4b34      	ldr	r3, [pc, #208]	; (8000788 <eepromKontrol+0x554>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a34      	ldr	r2, [pc, #208]	; (800078c <eepromKontrol+0x558>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b34      	ldr	r3, [pc, #208]	; (8000790 <eepromKontrol+0x55c>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <eepromKontrol+0x560>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a2f      	ldr	r2, [pc, #188]	; (800078c <eepromKontrol+0x558>)
 80006d0:	441a      	add	r2, r3
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <eepromKontrol+0x564>)
 80006d4:	6811      	ldr	r1, [r2, #0]
 80006d6:	6855      	ldr	r5, [r2, #4]
 80006d8:	6894      	ldr	r4, [r2, #8]
 80006da:	68d0      	ldr	r0, [r2, #12]
 80006dc:	6019      	str	r1, [r3, #0]
 80006de:	605d      	str	r5, [r3, #4]
 80006e0:	609c      	str	r4, [r3, #8]
 80006e2:	60d8      	str	r0, [r3, #12]
 80006e4:	6911      	ldr	r1, [r2, #16]
 80006e6:	6119      	str	r1, [r3, #16]
	memcpy(wifiPassInt, &eepromData[passStartPos], 20);
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <eepromKontrol+0x568>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a27      	ldr	r2, [pc, #156]	; (800078c <eepromKontrol+0x558>)
 80006ee:	441a      	add	r2, r3
 80006f0:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <eepromKontrol+0x56c>)
 80006f2:	6811      	ldr	r1, [r2, #0]
 80006f4:	6855      	ldr	r5, [r2, #4]
 80006f6:	6894      	ldr	r4, [r2, #8]
 80006f8:	68d0      	ldr	r0, [r2, #12]
 80006fa:	6019      	str	r1, [r3, #0]
 80006fc:	605d      	str	r5, [r3, #4]
 80006fe:	609c      	str	r4, [r3, #8]
 8000700:	60d8      	str	r0, [r3, #12]
 8000702:	6911      	ldr	r1, [r2, #16]
 8000704:	6119      	str	r1, [r3, #16]
	HAL_Delay(200);
 8000706:	20c8      	movs	r0, #200	; 0xc8
 8000708:	f007 ffd2 	bl	80086b0 <HAL_Delay>
	convertArrays(1);
 800070c:	2001      	movs	r0, #1
 800070e:	f000 f849 	bl	80007a4 <convertArrays>
	HAL_Delay(50);
 8000712:	2032      	movs	r0, #50	; 0x32
 8000714:	f007 ffcc 	bl	80086b0 <HAL_Delay>
	convertArrays(2);
 8000718:	2002      	movs	r0, #2
 800071a:	f000 f843 	bl	80007a4 <convertArrays>
	HAL_Delay(50);
 800071e:	2032      	movs	r0, #50	; 0x32
 8000720:	f007 ffc6 	bl	80086b0 <HAL_Delay>
	convertArrays(3);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 f83d 	bl	80007a4 <convertArrays>
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bdb0      	pop	{r4, r5, r7, pc}
 8000730:	20000239 	.word	0x20000239
 8000734:	2000022a 	.word	0x2000022a
 8000738:	2000023a 	.word	0x2000023a
 800073c:	2000022b 	.word	0x2000022b
 8000740:	2000022d 	.word	0x2000022d
 8000744:	2000023b 	.word	0x2000023b
 8000748:	2000022e 	.word	0x2000022e
 800074c:	2000022f 	.word	0x2000022f
 8000750:	20000230 	.word	0x20000230
 8000754:	20000231 	.word	0x20000231
 8000758:	20000232 	.word	0x20000232
 800075c:	20000233 	.word	0x20000233
 8000760:	20000234 	.word	0x20000234
 8000764:	20000235 	.word	0x20000235
 8000768:	20000236 	.word	0x20000236
 800076c:	20000237 	.word	0x20000237
 8000770:	20000238 	.word	0x20000238
 8000774:	2000023c 	.word	0x2000023c
 8000778:	2000023e 	.word	0x2000023e
 800077c:	20000240 	.word	0x20000240
 8000780:	20000241 	.word	0x20000241
 8000784:	2000023f 	.word	0x2000023f
 8000788:	20000004 	.word	0x20000004
 800078c:	20000118 	.word	0x20000118
 8000790:	200001c4 	.word	0x200001c4
 8000794:	20000008 	.word	0x20000008
 8000798:	200001d0 	.word	0x200001d0
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	200001e4 	.word	0x200001e4

080007a4 <convertArrays>:

void convertArrays(int state) {
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d115      	bne.n	80007de <convertArrays+0x3a>
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
 80007b6:	e00e      	b.n	80007d6 <convertArrays+0x32>
			machineID[i] = idCharactersArray[machineIDInt[i]];
 80007b8:	4a25      	ldr	r2, [pc, #148]	; (8000850 <convertArrays+0xac>)
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <convertArrays+0xb0>)
 80007c4:	5c99      	ldrb	r1, [r3, r2]
 80007c6:	4a24      	ldr	r2, [pc, #144]	; (8000858 <convertArrays+0xb4>)
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	4413      	add	r3, r2
 80007cc:	460a      	mov	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	3301      	adds	r3, #1
 80007d4:	61fb      	str	r3, [r7, #28]
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	2b0b      	cmp	r3, #11
 80007da:	dded      	ble.n	80007b8 <convertArrays+0x14>

		for(int i=0; i<arrLength; i++) {
			wifiPass[i] = charactersArray[wifiPassInt[i]];
		}
	}
}
 80007dc:	e033      	b.n	8000846 <convertArrays+0xa2>
	} else if(state == 2) {
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d118      	bne.n	8000816 <convertArrays+0x72>
		int arrLength = sizeof(wifiSSIDInt)/sizeof(wifiSSIDInt[0]);
 80007e4:	2314      	movs	r3, #20
 80007e6:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<arrLength; i++) {
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	e00e      	b.n	800080c <convertArrays+0x68>
			wifiSSID[i] = charactersArray[wifiSSIDInt[i]];
 80007ee:	4a1b      	ldr	r2, [pc, #108]	; (800085c <convertArrays+0xb8>)
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	4413      	add	r3, r2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <convertArrays+0xbc>)
 80007fa:	5c99      	ldrb	r1, [r3, r2]
 80007fc:	4a19      	ldr	r2, [pc, #100]	; (8000864 <convertArrays+0xc0>)
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	4413      	add	r3, r2
 8000802:	460a      	mov	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrLength; i++) {
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	3301      	adds	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbec      	blt.n	80007ee <convertArrays+0x4a>
}
 8000814:	e017      	b.n	8000846 <convertArrays+0xa2>
		int arrLength = sizeof(wifiPassInt)/sizeof(wifiPassInt[0]);
 8000816:	2314      	movs	r3, #20
 8000818:	613b      	str	r3, [r7, #16]
		for(int i=0; i<arrLength; i++) {
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	e00e      	b.n	800083e <convertArrays+0x9a>
			wifiPass[i] = charactersArray[wifiPassInt[i]];
 8000820:	4a11      	ldr	r2, [pc, #68]	; (8000868 <convertArrays+0xc4>)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	4413      	add	r3, r2
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <convertArrays+0xbc>)
 800082c:	5c99      	ldrb	r1, [r3, r2]
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <convertArrays+0xc8>)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	4413      	add	r3, r2
 8000834:	460a      	mov	r2, r1
 8000836:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrLength; i++) {
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	3301      	adds	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	429a      	cmp	r2, r3
 8000844:	dbec      	blt.n	8000820 <convertArrays+0x7c>
}
 8000846:	bf00      	nop
 8000848:	3724      	adds	r7, #36	; 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	200001c4 	.word	0x200001c4
 8000854:	20000010 	.word	0x20000010
 8000858:	20000190 	.word	0x20000190
 800085c:	200001d0 	.word	0x200001d0
 8000860:	2000001c 	.word	0x2000001c
 8000864:	2000019c 	.word	0x2000019c
 8000868:	200001e4 	.word	0x200001e4
 800086c:	200001b0 	.word	0x200001b0

08000870 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b0c6      	sub	sp, #280	; 0x118
 8000874:	af02      	add	r7, sp, #8
 8000876:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800087a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800087e:	6018      	str	r0, [r3, #0]
 8000880:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000888:	6019      	str	r1, [r3, #0]
 800088a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800088e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000892:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000894:	4a31      	ldr	r2, [pc, #196]	; (800095c <sendMachineData+0xec>)
 8000896:	4932      	ldr	r1, [pc, #200]	; (8000960 <sendMachineData+0xf0>)
 8000898:	4832      	ldr	r0, [pc, #200]	; (8000964 <sendMachineData+0xf4>)
 800089a:	f00b fdbb 	bl	800c414 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800089e:	4831      	ldr	r0, [pc, #196]	; (8000964 <sendMachineData+0xf4>)
 80008a0:	f7ff fcc0 	bl	8000224 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008b0:	492c      	ldr	r1, [pc, #176]	; (8000964 <sendMachineData+0xf4>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	f00a ffc8 	bl	800b848 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80008b8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80008bc:	f007 fef8 	bl	80086b0 <HAL_Delay>

	sprintf(local_txA,
 80008c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80008cc:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80008d0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80008d4:	4924      	ldr	r1, [pc, #144]	; (8000968 <sendMachineData+0xf8>)
 80008d6:	9100      	str	r1, [sp, #0]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6812      	ldr	r2, [r2, #0]
 80008dc:	4923      	ldr	r1, [pc, #140]	; (800096c <sendMachineData+0xfc>)
 80008de:	f00b fd99 	bl	800c414 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80008e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fc9c 	bl	8000224 <strlen>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80008fa:	491d      	ldr	r1, [pc, #116]	; (8000970 <sendMachineData+0x100>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00b fd89 	bl	800c414 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc8c 	bl	8000224 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	b29a      	uxth	r2, r3
 8000910:	f107 0110 	add.w	r1, r7, #16
 8000914:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000918:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800091c:	6818      	ldr	r0, [r3, #0]
 800091e:	f00a ff93 	bl	800b848 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000922:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000926:	f007 fec3 	bl	80086b0 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800092a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fc78 	bl	8000224 <strlen>
 8000934:	4603      	mov	r3, r0
 8000936:	b29a      	uxth	r2, r3
 8000938:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800093c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000944:	6818      	ldr	r0, [r3, #0]
 8000946:	f00a ff7f 	bl	800b848 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 800094a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800094e:	f007 feaf 	bl	80086b0 <HAL_Delay>
}
 8000952:	bf00      	nop
 8000954:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	0800cd3c 	.word	0x0800cd3c
 8000960:	0800cd4c 	.word	0x0800cd4c
 8000964:	20000284 	.word	0x20000284
 8000968:	0800cdc8 	.word	0x0800cdc8
 800096c:	0800cd6c 	.word	0x0800cd6c
 8000970:	0800cddc 	.word	0x0800cddc

08000974 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af04      	add	r7, sp, #16
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 800097e:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <hata2EEPROM+0xa4>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	1e5a      	subs	r2, r3, #1
 8000984:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <hata2EEPROM+0xa8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4413      	add	r3, r2
 800098a:	4a25      	ldr	r2, [pc, #148]	; (8000a20 <hata2EEPROM+0xac>)
 800098c:	5cd3      	ldrb	r3, [r2, r3]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000992:	f000 f92b 	bl	8000bec <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000996:	e000      	b.n	800099a <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000998:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e012      	b.n	80009c6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <hata2EEPROM+0xa8>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <hata2EEPROM+0xac>)
 80009aa:	5cd3      	ldrb	r3, [r2, r3]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d107      	bne.n	80009c0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <hata2EEPROM+0xa8>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	4919      	ldr	r1, [pc, #100]	; (8000a20 <hata2EEPROM+0xac>)
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	54ca      	strb	r2, [r1, r3]
					break;
 80009be:	e007      	b.n	80009d0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <hata2EEPROM+0xa4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dbe7      	blt.n	80009a0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <hata2EEPROM+0xa8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	b299      	uxth	r1, r3
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <hata2EEPROM+0xa4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	b298      	uxth	r0, r3
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <hata2EEPROM+0xa8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <hata2EEPROM+0xac>)
 80009e2:	4413      	add	r3, r2
 80009e4:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <hata2EEPROM+0xa4>)
 80009e6:	6812      	ldr	r2, [r2, #0]
 80009e8:	b292      	uxth	r2, r2
 80009ea:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80009ee:	9402      	str	r4, [sp, #8]
 80009f0:	9201      	str	r2, [sp, #4]
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	4603      	mov	r3, r0
 80009f6:	460a      	mov	r2, r1
 80009f8:	21a0      	movs	r1, #160	; 0xa0
 80009fa:	480a      	ldr	r0, [pc, #40]	; (8000a24 <hata2EEPROM+0xb0>)
 80009fc:	f008 fee2 	bl	80097c4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a04:	f007 fe54 	bl	80086b0 <HAL_Delay>
	eepromKontrol(1);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff fc13 	bl	8000234 <eepromKontrol>
}
 8000a0e:	bf00      	nop
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd90      	pop	{r4, r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000098 	.word	0x20000098
 8000a1c:	2000009c 	.word	0x2000009c
 8000a20:	20000118 	.word	0x20000118
 8000a24:	200003a8 	.word	0x200003a8

08000a28 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d11d      	bne.n	8000a74 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000a38:	4b62      	ldr	r3, [pc, #392]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d105      	bne.n	8000a4c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000a40:	4a61      	ldr	r2, [pc, #388]	; (8000bc8 <hataKoduLcdGoster+0x1a0>)
 8000a42:	2101      	movs	r1, #1
 8000a44:	2001      	movs	r0, #1
 8000a46:	f007 f8dd 	bl	8007c04 <lcd_print>
 8000a4a:	e008      	b.n	8000a5e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000a4c:	4b5d      	ldr	r3, [pc, #372]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d104      	bne.n	8000a5e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000a54:	4a5d      	ldr	r2, [pc, #372]	; (8000bcc <hataKoduLcdGoster+0x1a4>)
 8000a56:	2101      	movs	r1, #1
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f007 f8d3 	bl	8007c04 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000a5e:	4a5c      	ldr	r2, [pc, #368]	; (8000bd0 <hataKoduLcdGoster+0x1a8>)
 8000a60:	2101      	movs	r1, #1
 8000a62:	2002      	movs	r0, #2
 8000a64:	f007 f8ce 	bl	8007c04 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a68:	4a5a      	ldr	r2, [pc, #360]	; (8000bd4 <hataKoduLcdGoster+0x1ac>)
 8000a6a:	2107      	movs	r1, #7
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	f007 f8c9 	bl	8007c04 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000a72:	e0a3      	b.n	8000bbc <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d11d      	bne.n	8000ab6 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000a7a:	4b52      	ldr	r3, [pc, #328]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d105      	bne.n	8000a8e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000a82:	4a51      	ldr	r2, [pc, #324]	; (8000bc8 <hataKoduLcdGoster+0x1a0>)
 8000a84:	2101      	movs	r1, #1
 8000a86:	2001      	movs	r0, #1
 8000a88:	f007 f8bc 	bl	8007c04 <lcd_print>
 8000a8c:	e008      	b.n	8000aa0 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000a8e:	4b4d      	ldr	r3, [pc, #308]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d104      	bne.n	8000aa0 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000a96:	4a4d      	ldr	r2, [pc, #308]	; (8000bcc <hataKoduLcdGoster+0x1a4>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f007 f8b2 	bl	8007c04 <lcd_print>
		lcd_print(2, 2, "2");
 8000aa0:	4a4d      	ldr	r2, [pc, #308]	; (8000bd8 <hataKoduLcdGoster+0x1b0>)
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f007 f8ad 	bl	8007c04 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aaa:	4a4a      	ldr	r2, [pc, #296]	; (8000bd4 <hataKoduLcdGoster+0x1ac>)
 8000aac:	2107      	movs	r1, #7
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f007 f8a8 	bl	8007c04 <lcd_print>
}
 8000ab4:	e082      	b.n	8000bbc <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d11d      	bne.n	8000af8 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000abc:	4b41      	ldr	r3, [pc, #260]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d105      	bne.n	8000ad0 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000ac4:	4a40      	ldr	r2, [pc, #256]	; (8000bc8 <hataKoduLcdGoster+0x1a0>)
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f007 f89b 	bl	8007c04 <lcd_print>
 8000ace:	e008      	b.n	8000ae2 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000ad0:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d104      	bne.n	8000ae2 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000ad8:	4a3c      	ldr	r2, [pc, #240]	; (8000bcc <hataKoduLcdGoster+0x1a4>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	2001      	movs	r0, #1
 8000ade:	f007 f891 	bl	8007c04 <lcd_print>
		lcd_print(2, 3, "3");
 8000ae2:	4a3e      	ldr	r2, [pc, #248]	; (8000bdc <hataKoduLcdGoster+0x1b4>)
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f007 f88c 	bl	8007c04 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aec:	4a39      	ldr	r2, [pc, #228]	; (8000bd4 <hataKoduLcdGoster+0x1ac>)
 8000aee:	2107      	movs	r1, #7
 8000af0:	2002      	movs	r0, #2
 8000af2:	f007 f887 	bl	8007c04 <lcd_print>
}
 8000af6:	e061      	b.n	8000bbc <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d11d      	bne.n	8000b3a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000afe:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d105      	bne.n	8000b12 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000b06:	4a30      	ldr	r2, [pc, #192]	; (8000bc8 <hataKoduLcdGoster+0x1a0>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f007 f87a 	bl	8007c04 <lcd_print>
 8000b10:	e008      	b.n	8000b24 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000b12:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d104      	bne.n	8000b24 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000b1a:	4a2c      	ldr	r2, [pc, #176]	; (8000bcc <hataKoduLcdGoster+0x1a4>)
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f007 f870 	bl	8007c04 <lcd_print>
		lcd_print(2, 4, "4");
 8000b24:	4a2e      	ldr	r2, [pc, #184]	; (8000be0 <hataKoduLcdGoster+0x1b8>)
 8000b26:	2104      	movs	r1, #4
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f007 f86b 	bl	8007c04 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b2e:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <hataKoduLcdGoster+0x1ac>)
 8000b30:	2107      	movs	r1, #7
 8000b32:	2002      	movs	r0, #2
 8000b34:	f007 f866 	bl	8007c04 <lcd_print>
}
 8000b38:	e040      	b.n	8000bbc <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b05      	cmp	r3, #5
 8000b3e:	d11d      	bne.n	8000b7c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000b40:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d105      	bne.n	8000b54 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000b48:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <hataKoduLcdGoster+0x1a0>)
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f007 f859 	bl	8007c04 <lcd_print>
 8000b52:	e008      	b.n	8000b66 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d104      	bne.n	8000b66 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <hataKoduLcdGoster+0x1a4>)
 8000b5e:	2101      	movs	r1, #1
 8000b60:	2001      	movs	r0, #1
 8000b62:	f007 f84f 	bl	8007c04 <lcd_print>
		lcd_print(2, 5, "5");
 8000b66:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <hataKoduLcdGoster+0x1bc>)
 8000b68:	2105      	movs	r1, #5
 8000b6a:	2002      	movs	r0, #2
 8000b6c:	f007 f84a 	bl	8007c04 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b70:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <hataKoduLcdGoster+0x1ac>)
 8000b72:	2107      	movs	r1, #7
 8000b74:	2002      	movs	r0, #2
 8000b76:	f007 f845 	bl	8007c04 <lcd_print>
}
 8000b7a:	e01f      	b.n	8000bbc <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d11c      	bne.n	8000bbc <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d105      	bne.n	8000b96 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <hataKoduLcdGoster+0x1a0>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f007 f838 	bl	8007c04 <lcd_print>
 8000b94:	e008      	b.n	8000ba8 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <hataKoduLcdGoster+0x19c>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d104      	bne.n	8000ba8 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <hataKoduLcdGoster+0x1a4>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f007 f82e 	bl	8007c04 <lcd_print>
		lcd_print(2, 6, "6");
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <hataKoduLcdGoster+0x1c0>)
 8000baa:	2106      	movs	r1, #6
 8000bac:	2002      	movs	r0, #2
 8000bae:	f007 f829 	bl	8007c04 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <hataKoduLcdGoster+0x1ac>)
 8000bb4:	2107      	movs	r1, #7
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f007 f824 	bl	8007c04 <lcd_print>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000241 	.word	0x20000241
 8000bc8:	0800ce68 	.word	0x0800ce68
 8000bcc:	0800ce78 	.word	0x0800ce78
 8000bd0:	0800ce88 	.word	0x0800ce88
 8000bd4:	0800ce8c 	.word	0x0800ce8c
 8000bd8:	0800ce98 	.word	0x0800ce98
 8000bdc:	0800ce9c 	.word	0x0800ce9c
 8000be0:	0800cea0 	.word	0x0800cea0
 8000be4:	0800cea4 	.word	0x0800cea4
 8000be8:	0800cea8 	.word	0x0800cea8

08000bec <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	e009      	b.n	8000c0c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <eepromDataFillWithEmpty+0x38>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <eepromDataFillWithEmpty+0x3c>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <eepromDataFillWithEmpty+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dbf0      	blt.n	8000bf8 <eepromDataFillWithEmpty+0xc>
	}
}
 8000c16:	bf00      	nop
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000070 	.word	0x20000070
 8000c28:	20000118 	.word	0x20000118
 8000c2c:	20000098 	.word	0x20000098

08000c30 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c36:	463b      	mov	r3, r7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c42:	4b50      	ldr	r3, [pc, #320]	; (8000d84 <i2cTest+0x154>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b4e      	ldr	r3, [pc, #312]	; (8000d84 <i2cTest+0x154>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 0201 	bic.w	r2, r2, #1
 8000c50:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000c52:	484c      	ldr	r0, [pc, #304]	; (8000d84 <i2cTest+0x154>)
 8000c54:	f008 fc88 	bl	8009568 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c58:	23c0      	movs	r3, #192	; 0xc0
 8000c5a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000c5c:	2311      	movs	r3, #17
 8000c5e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4846      	ldr	r0, [pc, #280]	; (8000d88 <i2cTest+0x158>)
 8000c6e:	f008 f88f 	bl	8008d90 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	4844      	ldr	r0, [pc, #272]	; (8000d88 <i2cTest+0x158>)
 8000c78:	f008 fb01 	bl	800927e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	4841      	ldr	r0, [pc, #260]	; (8000d88 <i2cTest+0x158>)
 8000c82:	f008 fafc 	bl	800927e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000c86:	200a      	movs	r0, #10
 8000c88:	f007 fd12 	bl	80086b0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c8c:	bf00      	nop
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	483d      	ldr	r0, [pc, #244]	; (8000d88 <i2cTest+0x158>)
 8000c92:	f008 fadd 	bl	8009250 <HAL_GPIO_ReadPin>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d006      	beq.n	8000caa <i2cTest+0x7a>
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	483a      	ldr	r0, [pc, #232]	; (8000d88 <i2cTest+0x158>)
 8000ca0:	f008 fad6 	bl	8009250 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d1f1      	bne.n	8000c8e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	4836      	ldr	r0, [pc, #216]	; (8000d88 <i2cTest+0x158>)
 8000cb0:	f008 fae5 	bl	800927e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f007 fcfb 	bl	80086b0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000cba:	bf00      	nop
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	4832      	ldr	r0, [pc, #200]	; (8000d88 <i2cTest+0x158>)
 8000cc0:	f008 fac6 	bl	8009250 <HAL_GPIO_ReadPin>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d0f8      	beq.n	8000cbc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2140      	movs	r1, #64	; 0x40
 8000cce:	482e      	ldr	r0, [pc, #184]	; (8000d88 <i2cTest+0x158>)
 8000cd0:	f008 fad5 	bl	800927e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cd4:	200a      	movs	r0, #10
 8000cd6:	f007 fceb 	bl	80086b0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000cda:	bf00      	nop
 8000cdc:	2140      	movs	r1, #64	; 0x40
 8000cde:	482a      	ldr	r0, [pc, #168]	; (8000d88 <i2cTest+0x158>)
 8000ce0:	f008 fab6 	bl	8009250 <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d0f8      	beq.n	8000cdc <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2140      	movs	r1, #64	; 0x40
 8000cee:	4826      	ldr	r0, [pc, #152]	; (8000d88 <i2cTest+0x158>)
 8000cf0:	f008 fac5 	bl	800927e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cf4:	200a      	movs	r0, #10
 8000cf6:	f007 fcdb 	bl	80086b0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000cfa:	bf00      	nop
 8000cfc:	2140      	movs	r1, #64	; 0x40
 8000cfe:	4822      	ldr	r0, [pc, #136]	; (8000d88 <i2cTest+0x158>)
 8000d00:	f008 faa6 	bl	8009250 <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d1f8      	bne.n	8000cfc <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	481e      	ldr	r0, [pc, #120]	; (8000d88 <i2cTest+0x158>)
 8000d10:	f008 fab5 	bl	800927e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d14:	200a      	movs	r0, #10
 8000d16:	f007 fccb 	bl	80086b0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d1a:	bf00      	nop
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	481a      	ldr	r0, [pc, #104]	; (8000d88 <i2cTest+0x158>)
 8000d20:	f008 fa96 	bl	8009250 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d1f8      	bne.n	8000d1c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d2a:	23c0      	movs	r3, #192	; 0xc0
 8000d2c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d2e:	2312      	movs	r3, #18
 8000d30:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4812      	ldr	r0, [pc, #72]	; (8000d88 <i2cTest+0x158>)
 8000d40:	f008 f826 	bl	8008d90 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <i2cTest+0x154>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <i2cTest+0x154>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d52:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <i2cTest+0x154>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <i2cTest+0x154>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d62:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <i2cTest+0x154>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <i2cTest+0x154>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0201 	orr.w	r2, r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <i2cTest+0x154>)
 8000d76:	f008 fab3 	bl	80092e0 <HAL_I2C_Init>
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200003a8 	.word	0x200003a8
 8000d88:	40010c00 	.word	0x40010c00

08000d8c <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000d96:	20c8      	movs	r0, #200	; 0xc8
 8000d98:	f007 fc8a 	bl	80086b0 <HAL_Delay>
	lcd_clear();
 8000d9c:	f006 ff5e 	bl	8007c5c <lcd_clear>
	if(type == 1 && page == 0) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d143      	bne.n	8000e2e <printTemplate+0xa2>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d140      	bne.n	8000e2e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000dac:	4a9d      	ldr	r2, [pc, #628]	; (8001024 <printTemplate+0x298>)
 8000dae:	2101      	movs	r1, #1
 8000db0:	2001      	movs	r0, #1
 8000db2:	f006 ff27 	bl	8007c04 <lcd_print>
		lcd_print(2, 3, "0");
 8000db6:	4a9c      	ldr	r2, [pc, #624]	; (8001028 <printTemplate+0x29c>)
 8000db8:	2103      	movs	r1, #3
 8000dba:	2002      	movs	r0, #2
 8000dbc:	f006 ff22 	bl	8007c04 <lcd_print>
		lcd_print(2, 4, "1");
 8000dc0:	4a9a      	ldr	r2, [pc, #616]	; (800102c <printTemplate+0x2a0>)
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	f006 ff1d 	bl	8007c04 <lcd_print>
		lcd_print(2, 5, "2");
 8000dca:	4a99      	ldr	r2, [pc, #612]	; (8001030 <printTemplate+0x2a4>)
 8000dcc:	2105      	movs	r1, #5
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f006 ff18 	bl	8007c04 <lcd_print>
		lcd_print(2, 6, "3");
 8000dd4:	4a97      	ldr	r2, [pc, #604]	; (8001034 <printTemplate+0x2a8>)
 8000dd6:	2106      	movs	r1, #6
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f006 ff13 	bl	8007c04 <lcd_print>
		lcd_print(2, 7, "4");
 8000dde:	4a96      	ldr	r2, [pc, #600]	; (8001038 <printTemplate+0x2ac>)
 8000de0:	2107      	movs	r1, #7
 8000de2:	2002      	movs	r0, #2
 8000de4:	f006 ff0e 	bl	8007c04 <lcd_print>
		lcd_print(2, 10, "5");
 8000de8:	4a94      	ldr	r2, [pc, #592]	; (800103c <printTemplate+0x2b0>)
 8000dea:	210a      	movs	r1, #10
 8000dec:	2002      	movs	r0, #2
 8000dee:	f006 ff09 	bl	8007c04 <lcd_print>
		lcd_print(2, 11, "6");
 8000df2:	4a93      	ldr	r2, [pc, #588]	; (8001040 <printTemplate+0x2b4>)
 8000df4:	210b      	movs	r1, #11
 8000df6:	2002      	movs	r0, #2
 8000df8:	f006 ff04 	bl	8007c04 <lcd_print>
		lcd_print(2, 12, "7");
 8000dfc:	4a91      	ldr	r2, [pc, #580]	; (8001044 <printTemplate+0x2b8>)
 8000dfe:	210c      	movs	r1, #12
 8000e00:	2002      	movs	r0, #2
 8000e02:	f006 feff 	bl	8007c04 <lcd_print>
		lcd_print(2, 13, "8");
 8000e06:	4a90      	ldr	r2, [pc, #576]	; (8001048 <printTemplate+0x2bc>)
 8000e08:	210d      	movs	r1, #13
 8000e0a:	2002      	movs	r0, #2
 8000e0c:	f006 fefa 	bl	8007c04 <lcd_print>
		lcd_print(2, 14, "9");
 8000e10:	4a8e      	ldr	r2, [pc, #568]	; (800104c <printTemplate+0x2c0>)
 8000e12:	210e      	movs	r1, #14
 8000e14:	2002      	movs	r0, #2
 8000e16:	f006 fef5 	bl	8007c04 <lcd_print>
		lcd_print(1, 5, machineID);
 8000e1a:	4a8d      	ldr	r2, [pc, #564]	; (8001050 <printTemplate+0x2c4>)
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f006 fef0 	bl	8007c04 <lcd_print>
		lcd_gotoxy(2, 3);
 8000e24:	2103      	movs	r1, #3
 8000e26:	2002      	movs	r0, #2
 8000e28:	f006 fecd 	bl	8007bc6 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000e2c:	e0f5      	b.n	800101a <printTemplate+0x28e>
	} else if(type == 2) {
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d178      	bne.n	8000f26 <printTemplate+0x19a>
		if(page == 1) {
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d114      	bne.n	8000e64 <printTemplate+0xd8>
			lcd_clear();
 8000e3a:	f006 ff0f 	bl	8007c5c <lcd_clear>
			HAL_Delay(100);
 8000e3e:	2064      	movs	r0, #100	; 0x64
 8000e40:	f007 fc36 	bl	80086b0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e44:	4a83      	ldr	r2, [pc, #524]	; (8001054 <printTemplate+0x2c8>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f006 fedb 	bl	8007c04 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e4e:	4a82      	ldr	r2, [pc, #520]	; (8001058 <printTemplate+0x2cc>)
 8000e50:	2107      	movs	r1, #7
 8000e52:	2001      	movs	r0, #1
 8000e54:	f006 fed6 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e58:	4a80      	ldr	r2, [pc, #512]	; (800105c <printTemplate+0x2d0>)
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f006 fed1 	bl	8007c04 <lcd_print>
}
 8000e62:	e0da      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 2) {
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d114      	bne.n	8000e94 <printTemplate+0x108>
			lcd_clear();
 8000e6a:	f006 fef7 	bl	8007c5c <lcd_clear>
			HAL_Delay(100);
 8000e6e:	2064      	movs	r0, #100	; 0x64
 8000e70:	f007 fc1e 	bl	80086b0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e74:	4a77      	ldr	r2, [pc, #476]	; (8001054 <printTemplate+0x2c8>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f006 fec3 	bl	8007c04 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e7e:	4a76      	ldr	r2, [pc, #472]	; (8001058 <printTemplate+0x2cc>)
 8000e80:	2107      	movs	r1, #7
 8000e82:	2001      	movs	r0, #1
 8000e84:	f006 febe 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000e88:	4a75      	ldr	r2, [pc, #468]	; (8001060 <printTemplate+0x2d4>)
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f006 feb9 	bl	8007c04 <lcd_print>
}
 8000e92:	e0c2      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 3) {
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d114      	bne.n	8000ec4 <printTemplate+0x138>
			lcd_clear();
 8000e9a:	f006 fedf 	bl	8007c5c <lcd_clear>
			HAL_Delay(100);
 8000e9e:	2064      	movs	r0, #100	; 0x64
 8000ea0:	f007 fc06 	bl	80086b0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ea4:	4a6b      	ldr	r2, [pc, #428]	; (8001054 <printTemplate+0x2c8>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f006 feab 	bl	8007c04 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000eae:	4a6a      	ldr	r2, [pc, #424]	; (8001058 <printTemplate+0x2cc>)
 8000eb0:	2107      	movs	r1, #7
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f006 fea6 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000eb8:	4a6a      	ldr	r2, [pc, #424]	; (8001064 <printTemplate+0x2d8>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f006 fea1 	bl	8007c04 <lcd_print>
}
 8000ec2:	e0aa      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 4) {
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d114      	bne.n	8000ef4 <printTemplate+0x168>
			lcd_clear();
 8000eca:	f006 fec7 	bl	8007c5c <lcd_clear>
			HAL_Delay(100);
 8000ece:	2064      	movs	r0, #100	; 0x64
 8000ed0:	f007 fbee 	bl	80086b0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ed4:	4a5f      	ldr	r2, [pc, #380]	; (8001054 <printTemplate+0x2c8>)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f006 fe93 	bl	8007c04 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ede:	4a5e      	ldr	r2, [pc, #376]	; (8001058 <printTemplate+0x2cc>)
 8000ee0:	2107      	movs	r1, #7
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f006 fe8e 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000ee8:	4a5f      	ldr	r2, [pc, #380]	; (8001068 <printTemplate+0x2dc>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	2002      	movs	r0, #2
 8000eee:	f006 fe89 	bl	8007c04 <lcd_print>
}
 8000ef2:	e092      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 5) {
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b05      	cmp	r3, #5
 8000ef8:	f040 808f 	bne.w	800101a <printTemplate+0x28e>
			lcd_clear();
 8000efc:	f006 feae 	bl	8007c5c <lcd_clear>
			HAL_Delay(100);
 8000f00:	2064      	movs	r0, #100	; 0x64
 8000f02:	f007 fbd5 	bl	80086b0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f06:	4a53      	ldr	r2, [pc, #332]	; (8001054 <printTemplate+0x2c8>)
 8000f08:	2101      	movs	r1, #1
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f006 fe7a 	bl	8007c04 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f10:	4a51      	ldr	r2, [pc, #324]	; (8001058 <printTemplate+0x2cc>)
 8000f12:	2107      	movs	r1, #7
 8000f14:	2001      	movs	r0, #1
 8000f16:	f006 fe75 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000f1a:	4a54      	ldr	r2, [pc, #336]	; (800106c <printTemplate+0x2e0>)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f006 fe70 	bl	8007c04 <lcd_print>
}
 8000f24:	e079      	b.n	800101a <printTemplate+0x28e>
	} else if(type == 3) {
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d176      	bne.n	800101a <printTemplate+0x28e>
		if(page == 1) {
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d114      	bne.n	8000f5c <printTemplate+0x1d0>
			lcd_clear();
 8000f32:	f006 fe93 	bl	8007c5c <lcd_clear>
			HAL_Delay(100);
 8000f36:	2064      	movs	r0, #100	; 0x64
 8000f38:	f007 fbba 	bl	80086b0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f3c:	4a4c      	ldr	r2, [pc, #304]	; (8001070 <printTemplate+0x2e4>)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2001      	movs	r0, #1
 8000f42:	f006 fe5f 	bl	8007c04 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f46:	4a4b      	ldr	r2, [pc, #300]	; (8001074 <printTemplate+0x2e8>)
 8000f48:	2107      	movs	r1, #7
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f006 fe5a 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f50:	4a42      	ldr	r2, [pc, #264]	; (800105c <printTemplate+0x2d0>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	2002      	movs	r0, #2
 8000f56:	f006 fe55 	bl	8007c04 <lcd_print>
}
 8000f5a:	e05e      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 2) {
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d114      	bne.n	8000f8c <printTemplate+0x200>
			lcd_clear();
 8000f62:	f006 fe7b 	bl	8007c5c <lcd_clear>
			HAL_Delay(100);
 8000f66:	2064      	movs	r0, #100	; 0x64
 8000f68:	f007 fba2 	bl	80086b0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f6c:	4a40      	ldr	r2, [pc, #256]	; (8001070 <printTemplate+0x2e4>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2001      	movs	r0, #1
 8000f72:	f006 fe47 	bl	8007c04 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f76:	4a3f      	ldr	r2, [pc, #252]	; (8001074 <printTemplate+0x2e8>)
 8000f78:	2107      	movs	r1, #7
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f006 fe42 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f80:	4a37      	ldr	r2, [pc, #220]	; (8001060 <printTemplate+0x2d4>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	2002      	movs	r0, #2
 8000f86:	f006 fe3d 	bl	8007c04 <lcd_print>
}
 8000f8a:	e046      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 3) {
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d114      	bne.n	8000fbc <printTemplate+0x230>
			lcd_clear();
 8000f92:	f006 fe63 	bl	8007c5c <lcd_clear>
			HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f007 fb8a 	bl	80086b0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f9c:	4a34      	ldr	r2, [pc, #208]	; (8001070 <printTemplate+0x2e4>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f006 fe2f 	bl	8007c04 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fa6:	4a33      	ldr	r2, [pc, #204]	; (8001074 <printTemplate+0x2e8>)
 8000fa8:	2107      	movs	r1, #7
 8000faa:	2001      	movs	r0, #1
 8000fac:	f006 fe2a 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000fb0:	4a2c      	ldr	r2, [pc, #176]	; (8001064 <printTemplate+0x2d8>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f006 fe25 	bl	8007c04 <lcd_print>
}
 8000fba:	e02e      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 4) {
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d114      	bne.n	8000fec <printTemplate+0x260>
			lcd_clear();
 8000fc2:	f006 fe4b 	bl	8007c5c <lcd_clear>
			HAL_Delay(100);
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f007 fb72 	bl	80086b0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fcc:	4a28      	ldr	r2, [pc, #160]	; (8001070 <printTemplate+0x2e4>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f006 fe17 	bl	8007c04 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fd6:	4a27      	ldr	r2, [pc, #156]	; (8001074 <printTemplate+0x2e8>)
 8000fd8:	2107      	movs	r1, #7
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f006 fe12 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <printTemplate+0x2dc>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f006 fe0d 	bl	8007c04 <lcd_print>
}
 8000fea:	e016      	b.n	800101a <printTemplate+0x28e>
		} else if(page == 5) {
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b05      	cmp	r3, #5
 8000ff0:	d113      	bne.n	800101a <printTemplate+0x28e>
			lcd_clear();
 8000ff2:	f006 fe33 	bl	8007c5c <lcd_clear>
			HAL_Delay(100);
 8000ff6:	2064      	movs	r0, #100	; 0x64
 8000ff8:	f007 fb5a 	bl	80086b0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ffc:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <printTemplate+0x2e4>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	2001      	movs	r0, #1
 8001002:	f006 fdff 	bl	8007c04 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001006:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <printTemplate+0x2e8>)
 8001008:	2107      	movs	r1, #7
 800100a:	2001      	movs	r0, #1
 800100c:	f006 fdfa 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001010:	4a16      	ldr	r2, [pc, #88]	; (800106c <printTemplate+0x2e0>)
 8001012:	2101      	movs	r1, #1
 8001014:	2002      	movs	r0, #2
 8001016:	f006 fdf5 	bl	8007c04 <lcd_print>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	0800ceac 	.word	0x0800ceac
 8001028:	0800ceb4 	.word	0x0800ceb4
 800102c:	0800ceb8 	.word	0x0800ceb8
 8001030:	0800cebc 	.word	0x0800cebc
 8001034:	0800cec0 	.word	0x0800cec0
 8001038:	0800cec4 	.word	0x0800cec4
 800103c:	0800cec8 	.word	0x0800cec8
 8001040:	0800cecc 	.word	0x0800cecc
 8001044:	0800ced0 	.word	0x0800ced0
 8001048:	0800ced4 	.word	0x0800ced4
 800104c:	0800ced8 	.word	0x0800ced8
 8001050:	20000190 	.word	0x20000190
 8001054:	0800cedc 	.word	0x0800cedc
 8001058:	2000019c 	.word	0x2000019c
 800105c:	0800cee4 	.word	0x0800cee4
 8001060:	0800cef8 	.word	0x0800cef8
 8001064:	0800cf0c 	.word	0x0800cf0c
 8001068:	0800cf20 	.word	0x0800cf20
 800106c:	0800cf34 	.word	0x0800cf34
 8001070:	0800cf48 	.word	0x0800cf48
 8001074:	200001b0 	.word	0x200001b0

08001078 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800107c:	f3bf 8f4f 	dsb	sy
}
 8001080:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <__NVIC_SystemReset+0x24>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800108a:	4904      	ldr	r1, [pc, #16]	; (800109c <__NVIC_SystemReset+0x24>)
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_SystemReset+0x28>)
 800108e:	4313      	orrs	r3, r2
 8001090:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001092:	f3bf 8f4f 	dsb	sy
}
 8001096:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <__NVIC_SystemReset+0x20>
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	05fa0004 	.word	0x05fa0004

080010a4 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80010aa:	2101      	movs	r1, #1
 80010ac:	488e      	ldr	r0, [pc, #568]	; (80012e8 <menu+0x244>)
 80010ae:	f008 f8cf 	bl	8009250 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	f040 808e 	bne.w	80011d6 <menu+0x132>
 80010ba:	4b8c      	ldr	r3, [pc, #560]	; (80012ec <menu+0x248>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	f083 0301 	eor.w	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 8086 	beq.w	80011d6 <menu+0x132>
		menuSayac = menuSayac+1;
 80010ca:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <menu+0x24c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b87      	ldr	r3, [pc, #540]	; (80012f0 <menu+0x24c>)
 80010d4:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80010d6:	4b86      	ldr	r3, [pc, #536]	; (80012f0 <menu+0x24c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b24      	cmp	r3, #36	; 0x24
 80010dc:	d102      	bne.n	80010e4 <menu+0x40>
			menuSayac = 1;
 80010de:	4b84      	ldr	r3, [pc, #528]	; (80012f0 <menu+0x24c>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80010e4:	4b82      	ldr	r3, [pc, #520]	; (80012f0 <menu+0x24c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b12      	cmp	r3, #18
 80010ea:	d106      	bne.n	80010fa <menu+0x56>
 80010ec:	4b81      	ldr	r3, [pc, #516]	; (80012f4 <menu+0x250>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <menu+0x56>
			menuSayac = 21;
 80010f4:	4b7e      	ldr	r3, [pc, #504]	; (80012f0 <menu+0x24c>)
 80010f6:	2215      	movs	r2, #21
 80010f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80010fa:	4b7d      	ldr	r3, [pc, #500]	; (80012f0 <menu+0x24c>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d106      	bne.n	8001110 <menu+0x6c>
 8001102:	4b7d      	ldr	r3, [pc, #500]	; (80012f8 <menu+0x254>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <menu+0x6c>
			menuSayac = 16;
 800110a:	4b79      	ldr	r3, [pc, #484]	; (80012f0 <menu+0x24c>)
 800110c:	2210      	movs	r2, #16
 800110e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001110:	4b77      	ldr	r3, [pc, #476]	; (80012f0 <menu+0x24c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b0d      	cmp	r3, #13
 8001116:	d106      	bne.n	8001126 <menu+0x82>
 8001118:	4b77      	ldr	r3, [pc, #476]	; (80012f8 <menu+0x254>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d102      	bne.n	8001126 <menu+0x82>
			menuSayac = 16;
 8001120:	4b73      	ldr	r3, [pc, #460]	; (80012f0 <menu+0x24c>)
 8001122:	2210      	movs	r2, #16
 8001124:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001126:	4b72      	ldr	r3, [pc, #456]	; (80012f0 <menu+0x24c>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b09      	cmp	r3, #9
 800112c:	d106      	bne.n	800113c <menu+0x98>
 800112e:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <menu+0x254>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d102      	bne.n	800113c <menu+0x98>
			menuSayac = 13;
 8001136:	4b6e      	ldr	r3, [pc, #440]	; (80012f0 <menu+0x24c>)
 8001138:	220d      	movs	r2, #13
 800113a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800113c:	4b6c      	ldr	r3, [pc, #432]	; (80012f0 <menu+0x24c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b0a      	cmp	r3, #10
 8001142:	d10a      	bne.n	800115a <menu+0xb6>
 8001144:	4b6d      	ldr	r3, [pc, #436]	; (80012fc <menu+0x258>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d003      	beq.n	8001154 <menu+0xb0>
 800114c:	4b6b      	ldr	r3, [pc, #428]	; (80012fc <menu+0x258>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d102      	bne.n	800115a <menu+0xb6>
			menuSayac = 11;
 8001154:	4b66      	ldr	r3, [pc, #408]	; (80012f0 <menu+0x24c>)
 8001156:	220b      	movs	r2, #11
 8001158:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800115a:	4b65      	ldr	r3, [pc, #404]	; (80012f0 <menu+0x24c>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b0c      	cmp	r3, #12
 8001160:	d10e      	bne.n	8001180 <menu+0xdc>
 8001162:	4b67      	ldr	r3, [pc, #412]	; (8001300 <menu+0x25c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d003      	beq.n	8001172 <menu+0xce>
 800116a:	4b65      	ldr	r3, [pc, #404]	; (8001300 <menu+0x25c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d106      	bne.n	8001180 <menu+0xdc>
 8001172:	4b61      	ldr	r3, [pc, #388]	; (80012f8 <menu+0x254>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d102      	bne.n	8001180 <menu+0xdc>
			menuSayac = 16;
 800117a:	4b5d      	ldr	r3, [pc, #372]	; (80012f0 <menu+0x24c>)
 800117c:	2210      	movs	r2, #16
 800117e:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001180:	4b5b      	ldr	r3, [pc, #364]	; (80012f0 <menu+0x24c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b0c      	cmp	r3, #12
 8001186:	d10e      	bne.n	80011a6 <menu+0x102>
 8001188:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <menu+0x25c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d003      	beq.n	8001198 <menu+0xf4>
 8001190:	4b5b      	ldr	r3, [pc, #364]	; (8001300 <menu+0x25c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d106      	bne.n	80011a6 <menu+0x102>
 8001198:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <menu+0x254>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d102      	bne.n	80011a6 <menu+0x102>
			menuSayac = 13;
 80011a0:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <menu+0x24c>)
 80011a2:	220d      	movs	r2, #13
 80011a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80011a6:	4b52      	ldr	r3, [pc, #328]	; (80012f0 <menu+0x24c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	d106      	bne.n	80011bc <menu+0x118>
 80011ae:	4b55      	ldr	r3, [pc, #340]	; (8001304 <menu+0x260>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d102      	bne.n	80011bc <menu+0x118>
			menuSayac = 16;
 80011b6:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <menu+0x24c>)
 80011b8:	2210      	movs	r2, #16
 80011ba:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80011bc:	4b4c      	ldr	r3, [pc, #304]	; (80012f0 <menu+0x24c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b18      	cmp	r3, #24
 80011c2:	d106      	bne.n	80011d2 <menu+0x12e>
 80011c4:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <menu+0x250>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <menu+0x12e>
			menuSayac = 26;
 80011cc:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <menu+0x24c>)
 80011ce:	221a      	movs	r2, #26
 80011d0:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80011d2:	f003 fb3d 	bl	8004850 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80011d6:	2108      	movs	r1, #8
 80011d8:	484b      	ldr	r0, [pc, #300]	; (8001308 <menu+0x264>)
 80011da:	f008 f839 	bl	8009250 <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d175      	bne.n	80012d0 <menu+0x22c>
 80011e4:	4b41      	ldr	r3, [pc, #260]	; (80012ec <menu+0x248>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f083 0301 	eor.w	r3, r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d06e      	beq.n	80012d0 <menu+0x22c>
		if (menuSayac <= 1) {
 80011f2:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <menu+0x24c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d802      	bhi.n	8001200 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <menu+0x24c>)
 80011fc:	2224      	movs	r2, #36	; 0x24
 80011fe:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001200:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <menu+0x24c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	3b01      	subs	r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <menu+0x24c>)
 800120a:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <menu+0x24c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b14      	cmp	r3, #20
 8001212:	d106      	bne.n	8001222 <menu+0x17e>
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <menu+0x250>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <menu+0x17e>
			menuSayac = 17;
 800121c:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <menu+0x24c>)
 800121e:	2211      	movs	r2, #17
 8001220:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001222:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <menu+0x24c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	d106      	bne.n	8001238 <menu+0x194>
 800122a:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <menu+0x254>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <menu+0x194>
			menuSayac = 7;
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <menu+0x24c>)
 8001234:	2207      	movs	r2, #7
 8001236:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <menu+0x24c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d106      	bne.n	800124e <menu+0x1aa>
 8001240:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <menu+0x254>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <menu+0x1aa>
			menuSayac = 12;
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <menu+0x24c>)
 800124a:	220c      	movs	r2, #12
 800124c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <menu+0x24c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b0c      	cmp	r3, #12
 8001254:	d106      	bne.n	8001264 <menu+0x1c0>
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <menu+0x254>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d102      	bne.n	8001264 <menu+0x1c0>
			menuSayac = 8;
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <menu+0x24c>)
 8001260:	2208      	movs	r2, #8
 8001262:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <menu+0x24c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b0a      	cmp	r3, #10
 800126a:	d10a      	bne.n	8001282 <menu+0x1de>
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <menu+0x258>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d003      	beq.n	800127c <menu+0x1d8>
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <menu+0x258>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d102      	bne.n	8001282 <menu+0x1de>
			menuSayac = 9;
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <menu+0x24c>)
 800127e:	2209      	movs	r2, #9
 8001280:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <menu+0x24c>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b0c      	cmp	r3, #12
 8001288:	d10a      	bne.n	80012a0 <menu+0x1fc>
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <menu+0x25c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d003      	beq.n	800129a <menu+0x1f6>
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <menu+0x25c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d102      	bne.n	80012a0 <menu+0x1fc>
			menuSayac = 11;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <menu+0x24c>)
 800129c:	220b      	movs	r2, #11
 800129e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <menu+0x24c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d106      	bne.n	80012b6 <menu+0x212>
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <menu+0x260>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d102      	bne.n	80012b6 <menu+0x212>
			menuSayac = 14;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <menu+0x24c>)
 80012b2:	220e      	movs	r2, #14
 80012b4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <menu+0x24c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b19      	cmp	r3, #25
 80012bc:	d106      	bne.n	80012cc <menu+0x228>
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <menu+0x250>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d102      	bne.n	80012cc <menu+0x228>
			menuSayac = 23;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <menu+0x24c>)
 80012c8:	2217      	movs	r2, #23
 80012ca:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80012cc:	f003 fac0 	bl	8004850 <bekle>
	}

	if (menuSayac == 0) {
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <menu+0x24c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d133      	bne.n	8001340 <menu+0x29c>
		if(dilSecim == 0) {
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <menu+0x268>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d121      	bne.n	8001324 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80012e0:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <menu+0x26c>)
 80012e2:	2101      	movs	r1, #1
 80012e4:	2001      	movs	r0, #1
 80012e6:	e015      	b.n	8001314 <menu+0x270>
 80012e8:	40010800 	.word	0x40010800
 80012ec:	2000024f 	.word	0x2000024f
 80012f0:	20000220 	.word	0x20000220
 80012f4:	2000022f 	.word	0x2000022f
 80012f8:	20000228 	.word	0x20000228
 80012fc:	20000229 	.word	0x20000229
 8001300:	2000022a 	.word	0x2000022a
 8001304:	2000022b 	.word	0x2000022b
 8001308:	40011000 	.word	0x40011000
 800130c:	20000241 	.word	0x20000241
 8001310:	0800cf50 	.word	0x0800cf50
 8001314:	f006 fc76 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001318:	4a94      	ldr	r2, [pc, #592]	; (800156c <menu+0x4c8>)
 800131a:	2101      	movs	r1, #1
 800131c:	2002      	movs	r0, #2
 800131e:	f006 fc71 	bl	8007c04 <lcd_print>
 8001322:	e00d      	b.n	8001340 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001324:	4b92      	ldr	r3, [pc, #584]	; (8001570 <menu+0x4cc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d109      	bne.n	8001340 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 800132c:	4a91      	ldr	r2, [pc, #580]	; (8001574 <menu+0x4d0>)
 800132e:	2101      	movs	r1, #1
 8001330:	2001      	movs	r0, #1
 8001332:	f006 fc67 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001336:	4a90      	ldr	r2, [pc, #576]	; (8001578 <menu+0x4d4>)
 8001338:	2101      	movs	r1, #1
 800133a:	2002      	movs	r0, #2
 800133c:	f006 fc62 	bl	8007c04 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001340:	4b8e      	ldr	r3, [pc, #568]	; (800157c <menu+0x4d8>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b01      	cmp	r3, #1
 8001346:	f040 82b5 	bne.w	80018b4 <menu+0x810>
		if(dilSecim == 0) {
 800134a:	4b89      	ldr	r3, [pc, #548]	; (8001570 <menu+0x4cc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d105      	bne.n	800135e <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001352:	4a8b      	ldr	r2, [pc, #556]	; (8001580 <menu+0x4dc>)
 8001354:	2101      	movs	r1, #1
 8001356:	2001      	movs	r0, #1
 8001358:	f006 fc54 	bl	8007c04 <lcd_print>
 800135c:	e008      	b.n	8001370 <menu+0x2cc>
		} else if(dilSecim == 1) {
 800135e:	4b84      	ldr	r3, [pc, #528]	; (8001570 <menu+0x4cc>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d104      	bne.n	8001370 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001366:	4a87      	ldr	r2, [pc, #540]	; (8001584 <menu+0x4e0>)
 8001368:	2101      	movs	r1, #1
 800136a:	2001      	movs	r0, #1
 800136c:	f006 fc4a 	bl	8007c04 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001370:	4b85      	ldr	r3, [pc, #532]	; (8001588 <menu+0x4e4>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d123      	bne.n	80013c0 <menu+0x31c>
			if(dilSecim == 0) {
 8001378:	4b7d      	ldr	r3, [pc, #500]	; (8001570 <menu+0x4cc>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d105      	bne.n	800138c <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001380:	4a82      	ldr	r2, [pc, #520]	; (800158c <menu+0x4e8>)
 8001382:	2101      	movs	r1, #1
 8001384:	2002      	movs	r0, #2
 8001386:	f006 fc3d 	bl	8007c04 <lcd_print>
 800138a:	e008      	b.n	800139e <menu+0x2fa>

			} else if(dilSecim == 1) {
 800138c:	4b78      	ldr	r3, [pc, #480]	; (8001570 <menu+0x4cc>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d104      	bne.n	800139e <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001394:	4a7e      	ldr	r2, [pc, #504]	; (8001590 <menu+0x4ec>)
 8001396:	2101      	movs	r1, #1
 8001398:	2002      	movs	r0, #2
 800139a:	f006 fc33 	bl	8007c04 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800139e:	4a7d      	ldr	r2, [pc, #500]	; (8001594 <menu+0x4f0>)
 80013a0:	210f      	movs	r1, #15
 80013a2:	2002      	movs	r0, #2
 80013a4:	f006 fc2e 	bl	8007c04 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80013a8:	4b7b      	ldr	r3, [pc, #492]	; (8001598 <menu+0x4f4>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	220a      	movs	r2, #10
 80013ae:	497b      	ldr	r1, [pc, #492]	; (800159c <menu+0x4f8>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f00a ff79 	bl	800c2a8 <itoa>
			lcd_print(2, 14, snum);
 80013b6:	4a79      	ldr	r2, [pc, #484]	; (800159c <menu+0x4f8>)
 80013b8:	210e      	movs	r1, #14
 80013ba:	2002      	movs	r0, #2
 80013bc:	f006 fc22 	bl	8007c04 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80013c0:	4b71      	ldr	r3, [pc, #452]	; (8001588 <menu+0x4e4>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d123      	bne.n	8001410 <menu+0x36c>
			if(dilSecim == 0) {
 80013c8:	4b69      	ldr	r3, [pc, #420]	; (8001570 <menu+0x4cc>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80013d0:	4a73      	ldr	r2, [pc, #460]	; (80015a0 <menu+0x4fc>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	2002      	movs	r0, #2
 80013d6:	f006 fc15 	bl	8007c04 <lcd_print>
 80013da:	e008      	b.n	80013ee <menu+0x34a>
			} else if(dilSecim == 1) {
 80013dc:	4b64      	ldr	r3, [pc, #400]	; (8001570 <menu+0x4cc>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d104      	bne.n	80013ee <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80013e4:	4a6f      	ldr	r2, [pc, #444]	; (80015a4 <menu+0x500>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	2002      	movs	r0, #2
 80013ea:	f006 fc0b 	bl	8007c04 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80013ee:	4a6e      	ldr	r2, [pc, #440]	; (80015a8 <menu+0x504>)
 80013f0:	210f      	movs	r1, #15
 80013f2:	2002      	movs	r0, #2
 80013f4:	f006 fc06 	bl	8007c04 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80013f8:	4b6c      	ldr	r3, [pc, #432]	; (80015ac <menu+0x508>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	220a      	movs	r2, #10
 80013fe:	4967      	ldr	r1, [pc, #412]	; (800159c <menu+0x4f8>)
 8001400:	4618      	mov	r0, r3
 8001402:	f00a ff51 	bl	800c2a8 <itoa>
			lcd_print(2, 14, snum);
 8001406:	4a65      	ldr	r2, [pc, #404]	; (800159c <menu+0x4f8>)
 8001408:	210e      	movs	r1, #14
 800140a:	2002      	movs	r0, #2
 800140c:	f006 fbfa 	bl	8007c04 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001410:	4b5d      	ldr	r3, [pc, #372]	; (8001588 <menu+0x4e4>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d123      	bne.n	8001460 <menu+0x3bc>
			if(dilSecim == 0) {
 8001418:	4b55      	ldr	r3, [pc, #340]	; (8001570 <menu+0x4cc>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d105      	bne.n	800142c <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001420:	4a63      	ldr	r2, [pc, #396]	; (80015b0 <menu+0x50c>)
 8001422:	2101      	movs	r1, #1
 8001424:	2002      	movs	r0, #2
 8001426:	f006 fbed 	bl	8007c04 <lcd_print>
 800142a:	e008      	b.n	800143e <menu+0x39a>
			} else if(dilSecim == 1) {
 800142c:	4b50      	ldr	r3, [pc, #320]	; (8001570 <menu+0x4cc>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d104      	bne.n	800143e <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001434:	4a5f      	ldr	r2, [pc, #380]	; (80015b4 <menu+0x510>)
 8001436:	2101      	movs	r1, #1
 8001438:	2002      	movs	r0, #2
 800143a:	f006 fbe3 	bl	8007c04 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800143e:	4a5a      	ldr	r2, [pc, #360]	; (80015a8 <menu+0x504>)
 8001440:	210f      	movs	r1, #15
 8001442:	2002      	movs	r0, #2
 8001444:	f006 fbde 	bl	8007c04 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001448:	4b5b      	ldr	r3, [pc, #364]	; (80015b8 <menu+0x514>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	220a      	movs	r2, #10
 800144e:	4953      	ldr	r1, [pc, #332]	; (800159c <menu+0x4f8>)
 8001450:	4618      	mov	r0, r3
 8001452:	f00a ff29 	bl	800c2a8 <itoa>
			lcd_print(2, 14, snum);
 8001456:	4a51      	ldr	r2, [pc, #324]	; (800159c <menu+0x4f8>)
 8001458:	210e      	movs	r1, #14
 800145a:	2002      	movs	r0, #2
 800145c:	f006 fbd2 	bl	8007c04 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001460:	4b49      	ldr	r3, [pc, #292]	; (8001588 <menu+0x4e4>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b03      	cmp	r3, #3
 8001466:	d123      	bne.n	80014b0 <menu+0x40c>
			if(dilSecim == 0) {
 8001468:	4b41      	ldr	r3, [pc, #260]	; (8001570 <menu+0x4cc>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d105      	bne.n	800147c <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001470:	4a52      	ldr	r2, [pc, #328]	; (80015bc <menu+0x518>)
 8001472:	2101      	movs	r1, #1
 8001474:	2002      	movs	r0, #2
 8001476:	f006 fbc5 	bl	8007c04 <lcd_print>
 800147a:	e008      	b.n	800148e <menu+0x3ea>
			} else if(dilSecim == 1) {
 800147c:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <menu+0x4cc>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d104      	bne.n	800148e <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001484:	4a4e      	ldr	r2, [pc, #312]	; (80015c0 <menu+0x51c>)
 8001486:	2101      	movs	r1, #1
 8001488:	2002      	movs	r0, #2
 800148a:	f006 fbbb 	bl	8007c04 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800148e:	4a46      	ldr	r2, [pc, #280]	; (80015a8 <menu+0x504>)
 8001490:	210f      	movs	r1, #15
 8001492:	2002      	movs	r0, #2
 8001494:	f006 fbb6 	bl	8007c04 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001498:	4b4a      	ldr	r3, [pc, #296]	; (80015c4 <menu+0x520>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	220a      	movs	r2, #10
 800149e:	493f      	ldr	r1, [pc, #252]	; (800159c <menu+0x4f8>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00a ff01 	bl	800c2a8 <itoa>
			lcd_print(2, 14, snum);
 80014a6:	4a3d      	ldr	r2, [pc, #244]	; (800159c <menu+0x4f8>)
 80014a8:	210e      	movs	r1, #14
 80014aa:	2002      	movs	r0, #2
 80014ac:	f006 fbaa 	bl	8007c04 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80014b0:	4b35      	ldr	r3, [pc, #212]	; (8001588 <menu+0x4e4>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d123      	bne.n	8001500 <menu+0x45c>
			if(dilSecim == 0) {
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <menu+0x4cc>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d105      	bne.n	80014cc <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80014c0:	4a41      	ldr	r2, [pc, #260]	; (80015c8 <menu+0x524>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	2002      	movs	r0, #2
 80014c6:	f006 fb9d 	bl	8007c04 <lcd_print>
 80014ca:	e008      	b.n	80014de <menu+0x43a>
			} else if(dilSecim == 1) {
 80014cc:	4b28      	ldr	r3, [pc, #160]	; (8001570 <menu+0x4cc>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d104      	bne.n	80014de <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80014d4:	4a3d      	ldr	r2, [pc, #244]	; (80015cc <menu+0x528>)
 80014d6:	2101      	movs	r1, #1
 80014d8:	2002      	movs	r0, #2
 80014da:	f006 fb93 	bl	8007c04 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80014de:	4a32      	ldr	r2, [pc, #200]	; (80015a8 <menu+0x504>)
 80014e0:	210f      	movs	r1, #15
 80014e2:	2002      	movs	r0, #2
 80014e4:	f006 fb8e 	bl	8007c04 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80014e8:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <menu+0x52c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	220a      	movs	r2, #10
 80014ee:	492b      	ldr	r1, [pc, #172]	; (800159c <menu+0x4f8>)
 80014f0:	4618      	mov	r0, r3
 80014f2:	f00a fed9 	bl	800c2a8 <itoa>
			lcd_print(2, 14, snum);
 80014f6:	4a29      	ldr	r2, [pc, #164]	; (800159c <menu+0x4f8>)
 80014f8:	210e      	movs	r1, #14
 80014fa:	2002      	movs	r0, #2
 80014fc:	f006 fb82 	bl	8007c04 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <menu+0x4e4>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d123      	bne.n	8001550 <menu+0x4ac>
			if(dilSecim == 0) {
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <menu+0x4cc>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d105      	bne.n	800151c <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001510:	4a30      	ldr	r2, [pc, #192]	; (80015d4 <menu+0x530>)
 8001512:	2101      	movs	r1, #1
 8001514:	2002      	movs	r0, #2
 8001516:	f006 fb75 	bl	8007c04 <lcd_print>
 800151a:	e008      	b.n	800152e <menu+0x48a>
			} else if(dilSecim == 1) {
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <menu+0x4cc>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d104      	bne.n	800152e <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001524:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <menu+0x534>)
 8001526:	2101      	movs	r1, #1
 8001528:	2002      	movs	r0, #2
 800152a:	f006 fb6b 	bl	8007c04 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800152e:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <menu+0x504>)
 8001530:	210f      	movs	r1, #15
 8001532:	2002      	movs	r0, #2
 8001534:	f006 fb66 	bl	8007c04 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <menu+0x538>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	220a      	movs	r2, #10
 800153e:	4917      	ldr	r1, [pc, #92]	; (800159c <menu+0x4f8>)
 8001540:	4618      	mov	r0, r3
 8001542:	f00a feb1 	bl	800c2a8 <itoa>
			lcd_print(2, 14, snum);
 8001546:	4a15      	ldr	r2, [pc, #84]	; (800159c <menu+0x4f8>)
 8001548:	210e      	movs	r1, #14
 800154a:	2002      	movs	r0, #2
 800154c:	f006 fb5a 	bl	8007c04 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <menu+0x4e4>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b06      	cmp	r3, #6
 8001556:	d15f      	bne.n	8001618 <menu+0x574>
			if(dilSecim == 0) {
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <menu+0x4cc>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d141      	bne.n	80015e4 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001560:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <menu+0x53c>)
 8001562:	2101      	movs	r1, #1
 8001564:	2002      	movs	r0, #2
 8001566:	f006 fb4d 	bl	8007c04 <lcd_print>
 800156a:	e044      	b.n	80015f6 <menu+0x552>
 800156c:	0800cf64 	.word	0x0800cf64
 8001570:	20000241 	.word	0x20000241
 8001574:	0800cf78 	.word	0x0800cf78
 8001578:	0800cf8c 	.word	0x0800cf8c
 800157c:	20000220 	.word	0x20000220
 8001580:	0800cfa0 	.word	0x0800cfa0
 8001584:	0800cfb4 	.word	0x0800cfb4
 8001588:	20000222 	.word	0x20000222
 800158c:	0800cfc8 	.word	0x0800cfc8
 8001590:	0800cfd8 	.word	0x0800cfd8
 8001594:	0800cfe8 	.word	0x0800cfe8
 8001598:	20000242 	.word	0x20000242
 800159c:	20000188 	.word	0x20000188
 80015a0:	0800cfec 	.word	0x0800cfec
 80015a4:	0800cffc 	.word	0x0800cffc
 80015a8:	0800d00c 	.word	0x0800d00c
 80015ac:	20000243 	.word	0x20000243
 80015b0:	0800d010 	.word	0x0800d010
 80015b4:	0800d020 	.word	0x0800d020
 80015b8:	20000244 	.word	0x20000244
 80015bc:	0800d030 	.word	0x0800d030
 80015c0:	0800d040 	.word	0x0800d040
 80015c4:	20000245 	.word	0x20000245
 80015c8:	0800d050 	.word	0x0800d050
 80015cc:	0800d060 	.word	0x0800d060
 80015d0:	20000246 	.word	0x20000246
 80015d4:	0800d070 	.word	0x0800d070
 80015d8:	0800d080 	.word	0x0800d080
 80015dc:	20000247 	.word	0x20000247
 80015e0:	0800d090 	.word	0x0800d090
			} else if(dilSecim == 1) {
 80015e4:	4b4f      	ldr	r3, [pc, #316]	; (8001724 <menu+0x680>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d104      	bne.n	80015f6 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80015ec:	4a4e      	ldr	r2, [pc, #312]	; (8001728 <menu+0x684>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	2002      	movs	r0, #2
 80015f2:	f006 fb07 	bl	8007c04 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015f6:	4a4d      	ldr	r2, [pc, #308]	; (800172c <menu+0x688>)
 80015f8:	210f      	movs	r1, #15
 80015fa:	2002      	movs	r0, #2
 80015fc:	f006 fb02 	bl	8007c04 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001600:	4b4b      	ldr	r3, [pc, #300]	; (8001730 <menu+0x68c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	220a      	movs	r2, #10
 8001606:	494b      	ldr	r1, [pc, #300]	; (8001734 <menu+0x690>)
 8001608:	4618      	mov	r0, r3
 800160a:	f00a fe4d 	bl	800c2a8 <itoa>
			lcd_print(2, 14, snum);
 800160e:	4a49      	ldr	r2, [pc, #292]	; (8001734 <menu+0x690>)
 8001610:	210e      	movs	r1, #14
 8001612:	2002      	movs	r0, #2
 8001614:	f006 faf6 	bl	8007c04 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001618:	4b47      	ldr	r3, [pc, #284]	; (8001738 <menu+0x694>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b07      	cmp	r3, #7
 800161e:	d123      	bne.n	8001668 <menu+0x5c4>
			if(dilSecim == 0) {
 8001620:	4b40      	ldr	r3, [pc, #256]	; (8001724 <menu+0x680>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d105      	bne.n	8001634 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001628:	4a44      	ldr	r2, [pc, #272]	; (800173c <menu+0x698>)
 800162a:	2101      	movs	r1, #1
 800162c:	2002      	movs	r0, #2
 800162e:	f006 fae9 	bl	8007c04 <lcd_print>
 8001632:	e008      	b.n	8001646 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001634:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <menu+0x680>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d104      	bne.n	8001646 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 800163c:	4a40      	ldr	r2, [pc, #256]	; (8001740 <menu+0x69c>)
 800163e:	2101      	movs	r1, #1
 8001640:	2002      	movs	r0, #2
 8001642:	f006 fadf 	bl	8007c04 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001646:	4a39      	ldr	r2, [pc, #228]	; (800172c <menu+0x688>)
 8001648:	210f      	movs	r1, #15
 800164a:	2002      	movs	r0, #2
 800164c:	f006 fada 	bl	8007c04 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001650:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <menu+0x6a0>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	220a      	movs	r2, #10
 8001656:	4937      	ldr	r1, [pc, #220]	; (8001734 <menu+0x690>)
 8001658:	4618      	mov	r0, r3
 800165a:	f00a fe25 	bl	800c2a8 <itoa>
			lcd_print(2, 14, snum);
 800165e:	4a35      	ldr	r2, [pc, #212]	; (8001734 <menu+0x690>)
 8001660:	210e      	movs	r1, #14
 8001662:	2002      	movs	r0, #2
 8001664:	f006 face 	bl	8007c04 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001668:	4b33      	ldr	r3, [pc, #204]	; (8001738 <menu+0x694>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b08      	cmp	r3, #8
 800166e:	d123      	bne.n	80016b8 <menu+0x614>
			if(dilSecim == 0) {
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <menu+0x680>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001678:	4a33      	ldr	r2, [pc, #204]	; (8001748 <menu+0x6a4>)
 800167a:	2101      	movs	r1, #1
 800167c:	2002      	movs	r0, #2
 800167e:	f006 fac1 	bl	8007c04 <lcd_print>
 8001682:	e008      	b.n	8001696 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <menu+0x680>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d104      	bne.n	8001696 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 800168c:	4a2f      	ldr	r2, [pc, #188]	; (800174c <menu+0x6a8>)
 800168e:	2101      	movs	r1, #1
 8001690:	2002      	movs	r0, #2
 8001692:	f006 fab7 	bl	8007c04 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001696:	4a25      	ldr	r2, [pc, #148]	; (800172c <menu+0x688>)
 8001698:	210f      	movs	r1, #15
 800169a:	2002      	movs	r0, #2
 800169c:	f006 fab2 	bl	8007c04 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <menu+0x6ac>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	220a      	movs	r2, #10
 80016a6:	4923      	ldr	r1, [pc, #140]	; (8001734 <menu+0x690>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f00a fdfd 	bl	800c2a8 <itoa>
			lcd_print(2, 14, snum);
 80016ae:	4a21      	ldr	r2, [pc, #132]	; (8001734 <menu+0x690>)
 80016b0:	210e      	movs	r1, #14
 80016b2:	2002      	movs	r0, #2
 80016b4:	f006 faa6 	bl	8007c04 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <menu+0x694>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b09      	cmp	r3, #9
 80016be:	d123      	bne.n	8001708 <menu+0x664>
			if(dilSecim == 0) {
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <menu+0x680>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d105      	bne.n	80016d4 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80016c8:	4a22      	ldr	r2, [pc, #136]	; (8001754 <menu+0x6b0>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	2002      	movs	r0, #2
 80016ce:	f006 fa99 	bl	8007c04 <lcd_print>
 80016d2:	e008      	b.n	80016e6 <menu+0x642>
			} else if(dilSecim == 1) {
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <menu+0x680>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d104      	bne.n	80016e6 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <menu+0x6b4>)
 80016de:	2101      	movs	r1, #1
 80016e0:	2002      	movs	r0, #2
 80016e2:	f006 fa8f 	bl	8007c04 <lcd_print>
			}
			lcd_print(2, 16, " ");
 80016e6:	4a1d      	ldr	r2, [pc, #116]	; (800175c <menu+0x6b8>)
 80016e8:	2110      	movs	r1, #16
 80016ea:	2002      	movs	r0, #2
 80016ec:	f006 fa8a 	bl	8007c04 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <menu+0x6bc>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	220a      	movs	r2, #10
 80016f6:	490f      	ldr	r1, [pc, #60]	; (8001734 <menu+0x690>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00a fdd5 	bl	800c2a8 <itoa>
			lcd_print(2, 15, snum);
 80016fe:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <menu+0x690>)
 8001700:	210f      	movs	r1, #15
 8001702:	2002      	movs	r0, #2
 8001704:	f006 fa7e 	bl	8007c04 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <menu+0x694>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b0a      	cmp	r3, #10
 800170e:	d134      	bne.n	800177a <menu+0x6d6>
			if(dilSecim == 0) {
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <menu+0x680>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d127      	bne.n	8001768 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <menu+0x6c0>)
 800171a:	2101      	movs	r1, #1
 800171c:	2002      	movs	r0, #2
 800171e:	f006 fa71 	bl	8007c04 <lcd_print>
 8001722:	e02a      	b.n	800177a <menu+0x6d6>
 8001724:	20000241 	.word	0x20000241
 8001728:	0800d0a0 	.word	0x0800d0a0
 800172c:	0800d00c 	.word	0x0800d00c
 8001730:	20000248 	.word	0x20000248
 8001734:	20000188 	.word	0x20000188
 8001738:	20000222 	.word	0x20000222
 800173c:	0800d0b0 	.word	0x0800d0b0
 8001740:	0800d0c0 	.word	0x0800d0c0
 8001744:	20000249 	.word	0x20000249
 8001748:	0800d0d0 	.word	0x0800d0d0
 800174c:	0800d0e0 	.word	0x0800d0e0
 8001750:	2000024a 	.word	0x2000024a
 8001754:	0800d0f0 	.word	0x0800d0f0
 8001758:	0800d100 	.word	0x0800d100
 800175c:	0800d110 	.word	0x0800d110
 8001760:	2000024b 	.word	0x2000024b
 8001764:	0800d114 	.word	0x0800d114
			} else if(dilSecim == 1) {
 8001768:	4b82      	ldr	r3, [pc, #520]	; (8001974 <menu+0x8d0>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d104      	bne.n	800177a <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001770:	4a81      	ldr	r2, [pc, #516]	; (8001978 <menu+0x8d4>)
 8001772:	2101      	movs	r1, #1
 8001774:	2002      	movs	r0, #2
 8001776:	f006 fa45 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800177a:	2102      	movs	r1, #2
 800177c:	487f      	ldr	r0, [pc, #508]	; (800197c <menu+0x8d8>)
 800177e:	f007 fd67 	bl	8009250 <HAL_GPIO_ReadPin>
 8001782:	4603      	mov	r3, r0
 8001784:	2b01      	cmp	r3, #1
 8001786:	d119      	bne.n	80017bc <menu+0x718>
 8001788:	4b7d      	ldr	r3, [pc, #500]	; (8001980 <menu+0x8dc>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	f083 0301 	eor.w	r3, r3, #1
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d012      	beq.n	80017bc <menu+0x718>
 8001796:	4b7b      	ldr	r3, [pc, #492]	; (8001984 <menu+0x8e0>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10e      	bne.n	80017bc <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 800179e:	4b7a      	ldr	r3, [pc, #488]	; (8001988 <menu+0x8e4>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b78      	ldr	r3, [pc, #480]	; (8001988 <menu+0x8e4>)
 80017a8:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80017aa:	4b77      	ldr	r3, [pc, #476]	; (8001988 <menu+0x8e4>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b0a      	cmp	r3, #10
 80017b0:	d902      	bls.n	80017b8 <menu+0x714>
				hataGostermeSirasi = 0;
 80017b2:	4b75      	ldr	r3, [pc, #468]	; (8001988 <menu+0x8e4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80017b8:	f003 f84a 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80017bc:	2104      	movs	r1, #4
 80017be:	486f      	ldr	r0, [pc, #444]	; (800197c <menu+0x8d8>)
 80017c0:	f007 fd46 	bl	8009250 <HAL_GPIO_ReadPin>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d119      	bne.n	80017fe <menu+0x75a>
 80017ca:	4b6d      	ldr	r3, [pc, #436]	; (8001980 <menu+0x8dc>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	f083 0301 	eor.w	r3, r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d012      	beq.n	80017fe <menu+0x75a>
 80017d8:	4b6a      	ldr	r3, [pc, #424]	; (8001984 <menu+0x8e0>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10e      	bne.n	80017fe <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80017e0:	4b69      	ldr	r3, [pc, #420]	; (8001988 <menu+0x8e4>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b67      	ldr	r3, [pc, #412]	; (8001988 <menu+0x8e4>)
 80017ea:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80017ec:	4b66      	ldr	r3, [pc, #408]	; (8001988 <menu+0x8e4>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b0b      	cmp	r3, #11
 80017f2:	d902      	bls.n	80017fa <menu+0x756>
	    		hataGostermeSirasi = 10;
 80017f4:	4b64      	ldr	r3, [pc, #400]	; (8001988 <menu+0x8e4>)
 80017f6:	220a      	movs	r2, #10
 80017f8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80017fa:	f003 f829 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80017fe:	2108      	movs	r1, #8
 8001800:	485e      	ldr	r0, [pc, #376]	; (800197c <menu+0x8d8>)
 8001802:	f007 fd25 	bl	8009250 <HAL_GPIO_ReadPin>
 8001806:	4603      	mov	r3, r0
 8001808:	2b01      	cmp	r3, #1
 800180a:	d153      	bne.n	80018b4 <menu+0x810>
 800180c:	4b5c      	ldr	r3, [pc, #368]	; (8001980 <menu+0x8dc>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	f083 0301 	eor.w	r3, r3, #1
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d04c      	beq.n	80018b4 <menu+0x810>
 800181a:	4b5b      	ldr	r3, [pc, #364]	; (8001988 <menu+0x8e4>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b0a      	cmp	r3, #10
 8001820:	d148      	bne.n	80018b4 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001822:	4b5a      	ldr	r3, [pc, #360]	; (800198c <menu+0x8e8>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <menu+0x8ec>)
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001830:	4b58      	ldr	r3, [pc, #352]	; (8001994 <menu+0x8f0>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	4b56      	ldr	r3, [pc, #344]	; (8001990 <menu+0x8ec>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800183e:	4b56      	ldr	r3, [pc, #344]	; (8001998 <menu+0x8f4>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	4b52      	ldr	r3, [pc, #328]	; (8001990 <menu+0x8ec>)
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <menu+0x8f8>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <menu+0x8ec>)
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800185a:	4b51      	ldr	r3, [pc, #324]	; (80019a0 <menu+0x8fc>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	4b4b      	ldr	r3, [pc, #300]	; (8001990 <menu+0x8ec>)
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001868:	4b4e      	ldr	r3, [pc, #312]	; (80019a4 <menu+0x900>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
 800186e:	4b48      	ldr	r3, [pc, #288]	; (8001990 <menu+0x8ec>)
 8001870:	2200      	movs	r2, #0
 8001872:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001876:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <menu+0x904>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	4b44      	ldr	r3, [pc, #272]	; (8001990 <menu+0x8ec>)
 800187e:	2200      	movs	r2, #0
 8001880:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001884:	4b49      	ldr	r3, [pc, #292]	; (80019ac <menu+0x908>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	4b41      	ldr	r3, [pc, #260]	; (8001990 <menu+0x8ec>)
 800188c:	2200      	movs	r2, #0
 800188e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <menu+0x90c>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
 8001898:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <menu+0x8ec>)
 800189a:	2200      	movs	r2, #0
 800189c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80018a0:	4b44      	ldr	r3, [pc, #272]	; (80019b4 <menu+0x910>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <menu+0x8ec>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 80018ae:	4b42      	ldr	r3, [pc, #264]	; (80019b8 <menu+0x914>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80018b4:	4b41      	ldr	r3, [pc, #260]	; (80019bc <menu+0x918>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	f040 80fc 	bne.w	8001ab6 <menu+0xa12>
		if(dilSecim == 0) {
 80018be:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <menu+0x8d0>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d105      	bne.n	80018d2 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 80018c6:	4a3e      	ldr	r2, [pc, #248]	; (80019c0 <menu+0x91c>)
 80018c8:	2101      	movs	r1, #1
 80018ca:	2001      	movs	r0, #1
 80018cc:	f006 f99a 	bl	8007c04 <lcd_print>
 80018d0:	e008      	b.n	80018e4 <menu+0x840>
		} else if(dilSecim == 1) {
 80018d2:	4b28      	ldr	r3, [pc, #160]	; (8001974 <menu+0x8d0>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d104      	bne.n	80018e4 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 80018da:	4a3a      	ldr	r2, [pc, #232]	; (80019c4 <menu+0x920>)
 80018dc:	2101      	movs	r1, #1
 80018de:	2001      	movs	r0, #1
 80018e0:	f006 f990 	bl	8007c04 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <menu+0x8e0>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d003      	beq.n	80018f4 <menu+0x850>
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <menu+0x8e0>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d112      	bne.n	800191a <menu+0x876>
			if(dilSecim == 0) {
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <menu+0x8d0>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 80018fc:	4a32      	ldr	r2, [pc, #200]	; (80019c8 <menu+0x924>)
 80018fe:	2101      	movs	r1, #1
 8001900:	2002      	movs	r0, #2
 8001902:	f006 f97f 	bl	8007c04 <lcd_print>
 8001906:	e008      	b.n	800191a <menu+0x876>
			} else if(dilSecim == 1) {
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <menu+0x8d0>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d104      	bne.n	800191a <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001910:	4a2e      	ldr	r2, [pc, #184]	; (80019cc <menu+0x928>)
 8001912:	2101      	movs	r1, #1
 8001914:	2002      	movs	r0, #2
 8001916:	f006 f975 	bl	8007c04 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <menu+0x92c>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d116      	bne.n	8001950 <menu+0x8ac>
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <menu+0x8e0>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d112      	bne.n	8001950 <menu+0x8ac>
			if(dilSecim == 0) {
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <menu+0x8d0>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d105      	bne.n	800193e <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001932:	4a28      	ldr	r2, [pc, #160]	; (80019d4 <menu+0x930>)
 8001934:	2101      	movs	r1, #1
 8001936:	2002      	movs	r0, #2
 8001938:	f006 f964 	bl	8007c04 <lcd_print>
 800193c:	e008      	b.n	8001950 <menu+0x8ac>
			} else if(dilSecim == 1) {
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <menu+0x8d0>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d104      	bne.n	8001950 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001946:	4a24      	ldr	r2, [pc, #144]	; (80019d8 <menu+0x934>)
 8001948:	2101      	movs	r1, #1
 800194a:	2002      	movs	r0, #2
 800194c:	f006 f95a 	bl	8007c04 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <menu+0x92c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d14c      	bne.n	80019f2 <menu+0x94e>
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <menu+0x8e0>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d148      	bne.n	80019f2 <menu+0x94e>
			if(dilSecim == 0) {
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <menu+0x8d0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d13b      	bne.n	80019e0 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001968:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <menu+0x938>)
 800196a:	2101      	movs	r1, #1
 800196c:	2002      	movs	r0, #2
 800196e:	f006 f949 	bl	8007c04 <lcd_print>
 8001972:	e03e      	b.n	80019f2 <menu+0x94e>
 8001974:	20000241 	.word	0x20000241
 8001978:	0800d128 	.word	0x0800d128
 800197c:	40010800 	.word	0x40010800
 8001980:	2000024f 	.word	0x2000024f
 8001984:	2000022f 	.word	0x2000022f
 8001988:	20000222 	.word	0x20000222
 800198c:	20000242 	.word	0x20000242
 8001990:	20000118 	.word	0x20000118
 8001994:	20000243 	.word	0x20000243
 8001998:	20000244 	.word	0x20000244
 800199c:	20000245 	.word	0x20000245
 80019a0:	20000246 	.word	0x20000246
 80019a4:	20000247 	.word	0x20000247
 80019a8:	20000248 	.word	0x20000248
 80019ac:	20000249 	.word	0x20000249
 80019b0:	2000024a 	.word	0x2000024a
 80019b4:	2000024b 	.word	0x2000024b
 80019b8:	2000024c 	.word	0x2000024c
 80019bc:	20000220 	.word	0x20000220
 80019c0:	0800d13c 	.word	0x0800d13c
 80019c4:	0800d150 	.word	0x0800d150
 80019c8:	0800d164 	.word	0x0800d164
 80019cc:	0800d178 	.word	0x0800d178
 80019d0:	20000221 	.word	0x20000221
 80019d4:	0800d18c 	.word	0x0800d18c
 80019d8:	0800d19c 	.word	0x0800d19c
 80019dc:	0800d1ac 	.word	0x0800d1ac
			} else if(dilSecim == 1) {
 80019e0:	4b98      	ldr	r3, [pc, #608]	; (8001c44 <menu+0xba0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d104      	bne.n	80019f2 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 80019e8:	4a97      	ldr	r2, [pc, #604]	; (8001c48 <menu+0xba4>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	2002      	movs	r0, #2
 80019ee:	f006 f909 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019f2:	2102      	movs	r1, #2
 80019f4:	4895      	ldr	r0, [pc, #596]	; (8001c4c <menu+0xba8>)
 80019f6:	f007 fc2b 	bl	8009250 <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d119      	bne.n	8001a34 <menu+0x990>
 8001a00:	4b93      	ldr	r3, [pc, #588]	; (8001c50 <menu+0xbac>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	f083 0301 	eor.w	r3, r3, #1
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d012      	beq.n	8001a34 <menu+0x990>
 8001a0e:	4b91      	ldr	r3, [pc, #580]	; (8001c54 <menu+0xbb0>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10e      	bne.n	8001a34 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001a16:	4b90      	ldr	r3, [pc, #576]	; (8001c58 <menu+0xbb4>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b8e      	ldr	r3, [pc, #568]	; (8001c58 <menu+0xbb4>)
 8001a20:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001a22:	4b8d      	ldr	r3, [pc, #564]	; (8001c58 <menu+0xbb4>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d902      	bls.n	8001a30 <menu+0x98c>
				calismaSekli = 0;
 8001a2a:	4b8b      	ldr	r3, [pc, #556]	; (8001c58 <menu+0xbb4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a30:	f002 ff0e 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a34:	2104      	movs	r1, #4
 8001a36:	4885      	ldr	r0, [pc, #532]	; (8001c4c <menu+0xba8>)
 8001a38:	f007 fc0a 	bl	8009250 <HAL_GPIO_ReadPin>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d119      	bne.n	8001a76 <menu+0x9d2>
 8001a42:	4b83      	ldr	r3, [pc, #524]	; (8001c50 <menu+0xbac>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	f083 0301 	eor.w	r3, r3, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d012      	beq.n	8001a76 <menu+0x9d2>
 8001a50:	4b80      	ldr	r3, [pc, #512]	; (8001c54 <menu+0xbb0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10e      	bne.n	8001a76 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001a58:	4b7f      	ldr	r3, [pc, #508]	; (8001c58 <menu+0xbb4>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b7d      	ldr	r3, [pc, #500]	; (8001c58 <menu+0xbb4>)
 8001a62:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001a64:	4b7c      	ldr	r3, [pc, #496]	; (8001c58 <menu+0xbb4>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <menu+0x9ce>
	    		calismaSekli = 1;
 8001a6c:	4b7a      	ldr	r3, [pc, #488]	; (8001c58 <menu+0xbb4>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a72:	f002 feed 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a76:	2108      	movs	r1, #8
 8001a78:	4874      	ldr	r0, [pc, #464]	; (8001c4c <menu+0xba8>)
 8001a7a:	f007 fbe9 	bl	8009250 <HAL_GPIO_ReadPin>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d118      	bne.n	8001ab6 <menu+0xa12>
 8001a84:	4b72      	ldr	r3, [pc, #456]	; (8001c50 <menu+0xbac>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	f083 0301 	eor.w	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d011      	beq.n	8001ab6 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001a92:	4b71      	ldr	r3, [pc, #452]	; (8001c58 <menu+0xbb4>)
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	4b71      	ldr	r3, [pc, #452]	; (8001c5c <menu+0xbb8>)
 8001a98:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001a9a:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <menu+0xbb4>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d106      	bne.n	8001ab0 <menu+0xa0c>
				altLimit = 1;
 8001aa2:	4b6f      	ldr	r3, [pc, #444]	; (8001c60 <menu+0xbbc>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001aa8:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <menu+0xbbc>)
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	4b6b      	ldr	r3, [pc, #428]	; (8001c5c <menu+0xbb8>)
 8001aae:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ab0:	4b6c      	ldr	r3, [pc, #432]	; (8001c64 <menu+0xbc0>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001ab6:	4b6c      	ldr	r3, [pc, #432]	; (8001c68 <menu+0xbc4>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	f040 8083 	bne.w	8001bc6 <menu+0xb22>
		if(dilSecim == 0) {
 8001ac0:	4b60      	ldr	r3, [pc, #384]	; (8001c44 <menu+0xba0>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001ac8:	4a68      	ldr	r2, [pc, #416]	; (8001c6c <menu+0xbc8>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	2001      	movs	r0, #1
 8001ace:	f006 f899 	bl	8007c04 <lcd_print>
 8001ad2:	e008      	b.n	8001ae6 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001ad4:	4b5b      	ldr	r3, [pc, #364]	; (8001c44 <menu+0xba0>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d104      	bne.n	8001ae6 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001adc:	4a64      	ldr	r2, [pc, #400]	; (8001c70 <menu+0xbcc>)
 8001ade:	2101      	movs	r1, #1
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f006 f88f 	bl	8007c04 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <menu+0xbd0>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d113      	bne.n	8001b16 <menu+0xa72>
			if(dilSecim == 0) {
 8001aee:	4b55      	ldr	r3, [pc, #340]	; (8001c44 <menu+0xba0>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d105      	bne.n	8001b02 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001af6:	4a60      	ldr	r2, [pc, #384]	; (8001c78 <menu+0xbd4>)
 8001af8:	2101      	movs	r1, #1
 8001afa:	2002      	movs	r0, #2
 8001afc:	f006 f882 	bl	8007c04 <lcd_print>
 8001b00:	e012      	b.n	8001b28 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001b02:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <menu+0xba0>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d10e      	bne.n	8001b28 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001b0a:	4a5c      	ldr	r2, [pc, #368]	; (8001c7c <menu+0xbd8>)
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f006 f878 	bl	8007c04 <lcd_print>
 8001b14:	e008      	b.n	8001b28 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001b16:	4b57      	ldr	r3, [pc, #348]	; (8001c74 <menu+0xbd0>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d104      	bne.n	8001b28 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001b1e:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <menu+0xbdc>)
 8001b20:	2101      	movs	r1, #1
 8001b22:	2002      	movs	r0, #2
 8001b24:	f006 f86e 	bl	8007c04 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b28:	2102      	movs	r1, #2
 8001b2a:	4848      	ldr	r0, [pc, #288]	; (8001c4c <menu+0xba8>)
 8001b2c:	f007 fb90 	bl	8009250 <HAL_GPIO_ReadPin>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d115      	bne.n	8001b62 <menu+0xabe>
 8001b36:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <menu+0xbac>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	f083 0301 	eor.w	r3, r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00e      	beq.n	8001b62 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001b44:	4b4b      	ldr	r3, [pc, #300]	; (8001c74 <menu+0xbd0>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	4b49      	ldr	r3, [pc, #292]	; (8001c74 <menu+0xbd0>)
 8001b4e:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001b50:	4b48      	ldr	r3, [pc, #288]	; (8001c74 <menu+0xbd0>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d902      	bls.n	8001b5e <menu+0xaba>
				emniyetCercevesi = 0;
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <menu+0xbd0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b5e:	f002 fe77 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b62:	2104      	movs	r1, #4
 8001b64:	4839      	ldr	r0, [pc, #228]	; (8001c4c <menu+0xba8>)
 8001b66:	f007 fb73 	bl	8009250 <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d115      	bne.n	8001b9c <menu+0xaf8>
 8001b70:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <menu+0xbac>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f083 0301 	eor.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00e      	beq.n	8001b9c <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <menu+0xbd0>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <menu+0xbd0>)
 8001b88:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001b8a:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <menu+0xbd0>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001b92:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <menu+0xbd0>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b98:	f002 fe5a 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	482b      	ldr	r0, [pc, #172]	; (8001c4c <menu+0xba8>)
 8001ba0:	f007 fb56 	bl	8009250 <HAL_GPIO_ReadPin>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d10d      	bne.n	8001bc6 <menu+0xb22>
 8001baa:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <menu+0xbac>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	f083 0301 	eor.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d006      	beq.n	8001bc6 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <menu+0xbd0>)
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <menu+0xbb8>)
 8001bbe:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001bc0:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <menu+0xbc0>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001bc6:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <menu+0xbc4>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	f040 80ba 	bne.w	8001d44 <menu+0xca0>
		if(dilSecim == 0) {
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <menu+0xba0>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001bd8:	4a2a      	ldr	r2, [pc, #168]	; (8001c84 <menu+0xbe0>)
 8001bda:	2101      	movs	r1, #1
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f006 f811 	bl	8007c04 <lcd_print>
 8001be2:	e008      	b.n	8001bf6 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <menu+0xba0>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d104      	bne.n	8001bf6 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001bec:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <menu+0xbe4>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f006 f807 	bl	8007c04 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <menu+0xbe8>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d113      	bne.n	8001c26 <menu+0xb82>
			if(dilSecim == 0) {
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <menu+0xba0>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d105      	bne.n	8001c12 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001c06:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <menu+0xbd4>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f005 fffa 	bl	8007c04 <lcd_print>
 8001c10:	e049      	b.n	8001ca6 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <menu+0xba0>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d145      	bne.n	8001ca6 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001c1a:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <menu+0xbd8>)
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f005 fff0 	bl	8007c04 <lcd_print>
 8001c24:	e03f      	b.n	8001ca6 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <menu+0xbe8>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d13b      	bne.n	8001ca6 <menu+0xc02>
			if(dilSecim == 0) {
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <menu+0xba0>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d12e      	bne.n	8001c94 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001c36:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <menu+0xbec>)
 8001c38:	2101      	movs	r1, #1
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	f005 ffe2 	bl	8007c04 <lcd_print>
 8001c40:	e031      	b.n	8001ca6 <menu+0xc02>
 8001c42:	bf00      	nop
 8001c44:	20000241 	.word	0x20000241
 8001c48:	0800d1bc 	.word	0x0800d1bc
 8001c4c:	40010800 	.word	0x40010800
 8001c50:	2000024f 	.word	0x2000024f
 8001c54:	2000022f 	.word	0x2000022f
 8001c58:	20000221 	.word	0x20000221
 8001c5c:	20000118 	.word	0x20000118
 8001c60:	20000226 	.word	0x20000226
 8001c64:	2000024c 	.word	0x2000024c
 8001c68:	20000220 	.word	0x20000220
 8001c6c:	0800d1cc 	.word	0x0800d1cc
 8001c70:	0800d1e0 	.word	0x0800d1e0
 8001c74:	20000224 	.word	0x20000224
 8001c78:	0800d1f4 	.word	0x0800d1f4
 8001c7c:	0800d208 	.word	0x0800d208
 8001c80:	0800d21c 	.word	0x0800d21c
 8001c84:	0800d22c 	.word	0x0800d22c
 8001c88:	0800d240 	.word	0x0800d240
 8001c8c:	20000225 	.word	0x20000225
 8001c90:	0800d254 	.word	0x0800d254
			} else if(dilSecim == 1) {
 8001c94:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <menu+0xe3c>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d104      	bne.n	8001ca6 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001c9c:	4a91      	ldr	r2, [pc, #580]	; (8001ee4 <menu+0xe40>)
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	2002      	movs	r0, #2
 8001ca2:	f005 ffaf 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	488f      	ldr	r0, [pc, #572]	; (8001ee8 <menu+0xe44>)
 8001caa:	f007 fad1 	bl	8009250 <HAL_GPIO_ReadPin>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d115      	bne.n	8001ce0 <menu+0xc3c>
 8001cb4:	4b8d      	ldr	r3, [pc, #564]	; (8001eec <menu+0xe48>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	f083 0301 	eor.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00e      	beq.n	8001ce0 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001cc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ef0 <menu+0xe4c>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b89      	ldr	r3, [pc, #548]	; (8001ef0 <menu+0xe4c>)
 8001ccc:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001cce:	4b88      	ldr	r3, [pc, #544]	; (8001ef0 <menu+0xe4c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d902      	bls.n	8001cdc <menu+0xc38>
				yavaslamaLimit = 0;
 8001cd6:	4b86      	ldr	r3, [pc, #536]	; (8001ef0 <menu+0xe4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cdc:	f002 fdb8 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	4881      	ldr	r0, [pc, #516]	; (8001ee8 <menu+0xe44>)
 8001ce4:	f007 fab4 	bl	8009250 <HAL_GPIO_ReadPin>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d115      	bne.n	8001d1a <menu+0xc76>
 8001cee:	4b7f      	ldr	r3, [pc, #508]	; (8001eec <menu+0xe48>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	f083 0301 	eor.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00e      	beq.n	8001d1a <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001cfc:	4b7c      	ldr	r3, [pc, #496]	; (8001ef0 <menu+0xe4c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	4b7a      	ldr	r3, [pc, #488]	; (8001ef0 <menu+0xe4c>)
 8001d06:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001d08:	4b79      	ldr	r3, [pc, #484]	; (8001ef0 <menu+0xe4c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001d10:	4b77      	ldr	r3, [pc, #476]	; (8001ef0 <menu+0xe4c>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d16:	f002 fd9b 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d1a:	2108      	movs	r1, #8
 8001d1c:	4872      	ldr	r0, [pc, #456]	; (8001ee8 <menu+0xe44>)
 8001d1e:	f007 fa97 	bl	8009250 <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d10d      	bne.n	8001d44 <menu+0xca0>
 8001d28:	4b70      	ldr	r3, [pc, #448]	; (8001eec <menu+0xe48>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f083 0301 	eor.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001d36:	4b6e      	ldr	r3, [pc, #440]	; (8001ef0 <menu+0xe4c>)
 8001d38:	781a      	ldrb	r2, [r3, #0]
 8001d3a:	4b6e      	ldr	r3, [pc, #440]	; (8001ef4 <menu+0xe50>)
 8001d3c:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <menu+0xe54>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001d44:	4b6d      	ldr	r3, [pc, #436]	; (8001efc <menu+0xe58>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	f040 80b9 	bne.w	8001ec0 <menu+0xe1c>
		if(dilSecim == 0) {
 8001d4e:	4b64      	ldr	r3, [pc, #400]	; (8001ee0 <menu+0xe3c>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d105      	bne.n	8001d62 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001d56:	4a6a      	ldr	r2, [pc, #424]	; (8001f00 <menu+0xe5c>)
 8001d58:	2101      	movs	r1, #1
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f005 ff52 	bl	8007c04 <lcd_print>
 8001d60:	e008      	b.n	8001d74 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001d62:	4b5f      	ldr	r3, [pc, #380]	; (8001ee0 <menu+0xe3c>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d104      	bne.n	8001d74 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001d6a:	4a66      	ldr	r2, [pc, #408]	; (8001f04 <menu+0xe60>)
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f005 ff48 	bl	8007c04 <lcd_print>
		}

		if(altLimit == 0) {
 8001d74:	4b64      	ldr	r3, [pc, #400]	; (8001f08 <menu+0xe64>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d113      	bne.n	8001da4 <menu+0xd00>
			if(dilSecim == 0) {
 8001d7c:	4b58      	ldr	r3, [pc, #352]	; (8001ee0 <menu+0xe3c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d105      	bne.n	8001d90 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001d84:	4a61      	ldr	r2, [pc, #388]	; (8001f0c <menu+0xe68>)
 8001d86:	2101      	movs	r1, #1
 8001d88:	2002      	movs	r0, #2
 8001d8a:	f005 ff3b 	bl	8007c04 <lcd_print>
 8001d8e:	e020      	b.n	8001dd2 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001d90:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <menu+0xe3c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d11c      	bne.n	8001dd2 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001d98:	4a5d      	ldr	r2, [pc, #372]	; (8001f10 <menu+0xe6c>)
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f005 ff31 	bl	8007c04 <lcd_print>
 8001da2:	e016      	b.n	8001dd2 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001da4:	4b58      	ldr	r3, [pc, #352]	; (8001f08 <menu+0xe64>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d112      	bne.n	8001dd2 <menu+0xd2e>
			if(dilSecim == 0){
 8001dac:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <menu+0xe3c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001db4:	4a57      	ldr	r2, [pc, #348]	; (8001f14 <menu+0xe70>)
 8001db6:	2101      	movs	r1, #1
 8001db8:	2002      	movs	r0, #2
 8001dba:	f005 ff23 	bl	8007c04 <lcd_print>
 8001dbe:	e008      	b.n	8001dd2 <menu+0xd2e>
			} else if(dilSecim == 1){
 8001dc0:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <menu+0xe3c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d104      	bne.n	8001dd2 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001dc8:	4a46      	ldr	r2, [pc, #280]	; (8001ee4 <menu+0xe40>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f005 ff19 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	4844      	ldr	r0, [pc, #272]	; (8001ee8 <menu+0xe44>)
 8001dd6:	f007 fa3b 	bl	8009250 <HAL_GPIO_ReadPin>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d119      	bne.n	8001e14 <menu+0xd70>
 8001de0:	4b42      	ldr	r3, [pc, #264]	; (8001eec <menu+0xe48>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	f083 0301 	eor.w	r3, r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d012      	beq.n	8001e14 <menu+0xd70>
 8001dee:	4b4a      	ldr	r3, [pc, #296]	; (8001f18 <menu+0xe74>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10e      	bne.n	8001e14 <menu+0xd70>
			altLimit = altLimit + 1;
 8001df6:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <menu+0xe64>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b42      	ldr	r3, [pc, #264]	; (8001f08 <menu+0xe64>)
 8001e00:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001e02:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <menu+0xe64>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d902      	bls.n	8001e10 <menu+0xd6c>
				altLimit = 0;
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <menu+0xe64>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e10:	f002 fd1e 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001e14:	2104      	movs	r1, #4
 8001e16:	4834      	ldr	r0, [pc, #208]	; (8001ee8 <menu+0xe44>)
 8001e18:	f007 fa1a 	bl	8009250 <HAL_GPIO_ReadPin>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d119      	bne.n	8001e56 <menu+0xdb2>
 8001e22:	4b32      	ldr	r3, [pc, #200]	; (8001eec <menu+0xe48>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d012      	beq.n	8001e56 <menu+0xdb2>
 8001e30:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <menu+0xe74>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10e      	bne.n	8001e56 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001e38:	4b33      	ldr	r3, [pc, #204]	; (8001f08 <menu+0xe64>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b31      	ldr	r3, [pc, #196]	; (8001f08 <menu+0xe64>)
 8001e42:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001e44:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <menu+0xe64>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <menu+0xdae>
		   		altLimit = 1;
 8001e4c:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <menu+0xe64>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e52:	f002 fcfd 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e56:	2108      	movs	r1, #8
 8001e58:	4823      	ldr	r0, [pc, #140]	; (8001ee8 <menu+0xe44>)
 8001e5a:	f007 f9f9 	bl	8009250 <HAL_GPIO_ReadPin>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d12d      	bne.n	8001ec0 <menu+0xe1c>
 8001e64:	4b21      	ldr	r3, [pc, #132]	; (8001eec <menu+0xe48>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	f083 0301 	eor.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d026      	beq.n	8001ec0 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <menu+0xe64>)
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <menu+0xe50>)
 8001e78:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001e7a:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <menu+0xe64>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d110      	bne.n	8001ea4 <menu+0xe00>
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <menu+0xe78>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <menu+0xdee>
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <menu+0xe78>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d108      	bne.n	8001ea4 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <menu+0xe78>)
 8001e94:	2203      	movs	r2, #3
 8001e96:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <menu+0xe78>)
 8001e9a:	781a      	ldrb	r2, [r3, #0]
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <menu+0xe50>)
 8001e9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001ea2:	e00a      	b.n	8001eba <menu+0xe16>
			} else if(altLimit == 0) {
 8001ea4:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <menu+0xe64>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d106      	bne.n	8001eba <menu+0xe16>
				platformSilindirTipi = 0;
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <menu+0xe7c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <menu+0xe7c>)
 8001eb4:	781a      	ldrb	r2, [r3, #0]
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <menu+0xe50>)
 8001eb8:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <menu+0xe54>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <menu+0xe58>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b06      	cmp	r3, #6
 8001ec6:	f040 80b6 	bne.w	8002036 <menu+0xf92>
		if(dilSecim == 0) {
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <menu+0xe3c>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d12a      	bne.n	8001f28 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001ed2:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <menu+0xe80>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f005 fe94 	bl	8007c04 <lcd_print>
 8001edc:	e02d      	b.n	8001f3a <menu+0xe96>
 8001ede:	bf00      	nop
 8001ee0:	20000241 	.word	0x20000241
 8001ee4:	0800d268 	.word	0x0800d268
 8001ee8:	40010800 	.word	0x40010800
 8001eec:	2000024f 	.word	0x2000024f
 8001ef0:	20000225 	.word	0x20000225
 8001ef4:	20000118 	.word	0x20000118
 8001ef8:	2000024c 	.word	0x2000024c
 8001efc:	20000220 	.word	0x20000220
 8001f00:	0800d27c 	.word	0x0800d27c
 8001f04:	0800d290 	.word	0x0800d290
 8001f08:	20000226 	.word	0x20000226
 8001f0c:	0800d1f4 	.word	0x0800d1f4
 8001f10:	0800d208 	.word	0x0800d208
 8001f14:	0800d254 	.word	0x0800d254
 8001f18:	20000221 	.word	0x20000221
 8001f1c:	2000022d 	.word	0x2000022d
 8001f20:	20000233 	.word	0x20000233
 8001f24:	0800d2a4 	.word	0x0800d2a4
		} else if(dilSecim == 1){
 8001f28:	4b7a      	ldr	r3, [pc, #488]	; (8002114 <menu+0x1070>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d104      	bne.n	8001f3a <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8001f30:	4a79      	ldr	r2, [pc, #484]	; (8002118 <menu+0x1074>)
 8001f32:	2101      	movs	r1, #1
 8001f34:	2001      	movs	r0, #1
 8001f36:	f005 fe65 	bl	8007c04 <lcd_print>
		}
		if(basincSalteri == 0){
 8001f3a:	4b78      	ldr	r3, [pc, #480]	; (800211c <menu+0x1078>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d113      	bne.n	8001f6a <menu+0xec6>
			if(dilSecim == 0) {
 8001f42:	4b74      	ldr	r3, [pc, #464]	; (8002114 <menu+0x1070>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001f4a:	4a75      	ldr	r2, [pc, #468]	; (8002120 <menu+0x107c>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	2002      	movs	r0, #2
 8001f50:	f005 fe58 	bl	8007c04 <lcd_print>
 8001f54:	e020      	b.n	8001f98 <menu+0xef4>
			} else if(dilSecim == 1){
 8001f56:	4b6f      	ldr	r3, [pc, #444]	; (8002114 <menu+0x1070>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d11c      	bne.n	8001f98 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8001f5e:	4a71      	ldr	r2, [pc, #452]	; (8002124 <menu+0x1080>)
 8001f60:	2101      	movs	r1, #1
 8001f62:	2002      	movs	r0, #2
 8001f64:	f005 fe4e 	bl	8007c04 <lcd_print>
 8001f68:	e016      	b.n	8001f98 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8001f6a:	4b6c      	ldr	r3, [pc, #432]	; (800211c <menu+0x1078>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d112      	bne.n	8001f98 <menu+0xef4>
			if(dilSecim == 0) {
 8001f72:	4b68      	ldr	r3, [pc, #416]	; (8002114 <menu+0x1070>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d105      	bne.n	8001f86 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8001f7a:	4a6b      	ldr	r2, [pc, #428]	; (8002128 <menu+0x1084>)
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f005 fe40 	bl	8007c04 <lcd_print>
 8001f84:	e008      	b.n	8001f98 <menu+0xef4>
			} else if(dilSecim == 1) {
 8001f86:	4b63      	ldr	r3, [pc, #396]	; (8002114 <menu+0x1070>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d104      	bne.n	8001f98 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8001f8e:	4a67      	ldr	r2, [pc, #412]	; (800212c <menu+0x1088>)
 8001f90:	2101      	movs	r1, #1
 8001f92:	2002      	movs	r0, #2
 8001f94:	f005 fe36 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f98:	2102      	movs	r1, #2
 8001f9a:	4865      	ldr	r0, [pc, #404]	; (8002130 <menu+0x108c>)
 8001f9c:	f007 f958 	bl	8009250 <HAL_GPIO_ReadPin>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d115      	bne.n	8001fd2 <menu+0xf2e>
 8001fa6:	4b63      	ldr	r3, [pc, #396]	; (8002134 <menu+0x1090>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	f083 0301 	eor.w	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00e      	beq.n	8001fd2 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8001fb4:	4b59      	ldr	r3, [pc, #356]	; (800211c <menu+0x1078>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b57      	ldr	r3, [pc, #348]	; (800211c <menu+0x1078>)
 8001fbe:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001fc0:	4b56      	ldr	r3, [pc, #344]	; (800211c <menu+0x1078>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d902      	bls.n	8001fce <menu+0xf2a>
				basincSalteri = 0;
 8001fc8:	4b54      	ldr	r3, [pc, #336]	; (800211c <menu+0x1078>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fce:	f002 fc3f 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fd2:	2104      	movs	r1, #4
 8001fd4:	4856      	ldr	r0, [pc, #344]	; (8002130 <menu+0x108c>)
 8001fd6:	f007 f93b 	bl	8009250 <HAL_GPIO_ReadPin>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d115      	bne.n	800200c <menu+0xf68>
 8001fe0:	4b54      	ldr	r3, [pc, #336]	; (8002134 <menu+0x1090>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	f083 0301 	eor.w	r3, r3, #1
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00e      	beq.n	800200c <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8001fee:	4b4b      	ldr	r3, [pc, #300]	; (800211c <menu+0x1078>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b49      	ldr	r3, [pc, #292]	; (800211c <menu+0x1078>)
 8001ff8:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001ffa:	4b48      	ldr	r3, [pc, #288]	; (800211c <menu+0x1078>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <menu+0xf64>
		   		basincSalteri = 1;
 8002002:	4b46      	ldr	r3, [pc, #280]	; (800211c <menu+0x1078>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002008:	f002 fc22 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800200c:	2108      	movs	r1, #8
 800200e:	4848      	ldr	r0, [pc, #288]	; (8002130 <menu+0x108c>)
 8002010:	f007 f91e 	bl	8009250 <HAL_GPIO_ReadPin>
 8002014:	4603      	mov	r3, r0
 8002016:	2b01      	cmp	r3, #1
 8002018:	d10d      	bne.n	8002036 <menu+0xf92>
 800201a:	4b46      	ldr	r3, [pc, #280]	; (8002134 <menu+0x1090>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	f083 0301 	eor.w	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002028:	4b3c      	ldr	r3, [pc, #240]	; (800211c <menu+0x1078>)
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	4b42      	ldr	r3, [pc, #264]	; (8002138 <menu+0x1094>)
 800202e:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002030:	4b42      	ldr	r3, [pc, #264]	; (800213c <menu+0x1098>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002036:	4b42      	ldr	r3, [pc, #264]	; (8002140 <menu+0x109c>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b07      	cmp	r3, #7
 800203c:	f040 80f5 	bne.w	800222a <menu+0x1186>
		if(dilSecim == 0) {
 8002040:	4b34      	ldr	r3, [pc, #208]	; (8002114 <menu+0x1070>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002048:	4a3e      	ldr	r2, [pc, #248]	; (8002144 <menu+0x10a0>)
 800204a:	2101      	movs	r1, #1
 800204c:	2001      	movs	r0, #1
 800204e:	f005 fdd9 	bl	8007c04 <lcd_print>
 8002052:	e008      	b.n	8002066 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002054:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <menu+0x1070>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d104      	bne.n	8002066 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 800205c:	4a3a      	ldr	r2, [pc, #232]	; (8002148 <menu+0x10a4>)
 800205e:	2101      	movs	r1, #1
 8002060:	2001      	movs	r0, #1
 8002062:	f005 fdcf 	bl	8007c04 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <menu+0x10a8>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d113      	bne.n	8002096 <menu+0xff2>
			if(dilSecim == 0) {
 800206e:	4b29      	ldr	r3, [pc, #164]	; (8002114 <menu+0x1070>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002076:	4a2a      	ldr	r2, [pc, #168]	; (8002120 <menu+0x107c>)
 8002078:	2101      	movs	r1, #1
 800207a:	2002      	movs	r0, #2
 800207c:	f005 fdc2 	bl	8007c04 <lcd_print>
 8002080:	e079      	b.n	8002176 <menu+0x10d2>
			} else if(dilSecim == 1){
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <menu+0x1070>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d175      	bne.n	8002176 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800208a:	4a26      	ldr	r2, [pc, #152]	; (8002124 <menu+0x1080>)
 800208c:	2101      	movs	r1, #1
 800208e:	2002      	movs	r0, #2
 8002090:	f005 fdb8 	bl	8007c04 <lcd_print>
 8002094:	e06f      	b.n	8002176 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <menu+0x10a8>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d113      	bne.n	80020c6 <menu+0x1022>
			if(dilSecim == 0) {
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <menu+0x1070>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80020a6:	4a2a      	ldr	r2, [pc, #168]	; (8002150 <menu+0x10ac>)
 80020a8:	2101      	movs	r1, #1
 80020aa:	2002      	movs	r0, #2
 80020ac:	f005 fdaa 	bl	8007c04 <lcd_print>
 80020b0:	e061      	b.n	8002176 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <menu+0x1070>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d15d      	bne.n	8002176 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80020ba:	4a26      	ldr	r2, [pc, #152]	; (8002154 <menu+0x10b0>)
 80020bc:	2101      	movs	r1, #1
 80020be:	2002      	movs	r0, #2
 80020c0:	f005 fda0 	bl	8007c04 <lcd_print>
 80020c4:	e057      	b.n	8002176 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80020c6:	4b21      	ldr	r3, [pc, #132]	; (800214c <menu+0x10a8>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d113      	bne.n	80020f6 <menu+0x1052>
			if(dilSecim == 0) {
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <menu+0x1070>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80020d6:	4a20      	ldr	r2, [pc, #128]	; (8002158 <menu+0x10b4>)
 80020d8:	2101      	movs	r1, #1
 80020da:	2002      	movs	r0, #2
 80020dc:	f005 fd92 	bl	8007c04 <lcd_print>
 80020e0:	e049      	b.n	8002176 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <menu+0x1070>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d145      	bne.n	8002176 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80020ea:	4a1c      	ldr	r2, [pc, #112]	; (800215c <menu+0x10b8>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	2002      	movs	r0, #2
 80020f0:	f005 fd88 	bl	8007c04 <lcd_print>
 80020f4:	e03f      	b.n	8002176 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <menu+0x10a8>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d13b      	bne.n	8002176 <menu+0x10d2>
			if(dilSecim == 0) {
 80020fe:	4b05      	ldr	r3, [pc, #20]	; (8002114 <menu+0x1070>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d12e      	bne.n	8002164 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002106:	4a16      	ldr	r2, [pc, #88]	; (8002160 <menu+0x10bc>)
 8002108:	2101      	movs	r1, #1
 800210a:	2002      	movs	r0, #2
 800210c:	f005 fd7a 	bl	8007c04 <lcd_print>
 8002110:	e031      	b.n	8002176 <menu+0x10d2>
 8002112:	bf00      	nop
 8002114:	20000241 	.word	0x20000241
 8002118:	0800d2b4 	.word	0x0800d2b4
 800211c:	20000227 	.word	0x20000227
 8002120:	0800d1f4 	.word	0x0800d1f4
 8002124:	0800d208 	.word	0x0800d208
 8002128:	0800d254 	.word	0x0800d254
 800212c:	0800d268 	.word	0x0800d268
 8002130:	40010800 	.word	0x40010800
 8002134:	2000024f 	.word	0x2000024f
 8002138:	20000118 	.word	0x20000118
 800213c:	2000024c 	.word	0x2000024c
 8002140:	20000220 	.word	0x20000220
 8002144:	0800d2c4 	.word	0x0800d2c4
 8002148:	0800d2d8 	.word	0x0800d2d8
 800214c:	20000228 	.word	0x20000228
 8002150:	0800d2ec 	.word	0x0800d2ec
 8002154:	0800d300 	.word	0x0800d300
 8002158:	0800d314 	.word	0x0800d314
 800215c:	0800d328 	.word	0x0800d328
 8002160:	0800d33c 	.word	0x0800d33c
			} else if(dilSecim == 1){
 8002164:	4b99      	ldr	r3, [pc, #612]	; (80023cc <menu+0x1328>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d104      	bne.n	8002176 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 800216c:	4a98      	ldr	r2, [pc, #608]	; (80023d0 <menu+0x132c>)
 800216e:	2101      	movs	r1, #1
 8002170:	2002      	movs	r0, #2
 8002172:	f005 fd47 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002176:	2102      	movs	r1, #2
 8002178:	4896      	ldr	r0, [pc, #600]	; (80023d4 <menu+0x1330>)
 800217a:	f007 f869 	bl	8009250 <HAL_GPIO_ReadPin>
 800217e:	4603      	mov	r3, r0
 8002180:	2b01      	cmp	r3, #1
 8002182:	d115      	bne.n	80021b0 <menu+0x110c>
 8002184:	4b94      	ldr	r3, [pc, #592]	; (80023d8 <menu+0x1334>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	f083 0301 	eor.w	r3, r3, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00e      	beq.n	80021b0 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002192:	4b92      	ldr	r3, [pc, #584]	; (80023dc <menu+0x1338>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b90      	ldr	r3, [pc, #576]	; (80023dc <menu+0x1338>)
 800219c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800219e:	4b8f      	ldr	r3, [pc, #572]	; (80023dc <menu+0x1338>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d902      	bls.n	80021ac <menu+0x1108>
				kapiSecimleri = 0;
 80021a6:	4b8d      	ldr	r3, [pc, #564]	; (80023dc <menu+0x1338>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021ac:	f002 fb50 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021b0:	2104      	movs	r1, #4
 80021b2:	4888      	ldr	r0, [pc, #544]	; (80023d4 <menu+0x1330>)
 80021b4:	f007 f84c 	bl	8009250 <HAL_GPIO_ReadPin>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d115      	bne.n	80021ea <menu+0x1146>
 80021be:	4b86      	ldr	r3, [pc, #536]	; (80023d8 <menu+0x1334>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	f083 0301 	eor.w	r3, r3, #1
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80021cc:	4b83      	ldr	r3, [pc, #524]	; (80023dc <menu+0x1338>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	4b81      	ldr	r3, [pc, #516]	; (80023dc <menu+0x1338>)
 80021d6:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80021d8:	4b80      	ldr	r3, [pc, #512]	; (80023dc <menu+0x1338>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d902      	bls.n	80021e6 <menu+0x1142>
		   		kapiSecimleri = 3;
 80021e0:	4b7e      	ldr	r3, [pc, #504]	; (80023dc <menu+0x1338>)
 80021e2:	2203      	movs	r2, #3
 80021e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021e6:	f002 fb33 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ea:	2108      	movs	r1, #8
 80021ec:	4879      	ldr	r0, [pc, #484]	; (80023d4 <menu+0x1330>)
 80021ee:	f007 f82f 	bl	8009250 <HAL_GPIO_ReadPin>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d118      	bne.n	800222a <menu+0x1186>
 80021f8:	4b77      	ldr	r3, [pc, #476]	; (80023d8 <menu+0x1334>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	f083 0301 	eor.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d011      	beq.n	800222a <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002206:	4b75      	ldr	r3, [pc, #468]	; (80023dc <menu+0x1338>)
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	4b75      	ldr	r3, [pc, #468]	; (80023e0 <menu+0x133c>)
 800220c:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800220e:	4b73      	ldr	r3, [pc, #460]	; (80023dc <menu+0x1338>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <menu+0x1180>
				altLimit = 1;
 8002216:	4b73      	ldr	r3, [pc, #460]	; (80023e4 <menu+0x1340>)
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800221c:	4b71      	ldr	r3, [pc, #452]	; (80023e4 <menu+0x1340>)
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	4b6f      	ldr	r3, [pc, #444]	; (80023e0 <menu+0x133c>)
 8002222:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002224:	4b70      	ldr	r3, [pc, #448]	; (80023e8 <menu+0x1344>)
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800222a:	4b70      	ldr	r3, [pc, #448]	; (80023ec <menu+0x1348>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b08      	cmp	r3, #8
 8002230:	f040 8092 	bne.w	8002358 <menu+0x12b4>
		if(dilSecim == 0) {
 8002234:	4b65      	ldr	r3, [pc, #404]	; (80023cc <menu+0x1328>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 800223c:	4a6c      	ldr	r2, [pc, #432]	; (80023f0 <menu+0x134c>)
 800223e:	2101      	movs	r1, #1
 8002240:	2001      	movs	r0, #1
 8002242:	f005 fcdf 	bl	8007c04 <lcd_print>
 8002246:	e008      	b.n	800225a <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002248:	4b60      	ldr	r3, [pc, #384]	; (80023cc <menu+0x1328>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d104      	bne.n	800225a <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002250:	4a68      	ldr	r2, [pc, #416]	; (80023f4 <menu+0x1350>)
 8002252:	2101      	movs	r1, #1
 8002254:	2001      	movs	r0, #1
 8002256:	f005 fcd5 	bl	8007c04 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800225a:	4b67      	ldr	r3, [pc, #412]	; (80023f8 <menu+0x1354>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d113      	bne.n	800228a <menu+0x11e6>
			if(dilSecim == 0) {
 8002262:	4b5a      	ldr	r3, [pc, #360]	; (80023cc <menu+0x1328>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800226a:	4a64      	ldr	r2, [pc, #400]	; (80023fc <menu+0x1358>)
 800226c:	2101      	movs	r1, #1
 800226e:	2002      	movs	r0, #2
 8002270:	f005 fcc8 	bl	8007c04 <lcd_print>
 8002274:	e020      	b.n	80022b8 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002276:	4b55      	ldr	r3, [pc, #340]	; (80023cc <menu+0x1328>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d11c      	bne.n	80022b8 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800227e:	4a60      	ldr	r2, [pc, #384]	; (8002400 <menu+0x135c>)
 8002280:	2101      	movs	r1, #1
 8002282:	2002      	movs	r0, #2
 8002284:	f005 fcbe 	bl	8007c04 <lcd_print>
 8002288:	e016      	b.n	80022b8 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800228a:	4b5b      	ldr	r3, [pc, #364]	; (80023f8 <menu+0x1354>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d112      	bne.n	80022b8 <menu+0x1214>
			if(dilSecim == 0){
 8002292:	4b4e      	ldr	r3, [pc, #312]	; (80023cc <menu+0x1328>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800229a:	4a5a      	ldr	r2, [pc, #360]	; (8002404 <menu+0x1360>)
 800229c:	2101      	movs	r1, #1
 800229e:	2002      	movs	r0, #2
 80022a0:	f005 fcb0 	bl	8007c04 <lcd_print>
 80022a4:	e008      	b.n	80022b8 <menu+0x1214>
			} else if(dilSecim == 1){
 80022a6:	4b49      	ldr	r3, [pc, #292]	; (80023cc <menu+0x1328>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d104      	bne.n	80022b8 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80022ae:	4a56      	ldr	r2, [pc, #344]	; (8002408 <menu+0x1364>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	2002      	movs	r0, #2
 80022b4:	f005 fca6 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022b8:	2102      	movs	r1, #2
 80022ba:	4846      	ldr	r0, [pc, #280]	; (80023d4 <menu+0x1330>)
 80022bc:	f006 ffc8 	bl	8009250 <HAL_GPIO_ReadPin>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d115      	bne.n	80022f2 <menu+0x124e>
 80022c6:	4b44      	ldr	r3, [pc, #272]	; (80023d8 <menu+0x1334>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f083 0301 	eor.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00e      	beq.n	80022f2 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80022d4:	4b48      	ldr	r3, [pc, #288]	; (80023f8 <menu+0x1354>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <menu+0x1354>)
 80022de:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80022e0:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <menu+0x1354>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d902      	bls.n	80022ee <menu+0x124a>
				kapiAcTipi = 0;
 80022e8:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <menu+0x1354>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022ee:	f002 faaf 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022f2:	2104      	movs	r1, #4
 80022f4:	4837      	ldr	r0, [pc, #220]	; (80023d4 <menu+0x1330>)
 80022f6:	f006 ffab 	bl	8009250 <HAL_GPIO_ReadPin>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d115      	bne.n	800232c <menu+0x1288>
 8002300:	4b35      	ldr	r3, [pc, #212]	; (80023d8 <menu+0x1334>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	f083 0301 	eor.w	r3, r3, #1
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00e      	beq.n	800232c <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800230e:	4b3a      	ldr	r3, [pc, #232]	; (80023f8 <menu+0x1354>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	3b01      	subs	r3, #1
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4b38      	ldr	r3, [pc, #224]	; (80023f8 <menu+0x1354>)
 8002318:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800231a:	4b37      	ldr	r3, [pc, #220]	; (80023f8 <menu+0x1354>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <menu+0x1284>
		   		kapiAcTipi = 1;
 8002322:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <menu+0x1354>)
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002328:	f002 fa92 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800232c:	2108      	movs	r1, #8
 800232e:	4829      	ldr	r0, [pc, #164]	; (80023d4 <menu+0x1330>)
 8002330:	f006 ff8e 	bl	8009250 <HAL_GPIO_ReadPin>
 8002334:	4603      	mov	r3, r0
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10e      	bne.n	8002358 <menu+0x12b4>
 800233a:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <menu+0x1334>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	f083 0301 	eor.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <menu+0x1354>)
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <menu+0x133c>)
 800234e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002352:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <menu+0x1344>)
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002358:	4b24      	ldr	r3, [pc, #144]	; (80023ec <menu+0x1348>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b09      	cmp	r3, #9
 800235e:	f040 80b9 	bne.w	80024d4 <menu+0x1430>
		if(dilSecim == 0){
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <menu+0x1328>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800236a:	4a28      	ldr	r2, [pc, #160]	; (800240c <menu+0x1368>)
 800236c:	2101      	movs	r1, #1
 800236e:	2001      	movs	r0, #1
 8002370:	f005 fc48 	bl	8007c04 <lcd_print>
 8002374:	e008      	b.n	8002388 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <menu+0x1328>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d104      	bne.n	8002388 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800237e:	4a24      	ldr	r2, [pc, #144]	; (8002410 <menu+0x136c>)
 8002380:	2101      	movs	r1, #1
 8002382:	2001      	movs	r0, #1
 8002384:	f005 fc3e 	bl	8007c04 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002388:	4b22      	ldr	r3, [pc, #136]	; (8002414 <menu+0x1370>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002390:	4a21      	ldr	r2, [pc, #132]	; (8002418 <menu+0x1374>)
 8002392:	2101      	movs	r1, #1
 8002394:	2002      	movs	r0, #2
 8002396:	f005 fc35 	bl	8007c04 <lcd_print>
 800239a:	e04c      	b.n	8002436 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <menu+0x1370>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d13f      	bne.n	8002424 <menu+0x1380>
			if(dilSecim == 0){
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <menu+0x1328>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80023ac:	4a1b      	ldr	r2, [pc, #108]	; (800241c <menu+0x1378>)
 80023ae:	2101      	movs	r1, #1
 80023b0:	2002      	movs	r0, #2
 80023b2:	f005 fc27 	bl	8007c04 <lcd_print>
 80023b6:	e03e      	b.n	8002436 <menu+0x1392>
			} else if(dilSecim == 1) {
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <menu+0x1328>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d13a      	bne.n	8002436 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80023c0:	4a17      	ldr	r2, [pc, #92]	; (8002420 <menu+0x137c>)
 80023c2:	2101      	movs	r1, #1
 80023c4:	2002      	movs	r0, #2
 80023c6:	f005 fc1d 	bl	8007c04 <lcd_print>
 80023ca:	e034      	b.n	8002436 <menu+0x1392>
 80023cc:	20000241 	.word	0x20000241
 80023d0:	0800d350 	.word	0x0800d350
 80023d4:	40010800 	.word	0x40010800
 80023d8:	2000024f 	.word	0x2000024f
 80023dc:	20000228 	.word	0x20000228
 80023e0:	20000118 	.word	0x20000118
 80023e4:	20000226 	.word	0x20000226
 80023e8:	2000024c 	.word	0x2000024c
 80023ec:	20000220 	.word	0x20000220
 80023f0:	0800d364 	.word	0x0800d364
 80023f4:	0800d378 	.word	0x0800d378
 80023f8:	2000022c 	.word	0x2000022c
 80023fc:	0800d38c 	.word	0x0800d38c
 8002400:	0800d39c 	.word	0x0800d39c
 8002404:	0800d3ac 	.word	0x0800d3ac
 8002408:	0800d3c0 	.word	0x0800d3c0
 800240c:	0800d3d4 	.word	0x0800d3d4
 8002410:	0800d3e8 	.word	0x0800d3e8
 8002414:	20000229 	.word	0x20000229
 8002418:	0800d3fc 	.word	0x0800d3fc
 800241c:	0800d410 	.word	0x0800d410
 8002420:	0800d420 	.word	0x0800d420
			}
		} else if(kapi1Tip == 2) {
 8002424:	4b8a      	ldr	r3, [pc, #552]	; (8002650 <menu+0x15ac>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d104      	bne.n	8002436 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 800242c:	4a89      	ldr	r2, [pc, #548]	; (8002654 <menu+0x15b0>)
 800242e:	2101      	movs	r1, #1
 8002430:	2002      	movs	r0, #2
 8002432:	f005 fbe7 	bl	8007c04 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002436:	2102      	movs	r1, #2
 8002438:	4887      	ldr	r0, [pc, #540]	; (8002658 <menu+0x15b4>)
 800243a:	f006 ff09 	bl	8009250 <HAL_GPIO_ReadPin>
 800243e:	4603      	mov	r3, r0
 8002440:	2b01      	cmp	r3, #1
 8002442:	d115      	bne.n	8002470 <menu+0x13cc>
 8002444:	4b85      	ldr	r3, [pc, #532]	; (800265c <menu+0x15b8>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	f083 0301 	eor.w	r3, r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00e      	beq.n	8002470 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002452:	4b7f      	ldr	r3, [pc, #508]	; (8002650 <menu+0x15ac>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b7d      	ldr	r3, [pc, #500]	; (8002650 <menu+0x15ac>)
 800245c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800245e:	4b7c      	ldr	r3, [pc, #496]	; (8002650 <menu+0x15ac>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d902      	bls.n	800246c <menu+0x13c8>
				kapi1Tip = 0;
 8002466:	4b7a      	ldr	r3, [pc, #488]	; (8002650 <menu+0x15ac>)
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800246c:	f002 f9f0 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002470:	2104      	movs	r1, #4
 8002472:	4879      	ldr	r0, [pc, #484]	; (8002658 <menu+0x15b4>)
 8002474:	f006 feec 	bl	8009250 <HAL_GPIO_ReadPin>
 8002478:	4603      	mov	r3, r0
 800247a:	2b01      	cmp	r3, #1
 800247c:	d115      	bne.n	80024aa <menu+0x1406>
 800247e:	4b77      	ldr	r3, [pc, #476]	; (800265c <menu+0x15b8>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	f083 0301 	eor.w	r3, r3, #1
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00e      	beq.n	80024aa <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 800248c:	4b70      	ldr	r3, [pc, #448]	; (8002650 <menu+0x15ac>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	3b01      	subs	r3, #1
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b6e      	ldr	r3, [pc, #440]	; (8002650 <menu+0x15ac>)
 8002496:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002498:	4b6d      	ldr	r3, [pc, #436]	; (8002650 <menu+0x15ac>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d902      	bls.n	80024a6 <menu+0x1402>
		   		kapi1Tip = 2;
 80024a0:	4b6b      	ldr	r3, [pc, #428]	; (8002650 <menu+0x15ac>)
 80024a2:	2202      	movs	r2, #2
 80024a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024a6:	f002 f9d3 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024aa:	2108      	movs	r1, #8
 80024ac:	486a      	ldr	r0, [pc, #424]	; (8002658 <menu+0x15b4>)
 80024ae:	f006 fecf 	bl	8009250 <HAL_GPIO_ReadPin>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d10d      	bne.n	80024d4 <menu+0x1430>
 80024b8:	4b68      	ldr	r3, [pc, #416]	; (800265c <menu+0x15b8>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	f083 0301 	eor.w	r3, r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80024c6:	4b62      	ldr	r3, [pc, #392]	; (8002650 <menu+0x15ac>)
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	4b65      	ldr	r3, [pc, #404]	; (8002660 <menu+0x15bc>)
 80024cc:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80024ce:	4b65      	ldr	r3, [pc, #404]	; (8002664 <menu+0x15c0>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80024d4:	4b64      	ldr	r3, [pc, #400]	; (8002668 <menu+0x15c4>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b0a      	cmp	r3, #10
 80024da:	d17f      	bne.n	80025dc <menu+0x1538>
		if(dilSecim == 0) {
 80024dc:	4b63      	ldr	r3, [pc, #396]	; (800266c <menu+0x15c8>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80024e4:	4a62      	ldr	r2, [pc, #392]	; (8002670 <menu+0x15cc>)
 80024e6:	2101      	movs	r1, #1
 80024e8:	2001      	movs	r0, #1
 80024ea:	f005 fb8b 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80024ee:	4a61      	ldr	r2, [pc, #388]	; (8002674 <menu+0x15d0>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	2002      	movs	r0, #2
 80024f4:	f005 fb86 	bl	8007c04 <lcd_print>
 80024f8:	e00d      	b.n	8002516 <menu+0x1472>
		} else if(dilSecim == 1) {
 80024fa:	4b5c      	ldr	r3, [pc, #368]	; (800266c <menu+0x15c8>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d109      	bne.n	8002516 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002502:	4a5d      	ldr	r2, [pc, #372]	; (8002678 <menu+0x15d4>)
 8002504:	2101      	movs	r1, #1
 8002506:	2001      	movs	r0, #1
 8002508:	f005 fb7c 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800250c:	4a5b      	ldr	r2, [pc, #364]	; (800267c <menu+0x15d8>)
 800250e:	2101      	movs	r1, #1
 8002510:	2002      	movs	r0, #2
 8002512:	f005 fb77 	bl	8007c04 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002516:	4b5a      	ldr	r3, [pc, #360]	; (8002680 <menu+0x15dc>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	220a      	movs	r2, #10
 800251c:	4959      	ldr	r1, [pc, #356]	; (8002684 <menu+0x15e0>)
 800251e:	4618      	mov	r0, r3
 8002520:	f009 fec2 	bl	800c2a8 <itoa>
		lcd_print(2,16,snum);
 8002524:	4a57      	ldr	r2, [pc, #348]	; (8002684 <menu+0x15e0>)
 8002526:	2110      	movs	r1, #16
 8002528:	2002      	movs	r0, #2
 800252a:	f005 fb6b 	bl	8007c04 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800252e:	2102      	movs	r1, #2
 8002530:	4849      	ldr	r0, [pc, #292]	; (8002658 <menu+0x15b4>)
 8002532:	f006 fe8d 	bl	8009250 <HAL_GPIO_ReadPin>
 8002536:	4603      	mov	r3, r0
 8002538:	2b01      	cmp	r3, #1
 800253a:	d119      	bne.n	8002570 <menu+0x14cc>
 800253c:	4b47      	ldr	r3, [pc, #284]	; (800265c <menu+0x15b8>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d012      	beq.n	8002570 <menu+0x14cc>
 800254a:	4b41      	ldr	r3, [pc, #260]	; (8002650 <menu+0x15ac>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10e      	bne.n	8002570 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002552:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <menu+0x15dc>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b49      	ldr	r3, [pc, #292]	; (8002680 <menu+0x15dc>)
 800255c:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800255e:	4b48      	ldr	r3, [pc, #288]	; (8002680 <menu+0x15dc>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b05      	cmp	r3, #5
 8002564:	d902      	bls.n	800256c <menu+0x14c8>
				kapi1AcSure = 0;
 8002566:	4b46      	ldr	r3, [pc, #280]	; (8002680 <menu+0x15dc>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800256c:	f002 f970 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002570:	2104      	movs	r1, #4
 8002572:	4839      	ldr	r0, [pc, #228]	; (8002658 <menu+0x15b4>)
 8002574:	f006 fe6c 	bl	8009250 <HAL_GPIO_ReadPin>
 8002578:	4603      	mov	r3, r0
 800257a:	2b01      	cmp	r3, #1
 800257c:	d119      	bne.n	80025b2 <menu+0x150e>
 800257e:	4b37      	ldr	r3, [pc, #220]	; (800265c <menu+0x15b8>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	f083 0301 	eor.w	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d012      	beq.n	80025b2 <menu+0x150e>
 800258c:	4b30      	ldr	r3, [pc, #192]	; (8002650 <menu+0x15ac>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10e      	bne.n	80025b2 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002594:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <menu+0x15dc>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	3b01      	subs	r3, #1
 800259a:	b2da      	uxtb	r2, r3
 800259c:	4b38      	ldr	r3, [pc, #224]	; (8002680 <menu+0x15dc>)
 800259e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80025a0:	4b37      	ldr	r3, [pc, #220]	; (8002680 <menu+0x15dc>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b06      	cmp	r3, #6
 80025a6:	d902      	bls.n	80025ae <menu+0x150a>
		   		kapi1AcSure = 5;
 80025a8:	4b35      	ldr	r3, [pc, #212]	; (8002680 <menu+0x15dc>)
 80025aa:	2205      	movs	r2, #5
 80025ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025ae:	f002 f94f 	bl	8004850 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025b2:	2108      	movs	r1, #8
 80025b4:	4828      	ldr	r0, [pc, #160]	; (8002658 <menu+0x15b4>)
 80025b6:	f006 fe4b 	bl	8009250 <HAL_GPIO_ReadPin>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10d      	bne.n	80025dc <menu+0x1538>
 80025c0:	4b26      	ldr	r3, [pc, #152]	; (800265c <menu+0x15b8>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	f083 0301 	eor.w	r3, r3, #1
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80025ce:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <menu+0x15dc>)
 80025d0:	781a      	ldrb	r2, [r3, #0]
 80025d2:	4b23      	ldr	r3, [pc, #140]	; (8002660 <menu+0x15bc>)
 80025d4:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80025d6:	4b23      	ldr	r3, [pc, #140]	; (8002664 <menu+0x15c0>)
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80025dc:	4b22      	ldr	r3, [pc, #136]	; (8002668 <menu+0x15c4>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b0b      	cmp	r3, #11
 80025e2:	f040 80b5 	bne.w	8002750 <menu+0x16ac>
		if(dilSecim == 0) {
 80025e6:	4b21      	ldr	r3, [pc, #132]	; (800266c <menu+0x15c8>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d105      	bne.n	80025fa <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80025ee:	4a26      	ldr	r2, [pc, #152]	; (8002688 <menu+0x15e4>)
 80025f0:	2101      	movs	r1, #1
 80025f2:	2001      	movs	r0, #1
 80025f4:	f005 fb06 	bl	8007c04 <lcd_print>
 80025f8:	e008      	b.n	800260c <menu+0x1568>
		} else if(dilSecim == 1) {
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <menu+0x15c8>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d104      	bne.n	800260c <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002602:	4a22      	ldr	r2, [pc, #136]	; (800268c <menu+0x15e8>)
 8002604:	2101      	movs	r1, #1
 8002606:	2001      	movs	r0, #1
 8002608:	f005 fafc 	bl	8007c04 <lcd_print>
		}

		if(kapi2Tip == 0) {
 800260c:	4b20      	ldr	r3, [pc, #128]	; (8002690 <menu+0x15ec>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d105      	bne.n	8002620 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002614:	4a1f      	ldr	r2, [pc, #124]	; (8002694 <menu+0x15f0>)
 8002616:	2101      	movs	r1, #1
 8002618:	2002      	movs	r0, #2
 800261a:	f005 faf3 	bl	8007c04 <lcd_print>
 800261e:	e048      	b.n	80026b2 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <menu+0x15ec>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d13b      	bne.n	80026a0 <menu+0x15fc>
			if(dilSecim == 0) {
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <menu+0x15c8>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002630:	4a19      	ldr	r2, [pc, #100]	; (8002698 <menu+0x15f4>)
 8002632:	2101      	movs	r1, #1
 8002634:	2002      	movs	r0, #2
 8002636:	f005 fae5 	bl	8007c04 <lcd_print>
 800263a:	e03a      	b.n	80026b2 <menu+0x160e>
			} else if(dilSecim == 1) {
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <menu+0x15c8>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d136      	bne.n	80026b2 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002644:	4a15      	ldr	r2, [pc, #84]	; (800269c <menu+0x15f8>)
 8002646:	2101      	movs	r1, #1
 8002648:	2002      	movs	r0, #2
 800264a:	f005 fadb 	bl	8007c04 <lcd_print>
 800264e:	e030      	b.n	80026b2 <menu+0x160e>
 8002650:	20000229 	.word	0x20000229
 8002654:	0800d434 	.word	0x0800d434
 8002658:	40010800 	.word	0x40010800
 800265c:	2000024f 	.word	0x2000024f
 8002660:	20000118 	.word	0x20000118
 8002664:	2000024c 	.word	0x2000024c
 8002668:	20000220 	.word	0x20000220
 800266c:	20000241 	.word	0x20000241
 8002670:	0800d444 	.word	0x0800d444
 8002674:	0800d458 	.word	0x0800d458
 8002678:	0800d468 	.word	0x0800d468
 800267c:	0800d47c 	.word	0x0800d47c
 8002680:	20000239 	.word	0x20000239
 8002684:	20000188 	.word	0x20000188
 8002688:	0800d48c 	.word	0x0800d48c
 800268c:	0800d4a0 	.word	0x0800d4a0
 8002690:	2000022a 	.word	0x2000022a
 8002694:	0800d3fc 	.word	0x0800d3fc
 8002698:	0800d410 	.word	0x0800d410
 800269c:	0800d420 	.word	0x0800d420
			}
		} else if(kapi2Tip == 2) {
 80026a0:	4b8a      	ldr	r3, [pc, #552]	; (80028cc <menu+0x1828>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d104      	bne.n	80026b2 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 80026a8:	4a89      	ldr	r2, [pc, #548]	; (80028d0 <menu+0x182c>)
 80026aa:	2101      	movs	r1, #1
 80026ac:	2002      	movs	r0, #2
 80026ae:	f005 faa9 	bl	8007c04 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026b2:	2102      	movs	r1, #2
 80026b4:	4887      	ldr	r0, [pc, #540]	; (80028d4 <menu+0x1830>)
 80026b6:	f006 fdcb 	bl	8009250 <HAL_GPIO_ReadPin>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d115      	bne.n	80026ec <menu+0x1648>
 80026c0:	4b85      	ldr	r3, [pc, #532]	; (80028d8 <menu+0x1834>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f083 0301 	eor.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00e      	beq.n	80026ec <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80026ce:	4b7f      	ldr	r3, [pc, #508]	; (80028cc <menu+0x1828>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <menu+0x1828>)
 80026d8:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80026da:	4b7c      	ldr	r3, [pc, #496]	; (80028cc <menu+0x1828>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d902      	bls.n	80026e8 <menu+0x1644>
				kapi2Tip = 0;
 80026e2:	4b7a      	ldr	r3, [pc, #488]	; (80028cc <menu+0x1828>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026e8:	f002 f8b2 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ec:	2104      	movs	r1, #4
 80026ee:	4879      	ldr	r0, [pc, #484]	; (80028d4 <menu+0x1830>)
 80026f0:	f006 fdae 	bl	8009250 <HAL_GPIO_ReadPin>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d115      	bne.n	8002726 <menu+0x1682>
 80026fa:	4b77      	ldr	r3, [pc, #476]	; (80028d8 <menu+0x1834>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	f083 0301 	eor.w	r3, r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002708:	4b70      	ldr	r3, [pc, #448]	; (80028cc <menu+0x1828>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	3b01      	subs	r3, #1
 800270e:	b2da      	uxtb	r2, r3
 8002710:	4b6e      	ldr	r3, [pc, #440]	; (80028cc <menu+0x1828>)
 8002712:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002714:	4b6d      	ldr	r3, [pc, #436]	; (80028cc <menu+0x1828>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d902      	bls.n	8002722 <menu+0x167e>
		   		kapi2Tip = 2;
 800271c:	4b6b      	ldr	r3, [pc, #428]	; (80028cc <menu+0x1828>)
 800271e:	2202      	movs	r2, #2
 8002720:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002722:	f002 f895 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002726:	2108      	movs	r1, #8
 8002728:	486a      	ldr	r0, [pc, #424]	; (80028d4 <menu+0x1830>)
 800272a:	f006 fd91 	bl	8009250 <HAL_GPIO_ReadPin>
 800272e:	4603      	mov	r3, r0
 8002730:	2b01      	cmp	r3, #1
 8002732:	d10d      	bne.n	8002750 <menu+0x16ac>
 8002734:	4b68      	ldr	r3, [pc, #416]	; (80028d8 <menu+0x1834>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d006      	beq.n	8002750 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002742:	4b62      	ldr	r3, [pc, #392]	; (80028cc <menu+0x1828>)
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	4b65      	ldr	r3, [pc, #404]	; (80028dc <menu+0x1838>)
 8002748:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800274a:	4b65      	ldr	r3, [pc, #404]	; (80028e0 <menu+0x183c>)
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002750:	4b64      	ldr	r3, [pc, #400]	; (80028e4 <menu+0x1840>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d17f      	bne.n	8002858 <menu+0x17b4>
		if(dilSecim == 0) {
 8002758:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <menu+0x1844>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002760:	4a62      	ldr	r2, [pc, #392]	; (80028ec <menu+0x1848>)
 8002762:	2101      	movs	r1, #1
 8002764:	2001      	movs	r0, #1
 8002766:	f005 fa4d 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800276a:	4a61      	ldr	r2, [pc, #388]	; (80028f0 <menu+0x184c>)
 800276c:	2101      	movs	r1, #1
 800276e:	2002      	movs	r0, #2
 8002770:	f005 fa48 	bl	8007c04 <lcd_print>
 8002774:	e00d      	b.n	8002792 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002776:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <menu+0x1844>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d109      	bne.n	8002792 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 800277e:	4a5d      	ldr	r2, [pc, #372]	; (80028f4 <menu+0x1850>)
 8002780:	2101      	movs	r1, #1
 8002782:	2001      	movs	r0, #1
 8002784:	f005 fa3e 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002788:	4a5b      	ldr	r2, [pc, #364]	; (80028f8 <menu+0x1854>)
 800278a:	2101      	movs	r1, #1
 800278c:	2002      	movs	r0, #2
 800278e:	f005 fa39 	bl	8007c04 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002792:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <menu+0x1858>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	220a      	movs	r2, #10
 8002798:	4959      	ldr	r1, [pc, #356]	; (8002900 <menu+0x185c>)
 800279a:	4618      	mov	r0, r3
 800279c:	f009 fd84 	bl	800c2a8 <itoa>
		lcd_print(2,16,snum);
 80027a0:	4a57      	ldr	r2, [pc, #348]	; (8002900 <menu+0x185c>)
 80027a2:	2110      	movs	r1, #16
 80027a4:	2002      	movs	r0, #2
 80027a6:	f005 fa2d 	bl	8007c04 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80027aa:	2102      	movs	r1, #2
 80027ac:	4849      	ldr	r0, [pc, #292]	; (80028d4 <menu+0x1830>)
 80027ae:	f006 fd4f 	bl	8009250 <HAL_GPIO_ReadPin>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d119      	bne.n	80027ec <menu+0x1748>
 80027b8:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <menu+0x1834>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	f083 0301 	eor.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d012      	beq.n	80027ec <menu+0x1748>
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <menu+0x1828>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10e      	bne.n	80027ec <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 80027ce:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <menu+0x1858>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4b49      	ldr	r3, [pc, #292]	; (80028fc <menu+0x1858>)
 80027d8:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80027da:	4b48      	ldr	r3, [pc, #288]	; (80028fc <menu+0x1858>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d902      	bls.n	80027e8 <menu+0x1744>
				kapi2AcSure = 0;
 80027e2:	4b46      	ldr	r3, [pc, #280]	; (80028fc <menu+0x1858>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027e8:	f002 f832 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80027ec:	2104      	movs	r1, #4
 80027ee:	4839      	ldr	r0, [pc, #228]	; (80028d4 <menu+0x1830>)
 80027f0:	f006 fd2e 	bl	8009250 <HAL_GPIO_ReadPin>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d119      	bne.n	800282e <menu+0x178a>
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <menu+0x1834>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	f083 0301 	eor.w	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d012      	beq.n	800282e <menu+0x178a>
 8002808:	4b30      	ldr	r3, [pc, #192]	; (80028cc <menu+0x1828>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10e      	bne.n	800282e <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002810:	4b3a      	ldr	r3, [pc, #232]	; (80028fc <menu+0x1858>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	3b01      	subs	r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b38      	ldr	r3, [pc, #224]	; (80028fc <menu+0x1858>)
 800281a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 800281c:	4b37      	ldr	r3, [pc, #220]	; (80028fc <menu+0x1858>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b06      	cmp	r3, #6
 8002822:	d902      	bls.n	800282a <menu+0x1786>
		   		kapi2AcSure = 5;
 8002824:	4b35      	ldr	r3, [pc, #212]	; (80028fc <menu+0x1858>)
 8002826:	2205      	movs	r2, #5
 8002828:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800282a:	f002 f811 	bl	8004850 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800282e:	2108      	movs	r1, #8
 8002830:	4828      	ldr	r0, [pc, #160]	; (80028d4 <menu+0x1830>)
 8002832:	f006 fd0d 	bl	8009250 <HAL_GPIO_ReadPin>
 8002836:	4603      	mov	r3, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10d      	bne.n	8002858 <menu+0x17b4>
 800283c:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <menu+0x1834>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	f083 0301 	eor.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <menu+0x1858>)
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	4b23      	ldr	r3, [pc, #140]	; (80028dc <menu+0x1838>)
 8002850:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <menu+0x183c>)
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002858:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <menu+0x1840>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b0d      	cmp	r3, #13
 800285e:	f040 80b5 	bne.w	80029cc <menu+0x1928>
		if(dilSecim == 0) {
 8002862:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <menu+0x1844>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 800286a:	4a26      	ldr	r2, [pc, #152]	; (8002904 <menu+0x1860>)
 800286c:	2101      	movs	r1, #1
 800286e:	2001      	movs	r0, #1
 8002870:	f005 f9c8 	bl	8007c04 <lcd_print>
 8002874:	e008      	b.n	8002888 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <menu+0x1844>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d104      	bne.n	8002888 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 800287e:	4a22      	ldr	r2, [pc, #136]	; (8002908 <menu+0x1864>)
 8002880:	2101      	movs	r1, #1
 8002882:	2001      	movs	r0, #1
 8002884:	f005 f9be 	bl	8007c04 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002888:	4b20      	ldr	r3, [pc, #128]	; (800290c <menu+0x1868>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002890:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <menu+0x186c>)
 8002892:	2101      	movs	r1, #1
 8002894:	2002      	movs	r0, #2
 8002896:	f005 f9b5 	bl	8007c04 <lcd_print>
 800289a:	e048      	b.n	800292e <menu+0x188a>
		} else if(kapitablaTip == 1) {
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <menu+0x1868>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d13b      	bne.n	800291c <menu+0x1878>
			if(dilSecim == 0) {
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <menu+0x1844>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <menu+0x1870>)
 80028ae:	2101      	movs	r1, #1
 80028b0:	2002      	movs	r0, #2
 80028b2:	f005 f9a7 	bl	8007c04 <lcd_print>
 80028b6:	e03a      	b.n	800292e <menu+0x188a>
			} else if(dilSecim == 1) {
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <menu+0x1844>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d136      	bne.n	800292e <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 80028c0:	4a15      	ldr	r2, [pc, #84]	; (8002918 <menu+0x1874>)
 80028c2:	2101      	movs	r1, #1
 80028c4:	2002      	movs	r0, #2
 80028c6:	f005 f99d 	bl	8007c04 <lcd_print>
 80028ca:	e030      	b.n	800292e <menu+0x188a>
 80028cc:	2000022a 	.word	0x2000022a
 80028d0:	0800d434 	.word	0x0800d434
 80028d4:	40010800 	.word	0x40010800
 80028d8:	2000024f 	.word	0x2000024f
 80028dc:	20000118 	.word	0x20000118
 80028e0:	2000024c 	.word	0x2000024c
 80028e4:	20000220 	.word	0x20000220
 80028e8:	20000241 	.word	0x20000241
 80028ec:	0800d4b4 	.word	0x0800d4b4
 80028f0:	0800d458 	.word	0x0800d458
 80028f4:	0800d4c8 	.word	0x0800d4c8
 80028f8:	0800d47c 	.word	0x0800d47c
 80028fc:	2000023a 	.word	0x2000023a
 8002900:	20000188 	.word	0x20000188
 8002904:	0800d4dc 	.word	0x0800d4dc
 8002908:	0800d4f0 	.word	0x0800d4f0
 800290c:	2000022b 	.word	0x2000022b
 8002910:	0800d3fc 	.word	0x0800d3fc
 8002914:	0800d410 	.word	0x0800d410
 8002918:	0800d420 	.word	0x0800d420
			}
		} else if(kapitablaTip == 2) {
 800291c:	4b5b      	ldr	r3, [pc, #364]	; (8002a8c <menu+0x19e8>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d104      	bne.n	800292e <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002924:	4a5a      	ldr	r2, [pc, #360]	; (8002a90 <menu+0x19ec>)
 8002926:	2101      	movs	r1, #1
 8002928:	2002      	movs	r0, #2
 800292a:	f005 f96b 	bl	8007c04 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800292e:	2102      	movs	r1, #2
 8002930:	4858      	ldr	r0, [pc, #352]	; (8002a94 <menu+0x19f0>)
 8002932:	f006 fc8d 	bl	8009250 <HAL_GPIO_ReadPin>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	d115      	bne.n	8002968 <menu+0x18c4>
 800293c:	4b56      	ldr	r3, [pc, #344]	; (8002a98 <menu+0x19f4>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	f083 0301 	eor.w	r3, r3, #1
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00e      	beq.n	8002968 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 800294a:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <menu+0x19e8>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b4e      	ldr	r3, [pc, #312]	; (8002a8c <menu+0x19e8>)
 8002954:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002956:	4b4d      	ldr	r3, [pc, #308]	; (8002a8c <menu+0x19e8>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d902      	bls.n	8002964 <menu+0x18c0>
				kapitablaTip = 0;
 800295e:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <menu+0x19e8>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002964:	f001 ff74 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002968:	2104      	movs	r1, #4
 800296a:	484a      	ldr	r0, [pc, #296]	; (8002a94 <menu+0x19f0>)
 800296c:	f006 fc70 	bl	8009250 <HAL_GPIO_ReadPin>
 8002970:	4603      	mov	r3, r0
 8002972:	2b01      	cmp	r3, #1
 8002974:	d115      	bne.n	80029a2 <menu+0x18fe>
 8002976:	4b48      	ldr	r3, [pc, #288]	; (8002a98 <menu+0x19f4>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	f083 0301 	eor.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00e      	beq.n	80029a2 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002984:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <menu+0x19e8>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	3b01      	subs	r3, #1
 800298a:	b2da      	uxtb	r2, r3
 800298c:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <menu+0x19e8>)
 800298e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002990:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <menu+0x19e8>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d902      	bls.n	800299e <menu+0x18fa>
		   		kapitablaTip = 2;
 8002998:	4b3c      	ldr	r3, [pc, #240]	; (8002a8c <menu+0x19e8>)
 800299a:	2202      	movs	r2, #2
 800299c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800299e:	f001 ff57 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029a2:	2108      	movs	r1, #8
 80029a4:	483b      	ldr	r0, [pc, #236]	; (8002a94 <menu+0x19f0>)
 80029a6:	f006 fc53 	bl	8009250 <HAL_GPIO_ReadPin>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10d      	bne.n	80029cc <menu+0x1928>
 80029b0:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <menu+0x19f4>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f083 0301 	eor.w	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <menu+0x1928>
			eepromData[12] = kapitablaTip;
 80029be:	4b33      	ldr	r3, [pc, #204]	; (8002a8c <menu+0x19e8>)
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <menu+0x19f8>)
 80029c4:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80029c6:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <menu+0x19fc>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80029cc:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <menu+0x1a00>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b0e      	cmp	r3, #14
 80029d2:	f040 80f2 	bne.w	8002bba <menu+0x1b16>
		if(dilSecim == 0) {
 80029d6:	4b34      	ldr	r3, [pc, #208]	; (8002aa8 <menu+0x1a04>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d105      	bne.n	80029ea <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 80029de:	4a33      	ldr	r2, [pc, #204]	; (8002aac <menu+0x1a08>)
 80029e0:	2101      	movs	r1, #1
 80029e2:	2001      	movs	r0, #1
 80029e4:	f005 f90e 	bl	8007c04 <lcd_print>
 80029e8:	e008      	b.n	80029fc <menu+0x1958>
		} else if(dilSecim == 1) {
 80029ea:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <menu+0x1a04>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d104      	bne.n	80029fc <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 80029f2:	4a2f      	ldr	r2, [pc, #188]	; (8002ab0 <menu+0x1a0c>)
 80029f4:	2101      	movs	r1, #1
 80029f6:	2001      	movs	r0, #1
 80029f8:	f005 f904 	bl	8007c04 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 80029fc:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <menu+0x1a10>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d113      	bne.n	8002a2c <menu+0x1988>
			if(dilSecim == 0){
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <menu+0x1a04>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002a0c:	4a2a      	ldr	r2, [pc, #168]	; (8002ab8 <menu+0x1a14>)
 8002a0e:	2101      	movs	r1, #1
 8002a10:	2002      	movs	r0, #2
 8002a12:	f005 f8f7 	bl	8007c04 <lcd_print>
 8002a16:	e071      	b.n	8002afc <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002a18:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <menu+0x1a04>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d16d      	bne.n	8002afc <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002a20:	4a26      	ldr	r2, [pc, #152]	; (8002abc <menu+0x1a18>)
 8002a22:	2101      	movs	r1, #1
 8002a24:	2002      	movs	r0, #2
 8002a26:	f005 f8ed 	bl	8007c04 <lcd_print>
 8002a2a:	e067      	b.n	8002afc <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002a2c:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <menu+0x1a10>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d112      	bne.n	8002a5a <menu+0x19b6>
			if(dilSecim == 0){
 8002a34:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <menu+0x1a04>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d104      	bne.n	8002a46 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002a3c:	4a20      	ldr	r2, [pc, #128]	; (8002ac0 <menu+0x1a1c>)
 8002a3e:	2101      	movs	r1, #1
 8002a40:	2002      	movs	r0, #2
 8002a42:	f005 f8df 	bl	8007c04 <lcd_print>
			}
			if(dilSecim == 1){
 8002a46:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <menu+0x1a04>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d156      	bne.n	8002afc <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <menu+0x1a20>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	2002      	movs	r0, #2
 8002a54:	f005 f8d6 	bl	8007c04 <lcd_print>
 8002a58:	e050      	b.n	8002afc <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <menu+0x1a10>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d136      	bne.n	8002ad0 <menu+0x1a2c>
			if(dilSecim == 0){
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <menu+0x1a04>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <menu+0x1a24>)
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	2002      	movs	r0, #2
 8002a70:	f005 f8c8 	bl	8007c04 <lcd_print>
 8002a74:	e042      	b.n	8002afc <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <menu+0x1a04>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d13e      	bne.n	8002afc <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002a7e:	4a13      	ldr	r2, [pc, #76]	; (8002acc <menu+0x1a28>)
 8002a80:	2101      	movs	r1, #1
 8002a82:	2002      	movs	r0, #2
 8002a84:	f005 f8be 	bl	8007c04 <lcd_print>
 8002a88:	e038      	b.n	8002afc <menu+0x1a58>
 8002a8a:	bf00      	nop
 8002a8c:	2000022b 	.word	0x2000022b
 8002a90:	0800d434 	.word	0x0800d434
 8002a94:	40010800 	.word	0x40010800
 8002a98:	2000024f 	.word	0x2000024f
 8002a9c:	20000118 	.word	0x20000118
 8002aa0:	2000024c 	.word	0x2000024c
 8002aa4:	20000220 	.word	0x20000220
 8002aa8:	20000241 	.word	0x20000241
 8002aac:	0800d504 	.word	0x0800d504
 8002ab0:	0800d518 	.word	0x0800d518
 8002ab4:	2000022d 	.word	0x2000022d
 8002ab8:	0800d52c 	.word	0x0800d52c
 8002abc:	0800d53c 	.word	0x0800d53c
 8002ac0:	0800d54c 	.word	0x0800d54c
 8002ac4:	0800d55c 	.word	0x0800d55c
 8002ac8:	0800d56c 	.word	0x0800d56c
 8002acc:	0800d580 	.word	0x0800d580
			}
		} else if(kapiTablaAcKonum == 3) {
 8002ad0:	4b9b      	ldr	r3, [pc, #620]	; (8002d40 <menu+0x1c9c>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d111      	bne.n	8002afc <menu+0x1a58>
			if(dilSecim == 0) {
 8002ad8:	4b9a      	ldr	r3, [pc, #616]	; (8002d44 <menu+0x1ca0>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d104      	bne.n	8002aea <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002ae0:	4a99      	ldr	r2, [pc, #612]	; (8002d48 <menu+0x1ca4>)
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	f005 f88d 	bl	8007c04 <lcd_print>
			}
			if(dilSecim == 1) {
 8002aea:	4b96      	ldr	r3, [pc, #600]	; (8002d44 <menu+0x1ca0>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d104      	bne.n	8002afc <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002af2:	4a96      	ldr	r2, [pc, #600]	; (8002d4c <menu+0x1ca8>)
 8002af4:	2101      	movs	r1, #1
 8002af6:	2002      	movs	r0, #2
 8002af8:	f005 f884 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002afc:	2102      	movs	r1, #2
 8002afe:	4894      	ldr	r0, [pc, #592]	; (8002d50 <menu+0x1cac>)
 8002b00:	f006 fba6 	bl	8009250 <HAL_GPIO_ReadPin>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d115      	bne.n	8002b36 <menu+0x1a92>
 8002b0a:	4b92      	ldr	r3, [pc, #584]	; (8002d54 <menu+0x1cb0>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	f083 0301 	eor.w	r3, r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00e      	beq.n	8002b36 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002b18:	4b89      	ldr	r3, [pc, #548]	; (8002d40 <menu+0x1c9c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	4b87      	ldr	r3, [pc, #540]	; (8002d40 <menu+0x1c9c>)
 8002b22:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002b24:	4b86      	ldr	r3, [pc, #536]	; (8002d40 <menu+0x1c9c>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d902      	bls.n	8002b32 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002b2c:	4b84      	ldr	r3, [pc, #528]	; (8002d40 <menu+0x1c9c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b32:	f001 fe8d 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b36:	2104      	movs	r1, #4
 8002b38:	4885      	ldr	r0, [pc, #532]	; (8002d50 <menu+0x1cac>)
 8002b3a:	f006 fb89 	bl	8009250 <HAL_GPIO_ReadPin>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d115      	bne.n	8002b70 <menu+0x1acc>
 8002b44:	4b83      	ldr	r3, [pc, #524]	; (8002d54 <menu+0x1cb0>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	f083 0301 	eor.w	r3, r3, #1
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00e      	beq.n	8002b70 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002b52:	4b7b      	ldr	r3, [pc, #492]	; (8002d40 <menu+0x1c9c>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4b79      	ldr	r3, [pc, #484]	; (8002d40 <menu+0x1c9c>)
 8002b5c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002b5e:	4b78      	ldr	r3, [pc, #480]	; (8002d40 <menu+0x1c9c>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d902      	bls.n	8002b6c <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002b66:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <menu+0x1c9c>)
 8002b68:	2202      	movs	r2, #2
 8002b6a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b6c:	f001 fe70 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b70:	2108      	movs	r1, #8
 8002b72:	4877      	ldr	r0, [pc, #476]	; (8002d50 <menu+0x1cac>)
 8002b74:	f006 fb6c 	bl	8009250 <HAL_GPIO_ReadPin>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d11d      	bne.n	8002bba <menu+0x1b16>
 8002b7e:	4b75      	ldr	r3, [pc, #468]	; (8002d54 <menu+0x1cb0>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	f083 0301 	eor.w	r3, r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d016      	beq.n	8002bba <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002b8c:	4b6c      	ldr	r3, [pc, #432]	; (8002d40 <menu+0x1c9c>)
 8002b8e:	781a      	ldrb	r2, [r3, #0]
 8002b90:	4b71      	ldr	r3, [pc, #452]	; (8002d58 <menu+0x1cb4>)
 8002b92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002b96:	4b6a      	ldr	r3, [pc, #424]	; (8002d40 <menu+0x1c9c>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <menu+0x1b02>
 8002b9e:	4b68      	ldr	r3, [pc, #416]	; (8002d40 <menu+0x1c9c>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d106      	bne.n	8002bb4 <menu+0x1b10>
				altLimit = 1;
 8002ba6:	4b6d      	ldr	r3, [pc, #436]	; (8002d5c <menu+0x1cb8>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002bac:	4b6b      	ldr	r3, [pc, #428]	; (8002d5c <menu+0x1cb8>)
 8002bae:	781a      	ldrb	r2, [r3, #0]
 8002bb0:	4b69      	ldr	r3, [pc, #420]	; (8002d58 <menu+0x1cb4>)
 8002bb2:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002bb4:	4b6a      	ldr	r3, [pc, #424]	; (8002d60 <menu+0x1cbc>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002bba:	4b6a      	ldr	r3, [pc, #424]	; (8002d64 <menu+0x1cc0>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	d17f      	bne.n	8002cc2 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002bc2:	4b60      	ldr	r3, [pc, #384]	; (8002d44 <menu+0x1ca0>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002bca:	4a67      	ldr	r2, [pc, #412]	; (8002d68 <menu+0x1cc4>)
 8002bcc:	2101      	movs	r1, #1
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f005 f818 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002bd4:	4a65      	ldr	r2, [pc, #404]	; (8002d6c <menu+0x1cc8>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	2002      	movs	r0, #2
 8002bda:	f005 f813 	bl	8007c04 <lcd_print>
 8002bde:	e00d      	b.n	8002bfc <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002be0:	4b58      	ldr	r3, [pc, #352]	; (8002d44 <menu+0x1ca0>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d109      	bne.n	8002bfc <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002be8:	4a61      	ldr	r2, [pc, #388]	; (8002d70 <menu+0x1ccc>)
 8002bea:	2101      	movs	r1, #1
 8002bec:	2001      	movs	r0, #1
 8002bee:	f005 f809 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002bf2:	4a60      	ldr	r2, [pc, #384]	; (8002d74 <menu+0x1cd0>)
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	2002      	movs	r0, #2
 8002bf8:	f005 f804 	bl	8007c04 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002bfc:	4b5e      	ldr	r3, [pc, #376]	; (8002d78 <menu+0x1cd4>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	220a      	movs	r2, #10
 8002c02:	495e      	ldr	r1, [pc, #376]	; (8002d7c <menu+0x1cd8>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	f009 fb4f 	bl	800c2a8 <itoa>
		lcd_print(2,16,snum);
 8002c0a:	4a5c      	ldr	r2, [pc, #368]	; (8002d7c <menu+0x1cd8>)
 8002c0c:	2110      	movs	r1, #16
 8002c0e:	2002      	movs	r0, #2
 8002c10:	f004 fff8 	bl	8007c04 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002c14:	2102      	movs	r1, #2
 8002c16:	484e      	ldr	r0, [pc, #312]	; (8002d50 <menu+0x1cac>)
 8002c18:	f006 fb1a 	bl	8009250 <HAL_GPIO_ReadPin>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d119      	bne.n	8002c56 <menu+0x1bb2>
 8002c22:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <menu+0x1cb0>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	f083 0301 	eor.w	r3, r3, #1
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d012      	beq.n	8002c56 <menu+0x1bb2>
 8002c30:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <menu+0x1cdc>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10e      	bne.n	8002c56 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002c38:	4b4f      	ldr	r3, [pc, #316]	; (8002d78 <menu+0x1cd4>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	4b4d      	ldr	r3, [pc, #308]	; (8002d78 <menu+0x1cd4>)
 8002c42:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002c44:	4b4c      	ldr	r3, [pc, #304]	; (8002d78 <menu+0x1cd4>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d902      	bls.n	8002c52 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002c4c:	4b4a      	ldr	r3, [pc, #296]	; (8002d78 <menu+0x1cd4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c52:	f001 fdfd 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002c56:	2104      	movs	r1, #4
 8002c58:	483d      	ldr	r0, [pc, #244]	; (8002d50 <menu+0x1cac>)
 8002c5a:	f006 faf9 	bl	8009250 <HAL_GPIO_ReadPin>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d119      	bne.n	8002c98 <menu+0x1bf4>
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <menu+0x1cb0>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	f083 0301 	eor.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d012      	beq.n	8002c98 <menu+0x1bf4>
 8002c72:	4b43      	ldr	r3, [pc, #268]	; (8002d80 <menu+0x1cdc>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10e      	bne.n	8002c98 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002c7a:	4b3f      	ldr	r3, [pc, #252]	; (8002d78 <menu+0x1cd4>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	4b3d      	ldr	r3, [pc, #244]	; (8002d78 <menu+0x1cd4>)
 8002c84:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002c86:	4b3c      	ldr	r3, [pc, #240]	; (8002d78 <menu+0x1cd4>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b06      	cmp	r3, #6
 8002c8c:	d902      	bls.n	8002c94 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002c8e:	4b3a      	ldr	r3, [pc, #232]	; (8002d78 <menu+0x1cd4>)
 8002c90:	2205      	movs	r2, #5
 8002c92:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002c94:	f001 fddc 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c98:	2108      	movs	r1, #8
 8002c9a:	482d      	ldr	r0, [pc, #180]	; (8002d50 <menu+0x1cac>)
 8002c9c:	f006 fad8 	bl	8009250 <HAL_GPIO_ReadPin>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d10d      	bne.n	8002cc2 <menu+0x1c1e>
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <menu+0x1cb0>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	f083 0301 	eor.w	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d006      	beq.n	8002cc2 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002cb4:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <menu+0x1cd4>)
 8002cb6:	781a      	ldrb	r2, [r3, #0]
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <menu+0x1cb4>)
 8002cba:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002cbc:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <menu+0x1cbc>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002cc2:	4b28      	ldr	r3, [pc, #160]	; (8002d64 <menu+0x1cc0>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	f040 80bc 	bne.w	8002e44 <menu+0x1da0>
		if(dilSecim == 0) {
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <menu+0x1ca0>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d105      	bne.n	8002ce0 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002cd4:	4a2b      	ldr	r2, [pc, #172]	; (8002d84 <menu+0x1ce0>)
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2001      	movs	r0, #1
 8002cda:	f004 ff93 	bl	8007c04 <lcd_print>
 8002cde:	e008      	b.n	8002cf2 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <menu+0x1ca0>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d104      	bne.n	8002cf2 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002ce8:	4a27      	ldr	r2, [pc, #156]	; (8002d88 <menu+0x1ce4>)
 8002cea:	2101      	movs	r1, #1
 8002cec:	2001      	movs	r0, #1
 8002cee:	f004 ff89 	bl	8007c04 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002cf2:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <menu+0x1ce8>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d113      	bne.n	8002d22 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <menu+0x1ca0>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d105      	bne.n	8002d0e <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002d02:	4a11      	ldr	r2, [pc, #68]	; (8002d48 <menu+0x1ca4>)
 8002d04:	2101      	movs	r1, #1
 8002d06:	2002      	movs	r0, #2
 8002d08:	f004 ff7c 	bl	8007c04 <lcd_print>
 8002d0c:	e04b      	b.n	8002da6 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <menu+0x1ca0>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d147      	bne.n	8002da6 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002d16:	4a0d      	ldr	r2, [pc, #52]	; (8002d4c <menu+0x1ca8>)
 8002d18:	2101      	movs	r1, #1
 8002d1a:	2002      	movs	r0, #2
 8002d1c:	f004 ff72 	bl	8007c04 <lcd_print>
 8002d20:	e041      	b.n	8002da6 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002d22:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <menu+0x1ce8>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d13d      	bne.n	8002da6 <menu+0x1d02>
			if(dilSecim == 0) {
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <menu+0x1ca0>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d130      	bne.n	8002d94 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002d32:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <menu+0x1cec>)
 8002d34:	2101      	movs	r1, #1
 8002d36:	2002      	movs	r0, #2
 8002d38:	f004 ff64 	bl	8007c04 <lcd_print>
 8002d3c:	e033      	b.n	8002da6 <menu+0x1d02>
 8002d3e:	bf00      	nop
 8002d40:	2000022d 	.word	0x2000022d
 8002d44:	20000241 	.word	0x20000241
 8002d48:	0800d1f4 	.word	0x0800d1f4
 8002d4c:	0800d208 	.word	0x0800d208
 8002d50:	40010800 	.word	0x40010800
 8002d54:	2000024f 	.word	0x2000024f
 8002d58:	20000118 	.word	0x20000118
 8002d5c:	20000226 	.word	0x20000226
 8002d60:	2000024c 	.word	0x2000024c
 8002d64:	20000220 	.word	0x20000220
 8002d68:	0800d594 	.word	0x0800d594
 8002d6c:	0800d458 	.word	0x0800d458
 8002d70:	0800d5a8 	.word	0x0800d5a8
 8002d74:	0800d47c 	.word	0x0800d47c
 8002d78:	2000023b 	.word	0x2000023b
 8002d7c:	20000188 	.word	0x20000188
 8002d80:	2000022b 	.word	0x2000022b
 8002d84:	0800d5bc 	.word	0x0800d5bc
 8002d88:	0800d5d0 	.word	0x0800d5d0
 8002d8c:	2000022e 	.word	0x2000022e
 8002d90:	0800d254 	.word	0x0800d254
			} else if(dilSecim == 1) {
 8002d94:	4b99      	ldr	r3, [pc, #612]	; (8002ffc <menu+0x1f58>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d104      	bne.n	8002da6 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002d9c:	4a98      	ldr	r2, [pc, #608]	; (8003000 <menu+0x1f5c>)
 8002d9e:	2101      	movs	r1, #1
 8002da0:	2002      	movs	r0, #2
 8002da2:	f004 ff2f 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002da6:	2102      	movs	r1, #2
 8002da8:	4896      	ldr	r0, [pc, #600]	; (8003004 <menu+0x1f60>)
 8002daa:	f006 fa51 	bl	8009250 <HAL_GPIO_ReadPin>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d115      	bne.n	8002de0 <menu+0x1d3c>
 8002db4:	4b94      	ldr	r3, [pc, #592]	; (8003008 <menu+0x1f64>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	f083 0301 	eor.w	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00e      	beq.n	8002de0 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002dc2:	4b92      	ldr	r3, [pc, #584]	; (800300c <menu+0x1f68>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4b90      	ldr	r3, [pc, #576]	; (800300c <menu+0x1f68>)
 8002dcc:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002dce:	4b8f      	ldr	r3, [pc, #572]	; (800300c <menu+0x1f68>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d902      	bls.n	8002ddc <menu+0x1d38>
				yukariYavasLimit = 0;
 8002dd6:	4b8d      	ldr	r3, [pc, #564]	; (800300c <menu+0x1f68>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ddc:	f001 fd38 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002de0:	2104      	movs	r1, #4
 8002de2:	4888      	ldr	r0, [pc, #544]	; (8003004 <menu+0x1f60>)
 8002de4:	f006 fa34 	bl	8009250 <HAL_GPIO_ReadPin>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d115      	bne.n	8002e1a <menu+0x1d76>
 8002dee:	4b86      	ldr	r3, [pc, #536]	; (8003008 <menu+0x1f64>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	f083 0301 	eor.w	r3, r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00e      	beq.n	8002e1a <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002dfc:	4b83      	ldr	r3, [pc, #524]	; (800300c <menu+0x1f68>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	4b81      	ldr	r3, [pc, #516]	; (800300c <menu+0x1f68>)
 8002e06:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002e08:	4b80      	ldr	r3, [pc, #512]	; (800300c <menu+0x1f68>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002e10:	4b7e      	ldr	r3, [pc, #504]	; (800300c <menu+0x1f68>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e16:	f001 fd1b 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e1a:	2108      	movs	r1, #8
 8002e1c:	4879      	ldr	r0, [pc, #484]	; (8003004 <menu+0x1f60>)
 8002e1e:	f006 fa17 	bl	8009250 <HAL_GPIO_ReadPin>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d10d      	bne.n	8002e44 <menu+0x1da0>
 8002e28:	4b77      	ldr	r3, [pc, #476]	; (8003008 <menu+0x1f64>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	f083 0301 	eor.w	r3, r3, #1
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002e36:	4b75      	ldr	r3, [pc, #468]	; (800300c <menu+0x1f68>)
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	4b75      	ldr	r3, [pc, #468]	; (8003010 <menu+0x1f6c>)
 8002e3c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002e3e:	4b75      	ldr	r3, [pc, #468]	; (8003014 <menu+0x1f70>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002e44:	4b74      	ldr	r3, [pc, #464]	; (8003018 <menu+0x1f74>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b11      	cmp	r3, #17
 8002e4a:	f040 80c3 	bne.w	8002fd4 <menu+0x1f30>
		if(dilSecim == 0) {
 8002e4e:	4b6b      	ldr	r3, [pc, #428]	; (8002ffc <menu+0x1f58>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002e56:	4a71      	ldr	r2, [pc, #452]	; (800301c <menu+0x1f78>)
 8002e58:	2101      	movs	r1, #1
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f004 fed2 	bl	8007c04 <lcd_print>
 8002e60:	e008      	b.n	8002e74 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002e62:	4b66      	ldr	r3, [pc, #408]	; (8002ffc <menu+0x1f58>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d104      	bne.n	8002e74 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002e6a:	4a6d      	ldr	r2, [pc, #436]	; (8003020 <menu+0x1f7c>)
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f004 fec8 	bl	8007c04 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002e74:	4b6b      	ldr	r3, [pc, #428]	; (8003024 <menu+0x1f80>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d113      	bne.n	8002ea4 <menu+0x1e00>
			if(dilSecim == 0){
 8002e7c:	4b5f      	ldr	r3, [pc, #380]	; (8002ffc <menu+0x1f58>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d105      	bne.n	8002e90 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002e84:	4a68      	ldr	r2, [pc, #416]	; (8003028 <menu+0x1f84>)
 8002e86:	2101      	movs	r1, #1
 8002e88:	2002      	movs	r0, #2
 8002e8a:	f004 febb 	bl	8007c04 <lcd_print>
 8002e8e:	e038      	b.n	8002f02 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002e90:	4b5a      	ldr	r3, [pc, #360]	; (8002ffc <menu+0x1f58>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d134      	bne.n	8002f02 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002e98:	4a64      	ldr	r2, [pc, #400]	; (800302c <menu+0x1f88>)
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	f004 feb1 	bl	8007c04 <lcd_print>
 8002ea2:	e02e      	b.n	8002f02 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002ea4:	4b5f      	ldr	r3, [pc, #380]	; (8003024 <menu+0x1f80>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d113      	bne.n	8002ed4 <menu+0x1e30>
			if(dilSecim == 0){
 8002eac:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <menu+0x1f58>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002eb4:	4a5e      	ldr	r2, [pc, #376]	; (8003030 <menu+0x1f8c>)
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	2002      	movs	r0, #2
 8002eba:	f004 fea3 	bl	8007c04 <lcd_print>
 8002ebe:	e020      	b.n	8002f02 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002ec0:	4b4e      	ldr	r3, [pc, #312]	; (8002ffc <menu+0x1f58>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d11c      	bne.n	8002f02 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002ec8:	4a5a      	ldr	r2, [pc, #360]	; (8003034 <menu+0x1f90>)
 8002eca:	2101      	movs	r1, #1
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f004 fe99 	bl	8007c04 <lcd_print>
 8002ed2:	e016      	b.n	8002f02 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <menu+0x1f80>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d112      	bne.n	8002f02 <menu+0x1e5e>
			if(dilSecim == 0) {
 8002edc:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <menu+0x1f58>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002ee4:	4a54      	ldr	r2, [pc, #336]	; (8003038 <menu+0x1f94>)
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	2002      	movs	r0, #2
 8002eea:	f004 fe8b 	bl	8007c04 <lcd_print>
 8002eee:	e008      	b.n	8002f02 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002ef0:	4b42      	ldr	r3, [pc, #264]	; (8002ffc <menu+0x1f58>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d104      	bne.n	8002f02 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002ef8:	4a50      	ldr	r2, [pc, #320]	; (800303c <menu+0x1f98>)
 8002efa:	2101      	movs	r1, #1
 8002efc:	2002      	movs	r0, #2
 8002efe:	f004 fe81 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f02:	2102      	movs	r1, #2
 8002f04:	483f      	ldr	r0, [pc, #252]	; (8003004 <menu+0x1f60>)
 8002f06:	f006 f9a3 	bl	8009250 <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d115      	bne.n	8002f3c <menu+0x1e98>
 8002f10:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <menu+0x1f64>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f083 0301 	eor.w	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00e      	beq.n	8002f3c <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002f1e:	4b41      	ldr	r3, [pc, #260]	; (8003024 <menu+0x1f80>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <menu+0x1f80>)
 8002f28:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002f2a:	4b3e      	ldr	r3, [pc, #248]	; (8003024 <menu+0x1f80>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8002f32:	4b3c      	ldr	r3, [pc, #240]	; (8003024 <menu+0x1f80>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f38:	f001 fc8a 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	4831      	ldr	r0, [pc, #196]	; (8003004 <menu+0x1f60>)
 8002f40:	f006 f986 	bl	8009250 <HAL_GPIO_ReadPin>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d115      	bne.n	8002f76 <menu+0x1ed2>
 8002f4a:	4b2f      	ldr	r3, [pc, #188]	; (8003008 <menu+0x1f64>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	f083 0301 	eor.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00e      	beq.n	8002f76 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002f58:	4b32      	ldr	r3, [pc, #200]	; (8003024 <menu+0x1f80>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	4b30      	ldr	r3, [pc, #192]	; (8003024 <menu+0x1f80>)
 8002f62:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002f64:	4b2f      	ldr	r3, [pc, #188]	; (8003024 <menu+0x1f80>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d902      	bls.n	8002f72 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8002f6c:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <menu+0x1f80>)
 8002f6e:	2202      	movs	r2, #2
 8002f70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f72:	f001 fc6d 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f76:	2108      	movs	r1, #8
 8002f78:	4822      	ldr	r0, [pc, #136]	; (8003004 <menu+0x1f60>)
 8002f7a:	f006 f969 	bl	8009250 <HAL_GPIO_ReadPin>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d127      	bne.n	8002fd4 <menu+0x1f30>
 8002f84:	4b20      	ldr	r3, [pc, #128]	; (8003008 <menu+0x1f64>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	f083 0301 	eor.w	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d020      	beq.n	8002fd4 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <menu+0x1f80>)
 8002f94:	781a      	ldrb	r2, [r3, #0]
 8002f96:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <menu+0x1f6c>)
 8002f98:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002f9a:	4b22      	ldr	r3, [pc, #136]	; (8003024 <menu+0x1f80>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d003      	beq.n	8002faa <menu+0x1f06>
 8002fa2:	4b20      	ldr	r3, [pc, #128]	; (8003024 <menu+0x1f80>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d106      	bne.n	8002fb8 <menu+0x1f14>
				calismaSekli = 0;
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <menu+0x1f9c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002fb0:	4b23      	ldr	r3, [pc, #140]	; (8003040 <menu+0x1f9c>)
 8002fb2:	781a      	ldrb	r2, [r3, #0]
 8002fb4:	4b16      	ldr	r3, [pc, #88]	; (8003010 <menu+0x1f6c>)
 8002fb6:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <menu+0x1f80>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d106      	bne.n	8002fce <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8002fc0:	4b20      	ldr	r3, [pc, #128]	; (8003044 <menu+0x1fa0>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <menu+0x1fa0>)
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	4b11      	ldr	r3, [pc, #68]	; (8003010 <menu+0x1f6c>)
 8002fcc:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <menu+0x1f70>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002fd4:	4b10      	ldr	r3, [pc, #64]	; (8003018 <menu+0x1f74>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b12      	cmp	r3, #18
 8002fda:	f040 80d5 	bne.w	8003188 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8002fde:	4b11      	ldr	r3, [pc, #68]	; (8003024 <menu+0x1f80>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d13c      	bne.n	8003060 <menu+0x1fbc>
			if(dilSecim == 0) {
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <menu+0x1f58>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d12e      	bne.n	800304c <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8002fee:	4a16      	ldr	r2, [pc, #88]	; (8003048 <menu+0x1fa4>)
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	f004 fe06 	bl	8007c04 <lcd_print>
 8002ff8:	e048      	b.n	800308c <menu+0x1fe8>
 8002ffa:	bf00      	nop
 8002ffc:	20000241 	.word	0x20000241
 8003000:	0800d268 	.word	0x0800d268
 8003004:	40010800 	.word	0x40010800
 8003008:	2000024f 	.word	0x2000024f
 800300c:	2000022e 	.word	0x2000022e
 8003010:	20000118 	.word	0x20000118
 8003014:	2000024c 	.word	0x2000024c
 8003018:	20000220 	.word	0x20000220
 800301c:	0800d5e4 	.word	0x0800d5e4
 8003020:	0800d5f8 	.word	0x0800d5f8
 8003024:	2000022f 	.word	0x2000022f
 8003028:	0800d60c 	.word	0x0800d60c
 800302c:	0800d61c 	.word	0x0800d61c
 8003030:	0800d62c 	.word	0x0800d62c
 8003034:	0800d63c 	.word	0x0800d63c
 8003038:	0800d1f4 	.word	0x0800d1f4
 800303c:	0800d208 	.word	0x0800d208
 8003040:	20000221 	.word	0x20000221
 8003044:	20000232 	.word	0x20000232
 8003048:	0800d64c 	.word	0x0800d64c
			} else if(dilSecim == 1) {
 800304c:	4b7b      	ldr	r3, [pc, #492]	; (800323c <menu+0x2198>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d11b      	bne.n	800308c <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003054:	4a7a      	ldr	r2, [pc, #488]	; (8003240 <menu+0x219c>)
 8003056:	2101      	movs	r1, #1
 8003058:	2001      	movs	r0, #1
 800305a:	f004 fdd3 	bl	8007c04 <lcd_print>
 800305e:	e015      	b.n	800308c <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003060:	4b78      	ldr	r3, [pc, #480]	; (8003244 <menu+0x21a0>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d111      	bne.n	800308c <menu+0x1fe8>
			if(dilSecim == 0){
 8003068:	4b74      	ldr	r3, [pc, #464]	; (800323c <menu+0x2198>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003070:	4a75      	ldr	r2, [pc, #468]	; (8003248 <menu+0x21a4>)
 8003072:	2101      	movs	r1, #1
 8003074:	2001      	movs	r0, #1
 8003076:	f004 fdc5 	bl	8007c04 <lcd_print>
			}
			if(dilSecim == 1){
 800307a:	4b70      	ldr	r3, [pc, #448]	; (800323c <menu+0x2198>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d104      	bne.n	800308c <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003082:	4a72      	ldr	r2, [pc, #456]	; (800324c <menu+0x21a8>)
 8003084:	2101      	movs	r1, #1
 8003086:	2001      	movs	r0, #1
 8003088:	f004 fdbc 	bl	8007c04 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 800308c:	4b70      	ldr	r3, [pc, #448]	; (8003250 <menu+0x21ac>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d113      	bne.n	80030bc <menu+0x2018>
			if(dilSecim == 0) {
 8003094:	4b69      	ldr	r3, [pc, #420]	; (800323c <menu+0x2198>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d105      	bne.n	80030a8 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 800309c:	4a6d      	ldr	r2, [pc, #436]	; (8003254 <menu+0x21b0>)
 800309e:	2101      	movs	r1, #1
 80030a0:	2002      	movs	r0, #2
 80030a2:	f004 fdaf 	bl	8007c04 <lcd_print>
 80030a6:	e020      	b.n	80030ea <menu+0x2046>
			} else if(dilSecim == 1){
 80030a8:	4b64      	ldr	r3, [pc, #400]	; (800323c <menu+0x2198>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d11c      	bne.n	80030ea <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80030b0:	4a69      	ldr	r2, [pc, #420]	; (8003258 <menu+0x21b4>)
 80030b2:	2101      	movs	r1, #1
 80030b4:	2002      	movs	r0, #2
 80030b6:	f004 fda5 	bl	8007c04 <lcd_print>
 80030ba:	e016      	b.n	80030ea <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80030bc:	4b64      	ldr	r3, [pc, #400]	; (8003250 <menu+0x21ac>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d112      	bne.n	80030ea <menu+0x2046>
			if(dilSecim == 0){
 80030c4:	4b5d      	ldr	r3, [pc, #372]	; (800323c <menu+0x2198>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80030cc:	4a63      	ldr	r2, [pc, #396]	; (800325c <menu+0x21b8>)
 80030ce:	2101      	movs	r1, #1
 80030d0:	2002      	movs	r0, #2
 80030d2:	f004 fd97 	bl	8007c04 <lcd_print>
 80030d6:	e008      	b.n	80030ea <menu+0x2046>
			} else if(dilSecim == 1){
 80030d8:	4b58      	ldr	r3, [pc, #352]	; (800323c <menu+0x2198>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d104      	bne.n	80030ea <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80030e0:	4a5f      	ldr	r2, [pc, #380]	; (8003260 <menu+0x21bc>)
 80030e2:	2101      	movs	r1, #1
 80030e4:	2002      	movs	r0, #2
 80030e6:	f004 fd8d 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ea:	2102      	movs	r1, #2
 80030ec:	485d      	ldr	r0, [pc, #372]	; (8003264 <menu+0x21c0>)
 80030ee:	f006 f8af 	bl	8009250 <HAL_GPIO_ReadPin>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d115      	bne.n	8003124 <menu+0x2080>
 80030f8:	4b5b      	ldr	r3, [pc, #364]	; (8003268 <menu+0x21c4>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	f083 0301 	eor.w	r3, r3, #1
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00e      	beq.n	8003124 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003106:	4b52      	ldr	r3, [pc, #328]	; (8003250 <menu+0x21ac>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	b2da      	uxtb	r2, r3
 800310e:	4b50      	ldr	r3, [pc, #320]	; (8003250 <menu+0x21ac>)
 8003110:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003112:	4b4f      	ldr	r3, [pc, #316]	; (8003250 <menu+0x21ac>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d902      	bls.n	8003120 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800311a:	4b4d      	ldr	r3, [pc, #308]	; (8003250 <menu+0x21ac>)
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003120:	f001 fb96 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003124:	2104      	movs	r1, #4
 8003126:	484f      	ldr	r0, [pc, #316]	; (8003264 <menu+0x21c0>)
 8003128:	f006 f892 	bl	8009250 <HAL_GPIO_ReadPin>
 800312c:	4603      	mov	r3, r0
 800312e:	2b01      	cmp	r3, #1
 8003130:	d115      	bne.n	800315e <menu+0x20ba>
 8003132:	4b4d      	ldr	r3, [pc, #308]	; (8003268 <menu+0x21c4>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	f083 0301 	eor.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00e      	beq.n	800315e <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003140:	4b43      	ldr	r3, [pc, #268]	; (8003250 <menu+0x21ac>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	3b01      	subs	r3, #1
 8003146:	b2da      	uxtb	r2, r3
 8003148:	4b41      	ldr	r3, [pc, #260]	; (8003250 <menu+0x21ac>)
 800314a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 800314c:	4b40      	ldr	r3, [pc, #256]	; (8003250 <menu+0x21ac>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003154:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <menu+0x21ac>)
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800315a:	f001 fb79 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800315e:	2108      	movs	r1, #8
 8003160:	4840      	ldr	r0, [pc, #256]	; (8003264 <menu+0x21c0>)
 8003162:	f006 f875 	bl	8009250 <HAL_GPIO_ReadPin>
 8003166:	4603      	mov	r3, r0
 8003168:	2b01      	cmp	r3, #1
 800316a:	d10d      	bne.n	8003188 <menu+0x20e4>
 800316c:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <menu+0x21c4>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	f083 0301 	eor.w	r3, r3, #1
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d006      	beq.n	8003188 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800317a:	4b35      	ldr	r3, [pc, #212]	; (8003250 <menu+0x21ac>)
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	4b3b      	ldr	r3, [pc, #236]	; (800326c <menu+0x21c8>)
 8003180:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003182:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <menu+0x21cc>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003188:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <menu+0x21d0>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b13      	cmp	r3, #19
 800318e:	f040 80d5 	bne.w	800333c <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003192:	4b2c      	ldr	r3, [pc, #176]	; (8003244 <menu+0x21a0>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d113      	bne.n	80031c2 <menu+0x211e>
			if(dilSecim == 0) {
 800319a:	4b28      	ldr	r3, [pc, #160]	; (800323c <menu+0x2198>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80031a2:	4a35      	ldr	r2, [pc, #212]	; (8003278 <menu+0x21d4>)
 80031a4:	2101      	movs	r1, #1
 80031a6:	2001      	movs	r0, #1
 80031a8:	f004 fd2c 	bl	8007c04 <lcd_print>
 80031ac:	e01f      	b.n	80031ee <menu+0x214a>
			} else if(dilSecim == 1) {
 80031ae:	4b23      	ldr	r3, [pc, #140]	; (800323c <menu+0x2198>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d11b      	bne.n	80031ee <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80031b6:	4a31      	ldr	r2, [pc, #196]	; (800327c <menu+0x21d8>)
 80031b8:	2101      	movs	r1, #1
 80031ba:	2001      	movs	r0, #1
 80031bc:	f004 fd22 	bl	8007c04 <lcd_print>
 80031c0:	e015      	b.n	80031ee <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <menu+0x21a0>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d111      	bne.n	80031ee <menu+0x214a>
			if(dilSecim == 0) {
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <menu+0x2198>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d104      	bne.n	80031dc <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80031d2:	4a2b      	ldr	r2, [pc, #172]	; (8003280 <menu+0x21dc>)
 80031d4:	2101      	movs	r1, #1
 80031d6:	2001      	movs	r0, #1
 80031d8:	f004 fd14 	bl	8007c04 <lcd_print>
			}
			if(dilSecim == 1) {
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <menu+0x2198>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d104      	bne.n	80031ee <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80031e4:	4a27      	ldr	r2, [pc, #156]	; (8003284 <menu+0x21e0>)
 80031e6:	2101      	movs	r1, #1
 80031e8:	2001      	movs	r0, #1
 80031ea:	f004 fd0b 	bl	8007c04 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80031ee:	4b26      	ldr	r3, [pc, #152]	; (8003288 <menu+0x21e4>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d113      	bne.n	800321e <menu+0x217a>
			if(dilSecim == 0) {
 80031f6:	4b11      	ldr	r3, [pc, #68]	; (800323c <menu+0x2198>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d105      	bne.n	800320a <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80031fe:	4a15      	ldr	r2, [pc, #84]	; (8003254 <menu+0x21b0>)
 8003200:	2101      	movs	r1, #1
 8003202:	2002      	movs	r0, #2
 8003204:	f004 fcfe 	bl	8007c04 <lcd_print>
 8003208:	e049      	b.n	800329e <menu+0x21fa>
			} else if(dilSecim == 1) {
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <menu+0x2198>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d145      	bne.n	800329e <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003212:	4a11      	ldr	r2, [pc, #68]	; (8003258 <menu+0x21b4>)
 8003214:	2101      	movs	r1, #1
 8003216:	2002      	movs	r0, #2
 8003218:	f004 fcf4 	bl	8007c04 <lcd_print>
 800321c:	e03f      	b.n	800329e <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800321e:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <menu+0x21e4>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d13b      	bne.n	800329e <menu+0x21fa>
			if(dilSecim == 0) {
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <menu+0x2198>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d12e      	bne.n	800328c <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800322e:	4a0b      	ldr	r2, [pc, #44]	; (800325c <menu+0x21b8>)
 8003230:	2101      	movs	r1, #1
 8003232:	2002      	movs	r0, #2
 8003234:	f004 fce6 	bl	8007c04 <lcd_print>
 8003238:	e031      	b.n	800329e <menu+0x21fa>
 800323a:	bf00      	nop
 800323c:	20000241 	.word	0x20000241
 8003240:	0800d660 	.word	0x0800d660
 8003244:	2000022f 	.word	0x2000022f
 8003248:	0800d670 	.word	0x0800d670
 800324c:	0800d684 	.word	0x0800d684
 8003250:	20000230 	.word	0x20000230
 8003254:	0800d1f4 	.word	0x0800d1f4
 8003258:	0800d208 	.word	0x0800d208
 800325c:	0800d254 	.word	0x0800d254
 8003260:	0800d268 	.word	0x0800d268
 8003264:	40010800 	.word	0x40010800
 8003268:	2000024f 	.word	0x2000024f
 800326c:	20000118 	.word	0x20000118
 8003270:	2000024c 	.word	0x2000024c
 8003274:	20000220 	.word	0x20000220
 8003278:	0800d698 	.word	0x0800d698
 800327c:	0800d6ac 	.word	0x0800d6ac
 8003280:	0800d6c0 	.word	0x0800d6c0
 8003284:	0800d6d4 	.word	0x0800d6d4
 8003288:	20000231 	.word	0x20000231
			} else if(dilSecim == 1) {
 800328c:	4b90      	ldr	r3, [pc, #576]	; (80034d0 <menu+0x242c>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d104      	bne.n	800329e <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003294:	4a8f      	ldr	r2, [pc, #572]	; (80034d4 <menu+0x2430>)
 8003296:	2101      	movs	r1, #1
 8003298:	2002      	movs	r0, #2
 800329a:	f004 fcb3 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800329e:	2102      	movs	r1, #2
 80032a0:	488d      	ldr	r0, [pc, #564]	; (80034d8 <menu+0x2434>)
 80032a2:	f005 ffd5 	bl	8009250 <HAL_GPIO_ReadPin>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d115      	bne.n	80032d8 <menu+0x2234>
 80032ac:	4b8b      	ldr	r3, [pc, #556]	; (80034dc <menu+0x2438>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	f083 0301 	eor.w	r3, r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00e      	beq.n	80032d8 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80032ba:	4b89      	ldr	r3, [pc, #548]	; (80034e0 <menu+0x243c>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	3301      	adds	r3, #1
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b87      	ldr	r3, [pc, #540]	; (80034e0 <menu+0x243c>)
 80032c4:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80032c6:	4b86      	ldr	r3, [pc, #536]	; (80034e0 <menu+0x243c>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d902      	bls.n	80032d4 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80032ce:	4b84      	ldr	r3, [pc, #528]	; (80034e0 <menu+0x243c>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032d4:	f001 fabc 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032d8:	2104      	movs	r1, #4
 80032da:	487f      	ldr	r0, [pc, #508]	; (80034d8 <menu+0x2434>)
 80032dc:	f005 ffb8 	bl	8009250 <HAL_GPIO_ReadPin>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d115      	bne.n	8003312 <menu+0x226e>
 80032e6:	4b7d      	ldr	r3, [pc, #500]	; (80034dc <menu+0x2438>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	f083 0301 	eor.w	r3, r3, #1
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00e      	beq.n	8003312 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80032f4:	4b7a      	ldr	r3, [pc, #488]	; (80034e0 <menu+0x243c>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	4b78      	ldr	r3, [pc, #480]	; (80034e0 <menu+0x243c>)
 80032fe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003300:	4b77      	ldr	r3, [pc, #476]	; (80034e0 <menu+0x243c>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003308:	4b75      	ldr	r3, [pc, #468]	; (80034e0 <menu+0x243c>)
 800330a:	2201      	movs	r2, #1
 800330c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800330e:	f001 fa9f 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003312:	2108      	movs	r1, #8
 8003314:	4870      	ldr	r0, [pc, #448]	; (80034d8 <menu+0x2434>)
 8003316:	f005 ff9b 	bl	8009250 <HAL_GPIO_ReadPin>
 800331a:	4603      	mov	r3, r0
 800331c:	2b01      	cmp	r3, #1
 800331e:	d10d      	bne.n	800333c <menu+0x2298>
 8003320:	4b6e      	ldr	r3, [pc, #440]	; (80034dc <menu+0x2438>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	f083 0301 	eor.w	r3, r3, #1
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800332e:	4b6c      	ldr	r3, [pc, #432]	; (80034e0 <menu+0x243c>)
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	4b6c      	ldr	r3, [pc, #432]	; (80034e4 <menu+0x2440>)
 8003334:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003336:	4b6c      	ldr	r3, [pc, #432]	; (80034e8 <menu+0x2444>)
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 800333c:	4b6b      	ldr	r3, [pc, #428]	; (80034ec <menu+0x2448>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b14      	cmp	r3, #20
 8003342:	f040 80b5 	bne.w	80034b0 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003346:	4b6a      	ldr	r3, [pc, #424]	; (80034f0 <menu+0x244c>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d113      	bne.n	8003376 <menu+0x22d2>
			if(dilSecim == 0) {
 800334e:	4b60      	ldr	r3, [pc, #384]	; (80034d0 <menu+0x242c>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003356:	4a67      	ldr	r2, [pc, #412]	; (80034f4 <menu+0x2450>)
 8003358:	2101      	movs	r1, #1
 800335a:	2001      	movs	r0, #1
 800335c:	f004 fc52 	bl	8007c04 <lcd_print>
 8003360:	e020      	b.n	80033a4 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003362:	4b5b      	ldr	r3, [pc, #364]	; (80034d0 <menu+0x242c>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d11c      	bne.n	80033a4 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800336a:	4a63      	ldr	r2, [pc, #396]	; (80034f8 <menu+0x2454>)
 800336c:	2101      	movs	r1, #1
 800336e:	2001      	movs	r0, #1
 8003370:	f004 fc48 	bl	8007c04 <lcd_print>
 8003374:	e016      	b.n	80033a4 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003376:	4b5e      	ldr	r3, [pc, #376]	; (80034f0 <menu+0x244c>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d112      	bne.n	80033a4 <menu+0x2300>
			if(dilSecim == 0) {
 800337e:	4b54      	ldr	r3, [pc, #336]	; (80034d0 <menu+0x242c>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003386:	4a5d      	ldr	r2, [pc, #372]	; (80034fc <menu+0x2458>)
 8003388:	2101      	movs	r1, #1
 800338a:	2001      	movs	r0, #1
 800338c:	f004 fc3a 	bl	8007c04 <lcd_print>
 8003390:	e008      	b.n	80033a4 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003392:	4b4f      	ldr	r3, [pc, #316]	; (80034d0 <menu+0x242c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d104      	bne.n	80033a4 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800339a:	4a59      	ldr	r2, [pc, #356]	; (8003500 <menu+0x245c>)
 800339c:	2101      	movs	r1, #1
 800339e:	2001      	movs	r0, #1
 80033a0:	f004 fc30 	bl	8007c04 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80033a4:	4b57      	ldr	r3, [pc, #348]	; (8003504 <menu+0x2460>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d113      	bne.n	80033d4 <menu+0x2330>
			if(dilSecim == 0) {
 80033ac:	4b48      	ldr	r3, [pc, #288]	; (80034d0 <menu+0x242c>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d105      	bne.n	80033c0 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80033b4:	4a54      	ldr	r2, [pc, #336]	; (8003508 <menu+0x2464>)
 80033b6:	2101      	movs	r1, #1
 80033b8:	2002      	movs	r0, #2
 80033ba:	f004 fc23 	bl	8007c04 <lcd_print>
 80033be:	e020      	b.n	8003402 <menu+0x235e>
			} else if(dilSecim == 1) {
 80033c0:	4b43      	ldr	r3, [pc, #268]	; (80034d0 <menu+0x242c>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d11c      	bne.n	8003402 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80033c8:	4a50      	ldr	r2, [pc, #320]	; (800350c <menu+0x2468>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	2002      	movs	r0, #2
 80033ce:	f004 fc19 	bl	8007c04 <lcd_print>
 80033d2:	e016      	b.n	8003402 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80033d4:	4b4b      	ldr	r3, [pc, #300]	; (8003504 <menu+0x2460>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d112      	bne.n	8003402 <menu+0x235e>
			if(dilSecim == 0) {
 80033dc:	4b3c      	ldr	r3, [pc, #240]	; (80034d0 <menu+0x242c>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d105      	bne.n	80033f0 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80033e4:	4a4a      	ldr	r2, [pc, #296]	; (8003510 <menu+0x246c>)
 80033e6:	2101      	movs	r1, #1
 80033e8:	2002      	movs	r0, #2
 80033ea:	f004 fc0b 	bl	8007c04 <lcd_print>
 80033ee:	e008      	b.n	8003402 <menu+0x235e>
			} else if(dilSecim == 1) {
 80033f0:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <menu+0x242c>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d104      	bne.n	8003402 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80033f8:	4a46      	ldr	r2, [pc, #280]	; (8003514 <menu+0x2470>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	2002      	movs	r0, #2
 80033fe:	f004 fc01 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003402:	2102      	movs	r1, #2
 8003404:	4834      	ldr	r0, [pc, #208]	; (80034d8 <menu+0x2434>)
 8003406:	f005 ff23 	bl	8009250 <HAL_GPIO_ReadPin>
 800340a:	4603      	mov	r3, r0
 800340c:	2b01      	cmp	r3, #1
 800340e:	d119      	bne.n	8003444 <menu+0x23a0>
 8003410:	4b32      	ldr	r3, [pc, #200]	; (80034dc <menu+0x2438>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	f083 0301 	eor.w	r3, r3, #1
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d012      	beq.n	8003444 <menu+0x23a0>
 800341e:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <menu+0x244c>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d10e      	bne.n	8003444 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003426:	4b37      	ldr	r3, [pc, #220]	; (8003504 <menu+0x2460>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	3301      	adds	r3, #1
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4b35      	ldr	r3, [pc, #212]	; (8003504 <menu+0x2460>)
 8003430:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003432:	4b34      	ldr	r3, [pc, #208]	; (8003504 <menu+0x2460>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d902      	bls.n	8003440 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800343a:	4b32      	ldr	r3, [pc, #200]	; (8003504 <menu+0x2460>)
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003440:	f001 fa06 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003444:	2104      	movs	r1, #4
 8003446:	4824      	ldr	r0, [pc, #144]	; (80034d8 <menu+0x2434>)
 8003448:	f005 ff02 	bl	8009250 <HAL_GPIO_ReadPin>
 800344c:	4603      	mov	r3, r0
 800344e:	2b01      	cmp	r3, #1
 8003450:	d119      	bne.n	8003486 <menu+0x23e2>
 8003452:	4b22      	ldr	r3, [pc, #136]	; (80034dc <menu+0x2438>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	f083 0301 	eor.w	r3, r3, #1
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d012      	beq.n	8003486 <menu+0x23e2>
 8003460:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <menu+0x244c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d10e      	bne.n	8003486 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003468:	4b26      	ldr	r3, [pc, #152]	; (8003504 <menu+0x2460>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	3b01      	subs	r3, #1
 800346e:	b2da      	uxtb	r2, r3
 8003470:	4b24      	ldr	r3, [pc, #144]	; (8003504 <menu+0x2460>)
 8003472:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003474:	4b23      	ldr	r3, [pc, #140]	; (8003504 <menu+0x2460>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 800347c:	4b21      	ldr	r3, [pc, #132]	; (8003504 <menu+0x2460>)
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003482:	f001 f9e5 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003486:	2108      	movs	r1, #8
 8003488:	4813      	ldr	r0, [pc, #76]	; (80034d8 <menu+0x2434>)
 800348a:	f005 fee1 	bl	8009250 <HAL_GPIO_ReadPin>
 800348e:	4603      	mov	r3, r0
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10d      	bne.n	80034b0 <menu+0x240c>
 8003494:	4b11      	ldr	r3, [pc, #68]	; (80034dc <menu+0x2438>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	f083 0301 	eor.w	r3, r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80034a2:	4b18      	ldr	r3, [pc, #96]	; (8003504 <menu+0x2460>)
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <menu+0x2440>)
 80034a8:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <menu+0x2444>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80034b0:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <menu+0x2448>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b15      	cmp	r3, #21
 80034b6:	f040 80c2 	bne.w	800363e <menu+0x259a>
		if(dilSecim == 0) {
 80034ba:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <menu+0x242c>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d12c      	bne.n	800351c <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80034c2:	4a15      	ldr	r2, [pc, #84]	; (8003518 <menu+0x2474>)
 80034c4:	2101      	movs	r1, #1
 80034c6:	2001      	movs	r0, #1
 80034c8:	f004 fb9c 	bl	8007c04 <lcd_print>
 80034cc:	e02f      	b.n	800352e <menu+0x248a>
 80034ce:	bf00      	nop
 80034d0:	20000241 	.word	0x20000241
 80034d4:	0800d268 	.word	0x0800d268
 80034d8:	40010800 	.word	0x40010800
 80034dc:	2000024f 	.word	0x2000024f
 80034e0:	20000231 	.word	0x20000231
 80034e4:	20000118 	.word	0x20000118
 80034e8:	2000024c 	.word	0x2000024c
 80034ec:	20000220 	.word	0x20000220
 80034f0:	2000022f 	.word	0x2000022f
 80034f4:	0800d6e8 	.word	0x0800d6e8
 80034f8:	0800d6fc 	.word	0x0800d6fc
 80034fc:	0800d710 	.word	0x0800d710
 8003500:	0800d724 	.word	0x0800d724
 8003504:	20000232 	.word	0x20000232
 8003508:	0800d738 	.word	0x0800d738
 800350c:	0800d74c 	.word	0x0800d74c
 8003510:	0800d75c 	.word	0x0800d75c
 8003514:	0800d770 	.word	0x0800d770
 8003518:	0800d780 	.word	0x0800d780
		} else if(dilSecim == 1) {
 800351c:	4b9c      	ldr	r3, [pc, #624]	; (8003790 <menu+0x26ec>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d104      	bne.n	800352e <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003524:	4a9b      	ldr	r2, [pc, #620]	; (8003794 <menu+0x26f0>)
 8003526:	2101      	movs	r1, #1
 8003528:	2001      	movs	r0, #1
 800352a:	f004 fb6b 	bl	8007c04 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800352e:	4b9a      	ldr	r3, [pc, #616]	; (8003798 <menu+0x26f4>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d112      	bne.n	800355c <menu+0x24b8>
			if(dilSecim == 0) {
 8003536:	4b96      	ldr	r3, [pc, #600]	; (8003790 <menu+0x26ec>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d104      	bne.n	8003548 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800353e:	4a97      	ldr	r2, [pc, #604]	; (800379c <menu+0x26f8>)
 8003540:	2101      	movs	r1, #1
 8003542:	2002      	movs	r0, #2
 8003544:	f004 fb5e 	bl	8007c04 <lcd_print>
			}
			if(dilSecim == 1) {
 8003548:	4b91      	ldr	r3, [pc, #580]	; (8003790 <menu+0x26ec>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d11c      	bne.n	800358a <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003550:	4a93      	ldr	r2, [pc, #588]	; (80037a0 <menu+0x26fc>)
 8003552:	2101      	movs	r1, #1
 8003554:	2002      	movs	r0, #2
 8003556:	f004 fb55 	bl	8007c04 <lcd_print>
 800355a:	e016      	b.n	800358a <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 800355c:	4b8e      	ldr	r3, [pc, #568]	; (8003798 <menu+0x26f4>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d112      	bne.n	800358a <menu+0x24e6>
			if(dilSecim == 0) {
 8003564:	4b8a      	ldr	r3, [pc, #552]	; (8003790 <menu+0x26ec>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d105      	bne.n	8003578 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 800356c:	4a8d      	ldr	r2, [pc, #564]	; (80037a4 <menu+0x2700>)
 800356e:	2101      	movs	r1, #1
 8003570:	2002      	movs	r0, #2
 8003572:	f004 fb47 	bl	8007c04 <lcd_print>
 8003576:	e008      	b.n	800358a <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003578:	4b85      	ldr	r3, [pc, #532]	; (8003790 <menu+0x26ec>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d104      	bne.n	800358a <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003580:	4a89      	ldr	r2, [pc, #548]	; (80037a8 <menu+0x2704>)
 8003582:	2101      	movs	r1, #1
 8003584:	2002      	movs	r0, #2
 8003586:	f004 fb3d 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800358a:	2102      	movs	r1, #2
 800358c:	4887      	ldr	r0, [pc, #540]	; (80037ac <menu+0x2708>)
 800358e:	f005 fe5f 	bl	8009250 <HAL_GPIO_ReadPin>
 8003592:	4603      	mov	r3, r0
 8003594:	2b01      	cmp	r3, #1
 8003596:	d115      	bne.n	80035c4 <menu+0x2520>
 8003598:	4b85      	ldr	r3, [pc, #532]	; (80037b0 <menu+0x270c>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	f083 0301 	eor.w	r3, r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00e      	beq.n	80035c4 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80035a6:	4b7c      	ldr	r3, [pc, #496]	; (8003798 <menu+0x26f4>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	3301      	adds	r3, #1
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	4b7a      	ldr	r3, [pc, #488]	; (8003798 <menu+0x26f4>)
 80035b0:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80035b2:	4b79      	ldr	r3, [pc, #484]	; (8003798 <menu+0x26f4>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d902      	bls.n	80035c0 <menu+0x251c>
				platformSilindirTipi = 0;
 80035ba:	4b77      	ldr	r3, [pc, #476]	; (8003798 <menu+0x26f4>)
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035c0:	f001 f946 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035c4:	2104      	movs	r1, #4
 80035c6:	4879      	ldr	r0, [pc, #484]	; (80037ac <menu+0x2708>)
 80035c8:	f005 fe42 	bl	8009250 <HAL_GPIO_ReadPin>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d115      	bne.n	80035fe <menu+0x255a>
 80035d2:	4b77      	ldr	r3, [pc, #476]	; (80037b0 <menu+0x270c>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	f083 0301 	eor.w	r3, r3, #1
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00e      	beq.n	80035fe <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80035e0:	4b6d      	ldr	r3, [pc, #436]	; (8003798 <menu+0x26f4>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	4b6b      	ldr	r3, [pc, #428]	; (8003798 <menu+0x26f4>)
 80035ea:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80035ec:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <menu+0x26f4>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <menu+0x2556>
		   		platformSilindirTipi = 1;
 80035f4:	4b68      	ldr	r3, [pc, #416]	; (8003798 <menu+0x26f4>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035fa:	f001 f929 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035fe:	2108      	movs	r1, #8
 8003600:	486a      	ldr	r0, [pc, #424]	; (80037ac <menu+0x2708>)
 8003602:	f005 fe25 	bl	8009250 <HAL_GPIO_ReadPin>
 8003606:	4603      	mov	r3, r0
 8003608:	2b01      	cmp	r3, #1
 800360a:	d118      	bne.n	800363e <menu+0x259a>
 800360c:	4b68      	ldr	r3, [pc, #416]	; (80037b0 <menu+0x270c>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	f083 0301 	eor.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d011      	beq.n	800363e <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 800361a:	4b5f      	ldr	r3, [pc, #380]	; (8003798 <menu+0x26f4>)
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	4b65      	ldr	r3, [pc, #404]	; (80037b4 <menu+0x2710>)
 8003620:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003622:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <menu+0x26f4>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d106      	bne.n	8003638 <menu+0x2594>
				altLimit = 1;
 800362a:	4b63      	ldr	r3, [pc, #396]	; (80037b8 <menu+0x2714>)
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003630:	4b61      	ldr	r3, [pc, #388]	; (80037b8 <menu+0x2714>)
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	4b5f      	ldr	r3, [pc, #380]	; (80037b4 <menu+0x2710>)
 8003636:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003638:	4b60      	ldr	r3, [pc, #384]	; (80037bc <menu+0x2718>)
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800363e:	4b60      	ldr	r3, [pc, #384]	; (80037c0 <menu+0x271c>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b16      	cmp	r3, #22
 8003644:	f040 8081 	bne.w	800374a <menu+0x26a6>
		if(dilSecim == 0) {
 8003648:	4b51      	ldr	r3, [pc, #324]	; (8003790 <menu+0x26ec>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003650:	4a5c      	ldr	r2, [pc, #368]	; (80037c4 <menu+0x2720>)
 8003652:	2101      	movs	r1, #1
 8003654:	2001      	movs	r0, #1
 8003656:	f004 fad5 	bl	8007c04 <lcd_print>
 800365a:	e008      	b.n	800366e <menu+0x25ca>
		} else if(dilSecim == 1) {
 800365c:	4b4c      	ldr	r3, [pc, #304]	; (8003790 <menu+0x26ec>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d104      	bne.n	800366e <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003664:	4a58      	ldr	r2, [pc, #352]	; (80037c8 <menu+0x2724>)
 8003666:	2101      	movs	r1, #1
 8003668:	2001      	movs	r0, #1
 800366a:	f004 facb 	bl	8007c04 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 800366e:	4b48      	ldr	r3, [pc, #288]	; (8003790 <menu+0x26ec>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d105      	bne.n	8003682 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003676:	4a55      	ldr	r2, [pc, #340]	; (80037cc <menu+0x2728>)
 8003678:	2101      	movs	r1, #1
 800367a:	2002      	movs	r0, #2
 800367c:	f004 fac2 	bl	8007c04 <lcd_print>
 8003680:	e008      	b.n	8003694 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003682:	4b43      	ldr	r3, [pc, #268]	; (8003790 <menu+0x26ec>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d104      	bne.n	8003694 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 800368a:	4a51      	ldr	r2, [pc, #324]	; (80037d0 <menu+0x272c>)
 800368c:	2101      	movs	r1, #1
 800368e:	2002      	movs	r0, #2
 8003690:	f004 fab8 	bl	8007c04 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003694:	4b4f      	ldr	r3, [pc, #316]	; (80037d4 <menu+0x2730>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	220a      	movs	r2, #10
 800369a:	494f      	ldr	r1, [pc, #316]	; (80037d8 <menu+0x2734>)
 800369c:	4618      	mov	r0, r3
 800369e:	f008 fe03 	bl	800c2a8 <itoa>
		lcd_print(2,16,snum);
 80036a2:	4a4d      	ldr	r2, [pc, #308]	; (80037d8 <menu+0x2734>)
 80036a4:	2110      	movs	r1, #16
 80036a6:	2002      	movs	r0, #2
 80036a8:	f004 faac 	bl	8007c04 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ac:	2102      	movs	r1, #2
 80036ae:	483f      	ldr	r0, [pc, #252]	; (80037ac <menu+0x2708>)
 80036b0:	f005 fdce 	bl	8009250 <HAL_GPIO_ReadPin>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d115      	bne.n	80036e6 <menu+0x2642>
 80036ba:	4b3d      	ldr	r3, [pc, #244]	; (80037b0 <menu+0x270c>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	f083 0301 	eor.w	r3, r3, #1
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00e      	beq.n	80036e6 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80036c8:	4b42      	ldr	r3, [pc, #264]	; (80037d4 <menu+0x2730>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	4b40      	ldr	r3, [pc, #256]	; (80037d4 <menu+0x2730>)
 80036d2:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80036d4:	4b3f      	ldr	r3, [pc, #252]	; (80037d4 <menu+0x2730>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d902      	bls.n	80036e2 <menu+0x263e>
				yukariValfTmr = 0;
 80036dc:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <menu+0x2730>)
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036e2:	f001 f8b5 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036e6:	2104      	movs	r1, #4
 80036e8:	4830      	ldr	r0, [pc, #192]	; (80037ac <menu+0x2708>)
 80036ea:	f005 fdb1 	bl	8009250 <HAL_GPIO_ReadPin>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d115      	bne.n	8003720 <menu+0x267c>
 80036f4:	4b2e      	ldr	r3, [pc, #184]	; (80037b0 <menu+0x270c>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	f083 0301 	eor.w	r3, r3, #1
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00e      	beq.n	8003720 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003702:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <menu+0x2730>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	3b01      	subs	r3, #1
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <menu+0x2730>)
 800370c:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800370e:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <menu+0x2730>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b06      	cmp	r3, #6
 8003714:	d902      	bls.n	800371c <menu+0x2678>
		   		yukariValfTmr = 5;
 8003716:	4b2f      	ldr	r3, [pc, #188]	; (80037d4 <menu+0x2730>)
 8003718:	2205      	movs	r2, #5
 800371a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800371c:	f001 f898 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003720:	2108      	movs	r1, #8
 8003722:	4822      	ldr	r0, [pc, #136]	; (80037ac <menu+0x2708>)
 8003724:	f005 fd94 	bl	8009250 <HAL_GPIO_ReadPin>
 8003728:	4603      	mov	r3, r0
 800372a:	2b01      	cmp	r3, #1
 800372c:	d10d      	bne.n	800374a <menu+0x26a6>
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <menu+0x270c>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	f083 0301 	eor.w	r3, r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d006      	beq.n	800374a <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 800373c:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <menu+0x2730>)
 800373e:	781a      	ldrb	r2, [r3, #0]
 8003740:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <menu+0x2710>)
 8003742:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <menu+0x2718>)
 8003746:	2201      	movs	r2, #1
 8003748:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 800374a:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <menu+0x271c>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b17      	cmp	r3, #23
 8003750:	f040 80ac 	bne.w	80038ac <menu+0x2808>
		if(dilSecim == 0) {
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <menu+0x26ec>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 800375c:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <menu+0x2738>)
 800375e:	2101      	movs	r1, #1
 8003760:	2001      	movs	r0, #1
 8003762:	f004 fa4f 	bl	8007c04 <lcd_print>
 8003766:	e008      	b.n	800377a <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <menu+0x26ec>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d104      	bne.n	800377a <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003770:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <menu+0x273c>)
 8003772:	2101      	movs	r1, #1
 8003774:	2001      	movs	r0, #1
 8003776:	f004 fa45 	bl	8007c04 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <menu+0x26ec>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d130      	bne.n	80037e4 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003782:	4a12      	ldr	r2, [pc, #72]	; (80037cc <menu+0x2728>)
 8003784:	2101      	movs	r1, #1
 8003786:	2002      	movs	r0, #2
 8003788:	f004 fa3c 	bl	8007c04 <lcd_print>
 800378c:	e033      	b.n	80037f6 <menu+0x2752>
 800378e:	bf00      	nop
 8003790:	20000241 	.word	0x20000241
 8003794:	0800d794 	.word	0x0800d794
 8003798:	20000233 	.word	0x20000233
 800379c:	0800d738 	.word	0x0800d738
 80037a0:	0800d74c 	.word	0x0800d74c
 80037a4:	0800d75c 	.word	0x0800d75c
 80037a8:	0800d770 	.word	0x0800d770
 80037ac:	40010800 	.word	0x40010800
 80037b0:	2000024f 	.word	0x2000024f
 80037b4:	20000118 	.word	0x20000118
 80037b8:	20000226 	.word	0x20000226
 80037bc:	2000024c 	.word	0x2000024c
 80037c0:	20000220 	.word	0x20000220
 80037c4:	0800d7a4 	.word	0x0800d7a4
 80037c8:	0800d7b8 	.word	0x0800d7b8
 80037cc:	0800d458 	.word	0x0800d458
 80037d0:	0800d7cc 	.word	0x0800d7cc
 80037d4:	20000234 	.word	0x20000234
 80037d8:	20000188 	.word	0x20000188
 80037dc:	0800d7dc 	.word	0x0800d7dc
 80037e0:	0800d7f0 	.word	0x0800d7f0
			} else if(dilSecim == 1) {
 80037e4:	4b98      	ldr	r3, [pc, #608]	; (8003a48 <menu+0x29a4>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d104      	bne.n	80037f6 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 80037ec:	4a97      	ldr	r2, [pc, #604]	; (8003a4c <menu+0x29a8>)
 80037ee:	2101      	movs	r1, #1
 80037f0:	2002      	movs	r0, #2
 80037f2:	f004 fa07 	bl	8007c04 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 80037f6:	4b96      	ldr	r3, [pc, #600]	; (8003a50 <menu+0x29ac>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	220a      	movs	r2, #10
 80037fc:	4995      	ldr	r1, [pc, #596]	; (8003a54 <menu+0x29b0>)
 80037fe:	4618      	mov	r0, r3
 8003800:	f008 fd52 	bl	800c2a8 <itoa>
		lcd_print(2,16,snum);
 8003804:	4a93      	ldr	r2, [pc, #588]	; (8003a54 <menu+0x29b0>)
 8003806:	2110      	movs	r1, #16
 8003808:	2002      	movs	r0, #2
 800380a:	f004 f9fb 	bl	8007c04 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800380e:	2102      	movs	r1, #2
 8003810:	4891      	ldr	r0, [pc, #580]	; (8003a58 <menu+0x29b4>)
 8003812:	f005 fd1d 	bl	8009250 <HAL_GPIO_ReadPin>
 8003816:	4603      	mov	r3, r0
 8003818:	2b01      	cmp	r3, #1
 800381a:	d115      	bne.n	8003848 <menu+0x27a4>
 800381c:	4b8f      	ldr	r3, [pc, #572]	; (8003a5c <menu+0x29b8>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	f083 0301 	eor.w	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00e      	beq.n	8003848 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 800382a:	4b89      	ldr	r3, [pc, #548]	; (8003a50 <menu+0x29ac>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4b87      	ldr	r3, [pc, #540]	; (8003a50 <menu+0x29ac>)
 8003834:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003836:	4b86      	ldr	r3, [pc, #536]	; (8003a50 <menu+0x29ac>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b05      	cmp	r3, #5
 800383c:	d902      	bls.n	8003844 <menu+0x27a0>
				asagiValfTmr = 0;
 800383e:	4b84      	ldr	r3, [pc, #528]	; (8003a50 <menu+0x29ac>)
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003844:	f001 f804 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003848:	2104      	movs	r1, #4
 800384a:	4883      	ldr	r0, [pc, #524]	; (8003a58 <menu+0x29b4>)
 800384c:	f005 fd00 	bl	8009250 <HAL_GPIO_ReadPin>
 8003850:	4603      	mov	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	d115      	bne.n	8003882 <menu+0x27de>
 8003856:	4b81      	ldr	r3, [pc, #516]	; (8003a5c <menu+0x29b8>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	f083 0301 	eor.w	r3, r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00e      	beq.n	8003882 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003864:	4b7a      	ldr	r3, [pc, #488]	; (8003a50 <menu+0x29ac>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	3b01      	subs	r3, #1
 800386a:	b2da      	uxtb	r2, r3
 800386c:	4b78      	ldr	r3, [pc, #480]	; (8003a50 <menu+0x29ac>)
 800386e:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003870:	4b77      	ldr	r3, [pc, #476]	; (8003a50 <menu+0x29ac>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b06      	cmp	r3, #6
 8003876:	d902      	bls.n	800387e <menu+0x27da>
		   		asagiValfTmr = 5;
 8003878:	4b75      	ldr	r3, [pc, #468]	; (8003a50 <menu+0x29ac>)
 800387a:	2205      	movs	r2, #5
 800387c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800387e:	f000 ffe7 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003882:	2108      	movs	r1, #8
 8003884:	4874      	ldr	r0, [pc, #464]	; (8003a58 <menu+0x29b4>)
 8003886:	f005 fce3 	bl	8009250 <HAL_GPIO_ReadPin>
 800388a:	4603      	mov	r3, r0
 800388c:	2b01      	cmp	r3, #1
 800388e:	d10d      	bne.n	80038ac <menu+0x2808>
 8003890:	4b72      	ldr	r3, [pc, #456]	; (8003a5c <menu+0x29b8>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	f083 0301 	eor.w	r3, r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d006      	beq.n	80038ac <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 800389e:	4b6c      	ldr	r3, [pc, #432]	; (8003a50 <menu+0x29ac>)
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	4b6f      	ldr	r3, [pc, #444]	; (8003a60 <menu+0x29bc>)
 80038a4:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80038a6:	4b6f      	ldr	r3, [pc, #444]	; (8003a64 <menu+0x29c0>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80038ac:	4b6e      	ldr	r3, [pc, #440]	; (8003a68 <menu+0x29c4>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b18      	cmp	r3, #24
 80038b2:	f040 809d 	bne.w	80039f0 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 80038b6:	4b6d      	ldr	r3, [pc, #436]	; (8003a6c <menu+0x29c8>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d113      	bne.n	80038e6 <menu+0x2842>
			if(dilSecim == 0) {
 80038be:	4b62      	ldr	r3, [pc, #392]	; (8003a48 <menu+0x29a4>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d105      	bne.n	80038d2 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 80038c6:	4a6a      	ldr	r2, [pc, #424]	; (8003a70 <menu+0x29cc>)
 80038c8:	2101      	movs	r1, #1
 80038ca:	2001      	movs	r0, #1
 80038cc:	f004 f99a 	bl	8007c04 <lcd_print>
 80038d0:	e020      	b.n	8003914 <menu+0x2870>
			} else if(dilSecim == 1) {
 80038d2:	4b5d      	ldr	r3, [pc, #372]	; (8003a48 <menu+0x29a4>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d11c      	bne.n	8003914 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 80038da:	4a66      	ldr	r2, [pc, #408]	; (8003a74 <menu+0x29d0>)
 80038dc:	2101      	movs	r1, #1
 80038de:	2001      	movs	r0, #1
 80038e0:	f004 f990 	bl	8007c04 <lcd_print>
 80038e4:	e016      	b.n	8003914 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80038e6:	4b61      	ldr	r3, [pc, #388]	; (8003a6c <menu+0x29c8>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d112      	bne.n	8003914 <menu+0x2870>
			if(dilSecim == 0) {
 80038ee:	4b56      	ldr	r3, [pc, #344]	; (8003a48 <menu+0x29a4>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d105      	bne.n	8003902 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 80038f6:	4a60      	ldr	r2, [pc, #384]	; (8003a78 <menu+0x29d4>)
 80038f8:	2101      	movs	r1, #1
 80038fa:	2001      	movs	r0, #1
 80038fc:	f004 f982 	bl	8007c04 <lcd_print>
 8003900:	e008      	b.n	8003914 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003902:	4b51      	ldr	r3, [pc, #324]	; (8003a48 <menu+0x29a4>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d104      	bne.n	8003914 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 800390a:	4a5c      	ldr	r2, [pc, #368]	; (8003a7c <menu+0x29d8>)
 800390c:	2101      	movs	r1, #1
 800390e:	2001      	movs	r0, #1
 8003910:	f004 f978 	bl	8007c04 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003914:	4b4c      	ldr	r3, [pc, #304]	; (8003a48 <menu+0x29a4>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d105      	bne.n	8003928 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 800391c:	4a58      	ldr	r2, [pc, #352]	; (8003a80 <menu+0x29dc>)
 800391e:	2101      	movs	r1, #1
 8003920:	2002      	movs	r0, #2
 8003922:	f004 f96f 	bl	8007c04 <lcd_print>
 8003926:	e008      	b.n	800393a <menu+0x2896>
			} else if(dilSecim == 1) {
 8003928:	4b47      	ldr	r3, [pc, #284]	; (8003a48 <menu+0x29a4>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d104      	bne.n	800393a <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003930:	4a46      	ldr	r2, [pc, #280]	; (8003a4c <menu+0x29a8>)
 8003932:	2101      	movs	r1, #1
 8003934:	2002      	movs	r0, #2
 8003936:	f004 f965 	bl	8007c04 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800393a:	4b52      	ldr	r3, [pc, #328]	; (8003a84 <menu+0x29e0>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	220a      	movs	r2, #10
 8003940:	4944      	ldr	r1, [pc, #272]	; (8003a54 <menu+0x29b0>)
 8003942:	4618      	mov	r0, r3
 8003944:	f008 fcb0 	bl	800c2a8 <itoa>
		lcd_print(2, 16, snum);
 8003948:	4a42      	ldr	r2, [pc, #264]	; (8003a54 <menu+0x29b0>)
 800394a:	2110      	movs	r1, #16
 800394c:	2002      	movs	r0, #2
 800394e:	f004 f959 	bl	8007c04 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003952:	2102      	movs	r1, #2
 8003954:	4840      	ldr	r0, [pc, #256]	; (8003a58 <menu+0x29b4>)
 8003956:	f005 fc7b 	bl	8009250 <HAL_GPIO_ReadPin>
 800395a:	4603      	mov	r3, r0
 800395c:	2b01      	cmp	r3, #1
 800395e:	d115      	bne.n	800398c <menu+0x28e8>
 8003960:	4b3e      	ldr	r3, [pc, #248]	; (8003a5c <menu+0x29b8>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	f083 0301 	eor.w	r3, r3, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00e      	beq.n	800398c <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 800396e:	4b45      	ldr	r3, [pc, #276]	; (8003a84 <menu+0x29e0>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	b2da      	uxtb	r2, r3
 8003976:	4b43      	ldr	r3, [pc, #268]	; (8003a84 <menu+0x29e0>)
 8003978:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800397a:	4b42      	ldr	r3, [pc, #264]	; (8003a84 <menu+0x29e0>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b05      	cmp	r3, #5
 8003980:	d902      	bls.n	8003988 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003982:	4b40      	ldr	r3, [pc, #256]	; (8003a84 <menu+0x29e0>)
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003988:	f000 ff62 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800398c:	2104      	movs	r1, #4
 800398e:	4832      	ldr	r0, [pc, #200]	; (8003a58 <menu+0x29b4>)
 8003990:	f005 fc5e 	bl	8009250 <HAL_GPIO_ReadPin>
 8003994:	4603      	mov	r3, r0
 8003996:	2b01      	cmp	r3, #1
 8003998:	d115      	bne.n	80039c6 <menu+0x2922>
 800399a:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <menu+0x29b8>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	f083 0301 	eor.w	r3, r3, #1
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00e      	beq.n	80039c6 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <menu+0x29e0>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <menu+0x29e0>)
 80039b2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80039b4:	4b33      	ldr	r3, [pc, #204]	; (8003a84 <menu+0x29e0>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b06      	cmp	r3, #6
 80039ba:	d902      	bls.n	80039c2 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 80039bc:	4b31      	ldr	r3, [pc, #196]	; (8003a84 <menu+0x29e0>)
 80039be:	2205      	movs	r2, #5
 80039c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039c2:	f000 ff45 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039c6:	2108      	movs	r1, #8
 80039c8:	4823      	ldr	r0, [pc, #140]	; (8003a58 <menu+0x29b4>)
 80039ca:	f005 fc41 	bl	8009250 <HAL_GPIO_ReadPin>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d10d      	bne.n	80039f0 <menu+0x294c>
 80039d4:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <menu+0x29b8>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	f083 0301 	eor.w	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 80039e2:	4b28      	ldr	r3, [pc, #160]	; (8003a84 <menu+0x29e0>)
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	4b1e      	ldr	r3, [pc, #120]	; (8003a60 <menu+0x29bc>)
 80039e8:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80039ea:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <menu+0x29c0>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80039f0:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <menu+0x29c4>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b19      	cmp	r3, #25
 80039f6:	f040 80c4 	bne.w	8003b82 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 80039fa:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <menu+0x29c8>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d113      	bne.n	8003a2a <menu+0x2986>
			if(dilSecim == 0) {
 8003a02:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <menu+0x29a4>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003a0a:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <menu+0x29e4>)
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	2001      	movs	r0, #1
 8003a10:	f004 f8f8 	bl	8007c04 <lcd_print>
 8003a14:	e047      	b.n	8003aa6 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <menu+0x29a4>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d143      	bne.n	8003aa6 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003a1e:	4a1b      	ldr	r2, [pc, #108]	; (8003a8c <menu+0x29e8>)
 8003a20:	2101      	movs	r1, #1
 8003a22:	2001      	movs	r0, #1
 8003a24:	f004 f8ee 	bl	8007c04 <lcd_print>
 8003a28:	e03d      	b.n	8003aa6 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <menu+0x29c8>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d139      	bne.n	8003aa6 <menu+0x2a02>
			if(dilSecim == 0) {
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <menu+0x29a4>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d12c      	bne.n	8003a94 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003a3a:	4a15      	ldr	r2, [pc, #84]	; (8003a90 <menu+0x29ec>)
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f004 f8e0 	bl	8007c04 <lcd_print>
 8003a44:	e02f      	b.n	8003aa6 <menu+0x2a02>
 8003a46:	bf00      	nop
 8003a48:	20000241 	.word	0x20000241
 8003a4c:	0800d7cc 	.word	0x0800d7cc
 8003a50:	20000235 	.word	0x20000235
 8003a54:	20000188 	.word	0x20000188
 8003a58:	40010800 	.word	0x40010800
 8003a5c:	2000024f 	.word	0x2000024f
 8003a60:	20000118 	.word	0x20000118
 8003a64:	2000024c 	.word	0x2000024c
 8003a68:	20000220 	.word	0x20000220
 8003a6c:	2000022f 	.word	0x2000022f
 8003a70:	0800d804 	.word	0x0800d804
 8003a74:	0800d818 	.word	0x0800d818
 8003a78:	0800d82c 	.word	0x0800d82c
 8003a7c:	0800d840 	.word	0x0800d840
 8003a80:	0800d458 	.word	0x0800d458
 8003a84:	20000236 	.word	0x20000236
 8003a88:	0800d854 	.word	0x0800d854
 8003a8c:	0800d868 	.word	0x0800d868
 8003a90:	0800d87c 	.word	0x0800d87c
			} else if(dilSecim == 1) {
 8003a94:	4b73      	ldr	r3, [pc, #460]	; (8003c64 <menu+0x2bc0>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d104      	bne.n	8003aa6 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003a9c:	4a72      	ldr	r2, [pc, #456]	; (8003c68 <menu+0x2bc4>)
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	f004 f8af 	bl	8007c04 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003aa6:	4b6f      	ldr	r3, [pc, #444]	; (8003c64 <menu+0x2bc0>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d105      	bne.n	8003aba <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003aae:	4a6f      	ldr	r2, [pc, #444]	; (8003c6c <menu+0x2bc8>)
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	2002      	movs	r0, #2
 8003ab4:	f004 f8a6 	bl	8007c04 <lcd_print>
 8003ab8:	e008      	b.n	8003acc <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003aba:	4b6a      	ldr	r3, [pc, #424]	; (8003c64 <menu+0x2bc0>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d104      	bne.n	8003acc <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003ac2:	4a6b      	ldr	r2, [pc, #428]	; (8003c70 <menu+0x2bcc>)
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	2002      	movs	r0, #2
 8003ac8:	f004 f89c 	bl	8007c04 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003acc:	4b69      	ldr	r3, [pc, #420]	; (8003c74 <menu+0x2bd0>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	220a      	movs	r2, #10
 8003ad2:	4969      	ldr	r1, [pc, #420]	; (8003c78 <menu+0x2bd4>)
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f008 fbe7 	bl	800c2a8 <itoa>
		lcd_print(2,16,snum);
 8003ada:	4a67      	ldr	r2, [pc, #412]	; (8003c78 <menu+0x2bd4>)
 8003adc:	2110      	movs	r1, #16
 8003ade:	2002      	movs	r0, #2
 8003ae0:	f004 f890 	bl	8007c04 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4865      	ldr	r0, [pc, #404]	; (8003c7c <menu+0x2bd8>)
 8003ae8:	f005 fbb2 	bl	8009250 <HAL_GPIO_ReadPin>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d115      	bne.n	8003b1e <menu+0x2a7a>
 8003af2:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <menu+0x2bdc>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	f083 0301 	eor.w	r3, r3, #1
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00e      	beq.n	8003b1e <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003b00:	4b5c      	ldr	r3, [pc, #368]	; (8003c74 <menu+0x2bd0>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	3301      	adds	r3, #1
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	4b5a      	ldr	r3, [pc, #360]	; (8003c74 <menu+0x2bd0>)
 8003b0a:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003b0c:	4b59      	ldr	r3, [pc, #356]	; (8003c74 <menu+0x2bd0>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b05      	cmp	r3, #5
 8003b12:	d902      	bls.n	8003b1a <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003b14:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <menu+0x2bd0>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b1a:	f000 fe99 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b1e:	2104      	movs	r1, #4
 8003b20:	4856      	ldr	r0, [pc, #344]	; (8003c7c <menu+0x2bd8>)
 8003b22:	f005 fb95 	bl	8009250 <HAL_GPIO_ReadPin>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d115      	bne.n	8003b58 <menu+0x2ab4>
 8003b2c:	4b54      	ldr	r3, [pc, #336]	; (8003c80 <menu+0x2bdc>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	f083 0301 	eor.w	r3, r3, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00e      	beq.n	8003b58 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003b3a:	4b4e      	ldr	r3, [pc, #312]	; (8003c74 <menu+0x2bd0>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	4b4c      	ldr	r3, [pc, #304]	; (8003c74 <menu+0x2bd0>)
 8003b44:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003b46:	4b4b      	ldr	r3, [pc, #300]	; (8003c74 <menu+0x2bd0>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d902      	bls.n	8003b54 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003b4e:	4b49      	ldr	r3, [pc, #292]	; (8003c74 <menu+0x2bd0>)
 8003b50:	2205      	movs	r2, #5
 8003b52:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b54:	f000 fe7c 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b58:	2108      	movs	r1, #8
 8003b5a:	4848      	ldr	r0, [pc, #288]	; (8003c7c <menu+0x2bd8>)
 8003b5c:	f005 fb78 	bl	8009250 <HAL_GPIO_ReadPin>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d10d      	bne.n	8003b82 <menu+0x2ade>
 8003b66:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <menu+0x2bdc>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	f083 0301 	eor.w	r3, r3, #1
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d006      	beq.n	8003b82 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003b74:	4b3f      	ldr	r3, [pc, #252]	; (8003c74 <menu+0x2bd0>)
 8003b76:	781a      	ldrb	r2, [r3, #0]
 8003b78:	4b42      	ldr	r3, [pc, #264]	; (8003c84 <menu+0x2be0>)
 8003b7a:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003b7c:	4b42      	ldr	r3, [pc, #264]	; (8003c88 <menu+0x2be4>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003b82:	4b42      	ldr	r3, [pc, #264]	; (8003c8c <menu+0x2be8>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b1a      	cmp	r3, #26
 8003b88:	f040 80ec 	bne.w	8003d64 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003b8c:	4b35      	ldr	r3, [pc, #212]	; (8003c64 <menu+0x2bc0>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003b94:	4a3e      	ldr	r2, [pc, #248]	; (8003c90 <menu+0x2bec>)
 8003b96:	2101      	movs	r1, #1
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f004 f833 	bl	8007c04 <lcd_print>
 8003b9e:	e008      	b.n	8003bb2 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003ba0:	4b30      	ldr	r3, [pc, #192]	; (8003c64 <menu+0x2bc0>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d104      	bne.n	8003bb2 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003ba8:	4a3a      	ldr	r2, [pc, #232]	; (8003c94 <menu+0x2bf0>)
 8003baa:	2101      	movs	r1, #1
 8003bac:	2001      	movs	r0, #1
 8003bae:	f004 f829 	bl	8007c04 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003bb2:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <menu+0x2bf4>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b63      	cmp	r3, #99	; 0x63
 8003bb8:	d91e      	bls.n	8003bf8 <menu+0x2b54>
			if(dilSecim == 0) {
 8003bba:	4b2a      	ldr	r3, [pc, #168]	; (8003c64 <menu+0x2bc0>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <menu+0x2bc8>)
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	2002      	movs	r0, #2
 8003bc8:	f004 f81c 	bl	8007c04 <lcd_print>
			}
			if(dilSecim == 1) {
 8003bcc:	4b25      	ldr	r3, [pc, #148]	; (8003c64 <menu+0x2bc0>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d104      	bne.n	8003bde <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003bd4:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <menu+0x2bcc>)
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	2002      	movs	r0, #2
 8003bda:	f004 f813 	bl	8007c04 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003bde:	4b2e      	ldr	r3, [pc, #184]	; (8003c98 <menu+0x2bf4>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	220a      	movs	r2, #10
 8003be4:	4924      	ldr	r1, [pc, #144]	; (8003c78 <menu+0x2bd4>)
 8003be6:	4618      	mov	r0, r3
 8003be8:	f008 fb5e 	bl	800c2a8 <itoa>
			lcd_print(2,14,snum);
 8003bec:	4a22      	ldr	r2, [pc, #136]	; (8003c78 <menu+0x2bd4>)
 8003bee:	210e      	movs	r1, #14
 8003bf0:	2002      	movs	r0, #2
 8003bf2:	f004 f807 	bl	8007c04 <lcd_print>
 8003bf6:	e066      	b.n	8003cc6 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <menu+0x2bf4>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b09      	cmp	r3, #9
 8003bfe:	d923      	bls.n	8003c48 <menu+0x2ba4>
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <menu+0x2bf4>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b63      	cmp	r3, #99	; 0x63
 8003c06:	d81f      	bhi.n	8003c48 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003c08:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <menu+0x2bc0>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d105      	bne.n	8003c1c <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c10:	4a16      	ldr	r2, [pc, #88]	; (8003c6c <menu+0x2bc8>)
 8003c12:	2101      	movs	r1, #1
 8003c14:	2002      	movs	r0, #2
 8003c16:	f003 fff5 	bl	8007c04 <lcd_print>
 8003c1a:	e008      	b.n	8003c2e <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <menu+0x2bc0>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d104      	bne.n	8003c2e <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003c24:	4a12      	ldr	r2, [pc, #72]	; (8003c70 <menu+0x2bcc>)
 8003c26:	2101      	movs	r1, #1
 8003c28:	2002      	movs	r0, #2
 8003c2a:	f003 ffeb 	bl	8007c04 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003c2e:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <menu+0x2bf4>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	220a      	movs	r2, #10
 8003c34:	4910      	ldr	r1, [pc, #64]	; (8003c78 <menu+0x2bd4>)
 8003c36:	4618      	mov	r0, r3
 8003c38:	f008 fb36 	bl	800c2a8 <itoa>
			lcd_print(2, 15, snum);
 8003c3c:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <menu+0x2bd4>)
 8003c3e:	210f      	movs	r1, #15
 8003c40:	2002      	movs	r0, #2
 8003c42:	f003 ffdf 	bl	8007c04 <lcd_print>
 8003c46:	e03e      	b.n	8003cc6 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <menu+0x2bf4>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b09      	cmp	r3, #9
 8003c4e:	d83a      	bhi.n	8003cc6 <menu+0x2c22>
			if(dilSecim == 0) {
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <menu+0x2bc0>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d121      	bne.n	8003c9c <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c58:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <menu+0x2bc8>)
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	2002      	movs	r0, #2
 8003c5e:	f003 ffd1 	bl	8007c04 <lcd_print>
 8003c62:	e024      	b.n	8003cae <menu+0x2c0a>
 8003c64:	20000241 	.word	0x20000241
 8003c68:	0800d890 	.word	0x0800d890
 8003c6c:	0800d458 	.word	0x0800d458
 8003c70:	0800d7cc 	.word	0x0800d7cc
 8003c74:	20000237 	.word	0x20000237
 8003c78:	20000188 	.word	0x20000188
 8003c7c:	40010800 	.word	0x40010800
 8003c80:	2000024f 	.word	0x2000024f
 8003c84:	20000118 	.word	0x20000118
 8003c88:	2000024c 	.word	0x2000024c
 8003c8c:	20000220 	.word	0x20000220
 8003c90:	0800d8a4 	.word	0x0800d8a4
 8003c94:	0800d8b8 	.word	0x0800d8b8
 8003c98:	20000238 	.word	0x20000238
			} else if(dilSecim == 1) {
 8003c9c:	4b8f      	ldr	r3, [pc, #572]	; (8003edc <menu+0x2e38>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d104      	bne.n	8003cae <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003ca4:	4a8e      	ldr	r2, [pc, #568]	; (8003ee0 <menu+0x2e3c>)
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	2002      	movs	r0, #2
 8003caa:	f003 ffab 	bl	8007c04 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003cae:	4b8d      	ldr	r3, [pc, #564]	; (8003ee4 <menu+0x2e40>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	220a      	movs	r2, #10
 8003cb4:	498c      	ldr	r1, [pc, #560]	; (8003ee8 <menu+0x2e44>)
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f008 faf6 	bl	800c2a8 <itoa>
			lcd_print(2, 16, snum);
 8003cbc:	4a8a      	ldr	r2, [pc, #552]	; (8003ee8 <menu+0x2e44>)
 8003cbe:	2110      	movs	r1, #16
 8003cc0:	2002      	movs	r0, #2
 8003cc2:	f003 ff9f 	bl	8007c04 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cc6:	2102      	movs	r1, #2
 8003cc8:	4888      	ldr	r0, [pc, #544]	; (8003eec <menu+0x2e48>)
 8003cca:	f005 fac1 	bl	8009250 <HAL_GPIO_ReadPin>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d115      	bne.n	8003d00 <menu+0x2c5c>
 8003cd4:	4b86      	ldr	r3, [pc, #536]	; (8003ef0 <menu+0x2e4c>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	f083 0301 	eor.w	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00e      	beq.n	8003d00 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003ce2:	4b80      	ldr	r3, [pc, #512]	; (8003ee4 <menu+0x2e40>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4b7e      	ldr	r3, [pc, #504]	; (8003ee4 <menu+0x2e40>)
 8003cec:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003cee:	4b7d      	ldr	r3, [pc, #500]	; (8003ee4 <menu+0x2e40>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2bb4      	cmp	r3, #180	; 0xb4
 8003cf4:	d902      	bls.n	8003cfc <menu+0x2c58>
				makineCalismaTmr = 0;
 8003cf6:	4b7b      	ldr	r3, [pc, #492]	; (8003ee4 <menu+0x2e40>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003cfc:	f000 fda8 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d00:	2104      	movs	r1, #4
 8003d02:	487a      	ldr	r0, [pc, #488]	; (8003eec <menu+0x2e48>)
 8003d04:	f005 faa4 	bl	8009250 <HAL_GPIO_ReadPin>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d115      	bne.n	8003d3a <menu+0x2c96>
 8003d0e:	4b78      	ldr	r3, [pc, #480]	; (8003ef0 <menu+0x2e4c>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	f083 0301 	eor.w	r3, r3, #1
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003d1c:	4b71      	ldr	r3, [pc, #452]	; (8003ee4 <menu+0x2e40>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	4b6f      	ldr	r3, [pc, #444]	; (8003ee4 <menu+0x2e40>)
 8003d26:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003d28:	4b6e      	ldr	r3, [pc, #440]	; (8003ee4 <menu+0x2e40>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2bb5      	cmp	r3, #181	; 0xb5
 8003d2e:	d902      	bls.n	8003d36 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003d30:	4b6c      	ldr	r3, [pc, #432]	; (8003ee4 <menu+0x2e40>)
 8003d32:	22b4      	movs	r2, #180	; 0xb4
 8003d34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d36:	f000 fd8b 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d3a:	2108      	movs	r1, #8
 8003d3c:	486b      	ldr	r0, [pc, #428]	; (8003eec <menu+0x2e48>)
 8003d3e:	f005 fa87 	bl	8009250 <HAL_GPIO_ReadPin>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10d      	bne.n	8003d64 <menu+0x2cc0>
 8003d48:	4b69      	ldr	r3, [pc, #420]	; (8003ef0 <menu+0x2e4c>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	f083 0301 	eor.w	r3, r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d006      	beq.n	8003d64 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003d56:	4b63      	ldr	r3, [pc, #396]	; (8003ee4 <menu+0x2e40>)
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	4b66      	ldr	r3, [pc, #408]	; (8003ef4 <menu+0x2e50>)
 8003d5c:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003d5e:	4b66      	ldr	r3, [pc, #408]	; (8003ef8 <menu+0x2e54>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003d64:	4b65      	ldr	r3, [pc, #404]	; (8003efc <menu+0x2e58>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b1b      	cmp	r3, #27
 8003d6a:	f040 8083 	bne.w	8003e74 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003d6e:	4a64      	ldr	r2, [pc, #400]	; (8003f00 <menu+0x2e5c>)
 8003d70:	2101      	movs	r1, #1
 8003d72:	2001      	movs	r0, #1
 8003d74:	f003 ff46 	bl	8007c04 <lcd_print>

		if(buzzer == 0) {
 8003d78:	4b62      	ldr	r3, [pc, #392]	; (8003f04 <menu+0x2e60>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d113      	bne.n	8003da8 <menu+0x2d04>
			if(dilSecim == 0) {
 8003d80:	4b56      	ldr	r3, [pc, #344]	; (8003edc <menu+0x2e38>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d105      	bne.n	8003d94 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003d88:	4a5f      	ldr	r2, [pc, #380]	; (8003f08 <menu+0x2e64>)
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	2002      	movs	r0, #2
 8003d8e:	f003 ff39 	bl	8007c04 <lcd_print>
 8003d92:	e020      	b.n	8003dd6 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003d94:	4b51      	ldr	r3, [pc, #324]	; (8003edc <menu+0x2e38>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d11c      	bne.n	8003dd6 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003d9c:	4a5b      	ldr	r2, [pc, #364]	; (8003f0c <menu+0x2e68>)
 8003d9e:	2101      	movs	r1, #1
 8003da0:	2002      	movs	r0, #2
 8003da2:	f003 ff2f 	bl	8007c04 <lcd_print>
 8003da6:	e016      	b.n	8003dd6 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003da8:	4b56      	ldr	r3, [pc, #344]	; (8003f04 <menu+0x2e60>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d112      	bne.n	8003dd6 <menu+0x2d32>
			if(dilSecim == 0) {
 8003db0:	4b4a      	ldr	r3, [pc, #296]	; (8003edc <menu+0x2e38>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d105      	bne.n	8003dc4 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003db8:	4a55      	ldr	r2, [pc, #340]	; (8003f10 <menu+0x2e6c>)
 8003dba:	2101      	movs	r1, #1
 8003dbc:	2002      	movs	r0, #2
 8003dbe:	f003 ff21 	bl	8007c04 <lcd_print>
 8003dc2:	e008      	b.n	8003dd6 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003dc4:	4b45      	ldr	r3, [pc, #276]	; (8003edc <menu+0x2e38>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d104      	bne.n	8003dd6 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003dcc:	4a51      	ldr	r2, [pc, #324]	; (8003f14 <menu+0x2e70>)
 8003dce:	2101      	movs	r1, #1
 8003dd0:	2002      	movs	r0, #2
 8003dd2:	f003 ff17 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	4844      	ldr	r0, [pc, #272]	; (8003eec <menu+0x2e48>)
 8003dda:	f005 fa39 	bl	8009250 <HAL_GPIO_ReadPin>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d115      	bne.n	8003e10 <menu+0x2d6c>
 8003de4:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <menu+0x2e4c>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	f083 0301 	eor.w	r3, r3, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00e      	beq.n	8003e10 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003df2:	4b44      	ldr	r3, [pc, #272]	; (8003f04 <menu+0x2e60>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	3301      	adds	r3, #1
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4b42      	ldr	r3, [pc, #264]	; (8003f04 <menu+0x2e60>)
 8003dfc:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003dfe:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <menu+0x2e60>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d902      	bls.n	8003e0c <menu+0x2d68>
				buzzer = 0;
 8003e06:	4b3f      	ldr	r3, [pc, #252]	; (8003f04 <menu+0x2e60>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e0c:	f000 fd20 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e10:	2104      	movs	r1, #4
 8003e12:	4836      	ldr	r0, [pc, #216]	; (8003eec <menu+0x2e48>)
 8003e14:	f005 fa1c 	bl	8009250 <HAL_GPIO_ReadPin>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d115      	bne.n	8003e4a <menu+0x2da6>
 8003e1e:	4b34      	ldr	r3, [pc, #208]	; (8003ef0 <menu+0x2e4c>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	f083 0301 	eor.w	r3, r3, #1
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <menu+0x2da6>
			buzzer = buzzer - 1;
 8003e2c:	4b35      	ldr	r3, [pc, #212]	; (8003f04 <menu+0x2e60>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	4b33      	ldr	r3, [pc, #204]	; (8003f04 <menu+0x2e60>)
 8003e36:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003e38:	4b32      	ldr	r3, [pc, #200]	; (8003f04 <menu+0x2e60>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <menu+0x2da2>
		   		buzzer = 1;
 8003e40:	4b30      	ldr	r3, [pc, #192]	; (8003f04 <menu+0x2e60>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e46:	f000 fd03 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e4a:	2108      	movs	r1, #8
 8003e4c:	4827      	ldr	r0, [pc, #156]	; (8003eec <menu+0x2e48>)
 8003e4e:	f005 f9ff 	bl	8009250 <HAL_GPIO_ReadPin>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d10d      	bne.n	8003e74 <menu+0x2dd0>
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <menu+0x2e4c>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	f083 0301 	eor.w	r3, r3, #1
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d006      	beq.n	8003e74 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003e66:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <menu+0x2e60>)
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	4b22      	ldr	r3, [pc, #136]	; (8003ef4 <menu+0x2e50>)
 8003e6c:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003e6e:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <menu+0x2e54>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003e74:	4b21      	ldr	r3, [pc, #132]	; (8003efc <menu+0x2e58>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b1c      	cmp	r3, #28
 8003e7a:	f040 80ab 	bne.w	8003fd4 <menu+0x2f30>
		calismaSayModu = 0;
 8003e7e:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <menu+0x2e74>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003e84:	4a25      	ldr	r2, [pc, #148]	; (8003f1c <menu+0x2e78>)
 8003e86:	2101      	movs	r1, #1
 8003e88:	2001      	movs	r0, #1
 8003e8a:	f003 febb 	bl	8007c04 <lcd_print>

		if(demoMode == 0) {
 8003e8e:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <menu+0x2e7c>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d113      	bne.n	8003ebe <menu+0x2e1a>
			if(dilSecim == 0) {
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <menu+0x2e38>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d105      	bne.n	8003eaa <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003e9e:	4a1a      	ldr	r2, [pc, #104]	; (8003f08 <menu+0x2e64>)
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	2002      	movs	r0, #2
 8003ea4:	f003 feae 	bl	8007c04 <lcd_print>
 8003ea8:	e045      	b.n	8003f36 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <menu+0x2e38>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d141      	bne.n	8003f36 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003eb2:	4a16      	ldr	r2, [pc, #88]	; (8003f0c <menu+0x2e68>)
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	2002      	movs	r0, #2
 8003eb8:	f003 fea4 	bl	8007c04 <lcd_print>
 8003ebc:	e03b      	b.n	8003f36 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8003ebe:	4b18      	ldr	r3, [pc, #96]	; (8003f20 <menu+0x2e7c>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d137      	bne.n	8003f36 <menu+0x2e92>
			if(dilSecim == 0){
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <menu+0x2e38>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d12a      	bne.n	8003f24 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8003ece:	4a10      	ldr	r2, [pc, #64]	; (8003f10 <menu+0x2e6c>)
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	2002      	movs	r0, #2
 8003ed4:	f003 fe96 	bl	8007c04 <lcd_print>
 8003ed8:	e02d      	b.n	8003f36 <menu+0x2e92>
 8003eda:	bf00      	nop
 8003edc:	20000241 	.word	0x20000241
 8003ee0:	0800d7cc 	.word	0x0800d7cc
 8003ee4:	20000238 	.word	0x20000238
 8003ee8:	20000188 	.word	0x20000188
 8003eec:	40010800 	.word	0x40010800
 8003ef0:	2000024f 	.word	0x2000024f
 8003ef4:	20000118 	.word	0x20000118
 8003ef8:	2000024c 	.word	0x2000024c
 8003efc:	20000220 	.word	0x20000220
 8003f00:	0800d8cc 	.word	0x0800d8cc
 8003f04:	2000023c 	.word	0x2000023c
 8003f08:	0800d1f4 	.word	0x0800d1f4
 8003f0c:	0800d208 	.word	0x0800d208
 8003f10:	0800d254 	.word	0x0800d254
 8003f14:	0800d268 	.word	0x0800d268
 8003f18:	20000240 	.word	0x20000240
 8003f1c:	0800d8e0 	.word	0x0800d8e0
 8003f20:	2000023e 	.word	0x2000023e
			} else if(dilSecim == 1) {
 8003f24:	4b71      	ldr	r3, [pc, #452]	; (80040ec <menu+0x3048>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d104      	bne.n	8003f36 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003f2c:	4a70      	ldr	r2, [pc, #448]	; (80040f0 <menu+0x304c>)
 8003f2e:	2101      	movs	r1, #1
 8003f30:	2002      	movs	r0, #2
 8003f32:	f003 fe67 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f36:	2102      	movs	r1, #2
 8003f38:	486e      	ldr	r0, [pc, #440]	; (80040f4 <menu+0x3050>)
 8003f3a:	f005 f989 	bl	8009250 <HAL_GPIO_ReadPin>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d115      	bne.n	8003f70 <menu+0x2ecc>
 8003f44:	4b6c      	ldr	r3, [pc, #432]	; (80040f8 <menu+0x3054>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f083 0301 	eor.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00e      	beq.n	8003f70 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8003f52:	4b6a      	ldr	r3, [pc, #424]	; (80040fc <menu+0x3058>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	3301      	adds	r3, #1
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4b68      	ldr	r3, [pc, #416]	; (80040fc <menu+0x3058>)
 8003f5c:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003f5e:	4b67      	ldr	r3, [pc, #412]	; (80040fc <menu+0x3058>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d902      	bls.n	8003f6c <menu+0x2ec8>
				demoMode = 0;
 8003f66:	4b65      	ldr	r3, [pc, #404]	; (80040fc <menu+0x3058>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f6c:	f000 fc70 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f70:	2104      	movs	r1, #4
 8003f72:	4860      	ldr	r0, [pc, #384]	; (80040f4 <menu+0x3050>)
 8003f74:	f005 f96c 	bl	8009250 <HAL_GPIO_ReadPin>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d115      	bne.n	8003faa <menu+0x2f06>
 8003f7e:	4b5e      	ldr	r3, [pc, #376]	; (80040f8 <menu+0x3054>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	f083 0301 	eor.w	r3, r3, #1
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <menu+0x2f06>
			demoMode = demoMode - 1;
 8003f8c:	4b5b      	ldr	r3, [pc, #364]	; (80040fc <menu+0x3058>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	4b59      	ldr	r3, [pc, #356]	; (80040fc <menu+0x3058>)
 8003f96:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003f98:	4b58      	ldr	r3, [pc, #352]	; (80040fc <menu+0x3058>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <menu+0x2f02>
		   		demoMode = 1;
 8003fa0:	4b56      	ldr	r3, [pc, #344]	; (80040fc <menu+0x3058>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fa6:	f000 fc53 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003faa:	2108      	movs	r1, #8
 8003fac:	4851      	ldr	r0, [pc, #324]	; (80040f4 <menu+0x3050>)
 8003fae:	f005 f94f 	bl	8009250 <HAL_GPIO_ReadPin>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d10d      	bne.n	8003fd4 <menu+0x2f30>
 8003fb8:	4b4f      	ldr	r3, [pc, #316]	; (80040f8 <menu+0x3054>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	f083 0301 	eor.w	r3, r3, #1
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d006      	beq.n	8003fd4 <menu+0x2f30>
			eepromData[26] = demoMode;
 8003fc6:	4b4d      	ldr	r3, [pc, #308]	; (80040fc <menu+0x3058>)
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	4b4d      	ldr	r3, [pc, #308]	; (8004100 <menu+0x305c>)
 8003fcc:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003fce:	4b4d      	ldr	r3, [pc, #308]	; (8004104 <menu+0x3060>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003fd4:	4b4c      	ldr	r3, [pc, #304]	; (8004108 <menu+0x3064>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b1d      	cmp	r3, #29
 8003fda:	f040 8132 	bne.w	8004242 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8003fde:	4b4b      	ldr	r3, [pc, #300]	; (800410c <menu+0x3068>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d113      	bne.n	800400e <menu+0x2f6a>
 8003fe6:	4b4a      	ldr	r3, [pc, #296]	; (8004110 <menu+0x306c>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10f      	bne.n	800400e <menu+0x2f6a>
 8003fee:	4b49      	ldr	r3, [pc, #292]	; (8004114 <menu+0x3070>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10b      	bne.n	800400e <menu+0x2f6a>
 8003ff6:	4b48      	ldr	r3, [pc, #288]	; (8004118 <menu+0x3074>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d107      	bne.n	800400e <menu+0x2f6a>
 8003ffe:	4b47      	ldr	r3, [pc, #284]	; (800411c <menu+0x3078>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d103      	bne.n	800400e <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004006:	4b46      	ldr	r3, [pc, #280]	; (8004120 <menu+0x307c>)
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	e002      	b.n	8004014 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800400e:	4b44      	ldr	r3, [pc, #272]	; (8004120 <menu+0x307c>)
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004014:	4b43      	ldr	r3, [pc, #268]	; (8004124 <menu+0x3080>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d154      	bne.n	80040c6 <menu+0x3022>
			if(dilSecim == 0) {
 800401c:	4b33      	ldr	r3, [pc, #204]	; (80040ec <menu+0x3048>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d105      	bne.n	8004030 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004024:	4a40      	ldr	r2, [pc, #256]	; (8004128 <menu+0x3084>)
 8004026:	2101      	movs	r1, #1
 8004028:	2001      	movs	r0, #1
 800402a:	f003 fdeb 	bl	8007c04 <lcd_print>
 800402e:	e008      	b.n	8004042 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004030:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <menu+0x3048>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d104      	bne.n	8004042 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004038:	4a3c      	ldr	r2, [pc, #240]	; (800412c <menu+0x3088>)
 800403a:	2101      	movs	r1, #1
 800403c:	2001      	movs	r0, #1
 800403e:	f003 fde1 	bl	8007c04 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004042:	4b36      	ldr	r3, [pc, #216]	; (800411c <menu+0x3078>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	220a      	movs	r2, #10
 8004048:	4939      	ldr	r1, [pc, #228]	; (8004130 <menu+0x308c>)
 800404a:	4618      	mov	r0, r3
 800404c:	f008 f92c 	bl	800c2a8 <itoa>
			lcd_print(2, 12, snum);
 8004050:	4a37      	ldr	r2, [pc, #220]	; (8004130 <menu+0x308c>)
 8004052:	210c      	movs	r1, #12
 8004054:	2002      	movs	r0, #2
 8004056:	f003 fdd5 	bl	8007c04 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800405a:	4b2f      	ldr	r3, [pc, #188]	; (8004118 <menu+0x3074>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	220a      	movs	r2, #10
 8004060:	4933      	ldr	r1, [pc, #204]	; (8004130 <menu+0x308c>)
 8004062:	4618      	mov	r0, r3
 8004064:	f008 f920 	bl	800c2a8 <itoa>
			lcd_print(2, 13, snum);
 8004068:	4a31      	ldr	r2, [pc, #196]	; (8004130 <menu+0x308c>)
 800406a:	210d      	movs	r1, #13
 800406c:	2002      	movs	r0, #2
 800406e:	f003 fdc9 	bl	8007c04 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004072:	4b28      	ldr	r3, [pc, #160]	; (8004114 <menu+0x3070>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	220a      	movs	r2, #10
 8004078:	492d      	ldr	r1, [pc, #180]	; (8004130 <menu+0x308c>)
 800407a:	4618      	mov	r0, r3
 800407c:	f008 f914 	bl	800c2a8 <itoa>
			lcd_print(2, 14, snum);
 8004080:	4a2b      	ldr	r2, [pc, #172]	; (8004130 <menu+0x308c>)
 8004082:	210e      	movs	r1, #14
 8004084:	2002      	movs	r0, #2
 8004086:	f003 fdbd 	bl	8007c04 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800408a:	4b21      	ldr	r3, [pc, #132]	; (8004110 <menu+0x306c>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	220a      	movs	r2, #10
 8004090:	4927      	ldr	r1, [pc, #156]	; (8004130 <menu+0x308c>)
 8004092:	4618      	mov	r0, r3
 8004094:	f008 f908 	bl	800c2a8 <itoa>
			lcd_print(2, 15, snum);
 8004098:	4a25      	ldr	r2, [pc, #148]	; (8004130 <menu+0x308c>)
 800409a:	210f      	movs	r1, #15
 800409c:	2002      	movs	r0, #2
 800409e:	f003 fdb1 	bl	8007c04 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80040a2:	4b1a      	ldr	r3, [pc, #104]	; (800410c <menu+0x3068>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	220a      	movs	r2, #10
 80040a8:	4921      	ldr	r1, [pc, #132]	; (8004130 <menu+0x308c>)
 80040aa:	4618      	mov	r0, r3
 80040ac:	f008 f8fc 	bl	800c2a8 <itoa>
			lcd_print(2, 16, snum);
 80040b0:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <menu+0x308c>)
 80040b2:	2110      	movs	r1, #16
 80040b4:	2002      	movs	r0, #2
 80040b6:	f003 fda5 	bl	8007c04 <lcd_print>

			lcd_print(2, 1, "           ");
 80040ba:	4a1e      	ldr	r2, [pc, #120]	; (8004134 <menu+0x3090>)
 80040bc:	2101      	movs	r1, #1
 80040be:	2002      	movs	r0, #2
 80040c0:	f003 fda0 	bl	8007c04 <lcd_print>
 80040c4:	e048      	b.n	8004158 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80040c6:	4b17      	ldr	r3, [pc, #92]	; (8004124 <menu+0x3080>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d144      	bne.n	8004158 <menu+0x30b4>
			if(dilSecim == 0) {
 80040ce:	4b07      	ldr	r3, [pc, #28]	; (80040ec <menu+0x3048>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d132      	bne.n	800413c <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80040d6:	4a14      	ldr	r2, [pc, #80]	; (8004128 <menu+0x3084>)
 80040d8:	2101      	movs	r1, #1
 80040da:	2001      	movs	r0, #1
 80040dc:	f003 fd92 	bl	8007c04 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80040e0:	4a15      	ldr	r2, [pc, #84]	; (8004138 <menu+0x3094>)
 80040e2:	2101      	movs	r1, #1
 80040e4:	2002      	movs	r0, #2
 80040e6:	f003 fd8d 	bl	8007c04 <lcd_print>
 80040ea:	e035      	b.n	8004158 <menu+0x30b4>
 80040ec:	20000241 	.word	0x20000241
 80040f0:	0800d268 	.word	0x0800d268
 80040f4:	40010800 	.word	0x40010800
 80040f8:	2000024f 	.word	0x2000024f
 80040fc:	2000023e 	.word	0x2000023e
 8004100:	20000118 	.word	0x20000118
 8004104:	2000024c 	.word	0x2000024c
 8004108:	20000220 	.word	0x20000220
 800410c:	2000021d 	.word	0x2000021d
 8004110:	2000021e 	.word	0x2000021e
 8004114:	20000000 	.word	0x20000000
 8004118:	20000001 	.word	0x20000001
 800411c:	2000021f 	.word	0x2000021f
 8004120:	20000261 	.word	0x20000261
 8004124:	20000240 	.word	0x20000240
 8004128:	0800d8f0 	.word	0x0800d8f0
 800412c:	0800d904 	.word	0x0800d904
 8004130:	20000188 	.word	0x20000188
 8004134:	0800d918 	.word	0x0800d918
 8004138:	0800d924 	.word	0x0800d924
			} else if(dilSecim == 1) {
 800413c:	4b94      	ldr	r3, [pc, #592]	; (8004390 <menu+0x32ec>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d109      	bne.n	8004158 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004144:	4a93      	ldr	r2, [pc, #588]	; (8004394 <menu+0x32f0>)
 8004146:	2101      	movs	r1, #1
 8004148:	2001      	movs	r0, #1
 800414a:	f003 fd5b 	bl	8007c04 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800414e:	4a92      	ldr	r2, [pc, #584]	; (8004398 <menu+0x32f4>)
 8004150:	2101      	movs	r1, #1
 8004152:	2002      	movs	r0, #2
 8004154:	f003 fd56 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004158:	2102      	movs	r1, #2
 800415a:	4890      	ldr	r0, [pc, #576]	; (800439c <menu+0x32f8>)
 800415c:	f005 f878 	bl	8009250 <HAL_GPIO_ReadPin>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d119      	bne.n	800419a <menu+0x30f6>
 8004166:	4b8e      	ldr	r3, [pc, #568]	; (80043a0 <menu+0x32fc>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	f083 0301 	eor.w	r3, r3, #1
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d012      	beq.n	800419a <menu+0x30f6>
 8004174:	4b8b      	ldr	r3, [pc, #556]	; (80043a4 <menu+0x3300>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00e      	beq.n	800419a <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 800417c:	4b8a      	ldr	r3, [pc, #552]	; (80043a8 <menu+0x3304>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	b2da      	uxtb	r2, r3
 8004184:	4b88      	ldr	r3, [pc, #544]	; (80043a8 <menu+0x3304>)
 8004186:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004188:	4b87      	ldr	r3, [pc, #540]	; (80043a8 <menu+0x3304>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d902      	bls.n	8004196 <menu+0x30f2>
				calismaSayModu = 0;
 8004190:	4b85      	ldr	r3, [pc, #532]	; (80043a8 <menu+0x3304>)
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004196:	f000 fb5b 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800419a:	2104      	movs	r1, #4
 800419c:	487f      	ldr	r0, [pc, #508]	; (800439c <menu+0x32f8>)
 800419e:	f005 f857 	bl	8009250 <HAL_GPIO_ReadPin>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d119      	bne.n	80041dc <menu+0x3138>
 80041a8:	4b7d      	ldr	r3, [pc, #500]	; (80043a0 <menu+0x32fc>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	f083 0301 	eor.w	r3, r3, #1
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d012      	beq.n	80041dc <menu+0x3138>
 80041b6:	4b7b      	ldr	r3, [pc, #492]	; (80043a4 <menu+0x3300>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00e      	beq.n	80041dc <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80041be:	4b7a      	ldr	r3, [pc, #488]	; (80043a8 <menu+0x3304>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	4b78      	ldr	r3, [pc, #480]	; (80043a8 <menu+0x3304>)
 80041c8:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80041ca:	4b77      	ldr	r3, [pc, #476]	; (80043a8 <menu+0x3304>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <menu+0x3134>
		   		calismaSayModu = 1;
 80041d2:	4b75      	ldr	r3, [pc, #468]	; (80043a8 <menu+0x3304>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80041d8:	f000 fb3a 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80041dc:	2108      	movs	r1, #8
 80041de:	486f      	ldr	r0, [pc, #444]	; (800439c <menu+0x32f8>)
 80041e0:	f005 f836 	bl	8009250 <HAL_GPIO_ReadPin>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d12b      	bne.n	8004242 <menu+0x319e>
 80041ea:	4b6d      	ldr	r3, [pc, #436]	; (80043a0 <menu+0x32fc>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	f083 0301 	eor.w	r3, r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d024      	beq.n	8004242 <menu+0x319e>
			eepromData[32] = 0;
 80041f8:	4b6c      	ldr	r3, [pc, #432]	; (80043ac <menu+0x3308>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004200:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <menu+0x3308>)
 8004202:	2200      	movs	r2, #0
 8004204:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004206:	4b69      	ldr	r3, [pc, #420]	; (80043ac <menu+0x3308>)
 8004208:	2200      	movs	r2, #0
 800420a:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 800420c:	4b67      	ldr	r3, [pc, #412]	; (80043ac <menu+0x3308>)
 800420e:	2200      	movs	r2, #0
 8004210:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004212:	4b66      	ldr	r3, [pc, #408]	; (80043ac <menu+0x3308>)
 8004214:	2200      	movs	r2, #0
 8004216:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004218:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <menu+0x330c>)
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800421e:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <menu+0x3310>)
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004224:	4b64      	ldr	r3, [pc, #400]	; (80043b8 <menu+0x3314>)
 8004226:	2200      	movs	r2, #0
 8004228:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800422a:	4b64      	ldr	r3, [pc, #400]	; (80043bc <menu+0x3318>)
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004230:	4b63      	ldr	r3, [pc, #396]	; (80043c0 <menu+0x331c>)
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004236:	4b5c      	ldr	r3, [pc, #368]	; (80043a8 <menu+0x3304>)
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 800423c:	4b61      	ldr	r3, [pc, #388]	; (80043c4 <menu+0x3320>)
 800423e:	2201      	movs	r2, #1
 8004240:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004242:	4b61      	ldr	r3, [pc, #388]	; (80043c8 <menu+0x3324>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b1e      	cmp	r3, #30
 8004248:	d16f      	bne.n	800432a <menu+0x3286>
		calismaSayModu = 0;
 800424a:	4b57      	ldr	r3, [pc, #348]	; (80043a8 <menu+0x3304>)
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004250:	4b4f      	ldr	r3, [pc, #316]	; (8004390 <menu+0x32ec>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004258:	4a5c      	ldr	r2, [pc, #368]	; (80043cc <menu+0x3328>)
 800425a:	2101      	movs	r1, #1
 800425c:	2001      	movs	r0, #1
 800425e:	f003 fcd1 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004262:	4a5b      	ldr	r2, [pc, #364]	; (80043d0 <menu+0x332c>)
 8004264:	2101      	movs	r1, #1
 8004266:	2002      	movs	r0, #2
 8004268:	f003 fccc 	bl	8007c04 <lcd_print>
 800426c:	e00d      	b.n	800428a <menu+0x31e6>
		} else if(dilSecim == 1) {
 800426e:	4b48      	ldr	r3, [pc, #288]	; (8004390 <menu+0x32ec>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d109      	bne.n	800428a <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004276:	4a57      	ldr	r2, [pc, #348]	; (80043d4 <menu+0x3330>)
 8004278:	2101      	movs	r1, #1
 800427a:	2001      	movs	r0, #1
 800427c:	f003 fcc2 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004280:	4a55      	ldr	r2, [pc, #340]	; (80043d8 <menu+0x3334>)
 8004282:	2101      	movs	r1, #1
 8004284:	2002      	movs	r0, #2
 8004286:	f003 fcbd 	bl	8007c04 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800428a:	2102      	movs	r1, #2
 800428c:	4843      	ldr	r0, [pc, #268]	; (800439c <menu+0x32f8>)
 800428e:	f004 ffdf 	bl	8009250 <HAL_GPIO_ReadPin>
 8004292:	4603      	mov	r3, r0
 8004294:	2b01      	cmp	r3, #1
 8004296:	d115      	bne.n	80042c4 <menu+0x3220>
 8004298:	4b41      	ldr	r3, [pc, #260]	; (80043a0 <menu+0x32fc>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	f083 0301 	eor.w	r3, r3, #1
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00e      	beq.n	80042c4 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80042a6:	4b3a      	ldr	r3, [pc, #232]	; (8004390 <menu+0x32ec>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	3301      	adds	r3, #1
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4b38      	ldr	r3, [pc, #224]	; (8004390 <menu+0x32ec>)
 80042b0:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80042b2:	4b37      	ldr	r3, [pc, #220]	; (8004390 <menu+0x32ec>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d902      	bls.n	80042c0 <menu+0x321c>
				dilSecim = 0;
 80042ba:	4b35      	ldr	r3, [pc, #212]	; (8004390 <menu+0x32ec>)
 80042bc:	2200      	movs	r2, #0
 80042be:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80042c0:	f000 fac6 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80042c4:	2104      	movs	r1, #4
 80042c6:	4835      	ldr	r0, [pc, #212]	; (800439c <menu+0x32f8>)
 80042c8:	f004 ffc2 	bl	8009250 <HAL_GPIO_ReadPin>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d115      	bne.n	80042fe <menu+0x325a>
 80042d2:	4b33      	ldr	r3, [pc, #204]	; (80043a0 <menu+0x32fc>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	f083 0301 	eor.w	r3, r3, #1
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00e      	beq.n	80042fe <menu+0x325a>
			dilSecim = dilSecim - 1;
 80042e0:	4b2b      	ldr	r3, [pc, #172]	; (8004390 <menu+0x32ec>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	4b29      	ldr	r3, [pc, #164]	; (8004390 <menu+0x32ec>)
 80042ea:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80042ec:	4b28      	ldr	r3, [pc, #160]	; (8004390 <menu+0x32ec>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <menu+0x3256>
		   		dilSecim = 1;
 80042f4:	4b26      	ldr	r3, [pc, #152]	; (8004390 <menu+0x32ec>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80042fa:	f000 faa9 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042fe:	2108      	movs	r1, #8
 8004300:	4826      	ldr	r0, [pc, #152]	; (800439c <menu+0x32f8>)
 8004302:	f004 ffa5 	bl	8009250 <HAL_GPIO_ReadPin>
 8004306:	4603      	mov	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	d10e      	bne.n	800432a <menu+0x3286>
 800430c:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <menu+0x32fc>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	f083 0301 	eor.w	r3, r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <menu+0x3286>
			eepromData[33] = dilSecim;
 800431a:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <menu+0x32ec>)
 800431c:	781a      	ldrb	r2, [r3, #0]
 800431e:	4b23      	ldr	r3, [pc, #140]	; (80043ac <menu+0x3308>)
 8004320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004324:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <menu+0x3320>)
 8004326:	2201      	movs	r2, #1
 8004328:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800432a:	4b27      	ldr	r3, [pc, #156]	; (80043c8 <menu+0x3324>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b1f      	cmp	r3, #31
 8004330:	f040 80b7 	bne.w	80044a2 <menu+0x33fe>
		calismaSayModu = 0;
 8004334:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <menu+0x3304>)
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800433a:	4a28      	ldr	r2, [pc, #160]	; (80043dc <menu+0x3338>)
 800433c:	2101      	movs	r1, #1
 800433e:	2001      	movs	r0, #1
 8004340:	f003 fc60 	bl	8007c04 <lcd_print>

		if(iotMode == 0) {
 8004344:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <menu+0x333c>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d113      	bne.n	8004374 <menu+0x32d0>
			if(dilSecim == 0) {
 800434c:	4b10      	ldr	r3, [pc, #64]	; (8004390 <menu+0x32ec>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004354:	4a23      	ldr	r2, [pc, #140]	; (80043e4 <menu+0x3340>)
 8004356:	2101      	movs	r1, #1
 8004358:	2002      	movs	r0, #2
 800435a:	f003 fc53 	bl	8007c04 <lcd_print>
 800435e:	e050      	b.n	8004402 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <menu+0x32ec>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d14c      	bne.n	8004402 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004368:	4a1f      	ldr	r2, [pc, #124]	; (80043e8 <menu+0x3344>)
 800436a:	2101      	movs	r1, #1
 800436c:	2002      	movs	r0, #2
 800436e:	f003 fc49 	bl	8007c04 <lcd_print>
 8004372:	e046      	b.n	8004402 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004374:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <menu+0x333c>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d142      	bne.n	8004402 <menu+0x335e>
			if(dilSecim == 0) {
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <menu+0x32ec>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d135      	bne.n	80043f0 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004384:	4a19      	ldr	r2, [pc, #100]	; (80043ec <menu+0x3348>)
 8004386:	2101      	movs	r1, #1
 8004388:	2002      	movs	r0, #2
 800438a:	f003 fc3b 	bl	8007c04 <lcd_print>
 800438e:	e038      	b.n	8004402 <menu+0x335e>
 8004390:	20000241 	.word	0x20000241
 8004394:	0800d904 	.word	0x0800d904
 8004398:	0800d938 	.word	0x0800d938
 800439c:	40010800 	.word	0x40010800
 80043a0:	2000024f 	.word	0x2000024f
 80043a4:	20000261 	.word	0x20000261
 80043a8:	20000240 	.word	0x20000240
 80043ac:	20000118 	.word	0x20000118
 80043b0:	2000021f 	.word	0x2000021f
 80043b4:	20000001 	.word	0x20000001
 80043b8:	20000000 	.word	0x20000000
 80043bc:	2000021e 	.word	0x2000021e
 80043c0:	2000021d 	.word	0x2000021d
 80043c4:	2000024c 	.word	0x2000024c
 80043c8:	20000220 	.word	0x20000220
 80043cc:	0800d94c 	.word	0x0800d94c
 80043d0:	0800d960 	.word	0x0800d960
 80043d4:	0800d974 	.word	0x0800d974
 80043d8:	0800d988 	.word	0x0800d988
 80043dc:	0800d99c 	.word	0x0800d99c
 80043e0:	2000023f 	.word	0x2000023f
 80043e4:	0800d1f4 	.word	0x0800d1f4
 80043e8:	0800d208 	.word	0x0800d208
 80043ec:	0800d254 	.word	0x0800d254
			} else if(dilSecim == 1) {
 80043f0:	4baf      	ldr	r3, [pc, #700]	; (80046b0 <menu+0x360c>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d104      	bne.n	8004402 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80043f8:	4aae      	ldr	r2, [pc, #696]	; (80046b4 <menu+0x3610>)
 80043fa:	2101      	movs	r1, #1
 80043fc:	2002      	movs	r0, #2
 80043fe:	f003 fc01 	bl	8007c04 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004402:	2102      	movs	r1, #2
 8004404:	48ac      	ldr	r0, [pc, #688]	; (80046b8 <menu+0x3614>)
 8004406:	f004 ff23 	bl	8009250 <HAL_GPIO_ReadPin>
 800440a:	4603      	mov	r3, r0
 800440c:	2b01      	cmp	r3, #1
 800440e:	d115      	bne.n	800443c <menu+0x3398>
 8004410:	4baa      	ldr	r3, [pc, #680]	; (80046bc <menu+0x3618>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	f083 0301 	eor.w	r3, r3, #1
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00e      	beq.n	800443c <menu+0x3398>
			iotMode = iotMode + 1;
 800441e:	4ba8      	ldr	r3, [pc, #672]	; (80046c0 <menu+0x361c>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	3301      	adds	r3, #1
 8004424:	b2da      	uxtb	r2, r3
 8004426:	4ba6      	ldr	r3, [pc, #664]	; (80046c0 <menu+0x361c>)
 8004428:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800442a:	4ba5      	ldr	r3, [pc, #660]	; (80046c0 <menu+0x361c>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d902      	bls.n	8004438 <menu+0x3394>
				iotMode = 0;
 8004432:	4ba3      	ldr	r3, [pc, #652]	; (80046c0 <menu+0x361c>)
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004438:	f000 fa0a 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800443c:	2104      	movs	r1, #4
 800443e:	489e      	ldr	r0, [pc, #632]	; (80046b8 <menu+0x3614>)
 8004440:	f004 ff06 	bl	8009250 <HAL_GPIO_ReadPin>
 8004444:	4603      	mov	r3, r0
 8004446:	2b01      	cmp	r3, #1
 8004448:	d115      	bne.n	8004476 <menu+0x33d2>
 800444a:	4b9c      	ldr	r3, [pc, #624]	; (80046bc <menu+0x3618>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	f083 0301 	eor.w	r3, r3, #1
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00e      	beq.n	8004476 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004458:	4b99      	ldr	r3, [pc, #612]	; (80046c0 <menu+0x361c>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	3b01      	subs	r3, #1
 800445e:	b2da      	uxtb	r2, r3
 8004460:	4b97      	ldr	r3, [pc, #604]	; (80046c0 <menu+0x361c>)
 8004462:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004464:	4b96      	ldr	r3, [pc, #600]	; (80046c0 <menu+0x361c>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <menu+0x33ce>
		   		iotMode = 1;
 800446c:	4b94      	ldr	r3, [pc, #592]	; (80046c0 <menu+0x361c>)
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004472:	f000 f9ed 	bl	8004850 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004476:	2108      	movs	r1, #8
 8004478:	488f      	ldr	r0, [pc, #572]	; (80046b8 <menu+0x3614>)
 800447a:	f004 fee9 	bl	8009250 <HAL_GPIO_ReadPin>
 800447e:	4603      	mov	r3, r0
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10e      	bne.n	80044a2 <menu+0x33fe>
 8004484:	4b8d      	ldr	r3, [pc, #564]	; (80046bc <menu+0x3618>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	f083 0301 	eor.w	r3, r3, #1
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004492:	4b8b      	ldr	r3, [pc, #556]	; (80046c0 <menu+0x361c>)
 8004494:	781a      	ldrb	r2, [r3, #0]
 8004496:	4b8b      	ldr	r3, [pc, #556]	; (80046c4 <menu+0x3620>)
 8004498:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 800449c:	4b8a      	ldr	r3, [pc, #552]	; (80046c8 <menu+0x3624>)
 800449e:	2201      	movs	r2, #1
 80044a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80044a2:	4b8a      	ldr	r3, [pc, #552]	; (80046cc <menu+0x3628>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d150      	bne.n	800454c <menu+0x34a8>
		calismaSayModu = 0;
 80044aa:	4b89      	ldr	r3, [pc, #548]	; (80046d0 <menu+0x362c>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80044b0:	4b7f      	ldr	r3, [pc, #508]	; (80046b0 <menu+0x360c>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d105      	bne.n	80044c4 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 80044b8:	4a86      	ldr	r2, [pc, #536]	; (80046d4 <menu+0x3630>)
 80044ba:	2101      	movs	r1, #1
 80044bc:	2001      	movs	r0, #1
 80044be:	f003 fba1 	bl	8007c04 <lcd_print>
 80044c2:	e004      	b.n	80044ce <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80044c4:	4a84      	ldr	r2, [pc, #528]	; (80046d8 <menu+0x3634>)
 80044c6:	2101      	movs	r1, #1
 80044c8:	2001      	movs	r0, #1
 80044ca:	f003 fb9b 	bl	8007c04 <lcd_print>
		}
		printMachineCredentials(1);
 80044ce:	2001      	movs	r0, #1
 80044d0:	f003 f94c 	bl	800776c <printMachineCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044d4:	2102      	movs	r1, #2
 80044d6:	4878      	ldr	r0, [pc, #480]	; (80046b8 <menu+0x3614>)
 80044d8:	f004 feba 	bl	8009250 <HAL_GPIO_ReadPin>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d134      	bne.n	800454c <menu+0x34a8>
 80044e2:	2104      	movs	r1, #4
 80044e4:	4874      	ldr	r0, [pc, #464]	; (80046b8 <menu+0x3614>)
 80044e6:	f004 feb3 	bl	8009250 <HAL_GPIO_ReadPin>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d12d      	bne.n	800454c <menu+0x34a8>
 80044f0:	4b72      	ldr	r3, [pc, #456]	; (80046bc <menu+0x3618>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	f083 0301 	eor.w	r3, r3, #1
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d026      	beq.n	800454c <menu+0x34a8>
			takeMachineID();
 80044fe:	f002 fab3 	bl	8006a68 <takeMachineID>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004502:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004506:	9302      	str	r3, [sp, #8]
 8004508:	236e      	movs	r3, #110	; 0x6e
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	4b6d      	ldr	r3, [pc, #436]	; (80046c4 <menu+0x3620>)
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	236e      	movs	r3, #110	; 0x6e
 8004512:	2200      	movs	r2, #0
 8004514:	21a0      	movs	r1, #160	; 0xa0
 8004516:	4871      	ldr	r0, [pc, #452]	; (80046dc <menu+0x3638>)
 8004518:	f005 fa4e 	bl	80099b8 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 800451c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004520:	f004 f8c6 	bl	80086b0 <HAL_Delay>
			memcpy(machineIDInt, &eepromData[idStartPos], 12);
 8004524:	4b6e      	ldr	r3, [pc, #440]	; (80046e0 <menu+0x363c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a66      	ldr	r2, [pc, #408]	; (80046c4 <menu+0x3620>)
 800452a:	441a      	add	r2, r3
 800452c:	4b6d      	ldr	r3, [pc, #436]	; (80046e4 <menu+0x3640>)
 800452e:	6810      	ldr	r0, [r2, #0]
 8004530:	6851      	ldr	r1, [r2, #4]
 8004532:	6892      	ldr	r2, [r2, #8]
 8004534:	6018      	str	r0, [r3, #0]
 8004536:	6059      	str	r1, [r3, #4]
 8004538:	609a      	str	r2, [r3, #8]
			convertArrays(1);
 800453a:	2001      	movs	r0, #1
 800453c:	f7fc f932 	bl	80007a4 <convertArrays>

			HAL_Delay(250);
 8004540:	20fa      	movs	r0, #250	; 0xfa
 8004542:	f004 f8b5 	bl	80086b0 <HAL_Delay>
			printMachineCredentials(1);
 8004546:	2001      	movs	r0, #1
 8004548:	f003 f910 	bl	800776c <printMachineCredentials>
		}
	}

	if (menuSayac == 33) {
 800454c:	4b5f      	ldr	r3, [pc, #380]	; (80046cc <menu+0x3628>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b21      	cmp	r3, #33	; 0x21
 8004552:	d14a      	bne.n	80045ea <menu+0x3546>
		calismaSayModu = 0;
 8004554:	4b5e      	ldr	r3, [pc, #376]	; (80046d0 <menu+0x362c>)
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 800455a:	4a63      	ldr	r2, [pc, #396]	; (80046e8 <menu+0x3644>)
 800455c:	2101      	movs	r1, #1
 800455e:	2001      	movs	r0, #1
 8004560:	f003 fb50 	bl	8007c04 <lcd_print>
		printMachineCredentials(2);
 8004564:	2002      	movs	r0, #2
 8004566:	f003 f901 	bl	800776c <printMachineCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800456a:	2102      	movs	r1, #2
 800456c:	4852      	ldr	r0, [pc, #328]	; (80046b8 <menu+0x3614>)
 800456e:	f004 fe6f 	bl	8009250 <HAL_GPIO_ReadPin>
 8004572:	4603      	mov	r3, r0
 8004574:	2b01      	cmp	r3, #1
 8004576:	d138      	bne.n	80045ea <menu+0x3546>
 8004578:	2104      	movs	r1, #4
 800457a:	484f      	ldr	r0, [pc, #316]	; (80046b8 <menu+0x3614>)
 800457c:	f004 fe68 	bl	8009250 <HAL_GPIO_ReadPin>
 8004580:	4603      	mov	r3, r0
 8004582:	2b01      	cmp	r3, #1
 8004584:	d131      	bne.n	80045ea <menu+0x3546>
 8004586:	4b4d      	ldr	r3, [pc, #308]	; (80046bc <menu+0x3618>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	f083 0301 	eor.w	r3, r3, #1
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d02a      	beq.n	80045ea <menu+0x3546>
			takeWifiSSID();
 8004594:	f002 fc08 	bl	8006da8 <takeWifiSSID>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004598:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800459c:	9302      	str	r3, [sp, #8]
 800459e:	236e      	movs	r3, #110	; 0x6e
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	4b48      	ldr	r3, [pc, #288]	; (80046c4 <menu+0x3620>)
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	236e      	movs	r3, #110	; 0x6e
 80045a8:	2200      	movs	r2, #0
 80045aa:	21a0      	movs	r1, #160	; 0xa0
 80045ac:	484b      	ldr	r0, [pc, #300]	; (80046dc <menu+0x3638>)
 80045ae:	f005 fa03 	bl	80099b8 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 80045b2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80045b6:	f004 f87b 	bl	80086b0 <HAL_Delay>
			memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
 80045ba:	4b4c      	ldr	r3, [pc, #304]	; (80046ec <menu+0x3648>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a41      	ldr	r2, [pc, #260]	; (80046c4 <menu+0x3620>)
 80045c0:	441a      	add	r2, r3
 80045c2:	4b4b      	ldr	r3, [pc, #300]	; (80046f0 <menu+0x364c>)
 80045c4:	6811      	ldr	r1, [r2, #0]
 80045c6:	6855      	ldr	r5, [r2, #4]
 80045c8:	6894      	ldr	r4, [r2, #8]
 80045ca:	68d0      	ldr	r0, [r2, #12]
 80045cc:	6019      	str	r1, [r3, #0]
 80045ce:	605d      	str	r5, [r3, #4]
 80045d0:	609c      	str	r4, [r3, #8]
 80045d2:	60d8      	str	r0, [r3, #12]
 80045d4:	6911      	ldr	r1, [r2, #16]
 80045d6:	6119      	str	r1, [r3, #16]
			convertArrays(2);
 80045d8:	2002      	movs	r0, #2
 80045da:	f7fc f8e3 	bl	80007a4 <convertArrays>

			HAL_Delay(250);
 80045de:	20fa      	movs	r0, #250	; 0xfa
 80045e0:	f004 f866 	bl	80086b0 <HAL_Delay>
			printMachineCredentials(2);
 80045e4:	2002      	movs	r0, #2
 80045e6:	f003 f8c1 	bl	800776c <printMachineCredentials>
		}
	}

	if (menuSayac == 34) {
 80045ea:	4b38      	ldr	r3, [pc, #224]	; (80046cc <menu+0x3628>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b22      	cmp	r3, #34	; 0x22
 80045f0:	d14a      	bne.n	8004688 <menu+0x35e4>
		calismaSayModu = 0;
 80045f2:	4b37      	ldr	r3, [pc, #220]	; (80046d0 <menu+0x362c>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80045f8:	4a3e      	ldr	r2, [pc, #248]	; (80046f4 <menu+0x3650>)
 80045fa:	2101      	movs	r1, #1
 80045fc:	2001      	movs	r0, #1
 80045fe:	f003 fb01 	bl	8007c04 <lcd_print>
		printMachineCredentials(3);
 8004602:	2003      	movs	r0, #3
 8004604:	f003 f8b2 	bl	800776c <printMachineCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004608:	2102      	movs	r1, #2
 800460a:	482b      	ldr	r0, [pc, #172]	; (80046b8 <menu+0x3614>)
 800460c:	f004 fe20 	bl	8009250 <HAL_GPIO_ReadPin>
 8004610:	4603      	mov	r3, r0
 8004612:	2b01      	cmp	r3, #1
 8004614:	d138      	bne.n	8004688 <menu+0x35e4>
 8004616:	2104      	movs	r1, #4
 8004618:	4827      	ldr	r0, [pc, #156]	; (80046b8 <menu+0x3614>)
 800461a:	f004 fe19 	bl	8009250 <HAL_GPIO_ReadPin>
 800461e:	4603      	mov	r3, r0
 8004620:	2b01      	cmp	r3, #1
 8004622:	d131      	bne.n	8004688 <menu+0x35e4>
 8004624:	4b25      	ldr	r3, [pc, #148]	; (80046bc <menu+0x3618>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	f083 0301 	eor.w	r3, r3, #1
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d02a      	beq.n	8004688 <menu+0x35e4>
			takeWifiPass();
 8004632:	f002 fd73 	bl	800711c <takeWifiPass>

			HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004636:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800463a:	9302      	str	r3, [sp, #8]
 800463c:	236e      	movs	r3, #110	; 0x6e
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <menu+0x3620>)
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	236e      	movs	r3, #110	; 0x6e
 8004646:	2200      	movs	r2, #0
 8004648:	21a0      	movs	r1, #160	; 0xa0
 800464a:	4824      	ldr	r0, [pc, #144]	; (80046dc <menu+0x3638>)
 800464c:	f005 f9b4 	bl	80099b8 <HAL_I2C_Mem_Read>
			HAL_Delay(1500);
 8004650:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004654:	f004 f82c 	bl	80086b0 <HAL_Delay>
			memcpy(wifiPassInt, &eepromData[passStartPos], 20);
 8004658:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <menu+0x3654>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a19      	ldr	r2, [pc, #100]	; (80046c4 <menu+0x3620>)
 800465e:	441a      	add	r2, r3
 8004660:	4b26      	ldr	r3, [pc, #152]	; (80046fc <menu+0x3658>)
 8004662:	6811      	ldr	r1, [r2, #0]
 8004664:	6855      	ldr	r5, [r2, #4]
 8004666:	6894      	ldr	r4, [r2, #8]
 8004668:	68d0      	ldr	r0, [r2, #12]
 800466a:	6019      	str	r1, [r3, #0]
 800466c:	605d      	str	r5, [r3, #4]
 800466e:	609c      	str	r4, [r3, #8]
 8004670:	60d8      	str	r0, [r3, #12]
 8004672:	6911      	ldr	r1, [r2, #16]
 8004674:	6119      	str	r1, [r3, #16]
			convertArrays(3);
 8004676:	2003      	movs	r0, #3
 8004678:	f7fc f894 	bl	80007a4 <convertArrays>

			HAL_Delay(250);
 800467c:	20fa      	movs	r0, #250	; 0xfa
 800467e:	f004 f817 	bl	80086b0 <HAL_Delay>
			printMachineCredentials(3);
 8004682:	2003      	movs	r0, #3
 8004684:	f003 f872 	bl	800776c <printMachineCredentials>
		}
	}

	if (menuSayac == 35) {
 8004688:	4b10      	ldr	r3, [pc, #64]	; (80046cc <menu+0x3628>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b23      	cmp	r3, #35	; 0x23
 800468e:	d17a      	bne.n	8004786 <menu+0x36e2>
		if(dilSecim == 0) {
 8004690:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <menu+0x360c>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d137      	bne.n	8004708 <menu+0x3664>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004698:	4a19      	ldr	r2, [pc, #100]	; (8004700 <menu+0x365c>)
 800469a:	2101      	movs	r1, #1
 800469c:	2001      	movs	r0, #1
 800469e:	f003 fab1 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 80046a2:	4a18      	ldr	r2, [pc, #96]	; (8004704 <menu+0x3660>)
 80046a4:	2101      	movs	r1, #1
 80046a6:	2002      	movs	r0, #2
 80046a8:	f003 faac 	bl	8007c04 <lcd_print>
 80046ac:	e03a      	b.n	8004724 <menu+0x3680>
 80046ae:	bf00      	nop
 80046b0:	20000241 	.word	0x20000241
 80046b4:	0800d268 	.word	0x0800d268
 80046b8:	40010800 	.word	0x40010800
 80046bc:	2000024f 	.word	0x2000024f
 80046c0:	2000023f 	.word	0x2000023f
 80046c4:	20000118 	.word	0x20000118
 80046c8:	2000024c 	.word	0x2000024c
 80046cc:	20000220 	.word	0x20000220
 80046d0:	20000240 	.word	0x20000240
 80046d4:	0800d9b0 	.word	0x0800d9b0
 80046d8:	0800d9c4 	.word	0x0800d9c4
 80046dc:	200003a8 	.word	0x200003a8
 80046e0:	20000004 	.word	0x20000004
 80046e4:	200001c4 	.word	0x200001c4
 80046e8:	0800d9d8 	.word	0x0800d9d8
 80046ec:	20000008 	.word	0x20000008
 80046f0:	200001d0 	.word	0x200001d0
 80046f4:	0800d9ec 	.word	0x0800d9ec
 80046f8:	2000000c 	.word	0x2000000c
 80046fc:	200001e4 	.word	0x200001e4
 8004700:	0800da00 	.word	0x0800da00
 8004704:	0800da14 	.word	0x0800da14
		} else if(dilSecim == 1) {
 8004708:	4b20      	ldr	r3, [pc, #128]	; (800478c <menu+0x36e8>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d109      	bne.n	8004724 <menu+0x3680>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004710:	4a1f      	ldr	r2, [pc, #124]	; (8004790 <menu+0x36ec>)
 8004712:	2101      	movs	r1, #1
 8004714:	2001      	movs	r0, #1
 8004716:	f003 fa75 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800471a:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <menu+0x36f0>)
 800471c:	2101      	movs	r1, #1
 800471e:	2002      	movs	r0, #2
 8004720:	f003 fa70 	bl	8007c04 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004724:	2108      	movs	r1, #8
 8004726:	481c      	ldr	r0, [pc, #112]	; (8004798 <menu+0x36f4>)
 8004728:	f004 fd92 	bl	8009250 <HAL_GPIO_ReadPin>
 800472c:	4603      	mov	r3, r0
 800472e:	2b01      	cmp	r3, #1
 8004730:	d129      	bne.n	8004786 <menu+0x36e2>
			menuGiris = 0;
 8004732:	4b1a      	ldr	r3, [pc, #104]	; (800479c <menu+0x36f8>)
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004738:	bf00      	nop
 800473a:	4819      	ldr	r0, [pc, #100]	; (80047a0 <menu+0x36fc>)
 800473c:	f005 fbb1 	bl	8009ea2 <HAL_I2C_GetError>
 8004740:	4603      	mov	r3, r0
 8004742:	2b04      	cmp	r3, #4
 8004744:	d0f9      	beq.n	800473a <menu+0x3696>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004746:	bf00      	nop
 8004748:	4815      	ldr	r0, [pc, #84]	; (80047a0 <menu+0x36fc>)
 800474a:	f005 fb9d 	bl	8009e88 <HAL_I2C_GetState>
 800474e:	4603      	mov	r3, r0
 8004750:	2b20      	cmp	r3, #32
 8004752:	d1f9      	bne.n	8004748 <menu+0x36a4>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004754:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004758:	9302      	str	r3, [sp, #8]
 800475a:	236e      	movs	r3, #110	; 0x6e
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <menu+0x3700>)
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	236e      	movs	r3, #110	; 0x6e
 8004764:	2200      	movs	r2, #0
 8004766:	21a0      	movs	r1, #160	; 0xa0
 8004768:	480d      	ldr	r0, [pc, #52]	; (80047a0 <menu+0x36fc>)
 800476a:	f005 f82b 	bl	80097c4 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 800476e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004772:	f003 ff9d 	bl	80086b0 <HAL_Delay>

			lcd_clear();
 8004776:	f003 fa71 	bl	8007c5c <lcd_clear>
			HAL_Delay(500);
 800477a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800477e:	f003 ff97 	bl	80086b0 <HAL_Delay>
			NVIC_SystemReset();
 8004782:	f7fc fc79 	bl	8001078 <__NVIC_SystemReset>
		}
	}
}
 8004786:	bf00      	nop
 8004788:	46bd      	mov	sp, r7
 800478a:	bdb0      	pop	{r4, r5, r7, pc}
 800478c:	20000241 	.word	0x20000241
 8004790:	0800da28 	.word	0x0800da28
 8004794:	0800da3c 	.word	0x0800da3c
 8004798:	40010800 	.word	0x40010800
 800479c:	2000023d 	.word	0x2000023d
 80047a0:	200003a8 	.word	0x200003a8
 80047a4:	20000118 	.word	0x20000118

080047a8 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d105      	bne.n	80047c4 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80047b8:	4a22      	ldr	r2, [pc, #136]	; (8004844 <lcdUpdate+0x9c>)
 80047ba:	2101      	movs	r1, #1
 80047bc:	2002      	movs	r0, #2
 80047be:	f003 fa21 	bl	8007c04 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 80047c2:	e03b      	b.n	800483c <lcdUpdate+0x94>
	} else if(y==2) {
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d105      	bne.n	80047d6 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80047ca:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <lcdUpdate+0x9c>)
 80047cc:	2102      	movs	r1, #2
 80047ce:	2002      	movs	r0, #2
 80047d0:	f003 fa18 	bl	8007c04 <lcd_print>
}
 80047d4:	e032      	b.n	800483c <lcdUpdate+0x94>
	} else if(y==3) {
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d105      	bne.n	80047e8 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80047dc:	4a19      	ldr	r2, [pc, #100]	; (8004844 <lcdUpdate+0x9c>)
 80047de:	2103      	movs	r1, #3
 80047e0:	2002      	movs	r0, #2
 80047e2:	f003 fa0f 	bl	8007c04 <lcd_print>
}
 80047e6:	e029      	b.n	800483c <lcdUpdate+0x94>
	} else if(y==4) {
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d105      	bne.n	80047fa <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80047ee:	4a15      	ldr	r2, [pc, #84]	; (8004844 <lcdUpdate+0x9c>)
 80047f0:	2104      	movs	r1, #4
 80047f2:	2002      	movs	r0, #2
 80047f4:	f003 fa06 	bl	8007c04 <lcd_print>
}
 80047f8:	e020      	b.n	800483c <lcdUpdate+0x94>
	} else if(y==5) {
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	2b05      	cmp	r3, #5
 80047fe:	d105      	bne.n	800480c <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004800:	4a10      	ldr	r2, [pc, #64]	; (8004844 <lcdUpdate+0x9c>)
 8004802:	2105      	movs	r1, #5
 8004804:	2002      	movs	r0, #2
 8004806:	f003 f9fd 	bl	8007c04 <lcd_print>
}
 800480a:	e017      	b.n	800483c <lcdUpdate+0x94>
	} else if(y==6) {
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	2b06      	cmp	r3, #6
 8004810:	d105      	bne.n	800481e <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004812:	4a0c      	ldr	r2, [pc, #48]	; (8004844 <lcdUpdate+0x9c>)
 8004814:	2106      	movs	r1, #6
 8004816:	2002      	movs	r0, #2
 8004818:	f003 f9f4 	bl	8007c04 <lcd_print>
}
 800481c:	e00e      	b.n	800483c <lcdUpdate+0x94>
	} else if (y==7) {
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	2b07      	cmp	r3, #7
 8004822:	d10b      	bne.n	800483c <lcdUpdate+0x94>
		lcd_clear();
 8004824:	f003 fa1a 	bl	8007c5c <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004828:	4a07      	ldr	r2, [pc, #28]	; (8004848 <lcdUpdate+0xa0>)
 800482a:	2104      	movs	r1, #4
 800482c:	2001      	movs	r0, #1
 800482e:	f003 f9e9 	bl	8007c04 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004832:	4a06      	ldr	r2, [pc, #24]	; (800484c <lcdUpdate+0xa4>)
 8004834:	2106      	movs	r1, #6
 8004836:	2002      	movs	r0, #2
 8004838:	f003 f9e4 	bl	8007c04 <lcd_print>
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	0800da50 	.word	0x0800da50
 8004848:	0800da54 	.word	0x0800da54
 800484c:	0800da5c 	.word	0x0800da5c

08004850 <bekle>:

void bekle() {
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
	timer1=millis;
 8004854:	4b47      	ldr	r3, [pc, #284]	; (8004974 <bekle+0x124>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a47      	ldr	r2, [pc, #284]	; (8004978 <bekle+0x128>)
 800485a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800485c:	e002      	b.n	8004864 <bekle+0x14>
    	butonKontrol = 1;
 800485e:	4b47      	ldr	r3, [pc, #284]	; (800497c <bekle+0x12c>)
 8004860:	2201      	movs	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004864:	2101      	movs	r1, #1
 8004866:	4846      	ldr	r0, [pc, #280]	; (8004980 <bekle+0x130>)
 8004868:	f004 fcf2 	bl	8009250 <HAL_GPIO_ReadPin>
 800486c:	4603      	mov	r3, r0
 800486e:	2b01      	cmp	r3, #1
 8004870:	d109      	bne.n	8004886 <bekle+0x36>
 8004872:	4b40      	ldr	r3, [pc, #256]	; (8004974 <bekle+0x124>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b40      	ldr	r3, [pc, #256]	; (8004978 <bekle+0x128>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d0ef      	beq.n	800485e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800487e:	e002      	b.n	8004886 <bekle+0x36>
    	butonKontrol = 1;
 8004880:	4b3e      	ldr	r3, [pc, #248]	; (800497c <bekle+0x12c>)
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004886:	2108      	movs	r1, #8
 8004888:	483e      	ldr	r0, [pc, #248]	; (8004984 <bekle+0x134>)
 800488a:	f004 fce1 	bl	8009250 <HAL_GPIO_ReadPin>
 800488e:	4603      	mov	r3, r0
 8004890:	2b01      	cmp	r3, #1
 8004892:	d109      	bne.n	80048a8 <bekle+0x58>
 8004894:	4b37      	ldr	r3, [pc, #220]	; (8004974 <bekle+0x124>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4b37      	ldr	r3, [pc, #220]	; (8004978 <bekle+0x128>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d0ef      	beq.n	8004880 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048a0:	e002      	b.n	80048a8 <bekle+0x58>
    	butonKontrol = 1;
 80048a2:	4b36      	ldr	r3, [pc, #216]	; (800497c <bekle+0x12c>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048a8:	2102      	movs	r1, #2
 80048aa:	4835      	ldr	r0, [pc, #212]	; (8004980 <bekle+0x130>)
 80048ac:	f004 fcd0 	bl	8009250 <HAL_GPIO_ReadPin>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d109      	bne.n	80048ca <bekle+0x7a>
 80048b6:	4b2f      	ldr	r3, [pc, #188]	; (8004974 <bekle+0x124>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b2f      	ldr	r3, [pc, #188]	; (8004978 <bekle+0x128>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d0ef      	beq.n	80048a2 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048c2:	e002      	b.n	80048ca <bekle+0x7a>
    	butonKontrol = 1;
 80048c4:	4b2d      	ldr	r3, [pc, #180]	; (800497c <bekle+0x12c>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048ca:	2104      	movs	r1, #4
 80048cc:	482c      	ldr	r0, [pc, #176]	; (8004980 <bekle+0x130>)
 80048ce:	f004 fcbf 	bl	8009250 <HAL_GPIO_ReadPin>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d109      	bne.n	80048ec <bekle+0x9c>
 80048d8:	4b26      	ldr	r3, [pc, #152]	; (8004974 <bekle+0x124>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4b26      	ldr	r3, [pc, #152]	; (8004978 <bekle+0x128>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d0ef      	beq.n	80048c4 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048e4:	e002      	b.n	80048ec <bekle+0x9c>
    	butonKontrol = 1;
 80048e6:	4b25      	ldr	r3, [pc, #148]	; (800497c <bekle+0x12c>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048ec:	2108      	movs	r1, #8
 80048ee:	4824      	ldr	r0, [pc, #144]	; (8004980 <bekle+0x130>)
 80048f0:	f004 fcae 	bl	8009250 <HAL_GPIO_ReadPin>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d109      	bne.n	800490e <bekle+0xbe>
 80048fa:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <bekle+0x124>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <bekle+0x128>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d0ef      	beq.n	80048e6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004906:	e002      	b.n	800490e <bekle+0xbe>
    	butonKontrol = 1;
 8004908:	4b1c      	ldr	r3, [pc, #112]	; (800497c <bekle+0x12c>)
 800490a:	2201      	movs	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800490e:	2180      	movs	r1, #128	; 0x80
 8004910:	481c      	ldr	r0, [pc, #112]	; (8004984 <bekle+0x134>)
 8004912:	f004 fc9d 	bl	8009250 <HAL_GPIO_ReadPin>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <bekle+0xe0>
 800491c:	4b15      	ldr	r3, [pc, #84]	; (8004974 <bekle+0x124>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	4b15      	ldr	r3, [pc, #84]	; (8004978 <bekle+0x128>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d0ef      	beq.n	8004908 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004928:	e002      	b.n	8004930 <bekle+0xe0>
    	butonKontrol = 1;
 800492a:	4b14      	ldr	r3, [pc, #80]	; (800497c <bekle+0x12c>)
 800492c:	2201      	movs	r2, #1
 800492e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004934:	4813      	ldr	r0, [pc, #76]	; (8004984 <bekle+0x134>)
 8004936:	f004 fc8b 	bl	8009250 <HAL_GPIO_ReadPin>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d109      	bne.n	8004954 <bekle+0x104>
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <bekle+0x124>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <bekle+0x128>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d0ee      	beq.n	800492a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800494c:	e002      	b.n	8004954 <bekle+0x104>
    	butonKontrol = 1;
 800494e:	4b0b      	ldr	r3, [pc, #44]	; (800497c <bekle+0x12c>)
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004958:	480a      	ldr	r0, [pc, #40]	; (8004984 <bekle+0x134>)
 800495a:	f004 fc79 	bl	8009250 <HAL_GPIO_ReadPin>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d105      	bne.n	8004970 <bekle+0x120>
 8004964:	4b03      	ldr	r3, [pc, #12]	; (8004974 <bekle+0x124>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <bekle+0x128>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d0ee      	beq.n	800494e <bekle+0xfe>
    }

}
 8004970:	bf00      	nop
 8004972:	bd80      	pop	{r7, pc}
 8004974:	200001fc 	.word	0x200001fc
 8004978:	20000204 	.word	0x20000204
 800497c:	2000024f 	.word	0x2000024f
 8004980:	40010800 	.word	0x40010800
 8004984:	40011000 	.word	0x40011000

08004988 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 800498c:	4b07      	ldr	r3, [pc, #28]	; (80049ac <checkLCDBacklight+0x24>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <checkLCDBacklight+0x28>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b3b      	cmp	r3, #59	; 0x3b
 8004998:	d903      	bls.n	80049a2 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 800499a:	2000      	movs	r0, #0
 800499c:	f003 f97e 	bl	8007c9c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80049a0:	e002      	b.n	80049a8 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 80049a2:	2001      	movs	r0, #1
 80049a4:	f003 f97a 	bl	8007c9c <lcd_backlight>
}
 80049a8:	bf00      	nop
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	200001fc 	.word	0x200001fc
 80049b0:	20000218 	.word	0x20000218

080049b4 <checkBasincSalteri>:

void checkBasincSalteri() {
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80049b8:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <checkBasincSalteri+0x54>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <checkBasincSalteri+0x12>
		basincVar=1;
 80049c0:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <checkBasincSalteri+0x58>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80049c6:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <checkBasincSalteri+0x54>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d119      	bne.n	8004a02 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80049ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049d2:	480f      	ldr	r0, [pc, #60]	; (8004a10 <checkBasincSalteri+0x5c>)
 80049d4:	f004 fc3c 	bl	8009250 <HAL_GPIO_ReadPin>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80049de:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <checkBasincSalteri+0x60>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <checkBasincSalteri+0x64>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d90a      	bls.n	8004a02 <checkBasincSalteri+0x4e>
				basincVar=1;
 80049ec:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <checkBasincSalteri+0x58>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80049f2:	e006      	b.n	8004a02 <checkBasincSalteri+0x4e>
			timer5=millis;
 80049f4:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <checkBasincSalteri+0x60>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <checkBasincSalteri+0x64>)
 80049fa:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80049fc:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <checkBasincSalteri+0x58>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
}
 8004a02:	bf00      	nop
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000227 	.word	0x20000227
 8004a0c:	20000223 	.word	0x20000223
 8004a10:	40011000 	.word	0x40011000
 8004a14:	200001fc 	.word	0x200001fc
 8004a18:	20000214 	.word	0x20000214

08004a1c <checkBasGonder>:

void checkBasGonder() {
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004a20:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <checkBasGonder+0x74>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d10b      	bne.n	8004a40 <checkBasGonder+0x24>
 8004a28:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <checkBasGonder+0x78>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d007      	beq.n	8004a40 <checkBasGonder+0x24>
 8004a30:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <checkBasGonder+0x7c>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d103      	bne.n	8004a40 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004a38:	4b18      	ldr	r3, [pc, #96]	; (8004a9c <checkBasGonder+0x80>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	e009      	b.n	8004a54 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004a40:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <checkBasGonder+0x78>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f083 0301 	eor.w	r3, r3, #1
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004a4e:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <checkBasGonder+0x80>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004a54:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <checkBasGonder+0x74>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d10b      	bne.n	8004a74 <checkBasGonder+0x58>
 8004a5c:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <checkBasGonder+0x84>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d007      	beq.n	8004a74 <checkBasGonder+0x58>
 8004a64:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <checkBasGonder+0x7c>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d103      	bne.n	8004a74 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004a6c:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <checkBasGonder+0x88>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004a72:	e009      	b.n	8004a88 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004a74:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <checkBasGonder+0x84>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	f083 0301 	eor.w	r3, r3, #1
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004a82:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <checkBasGonder+0x88>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	20000221 	.word	0x20000221
 8004a94:	20000255 	.word	0x20000255
 8004a98:	2000022f 	.word	0x2000022f
 8004a9c:	2000025c 	.word	0x2000025c
 8004aa0:	20000258 	.word	0x20000258
 8004aa4:	2000025d 	.word	0x2000025d

08004aa8 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004aac:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <checkKapiSecimleri+0x98>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d102      	bne.n	8004aba <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004ab4:	4b23      	ldr	r3, [pc, #140]	; (8004b44 <checkKapiSecimleri+0x9c>)
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004aba:	4b21      	ldr	r3, [pc, #132]	; (8004b40 <checkKapiSecimleri+0x98>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d10e      	bne.n	8004ae0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ac6:	4820      	ldr	r0, [pc, #128]	; (8004b48 <checkKapiSecimleri+0xa0>)
 8004ac8:	f004 fbc2 	bl	8009250 <HAL_GPIO_ReadPin>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004ad2:	4b1c      	ldr	r3, [pc, #112]	; (8004b44 <checkKapiSecimleri+0x9c>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	e002      	b.n	8004ae0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004ada:	4b1a      	ldr	r3, [pc, #104]	; (8004b44 <checkKapiSecimleri+0x9c>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004ae0:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <checkKapiSecimleri+0x98>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d10e      	bne.n	8004b06 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004aec:	4816      	ldr	r0, [pc, #88]	; (8004b48 <checkKapiSecimleri+0xa0>)
 8004aee:	f004 fbaf 	bl	8009250 <HAL_GPIO_ReadPin>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d103      	bne.n	8004b00 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004af8:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <checkKapiSecimleri+0x9c>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	e002      	b.n	8004b06 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004b00:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <checkKapiSecimleri+0x9c>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004b06:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <checkKapiSecimleri+0x98>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d116      	bne.n	8004b3c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004b0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b12:	480d      	ldr	r0, [pc, #52]	; (8004b48 <checkKapiSecimleri+0xa0>)
 8004b14:	f004 fb9c 	bl	8009250 <HAL_GPIO_ReadPin>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10b      	bne.n	8004b36 <checkKapiSecimleri+0x8e>
 8004b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b22:	4809      	ldr	r0, [pc, #36]	; (8004b48 <checkKapiSecimleri+0xa0>)
 8004b24:	f004 fb94 	bl	8009250 <HAL_GPIO_ReadPin>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d103      	bne.n	8004b36 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <checkKapiSecimleri+0x9c>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004b34:	e002      	b.n	8004b3c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004b36:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <checkKapiSecimleri+0x9c>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000228 	.word	0x20000228
 8004b44:	20000273 	.word	0x20000273
 8004b48:	40010800 	.word	0x40010800

08004b4c <checkAktifCalisma>:

void checkAktifCalisma() {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004b50:	4b62      	ldr	r3, [pc, #392]	; (8004cdc <checkAktifCalisma+0x190>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f041 833e 	bne.w	80061d6 <checkAktifCalisma+0x168a>
 8004b5a:	4b61      	ldr	r3, [pc, #388]	; (8004ce0 <checkAktifCalisma+0x194>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f041 8339 	bne.w	80061d6 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004b64:	4b5f      	ldr	r3, [pc, #380]	; (8004ce4 <checkAktifCalisma+0x198>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d11a      	bne.n	8004ba2 <checkAktifCalisma+0x56>
 8004b6c:	4b5e      	ldr	r3, [pc, #376]	; (8004ce8 <checkAktifCalisma+0x19c>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d116      	bne.n	8004ba2 <checkAktifCalisma+0x56>
 8004b74:	4b5d      	ldr	r3, [pc, #372]	; (8004cec <checkAktifCalisma+0x1a0>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <checkAktifCalisma+0x46>
 8004b7c:	4b5c      	ldr	r3, [pc, #368]	; (8004cf0 <checkAktifCalisma+0x1a4>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	f083 0301 	eor.w	r3, r3, #1
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <checkAktifCalisma+0x46>
 8004b8a:	4b5a      	ldr	r3, [pc, #360]	; (8004cf4 <checkAktifCalisma+0x1a8>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d007      	beq.n	8004ba2 <checkAktifCalisma+0x56>
 8004b92:	4b59      	ldr	r3, [pc, #356]	; (8004cf8 <checkAktifCalisma+0x1ac>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d018      	beq.n	8004bcc <checkAktifCalisma+0x80>
 8004b9a:	4b58      	ldr	r3, [pc, #352]	; (8004cfc <checkAktifCalisma+0x1b0>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d114      	bne.n	8004bcc <checkAktifCalisma+0x80>
 8004ba2:	4b57      	ldr	r3, [pc, #348]	; (8004d00 <checkAktifCalisma+0x1b4>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d010      	beq.n	8004bcc <checkAktifCalisma+0x80>
 8004baa:	4b56      	ldr	r3, [pc, #344]	; (8004d04 <checkAktifCalisma+0x1b8>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bb8:	4853      	ldr	r0, [pc, #332]	; (8004d08 <checkAktifCalisma+0x1bc>)
 8004bba:	f004 fb60 	bl	800927e <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004bbe:	4b53      	ldr	r3, [pc, #332]	; (8004d0c <checkAktifCalisma+0x1c0>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004bc4:	4b52      	ldr	r3, [pc, #328]	; (8004d10 <checkAktifCalisma+0x1c4>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	e008      	b.n	8004bde <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bd2:	484d      	ldr	r0, [pc, #308]	; (8004d08 <checkAktifCalisma+0x1bc>)
 8004bd4:	f004 fb53 	bl	800927e <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004bd8:	4b4c      	ldr	r3, [pc, #304]	; (8004d0c <checkAktifCalisma+0x1c0>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004bde:	4b40      	ldr	r3, [pc, #256]	; (8004ce0 <checkAktifCalisma+0x194>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d160      	bne.n	8004ca8 <checkAktifCalisma+0x15c>
 8004be6:	4b46      	ldr	r3, [pc, #280]	; (8004d00 <checkAktifCalisma+0x1b4>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d05c      	beq.n	8004ca8 <checkAktifCalisma+0x15c>
 8004bee:	4b45      	ldr	r3, [pc, #276]	; (8004d04 <checkAktifCalisma+0x1b8>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d058      	beq.n	8004ca8 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bfa:	4843      	ldr	r0, [pc, #268]	; (8004d08 <checkAktifCalisma+0x1bc>)
 8004bfc:	f004 fb28 	bl	8009250 <HAL_GPIO_ReadPin>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <checkAktifCalisma+0xc2>
 8004c06:	4b43      	ldr	r3, [pc, #268]	; (8004d14 <checkAktifCalisma+0x1c8>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d04c      	beq.n	8004ca8 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004c0e:	2102      	movs	r1, #2
 8004c10:	4841      	ldr	r0, [pc, #260]	; (8004d18 <checkAktifCalisma+0x1cc>)
 8004c12:	f004 fb1d 	bl	8009250 <HAL_GPIO_ReadPin>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d145      	bne.n	8004ca8 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004c1c:	4b3f      	ldr	r3, [pc, #252]	; (8004d1c <checkAktifCalisma+0x1d0>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d041      	beq.n	8004ca8 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004c24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c28:	4837      	ldr	r0, [pc, #220]	; (8004d08 <checkAktifCalisma+0x1bc>)
 8004c2a:	f004 fb11 	bl	8009250 <HAL_GPIO_ReadPin>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d10e      	bne.n	8004c52 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c38:	4833      	ldr	r0, [pc, #204]	; (8004d08 <checkAktifCalisma+0x1bc>)
 8004c3a:	f004 fb09 	bl	8009250 <HAL_GPIO_ReadPin>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d106      	bne.n	8004c52 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004c44:	2140      	movs	r1, #64	; 0x40
 8004c46:	4834      	ldr	r0, [pc, #208]	; (8004d18 <checkAktifCalisma+0x1cc>)
 8004c48:	f004 fb02 	bl	8009250 <HAL_GPIO_ReadPin>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d003      	beq.n	8004c5a <checkAktifCalisma+0x10e>
 8004c52:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <checkAktifCalisma+0x198>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d026      	beq.n	8004ca8 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004c5a:	4b24      	ldr	r3, [pc, #144]	; (8004cec <checkAktifCalisma+0x1a0>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	f083 0301 	eor.w	r3, r3, #1
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01f      	beq.n	8004ca8 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004c68:	4b1f      	ldr	r3, [pc, #124]	; (8004ce8 <checkAktifCalisma+0x19c>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	f083 0301 	eor.w	r3, r3, #1
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d018      	beq.n	8004ca8 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004c76:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <checkAktifCalisma+0x1ac>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	f083 0301 	eor.w	r3, r3, #1
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d011      	beq.n	8004ca8 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004c84:	4b26      	ldr	r3, [pc, #152]	; (8004d20 <checkAktifCalisma+0x1d4>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	f083 0301 	eor.w	r3, r3, #1
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004c92:	4b24      	ldr	r3, [pc, #144]	; (8004d24 <checkAktifCalisma+0x1d8>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	f083 0301 	eor.w	r3, r3, #1
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004ca0:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <checkAktifCalisma+0x198>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	e002      	b.n	8004cae <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004ca8:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <checkAktifCalisma+0x198>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004cae:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <checkAktifCalisma+0x198>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d03a      	beq.n	8004d2c <checkAktifCalisma+0x1e0>
 8004cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cba:	4817      	ldr	r0, [pc, #92]	; (8004d18 <checkAktifCalisma+0x1cc>)
 8004cbc:	f004 fac8 	bl	8009250 <HAL_GPIO_ReadPin>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d132      	bne.n	8004d2c <checkAktifCalisma+0x1e0>
 8004cc6:	4b18      	ldr	r3, [pc, #96]	; (8004d28 <checkAktifCalisma+0x1dc>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d02e      	beq.n	8004d2c <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cd4:	480c      	ldr	r0, [pc, #48]	; (8004d08 <checkAktifCalisma+0x1bc>)
 8004cd6:	f004 fad2 	bl	800927e <HAL_GPIO_WritePin>
 8004cda:	e02d      	b.n	8004d38 <checkAktifCalisma+0x1ec>
 8004cdc:	2000023e 	.word	0x2000023e
 8004ce0:	2000023d 	.word	0x2000023d
 8004ce4:	20000255 	.word	0x20000255
 8004ce8:	20000256 	.word	0x20000256
 8004cec:	20000258 	.word	0x20000258
 8004cf0:	20000250 	.word	0x20000250
 8004cf4:	20000233 	.word	0x20000233
 8004cf8:	20000257 	.word	0x20000257
 8004cfc:	20000232 	.word	0x20000232
 8004d00:	20000272 	.word	0x20000272
 8004d04:	20000273 	.word	0x20000273
 8004d08:	40010c00 	.word	0x40010c00
 8004d0c:	20000274 	.word	0x20000274
 8004d10:	2000025f 	.word	0x2000025f
 8004d14:	2000025c 	.word	0x2000025c
 8004d18:	40011000 	.word	0x40011000
 8004d1c:	20000223 	.word	0x20000223
 8004d20:	2000025a 	.word	0x2000025a
 8004d24:	2000025b 	.word	0x2000025b
 8004d28:	2000022e 	.word	0x2000022e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d32:	4860      	ldr	r0, [pc, #384]	; (8004eb4 <checkAktifCalisma+0x368>)
 8004d34:	f004 faa3 	bl	800927e <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004d38:	4b5f      	ldr	r3, [pc, #380]	; (8004eb8 <checkAktifCalisma+0x36c>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d013      	beq.n	8004d68 <checkAktifCalisma+0x21c>
 8004d40:	4b5e      	ldr	r3, [pc, #376]	; (8004ebc <checkAktifCalisma+0x370>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d007      	beq.n	8004d58 <checkAktifCalisma+0x20c>
 8004d48:	4b5c      	ldr	r3, [pc, #368]	; (8004ebc <checkAktifCalisma+0x370>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d003      	beq.n	8004d58 <checkAktifCalisma+0x20c>
 8004d50:	4b5b      	ldr	r3, [pc, #364]	; (8004ec0 <checkAktifCalisma+0x374>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d107      	bne.n	8004d68 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004d58:	2201      	movs	r2, #1
 8004d5a:	2104      	movs	r1, #4
 8004d5c:	4855      	ldr	r0, [pc, #340]	; (8004eb4 <checkAktifCalisma+0x368>)
 8004d5e:	f004 fa8e 	bl	800927e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004d62:	4b58      	ldr	r3, [pc, #352]	; (8004ec4 <checkAktifCalisma+0x378>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004d68:	4b56      	ldr	r3, [pc, #344]	; (8004ec4 <checkAktifCalisma+0x378>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d02f      	beq.n	8004dd0 <checkAktifCalisma+0x284>
 8004d70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d74:	484f      	ldr	r0, [pc, #316]	; (8004eb4 <checkAktifCalisma+0x368>)
 8004d76:	f004 fa6b 	bl	8009250 <HAL_GPIO_ReadPin>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d106      	bne.n	8004d8e <checkAktifCalisma+0x242>
 8004d80:	4b51      	ldr	r3, [pc, #324]	; (8004ec8 <checkAktifCalisma+0x37c>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	f083 0301 	eor.w	r3, r3, #1
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <checkAktifCalisma+0x250>
 8004d8e:	2102      	movs	r1, #2
 8004d90:	484e      	ldr	r0, [pc, #312]	; (8004ecc <checkAktifCalisma+0x380>)
 8004d92:	f004 fa5d 	bl	8009250 <HAL_GPIO_ReadPin>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d119      	bne.n	8004dd0 <checkAktifCalisma+0x284>
 8004d9c:	4b4c      	ldr	r3, [pc, #304]	; (8004ed0 <checkAktifCalisma+0x384>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d015      	beq.n	8004dd0 <checkAktifCalisma+0x284>
 8004da4:	4b4b      	ldr	r3, [pc, #300]	; (8004ed4 <checkAktifCalisma+0x388>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d011      	beq.n	8004dd0 <checkAktifCalisma+0x284>
 8004dac:	4b4a      	ldr	r3, [pc, #296]	; (8004ed8 <checkAktifCalisma+0x38c>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00d      	beq.n	8004dd0 <checkAktifCalisma+0x284>
 8004db4:	4b49      	ldr	r3, [pc, #292]	; (8004edc <checkAktifCalisma+0x390>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	f083 0301 	eor.w	r3, r3, #1
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d006      	beq.n	8004dd0 <checkAktifCalisma+0x284>
			timer2=millis;
 8004dc2:	4b47      	ldr	r3, [pc, #284]	; (8004ee0 <checkAktifCalisma+0x394>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a47      	ldr	r2, [pc, #284]	; (8004ee4 <checkAktifCalisma+0x398>)
 8004dc8:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004dca:	4b44      	ldr	r3, [pc, #272]	; (8004edc <checkAktifCalisma+0x390>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004dd0:	4b43      	ldr	r3, [pc, #268]	; (8004ee0 <checkAktifCalisma+0x394>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4b43      	ldr	r3, [pc, #268]	; (8004ee4 <checkAktifCalisma+0x398>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	4a43      	ldr	r2, [pc, #268]	; (8004ee8 <checkAktifCalisma+0x39c>)
 8004ddc:	7812      	ldrb	r2, [r2, #0]
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d303      	bcc.n	8004dea <checkAktifCalisma+0x29e>
 8004de2:	4b3e      	ldr	r3, [pc, #248]	; (8004edc <checkAktifCalisma+0x390>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d111      	bne.n	8004e0e <checkAktifCalisma+0x2c2>
 8004dea:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <checkAktifCalisma+0x384>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	f083 0301 	eor.w	r3, r3, #1
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <checkAktifCalisma+0x2c2>
 8004df8:	4b36      	ldr	r3, [pc, #216]	; (8004ed4 <checkAktifCalisma+0x388>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	f083 0301 	eor.w	r3, r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d103      	bne.n	8004e0e <checkAktifCalisma+0x2c2>
 8004e06:	4b34      	ldr	r3, [pc, #208]	; (8004ed8 <checkAktifCalisma+0x38c>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2104      	movs	r1, #4
 8004e12:	4828      	ldr	r0, [pc, #160]	; (8004eb4 <checkAktifCalisma+0x368>)
 8004e14:	f004 fa33 	bl	800927e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004e18:	4b2a      	ldr	r3, [pc, #168]	; (8004ec4 <checkAktifCalisma+0x378>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004e1e:	4b2f      	ldr	r3, [pc, #188]	; (8004edc <checkAktifCalisma+0x390>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004e24:	4b31      	ldr	r3, [pc, #196]	; (8004eec <checkAktifCalisma+0x3a0>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d102      	bne.n	8004e32 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004e2c:	4b30      	ldr	r3, [pc, #192]	; (8004ef0 <checkAktifCalisma+0x3a4>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004e32:	4b2e      	ldr	r3, [pc, #184]	; (8004eec <checkAktifCalisma+0x3a0>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d116      	bne.n	8004e68 <checkAktifCalisma+0x31c>
 8004e3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ef4 <checkAktifCalisma+0x3a8>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d112      	bne.n	8004e68 <checkAktifCalisma+0x31c>
 8004e42:	2101      	movs	r1, #1
 8004e44:	4821      	ldr	r0, [pc, #132]	; (8004ecc <checkAktifCalisma+0x380>)
 8004e46:	f004 fa03 	bl	8009250 <HAL_GPIO_ReadPin>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <checkAktifCalisma+0x31c>
 8004e50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e54:	4817      	ldr	r0, [pc, #92]	; (8004eb4 <checkAktifCalisma+0x368>)
 8004e56:	f004 f9fb 	bl	8009250 <HAL_GPIO_ReadPin>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d103      	bne.n	8004e68 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004e60:	4b23      	ldr	r3, [pc, #140]	; (8004ef0 <checkAktifCalisma+0x3a4>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	e011      	b.n	8004e8c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004e68:	4b20      	ldr	r3, [pc, #128]	; (8004eec <checkAktifCalisma+0x3a0>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d10d      	bne.n	8004e8c <checkAktifCalisma+0x340>
 8004e70:	2101      	movs	r1, #1
 8004e72:	4816      	ldr	r0, [pc, #88]	; (8004ecc <checkAktifCalisma+0x380>)
 8004e74:	f004 f9ec 	bl	8009250 <HAL_GPIO_ReadPin>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d106      	bne.n	8004e8c <checkAktifCalisma+0x340>
 8004e7e:	4b1d      	ldr	r3, [pc, #116]	; (8004ef4 <checkAktifCalisma+0x3a8>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d102      	bne.n	8004e8c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004e86:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <checkAktifCalisma+0x3a4>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004e8c:	4b17      	ldr	r3, [pc, #92]	; (8004eec <checkAktifCalisma+0x3a0>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d134      	bne.n	8004efe <checkAktifCalisma+0x3b2>
 8004e94:	4b17      	ldr	r3, [pc, #92]	; (8004ef4 <checkAktifCalisma+0x3a8>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d130      	bne.n	8004efe <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	480b      	ldr	r0, [pc, #44]	; (8004ecc <checkAktifCalisma+0x380>)
 8004ea0:	f004 f9d6 	bl	8009250 <HAL_GPIO_ReadPin>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d126      	bne.n	8004ef8 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <checkAktifCalisma+0x3a4>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	e025      	b.n	8004efe <checkAktifCalisma+0x3b2>
 8004eb2:	bf00      	nop
 8004eb4:	40010c00 	.word	0x40010c00
 8004eb8:	20000255 	.word	0x20000255
 8004ebc:	2000022f 	.word	0x2000022f
 8004ec0:	20000233 	.word	0x20000233
 8004ec4:	20000259 	.word	0x20000259
 8004ec8:	2000025c 	.word	0x2000025c
 8004ecc:	40011000 	.word	0x40011000
 8004ed0:	20000272 	.word	0x20000272
 8004ed4:	20000273 	.word	0x20000273
 8004ed8:	20000223 	.word	0x20000223
 8004edc:	20000251 	.word	0x20000251
 8004ee0:	200001fc 	.word	0x200001fc
 8004ee4:	20000208 	.word	0x20000208
 8004ee8:	20000234 	.word	0x20000234
 8004eec:	20000224 	.word	0x20000224
 8004ef0:	20000277 	.word	0x20000277
 8004ef4:	20000221 	.word	0x20000221
			} else {
				cerceveVar=0;
 8004ef8:	4b7f      	ldr	r3, [pc, #508]	; (80050f8 <checkAktifCalisma+0x5ac>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004efe:	4b7f      	ldr	r3, [pc, #508]	; (80050fc <checkAktifCalisma+0x5b0>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d17c      	bne.n	8005000 <checkAktifCalisma+0x4b4>
 8004f06:	4b7e      	ldr	r3, [pc, #504]	; (8005100 <checkAktifCalisma+0x5b4>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d078      	beq.n	8005000 <checkAktifCalisma+0x4b4>
 8004f0e:	4b7d      	ldr	r3, [pc, #500]	; (8005104 <checkAktifCalisma+0x5b8>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d074      	beq.n	8005000 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004f16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f1a:	487b      	ldr	r0, [pc, #492]	; (8005108 <checkAktifCalisma+0x5bc>)
 8004f1c:	f004 f998 	bl	8009250 <HAL_GPIO_ReadPin>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <checkAktifCalisma+0x3e2>
 8004f26:	4b79      	ldr	r3, [pc, #484]	; (800510c <checkAktifCalisma+0x5c0>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d068      	beq.n	8005000 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004f2e:	4b72      	ldr	r3, [pc, #456]	; (80050f8 <checkAktifCalisma+0x5ac>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d064      	beq.n	8005000 <checkAktifCalisma+0x4b4>
 8004f36:	4b76      	ldr	r3, [pc, #472]	; (8005110 <checkAktifCalisma+0x5c4>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	f083 0301 	eor.w	r3, r3, #1
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d05d      	beq.n	8005000 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004f44:	2104      	movs	r1, #4
 8004f46:	4873      	ldr	r0, [pc, #460]	; (8005114 <checkAktifCalisma+0x5c8>)
 8004f48:	f004 f982 	bl	8009250 <HAL_GPIO_ReadPin>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <checkAktifCalisma+0x40e>
 8004f52:	4b71      	ldr	r3, [pc, #452]	; (8005118 <checkAktifCalisma+0x5cc>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d152      	bne.n	8005000 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f5e:	486a      	ldr	r0, [pc, #424]	; (8005108 <checkAktifCalisma+0x5bc>)
 8004f60:	f004 f976 	bl	8009250 <HAL_GPIO_ReadPin>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d10e      	bne.n	8004f88 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f6e:	4866      	ldr	r0, [pc, #408]	; (8005108 <checkAktifCalisma+0x5bc>)
 8004f70:	f004 f96e 	bl	8009250 <HAL_GPIO_ReadPin>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d106      	bne.n	8004f88 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004f7a:	2140      	movs	r1, #64	; 0x40
 8004f7c:	4865      	ldr	r0, [pc, #404]	; (8005114 <checkAktifCalisma+0x5c8>)
 8004f7e:	f004 f967 	bl	8009250 <HAL_GPIO_ReadPin>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d003      	beq.n	8004f90 <checkAktifCalisma+0x444>
 8004f88:	4b64      	ldr	r3, [pc, #400]	; (800511c <checkAktifCalisma+0x5d0>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d037      	beq.n	8005000 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8004f90:	4b63      	ldr	r3, [pc, #396]	; (8005120 <checkAktifCalisma+0x5d4>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	f083 0301 	eor.w	r3, r3, #1
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d030      	beq.n	8005000 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8004f9e:	4b61      	ldr	r3, [pc, #388]	; (8005124 <checkAktifCalisma+0x5d8>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	f083 0301 	eor.w	r3, r3, #1
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d029      	beq.n	8005000 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8004fac:	4b5e      	ldr	r3, [pc, #376]	; (8005128 <checkAktifCalisma+0x5dc>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	f083 0301 	eor.w	r3, r3, #1
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d022      	beq.n	8005000 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8004fba:	4b5c      	ldr	r3, [pc, #368]	; (800512c <checkAktifCalisma+0x5e0>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	f083 0301 	eor.w	r3, r3, #1
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01b      	beq.n	8005000 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8004fc8:	4b59      	ldr	r3, [pc, #356]	; (8005130 <checkAktifCalisma+0x5e4>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	f083 0301 	eor.w	r3, r3, #1
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d014      	beq.n	8005000 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8004fd6:	4b57      	ldr	r3, [pc, #348]	; (8005134 <checkAktifCalisma+0x5e8>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	f083 0301 	eor.w	r3, r3, #1
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00d      	beq.n	8005000 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	2102      	movs	r1, #2
 8004fe8:	4847      	ldr	r0, [pc, #284]	; (8005108 <checkAktifCalisma+0x5bc>)
 8004fea:	f004 f948 	bl	800927e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8004fee:	4b4b      	ldr	r3, [pc, #300]	; (800511c <checkAktifCalisma+0x5d0>)
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8004ff4:	4b50      	ldr	r3, [pc, #320]	; (8005138 <checkAktifCalisma+0x5ec>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8004ffa:	4b50      	ldr	r3, [pc, #320]	; (800513c <checkAktifCalisma+0x5f0>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005000:	4b46      	ldr	r3, [pc, #280]	; (800511c <checkAktifCalisma+0x5d0>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d033      	beq.n	8005070 <checkAktifCalisma+0x524>
 8005008:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800500c:	483e      	ldr	r0, [pc, #248]	; (8005108 <checkAktifCalisma+0x5bc>)
 800500e:	f004 f91f 	bl	8009250 <HAL_GPIO_ReadPin>
 8005012:	4603      	mov	r3, r0
 8005014:	2b01      	cmp	r3, #1
 8005016:	d106      	bne.n	8005026 <checkAktifCalisma+0x4da>
 8005018:	4b3c      	ldr	r3, [pc, #240]	; (800510c <checkAktifCalisma+0x5c0>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	f083 0301 	eor.w	r3, r3, #1
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <checkAktifCalisma+0x4f0>
 8005026:	2104      	movs	r1, #4
 8005028:	483a      	ldr	r0, [pc, #232]	; (8005114 <checkAktifCalisma+0x5c8>)
 800502a:	f004 f911 	bl	8009250 <HAL_GPIO_ReadPin>
 800502e:	4603      	mov	r3, r0
 8005030:	2b01      	cmp	r3, #1
 8005032:	d11d      	bne.n	8005070 <checkAktifCalisma+0x524>
 8005034:	4b38      	ldr	r3, [pc, #224]	; (8005118 <checkAktifCalisma+0x5cc>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d019      	beq.n	8005070 <checkAktifCalisma+0x524>
 800503c:	4b30      	ldr	r3, [pc, #192]	; (8005100 <checkAktifCalisma+0x5b4>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d015      	beq.n	8005070 <checkAktifCalisma+0x524>
 8005044:	4b2f      	ldr	r3, [pc, #188]	; (8005104 <checkAktifCalisma+0x5b8>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d011      	beq.n	8005070 <checkAktifCalisma+0x524>
 800504c:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <checkAktifCalisma+0x5ac>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00d      	beq.n	8005070 <checkAktifCalisma+0x524>
 8005054:	4b3a      	ldr	r3, [pc, #232]	; (8005140 <checkAktifCalisma+0x5f4>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	f083 0301 	eor.w	r3, r3, #1
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d006      	beq.n	8005070 <checkAktifCalisma+0x524>
			timer2=millis;
 8005062:	4b38      	ldr	r3, [pc, #224]	; (8005144 <checkAktifCalisma+0x5f8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a38      	ldr	r2, [pc, #224]	; (8005148 <checkAktifCalisma+0x5fc>)
 8005068:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800506a:	4b35      	ldr	r3, [pc, #212]	; (8005140 <checkAktifCalisma+0x5f4>)
 800506c:	2201      	movs	r2, #1
 800506e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005070:	4b34      	ldr	r3, [pc, #208]	; (8005144 <checkAktifCalisma+0x5f8>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	4b34      	ldr	r3, [pc, #208]	; (8005148 <checkAktifCalisma+0x5fc>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	4a34      	ldr	r2, [pc, #208]	; (800514c <checkAktifCalisma+0x600>)
 800507c:	7812      	ldrb	r2, [r2, #0]
 800507e:	4293      	cmp	r3, r2
 8005080:	d303      	bcc.n	800508a <checkAktifCalisma+0x53e>
 8005082:	4b2f      	ldr	r3, [pc, #188]	; (8005140 <checkAktifCalisma+0x5f4>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d114      	bne.n	80050b4 <checkAktifCalisma+0x568>
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <checkAktifCalisma+0x5b4>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	f083 0301 	eor.w	r3, r3, #1
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10d      	bne.n	80050b4 <checkAktifCalisma+0x568>
 8005098:	4b1a      	ldr	r3, [pc, #104]	; (8005104 <checkAktifCalisma+0x5b8>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f083 0301 	eor.w	r3, r3, #1
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <checkAktifCalisma+0x568>
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <checkAktifCalisma+0x5ac>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	f083 0301 	eor.w	r3, r3, #1
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80050b4:	2200      	movs	r2, #0
 80050b6:	2102      	movs	r1, #2
 80050b8:	4813      	ldr	r0, [pc, #76]	; (8005108 <checkAktifCalisma+0x5bc>)
 80050ba:	f004 f8e0 	bl	800927e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80050be:	4b17      	ldr	r3, [pc, #92]	; (800511c <checkAktifCalisma+0x5d0>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80050c4:	4b1e      	ldr	r3, [pc, #120]	; (8005140 <checkAktifCalisma+0x5f4>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80050ca:	4b14      	ldr	r3, [pc, #80]	; (800511c <checkAktifCalisma+0x5d0>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d040      	beq.n	8005154 <checkAktifCalisma+0x608>
 80050d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050d6:	480f      	ldr	r0, [pc, #60]	; (8005114 <checkAktifCalisma+0x5c8>)
 80050d8:	f004 f8ba 	bl	8009250 <HAL_GPIO_ReadPin>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d138      	bne.n	8005154 <checkAktifCalisma+0x608>
 80050e2:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <checkAktifCalisma+0x604>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d034      	beq.n	8005154 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80050ea:	2201      	movs	r2, #1
 80050ec:	2101      	movs	r1, #1
 80050ee:	4806      	ldr	r0, [pc, #24]	; (8005108 <checkAktifCalisma+0x5bc>)
 80050f0:	f004 f8c5 	bl	800927e <HAL_GPIO_WritePin>
 80050f4:	e033      	b.n	800515e <checkAktifCalisma+0x612>
 80050f6:	bf00      	nop
 80050f8:	20000277 	.word	0x20000277
 80050fc:	2000023d 	.word	0x2000023d
 8005100:	20000272 	.word	0x20000272
 8005104:	20000273 	.word	0x20000273
 8005108:	40010c00 	.word	0x40010c00
 800510c:	2000025d 	.word	0x2000025d
 8005110:	20000271 	.word	0x20000271
 8005114:	40011000 	.word	0x40011000
 8005118:	20000226 	.word	0x20000226
 800511c:	20000258 	.word	0x20000258
 8005120:	20000255 	.word	0x20000255
 8005124:	20000259 	.word	0x20000259
 8005128:	20000256 	.word	0x20000256
 800512c:	20000257 	.word	0x20000257
 8005130:	2000025a 	.word	0x2000025a
 8005134:	2000025b 	.word	0x2000025b
 8005138:	20000260 	.word	0x20000260
 800513c:	20000281 	.word	0x20000281
 8005140:	20000250 	.word	0x20000250
 8005144:	200001fc 	.word	0x200001fc
 8005148:	20000208 	.word	0x20000208
 800514c:	20000235 	.word	0x20000235
 8005150:	20000225 	.word	0x20000225
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005154:	2200      	movs	r2, #0
 8005156:	2101      	movs	r1, #1
 8005158:	4836      	ldr	r0, [pc, #216]	; (8005234 <checkAktifCalisma+0x6e8>)
 800515a:	f004 f890 	bl	800927e <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800515e:	4b36      	ldr	r3, [pc, #216]	; (8005238 <checkAktifCalisma+0x6ec>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f040 8080 	bne.w	8005268 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005168:	4b34      	ldr	r3, [pc, #208]	; (800523c <checkAktifCalisma+0x6f0>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d003      	beq.n	8005178 <checkAktifCalisma+0x62c>
 8005170:	4b32      	ldr	r3, [pc, #200]	; (800523c <checkAktifCalisma+0x6f0>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d177      	bne.n	8005268 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005178:	4b31      	ldr	r3, [pc, #196]	; (8005240 <checkAktifCalisma+0x6f4>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d073      	beq.n	8005268 <checkAktifCalisma+0x71c>
 8005180:	4b30      	ldr	r3, [pc, #192]	; (8005244 <checkAktifCalisma+0x6f8>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d06f      	beq.n	8005268 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005188:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800518c:	4829      	ldr	r0, [pc, #164]	; (8005234 <checkAktifCalisma+0x6e8>)
 800518e:	f004 f85f 	bl	8009250 <HAL_GPIO_ReadPin>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d167      	bne.n	8005268 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800519c:	482a      	ldr	r0, [pc, #168]	; (8005248 <checkAktifCalisma+0x6fc>)
 800519e:	f004 f857 	bl	8009250 <HAL_GPIO_ReadPin>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <checkAktifCalisma+0x664>
 80051a8:	4b28      	ldr	r3, [pc, #160]	; (800524c <checkAktifCalisma+0x700>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d15b      	bne.n	8005268 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80051b0:	2140      	movs	r1, #64	; 0x40
 80051b2:	4825      	ldr	r0, [pc, #148]	; (8005248 <checkAktifCalisma+0x6fc>)
 80051b4:	f004 f84c 	bl	8009250 <HAL_GPIO_ReadPin>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d10f      	bne.n	80051de <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80051be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051c2:	481c      	ldr	r0, [pc, #112]	; (8005234 <checkAktifCalisma+0x6e8>)
 80051c4:	f004 f844 	bl	8009250 <HAL_GPIO_ReadPin>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d107      	bne.n	80051de <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80051ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051d2:	4818      	ldr	r0, [pc, #96]	; (8005234 <checkAktifCalisma+0x6e8>)
 80051d4:	f004 f83c 	bl	8009250 <HAL_GPIO_ReadPin>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d003      	beq.n	80051e6 <checkAktifCalisma+0x69a>
 80051de:	4b1c      	ldr	r3, [pc, #112]	; (8005250 <checkAktifCalisma+0x704>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d040      	beq.n	8005268 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80051e6:	4b1b      	ldr	r3, [pc, #108]	; (8005254 <checkAktifCalisma+0x708>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	f083 0301 	eor.w	r3, r3, #1
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d039      	beq.n	8005268 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80051f4:	4b18      	ldr	r3, [pc, #96]	; (8005258 <checkAktifCalisma+0x70c>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	f083 0301 	eor.w	r3, r3, #1
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d032      	beq.n	8005268 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005202:	4b16      	ldr	r3, [pc, #88]	; (800525c <checkAktifCalisma+0x710>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	f083 0301 	eor.w	r3, r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d02b      	beq.n	8005268 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005210:	4b13      	ldr	r3, [pc, #76]	; (8005260 <checkAktifCalisma+0x714>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	f083 0301 	eor.w	r3, r3, #1
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d024      	beq.n	8005268 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800521e:	4b11      	ldr	r3, [pc, #68]	; (8005264 <checkAktifCalisma+0x718>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	f083 0301 	eor.w	r3, r3, #1
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01d      	beq.n	8005268 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 800522c:	4b08      	ldr	r3, [pc, #32]	; (8005250 <checkAktifCalisma+0x704>)
 800522e:	2201      	movs	r2, #1
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	e01c      	b.n	800526e <checkAktifCalisma+0x722>
 8005234:	40010c00 	.word	0x40010c00
 8005238:	2000023d 	.word	0x2000023d
 800523c:	2000022f 	.word	0x2000022f
 8005240:	20000272 	.word	0x20000272
 8005244:	20000273 	.word	0x20000273
 8005248:	40011000 	.word	0x40011000
 800524c:	20000230 	.word	0x20000230
 8005250:	20000256 	.word	0x20000256
 8005254:	20000255 	.word	0x20000255
 8005258:	20000259 	.word	0x20000259
 800525c:	20000258 	.word	0x20000258
 8005260:	20000257 	.word	0x20000257
 8005264:	2000025b 	.word	0x2000025b
		} else {
			devmotoryukaricalisiyor=0;
 8005268:	4b64      	ldr	r3, [pc, #400]	; (80053fc <checkAktifCalisma+0x8b0>)
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800526e:	4b63      	ldr	r3, [pc, #396]	; (80053fc <checkAktifCalisma+0x8b0>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d007      	beq.n	8005286 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005276:	2201      	movs	r2, #1
 8005278:	2120      	movs	r1, #32
 800527a:	4861      	ldr	r0, [pc, #388]	; (8005400 <checkAktifCalisma+0x8b4>)
 800527c:	f003 ffff 	bl	800927e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005280:	4b60      	ldr	r3, [pc, #384]	; (8005404 <checkAktifCalisma+0x8b8>)
 8005282:	2201      	movs	r2, #1
 8005284:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005286:	4b5f      	ldr	r3, [pc, #380]	; (8005404 <checkAktifCalisma+0x8b8>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d025      	beq.n	80052da <checkAktifCalisma+0x78e>
 800528e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005292:	485d      	ldr	r0, [pc, #372]	; (8005408 <checkAktifCalisma+0x8bc>)
 8005294:	f003 ffdc 	bl	8009250 <HAL_GPIO_ReadPin>
 8005298:	4603      	mov	r3, r0
 800529a:	2b01      	cmp	r3, #1
 800529c:	d007      	beq.n	80052ae <checkAktifCalisma+0x762>
 800529e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052a2:	4857      	ldr	r0, [pc, #348]	; (8005400 <checkAktifCalisma+0x8b4>)
 80052a4:	f003 ffd4 	bl	8009250 <HAL_GPIO_ReadPin>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d115      	bne.n	80052da <checkAktifCalisma+0x78e>
 80052ae:	4b57      	ldr	r3, [pc, #348]	; (800540c <checkAktifCalisma+0x8c0>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d011      	beq.n	80052da <checkAktifCalisma+0x78e>
 80052b6:	4b56      	ldr	r3, [pc, #344]	; (8005410 <checkAktifCalisma+0x8c4>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00d      	beq.n	80052da <checkAktifCalisma+0x78e>
 80052be:	4b55      	ldr	r3, [pc, #340]	; (8005414 <checkAktifCalisma+0x8c8>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	f083 0301 	eor.w	r3, r3, #1
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d006      	beq.n	80052da <checkAktifCalisma+0x78e>
			timer2=millis;
 80052cc:	4b52      	ldr	r3, [pc, #328]	; (8005418 <checkAktifCalisma+0x8cc>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a52      	ldr	r2, [pc, #328]	; (800541c <checkAktifCalisma+0x8d0>)
 80052d2:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80052d4:	4b4f      	ldr	r3, [pc, #316]	; (8005414 <checkAktifCalisma+0x8c8>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80052da:	4b4f      	ldr	r3, [pc, #316]	; (8005418 <checkAktifCalisma+0x8cc>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b4f      	ldr	r3, [pc, #316]	; (800541c <checkAktifCalisma+0x8d0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	4a4e      	ldr	r2, [pc, #312]	; (8005420 <checkAktifCalisma+0x8d4>)
 80052e6:	7812      	ldrb	r2, [r2, #0]
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d303      	bcc.n	80052f4 <checkAktifCalisma+0x7a8>
 80052ec:	4b49      	ldr	r3, [pc, #292]	; (8005414 <checkAktifCalisma+0x8c8>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10d      	bne.n	8005310 <checkAktifCalisma+0x7c4>
 80052f4:	4b45      	ldr	r3, [pc, #276]	; (800540c <checkAktifCalisma+0x8c0>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	f083 0301 	eor.w	r3, r3, #1
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <checkAktifCalisma+0x7c4>
 8005302:	4b43      	ldr	r3, [pc, #268]	; (8005410 <checkAktifCalisma+0x8c4>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	f083 0301 	eor.w	r3, r3, #1
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005310:	2200      	movs	r2, #0
 8005312:	2120      	movs	r1, #32
 8005314:	483a      	ldr	r0, [pc, #232]	; (8005400 <checkAktifCalisma+0x8b4>)
 8005316:	f003 ffb2 	bl	800927e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800531a:	4b3a      	ldr	r3, [pc, #232]	; (8005404 <checkAktifCalisma+0x8b8>)
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005320:	4b3c      	ldr	r3, [pc, #240]	; (8005414 <checkAktifCalisma+0x8c8>)
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005326:	4b3f      	ldr	r3, [pc, #252]	; (8005424 <checkAktifCalisma+0x8d8>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 8088 	bne.w	8005440 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005330:	4b3d      	ldr	r3, [pc, #244]	; (8005428 <checkAktifCalisma+0x8dc>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d003      	beq.n	8005340 <checkAktifCalisma+0x7f4>
 8005338:	4b3b      	ldr	r3, [pc, #236]	; (8005428 <checkAktifCalisma+0x8dc>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d17f      	bne.n	8005440 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005340:	4b32      	ldr	r3, [pc, #200]	; (800540c <checkAktifCalisma+0x8c0>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d07b      	beq.n	8005440 <checkAktifCalisma+0x8f4>
 8005348:	4b31      	ldr	r3, [pc, #196]	; (8005410 <checkAktifCalisma+0x8c4>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d077      	beq.n	8005440 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005350:	2140      	movs	r1, #64	; 0x40
 8005352:	482b      	ldr	r0, [pc, #172]	; (8005400 <checkAktifCalisma+0x8b4>)
 8005354:	f003 ff7c 	bl	8009250 <HAL_GPIO_ReadPin>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d170      	bne.n	8005440 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800535e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005362:	4827      	ldr	r0, [pc, #156]	; (8005400 <checkAktifCalisma+0x8b4>)
 8005364:	f003 ff74 	bl	8009250 <HAL_GPIO_ReadPin>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <checkAktifCalisma+0x82a>
 800536e:	4b2f      	ldr	r3, [pc, #188]	; (800542c <checkAktifCalisma+0x8e0>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d164      	bne.n	8005440 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800537a:	4823      	ldr	r0, [pc, #140]	; (8005408 <checkAktifCalisma+0x8bc>)
 800537c:	f003 ff68 	bl	8009250 <HAL_GPIO_ReadPin>
 8005380:	4603      	mov	r3, r0
 8005382:	2b01      	cmp	r3, #1
 8005384:	d10f      	bne.n	80053a6 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800538a:	481f      	ldr	r0, [pc, #124]	; (8005408 <checkAktifCalisma+0x8bc>)
 800538c:	f003 ff60 	bl	8009250 <HAL_GPIO_ReadPin>
 8005390:	4603      	mov	r3, r0
 8005392:	2b01      	cmp	r3, #1
 8005394:	d107      	bne.n	80053a6 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005396:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800539a:	481b      	ldr	r0, [pc, #108]	; (8005408 <checkAktifCalisma+0x8bc>)
 800539c:	f003 ff58 	bl	8009250 <HAL_GPIO_ReadPin>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d003      	beq.n	80053ae <checkAktifCalisma+0x862>
 80053a6:	4b22      	ldr	r3, [pc, #136]	; (8005430 <checkAktifCalisma+0x8e4>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d048      	beq.n	8005440 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80053ae:	4b21      	ldr	r3, [pc, #132]	; (8005434 <checkAktifCalisma+0x8e8>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	f083 0301 	eor.w	r3, r3, #1
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d041      	beq.n	8005440 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80053bc:	4b1e      	ldr	r3, [pc, #120]	; (8005438 <checkAktifCalisma+0x8ec>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	f083 0301 	eor.w	r3, r3, #1
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d03a      	beq.n	8005440 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80053ca:	4b1c      	ldr	r3, [pc, #112]	; (800543c <checkAktifCalisma+0x8f0>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	f083 0301 	eor.w	r3, r3, #1
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d033      	beq.n	8005440 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80053d8:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <checkAktifCalisma+0x8b8>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	f083 0301 	eor.w	r3, r3, #1
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d02c      	beq.n	8005440 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80053e6:	4b05      	ldr	r3, [pc, #20]	; (80053fc <checkAktifCalisma+0x8b0>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	f083 0301 	eor.w	r3, r3, #1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d025      	beq.n	8005440 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80053f4:	4b0e      	ldr	r3, [pc, #56]	; (8005430 <checkAktifCalisma+0x8e4>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	e024      	b.n	8005446 <checkAktifCalisma+0x8fa>
 80053fc:	20000256 	.word	0x20000256
 8005400:	40011000 	.word	0x40011000
 8005404:	2000025a 	.word	0x2000025a
 8005408:	40010c00 	.word	0x40010c00
 800540c:	20000272 	.word	0x20000272
 8005410:	20000273 	.word	0x20000273
 8005414:	20000252 	.word	0x20000252
 8005418:	200001fc 	.word	0x200001fc
 800541c:	20000208 	.word	0x20000208
 8005420:	20000236 	.word	0x20000236
 8005424:	2000023d 	.word	0x2000023d
 8005428:	2000022f 	.word	0x2000022f
 800542c:	20000231 	.word	0x20000231
 8005430:	20000257 	.word	0x20000257
 8005434:	20000255 	.word	0x20000255
 8005438:	20000259 	.word	0x20000259
 800543c:	20000258 	.word	0x20000258
		} else {
			devmotorasagicalisiyor=0;
 8005440:	4b96      	ldr	r3, [pc, #600]	; (800569c <checkAktifCalisma+0xb50>)
 8005442:	2200      	movs	r2, #0
 8005444:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005446:	4b95      	ldr	r3, [pc, #596]	; (800569c <checkAktifCalisma+0xb50>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800544e:	2201      	movs	r2, #1
 8005450:	2110      	movs	r1, #16
 8005452:	4893      	ldr	r0, [pc, #588]	; (80056a0 <checkAktifCalisma+0xb54>)
 8005454:	f003 ff13 	bl	800927e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005458:	4b92      	ldr	r3, [pc, #584]	; (80056a4 <checkAktifCalisma+0xb58>)
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800545e:	4b91      	ldr	r3, [pc, #580]	; (80056a4 <checkAktifCalisma+0xb58>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d024      	beq.n	80054b0 <checkAktifCalisma+0x964>
 8005466:	2140      	movs	r1, #64	; 0x40
 8005468:	488d      	ldr	r0, [pc, #564]	; (80056a0 <checkAktifCalisma+0xb54>)
 800546a:	f003 fef1 	bl	8009250 <HAL_GPIO_ReadPin>
 800546e:	4603      	mov	r3, r0
 8005470:	2b01      	cmp	r3, #1
 8005472:	d007      	beq.n	8005484 <checkAktifCalisma+0x938>
 8005474:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005478:	4889      	ldr	r0, [pc, #548]	; (80056a0 <checkAktifCalisma+0xb54>)
 800547a:	f003 fee9 	bl	8009250 <HAL_GPIO_ReadPin>
 800547e:	4603      	mov	r3, r0
 8005480:	2b01      	cmp	r3, #1
 8005482:	d115      	bne.n	80054b0 <checkAktifCalisma+0x964>
 8005484:	4b88      	ldr	r3, [pc, #544]	; (80056a8 <checkAktifCalisma+0xb5c>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d011      	beq.n	80054b0 <checkAktifCalisma+0x964>
 800548c:	4b87      	ldr	r3, [pc, #540]	; (80056ac <checkAktifCalisma+0xb60>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00d      	beq.n	80054b0 <checkAktifCalisma+0x964>
 8005494:	4b86      	ldr	r3, [pc, #536]	; (80056b0 <checkAktifCalisma+0xb64>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	f083 0301 	eor.w	r3, r3, #1
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d006      	beq.n	80054b0 <checkAktifCalisma+0x964>
			timer2=millis;
 80054a2:	4b84      	ldr	r3, [pc, #528]	; (80056b4 <checkAktifCalisma+0xb68>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a84      	ldr	r2, [pc, #528]	; (80056b8 <checkAktifCalisma+0xb6c>)
 80054a8:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80054aa:	4b81      	ldr	r3, [pc, #516]	; (80056b0 <checkAktifCalisma+0xb64>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80054b0:	4b80      	ldr	r3, [pc, #512]	; (80056b4 <checkAktifCalisma+0xb68>)
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4b80      	ldr	r3, [pc, #512]	; (80056b8 <checkAktifCalisma+0xb6c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	4a80      	ldr	r2, [pc, #512]	; (80056bc <checkAktifCalisma+0xb70>)
 80054bc:	7812      	ldrb	r2, [r2, #0]
 80054be:	4293      	cmp	r3, r2
 80054c0:	d303      	bcc.n	80054ca <checkAktifCalisma+0x97e>
 80054c2:	4b7b      	ldr	r3, [pc, #492]	; (80056b0 <checkAktifCalisma+0xb64>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10d      	bne.n	80054e6 <checkAktifCalisma+0x99a>
 80054ca:	4b77      	ldr	r3, [pc, #476]	; (80056a8 <checkAktifCalisma+0xb5c>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	f083 0301 	eor.w	r3, r3, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d106      	bne.n	80054e6 <checkAktifCalisma+0x99a>
 80054d8:	4b74      	ldr	r3, [pc, #464]	; (80056ac <checkAktifCalisma+0xb60>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	f083 0301 	eor.w	r3, r3, #1
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80054e6:	2200      	movs	r2, #0
 80054e8:	2110      	movs	r1, #16
 80054ea:	486d      	ldr	r0, [pc, #436]	; (80056a0 <checkAktifCalisma+0xb54>)
 80054ec:	f003 fec7 	bl	800927e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80054f0:	4b6c      	ldr	r3, [pc, #432]	; (80056a4 <checkAktifCalisma+0xb58>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80054f6:	4b6e      	ldr	r3, [pc, #440]	; (80056b0 <checkAktifCalisma+0xb64>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80054fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005500:	486f      	ldr	r0, [pc, #444]	; (80056c0 <checkAktifCalisma+0xb74>)
 8005502:	f003 fea5 	bl	8009250 <HAL_GPIO_ReadPin>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d120      	bne.n	800554e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 800550c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005510:	486b      	ldr	r0, [pc, #428]	; (80056c0 <checkAktifCalisma+0xb74>)
 8005512:	f003 fe9d 	bl	8009250 <HAL_GPIO_ReadPin>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d118      	bne.n	800554e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 800551c:	2104      	movs	r1, #4
 800551e:	4868      	ldr	r0, [pc, #416]	; (80056c0 <checkAktifCalisma+0xb74>)
 8005520:	f003 fe96 	bl	8009250 <HAL_GPIO_ReadPin>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d111      	bne.n	800554e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800552a:	2102      	movs	r1, #2
 800552c:	4864      	ldr	r0, [pc, #400]	; (80056c0 <checkAktifCalisma+0xb74>)
 800552e:	f003 fe8f 	bl	8009250 <HAL_GPIO_ReadPin>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005538:	2101      	movs	r1, #1
 800553a:	4861      	ldr	r0, [pc, #388]	; (80056c0 <checkAktifCalisma+0xb74>)
 800553c:	f003 fe88 	bl	8009250 <HAL_GPIO_ReadPin>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d103      	bne.n	800554e <checkAktifCalisma+0xa02>
			makineStop=1;
 8005546:	4b5f      	ldr	r3, [pc, #380]	; (80056c4 <checkAktifCalisma+0xb78>)
 8005548:	2201      	movs	r2, #1
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	e002      	b.n	8005554 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800554e:	4b5d      	ldr	r3, [pc, #372]	; (80056c4 <checkAktifCalisma+0xb78>)
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005554:	4b5c      	ldr	r3, [pc, #368]	; (80056c8 <checkAktifCalisma+0xb7c>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d144      	bne.n	80055e6 <checkAktifCalisma+0xa9a>
 800555c:	4b5b      	ldr	r3, [pc, #364]	; (80056cc <checkAktifCalisma+0xb80>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d003      	beq.n	800556c <checkAktifCalisma+0xa20>
 8005564:	4b59      	ldr	r3, [pc, #356]	; (80056cc <checkAktifCalisma+0xb80>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d13c      	bne.n	80055e6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800556c:	2180      	movs	r1, #128	; 0x80
 800556e:	484c      	ldr	r0, [pc, #304]	; (80056a0 <checkAktifCalisma+0xb54>)
 8005570:	f003 fe6e 	bl	8009250 <HAL_GPIO_ReadPin>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d103      	bne.n	8005582 <checkAktifCalisma+0xa36>
 800557a:	4b55      	ldr	r3, [pc, #340]	; (80056d0 <checkAktifCalisma+0xb84>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00b      	beq.n	800559a <checkAktifCalisma+0xa4e>
 8005582:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005586:	484e      	ldr	r0, [pc, #312]	; (80056c0 <checkAktifCalisma+0xb74>)
 8005588:	f003 fe62 	bl	8009250 <HAL_GPIO_ReadPin>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d129      	bne.n	80055e6 <checkAktifCalisma+0xa9a>
 8005592:	4b4f      	ldr	r3, [pc, #316]	; (80056d0 <checkAktifCalisma+0xb84>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d125      	bne.n	80055e6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800559a:	2104      	movs	r1, #4
 800559c:	4840      	ldr	r0, [pc, #256]	; (80056a0 <checkAktifCalisma+0xb54>)
 800559e:	f003 fe57 	bl	8009250 <HAL_GPIO_ReadPin>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d003      	beq.n	80055b0 <checkAktifCalisma+0xa64>
 80055a8:	4b4a      	ldr	r3, [pc, #296]	; (80056d4 <checkAktifCalisma+0xb88>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d11a      	bne.n	80055e6 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80055b0:	2102      	movs	r1, #2
 80055b2:	483b      	ldr	r0, [pc, #236]	; (80056a0 <checkAktifCalisma+0xb54>)
 80055b4:	f003 fe4c 	bl	8009250 <HAL_GPIO_ReadPin>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d113      	bne.n	80055e6 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80055be:	4b46      	ldr	r3, [pc, #280]	; (80056d8 <checkAktifCalisma+0xb8c>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	f083 0301 	eor.w	r3, r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00c      	beq.n	80055e6 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80055cc:	4b3d      	ldr	r3, [pc, #244]	; (80056c4 <checkAktifCalisma+0xb78>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80055d4:	4b41      	ldr	r3, [pc, #260]	; (80056dc <checkAktifCalisma+0xb90>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80055da:	4b36      	ldr	r3, [pc, #216]	; (80056b4 <checkAktifCalisma+0xb68>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a40      	ldr	r2, [pc, #256]	; (80056e0 <checkAktifCalisma+0xb94>)
 80055e0:	6013      	str	r3, [r2, #0]
			bekle();
 80055e2:	f7ff f935 	bl	8004850 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80055e6:	4b33      	ldr	r3, [pc, #204]	; (80056b4 <checkAktifCalisma+0xb68>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4b3d      	ldr	r3, [pc, #244]	; (80056e0 <checkAktifCalisma+0xb94>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	4a3c      	ldr	r2, [pc, #240]	; (80056e4 <checkAktifCalisma+0xb98>)
 80055f2:	7812      	ldrb	r2, [r2, #0]
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d211      	bcs.n	800561c <checkAktifCalisma+0xad0>
 80055f8:	2104      	movs	r1, #4
 80055fa:	4829      	ldr	r0, [pc, #164]	; (80056a0 <checkAktifCalisma+0xb54>)
 80055fc:	f003 fe28 	bl	8009250 <HAL_GPIO_ReadPin>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <checkAktifCalisma+0xad0>
 8005606:	4b33      	ldr	r3, [pc, #204]	; (80056d4 <checkAktifCalisma+0xb88>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d006      	beq.n	800561c <checkAktifCalisma+0xad0>
 800560e:	4b2d      	ldr	r3, [pc, #180]	; (80056c4 <checkAktifCalisma+0xb78>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	f083 0301 	eor.w	r3, r3, #1
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 800561c:	4b2f      	ldr	r3, [pc, #188]	; (80056dc <checkAktifCalisma+0xb90>)
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005622:	4b29      	ldr	r3, [pc, #164]	; (80056c8 <checkAktifCalisma+0xb7c>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d160      	bne.n	80056ec <checkAktifCalisma+0xba0>
 800562a:	4b28      	ldr	r3, [pc, #160]	; (80056cc <checkAktifCalisma+0xb80>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d003      	beq.n	800563a <checkAktifCalisma+0xaee>
 8005632:	4b26      	ldr	r3, [pc, #152]	; (80056cc <checkAktifCalisma+0xb80>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b03      	cmp	r3, #3
 8005638:	d158      	bne.n	80056ec <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800563a:	2104      	movs	r1, #4
 800563c:	4818      	ldr	r0, [pc, #96]	; (80056a0 <checkAktifCalisma+0xb54>)
 800563e:	f003 fe07 	bl	8009250 <HAL_GPIO_ReadPin>
 8005642:	4603      	mov	r3, r0
 8005644:	2b01      	cmp	r3, #1
 8005646:	d003      	beq.n	8005650 <checkAktifCalisma+0xb04>
 8005648:	4b22      	ldr	r3, [pc, #136]	; (80056d4 <checkAktifCalisma+0xb88>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d14d      	bne.n	80056ec <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005650:	2102      	movs	r1, #2
 8005652:	4813      	ldr	r0, [pc, #76]	; (80056a0 <checkAktifCalisma+0xb54>)
 8005654:	f003 fdfc 	bl	8009250 <HAL_GPIO_ReadPin>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d146      	bne.n	80056ec <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800565e:	2180      	movs	r1, #128	; 0x80
 8005660:	480f      	ldr	r0, [pc, #60]	; (80056a0 <checkAktifCalisma+0xb54>)
 8005662:	f003 fdf5 	bl	8009250 <HAL_GPIO_ReadPin>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d103      	bne.n	8005674 <checkAktifCalisma+0xb28>
 800566c:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <checkAktifCalisma+0xb84>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <checkAktifCalisma+0xb40>
 8005674:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005678:	4811      	ldr	r0, [pc, #68]	; (80056c0 <checkAktifCalisma+0xb74>)
 800567a:	f003 fde9 	bl	8009250 <HAL_GPIO_ReadPin>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d133      	bne.n	80056ec <checkAktifCalisma+0xba0>
 8005684:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <checkAktifCalisma+0xb84>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d12f      	bne.n	80056ec <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 800568c:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <checkAktifCalisma+0xb78>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d02b      	beq.n	80056ec <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005694:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <checkAktifCalisma+0xb9c>)
 8005696:	2201      	movs	r2, #1
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	e02a      	b.n	80056f2 <checkAktifCalisma+0xba6>
 800569c:	20000257 	.word	0x20000257
 80056a0:	40011000 	.word	0x40011000
 80056a4:	2000025b 	.word	0x2000025b
 80056a8:	20000272 	.word	0x20000272
 80056ac:	20000273 	.word	0x20000273
 80056b0:	20000253 	.word	0x20000253
 80056b4:	200001fc 	.word	0x200001fc
 80056b8:	20000208 	.word	0x20000208
 80056bc:	20000236 	.word	0x20000236
 80056c0:	40010c00 	.word	0x40010c00
 80056c4:	20000262 	.word	0x20000262
 80056c8:	20000229 	.word	0x20000229
 80056cc:	20000228 	.word	0x20000228
 80056d0:	2000022c 	.word	0x2000022c
 80056d4:	20000226 	.word	0x20000226
 80056d8:	2000024f 	.word	0x2000024f
 80056dc:	20000263 	.word	0x20000263
 80056e0:	20000200 	.word	0x20000200
 80056e4:	20000239 	.word	0x20000239
 80056e8:	20000264 	.word	0x20000264
		} else {
			kapi1butonkontrol=0;
 80056ec:	4b8b      	ldr	r3, [pc, #556]	; (800591c <checkAktifCalisma+0xdd0>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80056f2:	4b8b      	ldr	r3, [pc, #556]	; (8005920 <checkAktifCalisma+0xdd4>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d121      	bne.n	800573e <checkAktifCalisma+0xbf2>
 80056fa:	4b8a      	ldr	r3, [pc, #552]	; (8005924 <checkAktifCalisma+0xdd8>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d003      	beq.n	800570a <checkAktifCalisma+0xbbe>
 8005702:	4b88      	ldr	r3, [pc, #544]	; (8005924 <checkAktifCalisma+0xdd8>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b03      	cmp	r3, #3
 8005708:	d119      	bne.n	800573e <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800570a:	2104      	movs	r1, #4
 800570c:	4886      	ldr	r0, [pc, #536]	; (8005928 <checkAktifCalisma+0xddc>)
 800570e:	f003 fd9f 	bl	8009250 <HAL_GPIO_ReadPin>
 8005712:	4603      	mov	r3, r0
 8005714:	2b01      	cmp	r3, #1
 8005716:	d003      	beq.n	8005720 <checkAktifCalisma+0xbd4>
 8005718:	4b84      	ldr	r3, [pc, #528]	; (800592c <checkAktifCalisma+0xde0>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10e      	bne.n	800573e <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005720:	2102      	movs	r1, #2
 8005722:	4881      	ldr	r0, [pc, #516]	; (8005928 <checkAktifCalisma+0xddc>)
 8005724:	f003 fd94 	bl	8009250 <HAL_GPIO_ReadPin>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d107      	bne.n	800573e <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 800572e:	4b80      	ldr	r3, [pc, #512]	; (8005930 <checkAktifCalisma+0xde4>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005736:	4b7f      	ldr	r3, [pc, #508]	; (8005934 <checkAktifCalisma+0xde8>)
 8005738:	2201      	movs	r2, #1
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	e002      	b.n	8005744 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 800573e:	4b7d      	ldr	r3, [pc, #500]	; (8005934 <checkAktifCalisma+0xde8>)
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005744:	4b75      	ldr	r3, [pc, #468]	; (800591c <checkAktifCalisma+0xdd0>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d107      	bne.n	800575c <checkAktifCalisma+0xc10>
 800574c:	4b79      	ldr	r3, [pc, #484]	; (8005934 <checkAktifCalisma+0xde8>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d103      	bne.n	800575c <checkAktifCalisma+0xc10>
 8005754:	4b78      	ldr	r3, [pc, #480]	; (8005938 <checkAktifCalisma+0xdec>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800575c:	2201      	movs	r2, #1
 800575e:	2180      	movs	r1, #128	; 0x80
 8005760:	4876      	ldr	r0, [pc, #472]	; (800593c <checkAktifCalisma+0xdf0>)
 8005762:	f003 fd8c 	bl	800927e <HAL_GPIO_WritePin>
 8005766:	e004      	b.n	8005772 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005768:	2200      	movs	r2, #0
 800576a:	2180      	movs	r1, #128	; 0x80
 800576c:	4873      	ldr	r0, [pc, #460]	; (800593c <checkAktifCalisma+0xdf0>)
 800576e:	f003 fd86 	bl	800927e <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005772:	4b73      	ldr	r3, [pc, #460]	; (8005940 <checkAktifCalisma+0xdf4>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d141      	bne.n	80057fe <checkAktifCalisma+0xcb2>
 800577a:	4b6a      	ldr	r3, [pc, #424]	; (8005924 <checkAktifCalisma+0xdd8>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d003      	beq.n	800578a <checkAktifCalisma+0xc3e>
 8005782:	4b68      	ldr	r3, [pc, #416]	; (8005924 <checkAktifCalisma+0xdd8>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b03      	cmp	r3, #3
 8005788:	d139      	bne.n	80057fe <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800578a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800578e:	4866      	ldr	r0, [pc, #408]	; (8005928 <checkAktifCalisma+0xddc>)
 8005790:	f003 fd5e 	bl	8009250 <HAL_GPIO_ReadPin>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d103      	bne.n	80057a2 <checkAktifCalisma+0xc56>
 800579a:	4b6a      	ldr	r3, [pc, #424]	; (8005944 <checkAktifCalisma+0xdf8>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <checkAktifCalisma+0xc6e>
 80057a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057a6:	4868      	ldr	r0, [pc, #416]	; (8005948 <checkAktifCalisma+0xdfc>)
 80057a8:	f003 fd52 	bl	8009250 <HAL_GPIO_ReadPin>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d125      	bne.n	80057fe <checkAktifCalisma+0xcb2>
 80057b2:	4b64      	ldr	r3, [pc, #400]	; (8005944 <checkAktifCalisma+0xdf8>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d121      	bne.n	80057fe <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80057ba:	2102      	movs	r1, #2
 80057bc:	485a      	ldr	r0, [pc, #360]	; (8005928 <checkAktifCalisma+0xddc>)
 80057be:	f003 fd47 	bl	8009250 <HAL_GPIO_ReadPin>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d11a      	bne.n	80057fe <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80057c8:	2104      	movs	r1, #4
 80057ca:	4857      	ldr	r0, [pc, #348]	; (8005928 <checkAktifCalisma+0xddc>)
 80057cc:	f003 fd40 	bl	8009250 <HAL_GPIO_ReadPin>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d113      	bne.n	80057fe <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80057d6:	4b56      	ldr	r3, [pc, #344]	; (8005930 <checkAktifCalisma+0xde4>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00f      	beq.n	80057fe <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80057de:	4b5b      	ldr	r3, [pc, #364]	; (800594c <checkAktifCalisma+0xe00>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	f083 0301 	eor.w	r3, r3, #1
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80057ec:	4b58      	ldr	r3, [pc, #352]	; (8005950 <checkAktifCalisma+0xe04>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80057f2:	4b58      	ldr	r3, [pc, #352]	; (8005954 <checkAktifCalisma+0xe08>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a58      	ldr	r2, [pc, #352]	; (8005958 <checkAktifCalisma+0xe0c>)
 80057f8:	6013      	str	r3, [r2, #0]
			bekle();
 80057fa:	f7ff f829 	bl	8004850 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80057fe:	4b55      	ldr	r3, [pc, #340]	; (8005954 <checkAktifCalisma+0xe08>)
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	4b55      	ldr	r3, [pc, #340]	; (8005958 <checkAktifCalisma+0xe0c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	4a54      	ldr	r2, [pc, #336]	; (800595c <checkAktifCalisma+0xe10>)
 800580a:	7812      	ldrb	r2, [r2, #0]
 800580c:	4293      	cmp	r3, r2
 800580e:	d20d      	bcs.n	800582c <checkAktifCalisma+0xce0>
 8005810:	2102      	movs	r1, #2
 8005812:	4845      	ldr	r0, [pc, #276]	; (8005928 <checkAktifCalisma+0xddc>)
 8005814:	f003 fd1c 	bl	8009250 <HAL_GPIO_ReadPin>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d006      	beq.n	800582c <checkAktifCalisma+0xce0>
 800581e:	4b44      	ldr	r3, [pc, #272]	; (8005930 <checkAktifCalisma+0xde4>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	f083 0301 	eor.w	r3, r3, #1
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 800582c:	4b48      	ldr	r3, [pc, #288]	; (8005950 <checkAktifCalisma+0xe04>)
 800582e:	2200      	movs	r2, #0
 8005830:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005832:	4b43      	ldr	r3, [pc, #268]	; (8005940 <checkAktifCalisma+0xdf4>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d135      	bne.n	80058a6 <checkAktifCalisma+0xd5a>
 800583a:	4b3a      	ldr	r3, [pc, #232]	; (8005924 <checkAktifCalisma+0xdd8>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d003      	beq.n	800584a <checkAktifCalisma+0xcfe>
 8005842:	4b38      	ldr	r3, [pc, #224]	; (8005924 <checkAktifCalisma+0xdd8>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b03      	cmp	r3, #3
 8005848:	d12d      	bne.n	80058a6 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800584a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800584e:	4836      	ldr	r0, [pc, #216]	; (8005928 <checkAktifCalisma+0xddc>)
 8005850:	f003 fcfe 	bl	8009250 <HAL_GPIO_ReadPin>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d103      	bne.n	8005862 <checkAktifCalisma+0xd16>
 800585a:	4b3a      	ldr	r3, [pc, #232]	; (8005944 <checkAktifCalisma+0xdf8>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <checkAktifCalisma+0xd2e>
 8005862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005866:	4838      	ldr	r0, [pc, #224]	; (8005948 <checkAktifCalisma+0xdfc>)
 8005868:	f003 fcf2 	bl	8009250 <HAL_GPIO_ReadPin>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d119      	bne.n	80058a6 <checkAktifCalisma+0xd5a>
 8005872:	4b34      	ldr	r3, [pc, #208]	; (8005944 <checkAktifCalisma+0xdf8>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d115      	bne.n	80058a6 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800587a:	2102      	movs	r1, #2
 800587c:	482a      	ldr	r0, [pc, #168]	; (8005928 <checkAktifCalisma+0xddc>)
 800587e:	f003 fce7 	bl	8009250 <HAL_GPIO_ReadPin>
 8005882:	4603      	mov	r3, r0
 8005884:	2b01      	cmp	r3, #1
 8005886:	d10e      	bne.n	80058a6 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005888:	2104      	movs	r1, #4
 800588a:	4827      	ldr	r0, [pc, #156]	; (8005928 <checkAktifCalisma+0xddc>)
 800588c:	f003 fce0 	bl	8009250 <HAL_GPIO_ReadPin>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d107      	bne.n	80058a6 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005896:	4b26      	ldr	r3, [pc, #152]	; (8005930 <checkAktifCalisma+0xde4>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800589e:	4b30      	ldr	r3, [pc, #192]	; (8005960 <checkAktifCalisma+0xe14>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e002      	b.n	80058ac <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80058a6:	4b2e      	ldr	r3, [pc, #184]	; (8005960 <checkAktifCalisma+0xe14>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058ac:	4b24      	ldr	r3, [pc, #144]	; (8005940 <checkAktifCalisma+0xdf4>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d11d      	bne.n	80058f0 <checkAktifCalisma+0xda4>
 80058b4:	4b1b      	ldr	r3, [pc, #108]	; (8005924 <checkAktifCalisma+0xdd8>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d003      	beq.n	80058c4 <checkAktifCalisma+0xd78>
 80058bc:	4b19      	ldr	r3, [pc, #100]	; (8005924 <checkAktifCalisma+0xdd8>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d115      	bne.n	80058f0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80058c4:	2102      	movs	r1, #2
 80058c6:	4818      	ldr	r0, [pc, #96]	; (8005928 <checkAktifCalisma+0xddc>)
 80058c8:	f003 fcc2 	bl	8009250 <HAL_GPIO_ReadPin>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d10e      	bne.n	80058f0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80058d2:	2104      	movs	r1, #4
 80058d4:	4814      	ldr	r0, [pc, #80]	; (8005928 <checkAktifCalisma+0xddc>)
 80058d6:	f003 fcbb 	bl	8009250 <HAL_GPIO_ReadPin>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d107      	bne.n	80058f0 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80058e0:	4b13      	ldr	r3, [pc, #76]	; (8005930 <checkAktifCalisma+0xde4>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80058e8:	4b1e      	ldr	r3, [pc, #120]	; (8005964 <checkAktifCalisma+0xe18>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	e002      	b.n	80058f6 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80058f0:	4b1c      	ldr	r3, [pc, #112]	; (8005964 <checkAktifCalisma+0xe18>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80058f6:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <checkAktifCalisma+0xe14>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d107      	bne.n	800590e <checkAktifCalisma+0xdc2>
 80058fe:	4b19      	ldr	r3, [pc, #100]	; (8005964 <checkAktifCalisma+0xe18>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d103      	bne.n	800590e <checkAktifCalisma+0xdc2>
 8005906:	4b12      	ldr	r3, [pc, #72]	; (8005950 <checkAktifCalisma+0xe04>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d02c      	beq.n	8005968 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800590e:	2201      	movs	r2, #1
 8005910:	2140      	movs	r1, #64	; 0x40
 8005912:	480a      	ldr	r0, [pc, #40]	; (800593c <checkAktifCalisma+0xdf0>)
 8005914:	f003 fcb3 	bl	800927e <HAL_GPIO_WritePin>
 8005918:	e02b      	b.n	8005972 <checkAktifCalisma+0xe26>
 800591a:	bf00      	nop
 800591c:	20000264 	.word	0x20000264
 8005920:	20000229 	.word	0x20000229
 8005924:	20000228 	.word	0x20000228
 8005928:	40011000 	.word	0x40011000
 800592c:	20000226 	.word	0x20000226
 8005930:	20000262 	.word	0x20000262
 8005934:	20000265 	.word	0x20000265
 8005938:	20000263 	.word	0x20000263
 800593c:	40010800 	.word	0x40010800
 8005940:	2000022a 	.word	0x2000022a
 8005944:	2000022c 	.word	0x2000022c
 8005948:	40010c00 	.word	0x40010c00
 800594c:	2000024f 	.word	0x2000024f
 8005950:	20000266 	.word	0x20000266
 8005954:	200001fc 	.word	0x200001fc
 8005958:	20000200 	.word	0x20000200
 800595c:	2000023a 	.word	0x2000023a
 8005960:	20000267 	.word	0x20000267
 8005964:	20000268 	.word	0x20000268
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005968:	2200      	movs	r2, #0
 800596a:	2140      	movs	r1, #64	; 0x40
 800596c:	488d      	ldr	r0, [pc, #564]	; (8005ba4 <checkAktifCalisma+0x1058>)
 800596e:	f003 fc86 	bl	800927e <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005972:	4b8d      	ldr	r3, [pc, #564]	; (8005ba8 <checkAktifCalisma+0x105c>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <checkAktifCalisma+0xe36>
 800597a:	4b8b      	ldr	r3, [pc, #556]	; (8005ba8 <checkAktifCalisma+0x105c>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d115      	bne.n	80059ae <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005982:	2104      	movs	r1, #4
 8005984:	4889      	ldr	r0, [pc, #548]	; (8005bac <checkAktifCalisma+0x1060>)
 8005986:	f003 fc63 	bl	8009250 <HAL_GPIO_ReadPin>
 800598a:	4603      	mov	r3, r0
 800598c:	2b01      	cmp	r3, #1
 800598e:	d003      	beq.n	8005998 <checkAktifCalisma+0xe4c>
 8005990:	4b87      	ldr	r3, [pc, #540]	; (8005bb0 <checkAktifCalisma+0x1064>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005998:	2102      	movs	r1, #2
 800599a:	4884      	ldr	r0, [pc, #528]	; (8005bac <checkAktifCalisma+0x1060>)
 800599c:	f003 fc58 	bl	8009250 <HAL_GPIO_ReadPin>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d103      	bne.n	80059ae <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 80059a6:	4b83      	ldr	r3, [pc, #524]	; (8005bb4 <checkAktifCalisma+0x1068>)
 80059a8:	2201      	movs	r2, #1
 80059aa:	701a      	strb	r2, [r3, #0]
 80059ac:	e002      	b.n	80059b4 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 80059ae:	4b81      	ldr	r3, [pc, #516]	; (8005bb4 <checkAktifCalisma+0x1068>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80059b4:	4b7c      	ldr	r3, [pc, #496]	; (8005ba8 <checkAktifCalisma+0x105c>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d003      	beq.n	80059c4 <checkAktifCalisma+0xe78>
 80059bc:	4b7a      	ldr	r3, [pc, #488]	; (8005ba8 <checkAktifCalisma+0x105c>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d111      	bne.n	80059e8 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80059c4:	2102      	movs	r1, #2
 80059c6:	4879      	ldr	r0, [pc, #484]	; (8005bac <checkAktifCalisma+0x1060>)
 80059c8:	f003 fc42 	bl	8009250 <HAL_GPIO_ReadPin>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d10a      	bne.n	80059e8 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80059d2:	2104      	movs	r1, #4
 80059d4:	4875      	ldr	r0, [pc, #468]	; (8005bac <checkAktifCalisma+0x1060>)
 80059d6:	f003 fc3b 	bl	8009250 <HAL_GPIO_ReadPin>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d103      	bne.n	80059e8 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80059e0:	4b75      	ldr	r3, [pc, #468]	; (8005bb8 <checkAktifCalisma+0x106c>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	e002      	b.n	80059ee <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80059e8:	4b73      	ldr	r3, [pc, #460]	; (8005bb8 <checkAktifCalisma+0x106c>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80059ee:	4b71      	ldr	r3, [pc, #452]	; (8005bb4 <checkAktifCalisma+0x1068>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00f      	beq.n	8005a16 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80059f6:	4b71      	ldr	r3, [pc, #452]	; (8005bbc <checkAktifCalisma+0x1070>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d10b      	bne.n	8005a16 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80059fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a02:	486f      	ldr	r0, [pc, #444]	; (8005bc0 <checkAktifCalisma+0x1074>)
 8005a04:	f003 fc24 	bl	8009250 <HAL_GPIO_ReadPin>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005a0e:	4b6d      	ldr	r3, [pc, #436]	; (8005bc4 <checkAktifCalisma+0x1078>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	e002      	b.n	8005a1c <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005a16:	4b6b      	ldr	r3, [pc, #428]	; (8005bc4 <checkAktifCalisma+0x1078>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005a1c:	4b66      	ldr	r3, [pc, #408]	; (8005bb8 <checkAktifCalisma+0x106c>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00f      	beq.n	8005a44 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005a24:	4b65      	ldr	r3, [pc, #404]	; (8005bbc <checkAktifCalisma+0x1070>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d10b      	bne.n	8005a44 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005a2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a30:	4863      	ldr	r0, [pc, #396]	; (8005bc0 <checkAktifCalisma+0x1074>)
 8005a32:	f003 fc0d 	bl	8009250 <HAL_GPIO_ReadPin>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d103      	bne.n	8005a44 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005a3c:	4b62      	ldr	r3, [pc, #392]	; (8005bc8 <checkAktifCalisma+0x107c>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	e002      	b.n	8005a4a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005a44:	4b60      	ldr	r3, [pc, #384]	; (8005bc8 <checkAktifCalisma+0x107c>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005a4a:	4b60      	ldr	r3, [pc, #384]	; (8005bcc <checkAktifCalisma+0x1080>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d137      	bne.n	8005ac2 <checkAktifCalisma+0xf76>
 8005a52:	4b5f      	ldr	r3, [pc, #380]	; (8005bd0 <checkAktifCalisma+0x1084>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d003      	beq.n	8005a62 <checkAktifCalisma+0xf16>
 8005a5a:	4b5d      	ldr	r3, [pc, #372]	; (8005bd0 <checkAktifCalisma+0x1084>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d12f      	bne.n	8005ac2 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005a62:	4b54      	ldr	r3, [pc, #336]	; (8005bb4 <checkAktifCalisma+0x1068>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <checkAktifCalisma+0xf26>
 8005a6a:	4b53      	ldr	r3, [pc, #332]	; (8005bb8 <checkAktifCalisma+0x106c>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d027      	beq.n	8005ac2 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a76:	484d      	ldr	r0, [pc, #308]	; (8005bac <checkAktifCalisma+0x1060>)
 8005a78:	f003 fbea 	bl	8009250 <HAL_GPIO_ReadPin>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d103      	bne.n	8005a8a <checkAktifCalisma+0xf3e>
 8005a82:	4b4e      	ldr	r3, [pc, #312]	; (8005bbc <checkAktifCalisma+0x1070>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005a8a:	4b4e      	ldr	r3, [pc, #312]	; (8005bc4 <checkAktifCalisma+0x1078>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d103      	bne.n	8005a9a <checkAktifCalisma+0xf4e>
 8005a92:	4b4d      	ldr	r3, [pc, #308]	; (8005bc8 <checkAktifCalisma+0x107c>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d013      	beq.n	8005ac2 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005a9a:	4b4e      	ldr	r3, [pc, #312]	; (8005bd4 <checkAktifCalisma+0x1088>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00f      	beq.n	8005ac2 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005aa2:	4b4d      	ldr	r3, [pc, #308]	; (8005bd8 <checkAktifCalisma+0x108c>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	f083 0301 	eor.w	r3, r3, #1
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005ab0:	4b4a      	ldr	r3, [pc, #296]	; (8005bdc <checkAktifCalisma+0x1090>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005ab6:	4b4a      	ldr	r3, [pc, #296]	; (8005be0 <checkAktifCalisma+0x1094>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a4a      	ldr	r2, [pc, #296]	; (8005be4 <checkAktifCalisma+0x1098>)
 8005abc:	6013      	str	r3, [r2, #0]
			bekle();
 8005abe:	f7fe fec7 	bl	8004850 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005ac2:	4b47      	ldr	r3, [pc, #284]	; (8005be0 <checkAktifCalisma+0x1094>)
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4b47      	ldr	r3, [pc, #284]	; (8005be4 <checkAktifCalisma+0x1098>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	4a46      	ldr	r2, [pc, #280]	; (8005be8 <checkAktifCalisma+0x109c>)
 8005ace:	7812      	ldrb	r2, [r2, #0]
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d214      	bcs.n	8005afe <checkAktifCalisma+0xfb2>
 8005ad4:	4b37      	ldr	r3, [pc, #220]	; (8005bb4 <checkAktifCalisma+0x1068>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	f083 0301 	eor.w	r3, r3, #1
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d006      	beq.n	8005af0 <checkAktifCalisma+0xfa4>
 8005ae2:	4b35      	ldr	r3, [pc, #212]	; (8005bb8 <checkAktifCalisma+0x106c>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	f083 0301 	eor.w	r3, r3, #1
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d106      	bne.n	8005afe <checkAktifCalisma+0xfb2>
 8005af0:	4b38      	ldr	r3, [pc, #224]	; (8005bd4 <checkAktifCalisma+0x1088>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	f083 0301 	eor.w	r3, r3, #1
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005afe:	4b37      	ldr	r3, [pc, #220]	; (8005bdc <checkAktifCalisma+0x1090>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005b04:	4b31      	ldr	r3, [pc, #196]	; (8005bcc <checkAktifCalisma+0x1080>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d12b      	bne.n	8005b64 <checkAktifCalisma+0x1018>
 8005b0c:	4b30      	ldr	r3, [pc, #192]	; (8005bd0 <checkAktifCalisma+0x1084>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d003      	beq.n	8005b1c <checkAktifCalisma+0xfd0>
 8005b14:	4b2e      	ldr	r3, [pc, #184]	; (8005bd0 <checkAktifCalisma+0x1084>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d123      	bne.n	8005b64 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005b1c:	4b25      	ldr	r3, [pc, #148]	; (8005bb4 <checkAktifCalisma+0x1068>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d103      	bne.n	8005b2c <checkAktifCalisma+0xfe0>
 8005b24:	4b24      	ldr	r3, [pc, #144]	; (8005bb8 <checkAktifCalisma+0x106c>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01b      	beq.n	8005b64 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b30:	481e      	ldr	r0, [pc, #120]	; (8005bac <checkAktifCalisma+0x1060>)
 8005b32:	f003 fb8d 	bl	8009250 <HAL_GPIO_ReadPin>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <checkAktifCalisma+0xff8>
 8005b3c:	4b1f      	ldr	r3, [pc, #124]	; (8005bbc <checkAktifCalisma+0x1070>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d007      	beq.n	8005b54 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005b44:	4b1f      	ldr	r3, [pc, #124]	; (8005bc4 <checkAktifCalisma+0x1078>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <checkAktifCalisma+0x1008>
 8005b4c:	4b1e      	ldr	r3, [pc, #120]	; (8005bc8 <checkAktifCalisma+0x107c>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005b54:	4b1f      	ldr	r3, [pc, #124]	; (8005bd4 <checkAktifCalisma+0x1088>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005b5c:	4b23      	ldr	r3, [pc, #140]	; (8005bec <checkAktifCalisma+0x10a0>)
 8005b5e:	2201      	movs	r2, #1
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e002      	b.n	8005b6a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005b64:	4b21      	ldr	r3, [pc, #132]	; (8005bec <checkAktifCalisma+0x10a0>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005b6a:	4b18      	ldr	r3, [pc, #96]	; (8005bcc <checkAktifCalisma+0x1080>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d140      	bne.n	8005bf4 <checkAktifCalisma+0x10a8>
 8005b72:	4b17      	ldr	r3, [pc, #92]	; (8005bd0 <checkAktifCalisma+0x1084>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d003      	beq.n	8005b82 <checkAktifCalisma+0x1036>
 8005b7a:	4b15      	ldr	r3, [pc, #84]	; (8005bd0 <checkAktifCalisma+0x1084>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d138      	bne.n	8005bf4 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <checkAktifCalisma+0x1068>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <checkAktifCalisma+0x1046>
 8005b8a:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <checkAktifCalisma+0x106c>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d030      	beq.n	8005bf4 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005b92:	4b10      	ldr	r3, [pc, #64]	; (8005bd4 <checkAktifCalisma+0x1088>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d02c      	beq.n	8005bf4 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005b9a:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <checkAktifCalisma+0x10a4>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	e02b      	b.n	8005bfa <checkAktifCalisma+0x10ae>
 8005ba2:	bf00      	nop
 8005ba4:	40010800 	.word	0x40010800
 8005ba8:	2000022d 	.word	0x2000022d
 8005bac:	40011000 	.word	0x40011000
 8005bb0:	20000226 	.word	0x20000226
 8005bb4:	2000026c 	.word	0x2000026c
 8005bb8:	2000026d 	.word	0x2000026d
 8005bbc:	2000022c 	.word	0x2000022c
 8005bc0:	40010c00 	.word	0x40010c00
 8005bc4:	2000027c 	.word	0x2000027c
 8005bc8:	2000027d 	.word	0x2000027d
 8005bcc:	2000022b 	.word	0x2000022b
 8005bd0:	20000228 	.word	0x20000228
 8005bd4:	20000262 	.word	0x20000262
 8005bd8:	2000024f 	.word	0x2000024f
 8005bdc:	20000269 	.word	0x20000269
 8005be0:	200001fc 	.word	0x200001fc
 8005be4:	20000200 	.word	0x20000200
 8005be8:	2000023b 	.word	0x2000023b
 8005bec:	2000026a 	.word	0x2000026a
 8005bf0:	2000026b 	.word	0x2000026b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005bf4:	4b8b      	ldr	r3, [pc, #556]	; (8005e24 <checkAktifCalisma+0x12d8>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005bfa:	4b8b      	ldr	r3, [pc, #556]	; (8005e28 <checkAktifCalisma+0x12dc>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <checkAktifCalisma+0x10c6>
 8005c02:	4b8a      	ldr	r3, [pc, #552]	; (8005e2c <checkAktifCalisma+0x12e0>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <checkAktifCalisma+0x10c6>
 8005c0a:	4b86      	ldr	r3, [pc, #536]	; (8005e24 <checkAktifCalisma+0x12d8>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005c12:	2201      	movs	r2, #1
 8005c14:	2120      	movs	r1, #32
 8005c16:	4886      	ldr	r0, [pc, #536]	; (8005e30 <checkAktifCalisma+0x12e4>)
 8005c18:	f003 fb31 	bl	800927e <HAL_GPIO_WritePin>
 8005c1c:	e004      	b.n	8005c28 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2120      	movs	r1, #32
 8005c22:	4883      	ldr	r0, [pc, #524]	; (8005e30 <checkAktifCalisma+0x12e4>)
 8005c24:	f003 fb2b 	bl	800927e <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005c28:	4b82      	ldr	r3, [pc, #520]	; (8005e34 <checkAktifCalisma+0x12e8>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00e      	beq.n	8005c4e <checkAktifCalisma+0x1102>
 8005c30:	2102      	movs	r1, #2
 8005c32:	4881      	ldr	r0, [pc, #516]	; (8005e38 <checkAktifCalisma+0x12ec>)
 8005c34:	f003 fb0c 	bl	8009250 <HAL_GPIO_ReadPin>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d107      	bne.n	8005c4e <checkAktifCalisma+0x1102>
 8005c3e:	4b7f      	ldr	r3, [pc, #508]	; (8005e3c <checkAktifCalisma+0x12f0>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d103      	bne.n	8005c4e <checkAktifCalisma+0x1102>
 8005c46:	4b7e      	ldr	r3, [pc, #504]	; (8005e40 <checkAktifCalisma+0x12f4>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d112      	bne.n	8005c74 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005c4e:	4b7d      	ldr	r3, [pc, #500]	; (8005e44 <checkAktifCalisma+0x12f8>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d066      	beq.n	8005d24 <checkAktifCalisma+0x11d8>
 8005c56:	2104      	movs	r1, #4
 8005c58:	4877      	ldr	r0, [pc, #476]	; (8005e38 <checkAktifCalisma+0x12ec>)
 8005c5a:	f003 faf9 	bl	8009250 <HAL_GPIO_ReadPin>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d15f      	bne.n	8005d24 <checkAktifCalisma+0x11d8>
 8005c64:	4b75      	ldr	r3, [pc, #468]	; (8005e3c <checkAktifCalisma+0x12f0>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d05b      	beq.n	8005d24 <checkAktifCalisma+0x11d8>
 8005c6c:	4b74      	ldr	r3, [pc, #464]	; (8005e40 <checkAktifCalisma+0x12f4>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d057      	beq.n	8005d24 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005c74:	4b74      	ldr	r3, [pc, #464]	; (8005e48 <checkAktifCalisma+0x12fc>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	4b72      	ldr	r3, [pc, #456]	; (8005e48 <checkAktifCalisma+0x12fc>)
 8005c7e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005c80:	4b71      	ldr	r3, [pc, #452]	; (8005e48 <checkAktifCalisma+0x12fc>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b09      	cmp	r3, #9
 8005c86:	d908      	bls.n	8005c9a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005c88:	4b6f      	ldr	r3, [pc, #444]	; (8005e48 <checkAktifCalisma+0x12fc>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005c8e:	4b6f      	ldr	r3, [pc, #444]	; (8005e4c <checkAktifCalisma+0x1300>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	3301      	adds	r3, #1
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	4b6d      	ldr	r3, [pc, #436]	; (8005e4c <checkAktifCalisma+0x1300>)
 8005c98:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005c9a:	4b6c      	ldr	r3, [pc, #432]	; (8005e4c <checkAktifCalisma+0x1300>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b09      	cmp	r3, #9
 8005ca0:	d908      	bls.n	8005cb4 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005ca2:	4b6a      	ldr	r3, [pc, #424]	; (8005e4c <checkAktifCalisma+0x1300>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005ca8:	4b69      	ldr	r3, [pc, #420]	; (8005e50 <checkAktifCalisma+0x1304>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	3301      	adds	r3, #1
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	4b67      	ldr	r3, [pc, #412]	; (8005e50 <checkAktifCalisma+0x1304>)
 8005cb2:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005cb4:	4b66      	ldr	r3, [pc, #408]	; (8005e50 <checkAktifCalisma+0x1304>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b09      	cmp	r3, #9
 8005cba:	d908      	bls.n	8005cce <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005cbc:	4b64      	ldr	r3, [pc, #400]	; (8005e50 <checkAktifCalisma+0x1304>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005cc2:	4b64      	ldr	r3, [pc, #400]	; (8005e54 <checkAktifCalisma+0x1308>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	4b62      	ldr	r3, [pc, #392]	; (8005e54 <checkAktifCalisma+0x1308>)
 8005ccc:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005cce:	4b61      	ldr	r3, [pc, #388]	; (8005e54 <checkAktifCalisma+0x1308>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b09      	cmp	r3, #9
 8005cd4:	d908      	bls.n	8005ce8 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005cd6:	4b5f      	ldr	r3, [pc, #380]	; (8005e54 <checkAktifCalisma+0x1308>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005cdc:	4b5e      	ldr	r3, [pc, #376]	; (8005e58 <checkAktifCalisma+0x130c>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	4b5c      	ldr	r3, [pc, #368]	; (8005e58 <checkAktifCalisma+0x130c>)
 8005ce6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005ce8:	4b5b      	ldr	r3, [pc, #364]	; (8005e58 <checkAktifCalisma+0x130c>)
 8005cea:	781a      	ldrb	r2, [r3, #0]
 8005cec:	4b5b      	ldr	r3, [pc, #364]	; (8005e5c <checkAktifCalisma+0x1310>)
 8005cee:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005cf2:	4b58      	ldr	r3, [pc, #352]	; (8005e54 <checkAktifCalisma+0x1308>)
 8005cf4:	781a      	ldrb	r2, [r3, #0]
 8005cf6:	4b59      	ldr	r3, [pc, #356]	; (8005e5c <checkAktifCalisma+0x1310>)
 8005cf8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005cfa:	4b55      	ldr	r3, [pc, #340]	; (8005e50 <checkAktifCalisma+0x1304>)
 8005cfc:	781a      	ldrb	r2, [r3, #0]
 8005cfe:	4b57      	ldr	r3, [pc, #348]	; (8005e5c <checkAktifCalisma+0x1310>)
 8005d00:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005d02:	4b52      	ldr	r3, [pc, #328]	; (8005e4c <checkAktifCalisma+0x1300>)
 8005d04:	781a      	ldrb	r2, [r3, #0]
 8005d06:	4b55      	ldr	r3, [pc, #340]	; (8005e5c <checkAktifCalisma+0x1310>)
 8005d08:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005d0a:	4b4f      	ldr	r3, [pc, #316]	; (8005e48 <checkAktifCalisma+0x12fc>)
 8005d0c:	781a      	ldrb	r2, [r3, #0]
 8005d0e:	4b53      	ldr	r3, [pc, #332]	; (8005e5c <checkAktifCalisma+0x1310>)
 8005d10:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005d12:	4b53      	ldr	r3, [pc, #332]	; (8005e60 <checkAktifCalisma+0x1314>)
 8005d14:	2201      	movs	r2, #1
 8005d16:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005d18:	4b46      	ldr	r3, [pc, #280]	; (8005e34 <checkAktifCalisma+0x12e8>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005d1e:	4b49      	ldr	r3, [pc, #292]	; (8005e44 <checkAktifCalisma+0x12f8>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d28:	484e      	ldr	r0, [pc, #312]	; (8005e64 <checkAktifCalisma+0x1318>)
 8005d2a:	f003 fa91 	bl	8009250 <HAL_GPIO_ReadPin>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d016      	beq.n	8005d62 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005d34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d38:	484a      	ldr	r0, [pc, #296]	; (8005e64 <checkAktifCalisma+0x1318>)
 8005d3a:	f003 fa89 	bl	8009250 <HAL_GPIO_ReadPin>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00e      	beq.n	8005d62 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d48:	4846      	ldr	r0, [pc, #280]	; (8005e64 <checkAktifCalisma+0x1318>)
 8005d4a:	f003 fa81 	bl	8009250 <HAL_GPIO_ReadPin>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d006      	beq.n	8005d62 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005d54:	2140      	movs	r1, #64	; 0x40
 8005d56:	4838      	ldr	r0, [pc, #224]	; (8005e38 <checkAktifCalisma+0x12ec>)
 8005d58:	f003 fa7a 	bl	8009250 <HAL_GPIO_ReadPin>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d103      	bne.n	8005d6a <checkAktifCalisma+0x121e>
			startBasili=1;
 8005d62:	4b41      	ldr	r3, [pc, #260]	; (8005e68 <checkAktifCalisma+0x131c>)
 8005d64:	2201      	movs	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	e002      	b.n	8005d70 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005d6a:	4b3f      	ldr	r3, [pc, #252]	; (8005e68 <checkAktifCalisma+0x131c>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005d70:	4b3d      	ldr	r3, [pc, #244]	; (8005e68 <checkAktifCalisma+0x131c>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d016      	beq.n	8005da6 <checkAktifCalisma+0x125a>
 8005d78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d7c:	4839      	ldr	r0, [pc, #228]	; (8005e64 <checkAktifCalisma+0x1318>)
 8005d7e:	f003 fa67 	bl	8009250 <HAL_GPIO_ReadPin>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d10e      	bne.n	8005da6 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005d88:	4b38      	ldr	r3, [pc, #224]	; (8005e6c <checkAktifCalisma+0x1320>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005d8e:	2001      	movs	r0, #1
 8005d90:	f7fa fe4a 	bl	8000a28 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005d94:	2001      	movs	r0, #1
 8005d96:	f7fa fded 	bl	8000974 <hata2EEPROM>
			convertAndSendData();
 8005d9a:	f001 fc85 	bl	80076a8 <convertAndSendData>
			acilstophatasi=1;
 8005d9e:	4b34      	ldr	r3, [pc, #208]	; (8005e70 <checkAktifCalisma+0x1324>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	e018      	b.n	8005dd8 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005da6:	4b32      	ldr	r3, [pc, #200]	; (8005e70 <checkAktifCalisma+0x1324>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d014      	beq.n	8005dd8 <checkAktifCalisma+0x128c>
 8005dae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005db2:	482c      	ldr	r0, [pc, #176]	; (8005e64 <checkAktifCalisma+0x1318>)
 8005db4:	f003 fa4c 	bl	8009250 <HAL_GPIO_ReadPin>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10c      	bne.n	8005dd8 <checkAktifCalisma+0x128c>
 8005dbe:	4b2a      	ldr	r3, [pc, #168]	; (8005e68 <checkAktifCalisma+0x131c>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	f083 0301 	eor.w	r3, r3, #1
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005dcc:	4b28      	ldr	r3, [pc, #160]	; (8005e70 <checkAktifCalisma+0x1324>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005dd2:	2001      	movs	r0, #1
 8005dd4:	f7fe fce8 	bl	80047a8 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005dd8:	4b26      	ldr	r3, [pc, #152]	; (8005e74 <checkAktifCalisma+0x1328>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	f083 0301 	eor.w	r3, r3, #1
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d04e      	beq.n	8005e84 <checkAktifCalisma+0x1338>
 8005de6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005dea:	481e      	ldr	r0, [pc, #120]	; (8005e64 <checkAktifCalisma+0x1318>)
 8005dec:	f003 fa30 	bl	8009250 <HAL_GPIO_ReadPin>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <checkAktifCalisma+0x12b2>
 8005df6:	4b20      	ldr	r3, [pc, #128]	; (8005e78 <checkAktifCalisma+0x132c>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d042      	beq.n	8005e84 <checkAktifCalisma+0x1338>
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	; (8005e7c <checkAktifCalisma+0x1330>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d13e      	bne.n	8005e84 <checkAktifCalisma+0x1338>
			hataVar=1;
 8005e06:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <checkAktifCalisma+0x1320>)
 8005e08:	2201      	movs	r2, #1
 8005e0a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005e0c:	2002      	movs	r0, #2
 8005e0e:	f7fa fe0b 	bl	8000a28 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005e12:	2002      	movs	r0, #2
 8005e14:	f7fa fdae 	bl	8000974 <hata2EEPROM>
			convertAndSendData();
 8005e18:	f001 fc46 	bl	80076a8 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005e1c:	4b18      	ldr	r3, [pc, #96]	; (8005e80 <checkAktifCalisma+0x1334>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	e047      	b.n	8005eb4 <checkAktifCalisma+0x1368>
 8005e24:	2000026b 	.word	0x2000026b
 8005e28:	2000026a 	.word	0x2000026a
 8005e2c:	20000269 	.word	0x20000269
 8005e30:	40010800 	.word	0x40010800
 8005e34:	2000025f 	.word	0x2000025f
 8005e38:	40011000 	.word	0x40011000
 8005e3c:	20000226 	.word	0x20000226
 8005e40:	20000262 	.word	0x20000262
 8005e44:	20000260 	.word	0x20000260
 8005e48:	2000021d 	.word	0x2000021d
 8005e4c:	2000021e 	.word	0x2000021e
 8005e50:	20000000 	.word	0x20000000
 8005e54:	20000001 	.word	0x20000001
 8005e58:	2000021f 	.word	0x2000021f
 8005e5c:	20000118 	.word	0x20000118
 8005e60:	2000024c 	.word	0x2000024c
 8005e64:	40010c00 	.word	0x40010c00
 8005e68:	2000026e 	.word	0x2000026e
 8005e6c:	20000275 	.word	0x20000275
 8005e70:	20000270 	.word	0x20000270
 8005e74:	20000277 	.word	0x20000277
 8005e78:	20000281 	.word	0x20000281
 8005e7c:	20000224 	.word	0x20000224
 8005e80:	20000271 	.word	0x20000271
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005e84:	4b9b      	ldr	r3, [pc, #620]	; (80060f4 <checkAktifCalisma+0x15a8>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d013      	beq.n	8005eb4 <checkAktifCalisma+0x1368>
 8005e8c:	4b9a      	ldr	r3, [pc, #616]	; (80060f8 <checkAktifCalisma+0x15ac>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00f      	beq.n	8005eb4 <checkAktifCalisma+0x1368>
 8005e94:	4b99      	ldr	r3, [pc, #612]	; (80060fc <checkAktifCalisma+0x15b0>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	f083 0301 	eor.w	r3, r3, #1
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d008      	beq.n	8005eb4 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005ea2:	4b94      	ldr	r3, [pc, #592]	; (80060f4 <checkAktifCalisma+0x15a8>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005ea8:	4b95      	ldr	r3, [pc, #596]	; (8006100 <checkAktifCalisma+0x15b4>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005eae:	2002      	movs	r0, #2
 8005eb0:	f7fe fc7a 	bl	80047a8 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005eb4:	4b93      	ldr	r3, [pc, #588]	; (8006104 <checkAktifCalisma+0x15b8>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d11e      	bne.n	8005efa <checkAktifCalisma+0x13ae>
 8005ebc:	4b92      	ldr	r3, [pc, #584]	; (8006108 <checkAktifCalisma+0x15bc>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d11a      	bne.n	8005efa <checkAktifCalisma+0x13ae>
 8005ec4:	4b91      	ldr	r3, [pc, #580]	; (800610c <checkAktifCalisma+0x15c0>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d016      	beq.n	8005efa <checkAktifCalisma+0x13ae>
 8005ecc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ed0:	488f      	ldr	r0, [pc, #572]	; (8006110 <checkAktifCalisma+0x15c4>)
 8005ed2:	f003 f9bd 	bl	8009250 <HAL_GPIO_ReadPin>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d10e      	bne.n	8005efa <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005edc:	4b8d      	ldr	r3, [pc, #564]	; (8006114 <checkAktifCalisma+0x15c8>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8005ee2:	2003      	movs	r0, #3
 8005ee4:	f7fa fda0 	bl	8000a28 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8005ee8:	2003      	movs	r0, #3
 8005eea:	f7fa fd43 	bl	8000974 <hata2EEPROM>
			convertAndSendData();
 8005eee:	f001 fbdb 	bl	80076a8 <convertAndSendData>
			basinchatasi=1;
 8005ef2:	4b89      	ldr	r3, [pc, #548]	; (8006118 <checkAktifCalisma+0x15cc>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	e015      	b.n	8005f26 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005efa:	4b87      	ldr	r3, [pc, #540]	; (8006118 <checkAktifCalisma+0x15cc>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d011      	beq.n	8005f26 <checkAktifCalisma+0x13da>
 8005f02:	4b80      	ldr	r3, [pc, #512]	; (8006104 <checkAktifCalisma+0x15b8>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d10d      	bne.n	8005f26 <checkAktifCalisma+0x13da>
 8005f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f0e:	4883      	ldr	r0, [pc, #524]	; (800611c <checkAktifCalisma+0x15d0>)
 8005f10:	f003 f99e 	bl	8009250 <HAL_GPIO_ReadPin>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d105      	bne.n	8005f26 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8005f1a:	4b7f      	ldr	r3, [pc, #508]	; (8006118 <checkAktifCalisma+0x15cc>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8005f20:	2003      	movs	r0, #3
 8005f22:	f7fe fc41 	bl	80047a8 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005f26:	4b7e      	ldr	r3, [pc, #504]	; (8006120 <checkAktifCalisma+0x15d4>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d103      	bne.n	8005f36 <checkAktifCalisma+0x13ea>
 8005f2e:	4b7d      	ldr	r3, [pc, #500]	; (8006124 <checkAktifCalisma+0x15d8>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d01e      	beq.n	8005f74 <checkAktifCalisma+0x1428>
 8005f36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f3a:	487b      	ldr	r0, [pc, #492]	; (8006128 <checkAktifCalisma+0x15dc>)
 8005f3c:	f003 f988 	bl	8009250 <HAL_GPIO_ReadPin>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d116      	bne.n	8005f74 <checkAktifCalisma+0x1428>
 8005f46:	4b79      	ldr	r3, [pc, #484]	; (800612c <checkAktifCalisma+0x15e0>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d003      	beq.n	8005f56 <checkAktifCalisma+0x140a>
 8005f4e:	4b77      	ldr	r3, [pc, #476]	; (800612c <checkAktifCalisma+0x15e0>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d10e      	bne.n	8005f74 <checkAktifCalisma+0x1428>
			hataVar=1;
 8005f56:	4b6f      	ldr	r3, [pc, #444]	; (8006114 <checkAktifCalisma+0x15c8>)
 8005f58:	2201      	movs	r2, #1
 8005f5a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8005f5c:	2004      	movs	r0, #4
 8005f5e:	f7fa fd63 	bl	8000a28 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8005f62:	2004      	movs	r0, #4
 8005f64:	f7fa fd06 	bl	8000974 <hata2EEPROM>
			convertAndSendData();
 8005f68:	f001 fb9e 	bl	80076a8 <convertAndSendData>
			katkapisivicihatasi=1;
 8005f6c:	4b70      	ldr	r3, [pc, #448]	; (8006130 <checkAktifCalisma+0x15e4>)
 8005f6e:	2201      	movs	r2, #1
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	e01f      	b.n	8005fb4 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005f74:	4b6e      	ldr	r3, [pc, #440]	; (8006130 <checkAktifCalisma+0x15e4>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01b      	beq.n	8005fb4 <checkAktifCalisma+0x1468>
 8005f7c:	4b6d      	ldr	r3, [pc, #436]	; (8006134 <checkAktifCalisma+0x15e8>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d017      	beq.n	8005fb4 <checkAktifCalisma+0x1468>
 8005f84:	4b66      	ldr	r3, [pc, #408]	; (8006120 <checkAktifCalisma+0x15d4>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f083 0301 	eor.w	r3, r3, #1
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d010      	beq.n	8005fb4 <checkAktifCalisma+0x1468>
 8005f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f96:	4864      	ldr	r0, [pc, #400]	; (8006128 <checkAktifCalisma+0x15dc>)
 8005f98:	f003 f95a 	bl	8009250 <HAL_GPIO_ReadPin>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d108      	bne.n	8005fb4 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8005fa2:	4b63      	ldr	r3, [pc, #396]	; (8006130 <checkAktifCalisma+0x15e4>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8005fa8:	4b5e      	ldr	r3, [pc, #376]	; (8006124 <checkAktifCalisma+0x15d8>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8005fae:	2004      	movs	r0, #4
 8005fb0:	f7fe fbfa 	bl	80047a8 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005fb4:	4b5a      	ldr	r3, [pc, #360]	; (8006120 <checkAktifCalisma+0x15d4>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d103      	bne.n	8005fc4 <checkAktifCalisma+0x1478>
 8005fbc:	4b5e      	ldr	r3, [pc, #376]	; (8006138 <checkAktifCalisma+0x15ec>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01e      	beq.n	8006002 <checkAktifCalisma+0x14b6>
 8005fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fc8:	4857      	ldr	r0, [pc, #348]	; (8006128 <checkAktifCalisma+0x15dc>)
 8005fca:	f003 f941 	bl	8009250 <HAL_GPIO_ReadPin>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d116      	bne.n	8006002 <checkAktifCalisma+0x14b6>
 8005fd4:	4b55      	ldr	r3, [pc, #340]	; (800612c <checkAktifCalisma+0x15e0>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d003      	beq.n	8005fe4 <checkAktifCalisma+0x1498>
 8005fdc:	4b53      	ldr	r3, [pc, #332]	; (800612c <checkAktifCalisma+0x15e0>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d10e      	bne.n	8006002 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8005fe4:	4b4b      	ldr	r3, [pc, #300]	; (8006114 <checkAktifCalisma+0x15c8>)
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8005fea:	2005      	movs	r0, #5
 8005fec:	f7fa fd1c 	bl	8000a28 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8005ff0:	2005      	movs	r0, #5
 8005ff2:	f7fa fcbf 	bl	8000974 <hata2EEPROM>
			convertAndSendData();
 8005ff6:	f001 fb57 	bl	80076a8 <convertAndSendData>
			tablakapisivicihatasi=1;
 8005ffa:	4b50      	ldr	r3, [pc, #320]	; (800613c <checkAktifCalisma+0x15f0>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	e023      	b.n	800604a <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006002:	4b4e      	ldr	r3, [pc, #312]	; (800613c <checkAktifCalisma+0x15f0>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01f      	beq.n	800604a <checkAktifCalisma+0x14fe>
 800600a:	4b4a      	ldr	r3, [pc, #296]	; (8006134 <checkAktifCalisma+0x15e8>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d01b      	beq.n	800604a <checkAktifCalisma+0x14fe>
 8006012:	4b43      	ldr	r3, [pc, #268]	; (8006120 <checkAktifCalisma+0x15d4>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	f083 0301 	eor.w	r3, r3, #1
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d014      	beq.n	800604a <checkAktifCalisma+0x14fe>
 8006020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006024:	4840      	ldr	r0, [pc, #256]	; (8006128 <checkAktifCalisma+0x15dc>)
 8006026:	f003 f913 	bl	8009250 <HAL_GPIO_ReadPin>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10c      	bne.n	800604a <checkAktifCalisma+0x14fe>
 8006030:	4b40      	ldr	r3, [pc, #256]	; (8006134 <checkAktifCalisma+0x15e8>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d008      	beq.n	800604a <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006038:	4b40      	ldr	r3, [pc, #256]	; (800613c <checkAktifCalisma+0x15f0>)
 800603a:	2200      	movs	r2, #0
 800603c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800603e:	4b3e      	ldr	r3, [pc, #248]	; (8006138 <checkAktifCalisma+0x15ec>)
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006044:	2005      	movs	r0, #5
 8006046:	f7fe fbaf 	bl	80047a8 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800604a:	4b30      	ldr	r3, [pc, #192]	; (800610c <checkAktifCalisma+0x15c0>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d107      	bne.n	8006062 <checkAktifCalisma+0x1516>
 8006052:	4b2a      	ldr	r3, [pc, #168]	; (80060fc <checkAktifCalisma+0x15b0>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d103      	bne.n	8006062 <checkAktifCalisma+0x1516>
 800605a:	4b39      	ldr	r3, [pc, #228]	; (8006140 <checkAktifCalisma+0x15f4>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d016      	beq.n	8006090 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8006062:	4b38      	ldr	r3, [pc, #224]	; (8006144 <checkAktifCalisma+0x15f8>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b38      	ldr	r3, [pc, #224]	; (8006148 <checkAktifCalisma+0x15fc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	4a37      	ldr	r2, [pc, #220]	; (800614c <checkAktifCalisma+0x1600>)
 800606e:	7812      	ldrb	r2, [r2, #0]
 8006070:	4293      	cmp	r3, r2
 8006072:	d30d      	bcc.n	8006090 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006074:	4b27      	ldr	r3, [pc, #156]	; (8006114 <checkAktifCalisma+0x15c8>)
 8006076:	2201      	movs	r2, #1
 8006078:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800607a:	2006      	movs	r0, #6
 800607c:	f7fa fcd4 	bl	8000a28 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006080:	2006      	movs	r0, #6
 8006082:	f7fa fc77 	bl	8000974 <hata2EEPROM>
			  	convertAndSendData();
 8006086:	f001 fb0f 	bl	80076a8 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800608a:	4b31      	ldr	r3, [pc, #196]	; (8006150 <checkAktifCalisma+0x1604>)
 800608c:	2201      	movs	r2, #1
 800608e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006090:	4b2f      	ldr	r3, [pc, #188]	; (8006150 <checkAktifCalisma+0x1604>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d013      	beq.n	80060c0 <checkAktifCalisma+0x1574>
 8006098:	2108      	movs	r1, #8
 800609a:	4823      	ldr	r0, [pc, #140]	; (8006128 <checkAktifCalisma+0x15dc>)
 800609c:	f003 f8d8 	bl	8009250 <HAL_GPIO_ReadPin>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00c      	beq.n	80060c0 <checkAktifCalisma+0x1574>
 80060a6:	4b1e      	ldr	r3, [pc, #120]	; (8006120 <checkAktifCalisma+0x15d4>)
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	f083 0301 	eor.w	r3, r3, #1
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d005      	beq.n	80060c0 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80060b4:	4b26      	ldr	r3, [pc, #152]	; (8006150 <checkAktifCalisma+0x1604>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80060ba:	2006      	movs	r0, #6
 80060bc:	f7fe fb74 	bl	80047a8 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80060c0:	4b24      	ldr	r3, [pc, #144]	; (8006154 <checkAktifCalisma+0x1608>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10b      	bne.n	80060e0 <checkAktifCalisma+0x1594>
 80060c8:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <checkAktifCalisma+0x15b0>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d107      	bne.n	80060e0 <checkAktifCalisma+0x1594>
 80060d0:	4b21      	ldr	r3, [pc, #132]	; (8006158 <checkAktifCalisma+0x160c>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d103      	bne.n	80060e0 <checkAktifCalisma+0x1594>
 80060d8:	4b19      	ldr	r3, [pc, #100]	; (8006140 <checkAktifCalisma+0x15f4>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d03f      	beq.n	8006160 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80060e0:	4b1e      	ldr	r3, [pc, #120]	; (800615c <checkAktifCalisma+0x1610>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80060e6:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <checkAktifCalisma+0x15d8>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80060ec:	4b12      	ldr	r3, [pc, #72]	; (8006138 <checkAktifCalisma+0x15ec>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	e03c      	b.n	800616e <checkAktifCalisma+0x1622>
 80060f4:	20000271 	.word	0x20000271
 80060f8:	20000277 	.word	0x20000277
 80060fc:	20000258 	.word	0x20000258
 8006100:	20000281 	.word	0x20000281
 8006104:	20000223 	.word	0x20000223
 8006108:	20000227 	.word	0x20000227
 800610c:	20000274 	.word	0x20000274
 8006110:	40011000 	.word	0x40011000
 8006114:	20000275 	.word	0x20000275
 8006118:	2000027e 	.word	0x2000027e
 800611c:	40010c00 	.word	0x40010c00
 8006120:	2000026e 	.word	0x2000026e
 8006124:	20000282 	.word	0x20000282
 8006128:	40010800 	.word	0x40010800
 800612c:	20000228 	.word	0x20000228
 8006130:	2000027f 	.word	0x2000027f
 8006134:	20000262 	.word	0x20000262
 8006138:	20000283 	.word	0x20000283
 800613c:	20000280 	.word	0x20000280
 8006140:	20000257 	.word	0x20000257
 8006144:	200001fc 	.word	0x200001fc
 8006148:	20000210 	.word	0x20000210
 800614c:	20000238 	.word	0x20000238
 8006150:	2000026f 	.word	0x2000026f
 8006154:	20000255 	.word	0x20000255
 8006158:	20000256 	.word	0x20000256
 800615c:	20000276 	.word	0x20000276
		} else {
			makineCalisiyor=1;
 8006160:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <checkAktifCalisma+0x1690>)
 8006162:	2201      	movs	r2, #1
 8006164:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006166:	4b1e      	ldr	r3, [pc, #120]	; (80061e0 <checkAktifCalisma+0x1694>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1e      	ldr	r2, [pc, #120]	; (80061e4 <checkAktifCalisma+0x1698>)
 800616c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800616e:	4b1e      	ldr	r3, [pc, #120]	; (80061e8 <checkAktifCalisma+0x169c>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d02f      	beq.n	80061d6 <checkAktifCalisma+0x168a>
 8006176:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <checkAktifCalisma+0x16a0>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	f083 0301 	eor.w	r3, r3, #1
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d028      	beq.n	80061d6 <checkAktifCalisma+0x168a>
 8006184:	4b1a      	ldr	r3, [pc, #104]	; (80061f0 <checkAktifCalisma+0x16a4>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	f083 0301 	eor.w	r3, r3, #1
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d021      	beq.n	80061d6 <checkAktifCalisma+0x168a>
 8006192:	4b18      	ldr	r3, [pc, #96]	; (80061f4 <checkAktifCalisma+0x16a8>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	f083 0301 	eor.w	r3, r3, #1
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01a      	beq.n	80061d6 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80061a0:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <checkAktifCalisma+0x16ac>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	f083 0301 	eor.w	r3, r3, #1
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d013      	beq.n	80061d6 <checkAktifCalisma+0x168a>
 80061ae:	4b13      	ldr	r3, [pc, #76]	; (80061fc <checkAktifCalisma+0x16b0>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	f083 0301 	eor.w	r3, r3, #1
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00c      	beq.n	80061d6 <checkAktifCalisma+0x168a>
 80061bc:	4b10      	ldr	r3, [pc, #64]	; (8006200 <checkAktifCalisma+0x16b4>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	f083 0301 	eor.w	r3, r3, #1
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <checkAktifCalisma+0x168a>
			hataVar=0;
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <checkAktifCalisma+0x169c>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80061d0:	2007      	movs	r0, #7
 80061d2:	f7fe fae9 	bl	80047a8 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80061d6:	bf00      	nop
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20000276 	.word	0x20000276
 80061e0:	200001fc 	.word	0x200001fc
 80061e4:	20000210 	.word	0x20000210
 80061e8:	20000275 	.word	0x20000275
 80061ec:	20000270 	.word	0x20000270
 80061f0:	20000271 	.word	0x20000271
 80061f4:	2000027e 	.word	0x2000027e
 80061f8:	2000027f 	.word	0x2000027f
 80061fc:	20000280 	.word	0x20000280
 8006200:	2000026f 	.word	0x2000026f

08006204 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006208:	4b8b      	ldr	r3, [pc, #556]	; (8006438 <checkDemoModCalisma+0x234>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b01      	cmp	r3, #1
 800620e:	f040 8229 	bne.w	8006664 <checkDemoModCalisma+0x460>
 8006212:	4b8a      	ldr	r3, [pc, #552]	; (800643c <checkDemoModCalisma+0x238>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 8224 	beq.w	8006664 <checkDemoModCalisma+0x460>
 800621c:	4b88      	ldr	r3, [pc, #544]	; (8006440 <checkDemoModCalisma+0x23c>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	f040 821f 	bne.w	8006664 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006226:	2102      	movs	r1, #2
 8006228:	4886      	ldr	r0, [pc, #536]	; (8006444 <checkDemoModCalisma+0x240>)
 800622a:	f003 f811 	bl	8009250 <HAL_GPIO_ReadPin>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d11d      	bne.n	8006270 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006234:	4b84      	ldr	r3, [pc, #528]	; (8006448 <checkDemoModCalisma+0x244>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	f083 0301 	eor.w	r3, r3, #1
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d016      	beq.n	8006270 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006242:	4b82      	ldr	r3, [pc, #520]	; (800644c <checkDemoModCalisma+0x248>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	f083 0301 	eor.w	r3, r3, #1
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00f      	beq.n	8006270 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006250:	4b7f      	ldr	r3, [pc, #508]	; (8006450 <checkDemoModCalisma+0x24c>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f083 0301 	eor.w	r3, r3, #1
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d008      	beq.n	8006270 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800625e:	2201      	movs	r2, #1
 8006260:	2104      	movs	r1, #4
 8006262:	487c      	ldr	r0, [pc, #496]	; (8006454 <checkDemoModCalisma+0x250>)
 8006264:	f003 f80b 	bl	800927e <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006268:	4b7b      	ldr	r3, [pc, #492]	; (8006458 <checkDemoModCalisma+0x254>)
 800626a:	2201      	movs	r2, #1
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	e00e      	b.n	800628e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006270:	2102      	movs	r1, #2
 8006272:	4874      	ldr	r0, [pc, #464]	; (8006444 <checkDemoModCalisma+0x240>)
 8006274:	f002 ffec 	bl	8009250 <HAL_GPIO_ReadPin>
 8006278:	4603      	mov	r3, r0
 800627a:	2b01      	cmp	r3, #1
 800627c:	d107      	bne.n	800628e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800627e:	2200      	movs	r2, #0
 8006280:	2104      	movs	r1, #4
 8006282:	4874      	ldr	r0, [pc, #464]	; (8006454 <checkDemoModCalisma+0x250>)
 8006284:	f002 fffb 	bl	800927e <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006288:	4b73      	ldr	r3, [pc, #460]	; (8006458 <checkDemoModCalisma+0x254>)
 800628a:	2200      	movs	r2, #0
 800628c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800628e:	4b72      	ldr	r3, [pc, #456]	; (8006458 <checkDemoModCalisma+0x254>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <checkDemoModCalisma+0xaa>
 8006296:	4b6d      	ldr	r3, [pc, #436]	; (800644c <checkDemoModCalisma+0x248>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d107      	bne.n	80062ae <checkDemoModCalisma+0xaa>
 800629e:	4b6c      	ldr	r3, [pc, #432]	; (8006450 <checkDemoModCalisma+0x24c>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d103      	bne.n	80062ae <checkDemoModCalisma+0xaa>
 80062a6:	4b68      	ldr	r3, [pc, #416]	; (8006448 <checkDemoModCalisma+0x244>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00c      	beq.n	80062c8 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80062ae:	2201      	movs	r2, #1
 80062b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062b4:	4867      	ldr	r0, [pc, #412]	; (8006454 <checkDemoModCalisma+0x250>)
 80062b6:	f002 ffe2 	bl	800927e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80062ba:	2201      	movs	r2, #1
 80062bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062c0:	4864      	ldr	r0, [pc, #400]	; (8006454 <checkDemoModCalisma+0x250>)
 80062c2:	f002 ffdc 	bl	800927e <HAL_GPIO_WritePin>
 80062c6:	e00b      	b.n	80062e0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80062c8:	2200      	movs	r2, #0
 80062ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062ce:	4861      	ldr	r0, [pc, #388]	; (8006454 <checkDemoModCalisma+0x250>)
 80062d0:	f002 ffd5 	bl	800927e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80062d4:	2200      	movs	r2, #0
 80062d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062da:	485e      	ldr	r0, [pc, #376]	; (8006454 <checkDemoModCalisma+0x250>)
 80062dc:	f002 ffcf 	bl	800927e <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80062e0:	2102      	movs	r1, #2
 80062e2:	4858      	ldr	r0, [pc, #352]	; (8006444 <checkDemoModCalisma+0x240>)
 80062e4:	f002 ffb4 	bl	8009250 <HAL_GPIO_ReadPin>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d10d      	bne.n	800630a <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80062ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062f2:	4854      	ldr	r0, [pc, #336]	; (8006444 <checkDemoModCalisma+0x240>)
 80062f4:	f002 ffac 	bl	8009250 <HAL_GPIO_ReadPin>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d105      	bne.n	800630a <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80062fe:	4b56      	ldr	r3, [pc, #344]	; (8006458 <checkDemoModCalisma+0x254>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	f083 0301 	eor.w	r3, r3, #1
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800630a:	2102      	movs	r1, #2
 800630c:	484d      	ldr	r0, [pc, #308]	; (8006444 <checkDemoModCalisma+0x240>)
 800630e:	f002 ff9f 	bl	8009250 <HAL_GPIO_ReadPin>
 8006312:	4603      	mov	r3, r0
 8006314:	2b01      	cmp	r3, #1
 8006316:	d125      	bne.n	8006364 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006318:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800631c:	4849      	ldr	r0, [pc, #292]	; (8006444 <checkDemoModCalisma+0x240>)
 800631e:	f002 ff97 	bl	8009250 <HAL_GPIO_ReadPin>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d11d      	bne.n	8006364 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006328:	4b4b      	ldr	r3, [pc, #300]	; (8006458 <checkDemoModCalisma+0x254>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f083 0301 	eor.w	r3, r3, #1
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d016      	beq.n	8006364 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006336:	4b44      	ldr	r3, [pc, #272]	; (8006448 <checkDemoModCalisma+0x244>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	f083 0301 	eor.w	r3, r3, #1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00f      	beq.n	8006364 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006344:	4b42      	ldr	r3, [pc, #264]	; (8006450 <checkDemoModCalisma+0x24c>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	f083 0301 	eor.w	r3, r3, #1
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d008      	beq.n	8006364 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006352:	2201      	movs	r2, #1
 8006354:	2120      	movs	r1, #32
 8006356:	483b      	ldr	r0, [pc, #236]	; (8006444 <checkDemoModCalisma+0x240>)
 8006358:	f002 ff91 	bl	800927e <HAL_GPIO_WritePin>
			demoDevYukari=1;
 800635c:	4b3b      	ldr	r3, [pc, #236]	; (800644c <checkDemoModCalisma+0x248>)
 800635e:	2201      	movs	r2, #1
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	e007      	b.n	8006374 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006364:	2200      	movs	r2, #0
 8006366:	2120      	movs	r1, #32
 8006368:	4836      	ldr	r0, [pc, #216]	; (8006444 <checkDemoModCalisma+0x240>)
 800636a:	f002 ff88 	bl	800927e <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800636e:	4b37      	ldr	r3, [pc, #220]	; (800644c <checkDemoModCalisma+0x248>)
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006374:	2102      	movs	r1, #2
 8006376:	4833      	ldr	r0, [pc, #204]	; (8006444 <checkDemoModCalisma+0x240>)
 8006378:	f002 ff6a 	bl	8009250 <HAL_GPIO_ReadPin>
 800637c:	4603      	mov	r3, r0
 800637e:	2b01      	cmp	r3, #1
 8006380:	d125      	bne.n	80063ce <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006386:	482f      	ldr	r0, [pc, #188]	; (8006444 <checkDemoModCalisma+0x240>)
 8006388:	f002 ff62 	bl	8009250 <HAL_GPIO_ReadPin>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d11d      	bne.n	80063ce <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006392:	4b31      	ldr	r3, [pc, #196]	; (8006458 <checkDemoModCalisma+0x254>)
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	f083 0301 	eor.w	r3, r3, #1
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d016      	beq.n	80063ce <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80063a0:	4b2a      	ldr	r3, [pc, #168]	; (800644c <checkDemoModCalisma+0x248>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	f083 0301 	eor.w	r3, r3, #1
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00f      	beq.n	80063ce <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80063ae:	4b26      	ldr	r3, [pc, #152]	; (8006448 <checkDemoModCalisma+0x244>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	f083 0301 	eor.w	r3, r3, #1
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80063bc:	2201      	movs	r2, #1
 80063be:	2110      	movs	r1, #16
 80063c0:	4820      	ldr	r0, [pc, #128]	; (8006444 <checkDemoModCalisma+0x240>)
 80063c2:	f002 ff5c 	bl	800927e <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80063c6:	4b22      	ldr	r3, [pc, #136]	; (8006450 <checkDemoModCalisma+0x24c>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	e007      	b.n	80063de <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80063ce:	2200      	movs	r2, #0
 80063d0:	2110      	movs	r1, #16
 80063d2:	481c      	ldr	r0, [pc, #112]	; (8006444 <checkDemoModCalisma+0x240>)
 80063d4:	f002 ff53 	bl	800927e <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80063d8:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <checkDemoModCalisma+0x24c>)
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80063de:	2104      	movs	r1, #4
 80063e0:	4818      	ldr	r0, [pc, #96]	; (8006444 <checkDemoModCalisma+0x240>)
 80063e2:	f002 ff35 	bl	8009250 <HAL_GPIO_ReadPin>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d139      	bne.n	8006460 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80063ec:	4b1a      	ldr	r3, [pc, #104]	; (8006458 <checkDemoModCalisma+0x254>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	f083 0301 	eor.w	r3, r3, #1
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d032      	beq.n	8006460 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80063fa:	4b15      	ldr	r3, [pc, #84]	; (8006450 <checkDemoModCalisma+0x24c>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f083 0301 	eor.w	r3, r3, #1
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d02b      	beq.n	8006460 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006408:	4b10      	ldr	r3, [pc, #64]	; (800644c <checkDemoModCalisma+0x248>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	f083 0301 	eor.w	r3, r3, #1
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d024      	beq.n	8006460 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006416:	2201      	movs	r2, #1
 8006418:	2102      	movs	r1, #2
 800641a:	480e      	ldr	r0, [pc, #56]	; (8006454 <checkDemoModCalisma+0x250>)
 800641c:	f002 ff2f 	bl	800927e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006420:	2201      	movs	r2, #1
 8006422:	2101      	movs	r1, #1
 8006424:	480b      	ldr	r0, [pc, #44]	; (8006454 <checkDemoModCalisma+0x250>)
 8006426:	f002 ff2a 	bl	800927e <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800642a:	4b07      	ldr	r3, [pc, #28]	; (8006448 <checkDemoModCalisma+0x244>)
 800642c:	2201      	movs	r2, #1
 800642e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006430:	4b0a      	ldr	r3, [pc, #40]	; (800645c <checkDemoModCalisma+0x258>)
 8006432:	2201      	movs	r2, #1
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	e027      	b.n	8006488 <checkDemoModCalisma+0x284>
 8006438:	2000023e 	.word	0x2000023e
 800643c:	20000272 	.word	0x20000272
 8006440:	2000023d 	.word	0x2000023d
 8006444:	40011000 	.word	0x40011000
 8006448:	20000279 	.word	0x20000279
 800644c:	2000027a 	.word	0x2000027a
 8006450:	2000027b 	.word	0x2000027b
 8006454:	40010c00 	.word	0x40010c00
 8006458:	20000278 	.word	0x20000278
 800645c:	2000025e 	.word	0x2000025e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006460:	2104      	movs	r1, #4
 8006462:	48a0      	ldr	r0, [pc, #640]	; (80066e4 <checkDemoModCalisma+0x4e0>)
 8006464:	f002 fef4 	bl	8009250 <HAL_GPIO_ReadPin>
 8006468:	4603      	mov	r3, r0
 800646a:	2b01      	cmp	r3, #1
 800646c:	d10c      	bne.n	8006488 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800646e:	2200      	movs	r2, #0
 8006470:	2102      	movs	r1, #2
 8006472:	489d      	ldr	r0, [pc, #628]	; (80066e8 <checkDemoModCalisma+0x4e4>)
 8006474:	f002 ff03 	bl	800927e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006478:	2200      	movs	r2, #0
 800647a:	2101      	movs	r1, #1
 800647c:	489a      	ldr	r0, [pc, #616]	; (80066e8 <checkDemoModCalisma+0x4e4>)
 800647e:	f002 fefe 	bl	800927e <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006482:	4b9a      	ldr	r3, [pc, #616]	; (80066ec <checkDemoModCalisma+0x4e8>)
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006488:	2104      	movs	r1, #4
 800648a:	4896      	ldr	r0, [pc, #600]	; (80066e4 <checkDemoModCalisma+0x4e0>)
 800648c:	f002 fee0 	bl	8009250 <HAL_GPIO_ReadPin>
 8006490:	4603      	mov	r3, r0
 8006492:	2b01      	cmp	r3, #1
 8006494:	d10d      	bne.n	80064b2 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006496:	2201      	movs	r2, #1
 8006498:	2180      	movs	r1, #128	; 0x80
 800649a:	4895      	ldr	r0, [pc, #596]	; (80066f0 <checkDemoModCalisma+0x4ec>)
 800649c:	f002 feef 	bl	800927e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80064a0:	2201      	movs	r2, #1
 80064a2:	2120      	movs	r1, #32
 80064a4:	4892      	ldr	r0, [pc, #584]	; (80066f0 <checkDemoModCalisma+0x4ec>)
 80064a6:	f002 feea 	bl	800927e <HAL_GPIO_WritePin>
			timer3 = millis;
 80064aa:	4b92      	ldr	r3, [pc, #584]	; (80066f4 <checkDemoModCalisma+0x4f0>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a92      	ldr	r2, [pc, #584]	; (80066f8 <checkDemoModCalisma+0x4f4>)
 80064b0:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80064b2:	4b90      	ldr	r3, [pc, #576]	; (80066f4 <checkDemoModCalisma+0x4f0>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	4b90      	ldr	r3, [pc, #576]	; (80066f8 <checkDemoModCalisma+0x4f4>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d909      	bls.n	80064d4 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80064c0:	2200      	movs	r2, #0
 80064c2:	2180      	movs	r1, #128	; 0x80
 80064c4:	488a      	ldr	r0, [pc, #552]	; (80066f0 <checkDemoModCalisma+0x4ec>)
 80064c6:	f002 feda 	bl	800927e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80064ca:	2200      	movs	r2, #0
 80064cc:	2120      	movs	r1, #32
 80064ce:	4888      	ldr	r0, [pc, #544]	; (80066f0 <checkDemoModCalisma+0x4ec>)
 80064d0:	f002 fed5 	bl	800927e <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80064d4:	2102      	movs	r1, #2
 80064d6:	4883      	ldr	r0, [pc, #524]	; (80066e4 <checkDemoModCalisma+0x4e0>)
 80064d8:	f002 feba 	bl	8009250 <HAL_GPIO_ReadPin>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d108      	bne.n	80064f4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80064e2:	2201      	movs	r2, #1
 80064e4:	2140      	movs	r1, #64	; 0x40
 80064e6:	4882      	ldr	r0, [pc, #520]	; (80066f0 <checkDemoModCalisma+0x4ec>)
 80064e8:	f002 fec9 	bl	800927e <HAL_GPIO_WritePin>
			timer3 = millis;
 80064ec:	4b81      	ldr	r3, [pc, #516]	; (80066f4 <checkDemoModCalisma+0x4f0>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a81      	ldr	r2, [pc, #516]	; (80066f8 <checkDemoModCalisma+0x4f4>)
 80064f2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80064f4:	4b7f      	ldr	r3, [pc, #508]	; (80066f4 <checkDemoModCalisma+0x4f0>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	4b7f      	ldr	r3, [pc, #508]	; (80066f8 <checkDemoModCalisma+0x4f4>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d904      	bls.n	800650c <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006502:	2200      	movs	r2, #0
 8006504:	2140      	movs	r1, #64	; 0x40
 8006506:	487a      	ldr	r0, [pc, #488]	; (80066f0 <checkDemoModCalisma+0x4ec>)
 8006508:	f002 feb9 	bl	800927e <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 800650c:	4b7b      	ldr	r3, [pc, #492]	; (80066fc <checkDemoModCalisma+0x4f8>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d058      	beq.n	80065c6 <checkDemoModCalisma+0x3c2>
 8006514:	4b7a      	ldr	r3, [pc, #488]	; (8006700 <checkDemoModCalisma+0x4fc>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d054      	beq.n	80065c6 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 800651c:	4b79      	ldr	r3, [pc, #484]	; (8006704 <checkDemoModCalisma+0x500>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	3301      	adds	r3, #1
 8006522:	b2da      	uxtb	r2, r3
 8006524:	4b77      	ldr	r3, [pc, #476]	; (8006704 <checkDemoModCalisma+0x500>)
 8006526:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006528:	4b76      	ldr	r3, [pc, #472]	; (8006704 <checkDemoModCalisma+0x500>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b09      	cmp	r3, #9
 800652e:	d908      	bls.n	8006542 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006530:	4b74      	ldr	r3, [pc, #464]	; (8006704 <checkDemoModCalisma+0x500>)
 8006532:	2200      	movs	r2, #0
 8006534:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006536:	4b74      	ldr	r3, [pc, #464]	; (8006708 <checkDemoModCalisma+0x504>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	3301      	adds	r3, #1
 800653c:	b2da      	uxtb	r2, r3
 800653e:	4b72      	ldr	r3, [pc, #456]	; (8006708 <checkDemoModCalisma+0x504>)
 8006540:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006542:	4b71      	ldr	r3, [pc, #452]	; (8006708 <checkDemoModCalisma+0x504>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b09      	cmp	r3, #9
 8006548:	d908      	bls.n	800655c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800654a:	4b6f      	ldr	r3, [pc, #444]	; (8006708 <checkDemoModCalisma+0x504>)
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006550:	4b6e      	ldr	r3, [pc, #440]	; (800670c <checkDemoModCalisma+0x508>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	b2da      	uxtb	r2, r3
 8006558:	4b6c      	ldr	r3, [pc, #432]	; (800670c <checkDemoModCalisma+0x508>)
 800655a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 800655c:	4b6b      	ldr	r3, [pc, #428]	; (800670c <checkDemoModCalisma+0x508>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b09      	cmp	r3, #9
 8006562:	d908      	bls.n	8006576 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006564:	4b69      	ldr	r3, [pc, #420]	; (800670c <checkDemoModCalisma+0x508>)
 8006566:	2200      	movs	r2, #0
 8006568:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800656a:	4b69      	ldr	r3, [pc, #420]	; (8006710 <checkDemoModCalisma+0x50c>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	3301      	adds	r3, #1
 8006570:	b2da      	uxtb	r2, r3
 8006572:	4b67      	ldr	r3, [pc, #412]	; (8006710 <checkDemoModCalisma+0x50c>)
 8006574:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006576:	4b66      	ldr	r3, [pc, #408]	; (8006710 <checkDemoModCalisma+0x50c>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2b09      	cmp	r3, #9
 800657c:	d908      	bls.n	8006590 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800657e:	4b64      	ldr	r3, [pc, #400]	; (8006710 <checkDemoModCalisma+0x50c>)
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006584:	4b63      	ldr	r3, [pc, #396]	; (8006714 <checkDemoModCalisma+0x510>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	3301      	adds	r3, #1
 800658a:	b2da      	uxtb	r2, r3
 800658c:	4b61      	ldr	r3, [pc, #388]	; (8006714 <checkDemoModCalisma+0x510>)
 800658e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006590:	4b60      	ldr	r3, [pc, #384]	; (8006714 <checkDemoModCalisma+0x510>)
 8006592:	781a      	ldrb	r2, [r3, #0]
 8006594:	4b60      	ldr	r3, [pc, #384]	; (8006718 <checkDemoModCalisma+0x514>)
 8006596:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800659a:	4b5d      	ldr	r3, [pc, #372]	; (8006710 <checkDemoModCalisma+0x50c>)
 800659c:	781a      	ldrb	r2, [r3, #0]
 800659e:	4b5e      	ldr	r3, [pc, #376]	; (8006718 <checkDemoModCalisma+0x514>)
 80065a0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80065a2:	4b5a      	ldr	r3, [pc, #360]	; (800670c <checkDemoModCalisma+0x508>)
 80065a4:	781a      	ldrb	r2, [r3, #0]
 80065a6:	4b5c      	ldr	r3, [pc, #368]	; (8006718 <checkDemoModCalisma+0x514>)
 80065a8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80065aa:	4b57      	ldr	r3, [pc, #348]	; (8006708 <checkDemoModCalisma+0x504>)
 80065ac:	781a      	ldrb	r2, [r3, #0]
 80065ae:	4b5a      	ldr	r3, [pc, #360]	; (8006718 <checkDemoModCalisma+0x514>)
 80065b0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80065b2:	4b54      	ldr	r3, [pc, #336]	; (8006704 <checkDemoModCalisma+0x500>)
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	4b58      	ldr	r3, [pc, #352]	; (8006718 <checkDemoModCalisma+0x514>)
 80065b8:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 80065ba:	4b58      	ldr	r3, [pc, #352]	; (800671c <checkDemoModCalisma+0x518>)
 80065bc:	2201      	movs	r2, #1
 80065be:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80065c0:	4b4f      	ldr	r3, [pc, #316]	; (8006700 <checkDemoModCalisma+0x4fc>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80065c6:	4b56      	ldr	r3, [pc, #344]	; (8006720 <checkDemoModCalisma+0x51c>)
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f040 8087 	bne.w	80066de <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80065d0:	4a54      	ldr	r2, [pc, #336]	; (8006724 <checkDemoModCalisma+0x520>)
 80065d2:	2101      	movs	r1, #1
 80065d4:	2002      	movs	r0, #2
 80065d6:	f001 fb15 	bl	8007c04 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80065da:	4a53      	ldr	r2, [pc, #332]	; (8006728 <checkDemoModCalisma+0x524>)
 80065dc:	2101      	movs	r1, #1
 80065de:	2001      	movs	r0, #1
 80065e0:	f001 fb10 	bl	8007c04 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80065e4:	4b4b      	ldr	r3, [pc, #300]	; (8006714 <checkDemoModCalisma+0x510>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	220a      	movs	r2, #10
 80065ea:	4950      	ldr	r1, [pc, #320]	; (800672c <checkDemoModCalisma+0x528>)
 80065ec:	4618      	mov	r0, r3
 80065ee:	f005 fe5b 	bl	800c2a8 <itoa>
			lcd_print(2,12,snum);
 80065f2:	4a4e      	ldr	r2, [pc, #312]	; (800672c <checkDemoModCalisma+0x528>)
 80065f4:	210c      	movs	r1, #12
 80065f6:	2002      	movs	r0, #2
 80065f8:	f001 fb04 	bl	8007c04 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80065fc:	4b44      	ldr	r3, [pc, #272]	; (8006710 <checkDemoModCalisma+0x50c>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	220a      	movs	r2, #10
 8006602:	494a      	ldr	r1, [pc, #296]	; (800672c <checkDemoModCalisma+0x528>)
 8006604:	4618      	mov	r0, r3
 8006606:	f005 fe4f 	bl	800c2a8 <itoa>
			lcd_print(2,13,snum);
 800660a:	4a48      	ldr	r2, [pc, #288]	; (800672c <checkDemoModCalisma+0x528>)
 800660c:	210d      	movs	r1, #13
 800660e:	2002      	movs	r0, #2
 8006610:	f001 faf8 	bl	8007c04 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006614:	4b3d      	ldr	r3, [pc, #244]	; (800670c <checkDemoModCalisma+0x508>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	220a      	movs	r2, #10
 800661a:	4944      	ldr	r1, [pc, #272]	; (800672c <checkDemoModCalisma+0x528>)
 800661c:	4618      	mov	r0, r3
 800661e:	f005 fe43 	bl	800c2a8 <itoa>
			lcd_print(2,14,snum);
 8006622:	4a42      	ldr	r2, [pc, #264]	; (800672c <checkDemoModCalisma+0x528>)
 8006624:	210e      	movs	r1, #14
 8006626:	2002      	movs	r0, #2
 8006628:	f001 faec 	bl	8007c04 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 800662c:	4b36      	ldr	r3, [pc, #216]	; (8006708 <checkDemoModCalisma+0x504>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	220a      	movs	r2, #10
 8006632:	493e      	ldr	r1, [pc, #248]	; (800672c <checkDemoModCalisma+0x528>)
 8006634:	4618      	mov	r0, r3
 8006636:	f005 fe37 	bl	800c2a8 <itoa>
			lcd_print(2,15,snum);
 800663a:	4a3c      	ldr	r2, [pc, #240]	; (800672c <checkDemoModCalisma+0x528>)
 800663c:	210f      	movs	r1, #15
 800663e:	2002      	movs	r0, #2
 8006640:	f001 fae0 	bl	8007c04 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006644:	4b2f      	ldr	r3, [pc, #188]	; (8006704 <checkDemoModCalisma+0x500>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	220a      	movs	r2, #10
 800664a:	4938      	ldr	r1, [pc, #224]	; (800672c <checkDemoModCalisma+0x528>)
 800664c:	4618      	mov	r0, r3
 800664e:	f005 fe2b 	bl	800c2a8 <itoa>
			lcd_print(2,16,snum);
 8006652:	4a36      	ldr	r2, [pc, #216]	; (800672c <checkDemoModCalisma+0x528>)
 8006654:	2110      	movs	r1, #16
 8006656:	2002      	movs	r0, #2
 8006658:	f001 fad4 	bl	8007c04 <lcd_print>
			mesajYazildi=1;
 800665c:	4b34      	ldr	r3, [pc, #208]	; (8006730 <checkDemoModCalisma+0x52c>)
 800665e:	2201      	movs	r2, #1
 8006660:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006662:	e03c      	b.n	80066de <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006664:	4b33      	ldr	r3, [pc, #204]	; (8006734 <checkDemoModCalisma+0x530>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d003      	beq.n	8006674 <checkDemoModCalisma+0x470>
 800666c:	4b2c      	ldr	r3, [pc, #176]	; (8006720 <checkDemoModCalisma+0x51c>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d134      	bne.n	80066de <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006674:	2200      	movs	r2, #0
 8006676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800667a:	481b      	ldr	r0, [pc, #108]	; (80066e8 <checkDemoModCalisma+0x4e4>)
 800667c:	f002 fdff 	bl	800927e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006680:	2200      	movs	r2, #0
 8006682:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006686:	4818      	ldr	r0, [pc, #96]	; (80066e8 <checkDemoModCalisma+0x4e4>)
 8006688:	f002 fdf9 	bl	800927e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800668c:	2200      	movs	r2, #0
 800668e:	2104      	movs	r1, #4
 8006690:	4815      	ldr	r0, [pc, #84]	; (80066e8 <checkDemoModCalisma+0x4e4>)
 8006692:	f002 fdf4 	bl	800927e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006696:	2200      	movs	r2, #0
 8006698:	2102      	movs	r1, #2
 800669a:	4813      	ldr	r0, [pc, #76]	; (80066e8 <checkDemoModCalisma+0x4e4>)
 800669c:	f002 fdef 	bl	800927e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80066a0:	2200      	movs	r2, #0
 80066a2:	2101      	movs	r1, #1
 80066a4:	4810      	ldr	r0, [pc, #64]	; (80066e8 <checkDemoModCalisma+0x4e4>)
 80066a6:	f002 fdea 	bl	800927e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80066aa:	2200      	movs	r2, #0
 80066ac:	2120      	movs	r1, #32
 80066ae:	480d      	ldr	r0, [pc, #52]	; (80066e4 <checkDemoModCalisma+0x4e0>)
 80066b0:	f002 fde5 	bl	800927e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80066b4:	2200      	movs	r2, #0
 80066b6:	2110      	movs	r1, #16
 80066b8:	480a      	ldr	r0, [pc, #40]	; (80066e4 <checkDemoModCalisma+0x4e0>)
 80066ba:	f002 fde0 	bl	800927e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80066be:	2200      	movs	r2, #0
 80066c0:	2180      	movs	r1, #128	; 0x80
 80066c2:	480b      	ldr	r0, [pc, #44]	; (80066f0 <checkDemoModCalisma+0x4ec>)
 80066c4:	f002 fddb 	bl	800927e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80066c8:	2200      	movs	r2, #0
 80066ca:	2140      	movs	r1, #64	; 0x40
 80066cc:	4808      	ldr	r0, [pc, #32]	; (80066f0 <checkDemoModCalisma+0x4ec>)
 80066ce:	f002 fdd6 	bl	800927e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80066d2:	2200      	movs	r2, #0
 80066d4:	2120      	movs	r1, #32
 80066d6:	4806      	ldr	r0, [pc, #24]	; (80066f0 <checkDemoModCalisma+0x4ec>)
 80066d8:	f002 fdd1 	bl	800927e <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80066dc:	e7ff      	b.n	80066de <checkDemoModCalisma+0x4da>
 80066de:	bf00      	nop
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	40011000 	.word	0x40011000
 80066e8:	40010c00 	.word	0x40010c00
 80066ec:	20000279 	.word	0x20000279
 80066f0:	40010800 	.word	0x40010800
 80066f4:	200001fc 	.word	0x200001fc
 80066f8:	2000020c 	.word	0x2000020c
 80066fc:	20000278 	.word	0x20000278
 8006700:	2000025e 	.word	0x2000025e
 8006704:	2000021d 	.word	0x2000021d
 8006708:	2000021e 	.word	0x2000021e
 800670c:	20000000 	.word	0x20000000
 8006710:	20000001 	.word	0x20000001
 8006714:	2000021f 	.word	0x2000021f
 8006718:	20000118 	.word	0x20000118
 800671c:	2000024c 	.word	0x2000024c
 8006720:	2000023d 	.word	0x2000023d
 8006724:	0800da60 	.word	0x0800da60
 8006728:	0800da6c 	.word	0x0800da6c
 800672c:	20000188 	.word	0x20000188
 8006730:	20000254 	.word	0x20000254
 8006734:	2000023e 	.word	0x2000023e

08006738 <mainLoop>:

void mainLoop() {
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800673e:	f7fe f923 	bl	8004988 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006742:	2101      	movs	r1, #1
 8006744:	48ac      	ldr	r0, [pc, #688]	; (80069f8 <mainLoop+0x2c0>)
 8006746:	f002 fd83 	bl	8009250 <HAL_GPIO_ReadPin>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d136      	bne.n	80067be <mainLoop+0x86>
 8006750:	2108      	movs	r1, #8
 8006752:	48aa      	ldr	r0, [pc, #680]	; (80069fc <mainLoop+0x2c4>)
 8006754:	f002 fd7c 	bl	8009250 <HAL_GPIO_ReadPin>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d12f      	bne.n	80067be <mainLoop+0x86>
 800675e:	2102      	movs	r1, #2
 8006760:	48a5      	ldr	r0, [pc, #660]	; (80069f8 <mainLoop+0x2c0>)
 8006762:	f002 fd75 	bl	8009250 <HAL_GPIO_ReadPin>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d128      	bne.n	80067be <mainLoop+0x86>
 800676c:	2104      	movs	r1, #4
 800676e:	48a2      	ldr	r0, [pc, #648]	; (80069f8 <mainLoop+0x2c0>)
 8006770:	f002 fd6e 	bl	8009250 <HAL_GPIO_ReadPin>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d121      	bne.n	80067be <mainLoop+0x86>
 800677a:	2108      	movs	r1, #8
 800677c:	489e      	ldr	r0, [pc, #632]	; (80069f8 <mainLoop+0x2c0>)
 800677e:	f002 fd67 	bl	8009250 <HAL_GPIO_ReadPin>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d11a      	bne.n	80067be <mainLoop+0x86>
 8006788:	2180      	movs	r1, #128	; 0x80
 800678a:	489c      	ldr	r0, [pc, #624]	; (80069fc <mainLoop+0x2c4>)
 800678c:	f002 fd60 	bl	8009250 <HAL_GPIO_ReadPin>
 8006790:	4603      	mov	r3, r0
 8006792:	2b01      	cmp	r3, #1
 8006794:	d113      	bne.n	80067be <mainLoop+0x86>
 8006796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800679a:	4898      	ldr	r0, [pc, #608]	; (80069fc <mainLoop+0x2c4>)
 800679c:	f002 fd58 	bl	8009250 <HAL_GPIO_ReadPin>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d10b      	bne.n	80067be <mainLoop+0x86>
 80067a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067aa:	4894      	ldr	r0, [pc, #592]	; (80069fc <mainLoop+0x2c4>)
 80067ac:	f002 fd50 	bl	8009250 <HAL_GPIO_ReadPin>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d103      	bne.n	80067be <mainLoop+0x86>
			butonKontrol=0;
 80067b6:	4b92      	ldr	r3, [pc, #584]	; (8006a00 <mainLoop+0x2c8>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	e003      	b.n	80067c6 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80067be:	4b91      	ldr	r3, [pc, #580]	; (8006a04 <mainLoop+0x2cc>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a91      	ldr	r2, [pc, #580]	; (8006a08 <mainLoop+0x2d0>)
 80067c4:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80067c6:	4b91      	ldr	r3, [pc, #580]	; (8006a0c <mainLoop+0x2d4>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d03a      	beq.n	8006844 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80067ce:	bf00      	nop
 80067d0:	488f      	ldr	r0, [pc, #572]	; (8006a10 <mainLoop+0x2d8>)
 80067d2:	f003 fb66 	bl	8009ea2 <HAL_I2C_GetError>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d0f9      	beq.n	80067d0 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80067dc:	bf00      	nop
 80067de:	488c      	ldr	r0, [pc, #560]	; (8006a10 <mainLoop+0x2d8>)
 80067e0:	f003 fb52 	bl	8009e88 <HAL_I2C_GetState>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d1f9      	bne.n	80067de <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80067ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80067ee:	9302      	str	r3, [sp, #8]
 80067f0:	236e      	movs	r3, #110	; 0x6e
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	4b87      	ldr	r3, [pc, #540]	; (8006a14 <mainLoop+0x2dc>)
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	236e      	movs	r3, #110	; 0x6e
 80067fa:	2200      	movs	r2, #0
 80067fc:	21a0      	movs	r1, #160	; 0xa0
 80067fe:	4884      	ldr	r0, [pc, #528]	; (8006a10 <mainLoop+0x2d8>)
 8006800:	f002 ffe0 	bl	80097c4 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006804:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006808:	f001 ff52 	bl	80086b0 <HAL_Delay>

		  hafizaYaz=0;
 800680c:	4b7f      	ldr	r3, [pc, #508]	; (8006a0c <mainLoop+0x2d4>)
 800680e:	2200      	movs	r2, #0
 8006810:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006812:	4b81      	ldr	r3, [pc, #516]	; (8006a18 <mainLoop+0x2e0>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d105      	bne.n	8006826 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 800681a:	4a80      	ldr	r2, [pc, #512]	; (8006a1c <mainLoop+0x2e4>)
 800681c:	2101      	movs	r1, #1
 800681e:	2002      	movs	r0, #2
 8006820:	f001 f9f0 	bl	8007c04 <lcd_print>
 8006824:	e008      	b.n	8006838 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006826:	4b7c      	ldr	r3, [pc, #496]	; (8006a18 <mainLoop+0x2e0>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d104      	bne.n	8006838 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 800682e:	4a7c      	ldr	r2, [pc, #496]	; (8006a20 <mainLoop+0x2e8>)
 8006830:	2101      	movs	r1, #1
 8006832:	2002      	movs	r0, #2
 8006834:	f001 f9e6 	bl	8007c04 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006838:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800683c:	f001 ff38 	bl	80086b0 <HAL_Delay>
		  lcd_clear();
 8006840:	f001 fa0c 	bl	8007c5c <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006844:	4b77      	ldr	r3, [pc, #476]	; (8006a24 <mainLoop+0x2ec>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f083 0301 	eor.w	r3, r3, #1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d06d      	beq.n	800692e <mainLoop+0x1f6>
 8006852:	486f      	ldr	r0, [pc, #444]	; (8006a10 <mainLoop+0x2d8>)
 8006854:	f003 fb18 	bl	8009e88 <HAL_I2C_GetState>
 8006858:	4603      	mov	r3, r0
 800685a:	2b20      	cmp	r3, #32
 800685c:	d167      	bne.n	800692e <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 800685e:	4b72      	ldr	r3, [pc, #456]	; (8006a28 <mainLoop+0x2f0>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f083 0301 	eor.w	r3, r3, #1
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d044      	beq.n	80068f6 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 800686c:	4a6f      	ldr	r2, [pc, #444]	; (8006a2c <mainLoop+0x2f4>)
 800686e:	2101      	movs	r1, #1
 8006870:	2001      	movs	r0, #1
 8006872:	f001 f9c7 	bl	8007c04 <lcd_print>
			  if(dilSecim==0) {
 8006876:	4b68      	ldr	r3, [pc, #416]	; (8006a18 <mainLoop+0x2e0>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d105      	bne.n	800688a <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 800687e:	4a6c      	ldr	r2, [pc, #432]	; (8006a30 <mainLoop+0x2f8>)
 8006880:	2101      	movs	r1, #1
 8006882:	2002      	movs	r0, #2
 8006884:	f001 f9be 	bl	8007c04 <lcd_print>
 8006888:	e008      	b.n	800689c <mainLoop+0x164>
			  } else if(dilSecim==1) {
 800688a:	4b63      	ldr	r3, [pc, #396]	; (8006a18 <mainLoop+0x2e0>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d104      	bne.n	800689c <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006892:	4a68      	ldr	r2, [pc, #416]	; (8006a34 <mainLoop+0x2fc>)
 8006894:	2101      	movs	r1, #1
 8006896:	2002      	movs	r0, #2
 8006898:	f001 f9b4 	bl	8007c04 <lcd_print>
			  }
			  HAL_Delay(1000);
 800689c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068a0:	f001 ff06 	bl	80086b0 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80068a4:	bf00      	nop
 80068a6:	485a      	ldr	r0, [pc, #360]	; (8006a10 <mainLoop+0x2d8>)
 80068a8:	f003 fafb 	bl	8009ea2 <HAL_I2C_GetError>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d0f9      	beq.n	80068a6 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80068b2:	e003      	b.n	80068bc <mainLoop+0x184>
				  HAL_Delay(1000);
 80068b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068b8:	f001 fefa 	bl	80086b0 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80068bc:	4854      	ldr	r0, [pc, #336]	; (8006a10 <mainLoop+0x2d8>)
 80068be:	f003 fae3 	bl	8009e88 <HAL_I2C_GetState>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d1f5      	bne.n	80068b4 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 80068c8:	4b53      	ldr	r3, [pc, #332]	; (8006a18 <mainLoop+0x2e0>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d105      	bne.n	80068dc <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 80068d0:	4a59      	ldr	r2, [pc, #356]	; (8006a38 <mainLoop+0x300>)
 80068d2:	2101      	movs	r1, #1
 80068d4:	2002      	movs	r0, #2
 80068d6:	f001 f995 	bl	8007c04 <lcd_print>
 80068da:	e008      	b.n	80068ee <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 80068dc:	4b4e      	ldr	r3, [pc, #312]	; (8006a18 <mainLoop+0x2e0>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d104      	bne.n	80068ee <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 80068e4:	4a55      	ldr	r2, [pc, #340]	; (8006a3c <mainLoop+0x304>)
 80068e6:	2101      	movs	r1, #1
 80068e8:	2002      	movs	r0, #2
 80068ea:	f001 f98b 	bl	8007c04 <lcd_print>
			  }

			  ilkOkuma=1;
 80068ee:	4b4e      	ldr	r3, [pc, #312]	; (8006a28 <mainLoop+0x2f0>)
 80068f0:	2201      	movs	r2, #1
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	e014      	b.n	8006920 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80068f6:	4b48      	ldr	r3, [pc, #288]	; (8006a18 <mainLoop+0x2e0>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d105      	bne.n	800690a <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80068fe:	4a50      	ldr	r2, [pc, #320]	; (8006a40 <mainLoop+0x308>)
 8006900:	2101      	movs	r1, #1
 8006902:	2002      	movs	r0, #2
 8006904:	f001 f97e 	bl	8007c04 <lcd_print>
 8006908:	e008      	b.n	800691c <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 800690a:	4b43      	ldr	r3, [pc, #268]	; (8006a18 <mainLoop+0x2e0>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d104      	bne.n	800691c <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006912:	4a4c      	ldr	r2, [pc, #304]	; (8006a44 <mainLoop+0x30c>)
 8006914:	2101      	movs	r1, #1
 8006916:	2002      	movs	r0, #2
 8006918:	f001 f974 	bl	8007c04 <lcd_print>
			  }
			  lcd_clear();
 800691c:	f001 f99e 	bl	8007c5c <lcd_clear>
		  }

		  lcd_clear();
 8006920:	f001 f99c 	bl	8007c5c <lcd_clear>

		  eepromKontrol();
 8006924:	f7f9 fc86 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006928:	4b3e      	ldr	r3, [pc, #248]	; (8006a24 <mainLoop+0x2ec>)
 800692a:	2201      	movs	r2, #1
 800692c:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 800692e:	4b46      	ldr	r3, [pc, #280]	; (8006a48 <mainLoop+0x310>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d11c      	bne.n	8006970 <mainLoop+0x238>
 8006936:	4b45      	ldr	r3, [pc, #276]	; (8006a4c <mainLoop+0x314>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	f083 0301 	eor.w	r3, r3, #1
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d015      	beq.n	8006970 <mainLoop+0x238>
 8006944:	4b42      	ldr	r3, [pc, #264]	; (8006a50 <mainLoop+0x318>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d111      	bne.n	8006970 <mainLoop+0x238>
			lcd_clear();
 800694c:	f001 f986 	bl	8007c5c <lcd_clear>
			HAL_Delay(10);
 8006950:	200a      	movs	r0, #10
 8006952:	f001 fead 	bl	80086b0 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006956:	4a3f      	ldr	r2, [pc, #252]	; (8006a54 <mainLoop+0x31c>)
 8006958:	2101      	movs	r1, #1
 800695a:	2001      	movs	r0, #1
 800695c:	f001 f952 	bl	8007c04 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006960:	4a3d      	ldr	r2, [pc, #244]	; (8006a58 <mainLoop+0x320>)
 8006962:	2101      	movs	r1, #1
 8006964:	2002      	movs	r0, #2
 8006966:	f001 f94d 	bl	8007c04 <lcd_print>
			mesajYazildi=1;
 800696a:	4b38      	ldr	r3, [pc, #224]	; (8006a4c <mainLoop+0x314>)
 800696c:	2201      	movs	r2, #1
 800696e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006970:	4b35      	ldr	r3, [pc, #212]	; (8006a48 <mainLoop+0x310>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d112      	bne.n	800699e <mainLoop+0x266>
 8006978:	2102      	movs	r1, #2
 800697a:	481f      	ldr	r0, [pc, #124]	; (80069f8 <mainLoop+0x2c0>)
 800697c:	f002 fc68 	bl	8009250 <HAL_GPIO_ReadPin>
 8006980:	4603      	mov	r3, r0
 8006982:	2b01      	cmp	r3, #1
 8006984:	d10b      	bne.n	800699e <mainLoop+0x266>
 8006986:	2104      	movs	r1, #4
 8006988:	481b      	ldr	r0, [pc, #108]	; (80069f8 <mainLoop+0x2c0>)
 800698a:	f002 fc61 	bl	8009250 <HAL_GPIO_ReadPin>
 800698e:	4603      	mov	r3, r0
 8006990:	2b01      	cmp	r3, #1
 8006992:	d104      	bne.n	800699e <mainLoop+0x266>
			menuGiris=1;
 8006994:	4b2c      	ldr	r3, [pc, #176]	; (8006a48 <mainLoop+0x310>)
 8006996:	2201      	movs	r2, #1
 8006998:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800699a:	f001 f95f 	bl	8007c5c <lcd_clear>
		}

		if(menuGiris==1) {
 800699e:	4b2a      	ldr	r3, [pc, #168]	; (8006a48 <mainLoop+0x310>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <mainLoop+0x272>
			menu();
 80069a6:	f7fa fb7d 	bl	80010a4 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80069aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069ae:	4813      	ldr	r0, [pc, #76]	; (80069fc <mainLoop+0x2c4>)
 80069b0:	f002 fc7d 	bl	80092ae <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80069b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069b8:	4828      	ldr	r0, [pc, #160]	; (8006a5c <mainLoop+0x324>)
 80069ba:	f002 fc49 	bl	8009250 <HAL_GPIO_ReadPin>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <mainLoop+0x2a2>
 80069c4:	4b26      	ldr	r3, [pc, #152]	; (8006a60 <mainLoop+0x328>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	f083 0301 	eor.w	r3, r3, #1
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <mainLoop+0x2a2>
			stopVar=1;
 80069d2:	4b24      	ldr	r3, [pc, #144]	; (8006a64 <mainLoop+0x32c>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	701a      	strb	r2, [r3, #0]
 80069d8:	e002      	b.n	80069e0 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 80069da:	4b22      	ldr	r3, [pc, #136]	; (8006a64 <mainLoop+0x32c>)
 80069dc:	2200      	movs	r2, #0
 80069de:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80069e0:	f7fd ffe8 	bl	80049b4 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80069e4:	f7fe f81a 	bl	8004a1c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80069e8:	f7fe f85e 	bl	8004aa8 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80069ec:	f7fe f8ae 	bl	8004b4c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80069f0:	f7ff fc08 	bl	8006204 <checkDemoModCalisma>
		checkLCDBacklight();
 80069f4:	e6a3      	b.n	800673e <mainLoop+0x6>
 80069f6:	bf00      	nop
 80069f8:	40010800 	.word	0x40010800
 80069fc:	40011000 	.word	0x40011000
 8006a00:	2000024f 	.word	0x2000024f
 8006a04:	200001fc 	.word	0x200001fc
 8006a08:	20000218 	.word	0x20000218
 8006a0c:	2000024c 	.word	0x2000024c
 8006a10:	200003a8 	.word	0x200003a8
 8006a14:	20000118 	.word	0x20000118
 8006a18:	20000241 	.word	0x20000241
 8006a1c:	0800da80 	.word	0x0800da80
 8006a20:	0800da94 	.word	0x0800da94
 8006a24:	2000024d 	.word	0x2000024d
 8006a28:	2000024e 	.word	0x2000024e
 8006a2c:	0800daa8 	.word	0x0800daa8
 8006a30:	0800dabc 	.word	0x0800dabc
 8006a34:	0800dad0 	.word	0x0800dad0
 8006a38:	0800dae4 	.word	0x0800dae4
 8006a3c:	0800daf8 	.word	0x0800daf8
 8006a40:	0800db0c 	.word	0x0800db0c
 8006a44:	0800db20 	.word	0x0800db20
 8006a48:	2000023d 	.word	0x2000023d
 8006a4c:	20000254 	.word	0x20000254
 8006a50:	2000023e 	.word	0x2000023e
 8006a54:	0800db34 	.word	0x0800db34
 8006a58:	0800db48 	.word	0x0800db48
 8006a5c:	40010c00 	.word	0x40010c00
 8006a60:	20000275 	.word	0x20000275
 8006a64:	20000272 	.word	0x20000272

08006a68 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006a6e:	2001      	movs	r0, #1
 8006a70:	f001 f926 	bl	8007cc0 <lcd_cursor>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006a74:	2305      	movs	r3, #5
 8006a76:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006a78:	2303      	movs	r3, #3
 8006a7a:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006a80:	4ba7      	ldr	r3, [pc, #668]	; (8006d20 <takeMachineID+0x2b8>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	603b      	str	r3, [r7, #0]

    memset(machineID, 0, sizeof(machineID));
 8006a86:	220c      	movs	r2, #12
 8006a88:	2100      	movs	r1, #0
 8006a8a:	48a6      	ldr	r0, [pc, #664]	; (8006d24 <takeMachineID+0x2bc>)
 8006a8c:	f005 fd33 	bl	800c4f6 <memset>
    memset(machineIDInt, 0, sizeof(machineIDInt));
 8006a90:	220c      	movs	r2, #12
 8006a92:	2100      	movs	r1, #0
 8006a94:	48a4      	ldr	r0, [pc, #656]	; (8006d28 <takeMachineID+0x2c0>)
 8006a96:	f005 fd2e 	bl	800c4f6 <memset>
    memset(&eepromData[idStartPos], 0, 12);
 8006a9a:	4ba1      	ldr	r3, [pc, #644]	; (8006d20 <takeMachineID+0x2b8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4aa3      	ldr	r2, [pc, #652]	; (8006d2c <takeMachineID+0x2c4>)
 8006aa0:	4413      	add	r3, r2
 8006aa2:	220c      	movs	r2, #12
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f005 fd25 	bl	800c4f6 <memset>
    //resetEEPROM4Wifi(1);
    HAL_Delay(100);
 8006aac:	2064      	movs	r0, #100	; 0x64
 8006aae:	f001 fdff 	bl	80086b0 <HAL_Delay>

    printTemplate(1, 0);
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	2001      	movs	r0, #1
 8006ab6:	f7fa f969 	bl	8000d8c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006aba:	2108      	movs	r1, #8
 8006abc:	489c      	ldr	r0, [pc, #624]	; (8006d30 <takeMachineID+0x2c8>)
 8006abe:	f002 fbc7 	bl	8009250 <HAL_GPIO_ReadPin>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d12b      	bne.n	8006b20 <takeMachineID+0xb8>
        	lcd_cursor(0);
 8006ac8:	2000      	movs	r0, #0
 8006aca:	f001 f8f9 	bl	8007cc0 <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006ace:	4895      	ldr	r0, [pc, #596]	; (8006d24 <takeMachineID+0x2bc>)
 8006ad0:	f7f9 fba8 	bl	8000224 <strlen>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b0c      	cmp	r3, #12
 8006ad8:	d010      	beq.n	8006afc <takeMachineID+0x94>
        		lcd_clear();
 8006ada:	f001 f8bf 	bl	8007c5c <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006ade:	4a95      	ldr	r2, [pc, #596]	; (8006d34 <takeMachineID+0x2cc>)
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	f001 f88e 	bl	8007c04 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006ae8:	4a93      	ldr	r2, [pc, #588]	; (8006d38 <takeMachineID+0x2d0>)
 8006aea:	2101      	movs	r1, #1
 8006aec:	2002      	movs	r0, #2
 8006aee:	f001 f889 	bl	8007c04 <lcd_print>
        		HAL_Delay(1200);
 8006af2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006af6:	f001 fddb 	bl	80086b0 <HAL_Delay>
        		goto mainSection;
 8006afa:	e7b8      	b.n	8006a6e <takeMachineID+0x6>
        	}

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006afc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006b00:	9302      	str	r3, [sp, #8]
 8006b02:	236e      	movs	r3, #110	; 0x6e
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	4b89      	ldr	r3, [pc, #548]	; (8006d2c <takeMachineID+0x2c4>)
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	236e      	movs	r3, #110	; 0x6e
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	21a0      	movs	r1, #160	; 0xa0
 8006b10:	488a      	ldr	r0, [pc, #552]	; (8006d3c <takeMachineID+0x2d4>)
 8006b12:	f002 fe57 	bl	80097c4 <HAL_I2C_Mem_Write>
        	HAL_Delay(1000);
 8006b16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b1a:	f001 fdc9 	bl	80086b0 <HAL_Delay>

            break;
 8006b1e:	e13d      	b.n	8006d9c <takeMachineID+0x334>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006b20:	2101      	movs	r1, #1
 8006b22:	4883      	ldr	r0, [pc, #524]	; (8006d30 <takeMachineID+0x2c8>)
 8006b24:	f002 fb94 	bl	8009250 <HAL_GPIO_ReadPin>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d111      	bne.n	8006b52 <takeMachineID+0xea>
        	if(cursorPosition == 7) {
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b07      	cmp	r3, #7
 8006b32:	d102      	bne.n	8006b3a <takeMachineID+0xd2>
        		cursorPosition = 10;
 8006b34:	230a      	movs	r3, #10
 8006b36:	60bb      	str	r3, [r7, #8]
 8006b38:	e008      	b.n	8006b4c <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b0e      	cmp	r3, #14
 8006b3e:	d102      	bne.n	8006b46 <takeMachineID+0xde>
                cursorPosition = 3;
 8006b40:	2303      	movs	r3, #3
 8006b42:	60bb      	str	r3, [r7, #8]
 8006b44:	e002      	b.n	8006b4c <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006b4c:	2096      	movs	r0, #150	; 0x96
 8006b4e:	f001 fdaf 	bl	80086b0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006b52:	2108      	movs	r1, #8
 8006b54:	487a      	ldr	r0, [pc, #488]	; (8006d40 <takeMachineID+0x2d8>)
 8006b56:	f002 fb7b 	bl	8009250 <HAL_GPIO_ReadPin>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d111      	bne.n	8006b84 <takeMachineID+0x11c>
            if (cursorPosition == 3) {
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d102      	bne.n	8006b6c <takeMachineID+0x104>
                cursorPosition = 14;
 8006b66:	230e      	movs	r3, #14
 8006b68:	60bb      	str	r3, [r7, #8]
 8006b6a:	e008      	b.n	8006b7e <takeMachineID+0x116>
            } else if(cursorPosition == 10) {
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2b0a      	cmp	r3, #10
 8006b70:	d102      	bne.n	8006b78 <takeMachineID+0x110>
            	cursorPosition = 7;
 8006b72:	2307      	movs	r3, #7
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	e002      	b.n	8006b7e <takeMachineID+0x116>
            } else {
            	cursorPosition--;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006b7e:	2096      	movs	r0, #150	; 0x96
 8006b80:	f001 fd96 	bl	80086b0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006b84:	2102      	movs	r1, #2
 8006b86:	486a      	ldr	r0, [pc, #424]	; (8006d30 <takeMachineID+0x2c8>)
 8006b88:	f002 fb62 	bl	8009250 <HAL_GPIO_ReadPin>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	f040 80aa 	bne.w	8006ce8 <takeMachineID+0x280>
        	if(cursorPosition == 3) {
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d10a      	bne.n	8006bb0 <takeMachineID+0x148>
        		machineID[arrayPos] = '0';
 8006b9a:	4a62      	ldr	r2, [pc, #392]	; (8006d24 <takeMachineID+0x2bc>)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	2230      	movs	r2, #48	; 0x30
 8006ba2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006ba4:	4a61      	ldr	r2, [pc, #388]	; (8006d2c <takeMachineID+0x2c4>)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	4413      	add	r3, r2
 8006baa:	2200      	movs	r2, #0
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	e07c      	b.n	8006caa <takeMachineID+0x242>
        	} else if(cursorPosition == 4) {
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d10a      	bne.n	8006bcc <takeMachineID+0x164>
        		machineID[arrayPos] = '1';
 8006bb6:	4a5b      	ldr	r2, [pc, #364]	; (8006d24 <takeMachineID+0x2bc>)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4413      	add	r3, r2
 8006bbc:	2231      	movs	r2, #49	; 0x31
 8006bbe:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006bc0:	4a5a      	ldr	r2, [pc, #360]	; (8006d2c <takeMachineID+0x2c4>)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	e06e      	b.n	8006caa <takeMachineID+0x242>
        	} else if(cursorPosition == 5) {
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2b05      	cmp	r3, #5
 8006bd0:	d10a      	bne.n	8006be8 <takeMachineID+0x180>
        		machineID[arrayPos] = '2';
 8006bd2:	4a54      	ldr	r2, [pc, #336]	; (8006d24 <takeMachineID+0x2bc>)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	2232      	movs	r2, #50	; 0x32
 8006bda:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006bdc:	4a53      	ldr	r2, [pc, #332]	; (8006d2c <takeMachineID+0x2c4>)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	4413      	add	r3, r2
 8006be2:	2202      	movs	r2, #2
 8006be4:	701a      	strb	r2, [r3, #0]
 8006be6:	e060      	b.n	8006caa <takeMachineID+0x242>
        	} else if(cursorPosition == 6) {
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b06      	cmp	r3, #6
 8006bec:	d10a      	bne.n	8006c04 <takeMachineID+0x19c>
        		machineID[arrayPos] = '3';
 8006bee:	4a4d      	ldr	r2, [pc, #308]	; (8006d24 <takeMachineID+0x2bc>)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	2233      	movs	r2, #51	; 0x33
 8006bf6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006bf8:	4a4c      	ldr	r2, [pc, #304]	; (8006d2c <takeMachineID+0x2c4>)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	2203      	movs	r2, #3
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	e052      	b.n	8006caa <takeMachineID+0x242>
        	} else if(cursorPosition == 7) {
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b07      	cmp	r3, #7
 8006c08:	d10a      	bne.n	8006c20 <takeMachineID+0x1b8>
        		machineID[arrayPos] = '4';
 8006c0a:	4a46      	ldr	r2, [pc, #280]	; (8006d24 <takeMachineID+0x2bc>)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4413      	add	r3, r2
 8006c10:	2234      	movs	r2, #52	; 0x34
 8006c12:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006c14:	4a45      	ldr	r2, [pc, #276]	; (8006d2c <takeMachineID+0x2c4>)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	4413      	add	r3, r2
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	e044      	b.n	8006caa <takeMachineID+0x242>
        	} else if(cursorPosition == 10) {
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b0a      	cmp	r3, #10
 8006c24:	d10a      	bne.n	8006c3c <takeMachineID+0x1d4>
        		machineID[arrayPos] = '5';
 8006c26:	4a3f      	ldr	r2, [pc, #252]	; (8006d24 <takeMachineID+0x2bc>)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	2235      	movs	r2, #53	; 0x35
 8006c2e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006c30:	4a3e      	ldr	r2, [pc, #248]	; (8006d2c <takeMachineID+0x2c4>)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	4413      	add	r3, r2
 8006c36:	2205      	movs	r2, #5
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	e036      	b.n	8006caa <takeMachineID+0x242>
        	} else if(cursorPosition == 11) {
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2b0b      	cmp	r3, #11
 8006c40:	d10a      	bne.n	8006c58 <takeMachineID+0x1f0>
        		machineID[arrayPos] = '6';
 8006c42:	4a38      	ldr	r2, [pc, #224]	; (8006d24 <takeMachineID+0x2bc>)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4413      	add	r3, r2
 8006c48:	2236      	movs	r2, #54	; 0x36
 8006c4a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006c4c:	4a37      	ldr	r2, [pc, #220]	; (8006d2c <takeMachineID+0x2c4>)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	4413      	add	r3, r2
 8006c52:	2206      	movs	r2, #6
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	e028      	b.n	8006caa <takeMachineID+0x242>
        	} else if(cursorPosition == 12) {
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b0c      	cmp	r3, #12
 8006c5c:	d10a      	bne.n	8006c74 <takeMachineID+0x20c>
        		machineID[arrayPos] = '7';
 8006c5e:	4a31      	ldr	r2, [pc, #196]	; (8006d24 <takeMachineID+0x2bc>)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4413      	add	r3, r2
 8006c64:	2237      	movs	r2, #55	; 0x37
 8006c66:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006c68:	4a30      	ldr	r2, [pc, #192]	; (8006d2c <takeMachineID+0x2c4>)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	2207      	movs	r2, #7
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	e01a      	b.n	8006caa <takeMachineID+0x242>
        	} else if(cursorPosition == 13) {
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b0d      	cmp	r3, #13
 8006c78:	d10a      	bne.n	8006c90 <takeMachineID+0x228>
        		machineID[arrayPos] = '8';
 8006c7a:	4a2a      	ldr	r2, [pc, #168]	; (8006d24 <takeMachineID+0x2bc>)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4413      	add	r3, r2
 8006c80:	2238      	movs	r2, #56	; 0x38
 8006c82:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8006c84:	4a29      	ldr	r2, [pc, #164]	; (8006d2c <takeMachineID+0x2c4>)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	4413      	add	r3, r2
 8006c8a:	2208      	movs	r2, #8
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	e00c      	b.n	8006caa <takeMachineID+0x242>
        	} else if(cursorPosition == 14) {
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b0e      	cmp	r3, #14
 8006c94:	d109      	bne.n	8006caa <takeMachineID+0x242>
        		machineID[arrayPos] = '9';
 8006c96:	4a23      	ldr	r2, [pc, #140]	; (8006d24 <takeMachineID+0x2bc>)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	2239      	movs	r2, #57	; 0x39
 8006c9e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8006ca0:	4a22      	ldr	r2, [pc, #136]	; (8006d2c <takeMachineID+0x2c4>)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	2209      	movs	r2, #9
 8006ca8:	701a      	strb	r2, [r3, #0]
        	}

        	if(arrayPos == machineIDCharacterLimit - 1) {
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b0b      	cmp	r3, #11
 8006cae:	d105      	bne.n	8006cbc <takeMachineID+0x254>
        		machineID[machineIDCharacterLimit] = '\0';
 8006cb0:	4b1c      	ldr	r3, [pc, #112]	; (8006d24 <takeMachineID+0x2bc>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	731a      	strb	r2, [r3, #12]
        		machineIDInt[machineIDCharacterLimit] = '\0';
 8006cb6:	4b1c      	ldr	r3, [pc, #112]	; (8006d28 <takeMachineID+0x2c0>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	731a      	strb	r2, [r3, #12]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	b2d9      	uxtb	r1, r3
 8006cc0:	4a18      	ldr	r2, [pc, #96]	; (8006d24 <takeMachineID+0x2bc>)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	2001      	movs	r0, #1
 8006ccc:	f000 ffaf 	bl	8007c2e <lcd_print_char>

        	writeLoc++;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8006ce2:	2096      	movs	r0, #150	; 0x96
 8006ce4:	f001 fce4 	bl	80086b0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006ce8:	2104      	movs	r1, #4
 8006cea:	4811      	ldr	r0, [pc, #68]	; (8006d30 <takeMachineID+0x2c8>)
 8006cec:	f002 fab0 	bl	8009250 <HAL_GPIO_ReadPin>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d14b      	bne.n	8006d8e <takeMachineID+0x326>
            if(strlen(machineID) >= 1) {
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <takeMachineID+0x2bc>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d044      	beq.n	8006d88 <takeMachineID+0x320>
                machineID[arrayPos] = '\0';
 8006cfe:	4a09      	ldr	r2, [pc, #36]	; (8006d24 <takeMachineID+0x2bc>)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4413      	add	r3, r2
 8006d04:	2200      	movs	r2, #0
 8006d06:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8006d08:	4a08      	ldr	r2, [pc, #32]	; (8006d2c <takeMachineID+0x2c4>)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	2200      	movs	r2, #0
 8006d10:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b05      	cmp	r3, #5
 8006d16:	dd15      	ble.n	8006d44 <takeMachineID+0x2dc>
                	writeLoc--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	e016      	b.n	8006d4e <takeMachineID+0x2e6>
 8006d20:	20000004 	.word	0x20000004
 8006d24:	20000190 	.word	0x20000190
 8006d28:	200001c4 	.word	0x200001c4
 8006d2c:	20000118 	.word	0x20000118
 8006d30:	40010800 	.word	0x40010800
 8006d34:	0800db5c 	.word	0x0800db5c
 8006d38:	0800db70 	.word	0x0800db70
 8006d3c:	200003a8 	.word	0x200003a8
 8006d40:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	dc01      	bgt.n	8006d4e <takeMachineID+0x2e6>
                	writeLoc = 5;
 8006d4a:	2305      	movs	r3, #5
 8006d4c:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	dd06      	ble.n	8006d62 <takeMachineID+0x2fa>
                	arrayPos--;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	e007      	b.n	8006d72 <takeMachineID+0x30a>
                } else if(arrayPos < 0) {
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	da04      	bge.n	8006d72 <takeMachineID+0x30a>
                	arrayPos = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8006d6c:	4b0d      	ldr	r3, [pc, #52]	; (8006da4 <takeMachineID+0x33c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	3304      	adds	r3, #4
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	2001      	movs	r0, #1
 8006d7e:	f000 ff77 	bl	8007c70 <lcd_delete_char>
                HAL_Delay(50);
 8006d82:	2032      	movs	r0, #50	; 0x32
 8006d84:	f001 fc94 	bl	80086b0 <HAL_Delay>
            }

            HAL_Delay(150);
 8006d88:	2096      	movs	r0, #150	; 0x96
 8006d8a:	f001 fc91 	bl	80086b0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	4619      	mov	r1, r3
 8006d94:	2002      	movs	r0, #2
 8006d96:	f000 ff16 	bl	8007bc6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006d9a:	e68e      	b.n	8006aba <takeMachineID+0x52>
    }
}
 8006d9c:	bf00      	nop
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20000004 	.word	0x20000004

08006da8 <takeWifiSSID>:

void takeWifiSSID() {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08a      	sub	sp, #40	; 0x28
 8006dac:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006dae:	2001      	movs	r0, #1
 8006db0:	f000 ff86 	bl	8007cc0 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID)); //wifiSSID Sıfırlanıyor.
 8006db4:	2214      	movs	r2, #20
 8006db6:	2100      	movs	r1, #0
 8006db8:	487a      	ldr	r0, [pc, #488]	; (8006fa4 <takeWifiSSID+0x1fc>)
 8006dba:	f005 fb9c 	bl	800c4f6 <memset>
    memset(wifiSSIDInt, 0, sizeof(wifiSSIDInt)); //wifiSSID Sıfırlanıyor.
 8006dbe:	2214      	movs	r2, #20
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	4879      	ldr	r0, [pc, #484]	; (8006fa8 <takeWifiSSID+0x200>)
 8006dc4:	f005 fb97 	bl	800c4f6 <memset>
    memset(&eepromData[ssidStartPos], 0, 20);
 8006dc8:	4b78      	ldr	r3, [pc, #480]	; (8006fac <takeWifiSSID+0x204>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a78      	ldr	r2, [pc, #480]	; (8006fb0 <takeWifiSSID+0x208>)
 8006dce:	4413      	add	r3, r2
 8006dd0:	2214      	movs	r2, #20
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f005 fb8e 	bl	800c4f6 <memset>
    //resetEEPROM4Wifi(2);
    HAL_Delay(100);
 8006dda:	2064      	movs	r0, #100	; 0x64
 8006ddc:	f001 fc68 	bl	80086b0 <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8006de0:	2301      	movs	r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8006de4:	2307      	movs	r3, #7
 8006de6:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8006de8:	2301      	movs	r3, #1
 8006dea:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8006dec:	2300      	movs	r3, #0
 8006dee:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8006df0:	4b6e      	ldr	r3, [pc, #440]	; (8006fac <takeWifiSSID+0x204>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006df6:	2101      	movs	r1, #1
 8006df8:	2002      	movs	r0, #2
 8006dfa:	f7f9 ffc7 	bl	8000d8c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006dfe:	2108      	movs	r1, #8
 8006e00:	486c      	ldr	r0, [pc, #432]	; (8006fb4 <takeWifiSSID+0x20c>)
 8006e02:	f002 fa25 	bl	8009250 <HAL_GPIO_ReadPin>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d12b      	bne.n	8006e64 <takeWifiSSID+0xbc>
            lcd_cursor(0);
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	f000 ff57 	bl	8007cc0 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006e12:	4864      	ldr	r0, [pc, #400]	; (8006fa4 <takeWifiSSID+0x1fc>)
 8006e14:	f7f9 fa06 	bl	8000224 <strlen>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b14      	cmp	r3, #20
 8006e1c:	d910      	bls.n	8006e40 <takeWifiSSID+0x98>
                lcd_clear();
 8006e1e:	f000 ff1d 	bl	8007c5c <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006e22:	4a65      	ldr	r2, [pc, #404]	; (8006fb8 <takeWifiSSID+0x210>)
 8006e24:	2101      	movs	r1, #1
 8006e26:	2001      	movs	r0, #1
 8006e28:	f000 feec 	bl	8007c04 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006e2c:	4a63      	ldr	r2, [pc, #396]	; (8006fbc <takeWifiSSID+0x214>)
 8006e2e:	2101      	movs	r1, #1
 8006e30:	2002      	movs	r0, #2
 8006e32:	f000 fee7 	bl	8007c04 <lcd_print>
                HAL_Delay(1250);
 8006e36:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8006e3a:	f001 fc39 	bl	80086b0 <HAL_Delay>
                goto mainSSIDSection;
 8006e3e:	e7b6      	b.n	8006dae <takeWifiSSID+0x6>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006e40:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e44:	9302      	str	r3, [sp, #8]
 8006e46:	236e      	movs	r3, #110	; 0x6e
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	4b59      	ldr	r3, [pc, #356]	; (8006fb0 <takeWifiSSID+0x208>)
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	236e      	movs	r3, #110	; 0x6e
 8006e50:	2200      	movs	r2, #0
 8006e52:	21a0      	movs	r1, #160	; 0xa0
 8006e54:	485a      	ldr	r0, [pc, #360]	; (8006fc0 <takeWifiSSID+0x218>)
 8006e56:	f002 fcb5 	bl	80097c4 <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 8006e5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e5e:	f001 fc27 	bl	80086b0 <HAL_Delay>

            break;
 8006e62:	e14b      	b.n	80070fc <takeWifiSSID+0x354>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006e64:	2101      	movs	r1, #1
 8006e66:	4853      	ldr	r0, [pc, #332]	; (8006fb4 <takeWifiSSID+0x20c>)
 8006e68:	f002 f9f2 	bl	8009250 <HAL_GPIO_ReadPin>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d14d      	bne.n	8006f0e <takeWifiSSID+0x166>
        	if(cursorPosition > 80) {
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b50      	cmp	r3, #80	; 0x50
 8006e76:	dd01      	ble.n	8006e7c <takeWifiSSID+0xd4>
        		cursorPosition = 1;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b10      	cmp	r3, #16
 8006e80:	d13f      	bne.n	8006f02 <takeWifiSSID+0x15a>
            	if(page == 1) {
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d109      	bne.n	8006e9c <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	60fb      	str	r3, [r7, #12]
            		page++;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8006e92:	2102      	movs	r1, #2
 8006e94:	2002      	movs	r0, #2
 8006e96:	f7f9 ff79 	bl	8000d8c <printTemplate>
 8006e9a:	e035      	b.n	8006f08 <takeWifiSSID+0x160>
            	} else if(page == 2) {
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d109      	bne.n	8006eb6 <takeWifiSSID+0x10e>
            		cursorPosition = 1;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]
            		page++;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8006eac:	2103      	movs	r1, #3
 8006eae:	2002      	movs	r0, #2
 8006eb0:	f7f9 ff6c 	bl	8000d8c <printTemplate>
 8006eb4:	e028      	b.n	8006f08 <takeWifiSSID+0x160>
            	} else if(page == 3) {
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d109      	bne.n	8006ed0 <takeWifiSSID+0x128>
            		cursorPosition = 1;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	60fb      	str	r3, [r7, #12]
            		page++;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8006ec6:	2104      	movs	r1, #4
 8006ec8:	2002      	movs	r0, #2
 8006eca:	f7f9 ff5f 	bl	8000d8c <printTemplate>
 8006ece:	e01b      	b.n	8006f08 <takeWifiSSID+0x160>
            	} else if(page == 4) {
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d109      	bne.n	8006eea <takeWifiSSID+0x142>
            		cursorPosition = 1;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
            		page++;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	3301      	adds	r3, #1
 8006ede:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8006ee0:	2105      	movs	r1, #5
 8006ee2:	2002      	movs	r0, #2
 8006ee4:	f7f9 ff52 	bl	8000d8c <printTemplate>
 8006ee8:	e00e      	b.n	8006f08 <takeWifiSSID+0x160>
            	} else if(page == 5) {
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b05      	cmp	r3, #5
 8006eee:	d10b      	bne.n	8006f08 <takeWifiSSID+0x160>
            		cursorPosition = 1;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8006ef8:	2101      	movs	r1, #1
 8006efa:	2002      	movs	r0, #2
 8006efc:	f7f9 ff46 	bl	8000d8c <printTemplate>
 8006f00:	e002      	b.n	8006f08 <takeWifiSSID+0x160>
            	}
            } else {
            	cursorPosition++;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3301      	adds	r3, #1
 8006f06:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006f08:	2096      	movs	r0, #150	; 0x96
 8006f0a:	f001 fbd1 	bl	80086b0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006f0e:	2108      	movs	r1, #8
 8006f10:	482c      	ldr	r0, [pc, #176]	; (8006fc4 <takeWifiSSID+0x21c>)
 8006f12:	f002 f99d 	bl	8009250 <HAL_GPIO_ReadPin>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d15b      	bne.n	8006fd4 <takeWifiSSID+0x22c>
        	if(cursorPosition < 1) {
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	dc01      	bgt.n	8006f26 <takeWifiSSID+0x17e>
        		cursorPosition = 80;
 8006f22:	2350      	movs	r3, #80	; 0x50
 8006f24:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d14d      	bne.n	8006fc8 <takeWifiSSID+0x220>
            	if(page == 1) {
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d108      	bne.n	8006f44 <takeWifiSSID+0x19c>
            		cursorPosition = 16;
 8006f32:	2310      	movs	r3, #16
 8006f34:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8006f36:	2305      	movs	r3, #5
 8006f38:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8006f3a:	2105      	movs	r1, #5
 8006f3c:	2002      	movs	r0, #2
 8006f3e:	f7f9 ff25 	bl	8000d8c <printTemplate>
 8006f42:	e044      	b.n	8006fce <takeWifiSSID+0x226>
            	} else if(page == 2) {
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d108      	bne.n	8006f5c <takeWifiSSID+0x1b4>
            		cursorPosition = 16;
 8006f4a:	2310      	movs	r3, #16
 8006f4c:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8006f52:	2101      	movs	r1, #1
 8006f54:	2002      	movs	r0, #2
 8006f56:	f7f9 ff19 	bl	8000d8c <printTemplate>
 8006f5a:	e038      	b.n	8006fce <takeWifiSSID+0x226>
            	} else if(page == 3) {
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d108      	bne.n	8006f74 <takeWifiSSID+0x1cc>
            		cursorPosition = 16;
 8006f62:	2310      	movs	r3, #16
 8006f64:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8006f66:	2302      	movs	r3, #2
 8006f68:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8006f6a:	2102      	movs	r1, #2
 8006f6c:	2002      	movs	r0, #2
 8006f6e:	f7f9 ff0d 	bl	8000d8c <printTemplate>
 8006f72:	e02c      	b.n	8006fce <takeWifiSSID+0x226>
            	} else if(page == 4) {
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	d108      	bne.n	8006f8c <takeWifiSSID+0x1e4>
            		cursorPosition = 16;
 8006f7a:	2310      	movs	r3, #16
 8006f7c:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8006f82:	2103      	movs	r1, #3
 8006f84:	2002      	movs	r0, #2
 8006f86:	f7f9 ff01 	bl	8000d8c <printTemplate>
 8006f8a:	e020      	b.n	8006fce <takeWifiSSID+0x226>
            	} else if(page == 5) {
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2b05      	cmp	r3, #5
 8006f90:	d11d      	bne.n	8006fce <takeWifiSSID+0x226>
            		cursorPosition = 16;
 8006f92:	2310      	movs	r3, #16
 8006f94:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8006f96:	2304      	movs	r3, #4
 8006f98:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8006f9a:	2104      	movs	r1, #4
 8006f9c:	2002      	movs	r0, #2
 8006f9e:	f7f9 fef5 	bl	8000d8c <printTemplate>
 8006fa2:	e014      	b.n	8006fce <takeWifiSSID+0x226>
 8006fa4:	2000019c 	.word	0x2000019c
 8006fa8:	200001d0 	.word	0x200001d0
 8006fac:	20000008 	.word	0x20000008
 8006fb0:	20000118 	.word	0x20000118
 8006fb4:	40010800 	.word	0x40010800
 8006fb8:	0800db84 	.word	0x0800db84
 8006fbc:	0800db98 	.word	0x0800db98
 8006fc0:	200003a8 	.word	0x200003a8
 8006fc4:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006fce:	2096      	movs	r0, #150	; 0x96
 8006fd0:	f001 fb6e 	bl	80086b0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006fd4:	2102      	movs	r1, #2
 8006fd6:	484b      	ldr	r0, [pc, #300]	; (8007104 <takeWifiSSID+0x35c>)
 8006fd8:	f002 f93a 	bl	8009250 <HAL_GPIO_ReadPin>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d13f      	bne.n	8007062 <takeWifiSSID+0x2ba>
        	wifiSSID[arrayPosition] = charactersArray[cursorPosition - 1];
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	4a48      	ldr	r2, [pc, #288]	; (8007108 <takeWifiSSID+0x360>)
 8006fe8:	5cd1      	ldrb	r1, [r2, r3]
 8006fea:	4a48      	ldr	r2, [pc, #288]	; (800710c <takeWifiSSID+0x364>)
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	4413      	add	r3, r2
 8006ff0:	460a      	mov	r2, r1
 8006ff2:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[arrayPosition] = cursorPosition - 1;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b2d9      	uxtb	r1, r3
 8006ffc:	4a44      	ldr	r2, [pc, #272]	; (8007110 <takeWifiSSID+0x368>)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	4413      	add	r3, r2
 8007002:	460a      	mov	r2, r1
 8007004:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition - 1;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	3b01      	subs	r3, #1
 800700c:	b2d9      	uxtb	r1, r3
 800700e:	4a41      	ldr	r2, [pc, #260]	; (8007114 <takeWifiSSID+0x36c>)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4413      	add	r3, r2
 8007014:	460a      	mov	r2, r1
 8007016:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[arrayPosition]);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	b2d9      	uxtb	r1, r3
 800701c:	4a3b      	ldr	r2, [pc, #236]	; (800710c <takeWifiSSID+0x364>)
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	4413      	add	r3, r2
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	2001      	movs	r0, #1
 8007028:	f000 fe01 	bl	8007c2e <lcd_print_char>

            writeLoc++;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	3301      	adds	r3, #1
 8007030:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	3301      	adds	r3, #1
 8007036:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3301      	adds	r3, #1
 800703c:	607b      	str	r3, [r7, #4]

            wifiSSID[arrayPosition] = '\0';
 800703e:	4a33      	ldr	r2, [pc, #204]	; (800710c <takeWifiSSID+0x364>)
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	4413      	add	r3, r2
 8007044:	2200      	movs	r2, #0
 8007046:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[arrayPosition] = '\0';
 8007048:	4a31      	ldr	r2, [pc, #196]	; (8007110 <takeWifiSSID+0x368>)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	4413      	add	r3, r2
 800704e:	2200      	movs	r2, #0
 8007050:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 8007052:	4a30      	ldr	r2, [pc, #192]	; (8007114 <takeWifiSSID+0x36c>)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4413      	add	r3, r2
 8007058:	2200      	movs	r2, #0
 800705a:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 800705c:	2096      	movs	r0, #150	; 0x96
 800705e:	f001 fb27 	bl	80086b0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007062:	2104      	movs	r1, #4
 8007064:	4827      	ldr	r0, [pc, #156]	; (8007104 <takeWifiSSID+0x35c>)
 8007066:	f002 f8f3 	bl	8009250 <HAL_GPIO_ReadPin>
 800706a:	4603      	mov	r3, r0
 800706c:	2b01      	cmp	r3, #1
 800706e:	d13e      	bne.n	80070ee <takeWifiSSID+0x346>
        	if(strlen(wifiSSID) >= 1) {
 8007070:	4b26      	ldr	r3, [pc, #152]	; (800710c <takeWifiSSID+0x364>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d037      	beq.n	80070e8 <takeWifiSSID+0x340>
        		wifiSSID[arrayPosition] = '\0';
 8007078:	4a24      	ldr	r2, [pc, #144]	; (800710c <takeWifiSSID+0x364>)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	4413      	add	r3, r2
 800707e:	2200      	movs	r2, #0
 8007080:	701a      	strb	r2, [r3, #0]
        		wifiSSIDInt[arrayPosition] = '\0';
 8007082:	4a23      	ldr	r2, [pc, #140]	; (8007110 <takeWifiSSID+0x368>)
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4413      	add	r3, r2
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 800708c:	4a21      	ldr	r2, [pc, #132]	; (8007114 <takeWifiSSID+0x36c>)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4413      	add	r3, r2
 8007092:	2200      	movs	r2, #0
 8007094:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	2b07      	cmp	r3, #7
 800709a:	dd03      	ble.n	80070a4 <takeWifiSSID+0x2fc>
        			writeLoc--;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	3b01      	subs	r3, #1
 80070a0:	613b      	str	r3, [r7, #16]
 80070a2:	e004      	b.n	80070ae <takeWifiSSID+0x306>
        		} else if(writeLoc < 7) {
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	2b06      	cmp	r3, #6
 80070a8:	dc01      	bgt.n	80070ae <takeWifiSSID+0x306>
        			writeLoc = 7;
 80070aa:	2307      	movs	r3, #7
 80070ac:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	dd06      	ble.n	80070c2 <takeWifiSSID+0x31a>
        			arrayPosition--;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	3b01      	subs	r3, #1
 80070b8:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3b01      	subs	r3, #1
 80070be:	607b      	str	r3, [r7, #4]
 80070c0:	e007      	b.n	80070d2 <takeWifiSSID+0x32a>
        		} else if(arrayPosition < 0) {
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	da04      	bge.n	80070d2 <takeWifiSSID+0x32a>
        			arrayPosition = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 80070cc:	4b12      	ldr	r3, [pc, #72]	; (8007118 <takeWifiSSID+0x370>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	3306      	adds	r3, #6
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	4619      	mov	r1, r3
 80070dc:	2001      	movs	r0, #1
 80070de:	f000 fdc7 	bl	8007c70 <lcd_delete_char>
        		HAL_Delay(50);
 80070e2:	2032      	movs	r0, #50	; 0x32
 80070e4:	f001 fae4 	bl	80086b0 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80070e8:	2096      	movs	r0, #150	; 0x96
 80070ea:	f001 fae1 	bl	80086b0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	4619      	mov	r1, r3
 80070f4:	2002      	movs	r0, #2
 80070f6:	f000 fd66 	bl	8007bc6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80070fa:	e680      	b.n	8006dfe <takeWifiSSID+0x56>
    }
}
 80070fc:	bf00      	nop
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	40010800 	.word	0x40010800
 8007108:	2000001c 	.word	0x2000001c
 800710c:	2000019c 	.word	0x2000019c
 8007110:	200001d0 	.word	0x200001d0
 8007114:	20000118 	.word	0x20000118
 8007118:	20000008 	.word	0x20000008

0800711c <takeWifiPass>:

void takeWifiPass() {
 800711c:	b580      	push	{r7, lr}
 800711e:	b08a      	sub	sp, #40	; 0x28
 8007120:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 8007122:	2001      	movs	r0, #1
 8007124:	f000 fdcc 	bl	8007cc0 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 8007128:	2214      	movs	r2, #20
 800712a:	2100      	movs	r1, #0
 800712c:	487a      	ldr	r0, [pc, #488]	; (8007318 <takeWifiPass+0x1fc>)
 800712e:	f005 f9e2 	bl	800c4f6 <memset>
    memset(wifiPassInt, 0, sizeof(wifiPassInt));
 8007132:	2214      	movs	r2, #20
 8007134:	2100      	movs	r1, #0
 8007136:	4879      	ldr	r0, [pc, #484]	; (800731c <takeWifiPass+0x200>)
 8007138:	f005 f9dd 	bl	800c4f6 <memset>
    memset(&eepromData[passStartPos], 0, 20);
 800713c:	4b78      	ldr	r3, [pc, #480]	; (8007320 <takeWifiPass+0x204>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a78      	ldr	r2, [pc, #480]	; (8007324 <takeWifiPass+0x208>)
 8007142:	4413      	add	r3, r2
 8007144:	2214      	movs	r2, #20
 8007146:	2100      	movs	r1, #0
 8007148:	4618      	mov	r0, r3
 800714a:	f005 f9d4 	bl	800c4f6 <memset>
    //resetEEPROM4Wifi(3);
    HAL_Delay(100);
 800714e:	2064      	movs	r0, #100	; 0x64
 8007150:	f001 faae 	bl	80086b0 <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007154:	2301      	movs	r3, #1
 8007156:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterlerin yazılacağı başlangıç karakteri
 8007158:	2307      	movs	r3, #7
 800715a:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının seçim yaparken kullandığı işaretçi değişkeni
 800715c:	2301      	movs	r3, #1
 800715e:	60fb      	str	r3, [r7, #12]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarmak için kullanılacak olan değişken
 8007160:	2300      	movs	r3, #0
 8007162:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma aktarırken kullanılacak olan değişken
 8007164:	4b6e      	ldr	r3, [pc, #440]	; (8007320 <takeWifiPass+0x204>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 800716a:	2101      	movs	r1, #1
 800716c:	2003      	movs	r0, #3
 800716e:	f7f9 fe0d 	bl	8000d8c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007172:	2108      	movs	r1, #8
 8007174:	486c      	ldr	r0, [pc, #432]	; (8007328 <takeWifiPass+0x20c>)
 8007176:	f002 f86b 	bl	8009250 <HAL_GPIO_ReadPin>
 800717a:	4603      	mov	r3, r0
 800717c:	2b01      	cmp	r3, #1
 800717e:	d12b      	bne.n	80071d8 <takeWifiPass+0xbc>
            lcd_cursor(0);
 8007180:	2000      	movs	r0, #0
 8007182:	f000 fd9d 	bl	8007cc0 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8007186:	4864      	ldr	r0, [pc, #400]	; (8007318 <takeWifiPass+0x1fc>)
 8007188:	f7f9 f84c 	bl	8000224 <strlen>
 800718c:	4603      	mov	r3, r0
 800718e:	2b14      	cmp	r3, #20
 8007190:	d910      	bls.n	80071b4 <takeWifiPass+0x98>
                lcd_clear();
 8007192:	f000 fd63 	bl	8007c5c <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007196:	4a65      	ldr	r2, [pc, #404]	; (800732c <takeWifiPass+0x210>)
 8007198:	2101      	movs	r1, #1
 800719a:	2001      	movs	r0, #1
 800719c:	f000 fd32 	bl	8007c04 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80071a0:	4a63      	ldr	r2, [pc, #396]	; (8007330 <takeWifiPass+0x214>)
 80071a2:	2101      	movs	r1, #1
 80071a4:	2002      	movs	r0, #2
 80071a6:	f000 fd2d 	bl	8007c04 <lcd_print>
                HAL_Delay(1200);
 80071aa:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80071ae:	f001 fa7f 	bl	80086b0 <HAL_Delay>
                goto mainPASSSection;
 80071b2:	e7b6      	b.n	8007122 <takeWifiPass+0x6>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80071b4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80071b8:	9302      	str	r3, [sp, #8]
 80071ba:	236e      	movs	r3, #110	; 0x6e
 80071bc:	9301      	str	r3, [sp, #4]
 80071be:	4b59      	ldr	r3, [pc, #356]	; (8007324 <takeWifiPass+0x208>)
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	236e      	movs	r3, #110	; 0x6e
 80071c4:	2200      	movs	r2, #0
 80071c6:	21a0      	movs	r1, #160	; 0xa0
 80071c8:	485a      	ldr	r0, [pc, #360]	; (8007334 <takeWifiPass+0x218>)
 80071ca:	f002 fafb 	bl	80097c4 <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 80071ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071d2:	f001 fa6d 	bl	80086b0 <HAL_Delay>

            break;
 80071d6:	e136      	b.n	8007446 <takeWifiPass+0x32a>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80071d8:	2101      	movs	r1, #1
 80071da:	4853      	ldr	r0, [pc, #332]	; (8007328 <takeWifiPass+0x20c>)
 80071dc:	f002 f838 	bl	8009250 <HAL_GPIO_ReadPin>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d14d      	bne.n	8007282 <takeWifiPass+0x166>
        	if(cursorPosition > 80) {
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b50      	cmp	r3, #80	; 0x50
 80071ea:	dd01      	ble.n	80071f0 <takeWifiPass+0xd4>
        	    cursorPosition = 1;
 80071ec:	2301      	movs	r3, #1
 80071ee:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b10      	cmp	r3, #16
 80071f4:	d13f      	bne.n	8007276 <takeWifiPass+0x15a>
            	if(page == 1) {
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d109      	bne.n	8007210 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 80071fc:	2301      	movs	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]
            		page++;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	3301      	adds	r3, #1
 8007204:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007206:	2102      	movs	r1, #2
 8007208:	2003      	movs	r0, #3
 800720a:	f7f9 fdbf 	bl	8000d8c <printTemplate>
 800720e:	e035      	b.n	800727c <takeWifiPass+0x160>
            	} else if(page == 2) {
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d109      	bne.n	800722a <takeWifiPass+0x10e>
            		cursorPosition = 1;
 8007216:	2301      	movs	r3, #1
 8007218:	60fb      	str	r3, [r7, #12]
            		page++;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	3301      	adds	r3, #1
 800721e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007220:	2103      	movs	r1, #3
 8007222:	2003      	movs	r0, #3
 8007224:	f7f9 fdb2 	bl	8000d8c <printTemplate>
 8007228:	e028      	b.n	800727c <takeWifiPass+0x160>
            	} else if(page == 3) {
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b03      	cmp	r3, #3
 800722e:	d109      	bne.n	8007244 <takeWifiPass+0x128>
            		cursorPosition = 1;
 8007230:	2301      	movs	r3, #1
 8007232:	60fb      	str	r3, [r7, #12]
            		page++;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	3301      	adds	r3, #1
 8007238:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800723a:	2104      	movs	r1, #4
 800723c:	2003      	movs	r0, #3
 800723e:	f7f9 fda5 	bl	8000d8c <printTemplate>
 8007242:	e01b      	b.n	800727c <takeWifiPass+0x160>
            	} else if(page == 4) {
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2b04      	cmp	r3, #4
 8007248:	d109      	bne.n	800725e <takeWifiPass+0x142>
            		cursorPosition = 1;
 800724a:	2301      	movs	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]
            		page++;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	3301      	adds	r3, #1
 8007252:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007254:	2105      	movs	r1, #5
 8007256:	2003      	movs	r0, #3
 8007258:	f7f9 fd98 	bl	8000d8c <printTemplate>
 800725c:	e00e      	b.n	800727c <takeWifiPass+0x160>
            	} else if(page == 5) {
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b05      	cmp	r3, #5
 8007262:	d10b      	bne.n	800727c <takeWifiPass+0x160>
            		cursorPosition = 1;
 8007264:	2301      	movs	r3, #1
 8007266:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007268:	2301      	movs	r3, #1
 800726a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800726c:	2101      	movs	r1, #1
 800726e:	2003      	movs	r0, #3
 8007270:	f7f9 fd8c 	bl	8000d8c <printTemplate>
 8007274:	e002      	b.n	800727c <takeWifiPass+0x160>
            	}
            } else {
            	cursorPosition++;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3301      	adds	r3, #1
 800727a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800727c:	2096      	movs	r0, #150	; 0x96
 800727e:	f001 fa17 	bl	80086b0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007282:	2108      	movs	r1, #8
 8007284:	482c      	ldr	r0, [pc, #176]	; (8007338 <takeWifiPass+0x21c>)
 8007286:	f001 ffe3 	bl	8009250 <HAL_GPIO_ReadPin>
 800728a:	4603      	mov	r3, r0
 800728c:	2b01      	cmp	r3, #1
 800728e:	d15b      	bne.n	8007348 <takeWifiPass+0x22c>
        	if(cursorPosition < 1) {
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	dc01      	bgt.n	800729a <takeWifiPass+0x17e>
        	    cursorPosition = 80;
 8007296:	2350      	movs	r3, #80	; 0x50
 8007298:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d14d      	bne.n	800733c <takeWifiPass+0x220>
            	if(page == 1) {
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d108      	bne.n	80072b8 <takeWifiPass+0x19c>
            		cursorPosition = 16;
 80072a6:	2310      	movs	r3, #16
 80072a8:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80072aa:	2305      	movs	r3, #5
 80072ac:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80072ae:	2105      	movs	r1, #5
 80072b0:	2003      	movs	r0, #3
 80072b2:	f7f9 fd6b 	bl	8000d8c <printTemplate>
 80072b6:	e044      	b.n	8007342 <takeWifiPass+0x226>
            	} else if(page == 2) {
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d108      	bne.n	80072d0 <takeWifiPass+0x1b4>
            		cursorPosition = 16;
 80072be:	2310      	movs	r3, #16
 80072c0:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80072c2:	2301      	movs	r3, #1
 80072c4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80072c6:	2101      	movs	r1, #1
 80072c8:	2003      	movs	r0, #3
 80072ca:	f7f9 fd5f 	bl	8000d8c <printTemplate>
 80072ce:	e038      	b.n	8007342 <takeWifiPass+0x226>
            	} else if(page == 3) {
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d108      	bne.n	80072e8 <takeWifiPass+0x1cc>
            		cursorPosition = 16;
 80072d6:	2310      	movs	r3, #16
 80072d8:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80072da:	2302      	movs	r3, #2
 80072dc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80072de:	2102      	movs	r1, #2
 80072e0:	2003      	movs	r0, #3
 80072e2:	f7f9 fd53 	bl	8000d8c <printTemplate>
 80072e6:	e02c      	b.n	8007342 <takeWifiPass+0x226>
            	} else if(page == 4) {
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d108      	bne.n	8007300 <takeWifiPass+0x1e4>
            		cursorPosition = 16;
 80072ee:	2310      	movs	r3, #16
 80072f0:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80072f2:	2303      	movs	r3, #3
 80072f4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80072f6:	2103      	movs	r1, #3
 80072f8:	2003      	movs	r0, #3
 80072fa:	f7f9 fd47 	bl	8000d8c <printTemplate>
 80072fe:	e020      	b.n	8007342 <takeWifiPass+0x226>
            	} else if(page == 5) {
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2b05      	cmp	r3, #5
 8007304:	d11d      	bne.n	8007342 <takeWifiPass+0x226>
            		cursorPosition = 16;
 8007306:	2310      	movs	r3, #16
 8007308:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800730a:	2304      	movs	r3, #4
 800730c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800730e:	2104      	movs	r1, #4
 8007310:	2003      	movs	r0, #3
 8007312:	f7f9 fd3b 	bl	8000d8c <printTemplate>
 8007316:	e014      	b.n	8007342 <takeWifiPass+0x226>
 8007318:	200001b0 	.word	0x200001b0
 800731c:	200001e4 	.word	0x200001e4
 8007320:	2000000c 	.word	0x2000000c
 8007324:	20000118 	.word	0x20000118
 8007328:	40010800 	.word	0x40010800
 800732c:	0800db84 	.word	0x0800db84
 8007330:	0800dbac 	.word	0x0800dbac
 8007334:	200003a8 	.word	0x200003a8
 8007338:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3b01      	subs	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007342:	2096      	movs	r0, #150	; 0x96
 8007344:	f001 f9b4 	bl	80086b0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007348:	2102      	movs	r1, #2
 800734a:	4841      	ldr	r0, [pc, #260]	; (8007450 <takeWifiPass+0x334>)
 800734c:	f001 ff80 	bl	8009250 <HAL_GPIO_ReadPin>
 8007350:	4603      	mov	r3, r0
 8007352:	2b01      	cmp	r3, #1
 8007354:	d13f      	bne.n	80073d6 <takeWifiPass+0x2ba>
        	wifiPass[arrayPos] = charactersArray[cursorPosition - 1];
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3b01      	subs	r3, #1
 800735a:	4a3e      	ldr	r2, [pc, #248]	; (8007454 <takeWifiPass+0x338>)
 800735c:	5cd1      	ldrb	r1, [r2, r3]
 800735e:	4a3e      	ldr	r2, [pc, #248]	; (8007458 <takeWifiPass+0x33c>)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4413      	add	r3, r2
 8007364:	460a      	mov	r2, r1
 8007366:	701a      	strb	r2, [r3, #0]
        	wifiPassInt[arrayPos] = cursorPosition - 1;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b2d9      	uxtb	r1, r3
 8007370:	4a3a      	ldr	r2, [pc, #232]	; (800745c <takeWifiPass+0x340>)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	4413      	add	r3, r2
 8007376:	460a      	mov	r2, r1
 8007378:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = cursorPosition - 1;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	3b01      	subs	r3, #1
 8007380:	b2d9      	uxtb	r1, r3
 8007382:	4a37      	ldr	r2, [pc, #220]	; (8007460 <takeWifiPass+0x344>)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4413      	add	r3, r2
 8007388:	460a      	mov	r2, r1
 800738a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[arrayPos]);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	b2d9      	uxtb	r1, r3
 8007390:	4a31      	ldr	r2, [pc, #196]	; (8007458 <takeWifiPass+0x33c>)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	4413      	add	r3, r2
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	2001      	movs	r0, #1
 800739c:	f000 fc47 	bl	8007c2e <lcd_print_char>

            writeLoc++;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	3301      	adds	r3, #1
 80073a4:	613b      	str	r3, [r7, #16]
            arrayPos++;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	3301      	adds	r3, #1
 80073aa:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3301      	adds	r3, #1
 80073b0:	607b      	str	r3, [r7, #4]

            wifiPass[arrayPos] = '\0';
 80073b2:	4a29      	ldr	r2, [pc, #164]	; (8007458 <takeWifiPass+0x33c>)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	4413      	add	r3, r2
 80073b8:	2200      	movs	r2, #0
 80073ba:	701a      	strb	r2, [r3, #0]
            wifiPassInt[arrayPos] = '\0';
 80073bc:	4a27      	ldr	r2, [pc, #156]	; (800745c <takeWifiPass+0x340>)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	4413      	add	r3, r2
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 80073c6:	4a26      	ldr	r2, [pc, #152]	; (8007460 <takeWifiPass+0x344>)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	2200      	movs	r2, #0
 80073ce:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80073d0:	2096      	movs	r0, #150	; 0x96
 80073d2:	f001 f96d 	bl	80086b0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80073d6:	2104      	movs	r1, #4
 80073d8:	481d      	ldr	r0, [pc, #116]	; (8007450 <takeWifiPass+0x334>)
 80073da:	f001 ff39 	bl	8009250 <HAL_GPIO_ReadPin>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d129      	bne.n	8007438 <takeWifiPass+0x31c>
            if(strlen(wifiPass) >= 1) {
 80073e4:	4b1c      	ldr	r3, [pc, #112]	; (8007458 <takeWifiPass+0x33c>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d022      	beq.n	8007432 <takeWifiPass+0x316>
            	wifiPass[arrayPos] = '\0';
 80073ec:	4a1a      	ldr	r2, [pc, #104]	; (8007458 <takeWifiPass+0x33c>)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	4413      	add	r3, r2
 80073f2:	2200      	movs	r2, #0
 80073f4:	701a      	strb	r2, [r3, #0]
            	wifiPassInt[arrayPos] = '\0';
 80073f6:	4a19      	ldr	r2, [pc, #100]	; (800745c <takeWifiPass+0x340>)
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	4413      	add	r3, r2
 80073fc:	2200      	movs	r2, #0
 80073fe:	701a      	strb	r2, [r3, #0]
            	eepromData[eepromVal] = '\0';
 8007400:	4a17      	ldr	r2, [pc, #92]	; (8007460 <takeWifiPass+0x344>)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4413      	add	r3, r2
 8007406:	2200      	movs	r2, #0
 8007408:	701a      	strb	r2, [r3, #0]

            	writeLoc--;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3b01      	subs	r3, #1
 800740e:	613b      	str	r3, [r7, #16]
            	arrayPos--;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	3b01      	subs	r3, #1
 8007414:	60bb      	str	r3, [r7, #8]
            	eepromVal--;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3b01      	subs	r3, #1
 800741a:	607b      	str	r3, [r7, #4]

            	lcd_delete_char(1, 6+arrayPos);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	3306      	adds	r3, #6
 8007422:	b2db      	uxtb	r3, r3
 8007424:	4619      	mov	r1, r3
 8007426:	2001      	movs	r0, #1
 8007428:	f000 fc22 	bl	8007c70 <lcd_delete_char>
            	HAL_Delay(50);
 800742c:	2032      	movs	r0, #50	; 0x32
 800742e:	f001 f93f 	bl	80086b0 <HAL_Delay>
            }

            HAL_Delay(150);
 8007432:	2096      	movs	r0, #150	; 0x96
 8007434:	f001 f93c 	bl	80086b0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	4619      	mov	r1, r3
 800743e:	2002      	movs	r0, #2
 8007440:	f000 fbc1 	bl	8007bc6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007444:	e695      	b.n	8007172 <takeWifiPass+0x56>
    }
}
 8007446:	bf00      	nop
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	40010800 	.word	0x40010800
 8007454:	2000001c 	.word	0x2000001c
 8007458:	200001b0 	.word	0x200001b0
 800745c:	200001e4 	.word	0x200001e4
 8007460:	20000118 	.word	0x20000118

08007464 <mergeData>:

char* mergeData() {
 8007464:	b580      	push	{r7, lr}
 8007466:	b09c      	sub	sp, #112	; 0x70
 8007468:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 800746a:	2300      	movs	r3, #0
 800746c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800746e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007472:	2228      	movs	r2, #40	; 0x28
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f005 f83d 	bl	800c4f6 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 800747c:	4b67      	ldr	r3, [pc, #412]	; (800761c <mergeData+0x1b8>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	713b      	strb	r3, [r7, #4]
 8007482:	4b67      	ldr	r3, [pc, #412]	; (8007620 <mergeData+0x1bc>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	717b      	strb	r3, [r7, #5]
 8007488:	4b66      	ldr	r3, [pc, #408]	; (8007624 <mergeData+0x1c0>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	71bb      	strb	r3, [r7, #6]
 800748e:	4b66      	ldr	r3, [pc, #408]	; (8007628 <mergeData+0x1c4>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	71fb      	strb	r3, [r7, #7]
 8007494:	4b65      	ldr	r3, [pc, #404]	; (800762c <mergeData+0x1c8>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	723b      	strb	r3, [r7, #8]
 800749a:	4b65      	ldr	r3, [pc, #404]	; (8007630 <mergeData+0x1cc>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	727b      	strb	r3, [r7, #9]
 80074a0:	4b64      	ldr	r3, [pc, #400]	; (8007634 <mergeData+0x1d0>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	72bb      	strb	r3, [r7, #10]
 80074a6:	4b64      	ldr	r3, [pc, #400]	; (8007638 <mergeData+0x1d4>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	72fb      	strb	r3, [r7, #11]
 80074ac:	4b63      	ldr	r3, [pc, #396]	; (800763c <mergeData+0x1d8>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	733b      	strb	r3, [r7, #12]
 80074b2:	4b63      	ldr	r3, [pc, #396]	; (8007640 <mergeData+0x1dc>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	737b      	strb	r3, [r7, #13]
 80074b8:	4b62      	ldr	r3, [pc, #392]	; (8007644 <mergeData+0x1e0>)
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	73bb      	strb	r3, [r7, #14]
 80074be:	4b62      	ldr	r3, [pc, #392]	; (8007648 <mergeData+0x1e4>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	73fb      	strb	r3, [r7, #15]
 80074c4:	4b61      	ldr	r3, [pc, #388]	; (800764c <mergeData+0x1e8>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	743b      	strb	r3, [r7, #16]
 80074ca:	4b61      	ldr	r3, [pc, #388]	; (8007650 <mergeData+0x1ec>)
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	747b      	strb	r3, [r7, #17]
 80074d0:	4b60      	ldr	r3, [pc, #384]	; (8007654 <mergeData+0x1f0>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	74bb      	strb	r3, [r7, #18]
 80074d6:	4b60      	ldr	r3, [pc, #384]	; (8007658 <mergeData+0x1f4>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	74fb      	strb	r3, [r7, #19]
 80074dc:	4b5f      	ldr	r3, [pc, #380]	; (800765c <mergeData+0x1f8>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	753b      	strb	r3, [r7, #20]
 80074e2:	4b5f      	ldr	r3, [pc, #380]	; (8007660 <mergeData+0x1fc>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	757b      	strb	r3, [r7, #21]
 80074e8:	4b5e      	ldr	r3, [pc, #376]	; (8007664 <mergeData+0x200>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	75bb      	strb	r3, [r7, #22]
 80074ee:	4b5e      	ldr	r3, [pc, #376]	; (8007668 <mergeData+0x204>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	75fb      	strb	r3, [r7, #23]
 80074f4:	4b5d      	ldr	r3, [pc, #372]	; (800766c <mergeData+0x208>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	763b      	strb	r3, [r7, #24]
 80074fa:	4b5d      	ldr	r3, [pc, #372]	; (8007670 <mergeData+0x20c>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	767b      	strb	r3, [r7, #25]
 8007500:	4b5c      	ldr	r3, [pc, #368]	; (8007674 <mergeData+0x210>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	76bb      	strb	r3, [r7, #26]
 8007506:	4b5c      	ldr	r3, [pc, #368]	; (8007678 <mergeData+0x214>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	76fb      	strb	r3, [r7, #27]
 800750c:	4b5b      	ldr	r3, [pc, #364]	; (800767c <mergeData+0x218>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	773b      	strb	r3, [r7, #28]
 8007512:	4b5b      	ldr	r3, [pc, #364]	; (8007680 <mergeData+0x21c>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	777b      	strb	r3, [r7, #29]
 8007518:	4b5a      	ldr	r3, [pc, #360]	; (8007684 <mergeData+0x220>)
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	77bb      	strb	r3, [r7, #30]
 800751e:	4b5a      	ldr	r3, [pc, #360]	; (8007688 <mergeData+0x224>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	77fb      	strb	r3, [r7, #31]
 8007524:	4b59      	ldr	r3, [pc, #356]	; (800768c <mergeData+0x228>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	f887 3020 	strb.w	r3, [r7, #32]
 800752c:	4b58      	ldr	r3, [pc, #352]	; (8007690 <mergeData+0x22c>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007534:	4b57      	ldr	r3, [pc, #348]	; (8007694 <mergeData+0x230>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800753c:	4b56      	ldr	r3, [pc, #344]	; (8007698 <mergeData+0x234>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007544:	4b55      	ldr	r3, [pc, #340]	; (800769c <mergeData+0x238>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 800754c:	4b54      	ldr	r3, [pc, #336]	; (80076a0 <mergeData+0x23c>)
 800754e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007552:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 8007556:	4b52      	ldr	r3, [pc, #328]	; (80076a0 <mergeData+0x23c>)
 8007558:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800755c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007560:	4b4f      	ldr	r3, [pc, #316]	; (80076a0 <mergeData+0x23c>)
 8007562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 800756a:	4b4d      	ldr	r3, [pc, #308]	; (80076a0 <mergeData+0x23c>)
 800756c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007570:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007574:	4b4a      	ldr	r3, [pc, #296]	; (80076a0 <mergeData+0x23c>)
 8007576:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800757a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 800757e:	4b48      	ldr	r3, [pc, #288]	; (80076a0 <mergeData+0x23c>)
 8007580:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007588:	4b45      	ldr	r3, [pc, #276]	; (80076a0 <mergeData+0x23c>)
 800758a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800758e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 8007592:	4b43      	ldr	r3, [pc, #268]	; (80076a0 <mergeData+0x23c>)
 8007594:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007598:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 800759c:	4b40      	ldr	r3, [pc, #256]	; (80076a0 <mergeData+0x23c>)
 800759e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80075a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 80075a6:	4b3e      	ldr	r3, [pc, #248]	; (80076a0 <mergeData+0x23c>)
 80075a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80075ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80075b0:	2306      	movs	r3, #6
 80075b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80075b6:	2300      	movs	r3, #0
 80075b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075ba:	e015      	b.n	80075e8 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 80075bc:	1d3a      	adds	r2, r7, #4
 80075be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c0:	4413      	add	r3, r2
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075ca:	4936      	ldr	r1, [pc, #216]	; (80076a4 <mergeData+0x240>)
 80075cc:	4618      	mov	r0, r3
 80075ce:	f004 ff21 	bl	800c414 <siprintf>
	    strcat(combinedString, temp);
 80075d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80075d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f004 ff7b 	bl	800c4d8 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80075e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075e4:	3301      	adds	r3, #1
 80075e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ea:	2b2b      	cmp	r3, #43	; 0x2b
 80075ec:	d9e6      	bls.n	80075bc <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80075ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7f8 fe16 	bl	8000224 <strlen>
 80075f8:	4603      	mov	r3, r0
 80075fa:	3301      	adds	r3, #1
 80075fc:	4618      	mov	r0, r3
 80075fe:	f004 fe55 	bl	800c2ac <malloc>
 8007602:	4603      	mov	r3, r0
 8007604:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 8007606:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800760a:	4619      	mov	r1, r3
 800760c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800760e:	f004 ffb7 	bl	800c580 <strcpy>
	return result;
 8007612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8007614:	4618      	mov	r0, r3
 8007616:	3770      	adds	r7, #112	; 0x70
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	2000022f 	.word	0x2000022f
 8007620:	20000221 	.word	0x20000221
 8007624:	20000224 	.word	0x20000224
 8007628:	20000225 	.word	0x20000225
 800762c:	20000226 	.word	0x20000226
 8007630:	2000022d 	.word	0x2000022d
 8007634:	20000227 	.word	0x20000227
 8007638:	20000228 	.word	0x20000228
 800763c:	2000022c 	.word	0x2000022c
 8007640:	20000229 	.word	0x20000229
 8007644:	20000239 	.word	0x20000239
 8007648:	2000022a 	.word	0x2000022a
 800764c:	2000023a 	.word	0x2000023a
 8007650:	2000022b 	.word	0x2000022b
 8007654:	2000023b 	.word	0x2000023b
 8007658:	2000022e 	.word	0x2000022e
 800765c:	20000230 	.word	0x20000230
 8007660:	20000231 	.word	0x20000231
 8007664:	20000232 	.word	0x20000232
 8007668:	20000233 	.word	0x20000233
 800766c:	20000234 	.word	0x20000234
 8007670:	20000235 	.word	0x20000235
 8007674:	20000236 	.word	0x20000236
 8007678:	20000237 	.word	0x20000237
 800767c:	20000238 	.word	0x20000238
 8007680:	2000023c 	.word	0x2000023c
 8007684:	2000023e 	.word	0x2000023e
 8007688:	2000021d 	.word	0x2000021d
 800768c:	2000021e 	.word	0x2000021e
 8007690:	20000000 	.word	0x20000000
 8007694:	20000001 	.word	0x20000001
 8007698:	2000021f 	.word	0x2000021f
 800769c:	20000241 	.word	0x20000241
 80076a0:	20000118 	.word	0x20000118
 80076a4:	0800dbc0 	.word	0x0800dbc0

080076a8 <convertAndSendData>:

void convertAndSendData() {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 80076ac:	4b14      	ldr	r3, [pc, #80]	; (8007700 <convertAndSendData+0x58>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <convertAndSendData+0x22>
		lcd_print(1, 1, "  Veri  Esleme  ");
 80076b4:	4a13      	ldr	r2, [pc, #76]	; (8007704 <convertAndSendData+0x5c>)
 80076b6:	2101      	movs	r1, #1
 80076b8:	2001      	movs	r0, #1
 80076ba:	f000 faa3 	bl	8007c04 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 80076be:	4a12      	ldr	r2, [pc, #72]	; (8007708 <convertAndSendData+0x60>)
 80076c0:	2101      	movs	r1, #1
 80076c2:	2002      	movs	r0, #2
 80076c4:	f000 fa9e 	bl	8007c04 <lcd_print>
 80076c8:	e009      	b.n	80076de <convertAndSendData+0x36>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80076ca:	4a10      	ldr	r2, [pc, #64]	; (800770c <convertAndSendData+0x64>)
 80076cc:	2101      	movs	r1, #1
 80076ce:	2001      	movs	r0, #1
 80076d0:	f000 fa98 	bl	8007c04 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80076d4:	4a0e      	ldr	r2, [pc, #56]	; (8007710 <convertAndSendData+0x68>)
 80076d6:	2101      	movs	r1, #1
 80076d8:	2002      	movs	r0, #2
 80076da:	f000 fa93 	bl	8007c04 <lcd_print>
	}

	sendMachineData(&huart1, machineID, mergeData());
 80076de:	f7ff fec1 	bl	8007464 <mergeData>
 80076e2:	4603      	mov	r3, r0
 80076e4:	461a      	mov	r2, r3
 80076e6:	490b      	ldr	r1, [pc, #44]	; (8007714 <convertAndSendData+0x6c>)
 80076e8:	480b      	ldr	r0, [pc, #44]	; (8007718 <convertAndSendData+0x70>)
 80076ea:	f7f9 f8c1 	bl	8000870 <sendMachineData>

	HAL_Delay(500);
 80076ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80076f2:	f000 ffdd 	bl	80086b0 <HAL_Delay>
	lcd_clear();
 80076f6:	f000 fab1 	bl	8007c5c <lcd_clear>
}
 80076fa:	bf00      	nop
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000241 	.word	0x20000241
 8007704:	0800dbc4 	.word	0x0800dbc4
 8007708:	0800dbd8 	.word	0x0800dbd8
 800770c:	0800dbec 	.word	0x0800dbec
 8007710:	0800dc00 	.word	0x0800dc00
 8007714:	20000190 	.word	0x20000190
 8007718:	20000444 	.word	0x20000444

0800771c <iotSetup>:

void iotSetup() {
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007720:	4b0e      	ldr	r3, [pc, #56]	; (800775c <iotSetup+0x40>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d017      	beq.n	8007758 <iotSetup+0x3c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 8007728:	480d      	ldr	r0, [pc, #52]	; (8007760 <iotSetup+0x44>)
 800772a:	f7f8 fd7b 	bl	8000224 <strlen>
 800772e:	4603      	mov	r3, r0
 8007730:	2b0c      	cmp	r3, #12
 8007732:	d001      	beq.n	8007738 <iotSetup+0x1c>
			takeMachineID();
 8007734:	f7ff f998 	bl	8006a68 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007738:	480a      	ldr	r0, [pc, #40]	; (8007764 <iotSetup+0x48>)
 800773a:	f7f8 fd73 	bl	8000224 <strlen>
 800773e:	4603      	mov	r3, r0
 8007740:	2b01      	cmp	r3, #1
 8007742:	d801      	bhi.n	8007748 <iotSetup+0x2c>
			takeWifiSSID();
 8007744:	f7ff fb30 	bl	8006da8 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007748:	4807      	ldr	r0, [pc, #28]	; (8007768 <iotSetup+0x4c>)
 800774a:	f7f8 fd6b 	bl	8000224 <strlen>
 800774e:	4603      	mov	r3, r0
 8007750:	2b01      	cmp	r3, #1
 8007752:	d801      	bhi.n	8007758 <iotSetup+0x3c>
			takeWifiPass();
 8007754:	f7ff fce2 	bl	800711c <takeWifiPass>
	}

	//ESP8266_Init(&huart1, wifiSSID, wifiPass);
	//HAL_Delay(500);
	//convertAndSendData();
}
 8007758:	bf00      	nop
 800775a:	bd80      	pop	{r7, pc}
 800775c:	2000023f 	.word	0x2000023f
 8007760:	20000190 	.word	0x20000190
 8007764:	2000019c 	.word	0x2000019c
 8007768:	200001b0 	.word	0x200001b0

0800776c <printMachineCredentials>:

void printMachineCredentials(int state) {
 800776c:	b580      	push	{r7, lr}
 800776e:	b08c      	sub	sp, #48	; 0x30
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d11f      	bne.n	80077ba <printMachineCredentials+0x4e>
		int idLength = strlen(machineID);
 800777a:	4853      	ldr	r0, [pc, #332]	; (80078c8 <printMachineCredentials+0x15c>)
 800777c:	f7f8 fd52 	bl	8000224 <strlen>
 8007780:	4603      	mov	r3, r0
 8007782:	62fb      	str	r3, [r7, #44]	; 0x2c

		lcd_print(2, 1, machineID);
 8007784:	4a50      	ldr	r2, [pc, #320]	; (80078c8 <printMachineCredentials+0x15c>)
 8007786:	2101      	movs	r1, #1
 8007788:	2002      	movs	r0, #2
 800778a:	f000 fa3b 	bl	8007c04 <lcd_print>
		for(int i=0; i<16-idLength; i++) {
 800778e:	2300      	movs	r3, #0
 8007790:	62bb      	str	r3, [r7, #40]	; 0x28
 8007792:	e00b      	b.n	80077ac <printMachineCredentials+0x40>
			lcd_delete_char(2, idLength);
 8007794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007796:	b2db      	uxtb	r3, r3
 8007798:	4619      	mov	r1, r3
 800779a:	2002      	movs	r0, #2
 800779c:	f000 fa68 	bl	8007c70 <lcd_delete_char>
			idLength++;
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a2:	3301      	adds	r3, #1
 80077a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i=0; i<16-idLength; i++) {
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	3301      	adds	r3, #1
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	f1c3 0310 	rsb	r3, r3, #16
 80077b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077b4:	429a      	cmp	r2, r3
 80077b6:	dbed      	blt.n	8007794 <printMachineCredentials+0x28>
				lcd_print_char(2, lcdVal, wifiPass[i]);
				lcdVal++;
			}
		}
	}
}
 80077b8:	e081      	b.n	80078be <printMachineCredentials+0x152>
	} else if(state == 2) {
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d13f      	bne.n	8007840 <printMachineCredentials+0xd4>
		int ssidLength = strlen(wifiSSID);
 80077c0:	4842      	ldr	r0, [pc, #264]	; (80078cc <printMachineCredentials+0x160>)
 80077c2:	f7f8 fd2f 	bl	8000224 <strlen>
 80077c6:	4603      	mov	r3, r0
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
		if(ssidLength == 16) {
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	2b10      	cmp	r3, #16
 80077ce:	d105      	bne.n	80077dc <printMachineCredentials+0x70>
			lcd_print(2, 1, wifiSSID);
 80077d0:	4a3e      	ldr	r2, [pc, #248]	; (80078cc <printMachineCredentials+0x160>)
 80077d2:	2101      	movs	r1, #1
 80077d4:	2002      	movs	r0, #2
 80077d6:	f000 fa15 	bl	8007c04 <lcd_print>
}
 80077da:	e070      	b.n	80078be <printMachineCredentials+0x152>
		} else if(ssidLength < 16) {
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	2b0f      	cmp	r3, #15
 80077e0:	dc15      	bgt.n	800780e <printMachineCredentials+0xa2>
			for(int i=0; i<16-ssidLength; i++) {
 80077e2:	2300      	movs	r3, #0
 80077e4:	623b      	str	r3, [r7, #32]
 80077e6:	e00b      	b.n	8007800 <printMachineCredentials+0x94>
				lcd_delete_char(2, ssidLength);
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	4619      	mov	r1, r3
 80077ee:	2002      	movs	r0, #2
 80077f0:	f000 fa3e 	bl	8007c70 <lcd_delete_char>
				ssidLength++;
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	3301      	adds	r3, #1
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
			for(int i=0; i<16-ssidLength; i++) {
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	3301      	adds	r3, #1
 80077fe:	623b      	str	r3, [r7, #32]
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	f1c3 0310 	rsb	r3, r3, #16
 8007806:	6a3a      	ldr	r2, [r7, #32]
 8007808:	429a      	cmp	r2, r3
 800780a:	dbed      	blt.n	80077e8 <printMachineCredentials+0x7c>
}
 800780c:	e057      	b.n	80078be <printMachineCredentials+0x152>
			int lcdVal = 1;
 800780e:	2301      	movs	r3, #1
 8007810:	61fb      	str	r3, [r7, #28]
			for(int i=0; i<16; i++) {
 8007812:	2300      	movs	r3, #0
 8007814:	61bb      	str	r3, [r7, #24]
 8007816:	e00f      	b.n	8007838 <printMachineCredentials+0xcc>
				lcd_print_char(2, lcdVal, wifiSSID[i]);
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	b2d9      	uxtb	r1, r3
 800781c:	4a2b      	ldr	r2, [pc, #172]	; (80078cc <printMachineCredentials+0x160>)
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	4413      	add	r3, r2
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	2002      	movs	r0, #2
 8007828:	f000 fa01 	bl	8007c2e <lcd_print_char>
				lcdVal++;
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	3301      	adds	r3, #1
 8007830:	61fb      	str	r3, [r7, #28]
			for(int i=0; i<16; i++) {
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	3301      	adds	r3, #1
 8007836:	61bb      	str	r3, [r7, #24]
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2b0f      	cmp	r3, #15
 800783c:	ddec      	ble.n	8007818 <printMachineCredentials+0xac>
}
 800783e:	e03e      	b.n	80078be <printMachineCredentials+0x152>
		int passLength = strlen(wifiPass);
 8007840:	4823      	ldr	r0, [pc, #140]	; (80078d0 <printMachineCredentials+0x164>)
 8007842:	f7f8 fcef 	bl	8000224 <strlen>
 8007846:	4603      	mov	r3, r0
 8007848:	617b      	str	r3, [r7, #20]
		if(passLength == 16) {
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b10      	cmp	r3, #16
 800784e:	d105      	bne.n	800785c <printMachineCredentials+0xf0>
			lcd_print(2, 1, wifiPass);
 8007850:	4a1f      	ldr	r2, [pc, #124]	; (80078d0 <printMachineCredentials+0x164>)
 8007852:	2101      	movs	r1, #1
 8007854:	2002      	movs	r0, #2
 8007856:	f000 f9d5 	bl	8007c04 <lcd_print>
}
 800785a:	e030      	b.n	80078be <printMachineCredentials+0x152>
		} else if(passLength < 16) {
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	2b0f      	cmp	r3, #15
 8007860:	dc15      	bgt.n	800788e <printMachineCredentials+0x122>
			for(int i=0; i<16-passLength; i++) {
 8007862:	2300      	movs	r3, #0
 8007864:	613b      	str	r3, [r7, #16]
 8007866:	e00b      	b.n	8007880 <printMachineCredentials+0x114>
				lcd_delete_char(2, passLength);
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	4619      	mov	r1, r3
 800786e:	2002      	movs	r0, #2
 8007870:	f000 f9fe 	bl	8007c70 <lcd_delete_char>
				passLength++;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	3301      	adds	r3, #1
 8007878:	617b      	str	r3, [r7, #20]
			for(int i=0; i<16-passLength; i++) {
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	3301      	adds	r3, #1
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f1c3 0310 	rsb	r3, r3, #16
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	429a      	cmp	r2, r3
 800788a:	dbed      	blt.n	8007868 <printMachineCredentials+0xfc>
}
 800788c:	e017      	b.n	80078be <printMachineCredentials+0x152>
			int lcdVal = 1;
 800788e:	2301      	movs	r3, #1
 8007890:	60fb      	str	r3, [r7, #12]
			for(int i=0; i<16; i++) {
 8007892:	2300      	movs	r3, #0
 8007894:	60bb      	str	r3, [r7, #8]
 8007896:	e00f      	b.n	80078b8 <printMachineCredentials+0x14c>
				lcd_print_char(2, lcdVal, wifiPass[i]);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	b2d9      	uxtb	r1, r3
 800789c:	4a0c      	ldr	r2, [pc, #48]	; (80078d0 <printMachineCredentials+0x164>)
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	4413      	add	r3, r2
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	2002      	movs	r0, #2
 80078a8:	f000 f9c1 	bl	8007c2e <lcd_print_char>
				lcdVal++;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3301      	adds	r3, #1
 80078b0:	60fb      	str	r3, [r7, #12]
			for(int i=0; i<16; i++) {
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	3301      	adds	r3, #1
 80078b6:	60bb      	str	r3, [r7, #8]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b0f      	cmp	r3, #15
 80078bc:	ddec      	ble.n	8007898 <printMachineCredentials+0x12c>
}
 80078be:	bf00      	nop
 80078c0:	3730      	adds	r7, #48	; 0x30
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20000190 	.word	0x20000190
 80078cc:	2000019c 	.word	0x2000019c
 80078d0:	200001b0 	.word	0x200001b0

080078d4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af02      	add	r7, sp, #8
 80078da:	4603      	mov	r3, r0
 80078dc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	f023 030f 	bic.w	r3, r3, #15
 80078e4:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80078ec:	7b7b      	ldrb	r3, [r7, #13]
 80078ee:	f043 030c 	orr.w	r3, r3, #12
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80078f6:	7b7b      	ldrb	r3, [r7, #13]
 80078f8:	f043 0308 	orr.w	r3, r3, #8
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007900:	7b3b      	ldrb	r3, [r7, #12]
 8007902:	f043 030c 	orr.w	r3, r3, #12
 8007906:	b2db      	uxtb	r3, r3
 8007908:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800790a:	7b3b      	ldrb	r3, [r7, #12]
 800790c:	f043 0308 	orr.w	r3, r3, #8
 8007910:	b2db      	uxtb	r3, r3
 8007912:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007914:	bf00      	nop
 8007916:	4825      	ldr	r0, [pc, #148]	; (80079ac <lcd_send_cmd+0xd8>)
 8007918:	f002 fac3 	bl	8009ea2 <HAL_I2C_GetError>
 800791c:	4603      	mov	r3, r0
 800791e:	2b04      	cmp	r3, #4
 8007920:	d0f9      	beq.n	8007916 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007922:	bf00      	nop
 8007924:	4821      	ldr	r0, [pc, #132]	; (80079ac <lcd_send_cmd+0xd8>)
 8007926:	f002 faaf 	bl	8009e88 <HAL_I2C_GetState>
 800792a:	4603      	mov	r3, r0
 800792c:	2b20      	cmp	r3, #32
 800792e:	d1f9      	bne.n	8007924 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007930:	4b1f      	ldr	r3, [pc, #124]	; (80079b0 <lcd_send_cmd+0xdc>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d116      	bne.n	8007966 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007938:	2300      	movs	r3, #0
 800793a:	73fb      	strb	r3, [r7, #15]
 800793c:	e00f      	b.n	800795e <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800793e:	7bfb      	ldrb	r3, [r7, #15]
 8007940:	3310      	adds	r3, #16
 8007942:	443b      	add	r3, r7
 8007944:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	f022 0208 	bic.w	r2, r2, #8
 800794e:	b2d2      	uxtb	r2, r2
 8007950:	3310      	adds	r3, #16
 8007952:	443b      	add	r3, r7
 8007954:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	3301      	adds	r3, #1
 800795c:	73fb      	strb	r3, [r7, #15]
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	2b03      	cmp	r3, #3
 8007962:	d9ec      	bls.n	800793e <lcd_send_cmd+0x6a>
 8007964:	e015      	b.n	8007992 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007966:	2300      	movs	r3, #0
 8007968:	73bb      	strb	r3, [r7, #14]
 800796a:	e00f      	b.n	800798c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	3310      	adds	r3, #16
 8007970:	443b      	add	r3, r7
 8007972:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	f042 0208 	orr.w	r2, r2, #8
 800797c:	b2d2      	uxtb	r2, r2
 800797e:	3310      	adds	r3, #16
 8007980:	443b      	add	r3, r7
 8007982:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	3301      	adds	r3, #1
 800798a:	73bb      	strb	r3, [r7, #14]
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	2b03      	cmp	r3, #3
 8007990:	d9ec      	bls.n	800796c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007992:	f107 0208 	add.w	r2, r7, #8
 8007996:	2364      	movs	r3, #100	; 0x64
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	2304      	movs	r3, #4
 800799c:	214e      	movs	r1, #78	; 0x4e
 800799e:	4803      	ldr	r0, [pc, #12]	; (80079ac <lcd_send_cmd+0xd8>)
 80079a0:	f001 fe12 	bl	80095c8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80079a4:	bf00      	nop
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	200003a8 	.word	0x200003a8
 80079b0:	2000037e 	.word	0x2000037e

080079b4 <lcd_send_data>:

void lcd_send_data (char data) {
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	4603      	mov	r3, r0
 80079bc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	f023 030f 	bic.w	r3, r3, #15
 80079c4:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80079cc:	7b7b      	ldrb	r3, [r7, #13]
 80079ce:	f043 030d 	orr.w	r3, r3, #13
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80079d6:	7b7b      	ldrb	r3, [r7, #13]
 80079d8:	f043 0309 	orr.w	r3, r3, #9
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80079e0:	7b3b      	ldrb	r3, [r7, #12]
 80079e2:	f043 030d 	orr.w	r3, r3, #13
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80079ea:	7b3b      	ldrb	r3, [r7, #12]
 80079ec:	f043 0309 	orr.w	r3, r3, #9
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80079f4:	bf00      	nop
 80079f6:	4825      	ldr	r0, [pc, #148]	; (8007a8c <lcd_send_data+0xd8>)
 80079f8:	f002 fa53 	bl	8009ea2 <HAL_I2C_GetError>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d0f9      	beq.n	80079f6 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a02:	bf00      	nop
 8007a04:	4821      	ldr	r0, [pc, #132]	; (8007a8c <lcd_send_data+0xd8>)
 8007a06:	f002 fa3f 	bl	8009e88 <HAL_I2C_GetState>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d1f9      	bne.n	8007a04 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007a10:	4b1f      	ldr	r3, [pc, #124]	; (8007a90 <lcd_send_data+0xdc>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d116      	bne.n	8007a46 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007a18:	2300      	movs	r3, #0
 8007a1a:	73fb      	strb	r3, [r7, #15]
 8007a1c:	e00f      	b.n	8007a3e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	3310      	adds	r3, #16
 8007a22:	443b      	add	r3, r7
 8007a24:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	f022 0208 	bic.w	r2, r2, #8
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	3310      	adds	r3, #16
 8007a32:	443b      	add	r3, r7
 8007a34:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	73fb      	strb	r3, [r7, #15]
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d9ec      	bls.n	8007a1e <lcd_send_data+0x6a>
 8007a44:	e015      	b.n	8007a72 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007a46:	2300      	movs	r3, #0
 8007a48:	73bb      	strb	r3, [r7, #14]
 8007a4a:	e00f      	b.n	8007a6c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	3310      	adds	r3, #16
 8007a50:	443b      	add	r3, r7
 8007a52:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	f042 0208 	orr.w	r2, r2, #8
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	3310      	adds	r3, #16
 8007a60:	443b      	add	r3, r7
 8007a62:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	73bb      	strb	r3, [r7, #14]
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d9ec      	bls.n	8007a4c <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007a72:	f107 0208 	add.w	r2, r7, #8
 8007a76:	2364      	movs	r3, #100	; 0x64
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	2304      	movs	r3, #4
 8007a7c:	214e      	movs	r1, #78	; 0x4e
 8007a7e:	4803      	ldr	r0, [pc, #12]	; (8007a8c <lcd_send_data+0xd8>)
 8007a80:	f001 fda2 	bl	80095c8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007a84:	bf00      	nop
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	200003a8 	.word	0x200003a8
 8007a90:	2000037e 	.word	0x2000037e

08007a94 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007a9c:	e006      	b.n	8007aac <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff ff84 	bl	80079b4 <lcd_send_data>
	while (*str) {
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1f4      	bne.n	8007a9e <lcd_send_string+0xa>
	}
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
	...

08007ac0 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	f023 030f 	bic.w	r3, r3, #15
 8007ad0:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007ad8:	7b7b      	ldrb	r3, [r7, #13]
 8007ada:	f043 030d 	orr.w	r3, r3, #13
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007ae2:	7b7b      	ldrb	r3, [r7, #13]
 8007ae4:	f043 0309 	orr.w	r3, r3, #9
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007aec:	7b3b      	ldrb	r3, [r7, #12]
 8007aee:	f043 030d 	orr.w	r3, r3, #13
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007af6:	7b3b      	ldrb	r3, [r7, #12]
 8007af8:	f043 0309 	orr.w	r3, r3, #9
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b00:	bf00      	nop
 8007b02:	4825      	ldr	r0, [pc, #148]	; (8007b98 <lcd_send_char+0xd8>)
 8007b04:	f002 f9cd 	bl	8009ea2 <HAL_I2C_GetError>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d0f9      	beq.n	8007b02 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b0e:	bf00      	nop
 8007b10:	4821      	ldr	r0, [pc, #132]	; (8007b98 <lcd_send_char+0xd8>)
 8007b12:	f002 f9b9 	bl	8009e88 <HAL_I2C_GetState>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	d1f9      	bne.n	8007b10 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007b1c:	4b1f      	ldr	r3, [pc, #124]	; (8007b9c <lcd_send_char+0xdc>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d116      	bne.n	8007b52 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]
 8007b28:	e00f      	b.n	8007b4a <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	3310      	adds	r3, #16
 8007b2e:	443b      	add	r3, r7
 8007b30:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	f022 0208 	bic.w	r2, r2, #8
 8007b3a:	b2d2      	uxtb	r2, r2
 8007b3c:	3310      	adds	r3, #16
 8007b3e:	443b      	add	r3, r7
 8007b40:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	3301      	adds	r3, #1
 8007b48:	73fb      	strb	r3, [r7, #15]
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d9ec      	bls.n	8007b2a <lcd_send_char+0x6a>
 8007b50:	e015      	b.n	8007b7e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007b52:	2300      	movs	r3, #0
 8007b54:	73bb      	strb	r3, [r7, #14]
 8007b56:	e00f      	b.n	8007b78 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	3310      	adds	r3, #16
 8007b5c:	443b      	add	r3, r7
 8007b5e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	f042 0208 	orr.w	r2, r2, #8
 8007b68:	b2d2      	uxtb	r2, r2
 8007b6a:	3310      	adds	r3, #16
 8007b6c:	443b      	add	r3, r7
 8007b6e:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	3301      	adds	r3, #1
 8007b76:	73bb      	strb	r3, [r7, #14]
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d9ec      	bls.n	8007b58 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007b7e:	f107 0208 	add.w	r2, r7, #8
 8007b82:	2364      	movs	r3, #100	; 0x64
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	2304      	movs	r3, #4
 8007b88:	214e      	movs	r1, #78	; 0x4e
 8007b8a:	4803      	ldr	r0, [pc, #12]	; (8007b98 <lcd_send_char+0xd8>)
 8007b8c:	f001 fd1c 	bl	80095c8 <HAL_I2C_Master_Transmit>
}
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	200003a8 	.word	0x200003a8
 8007b9c:	2000037e 	.word	0x2000037e

08007ba0 <lcd_init>:

void lcd_init (void) {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007ba4:	2002      	movs	r0, #2
 8007ba6:	f7ff fe95 	bl	80078d4 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007baa:	2028      	movs	r0, #40	; 0x28
 8007bac:	f7ff fe92 	bl	80078d4 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007bb0:	200c      	movs	r0, #12
 8007bb2:	f7ff fe8f 	bl	80078d4 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007bb6:	2080      	movs	r0, #128	; 0x80
 8007bb8:	f7ff fe8c 	bl	80078d4 <lcd_send_cmd>
	lcd_backlight(1);
 8007bbc:	2001      	movs	r0, #1
 8007bbe:	f000 f86d 	bl	8007c9c <lcd_backlight>
}
 8007bc2:	bf00      	nop
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	4603      	mov	r3, r0
 8007bce:	460a      	mov	r2, r1
 8007bd0:	71fb      	strb	r3, [r7, #7]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d106      	bne.n	8007bea <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007bdc:	79bb      	ldrb	r3, [r7, #6]
 8007bde:	337f      	adds	r3, #127	; 0x7f
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7ff fe76 	bl	80078d4 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007be8:	e008      	b.n	8007bfc <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d105      	bne.n	8007bfc <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007bf0:	79bb      	ldrb	r3, [r7, #6]
 8007bf2:	3b41      	subs	r3, #65	; 0x41
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff fe6c 	bl	80078d4 <lcd_send_cmd>
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	603a      	str	r2, [r7, #0]
 8007c0e:	71fb      	strb	r3, [r7, #7]
 8007c10:	460b      	mov	r3, r1
 8007c12:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007c14:	79ba      	ldrb	r2, [r7, #6]
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	4611      	mov	r1, r2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff ffd3 	bl	8007bc6 <lcd_gotoxy>
	lcd_send_string(str);
 8007c20:	6838      	ldr	r0, [r7, #0]
 8007c22:	f7ff ff37 	bl	8007a94 <lcd_send_string>
}
 8007c26:	bf00      	nop
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	4603      	mov	r3, r0
 8007c36:	71fb      	strb	r3, [r7, #7]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	71bb      	strb	r3, [r7, #6]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007c40:	79ba      	ldrb	r2, [r7, #6]
 8007c42:	79fb      	ldrb	r3, [r7, #7]
 8007c44:	4611      	mov	r1, r2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7ff ffbd 	bl	8007bc6 <lcd_gotoxy>
    lcd_send_char(ch);
 8007c4c:	797b      	ldrb	r3, [r7, #5]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7ff ff36 	bl	8007ac0 <lcd_send_char>
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <lcd_clear>:

void lcd_clear(void) {
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007c60:	2001      	movs	r0, #1
 8007c62:	f7ff fe37 	bl	80078d4 <lcd_send_cmd>
    HAL_Delay(2);
 8007c66:	2002      	movs	r0, #2
 8007c68:	f000 fd22 	bl	80086b0 <HAL_Delay>
}
 8007c6c:	bf00      	nop
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	460a      	mov	r2, r1
 8007c7a:	71fb      	strb	r3, [r7, #7]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007c80:	79ba      	ldrb	r2, [r7, #6]
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	4611      	mov	r1, r2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7ff ff9d 	bl	8007bc6 <lcd_gotoxy>

    lcd_send_char(' ');
 8007c8c:	2020      	movs	r0, #32
 8007c8e:	f7ff ff17 	bl	8007ac0 <lcd_send_char>
}
 8007c92:	bf00      	nop
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007ca6:	4a05      	ldr	r2, [pc, #20]	; (8007cbc <lcd_backlight+0x20>)
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007cac:	2000      	movs	r0, #0
 8007cae:	f7ff fe11 	bl	80078d4 <lcd_send_cmd>
}
 8007cb2:	bf00      	nop
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	2000037e 	.word	0x2000037e

08007cc0 <lcd_cursor>:

void lcd_cursor(int state) {
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d106      	bne.n	8007cdc <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007cce:	200e      	movs	r0, #14
 8007cd0:	f7ff fe00 	bl	80078d4 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007cd4:	200f      	movs	r0, #15
 8007cd6:	f7ff fdfd 	bl	80078d4 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007cda:	e002      	b.n	8007ce2 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007cdc:	200c      	movs	r0, #12
 8007cde:	f7ff fdf9 	bl	80078d4 <lcd_send_cmd>
}
 8007ce2:	bf00      	nop
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
	...

08007cec <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007cf4:	4b04      	ldr	r3, [pc, #16]	; (8007d08 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	4a03      	ldr	r2, [pc, #12]	; (8007d08 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007cfc:	6013      	str	r3, [r2, #0]
}
 8007cfe:	bf00      	nop
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bc80      	pop	{r7}
 8007d06:	4770      	bx	lr
 8007d08:	200001fc 	.word	0x200001fc

08007d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007d10:	f000 fc6c 	bl	80085ec <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007d14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d18:	f000 fcca 	bl	80086b0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007d1c:	f000 f89c 	bl	8007e58 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007d20:	f000 f9be 	bl	80080a0 <MX_GPIO_Init>
  MX_CAN_Init();
 8007d24:	f000 f8de 	bl	8007ee4 <MX_CAN_Init>
  MX_I2C1_Init();
 8007d28:	f000 f910 	bl	8007f4c <MX_I2C1_Init>
  MX_TIM1_Init();
 8007d2c:	f000 f93c 	bl	8007fa8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007d30:	f000 f98c 	bl	800804c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007d34:	2201      	movs	r2, #1
 8007d36:	2140      	movs	r1, #64	; 0x40
 8007d38:	483e      	ldr	r0, [pc, #248]	; (8007e34 <main+0x128>)
 8007d3a:	f001 faa0 	bl	800927e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007d3e:	2201      	movs	r2, #1
 8007d40:	2180      	movs	r1, #128	; 0x80
 8007d42:	483c      	ldr	r0, [pc, #240]	; (8007e34 <main+0x128>)
 8007d44:	f001 fa9b 	bl	800927e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007d48:	200a      	movs	r0, #10
 8007d4a:	f000 fcb1 	bl	80086b0 <HAL_Delay>
  lcd_init();
 8007d4e:	f7ff ff27 	bl	8007ba0 <lcd_init>
  HAL_Delay(10);
 8007d52:	200a      	movs	r0, #10
 8007d54:	f000 fcac 	bl	80086b0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007d58:	4837      	ldr	r0, [pc, #220]	; (8007e38 <main+0x12c>)
 8007d5a:	f003 f943 	bl	800afe4 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007d5e:	bf00      	nop
 8007d60:	4836      	ldr	r0, [pc, #216]	; (8007e3c <main+0x130>)
 8007d62:	f002 f89e 	bl	8009ea2 <HAL_I2C_GetError>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b04      	cmp	r3, #4
 8007d6a:	d0f9      	beq.n	8007d60 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007d6c:	bf00      	nop
 8007d6e:	4833      	ldr	r0, [pc, #204]	; (8007e3c <main+0x130>)
 8007d70:	f002 f88a 	bl	8009e88 <HAL_I2C_GetState>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b20      	cmp	r3, #32
 8007d78:	d1f9      	bne.n	8007d6e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d80:	482c      	ldr	r0, [pc, #176]	; (8007e34 <main+0x128>)
 8007d82:	f001 fa7c 	bl	800927e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007d86:	2200      	movs	r2, #0
 8007d88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d8c:	4829      	ldr	r0, [pc, #164]	; (8007e34 <main+0x128>)
 8007d8e:	f001 fa76 	bl	800927e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007d92:	2200      	movs	r2, #0
 8007d94:	2104      	movs	r1, #4
 8007d96:	4827      	ldr	r0, [pc, #156]	; (8007e34 <main+0x128>)
 8007d98:	f001 fa71 	bl	800927e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2102      	movs	r1, #2
 8007da0:	4824      	ldr	r0, [pc, #144]	; (8007e34 <main+0x128>)
 8007da2:	f001 fa6c 	bl	800927e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007da6:	2200      	movs	r2, #0
 8007da8:	2101      	movs	r1, #1
 8007daa:	4822      	ldr	r0, [pc, #136]	; (8007e34 <main+0x128>)
 8007dac:	f001 fa67 	bl	800927e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007db0:	2200      	movs	r2, #0
 8007db2:	2120      	movs	r1, #32
 8007db4:	4822      	ldr	r0, [pc, #136]	; (8007e40 <main+0x134>)
 8007db6:	f001 fa62 	bl	800927e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2110      	movs	r1, #16
 8007dbe:	4820      	ldr	r0, [pc, #128]	; (8007e40 <main+0x134>)
 8007dc0:	f001 fa5d 	bl	800927e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2180      	movs	r1, #128	; 0x80
 8007dc8:	481e      	ldr	r0, [pc, #120]	; (8007e44 <main+0x138>)
 8007dca:	f001 fa58 	bl	800927e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007dce:	2200      	movs	r2, #0
 8007dd0:	2140      	movs	r1, #64	; 0x40
 8007dd2:	481c      	ldr	r0, [pc, #112]	; (8007e44 <main+0x138>)
 8007dd4:	f001 fa53 	bl	800927e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2120      	movs	r1, #32
 8007ddc:	4819      	ldr	r0, [pc, #100]	; (8007e44 <main+0x138>)
 8007dde:	f001 fa4e 	bl	800927e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007de2:	2200      	movs	r2, #0
 8007de4:	2110      	movs	r1, #16
 8007de6:	4817      	ldr	r0, [pc, #92]	; (8007e44 <main+0x138>)
 8007de8:	f001 fa49 	bl	800927e <HAL_GPIO_WritePin>

  i2cTest();
 8007dec:	f7f8 ff20 	bl	8000c30 <i2cTest>
  HAL_Delay(100);
 8007df0:	2064      	movs	r0, #100	; 0x64
 8007df2:	f000 fc5d 	bl	80086b0 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007df6:	4a14      	ldr	r2, [pc, #80]	; (8007e48 <main+0x13c>)
 8007df8:	2101      	movs	r1, #1
 8007dfa:	2001      	movs	r0, #1
 8007dfc:	f7ff ff02 	bl	8007c04 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007e00:	4a12      	ldr	r2, [pc, #72]	; (8007e4c <main+0x140>)
 8007e02:	2101      	movs	r1, #1
 8007e04:	2002      	movs	r0, #2
 8007e06:	f7ff fefd 	bl	8007c04 <lcd_print>
  HAL_Delay(1000);
 8007e0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e0e:	f000 fc4f 	bl	80086b0 <HAL_Delay>
  lcd_clear();
 8007e12:	f7ff ff23 	bl	8007c5c <lcd_clear>

  eepromKontrol();
 8007e16:	f7f8 fa0d 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007e1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e1e:	f000 fc47 	bl	80086b0 <HAL_Delay>

  backLightTimer = millis;
 8007e22:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <main+0x144>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a0b      	ldr	r2, [pc, #44]	; (8007e54 <main+0x148>)
 8007e28:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007e2a:	f7ff fc77 	bl	800771c <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007e2e:	f7fe fc83 	bl	8006738 <mainLoop>
 8007e32:	e7fc      	b.n	8007e2e <main+0x122>
 8007e34:	40010c00 	.word	0x40010c00
 8007e38:	200003fc 	.word	0x200003fc
 8007e3c:	200003a8 	.word	0x200003a8
 8007e40:	40011000 	.word	0x40011000
 8007e44:	40010800 	.word	0x40010800
 8007e48:	0800dc14 	.word	0x0800dc14
 8007e4c:	0800dc28 	.word	0x0800dc28
 8007e50:	200001fc 	.word	0x200001fc
 8007e54:	20000218 	.word	0x20000218

08007e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b090      	sub	sp, #64	; 0x40
 8007e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e5e:	f107 0318 	add.w	r3, r7, #24
 8007e62:	2228      	movs	r2, #40	; 0x28
 8007e64:	2100      	movs	r1, #0
 8007e66:	4618      	mov	r0, r3
 8007e68:	f004 fb45 	bl	800c4f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e6c:	1d3b      	adds	r3, r7, #4
 8007e6e:	2200      	movs	r2, #0
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	605a      	str	r2, [r3, #4]
 8007e74:	609a      	str	r2, [r3, #8]
 8007e76:	60da      	str	r2, [r3, #12]
 8007e78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007e84:	2300      	movs	r3, #0
 8007e86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007e96:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e9c:	f107 0318 	add.w	r3, r7, #24
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f002 fc3f 	bl	800a724 <HAL_RCC_OscConfig>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007eac:	f000 f9a2 	bl	80081f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007eb0:	230f      	movs	r3, #15
 8007eb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007ec6:	1d3b      	adds	r3, r7, #4
 8007ec8:	2102      	movs	r1, #2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f002 feac 	bl	800ac28 <HAL_RCC_ClockConfig>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007ed6:	f000 f98d 	bl	80081f4 <Error_Handler>
  }
}
 8007eda:	bf00      	nop
 8007edc:	3740      	adds	r7, #64	; 0x40
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007ee8:	4b16      	ldr	r3, [pc, #88]	; (8007f44 <MX_CAN_Init+0x60>)
 8007eea:	4a17      	ldr	r2, [pc, #92]	; (8007f48 <MX_CAN_Init+0x64>)
 8007eec:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007eee:	4b15      	ldr	r3, [pc, #84]	; (8007f44 <MX_CAN_Init+0x60>)
 8007ef0:	2210      	movs	r2, #16
 8007ef2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007ef4:	4b13      	ldr	r3, [pc, #76]	; (8007f44 <MX_CAN_Init+0x60>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007efa:	4b12      	ldr	r3, [pc, #72]	; (8007f44 <MX_CAN_Init+0x60>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007f00:	4b10      	ldr	r3, [pc, #64]	; (8007f44 <MX_CAN_Init+0x60>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007f06:	4b0f      	ldr	r3, [pc, #60]	; (8007f44 <MX_CAN_Init+0x60>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007f0c:	4b0d      	ldr	r3, [pc, #52]	; (8007f44 <MX_CAN_Init+0x60>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007f12:	4b0c      	ldr	r3, [pc, #48]	; (8007f44 <MX_CAN_Init+0x60>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007f18:	4b0a      	ldr	r3, [pc, #40]	; (8007f44 <MX_CAN_Init+0x60>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007f1e:	4b09      	ldr	r3, [pc, #36]	; (8007f44 <MX_CAN_Init+0x60>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007f24:	4b07      	ldr	r3, [pc, #28]	; (8007f44 <MX_CAN_Init+0x60>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007f2a:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <MX_CAN_Init+0x60>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007f30:	4804      	ldr	r0, [pc, #16]	; (8007f44 <MX_CAN_Init+0x60>)
 8007f32:	f000 fbe1 	bl	80086f8 <HAL_CAN_Init>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007f3c:	f000 f95a 	bl	80081f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007f40:	bf00      	nop
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20000380 	.word	0x20000380
 8007f48:	40006400 	.word	0x40006400

08007f4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007f50:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <MX_I2C1_Init+0x50>)
 8007f52:	4a13      	ldr	r2, [pc, #76]	; (8007fa0 <MX_I2C1_Init+0x54>)
 8007f54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007f56:	4b11      	ldr	r3, [pc, #68]	; (8007f9c <MX_I2C1_Init+0x50>)
 8007f58:	4a12      	ldr	r2, [pc, #72]	; (8007fa4 <MX_I2C1_Init+0x58>)
 8007f5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007f5c:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <MX_I2C1_Init+0x50>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007f62:	4b0e      	ldr	r3, [pc, #56]	; (8007f9c <MX_I2C1_Init+0x50>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f68:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <MX_I2C1_Init+0x50>)
 8007f6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f70:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <MX_I2C1_Init+0x50>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007f76:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <MX_I2C1_Init+0x50>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f7c:	4b07      	ldr	r3, [pc, #28]	; (8007f9c <MX_I2C1_Init+0x50>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f82:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <MX_I2C1_Init+0x50>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007f88:	4804      	ldr	r0, [pc, #16]	; (8007f9c <MX_I2C1_Init+0x50>)
 8007f8a:	f001 f9a9 	bl	80092e0 <HAL_I2C_Init>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007f94:	f000 f92e 	bl	80081f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007f98:	bf00      	nop
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	200003a8 	.word	0x200003a8
 8007fa0:	40005400 	.word	0x40005400
 8007fa4:	00061a80 	.word	0x00061a80

08007fa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007fae:	f107 0308 	add.w	r3, r7, #8
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]
 8007fb6:	605a      	str	r2, [r3, #4]
 8007fb8:	609a      	str	r2, [r3, #8]
 8007fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fbc:	463b      	mov	r3, r7
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007fc4:	4b1f      	ldr	r3, [pc, #124]	; (8008044 <MX_TIM1_Init+0x9c>)
 8007fc6:	4a20      	ldr	r2, [pc, #128]	; (8008048 <MX_TIM1_Init+0xa0>)
 8007fc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007fca:	4b1e      	ldr	r3, [pc, #120]	; (8008044 <MX_TIM1_Init+0x9c>)
 8007fcc:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007fd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fd2:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <MX_TIM1_Init+0x9c>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007fd8:	4b1a      	ldr	r3, [pc, #104]	; (8008044 <MX_TIM1_Init+0x9c>)
 8007fda:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007fde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fe0:	4b18      	ldr	r3, [pc, #96]	; (8008044 <MX_TIM1_Init+0x9c>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007fe6:	4b17      	ldr	r3, [pc, #92]	; (8008044 <MX_TIM1_Init+0x9c>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fec:	4b15      	ldr	r3, [pc, #84]	; (8008044 <MX_TIM1_Init+0x9c>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007ff2:	4814      	ldr	r0, [pc, #80]	; (8008044 <MX_TIM1_Init+0x9c>)
 8007ff4:	f002 ffa6 	bl	800af44 <HAL_TIM_Base_Init>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007ffe:	f000 f8f9 	bl	80081f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008006:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008008:	f107 0308 	add.w	r3, r7, #8
 800800c:	4619      	mov	r1, r3
 800800e:	480d      	ldr	r0, [pc, #52]	; (8008044 <MX_TIM1_Init+0x9c>)
 8008010:	f003 f950 	bl	800b2b4 <HAL_TIM_ConfigClockSource>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800801a:	f000 f8eb 	bl	80081f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800801e:	2300      	movs	r3, #0
 8008020:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008022:	2300      	movs	r3, #0
 8008024:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008026:	463b      	mov	r3, r7
 8008028:	4619      	mov	r1, r3
 800802a:	4806      	ldr	r0, [pc, #24]	; (8008044 <MX_TIM1_Init+0x9c>)
 800802c:	f003 fb3e 	bl	800b6ac <HAL_TIMEx_MasterConfigSynchronization>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008036:	f000 f8dd 	bl	80081f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800803a:	bf00      	nop
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	200003fc 	.word	0x200003fc
 8008048:	40012c00 	.word	0x40012c00

0800804c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008050:	4b11      	ldr	r3, [pc, #68]	; (8008098 <MX_USART1_UART_Init+0x4c>)
 8008052:	4a12      	ldr	r2, [pc, #72]	; (800809c <MX_USART1_UART_Init+0x50>)
 8008054:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008056:	4b10      	ldr	r3, [pc, #64]	; (8008098 <MX_USART1_UART_Init+0x4c>)
 8008058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800805c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800805e:	4b0e      	ldr	r3, [pc, #56]	; (8008098 <MX_USART1_UART_Init+0x4c>)
 8008060:	2200      	movs	r2, #0
 8008062:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008064:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <MX_USART1_UART_Init+0x4c>)
 8008066:	2200      	movs	r2, #0
 8008068:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800806a:	4b0b      	ldr	r3, [pc, #44]	; (8008098 <MX_USART1_UART_Init+0x4c>)
 800806c:	2200      	movs	r2, #0
 800806e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008070:	4b09      	ldr	r3, [pc, #36]	; (8008098 <MX_USART1_UART_Init+0x4c>)
 8008072:	220c      	movs	r2, #12
 8008074:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008076:	4b08      	ldr	r3, [pc, #32]	; (8008098 <MX_USART1_UART_Init+0x4c>)
 8008078:	2200      	movs	r2, #0
 800807a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800807c:	4b06      	ldr	r3, [pc, #24]	; (8008098 <MX_USART1_UART_Init+0x4c>)
 800807e:	2200      	movs	r2, #0
 8008080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008082:	4805      	ldr	r0, [pc, #20]	; (8008098 <MX_USART1_UART_Init+0x4c>)
 8008084:	f003 fb90 	bl	800b7a8 <HAL_UART_Init>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800808e:	f000 f8b1 	bl	80081f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008092:	bf00      	nop
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000444 	.word	0x20000444
 800809c:	40013800 	.word	0x40013800

080080a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080a6:	f107 0310 	add.w	r3, r7, #16
 80080aa:	2200      	movs	r2, #0
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	605a      	str	r2, [r3, #4]
 80080b0:	609a      	str	r2, [r3, #8]
 80080b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80080b4:	4b4b      	ldr	r3, [pc, #300]	; (80081e4 <MX_GPIO_Init+0x144>)
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	4a4a      	ldr	r2, [pc, #296]	; (80081e4 <MX_GPIO_Init+0x144>)
 80080ba:	f043 0310 	orr.w	r3, r3, #16
 80080be:	6193      	str	r3, [r2, #24]
 80080c0:	4b48      	ldr	r3, [pc, #288]	; (80081e4 <MX_GPIO_Init+0x144>)
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	f003 0310 	and.w	r3, r3, #16
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80080cc:	4b45      	ldr	r3, [pc, #276]	; (80081e4 <MX_GPIO_Init+0x144>)
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	4a44      	ldr	r2, [pc, #272]	; (80081e4 <MX_GPIO_Init+0x144>)
 80080d2:	f043 0320 	orr.w	r3, r3, #32
 80080d6:	6193      	str	r3, [r2, #24]
 80080d8:	4b42      	ldr	r3, [pc, #264]	; (80081e4 <MX_GPIO_Init+0x144>)
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	60bb      	str	r3, [r7, #8]
 80080e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80080e4:	4b3f      	ldr	r3, [pc, #252]	; (80081e4 <MX_GPIO_Init+0x144>)
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	4a3e      	ldr	r2, [pc, #248]	; (80081e4 <MX_GPIO_Init+0x144>)
 80080ea:	f043 0304 	orr.w	r3, r3, #4
 80080ee:	6193      	str	r3, [r2, #24]
 80080f0:	4b3c      	ldr	r3, [pc, #240]	; (80081e4 <MX_GPIO_Init+0x144>)
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	607b      	str	r3, [r7, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80080fc:	4b39      	ldr	r3, [pc, #228]	; (80081e4 <MX_GPIO_Init+0x144>)
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	4a38      	ldr	r2, [pc, #224]	; (80081e4 <MX_GPIO_Init+0x144>)
 8008102:	f043 0308 	orr.w	r3, r3, #8
 8008106:	6193      	str	r3, [r2, #24]
 8008108:	4b36      	ldr	r3, [pc, #216]	; (80081e4 <MX_GPIO_Init+0x144>)
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	f003 0308 	and.w	r3, r3, #8
 8008110:	603b      	str	r3, [r7, #0]
 8008112:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008114:	2200      	movs	r2, #0
 8008116:	21f0      	movs	r1, #240	; 0xf0
 8008118:	4833      	ldr	r0, [pc, #204]	; (80081e8 <MX_GPIO_Init+0x148>)
 800811a:	f001 f8b0 	bl	800927e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800811e:	2200      	movs	r2, #0
 8008120:	f241 0130 	movw	r1, #4144	; 0x1030
 8008124:	4831      	ldr	r0, [pc, #196]	; (80081ec <MX_GPIO_Init+0x14c>)
 8008126:	f001 f8aa 	bl	800927e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800812a:	2200      	movs	r2, #0
 800812c:	f640 4107 	movw	r1, #3079	; 0xc07
 8008130:	482f      	ldr	r0, [pc, #188]	; (80081f0 <MX_GPIO_Init+0x150>)
 8008132:	f001 f8a4 	bl	800927e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008136:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800813a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800813c:	2300      	movs	r3, #0
 800813e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008140:	2300      	movs	r3, #0
 8008142:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008144:	f107 0310 	add.w	r3, r7, #16
 8008148:	4619      	mov	r1, r3
 800814a:	4828      	ldr	r0, [pc, #160]	; (80081ec <MX_GPIO_Init+0x14c>)
 800814c:	f000 fe20 	bl	8008d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008150:	f248 130f 	movw	r3, #33039	; 0x810f
 8008154:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008156:	2300      	movs	r3, #0
 8008158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800815a:	2300      	movs	r3, #0
 800815c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800815e:	f107 0310 	add.w	r3, r7, #16
 8008162:	4619      	mov	r1, r3
 8008164:	4820      	ldr	r0, [pc, #128]	; (80081e8 <MX_GPIO_Init+0x148>)
 8008166:	f000 fe13 	bl	8008d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800816a:	23f0      	movs	r3, #240	; 0xf0
 800816c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800816e:	2301      	movs	r3, #1
 8008170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008172:	2300      	movs	r3, #0
 8008174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008176:	2302      	movs	r3, #2
 8008178:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800817a:	f107 0310 	add.w	r3, r7, #16
 800817e:	4619      	mov	r1, r3
 8008180:	4819      	ldr	r0, [pc, #100]	; (80081e8 <MX_GPIO_Init+0x148>)
 8008182:	f000 fe05 	bl	8008d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008186:	f241 0330 	movw	r3, #4144	; 0x1030
 800818a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800818c:	2301      	movs	r3, #1
 800818e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008190:	2300      	movs	r3, #0
 8008192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008194:	2302      	movs	r3, #2
 8008196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008198:	f107 0310 	add.w	r3, r7, #16
 800819c:	4619      	mov	r1, r3
 800819e:	4813      	ldr	r0, [pc, #76]	; (80081ec <MX_GPIO_Init+0x14c>)
 80081a0:	f000 fdf6 	bl	8008d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80081a4:	f640 4307 	movw	r3, #3079	; 0xc07
 80081a8:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081aa:	2301      	movs	r3, #1
 80081ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081b2:	2302      	movs	r3, #2
 80081b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081b6:	f107 0310 	add.w	r3, r7, #16
 80081ba:	4619      	mov	r1, r3
 80081bc:	480c      	ldr	r0, [pc, #48]	; (80081f0 <MX_GPIO_Init+0x150>)
 80081be:	f000 fde7 	bl	8008d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80081c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80081c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081c8:	2300      	movs	r3, #0
 80081ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081d0:	f107 0310 	add.w	r3, r7, #16
 80081d4:	4619      	mov	r1, r3
 80081d6:	4806      	ldr	r0, [pc, #24]	; (80081f0 <MX_GPIO_Init+0x150>)
 80081d8:	f000 fdda 	bl	8008d90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80081dc:	bf00      	nop
 80081de:	3720      	adds	r7, #32
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	40021000 	.word	0x40021000
 80081e8:	40010800 	.word	0x40010800
 80081ec:	40011000 	.word	0x40011000
 80081f0:	40010c00 	.word	0x40010c00

080081f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80081f4:	b480      	push	{r7}
 80081f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80081f8:	bf00      	nop
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bc80      	pop	{r7}
 80081fe:	4770      	bx	lr

08008200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008206:	4b15      	ldr	r3, [pc, #84]	; (800825c <HAL_MspInit+0x5c>)
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	4a14      	ldr	r2, [pc, #80]	; (800825c <HAL_MspInit+0x5c>)
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	6193      	str	r3, [r2, #24]
 8008212:	4b12      	ldr	r3, [pc, #72]	; (800825c <HAL_MspInit+0x5c>)
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	60bb      	str	r3, [r7, #8]
 800821c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800821e:	4b0f      	ldr	r3, [pc, #60]	; (800825c <HAL_MspInit+0x5c>)
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	4a0e      	ldr	r2, [pc, #56]	; (800825c <HAL_MspInit+0x5c>)
 8008224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008228:	61d3      	str	r3, [r2, #28]
 800822a:	4b0c      	ldr	r3, [pc, #48]	; (800825c <HAL_MspInit+0x5c>)
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008232:	607b      	str	r3, [r7, #4]
 8008234:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008236:	4b0a      	ldr	r3, [pc, #40]	; (8008260 <HAL_MspInit+0x60>)
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	4a04      	ldr	r2, [pc, #16]	; (8008260 <HAL_MspInit+0x60>)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008252:	bf00      	nop
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	bc80      	pop	{r7}
 800825a:	4770      	bx	lr
 800825c:	40021000 	.word	0x40021000
 8008260:	40010000 	.word	0x40010000

08008264 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800826c:	f107 0310 	add.w	r3, r7, #16
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	605a      	str	r2, [r3, #4]
 8008276:	609a      	str	r2, [r3, #8]
 8008278:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a1c      	ldr	r2, [pc, #112]	; (80082f0 <HAL_CAN_MspInit+0x8c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d131      	bne.n	80082e8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008284:	4b1b      	ldr	r3, [pc, #108]	; (80082f4 <HAL_CAN_MspInit+0x90>)
 8008286:	69db      	ldr	r3, [r3, #28]
 8008288:	4a1a      	ldr	r2, [pc, #104]	; (80082f4 <HAL_CAN_MspInit+0x90>)
 800828a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800828e:	61d3      	str	r3, [r2, #28]
 8008290:	4b18      	ldr	r3, [pc, #96]	; (80082f4 <HAL_CAN_MspInit+0x90>)
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008298:	60fb      	str	r3, [r7, #12]
 800829a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800829c:	4b15      	ldr	r3, [pc, #84]	; (80082f4 <HAL_CAN_MspInit+0x90>)
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	4a14      	ldr	r2, [pc, #80]	; (80082f4 <HAL_CAN_MspInit+0x90>)
 80082a2:	f043 0304 	orr.w	r3, r3, #4
 80082a6:	6193      	str	r3, [r2, #24]
 80082a8:	4b12      	ldr	r3, [pc, #72]	; (80082f4 <HAL_CAN_MspInit+0x90>)
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	f003 0304 	and.w	r3, r3, #4
 80082b0:	60bb      	str	r3, [r7, #8]
 80082b2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80082b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082ba:	2300      	movs	r3, #0
 80082bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082c2:	f107 0310 	add.w	r3, r7, #16
 80082c6:	4619      	mov	r1, r3
 80082c8:	480b      	ldr	r0, [pc, #44]	; (80082f8 <HAL_CAN_MspInit+0x94>)
 80082ca:	f000 fd61 	bl	8008d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80082ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082d4:	2302      	movs	r3, #2
 80082d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80082d8:	2303      	movs	r3, #3
 80082da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082dc:	f107 0310 	add.w	r3, r7, #16
 80082e0:	4619      	mov	r1, r3
 80082e2:	4805      	ldr	r0, [pc, #20]	; (80082f8 <HAL_CAN_MspInit+0x94>)
 80082e4:	f000 fd54 	bl	8008d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80082e8:	bf00      	nop
 80082ea:	3720      	adds	r7, #32
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	40006400 	.word	0x40006400
 80082f4:	40021000 	.word	0x40021000
 80082f8:	40010800 	.word	0x40010800

080082fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008304:	f107 0310 	add.w	r3, r7, #16
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	605a      	str	r2, [r3, #4]
 800830e:	609a      	str	r2, [r3, #8]
 8008310:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a15      	ldr	r2, [pc, #84]	; (800836c <HAL_I2C_MspInit+0x70>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d123      	bne.n	8008364 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800831c:	4b14      	ldr	r3, [pc, #80]	; (8008370 <HAL_I2C_MspInit+0x74>)
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	4a13      	ldr	r2, [pc, #76]	; (8008370 <HAL_I2C_MspInit+0x74>)
 8008322:	f043 0308 	orr.w	r3, r3, #8
 8008326:	6193      	str	r3, [r2, #24]
 8008328:	4b11      	ldr	r3, [pc, #68]	; (8008370 <HAL_I2C_MspInit+0x74>)
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	f003 0308 	and.w	r3, r3, #8
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008334:	23c0      	movs	r3, #192	; 0xc0
 8008336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008338:	2312      	movs	r3, #18
 800833a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800833c:	2303      	movs	r3, #3
 800833e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008340:	f107 0310 	add.w	r3, r7, #16
 8008344:	4619      	mov	r1, r3
 8008346:	480b      	ldr	r0, [pc, #44]	; (8008374 <HAL_I2C_MspInit+0x78>)
 8008348:	f000 fd22 	bl	8008d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800834c:	4b08      	ldr	r3, [pc, #32]	; (8008370 <HAL_I2C_MspInit+0x74>)
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	4a07      	ldr	r2, [pc, #28]	; (8008370 <HAL_I2C_MspInit+0x74>)
 8008352:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008356:	61d3      	str	r3, [r2, #28]
 8008358:	4b05      	ldr	r3, [pc, #20]	; (8008370 <HAL_I2C_MspInit+0x74>)
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008360:	60bb      	str	r3, [r7, #8]
 8008362:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008364:	bf00      	nop
 8008366:	3720      	adds	r7, #32
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	40005400 	.word	0x40005400
 8008370:	40021000 	.word	0x40021000
 8008374:	40010c00 	.word	0x40010c00

08008378 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a0a      	ldr	r2, [pc, #40]	; (80083b0 <HAL_I2C_MspDeInit+0x38>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d10d      	bne.n	80083a6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800838a:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <HAL_I2C_MspDeInit+0x3c>)
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	4a09      	ldr	r2, [pc, #36]	; (80083b4 <HAL_I2C_MspDeInit+0x3c>)
 8008390:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008394:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008396:	2140      	movs	r1, #64	; 0x40
 8008398:	4807      	ldr	r0, [pc, #28]	; (80083b8 <HAL_I2C_MspDeInit+0x40>)
 800839a:	f000 fe8d 	bl	80090b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800839e:	2180      	movs	r1, #128	; 0x80
 80083a0:	4805      	ldr	r0, [pc, #20]	; (80083b8 <HAL_I2C_MspDeInit+0x40>)
 80083a2:	f000 fe89 	bl	80090b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80083a6:	bf00      	nop
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	40005400 	.word	0x40005400
 80083b4:	40021000 	.word	0x40021000
 80083b8:	40010c00 	.word	0x40010c00

080083bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a0d      	ldr	r2, [pc, #52]	; (8008400 <HAL_TIM_Base_MspInit+0x44>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d113      	bne.n	80083f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80083ce:	4b0d      	ldr	r3, [pc, #52]	; (8008404 <HAL_TIM_Base_MspInit+0x48>)
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	4a0c      	ldr	r2, [pc, #48]	; (8008404 <HAL_TIM_Base_MspInit+0x48>)
 80083d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80083d8:	6193      	str	r3, [r2, #24]
 80083da:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <HAL_TIM_Base_MspInit+0x48>)
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80083e6:	2200      	movs	r2, #0
 80083e8:	2100      	movs	r1, #0
 80083ea:	2019      	movs	r0, #25
 80083ec:	f000 fb57 	bl	8008a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80083f0:	2019      	movs	r0, #25
 80083f2:	f000 fb70 	bl	8008ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80083f6:	bf00      	nop
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	40012c00 	.word	0x40012c00
 8008404:	40021000 	.word	0x40021000

08008408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008410:	f107 0310 	add.w	r3, r7, #16
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	605a      	str	r2, [r3, #4]
 800841a:	609a      	str	r2, [r3, #8]
 800841c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a20      	ldr	r2, [pc, #128]	; (80084a4 <HAL_UART_MspInit+0x9c>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d139      	bne.n	800849c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008428:	4b1f      	ldr	r3, [pc, #124]	; (80084a8 <HAL_UART_MspInit+0xa0>)
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	4a1e      	ldr	r2, [pc, #120]	; (80084a8 <HAL_UART_MspInit+0xa0>)
 800842e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008432:	6193      	str	r3, [r2, #24]
 8008434:	4b1c      	ldr	r3, [pc, #112]	; (80084a8 <HAL_UART_MspInit+0xa0>)
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008440:	4b19      	ldr	r3, [pc, #100]	; (80084a8 <HAL_UART_MspInit+0xa0>)
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	4a18      	ldr	r2, [pc, #96]	; (80084a8 <HAL_UART_MspInit+0xa0>)
 8008446:	f043 0304 	orr.w	r3, r3, #4
 800844a:	6193      	str	r3, [r2, #24]
 800844c:	4b16      	ldr	r3, [pc, #88]	; (80084a8 <HAL_UART_MspInit+0xa0>)
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	f003 0304 	and.w	r3, r3, #4
 8008454:	60bb      	str	r3, [r7, #8]
 8008456:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800845c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800845e:	2302      	movs	r3, #2
 8008460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008462:	2303      	movs	r3, #3
 8008464:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008466:	f107 0310 	add.w	r3, r7, #16
 800846a:	4619      	mov	r1, r3
 800846c:	480f      	ldr	r0, [pc, #60]	; (80084ac <HAL_UART_MspInit+0xa4>)
 800846e:	f000 fc8f 	bl	8008d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008478:	2300      	movs	r3, #0
 800847a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800847c:	2300      	movs	r3, #0
 800847e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008480:	f107 0310 	add.w	r3, r7, #16
 8008484:	4619      	mov	r1, r3
 8008486:	4809      	ldr	r0, [pc, #36]	; (80084ac <HAL_UART_MspInit+0xa4>)
 8008488:	f000 fc82 	bl	8008d90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800848c:	2200      	movs	r2, #0
 800848e:	2100      	movs	r1, #0
 8008490:	2025      	movs	r0, #37	; 0x25
 8008492:	f000 fb04 	bl	8008a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008496:	2025      	movs	r0, #37	; 0x25
 8008498:	f000 fb1d 	bl	8008ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800849c:	bf00      	nop
 800849e:	3720      	adds	r7, #32
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	40013800 	.word	0x40013800
 80084a8:	40021000 	.word	0x40021000
 80084ac:	40010800 	.word	0x40010800

080084b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80084b0:	b480      	push	{r7}
 80084b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80084b4:	e7fe      	b.n	80084b4 <NMI_Handler+0x4>

080084b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80084b6:	b480      	push	{r7}
 80084b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80084ba:	e7fe      	b.n	80084ba <HardFault_Handler+0x4>

080084bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80084bc:	b480      	push	{r7}
 80084be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80084c0:	e7fe      	b.n	80084c0 <MemManage_Handler+0x4>

080084c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80084c2:	b480      	push	{r7}
 80084c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80084c6:	e7fe      	b.n	80084c6 <BusFault_Handler+0x4>

080084c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80084c8:	b480      	push	{r7}
 80084ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80084cc:	e7fe      	b.n	80084cc <UsageFault_Handler+0x4>

080084ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80084ce:	b480      	push	{r7}
 80084d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80084d2:	bf00      	nop
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bc80      	pop	{r7}
 80084d8:	4770      	bx	lr

080084da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80084da:	b480      	push	{r7}
 80084dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80084de:	bf00      	nop
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bc80      	pop	{r7}
 80084e4:	4770      	bx	lr

080084e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80084e6:	b480      	push	{r7}
 80084e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80084ea:	bf00      	nop
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bc80      	pop	{r7}
 80084f0:	4770      	bx	lr

080084f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80084f6:	f000 f8bf 	bl	8008678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80084fa:	bf00      	nop
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008504:	4802      	ldr	r0, [pc, #8]	; (8008510 <TIM1_UP_IRQHandler+0x10>)
 8008506:	f002 fdcd 	bl	800b0a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800850a:	bf00      	nop
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	200003fc 	.word	0x200003fc

08008514 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008518:	4802      	ldr	r0, [pc, #8]	; (8008524 <USART1_IRQHandler+0x10>)
 800851a:	f003 f9cb 	bl	800b8b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800851e:	bf00      	nop
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20000444 	.word	0x20000444

08008528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008530:	4a14      	ldr	r2, [pc, #80]	; (8008584 <_sbrk+0x5c>)
 8008532:	4b15      	ldr	r3, [pc, #84]	; (8008588 <_sbrk+0x60>)
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800853c:	4b13      	ldr	r3, [pc, #76]	; (800858c <_sbrk+0x64>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d102      	bne.n	800854a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008544:	4b11      	ldr	r3, [pc, #68]	; (800858c <_sbrk+0x64>)
 8008546:	4a12      	ldr	r2, [pc, #72]	; (8008590 <_sbrk+0x68>)
 8008548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800854a:	4b10      	ldr	r3, [pc, #64]	; (800858c <_sbrk+0x64>)
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4413      	add	r3, r2
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	429a      	cmp	r2, r3
 8008556:	d207      	bcs.n	8008568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008558:	f003 ffe6 	bl	800c528 <__errno>
 800855c:	4603      	mov	r3, r0
 800855e:	220c      	movs	r2, #12
 8008560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008566:	e009      	b.n	800857c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008568:	4b08      	ldr	r3, [pc, #32]	; (800858c <_sbrk+0x64>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800856e:	4b07      	ldr	r3, [pc, #28]	; (800858c <_sbrk+0x64>)
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4413      	add	r3, r2
 8008576:	4a05      	ldr	r2, [pc, #20]	; (800858c <_sbrk+0x64>)
 8008578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800857a:	68fb      	ldr	r3, [r7, #12]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3718      	adds	r7, #24
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	2000c000 	.word	0x2000c000
 8008588:	00000400 	.word	0x00000400
 800858c:	2000048c 	.word	0x2000048c
 8008590:	200005e0 	.word	0x200005e0

08008594 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008594:	b480      	push	{r7}
 8008596:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008598:	bf00      	nop
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr

080085a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80085a0:	480c      	ldr	r0, [pc, #48]	; (80085d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80085a2:	490d      	ldr	r1, [pc, #52]	; (80085d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80085a4:	4a0d      	ldr	r2, [pc, #52]	; (80085dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80085a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80085a8:	e002      	b.n	80085b0 <LoopCopyDataInit>

080085aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80085aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80085ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80085ae:	3304      	adds	r3, #4

080085b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80085b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80085b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80085b4:	d3f9      	bcc.n	80085aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80085b6:	4a0a      	ldr	r2, [pc, #40]	; (80085e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80085b8:	4c0a      	ldr	r4, [pc, #40]	; (80085e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80085ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80085bc:	e001      	b.n	80085c2 <LoopFillZerobss>

080085be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80085be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80085c0:	3204      	adds	r2, #4

080085c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80085c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80085c4:	d3fb      	bcc.n	80085be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80085c6:	f7ff ffe5 	bl	8008594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80085ca:	f003 ffb3 	bl	800c534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80085ce:	f7ff fb9d 	bl	8007d0c <main>
  bx lr
 80085d2:	4770      	bx	lr
  ldr r0, =_sdata
 80085d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80085d8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80085dc:	0800dcc8 	.word	0x0800dcc8
  ldr r2, =_sbss
 80085e0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80085e4:	200005dc 	.word	0x200005dc

080085e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80085e8:	e7fe      	b.n	80085e8 <ADC1_2_IRQHandler>
	...

080085ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80085f0:	4b08      	ldr	r3, [pc, #32]	; (8008614 <HAL_Init+0x28>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a07      	ldr	r2, [pc, #28]	; (8008614 <HAL_Init+0x28>)
 80085f6:	f043 0310 	orr.w	r3, r3, #16
 80085fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80085fc:	2003      	movs	r0, #3
 80085fe:	f000 fa43 	bl	8008a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008602:	200f      	movs	r0, #15
 8008604:	f000 f808 	bl	8008618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008608:	f7ff fdfa 	bl	8008200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	40022000 	.word	0x40022000

08008618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008620:	4b12      	ldr	r3, [pc, #72]	; (800866c <HAL_InitTick+0x54>)
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	4b12      	ldr	r3, [pc, #72]	; (8008670 <HAL_InitTick+0x58>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	4619      	mov	r1, r3
 800862a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800862e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008632:	fbb2 f3f3 	udiv	r3, r2, r3
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fa5b 	bl	8008af2 <HAL_SYSTICK_Config>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e00e      	b.n	8008664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b0f      	cmp	r3, #15
 800864a:	d80a      	bhi.n	8008662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800864c:	2200      	movs	r2, #0
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008654:	f000 fa23 	bl	8008a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008658:	4a06      	ldr	r2, [pc, #24]	; (8008674 <HAL_InitTick+0x5c>)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	e000      	b.n	8008664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	200000a0 	.word	0x200000a0
 8008670:	200000a8 	.word	0x200000a8
 8008674:	200000a4 	.word	0x200000a4

08008678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800867c:	4b05      	ldr	r3, [pc, #20]	; (8008694 <HAL_IncTick+0x1c>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	461a      	mov	r2, r3
 8008682:	4b05      	ldr	r3, [pc, #20]	; (8008698 <HAL_IncTick+0x20>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4413      	add	r3, r2
 8008688:	4a03      	ldr	r2, [pc, #12]	; (8008698 <HAL_IncTick+0x20>)
 800868a:	6013      	str	r3, [r2, #0]
}
 800868c:	bf00      	nop
 800868e:	46bd      	mov	sp, r7
 8008690:	bc80      	pop	{r7}
 8008692:	4770      	bx	lr
 8008694:	200000a8 	.word	0x200000a8
 8008698:	20000490 	.word	0x20000490

0800869c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0
  return uwTick;
 80086a0:	4b02      	ldr	r3, [pc, #8]	; (80086ac <HAL_GetTick+0x10>)
 80086a2:	681b      	ldr	r3, [r3, #0]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bc80      	pop	{r7}
 80086aa:	4770      	bx	lr
 80086ac:	20000490 	.word	0x20000490

080086b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80086b8:	f7ff fff0 	bl	800869c <HAL_GetTick>
 80086bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086c8:	d005      	beq.n	80086d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80086ca:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <HAL_Delay+0x44>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4413      	add	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80086d6:	bf00      	nop
 80086d8:	f7ff ffe0 	bl	800869c <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d8f7      	bhi.n	80086d8 <HAL_Delay+0x28>
  {
  }
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	200000a8 	.word	0x200000a8

080086f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e0ed      	b.n	80088e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d102      	bne.n	800871c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7ff fda4 	bl	8008264 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f042 0201 	orr.w	r2, r2, #1
 800872a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800872c:	f7ff ffb6 	bl	800869c <HAL_GetTick>
 8008730:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008732:	e012      	b.n	800875a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008734:	f7ff ffb2 	bl	800869c <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	2b0a      	cmp	r3, #10
 8008740:	d90b      	bls.n	800875a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008746:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2205      	movs	r2, #5
 8008752:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e0c5      	b.n	80088e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0e5      	beq.n	8008734 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f022 0202 	bic.w	r2, r2, #2
 8008776:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008778:	f7ff ff90 	bl	800869c <HAL_GetTick>
 800877c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800877e:	e012      	b.n	80087a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008780:	f7ff ff8c 	bl	800869c <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	2b0a      	cmp	r3, #10
 800878c:	d90b      	bls.n	80087a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2205      	movs	r2, #5
 800879e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e09f      	b.n	80088e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1e5      	bne.n	8008780 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	7e1b      	ldrb	r3, [r3, #24]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d108      	bne.n	80087ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	e007      	b.n	80087de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	7e5b      	ldrb	r3, [r3, #25]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d108      	bne.n	80087f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	e007      	b.n	8008808 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008806:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	7e9b      	ldrb	r3, [r3, #26]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d108      	bne.n	8008822 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f042 0220 	orr.w	r2, r2, #32
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	e007      	b.n	8008832 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0220 	bic.w	r2, r2, #32
 8008830:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	7edb      	ldrb	r3, [r3, #27]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d108      	bne.n	800884c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f022 0210 	bic.w	r2, r2, #16
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	e007      	b.n	800885c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f042 0210 	orr.w	r2, r2, #16
 800885a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	7f1b      	ldrb	r3, [r3, #28]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d108      	bne.n	8008876 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f042 0208 	orr.w	r2, r2, #8
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	e007      	b.n	8008886 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f022 0208 	bic.w	r2, r2, #8
 8008884:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	7f5b      	ldrb	r3, [r3, #29]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d108      	bne.n	80088a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f042 0204 	orr.w	r2, r2, #4
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	e007      	b.n	80088b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 0204 	bic.w	r2, r2, #4
 80088ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	431a      	orrs	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	431a      	orrs	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	ea42 0103 	orr.w	r1, r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	1e5a      	subs	r2, r3, #1
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <__NVIC_SetPriorityGrouping>:
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008900:	4b0c      	ldr	r3, [pc, #48]	; (8008934 <__NVIC_SetPriorityGrouping+0x44>)
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800890c:	4013      	ands	r3, r2
 800890e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800891c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008922:	4a04      	ldr	r2, [pc, #16]	; (8008934 <__NVIC_SetPriorityGrouping+0x44>)
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	60d3      	str	r3, [r2, #12]
}
 8008928:	bf00      	nop
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	bc80      	pop	{r7}
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	e000ed00 	.word	0xe000ed00

08008938 <__NVIC_GetPriorityGrouping>:
{
 8008938:	b480      	push	{r7}
 800893a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800893c:	4b04      	ldr	r3, [pc, #16]	; (8008950 <__NVIC_GetPriorityGrouping+0x18>)
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	0a1b      	lsrs	r3, r3, #8
 8008942:	f003 0307 	and.w	r3, r3, #7
}
 8008946:	4618      	mov	r0, r3
 8008948:	46bd      	mov	sp, r7
 800894a:	bc80      	pop	{r7}
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	e000ed00 	.word	0xe000ed00

08008954 <__NVIC_EnableIRQ>:
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	4603      	mov	r3, r0
 800895c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800895e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008962:	2b00      	cmp	r3, #0
 8008964:	db0b      	blt.n	800897e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	f003 021f 	and.w	r2, r3, #31
 800896c:	4906      	ldr	r1, [pc, #24]	; (8008988 <__NVIC_EnableIRQ+0x34>)
 800896e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008972:	095b      	lsrs	r3, r3, #5
 8008974:	2001      	movs	r0, #1
 8008976:	fa00 f202 	lsl.w	r2, r0, r2
 800897a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	bc80      	pop	{r7}
 8008986:	4770      	bx	lr
 8008988:	e000e100 	.word	0xe000e100

0800898c <__NVIC_SetPriority>:
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	6039      	str	r1, [r7, #0]
 8008996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800899c:	2b00      	cmp	r3, #0
 800899e:	db0a      	blt.n	80089b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	490c      	ldr	r1, [pc, #48]	; (80089d8 <__NVIC_SetPriority+0x4c>)
 80089a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089aa:	0112      	lsls	r2, r2, #4
 80089ac:	b2d2      	uxtb	r2, r2
 80089ae:	440b      	add	r3, r1
 80089b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80089b4:	e00a      	b.n	80089cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	4908      	ldr	r1, [pc, #32]	; (80089dc <__NVIC_SetPriority+0x50>)
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	f003 030f 	and.w	r3, r3, #15
 80089c2:	3b04      	subs	r3, #4
 80089c4:	0112      	lsls	r2, r2, #4
 80089c6:	b2d2      	uxtb	r2, r2
 80089c8:	440b      	add	r3, r1
 80089ca:	761a      	strb	r2, [r3, #24]
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bc80      	pop	{r7}
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	e000e100 	.word	0xe000e100
 80089dc:	e000ed00 	.word	0xe000ed00

080089e0 <NVIC_EncodePriority>:
{
 80089e0:	b480      	push	{r7}
 80089e2:	b089      	sub	sp, #36	; 0x24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f003 0307 	and.w	r3, r3, #7
 80089f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	f1c3 0307 	rsb	r3, r3, #7
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	bf28      	it	cs
 80089fe:	2304      	movcs	r3, #4
 8008a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	3304      	adds	r3, #4
 8008a06:	2b06      	cmp	r3, #6
 8008a08:	d902      	bls.n	8008a10 <NVIC_EncodePriority+0x30>
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	3b03      	subs	r3, #3
 8008a0e:	e000      	b.n	8008a12 <NVIC_EncodePriority+0x32>
 8008a10:	2300      	movs	r3, #0
 8008a12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1e:	43da      	mvns	r2, r3
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	401a      	ands	r2, r3
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a32:	43d9      	mvns	r1, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a38:	4313      	orrs	r3, r2
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3724      	adds	r7, #36	; 0x24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bc80      	pop	{r7}
 8008a42:	4770      	bx	lr

08008a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a54:	d301      	bcc.n	8008a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a56:	2301      	movs	r3, #1
 8008a58:	e00f      	b.n	8008a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a5a:	4a0a      	ldr	r2, [pc, #40]	; (8008a84 <SysTick_Config+0x40>)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a62:	210f      	movs	r1, #15
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a68:	f7ff ff90 	bl	800898c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a6c:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <SysTick_Config+0x40>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a72:	4b04      	ldr	r3, [pc, #16]	; (8008a84 <SysTick_Config+0x40>)
 8008a74:	2207      	movs	r2, #7
 8008a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	e000e010 	.word	0xe000e010

08008a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7ff ff2d 	bl	80088f0 <__NVIC_SetPriorityGrouping>
}
 8008a96:	bf00      	nop
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b086      	sub	sp, #24
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	60b9      	str	r1, [r7, #8]
 8008aa8:	607a      	str	r2, [r7, #4]
 8008aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ab0:	f7ff ff42 	bl	8008938 <__NVIC_GetPriorityGrouping>
 8008ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	68b9      	ldr	r1, [r7, #8]
 8008aba:	6978      	ldr	r0, [r7, #20]
 8008abc:	f7ff ff90 	bl	80089e0 <NVIC_EncodePriority>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7ff ff5f 	bl	800898c <__NVIC_SetPriority>
}
 8008ace:	bf00      	nop
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b082      	sub	sp, #8
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	4603      	mov	r3, r0
 8008ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff ff35 	bl	8008954 <__NVIC_EnableIRQ>
}
 8008aea:	bf00      	nop
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7ff ffa2 	bl	8008a44 <SysTick_Config>
 8008b00:	4603      	mov	r3, r0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b085      	sub	sp, #20
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d008      	beq.n	8008b34 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2204      	movs	r2, #4
 8008b26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e020      	b.n	8008b76 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f022 020e 	bic.w	r2, r2, #14
 8008b42:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f022 0201 	bic.w	r2, r2, #1
 8008b52:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8008b62:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bc80      	pop	{r7}
 8008b7e:	4770      	bx	lr

08008b80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d005      	beq.n	8008ba4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2204      	movs	r2, #4
 8008b9c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	73fb      	strb	r3, [r7, #15]
 8008ba2:	e0d6      	b.n	8008d52 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f022 020e 	bic.w	r2, r2, #14
 8008bb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f022 0201 	bic.w	r2, r2, #1
 8008bc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	4b64      	ldr	r3, [pc, #400]	; (8008d5c <HAL_DMA_Abort_IT+0x1dc>)
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d958      	bls.n	8008c82 <HAL_DMA_Abort_IT+0x102>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a62      	ldr	r2, [pc, #392]	; (8008d60 <HAL_DMA_Abort_IT+0x1e0>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d04f      	beq.n	8008c7a <HAL_DMA_Abort_IT+0xfa>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a61      	ldr	r2, [pc, #388]	; (8008d64 <HAL_DMA_Abort_IT+0x1e4>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d048      	beq.n	8008c76 <HAL_DMA_Abort_IT+0xf6>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a5f      	ldr	r2, [pc, #380]	; (8008d68 <HAL_DMA_Abort_IT+0x1e8>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d040      	beq.n	8008c70 <HAL_DMA_Abort_IT+0xf0>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a5e      	ldr	r2, [pc, #376]	; (8008d6c <HAL_DMA_Abort_IT+0x1ec>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d038      	beq.n	8008c6a <HAL_DMA_Abort_IT+0xea>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a5c      	ldr	r2, [pc, #368]	; (8008d70 <HAL_DMA_Abort_IT+0x1f0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d030      	beq.n	8008c64 <HAL_DMA_Abort_IT+0xe4>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a5b      	ldr	r2, [pc, #364]	; (8008d74 <HAL_DMA_Abort_IT+0x1f4>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d028      	beq.n	8008c5e <HAL_DMA_Abort_IT+0xde>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a52      	ldr	r2, [pc, #328]	; (8008d5c <HAL_DMA_Abort_IT+0x1dc>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d020      	beq.n	8008c58 <HAL_DMA_Abort_IT+0xd8>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a57      	ldr	r2, [pc, #348]	; (8008d78 <HAL_DMA_Abort_IT+0x1f8>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d019      	beq.n	8008c54 <HAL_DMA_Abort_IT+0xd4>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a55      	ldr	r2, [pc, #340]	; (8008d7c <HAL_DMA_Abort_IT+0x1fc>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d012      	beq.n	8008c50 <HAL_DMA_Abort_IT+0xd0>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a54      	ldr	r2, [pc, #336]	; (8008d80 <HAL_DMA_Abort_IT+0x200>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d00a      	beq.n	8008c4a <HAL_DMA_Abort_IT+0xca>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a52      	ldr	r2, [pc, #328]	; (8008d84 <HAL_DMA_Abort_IT+0x204>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d102      	bne.n	8008c44 <HAL_DMA_Abort_IT+0xc4>
 8008c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c42:	e01b      	b.n	8008c7c <HAL_DMA_Abort_IT+0xfc>
 8008c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c48:	e018      	b.n	8008c7c <HAL_DMA_Abort_IT+0xfc>
 8008c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c4e:	e015      	b.n	8008c7c <HAL_DMA_Abort_IT+0xfc>
 8008c50:	2310      	movs	r3, #16
 8008c52:	e013      	b.n	8008c7c <HAL_DMA_Abort_IT+0xfc>
 8008c54:	2301      	movs	r3, #1
 8008c56:	e011      	b.n	8008c7c <HAL_DMA_Abort_IT+0xfc>
 8008c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c5c:	e00e      	b.n	8008c7c <HAL_DMA_Abort_IT+0xfc>
 8008c5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c62:	e00b      	b.n	8008c7c <HAL_DMA_Abort_IT+0xfc>
 8008c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c68:	e008      	b.n	8008c7c <HAL_DMA_Abort_IT+0xfc>
 8008c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c6e:	e005      	b.n	8008c7c <HAL_DMA_Abort_IT+0xfc>
 8008c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c74:	e002      	b.n	8008c7c <HAL_DMA_Abort_IT+0xfc>
 8008c76:	2310      	movs	r3, #16
 8008c78:	e000      	b.n	8008c7c <HAL_DMA_Abort_IT+0xfc>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	4a42      	ldr	r2, [pc, #264]	; (8008d88 <HAL_DMA_Abort_IT+0x208>)
 8008c7e:	6053      	str	r3, [r2, #4]
 8008c80:	e057      	b.n	8008d32 <HAL_DMA_Abort_IT+0x1b2>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a36      	ldr	r2, [pc, #216]	; (8008d60 <HAL_DMA_Abort_IT+0x1e0>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d04f      	beq.n	8008d2c <HAL_DMA_Abort_IT+0x1ac>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a34      	ldr	r2, [pc, #208]	; (8008d64 <HAL_DMA_Abort_IT+0x1e4>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d048      	beq.n	8008d28 <HAL_DMA_Abort_IT+0x1a8>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a33      	ldr	r2, [pc, #204]	; (8008d68 <HAL_DMA_Abort_IT+0x1e8>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d040      	beq.n	8008d22 <HAL_DMA_Abort_IT+0x1a2>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a31      	ldr	r2, [pc, #196]	; (8008d6c <HAL_DMA_Abort_IT+0x1ec>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d038      	beq.n	8008d1c <HAL_DMA_Abort_IT+0x19c>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a30      	ldr	r2, [pc, #192]	; (8008d70 <HAL_DMA_Abort_IT+0x1f0>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d030      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x196>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a2e      	ldr	r2, [pc, #184]	; (8008d74 <HAL_DMA_Abort_IT+0x1f4>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d028      	beq.n	8008d10 <HAL_DMA_Abort_IT+0x190>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a26      	ldr	r2, [pc, #152]	; (8008d5c <HAL_DMA_Abort_IT+0x1dc>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d020      	beq.n	8008d0a <HAL_DMA_Abort_IT+0x18a>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a2a      	ldr	r2, [pc, #168]	; (8008d78 <HAL_DMA_Abort_IT+0x1f8>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d019      	beq.n	8008d06 <HAL_DMA_Abort_IT+0x186>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a29      	ldr	r2, [pc, #164]	; (8008d7c <HAL_DMA_Abort_IT+0x1fc>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d012      	beq.n	8008d02 <HAL_DMA_Abort_IT+0x182>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a27      	ldr	r2, [pc, #156]	; (8008d80 <HAL_DMA_Abort_IT+0x200>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d00a      	beq.n	8008cfc <HAL_DMA_Abort_IT+0x17c>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a26      	ldr	r2, [pc, #152]	; (8008d84 <HAL_DMA_Abort_IT+0x204>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d102      	bne.n	8008cf6 <HAL_DMA_Abort_IT+0x176>
 8008cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cf4:	e01b      	b.n	8008d2e <HAL_DMA_Abort_IT+0x1ae>
 8008cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cfa:	e018      	b.n	8008d2e <HAL_DMA_Abort_IT+0x1ae>
 8008cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d00:	e015      	b.n	8008d2e <HAL_DMA_Abort_IT+0x1ae>
 8008d02:	2310      	movs	r3, #16
 8008d04:	e013      	b.n	8008d2e <HAL_DMA_Abort_IT+0x1ae>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e011      	b.n	8008d2e <HAL_DMA_Abort_IT+0x1ae>
 8008d0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d0e:	e00e      	b.n	8008d2e <HAL_DMA_Abort_IT+0x1ae>
 8008d10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d14:	e00b      	b.n	8008d2e <HAL_DMA_Abort_IT+0x1ae>
 8008d16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d1a:	e008      	b.n	8008d2e <HAL_DMA_Abort_IT+0x1ae>
 8008d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d20:	e005      	b.n	8008d2e <HAL_DMA_Abort_IT+0x1ae>
 8008d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d26:	e002      	b.n	8008d2e <HAL_DMA_Abort_IT+0x1ae>
 8008d28:	2310      	movs	r3, #16
 8008d2a:	e000      	b.n	8008d2e <HAL_DMA_Abort_IT+0x1ae>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	4a17      	ldr	r2, [pc, #92]	; (8008d8c <HAL_DMA_Abort_IT+0x20c>)
 8008d30:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	4798      	blx	r3
    } 
  }
  return status;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	40020080 	.word	0x40020080
 8008d60:	40020008 	.word	0x40020008
 8008d64:	4002001c 	.word	0x4002001c
 8008d68:	40020030 	.word	0x40020030
 8008d6c:	40020044 	.word	0x40020044
 8008d70:	40020058 	.word	0x40020058
 8008d74:	4002006c 	.word	0x4002006c
 8008d78:	40020408 	.word	0x40020408
 8008d7c:	4002041c 	.word	0x4002041c
 8008d80:	40020430 	.word	0x40020430
 8008d84:	40020444 	.word	0x40020444
 8008d88:	40020400 	.word	0x40020400
 8008d8c:	40020000 	.word	0x40020000

08008d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b08b      	sub	sp, #44	; 0x2c
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008da2:	e179      	b.n	8009098 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008da4:	2201      	movs	r2, #1
 8008da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	69fa      	ldr	r2, [r7, #28]
 8008db4:	4013      	ands	r3, r2
 8008db6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008db8:	69ba      	ldr	r2, [r7, #24]
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	f040 8168 	bne.w	8009092 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	4a96      	ldr	r2, [pc, #600]	; (8009020 <HAL_GPIO_Init+0x290>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d05e      	beq.n	8008e8a <HAL_GPIO_Init+0xfa>
 8008dcc:	4a94      	ldr	r2, [pc, #592]	; (8009020 <HAL_GPIO_Init+0x290>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d875      	bhi.n	8008ebe <HAL_GPIO_Init+0x12e>
 8008dd2:	4a94      	ldr	r2, [pc, #592]	; (8009024 <HAL_GPIO_Init+0x294>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d058      	beq.n	8008e8a <HAL_GPIO_Init+0xfa>
 8008dd8:	4a92      	ldr	r2, [pc, #584]	; (8009024 <HAL_GPIO_Init+0x294>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d86f      	bhi.n	8008ebe <HAL_GPIO_Init+0x12e>
 8008dde:	4a92      	ldr	r2, [pc, #584]	; (8009028 <HAL_GPIO_Init+0x298>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d052      	beq.n	8008e8a <HAL_GPIO_Init+0xfa>
 8008de4:	4a90      	ldr	r2, [pc, #576]	; (8009028 <HAL_GPIO_Init+0x298>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d869      	bhi.n	8008ebe <HAL_GPIO_Init+0x12e>
 8008dea:	4a90      	ldr	r2, [pc, #576]	; (800902c <HAL_GPIO_Init+0x29c>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d04c      	beq.n	8008e8a <HAL_GPIO_Init+0xfa>
 8008df0:	4a8e      	ldr	r2, [pc, #568]	; (800902c <HAL_GPIO_Init+0x29c>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d863      	bhi.n	8008ebe <HAL_GPIO_Init+0x12e>
 8008df6:	4a8e      	ldr	r2, [pc, #568]	; (8009030 <HAL_GPIO_Init+0x2a0>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d046      	beq.n	8008e8a <HAL_GPIO_Init+0xfa>
 8008dfc:	4a8c      	ldr	r2, [pc, #560]	; (8009030 <HAL_GPIO_Init+0x2a0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d85d      	bhi.n	8008ebe <HAL_GPIO_Init+0x12e>
 8008e02:	2b12      	cmp	r3, #18
 8008e04:	d82a      	bhi.n	8008e5c <HAL_GPIO_Init+0xcc>
 8008e06:	2b12      	cmp	r3, #18
 8008e08:	d859      	bhi.n	8008ebe <HAL_GPIO_Init+0x12e>
 8008e0a:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <HAL_GPIO_Init+0x80>)
 8008e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e10:	08008e8b 	.word	0x08008e8b
 8008e14:	08008e65 	.word	0x08008e65
 8008e18:	08008e77 	.word	0x08008e77
 8008e1c:	08008eb9 	.word	0x08008eb9
 8008e20:	08008ebf 	.word	0x08008ebf
 8008e24:	08008ebf 	.word	0x08008ebf
 8008e28:	08008ebf 	.word	0x08008ebf
 8008e2c:	08008ebf 	.word	0x08008ebf
 8008e30:	08008ebf 	.word	0x08008ebf
 8008e34:	08008ebf 	.word	0x08008ebf
 8008e38:	08008ebf 	.word	0x08008ebf
 8008e3c:	08008ebf 	.word	0x08008ebf
 8008e40:	08008ebf 	.word	0x08008ebf
 8008e44:	08008ebf 	.word	0x08008ebf
 8008e48:	08008ebf 	.word	0x08008ebf
 8008e4c:	08008ebf 	.word	0x08008ebf
 8008e50:	08008ebf 	.word	0x08008ebf
 8008e54:	08008e6d 	.word	0x08008e6d
 8008e58:	08008e81 	.word	0x08008e81
 8008e5c:	4a75      	ldr	r2, [pc, #468]	; (8009034 <HAL_GPIO_Init+0x2a4>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d013      	beq.n	8008e8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008e62:	e02c      	b.n	8008ebe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	623b      	str	r3, [r7, #32]
          break;
 8008e6a:	e029      	b.n	8008ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	3304      	adds	r3, #4
 8008e72:	623b      	str	r3, [r7, #32]
          break;
 8008e74:	e024      	b.n	8008ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	3308      	adds	r3, #8
 8008e7c:	623b      	str	r3, [r7, #32]
          break;
 8008e7e:	e01f      	b.n	8008ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	330c      	adds	r3, #12
 8008e86:	623b      	str	r3, [r7, #32]
          break;
 8008e88:	e01a      	b.n	8008ec0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d102      	bne.n	8008e98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008e92:	2304      	movs	r3, #4
 8008e94:	623b      	str	r3, [r7, #32]
          break;
 8008e96:	e013      	b.n	8008ec0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d105      	bne.n	8008eac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008ea0:	2308      	movs	r3, #8
 8008ea2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	69fa      	ldr	r2, [r7, #28]
 8008ea8:	611a      	str	r2, [r3, #16]
          break;
 8008eaa:	e009      	b.n	8008ec0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008eac:	2308      	movs	r3, #8
 8008eae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	69fa      	ldr	r2, [r7, #28]
 8008eb4:	615a      	str	r2, [r3, #20]
          break;
 8008eb6:	e003      	b.n	8008ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	623b      	str	r3, [r7, #32]
          break;
 8008ebc:	e000      	b.n	8008ec0 <HAL_GPIO_Init+0x130>
          break;
 8008ebe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	2bff      	cmp	r3, #255	; 0xff
 8008ec4:	d801      	bhi.n	8008eca <HAL_GPIO_Init+0x13a>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	e001      	b.n	8008ece <HAL_GPIO_Init+0x13e>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	2bff      	cmp	r3, #255	; 0xff
 8008ed4:	d802      	bhi.n	8008edc <HAL_GPIO_Init+0x14c>
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	e002      	b.n	8008ee2 <HAL_GPIO_Init+0x152>
 8008edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ede:	3b08      	subs	r3, #8
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	210f      	movs	r1, #15
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef0:	43db      	mvns	r3, r3
 8008ef2:	401a      	ands	r2, r3
 8008ef4:	6a39      	ldr	r1, [r7, #32]
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8008efc:	431a      	orrs	r2, r3
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 80c1 	beq.w	8009092 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008f10:	4b49      	ldr	r3, [pc, #292]	; (8009038 <HAL_GPIO_Init+0x2a8>)
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	4a48      	ldr	r2, [pc, #288]	; (8009038 <HAL_GPIO_Init+0x2a8>)
 8008f16:	f043 0301 	orr.w	r3, r3, #1
 8008f1a:	6193      	str	r3, [r2, #24]
 8008f1c:	4b46      	ldr	r3, [pc, #280]	; (8009038 <HAL_GPIO_Init+0x2a8>)
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	60bb      	str	r3, [r7, #8]
 8008f26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008f28:	4a44      	ldr	r2, [pc, #272]	; (800903c <HAL_GPIO_Init+0x2ac>)
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	089b      	lsrs	r3, r3, #2
 8008f2e:	3302      	adds	r3, #2
 8008f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	f003 0303 	and.w	r3, r3, #3
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	220f      	movs	r2, #15
 8008f40:	fa02 f303 	lsl.w	r3, r2, r3
 8008f44:	43db      	mvns	r3, r3
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	4013      	ands	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a3c      	ldr	r2, [pc, #240]	; (8009040 <HAL_GPIO_Init+0x2b0>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d01f      	beq.n	8008f94 <HAL_GPIO_Init+0x204>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a3b      	ldr	r2, [pc, #236]	; (8009044 <HAL_GPIO_Init+0x2b4>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d019      	beq.n	8008f90 <HAL_GPIO_Init+0x200>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a3a      	ldr	r2, [pc, #232]	; (8009048 <HAL_GPIO_Init+0x2b8>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d013      	beq.n	8008f8c <HAL_GPIO_Init+0x1fc>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a39      	ldr	r2, [pc, #228]	; (800904c <HAL_GPIO_Init+0x2bc>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d00d      	beq.n	8008f88 <HAL_GPIO_Init+0x1f8>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a38      	ldr	r2, [pc, #224]	; (8009050 <HAL_GPIO_Init+0x2c0>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d007      	beq.n	8008f84 <HAL_GPIO_Init+0x1f4>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a37      	ldr	r2, [pc, #220]	; (8009054 <HAL_GPIO_Init+0x2c4>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d101      	bne.n	8008f80 <HAL_GPIO_Init+0x1f0>
 8008f7c:	2305      	movs	r3, #5
 8008f7e:	e00a      	b.n	8008f96 <HAL_GPIO_Init+0x206>
 8008f80:	2306      	movs	r3, #6
 8008f82:	e008      	b.n	8008f96 <HAL_GPIO_Init+0x206>
 8008f84:	2304      	movs	r3, #4
 8008f86:	e006      	b.n	8008f96 <HAL_GPIO_Init+0x206>
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e004      	b.n	8008f96 <HAL_GPIO_Init+0x206>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e002      	b.n	8008f96 <HAL_GPIO_Init+0x206>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e000      	b.n	8008f96 <HAL_GPIO_Init+0x206>
 8008f94:	2300      	movs	r3, #0
 8008f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f98:	f002 0203 	and.w	r2, r2, #3
 8008f9c:	0092      	lsls	r2, r2, #2
 8008f9e:	4093      	lsls	r3, r2
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008fa6:	4925      	ldr	r1, [pc, #148]	; (800903c <HAL_GPIO_Init+0x2ac>)
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	089b      	lsrs	r3, r3, #2
 8008fac:	3302      	adds	r3, #2
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d006      	beq.n	8008fce <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008fc0:	4b25      	ldr	r3, [pc, #148]	; (8009058 <HAL_GPIO_Init+0x2c8>)
 8008fc2:	689a      	ldr	r2, [r3, #8]
 8008fc4:	4924      	ldr	r1, [pc, #144]	; (8009058 <HAL_GPIO_Init+0x2c8>)
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	608b      	str	r3, [r1, #8]
 8008fcc:	e006      	b.n	8008fdc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008fce:	4b22      	ldr	r3, [pc, #136]	; (8009058 <HAL_GPIO_Init+0x2c8>)
 8008fd0:	689a      	ldr	r2, [r3, #8]
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	43db      	mvns	r3, r3
 8008fd6:	4920      	ldr	r1, [pc, #128]	; (8009058 <HAL_GPIO_Init+0x2c8>)
 8008fd8:	4013      	ands	r3, r2
 8008fda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d006      	beq.n	8008ff6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008fe8:	4b1b      	ldr	r3, [pc, #108]	; (8009058 <HAL_GPIO_Init+0x2c8>)
 8008fea:	68da      	ldr	r2, [r3, #12]
 8008fec:	491a      	ldr	r1, [pc, #104]	; (8009058 <HAL_GPIO_Init+0x2c8>)
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	60cb      	str	r3, [r1, #12]
 8008ff4:	e006      	b.n	8009004 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008ff6:	4b18      	ldr	r3, [pc, #96]	; (8009058 <HAL_GPIO_Init+0x2c8>)
 8008ff8:	68da      	ldr	r2, [r3, #12]
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	43db      	mvns	r3, r3
 8008ffe:	4916      	ldr	r1, [pc, #88]	; (8009058 <HAL_GPIO_Init+0x2c8>)
 8009000:	4013      	ands	r3, r2
 8009002:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d025      	beq.n	800905c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009010:	4b11      	ldr	r3, [pc, #68]	; (8009058 <HAL_GPIO_Init+0x2c8>)
 8009012:	685a      	ldr	r2, [r3, #4]
 8009014:	4910      	ldr	r1, [pc, #64]	; (8009058 <HAL_GPIO_Init+0x2c8>)
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	4313      	orrs	r3, r2
 800901a:	604b      	str	r3, [r1, #4]
 800901c:	e025      	b.n	800906a <HAL_GPIO_Init+0x2da>
 800901e:	bf00      	nop
 8009020:	10320000 	.word	0x10320000
 8009024:	10310000 	.word	0x10310000
 8009028:	10220000 	.word	0x10220000
 800902c:	10210000 	.word	0x10210000
 8009030:	10120000 	.word	0x10120000
 8009034:	10110000 	.word	0x10110000
 8009038:	40021000 	.word	0x40021000
 800903c:	40010000 	.word	0x40010000
 8009040:	40010800 	.word	0x40010800
 8009044:	40010c00 	.word	0x40010c00
 8009048:	40011000 	.word	0x40011000
 800904c:	40011400 	.word	0x40011400
 8009050:	40011800 	.word	0x40011800
 8009054:	40011c00 	.word	0x40011c00
 8009058:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800905c:	4b15      	ldr	r3, [pc, #84]	; (80090b4 <HAL_GPIO_Init+0x324>)
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	43db      	mvns	r3, r3
 8009064:	4913      	ldr	r1, [pc, #76]	; (80090b4 <HAL_GPIO_Init+0x324>)
 8009066:	4013      	ands	r3, r2
 8009068:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d006      	beq.n	8009084 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009076:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <HAL_GPIO_Init+0x324>)
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	490e      	ldr	r1, [pc, #56]	; (80090b4 <HAL_GPIO_Init+0x324>)
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	4313      	orrs	r3, r2
 8009080:	600b      	str	r3, [r1, #0]
 8009082:	e006      	b.n	8009092 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009084:	4b0b      	ldr	r3, [pc, #44]	; (80090b4 <HAL_GPIO_Init+0x324>)
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	43db      	mvns	r3, r3
 800908c:	4909      	ldr	r1, [pc, #36]	; (80090b4 <HAL_GPIO_Init+0x324>)
 800908e:	4013      	ands	r3, r2
 8009090:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	3301      	adds	r3, #1
 8009096:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	fa22 f303 	lsr.w	r3, r2, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f47f ae7e 	bne.w	8008da4 <HAL_GPIO_Init+0x14>
  }
}
 80090a8:	bf00      	nop
 80090aa:	bf00      	nop
 80090ac:	372c      	adds	r7, #44	; 0x2c
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bc80      	pop	{r7}
 80090b2:	4770      	bx	lr
 80090b4:	40010400 	.word	0x40010400

080090b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b089      	sub	sp, #36	; 0x24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80090c2:	2300      	movs	r3, #0
 80090c4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80090c6:	e0a6      	b.n	8009216 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80090c8:	2201      	movs	r2, #1
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	fa02 f303 	lsl.w	r3, r2, r3
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	4013      	ands	r3, r2
 80090d4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 8099 	beq.w	8009210 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80090de:	4a54      	ldr	r2, [pc, #336]	; (8009230 <HAL_GPIO_DeInit+0x178>)
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	089b      	lsrs	r3, r3, #2
 80090e4:	3302      	adds	r3, #2
 80090e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ea:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	f003 0303 	and.w	r3, r3, #3
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	220f      	movs	r2, #15
 80090f6:	fa02 f303 	lsl.w	r3, r2, r3
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	4013      	ands	r3, r2
 80090fe:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a4c      	ldr	r2, [pc, #304]	; (8009234 <HAL_GPIO_DeInit+0x17c>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d01f      	beq.n	8009148 <HAL_GPIO_DeInit+0x90>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a4b      	ldr	r2, [pc, #300]	; (8009238 <HAL_GPIO_DeInit+0x180>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d019      	beq.n	8009144 <HAL_GPIO_DeInit+0x8c>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a4a      	ldr	r2, [pc, #296]	; (800923c <HAL_GPIO_DeInit+0x184>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d013      	beq.n	8009140 <HAL_GPIO_DeInit+0x88>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a49      	ldr	r2, [pc, #292]	; (8009240 <HAL_GPIO_DeInit+0x188>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d00d      	beq.n	800913c <HAL_GPIO_DeInit+0x84>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a48      	ldr	r2, [pc, #288]	; (8009244 <HAL_GPIO_DeInit+0x18c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d007      	beq.n	8009138 <HAL_GPIO_DeInit+0x80>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a47      	ldr	r2, [pc, #284]	; (8009248 <HAL_GPIO_DeInit+0x190>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d101      	bne.n	8009134 <HAL_GPIO_DeInit+0x7c>
 8009130:	2305      	movs	r3, #5
 8009132:	e00a      	b.n	800914a <HAL_GPIO_DeInit+0x92>
 8009134:	2306      	movs	r3, #6
 8009136:	e008      	b.n	800914a <HAL_GPIO_DeInit+0x92>
 8009138:	2304      	movs	r3, #4
 800913a:	e006      	b.n	800914a <HAL_GPIO_DeInit+0x92>
 800913c:	2303      	movs	r3, #3
 800913e:	e004      	b.n	800914a <HAL_GPIO_DeInit+0x92>
 8009140:	2302      	movs	r3, #2
 8009142:	e002      	b.n	800914a <HAL_GPIO_DeInit+0x92>
 8009144:	2301      	movs	r3, #1
 8009146:	e000      	b.n	800914a <HAL_GPIO_DeInit+0x92>
 8009148:	2300      	movs	r3, #0
 800914a:	69fa      	ldr	r2, [r7, #28]
 800914c:	f002 0203 	and.w	r2, r2, #3
 8009150:	0092      	lsls	r2, r2, #2
 8009152:	4093      	lsls	r3, r2
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	429a      	cmp	r2, r3
 8009158:	d132      	bne.n	80091c0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800915a:	4b3c      	ldr	r3, [pc, #240]	; (800924c <HAL_GPIO_DeInit+0x194>)
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	43db      	mvns	r3, r3
 8009162:	493a      	ldr	r1, [pc, #232]	; (800924c <HAL_GPIO_DeInit+0x194>)
 8009164:	4013      	ands	r3, r2
 8009166:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009168:	4b38      	ldr	r3, [pc, #224]	; (800924c <HAL_GPIO_DeInit+0x194>)
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	43db      	mvns	r3, r3
 8009170:	4936      	ldr	r1, [pc, #216]	; (800924c <HAL_GPIO_DeInit+0x194>)
 8009172:	4013      	ands	r3, r2
 8009174:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009176:	4b35      	ldr	r3, [pc, #212]	; (800924c <HAL_GPIO_DeInit+0x194>)
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	43db      	mvns	r3, r3
 800917e:	4933      	ldr	r1, [pc, #204]	; (800924c <HAL_GPIO_DeInit+0x194>)
 8009180:	4013      	ands	r3, r2
 8009182:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009184:	4b31      	ldr	r3, [pc, #196]	; (800924c <HAL_GPIO_DeInit+0x194>)
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	43db      	mvns	r3, r3
 800918c:	492f      	ldr	r1, [pc, #188]	; (800924c <HAL_GPIO_DeInit+0x194>)
 800918e:	4013      	ands	r3, r2
 8009190:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	f003 0303 	and.w	r3, r3, #3
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	220f      	movs	r2, #15
 800919c:	fa02 f303 	lsl.w	r3, r2, r3
 80091a0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80091a2:	4a23      	ldr	r2, [pc, #140]	; (8009230 <HAL_GPIO_DeInit+0x178>)
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	089b      	lsrs	r3, r3, #2
 80091a8:	3302      	adds	r3, #2
 80091aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	43da      	mvns	r2, r3
 80091b2:	481f      	ldr	r0, [pc, #124]	; (8009230 <HAL_GPIO_DeInit+0x178>)
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	089b      	lsrs	r3, r3, #2
 80091b8:	400a      	ands	r2, r1
 80091ba:	3302      	adds	r3, #2
 80091bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	2bff      	cmp	r3, #255	; 0xff
 80091c4:	d801      	bhi.n	80091ca <HAL_GPIO_DeInit+0x112>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	e001      	b.n	80091ce <HAL_GPIO_DeInit+0x116>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	3304      	adds	r3, #4
 80091ce:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	2bff      	cmp	r3, #255	; 0xff
 80091d4:	d802      	bhi.n	80091dc <HAL_GPIO_DeInit+0x124>
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	e002      	b.n	80091e2 <HAL_GPIO_DeInit+0x12a>
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	3b08      	subs	r3, #8
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	210f      	movs	r1, #15
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	fa01 f303 	lsl.w	r3, r1, r3
 80091f0:	43db      	mvns	r3, r3
 80091f2:	401a      	ands	r2, r3
 80091f4:	2104      	movs	r1, #4
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	fa01 f303 	lsl.w	r3, r1, r3
 80091fc:	431a      	orrs	r2, r3
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68da      	ldr	r2, [r3, #12]
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	43db      	mvns	r3, r3
 800920a:	401a      	ands	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	3301      	adds	r3, #1
 8009214:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	fa22 f303 	lsr.w	r3, r2, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	f47f af52 	bne.w	80090c8 <HAL_GPIO_DeInit+0x10>
  }
}
 8009224:	bf00      	nop
 8009226:	bf00      	nop
 8009228:	3724      	adds	r7, #36	; 0x24
 800922a:	46bd      	mov	sp, r7
 800922c:	bc80      	pop	{r7}
 800922e:	4770      	bx	lr
 8009230:	40010000 	.word	0x40010000
 8009234:	40010800 	.word	0x40010800
 8009238:	40010c00 	.word	0x40010c00
 800923c:	40011000 	.word	0x40011000
 8009240:	40011400 	.word	0x40011400
 8009244:	40011800 	.word	0x40011800
 8009248:	40011c00 	.word	0x40011c00
 800924c:	40010400 	.word	0x40010400

08009250 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	689a      	ldr	r2, [r3, #8]
 8009260:	887b      	ldrh	r3, [r7, #2]
 8009262:	4013      	ands	r3, r2
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009268:	2301      	movs	r3, #1
 800926a:	73fb      	strb	r3, [r7, #15]
 800926c:	e001      	b.n	8009272 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009272:	7bfb      	ldrb	r3, [r7, #15]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	bc80      	pop	{r7}
 800927c:	4770      	bx	lr

0800927e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	807b      	strh	r3, [r7, #2]
 800928a:	4613      	mov	r3, r2
 800928c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800928e:	787b      	ldrb	r3, [r7, #1]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d003      	beq.n	800929c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009294:	887a      	ldrh	r2, [r7, #2]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800929a:	e003      	b.n	80092a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800929c:	887b      	ldrh	r3, [r7, #2]
 800929e:	041a      	lsls	r2, r3, #16
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	611a      	str	r2, [r3, #16]
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bc80      	pop	{r7}
 80092ac:	4770      	bx	lr

080092ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b085      	sub	sp, #20
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80092c0:	887a      	ldrh	r2, [r7, #2]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4013      	ands	r3, r2
 80092c6:	041a      	lsls	r2, r3, #16
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	43d9      	mvns	r1, r3
 80092cc:	887b      	ldrh	r3, [r7, #2]
 80092ce:	400b      	ands	r3, r1
 80092d0:	431a      	orrs	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	611a      	str	r2, [r3, #16]
}
 80092d6:	bf00      	nop
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	bc80      	pop	{r7}
 80092de:	4770      	bx	lr

080092e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d101      	bne.n	80092f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e12b      	b.n	800954a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d106      	bne.n	800930c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7fe fff8 	bl	80082fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2224      	movs	r2, #36	; 0x24
 8009310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f022 0201 	bic.w	r2, r2, #1
 8009322:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009332:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009342:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009344:	f001 fdb8 	bl	800aeb8 <HAL_RCC_GetPCLK1Freq>
 8009348:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	4a81      	ldr	r2, [pc, #516]	; (8009554 <HAL_I2C_Init+0x274>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d807      	bhi.n	8009364 <HAL_I2C_Init+0x84>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4a80      	ldr	r2, [pc, #512]	; (8009558 <HAL_I2C_Init+0x278>)
 8009358:	4293      	cmp	r3, r2
 800935a:	bf94      	ite	ls
 800935c:	2301      	movls	r3, #1
 800935e:	2300      	movhi	r3, #0
 8009360:	b2db      	uxtb	r3, r3
 8009362:	e006      	b.n	8009372 <HAL_I2C_Init+0x92>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	4a7d      	ldr	r2, [pc, #500]	; (800955c <HAL_I2C_Init+0x27c>)
 8009368:	4293      	cmp	r3, r2
 800936a:	bf94      	ite	ls
 800936c:	2301      	movls	r3, #1
 800936e:	2300      	movhi	r3, #0
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	e0e7      	b.n	800954a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	4a78      	ldr	r2, [pc, #480]	; (8009560 <HAL_I2C_Init+0x280>)
 800937e:	fba2 2303 	umull	r2, r3, r2, r3
 8009382:	0c9b      	lsrs	r3, r3, #18
 8009384:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	430a      	orrs	r2, r1
 8009398:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6a1b      	ldr	r3, [r3, #32]
 80093a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	4a6a      	ldr	r2, [pc, #424]	; (8009554 <HAL_I2C_Init+0x274>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d802      	bhi.n	80093b4 <HAL_I2C_Init+0xd4>
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	3301      	adds	r3, #1
 80093b2:	e009      	b.n	80093c8 <HAL_I2C_Init+0xe8>
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80093ba:	fb02 f303 	mul.w	r3, r2, r3
 80093be:	4a69      	ldr	r2, [pc, #420]	; (8009564 <HAL_I2C_Init+0x284>)
 80093c0:	fba2 2303 	umull	r2, r3, r2, r3
 80093c4:	099b      	lsrs	r3, r3, #6
 80093c6:	3301      	adds	r3, #1
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6812      	ldr	r2, [r2, #0]
 80093cc:	430b      	orrs	r3, r1
 80093ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80093da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	495c      	ldr	r1, [pc, #368]	; (8009554 <HAL_I2C_Init+0x274>)
 80093e4:	428b      	cmp	r3, r1
 80093e6:	d819      	bhi.n	800941c <HAL_I2C_Init+0x13c>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	1e59      	subs	r1, r3, #1
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	005b      	lsls	r3, r3, #1
 80093f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80093f6:	1c59      	adds	r1, r3, #1
 80093f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80093fc:	400b      	ands	r3, r1
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <HAL_I2C_Init+0x138>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	1e59      	subs	r1, r3, #1
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	005b      	lsls	r3, r3, #1
 800940c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009410:	3301      	adds	r3, #1
 8009412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009416:	e051      	b.n	80094bc <HAL_I2C_Init+0x1dc>
 8009418:	2304      	movs	r3, #4
 800941a:	e04f      	b.n	80094bc <HAL_I2C_Init+0x1dc>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d111      	bne.n	8009448 <HAL_I2C_Init+0x168>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	1e58      	subs	r0, r3, #1
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6859      	ldr	r1, [r3, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	005b      	lsls	r3, r3, #1
 8009430:	440b      	add	r3, r1
 8009432:	fbb0 f3f3 	udiv	r3, r0, r3
 8009436:	3301      	adds	r3, #1
 8009438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800943c:	2b00      	cmp	r3, #0
 800943e:	bf0c      	ite	eq
 8009440:	2301      	moveq	r3, #1
 8009442:	2300      	movne	r3, #0
 8009444:	b2db      	uxtb	r3, r3
 8009446:	e012      	b.n	800946e <HAL_I2C_Init+0x18e>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	1e58      	subs	r0, r3, #1
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6859      	ldr	r1, [r3, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	440b      	add	r3, r1
 8009456:	0099      	lsls	r1, r3, #2
 8009458:	440b      	add	r3, r1
 800945a:	fbb0 f3f3 	udiv	r3, r0, r3
 800945e:	3301      	adds	r3, #1
 8009460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009464:	2b00      	cmp	r3, #0
 8009466:	bf0c      	ite	eq
 8009468:	2301      	moveq	r3, #1
 800946a:	2300      	movne	r3, #0
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <HAL_I2C_Init+0x196>
 8009472:	2301      	movs	r3, #1
 8009474:	e022      	b.n	80094bc <HAL_I2C_Init+0x1dc>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10e      	bne.n	800949c <HAL_I2C_Init+0x1bc>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	1e58      	subs	r0, r3, #1
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6859      	ldr	r1, [r3, #4]
 8009486:	460b      	mov	r3, r1
 8009488:	005b      	lsls	r3, r3, #1
 800948a:	440b      	add	r3, r1
 800948c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009490:	3301      	adds	r3, #1
 8009492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800949a:	e00f      	b.n	80094bc <HAL_I2C_Init+0x1dc>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	1e58      	subs	r0, r3, #1
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6859      	ldr	r1, [r3, #4]
 80094a4:	460b      	mov	r3, r1
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	0099      	lsls	r1, r3, #2
 80094ac:	440b      	add	r3, r1
 80094ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80094b2:	3301      	adds	r3, #1
 80094b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	6809      	ldr	r1, [r1, #0]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	69da      	ldr	r2, [r3, #28]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	430a      	orrs	r2, r1
 80094de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80094ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	6911      	ldr	r1, [r2, #16]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	68d2      	ldr	r2, [r2, #12]
 80094f6:	4311      	orrs	r1, r2
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	6812      	ldr	r2, [r2, #0]
 80094fc:	430b      	orrs	r3, r1
 80094fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	695a      	ldr	r2, [r3, #20]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	431a      	orrs	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	430a      	orrs	r2, r1
 800951a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f042 0201 	orr.w	r2, r2, #1
 800952a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2220      	movs	r2, #32
 8009536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	000186a0 	.word	0x000186a0
 8009558:	001e847f 	.word	0x001e847f
 800955c:	003d08ff 	.word	0x003d08ff
 8009560:	431bde83 	.word	0x431bde83
 8009564:	10624dd3 	.word	0x10624dd3

08009568 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e021      	b.n	80095be <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2224      	movs	r2, #36	; 0x24
 800957e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 0201 	bic.w	r2, r2, #1
 8009590:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7fe fef0 	bl	8008378 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	607a      	str	r2, [r7, #4]
 80095d2:	461a      	mov	r2, r3
 80095d4:	460b      	mov	r3, r1
 80095d6:	817b      	strh	r3, [r7, #10]
 80095d8:	4613      	mov	r3, r2
 80095da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80095dc:	f7ff f85e 	bl	800869c <HAL_GetTick>
 80095e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	f040 80e0 	bne.w	80097b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	2319      	movs	r3, #25
 80095f6:	2201      	movs	r2, #1
 80095f8:	4970      	ldr	r1, [pc, #448]	; (80097bc <HAL_I2C_Master_Transmit+0x1f4>)
 80095fa:	68f8      	ldr	r0, [r7, #12]
 80095fc:	f000 fe5c 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009606:	2302      	movs	r3, #2
 8009608:	e0d3      	b.n	80097b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <HAL_I2C_Master_Transmit+0x50>
 8009614:	2302      	movs	r3, #2
 8009616:	e0cc      	b.n	80097b2 <HAL_I2C_Master_Transmit+0x1ea>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 0301 	and.w	r3, r3, #1
 800962a:	2b01      	cmp	r3, #1
 800962c:	d007      	beq.n	800963e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f042 0201 	orr.w	r2, r2, #1
 800963c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800964c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2221      	movs	r2, #33	; 0x21
 8009652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2210      	movs	r2, #16
 800965a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	893a      	ldrh	r2, [r7, #8]
 800966e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009674:	b29a      	uxth	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	4a50      	ldr	r2, [pc, #320]	; (80097c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800967e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009680:	8979      	ldrh	r1, [r7, #10]
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	6a3a      	ldr	r2, [r7, #32]
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f000 fc16 	bl	8009eb8 <I2C_MasterRequestWrite>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e08d      	b.n	80097b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009696:	2300      	movs	r3, #0
 8009698:	613b      	str	r3, [r7, #16]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	613b      	str	r3, [r7, #16]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	613b      	str	r3, [r7, #16]
 80096aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80096ac:	e066      	b.n	800977c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	6a39      	ldr	r1, [r7, #32]
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 ff1a 	bl	800a4ec <I2C_WaitOnTXEFlagUntilTimeout>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00d      	beq.n	80096da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c2:	2b04      	cmp	r3, #4
 80096c4:	d107      	bne.n	80096d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e06b      	b.n	80097b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	781a      	ldrb	r2, [r3, #0]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	3b01      	subs	r3, #1
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009702:	3b01      	subs	r3, #1
 8009704:	b29a      	uxth	r2, r3
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	695b      	ldr	r3, [r3, #20]
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b04      	cmp	r3, #4
 8009716:	d11b      	bne.n	8009750 <HAL_I2C_Master_Transmit+0x188>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800971c:	2b00      	cmp	r3, #0
 800971e:	d017      	beq.n	8009750 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009724:	781a      	ldrb	r2, [r3, #0]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009730:	1c5a      	adds	r2, r3, #1
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800973a:	b29b      	uxth	r3, r3
 800973c:	3b01      	subs	r3, #1
 800973e:	b29a      	uxth	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009748:	3b01      	subs	r3, #1
 800974a:	b29a      	uxth	r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	6a39      	ldr	r1, [r7, #32]
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f000 ff11 	bl	800a57c <I2C_WaitOnBTFFlagUntilTimeout>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00d      	beq.n	800977c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009764:	2b04      	cmp	r3, #4
 8009766:	d107      	bne.n	8009778 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009776:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e01a      	b.n	80097b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009780:	2b00      	cmp	r3, #0
 8009782:	d194      	bne.n	80096ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2220      	movs	r2, #32
 8009798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	e000      	b.n	80097b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80097b0:	2302      	movs	r3, #2
  }
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3718      	adds	r7, #24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	00100002 	.word	0x00100002
 80097c0:	ffff0000 	.word	0xffff0000

080097c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b088      	sub	sp, #32
 80097c8:	af02      	add	r7, sp, #8
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	4608      	mov	r0, r1
 80097ce:	4611      	mov	r1, r2
 80097d0:	461a      	mov	r2, r3
 80097d2:	4603      	mov	r3, r0
 80097d4:	817b      	strh	r3, [r7, #10]
 80097d6:	460b      	mov	r3, r1
 80097d8:	813b      	strh	r3, [r7, #8]
 80097da:	4613      	mov	r3, r2
 80097dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80097de:	f7fe ff5d 	bl	800869c <HAL_GetTick>
 80097e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b20      	cmp	r3, #32
 80097ee:	f040 80d9 	bne.w	80099a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	2319      	movs	r3, #25
 80097f8:	2201      	movs	r2, #1
 80097fa:	496d      	ldr	r1, [pc, #436]	; (80099b0 <HAL_I2C_Mem_Write+0x1ec>)
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 fd5b 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009808:	2302      	movs	r3, #2
 800980a:	e0cc      	b.n	80099a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009812:	2b01      	cmp	r3, #1
 8009814:	d101      	bne.n	800981a <HAL_I2C_Mem_Write+0x56>
 8009816:	2302      	movs	r3, #2
 8009818:	e0c5      	b.n	80099a6 <HAL_I2C_Mem_Write+0x1e2>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b01      	cmp	r3, #1
 800982e:	d007      	beq.n	8009840 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f042 0201 	orr.w	r2, r2, #1
 800983e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800984e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2221      	movs	r2, #33	; 0x21
 8009854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2240      	movs	r2, #64	; 0x40
 800985c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a3a      	ldr	r2, [r7, #32]
 800986a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009876:	b29a      	uxth	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4a4d      	ldr	r2, [pc, #308]	; (80099b4 <HAL_I2C_Mem_Write+0x1f0>)
 8009880:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009882:	88f8      	ldrh	r0, [r7, #6]
 8009884:	893a      	ldrh	r2, [r7, #8]
 8009886:	8979      	ldrh	r1, [r7, #10]
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	9301      	str	r3, [sp, #4]
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	4603      	mov	r3, r0
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 fb92 	bl	8009fbc <I2C_RequestMemoryWrite>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d052      	beq.n	8009944 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e081      	b.n	80099a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f000 fe20 	bl	800a4ec <I2C_WaitOnTXEFlagUntilTimeout>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00d      	beq.n	80098ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b6:	2b04      	cmp	r3, #4
 80098b8:	d107      	bne.n	80098ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e06b      	b.n	80099a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d2:	781a      	ldrb	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	3b01      	subs	r3, #1
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	f003 0304 	and.w	r3, r3, #4
 8009908:	2b04      	cmp	r3, #4
 800990a:	d11b      	bne.n	8009944 <HAL_I2C_Mem_Write+0x180>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009910:	2b00      	cmp	r3, #0
 8009912:	d017      	beq.n	8009944 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009918:	781a      	ldrb	r2, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009924:	1c5a      	adds	r2, r3, #1
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800992e:	3b01      	subs	r3, #1
 8009930:	b29a      	uxth	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800993a:	b29b      	uxth	r3, r3
 800993c:	3b01      	subs	r3, #1
 800993e:	b29a      	uxth	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1aa      	bne.n	80098a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fe13 	bl	800a57c <I2C_WaitOnBTFFlagUntilTimeout>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00d      	beq.n	8009978 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009960:	2b04      	cmp	r3, #4
 8009962:	d107      	bne.n	8009974 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009972:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e016      	b.n	80099a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2220      	movs	r2, #32
 800998c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	e000      	b.n	80099a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80099a4:	2302      	movs	r3, #2
  }
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	00100002 	.word	0x00100002
 80099b4:	ffff0000 	.word	0xffff0000

080099b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08c      	sub	sp, #48	; 0x30
 80099bc:	af02      	add	r7, sp, #8
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	4608      	mov	r0, r1
 80099c2:	4611      	mov	r1, r2
 80099c4:	461a      	mov	r2, r3
 80099c6:	4603      	mov	r3, r0
 80099c8:	817b      	strh	r3, [r7, #10]
 80099ca:	460b      	mov	r3, r1
 80099cc:	813b      	strh	r3, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80099d2:	2300      	movs	r3, #0
 80099d4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80099d6:	f7fe fe61 	bl	800869c <HAL_GetTick>
 80099da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b20      	cmp	r3, #32
 80099e6:	f040 8244 	bne.w	8009e72 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	2319      	movs	r3, #25
 80099f0:	2201      	movs	r2, #1
 80099f2:	4982      	ldr	r1, [pc, #520]	; (8009bfc <HAL_I2C_Mem_Read+0x244>)
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f000 fc5f 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009a00:	2302      	movs	r3, #2
 8009a02:	e237      	b.n	8009e74 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d101      	bne.n	8009a12 <HAL_I2C_Mem_Read+0x5a>
 8009a0e:	2302      	movs	r3, #2
 8009a10:	e230      	b.n	8009e74 <HAL_I2C_Mem_Read+0x4bc>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d007      	beq.n	8009a38 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f042 0201 	orr.w	r2, r2, #1
 8009a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2222      	movs	r2, #34	; 0x22
 8009a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2240      	movs	r2, #64	; 0x40
 8009a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	4a62      	ldr	r2, [pc, #392]	; (8009c00 <HAL_I2C_Mem_Read+0x248>)
 8009a78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a7a:	88f8      	ldrh	r0, [r7, #6]
 8009a7c:	893a      	ldrh	r2, [r7, #8]
 8009a7e:	8979      	ldrh	r1, [r7, #10]
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	9301      	str	r3, [sp, #4]
 8009a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	4603      	mov	r3, r0
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 fb2c 	bl	800a0e8 <I2C_RequestMemoryRead>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e1ec      	b.n	8009e74 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d113      	bne.n	8009aca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	61fb      	str	r3, [r7, #28]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	61fb      	str	r3, [r7, #28]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	61fb      	str	r3, [r7, #28]
 8009ab6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	e1c0      	b.n	8009e4c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d11e      	bne.n	8009b10 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ae0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ae2:	b672      	cpsid	i
}
 8009ae4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	61bb      	str	r3, [r7, #24]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	61bb      	str	r3, [r7, #24]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	61bb      	str	r3, [r7, #24]
 8009afa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009b0c:	b662      	cpsie	i
}
 8009b0e:	e035      	b.n	8009b7c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d11e      	bne.n	8009b56 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b28:	b672      	cpsid	i
}
 8009b2a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	617b      	str	r3, [r7, #20]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	617b      	str	r3, [r7, #20]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	617b      	str	r3, [r7, #20]
 8009b40:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009b52:	b662      	cpsie	i
}
 8009b54:	e012      	b.n	8009b7c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b64:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b66:	2300      	movs	r3, #0
 8009b68:	613b      	str	r3, [r7, #16]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	613b      	str	r3, [r7, #16]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	613b      	str	r3, [r7, #16]
 8009b7a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009b7c:	e166      	b.n	8009e4c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	f200 811f 	bhi.w	8009dc6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d123      	bne.n	8009bd8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f000 fd39 	bl	800a60c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e167      	b.n	8009e74 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	691a      	ldr	r2, [r3, #16]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	b2d2      	uxtb	r2, r2
 8009bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009bd6:	e139      	b.n	8009e4c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d152      	bne.n	8009c86 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be6:	2200      	movs	r2, #0
 8009be8:	4906      	ldr	r1, [pc, #24]	; (8009c04 <HAL_I2C_Mem_Read+0x24c>)
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f000 fb64 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d008      	beq.n	8009c08 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e13c      	b.n	8009e74 <HAL_I2C_Mem_Read+0x4bc>
 8009bfa:	bf00      	nop
 8009bfc:	00100002 	.word	0x00100002
 8009c00:	ffff0000 	.word	0xffff0000
 8009c04:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009c08:	b672      	cpsid	i
}
 8009c0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	691a      	ldr	r2, [r3, #16]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c26:	b2d2      	uxtb	r2, r2
 8009c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	3b01      	subs	r3, #1
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009c4e:	b662      	cpsie	i
}
 8009c50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	691a      	ldr	r2, [r3, #16]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5c:	b2d2      	uxtb	r2, r2
 8009c5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c64:	1c5a      	adds	r2, r3, #1
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c84:	e0e2      	b.n	8009e4c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	497b      	ldr	r1, [pc, #492]	; (8009e7c <HAL_I2C_Mem_Read+0x4c4>)
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f000 fb11 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d001      	beq.n	8009ca0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e0e9      	b.n	8009e74 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cb0:	b672      	cpsid	i
}
 8009cb2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	691a      	ldr	r2, [r3, #16]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbe:	b2d2      	uxtb	r2, r2
 8009cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc6:	1c5a      	adds	r2, r3, #1
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009ce6:	4b66      	ldr	r3, [pc, #408]	; (8009e80 <HAL_I2C_Mem_Read+0x4c8>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	08db      	lsrs	r3, r3, #3
 8009cec:	4a65      	ldr	r2, [pc, #404]	; (8009e84 <HAL_I2C_Mem_Read+0x4cc>)
 8009cee:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf2:	0a1a      	lsrs	r2, r3, #8
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	00da      	lsls	r2, r3, #3
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	3b01      	subs	r3, #1
 8009d04:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d118      	bne.n	8009d3e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2220      	movs	r2, #32
 8009d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	f043 0220 	orr.w	r2, r3, #32
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009d2e:	b662      	cpsie	i
}
 8009d30:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e09a      	b.n	8009e74 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	f003 0304 	and.w	r3, r3, #4
 8009d48:	2b04      	cmp	r3, #4
 8009d4a:	d1d9      	bne.n	8009d00 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	691a      	ldr	r2, [r3, #16]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	b2d2      	uxtb	r2, r2
 8009d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	3b01      	subs	r3, #1
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d8e:	b662      	cpsie	i
}
 8009d90:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	691a      	ldr	r2, [r3, #16]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9c:	b2d2      	uxtb	r2, r2
 8009d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da4:	1c5a      	adds	r2, r3, #1
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dae:	3b01      	subs	r3, #1
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009dc4:	e042      	b.n	8009e4c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	f000 fc1e 	bl	800a60c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d001      	beq.n	8009dda <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e04c      	b.n	8009e74 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	691a      	ldr	r2, [r3, #16]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de4:	b2d2      	uxtb	r2, r2
 8009de6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dec:	1c5a      	adds	r2, r3, #1
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009df6:	3b01      	subs	r3, #1
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	3b01      	subs	r3, #1
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	f003 0304 	and.w	r3, r3, #4
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	d118      	bne.n	8009e4c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	691a      	ldr	r2, [r3, #16]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e24:	b2d2      	uxtb	r2, r2
 8009e26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e36:	3b01      	subs	r3, #1
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	3b01      	subs	r3, #1
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f47f ae94 	bne.w	8009b7e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2220      	movs	r2, #32
 8009e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e000      	b.n	8009e74 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009e72:	2302      	movs	r3, #2
  }
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3728      	adds	r7, #40	; 0x28
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	00010004 	.word	0x00010004
 8009e80:	200000a0 	.word	0x200000a0
 8009e84:	14f8b589 	.word	0x14f8b589

08009e88 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e96:	b2db      	uxtb	r3, r3
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bc80      	pop	{r7}
 8009ea0:	4770      	bx	lr

08009ea2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bc80      	pop	{r7}
 8009eb6:	4770      	bx	lr

08009eb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af02      	add	r7, sp, #8
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	607a      	str	r2, [r7, #4]
 8009ec2:	603b      	str	r3, [r7, #0]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2b08      	cmp	r3, #8
 8009ed2:	d006      	beq.n	8009ee2 <I2C_MasterRequestWrite+0x2a>
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d003      	beq.n	8009ee2 <I2C_MasterRequestWrite+0x2a>
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ee0:	d108      	bne.n	8009ef4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ef0:	601a      	str	r2, [r3, #0]
 8009ef2:	e00b      	b.n	8009f0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef8:	2b12      	cmp	r3, #18
 8009efa:	d107      	bne.n	8009f0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	9300      	str	r3, [sp, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f000 f9cd 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00d      	beq.n	8009f40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f32:	d103      	bne.n	8009f3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	e035      	b.n	8009fac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f48:	d108      	bne.n	8009f5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f4a:	897b      	ldrh	r3, [r7, #10]
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	461a      	mov	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009f58:	611a      	str	r2, [r3, #16]
 8009f5a:	e01b      	b.n	8009f94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009f5c:	897b      	ldrh	r3, [r7, #10]
 8009f5e:	11db      	asrs	r3, r3, #7
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	f003 0306 	and.w	r3, r3, #6
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	f063 030f 	orn	r3, r3, #15
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	490e      	ldr	r1, [pc, #56]	; (8009fb4 <I2C_MasterRequestWrite+0xfc>)
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 fa16 	bl	800a3ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e010      	b.n	8009fac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009f8a:	897b      	ldrh	r3, [r7, #10]
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	4907      	ldr	r1, [pc, #28]	; (8009fb8 <I2C_MasterRequestWrite+0x100>)
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 fa06 	bl	800a3ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e000      	b.n	8009fac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	00010008 	.word	0x00010008
 8009fb8:	00010002 	.word	0x00010002

08009fbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af02      	add	r7, sp, #8
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	4608      	mov	r0, r1
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	461a      	mov	r2, r3
 8009fca:	4603      	mov	r3, r0
 8009fcc:	817b      	strh	r3, [r7, #10]
 8009fce:	460b      	mov	r3, r1
 8009fd0:	813b      	strh	r3, [r7, #8]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fe4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	6a3b      	ldr	r3, [r7, #32]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f000 f960 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00d      	beq.n	800a01a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a00c:	d103      	bne.n	800a016 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a014:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e05f      	b.n	800a0da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a01a:	897b      	ldrh	r3, [r7, #10]
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	461a      	mov	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a028:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	6a3a      	ldr	r2, [r7, #32]
 800a02e:	492d      	ldr	r1, [pc, #180]	; (800a0e4 <I2C_RequestMemoryWrite+0x128>)
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f000 f9bb 	bl	800a3ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e04c      	b.n	800a0da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a040:	2300      	movs	r3, #0
 800a042:	617b      	str	r3, [r7, #20]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	617b      	str	r3, [r7, #20]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	617b      	str	r3, [r7, #20]
 800a054:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a058:	6a39      	ldr	r1, [r7, #32]
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f000 fa46 	bl	800a4ec <I2C_WaitOnTXEFlagUntilTimeout>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00d      	beq.n	800a082 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06a:	2b04      	cmp	r3, #4
 800a06c:	d107      	bne.n	800a07e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a07c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e02b      	b.n	800a0da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a082:	88fb      	ldrh	r3, [r7, #6]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d105      	bne.n	800a094 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a088:	893b      	ldrh	r3, [r7, #8]
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	611a      	str	r2, [r3, #16]
 800a092:	e021      	b.n	800a0d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a094:	893b      	ldrh	r3, [r7, #8]
 800a096:	0a1b      	lsrs	r3, r3, #8
 800a098:	b29b      	uxth	r3, r3
 800a09a:	b2da      	uxtb	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0a4:	6a39      	ldr	r1, [r7, #32]
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 fa20 	bl	800a4ec <I2C_WaitOnTXEFlagUntilTimeout>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00d      	beq.n	800a0ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b6:	2b04      	cmp	r3, #4
 800a0b8:	d107      	bne.n	800a0ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e005      	b.n	800a0da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0ce:	893b      	ldrh	r3, [r7, #8]
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3718      	adds	r7, #24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	00010002 	.word	0x00010002

0800a0e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af02      	add	r7, sp, #8
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	817b      	strh	r3, [r7, #10]
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	813b      	strh	r3, [r7, #8]
 800a0fe:	4613      	mov	r3, r2
 800a100:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a110:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a120:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	2200      	movs	r2, #0
 800a12a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f000 f8c2 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00d      	beq.n	800a156 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a148:	d103      	bne.n	800a152 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a150:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e0aa      	b.n	800a2ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a156:	897b      	ldrh	r3, [r7, #10]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	461a      	mov	r2, r3
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a164:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	6a3a      	ldr	r2, [r7, #32]
 800a16a:	4952      	ldr	r1, [pc, #328]	; (800a2b4 <I2C_RequestMemoryRead+0x1cc>)
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 f91d 	bl	800a3ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e097      	b.n	800a2ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a17c:	2300      	movs	r3, #0
 800a17e:	617b      	str	r3, [r7, #20]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a194:	6a39      	ldr	r1, [r7, #32]
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 f9a8 	bl	800a4ec <I2C_WaitOnTXEFlagUntilTimeout>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00d      	beq.n	800a1be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d107      	bne.n	800a1ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e076      	b.n	800a2ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1be:	88fb      	ldrh	r3, [r7, #6]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d105      	bne.n	800a1d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1c4:	893b      	ldrh	r3, [r7, #8]
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	611a      	str	r2, [r3, #16]
 800a1ce:	e021      	b.n	800a214 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1d0:	893b      	ldrh	r3, [r7, #8]
 800a1d2:	0a1b      	lsrs	r3, r3, #8
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	b2da      	uxtb	r2, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e0:	6a39      	ldr	r1, [r7, #32]
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 f982 	bl	800a4ec <I2C_WaitOnTXEFlagUntilTimeout>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00d      	beq.n	800a20a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	2b04      	cmp	r3, #4
 800a1f4:	d107      	bne.n	800a206 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a204:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e050      	b.n	800a2ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a20a:	893b      	ldrh	r3, [r7, #8]
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a216:	6a39      	ldr	r1, [r7, #32]
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 f967 	bl	800a4ec <I2C_WaitOnTXEFlagUntilTimeout>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00d      	beq.n	800a240 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a228:	2b04      	cmp	r3, #4
 800a22a:	d107      	bne.n	800a23c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a23a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	e035      	b.n	800a2ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a24e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	2200      	movs	r2, #0
 800a258:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 f82b 	bl	800a2b8 <I2C_WaitOnFlagUntilTimeout>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00d      	beq.n	800a284 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a276:	d103      	bne.n	800a280 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a27e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e013      	b.n	800a2ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a284:	897b      	ldrh	r3, [r7, #10]
 800a286:	b2db      	uxtb	r3, r3
 800a288:	f043 0301 	orr.w	r3, r3, #1
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	6a3a      	ldr	r2, [r7, #32]
 800a298:	4906      	ldr	r1, [pc, #24]	; (800a2b4 <I2C_RequestMemoryRead+0x1cc>)
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f000 f886 	bl	800a3ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e000      	b.n	800a2ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3718      	adds	r7, #24
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	00010002 	.word	0x00010002

0800a2b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a2c8:	e048      	b.n	800a35c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2d0:	d044      	beq.n	800a35c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2d2:	f7fe f9e3 	bl	800869c <HAL_GetTick>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d302      	bcc.n	800a2e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d139      	bne.n	800a35c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	0c1b      	lsrs	r3, r3, #16
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d10d      	bne.n	800a30e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	695b      	ldr	r3, [r3, #20]
 800a2f8:	43da      	mvns	r2, r3
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	2b00      	cmp	r3, #0
 800a302:	bf0c      	ite	eq
 800a304:	2301      	moveq	r3, #1
 800a306:	2300      	movne	r3, #0
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	461a      	mov	r2, r3
 800a30c:	e00c      	b.n	800a328 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	43da      	mvns	r2, r3
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	4013      	ands	r3, r2
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	bf0c      	ite	eq
 800a320:	2301      	moveq	r3, #1
 800a322:	2300      	movne	r3, #0
 800a324:	b2db      	uxtb	r3, r3
 800a326:	461a      	mov	r2, r3
 800a328:	79fb      	ldrb	r3, [r7, #7]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d116      	bne.n	800a35c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2220      	movs	r2, #32
 800a338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a348:	f043 0220 	orr.w	r2, r3, #32
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e023      	b.n	800a3a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	0c1b      	lsrs	r3, r3, #16
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2b01      	cmp	r3, #1
 800a364:	d10d      	bne.n	800a382 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	695b      	ldr	r3, [r3, #20]
 800a36c:	43da      	mvns	r2, r3
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	4013      	ands	r3, r2
 800a372:	b29b      	uxth	r3, r3
 800a374:	2b00      	cmp	r3, #0
 800a376:	bf0c      	ite	eq
 800a378:	2301      	moveq	r3, #1
 800a37a:	2300      	movne	r3, #0
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	461a      	mov	r2, r3
 800a380:	e00c      	b.n	800a39c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	43da      	mvns	r2, r3
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	4013      	ands	r3, r2
 800a38e:	b29b      	uxth	r3, r3
 800a390:	2b00      	cmp	r3, #0
 800a392:	bf0c      	ite	eq
 800a394:	2301      	moveq	r3, #1
 800a396:	2300      	movne	r3, #0
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	461a      	mov	r2, r3
 800a39c:	79fb      	ldrb	r3, [r7, #7]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d093      	beq.n	800a2ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
 800a3b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a3ba:	e071      	b.n	800a4a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3ca:	d123      	bne.n	800a414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a3e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2220      	movs	r2, #32
 800a3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a400:	f043 0204 	orr.w	r2, r3, #4
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e067      	b.n	800a4e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a41a:	d041      	beq.n	800a4a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a41c:	f7fe f93e 	bl	800869c <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d302      	bcc.n	800a432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d136      	bne.n	800a4a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	0c1b      	lsrs	r3, r3, #16
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d10c      	bne.n	800a456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	43da      	mvns	r2, r3
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	4013      	ands	r3, r2
 800a448:	b29b      	uxth	r3, r3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	bf14      	ite	ne
 800a44e:	2301      	movne	r3, #1
 800a450:	2300      	moveq	r3, #0
 800a452:	b2db      	uxtb	r3, r3
 800a454:	e00b      	b.n	800a46e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	43da      	mvns	r2, r3
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	4013      	ands	r3, r2
 800a462:	b29b      	uxth	r3, r3
 800a464:	2b00      	cmp	r3, #0
 800a466:	bf14      	ite	ne
 800a468:	2301      	movne	r3, #1
 800a46a:	2300      	moveq	r3, #0
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d016      	beq.n	800a4a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2200      	movs	r2, #0
 800a476:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2220      	movs	r2, #32
 800a47c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48c:	f043 0220 	orr.w	r2, r3, #32
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	e021      	b.n	800a4e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	0c1b      	lsrs	r3, r3, #16
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d10c      	bne.n	800a4c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	43da      	mvns	r2, r3
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	bf14      	ite	ne
 800a4bc:	2301      	movne	r3, #1
 800a4be:	2300      	moveq	r3, #0
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	e00b      	b.n	800a4dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	43da      	mvns	r2, r3
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	bf14      	ite	ne
 800a4d6:	2301      	movne	r3, #1
 800a4d8:	2300      	moveq	r3, #0
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f47f af6d 	bne.w	800a3bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a4f8:	e034      	b.n	800a564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f000 f8e3 	bl	800a6c6 <I2C_IsAcknowledgeFailed>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d001      	beq.n	800a50a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	e034      	b.n	800a574 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a510:	d028      	beq.n	800a564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a512:	f7fe f8c3 	bl	800869c <HAL_GetTick>
 800a516:	4602      	mov	r2, r0
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d302      	bcc.n	800a528 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d11d      	bne.n	800a564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a532:	2b80      	cmp	r3, #128	; 0x80
 800a534:	d016      	beq.n	800a564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2220      	movs	r2, #32
 800a540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a550:	f043 0220 	orr.w	r2, r3, #32
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e007      	b.n	800a574 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a56e:	2b80      	cmp	r3, #128	; 0x80
 800a570:	d1c3      	bne.n	800a4fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a588:	e034      	b.n	800a5f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 f89b 	bl	800a6c6 <I2C_IsAcknowledgeFailed>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e034      	b.n	800a604 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5a0:	d028      	beq.n	800a5f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5a2:	f7fe f87b 	bl	800869c <HAL_GetTick>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d302      	bcc.n	800a5b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d11d      	bne.n	800a5f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	f003 0304 	and.w	r3, r3, #4
 800a5c2:	2b04      	cmp	r3, #4
 800a5c4:	d016      	beq.n	800a5f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2220      	movs	r2, #32
 800a5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e0:	f043 0220 	orr.w	r2, r3, #32
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e007      	b.n	800a604 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	f003 0304 	and.w	r3, r3, #4
 800a5fe:	2b04      	cmp	r3, #4
 800a600:	d1c3      	bne.n	800a58a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a618:	e049      	b.n	800a6ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	f003 0310 	and.w	r3, r3, #16
 800a624:	2b10      	cmp	r3, #16
 800a626:	d119      	bne.n	800a65c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f06f 0210 	mvn.w	r2, #16
 800a630:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2200      	movs	r2, #0
 800a636:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2220      	movs	r2, #32
 800a63c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e030      	b.n	800a6be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a65c:	f7fe f81e 	bl	800869c <HAL_GetTick>
 800a660:	4602      	mov	r2, r0
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	68ba      	ldr	r2, [r7, #8]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d302      	bcc.n	800a672 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d11d      	bne.n	800a6ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	695b      	ldr	r3, [r3, #20]
 800a678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a67c:	2b40      	cmp	r3, #64	; 0x40
 800a67e:	d016      	beq.n	800a6ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2220      	movs	r2, #32
 800a68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69a:	f043 0220 	orr.w	r2, r3, #32
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e007      	b.n	800a6be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6b8:	2b40      	cmp	r3, #64	; 0x40
 800a6ba:	d1ae      	bne.n	800a61a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b083      	sub	sp, #12
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	695b      	ldr	r3, [r3, #20]
 800a6d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6dc:	d11b      	bne.n	800a716 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a6e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a702:	f043 0204 	orr.w	r2, r3, #4
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e000      	b.n	800a718 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bc80      	pop	{r7}
 800a720:	4770      	bx	lr
	...

0800a724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d101      	bne.n	800a736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e272      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f000 8087 	beq.w	800a852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a744:	4b92      	ldr	r3, [pc, #584]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	f003 030c 	and.w	r3, r3, #12
 800a74c:	2b04      	cmp	r3, #4
 800a74e:	d00c      	beq.n	800a76a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a750:	4b8f      	ldr	r3, [pc, #572]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	f003 030c 	and.w	r3, r3, #12
 800a758:	2b08      	cmp	r3, #8
 800a75a:	d112      	bne.n	800a782 <HAL_RCC_OscConfig+0x5e>
 800a75c:	4b8c      	ldr	r3, [pc, #560]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a768:	d10b      	bne.n	800a782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a76a:	4b89      	ldr	r3, [pc, #548]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a772:	2b00      	cmp	r3, #0
 800a774:	d06c      	beq.n	800a850 <HAL_RCC_OscConfig+0x12c>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d168      	bne.n	800a850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e24c      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a78a:	d106      	bne.n	800a79a <HAL_RCC_OscConfig+0x76>
 800a78c:	4b80      	ldr	r3, [pc, #512]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a7f      	ldr	r2, [pc, #508]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	e02e      	b.n	800a7f8 <HAL_RCC_OscConfig+0xd4>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10c      	bne.n	800a7bc <HAL_RCC_OscConfig+0x98>
 800a7a2:	4b7b      	ldr	r3, [pc, #492]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a7a      	ldr	r2, [pc, #488]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a7a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7ac:	6013      	str	r3, [r2, #0]
 800a7ae:	4b78      	ldr	r3, [pc, #480]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a77      	ldr	r2, [pc, #476]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a7b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	e01d      	b.n	800a7f8 <HAL_RCC_OscConfig+0xd4>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7c4:	d10c      	bne.n	800a7e0 <HAL_RCC_OscConfig+0xbc>
 800a7c6:	4b72      	ldr	r3, [pc, #456]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a71      	ldr	r2, [pc, #452]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a7cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7d0:	6013      	str	r3, [r2, #0]
 800a7d2:	4b6f      	ldr	r3, [pc, #444]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a6e      	ldr	r2, [pc, #440]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a7d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7dc:	6013      	str	r3, [r2, #0]
 800a7de:	e00b      	b.n	800a7f8 <HAL_RCC_OscConfig+0xd4>
 800a7e0:	4b6b      	ldr	r3, [pc, #428]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a6a      	ldr	r2, [pc, #424]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a7e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7ea:	6013      	str	r3, [r2, #0]
 800a7ec:	4b68      	ldr	r3, [pc, #416]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a67      	ldr	r2, [pc, #412]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a7f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d013      	beq.n	800a828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a800:	f7fd ff4c 	bl	800869c <HAL_GetTick>
 800a804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a806:	e008      	b.n	800a81a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a808:	f7fd ff48 	bl	800869c <HAL_GetTick>
 800a80c:	4602      	mov	r2, r0
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	2b64      	cmp	r3, #100	; 0x64
 800a814:	d901      	bls.n	800a81a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e200      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a81a:	4b5d      	ldr	r3, [pc, #372]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d0f0      	beq.n	800a808 <HAL_RCC_OscConfig+0xe4>
 800a826:	e014      	b.n	800a852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a828:	f7fd ff38 	bl	800869c <HAL_GetTick>
 800a82c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a82e:	e008      	b.n	800a842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a830:	f7fd ff34 	bl	800869c <HAL_GetTick>
 800a834:	4602      	mov	r2, r0
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	2b64      	cmp	r3, #100	; 0x64
 800a83c:	d901      	bls.n	800a842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	e1ec      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a842:	4b53      	ldr	r3, [pc, #332]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1f0      	bne.n	800a830 <HAL_RCC_OscConfig+0x10c>
 800a84e:	e000      	b.n	800a852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 0302 	and.w	r3, r3, #2
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d063      	beq.n	800a926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a85e:	4b4c      	ldr	r3, [pc, #304]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	f003 030c 	and.w	r3, r3, #12
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00b      	beq.n	800a882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a86a:	4b49      	ldr	r3, [pc, #292]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	f003 030c 	and.w	r3, r3, #12
 800a872:	2b08      	cmp	r3, #8
 800a874:	d11c      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x18c>
 800a876:	4b46      	ldr	r3, [pc, #280]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d116      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a882:	4b43      	ldr	r3, [pc, #268]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 0302 	and.w	r3, r3, #2
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d005      	beq.n	800a89a <HAL_RCC_OscConfig+0x176>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d001      	beq.n	800a89a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	e1c0      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a89a:	4b3d      	ldr	r3, [pc, #244]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	695b      	ldr	r3, [r3, #20]
 800a8a6:	00db      	lsls	r3, r3, #3
 800a8a8:	4939      	ldr	r1, [pc, #228]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8ae:	e03a      	b.n	800a926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d020      	beq.n	800a8fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a8b8:	4b36      	ldr	r3, [pc, #216]	; (800a994 <HAL_RCC_OscConfig+0x270>)
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8be:	f7fd feed 	bl	800869c <HAL_GetTick>
 800a8c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8c4:	e008      	b.n	800a8d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8c6:	f7fd fee9 	bl	800869c <HAL_GetTick>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d901      	bls.n	800a8d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	e1a1      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8d8:	4b2d      	ldr	r3, [pc, #180]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 0302 	and.w	r3, r3, #2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d0f0      	beq.n	800a8c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8e4:	4b2a      	ldr	r3, [pc, #168]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	695b      	ldr	r3, [r3, #20]
 800a8f0:	00db      	lsls	r3, r3, #3
 800a8f2:	4927      	ldr	r1, [pc, #156]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	600b      	str	r3, [r1, #0]
 800a8f8:	e015      	b.n	800a926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8fa:	4b26      	ldr	r3, [pc, #152]	; (800a994 <HAL_RCC_OscConfig+0x270>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a900:	f7fd fecc 	bl	800869c <HAL_GetTick>
 800a904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a906:	e008      	b.n	800a91a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a908:	f7fd fec8 	bl	800869c <HAL_GetTick>
 800a90c:	4602      	mov	r2, r0
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	2b02      	cmp	r3, #2
 800a914:	d901      	bls.n	800a91a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e180      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a91a:	4b1d      	ldr	r3, [pc, #116]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f003 0302 	and.w	r3, r3, #2
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1f0      	bne.n	800a908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0308 	and.w	r3, r3, #8
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d03a      	beq.n	800a9a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d019      	beq.n	800a96e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a93a:	4b17      	ldr	r3, [pc, #92]	; (800a998 <HAL_RCC_OscConfig+0x274>)
 800a93c:	2201      	movs	r2, #1
 800a93e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a940:	f7fd feac 	bl	800869c <HAL_GetTick>
 800a944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a946:	e008      	b.n	800a95a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a948:	f7fd fea8 	bl	800869c <HAL_GetTick>
 800a94c:	4602      	mov	r2, r0
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	2b02      	cmp	r3, #2
 800a954:	d901      	bls.n	800a95a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e160      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a95a:	4b0d      	ldr	r3, [pc, #52]	; (800a990 <HAL_RCC_OscConfig+0x26c>)
 800a95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95e:	f003 0302 	and.w	r3, r3, #2
 800a962:	2b00      	cmp	r3, #0
 800a964:	d0f0      	beq.n	800a948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a966:	2001      	movs	r0, #1
 800a968:	f000 face 	bl	800af08 <RCC_Delay>
 800a96c:	e01c      	b.n	800a9a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a96e:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <HAL_RCC_OscConfig+0x274>)
 800a970:	2200      	movs	r2, #0
 800a972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a974:	f7fd fe92 	bl	800869c <HAL_GetTick>
 800a978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a97a:	e00f      	b.n	800a99c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a97c:	f7fd fe8e 	bl	800869c <HAL_GetTick>
 800a980:	4602      	mov	r2, r0
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	2b02      	cmp	r3, #2
 800a988:	d908      	bls.n	800a99c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e146      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
 800a98e:	bf00      	nop
 800a990:	40021000 	.word	0x40021000
 800a994:	42420000 	.word	0x42420000
 800a998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a99c:	4b92      	ldr	r3, [pc, #584]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	f003 0302 	and.w	r3, r3, #2
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1e9      	bne.n	800a97c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 0304 	and.w	r3, r3, #4
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 80a6 	beq.w	800ab02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9ba:	4b8b      	ldr	r3, [pc, #556]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10d      	bne.n	800a9e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9c6:	4b88      	ldr	r3, [pc, #544]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	4a87      	ldr	r2, [pc, #540]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800a9cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9d0:	61d3      	str	r3, [r2, #28]
 800a9d2:	4b85      	ldr	r3, [pc, #532]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9da:	60bb      	str	r3, [r7, #8]
 800a9dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9e2:	4b82      	ldr	r3, [pc, #520]	; (800abec <HAL_RCC_OscConfig+0x4c8>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d118      	bne.n	800aa20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9ee:	4b7f      	ldr	r3, [pc, #508]	; (800abec <HAL_RCC_OscConfig+0x4c8>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a7e      	ldr	r2, [pc, #504]	; (800abec <HAL_RCC_OscConfig+0x4c8>)
 800a9f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9fa:	f7fd fe4f 	bl	800869c <HAL_GetTick>
 800a9fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa00:	e008      	b.n	800aa14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa02:	f7fd fe4b 	bl	800869c <HAL_GetTick>
 800aa06:	4602      	mov	r2, r0
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	2b64      	cmp	r3, #100	; 0x64
 800aa0e:	d901      	bls.n	800aa14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aa10:	2303      	movs	r3, #3
 800aa12:	e103      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa14:	4b75      	ldr	r3, [pc, #468]	; (800abec <HAL_RCC_OscConfig+0x4c8>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d0f0      	beq.n	800aa02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d106      	bne.n	800aa36 <HAL_RCC_OscConfig+0x312>
 800aa28:	4b6f      	ldr	r3, [pc, #444]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	4a6e      	ldr	r2, [pc, #440]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aa2e:	f043 0301 	orr.w	r3, r3, #1
 800aa32:	6213      	str	r3, [r2, #32]
 800aa34:	e02d      	b.n	800aa92 <HAL_RCC_OscConfig+0x36e>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10c      	bne.n	800aa58 <HAL_RCC_OscConfig+0x334>
 800aa3e:	4b6a      	ldr	r3, [pc, #424]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	4a69      	ldr	r2, [pc, #420]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aa44:	f023 0301 	bic.w	r3, r3, #1
 800aa48:	6213      	str	r3, [r2, #32]
 800aa4a:	4b67      	ldr	r3, [pc, #412]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	4a66      	ldr	r2, [pc, #408]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aa50:	f023 0304 	bic.w	r3, r3, #4
 800aa54:	6213      	str	r3, [r2, #32]
 800aa56:	e01c      	b.n	800aa92 <HAL_RCC_OscConfig+0x36e>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	2b05      	cmp	r3, #5
 800aa5e:	d10c      	bne.n	800aa7a <HAL_RCC_OscConfig+0x356>
 800aa60:	4b61      	ldr	r3, [pc, #388]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	4a60      	ldr	r2, [pc, #384]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aa66:	f043 0304 	orr.w	r3, r3, #4
 800aa6a:	6213      	str	r3, [r2, #32]
 800aa6c:	4b5e      	ldr	r3, [pc, #376]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aa6e:	6a1b      	ldr	r3, [r3, #32]
 800aa70:	4a5d      	ldr	r2, [pc, #372]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aa72:	f043 0301 	orr.w	r3, r3, #1
 800aa76:	6213      	str	r3, [r2, #32]
 800aa78:	e00b      	b.n	800aa92 <HAL_RCC_OscConfig+0x36e>
 800aa7a:	4b5b      	ldr	r3, [pc, #364]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aa7c:	6a1b      	ldr	r3, [r3, #32]
 800aa7e:	4a5a      	ldr	r2, [pc, #360]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aa80:	f023 0301 	bic.w	r3, r3, #1
 800aa84:	6213      	str	r3, [r2, #32]
 800aa86:	4b58      	ldr	r3, [pc, #352]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	4a57      	ldr	r2, [pc, #348]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aa8c:	f023 0304 	bic.w	r3, r3, #4
 800aa90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d015      	beq.n	800aac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa9a:	f7fd fdff 	bl	800869c <HAL_GetTick>
 800aa9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aaa0:	e00a      	b.n	800aab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aaa2:	f7fd fdfb 	bl	800869c <HAL_GetTick>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	1ad3      	subs	r3, r2, r3
 800aaac:	f241 3288 	movw	r2, #5000	; 0x1388
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d901      	bls.n	800aab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aab4:	2303      	movs	r3, #3
 800aab6:	e0b1      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aab8:	4b4b      	ldr	r3, [pc, #300]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aaba:	6a1b      	ldr	r3, [r3, #32]
 800aabc:	f003 0302 	and.w	r3, r3, #2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d0ee      	beq.n	800aaa2 <HAL_RCC_OscConfig+0x37e>
 800aac4:	e014      	b.n	800aaf0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aac6:	f7fd fde9 	bl	800869c <HAL_GetTick>
 800aaca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aacc:	e00a      	b.n	800aae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aace:	f7fd fde5 	bl	800869c <HAL_GetTick>
 800aad2:	4602      	mov	r2, r0
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aadc:	4293      	cmp	r3, r2
 800aade:	d901      	bls.n	800aae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800aae0:	2303      	movs	r3, #3
 800aae2:	e09b      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aae4:	4b40      	ldr	r3, [pc, #256]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aae6:	6a1b      	ldr	r3, [r3, #32]
 800aae8:	f003 0302 	and.w	r3, r3, #2
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1ee      	bne.n	800aace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d105      	bne.n	800ab02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aaf6:	4b3c      	ldr	r3, [pc, #240]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	4a3b      	ldr	r2, [pc, #236]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aafc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	69db      	ldr	r3, [r3, #28]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f000 8087 	beq.w	800ac1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab0c:	4b36      	ldr	r3, [pc, #216]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	f003 030c 	and.w	r3, r3, #12
 800ab14:	2b08      	cmp	r3, #8
 800ab16:	d061      	beq.n	800abdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	69db      	ldr	r3, [r3, #28]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d146      	bne.n	800abae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab20:	4b33      	ldr	r3, [pc, #204]	; (800abf0 <HAL_RCC_OscConfig+0x4cc>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab26:	f7fd fdb9 	bl	800869c <HAL_GetTick>
 800ab2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab2c:	e008      	b.n	800ab40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab2e:	f7fd fdb5 	bl	800869c <HAL_GetTick>
 800ab32:	4602      	mov	r2, r0
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d901      	bls.n	800ab40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e06d      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab40:	4b29      	ldr	r3, [pc, #164]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1f0      	bne.n	800ab2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a1b      	ldr	r3, [r3, #32]
 800ab50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab54:	d108      	bne.n	800ab68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ab56:	4b24      	ldr	r3, [pc, #144]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	4921      	ldr	r1, [pc, #132]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800ab64:	4313      	orrs	r3, r2
 800ab66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab68:	4b1f      	ldr	r3, [pc, #124]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a19      	ldr	r1, [r3, #32]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab78:	430b      	orrs	r3, r1
 800ab7a:	491b      	ldr	r1, [pc, #108]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab80:	4b1b      	ldr	r3, [pc, #108]	; (800abf0 <HAL_RCC_OscConfig+0x4cc>)
 800ab82:	2201      	movs	r2, #1
 800ab84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab86:	f7fd fd89 	bl	800869c <HAL_GetTick>
 800ab8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab8c:	e008      	b.n	800aba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab8e:	f7fd fd85 	bl	800869c <HAL_GetTick>
 800ab92:	4602      	mov	r2, r0
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d901      	bls.n	800aba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	e03d      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aba0:	4b11      	ldr	r3, [pc, #68]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d0f0      	beq.n	800ab8e <HAL_RCC_OscConfig+0x46a>
 800abac:	e035      	b.n	800ac1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abae:	4b10      	ldr	r3, [pc, #64]	; (800abf0 <HAL_RCC_OscConfig+0x4cc>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abb4:	f7fd fd72 	bl	800869c <HAL_GetTick>
 800abb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abba:	e008      	b.n	800abce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abbc:	f7fd fd6e 	bl	800869c <HAL_GetTick>
 800abc0:	4602      	mov	r2, r0
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d901      	bls.n	800abce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800abca:	2303      	movs	r3, #3
 800abcc:	e026      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abce:	4b06      	ldr	r3, [pc, #24]	; (800abe8 <HAL_RCC_OscConfig+0x4c4>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1f0      	bne.n	800abbc <HAL_RCC_OscConfig+0x498>
 800abda:	e01e      	b.n	800ac1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	69db      	ldr	r3, [r3, #28]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d107      	bne.n	800abf4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	e019      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
 800abe8:	40021000 	.word	0x40021000
 800abec:	40007000 	.word	0x40007000
 800abf0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800abf4:	4b0b      	ldr	r3, [pc, #44]	; (800ac24 <HAL_RCC_OscConfig+0x500>)
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a1b      	ldr	r3, [r3, #32]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d106      	bne.n	800ac16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d001      	beq.n	800ac1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e000      	b.n	800ac1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3718      	adds	r7, #24
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	40021000 	.word	0x40021000

0800ac28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d101      	bne.n	800ac3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e0d0      	b.n	800adde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ac3c:	4b6a      	ldr	r3, [pc, #424]	; (800ade8 <HAL_RCC_ClockConfig+0x1c0>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 0307 	and.w	r3, r3, #7
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d910      	bls.n	800ac6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac4a:	4b67      	ldr	r3, [pc, #412]	; (800ade8 <HAL_RCC_ClockConfig+0x1c0>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f023 0207 	bic.w	r2, r3, #7
 800ac52:	4965      	ldr	r1, [pc, #404]	; (800ade8 <HAL_RCC_ClockConfig+0x1c0>)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac5a:	4b63      	ldr	r3, [pc, #396]	; (800ade8 <HAL_RCC_ClockConfig+0x1c0>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 0307 	and.w	r3, r3, #7
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d001      	beq.n	800ac6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e0b8      	b.n	800adde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 0302 	and.w	r3, r3, #2
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d020      	beq.n	800acba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0304 	and.w	r3, r3, #4
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d005      	beq.n	800ac90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac84:	4b59      	ldr	r3, [pc, #356]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	4a58      	ldr	r2, [pc, #352]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800ac8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ac8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 0308 	and.w	r3, r3, #8
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d005      	beq.n	800aca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac9c:	4b53      	ldr	r3, [pc, #332]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	4a52      	ldr	r2, [pc, #328]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800aca2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800aca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aca8:	4b50      	ldr	r3, [pc, #320]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	494d      	ldr	r1, [pc, #308]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800acb6:	4313      	orrs	r3, r2
 800acb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d040      	beq.n	800ad48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d107      	bne.n	800acde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acce:	4b47      	ldr	r3, [pc, #284]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d115      	bne.n	800ad06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e07f      	b.n	800adde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d107      	bne.n	800acf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ace6:	4b41      	ldr	r3, [pc, #260]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d109      	bne.n	800ad06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e073      	b.n	800adde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acf6:	4b3d      	ldr	r3, [pc, #244]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 0302 	and.w	r3, r3, #2
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e06b      	b.n	800adde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad06:	4b39      	ldr	r3, [pc, #228]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f023 0203 	bic.w	r2, r3, #3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	4936      	ldr	r1, [pc, #216]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800ad14:	4313      	orrs	r3, r2
 800ad16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ad18:	f7fd fcc0 	bl	800869c <HAL_GetTick>
 800ad1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad1e:	e00a      	b.n	800ad36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad20:	f7fd fcbc 	bl	800869c <HAL_GetTick>
 800ad24:	4602      	mov	r2, r0
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	1ad3      	subs	r3, r2, r3
 800ad2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d901      	bls.n	800ad36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ad32:	2303      	movs	r3, #3
 800ad34:	e053      	b.n	800adde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad36:	4b2d      	ldr	r3, [pc, #180]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	f003 020c 	and.w	r2, r3, #12
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d1eb      	bne.n	800ad20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ad48:	4b27      	ldr	r3, [pc, #156]	; (800ade8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 0307 	and.w	r3, r3, #7
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d210      	bcs.n	800ad78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad56:	4b24      	ldr	r3, [pc, #144]	; (800ade8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f023 0207 	bic.w	r2, r3, #7
 800ad5e:	4922      	ldr	r1, [pc, #136]	; (800ade8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad66:	4b20      	ldr	r3, [pc, #128]	; (800ade8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0307 	and.w	r3, r3, #7
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d001      	beq.n	800ad78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e032      	b.n	800adde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 0304 	and.w	r3, r3, #4
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d008      	beq.n	800ad96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad84:	4b19      	ldr	r3, [pc, #100]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	4916      	ldr	r1, [pc, #88]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800ad92:	4313      	orrs	r3, r2
 800ad94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0308 	and.w	r3, r3, #8
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d009      	beq.n	800adb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ada2:	4b12      	ldr	r3, [pc, #72]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	00db      	lsls	r3, r3, #3
 800adb0:	490e      	ldr	r1, [pc, #56]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800adb2:	4313      	orrs	r3, r2
 800adb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800adb6:	f000 f821 	bl	800adfc <HAL_RCC_GetSysClockFreq>
 800adba:	4602      	mov	r2, r0
 800adbc:	4b0b      	ldr	r3, [pc, #44]	; (800adec <HAL_RCC_ClockConfig+0x1c4>)
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	091b      	lsrs	r3, r3, #4
 800adc2:	f003 030f 	and.w	r3, r3, #15
 800adc6:	490a      	ldr	r1, [pc, #40]	; (800adf0 <HAL_RCC_ClockConfig+0x1c8>)
 800adc8:	5ccb      	ldrb	r3, [r1, r3]
 800adca:	fa22 f303 	lsr.w	r3, r2, r3
 800adce:	4a09      	ldr	r2, [pc, #36]	; (800adf4 <HAL_RCC_ClockConfig+0x1cc>)
 800add0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800add2:	4b09      	ldr	r3, [pc, #36]	; (800adf8 <HAL_RCC_ClockConfig+0x1d0>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4618      	mov	r0, r3
 800add8:	f7fd fc1e 	bl	8008618 <HAL_InitTick>

  return HAL_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	40022000 	.word	0x40022000
 800adec:	40021000 	.word	0x40021000
 800adf0:	0800dc3c 	.word	0x0800dc3c
 800adf4:	200000a0 	.word	0x200000a0
 800adf8:	200000a4 	.word	0x200000a4

0800adfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b087      	sub	sp, #28
 800ae00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ae02:	2300      	movs	r3, #0
 800ae04:	60fb      	str	r3, [r7, #12]
 800ae06:	2300      	movs	r3, #0
 800ae08:	60bb      	str	r3, [r7, #8]
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	617b      	str	r3, [r7, #20]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ae12:	2300      	movs	r3, #0
 800ae14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ae16:	4b1e      	ldr	r3, [pc, #120]	; (800ae90 <HAL_RCC_GetSysClockFreq+0x94>)
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f003 030c 	and.w	r3, r3, #12
 800ae22:	2b04      	cmp	r3, #4
 800ae24:	d002      	beq.n	800ae2c <HAL_RCC_GetSysClockFreq+0x30>
 800ae26:	2b08      	cmp	r3, #8
 800ae28:	d003      	beq.n	800ae32 <HAL_RCC_GetSysClockFreq+0x36>
 800ae2a:	e027      	b.n	800ae7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ae2c:	4b19      	ldr	r3, [pc, #100]	; (800ae94 <HAL_RCC_GetSysClockFreq+0x98>)
 800ae2e:	613b      	str	r3, [r7, #16]
      break;
 800ae30:	e027      	b.n	800ae82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	0c9b      	lsrs	r3, r3, #18
 800ae36:	f003 030f 	and.w	r3, r3, #15
 800ae3a:	4a17      	ldr	r2, [pc, #92]	; (800ae98 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ae3c:	5cd3      	ldrb	r3, [r2, r3]
 800ae3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d010      	beq.n	800ae6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ae4a:	4b11      	ldr	r3, [pc, #68]	; (800ae90 <HAL_RCC_GetSysClockFreq+0x94>)
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	0c5b      	lsrs	r3, r3, #17
 800ae50:	f003 0301 	and.w	r3, r3, #1
 800ae54:	4a11      	ldr	r2, [pc, #68]	; (800ae9c <HAL_RCC_GetSysClockFreq+0xa0>)
 800ae56:	5cd3      	ldrb	r3, [r2, r3]
 800ae58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a0d      	ldr	r2, [pc, #52]	; (800ae94 <HAL_RCC_GetSysClockFreq+0x98>)
 800ae5e:	fb03 f202 	mul.w	r2, r3, r2
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae68:	617b      	str	r3, [r7, #20]
 800ae6a:	e004      	b.n	800ae76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a0c      	ldr	r2, [pc, #48]	; (800aea0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ae70:	fb02 f303 	mul.w	r3, r2, r3
 800ae74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	613b      	str	r3, [r7, #16]
      break;
 800ae7a:	e002      	b.n	800ae82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ae7c:	4b05      	ldr	r3, [pc, #20]	; (800ae94 <HAL_RCC_GetSysClockFreq+0x98>)
 800ae7e:	613b      	str	r3, [r7, #16]
      break;
 800ae80:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae82:	693b      	ldr	r3, [r7, #16]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	371c      	adds	r7, #28
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bc80      	pop	{r7}
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	40021000 	.word	0x40021000
 800ae94:	007a1200 	.word	0x007a1200
 800ae98:	0800dc54 	.word	0x0800dc54
 800ae9c:	0800dc64 	.word	0x0800dc64
 800aea0:	003d0900 	.word	0x003d0900

0800aea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aea4:	b480      	push	{r7}
 800aea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aea8:	4b02      	ldr	r3, [pc, #8]	; (800aeb4 <HAL_RCC_GetHCLKFreq+0x10>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bc80      	pop	{r7}
 800aeb2:	4770      	bx	lr
 800aeb4:	200000a0 	.word	0x200000a0

0800aeb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aebc:	f7ff fff2 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800aec0:	4602      	mov	r2, r0
 800aec2:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	0a1b      	lsrs	r3, r3, #8
 800aec8:	f003 0307 	and.w	r3, r3, #7
 800aecc:	4903      	ldr	r1, [pc, #12]	; (800aedc <HAL_RCC_GetPCLK1Freq+0x24>)
 800aece:	5ccb      	ldrb	r3, [r1, r3]
 800aed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	40021000 	.word	0x40021000
 800aedc:	0800dc4c 	.word	0x0800dc4c

0800aee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aee4:	f7ff ffde 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800aee8:	4602      	mov	r2, r0
 800aeea:	4b05      	ldr	r3, [pc, #20]	; (800af00 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	0adb      	lsrs	r3, r3, #11
 800aef0:	f003 0307 	and.w	r3, r3, #7
 800aef4:	4903      	ldr	r1, [pc, #12]	; (800af04 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aef6:	5ccb      	ldrb	r3, [r1, r3]
 800aef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	40021000 	.word	0x40021000
 800af04:	0800dc4c 	.word	0x0800dc4c

0800af08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800af10:	4b0a      	ldr	r3, [pc, #40]	; (800af3c <RCC_Delay+0x34>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a0a      	ldr	r2, [pc, #40]	; (800af40 <RCC_Delay+0x38>)
 800af16:	fba2 2303 	umull	r2, r3, r2, r3
 800af1a:	0a5b      	lsrs	r3, r3, #9
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	fb02 f303 	mul.w	r3, r2, r3
 800af22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800af24:	bf00      	nop
  }
  while (Delay --);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	1e5a      	subs	r2, r3, #1
 800af2a:	60fa      	str	r2, [r7, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1f9      	bne.n	800af24 <RCC_Delay+0x1c>
}
 800af30:	bf00      	nop
 800af32:	bf00      	nop
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	bc80      	pop	{r7}
 800af3a:	4770      	bx	lr
 800af3c:	200000a0 	.word	0x200000a0
 800af40:	10624dd3 	.word	0x10624dd3

0800af44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e041      	b.n	800afda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d106      	bne.n	800af70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7fd fa26 	bl	80083bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2202      	movs	r2, #2
 800af74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	3304      	adds	r3, #4
 800af80:	4619      	mov	r1, r3
 800af82:	4610      	mov	r0, r2
 800af84:	f000 fa82 	bl	800b48c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
	...

0800afe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d001      	beq.n	800affc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e044      	b.n	800b086 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2202      	movs	r2, #2
 800b000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68da      	ldr	r2, [r3, #12]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f042 0201 	orr.w	r2, r2, #1
 800b012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a1d      	ldr	r2, [pc, #116]	; (800b090 <HAL_TIM_Base_Start_IT+0xac>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d018      	beq.n	800b050 <HAL_TIM_Base_Start_IT+0x6c>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a1c      	ldr	r2, [pc, #112]	; (800b094 <HAL_TIM_Base_Start_IT+0xb0>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d013      	beq.n	800b050 <HAL_TIM_Base_Start_IT+0x6c>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b030:	d00e      	beq.n	800b050 <HAL_TIM_Base_Start_IT+0x6c>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a18      	ldr	r2, [pc, #96]	; (800b098 <HAL_TIM_Base_Start_IT+0xb4>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d009      	beq.n	800b050 <HAL_TIM_Base_Start_IT+0x6c>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a16      	ldr	r2, [pc, #88]	; (800b09c <HAL_TIM_Base_Start_IT+0xb8>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d004      	beq.n	800b050 <HAL_TIM_Base_Start_IT+0x6c>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a15      	ldr	r2, [pc, #84]	; (800b0a0 <HAL_TIM_Base_Start_IT+0xbc>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d111      	bne.n	800b074 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	f003 0307 	and.w	r3, r3, #7
 800b05a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2b06      	cmp	r3, #6
 800b060:	d010      	beq.n	800b084 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f042 0201 	orr.w	r2, r2, #1
 800b070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b072:	e007      	b.n	800b084 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f042 0201 	orr.w	r2, r2, #1
 800b082:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3714      	adds	r7, #20
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bc80      	pop	{r7}
 800b08e:	4770      	bx	lr
 800b090:	40012c00 	.word	0x40012c00
 800b094:	40013400 	.word	0x40013400
 800b098:	40000400 	.word	0x40000400
 800b09c:	40000800 	.word	0x40000800
 800b0a0:	40000c00 	.word	0x40000c00

0800b0a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	f003 0302 	and.w	r3, r3, #2
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d122      	bne.n	800b100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	f003 0302 	and.w	r3, r3, #2
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	d11b      	bne.n	800b100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f06f 0202 	mvn.w	r2, #2
 800b0d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	f003 0303 	and.w	r3, r3, #3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d003      	beq.n	800b0ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 f9b4 	bl	800b454 <HAL_TIM_IC_CaptureCallback>
 800b0ec:	e005      	b.n	800b0fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f9a7 	bl	800b442 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 f9b6 	bl	800b466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	f003 0304 	and.w	r3, r3, #4
 800b10a:	2b04      	cmp	r3, #4
 800b10c:	d122      	bne.n	800b154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b04      	cmp	r3, #4
 800b11a:	d11b      	bne.n	800b154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f06f 0204 	mvn.w	r2, #4
 800b124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2202      	movs	r2, #2
 800b12a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f98a 	bl	800b454 <HAL_TIM_IC_CaptureCallback>
 800b140:	e005      	b.n	800b14e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 f97d 	bl	800b442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f98c 	bl	800b466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	f003 0308 	and.w	r3, r3, #8
 800b15e:	2b08      	cmp	r3, #8
 800b160:	d122      	bne.n	800b1a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	f003 0308 	and.w	r3, r3, #8
 800b16c:	2b08      	cmp	r3, #8
 800b16e:	d11b      	bne.n	800b1a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f06f 0208 	mvn.w	r2, #8
 800b178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2204      	movs	r2, #4
 800b17e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	69db      	ldr	r3, [r3, #28]
 800b186:	f003 0303 	and.w	r3, r3, #3
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f960 	bl	800b454 <HAL_TIM_IC_CaptureCallback>
 800b194:	e005      	b.n	800b1a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 f953 	bl	800b442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 f962 	bl	800b466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	f003 0310 	and.w	r3, r3, #16
 800b1b2:	2b10      	cmp	r3, #16
 800b1b4:	d122      	bne.n	800b1fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	f003 0310 	and.w	r3, r3, #16
 800b1c0:	2b10      	cmp	r3, #16
 800b1c2:	d11b      	bne.n	800b1fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f06f 0210 	mvn.w	r2, #16
 800b1cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2208      	movs	r2, #8
 800b1d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	69db      	ldr	r3, [r3, #28]
 800b1da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d003      	beq.n	800b1ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 f936 	bl	800b454 <HAL_TIM_IC_CaptureCallback>
 800b1e8:	e005      	b.n	800b1f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f929 	bl	800b442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 f938 	bl	800b466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	2b01      	cmp	r3, #1
 800b208:	d10e      	bne.n	800b228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	2b01      	cmp	r3, #1
 800b216:	d107      	bne.n	800b228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f06f 0201 	mvn.w	r2, #1
 800b220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7fc fd62 	bl	8007cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b232:	2b80      	cmp	r3, #128	; 0x80
 800b234:	d10e      	bne.n	800b254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b240:	2b80      	cmp	r3, #128	; 0x80
 800b242:	d107      	bne.n	800b254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b24c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 faa1 	bl	800b796 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b25e:	2b40      	cmp	r3, #64	; 0x40
 800b260:	d10e      	bne.n	800b280 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b26c:	2b40      	cmp	r3, #64	; 0x40
 800b26e:	d107      	bne.n	800b280 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 f8fc 	bl	800b478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	f003 0320 	and.w	r3, r3, #32
 800b28a:	2b20      	cmp	r3, #32
 800b28c:	d10e      	bne.n	800b2ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	f003 0320 	and.w	r3, r3, #32
 800b298:	2b20      	cmp	r3, #32
 800b29a:	d107      	bne.n	800b2ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f06f 0220 	mvn.w	r2, #32
 800b2a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 fa6c 	bl	800b784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d101      	bne.n	800b2d0 <HAL_TIM_ConfigClockSource+0x1c>
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	e0b4      	b.n	800b43a <HAL_TIM_ConfigClockSource+0x186>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2202      	movs	r2, #2
 800b2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b2ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b308:	d03e      	beq.n	800b388 <HAL_TIM_ConfigClockSource+0xd4>
 800b30a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b30e:	f200 8087 	bhi.w	800b420 <HAL_TIM_ConfigClockSource+0x16c>
 800b312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b316:	f000 8086 	beq.w	800b426 <HAL_TIM_ConfigClockSource+0x172>
 800b31a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b31e:	d87f      	bhi.n	800b420 <HAL_TIM_ConfigClockSource+0x16c>
 800b320:	2b70      	cmp	r3, #112	; 0x70
 800b322:	d01a      	beq.n	800b35a <HAL_TIM_ConfigClockSource+0xa6>
 800b324:	2b70      	cmp	r3, #112	; 0x70
 800b326:	d87b      	bhi.n	800b420 <HAL_TIM_ConfigClockSource+0x16c>
 800b328:	2b60      	cmp	r3, #96	; 0x60
 800b32a:	d050      	beq.n	800b3ce <HAL_TIM_ConfigClockSource+0x11a>
 800b32c:	2b60      	cmp	r3, #96	; 0x60
 800b32e:	d877      	bhi.n	800b420 <HAL_TIM_ConfigClockSource+0x16c>
 800b330:	2b50      	cmp	r3, #80	; 0x50
 800b332:	d03c      	beq.n	800b3ae <HAL_TIM_ConfigClockSource+0xfa>
 800b334:	2b50      	cmp	r3, #80	; 0x50
 800b336:	d873      	bhi.n	800b420 <HAL_TIM_ConfigClockSource+0x16c>
 800b338:	2b40      	cmp	r3, #64	; 0x40
 800b33a:	d058      	beq.n	800b3ee <HAL_TIM_ConfigClockSource+0x13a>
 800b33c:	2b40      	cmp	r3, #64	; 0x40
 800b33e:	d86f      	bhi.n	800b420 <HAL_TIM_ConfigClockSource+0x16c>
 800b340:	2b30      	cmp	r3, #48	; 0x30
 800b342:	d064      	beq.n	800b40e <HAL_TIM_ConfigClockSource+0x15a>
 800b344:	2b30      	cmp	r3, #48	; 0x30
 800b346:	d86b      	bhi.n	800b420 <HAL_TIM_ConfigClockSource+0x16c>
 800b348:	2b20      	cmp	r3, #32
 800b34a:	d060      	beq.n	800b40e <HAL_TIM_ConfigClockSource+0x15a>
 800b34c:	2b20      	cmp	r3, #32
 800b34e:	d867      	bhi.n	800b420 <HAL_TIM_ConfigClockSource+0x16c>
 800b350:	2b00      	cmp	r3, #0
 800b352:	d05c      	beq.n	800b40e <HAL_TIM_ConfigClockSource+0x15a>
 800b354:	2b10      	cmp	r3, #16
 800b356:	d05a      	beq.n	800b40e <HAL_TIM_ConfigClockSource+0x15a>
 800b358:	e062      	b.n	800b420 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b36a:	f000 f980 	bl	800b66e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b37c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	609a      	str	r2, [r3, #8]
      break;
 800b386:	e04f      	b.n	800b428 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b398:	f000 f969 	bl	800b66e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	689a      	ldr	r2, [r3, #8]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3aa:	609a      	str	r2, [r3, #8]
      break;
 800b3ac:	e03c      	b.n	800b428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	f000 f8e0 	bl	800b580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2150      	movs	r1, #80	; 0x50
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f000 f937 	bl	800b63a <TIM_ITRx_SetConfig>
      break;
 800b3cc:	e02c      	b.n	800b428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3da:	461a      	mov	r2, r3
 800b3dc:	f000 f8fe 	bl	800b5dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2160      	movs	r1, #96	; 0x60
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f000 f927 	bl	800b63a <TIM_ITRx_SetConfig>
      break;
 800b3ec:	e01c      	b.n	800b428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	f000 f8c0 	bl	800b580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2140      	movs	r1, #64	; 0x40
 800b406:	4618      	mov	r0, r3
 800b408:	f000 f917 	bl	800b63a <TIM_ITRx_SetConfig>
      break;
 800b40c:	e00c      	b.n	800b428 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4619      	mov	r1, r3
 800b418:	4610      	mov	r0, r2
 800b41a:	f000 f90e 	bl	800b63a <TIM_ITRx_SetConfig>
      break;
 800b41e:	e003      	b.n	800b428 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b420:	2301      	movs	r3, #1
 800b422:	73fb      	strb	r3, [r7, #15]
      break;
 800b424:	e000      	b.n	800b428 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b438:	7bfb      	ldrb	r3, [r7, #15]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}

0800b442 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b442:	b480      	push	{r7}
 800b444:	b083      	sub	sp, #12
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b44a:	bf00      	nop
 800b44c:	370c      	adds	r7, #12
 800b44e:	46bd      	mov	sp, r7
 800b450:	bc80      	pop	{r7}
 800b452:	4770      	bx	lr

0800b454 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b45c:	bf00      	nop
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	bc80      	pop	{r7}
 800b464:	4770      	bx	lr

0800b466 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b466:	b480      	push	{r7}
 800b468:	b083      	sub	sp, #12
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b46e:	bf00      	nop
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	bc80      	pop	{r7}
 800b476:	4770      	bx	lr

0800b478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	bc80      	pop	{r7}
 800b488:	4770      	bx	lr
	...

0800b48c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a33      	ldr	r2, [pc, #204]	; (800b56c <TIM_Base_SetConfig+0xe0>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d013      	beq.n	800b4cc <TIM_Base_SetConfig+0x40>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a32      	ldr	r2, [pc, #200]	; (800b570 <TIM_Base_SetConfig+0xe4>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d00f      	beq.n	800b4cc <TIM_Base_SetConfig+0x40>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4b2:	d00b      	beq.n	800b4cc <TIM_Base_SetConfig+0x40>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a2f      	ldr	r2, [pc, #188]	; (800b574 <TIM_Base_SetConfig+0xe8>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d007      	beq.n	800b4cc <TIM_Base_SetConfig+0x40>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a2e      	ldr	r2, [pc, #184]	; (800b578 <TIM_Base_SetConfig+0xec>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d003      	beq.n	800b4cc <TIM_Base_SetConfig+0x40>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a2d      	ldr	r2, [pc, #180]	; (800b57c <TIM_Base_SetConfig+0xf0>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d108      	bne.n	800b4de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a22      	ldr	r2, [pc, #136]	; (800b56c <TIM_Base_SetConfig+0xe0>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d013      	beq.n	800b50e <TIM_Base_SetConfig+0x82>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4a21      	ldr	r2, [pc, #132]	; (800b570 <TIM_Base_SetConfig+0xe4>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d00f      	beq.n	800b50e <TIM_Base_SetConfig+0x82>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4f4:	d00b      	beq.n	800b50e <TIM_Base_SetConfig+0x82>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a1e      	ldr	r2, [pc, #120]	; (800b574 <TIM_Base_SetConfig+0xe8>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d007      	beq.n	800b50e <TIM_Base_SetConfig+0x82>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a1d      	ldr	r2, [pc, #116]	; (800b578 <TIM_Base_SetConfig+0xec>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d003      	beq.n	800b50e <TIM_Base_SetConfig+0x82>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a1c      	ldr	r2, [pc, #112]	; (800b57c <TIM_Base_SetConfig+0xf0>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d108      	bne.n	800b520 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	689a      	ldr	r2, [r3, #8]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a09      	ldr	r2, [pc, #36]	; (800b56c <TIM_Base_SetConfig+0xe0>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d003      	beq.n	800b554 <TIM_Base_SetConfig+0xc8>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a08      	ldr	r2, [pc, #32]	; (800b570 <TIM_Base_SetConfig+0xe4>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d103      	bne.n	800b55c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	691a      	ldr	r2, [r3, #16]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	615a      	str	r2, [r3, #20]
}
 800b562:	bf00      	nop
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	bc80      	pop	{r7}
 800b56a:	4770      	bx	lr
 800b56c:	40012c00 	.word	0x40012c00
 800b570:	40013400 	.word	0x40013400
 800b574:	40000400 	.word	0x40000400
 800b578:	40000800 	.word	0x40000800
 800b57c:	40000c00 	.word	0x40000c00

0800b580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b580:	b480      	push	{r7}
 800b582:	b087      	sub	sp, #28
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6a1b      	ldr	r3, [r3, #32]
 800b590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6a1b      	ldr	r3, [r3, #32]
 800b596:	f023 0201 	bic.w	r2, r3, #1
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	699b      	ldr	r3, [r3, #24]
 800b5a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	011b      	lsls	r3, r3, #4
 800b5b0:	693a      	ldr	r2, [r7, #16]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f023 030a 	bic.w	r3, r3, #10
 800b5bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	693a      	ldr	r2, [r7, #16]
 800b5ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	621a      	str	r2, [r3, #32]
}
 800b5d2:	bf00      	nop
 800b5d4:	371c      	adds	r7, #28
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bc80      	pop	{r7}
 800b5da:	4770      	bx	lr

0800b5dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b087      	sub	sp, #28
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6a1b      	ldr	r3, [r3, #32]
 800b5ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	f023 0210 	bic.w	r2, r3, #16
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	699b      	ldr	r3, [r3, #24]
 800b5fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	031b      	lsls	r3, r3, #12
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	4313      	orrs	r3, r2
 800b610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b618:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	011b      	lsls	r3, r3, #4
 800b61e:	697a      	ldr	r2, [r7, #20]
 800b620:	4313      	orrs	r3, r2
 800b622:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	693a      	ldr	r2, [r7, #16]
 800b628:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	697a      	ldr	r2, [r7, #20]
 800b62e:	621a      	str	r2, [r3, #32]
}
 800b630:	bf00      	nop
 800b632:	371c      	adds	r7, #28
 800b634:	46bd      	mov	sp, r7
 800b636:	bc80      	pop	{r7}
 800b638:	4770      	bx	lr

0800b63a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b63a:	b480      	push	{r7}
 800b63c:	b085      	sub	sp, #20
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
 800b642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	4313      	orrs	r3, r2
 800b658:	f043 0307 	orr.w	r3, r3, #7
 800b65c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	68fa      	ldr	r2, [r7, #12]
 800b662:	609a      	str	r2, [r3, #8]
}
 800b664:	bf00      	nop
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	bc80      	pop	{r7}
 800b66c:	4770      	bx	lr

0800b66e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b66e:	b480      	push	{r7}
 800b670:	b087      	sub	sp, #28
 800b672:	af00      	add	r7, sp, #0
 800b674:	60f8      	str	r0, [r7, #12]
 800b676:	60b9      	str	r1, [r7, #8]
 800b678:	607a      	str	r2, [r7, #4]
 800b67a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b688:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	021a      	lsls	r2, r3, #8
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	431a      	orrs	r2, r3
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	4313      	orrs	r3, r2
 800b696:	697a      	ldr	r2, [r7, #20]
 800b698:	4313      	orrs	r3, r2
 800b69a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	697a      	ldr	r2, [r7, #20]
 800b6a0:	609a      	str	r2, [r3, #8]
}
 800b6a2:	bf00      	nop
 800b6a4:	371c      	adds	r7, #28
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bc80      	pop	{r7}
 800b6aa:	4770      	bx	lr

0800b6ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d101      	bne.n	800b6c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6c0:	2302      	movs	r3, #2
 800b6c2:	e050      	b.n	800b766 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2202      	movs	r2, #2
 800b6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a1b      	ldr	r2, [pc, #108]	; (800b770 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d018      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a19      	ldr	r2, [pc, #100]	; (800b774 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d013      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b71a:	d00e      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a15      	ldr	r2, [pc, #84]	; (800b778 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d009      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a14      	ldr	r2, [pc, #80]	; (800b77c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d004      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a12      	ldr	r2, [pc, #72]	; (800b780 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d10c      	bne.n	800b754 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	4313      	orrs	r3, r2
 800b74a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2201      	movs	r2, #1
 800b758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3714      	adds	r7, #20
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bc80      	pop	{r7}
 800b76e:	4770      	bx	lr
 800b770:	40012c00 	.word	0x40012c00
 800b774:	40013400 	.word	0x40013400
 800b778:	40000400 	.word	0x40000400
 800b77c:	40000800 	.word	0x40000800
 800b780:	40000c00 	.word	0x40000c00

0800b784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b78c:	bf00      	nop
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	bc80      	pop	{r7}
 800b794:	4770      	bx	lr

0800b796 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b796:	b480      	push	{r7}
 800b798:	b083      	sub	sp, #12
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b79e:	bf00      	nop
 800b7a0:	370c      	adds	r7, #12
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bc80      	pop	{r7}
 800b7a6:	4770      	bx	lr

0800b7a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d101      	bne.n	800b7ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e042      	b.n	800b840 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d106      	bne.n	800b7d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7fc fe1a 	bl	8008408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2224      	movs	r2, #36	; 0x24
 800b7d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68da      	ldr	r2, [r3, #12]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b7ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 fcb5 	bl	800c15c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	691a      	ldr	r2, [r3, #16]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	695a      	ldr	r2, [r3, #20]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68da      	ldr	r2, [r3, #12]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2220      	movs	r2, #32
 800b82c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2220      	movs	r2, #32
 800b834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	4613      	mov	r3, r2
 800b854:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	2b20      	cmp	r3, #32
 800b860:	d121      	bne.n	800b8a6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <HAL_UART_Transmit_IT+0x26>
 800b868:	88fb      	ldrh	r3, [r7, #6]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d101      	bne.n	800b872 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	e01a      	b.n	800b8a8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	88fa      	ldrh	r2, [r7, #6]
 800b87c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	88fa      	ldrh	r2, [r7, #6]
 800b882:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2200      	movs	r2, #0
 800b888:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2221      	movs	r2, #33	; 0x21
 800b88e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68da      	ldr	r2, [r3, #12]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b8a0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	e000      	b.n	800b8a8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b8a6:	2302      	movs	r3, #2
  }
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bc80      	pop	{r7}
 800b8b0:	4770      	bx	lr
	...

0800b8b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b0ba      	sub	sp, #232	; 0xe8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	695b      	ldr	r3, [r3, #20]
 800b8d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ea:	f003 030f 	and.w	r3, r3, #15
 800b8ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b8f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10f      	bne.n	800b91a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b8fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8fe:	f003 0320 	and.w	r3, r3, #32
 800b902:	2b00      	cmp	r3, #0
 800b904:	d009      	beq.n	800b91a <HAL_UART_IRQHandler+0x66>
 800b906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b90a:	f003 0320 	and.w	r3, r3, #32
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fb63 	bl	800bfde <UART_Receive_IT>
      return;
 800b918:	e25b      	b.n	800bdd2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b91a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f000 80de 	beq.w	800bae0 <HAL_UART_IRQHandler+0x22c>
 800b924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b928:	f003 0301 	and.w	r3, r3, #1
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d106      	bne.n	800b93e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b934:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f000 80d1 	beq.w	800bae0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b93e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b942:	f003 0301 	and.w	r3, r3, #1
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00b      	beq.n	800b962 <HAL_UART_IRQHandler+0xae>
 800b94a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b94e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b952:	2b00      	cmp	r3, #0
 800b954:	d005      	beq.n	800b962 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b95a:	f043 0201 	orr.w	r2, r3, #1
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b966:	f003 0304 	and.w	r3, r3, #4
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00b      	beq.n	800b986 <HAL_UART_IRQHandler+0xd2>
 800b96e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b972:	f003 0301 	and.w	r3, r3, #1
 800b976:	2b00      	cmp	r3, #0
 800b978:	d005      	beq.n	800b986 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b97e:	f043 0202 	orr.w	r2, r3, #2
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b98a:	f003 0302 	and.w	r3, r3, #2
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00b      	beq.n	800b9aa <HAL_UART_IRQHandler+0xf6>
 800b992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b996:	f003 0301 	and.w	r3, r3, #1
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d005      	beq.n	800b9aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9a2:	f043 0204 	orr.w	r2, r3, #4
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b9aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9ae:	f003 0308 	and.w	r3, r3, #8
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d011      	beq.n	800b9da <HAL_UART_IRQHandler+0x126>
 800b9b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9ba:	f003 0320 	and.w	r3, r3, #32
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d105      	bne.n	800b9ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b9c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9c6:	f003 0301 	and.w	r3, r3, #1
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d005      	beq.n	800b9da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9d2:	f043 0208 	orr.w	r2, r3, #8
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f000 81f2 	beq.w	800bdc8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b9e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9e8:	f003 0320 	and.w	r3, r3, #32
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d008      	beq.n	800ba02 <HAL_UART_IRQHandler+0x14e>
 800b9f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9f4:	f003 0320 	and.w	r3, r3, #32
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d002      	beq.n	800ba02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 faee 	bl	800bfde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	695b      	ldr	r3, [r3, #20]
 800ba08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	bf14      	ite	ne
 800ba10:	2301      	movne	r3, #1
 800ba12:	2300      	moveq	r3, #0
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba1e:	f003 0308 	and.w	r3, r3, #8
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d103      	bne.n	800ba2e <HAL_UART_IRQHandler+0x17a>
 800ba26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d04f      	beq.n	800bace <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f9f8 	bl	800be24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	695b      	ldr	r3, [r3, #20]
 800ba3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d041      	beq.n	800bac6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3314      	adds	r3, #20
 800ba48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba50:	e853 3f00 	ldrex	r3, [r3]
 800ba54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ba58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	3314      	adds	r3, #20
 800ba6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ba6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ba72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ba7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ba7e:	e841 2300 	strex	r3, r2, [r1]
 800ba82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ba86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1d9      	bne.n	800ba42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d013      	beq.n	800babe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba9a:	4a7e      	ldr	r2, [pc, #504]	; (800bc94 <HAL_UART_IRQHandler+0x3e0>)
 800ba9c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fd f86c 	bl	8008b80 <HAL_DMA_Abort_IT>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d016      	beq.n	800badc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bab8:	4610      	mov	r0, r2
 800baba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800babc:	e00e      	b.n	800badc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f99c 	bl	800bdfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bac4:	e00a      	b.n	800badc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 f998 	bl	800bdfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bacc:	e006      	b.n	800badc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f994 	bl	800bdfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bada:	e175      	b.n	800bdc8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800badc:	bf00      	nop
    return;
 800bade:	e173      	b.n	800bdc8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	f040 814f 	bne.w	800bd88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800baea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baee:	f003 0310 	and.w	r3, r3, #16
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f000 8148 	beq.w	800bd88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800baf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bafc:	f003 0310 	and.w	r3, r3, #16
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 8141 	beq.w	800bd88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb06:	2300      	movs	r3, #0
 800bb08:	60bb      	str	r3, [r7, #8]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	60bb      	str	r3, [r7, #8]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	60bb      	str	r3, [r7, #8]
 800bb1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	695b      	ldr	r3, [r3, #20]
 800bb22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 80b6 	beq.w	800bc98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f000 8145 	beq.w	800bdcc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bb46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	f080 813e 	bcs.w	800bdcc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb5c:	699b      	ldr	r3, [r3, #24]
 800bb5e:	2b20      	cmp	r3, #32
 800bb60:	f000 8088 	beq.w	800bc74 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	330c      	adds	r3, #12
 800bb6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb72:	e853 3f00 	ldrex	r3, [r3]
 800bb76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bb7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	330c      	adds	r3, #12
 800bb8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bb90:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bb94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb98:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bb9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bba0:	e841 2300 	strex	r3, r2, [r1]
 800bba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d1d9      	bne.n	800bb64 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3314      	adds	r3, #20
 800bbb6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbba:	e853 3f00 	ldrex	r3, [r3]
 800bbbe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bbc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bbc2:	f023 0301 	bic.w	r3, r3, #1
 800bbc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	3314      	adds	r3, #20
 800bbd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bbd4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bbd8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbda:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bbdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bbe0:	e841 2300 	strex	r3, r2, [r1]
 800bbe4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bbe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1e1      	bne.n	800bbb0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	3314      	adds	r3, #20
 800bbf2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbf6:	e853 3f00 	ldrex	r3, [r3]
 800bbfa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bbfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	3314      	adds	r3, #20
 800bc0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bc10:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bc12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bc16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc18:	e841 2300 	strex	r3, r2, [r1]
 800bc1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bc1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e3      	bne.n	800bbec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2220      	movs	r2, #32
 800bc28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	330c      	adds	r3, #12
 800bc38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc3c:	e853 3f00 	ldrex	r3, [r3]
 800bc40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc44:	f023 0310 	bic.w	r3, r3, #16
 800bc48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	330c      	adds	r3, #12
 800bc52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bc56:	65ba      	str	r2, [r7, #88]	; 0x58
 800bc58:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc5e:	e841 2300 	strex	r3, r2, [r1]
 800bc62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1e3      	bne.n	800bc32 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fc ff4b 	bl	8008b0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2202      	movs	r2, #2
 800bc78:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 f8bf 	bl	800be0e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc90:	e09c      	b.n	800bdcc <HAL_UART_IRQHandler+0x518>
 800bc92:	bf00      	nop
 800bc94:	0800bee9 	.word	0x0800bee9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	1ad3      	subs	r3, r2, r3
 800bca4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f000 808e 	beq.w	800bdd0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bcb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	f000 8089 	beq.w	800bdd0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	330c      	adds	r3, #12
 800bcc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc8:	e853 3f00 	ldrex	r3, [r3]
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bcce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bcd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	330c      	adds	r3, #12
 800bcde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bce2:	647a      	str	r2, [r7, #68]	; 0x44
 800bce4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcea:	e841 2300 	strex	r3, r2, [r1]
 800bcee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bcf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1e3      	bne.n	800bcbe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	3314      	adds	r3, #20
 800bcfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd00:	e853 3f00 	ldrex	r3, [r3]
 800bd04:	623b      	str	r3, [r7, #32]
   return(result);
 800bd06:	6a3b      	ldr	r3, [r7, #32]
 800bd08:	f023 0301 	bic.w	r3, r3, #1
 800bd0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	3314      	adds	r3, #20
 800bd16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bd1a:	633a      	str	r2, [r7, #48]	; 0x30
 800bd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd22:	e841 2300 	strex	r3, r2, [r1]
 800bd26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1e3      	bne.n	800bcf6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2220      	movs	r2, #32
 800bd32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	330c      	adds	r3, #12
 800bd42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	e853 3f00 	ldrex	r3, [r3]
 800bd4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f023 0310 	bic.w	r3, r3, #16
 800bd52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	330c      	adds	r3, #12
 800bd5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bd60:	61fa      	str	r2, [r7, #28]
 800bd62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd64:	69b9      	ldr	r1, [r7, #24]
 800bd66:	69fa      	ldr	r2, [r7, #28]
 800bd68:	e841 2300 	strex	r3, r2, [r1]
 800bd6c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1e3      	bne.n	800bd3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2202      	movs	r2, #2
 800bd78:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bd7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd7e:	4619      	mov	r1, r3
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 f844 	bl	800be0e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd86:	e023      	b.n	800bdd0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bd88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d009      	beq.n	800bda8 <HAL_UART_IRQHandler+0x4f4>
 800bd94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d003      	beq.n	800bda8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 f8b5 	bl	800bf10 <UART_Transmit_IT>
    return;
 800bda6:	e014      	b.n	800bdd2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bda8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00e      	beq.n	800bdd2 <HAL_UART_IRQHandler+0x51e>
 800bdb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d008      	beq.n	800bdd2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f8f4 	bl	800bfae <UART_EndTransmit_IT>
    return;
 800bdc6:	e004      	b.n	800bdd2 <HAL_UART_IRQHandler+0x51e>
    return;
 800bdc8:	bf00      	nop
 800bdca:	e002      	b.n	800bdd2 <HAL_UART_IRQHandler+0x51e>
      return;
 800bdcc:	bf00      	nop
 800bdce:	e000      	b.n	800bdd2 <HAL_UART_IRQHandler+0x51e>
      return;
 800bdd0:	bf00      	nop
  }
}
 800bdd2:	37e8      	adds	r7, #232	; 0xe8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bc80      	pop	{r7}
 800bde8:	4770      	bx	lr

0800bdea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bdea:	b480      	push	{r7}
 800bdec:	b083      	sub	sp, #12
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bdf2:	bf00      	nop
 800bdf4:	370c      	adds	r7, #12
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bc80      	pop	{r7}
 800bdfa:	4770      	bx	lr

0800bdfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	bc80      	pop	{r7}
 800be0c:	4770      	bx	lr

0800be0e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800be0e:	b480      	push	{r7}
 800be10:	b083      	sub	sp, #12
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	460b      	mov	r3, r1
 800be18:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800be1a:	bf00      	nop
 800be1c:	370c      	adds	r7, #12
 800be1e:	46bd      	mov	sp, r7
 800be20:	bc80      	pop	{r7}
 800be22:	4770      	bx	lr

0800be24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be24:	b480      	push	{r7}
 800be26:	b095      	sub	sp, #84	; 0x54
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	330c      	adds	r3, #12
 800be32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be36:	e853 3f00 	ldrex	r3, [r3]
 800be3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	330c      	adds	r3, #12
 800be4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be4c:	643a      	str	r2, [r7, #64]	; 0x40
 800be4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be54:	e841 2300 	strex	r3, r2, [r1]
 800be58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1e5      	bne.n	800be2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	3314      	adds	r3, #20
 800be66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be68:	6a3b      	ldr	r3, [r7, #32]
 800be6a:	e853 3f00 	ldrex	r3, [r3]
 800be6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	f023 0301 	bic.w	r3, r3, #1
 800be76:	64bb      	str	r3, [r7, #72]	; 0x48
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	3314      	adds	r3, #20
 800be7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be80:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be88:	e841 2300 	strex	r3, r2, [r1]
 800be8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1e5      	bne.n	800be60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d119      	bne.n	800bed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	330c      	adds	r3, #12
 800bea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	e853 3f00 	ldrex	r3, [r3]
 800beaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	f023 0310 	bic.w	r3, r3, #16
 800beb2:	647b      	str	r3, [r7, #68]	; 0x44
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	330c      	adds	r3, #12
 800beba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bebc:	61ba      	str	r2, [r7, #24]
 800bebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec0:	6979      	ldr	r1, [r7, #20]
 800bec2:	69ba      	ldr	r2, [r7, #24]
 800bec4:	e841 2300 	strex	r3, r2, [r1]
 800bec8:	613b      	str	r3, [r7, #16]
   return(result);
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d1e5      	bne.n	800be9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2220      	movs	r2, #32
 800bed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bede:	bf00      	nop
 800bee0:	3754      	adds	r7, #84	; 0x54
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bc80      	pop	{r7}
 800bee6:	4770      	bx	lr

0800bee8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2200      	movs	r2, #0
 800befa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2200      	movs	r2, #0
 800bf00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f7ff ff7a 	bl	800bdfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf08:	bf00      	nop
 800bf0a:	3710      	adds	r7, #16
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	2b21      	cmp	r3, #33	; 0x21
 800bf22:	d13e      	bne.n	800bfa2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf2c:	d114      	bne.n	800bf58 <UART_Transmit_IT+0x48>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d110      	bne.n	800bf58 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a1b      	ldr	r3, [r3, #32]
 800bf3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	881b      	ldrh	r3, [r3, #0]
 800bf40:	461a      	mov	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a1b      	ldr	r3, [r3, #32]
 800bf50:	1c9a      	adds	r2, r3, #2
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	621a      	str	r2, [r3, #32]
 800bf56:	e008      	b.n	800bf6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a1b      	ldr	r3, [r3, #32]
 800bf5c:	1c59      	adds	r1, r3, #1
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	6211      	str	r1, [r2, #32]
 800bf62:	781a      	ldrb	r2, [r3, #0]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	3b01      	subs	r3, #1
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	4619      	mov	r1, r3
 800bf78:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10f      	bne.n	800bf9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68da      	ldr	r2, [r3, #12]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	68da      	ldr	r2, [r3, #12]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	e000      	b.n	800bfa4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bfa2:	2302      	movs	r3, #2
  }
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3714      	adds	r7, #20
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bc80      	pop	{r7}
 800bfac:	4770      	bx	lr

0800bfae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b082      	sub	sp, #8
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68da      	ldr	r2, [r3, #12]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2220      	movs	r2, #32
 800bfca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7ff ff02 	bl	800bdd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3708      	adds	r7, #8
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b08c      	sub	sp, #48	; 0x30
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b22      	cmp	r3, #34	; 0x22
 800bff0:	f040 80ae 	bne.w	800c150 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bffc:	d117      	bne.n	800c02e <UART_Receive_IT+0x50>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d113      	bne.n	800c02e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c006:	2300      	movs	r3, #0
 800c008:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c00e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	b29b      	uxth	r3, r3
 800c018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c01c:	b29a      	uxth	r2, r3
 800c01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c020:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c026:	1c9a      	adds	r2, r3, #2
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	629a      	str	r2, [r3, #40]	; 0x28
 800c02c:	e026      	b.n	800c07c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c032:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c034:	2300      	movs	r3, #0
 800c036:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c040:	d007      	beq.n	800c052 <UART_Receive_IT+0x74>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10a      	bne.n	800c060 <UART_Receive_IT+0x82>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d106      	bne.n	800c060 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	b2da      	uxtb	r2, r3
 800c05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05c:	701a      	strb	r2, [r3, #0]
 800c05e:	e008      	b.n	800c072 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	b2db      	uxtb	r3, r3
 800c068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c06c:	b2da      	uxtb	r2, r3
 800c06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c070:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c076:	1c5a      	adds	r2, r3, #1
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c080:	b29b      	uxth	r3, r3
 800c082:	3b01      	subs	r3, #1
 800c084:	b29b      	uxth	r3, r3
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	4619      	mov	r1, r3
 800c08a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d15d      	bne.n	800c14c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68da      	ldr	r2, [r3, #12]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f022 0220 	bic.w	r2, r2, #32
 800c09e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68da      	ldr	r2, [r3, #12]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c0ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	695a      	ldr	r2, [r3, #20]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f022 0201 	bic.w	r2, r2, #1
 800c0be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2220      	movs	r2, #32
 800c0c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d135      	bne.n	800c142 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	330c      	adds	r3, #12
 800c0e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	e853 3f00 	ldrex	r3, [r3]
 800c0ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	f023 0310 	bic.w	r3, r3, #16
 800c0f2:	627b      	str	r3, [r7, #36]	; 0x24
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	330c      	adds	r3, #12
 800c0fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0fc:	623a      	str	r2, [r7, #32]
 800c0fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c100:	69f9      	ldr	r1, [r7, #28]
 800c102:	6a3a      	ldr	r2, [r7, #32]
 800c104:	e841 2300 	strex	r3, r2, [r1]
 800c108:	61bb      	str	r3, [r7, #24]
   return(result);
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d1e5      	bne.n	800c0dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f003 0310 	and.w	r3, r3, #16
 800c11a:	2b10      	cmp	r3, #16
 800c11c:	d10a      	bne.n	800c134 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c11e:	2300      	movs	r3, #0
 800c120:	60fb      	str	r3, [r7, #12]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	60fb      	str	r3, [r7, #12]
 800c132:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c138:	4619      	mov	r1, r3
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f7ff fe67 	bl	800be0e <HAL_UARTEx_RxEventCallback>
 800c140:	e002      	b.n	800c148 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7ff fe51 	bl	800bdea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c148:	2300      	movs	r3, #0
 800c14a:	e002      	b.n	800c152 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	e000      	b.n	800c152 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c150:	2302      	movs	r3, #2
  }
}
 800c152:	4618      	mov	r0, r3
 800c154:	3730      	adds	r7, #48	; 0x30
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
	...

0800c15c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68da      	ldr	r2, [r3, #12]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	430a      	orrs	r2, r1
 800c178:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	689a      	ldr	r2, [r3, #8]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	691b      	ldr	r3, [r3, #16]
 800c182:	431a      	orrs	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	695b      	ldr	r3, [r3, #20]
 800c188:	4313      	orrs	r3, r2
 800c18a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c196:	f023 030c 	bic.w	r3, r3, #12
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	6812      	ldr	r2, [r2, #0]
 800c19e:	68b9      	ldr	r1, [r7, #8]
 800c1a0:	430b      	orrs	r3, r1
 800c1a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	695b      	ldr	r3, [r3, #20]
 800c1aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	699a      	ldr	r2, [r3, #24]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	430a      	orrs	r2, r1
 800c1b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a2c      	ldr	r2, [pc, #176]	; (800c270 <UART_SetConfig+0x114>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d103      	bne.n	800c1cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c1c4:	f7fe fe8c 	bl	800aee0 <HAL_RCC_GetPCLK2Freq>
 800c1c8:	60f8      	str	r0, [r7, #12]
 800c1ca:	e002      	b.n	800c1d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c1cc:	f7fe fe74 	bl	800aeb8 <HAL_RCC_GetPCLK1Freq>
 800c1d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	4413      	add	r3, r2
 800c1da:	009a      	lsls	r2, r3, #2
 800c1dc:	441a      	add	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1e8:	4a22      	ldr	r2, [pc, #136]	; (800c274 <UART_SetConfig+0x118>)
 800c1ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ee:	095b      	lsrs	r3, r3, #5
 800c1f0:	0119      	lsls	r1, r3, #4
 800c1f2:	68fa      	ldr	r2, [r7, #12]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4413      	add	r3, r2
 800c1fa:	009a      	lsls	r2, r3, #2
 800c1fc:	441a      	add	r2, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	fbb2 f2f3 	udiv	r2, r2, r3
 800c208:	4b1a      	ldr	r3, [pc, #104]	; (800c274 <UART_SetConfig+0x118>)
 800c20a:	fba3 0302 	umull	r0, r3, r3, r2
 800c20e:	095b      	lsrs	r3, r3, #5
 800c210:	2064      	movs	r0, #100	; 0x64
 800c212:	fb00 f303 	mul.w	r3, r0, r3
 800c216:	1ad3      	subs	r3, r2, r3
 800c218:	011b      	lsls	r3, r3, #4
 800c21a:	3332      	adds	r3, #50	; 0x32
 800c21c:	4a15      	ldr	r2, [pc, #84]	; (800c274 <UART_SetConfig+0x118>)
 800c21e:	fba2 2303 	umull	r2, r3, r2, r3
 800c222:	095b      	lsrs	r3, r3, #5
 800c224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c228:	4419      	add	r1, r3
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	4613      	mov	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4413      	add	r3, r2
 800c232:	009a      	lsls	r2, r3, #2
 800c234:	441a      	add	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c240:	4b0c      	ldr	r3, [pc, #48]	; (800c274 <UART_SetConfig+0x118>)
 800c242:	fba3 0302 	umull	r0, r3, r3, r2
 800c246:	095b      	lsrs	r3, r3, #5
 800c248:	2064      	movs	r0, #100	; 0x64
 800c24a:	fb00 f303 	mul.w	r3, r0, r3
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	011b      	lsls	r3, r3, #4
 800c252:	3332      	adds	r3, #50	; 0x32
 800c254:	4a07      	ldr	r2, [pc, #28]	; (800c274 <UART_SetConfig+0x118>)
 800c256:	fba2 2303 	umull	r2, r3, r2, r3
 800c25a:	095b      	lsrs	r3, r3, #5
 800c25c:	f003 020f 	and.w	r2, r3, #15
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	440a      	add	r2, r1
 800c266:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c268:	bf00      	nop
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	40013800 	.word	0x40013800
 800c274:	51eb851f 	.word	0x51eb851f

0800c278 <__itoa>:
 800c278:	1e93      	subs	r3, r2, #2
 800c27a:	2b22      	cmp	r3, #34	; 0x22
 800c27c:	b510      	push	{r4, lr}
 800c27e:	460c      	mov	r4, r1
 800c280:	d904      	bls.n	800c28c <__itoa+0x14>
 800c282:	2300      	movs	r3, #0
 800c284:	461c      	mov	r4, r3
 800c286:	700b      	strb	r3, [r1, #0]
 800c288:	4620      	mov	r0, r4
 800c28a:	bd10      	pop	{r4, pc}
 800c28c:	2a0a      	cmp	r2, #10
 800c28e:	d109      	bne.n	800c2a4 <__itoa+0x2c>
 800c290:	2800      	cmp	r0, #0
 800c292:	da07      	bge.n	800c2a4 <__itoa+0x2c>
 800c294:	232d      	movs	r3, #45	; 0x2d
 800c296:	700b      	strb	r3, [r1, #0]
 800c298:	2101      	movs	r1, #1
 800c29a:	4240      	negs	r0, r0
 800c29c:	4421      	add	r1, r4
 800c29e:	f000 f8d9 	bl	800c454 <__utoa>
 800c2a2:	e7f1      	b.n	800c288 <__itoa+0x10>
 800c2a4:	2100      	movs	r1, #0
 800c2a6:	e7f9      	b.n	800c29c <__itoa+0x24>

0800c2a8 <itoa>:
 800c2a8:	f7ff bfe6 	b.w	800c278 <__itoa>

0800c2ac <malloc>:
 800c2ac:	4b02      	ldr	r3, [pc, #8]	; (800c2b8 <malloc+0xc>)
 800c2ae:	4601      	mov	r1, r0
 800c2b0:	6818      	ldr	r0, [r3, #0]
 800c2b2:	f000 b823 	b.w	800c2fc <_malloc_r>
 800c2b6:	bf00      	nop
 800c2b8:	200000f8 	.word	0x200000f8

0800c2bc <sbrk_aligned>:
 800c2bc:	b570      	push	{r4, r5, r6, lr}
 800c2be:	4e0e      	ldr	r6, [pc, #56]	; (800c2f8 <sbrk_aligned+0x3c>)
 800c2c0:	460c      	mov	r4, r1
 800c2c2:	6831      	ldr	r1, [r6, #0]
 800c2c4:	4605      	mov	r5, r0
 800c2c6:	b911      	cbnz	r1, 800c2ce <sbrk_aligned+0x12>
 800c2c8:	f000 f91e 	bl	800c508 <_sbrk_r>
 800c2cc:	6030      	str	r0, [r6, #0]
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	f000 f919 	bl	800c508 <_sbrk_r>
 800c2d6:	1c43      	adds	r3, r0, #1
 800c2d8:	d00a      	beq.n	800c2f0 <sbrk_aligned+0x34>
 800c2da:	1cc4      	adds	r4, r0, #3
 800c2dc:	f024 0403 	bic.w	r4, r4, #3
 800c2e0:	42a0      	cmp	r0, r4
 800c2e2:	d007      	beq.n	800c2f4 <sbrk_aligned+0x38>
 800c2e4:	1a21      	subs	r1, r4, r0
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	f000 f90e 	bl	800c508 <_sbrk_r>
 800c2ec:	3001      	adds	r0, #1
 800c2ee:	d101      	bne.n	800c2f4 <sbrk_aligned+0x38>
 800c2f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	bd70      	pop	{r4, r5, r6, pc}
 800c2f8:	20000498 	.word	0x20000498

0800c2fc <_malloc_r>:
 800c2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c300:	1ccd      	adds	r5, r1, #3
 800c302:	f025 0503 	bic.w	r5, r5, #3
 800c306:	3508      	adds	r5, #8
 800c308:	2d0c      	cmp	r5, #12
 800c30a:	bf38      	it	cc
 800c30c:	250c      	movcc	r5, #12
 800c30e:	2d00      	cmp	r5, #0
 800c310:	4607      	mov	r7, r0
 800c312:	db01      	blt.n	800c318 <_malloc_r+0x1c>
 800c314:	42a9      	cmp	r1, r5
 800c316:	d905      	bls.n	800c324 <_malloc_r+0x28>
 800c318:	230c      	movs	r3, #12
 800c31a:	2600      	movs	r6, #0
 800c31c:	603b      	str	r3, [r7, #0]
 800c31e:	4630      	mov	r0, r6
 800c320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c324:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c3f8 <_malloc_r+0xfc>
 800c328:	f000 f868 	bl	800c3fc <__malloc_lock>
 800c32c:	f8d8 3000 	ldr.w	r3, [r8]
 800c330:	461c      	mov	r4, r3
 800c332:	bb5c      	cbnz	r4, 800c38c <_malloc_r+0x90>
 800c334:	4629      	mov	r1, r5
 800c336:	4638      	mov	r0, r7
 800c338:	f7ff ffc0 	bl	800c2bc <sbrk_aligned>
 800c33c:	1c43      	adds	r3, r0, #1
 800c33e:	4604      	mov	r4, r0
 800c340:	d155      	bne.n	800c3ee <_malloc_r+0xf2>
 800c342:	f8d8 4000 	ldr.w	r4, [r8]
 800c346:	4626      	mov	r6, r4
 800c348:	2e00      	cmp	r6, #0
 800c34a:	d145      	bne.n	800c3d8 <_malloc_r+0xdc>
 800c34c:	2c00      	cmp	r4, #0
 800c34e:	d048      	beq.n	800c3e2 <_malloc_r+0xe6>
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	4631      	mov	r1, r6
 800c354:	4638      	mov	r0, r7
 800c356:	eb04 0903 	add.w	r9, r4, r3
 800c35a:	f000 f8d5 	bl	800c508 <_sbrk_r>
 800c35e:	4581      	cmp	r9, r0
 800c360:	d13f      	bne.n	800c3e2 <_malloc_r+0xe6>
 800c362:	6821      	ldr	r1, [r4, #0]
 800c364:	4638      	mov	r0, r7
 800c366:	1a6d      	subs	r5, r5, r1
 800c368:	4629      	mov	r1, r5
 800c36a:	f7ff ffa7 	bl	800c2bc <sbrk_aligned>
 800c36e:	3001      	adds	r0, #1
 800c370:	d037      	beq.n	800c3e2 <_malloc_r+0xe6>
 800c372:	6823      	ldr	r3, [r4, #0]
 800c374:	442b      	add	r3, r5
 800c376:	6023      	str	r3, [r4, #0]
 800c378:	f8d8 3000 	ldr.w	r3, [r8]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d038      	beq.n	800c3f2 <_malloc_r+0xf6>
 800c380:	685a      	ldr	r2, [r3, #4]
 800c382:	42a2      	cmp	r2, r4
 800c384:	d12b      	bne.n	800c3de <_malloc_r+0xe2>
 800c386:	2200      	movs	r2, #0
 800c388:	605a      	str	r2, [r3, #4]
 800c38a:	e00f      	b.n	800c3ac <_malloc_r+0xb0>
 800c38c:	6822      	ldr	r2, [r4, #0]
 800c38e:	1b52      	subs	r2, r2, r5
 800c390:	d41f      	bmi.n	800c3d2 <_malloc_r+0xd6>
 800c392:	2a0b      	cmp	r2, #11
 800c394:	d917      	bls.n	800c3c6 <_malloc_r+0xca>
 800c396:	1961      	adds	r1, r4, r5
 800c398:	42a3      	cmp	r3, r4
 800c39a:	6025      	str	r5, [r4, #0]
 800c39c:	bf18      	it	ne
 800c39e:	6059      	strne	r1, [r3, #4]
 800c3a0:	6863      	ldr	r3, [r4, #4]
 800c3a2:	bf08      	it	eq
 800c3a4:	f8c8 1000 	streq.w	r1, [r8]
 800c3a8:	5162      	str	r2, [r4, r5]
 800c3aa:	604b      	str	r3, [r1, #4]
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	f104 060b 	add.w	r6, r4, #11
 800c3b2:	f000 f829 	bl	800c408 <__malloc_unlock>
 800c3b6:	f026 0607 	bic.w	r6, r6, #7
 800c3ba:	1d23      	adds	r3, r4, #4
 800c3bc:	1af2      	subs	r2, r6, r3
 800c3be:	d0ae      	beq.n	800c31e <_malloc_r+0x22>
 800c3c0:	1b9b      	subs	r3, r3, r6
 800c3c2:	50a3      	str	r3, [r4, r2]
 800c3c4:	e7ab      	b.n	800c31e <_malloc_r+0x22>
 800c3c6:	42a3      	cmp	r3, r4
 800c3c8:	6862      	ldr	r2, [r4, #4]
 800c3ca:	d1dd      	bne.n	800c388 <_malloc_r+0x8c>
 800c3cc:	f8c8 2000 	str.w	r2, [r8]
 800c3d0:	e7ec      	b.n	800c3ac <_malloc_r+0xb0>
 800c3d2:	4623      	mov	r3, r4
 800c3d4:	6864      	ldr	r4, [r4, #4]
 800c3d6:	e7ac      	b.n	800c332 <_malloc_r+0x36>
 800c3d8:	4634      	mov	r4, r6
 800c3da:	6876      	ldr	r6, [r6, #4]
 800c3dc:	e7b4      	b.n	800c348 <_malloc_r+0x4c>
 800c3de:	4613      	mov	r3, r2
 800c3e0:	e7cc      	b.n	800c37c <_malloc_r+0x80>
 800c3e2:	230c      	movs	r3, #12
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	603b      	str	r3, [r7, #0]
 800c3e8:	f000 f80e 	bl	800c408 <__malloc_unlock>
 800c3ec:	e797      	b.n	800c31e <_malloc_r+0x22>
 800c3ee:	6025      	str	r5, [r4, #0]
 800c3f0:	e7dc      	b.n	800c3ac <_malloc_r+0xb0>
 800c3f2:	605b      	str	r3, [r3, #4]
 800c3f4:	deff      	udf	#255	; 0xff
 800c3f6:	bf00      	nop
 800c3f8:	20000494 	.word	0x20000494

0800c3fc <__malloc_lock>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	; (800c404 <__malloc_lock+0x8>)
 800c3fe:	f000 b8bd 	b.w	800c57c <__retarget_lock_acquire_recursive>
 800c402:	bf00      	nop
 800c404:	200005d4 	.word	0x200005d4

0800c408 <__malloc_unlock>:
 800c408:	4801      	ldr	r0, [pc, #4]	; (800c410 <__malloc_unlock+0x8>)
 800c40a:	f000 b8b8 	b.w	800c57e <__retarget_lock_release_recursive>
 800c40e:	bf00      	nop
 800c410:	200005d4 	.word	0x200005d4

0800c414 <siprintf>:
 800c414:	b40e      	push	{r1, r2, r3}
 800c416:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c41a:	b500      	push	{lr}
 800c41c:	b09c      	sub	sp, #112	; 0x70
 800c41e:	ab1d      	add	r3, sp, #116	; 0x74
 800c420:	9002      	str	r0, [sp, #8]
 800c422:	9006      	str	r0, [sp, #24]
 800c424:	9107      	str	r1, [sp, #28]
 800c426:	9104      	str	r1, [sp, #16]
 800c428:	4808      	ldr	r0, [pc, #32]	; (800c44c <siprintf+0x38>)
 800c42a:	4909      	ldr	r1, [pc, #36]	; (800c450 <siprintf+0x3c>)
 800c42c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c430:	9105      	str	r1, [sp, #20]
 800c432:	6800      	ldr	r0, [r0, #0]
 800c434:	a902      	add	r1, sp, #8
 800c436:	9301      	str	r3, [sp, #4]
 800c438:	f000 f94c 	bl	800c6d4 <_svfiprintf_r>
 800c43c:	2200      	movs	r2, #0
 800c43e:	9b02      	ldr	r3, [sp, #8]
 800c440:	701a      	strb	r2, [r3, #0]
 800c442:	b01c      	add	sp, #112	; 0x70
 800c444:	f85d eb04 	ldr.w	lr, [sp], #4
 800c448:	b003      	add	sp, #12
 800c44a:	4770      	bx	lr
 800c44c:	200000f8 	.word	0x200000f8
 800c450:	ffff0208 	.word	0xffff0208

0800c454 <__utoa>:
 800c454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c456:	b08b      	sub	sp, #44	; 0x2c
 800c458:	4605      	mov	r5, r0
 800c45a:	460b      	mov	r3, r1
 800c45c:	466e      	mov	r6, sp
 800c45e:	4c1d      	ldr	r4, [pc, #116]	; (800c4d4 <__utoa+0x80>)
 800c460:	f104 0c20 	add.w	ip, r4, #32
 800c464:	4637      	mov	r7, r6
 800c466:	6820      	ldr	r0, [r4, #0]
 800c468:	6861      	ldr	r1, [r4, #4]
 800c46a:	3408      	adds	r4, #8
 800c46c:	c703      	stmia	r7!, {r0, r1}
 800c46e:	4564      	cmp	r4, ip
 800c470:	463e      	mov	r6, r7
 800c472:	d1f7      	bne.n	800c464 <__utoa+0x10>
 800c474:	7921      	ldrb	r1, [r4, #4]
 800c476:	6820      	ldr	r0, [r4, #0]
 800c478:	7139      	strb	r1, [r7, #4]
 800c47a:	1e91      	subs	r1, r2, #2
 800c47c:	2922      	cmp	r1, #34	; 0x22
 800c47e:	6038      	str	r0, [r7, #0]
 800c480:	f04f 0100 	mov.w	r1, #0
 800c484:	d904      	bls.n	800c490 <__utoa+0x3c>
 800c486:	7019      	strb	r1, [r3, #0]
 800c488:	460b      	mov	r3, r1
 800c48a:	4618      	mov	r0, r3
 800c48c:	b00b      	add	sp, #44	; 0x2c
 800c48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c490:	1e58      	subs	r0, r3, #1
 800c492:	4684      	mov	ip, r0
 800c494:	fbb5 f7f2 	udiv	r7, r5, r2
 800c498:	fb02 5617 	mls	r6, r2, r7, r5
 800c49c:	3628      	adds	r6, #40	; 0x28
 800c49e:	446e      	add	r6, sp
 800c4a0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c4aa:	462e      	mov	r6, r5
 800c4ac:	42b2      	cmp	r2, r6
 800c4ae:	463d      	mov	r5, r7
 800c4b0:	f101 0101 	add.w	r1, r1, #1
 800c4b4:	d9ee      	bls.n	800c494 <__utoa+0x40>
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	545a      	strb	r2, [r3, r1]
 800c4ba:	1919      	adds	r1, r3, r4
 800c4bc:	1aa5      	subs	r5, r4, r2
 800c4be:	42aa      	cmp	r2, r5
 800c4c0:	dae3      	bge.n	800c48a <__utoa+0x36>
 800c4c2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c4c6:	780e      	ldrb	r6, [r1, #0]
 800c4c8:	3201      	adds	r2, #1
 800c4ca:	7006      	strb	r6, [r0, #0]
 800c4cc:	f801 5901 	strb.w	r5, [r1], #-1
 800c4d0:	e7f4      	b.n	800c4bc <__utoa+0x68>
 800c4d2:	bf00      	nop
 800c4d4:	0800dc66 	.word	0x0800dc66

0800c4d8 <strcat>:
 800c4d8:	4602      	mov	r2, r0
 800c4da:	b510      	push	{r4, lr}
 800c4dc:	7814      	ldrb	r4, [r2, #0]
 800c4de:	4613      	mov	r3, r2
 800c4e0:	3201      	adds	r2, #1
 800c4e2:	2c00      	cmp	r4, #0
 800c4e4:	d1fa      	bne.n	800c4dc <strcat+0x4>
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4f0:	2a00      	cmp	r2, #0
 800c4f2:	d1f9      	bne.n	800c4e8 <strcat+0x10>
 800c4f4:	bd10      	pop	{r4, pc}

0800c4f6 <memset>:
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	4402      	add	r2, r0
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d100      	bne.n	800c500 <memset+0xa>
 800c4fe:	4770      	bx	lr
 800c500:	f803 1b01 	strb.w	r1, [r3], #1
 800c504:	e7f9      	b.n	800c4fa <memset+0x4>
	...

0800c508 <_sbrk_r>:
 800c508:	b538      	push	{r3, r4, r5, lr}
 800c50a:	2300      	movs	r3, #0
 800c50c:	4d05      	ldr	r5, [pc, #20]	; (800c524 <_sbrk_r+0x1c>)
 800c50e:	4604      	mov	r4, r0
 800c510:	4608      	mov	r0, r1
 800c512:	602b      	str	r3, [r5, #0]
 800c514:	f7fc f808 	bl	8008528 <_sbrk>
 800c518:	1c43      	adds	r3, r0, #1
 800c51a:	d102      	bne.n	800c522 <_sbrk_r+0x1a>
 800c51c:	682b      	ldr	r3, [r5, #0]
 800c51e:	b103      	cbz	r3, 800c522 <_sbrk_r+0x1a>
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	bd38      	pop	{r3, r4, r5, pc}
 800c524:	200005d8 	.word	0x200005d8

0800c528 <__errno>:
 800c528:	4b01      	ldr	r3, [pc, #4]	; (800c530 <__errno+0x8>)
 800c52a:	6818      	ldr	r0, [r3, #0]
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	200000f8 	.word	0x200000f8

0800c534 <__libc_init_array>:
 800c534:	b570      	push	{r4, r5, r6, lr}
 800c536:	2600      	movs	r6, #0
 800c538:	4d0c      	ldr	r5, [pc, #48]	; (800c56c <__libc_init_array+0x38>)
 800c53a:	4c0d      	ldr	r4, [pc, #52]	; (800c570 <__libc_init_array+0x3c>)
 800c53c:	1b64      	subs	r4, r4, r5
 800c53e:	10a4      	asrs	r4, r4, #2
 800c540:	42a6      	cmp	r6, r4
 800c542:	d109      	bne.n	800c558 <__libc_init_array+0x24>
 800c544:	f000 fbc6 	bl	800ccd4 <_init>
 800c548:	2600      	movs	r6, #0
 800c54a:	4d0a      	ldr	r5, [pc, #40]	; (800c574 <__libc_init_array+0x40>)
 800c54c:	4c0a      	ldr	r4, [pc, #40]	; (800c578 <__libc_init_array+0x44>)
 800c54e:	1b64      	subs	r4, r4, r5
 800c550:	10a4      	asrs	r4, r4, #2
 800c552:	42a6      	cmp	r6, r4
 800c554:	d105      	bne.n	800c562 <__libc_init_array+0x2e>
 800c556:	bd70      	pop	{r4, r5, r6, pc}
 800c558:	f855 3b04 	ldr.w	r3, [r5], #4
 800c55c:	4798      	blx	r3
 800c55e:	3601      	adds	r6, #1
 800c560:	e7ee      	b.n	800c540 <__libc_init_array+0xc>
 800c562:	f855 3b04 	ldr.w	r3, [r5], #4
 800c566:	4798      	blx	r3
 800c568:	3601      	adds	r6, #1
 800c56a:	e7f2      	b.n	800c552 <__libc_init_array+0x1e>
 800c56c:	0800dcc0 	.word	0x0800dcc0
 800c570:	0800dcc0 	.word	0x0800dcc0
 800c574:	0800dcc0 	.word	0x0800dcc0
 800c578:	0800dcc4 	.word	0x0800dcc4

0800c57c <__retarget_lock_acquire_recursive>:
 800c57c:	4770      	bx	lr

0800c57e <__retarget_lock_release_recursive>:
 800c57e:	4770      	bx	lr

0800c580 <strcpy>:
 800c580:	4603      	mov	r3, r0
 800c582:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c586:	f803 2b01 	strb.w	r2, [r3], #1
 800c58a:	2a00      	cmp	r2, #0
 800c58c:	d1f9      	bne.n	800c582 <strcpy+0x2>
 800c58e:	4770      	bx	lr

0800c590 <_free_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	4605      	mov	r5, r0
 800c594:	2900      	cmp	r1, #0
 800c596:	d040      	beq.n	800c61a <_free_r+0x8a>
 800c598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c59c:	1f0c      	subs	r4, r1, #4
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	bfb8      	it	lt
 800c5a2:	18e4      	addlt	r4, r4, r3
 800c5a4:	f7ff ff2a 	bl	800c3fc <__malloc_lock>
 800c5a8:	4a1c      	ldr	r2, [pc, #112]	; (800c61c <_free_r+0x8c>)
 800c5aa:	6813      	ldr	r3, [r2, #0]
 800c5ac:	b933      	cbnz	r3, 800c5bc <_free_r+0x2c>
 800c5ae:	6063      	str	r3, [r4, #4]
 800c5b0:	6014      	str	r4, [r2, #0]
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5b8:	f7ff bf26 	b.w	800c408 <__malloc_unlock>
 800c5bc:	42a3      	cmp	r3, r4
 800c5be:	d908      	bls.n	800c5d2 <_free_r+0x42>
 800c5c0:	6820      	ldr	r0, [r4, #0]
 800c5c2:	1821      	adds	r1, r4, r0
 800c5c4:	428b      	cmp	r3, r1
 800c5c6:	bf01      	itttt	eq
 800c5c8:	6819      	ldreq	r1, [r3, #0]
 800c5ca:	685b      	ldreq	r3, [r3, #4]
 800c5cc:	1809      	addeq	r1, r1, r0
 800c5ce:	6021      	streq	r1, [r4, #0]
 800c5d0:	e7ed      	b.n	800c5ae <_free_r+0x1e>
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	b10b      	cbz	r3, 800c5dc <_free_r+0x4c>
 800c5d8:	42a3      	cmp	r3, r4
 800c5da:	d9fa      	bls.n	800c5d2 <_free_r+0x42>
 800c5dc:	6811      	ldr	r1, [r2, #0]
 800c5de:	1850      	adds	r0, r2, r1
 800c5e0:	42a0      	cmp	r0, r4
 800c5e2:	d10b      	bne.n	800c5fc <_free_r+0x6c>
 800c5e4:	6820      	ldr	r0, [r4, #0]
 800c5e6:	4401      	add	r1, r0
 800c5e8:	1850      	adds	r0, r2, r1
 800c5ea:	4283      	cmp	r3, r0
 800c5ec:	6011      	str	r1, [r2, #0]
 800c5ee:	d1e0      	bne.n	800c5b2 <_free_r+0x22>
 800c5f0:	6818      	ldr	r0, [r3, #0]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	4408      	add	r0, r1
 800c5f6:	6010      	str	r0, [r2, #0]
 800c5f8:	6053      	str	r3, [r2, #4]
 800c5fa:	e7da      	b.n	800c5b2 <_free_r+0x22>
 800c5fc:	d902      	bls.n	800c604 <_free_r+0x74>
 800c5fe:	230c      	movs	r3, #12
 800c600:	602b      	str	r3, [r5, #0]
 800c602:	e7d6      	b.n	800c5b2 <_free_r+0x22>
 800c604:	6820      	ldr	r0, [r4, #0]
 800c606:	1821      	adds	r1, r4, r0
 800c608:	428b      	cmp	r3, r1
 800c60a:	bf01      	itttt	eq
 800c60c:	6819      	ldreq	r1, [r3, #0]
 800c60e:	685b      	ldreq	r3, [r3, #4]
 800c610:	1809      	addeq	r1, r1, r0
 800c612:	6021      	streq	r1, [r4, #0]
 800c614:	6063      	str	r3, [r4, #4]
 800c616:	6054      	str	r4, [r2, #4]
 800c618:	e7cb      	b.n	800c5b2 <_free_r+0x22>
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	20000494 	.word	0x20000494

0800c620 <__ssputs_r>:
 800c620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c624:	461f      	mov	r7, r3
 800c626:	688e      	ldr	r6, [r1, #8]
 800c628:	4682      	mov	sl, r0
 800c62a:	42be      	cmp	r6, r7
 800c62c:	460c      	mov	r4, r1
 800c62e:	4690      	mov	r8, r2
 800c630:	680b      	ldr	r3, [r1, #0]
 800c632:	d82c      	bhi.n	800c68e <__ssputs_r+0x6e>
 800c634:	898a      	ldrh	r2, [r1, #12]
 800c636:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c63a:	d026      	beq.n	800c68a <__ssputs_r+0x6a>
 800c63c:	6965      	ldr	r5, [r4, #20]
 800c63e:	6909      	ldr	r1, [r1, #16]
 800c640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c644:	eba3 0901 	sub.w	r9, r3, r1
 800c648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c64c:	1c7b      	adds	r3, r7, #1
 800c64e:	444b      	add	r3, r9
 800c650:	106d      	asrs	r5, r5, #1
 800c652:	429d      	cmp	r5, r3
 800c654:	bf38      	it	cc
 800c656:	461d      	movcc	r5, r3
 800c658:	0553      	lsls	r3, r2, #21
 800c65a:	d527      	bpl.n	800c6ac <__ssputs_r+0x8c>
 800c65c:	4629      	mov	r1, r5
 800c65e:	f7ff fe4d 	bl	800c2fc <_malloc_r>
 800c662:	4606      	mov	r6, r0
 800c664:	b360      	cbz	r0, 800c6c0 <__ssputs_r+0xa0>
 800c666:	464a      	mov	r2, r9
 800c668:	6921      	ldr	r1, [r4, #16]
 800c66a:	f000 fb1c 	bl	800cca6 <memcpy>
 800c66e:	89a3      	ldrh	r3, [r4, #12]
 800c670:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c678:	81a3      	strh	r3, [r4, #12]
 800c67a:	6126      	str	r6, [r4, #16]
 800c67c:	444e      	add	r6, r9
 800c67e:	6026      	str	r6, [r4, #0]
 800c680:	463e      	mov	r6, r7
 800c682:	6165      	str	r5, [r4, #20]
 800c684:	eba5 0509 	sub.w	r5, r5, r9
 800c688:	60a5      	str	r5, [r4, #8]
 800c68a:	42be      	cmp	r6, r7
 800c68c:	d900      	bls.n	800c690 <__ssputs_r+0x70>
 800c68e:	463e      	mov	r6, r7
 800c690:	4632      	mov	r2, r6
 800c692:	4641      	mov	r1, r8
 800c694:	6820      	ldr	r0, [r4, #0]
 800c696:	f000 fade 	bl	800cc56 <memmove>
 800c69a:	2000      	movs	r0, #0
 800c69c:	68a3      	ldr	r3, [r4, #8]
 800c69e:	1b9b      	subs	r3, r3, r6
 800c6a0:	60a3      	str	r3, [r4, #8]
 800c6a2:	6823      	ldr	r3, [r4, #0]
 800c6a4:	4433      	add	r3, r6
 800c6a6:	6023      	str	r3, [r4, #0]
 800c6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ac:	462a      	mov	r2, r5
 800c6ae:	f000 faa3 	bl	800cbf8 <_realloc_r>
 800c6b2:	4606      	mov	r6, r0
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	d1e0      	bne.n	800c67a <__ssputs_r+0x5a>
 800c6b8:	4650      	mov	r0, sl
 800c6ba:	6921      	ldr	r1, [r4, #16]
 800c6bc:	f7ff ff68 	bl	800c590 <_free_r>
 800c6c0:	230c      	movs	r3, #12
 800c6c2:	f8ca 3000 	str.w	r3, [sl]
 800c6c6:	89a3      	ldrh	r3, [r4, #12]
 800c6c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6d0:	81a3      	strh	r3, [r4, #12]
 800c6d2:	e7e9      	b.n	800c6a8 <__ssputs_r+0x88>

0800c6d4 <_svfiprintf_r>:
 800c6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d8:	4698      	mov	r8, r3
 800c6da:	898b      	ldrh	r3, [r1, #12]
 800c6dc:	4607      	mov	r7, r0
 800c6de:	061b      	lsls	r3, r3, #24
 800c6e0:	460d      	mov	r5, r1
 800c6e2:	4614      	mov	r4, r2
 800c6e4:	b09d      	sub	sp, #116	; 0x74
 800c6e6:	d50e      	bpl.n	800c706 <_svfiprintf_r+0x32>
 800c6e8:	690b      	ldr	r3, [r1, #16]
 800c6ea:	b963      	cbnz	r3, 800c706 <_svfiprintf_r+0x32>
 800c6ec:	2140      	movs	r1, #64	; 0x40
 800c6ee:	f7ff fe05 	bl	800c2fc <_malloc_r>
 800c6f2:	6028      	str	r0, [r5, #0]
 800c6f4:	6128      	str	r0, [r5, #16]
 800c6f6:	b920      	cbnz	r0, 800c702 <_svfiprintf_r+0x2e>
 800c6f8:	230c      	movs	r3, #12
 800c6fa:	603b      	str	r3, [r7, #0]
 800c6fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c700:	e0d0      	b.n	800c8a4 <_svfiprintf_r+0x1d0>
 800c702:	2340      	movs	r3, #64	; 0x40
 800c704:	616b      	str	r3, [r5, #20]
 800c706:	2300      	movs	r3, #0
 800c708:	9309      	str	r3, [sp, #36]	; 0x24
 800c70a:	2320      	movs	r3, #32
 800c70c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c710:	2330      	movs	r3, #48	; 0x30
 800c712:	f04f 0901 	mov.w	r9, #1
 800c716:	f8cd 800c 	str.w	r8, [sp, #12]
 800c71a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c8bc <_svfiprintf_r+0x1e8>
 800c71e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c722:	4623      	mov	r3, r4
 800c724:	469a      	mov	sl, r3
 800c726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c72a:	b10a      	cbz	r2, 800c730 <_svfiprintf_r+0x5c>
 800c72c:	2a25      	cmp	r2, #37	; 0x25
 800c72e:	d1f9      	bne.n	800c724 <_svfiprintf_r+0x50>
 800c730:	ebba 0b04 	subs.w	fp, sl, r4
 800c734:	d00b      	beq.n	800c74e <_svfiprintf_r+0x7a>
 800c736:	465b      	mov	r3, fp
 800c738:	4622      	mov	r2, r4
 800c73a:	4629      	mov	r1, r5
 800c73c:	4638      	mov	r0, r7
 800c73e:	f7ff ff6f 	bl	800c620 <__ssputs_r>
 800c742:	3001      	adds	r0, #1
 800c744:	f000 80a9 	beq.w	800c89a <_svfiprintf_r+0x1c6>
 800c748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c74a:	445a      	add	r2, fp
 800c74c:	9209      	str	r2, [sp, #36]	; 0x24
 800c74e:	f89a 3000 	ldrb.w	r3, [sl]
 800c752:	2b00      	cmp	r3, #0
 800c754:	f000 80a1 	beq.w	800c89a <_svfiprintf_r+0x1c6>
 800c758:	2300      	movs	r3, #0
 800c75a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c75e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c762:	f10a 0a01 	add.w	sl, sl, #1
 800c766:	9304      	str	r3, [sp, #16]
 800c768:	9307      	str	r3, [sp, #28]
 800c76a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c76e:	931a      	str	r3, [sp, #104]	; 0x68
 800c770:	4654      	mov	r4, sl
 800c772:	2205      	movs	r2, #5
 800c774:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c778:	4850      	ldr	r0, [pc, #320]	; (800c8bc <_svfiprintf_r+0x1e8>)
 800c77a:	f000 fa86 	bl	800cc8a <memchr>
 800c77e:	9a04      	ldr	r2, [sp, #16]
 800c780:	b9d8      	cbnz	r0, 800c7ba <_svfiprintf_r+0xe6>
 800c782:	06d0      	lsls	r0, r2, #27
 800c784:	bf44      	itt	mi
 800c786:	2320      	movmi	r3, #32
 800c788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c78c:	0711      	lsls	r1, r2, #28
 800c78e:	bf44      	itt	mi
 800c790:	232b      	movmi	r3, #43	; 0x2b
 800c792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c796:	f89a 3000 	ldrb.w	r3, [sl]
 800c79a:	2b2a      	cmp	r3, #42	; 0x2a
 800c79c:	d015      	beq.n	800c7ca <_svfiprintf_r+0xf6>
 800c79e:	4654      	mov	r4, sl
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	f04f 0c0a 	mov.w	ip, #10
 800c7a6:	9a07      	ldr	r2, [sp, #28]
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7ae:	3b30      	subs	r3, #48	; 0x30
 800c7b0:	2b09      	cmp	r3, #9
 800c7b2:	d94d      	bls.n	800c850 <_svfiprintf_r+0x17c>
 800c7b4:	b1b0      	cbz	r0, 800c7e4 <_svfiprintf_r+0x110>
 800c7b6:	9207      	str	r2, [sp, #28]
 800c7b8:	e014      	b.n	800c7e4 <_svfiprintf_r+0x110>
 800c7ba:	eba0 0308 	sub.w	r3, r0, r8
 800c7be:	fa09 f303 	lsl.w	r3, r9, r3
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	46a2      	mov	sl, r4
 800c7c6:	9304      	str	r3, [sp, #16]
 800c7c8:	e7d2      	b.n	800c770 <_svfiprintf_r+0x9c>
 800c7ca:	9b03      	ldr	r3, [sp, #12]
 800c7cc:	1d19      	adds	r1, r3, #4
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	9103      	str	r1, [sp, #12]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	bfbb      	ittet	lt
 800c7d6:	425b      	neglt	r3, r3
 800c7d8:	f042 0202 	orrlt.w	r2, r2, #2
 800c7dc:	9307      	strge	r3, [sp, #28]
 800c7de:	9307      	strlt	r3, [sp, #28]
 800c7e0:	bfb8      	it	lt
 800c7e2:	9204      	strlt	r2, [sp, #16]
 800c7e4:	7823      	ldrb	r3, [r4, #0]
 800c7e6:	2b2e      	cmp	r3, #46	; 0x2e
 800c7e8:	d10c      	bne.n	800c804 <_svfiprintf_r+0x130>
 800c7ea:	7863      	ldrb	r3, [r4, #1]
 800c7ec:	2b2a      	cmp	r3, #42	; 0x2a
 800c7ee:	d134      	bne.n	800c85a <_svfiprintf_r+0x186>
 800c7f0:	9b03      	ldr	r3, [sp, #12]
 800c7f2:	3402      	adds	r4, #2
 800c7f4:	1d1a      	adds	r2, r3, #4
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	9203      	str	r2, [sp, #12]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	bfb8      	it	lt
 800c7fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c802:	9305      	str	r3, [sp, #20]
 800c804:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c8c0 <_svfiprintf_r+0x1ec>
 800c808:	2203      	movs	r2, #3
 800c80a:	4650      	mov	r0, sl
 800c80c:	7821      	ldrb	r1, [r4, #0]
 800c80e:	f000 fa3c 	bl	800cc8a <memchr>
 800c812:	b138      	cbz	r0, 800c824 <_svfiprintf_r+0x150>
 800c814:	2240      	movs	r2, #64	; 0x40
 800c816:	9b04      	ldr	r3, [sp, #16]
 800c818:	eba0 000a 	sub.w	r0, r0, sl
 800c81c:	4082      	lsls	r2, r0
 800c81e:	4313      	orrs	r3, r2
 800c820:	3401      	adds	r4, #1
 800c822:	9304      	str	r3, [sp, #16]
 800c824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c828:	2206      	movs	r2, #6
 800c82a:	4826      	ldr	r0, [pc, #152]	; (800c8c4 <_svfiprintf_r+0x1f0>)
 800c82c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c830:	f000 fa2b 	bl	800cc8a <memchr>
 800c834:	2800      	cmp	r0, #0
 800c836:	d038      	beq.n	800c8aa <_svfiprintf_r+0x1d6>
 800c838:	4b23      	ldr	r3, [pc, #140]	; (800c8c8 <_svfiprintf_r+0x1f4>)
 800c83a:	bb1b      	cbnz	r3, 800c884 <_svfiprintf_r+0x1b0>
 800c83c:	9b03      	ldr	r3, [sp, #12]
 800c83e:	3307      	adds	r3, #7
 800c840:	f023 0307 	bic.w	r3, r3, #7
 800c844:	3308      	adds	r3, #8
 800c846:	9303      	str	r3, [sp, #12]
 800c848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c84a:	4433      	add	r3, r6
 800c84c:	9309      	str	r3, [sp, #36]	; 0x24
 800c84e:	e768      	b.n	800c722 <_svfiprintf_r+0x4e>
 800c850:	460c      	mov	r4, r1
 800c852:	2001      	movs	r0, #1
 800c854:	fb0c 3202 	mla	r2, ip, r2, r3
 800c858:	e7a6      	b.n	800c7a8 <_svfiprintf_r+0xd4>
 800c85a:	2300      	movs	r3, #0
 800c85c:	f04f 0c0a 	mov.w	ip, #10
 800c860:	4619      	mov	r1, r3
 800c862:	3401      	adds	r4, #1
 800c864:	9305      	str	r3, [sp, #20]
 800c866:	4620      	mov	r0, r4
 800c868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c86c:	3a30      	subs	r2, #48	; 0x30
 800c86e:	2a09      	cmp	r2, #9
 800c870:	d903      	bls.n	800c87a <_svfiprintf_r+0x1a6>
 800c872:	2b00      	cmp	r3, #0
 800c874:	d0c6      	beq.n	800c804 <_svfiprintf_r+0x130>
 800c876:	9105      	str	r1, [sp, #20]
 800c878:	e7c4      	b.n	800c804 <_svfiprintf_r+0x130>
 800c87a:	4604      	mov	r4, r0
 800c87c:	2301      	movs	r3, #1
 800c87e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c882:	e7f0      	b.n	800c866 <_svfiprintf_r+0x192>
 800c884:	ab03      	add	r3, sp, #12
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	462a      	mov	r2, r5
 800c88a:	4638      	mov	r0, r7
 800c88c:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <_svfiprintf_r+0x1f8>)
 800c88e:	a904      	add	r1, sp, #16
 800c890:	f3af 8000 	nop.w
 800c894:	1c42      	adds	r2, r0, #1
 800c896:	4606      	mov	r6, r0
 800c898:	d1d6      	bne.n	800c848 <_svfiprintf_r+0x174>
 800c89a:	89ab      	ldrh	r3, [r5, #12]
 800c89c:	065b      	lsls	r3, r3, #25
 800c89e:	f53f af2d 	bmi.w	800c6fc <_svfiprintf_r+0x28>
 800c8a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8a4:	b01d      	add	sp, #116	; 0x74
 800c8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8aa:	ab03      	add	r3, sp, #12
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	462a      	mov	r2, r5
 800c8b0:	4638      	mov	r0, r7
 800c8b2:	4b06      	ldr	r3, [pc, #24]	; (800c8cc <_svfiprintf_r+0x1f8>)
 800c8b4:	a904      	add	r1, sp, #16
 800c8b6:	f000 f87d 	bl	800c9b4 <_printf_i>
 800c8ba:	e7eb      	b.n	800c894 <_svfiprintf_r+0x1c0>
 800c8bc:	0800dc8b 	.word	0x0800dc8b
 800c8c0:	0800dc91 	.word	0x0800dc91
 800c8c4:	0800dc95 	.word	0x0800dc95
 800c8c8:	00000000 	.word	0x00000000
 800c8cc:	0800c621 	.word	0x0800c621

0800c8d0 <_printf_common>:
 800c8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d4:	4616      	mov	r6, r2
 800c8d6:	4699      	mov	r9, r3
 800c8d8:	688a      	ldr	r2, [r1, #8]
 800c8da:	690b      	ldr	r3, [r1, #16]
 800c8dc:	4607      	mov	r7, r0
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	bfb8      	it	lt
 800c8e2:	4613      	movlt	r3, r2
 800c8e4:	6033      	str	r3, [r6, #0]
 800c8e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8ea:	460c      	mov	r4, r1
 800c8ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8f0:	b10a      	cbz	r2, 800c8f6 <_printf_common+0x26>
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	6033      	str	r3, [r6, #0]
 800c8f6:	6823      	ldr	r3, [r4, #0]
 800c8f8:	0699      	lsls	r1, r3, #26
 800c8fa:	bf42      	ittt	mi
 800c8fc:	6833      	ldrmi	r3, [r6, #0]
 800c8fe:	3302      	addmi	r3, #2
 800c900:	6033      	strmi	r3, [r6, #0]
 800c902:	6825      	ldr	r5, [r4, #0]
 800c904:	f015 0506 	ands.w	r5, r5, #6
 800c908:	d106      	bne.n	800c918 <_printf_common+0x48>
 800c90a:	f104 0a19 	add.w	sl, r4, #25
 800c90e:	68e3      	ldr	r3, [r4, #12]
 800c910:	6832      	ldr	r2, [r6, #0]
 800c912:	1a9b      	subs	r3, r3, r2
 800c914:	42ab      	cmp	r3, r5
 800c916:	dc2b      	bgt.n	800c970 <_printf_common+0xa0>
 800c918:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c91c:	1e13      	subs	r3, r2, #0
 800c91e:	6822      	ldr	r2, [r4, #0]
 800c920:	bf18      	it	ne
 800c922:	2301      	movne	r3, #1
 800c924:	0692      	lsls	r2, r2, #26
 800c926:	d430      	bmi.n	800c98a <_printf_common+0xba>
 800c928:	4649      	mov	r1, r9
 800c92a:	4638      	mov	r0, r7
 800c92c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c930:	47c0      	blx	r8
 800c932:	3001      	adds	r0, #1
 800c934:	d023      	beq.n	800c97e <_printf_common+0xae>
 800c936:	6823      	ldr	r3, [r4, #0]
 800c938:	6922      	ldr	r2, [r4, #16]
 800c93a:	f003 0306 	and.w	r3, r3, #6
 800c93e:	2b04      	cmp	r3, #4
 800c940:	bf14      	ite	ne
 800c942:	2500      	movne	r5, #0
 800c944:	6833      	ldreq	r3, [r6, #0]
 800c946:	f04f 0600 	mov.w	r6, #0
 800c94a:	bf08      	it	eq
 800c94c:	68e5      	ldreq	r5, [r4, #12]
 800c94e:	f104 041a 	add.w	r4, r4, #26
 800c952:	bf08      	it	eq
 800c954:	1aed      	subeq	r5, r5, r3
 800c956:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c95a:	bf08      	it	eq
 800c95c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c960:	4293      	cmp	r3, r2
 800c962:	bfc4      	itt	gt
 800c964:	1a9b      	subgt	r3, r3, r2
 800c966:	18ed      	addgt	r5, r5, r3
 800c968:	42b5      	cmp	r5, r6
 800c96a:	d11a      	bne.n	800c9a2 <_printf_common+0xd2>
 800c96c:	2000      	movs	r0, #0
 800c96e:	e008      	b.n	800c982 <_printf_common+0xb2>
 800c970:	2301      	movs	r3, #1
 800c972:	4652      	mov	r2, sl
 800c974:	4649      	mov	r1, r9
 800c976:	4638      	mov	r0, r7
 800c978:	47c0      	blx	r8
 800c97a:	3001      	adds	r0, #1
 800c97c:	d103      	bne.n	800c986 <_printf_common+0xb6>
 800c97e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c986:	3501      	adds	r5, #1
 800c988:	e7c1      	b.n	800c90e <_printf_common+0x3e>
 800c98a:	2030      	movs	r0, #48	; 0x30
 800c98c:	18e1      	adds	r1, r4, r3
 800c98e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c992:	1c5a      	adds	r2, r3, #1
 800c994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c998:	4422      	add	r2, r4
 800c99a:	3302      	adds	r3, #2
 800c99c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9a0:	e7c2      	b.n	800c928 <_printf_common+0x58>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	4622      	mov	r2, r4
 800c9a6:	4649      	mov	r1, r9
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	47c0      	blx	r8
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	d0e6      	beq.n	800c97e <_printf_common+0xae>
 800c9b0:	3601      	adds	r6, #1
 800c9b2:	e7d9      	b.n	800c968 <_printf_common+0x98>

0800c9b4 <_printf_i>:
 800c9b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9b8:	7e0f      	ldrb	r7, [r1, #24]
 800c9ba:	4691      	mov	r9, r2
 800c9bc:	2f78      	cmp	r7, #120	; 0x78
 800c9be:	4680      	mov	r8, r0
 800c9c0:	460c      	mov	r4, r1
 800c9c2:	469a      	mov	sl, r3
 800c9c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c9c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c9ca:	d807      	bhi.n	800c9dc <_printf_i+0x28>
 800c9cc:	2f62      	cmp	r7, #98	; 0x62
 800c9ce:	d80a      	bhi.n	800c9e6 <_printf_i+0x32>
 800c9d0:	2f00      	cmp	r7, #0
 800c9d2:	f000 80d5 	beq.w	800cb80 <_printf_i+0x1cc>
 800c9d6:	2f58      	cmp	r7, #88	; 0x58
 800c9d8:	f000 80c1 	beq.w	800cb5e <_printf_i+0x1aa>
 800c9dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9e4:	e03a      	b.n	800ca5c <_printf_i+0xa8>
 800c9e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9ea:	2b15      	cmp	r3, #21
 800c9ec:	d8f6      	bhi.n	800c9dc <_printf_i+0x28>
 800c9ee:	a101      	add	r1, pc, #4	; (adr r1, 800c9f4 <_printf_i+0x40>)
 800c9f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9f4:	0800ca4d 	.word	0x0800ca4d
 800c9f8:	0800ca61 	.word	0x0800ca61
 800c9fc:	0800c9dd 	.word	0x0800c9dd
 800ca00:	0800c9dd 	.word	0x0800c9dd
 800ca04:	0800c9dd 	.word	0x0800c9dd
 800ca08:	0800c9dd 	.word	0x0800c9dd
 800ca0c:	0800ca61 	.word	0x0800ca61
 800ca10:	0800c9dd 	.word	0x0800c9dd
 800ca14:	0800c9dd 	.word	0x0800c9dd
 800ca18:	0800c9dd 	.word	0x0800c9dd
 800ca1c:	0800c9dd 	.word	0x0800c9dd
 800ca20:	0800cb67 	.word	0x0800cb67
 800ca24:	0800ca8d 	.word	0x0800ca8d
 800ca28:	0800cb21 	.word	0x0800cb21
 800ca2c:	0800c9dd 	.word	0x0800c9dd
 800ca30:	0800c9dd 	.word	0x0800c9dd
 800ca34:	0800cb89 	.word	0x0800cb89
 800ca38:	0800c9dd 	.word	0x0800c9dd
 800ca3c:	0800ca8d 	.word	0x0800ca8d
 800ca40:	0800c9dd 	.word	0x0800c9dd
 800ca44:	0800c9dd 	.word	0x0800c9dd
 800ca48:	0800cb29 	.word	0x0800cb29
 800ca4c:	682b      	ldr	r3, [r5, #0]
 800ca4e:	1d1a      	adds	r2, r3, #4
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	602a      	str	r2, [r5, #0]
 800ca54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e0a0      	b.n	800cba2 <_printf_i+0x1ee>
 800ca60:	6820      	ldr	r0, [r4, #0]
 800ca62:	682b      	ldr	r3, [r5, #0]
 800ca64:	0607      	lsls	r7, r0, #24
 800ca66:	f103 0104 	add.w	r1, r3, #4
 800ca6a:	6029      	str	r1, [r5, #0]
 800ca6c:	d501      	bpl.n	800ca72 <_printf_i+0xbe>
 800ca6e:	681e      	ldr	r6, [r3, #0]
 800ca70:	e003      	b.n	800ca7a <_printf_i+0xc6>
 800ca72:	0646      	lsls	r6, r0, #25
 800ca74:	d5fb      	bpl.n	800ca6e <_printf_i+0xba>
 800ca76:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ca7a:	2e00      	cmp	r6, #0
 800ca7c:	da03      	bge.n	800ca86 <_printf_i+0xd2>
 800ca7e:	232d      	movs	r3, #45	; 0x2d
 800ca80:	4276      	negs	r6, r6
 800ca82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca86:	230a      	movs	r3, #10
 800ca88:	4859      	ldr	r0, [pc, #356]	; (800cbf0 <_printf_i+0x23c>)
 800ca8a:	e012      	b.n	800cab2 <_printf_i+0xfe>
 800ca8c:	682b      	ldr	r3, [r5, #0]
 800ca8e:	6820      	ldr	r0, [r4, #0]
 800ca90:	1d19      	adds	r1, r3, #4
 800ca92:	6029      	str	r1, [r5, #0]
 800ca94:	0605      	lsls	r5, r0, #24
 800ca96:	d501      	bpl.n	800ca9c <_printf_i+0xe8>
 800ca98:	681e      	ldr	r6, [r3, #0]
 800ca9a:	e002      	b.n	800caa2 <_printf_i+0xee>
 800ca9c:	0641      	lsls	r1, r0, #25
 800ca9e:	d5fb      	bpl.n	800ca98 <_printf_i+0xe4>
 800caa0:	881e      	ldrh	r6, [r3, #0]
 800caa2:	2f6f      	cmp	r7, #111	; 0x6f
 800caa4:	bf0c      	ite	eq
 800caa6:	2308      	moveq	r3, #8
 800caa8:	230a      	movne	r3, #10
 800caaa:	4851      	ldr	r0, [pc, #324]	; (800cbf0 <_printf_i+0x23c>)
 800caac:	2100      	movs	r1, #0
 800caae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cab2:	6865      	ldr	r5, [r4, #4]
 800cab4:	2d00      	cmp	r5, #0
 800cab6:	bfa8      	it	ge
 800cab8:	6821      	ldrge	r1, [r4, #0]
 800caba:	60a5      	str	r5, [r4, #8]
 800cabc:	bfa4      	itt	ge
 800cabe:	f021 0104 	bicge.w	r1, r1, #4
 800cac2:	6021      	strge	r1, [r4, #0]
 800cac4:	b90e      	cbnz	r6, 800caca <_printf_i+0x116>
 800cac6:	2d00      	cmp	r5, #0
 800cac8:	d04b      	beq.n	800cb62 <_printf_i+0x1ae>
 800caca:	4615      	mov	r5, r2
 800cacc:	fbb6 f1f3 	udiv	r1, r6, r3
 800cad0:	fb03 6711 	mls	r7, r3, r1, r6
 800cad4:	5dc7      	ldrb	r7, [r0, r7]
 800cad6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cada:	4637      	mov	r7, r6
 800cadc:	42bb      	cmp	r3, r7
 800cade:	460e      	mov	r6, r1
 800cae0:	d9f4      	bls.n	800cacc <_printf_i+0x118>
 800cae2:	2b08      	cmp	r3, #8
 800cae4:	d10b      	bne.n	800cafe <_printf_i+0x14a>
 800cae6:	6823      	ldr	r3, [r4, #0]
 800cae8:	07de      	lsls	r6, r3, #31
 800caea:	d508      	bpl.n	800cafe <_printf_i+0x14a>
 800caec:	6923      	ldr	r3, [r4, #16]
 800caee:	6861      	ldr	r1, [r4, #4]
 800caf0:	4299      	cmp	r1, r3
 800caf2:	bfde      	ittt	le
 800caf4:	2330      	movle	r3, #48	; 0x30
 800caf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cafa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cafe:	1b52      	subs	r2, r2, r5
 800cb00:	6122      	str	r2, [r4, #16]
 800cb02:	464b      	mov	r3, r9
 800cb04:	4621      	mov	r1, r4
 800cb06:	4640      	mov	r0, r8
 800cb08:	f8cd a000 	str.w	sl, [sp]
 800cb0c:	aa03      	add	r2, sp, #12
 800cb0e:	f7ff fedf 	bl	800c8d0 <_printf_common>
 800cb12:	3001      	adds	r0, #1
 800cb14:	d14a      	bne.n	800cbac <_printf_i+0x1f8>
 800cb16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb1a:	b004      	add	sp, #16
 800cb1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb20:	6823      	ldr	r3, [r4, #0]
 800cb22:	f043 0320 	orr.w	r3, r3, #32
 800cb26:	6023      	str	r3, [r4, #0]
 800cb28:	2778      	movs	r7, #120	; 0x78
 800cb2a:	4832      	ldr	r0, [pc, #200]	; (800cbf4 <_printf_i+0x240>)
 800cb2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb30:	6823      	ldr	r3, [r4, #0]
 800cb32:	6829      	ldr	r1, [r5, #0]
 800cb34:	061f      	lsls	r7, r3, #24
 800cb36:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb3a:	d402      	bmi.n	800cb42 <_printf_i+0x18e>
 800cb3c:	065f      	lsls	r7, r3, #25
 800cb3e:	bf48      	it	mi
 800cb40:	b2b6      	uxthmi	r6, r6
 800cb42:	07df      	lsls	r7, r3, #31
 800cb44:	bf48      	it	mi
 800cb46:	f043 0320 	orrmi.w	r3, r3, #32
 800cb4a:	6029      	str	r1, [r5, #0]
 800cb4c:	bf48      	it	mi
 800cb4e:	6023      	strmi	r3, [r4, #0]
 800cb50:	b91e      	cbnz	r6, 800cb5a <_printf_i+0x1a6>
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	f023 0320 	bic.w	r3, r3, #32
 800cb58:	6023      	str	r3, [r4, #0]
 800cb5a:	2310      	movs	r3, #16
 800cb5c:	e7a6      	b.n	800caac <_printf_i+0xf8>
 800cb5e:	4824      	ldr	r0, [pc, #144]	; (800cbf0 <_printf_i+0x23c>)
 800cb60:	e7e4      	b.n	800cb2c <_printf_i+0x178>
 800cb62:	4615      	mov	r5, r2
 800cb64:	e7bd      	b.n	800cae2 <_printf_i+0x12e>
 800cb66:	682b      	ldr	r3, [r5, #0]
 800cb68:	6826      	ldr	r6, [r4, #0]
 800cb6a:	1d18      	adds	r0, r3, #4
 800cb6c:	6961      	ldr	r1, [r4, #20]
 800cb6e:	6028      	str	r0, [r5, #0]
 800cb70:	0635      	lsls	r5, r6, #24
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	d501      	bpl.n	800cb7a <_printf_i+0x1c6>
 800cb76:	6019      	str	r1, [r3, #0]
 800cb78:	e002      	b.n	800cb80 <_printf_i+0x1cc>
 800cb7a:	0670      	lsls	r0, r6, #25
 800cb7c:	d5fb      	bpl.n	800cb76 <_printf_i+0x1c2>
 800cb7e:	8019      	strh	r1, [r3, #0]
 800cb80:	2300      	movs	r3, #0
 800cb82:	4615      	mov	r5, r2
 800cb84:	6123      	str	r3, [r4, #16]
 800cb86:	e7bc      	b.n	800cb02 <_printf_i+0x14e>
 800cb88:	682b      	ldr	r3, [r5, #0]
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	1d1a      	adds	r2, r3, #4
 800cb8e:	602a      	str	r2, [r5, #0]
 800cb90:	681d      	ldr	r5, [r3, #0]
 800cb92:	6862      	ldr	r2, [r4, #4]
 800cb94:	4628      	mov	r0, r5
 800cb96:	f000 f878 	bl	800cc8a <memchr>
 800cb9a:	b108      	cbz	r0, 800cba0 <_printf_i+0x1ec>
 800cb9c:	1b40      	subs	r0, r0, r5
 800cb9e:	6060      	str	r0, [r4, #4]
 800cba0:	6863      	ldr	r3, [r4, #4]
 800cba2:	6123      	str	r3, [r4, #16]
 800cba4:	2300      	movs	r3, #0
 800cba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbaa:	e7aa      	b.n	800cb02 <_printf_i+0x14e>
 800cbac:	462a      	mov	r2, r5
 800cbae:	4649      	mov	r1, r9
 800cbb0:	4640      	mov	r0, r8
 800cbb2:	6923      	ldr	r3, [r4, #16]
 800cbb4:	47d0      	blx	sl
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	d0ad      	beq.n	800cb16 <_printf_i+0x162>
 800cbba:	6823      	ldr	r3, [r4, #0]
 800cbbc:	079b      	lsls	r3, r3, #30
 800cbbe:	d413      	bmi.n	800cbe8 <_printf_i+0x234>
 800cbc0:	68e0      	ldr	r0, [r4, #12]
 800cbc2:	9b03      	ldr	r3, [sp, #12]
 800cbc4:	4298      	cmp	r0, r3
 800cbc6:	bfb8      	it	lt
 800cbc8:	4618      	movlt	r0, r3
 800cbca:	e7a6      	b.n	800cb1a <_printf_i+0x166>
 800cbcc:	2301      	movs	r3, #1
 800cbce:	4632      	mov	r2, r6
 800cbd0:	4649      	mov	r1, r9
 800cbd2:	4640      	mov	r0, r8
 800cbd4:	47d0      	blx	sl
 800cbd6:	3001      	adds	r0, #1
 800cbd8:	d09d      	beq.n	800cb16 <_printf_i+0x162>
 800cbda:	3501      	adds	r5, #1
 800cbdc:	68e3      	ldr	r3, [r4, #12]
 800cbde:	9903      	ldr	r1, [sp, #12]
 800cbe0:	1a5b      	subs	r3, r3, r1
 800cbe2:	42ab      	cmp	r3, r5
 800cbe4:	dcf2      	bgt.n	800cbcc <_printf_i+0x218>
 800cbe6:	e7eb      	b.n	800cbc0 <_printf_i+0x20c>
 800cbe8:	2500      	movs	r5, #0
 800cbea:	f104 0619 	add.w	r6, r4, #25
 800cbee:	e7f5      	b.n	800cbdc <_printf_i+0x228>
 800cbf0:	0800dc9c 	.word	0x0800dc9c
 800cbf4:	0800dcad 	.word	0x0800dcad

0800cbf8 <_realloc_r>:
 800cbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbfc:	4680      	mov	r8, r0
 800cbfe:	4614      	mov	r4, r2
 800cc00:	460e      	mov	r6, r1
 800cc02:	b921      	cbnz	r1, 800cc0e <_realloc_r+0x16>
 800cc04:	4611      	mov	r1, r2
 800cc06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0a:	f7ff bb77 	b.w	800c2fc <_malloc_r>
 800cc0e:	b92a      	cbnz	r2, 800cc1c <_realloc_r+0x24>
 800cc10:	f7ff fcbe 	bl	800c590 <_free_r>
 800cc14:	4625      	mov	r5, r4
 800cc16:	4628      	mov	r0, r5
 800cc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc1c:	f000 f851 	bl	800ccc2 <_malloc_usable_size_r>
 800cc20:	4284      	cmp	r4, r0
 800cc22:	4607      	mov	r7, r0
 800cc24:	d802      	bhi.n	800cc2c <_realloc_r+0x34>
 800cc26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc2a:	d812      	bhi.n	800cc52 <_realloc_r+0x5a>
 800cc2c:	4621      	mov	r1, r4
 800cc2e:	4640      	mov	r0, r8
 800cc30:	f7ff fb64 	bl	800c2fc <_malloc_r>
 800cc34:	4605      	mov	r5, r0
 800cc36:	2800      	cmp	r0, #0
 800cc38:	d0ed      	beq.n	800cc16 <_realloc_r+0x1e>
 800cc3a:	42bc      	cmp	r4, r7
 800cc3c:	4622      	mov	r2, r4
 800cc3e:	4631      	mov	r1, r6
 800cc40:	bf28      	it	cs
 800cc42:	463a      	movcs	r2, r7
 800cc44:	f000 f82f 	bl	800cca6 <memcpy>
 800cc48:	4631      	mov	r1, r6
 800cc4a:	4640      	mov	r0, r8
 800cc4c:	f7ff fca0 	bl	800c590 <_free_r>
 800cc50:	e7e1      	b.n	800cc16 <_realloc_r+0x1e>
 800cc52:	4635      	mov	r5, r6
 800cc54:	e7df      	b.n	800cc16 <_realloc_r+0x1e>

0800cc56 <memmove>:
 800cc56:	4288      	cmp	r0, r1
 800cc58:	b510      	push	{r4, lr}
 800cc5a:	eb01 0402 	add.w	r4, r1, r2
 800cc5e:	d902      	bls.n	800cc66 <memmove+0x10>
 800cc60:	4284      	cmp	r4, r0
 800cc62:	4623      	mov	r3, r4
 800cc64:	d807      	bhi.n	800cc76 <memmove+0x20>
 800cc66:	1e43      	subs	r3, r0, #1
 800cc68:	42a1      	cmp	r1, r4
 800cc6a:	d008      	beq.n	800cc7e <memmove+0x28>
 800cc6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc70:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc74:	e7f8      	b.n	800cc68 <memmove+0x12>
 800cc76:	4601      	mov	r1, r0
 800cc78:	4402      	add	r2, r0
 800cc7a:	428a      	cmp	r2, r1
 800cc7c:	d100      	bne.n	800cc80 <memmove+0x2a>
 800cc7e:	bd10      	pop	{r4, pc}
 800cc80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc84:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc88:	e7f7      	b.n	800cc7a <memmove+0x24>

0800cc8a <memchr>:
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	b510      	push	{r4, lr}
 800cc8e:	b2c9      	uxtb	r1, r1
 800cc90:	4402      	add	r2, r0
 800cc92:	4293      	cmp	r3, r2
 800cc94:	4618      	mov	r0, r3
 800cc96:	d101      	bne.n	800cc9c <memchr+0x12>
 800cc98:	2000      	movs	r0, #0
 800cc9a:	e003      	b.n	800cca4 <memchr+0x1a>
 800cc9c:	7804      	ldrb	r4, [r0, #0]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	428c      	cmp	r4, r1
 800cca2:	d1f6      	bne.n	800cc92 <memchr+0x8>
 800cca4:	bd10      	pop	{r4, pc}

0800cca6 <memcpy>:
 800cca6:	440a      	add	r2, r1
 800cca8:	4291      	cmp	r1, r2
 800ccaa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ccae:	d100      	bne.n	800ccb2 <memcpy+0xc>
 800ccb0:	4770      	bx	lr
 800ccb2:	b510      	push	{r4, lr}
 800ccb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccb8:	4291      	cmp	r1, r2
 800ccba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccbe:	d1f9      	bne.n	800ccb4 <memcpy+0xe>
 800ccc0:	bd10      	pop	{r4, pc}

0800ccc2 <_malloc_usable_size_r>:
 800ccc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccc6:	1f18      	subs	r0, r3, #4
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	bfbc      	itt	lt
 800cccc:	580b      	ldrlt	r3, [r1, r0]
 800ccce:	18c0      	addlt	r0, r0, r3
 800ccd0:	4770      	bx	lr
	...

0800ccd4 <_init>:
 800ccd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd6:	bf00      	nop
 800ccd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccda:	bc08      	pop	{r3}
 800ccdc:	469e      	mov	lr, r3
 800ccde:	4770      	bx	lr

0800cce0 <_fini>:
 800cce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce2:	bf00      	nop
 800cce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cce6:	bc08      	pop	{r3}
 800cce8:	469e      	mov	lr, r3
 800ccea:	4770      	bx	lr
