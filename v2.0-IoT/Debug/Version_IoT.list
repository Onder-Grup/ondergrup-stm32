
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cec4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff4  0800d0a8  0800d0a8  0001d0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e09c  0800e09c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e09c  0800e09c  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e09c  0800e09c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e09c  0800e09c  0001e09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0a0  0800e0a0  0001e0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800e0a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000fc  0800e1a0  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800e1a0  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   000169c0  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003532  00000000  00000000  00036b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  0003a060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e64  00000000  00000000  0003b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003c154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c43f  00000000  00000000  000587f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eea2  00000000  00000000  00074c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005244  00000000  00000000  00113adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d090 	.word	0x0800d090

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800d090 	.word	0x0800d090

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fd90 	bl	8009d74 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fc08 	bl	8008a6c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	200003a8 	.word	0x200003a8
 80004c0:	200001f9 	.word	0x200001f9
 80004c4:	20000221 	.word	0x20000221
 80004c8:	20000224 	.word	0x20000224
 80004cc:	20000225 	.word	0x20000225
 80004d0:	20000226 	.word	0x20000226
 80004d4:	20000227 	.word	0x20000227
 80004d8:	20000228 	.word	0x20000228
 80004dc:	20000229 	.word	0x20000229
 80004e0:	20000239 	.word	0x20000239
 80004e4:	2000022a 	.word	0x2000022a
 80004e8:	2000023a 	.word	0x2000023a
 80004ec:	2000022b 	.word	0x2000022b
 80004f0:	2000023b 	.word	0x2000023b
 80004f4:	2000022e 	.word	0x2000022e
 80004f8:	2000022f 	.word	0x2000022f
 80004fc:	20000230 	.word	0x20000230
 8000500:	20000231 	.word	0x20000231
 8000504:	20000232 	.word	0x20000232
 8000508:	20000233 	.word	0x20000233
 800050c:	20000234 	.word	0x20000234
 8000510:	20000235 	.word	0x20000235
 8000514:	20000236 	.word	0x20000236
 8000518:	20000237 	.word	0x20000237
 800051c:	20000238 	.word	0x20000238
 8000520:	2000023c 	.word	0x2000023c
 8000524:	2000023e 	.word	0x2000023e
 8000528:	2000021c 	.word	0x2000021c
 800052c:	2000021d 	.word	0x2000021d
 8000530:	2000021e 	.word	0x2000021e
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	2000021f 	.word	0x2000021f
 8000540:	20000241 	.word	0x20000241
 8000544:	2000023f 	.word	0x2000023f
 8000548:	2000022d 	.word	0x2000022d
 800054c:	20000240 	.word	0x20000240
 8000550:	2000022c 	.word	0x2000022c
 8000554:	20000242 	.word	0x20000242
 8000558:	20000243 	.word	0x20000243
 800055c:	20000244 	.word	0x20000244
 8000560:	20000245 	.word	0x20000245
 8000564:	20000246 	.word	0x20000246
 8000568:	20000247 	.word	0x20000247
 800056c:	20000248 	.word	0x20000248
 8000570:	20000249 	.word	0x20000249
 8000574:	2000024a 	.word	0x2000024a
 8000578:	2000024b 	.word	0x2000024b
 800057c:	200001f8 	.word	0x200001f8
	}

	if(kapi1AcSure>5) {
 8000580:	4b57      	ldr	r3, [pc, #348]	; (80006e0 <eepromKontrol+0x4ac>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b55      	ldr	r3, [pc, #340]	; (80006e0 <eepromKontrol+0x4ac>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b55      	ldr	r3, [pc, #340]	; (80006e4 <eepromKontrol+0x4b0>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b53      	ldr	r3, [pc, #332]	; (80006e4 <eepromKontrol+0x4b0>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b52      	ldr	r3, [pc, #328]	; (80006e8 <eepromKontrol+0x4b4>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b50      	ldr	r3, [pc, #320]	; (80006e8 <eepromKontrol+0x4b4>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b50      	ldr	r3, [pc, #320]	; (80006ec <eepromKontrol+0x4b8>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4e      	ldr	r3, [pc, #312]	; (80006ec <eepromKontrol+0x4b8>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4d      	ldr	r3, [pc, #308]	; (80006f0 <eepromKontrol+0x4bc>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4b      	ldr	r3, [pc, #300]	; (80006f0 <eepromKontrol+0x4bc>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4b      	ldr	r3, [pc, #300]	; (80006f4 <eepromKontrol+0x4c0>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b49      	ldr	r3, [pc, #292]	; (80006f4 <eepromKontrol+0x4c0>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b48      	ldr	r3, [pc, #288]	; (80006f8 <eepromKontrol+0x4c4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <eepromKontrol+0x4c4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b46      	ldr	r3, [pc, #280]	; (80006fc <eepromKontrol+0x4c8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b44      	ldr	r3, [pc, #272]	; (80006fc <eepromKontrol+0x4c8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <eepromKontrol+0x4cc>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b41      	ldr	r3, [pc, #260]	; (8000700 <eepromKontrol+0x4cc>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b41      	ldr	r3, [pc, #260]	; (8000704 <eepromKontrol+0x4d0>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <eepromKontrol+0x4d0>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3e      	ldr	r3, [pc, #248]	; (8000708 <eepromKontrol+0x4d4>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3c      	ldr	r3, [pc, #240]	; (8000708 <eepromKontrol+0x4d4>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3c      	ldr	r3, [pc, #240]	; (800070c <eepromKontrol+0x4d8>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3a      	ldr	r3, [pc, #232]	; (800070c <eepromKontrol+0x4d8>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <eepromKontrol+0x4dc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b37      	ldr	r3, [pc, #220]	; (8000710 <eepromKontrol+0x4dc>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <eepromKontrol+0x4e0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <eepromKontrol+0x4e0>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b34      	ldr	r3, [pc, #208]	; (8000718 <eepromKontrol+0x4e4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b32      	ldr	r3, [pc, #200]	; (8000718 <eepromKontrol+0x4e4>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <eepromKontrol+0x4e8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <eepromKontrol+0x4e8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <eepromKontrol+0x4ec>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <eepromKontrol+0x4ec>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <eepromKontrol+0x4f0>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <eepromKontrol+0x4f0>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <eepromKontrol+0x4f4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <eepromKontrol+0x4f4>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <eepromKontrol+0x4f8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <eepromKontrol+0x4f8>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <eepromKontrol+0x4fc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <eepromKontrol+0x4fc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <eepromKontrol+0x500>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <eepromKontrol+0x500>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	//memcpy(machineIDInt, &eepromData[idStartPos], 12);
	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f83f 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	; 0xfa
 80006bc:	f008 f9d6 	bl	8008a6c <HAL_Delay>
	//memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f839 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	; 0xfa
 80006c8:	f008 f9d0 	bl	8008a6c <HAL_Delay>
	//memcpy(wifiPassInt, &eepromData[passStartPos], 20);
	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f833 	bl	8000738 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	; 0xfa
 80006d4:	f008 f9ca 	bl	8008a6c <HAL_Delay>
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000239 	.word	0x20000239
 80006e4:	2000022a 	.word	0x2000022a
 80006e8:	2000023a 	.word	0x2000023a
 80006ec:	2000022b 	.word	0x2000022b
 80006f0:	2000022d 	.word	0x2000022d
 80006f4:	2000023b 	.word	0x2000023b
 80006f8:	2000022e 	.word	0x2000022e
 80006fc:	2000022f 	.word	0x2000022f
 8000700:	20000230 	.word	0x20000230
 8000704:	20000231 	.word	0x20000231
 8000708:	20000232 	.word	0x20000232
 800070c:	20000233 	.word	0x20000233
 8000710:	20000234 	.word	0x20000234
 8000714:	20000235 	.word	0x20000235
 8000718:	20000236 	.word	0x20000236
 800071c:	20000237 	.word	0x20000237
 8000720:	20000238 	.word	0x20000238
 8000724:	2000023c 	.word	0x2000023c
 8000728:	2000023e 	.word	0x2000023e
 800072c:	20000240 	.word	0x20000240
 8000730:	20000241 	.word	0x20000241
 8000734:	2000023f 	.word	0x2000023f

08000738 <convertArrays>:

void convertArrays(int state) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d122      	bne.n	800078c <convertArrays+0x54>
		memset(machineID, 0, machineID[0]);
 8000746:	4b37      	ldr	r3, [pc, #220]	; (8000824 <convertArrays+0xec>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	4835      	ldr	r0, [pc, #212]	; (8000824 <convertArrays+0xec>)
 8000750:	f00c f8af 	bl	800c8b2 <memset>
		int eepromVal = idStartPos;
 8000754:	4b34      	ldr	r3, [pc, #208]	; (8000828 <convertArrays+0xf0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<12; i++) {
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	e011      	b.n	8000784 <convertArrays+0x4c>
			machineID[i] = idCharactersArray[eepromData[eepromVal]];
 8000760:	4a32      	ldr	r2, [pc, #200]	; (800082c <convertArrays+0xf4>)
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <convertArrays+0xf8>)
 800076c:	5c99      	ldrb	r1, [r3, r2]
 800076e:	4a2d      	ldr	r2, [pc, #180]	; (8000824 <convertArrays+0xec>)
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	4413      	add	r3, r2
 8000774:	460a      	mov	r2, r1
 8000776:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	3301      	adds	r3, #1
 800077c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<12; i++) {
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	3301      	adds	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	2b0b      	cmp	r3, #11
 8000788:	ddea      	ble.n	8000760 <convertArrays+0x28>
			wifiPass[i] = charactersArray[eepromData[eepromVal]];

			eepromVal++;
		}
	}
}
 800078a:	e047      	b.n	800081c <convertArrays+0xe4>
	} else if(state == 2) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d122      	bne.n	80007d8 <convertArrays+0xa0>
		memset(wifiSSID, 0, wifiSSID[0]);
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <convertArrays+0xfc>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	4826      	ldr	r0, [pc, #152]	; (8000834 <convertArrays+0xfc>)
 800079c:	f00c f889 	bl	800c8b2 <memset>
		int eepromVal = ssidStartPos;
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <convertArrays+0x100>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	617b      	str	r3, [r7, #20]
		for(int i=0; i<20; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	e011      	b.n	80007d0 <convertArrays+0x98>
			wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007ac:	4a1f      	ldr	r2, [pc, #124]	; (800082c <convertArrays+0xf4>)
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <convertArrays+0x104>)
 80007b8:	5c99      	ldrb	r1, [r3, r2]
 80007ba:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <convertArrays+0xfc>)
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	4413      	add	r3, r2
 80007c0:	460a      	mov	r2, r1
 80007c2:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3301      	adds	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<20; i++) {
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	3301      	adds	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	2b13      	cmp	r3, #19
 80007d4:	ddea      	ble.n	80007ac <convertArrays+0x74>
}
 80007d6:	e021      	b.n	800081c <convertArrays+0xe4>
		memset(wifiPass, 0, wifiPass[0]);
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <convertArrays+0x108>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	2100      	movs	r1, #0
 80007e0:	4817      	ldr	r0, [pc, #92]	; (8000840 <convertArrays+0x108>)
 80007e2:	f00c f866 	bl	800c8b2 <memset>
		int eepromVal = passStartPos;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <convertArrays+0x10c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<20; i++) {
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	e011      	b.n	8000816 <convertArrays+0xde>
			wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <convertArrays+0xf4>)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <convertArrays+0x104>)
 80007fe:	5c99      	ldrb	r1, [r3, r2]
 8000800:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <convertArrays+0x108>)
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	4413      	add	r3, r2
 8000806:	460a      	mov	r2, r1
 8000808:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3301      	adds	r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<20; i++) {
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	3301      	adds	r3, #1
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	2b13      	cmp	r3, #19
 800081a:	ddea      	ble.n	80007f2 <convertArrays+0xba>
}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000190 	.word	0x20000190
 8000828:	20000004 	.word	0x20000004
 800082c:	20000118 	.word	0x20000118
 8000830:	20000010 	.word	0x20000010
 8000834:	2000019c 	.word	0x2000019c
 8000838:	20000008 	.word	0x20000008
 800083c:	2000001c 	.word	0x2000001c
 8000840:	200001b0 	.word	0x200001b0
 8000844:	2000000c 	.word	0x2000000c

08000848 <resetEEPROM4Wifi>:
	} else {
		//wifi pass convert
	}
}

void resetEEPROM4Wifi(int state) {
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d11e      	bne.n	8000894 <resetEEPROM4Wifi+0x4c>
		int eepromVal = idStartPos;
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <resetEEPROM4Wifi+0xd8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<machineIDCharacterLimit; i++) {
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	e014      	b.n	800088c <resetEEPROM4Wifi+0x44>
			machineID[i] = '\0';
 8000862:	4a30      	ldr	r2, [pc, #192]	; (8000924 <resetEEPROM4Wifi+0xdc>)
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	4413      	add	r3, r2
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
			machineIDInt[i] = '\0';
 800086c:	4a2e      	ldr	r2, [pc, #184]	; (8000928 <resetEEPROM4Wifi+0xe0>)
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	4413      	add	r3, r2
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 8000876:	4a2d      	ldr	r2, [pc, #180]	; (800092c <resetEEPROM4Wifi+0xe4>)
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	4413      	add	r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	3301      	adds	r3, #1
 8000884:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	3301      	adds	r3, #1
 800088a:	61bb      	str	r3, [r7, #24]
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	2b0b      	cmp	r3, #11
 8000890:	dde7      	ble.n	8000862 <resetEEPROM4Wifi+0x1a>
			wifiPassInt[i] = '\0';
			eepromData[eepromVal] = '\0';
			eepromVal++;
		}
	}
}
 8000892:	e03f      	b.n	8000914 <resetEEPROM4Wifi+0xcc>
	} else if(state == 2) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d11e      	bne.n	80008d8 <resetEEPROM4Wifi+0x90>
		int eepromVal = ssidStartPos;
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <resetEEPROM4Wifi+0xe8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	e014      	b.n	80008d0 <resetEEPROM4Wifi+0x88>
			wifiSSID[i] = '\0';
 80008a6:	4a23      	ldr	r2, [pc, #140]	; (8000934 <resetEEPROM4Wifi+0xec>)
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	4413      	add	r3, r2
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
			wifiSSIDInt[i] = '\0';
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <resetEEPROM4Wifi+0xf0>)
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	4413      	add	r3, r2
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <resetEEPROM4Wifi+0xe4>)
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	4413      	add	r3, r2
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	3301      	adds	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	3301      	adds	r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	2b13      	cmp	r3, #19
 80008d4:	dde7      	ble.n	80008a6 <resetEEPROM4Wifi+0x5e>
}
 80008d6:	e01d      	b.n	8000914 <resetEEPROM4Wifi+0xcc>
		int eepromVal = passStartPos;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <resetEEPROM4Wifi+0xf4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	e014      	b.n	800090e <resetEEPROM4Wifi+0xc6>
			wifiPass[i] = '\0';
 80008e4:	4a16      	ldr	r2, [pc, #88]	; (8000940 <resetEEPROM4Wifi+0xf8>)
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	4413      	add	r3, r2
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
			wifiPassInt[i] = '\0';
 80008ee:	4a15      	ldr	r2, [pc, #84]	; (8000944 <resetEEPROM4Wifi+0xfc>)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4413      	add	r3, r2
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
			eepromData[eepromVal] = '\0';
 80008f8:	4a0c      	ldr	r2, [pc, #48]	; (800092c <resetEEPROM4Wifi+0xe4>)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4413      	add	r3, r2
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
			eepromVal++;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	3301      	adds	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	3301      	adds	r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b13      	cmp	r3, #19
 8000912:	dde7      	ble.n	80008e4 <resetEEPROM4Wifi+0x9c>
}
 8000914:	bf00      	nop
 8000916:	3724      	adds	r7, #36	; 0x24
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000004 	.word	0x20000004
 8000924:	20000190 	.word	0x20000190
 8000928:	200001c4 	.word	0x200001c4
 800092c:	20000118 	.word	0x20000118
 8000930:	20000008 	.word	0x20000008
 8000934:	2000019c 	.word	0x2000019c
 8000938:	200001d0 	.word	0x200001d0
 800093c:	2000000c 	.word	0x2000000c
 8000940:	200001b0 	.word	0x200001b0
 8000944:	200001e4 	.word	0x200001e4

08000948 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b0c9      	sub	sp, #292	; 0x124
 800094c:	af04      	add	r7, sp, #16
 800094e:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8000952:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8000956:	6020      	str	r0, [r4, #0]
 8000958:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800095c:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8000960:	6001      	str	r1, [r0, #0]
 8000962:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000966:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800096a:	600a      	str	r2, [r1, #0]
 800096c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000970:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000974:	6013      	str	r3, [r2, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000976:	4a36      	ldr	r2, [pc, #216]	; (8000a50 <sendMachineData+0x108>)
 8000978:	4936      	ldr	r1, [pc, #216]	; (8000a54 <sendMachineData+0x10c>)
 800097a:	4837      	ldr	r0, [pc, #220]	; (8000a58 <sendMachineData+0x110>)
 800097c:	f00b ff28 	bl	800c7d0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000980:	4835      	ldr	r0, [pc, #212]	; (8000a58 <sendMachineData+0x110>)
 8000982:	f7ff fc4f 	bl	8000224 <strlen>
 8000986:	4603      	mov	r3, r0
 8000988:	b29a      	uxth	r2, r3
 800098a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800098e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000992:	4931      	ldr	r1, [pc, #196]	; (8000a58 <sendMachineData+0x110>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	f00b f935 	bl	800bc04 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 800099a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800099e:	f008 f865 	bl	8008a6c <HAL_Delay>

	sprintf(local_txA,
 80009a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009aa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009ae:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80009b2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80009b6:	4929      	ldr	r1, [pc, #164]	; (8000a5c <sendMachineData+0x114>)
 80009b8:	9102      	str	r1, [sp, #8]
 80009ba:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80009be:	9101      	str	r1, [sp, #4]
 80009c0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80009c4:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80009c8:	6809      	ldr	r1, [r1, #0]
 80009ca:	9100      	str	r1, [sp, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6812      	ldr	r2, [r2, #0]
 80009d0:	4923      	ldr	r1, [pc, #140]	; (8000a60 <sendMachineData+0x118>)
 80009d2:	f00b fefd 	bl	800c7d0 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80009d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fc22 	bl	8000224 <strlen>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80009ee:	491d      	ldr	r1, [pc, #116]	; (8000a64 <sendMachineData+0x11c>)
 80009f0:	4618      	mov	r0, r3
 80009f2:	f00b feed 	bl	800c7d0 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fc12 	bl	8000224 <strlen>
 8000a00:	4603      	mov	r3, r0
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	f107 0110 	add.w	r1, r7, #16
 8000a08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a10:	6818      	ldr	r0, [r3, #0]
 8000a12:	f00b f8f7 	bl	800bc04 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000a16:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a1a:	f008 f827 	bl	8008a6c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fbfe 	bl	8000224 <strlen>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	f00b f8e3 	bl	800bc04 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000a3e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a42:	f008 f813 	bl	8008a6c <HAL_Delay>
}
 8000a46:	bf00      	nop
 8000a48:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	0800d0f8 	.word	0x0800d0f8
 8000a54:	0800d108 	.word	0x0800d108
 8000a58:	20000284 	.word	0x20000284
 8000a5c:	0800d19c 	.word	0x0800d19c
 8000a60:	0800d128 	.word	0x0800d128
 8000a64:	0800d1b0 	.word	0x0800d1b0

08000a68 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af04      	add	r7, sp, #16
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000a72:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <hata2EEPROM+0xa4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	1e5a      	subs	r2, r3, #1
 8000a78:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <hata2EEPROM+0xa8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a25      	ldr	r2, [pc, #148]	; (8000b14 <hata2EEPROM+0xac>)
 8000a80:	5cd3      	ldrb	r3, [r2, r3]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000a86:	f000 f92b 	bl	8000ce0 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000a8a:	e000      	b.n	8000a8e <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000a8c:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	e012      	b.n	8000aba <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <hata2EEPROM+0xa8>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <hata2EEPROM+0xac>)
 8000a9e:	5cd3      	ldrb	r3, [r2, r3]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d107      	bne.n	8000ab4 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <hata2EEPROM+0xa8>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4919      	ldr	r1, [pc, #100]	; (8000b14 <hata2EEPROM+0xac>)
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	54ca      	strb	r2, [r1, r3]
					break;
 8000ab2:	e007      	b.n	8000ac4 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <hata2EEPROM+0xa4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbe7      	blt.n	8000a94 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <hata2EEPROM+0xa8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	b299      	uxth	r1, r3
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <hata2EEPROM+0xa4>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	b298      	uxth	r0, r3
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <hata2EEPROM+0xa8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <hata2EEPROM+0xac>)
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <hata2EEPROM+0xa4>)
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	b292      	uxth	r2, r2
 8000ade:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000ae2:	9402      	str	r4, [sp, #8]
 8000ae4:	9201      	str	r2, [sp, #4]
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	4603      	mov	r3, r0
 8000aea:	460a      	mov	r2, r1
 8000aec:	21a0      	movs	r1, #160	; 0xa0
 8000aee:	480a      	ldr	r0, [pc, #40]	; (8000b18 <hata2EEPROM+0xb0>)
 8000af0:	f009 f846 	bl	8009b80 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af8:	f007 ffb8 	bl	8008a6c <HAL_Delay>
	eepromKontrol(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f7ff fb99 	bl	8000234 <eepromKontrol>
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000098 	.word	0x20000098
 8000b10:	2000009c 	.word	0x2000009c
 8000b14:	20000118 	.word	0x20000118
 8000b18:	200003a8 	.word	0x200003a8

08000b1c <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d11d      	bne.n	8000b68 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b2c:	4b62      	ldr	r3, [pc, #392]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d105      	bne.n	8000b40 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b34:	4a61      	ldr	r2, [pc, #388]	; (8000cbc <hataKoduLcdGoster+0x1a0>)
 8000b36:	2101      	movs	r1, #1
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f007 fa41 	bl	8007fc0 <lcd_print>
 8000b3e:	e008      	b.n	8000b52 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000b40:	4b5d      	ldr	r3, [pc, #372]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d104      	bne.n	8000b52 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000b48:	4a5d      	ldr	r2, [pc, #372]	; (8000cc0 <hataKoduLcdGoster+0x1a4>)
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f007 fa37 	bl	8007fc0 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000b52:	4a5c      	ldr	r2, [pc, #368]	; (8000cc4 <hataKoduLcdGoster+0x1a8>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	2002      	movs	r0, #2
 8000b58:	f007 fa32 	bl	8007fc0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b5c:	4a5a      	ldr	r2, [pc, #360]	; (8000cc8 <hataKoduLcdGoster+0x1ac>)
 8000b5e:	2107      	movs	r1, #7
 8000b60:	2002      	movs	r0, #2
 8000b62:	f007 fa2d 	bl	8007fc0 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000b66:	e0a3      	b.n	8000cb0 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d11d      	bne.n	8000baa <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000b6e:	4b52      	ldr	r3, [pc, #328]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d105      	bne.n	8000b82 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000b76:	4a51      	ldr	r2, [pc, #324]	; (8000cbc <hataKoduLcdGoster+0x1a0>)
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f007 fa20 	bl	8007fc0 <lcd_print>
 8000b80:	e008      	b.n	8000b94 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000b82:	4b4d      	ldr	r3, [pc, #308]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d104      	bne.n	8000b94 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000b8a:	4a4d      	ldr	r2, [pc, #308]	; (8000cc0 <hataKoduLcdGoster+0x1a4>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f007 fa16 	bl	8007fc0 <lcd_print>
		lcd_print(2, 2, "2");
 8000b94:	4a4d      	ldr	r2, [pc, #308]	; (8000ccc <hataKoduLcdGoster+0x1b0>)
 8000b96:	2102      	movs	r1, #2
 8000b98:	2002      	movs	r0, #2
 8000b9a:	f007 fa11 	bl	8007fc0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b9e:	4a4a      	ldr	r2, [pc, #296]	; (8000cc8 <hataKoduLcdGoster+0x1ac>)
 8000ba0:	2107      	movs	r1, #7
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f007 fa0c 	bl	8007fc0 <lcd_print>
}
 8000ba8:	e082      	b.n	8000cb0 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d11d      	bne.n	8000bec <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000bb0:	4b41      	ldr	r3, [pc, #260]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d105      	bne.n	8000bc4 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000bb8:	4a40      	ldr	r2, [pc, #256]	; (8000cbc <hataKoduLcdGoster+0x1a0>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f007 f9ff 	bl	8007fc0 <lcd_print>
 8000bc2:	e008      	b.n	8000bd6 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000bc4:	4b3c      	ldr	r3, [pc, #240]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d104      	bne.n	8000bd6 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000bcc:	4a3c      	ldr	r2, [pc, #240]	; (8000cc0 <hataKoduLcdGoster+0x1a4>)
 8000bce:	2101      	movs	r1, #1
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f007 f9f5 	bl	8007fc0 <lcd_print>
		lcd_print(2, 3, "3");
 8000bd6:	4a3e      	ldr	r2, [pc, #248]	; (8000cd0 <hataKoduLcdGoster+0x1b4>)
 8000bd8:	2103      	movs	r1, #3
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f007 f9f0 	bl	8007fc0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000be0:	4a39      	ldr	r2, [pc, #228]	; (8000cc8 <hataKoduLcdGoster+0x1ac>)
 8000be2:	2107      	movs	r1, #7
 8000be4:	2002      	movs	r0, #2
 8000be6:	f007 f9eb 	bl	8007fc0 <lcd_print>
}
 8000bea:	e061      	b.n	8000cb0 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	d11d      	bne.n	8000c2e <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000bf2:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d105      	bne.n	8000c06 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000bfa:	4a30      	ldr	r2, [pc, #192]	; (8000cbc <hataKoduLcdGoster+0x1a0>)
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f007 f9de 	bl	8007fc0 <lcd_print>
 8000c04:	e008      	b.n	8000c18 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c06:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d104      	bne.n	8000c18 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c0e:	4a2c      	ldr	r2, [pc, #176]	; (8000cc0 <hataKoduLcdGoster+0x1a4>)
 8000c10:	2101      	movs	r1, #1
 8000c12:	2001      	movs	r0, #1
 8000c14:	f007 f9d4 	bl	8007fc0 <lcd_print>
		lcd_print(2, 4, "4");
 8000c18:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <hataKoduLcdGoster+0x1b8>)
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f007 f9cf 	bl	8007fc0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c22:	4a29      	ldr	r2, [pc, #164]	; (8000cc8 <hataKoduLcdGoster+0x1ac>)
 8000c24:	2107      	movs	r1, #7
 8000c26:	2002      	movs	r0, #2
 8000c28:	f007 f9ca 	bl	8007fc0 <lcd_print>
}
 8000c2c:	e040      	b.n	8000cb0 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b05      	cmp	r3, #5
 8000c32:	d11d      	bne.n	8000c70 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c34:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d105      	bne.n	8000c48 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000c3c:	4a1f      	ldr	r2, [pc, #124]	; (8000cbc <hataKoduLcdGoster+0x1a0>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	2001      	movs	r0, #1
 8000c42:	f007 f9bd 	bl	8007fc0 <lcd_print>
 8000c46:	e008      	b.n	8000c5a <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d104      	bne.n	8000c5a <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000c50:	4a1b      	ldr	r2, [pc, #108]	; (8000cc0 <hataKoduLcdGoster+0x1a4>)
 8000c52:	2101      	movs	r1, #1
 8000c54:	2001      	movs	r0, #1
 8000c56:	f007 f9b3 	bl	8007fc0 <lcd_print>
		lcd_print(2, 5, "5");
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <hataKoduLcdGoster+0x1bc>)
 8000c5c:	2105      	movs	r1, #5
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f007 f9ae 	bl	8007fc0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c64:	4a18      	ldr	r2, [pc, #96]	; (8000cc8 <hataKoduLcdGoster+0x1ac>)
 8000c66:	2107      	movs	r1, #7
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f007 f9a9 	bl	8007fc0 <lcd_print>
}
 8000c6e:	e01f      	b.n	8000cb0 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d11c      	bne.n	8000cb0 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d105      	bne.n	8000c8a <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <hataKoduLcdGoster+0x1a0>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	2001      	movs	r0, #1
 8000c84:	f007 f99c 	bl	8007fc0 <lcd_print>
 8000c88:	e008      	b.n	8000c9c <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <hataKoduLcdGoster+0x19c>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d104      	bne.n	8000c9c <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <hataKoduLcdGoster+0x1a4>)
 8000c94:	2101      	movs	r1, #1
 8000c96:	2001      	movs	r0, #1
 8000c98:	f007 f992 	bl	8007fc0 <lcd_print>
		lcd_print(2, 6, "6");
 8000c9c:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <hataKoduLcdGoster+0x1c0>)
 8000c9e:	2106      	movs	r1, #6
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f007 f98d 	bl	8007fc0 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <hataKoduLcdGoster+0x1ac>)
 8000ca8:	2107      	movs	r1, #7
 8000caa:	2002      	movs	r0, #2
 8000cac:	f007 f988 	bl	8007fc0 <lcd_print>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000241 	.word	0x20000241
 8000cbc:	0800d23c 	.word	0x0800d23c
 8000cc0:	0800d24c 	.word	0x0800d24c
 8000cc4:	0800d25c 	.word	0x0800d25c
 8000cc8:	0800d260 	.word	0x0800d260
 8000ccc:	0800d26c 	.word	0x0800d26c
 8000cd0:	0800d270 	.word	0x0800d270
 8000cd4:	0800d274 	.word	0x0800d274
 8000cd8:	0800d278 	.word	0x0800d278
 8000cdc:	0800d27c 	.word	0x0800d27c

08000ce0 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	e009      	b.n	8000d00 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <eepromDataFillWithEmpty+0x38>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf4:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <eepromDataFillWithEmpty+0x3c>)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <eepromDataFillWithEmpty+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dbf0      	blt.n	8000cec <eepromDataFillWithEmpty+0xc>
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000070 	.word	0x20000070
 8000d1c:	20000118 	.word	0x20000118
 8000d20:	20000098 	.word	0x20000098

08000d24 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d36:	4b50      	ldr	r3, [pc, #320]	; (8000e78 <i2cTest+0x154>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b4e      	ldr	r3, [pc, #312]	; (8000e78 <i2cTest+0x154>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 0201 	bic.w	r2, r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000d46:	484c      	ldr	r0, [pc, #304]	; (8000e78 <i2cTest+0x154>)
 8000d48:	f008 fdec 	bl	8009924 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d4c:	23c0      	movs	r3, #192	; 0xc0
 8000d4e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000d50:	2311      	movs	r3, #17
 8000d52:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4846      	ldr	r0, [pc, #280]	; (8000e7c <i2cTest+0x158>)
 8000d62:	f008 f9f3 	bl	800914c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2140      	movs	r1, #64	; 0x40
 8000d6a:	4844      	ldr	r0, [pc, #272]	; (8000e7c <i2cTest+0x158>)
 8000d6c:	f008 fc65 	bl	800963a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	4841      	ldr	r0, [pc, #260]	; (8000e7c <i2cTest+0x158>)
 8000d76:	f008 fc60 	bl	800963a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000d7a:	200a      	movs	r0, #10
 8000d7c:	f007 fe76 	bl	8008a6c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d80:	bf00      	nop
 8000d82:	2140      	movs	r1, #64	; 0x40
 8000d84:	483d      	ldr	r0, [pc, #244]	; (8000e7c <i2cTest+0x158>)
 8000d86:	f008 fc41 	bl	800960c <HAL_GPIO_ReadPin>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d006      	beq.n	8000d9e <i2cTest+0x7a>
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	483a      	ldr	r0, [pc, #232]	; (8000e7c <i2cTest+0x158>)
 8000d94:	f008 fc3a 	bl	800960c <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d1f1      	bne.n	8000d82 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2180      	movs	r1, #128	; 0x80
 8000da2:	4836      	ldr	r0, [pc, #216]	; (8000e7c <i2cTest+0x158>)
 8000da4:	f008 fc49 	bl	800963a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000da8:	200a      	movs	r0, #10
 8000daa:	f007 fe5f 	bl	8008a6c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000dae:	bf00      	nop
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	4832      	ldr	r0, [pc, #200]	; (8000e7c <i2cTest+0x158>)
 8000db4:	f008 fc2a 	bl	800960c <HAL_GPIO_ReadPin>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d0f8      	beq.n	8000db0 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2140      	movs	r1, #64	; 0x40
 8000dc2:	482e      	ldr	r0, [pc, #184]	; (8000e7c <i2cTest+0x158>)
 8000dc4:	f008 fc39 	bl	800963a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000dc8:	200a      	movs	r0, #10
 8000dca:	f007 fe4f 	bl	8008a6c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000dce:	bf00      	nop
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	482a      	ldr	r0, [pc, #168]	; (8000e7c <i2cTest+0x158>)
 8000dd4:	f008 fc1a 	bl	800960c <HAL_GPIO_ReadPin>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d0f8      	beq.n	8000dd0 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2140      	movs	r1, #64	; 0x40
 8000de2:	4826      	ldr	r0, [pc, #152]	; (8000e7c <i2cTest+0x158>)
 8000de4:	f008 fc29 	bl	800963a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000de8:	200a      	movs	r0, #10
 8000dea:	f007 fe3f 	bl	8008a6c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000dee:	bf00      	nop
 8000df0:	2140      	movs	r1, #64	; 0x40
 8000df2:	4822      	ldr	r0, [pc, #136]	; (8000e7c <i2cTest+0x158>)
 8000df4:	f008 fc0a 	bl	800960c <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d1f8      	bne.n	8000df0 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	481e      	ldr	r0, [pc, #120]	; (8000e7c <i2cTest+0x158>)
 8000e04:	f008 fc19 	bl	800963a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f007 fe2f 	bl	8008a6c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e0e:	bf00      	nop
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	481a      	ldr	r0, [pc, #104]	; (8000e7c <i2cTest+0x158>)
 8000e14:	f008 fbfa 	bl	800960c <HAL_GPIO_ReadPin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d1f8      	bne.n	8000e10 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e1e:	23c0      	movs	r3, #192	; 0xc0
 8000e20:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e22:	2312      	movs	r3, #18
 8000e24:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	4812      	ldr	r0, [pc, #72]	; (8000e7c <i2cTest+0x158>)
 8000e34:	f008 f98a 	bl	800914c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <i2cTest+0x154>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <i2cTest+0x154>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e46:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <i2cTest+0x154>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <i2cTest+0x154>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e56:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <i2cTest+0x154>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <i2cTest+0x154>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0201 	orr.w	r2, r2, #1
 8000e66:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <i2cTest+0x154>)
 8000e6a:	f008 fc17 	bl	800969c <HAL_I2C_Init>
}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200003a8 	.word	0x200003a8
 8000e7c:	40010c00 	.word	0x40010c00

08000e80 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000e8a:	20c8      	movs	r0, #200	; 0xc8
 8000e8c:	f007 fdee 	bl	8008a6c <HAL_Delay>
	lcd_clear();
 8000e90:	f007 f8c2 	bl	8008018 <lcd_clear>
	if(type == 1 && page == 0) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d143      	bne.n	8000f22 <printTemplate+0xa2>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d140      	bne.n	8000f22 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000ea0:	4a9d      	ldr	r2, [pc, #628]	; (8001118 <printTemplate+0x298>)
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f007 f88b 	bl	8007fc0 <lcd_print>
		lcd_print(2, 3, "0");
 8000eaa:	4a9c      	ldr	r2, [pc, #624]	; (800111c <printTemplate+0x29c>)
 8000eac:	2103      	movs	r1, #3
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f007 f886 	bl	8007fc0 <lcd_print>
		lcd_print(2, 4, "1");
 8000eb4:	4a9a      	ldr	r2, [pc, #616]	; (8001120 <printTemplate+0x2a0>)
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f007 f881 	bl	8007fc0 <lcd_print>
		lcd_print(2, 5, "2");
 8000ebe:	4a99      	ldr	r2, [pc, #612]	; (8001124 <printTemplate+0x2a4>)
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f007 f87c 	bl	8007fc0 <lcd_print>
		lcd_print(2, 6, "3");
 8000ec8:	4a97      	ldr	r2, [pc, #604]	; (8001128 <printTemplate+0x2a8>)
 8000eca:	2106      	movs	r1, #6
 8000ecc:	2002      	movs	r0, #2
 8000ece:	f007 f877 	bl	8007fc0 <lcd_print>
		lcd_print(2, 7, "4");
 8000ed2:	4a96      	ldr	r2, [pc, #600]	; (800112c <printTemplate+0x2ac>)
 8000ed4:	2107      	movs	r1, #7
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f007 f872 	bl	8007fc0 <lcd_print>
		lcd_print(2, 10, "5");
 8000edc:	4a94      	ldr	r2, [pc, #592]	; (8001130 <printTemplate+0x2b0>)
 8000ede:	210a      	movs	r1, #10
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	f007 f86d 	bl	8007fc0 <lcd_print>
		lcd_print(2, 11, "6");
 8000ee6:	4a93      	ldr	r2, [pc, #588]	; (8001134 <printTemplate+0x2b4>)
 8000ee8:	210b      	movs	r1, #11
 8000eea:	2002      	movs	r0, #2
 8000eec:	f007 f868 	bl	8007fc0 <lcd_print>
		lcd_print(2, 12, "7");
 8000ef0:	4a91      	ldr	r2, [pc, #580]	; (8001138 <printTemplate+0x2b8>)
 8000ef2:	210c      	movs	r1, #12
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	f007 f863 	bl	8007fc0 <lcd_print>
		lcd_print(2, 13, "8");
 8000efa:	4a90      	ldr	r2, [pc, #576]	; (800113c <printTemplate+0x2bc>)
 8000efc:	210d      	movs	r1, #13
 8000efe:	2002      	movs	r0, #2
 8000f00:	f007 f85e 	bl	8007fc0 <lcd_print>
		lcd_print(2, 14, "9");
 8000f04:	4a8e      	ldr	r2, [pc, #568]	; (8001140 <printTemplate+0x2c0>)
 8000f06:	210e      	movs	r1, #14
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f007 f859 	bl	8007fc0 <lcd_print>
		lcd_print(1, 5, machineID);
 8000f0e:	4a8d      	ldr	r2, [pc, #564]	; (8001144 <printTemplate+0x2c4>)
 8000f10:	2105      	movs	r1, #5
 8000f12:	2001      	movs	r0, #1
 8000f14:	f007 f854 	bl	8007fc0 <lcd_print>
		lcd_gotoxy(2, 3);
 8000f18:	2103      	movs	r1, #3
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f007 f831 	bl	8007f82 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f20:	e0f5      	b.n	800110e <printTemplate+0x28e>
	} else if(type == 2) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d178      	bne.n	800101a <printTemplate+0x19a>
		if(page == 1) {
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d114      	bne.n	8000f58 <printTemplate+0xd8>
			lcd_clear();
 8000f2e:	f007 f873 	bl	8008018 <lcd_clear>
			HAL_Delay(100);
 8000f32:	2064      	movs	r0, #100	; 0x64
 8000f34:	f007 fd9a 	bl	8008a6c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f38:	4a83      	ldr	r2, [pc, #524]	; (8001148 <printTemplate+0x2c8>)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f007 f83f 	bl	8007fc0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f42:	4a82      	ldr	r2, [pc, #520]	; (800114c <printTemplate+0x2cc>)
 8000f44:	2107      	movs	r1, #7
 8000f46:	2001      	movs	r0, #1
 8000f48:	f007 f83a 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f4c:	4a80      	ldr	r2, [pc, #512]	; (8001150 <printTemplate+0x2d0>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	2002      	movs	r0, #2
 8000f52:	f007 f835 	bl	8007fc0 <lcd_print>
}
 8000f56:	e0da      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 2) {
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d114      	bne.n	8000f88 <printTemplate+0x108>
			lcd_clear();
 8000f5e:	f007 f85b 	bl	8008018 <lcd_clear>
			HAL_Delay(100);
 8000f62:	2064      	movs	r0, #100	; 0x64
 8000f64:	f007 fd82 	bl	8008a6c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f68:	4a77      	ldr	r2, [pc, #476]	; (8001148 <printTemplate+0x2c8>)
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f007 f827 	bl	8007fc0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f72:	4a76      	ldr	r2, [pc, #472]	; (800114c <printTemplate+0x2cc>)
 8000f74:	2107      	movs	r1, #7
 8000f76:	2001      	movs	r0, #1
 8000f78:	f007 f822 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f7c:	4a75      	ldr	r2, [pc, #468]	; (8001154 <printTemplate+0x2d4>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2002      	movs	r0, #2
 8000f82:	f007 f81d 	bl	8007fc0 <lcd_print>
}
 8000f86:	e0c2      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 3) {
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d114      	bne.n	8000fb8 <printTemplate+0x138>
			lcd_clear();
 8000f8e:	f007 f843 	bl	8008018 <lcd_clear>
			HAL_Delay(100);
 8000f92:	2064      	movs	r0, #100	; 0x64
 8000f94:	f007 fd6a 	bl	8008a6c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f98:	4a6b      	ldr	r2, [pc, #428]	; (8001148 <printTemplate+0x2c8>)
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f007 f80f 	bl	8007fc0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fa2:	4a6a      	ldr	r2, [pc, #424]	; (800114c <printTemplate+0x2cc>)
 8000fa4:	2107      	movs	r1, #7
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f007 f80a 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000fac:	4a6a      	ldr	r2, [pc, #424]	; (8001158 <printTemplate+0x2d8>)
 8000fae:	2101      	movs	r1, #1
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f007 f805 	bl	8007fc0 <lcd_print>
}
 8000fb6:	e0aa      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 4) {
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d114      	bne.n	8000fe8 <printTemplate+0x168>
			lcd_clear();
 8000fbe:	f007 f82b 	bl	8008018 <lcd_clear>
			HAL_Delay(100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f007 fd52 	bl	8008a6c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fc8:	4a5f      	ldr	r2, [pc, #380]	; (8001148 <printTemplate+0x2c8>)
 8000fca:	2101      	movs	r1, #1
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f006 fff7 	bl	8007fc0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fd2:	4a5e      	ldr	r2, [pc, #376]	; (800114c <printTemplate+0x2cc>)
 8000fd4:	2107      	movs	r1, #7
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f006 fff2 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000fdc:	4a5f      	ldr	r2, [pc, #380]	; (800115c <printTemplate+0x2dc>)
 8000fde:	2101      	movs	r1, #1
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f006 ffed 	bl	8007fc0 <lcd_print>
}
 8000fe6:	e092      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 5) {
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	f040 808f 	bne.w	800110e <printTemplate+0x28e>
			lcd_clear();
 8000ff0:	f007 f812 	bl	8008018 <lcd_clear>
			HAL_Delay(100);
 8000ff4:	2064      	movs	r0, #100	; 0x64
 8000ff6:	f007 fd39 	bl	8008a6c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ffa:	4a53      	ldr	r2, [pc, #332]	; (8001148 <printTemplate+0x2c8>)
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	2001      	movs	r0, #1
 8001000:	f006 ffde 	bl	8007fc0 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001004:	4a51      	ldr	r2, [pc, #324]	; (800114c <printTemplate+0x2cc>)
 8001006:	2107      	movs	r1, #7
 8001008:	2001      	movs	r0, #1
 800100a:	f006 ffd9 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800100e:	4a54      	ldr	r2, [pc, #336]	; (8001160 <printTemplate+0x2e0>)
 8001010:	2101      	movs	r1, #1
 8001012:	2002      	movs	r0, #2
 8001014:	f006 ffd4 	bl	8007fc0 <lcd_print>
}
 8001018:	e079      	b.n	800110e <printTemplate+0x28e>
	} else if(type == 3) {
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d176      	bne.n	800110e <printTemplate+0x28e>
		if(page == 1) {
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d114      	bne.n	8001050 <printTemplate+0x1d0>
			lcd_clear();
 8001026:	f006 fff7 	bl	8008018 <lcd_clear>
			HAL_Delay(100);
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f007 fd1e 	bl	8008a6c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001030:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <printTemplate+0x2e4>)
 8001032:	2101      	movs	r1, #1
 8001034:	2001      	movs	r0, #1
 8001036:	f006 ffc3 	bl	8007fc0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800103a:	4a4b      	ldr	r2, [pc, #300]	; (8001168 <printTemplate+0x2e8>)
 800103c:	2107      	movs	r1, #7
 800103e:	2001      	movs	r0, #1
 8001040:	f006 ffbe 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001044:	4a42      	ldr	r2, [pc, #264]	; (8001150 <printTemplate+0x2d0>)
 8001046:	2101      	movs	r1, #1
 8001048:	2002      	movs	r0, #2
 800104a:	f006 ffb9 	bl	8007fc0 <lcd_print>
}
 800104e:	e05e      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 2) {
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d114      	bne.n	8001080 <printTemplate+0x200>
			lcd_clear();
 8001056:	f006 ffdf 	bl	8008018 <lcd_clear>
			HAL_Delay(100);
 800105a:	2064      	movs	r0, #100	; 0x64
 800105c:	f007 fd06 	bl	8008a6c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001060:	4a40      	ldr	r2, [pc, #256]	; (8001164 <printTemplate+0x2e4>)
 8001062:	2101      	movs	r1, #1
 8001064:	2001      	movs	r0, #1
 8001066:	f006 ffab 	bl	8007fc0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800106a:	4a3f      	ldr	r2, [pc, #252]	; (8001168 <printTemplate+0x2e8>)
 800106c:	2107      	movs	r1, #7
 800106e:	2001      	movs	r0, #1
 8001070:	f006 ffa6 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001074:	4a37      	ldr	r2, [pc, #220]	; (8001154 <printTemplate+0x2d4>)
 8001076:	2101      	movs	r1, #1
 8001078:	2002      	movs	r0, #2
 800107a:	f006 ffa1 	bl	8007fc0 <lcd_print>
}
 800107e:	e046      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 3) {
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d114      	bne.n	80010b0 <printTemplate+0x230>
			lcd_clear();
 8001086:	f006 ffc7 	bl	8008018 <lcd_clear>
			HAL_Delay(100);
 800108a:	2064      	movs	r0, #100	; 0x64
 800108c:	f007 fcee 	bl	8008a6c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001090:	4a34      	ldr	r2, [pc, #208]	; (8001164 <printTemplate+0x2e4>)
 8001092:	2101      	movs	r1, #1
 8001094:	2001      	movs	r0, #1
 8001096:	f006 ff93 	bl	8007fc0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800109a:	4a33      	ldr	r2, [pc, #204]	; (8001168 <printTemplate+0x2e8>)
 800109c:	2107      	movs	r1, #7
 800109e:	2001      	movs	r0, #1
 80010a0:	f006 ff8e 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80010a4:	4a2c      	ldr	r2, [pc, #176]	; (8001158 <printTemplate+0x2d8>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	2002      	movs	r0, #2
 80010aa:	f006 ff89 	bl	8007fc0 <lcd_print>
}
 80010ae:	e02e      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 4) {
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d114      	bne.n	80010e0 <printTemplate+0x260>
			lcd_clear();
 80010b6:	f006 ffaf 	bl	8008018 <lcd_clear>
			HAL_Delay(100);
 80010ba:	2064      	movs	r0, #100	; 0x64
 80010bc:	f007 fcd6 	bl	8008a6c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010c0:	4a28      	ldr	r2, [pc, #160]	; (8001164 <printTemplate+0x2e4>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	2001      	movs	r0, #1
 80010c6:	f006 ff7b 	bl	8007fc0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010ca:	4a27      	ldr	r2, [pc, #156]	; (8001168 <printTemplate+0x2e8>)
 80010cc:	2107      	movs	r1, #7
 80010ce:	2001      	movs	r0, #1
 80010d0:	f006 ff76 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80010d4:	4a21      	ldr	r2, [pc, #132]	; (800115c <printTemplate+0x2dc>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	2002      	movs	r0, #2
 80010da:	f006 ff71 	bl	8007fc0 <lcd_print>
}
 80010de:	e016      	b.n	800110e <printTemplate+0x28e>
		} else if(page == 5) {
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2b05      	cmp	r3, #5
 80010e4:	d113      	bne.n	800110e <printTemplate+0x28e>
			lcd_clear();
 80010e6:	f006 ff97 	bl	8008018 <lcd_clear>
			HAL_Delay(100);
 80010ea:	2064      	movs	r0, #100	; 0x64
 80010ec:	f007 fcbe 	bl	8008a6c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010f0:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <printTemplate+0x2e4>)
 80010f2:	2101      	movs	r1, #1
 80010f4:	2001      	movs	r0, #1
 80010f6:	f006 ff63 	bl	8007fc0 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010fa:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <printTemplate+0x2e8>)
 80010fc:	2107      	movs	r1, #7
 80010fe:	2001      	movs	r0, #1
 8001100:	f006 ff5e 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001104:	4a16      	ldr	r2, [pc, #88]	; (8001160 <printTemplate+0x2e0>)
 8001106:	2101      	movs	r1, #1
 8001108:	2002      	movs	r0, #2
 800110a:	f006 ff59 	bl	8007fc0 <lcd_print>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	0800d280 	.word	0x0800d280
 800111c:	0800d288 	.word	0x0800d288
 8001120:	0800d28c 	.word	0x0800d28c
 8001124:	0800d290 	.word	0x0800d290
 8001128:	0800d294 	.word	0x0800d294
 800112c:	0800d298 	.word	0x0800d298
 8001130:	0800d29c 	.word	0x0800d29c
 8001134:	0800d2a0 	.word	0x0800d2a0
 8001138:	0800d2a4 	.word	0x0800d2a4
 800113c:	0800d2a8 	.word	0x0800d2a8
 8001140:	0800d2ac 	.word	0x0800d2ac
 8001144:	20000190 	.word	0x20000190
 8001148:	0800d2b0 	.word	0x0800d2b0
 800114c:	2000019c 	.word	0x2000019c
 8001150:	0800d2b8 	.word	0x0800d2b8
 8001154:	0800d2cc 	.word	0x0800d2cc
 8001158:	0800d2e0 	.word	0x0800d2e0
 800115c:	0800d2f4 	.word	0x0800d2f4
 8001160:	0800d308 	.word	0x0800d308
 8001164:	0800d31c 	.word	0x0800d31c
 8001168:	200001b0 	.word	0x200001b0

0800116c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001170:	f3bf 8f4f 	dsb	sy
}
 8001174:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <__NVIC_SystemReset+0x24>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800117e:	4904      	ldr	r1, [pc, #16]	; (8001190 <__NVIC_SystemReset+0x24>)
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_SystemReset+0x28>)
 8001182:	4313      	orrs	r3, r2
 8001184:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001186:	f3bf 8f4f 	dsb	sy
}
 800118a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <__NVIC_SystemReset+0x20>
 8001190:	e000ed00 	.word	0xe000ed00
 8001194:	05fa0004 	.word	0x05fa0004

08001198 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001198:	b580      	push	{r7, lr}
 800119a:	b098      	sub	sp, #96	; 0x60
 800119c:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800119e:	2101      	movs	r1, #1
 80011a0:	488e      	ldr	r0, [pc, #568]	; (80013dc <menu+0x244>)
 80011a2:	f008 fa33 	bl	800960c <HAL_GPIO_ReadPin>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	f040 808e 	bne.w	80012ca <menu+0x132>
 80011ae:	4b8c      	ldr	r3, [pc, #560]	; (80013e0 <menu+0x248>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	f083 0301 	eor.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 8086 	beq.w	80012ca <menu+0x132>
		menuSayac = menuSayac+1;
 80011be:	4b89      	ldr	r3, [pc, #548]	; (80013e4 <menu+0x24c>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b87      	ldr	r3, [pc, #540]	; (80013e4 <menu+0x24c>)
 80011c8:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80011ca:	4b86      	ldr	r3, [pc, #536]	; (80013e4 <menu+0x24c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b24      	cmp	r3, #36	; 0x24
 80011d0:	d102      	bne.n	80011d8 <menu+0x40>
			menuSayac = 1;
 80011d2:	4b84      	ldr	r3, [pc, #528]	; (80013e4 <menu+0x24c>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80011d8:	4b82      	ldr	r3, [pc, #520]	; (80013e4 <menu+0x24c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b12      	cmp	r3, #18
 80011de:	d106      	bne.n	80011ee <menu+0x56>
 80011e0:	4b81      	ldr	r3, [pc, #516]	; (80013e8 <menu+0x250>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <menu+0x56>
			menuSayac = 21;
 80011e8:	4b7e      	ldr	r3, [pc, #504]	; (80013e4 <menu+0x24c>)
 80011ea:	2215      	movs	r2, #21
 80011ec:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80011ee:	4b7d      	ldr	r3, [pc, #500]	; (80013e4 <menu+0x24c>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d106      	bne.n	8001204 <menu+0x6c>
 80011f6:	4b7d      	ldr	r3, [pc, #500]	; (80013ec <menu+0x254>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <menu+0x6c>
			menuSayac = 16;
 80011fe:	4b79      	ldr	r3, [pc, #484]	; (80013e4 <menu+0x24c>)
 8001200:	2210      	movs	r2, #16
 8001202:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001204:	4b77      	ldr	r3, [pc, #476]	; (80013e4 <menu+0x24c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b0d      	cmp	r3, #13
 800120a:	d106      	bne.n	800121a <menu+0x82>
 800120c:	4b77      	ldr	r3, [pc, #476]	; (80013ec <menu+0x254>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d102      	bne.n	800121a <menu+0x82>
			menuSayac = 16;
 8001214:	4b73      	ldr	r3, [pc, #460]	; (80013e4 <menu+0x24c>)
 8001216:	2210      	movs	r2, #16
 8001218:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800121a:	4b72      	ldr	r3, [pc, #456]	; (80013e4 <menu+0x24c>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b09      	cmp	r3, #9
 8001220:	d106      	bne.n	8001230 <menu+0x98>
 8001222:	4b72      	ldr	r3, [pc, #456]	; (80013ec <menu+0x254>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d102      	bne.n	8001230 <menu+0x98>
			menuSayac = 13;
 800122a:	4b6e      	ldr	r3, [pc, #440]	; (80013e4 <menu+0x24c>)
 800122c:	220d      	movs	r2, #13
 800122e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001230:	4b6c      	ldr	r3, [pc, #432]	; (80013e4 <menu+0x24c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b0a      	cmp	r3, #10
 8001236:	d10a      	bne.n	800124e <menu+0xb6>
 8001238:	4b6d      	ldr	r3, [pc, #436]	; (80013f0 <menu+0x258>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d003      	beq.n	8001248 <menu+0xb0>
 8001240:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <menu+0x258>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d102      	bne.n	800124e <menu+0xb6>
			menuSayac = 11;
 8001248:	4b66      	ldr	r3, [pc, #408]	; (80013e4 <menu+0x24c>)
 800124a:	220b      	movs	r2, #11
 800124c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800124e:	4b65      	ldr	r3, [pc, #404]	; (80013e4 <menu+0x24c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b0c      	cmp	r3, #12
 8001254:	d10e      	bne.n	8001274 <menu+0xdc>
 8001256:	4b67      	ldr	r3, [pc, #412]	; (80013f4 <menu+0x25c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d003      	beq.n	8001266 <menu+0xce>
 800125e:	4b65      	ldr	r3, [pc, #404]	; (80013f4 <menu+0x25c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d106      	bne.n	8001274 <menu+0xdc>
 8001266:	4b61      	ldr	r3, [pc, #388]	; (80013ec <menu+0x254>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d102      	bne.n	8001274 <menu+0xdc>
			menuSayac = 16;
 800126e:	4b5d      	ldr	r3, [pc, #372]	; (80013e4 <menu+0x24c>)
 8001270:	2210      	movs	r2, #16
 8001272:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001274:	4b5b      	ldr	r3, [pc, #364]	; (80013e4 <menu+0x24c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b0c      	cmp	r3, #12
 800127a:	d10e      	bne.n	800129a <menu+0x102>
 800127c:	4b5d      	ldr	r3, [pc, #372]	; (80013f4 <menu+0x25c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d003      	beq.n	800128c <menu+0xf4>
 8001284:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <menu+0x25c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d106      	bne.n	800129a <menu+0x102>
 800128c:	4b57      	ldr	r3, [pc, #348]	; (80013ec <menu+0x254>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b03      	cmp	r3, #3
 8001292:	d102      	bne.n	800129a <menu+0x102>
			menuSayac = 13;
 8001294:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <menu+0x24c>)
 8001296:	220d      	movs	r2, #13
 8001298:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800129a:	4b52      	ldr	r3, [pc, #328]	; (80013e4 <menu+0x24c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b0f      	cmp	r3, #15
 80012a0:	d106      	bne.n	80012b0 <menu+0x118>
 80012a2:	4b55      	ldr	r3, [pc, #340]	; (80013f8 <menu+0x260>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d102      	bne.n	80012b0 <menu+0x118>
			menuSayac = 16;
 80012aa:	4b4e      	ldr	r3, [pc, #312]	; (80013e4 <menu+0x24c>)
 80012ac:	2210      	movs	r2, #16
 80012ae:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80012b0:	4b4c      	ldr	r3, [pc, #304]	; (80013e4 <menu+0x24c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b18      	cmp	r3, #24
 80012b6:	d106      	bne.n	80012c6 <menu+0x12e>
 80012b8:	4b4b      	ldr	r3, [pc, #300]	; (80013e8 <menu+0x250>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <menu+0x12e>
			menuSayac = 26;
 80012c0:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <menu+0x24c>)
 80012c2:	221a      	movs	r2, #26
 80012c4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80012c6:	f003 fc01 	bl	8004acc <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80012ca:	2108      	movs	r1, #8
 80012cc:	484b      	ldr	r0, [pc, #300]	; (80013fc <menu+0x264>)
 80012ce:	f008 f99d 	bl	800960c <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d175      	bne.n	80013c4 <menu+0x22c>
 80012d8:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <menu+0x248>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	f083 0301 	eor.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d06e      	beq.n	80013c4 <menu+0x22c>
		if (menuSayac <= 1) {
 80012e6:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <menu+0x24c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d802      	bhi.n	80012f4 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80012ee:	4b3d      	ldr	r3, [pc, #244]	; (80013e4 <menu+0x24c>)
 80012f0:	2224      	movs	r2, #36	; 0x24
 80012f2:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80012f4:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <menu+0x24c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <menu+0x24c>)
 80012fe:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001300:	4b38      	ldr	r3, [pc, #224]	; (80013e4 <menu+0x24c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b14      	cmp	r3, #20
 8001306:	d106      	bne.n	8001316 <menu+0x17e>
 8001308:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <menu+0x250>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <menu+0x17e>
			menuSayac = 17;
 8001310:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <menu+0x24c>)
 8001312:	2211      	movs	r2, #17
 8001314:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001316:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <menu+0x24c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	d106      	bne.n	800132c <menu+0x194>
 800131e:	4b33      	ldr	r3, [pc, #204]	; (80013ec <menu+0x254>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <menu+0x194>
			menuSayac = 7;
 8001326:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <menu+0x24c>)
 8001328:	2207      	movs	r2, #7
 800132a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <menu+0x24c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d106      	bne.n	8001342 <menu+0x1aa>
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <menu+0x254>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d102      	bne.n	8001342 <menu+0x1aa>
			menuSayac = 12;
 800133c:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <menu+0x24c>)
 800133e:	220c      	movs	r2, #12
 8001340:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001342:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <menu+0x24c>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b0c      	cmp	r3, #12
 8001348:	d106      	bne.n	8001358 <menu+0x1c0>
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <menu+0x254>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d102      	bne.n	8001358 <menu+0x1c0>
			menuSayac = 8;
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <menu+0x24c>)
 8001354:	2208      	movs	r2, #8
 8001356:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <menu+0x24c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b0a      	cmp	r3, #10
 800135e:	d10a      	bne.n	8001376 <menu+0x1de>
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <menu+0x258>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d003      	beq.n	8001370 <menu+0x1d8>
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <menu+0x258>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d102      	bne.n	8001376 <menu+0x1de>
			menuSayac = 9;
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <menu+0x24c>)
 8001372:	2209      	movs	r2, #9
 8001374:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <menu+0x24c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b0c      	cmp	r3, #12
 800137c:	d10a      	bne.n	8001394 <menu+0x1fc>
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <menu+0x25c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d003      	beq.n	800138e <menu+0x1f6>
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <menu+0x25c>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d102      	bne.n	8001394 <menu+0x1fc>
			menuSayac = 11;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <menu+0x24c>)
 8001390:	220b      	movs	r2, #11
 8001392:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <menu+0x24c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d106      	bne.n	80013aa <menu+0x212>
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <menu+0x260>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d102      	bne.n	80013aa <menu+0x212>
			menuSayac = 14;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <menu+0x24c>)
 80013a6:	220e      	movs	r2, #14
 80013a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <menu+0x24c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b19      	cmp	r3, #25
 80013b0:	d106      	bne.n	80013c0 <menu+0x228>
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <menu+0x250>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <menu+0x228>
			menuSayac = 23;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <menu+0x24c>)
 80013bc:	2217      	movs	r2, #23
 80013be:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013c0:	f003 fb84 	bl	8004acc <bekle>
	}

	if (menuSayac == 0) {
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <menu+0x24c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d133      	bne.n	8001434 <menu+0x29c>
		if(dilSecim == 0) {
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <menu+0x268>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d121      	bne.n	8001418 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <menu+0x26c>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	2001      	movs	r0, #1
 80013da:	e015      	b.n	8001408 <menu+0x270>
 80013dc:	40010800 	.word	0x40010800
 80013e0:	2000024f 	.word	0x2000024f
 80013e4:	20000220 	.word	0x20000220
 80013e8:	2000022f 	.word	0x2000022f
 80013ec:	20000228 	.word	0x20000228
 80013f0:	20000229 	.word	0x20000229
 80013f4:	2000022a 	.word	0x2000022a
 80013f8:	2000022b 	.word	0x2000022b
 80013fc:	40011000 	.word	0x40011000
 8001400:	20000241 	.word	0x20000241
 8001404:	0800d324 	.word	0x0800d324
 8001408:	f006 fdda 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 800140c:	4a94      	ldr	r2, [pc, #592]	; (8001660 <menu+0x4c8>)
 800140e:	2101      	movs	r1, #1
 8001410:	2002      	movs	r0, #2
 8001412:	f006 fdd5 	bl	8007fc0 <lcd_print>
 8001416:	e00d      	b.n	8001434 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001418:	4b92      	ldr	r3, [pc, #584]	; (8001664 <menu+0x4cc>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d109      	bne.n	8001434 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001420:	4a91      	ldr	r2, [pc, #580]	; (8001668 <menu+0x4d0>)
 8001422:	2101      	movs	r1, #1
 8001424:	2001      	movs	r0, #1
 8001426:	f006 fdcb 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800142a:	4a90      	ldr	r2, [pc, #576]	; (800166c <menu+0x4d4>)
 800142c:	2101      	movs	r1, #1
 800142e:	2002      	movs	r0, #2
 8001430:	f006 fdc6 	bl	8007fc0 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001434:	4b8e      	ldr	r3, [pc, #568]	; (8001670 <menu+0x4d8>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	f040 82b5 	bne.w	80019a8 <menu+0x810>
		if(dilSecim == 0) {
 800143e:	4b89      	ldr	r3, [pc, #548]	; (8001664 <menu+0x4cc>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d105      	bne.n	8001452 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001446:	4a8b      	ldr	r2, [pc, #556]	; (8001674 <menu+0x4dc>)
 8001448:	2101      	movs	r1, #1
 800144a:	2001      	movs	r0, #1
 800144c:	f006 fdb8 	bl	8007fc0 <lcd_print>
 8001450:	e008      	b.n	8001464 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001452:	4b84      	ldr	r3, [pc, #528]	; (8001664 <menu+0x4cc>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d104      	bne.n	8001464 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800145a:	4a87      	ldr	r2, [pc, #540]	; (8001678 <menu+0x4e0>)
 800145c:	2101      	movs	r1, #1
 800145e:	2001      	movs	r0, #1
 8001460:	f006 fdae 	bl	8007fc0 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001464:	4b85      	ldr	r3, [pc, #532]	; (800167c <menu+0x4e4>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d123      	bne.n	80014b4 <menu+0x31c>
			if(dilSecim == 0) {
 800146c:	4b7d      	ldr	r3, [pc, #500]	; (8001664 <menu+0x4cc>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d105      	bne.n	8001480 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001474:	4a82      	ldr	r2, [pc, #520]	; (8001680 <menu+0x4e8>)
 8001476:	2101      	movs	r1, #1
 8001478:	2002      	movs	r0, #2
 800147a:	f006 fda1 	bl	8007fc0 <lcd_print>
 800147e:	e008      	b.n	8001492 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001480:	4b78      	ldr	r3, [pc, #480]	; (8001664 <menu+0x4cc>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d104      	bne.n	8001492 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001488:	4a7e      	ldr	r2, [pc, #504]	; (8001684 <menu+0x4ec>)
 800148a:	2101      	movs	r1, #1
 800148c:	2002      	movs	r0, #2
 800148e:	f006 fd97 	bl	8007fc0 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001492:	4a7d      	ldr	r2, [pc, #500]	; (8001688 <menu+0x4f0>)
 8001494:	210f      	movs	r1, #15
 8001496:	2002      	movs	r0, #2
 8001498:	f006 fd92 	bl	8007fc0 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800149c:	4b7b      	ldr	r3, [pc, #492]	; (800168c <menu+0x4f4>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	220a      	movs	r2, #10
 80014a2:	497b      	ldr	r1, [pc, #492]	; (8001690 <menu+0x4f8>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00b f8dd 	bl	800c664 <itoa>
			lcd_print(2, 14, snum);
 80014aa:	4a79      	ldr	r2, [pc, #484]	; (8001690 <menu+0x4f8>)
 80014ac:	210e      	movs	r1, #14
 80014ae:	2002      	movs	r0, #2
 80014b0:	f006 fd86 	bl	8007fc0 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80014b4:	4b71      	ldr	r3, [pc, #452]	; (800167c <menu+0x4e4>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d123      	bne.n	8001504 <menu+0x36c>
			if(dilSecim == 0) {
 80014bc:	4b69      	ldr	r3, [pc, #420]	; (8001664 <menu+0x4cc>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80014c4:	4a73      	ldr	r2, [pc, #460]	; (8001694 <menu+0x4fc>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	2002      	movs	r0, #2
 80014ca:	f006 fd79 	bl	8007fc0 <lcd_print>
 80014ce:	e008      	b.n	80014e2 <menu+0x34a>
			} else if(dilSecim == 1) {
 80014d0:	4b64      	ldr	r3, [pc, #400]	; (8001664 <menu+0x4cc>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d104      	bne.n	80014e2 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80014d8:	4a6f      	ldr	r2, [pc, #444]	; (8001698 <menu+0x500>)
 80014da:	2101      	movs	r1, #1
 80014dc:	2002      	movs	r0, #2
 80014de:	f006 fd6f 	bl	8007fc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80014e2:	4a6e      	ldr	r2, [pc, #440]	; (800169c <menu+0x504>)
 80014e4:	210f      	movs	r1, #15
 80014e6:	2002      	movs	r0, #2
 80014e8:	f006 fd6a 	bl	8007fc0 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80014ec:	4b6c      	ldr	r3, [pc, #432]	; (80016a0 <menu+0x508>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	220a      	movs	r2, #10
 80014f2:	4967      	ldr	r1, [pc, #412]	; (8001690 <menu+0x4f8>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00b f8b5 	bl	800c664 <itoa>
			lcd_print(2, 14, snum);
 80014fa:	4a65      	ldr	r2, [pc, #404]	; (8001690 <menu+0x4f8>)
 80014fc:	210e      	movs	r1, #14
 80014fe:	2002      	movs	r0, #2
 8001500:	f006 fd5e 	bl	8007fc0 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001504:	4b5d      	ldr	r3, [pc, #372]	; (800167c <menu+0x4e4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d123      	bne.n	8001554 <menu+0x3bc>
			if(dilSecim == 0) {
 800150c:	4b55      	ldr	r3, [pc, #340]	; (8001664 <menu+0x4cc>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001514:	4a63      	ldr	r2, [pc, #396]	; (80016a4 <menu+0x50c>)
 8001516:	2101      	movs	r1, #1
 8001518:	2002      	movs	r0, #2
 800151a:	f006 fd51 	bl	8007fc0 <lcd_print>
 800151e:	e008      	b.n	8001532 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001520:	4b50      	ldr	r3, [pc, #320]	; (8001664 <menu+0x4cc>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d104      	bne.n	8001532 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001528:	4a5f      	ldr	r2, [pc, #380]	; (80016a8 <menu+0x510>)
 800152a:	2101      	movs	r1, #1
 800152c:	2002      	movs	r0, #2
 800152e:	f006 fd47 	bl	8007fc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001532:	4a5a      	ldr	r2, [pc, #360]	; (800169c <menu+0x504>)
 8001534:	210f      	movs	r1, #15
 8001536:	2002      	movs	r0, #2
 8001538:	f006 fd42 	bl	8007fc0 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800153c:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <menu+0x514>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	220a      	movs	r2, #10
 8001542:	4953      	ldr	r1, [pc, #332]	; (8001690 <menu+0x4f8>)
 8001544:	4618      	mov	r0, r3
 8001546:	f00b f88d 	bl	800c664 <itoa>
			lcd_print(2, 14, snum);
 800154a:	4a51      	ldr	r2, [pc, #324]	; (8001690 <menu+0x4f8>)
 800154c:	210e      	movs	r1, #14
 800154e:	2002      	movs	r0, #2
 8001550:	f006 fd36 	bl	8007fc0 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001554:	4b49      	ldr	r3, [pc, #292]	; (800167c <menu+0x4e4>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d123      	bne.n	80015a4 <menu+0x40c>
			if(dilSecim == 0) {
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <menu+0x4cc>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d105      	bne.n	8001570 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001564:	4a52      	ldr	r2, [pc, #328]	; (80016b0 <menu+0x518>)
 8001566:	2101      	movs	r1, #1
 8001568:	2002      	movs	r0, #2
 800156a:	f006 fd29 	bl	8007fc0 <lcd_print>
 800156e:	e008      	b.n	8001582 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001570:	4b3c      	ldr	r3, [pc, #240]	; (8001664 <menu+0x4cc>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d104      	bne.n	8001582 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001578:	4a4e      	ldr	r2, [pc, #312]	; (80016b4 <menu+0x51c>)
 800157a:	2101      	movs	r1, #1
 800157c:	2002      	movs	r0, #2
 800157e:	f006 fd1f 	bl	8007fc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001582:	4a46      	ldr	r2, [pc, #280]	; (800169c <menu+0x504>)
 8001584:	210f      	movs	r1, #15
 8001586:	2002      	movs	r0, #2
 8001588:	f006 fd1a 	bl	8007fc0 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800158c:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <menu+0x520>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	220a      	movs	r2, #10
 8001592:	493f      	ldr	r1, [pc, #252]	; (8001690 <menu+0x4f8>)
 8001594:	4618      	mov	r0, r3
 8001596:	f00b f865 	bl	800c664 <itoa>
			lcd_print(2, 14, snum);
 800159a:	4a3d      	ldr	r2, [pc, #244]	; (8001690 <menu+0x4f8>)
 800159c:	210e      	movs	r1, #14
 800159e:	2002      	movs	r0, #2
 80015a0:	f006 fd0e 	bl	8007fc0 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80015a4:	4b35      	ldr	r3, [pc, #212]	; (800167c <menu+0x4e4>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d123      	bne.n	80015f4 <menu+0x45c>
			if(dilSecim == 0) {
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <menu+0x4cc>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d105      	bne.n	80015c0 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80015b4:	4a41      	ldr	r2, [pc, #260]	; (80016bc <menu+0x524>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	2002      	movs	r0, #2
 80015ba:	f006 fd01 	bl	8007fc0 <lcd_print>
 80015be:	e008      	b.n	80015d2 <menu+0x43a>
			} else if(dilSecim == 1) {
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <menu+0x4cc>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d104      	bne.n	80015d2 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80015c8:	4a3d      	ldr	r2, [pc, #244]	; (80016c0 <menu+0x528>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	2002      	movs	r0, #2
 80015ce:	f006 fcf7 	bl	8007fc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015d2:	4a32      	ldr	r2, [pc, #200]	; (800169c <menu+0x504>)
 80015d4:	210f      	movs	r1, #15
 80015d6:	2002      	movs	r0, #2
 80015d8:	f006 fcf2 	bl	8007fc0 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80015dc:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <menu+0x52c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	220a      	movs	r2, #10
 80015e2:	492b      	ldr	r1, [pc, #172]	; (8001690 <menu+0x4f8>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f00b f83d 	bl	800c664 <itoa>
			lcd_print(2, 14, snum);
 80015ea:	4a29      	ldr	r2, [pc, #164]	; (8001690 <menu+0x4f8>)
 80015ec:	210e      	movs	r1, #14
 80015ee:	2002      	movs	r0, #2
 80015f0:	f006 fce6 	bl	8007fc0 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <menu+0x4e4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d123      	bne.n	8001644 <menu+0x4ac>
			if(dilSecim == 0) {
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <menu+0x4cc>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d105      	bne.n	8001610 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001604:	4a30      	ldr	r2, [pc, #192]	; (80016c8 <menu+0x530>)
 8001606:	2101      	movs	r1, #1
 8001608:	2002      	movs	r0, #2
 800160a:	f006 fcd9 	bl	8007fc0 <lcd_print>
 800160e:	e008      	b.n	8001622 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <menu+0x4cc>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d104      	bne.n	8001622 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001618:	4a2c      	ldr	r2, [pc, #176]	; (80016cc <menu+0x534>)
 800161a:	2101      	movs	r1, #1
 800161c:	2002      	movs	r0, #2
 800161e:	f006 fccf 	bl	8007fc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001622:	4a1e      	ldr	r2, [pc, #120]	; (800169c <menu+0x504>)
 8001624:	210f      	movs	r1, #15
 8001626:	2002      	movs	r0, #2
 8001628:	f006 fcca 	bl	8007fc0 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <menu+0x538>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	220a      	movs	r2, #10
 8001632:	4917      	ldr	r1, [pc, #92]	; (8001690 <menu+0x4f8>)
 8001634:	4618      	mov	r0, r3
 8001636:	f00b f815 	bl	800c664 <itoa>
			lcd_print(2, 14, snum);
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <menu+0x4f8>)
 800163c:	210e      	movs	r1, #14
 800163e:	2002      	movs	r0, #2
 8001640:	f006 fcbe 	bl	8007fc0 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001644:	4b0d      	ldr	r3, [pc, #52]	; (800167c <menu+0x4e4>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b06      	cmp	r3, #6
 800164a:	d15f      	bne.n	800170c <menu+0x574>
			if(dilSecim == 0) {
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <menu+0x4cc>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d141      	bne.n	80016d8 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001654:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <menu+0x53c>)
 8001656:	2101      	movs	r1, #1
 8001658:	2002      	movs	r0, #2
 800165a:	f006 fcb1 	bl	8007fc0 <lcd_print>
 800165e:	e044      	b.n	80016ea <menu+0x552>
 8001660:	0800d338 	.word	0x0800d338
 8001664:	20000241 	.word	0x20000241
 8001668:	0800d34c 	.word	0x0800d34c
 800166c:	0800d360 	.word	0x0800d360
 8001670:	20000220 	.word	0x20000220
 8001674:	0800d374 	.word	0x0800d374
 8001678:	0800d388 	.word	0x0800d388
 800167c:	20000222 	.word	0x20000222
 8001680:	0800d39c 	.word	0x0800d39c
 8001684:	0800d3ac 	.word	0x0800d3ac
 8001688:	0800d3bc 	.word	0x0800d3bc
 800168c:	20000242 	.word	0x20000242
 8001690:	20000188 	.word	0x20000188
 8001694:	0800d3c0 	.word	0x0800d3c0
 8001698:	0800d3d0 	.word	0x0800d3d0
 800169c:	0800d3e0 	.word	0x0800d3e0
 80016a0:	20000243 	.word	0x20000243
 80016a4:	0800d3e4 	.word	0x0800d3e4
 80016a8:	0800d3f4 	.word	0x0800d3f4
 80016ac:	20000244 	.word	0x20000244
 80016b0:	0800d404 	.word	0x0800d404
 80016b4:	0800d414 	.word	0x0800d414
 80016b8:	20000245 	.word	0x20000245
 80016bc:	0800d424 	.word	0x0800d424
 80016c0:	0800d434 	.word	0x0800d434
 80016c4:	20000246 	.word	0x20000246
 80016c8:	0800d444 	.word	0x0800d444
 80016cc:	0800d454 	.word	0x0800d454
 80016d0:	20000247 	.word	0x20000247
 80016d4:	0800d464 	.word	0x0800d464
			} else if(dilSecim == 1) {
 80016d8:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <menu+0x680>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d104      	bne.n	80016ea <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80016e0:	4a4e      	ldr	r2, [pc, #312]	; (800181c <menu+0x684>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	2002      	movs	r0, #2
 80016e6:	f006 fc6b 	bl	8007fc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016ea:	4a4d      	ldr	r2, [pc, #308]	; (8001820 <menu+0x688>)
 80016ec:	210f      	movs	r1, #15
 80016ee:	2002      	movs	r0, #2
 80016f0:	f006 fc66 	bl	8007fc0 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80016f4:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <menu+0x68c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	220a      	movs	r2, #10
 80016fa:	494b      	ldr	r1, [pc, #300]	; (8001828 <menu+0x690>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00a ffb1 	bl	800c664 <itoa>
			lcd_print(2, 14, snum);
 8001702:	4a49      	ldr	r2, [pc, #292]	; (8001828 <menu+0x690>)
 8001704:	210e      	movs	r1, #14
 8001706:	2002      	movs	r0, #2
 8001708:	f006 fc5a 	bl	8007fc0 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800170c:	4b47      	ldr	r3, [pc, #284]	; (800182c <menu+0x694>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b07      	cmp	r3, #7
 8001712:	d123      	bne.n	800175c <menu+0x5c4>
			if(dilSecim == 0) {
 8001714:	4b40      	ldr	r3, [pc, #256]	; (8001818 <menu+0x680>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d105      	bne.n	8001728 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 800171c:	4a44      	ldr	r2, [pc, #272]	; (8001830 <menu+0x698>)
 800171e:	2101      	movs	r1, #1
 8001720:	2002      	movs	r0, #2
 8001722:	f006 fc4d 	bl	8007fc0 <lcd_print>
 8001726:	e008      	b.n	800173a <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001728:	4b3b      	ldr	r3, [pc, #236]	; (8001818 <menu+0x680>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d104      	bne.n	800173a <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001730:	4a40      	ldr	r2, [pc, #256]	; (8001834 <menu+0x69c>)
 8001732:	2101      	movs	r1, #1
 8001734:	2002      	movs	r0, #2
 8001736:	f006 fc43 	bl	8007fc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800173a:	4a39      	ldr	r2, [pc, #228]	; (8001820 <menu+0x688>)
 800173c:	210f      	movs	r1, #15
 800173e:	2002      	movs	r0, #2
 8001740:	f006 fc3e 	bl	8007fc0 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001744:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <menu+0x6a0>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	220a      	movs	r2, #10
 800174a:	4937      	ldr	r1, [pc, #220]	; (8001828 <menu+0x690>)
 800174c:	4618      	mov	r0, r3
 800174e:	f00a ff89 	bl	800c664 <itoa>
			lcd_print(2, 14, snum);
 8001752:	4a35      	ldr	r2, [pc, #212]	; (8001828 <menu+0x690>)
 8001754:	210e      	movs	r1, #14
 8001756:	2002      	movs	r0, #2
 8001758:	f006 fc32 	bl	8007fc0 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 800175c:	4b33      	ldr	r3, [pc, #204]	; (800182c <menu+0x694>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b08      	cmp	r3, #8
 8001762:	d123      	bne.n	80017ac <menu+0x614>
			if(dilSecim == 0) {
 8001764:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <menu+0x680>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 800176c:	4a33      	ldr	r2, [pc, #204]	; (800183c <menu+0x6a4>)
 800176e:	2101      	movs	r1, #1
 8001770:	2002      	movs	r0, #2
 8001772:	f006 fc25 	bl	8007fc0 <lcd_print>
 8001776:	e008      	b.n	800178a <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <menu+0x680>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d104      	bne.n	800178a <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001780:	4a2f      	ldr	r2, [pc, #188]	; (8001840 <menu+0x6a8>)
 8001782:	2101      	movs	r1, #1
 8001784:	2002      	movs	r0, #2
 8001786:	f006 fc1b 	bl	8007fc0 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800178a:	4a25      	ldr	r2, [pc, #148]	; (8001820 <menu+0x688>)
 800178c:	210f      	movs	r1, #15
 800178e:	2002      	movs	r0, #2
 8001790:	f006 fc16 	bl	8007fc0 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001794:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <menu+0x6ac>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	220a      	movs	r2, #10
 800179a:	4923      	ldr	r1, [pc, #140]	; (8001828 <menu+0x690>)
 800179c:	4618      	mov	r0, r3
 800179e:	f00a ff61 	bl	800c664 <itoa>
			lcd_print(2, 14, snum);
 80017a2:	4a21      	ldr	r2, [pc, #132]	; (8001828 <menu+0x690>)
 80017a4:	210e      	movs	r1, #14
 80017a6:	2002      	movs	r0, #2
 80017a8:	f006 fc0a 	bl	8007fc0 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <menu+0x694>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b09      	cmp	r3, #9
 80017b2:	d123      	bne.n	80017fc <menu+0x664>
			if(dilSecim == 0) {
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <menu+0x680>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d105      	bne.n	80017c8 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80017bc:	4a22      	ldr	r2, [pc, #136]	; (8001848 <menu+0x6b0>)
 80017be:	2101      	movs	r1, #1
 80017c0:	2002      	movs	r0, #2
 80017c2:	f006 fbfd 	bl	8007fc0 <lcd_print>
 80017c6:	e008      	b.n	80017da <menu+0x642>
			} else if(dilSecim == 1) {
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <menu+0x680>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d104      	bne.n	80017da <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80017d0:	4a1e      	ldr	r2, [pc, #120]	; (800184c <menu+0x6b4>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	2002      	movs	r0, #2
 80017d6:	f006 fbf3 	bl	8007fc0 <lcd_print>
			}
			lcd_print(2, 16, " ");
 80017da:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <menu+0x6b8>)
 80017dc:	2110      	movs	r1, #16
 80017de:	2002      	movs	r0, #2
 80017e0:	f006 fbee 	bl	8007fc0 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <menu+0x6bc>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	220a      	movs	r2, #10
 80017ea:	490f      	ldr	r1, [pc, #60]	; (8001828 <menu+0x690>)
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00a ff39 	bl	800c664 <itoa>
			lcd_print(2, 15, snum);
 80017f2:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <menu+0x690>)
 80017f4:	210f      	movs	r1, #15
 80017f6:	2002      	movs	r0, #2
 80017f8:	f006 fbe2 	bl	8007fc0 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <menu+0x694>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b0a      	cmp	r3, #10
 8001802:	d134      	bne.n	800186e <menu+0x6d6>
			if(dilSecim == 0) {
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <menu+0x680>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d127      	bne.n	800185c <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <menu+0x6c0>)
 800180e:	2101      	movs	r1, #1
 8001810:	2002      	movs	r0, #2
 8001812:	f006 fbd5 	bl	8007fc0 <lcd_print>
 8001816:	e02a      	b.n	800186e <menu+0x6d6>
 8001818:	20000241 	.word	0x20000241
 800181c:	0800d474 	.word	0x0800d474
 8001820:	0800d3e0 	.word	0x0800d3e0
 8001824:	20000248 	.word	0x20000248
 8001828:	20000188 	.word	0x20000188
 800182c:	20000222 	.word	0x20000222
 8001830:	0800d484 	.word	0x0800d484
 8001834:	0800d494 	.word	0x0800d494
 8001838:	20000249 	.word	0x20000249
 800183c:	0800d4a4 	.word	0x0800d4a4
 8001840:	0800d4b4 	.word	0x0800d4b4
 8001844:	2000024a 	.word	0x2000024a
 8001848:	0800d4c4 	.word	0x0800d4c4
 800184c:	0800d4d4 	.word	0x0800d4d4
 8001850:	0800d4e4 	.word	0x0800d4e4
 8001854:	2000024b 	.word	0x2000024b
 8001858:	0800d4e8 	.word	0x0800d4e8
			} else if(dilSecim == 1) {
 800185c:	4b82      	ldr	r3, [pc, #520]	; (8001a68 <menu+0x8d0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d104      	bne.n	800186e <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001864:	4a81      	ldr	r2, [pc, #516]	; (8001a6c <menu+0x8d4>)
 8001866:	2101      	movs	r1, #1
 8001868:	2002      	movs	r0, #2
 800186a:	f006 fba9 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800186e:	2102      	movs	r1, #2
 8001870:	487f      	ldr	r0, [pc, #508]	; (8001a70 <menu+0x8d8>)
 8001872:	f007 fecb 	bl	800960c <HAL_GPIO_ReadPin>
 8001876:	4603      	mov	r3, r0
 8001878:	2b01      	cmp	r3, #1
 800187a:	d119      	bne.n	80018b0 <menu+0x718>
 800187c:	4b7d      	ldr	r3, [pc, #500]	; (8001a74 <menu+0x8dc>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d012      	beq.n	80018b0 <menu+0x718>
 800188a:	4b7b      	ldr	r3, [pc, #492]	; (8001a78 <menu+0x8e0>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10e      	bne.n	80018b0 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001892:	4b7a      	ldr	r3, [pc, #488]	; (8001a7c <menu+0x8e4>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b78      	ldr	r3, [pc, #480]	; (8001a7c <menu+0x8e4>)
 800189c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800189e:	4b77      	ldr	r3, [pc, #476]	; (8001a7c <menu+0x8e4>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b0a      	cmp	r3, #10
 80018a4:	d902      	bls.n	80018ac <menu+0x714>
				hataGostermeSirasi = 0;
 80018a6:	4b75      	ldr	r3, [pc, #468]	; (8001a7c <menu+0x8e4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018ac:	f003 f90e 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80018b0:	2104      	movs	r1, #4
 80018b2:	486f      	ldr	r0, [pc, #444]	; (8001a70 <menu+0x8d8>)
 80018b4:	f007 feaa 	bl	800960c <HAL_GPIO_ReadPin>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d119      	bne.n	80018f2 <menu+0x75a>
 80018be:	4b6d      	ldr	r3, [pc, #436]	; (8001a74 <menu+0x8dc>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	f083 0301 	eor.w	r3, r3, #1
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d012      	beq.n	80018f2 <menu+0x75a>
 80018cc:	4b6a      	ldr	r3, [pc, #424]	; (8001a78 <menu+0x8e0>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10e      	bne.n	80018f2 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80018d4:	4b69      	ldr	r3, [pc, #420]	; (8001a7c <menu+0x8e4>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	3b01      	subs	r3, #1
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <menu+0x8e4>)
 80018de:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80018e0:	4b66      	ldr	r3, [pc, #408]	; (8001a7c <menu+0x8e4>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b0b      	cmp	r3, #11
 80018e6:	d902      	bls.n	80018ee <menu+0x756>
	    		hataGostermeSirasi = 10;
 80018e8:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <menu+0x8e4>)
 80018ea:	220a      	movs	r2, #10
 80018ec:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80018ee:	f003 f8ed 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80018f2:	2108      	movs	r1, #8
 80018f4:	485e      	ldr	r0, [pc, #376]	; (8001a70 <menu+0x8d8>)
 80018f6:	f007 fe89 	bl	800960c <HAL_GPIO_ReadPin>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d153      	bne.n	80019a8 <menu+0x810>
 8001900:	4b5c      	ldr	r3, [pc, #368]	; (8001a74 <menu+0x8dc>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	f083 0301 	eor.w	r3, r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d04c      	beq.n	80019a8 <menu+0x810>
 800190e:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <menu+0x8e4>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b0a      	cmp	r3, #10
 8001914:	d148      	bne.n	80019a8 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001916:	4b5a      	ldr	r3, [pc, #360]	; (8001a80 <menu+0x8e8>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
 800191c:	4b59      	ldr	r3, [pc, #356]	; (8001a84 <menu+0x8ec>)
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001924:	4b58      	ldr	r3, [pc, #352]	; (8001a88 <menu+0x8f0>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <menu+0x8ec>)
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001932:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <menu+0x8f4>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	4b52      	ldr	r3, [pc, #328]	; (8001a84 <menu+0x8ec>)
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <menu+0x8f8>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	4b4f      	ldr	r3, [pc, #316]	; (8001a84 <menu+0x8ec>)
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800194e:	4b51      	ldr	r3, [pc, #324]	; (8001a94 <menu+0x8fc>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	4b4b      	ldr	r3, [pc, #300]	; (8001a84 <menu+0x8ec>)
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 800195c:	4b4e      	ldr	r3, [pc, #312]	; (8001a98 <menu+0x900>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	4b48      	ldr	r3, [pc, #288]	; (8001a84 <menu+0x8ec>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 800196a:	4b4c      	ldr	r3, [pc, #304]	; (8001a9c <menu+0x904>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	4b44      	ldr	r3, [pc, #272]	; (8001a84 <menu+0x8ec>)
 8001972:	2200      	movs	r2, #0
 8001974:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001978:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <menu+0x908>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <menu+0x8ec>)
 8001980:	2200      	movs	r2, #0
 8001982:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <menu+0x90c>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
 800198c:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <menu+0x8ec>)
 800198e:	2200      	movs	r2, #0
 8001990:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001994:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <menu+0x910>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	4b3a      	ldr	r3, [pc, #232]	; (8001a84 <menu+0x8ec>)
 800199c:	2200      	movs	r2, #0
 800199e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 80019a2:	4b42      	ldr	r3, [pc, #264]	; (8001aac <menu+0x914>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80019a8:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <menu+0x918>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	f040 80fc 	bne.w	8001baa <menu+0xa12>
		if(dilSecim == 0) {
 80019b2:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <menu+0x8d0>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 80019ba:	4a3e      	ldr	r2, [pc, #248]	; (8001ab4 <menu+0x91c>)
 80019bc:	2101      	movs	r1, #1
 80019be:	2001      	movs	r0, #1
 80019c0:	f006 fafe 	bl	8007fc0 <lcd_print>
 80019c4:	e008      	b.n	80019d8 <menu+0x840>
		} else if(dilSecim == 1) {
 80019c6:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <menu+0x8d0>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d104      	bne.n	80019d8 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 80019ce:	4a3a      	ldr	r2, [pc, #232]	; (8001ab8 <menu+0x920>)
 80019d0:	2101      	movs	r1, #1
 80019d2:	2001      	movs	r0, #1
 80019d4:	f006 faf4 	bl	8007fc0 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80019d8:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <menu+0x8e0>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d003      	beq.n	80019e8 <menu+0x850>
 80019e0:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <menu+0x8e0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d112      	bne.n	8001a0e <menu+0x876>
			if(dilSecim == 0) {
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <menu+0x8d0>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d105      	bne.n	80019fc <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 80019f0:	4a32      	ldr	r2, [pc, #200]	; (8001abc <menu+0x924>)
 80019f2:	2101      	movs	r1, #1
 80019f4:	2002      	movs	r0, #2
 80019f6:	f006 fae3 	bl	8007fc0 <lcd_print>
 80019fa:	e008      	b.n	8001a0e <menu+0x876>
			} else if(dilSecim == 1) {
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <menu+0x8d0>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d104      	bne.n	8001a0e <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001a04:	4a2e      	ldr	r2, [pc, #184]	; (8001ac0 <menu+0x928>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	2002      	movs	r0, #2
 8001a0a:	f006 fad9 	bl	8007fc0 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <menu+0x92c>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d116      	bne.n	8001a44 <menu+0x8ac>
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <menu+0x8e0>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d112      	bne.n	8001a44 <menu+0x8ac>
			if(dilSecim == 0) {
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <menu+0x8d0>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001a26:	4a28      	ldr	r2, [pc, #160]	; (8001ac8 <menu+0x930>)
 8001a28:	2101      	movs	r1, #1
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f006 fac8 	bl	8007fc0 <lcd_print>
 8001a30:	e008      	b.n	8001a44 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <menu+0x8d0>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d104      	bne.n	8001a44 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001a3a:	4a24      	ldr	r2, [pc, #144]	; (8001acc <menu+0x934>)
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	2002      	movs	r0, #2
 8001a40:	f006 fabe 	bl	8007fc0 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <menu+0x92c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d14c      	bne.n	8001ae6 <menu+0x94e>
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <menu+0x8e0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d148      	bne.n	8001ae6 <menu+0x94e>
			if(dilSecim == 0) {
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <menu+0x8d0>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d13b      	bne.n	8001ad4 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <menu+0x938>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	2002      	movs	r0, #2
 8001a62:	f006 faad 	bl	8007fc0 <lcd_print>
 8001a66:	e03e      	b.n	8001ae6 <menu+0x94e>
 8001a68:	20000241 	.word	0x20000241
 8001a6c:	0800d4fc 	.word	0x0800d4fc
 8001a70:	40010800 	.word	0x40010800
 8001a74:	2000024f 	.word	0x2000024f
 8001a78:	2000022f 	.word	0x2000022f
 8001a7c:	20000222 	.word	0x20000222
 8001a80:	20000242 	.word	0x20000242
 8001a84:	20000118 	.word	0x20000118
 8001a88:	20000243 	.word	0x20000243
 8001a8c:	20000244 	.word	0x20000244
 8001a90:	20000245 	.word	0x20000245
 8001a94:	20000246 	.word	0x20000246
 8001a98:	20000247 	.word	0x20000247
 8001a9c:	20000248 	.word	0x20000248
 8001aa0:	20000249 	.word	0x20000249
 8001aa4:	2000024a 	.word	0x2000024a
 8001aa8:	2000024b 	.word	0x2000024b
 8001aac:	2000024c 	.word	0x2000024c
 8001ab0:	20000220 	.word	0x20000220
 8001ab4:	0800d510 	.word	0x0800d510
 8001ab8:	0800d524 	.word	0x0800d524
 8001abc:	0800d538 	.word	0x0800d538
 8001ac0:	0800d54c 	.word	0x0800d54c
 8001ac4:	20000221 	.word	0x20000221
 8001ac8:	0800d560 	.word	0x0800d560
 8001acc:	0800d570 	.word	0x0800d570
 8001ad0:	0800d580 	.word	0x0800d580
			} else if(dilSecim == 1) {
 8001ad4:	4b98      	ldr	r3, [pc, #608]	; (8001d38 <menu+0xba0>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d104      	bne.n	8001ae6 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001adc:	4a97      	ldr	r2, [pc, #604]	; (8001d3c <menu+0xba4>)
 8001ade:	2101      	movs	r1, #1
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	f006 fa6d 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ae6:	2102      	movs	r1, #2
 8001ae8:	4895      	ldr	r0, [pc, #596]	; (8001d40 <menu+0xba8>)
 8001aea:	f007 fd8f 	bl	800960c <HAL_GPIO_ReadPin>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d119      	bne.n	8001b28 <menu+0x990>
 8001af4:	4b93      	ldr	r3, [pc, #588]	; (8001d44 <menu+0xbac>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	f083 0301 	eor.w	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d012      	beq.n	8001b28 <menu+0x990>
 8001b02:	4b91      	ldr	r3, [pc, #580]	; (8001d48 <menu+0xbb0>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10e      	bne.n	8001b28 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001b0a:	4b90      	ldr	r3, [pc, #576]	; (8001d4c <menu+0xbb4>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b8e      	ldr	r3, [pc, #568]	; (8001d4c <menu+0xbb4>)
 8001b14:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001b16:	4b8d      	ldr	r3, [pc, #564]	; (8001d4c <menu+0xbb4>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d902      	bls.n	8001b24 <menu+0x98c>
				calismaSekli = 0;
 8001b1e:	4b8b      	ldr	r3, [pc, #556]	; (8001d4c <menu+0xbb4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b24:	f002 ffd2 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b28:	2104      	movs	r1, #4
 8001b2a:	4885      	ldr	r0, [pc, #532]	; (8001d40 <menu+0xba8>)
 8001b2c:	f007 fd6e 	bl	800960c <HAL_GPIO_ReadPin>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d119      	bne.n	8001b6a <menu+0x9d2>
 8001b36:	4b83      	ldr	r3, [pc, #524]	; (8001d44 <menu+0xbac>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	f083 0301 	eor.w	r3, r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d012      	beq.n	8001b6a <menu+0x9d2>
 8001b44:	4b80      	ldr	r3, [pc, #512]	; (8001d48 <menu+0xbb0>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10e      	bne.n	8001b6a <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001b4c:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <menu+0xbb4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b7d      	ldr	r3, [pc, #500]	; (8001d4c <menu+0xbb4>)
 8001b56:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001b58:	4b7c      	ldr	r3, [pc, #496]	; (8001d4c <menu+0xbb4>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <menu+0x9ce>
	    		calismaSekli = 1;
 8001b60:	4b7a      	ldr	r3, [pc, #488]	; (8001d4c <menu+0xbb4>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b66:	f002 ffb1 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	4874      	ldr	r0, [pc, #464]	; (8001d40 <menu+0xba8>)
 8001b6e:	f007 fd4d 	bl	800960c <HAL_GPIO_ReadPin>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d118      	bne.n	8001baa <menu+0xa12>
 8001b78:	4b72      	ldr	r3, [pc, #456]	; (8001d44 <menu+0xbac>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f083 0301 	eor.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d011      	beq.n	8001baa <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001b86:	4b71      	ldr	r3, [pc, #452]	; (8001d4c <menu+0xbb4>)
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <menu+0xbb8>)
 8001b8c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001b8e:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <menu+0xbb4>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d106      	bne.n	8001ba4 <menu+0xa0c>
				altLimit = 1;
 8001b96:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <menu+0xbbc>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001b9c:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <menu+0xbbc>)
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	4b6b      	ldr	r3, [pc, #428]	; (8001d50 <menu+0xbb8>)
 8001ba2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ba4:	4b6c      	ldr	r3, [pc, #432]	; (8001d58 <menu+0xbc0>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001baa:	4b6c      	ldr	r3, [pc, #432]	; (8001d5c <menu+0xbc4>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	f040 8083 	bne.w	8001cba <menu+0xb22>
		if(dilSecim == 0) {
 8001bb4:	4b60      	ldr	r3, [pc, #384]	; (8001d38 <menu+0xba0>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001bbc:	4a68      	ldr	r2, [pc, #416]	; (8001d60 <menu+0xbc8>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f006 f9fd 	bl	8007fc0 <lcd_print>
 8001bc6:	e008      	b.n	8001bda <menu+0xa42>
		} else if(dilSecim == 1) {
 8001bc8:	4b5b      	ldr	r3, [pc, #364]	; (8001d38 <menu+0xba0>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d104      	bne.n	8001bda <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001bd0:	4a64      	ldr	r2, [pc, #400]	; (8001d64 <menu+0xbcc>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f006 f9f3 	bl	8007fc0 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001bda:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <menu+0xbd0>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d113      	bne.n	8001c0a <menu+0xa72>
			if(dilSecim == 0) {
 8001be2:	4b55      	ldr	r3, [pc, #340]	; (8001d38 <menu+0xba0>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001bea:	4a60      	ldr	r2, [pc, #384]	; (8001d6c <menu+0xbd4>)
 8001bec:	2101      	movs	r1, #1
 8001bee:	2002      	movs	r0, #2
 8001bf0:	f006 f9e6 	bl	8007fc0 <lcd_print>
 8001bf4:	e012      	b.n	8001c1c <menu+0xa84>
			} else if(dilSecim == 1) {
 8001bf6:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <menu+0xba0>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d10e      	bne.n	8001c1c <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001bfe:	4a5c      	ldr	r2, [pc, #368]	; (8001d70 <menu+0xbd8>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	2002      	movs	r0, #2
 8001c04:	f006 f9dc 	bl	8007fc0 <lcd_print>
 8001c08:	e008      	b.n	8001c1c <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001c0a:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <menu+0xbd0>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d104      	bne.n	8001c1c <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001c12:	4a58      	ldr	r2, [pc, #352]	; (8001d74 <menu+0xbdc>)
 8001c14:	2101      	movs	r1, #1
 8001c16:	2002      	movs	r0, #2
 8001c18:	f006 f9d2 	bl	8007fc0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	4848      	ldr	r0, [pc, #288]	; (8001d40 <menu+0xba8>)
 8001c20:	f007 fcf4 	bl	800960c <HAL_GPIO_ReadPin>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d115      	bne.n	8001c56 <menu+0xabe>
 8001c2a:	4b46      	ldr	r3, [pc, #280]	; (8001d44 <menu+0xbac>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	f083 0301 	eor.w	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00e      	beq.n	8001c56 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001c38:	4b4b      	ldr	r3, [pc, #300]	; (8001d68 <menu+0xbd0>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	4b49      	ldr	r3, [pc, #292]	; (8001d68 <menu+0xbd0>)
 8001c42:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001c44:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <menu+0xbd0>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d902      	bls.n	8001c52 <menu+0xaba>
				emniyetCercevesi = 0;
 8001c4c:	4b46      	ldr	r3, [pc, #280]	; (8001d68 <menu+0xbd0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c52:	f002 ff3b 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c56:	2104      	movs	r1, #4
 8001c58:	4839      	ldr	r0, [pc, #228]	; (8001d40 <menu+0xba8>)
 8001c5a:	f007 fcd7 	bl	800960c <HAL_GPIO_ReadPin>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d115      	bne.n	8001c90 <menu+0xaf8>
 8001c64:	4b37      	ldr	r3, [pc, #220]	; (8001d44 <menu+0xbac>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	f083 0301 	eor.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00e      	beq.n	8001c90 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <menu+0xbd0>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <menu+0xbd0>)
 8001c7c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <menu+0xbd0>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001c86:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <menu+0xbd0>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c8c:	f002 ff1e 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001c90:	2108      	movs	r1, #8
 8001c92:	482b      	ldr	r0, [pc, #172]	; (8001d40 <menu+0xba8>)
 8001c94:	f007 fcba 	bl	800960c <HAL_GPIO_ReadPin>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d10d      	bne.n	8001cba <menu+0xb22>
 8001c9e:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <menu+0xbac>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	f083 0301 	eor.w	r3, r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <menu+0xbd0>)
 8001cae:	781a      	ldrb	r2, [r3, #0]
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <menu+0xbb8>)
 8001cb2:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001cb4:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <menu+0xbc0>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001cba:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <menu+0xbc4>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	f040 80ba 	bne.w	8001e38 <menu+0xca0>
		if(dilSecim == 0) {
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <menu+0xba0>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001ccc:	4a2a      	ldr	r2, [pc, #168]	; (8001d78 <menu+0xbe0>)
 8001cce:	2101      	movs	r1, #1
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f006 f975 	bl	8007fc0 <lcd_print>
 8001cd6:	e008      	b.n	8001cea <menu+0xb52>
		} else if(dilSecim == 1) {
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <menu+0xba0>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d104      	bne.n	8001cea <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001ce0:	4a26      	ldr	r2, [pc, #152]	; (8001d7c <menu+0xbe4>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f006 f96b 	bl	8007fc0 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <menu+0xbe8>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d113      	bne.n	8001d1a <menu+0xb82>
			if(dilSecim == 0) {
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <menu+0xba0>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001cfa:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <menu+0xbd4>)
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	2002      	movs	r0, #2
 8001d00:	f006 f95e 	bl	8007fc0 <lcd_print>
 8001d04:	e049      	b.n	8001d9a <menu+0xc02>
			} else if(dilSecim == 1) {
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <menu+0xba0>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d145      	bne.n	8001d9a <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001d0e:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <menu+0xbd8>)
 8001d10:	2101      	movs	r1, #1
 8001d12:	2002      	movs	r0, #2
 8001d14:	f006 f954 	bl	8007fc0 <lcd_print>
 8001d18:	e03f      	b.n	8001d9a <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <menu+0xbe8>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d13b      	bne.n	8001d9a <menu+0xc02>
			if(dilSecim == 0) {
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <menu+0xba0>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d12e      	bne.n	8001d88 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001d2a:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <menu+0xbec>)
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f006 f946 	bl	8007fc0 <lcd_print>
 8001d34:	e031      	b.n	8001d9a <menu+0xc02>
 8001d36:	bf00      	nop
 8001d38:	20000241 	.word	0x20000241
 8001d3c:	0800d590 	.word	0x0800d590
 8001d40:	40010800 	.word	0x40010800
 8001d44:	2000024f 	.word	0x2000024f
 8001d48:	2000022f 	.word	0x2000022f
 8001d4c:	20000221 	.word	0x20000221
 8001d50:	20000118 	.word	0x20000118
 8001d54:	20000226 	.word	0x20000226
 8001d58:	2000024c 	.word	0x2000024c
 8001d5c:	20000220 	.word	0x20000220
 8001d60:	0800d5a0 	.word	0x0800d5a0
 8001d64:	0800d5b4 	.word	0x0800d5b4
 8001d68:	20000224 	.word	0x20000224
 8001d6c:	0800d5c8 	.word	0x0800d5c8
 8001d70:	0800d5dc 	.word	0x0800d5dc
 8001d74:	0800d5f0 	.word	0x0800d5f0
 8001d78:	0800d600 	.word	0x0800d600
 8001d7c:	0800d614 	.word	0x0800d614
 8001d80:	20000225 	.word	0x20000225
 8001d84:	0800d628 	.word	0x0800d628
			} else if(dilSecim == 1) {
 8001d88:	4b92      	ldr	r3, [pc, #584]	; (8001fd4 <menu+0xe3c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d104      	bne.n	8001d9a <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001d90:	4a91      	ldr	r2, [pc, #580]	; (8001fd8 <menu+0xe40>)
 8001d92:	2101      	movs	r1, #1
 8001d94:	2002      	movs	r0, #2
 8001d96:	f006 f913 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	488f      	ldr	r0, [pc, #572]	; (8001fdc <menu+0xe44>)
 8001d9e:	f007 fc35 	bl	800960c <HAL_GPIO_ReadPin>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d115      	bne.n	8001dd4 <menu+0xc3c>
 8001da8:	4b8d      	ldr	r3, [pc, #564]	; (8001fe0 <menu+0xe48>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	f083 0301 	eor.w	r3, r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00e      	beq.n	8001dd4 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001db6:	4b8b      	ldr	r3, [pc, #556]	; (8001fe4 <menu+0xe4c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <menu+0xe4c>)
 8001dc0:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001dc2:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <menu+0xe4c>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d902      	bls.n	8001dd0 <menu+0xc38>
				yavaslamaLimit = 0;
 8001dca:	4b86      	ldr	r3, [pc, #536]	; (8001fe4 <menu+0xe4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dd0:	f002 fe7c 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	4881      	ldr	r0, [pc, #516]	; (8001fdc <menu+0xe44>)
 8001dd8:	f007 fc18 	bl	800960c <HAL_GPIO_ReadPin>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d115      	bne.n	8001e0e <menu+0xc76>
 8001de2:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <menu+0xe48>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	f083 0301 	eor.w	r3, r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00e      	beq.n	8001e0e <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001df0:	4b7c      	ldr	r3, [pc, #496]	; (8001fe4 <menu+0xe4c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b7a      	ldr	r3, [pc, #488]	; (8001fe4 <menu+0xe4c>)
 8001dfa:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001dfc:	4b79      	ldr	r3, [pc, #484]	; (8001fe4 <menu+0xe4c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001e04:	4b77      	ldr	r3, [pc, #476]	; (8001fe4 <menu+0xe4c>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e0a:	f002 fe5f 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e0e:	2108      	movs	r1, #8
 8001e10:	4872      	ldr	r0, [pc, #456]	; (8001fdc <menu+0xe44>)
 8001e12:	f007 fbfb 	bl	800960c <HAL_GPIO_ReadPin>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d10d      	bne.n	8001e38 <menu+0xca0>
 8001e1c:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <menu+0xe48>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	f083 0301 	eor.w	r3, r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d006      	beq.n	8001e38 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001e2a:	4b6e      	ldr	r3, [pc, #440]	; (8001fe4 <menu+0xe4c>)
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	4b6e      	ldr	r3, [pc, #440]	; (8001fe8 <menu+0xe50>)
 8001e30:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001e32:	4b6e      	ldr	r3, [pc, #440]	; (8001fec <menu+0xe54>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001e38:	4b6d      	ldr	r3, [pc, #436]	; (8001ff0 <menu+0xe58>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	f040 80b9 	bne.w	8001fb4 <menu+0xe1c>
		if(dilSecim == 0) {
 8001e42:	4b64      	ldr	r3, [pc, #400]	; (8001fd4 <menu+0xe3c>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001e4a:	4a6a      	ldr	r2, [pc, #424]	; (8001ff4 <menu+0xe5c>)
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f006 f8b6 	bl	8007fc0 <lcd_print>
 8001e54:	e008      	b.n	8001e68 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001e56:	4b5f      	ldr	r3, [pc, #380]	; (8001fd4 <menu+0xe3c>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d104      	bne.n	8001e68 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001e5e:	4a66      	ldr	r2, [pc, #408]	; (8001ff8 <menu+0xe60>)
 8001e60:	2101      	movs	r1, #1
 8001e62:	2001      	movs	r0, #1
 8001e64:	f006 f8ac 	bl	8007fc0 <lcd_print>
		}

		if(altLimit == 0) {
 8001e68:	4b64      	ldr	r3, [pc, #400]	; (8001ffc <menu+0xe64>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d113      	bne.n	8001e98 <menu+0xd00>
			if(dilSecim == 0) {
 8001e70:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <menu+0xe3c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001e78:	4a61      	ldr	r2, [pc, #388]	; (8002000 <menu+0xe68>)
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	2002      	movs	r0, #2
 8001e7e:	f006 f89f 	bl	8007fc0 <lcd_print>
 8001e82:	e020      	b.n	8001ec6 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001e84:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <menu+0xe3c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d11c      	bne.n	8001ec6 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001e8c:	4a5d      	ldr	r2, [pc, #372]	; (8002004 <menu+0xe6c>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2002      	movs	r0, #2
 8001e92:	f006 f895 	bl	8007fc0 <lcd_print>
 8001e96:	e016      	b.n	8001ec6 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001e98:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <menu+0xe64>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d112      	bne.n	8001ec6 <menu+0xd2e>
			if(dilSecim == 0){
 8001ea0:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <menu+0xe3c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001ea8:	4a57      	ldr	r2, [pc, #348]	; (8002008 <menu+0xe70>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2002      	movs	r0, #2
 8001eae:	f006 f887 	bl	8007fc0 <lcd_print>
 8001eb2:	e008      	b.n	8001ec6 <menu+0xd2e>
			} else if(dilSecim == 1){
 8001eb4:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <menu+0xe3c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d104      	bne.n	8001ec6 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001ebc:	4a46      	ldr	r2, [pc, #280]	; (8001fd8 <menu+0xe40>)
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	2002      	movs	r0, #2
 8001ec2:	f006 f87d 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001ec6:	2102      	movs	r1, #2
 8001ec8:	4844      	ldr	r0, [pc, #272]	; (8001fdc <menu+0xe44>)
 8001eca:	f007 fb9f 	bl	800960c <HAL_GPIO_ReadPin>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d119      	bne.n	8001f08 <menu+0xd70>
 8001ed4:	4b42      	ldr	r3, [pc, #264]	; (8001fe0 <menu+0xe48>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	f083 0301 	eor.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d012      	beq.n	8001f08 <menu+0xd70>
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <menu+0xe74>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10e      	bne.n	8001f08 <menu+0xd70>
			altLimit = altLimit + 1;
 8001eea:	4b44      	ldr	r3, [pc, #272]	; (8001ffc <menu+0xe64>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <menu+0xe64>)
 8001ef4:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001ef6:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <menu+0xe64>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d902      	bls.n	8001f04 <menu+0xd6c>
				altLimit = 0;
 8001efe:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <menu+0xe64>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f04:	f002 fde2 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001f08:	2104      	movs	r1, #4
 8001f0a:	4834      	ldr	r0, [pc, #208]	; (8001fdc <menu+0xe44>)
 8001f0c:	f007 fb7e 	bl	800960c <HAL_GPIO_ReadPin>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d119      	bne.n	8001f4a <menu+0xdb2>
 8001f16:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <menu+0xe48>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	f083 0301 	eor.w	r3, r3, #1
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d012      	beq.n	8001f4a <menu+0xdb2>
 8001f24:	4b39      	ldr	r3, [pc, #228]	; (800200c <menu+0xe74>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10e      	bne.n	8001f4a <menu+0xdb2>
			altLimit = altLimit - 1;
 8001f2c:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <menu+0xe64>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <menu+0xe64>)
 8001f36:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001f38:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <menu+0xe64>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <menu+0xdae>
		   		altLimit = 1;
 8001f40:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <menu+0xe64>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f46:	f002 fdc1 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f4a:	2108      	movs	r1, #8
 8001f4c:	4823      	ldr	r0, [pc, #140]	; (8001fdc <menu+0xe44>)
 8001f4e:	f007 fb5d 	bl	800960c <HAL_GPIO_ReadPin>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d12d      	bne.n	8001fb4 <menu+0xe1c>
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <menu+0xe48>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	f083 0301 	eor.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d026      	beq.n	8001fb4 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <menu+0xe64>)
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <menu+0xe50>)
 8001f6c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001f6e:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <menu+0xe64>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d110      	bne.n	8001f98 <menu+0xe00>
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <menu+0xe78>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <menu+0xdee>
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <menu+0xe78>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d108      	bne.n	8001f98 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <menu+0xe78>)
 8001f88:	2203      	movs	r2, #3
 8001f8a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001f8c:	4b20      	ldr	r3, [pc, #128]	; (8002010 <menu+0xe78>)
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <menu+0xe50>)
 8001f92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001f96:	e00a      	b.n	8001fae <menu+0xe16>
			} else if(altLimit == 0) {
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <menu+0xe64>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d106      	bne.n	8001fae <menu+0xe16>
				platformSilindirTipi = 0;
 8001fa0:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <menu+0xe7c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <menu+0xe7c>)
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <menu+0xe50>)
 8001fac:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <menu+0xe54>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <menu+0xe58>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b06      	cmp	r3, #6
 8001fba:	f040 80b6 	bne.w	800212a <menu+0xf92>
		if(dilSecim == 0) {
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <menu+0xe3c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d12a      	bne.n	800201c <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001fc6:	4a14      	ldr	r2, [pc, #80]	; (8002018 <menu+0xe80>)
 8001fc8:	2101      	movs	r1, #1
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f005 fff8 	bl	8007fc0 <lcd_print>
 8001fd0:	e02d      	b.n	800202e <menu+0xe96>
 8001fd2:	bf00      	nop
 8001fd4:	20000241 	.word	0x20000241
 8001fd8:	0800d63c 	.word	0x0800d63c
 8001fdc:	40010800 	.word	0x40010800
 8001fe0:	2000024f 	.word	0x2000024f
 8001fe4:	20000225 	.word	0x20000225
 8001fe8:	20000118 	.word	0x20000118
 8001fec:	2000024c 	.word	0x2000024c
 8001ff0:	20000220 	.word	0x20000220
 8001ff4:	0800d650 	.word	0x0800d650
 8001ff8:	0800d664 	.word	0x0800d664
 8001ffc:	20000226 	.word	0x20000226
 8002000:	0800d5c8 	.word	0x0800d5c8
 8002004:	0800d5dc 	.word	0x0800d5dc
 8002008:	0800d628 	.word	0x0800d628
 800200c:	20000221 	.word	0x20000221
 8002010:	2000022d 	.word	0x2000022d
 8002014:	20000233 	.word	0x20000233
 8002018:	0800d678 	.word	0x0800d678
		} else if(dilSecim == 1){
 800201c:	4b7a      	ldr	r3, [pc, #488]	; (8002208 <menu+0x1070>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d104      	bne.n	800202e <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002024:	4a79      	ldr	r2, [pc, #484]	; (800220c <menu+0x1074>)
 8002026:	2101      	movs	r1, #1
 8002028:	2001      	movs	r0, #1
 800202a:	f005 ffc9 	bl	8007fc0 <lcd_print>
		}
		if(basincSalteri == 0){
 800202e:	4b78      	ldr	r3, [pc, #480]	; (8002210 <menu+0x1078>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d113      	bne.n	800205e <menu+0xec6>
			if(dilSecim == 0) {
 8002036:	4b74      	ldr	r3, [pc, #464]	; (8002208 <menu+0x1070>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 800203e:	4a75      	ldr	r2, [pc, #468]	; (8002214 <menu+0x107c>)
 8002040:	2101      	movs	r1, #1
 8002042:	2002      	movs	r0, #2
 8002044:	f005 ffbc 	bl	8007fc0 <lcd_print>
 8002048:	e020      	b.n	800208c <menu+0xef4>
			} else if(dilSecim == 1){
 800204a:	4b6f      	ldr	r3, [pc, #444]	; (8002208 <menu+0x1070>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d11c      	bne.n	800208c <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8002052:	4a71      	ldr	r2, [pc, #452]	; (8002218 <menu+0x1080>)
 8002054:	2101      	movs	r1, #1
 8002056:	2002      	movs	r0, #2
 8002058:	f005 ffb2 	bl	8007fc0 <lcd_print>
 800205c:	e016      	b.n	800208c <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800205e:	4b6c      	ldr	r3, [pc, #432]	; (8002210 <menu+0x1078>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d112      	bne.n	800208c <menu+0xef4>
			if(dilSecim == 0) {
 8002066:	4b68      	ldr	r3, [pc, #416]	; (8002208 <menu+0x1070>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d105      	bne.n	800207a <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800206e:	4a6b      	ldr	r2, [pc, #428]	; (800221c <menu+0x1084>)
 8002070:	2101      	movs	r1, #1
 8002072:	2002      	movs	r0, #2
 8002074:	f005 ffa4 	bl	8007fc0 <lcd_print>
 8002078:	e008      	b.n	800208c <menu+0xef4>
			} else if(dilSecim == 1) {
 800207a:	4b63      	ldr	r3, [pc, #396]	; (8002208 <menu+0x1070>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d104      	bne.n	800208c <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8002082:	4a67      	ldr	r2, [pc, #412]	; (8002220 <menu+0x1088>)
 8002084:	2101      	movs	r1, #1
 8002086:	2002      	movs	r0, #2
 8002088:	f005 ff9a 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800208c:	2102      	movs	r1, #2
 800208e:	4865      	ldr	r0, [pc, #404]	; (8002224 <menu+0x108c>)
 8002090:	f007 fabc 	bl	800960c <HAL_GPIO_ReadPin>
 8002094:	4603      	mov	r3, r0
 8002096:	2b01      	cmp	r3, #1
 8002098:	d115      	bne.n	80020c6 <menu+0xf2e>
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <menu+0x1090>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	f083 0301 	eor.w	r3, r3, #1
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00e      	beq.n	80020c6 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80020a8:	4b59      	ldr	r3, [pc, #356]	; (8002210 <menu+0x1078>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b57      	ldr	r3, [pc, #348]	; (8002210 <menu+0x1078>)
 80020b2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80020b4:	4b56      	ldr	r3, [pc, #344]	; (8002210 <menu+0x1078>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d902      	bls.n	80020c2 <menu+0xf2a>
				basincSalteri = 0;
 80020bc:	4b54      	ldr	r3, [pc, #336]	; (8002210 <menu+0x1078>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020c2:	f002 fd03 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020c6:	2104      	movs	r1, #4
 80020c8:	4856      	ldr	r0, [pc, #344]	; (8002224 <menu+0x108c>)
 80020ca:	f007 fa9f 	bl	800960c <HAL_GPIO_ReadPin>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d115      	bne.n	8002100 <menu+0xf68>
 80020d4:	4b54      	ldr	r3, [pc, #336]	; (8002228 <menu+0x1090>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	f083 0301 	eor.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00e      	beq.n	8002100 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80020e2:	4b4b      	ldr	r3, [pc, #300]	; (8002210 <menu+0x1078>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4b49      	ldr	r3, [pc, #292]	; (8002210 <menu+0x1078>)
 80020ec:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80020ee:	4b48      	ldr	r3, [pc, #288]	; (8002210 <menu+0x1078>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <menu+0xf64>
		   		basincSalteri = 1;
 80020f6:	4b46      	ldr	r3, [pc, #280]	; (8002210 <menu+0x1078>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020fc:	f002 fce6 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002100:	2108      	movs	r1, #8
 8002102:	4848      	ldr	r0, [pc, #288]	; (8002224 <menu+0x108c>)
 8002104:	f007 fa82 	bl	800960c <HAL_GPIO_ReadPin>
 8002108:	4603      	mov	r3, r0
 800210a:	2b01      	cmp	r3, #1
 800210c:	d10d      	bne.n	800212a <menu+0xf92>
 800210e:	4b46      	ldr	r3, [pc, #280]	; (8002228 <menu+0x1090>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	f083 0301 	eor.w	r3, r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <menu+0xf92>
			eepromData[6] = basincSalteri;
 800211c:	4b3c      	ldr	r3, [pc, #240]	; (8002210 <menu+0x1078>)
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	4b42      	ldr	r3, [pc, #264]	; (800222c <menu+0x1094>)
 8002122:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002124:	4b42      	ldr	r3, [pc, #264]	; (8002230 <menu+0x1098>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800212a:	4b42      	ldr	r3, [pc, #264]	; (8002234 <menu+0x109c>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b07      	cmp	r3, #7
 8002130:	f040 80f5 	bne.w	800231e <menu+0x1186>
		if(dilSecim == 0) {
 8002134:	4b34      	ldr	r3, [pc, #208]	; (8002208 <menu+0x1070>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800213c:	4a3e      	ldr	r2, [pc, #248]	; (8002238 <menu+0x10a0>)
 800213e:	2101      	movs	r1, #1
 8002140:	2001      	movs	r0, #1
 8002142:	f005 ff3d 	bl	8007fc0 <lcd_print>
 8002146:	e008      	b.n	800215a <menu+0xfc2>
		} else if(dilSecim == 1){
 8002148:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <menu+0x1070>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d104      	bne.n	800215a <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002150:	4a3a      	ldr	r2, [pc, #232]	; (800223c <menu+0x10a4>)
 8002152:	2101      	movs	r1, #1
 8002154:	2001      	movs	r0, #1
 8002156:	f005 ff33 	bl	8007fc0 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <menu+0x10a8>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d113      	bne.n	800218a <menu+0xff2>
			if(dilSecim == 0) {
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <menu+0x1070>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800216a:	4a2a      	ldr	r2, [pc, #168]	; (8002214 <menu+0x107c>)
 800216c:	2101      	movs	r1, #1
 800216e:	2002      	movs	r0, #2
 8002170:	f005 ff26 	bl	8007fc0 <lcd_print>
 8002174:	e079      	b.n	800226a <menu+0x10d2>
			} else if(dilSecim == 1){
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <menu+0x1070>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d175      	bne.n	800226a <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800217e:	4a26      	ldr	r2, [pc, #152]	; (8002218 <menu+0x1080>)
 8002180:	2101      	movs	r1, #1
 8002182:	2002      	movs	r0, #2
 8002184:	f005 ff1c 	bl	8007fc0 <lcd_print>
 8002188:	e06f      	b.n	800226a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <menu+0x10a8>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d113      	bne.n	80021ba <menu+0x1022>
			if(dilSecim == 0) {
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <menu+0x1070>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800219a:	4a2a      	ldr	r2, [pc, #168]	; (8002244 <menu+0x10ac>)
 800219c:	2101      	movs	r1, #1
 800219e:	2002      	movs	r0, #2
 80021a0:	f005 ff0e 	bl	8007fc0 <lcd_print>
 80021a4:	e061      	b.n	800226a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <menu+0x1070>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d15d      	bne.n	800226a <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80021ae:	4a26      	ldr	r2, [pc, #152]	; (8002248 <menu+0x10b0>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	2002      	movs	r0, #2
 80021b4:	f005 ff04 	bl	8007fc0 <lcd_print>
 80021b8:	e057      	b.n	800226a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80021ba:	4b21      	ldr	r3, [pc, #132]	; (8002240 <menu+0x10a8>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d113      	bne.n	80021ea <menu+0x1052>
			if(dilSecim == 0) {
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <menu+0x1070>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80021ca:	4a20      	ldr	r2, [pc, #128]	; (800224c <menu+0x10b4>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	2002      	movs	r0, #2
 80021d0:	f005 fef6 	bl	8007fc0 <lcd_print>
 80021d4:	e049      	b.n	800226a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <menu+0x1070>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d145      	bne.n	800226a <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80021de:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <menu+0x10b8>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	2002      	movs	r0, #2
 80021e4:	f005 feec 	bl	8007fc0 <lcd_print>
 80021e8:	e03f      	b.n	800226a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <menu+0x10a8>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d13b      	bne.n	800226a <menu+0x10d2>
			if(dilSecim == 0) {
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <menu+0x1070>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d12e      	bne.n	8002258 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80021fa:	4a16      	ldr	r2, [pc, #88]	; (8002254 <menu+0x10bc>)
 80021fc:	2101      	movs	r1, #1
 80021fe:	2002      	movs	r0, #2
 8002200:	f005 fede 	bl	8007fc0 <lcd_print>
 8002204:	e031      	b.n	800226a <menu+0x10d2>
 8002206:	bf00      	nop
 8002208:	20000241 	.word	0x20000241
 800220c:	0800d688 	.word	0x0800d688
 8002210:	20000227 	.word	0x20000227
 8002214:	0800d5c8 	.word	0x0800d5c8
 8002218:	0800d5dc 	.word	0x0800d5dc
 800221c:	0800d628 	.word	0x0800d628
 8002220:	0800d63c 	.word	0x0800d63c
 8002224:	40010800 	.word	0x40010800
 8002228:	2000024f 	.word	0x2000024f
 800222c:	20000118 	.word	0x20000118
 8002230:	2000024c 	.word	0x2000024c
 8002234:	20000220 	.word	0x20000220
 8002238:	0800d698 	.word	0x0800d698
 800223c:	0800d6ac 	.word	0x0800d6ac
 8002240:	20000228 	.word	0x20000228
 8002244:	0800d6c0 	.word	0x0800d6c0
 8002248:	0800d6d4 	.word	0x0800d6d4
 800224c:	0800d6e8 	.word	0x0800d6e8
 8002250:	0800d6fc 	.word	0x0800d6fc
 8002254:	0800d710 	.word	0x0800d710
			} else if(dilSecim == 1){
 8002258:	4b99      	ldr	r3, [pc, #612]	; (80024c0 <menu+0x1328>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d104      	bne.n	800226a <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002260:	4a98      	ldr	r2, [pc, #608]	; (80024c4 <menu+0x132c>)
 8002262:	2101      	movs	r1, #1
 8002264:	2002      	movs	r0, #2
 8002266:	f005 feab 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800226a:	2102      	movs	r1, #2
 800226c:	4896      	ldr	r0, [pc, #600]	; (80024c8 <menu+0x1330>)
 800226e:	f007 f9cd 	bl	800960c <HAL_GPIO_ReadPin>
 8002272:	4603      	mov	r3, r0
 8002274:	2b01      	cmp	r3, #1
 8002276:	d115      	bne.n	80022a4 <menu+0x110c>
 8002278:	4b94      	ldr	r3, [pc, #592]	; (80024cc <menu+0x1334>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	f083 0301 	eor.w	r3, r3, #1
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00e      	beq.n	80022a4 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002286:	4b92      	ldr	r3, [pc, #584]	; (80024d0 <menu+0x1338>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b90      	ldr	r3, [pc, #576]	; (80024d0 <menu+0x1338>)
 8002290:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002292:	4b8f      	ldr	r3, [pc, #572]	; (80024d0 <menu+0x1338>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d902      	bls.n	80022a0 <menu+0x1108>
				kapiSecimleri = 0;
 800229a:	4b8d      	ldr	r3, [pc, #564]	; (80024d0 <menu+0x1338>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022a0:	f002 fc14 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a4:	2104      	movs	r1, #4
 80022a6:	4888      	ldr	r0, [pc, #544]	; (80024c8 <menu+0x1330>)
 80022a8:	f007 f9b0 	bl	800960c <HAL_GPIO_ReadPin>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d115      	bne.n	80022de <menu+0x1146>
 80022b2:	4b86      	ldr	r3, [pc, #536]	; (80024cc <menu+0x1334>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	f083 0301 	eor.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80022c0:	4b83      	ldr	r3, [pc, #524]	; (80024d0 <menu+0x1338>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b81      	ldr	r3, [pc, #516]	; (80024d0 <menu+0x1338>)
 80022ca:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80022cc:	4b80      	ldr	r3, [pc, #512]	; (80024d0 <menu+0x1338>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d902      	bls.n	80022da <menu+0x1142>
		   		kapiSecimleri = 3;
 80022d4:	4b7e      	ldr	r3, [pc, #504]	; (80024d0 <menu+0x1338>)
 80022d6:	2203      	movs	r2, #3
 80022d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022da:	f002 fbf7 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022de:	2108      	movs	r1, #8
 80022e0:	4879      	ldr	r0, [pc, #484]	; (80024c8 <menu+0x1330>)
 80022e2:	f007 f993 	bl	800960c <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d118      	bne.n	800231e <menu+0x1186>
 80022ec:	4b77      	ldr	r3, [pc, #476]	; (80024cc <menu+0x1334>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d011      	beq.n	800231e <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80022fa:	4b75      	ldr	r3, [pc, #468]	; (80024d0 <menu+0x1338>)
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	4b75      	ldr	r3, [pc, #468]	; (80024d4 <menu+0x133c>)
 8002300:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002302:	4b73      	ldr	r3, [pc, #460]	; (80024d0 <menu+0x1338>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d006      	beq.n	8002318 <menu+0x1180>
				altLimit = 1;
 800230a:	4b73      	ldr	r3, [pc, #460]	; (80024d8 <menu+0x1340>)
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002310:	4b71      	ldr	r3, [pc, #452]	; (80024d8 <menu+0x1340>)
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <menu+0x133c>)
 8002316:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002318:	4b70      	ldr	r3, [pc, #448]	; (80024dc <menu+0x1344>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800231e:	4b70      	ldr	r3, [pc, #448]	; (80024e0 <menu+0x1348>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b08      	cmp	r3, #8
 8002324:	f040 8092 	bne.w	800244c <menu+0x12b4>
		if(dilSecim == 0) {
 8002328:	4b65      	ldr	r3, [pc, #404]	; (80024c0 <menu+0x1328>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002330:	4a6c      	ldr	r2, [pc, #432]	; (80024e4 <menu+0x134c>)
 8002332:	2101      	movs	r1, #1
 8002334:	2001      	movs	r0, #1
 8002336:	f005 fe43 	bl	8007fc0 <lcd_print>
 800233a:	e008      	b.n	800234e <menu+0x11b6>
		} else if(dilSecim == 1) {
 800233c:	4b60      	ldr	r3, [pc, #384]	; (80024c0 <menu+0x1328>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d104      	bne.n	800234e <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002344:	4a68      	ldr	r2, [pc, #416]	; (80024e8 <menu+0x1350>)
 8002346:	2101      	movs	r1, #1
 8002348:	2001      	movs	r0, #1
 800234a:	f005 fe39 	bl	8007fc0 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <menu+0x1354>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d113      	bne.n	800237e <menu+0x11e6>
			if(dilSecim == 0) {
 8002356:	4b5a      	ldr	r3, [pc, #360]	; (80024c0 <menu+0x1328>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800235e:	4a64      	ldr	r2, [pc, #400]	; (80024f0 <menu+0x1358>)
 8002360:	2101      	movs	r1, #1
 8002362:	2002      	movs	r0, #2
 8002364:	f005 fe2c 	bl	8007fc0 <lcd_print>
 8002368:	e020      	b.n	80023ac <menu+0x1214>
			} else if(dilSecim == 1) {
 800236a:	4b55      	ldr	r3, [pc, #340]	; (80024c0 <menu+0x1328>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d11c      	bne.n	80023ac <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002372:	4a60      	ldr	r2, [pc, #384]	; (80024f4 <menu+0x135c>)
 8002374:	2101      	movs	r1, #1
 8002376:	2002      	movs	r0, #2
 8002378:	f005 fe22 	bl	8007fc0 <lcd_print>
 800237c:	e016      	b.n	80023ac <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800237e:	4b5b      	ldr	r3, [pc, #364]	; (80024ec <menu+0x1354>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d112      	bne.n	80023ac <menu+0x1214>
			if(dilSecim == 0){
 8002386:	4b4e      	ldr	r3, [pc, #312]	; (80024c0 <menu+0x1328>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800238e:	4a5a      	ldr	r2, [pc, #360]	; (80024f8 <menu+0x1360>)
 8002390:	2101      	movs	r1, #1
 8002392:	2002      	movs	r0, #2
 8002394:	f005 fe14 	bl	8007fc0 <lcd_print>
 8002398:	e008      	b.n	80023ac <menu+0x1214>
			} else if(dilSecim == 1){
 800239a:	4b49      	ldr	r3, [pc, #292]	; (80024c0 <menu+0x1328>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d104      	bne.n	80023ac <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80023a2:	4a56      	ldr	r2, [pc, #344]	; (80024fc <menu+0x1364>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	2002      	movs	r0, #2
 80023a8:	f005 fe0a 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ac:	2102      	movs	r1, #2
 80023ae:	4846      	ldr	r0, [pc, #280]	; (80024c8 <menu+0x1330>)
 80023b0:	f007 f92c 	bl	800960c <HAL_GPIO_ReadPin>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d115      	bne.n	80023e6 <menu+0x124e>
 80023ba:	4b44      	ldr	r3, [pc, #272]	; (80024cc <menu+0x1334>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00e      	beq.n	80023e6 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80023c8:	4b48      	ldr	r3, [pc, #288]	; (80024ec <menu+0x1354>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b46      	ldr	r3, [pc, #280]	; (80024ec <menu+0x1354>)
 80023d2:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80023d4:	4b45      	ldr	r3, [pc, #276]	; (80024ec <menu+0x1354>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d902      	bls.n	80023e2 <menu+0x124a>
				kapiAcTipi = 0;
 80023dc:	4b43      	ldr	r3, [pc, #268]	; (80024ec <menu+0x1354>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023e2:	f002 fb73 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023e6:	2104      	movs	r1, #4
 80023e8:	4837      	ldr	r0, [pc, #220]	; (80024c8 <menu+0x1330>)
 80023ea:	f007 f90f 	bl	800960c <HAL_GPIO_ReadPin>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d115      	bne.n	8002420 <menu+0x1288>
 80023f4:	4b35      	ldr	r3, [pc, #212]	; (80024cc <menu+0x1334>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	f083 0301 	eor.w	r3, r3, #1
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00e      	beq.n	8002420 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002402:	4b3a      	ldr	r3, [pc, #232]	; (80024ec <menu+0x1354>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	3b01      	subs	r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b38      	ldr	r3, [pc, #224]	; (80024ec <menu+0x1354>)
 800240c:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800240e:	4b37      	ldr	r3, [pc, #220]	; (80024ec <menu+0x1354>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <menu+0x1284>
		   		kapiAcTipi = 1;
 8002416:	4b35      	ldr	r3, [pc, #212]	; (80024ec <menu+0x1354>)
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800241c:	f002 fb56 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002420:	2108      	movs	r1, #8
 8002422:	4829      	ldr	r0, [pc, #164]	; (80024c8 <menu+0x1330>)
 8002424:	f007 f8f2 	bl	800960c <HAL_GPIO_ReadPin>
 8002428:	4603      	mov	r3, r0
 800242a:	2b01      	cmp	r3, #1
 800242c:	d10e      	bne.n	800244c <menu+0x12b4>
 800242e:	4b27      	ldr	r3, [pc, #156]	; (80024cc <menu+0x1334>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	f083 0301 	eor.w	r3, r3, #1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <menu+0x1354>)
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <menu+0x133c>)
 8002442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002446:	4b25      	ldr	r3, [pc, #148]	; (80024dc <menu+0x1344>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800244c:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <menu+0x1348>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b09      	cmp	r3, #9
 8002452:	f040 80b9 	bne.w	80025c8 <menu+0x1430>
		if(dilSecim == 0){
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <menu+0x1328>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d105      	bne.n	800246a <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800245e:	4a28      	ldr	r2, [pc, #160]	; (8002500 <menu+0x1368>)
 8002460:	2101      	movs	r1, #1
 8002462:	2001      	movs	r0, #1
 8002464:	f005 fdac 	bl	8007fc0 <lcd_print>
 8002468:	e008      	b.n	800247c <menu+0x12e4>
		} else if(dilSecim == 1) {
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <menu+0x1328>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d104      	bne.n	800247c <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002472:	4a24      	ldr	r2, [pc, #144]	; (8002504 <menu+0x136c>)
 8002474:	2101      	movs	r1, #1
 8002476:	2001      	movs	r0, #1
 8002478:	f005 fda2 	bl	8007fc0 <lcd_print>
		}

		if(kapi1Tip == 0) {
 800247c:	4b22      	ldr	r3, [pc, #136]	; (8002508 <menu+0x1370>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002484:	4a21      	ldr	r2, [pc, #132]	; (800250c <menu+0x1374>)
 8002486:	2101      	movs	r1, #1
 8002488:	2002      	movs	r0, #2
 800248a:	f005 fd99 	bl	8007fc0 <lcd_print>
 800248e:	e04c      	b.n	800252a <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <menu+0x1370>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d13f      	bne.n	8002518 <menu+0x1380>
			if(dilSecim == 0){
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <menu+0x1328>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80024a0:	4a1b      	ldr	r2, [pc, #108]	; (8002510 <menu+0x1378>)
 80024a2:	2101      	movs	r1, #1
 80024a4:	2002      	movs	r0, #2
 80024a6:	f005 fd8b 	bl	8007fc0 <lcd_print>
 80024aa:	e03e      	b.n	800252a <menu+0x1392>
			} else if(dilSecim == 1) {
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <menu+0x1328>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d13a      	bne.n	800252a <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80024b4:	4a17      	ldr	r2, [pc, #92]	; (8002514 <menu+0x137c>)
 80024b6:	2101      	movs	r1, #1
 80024b8:	2002      	movs	r0, #2
 80024ba:	f005 fd81 	bl	8007fc0 <lcd_print>
 80024be:	e034      	b.n	800252a <menu+0x1392>
 80024c0:	20000241 	.word	0x20000241
 80024c4:	0800d724 	.word	0x0800d724
 80024c8:	40010800 	.word	0x40010800
 80024cc:	2000024f 	.word	0x2000024f
 80024d0:	20000228 	.word	0x20000228
 80024d4:	20000118 	.word	0x20000118
 80024d8:	20000226 	.word	0x20000226
 80024dc:	2000024c 	.word	0x2000024c
 80024e0:	20000220 	.word	0x20000220
 80024e4:	0800d738 	.word	0x0800d738
 80024e8:	0800d74c 	.word	0x0800d74c
 80024ec:	2000022c 	.word	0x2000022c
 80024f0:	0800d760 	.word	0x0800d760
 80024f4:	0800d770 	.word	0x0800d770
 80024f8:	0800d780 	.word	0x0800d780
 80024fc:	0800d794 	.word	0x0800d794
 8002500:	0800d7a8 	.word	0x0800d7a8
 8002504:	0800d7bc 	.word	0x0800d7bc
 8002508:	20000229 	.word	0x20000229
 800250c:	0800d7d0 	.word	0x0800d7d0
 8002510:	0800d7e4 	.word	0x0800d7e4
 8002514:	0800d7f4 	.word	0x0800d7f4
			}
		} else if(kapi1Tip == 2) {
 8002518:	4b8a      	ldr	r3, [pc, #552]	; (8002744 <menu+0x15ac>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d104      	bne.n	800252a <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002520:	4a89      	ldr	r2, [pc, #548]	; (8002748 <menu+0x15b0>)
 8002522:	2101      	movs	r1, #1
 8002524:	2002      	movs	r0, #2
 8002526:	f005 fd4b 	bl	8007fc0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800252a:	2102      	movs	r1, #2
 800252c:	4887      	ldr	r0, [pc, #540]	; (800274c <menu+0x15b4>)
 800252e:	f007 f86d 	bl	800960c <HAL_GPIO_ReadPin>
 8002532:	4603      	mov	r3, r0
 8002534:	2b01      	cmp	r3, #1
 8002536:	d115      	bne.n	8002564 <menu+0x13cc>
 8002538:	4b85      	ldr	r3, [pc, #532]	; (8002750 <menu+0x15b8>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00e      	beq.n	8002564 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002546:	4b7f      	ldr	r3, [pc, #508]	; (8002744 <menu+0x15ac>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	3301      	adds	r3, #1
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b7d      	ldr	r3, [pc, #500]	; (8002744 <menu+0x15ac>)
 8002550:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002552:	4b7c      	ldr	r3, [pc, #496]	; (8002744 <menu+0x15ac>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d902      	bls.n	8002560 <menu+0x13c8>
				kapi1Tip = 0;
 800255a:	4b7a      	ldr	r3, [pc, #488]	; (8002744 <menu+0x15ac>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002560:	f002 fab4 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002564:	2104      	movs	r1, #4
 8002566:	4879      	ldr	r0, [pc, #484]	; (800274c <menu+0x15b4>)
 8002568:	f007 f850 	bl	800960c <HAL_GPIO_ReadPin>
 800256c:	4603      	mov	r3, r0
 800256e:	2b01      	cmp	r3, #1
 8002570:	d115      	bne.n	800259e <menu+0x1406>
 8002572:	4b77      	ldr	r3, [pc, #476]	; (8002750 <menu+0x15b8>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f083 0301 	eor.w	r3, r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002580:	4b70      	ldr	r3, [pc, #448]	; (8002744 <menu+0x15ac>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	3b01      	subs	r3, #1
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b6e      	ldr	r3, [pc, #440]	; (8002744 <menu+0x15ac>)
 800258a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 800258c:	4b6d      	ldr	r3, [pc, #436]	; (8002744 <menu+0x15ac>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d902      	bls.n	800259a <menu+0x1402>
		   		kapi1Tip = 2;
 8002594:	4b6b      	ldr	r3, [pc, #428]	; (8002744 <menu+0x15ac>)
 8002596:	2202      	movs	r2, #2
 8002598:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800259a:	f002 fa97 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800259e:	2108      	movs	r1, #8
 80025a0:	486a      	ldr	r0, [pc, #424]	; (800274c <menu+0x15b4>)
 80025a2:	f007 f833 	bl	800960c <HAL_GPIO_ReadPin>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d10d      	bne.n	80025c8 <menu+0x1430>
 80025ac:	4b68      	ldr	r3, [pc, #416]	; (8002750 <menu+0x15b8>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f083 0301 	eor.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80025ba:	4b62      	ldr	r3, [pc, #392]	; (8002744 <menu+0x15ac>)
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	4b65      	ldr	r3, [pc, #404]	; (8002754 <menu+0x15bc>)
 80025c0:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80025c2:	4b65      	ldr	r3, [pc, #404]	; (8002758 <menu+0x15c0>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80025c8:	4b64      	ldr	r3, [pc, #400]	; (800275c <menu+0x15c4>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b0a      	cmp	r3, #10
 80025ce:	d17f      	bne.n	80026d0 <menu+0x1538>
		if(dilSecim == 0) {
 80025d0:	4b63      	ldr	r3, [pc, #396]	; (8002760 <menu+0x15c8>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10a      	bne.n	80025ee <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80025d8:	4a62      	ldr	r2, [pc, #392]	; (8002764 <menu+0x15cc>)
 80025da:	2101      	movs	r1, #1
 80025dc:	2001      	movs	r0, #1
 80025de:	f005 fcef 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80025e2:	4a61      	ldr	r2, [pc, #388]	; (8002768 <menu+0x15d0>)
 80025e4:	2101      	movs	r1, #1
 80025e6:	2002      	movs	r0, #2
 80025e8:	f005 fcea 	bl	8007fc0 <lcd_print>
 80025ec:	e00d      	b.n	800260a <menu+0x1472>
		} else if(dilSecim == 1) {
 80025ee:	4b5c      	ldr	r3, [pc, #368]	; (8002760 <menu+0x15c8>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d109      	bne.n	800260a <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80025f6:	4a5d      	ldr	r2, [pc, #372]	; (800276c <menu+0x15d4>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	2001      	movs	r0, #1
 80025fc:	f005 fce0 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002600:	4a5b      	ldr	r2, [pc, #364]	; (8002770 <menu+0x15d8>)
 8002602:	2101      	movs	r1, #1
 8002604:	2002      	movs	r0, #2
 8002606:	f005 fcdb 	bl	8007fc0 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800260a:	4b5a      	ldr	r3, [pc, #360]	; (8002774 <menu+0x15dc>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	220a      	movs	r2, #10
 8002610:	4959      	ldr	r1, [pc, #356]	; (8002778 <menu+0x15e0>)
 8002612:	4618      	mov	r0, r3
 8002614:	f00a f826 	bl	800c664 <itoa>
		lcd_print(2,16,snum);
 8002618:	4a57      	ldr	r2, [pc, #348]	; (8002778 <menu+0x15e0>)
 800261a:	2110      	movs	r1, #16
 800261c:	2002      	movs	r0, #2
 800261e:	f005 fccf 	bl	8007fc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002622:	2102      	movs	r1, #2
 8002624:	4849      	ldr	r0, [pc, #292]	; (800274c <menu+0x15b4>)
 8002626:	f006 fff1 	bl	800960c <HAL_GPIO_ReadPin>
 800262a:	4603      	mov	r3, r0
 800262c:	2b01      	cmp	r3, #1
 800262e:	d119      	bne.n	8002664 <menu+0x14cc>
 8002630:	4b47      	ldr	r3, [pc, #284]	; (8002750 <menu+0x15b8>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	f083 0301 	eor.w	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d012      	beq.n	8002664 <menu+0x14cc>
 800263e:	4b41      	ldr	r3, [pc, #260]	; (8002744 <menu+0x15ac>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10e      	bne.n	8002664 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002646:	4b4b      	ldr	r3, [pc, #300]	; (8002774 <menu+0x15dc>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b49      	ldr	r3, [pc, #292]	; (8002774 <menu+0x15dc>)
 8002650:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002652:	4b48      	ldr	r3, [pc, #288]	; (8002774 <menu+0x15dc>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b05      	cmp	r3, #5
 8002658:	d902      	bls.n	8002660 <menu+0x14c8>
				kapi1AcSure = 0;
 800265a:	4b46      	ldr	r3, [pc, #280]	; (8002774 <menu+0x15dc>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002660:	f002 fa34 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002664:	2104      	movs	r1, #4
 8002666:	4839      	ldr	r0, [pc, #228]	; (800274c <menu+0x15b4>)
 8002668:	f006 ffd0 	bl	800960c <HAL_GPIO_ReadPin>
 800266c:	4603      	mov	r3, r0
 800266e:	2b01      	cmp	r3, #1
 8002670:	d119      	bne.n	80026a6 <menu+0x150e>
 8002672:	4b37      	ldr	r3, [pc, #220]	; (8002750 <menu+0x15b8>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d012      	beq.n	80026a6 <menu+0x150e>
 8002680:	4b30      	ldr	r3, [pc, #192]	; (8002744 <menu+0x15ac>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10e      	bne.n	80026a6 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002688:	4b3a      	ldr	r3, [pc, #232]	; (8002774 <menu+0x15dc>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	3b01      	subs	r3, #1
 800268e:	b2da      	uxtb	r2, r3
 8002690:	4b38      	ldr	r3, [pc, #224]	; (8002774 <menu+0x15dc>)
 8002692:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002694:	4b37      	ldr	r3, [pc, #220]	; (8002774 <menu+0x15dc>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b06      	cmp	r3, #6
 800269a:	d902      	bls.n	80026a2 <menu+0x150a>
		   		kapi1AcSure = 5;
 800269c:	4b35      	ldr	r3, [pc, #212]	; (8002774 <menu+0x15dc>)
 800269e:	2205      	movs	r2, #5
 80026a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026a2:	f002 fa13 	bl	8004acc <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026a6:	2108      	movs	r1, #8
 80026a8:	4828      	ldr	r0, [pc, #160]	; (800274c <menu+0x15b4>)
 80026aa:	f006 ffaf 	bl	800960c <HAL_GPIO_ReadPin>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d10d      	bne.n	80026d0 <menu+0x1538>
 80026b4:	4b26      	ldr	r3, [pc, #152]	; (8002750 <menu+0x15b8>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	f083 0301 	eor.w	r3, r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d006      	beq.n	80026d0 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80026c2:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <menu+0x15dc>)
 80026c4:	781a      	ldrb	r2, [r3, #0]
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <menu+0x15bc>)
 80026c8:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <menu+0x15c0>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80026d0:	4b22      	ldr	r3, [pc, #136]	; (800275c <menu+0x15c4>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b0b      	cmp	r3, #11
 80026d6:	f040 80b5 	bne.w	8002844 <menu+0x16ac>
		if(dilSecim == 0) {
 80026da:	4b21      	ldr	r3, [pc, #132]	; (8002760 <menu+0x15c8>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80026e2:	4a26      	ldr	r2, [pc, #152]	; (800277c <menu+0x15e4>)
 80026e4:	2101      	movs	r1, #1
 80026e6:	2001      	movs	r0, #1
 80026e8:	f005 fc6a 	bl	8007fc0 <lcd_print>
 80026ec:	e008      	b.n	8002700 <menu+0x1568>
		} else if(dilSecim == 1) {
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <menu+0x15c8>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d104      	bne.n	8002700 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80026f6:	4a22      	ldr	r2, [pc, #136]	; (8002780 <menu+0x15e8>)
 80026f8:	2101      	movs	r1, #1
 80026fa:	2001      	movs	r0, #1
 80026fc:	f005 fc60 	bl	8007fc0 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <menu+0x15ec>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002708:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <menu+0x15f0>)
 800270a:	2101      	movs	r1, #1
 800270c:	2002      	movs	r0, #2
 800270e:	f005 fc57 	bl	8007fc0 <lcd_print>
 8002712:	e048      	b.n	80027a6 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002714:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <menu+0x15ec>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d13b      	bne.n	8002794 <menu+0x15fc>
			if(dilSecim == 0) {
 800271c:	4b10      	ldr	r3, [pc, #64]	; (8002760 <menu+0x15c8>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <menu+0x15f4>)
 8002726:	2101      	movs	r1, #1
 8002728:	2002      	movs	r0, #2
 800272a:	f005 fc49 	bl	8007fc0 <lcd_print>
 800272e:	e03a      	b.n	80027a6 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <menu+0x15c8>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d136      	bne.n	80027a6 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002738:	4a15      	ldr	r2, [pc, #84]	; (8002790 <menu+0x15f8>)
 800273a:	2101      	movs	r1, #1
 800273c:	2002      	movs	r0, #2
 800273e:	f005 fc3f 	bl	8007fc0 <lcd_print>
 8002742:	e030      	b.n	80027a6 <menu+0x160e>
 8002744:	20000229 	.word	0x20000229
 8002748:	0800d808 	.word	0x0800d808
 800274c:	40010800 	.word	0x40010800
 8002750:	2000024f 	.word	0x2000024f
 8002754:	20000118 	.word	0x20000118
 8002758:	2000024c 	.word	0x2000024c
 800275c:	20000220 	.word	0x20000220
 8002760:	20000241 	.word	0x20000241
 8002764:	0800d818 	.word	0x0800d818
 8002768:	0800d82c 	.word	0x0800d82c
 800276c:	0800d83c 	.word	0x0800d83c
 8002770:	0800d850 	.word	0x0800d850
 8002774:	20000239 	.word	0x20000239
 8002778:	20000188 	.word	0x20000188
 800277c:	0800d860 	.word	0x0800d860
 8002780:	0800d874 	.word	0x0800d874
 8002784:	2000022a 	.word	0x2000022a
 8002788:	0800d7d0 	.word	0x0800d7d0
 800278c:	0800d7e4 	.word	0x0800d7e4
 8002790:	0800d7f4 	.word	0x0800d7f4
			}
		} else if(kapi2Tip == 2) {
 8002794:	4b8a      	ldr	r3, [pc, #552]	; (80029c0 <menu+0x1828>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d104      	bne.n	80027a6 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 800279c:	4a89      	ldr	r2, [pc, #548]	; (80029c4 <menu+0x182c>)
 800279e:	2101      	movs	r1, #1
 80027a0:	2002      	movs	r0, #2
 80027a2:	f005 fc0d 	bl	8007fc0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027a6:	2102      	movs	r1, #2
 80027a8:	4887      	ldr	r0, [pc, #540]	; (80029c8 <menu+0x1830>)
 80027aa:	f006 ff2f 	bl	800960c <HAL_GPIO_ReadPin>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d115      	bne.n	80027e0 <menu+0x1648>
 80027b4:	4b85      	ldr	r3, [pc, #532]	; (80029cc <menu+0x1834>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	f083 0301 	eor.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00e      	beq.n	80027e0 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80027c2:	4b7f      	ldr	r3, [pc, #508]	; (80029c0 <menu+0x1828>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4b7d      	ldr	r3, [pc, #500]	; (80029c0 <menu+0x1828>)
 80027cc:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80027ce:	4b7c      	ldr	r3, [pc, #496]	; (80029c0 <menu+0x1828>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d902      	bls.n	80027dc <menu+0x1644>
				kapi2Tip = 0;
 80027d6:	4b7a      	ldr	r3, [pc, #488]	; (80029c0 <menu+0x1828>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027dc:	f002 f976 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027e0:	2104      	movs	r1, #4
 80027e2:	4879      	ldr	r0, [pc, #484]	; (80029c8 <menu+0x1830>)
 80027e4:	f006 ff12 	bl	800960c <HAL_GPIO_ReadPin>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d115      	bne.n	800281a <menu+0x1682>
 80027ee:	4b77      	ldr	r3, [pc, #476]	; (80029cc <menu+0x1834>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	f083 0301 	eor.w	r3, r3, #1
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00e      	beq.n	800281a <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 80027fc:	4b70      	ldr	r3, [pc, #448]	; (80029c0 <menu+0x1828>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	3b01      	subs	r3, #1
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b6e      	ldr	r3, [pc, #440]	; (80029c0 <menu+0x1828>)
 8002806:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002808:	4b6d      	ldr	r3, [pc, #436]	; (80029c0 <menu+0x1828>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d902      	bls.n	8002816 <menu+0x167e>
		   		kapi2Tip = 2;
 8002810:	4b6b      	ldr	r3, [pc, #428]	; (80029c0 <menu+0x1828>)
 8002812:	2202      	movs	r2, #2
 8002814:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002816:	f002 f959 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800281a:	2108      	movs	r1, #8
 800281c:	486a      	ldr	r0, [pc, #424]	; (80029c8 <menu+0x1830>)
 800281e:	f006 fef5 	bl	800960c <HAL_GPIO_ReadPin>
 8002822:	4603      	mov	r3, r0
 8002824:	2b01      	cmp	r3, #1
 8002826:	d10d      	bne.n	8002844 <menu+0x16ac>
 8002828:	4b68      	ldr	r3, [pc, #416]	; (80029cc <menu+0x1834>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	f083 0301 	eor.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d006      	beq.n	8002844 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002836:	4b62      	ldr	r3, [pc, #392]	; (80029c0 <menu+0x1828>)
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	4b65      	ldr	r3, [pc, #404]	; (80029d0 <menu+0x1838>)
 800283c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800283e:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <menu+0x183c>)
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002844:	4b64      	ldr	r3, [pc, #400]	; (80029d8 <menu+0x1840>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b0c      	cmp	r3, #12
 800284a:	d17f      	bne.n	800294c <menu+0x17b4>
		if(dilSecim == 0) {
 800284c:	4b63      	ldr	r3, [pc, #396]	; (80029dc <menu+0x1844>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10a      	bne.n	800286a <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002854:	4a62      	ldr	r2, [pc, #392]	; (80029e0 <menu+0x1848>)
 8002856:	2101      	movs	r1, #1
 8002858:	2001      	movs	r0, #1
 800285a:	f005 fbb1 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800285e:	4a61      	ldr	r2, [pc, #388]	; (80029e4 <menu+0x184c>)
 8002860:	2101      	movs	r1, #1
 8002862:	2002      	movs	r0, #2
 8002864:	f005 fbac 	bl	8007fc0 <lcd_print>
 8002868:	e00d      	b.n	8002886 <menu+0x16ee>
		} else if(dilSecim == 1) {
 800286a:	4b5c      	ldr	r3, [pc, #368]	; (80029dc <menu+0x1844>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d109      	bne.n	8002886 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002872:	4a5d      	ldr	r2, [pc, #372]	; (80029e8 <menu+0x1850>)
 8002874:	2101      	movs	r1, #1
 8002876:	2001      	movs	r0, #1
 8002878:	f005 fba2 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800287c:	4a5b      	ldr	r2, [pc, #364]	; (80029ec <menu+0x1854>)
 800287e:	2101      	movs	r1, #1
 8002880:	2002      	movs	r0, #2
 8002882:	f005 fb9d 	bl	8007fc0 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002886:	4b5a      	ldr	r3, [pc, #360]	; (80029f0 <menu+0x1858>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	220a      	movs	r2, #10
 800288c:	4959      	ldr	r1, [pc, #356]	; (80029f4 <menu+0x185c>)
 800288e:	4618      	mov	r0, r3
 8002890:	f009 fee8 	bl	800c664 <itoa>
		lcd_print(2,16,snum);
 8002894:	4a57      	ldr	r2, [pc, #348]	; (80029f4 <menu+0x185c>)
 8002896:	2110      	movs	r1, #16
 8002898:	2002      	movs	r0, #2
 800289a:	f005 fb91 	bl	8007fc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800289e:	2102      	movs	r1, #2
 80028a0:	4849      	ldr	r0, [pc, #292]	; (80029c8 <menu+0x1830>)
 80028a2:	f006 feb3 	bl	800960c <HAL_GPIO_ReadPin>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d119      	bne.n	80028e0 <menu+0x1748>
 80028ac:	4b47      	ldr	r3, [pc, #284]	; (80029cc <menu+0x1834>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	f083 0301 	eor.w	r3, r3, #1
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d012      	beq.n	80028e0 <menu+0x1748>
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <menu+0x1828>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10e      	bne.n	80028e0 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 80028c2:	4b4b      	ldr	r3, [pc, #300]	; (80029f0 <menu+0x1858>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <menu+0x1858>)
 80028cc:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80028ce:	4b48      	ldr	r3, [pc, #288]	; (80029f0 <menu+0x1858>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	d902      	bls.n	80028dc <menu+0x1744>
				kapi2AcSure = 0;
 80028d6:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <menu+0x1858>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028dc:	f002 f8f6 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80028e0:	2104      	movs	r1, #4
 80028e2:	4839      	ldr	r0, [pc, #228]	; (80029c8 <menu+0x1830>)
 80028e4:	f006 fe92 	bl	800960c <HAL_GPIO_ReadPin>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d119      	bne.n	8002922 <menu+0x178a>
 80028ee:	4b37      	ldr	r3, [pc, #220]	; (80029cc <menu+0x1834>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	f083 0301 	eor.w	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d012      	beq.n	8002922 <menu+0x178a>
 80028fc:	4b30      	ldr	r3, [pc, #192]	; (80029c0 <menu+0x1828>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10e      	bne.n	8002922 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002904:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <menu+0x1858>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	3b01      	subs	r3, #1
 800290a:	b2da      	uxtb	r2, r3
 800290c:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <menu+0x1858>)
 800290e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002910:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <menu+0x1858>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b06      	cmp	r3, #6
 8002916:	d902      	bls.n	800291e <menu+0x1786>
		   		kapi2AcSure = 5;
 8002918:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <menu+0x1858>)
 800291a:	2205      	movs	r2, #5
 800291c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800291e:	f002 f8d5 	bl	8004acc <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002922:	2108      	movs	r1, #8
 8002924:	4828      	ldr	r0, [pc, #160]	; (80029c8 <menu+0x1830>)
 8002926:	f006 fe71 	bl	800960c <HAL_GPIO_ReadPin>
 800292a:	4603      	mov	r3, r0
 800292c:	2b01      	cmp	r3, #1
 800292e:	d10d      	bne.n	800294c <menu+0x17b4>
 8002930:	4b26      	ldr	r3, [pc, #152]	; (80029cc <menu+0x1834>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	f083 0301 	eor.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d006      	beq.n	800294c <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 800293e:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <menu+0x1858>)
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <menu+0x1838>)
 8002944:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <menu+0x183c>)
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 800294c:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <menu+0x1840>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b0d      	cmp	r3, #13
 8002952:	f040 80b5 	bne.w	8002ac0 <menu+0x1928>
		if(dilSecim == 0) {
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <menu+0x1844>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 800295e:	4a26      	ldr	r2, [pc, #152]	; (80029f8 <menu+0x1860>)
 8002960:	2101      	movs	r1, #1
 8002962:	2001      	movs	r0, #1
 8002964:	f005 fb2c 	bl	8007fc0 <lcd_print>
 8002968:	e008      	b.n	800297c <menu+0x17e4>
		} else if(dilSecim == 1){
 800296a:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <menu+0x1844>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d104      	bne.n	800297c <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002972:	4a22      	ldr	r2, [pc, #136]	; (80029fc <menu+0x1864>)
 8002974:	2101      	movs	r1, #1
 8002976:	2001      	movs	r0, #1
 8002978:	f005 fb22 	bl	8007fc0 <lcd_print>
		}

		if(kapitablaTip == 0) {
 800297c:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <menu+0x1868>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002984:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <menu+0x186c>)
 8002986:	2101      	movs	r1, #1
 8002988:	2002      	movs	r0, #2
 800298a:	f005 fb19 	bl	8007fc0 <lcd_print>
 800298e:	e048      	b.n	8002a22 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <menu+0x1868>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d13b      	bne.n	8002a10 <menu+0x1878>
			if(dilSecim == 0) {
 8002998:	4b10      	ldr	r3, [pc, #64]	; (80029dc <menu+0x1844>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 80029a0:	4a19      	ldr	r2, [pc, #100]	; (8002a08 <menu+0x1870>)
 80029a2:	2101      	movs	r1, #1
 80029a4:	2002      	movs	r0, #2
 80029a6:	f005 fb0b 	bl	8007fc0 <lcd_print>
 80029aa:	e03a      	b.n	8002a22 <menu+0x188a>
			} else if(dilSecim == 1) {
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <menu+0x1844>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d136      	bne.n	8002a22 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 80029b4:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <menu+0x1874>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	2002      	movs	r0, #2
 80029ba:	f005 fb01 	bl	8007fc0 <lcd_print>
 80029be:	e030      	b.n	8002a22 <menu+0x188a>
 80029c0:	2000022a 	.word	0x2000022a
 80029c4:	0800d808 	.word	0x0800d808
 80029c8:	40010800 	.word	0x40010800
 80029cc:	2000024f 	.word	0x2000024f
 80029d0:	20000118 	.word	0x20000118
 80029d4:	2000024c 	.word	0x2000024c
 80029d8:	20000220 	.word	0x20000220
 80029dc:	20000241 	.word	0x20000241
 80029e0:	0800d888 	.word	0x0800d888
 80029e4:	0800d82c 	.word	0x0800d82c
 80029e8:	0800d89c 	.word	0x0800d89c
 80029ec:	0800d850 	.word	0x0800d850
 80029f0:	2000023a 	.word	0x2000023a
 80029f4:	20000188 	.word	0x20000188
 80029f8:	0800d8b0 	.word	0x0800d8b0
 80029fc:	0800d8c4 	.word	0x0800d8c4
 8002a00:	2000022b 	.word	0x2000022b
 8002a04:	0800d7d0 	.word	0x0800d7d0
 8002a08:	0800d7e4 	.word	0x0800d7e4
 8002a0c:	0800d7f4 	.word	0x0800d7f4
			}
		} else if(kapitablaTip == 2) {
 8002a10:	4b5b      	ldr	r3, [pc, #364]	; (8002b80 <menu+0x19e8>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d104      	bne.n	8002a22 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002a18:	4a5a      	ldr	r2, [pc, #360]	; (8002b84 <menu+0x19ec>)
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	2002      	movs	r0, #2
 8002a1e:	f005 facf 	bl	8007fc0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a22:	2102      	movs	r1, #2
 8002a24:	4858      	ldr	r0, [pc, #352]	; (8002b88 <menu+0x19f0>)
 8002a26:	f006 fdf1 	bl	800960c <HAL_GPIO_ReadPin>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d115      	bne.n	8002a5c <menu+0x18c4>
 8002a30:	4b56      	ldr	r3, [pc, #344]	; (8002b8c <menu+0x19f4>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	f083 0301 	eor.w	r3, r3, #1
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00e      	beq.n	8002a5c <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002a3e:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <menu+0x19e8>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	3301      	adds	r3, #1
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4b4e      	ldr	r3, [pc, #312]	; (8002b80 <menu+0x19e8>)
 8002a48:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002a4a:	4b4d      	ldr	r3, [pc, #308]	; (8002b80 <menu+0x19e8>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d902      	bls.n	8002a58 <menu+0x18c0>
				kapitablaTip = 0;
 8002a52:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <menu+0x19e8>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a58:	f002 f838 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a5c:	2104      	movs	r1, #4
 8002a5e:	484a      	ldr	r0, [pc, #296]	; (8002b88 <menu+0x19f0>)
 8002a60:	f006 fdd4 	bl	800960c <HAL_GPIO_ReadPin>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d115      	bne.n	8002a96 <menu+0x18fe>
 8002a6a:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <menu+0x19f4>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	f083 0301 	eor.w	r3, r3, #1
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00e      	beq.n	8002a96 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002a78:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <menu+0x19e8>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	4b3f      	ldr	r3, [pc, #252]	; (8002b80 <menu+0x19e8>)
 8002a82:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002a84:	4b3e      	ldr	r3, [pc, #248]	; (8002b80 <menu+0x19e8>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d902      	bls.n	8002a92 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002a8c:	4b3c      	ldr	r3, [pc, #240]	; (8002b80 <menu+0x19e8>)
 8002a8e:	2202      	movs	r2, #2
 8002a90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a92:	f002 f81b 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a96:	2108      	movs	r1, #8
 8002a98:	483b      	ldr	r0, [pc, #236]	; (8002b88 <menu+0x19f0>)
 8002a9a:	f006 fdb7 	bl	800960c <HAL_GPIO_ReadPin>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d10d      	bne.n	8002ac0 <menu+0x1928>
 8002aa4:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <menu+0x19f4>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	f083 0301 	eor.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d006      	beq.n	8002ac0 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002ab2:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <menu+0x19e8>)
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	4b36      	ldr	r3, [pc, #216]	; (8002b90 <menu+0x19f8>)
 8002ab8:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002aba:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <menu+0x19fc>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002ac0:	4b35      	ldr	r3, [pc, #212]	; (8002b98 <menu+0x1a00>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b0e      	cmp	r3, #14
 8002ac6:	f040 80f2 	bne.w	8002cae <menu+0x1b16>
		if(dilSecim == 0) {
 8002aca:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <menu+0x1a04>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002ad2:	4a33      	ldr	r2, [pc, #204]	; (8002ba0 <menu+0x1a08>)
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f005 fa72 	bl	8007fc0 <lcd_print>
 8002adc:	e008      	b.n	8002af0 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002ade:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <menu+0x1a04>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d104      	bne.n	8002af0 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002ae6:	4a2f      	ldr	r2, [pc, #188]	; (8002ba4 <menu+0x1a0c>)
 8002ae8:	2101      	movs	r1, #1
 8002aea:	2001      	movs	r0, #1
 8002aec:	f005 fa68 	bl	8007fc0 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002af0:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <menu+0x1a10>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d113      	bne.n	8002b20 <menu+0x1988>
			if(dilSecim == 0){
 8002af8:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <menu+0x1a04>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002b00:	4a2a      	ldr	r2, [pc, #168]	; (8002bac <menu+0x1a14>)
 8002b02:	2101      	movs	r1, #1
 8002b04:	2002      	movs	r0, #2
 8002b06:	f005 fa5b 	bl	8007fc0 <lcd_print>
 8002b0a:	e071      	b.n	8002bf0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <menu+0x1a04>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d16d      	bne.n	8002bf0 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002b14:	4a26      	ldr	r2, [pc, #152]	; (8002bb0 <menu+0x1a18>)
 8002b16:	2101      	movs	r1, #1
 8002b18:	2002      	movs	r0, #2
 8002b1a:	f005 fa51 	bl	8007fc0 <lcd_print>
 8002b1e:	e067      	b.n	8002bf0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <menu+0x1a10>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d112      	bne.n	8002b4e <menu+0x19b6>
			if(dilSecim == 0){
 8002b28:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <menu+0x1a04>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002b30:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <menu+0x1a1c>)
 8002b32:	2101      	movs	r1, #1
 8002b34:	2002      	movs	r0, #2
 8002b36:	f005 fa43 	bl	8007fc0 <lcd_print>
			}
			if(dilSecim == 1){
 8002b3a:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <menu+0x1a04>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d156      	bne.n	8002bf0 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002b42:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <menu+0x1a20>)
 8002b44:	2101      	movs	r1, #1
 8002b46:	2002      	movs	r0, #2
 8002b48:	f005 fa3a 	bl	8007fc0 <lcd_print>
 8002b4c:	e050      	b.n	8002bf0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <menu+0x1a10>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d136      	bne.n	8002bc4 <menu+0x1a2c>
			if(dilSecim == 0){
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <menu+0x1a04>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002b5e:	4a17      	ldr	r2, [pc, #92]	; (8002bbc <menu+0x1a24>)
 8002b60:	2101      	movs	r1, #1
 8002b62:	2002      	movs	r0, #2
 8002b64:	f005 fa2c 	bl	8007fc0 <lcd_print>
 8002b68:	e042      	b.n	8002bf0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <menu+0x1a04>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d13e      	bne.n	8002bf0 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002b72:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <menu+0x1a28>)
 8002b74:	2101      	movs	r1, #1
 8002b76:	2002      	movs	r0, #2
 8002b78:	f005 fa22 	bl	8007fc0 <lcd_print>
 8002b7c:	e038      	b.n	8002bf0 <menu+0x1a58>
 8002b7e:	bf00      	nop
 8002b80:	2000022b 	.word	0x2000022b
 8002b84:	0800d808 	.word	0x0800d808
 8002b88:	40010800 	.word	0x40010800
 8002b8c:	2000024f 	.word	0x2000024f
 8002b90:	20000118 	.word	0x20000118
 8002b94:	2000024c 	.word	0x2000024c
 8002b98:	20000220 	.word	0x20000220
 8002b9c:	20000241 	.word	0x20000241
 8002ba0:	0800d8d8 	.word	0x0800d8d8
 8002ba4:	0800d8ec 	.word	0x0800d8ec
 8002ba8:	2000022d 	.word	0x2000022d
 8002bac:	0800d900 	.word	0x0800d900
 8002bb0:	0800d910 	.word	0x0800d910
 8002bb4:	0800d920 	.word	0x0800d920
 8002bb8:	0800d930 	.word	0x0800d930
 8002bbc:	0800d940 	.word	0x0800d940
 8002bc0:	0800d954 	.word	0x0800d954
			}
		} else if(kapiTablaAcKonum == 3) {
 8002bc4:	4b9b      	ldr	r3, [pc, #620]	; (8002e34 <menu+0x1c9c>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d111      	bne.n	8002bf0 <menu+0x1a58>
			if(dilSecim == 0) {
 8002bcc:	4b9a      	ldr	r3, [pc, #616]	; (8002e38 <menu+0x1ca0>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d104      	bne.n	8002bde <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002bd4:	4a99      	ldr	r2, [pc, #612]	; (8002e3c <menu+0x1ca4>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	2002      	movs	r0, #2
 8002bda:	f005 f9f1 	bl	8007fc0 <lcd_print>
			}
			if(dilSecim == 1) {
 8002bde:	4b96      	ldr	r3, [pc, #600]	; (8002e38 <menu+0x1ca0>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d104      	bne.n	8002bf0 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002be6:	4a96      	ldr	r2, [pc, #600]	; (8002e40 <menu+0x1ca8>)
 8002be8:	2101      	movs	r1, #1
 8002bea:	2002      	movs	r0, #2
 8002bec:	f005 f9e8 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	4894      	ldr	r0, [pc, #592]	; (8002e44 <menu+0x1cac>)
 8002bf4:	f006 fd0a 	bl	800960c <HAL_GPIO_ReadPin>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d115      	bne.n	8002c2a <menu+0x1a92>
 8002bfe:	4b92      	ldr	r3, [pc, #584]	; (8002e48 <menu+0x1cb0>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	f083 0301 	eor.w	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00e      	beq.n	8002c2a <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002c0c:	4b89      	ldr	r3, [pc, #548]	; (8002e34 <menu+0x1c9c>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	4b87      	ldr	r3, [pc, #540]	; (8002e34 <menu+0x1c9c>)
 8002c16:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002c18:	4b86      	ldr	r3, [pc, #536]	; (8002e34 <menu+0x1c9c>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d902      	bls.n	8002c26 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002c20:	4b84      	ldr	r3, [pc, #528]	; (8002e34 <menu+0x1c9c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c26:	f001 ff51 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	4885      	ldr	r0, [pc, #532]	; (8002e44 <menu+0x1cac>)
 8002c2e:	f006 fced 	bl	800960c <HAL_GPIO_ReadPin>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d115      	bne.n	8002c64 <menu+0x1acc>
 8002c38:	4b83      	ldr	r3, [pc, #524]	; (8002e48 <menu+0x1cb0>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	f083 0301 	eor.w	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00e      	beq.n	8002c64 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002c46:	4b7b      	ldr	r3, [pc, #492]	; (8002e34 <menu+0x1c9c>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4b79      	ldr	r3, [pc, #484]	; (8002e34 <menu+0x1c9c>)
 8002c50:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002c52:	4b78      	ldr	r3, [pc, #480]	; (8002e34 <menu+0x1c9c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d902      	bls.n	8002c60 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002c5a:	4b76      	ldr	r3, [pc, #472]	; (8002e34 <menu+0x1c9c>)
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c60:	f001 ff34 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c64:	2108      	movs	r1, #8
 8002c66:	4877      	ldr	r0, [pc, #476]	; (8002e44 <menu+0x1cac>)
 8002c68:	f006 fcd0 	bl	800960c <HAL_GPIO_ReadPin>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d11d      	bne.n	8002cae <menu+0x1b16>
 8002c72:	4b75      	ldr	r3, [pc, #468]	; (8002e48 <menu+0x1cb0>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	f083 0301 	eor.w	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d016      	beq.n	8002cae <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002c80:	4b6c      	ldr	r3, [pc, #432]	; (8002e34 <menu+0x1c9c>)
 8002c82:	781a      	ldrb	r2, [r3, #0]
 8002c84:	4b71      	ldr	r3, [pc, #452]	; (8002e4c <menu+0x1cb4>)
 8002c86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002c8a:	4b6a      	ldr	r3, [pc, #424]	; (8002e34 <menu+0x1c9c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <menu+0x1b02>
 8002c92:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <menu+0x1c9c>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d106      	bne.n	8002ca8 <menu+0x1b10>
				altLimit = 1;
 8002c9a:	4b6d      	ldr	r3, [pc, #436]	; (8002e50 <menu+0x1cb8>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002ca0:	4b6b      	ldr	r3, [pc, #428]	; (8002e50 <menu+0x1cb8>)
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	4b69      	ldr	r3, [pc, #420]	; (8002e4c <menu+0x1cb4>)
 8002ca6:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002ca8:	4b6a      	ldr	r3, [pc, #424]	; (8002e54 <menu+0x1cbc>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002cae:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <menu+0x1cc0>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b0f      	cmp	r3, #15
 8002cb4:	d17f      	bne.n	8002db6 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002cb6:	4b60      	ldr	r3, [pc, #384]	; (8002e38 <menu+0x1ca0>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002cbe:	4a67      	ldr	r2, [pc, #412]	; (8002e5c <menu+0x1cc4>)
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f005 f97c 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002cc8:	4a65      	ldr	r2, [pc, #404]	; (8002e60 <menu+0x1cc8>)
 8002cca:	2101      	movs	r1, #1
 8002ccc:	2002      	movs	r0, #2
 8002cce:	f005 f977 	bl	8007fc0 <lcd_print>
 8002cd2:	e00d      	b.n	8002cf0 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002cd4:	4b58      	ldr	r3, [pc, #352]	; (8002e38 <menu+0x1ca0>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d109      	bne.n	8002cf0 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002cdc:	4a61      	ldr	r2, [pc, #388]	; (8002e64 <menu+0x1ccc>)
 8002cde:	2101      	movs	r1, #1
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f005 f96d 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002ce6:	4a60      	ldr	r2, [pc, #384]	; (8002e68 <menu+0x1cd0>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	2002      	movs	r0, #2
 8002cec:	f005 f968 	bl	8007fc0 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002cf0:	4b5e      	ldr	r3, [pc, #376]	; (8002e6c <menu+0x1cd4>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	220a      	movs	r2, #10
 8002cf6:	495e      	ldr	r1, [pc, #376]	; (8002e70 <menu+0x1cd8>)
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f009 fcb3 	bl	800c664 <itoa>
		lcd_print(2,16,snum);
 8002cfe:	4a5c      	ldr	r2, [pc, #368]	; (8002e70 <menu+0x1cd8>)
 8002d00:	2110      	movs	r1, #16
 8002d02:	2002      	movs	r0, #2
 8002d04:	f005 f95c 	bl	8007fc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d08:	2102      	movs	r1, #2
 8002d0a:	484e      	ldr	r0, [pc, #312]	; (8002e44 <menu+0x1cac>)
 8002d0c:	f006 fc7e 	bl	800960c <HAL_GPIO_ReadPin>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d119      	bne.n	8002d4a <menu+0x1bb2>
 8002d16:	4b4c      	ldr	r3, [pc, #304]	; (8002e48 <menu+0x1cb0>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	f083 0301 	eor.w	r3, r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d012      	beq.n	8002d4a <menu+0x1bb2>
 8002d24:	4b53      	ldr	r3, [pc, #332]	; (8002e74 <menu+0x1cdc>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10e      	bne.n	8002d4a <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002d2c:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <menu+0x1cd4>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	3301      	adds	r3, #1
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b4d      	ldr	r3, [pc, #308]	; (8002e6c <menu+0x1cd4>)
 8002d36:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002d38:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <menu+0x1cd4>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d902      	bls.n	8002d46 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002d40:	4b4a      	ldr	r3, [pc, #296]	; (8002e6c <menu+0x1cd4>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d46:	f001 fec1 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d4a:	2104      	movs	r1, #4
 8002d4c:	483d      	ldr	r0, [pc, #244]	; (8002e44 <menu+0x1cac>)
 8002d4e:	f006 fc5d 	bl	800960c <HAL_GPIO_ReadPin>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d119      	bne.n	8002d8c <menu+0x1bf4>
 8002d58:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <menu+0x1cb0>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	f083 0301 	eor.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d012      	beq.n	8002d8c <menu+0x1bf4>
 8002d66:	4b43      	ldr	r3, [pc, #268]	; (8002e74 <menu+0x1cdc>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10e      	bne.n	8002d8c <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <menu+0x1cd4>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4b3d      	ldr	r3, [pc, #244]	; (8002e6c <menu+0x1cd4>)
 8002d78:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002d7a:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <menu+0x1cd4>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d902      	bls.n	8002d88 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002d82:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <menu+0x1cd4>)
 8002d84:	2205      	movs	r2, #5
 8002d86:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002d88:	f001 fea0 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d8c:	2108      	movs	r1, #8
 8002d8e:	482d      	ldr	r0, [pc, #180]	; (8002e44 <menu+0x1cac>)
 8002d90:	f006 fc3c 	bl	800960c <HAL_GPIO_ReadPin>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d10d      	bne.n	8002db6 <menu+0x1c1e>
 8002d9a:	4b2b      	ldr	r3, [pc, #172]	; (8002e48 <menu+0x1cb0>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	f083 0301 	eor.w	r3, r3, #1
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d006      	beq.n	8002db6 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002da8:	4b30      	ldr	r3, [pc, #192]	; (8002e6c <menu+0x1cd4>)
 8002daa:	781a      	ldrb	r2, [r3, #0]
 8002dac:	4b27      	ldr	r3, [pc, #156]	; (8002e4c <menu+0x1cb4>)
 8002dae:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <menu+0x1cbc>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002db6:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <menu+0x1cc0>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b10      	cmp	r3, #16
 8002dbc:	f040 80bc 	bne.w	8002f38 <menu+0x1da0>
		if(dilSecim == 0) {
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <menu+0x1ca0>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002dc8:	4a2b      	ldr	r2, [pc, #172]	; (8002e78 <menu+0x1ce0>)
 8002dca:	2101      	movs	r1, #1
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f005 f8f7 	bl	8007fc0 <lcd_print>
 8002dd2:	e008      	b.n	8002de6 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002dd4:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <menu+0x1ca0>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d104      	bne.n	8002de6 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002ddc:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <menu+0x1ce4>)
 8002dde:	2101      	movs	r1, #1
 8002de0:	2001      	movs	r0, #1
 8002de2:	f005 f8ed 	bl	8007fc0 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002de6:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <menu+0x1ce8>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d113      	bne.n	8002e16 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <menu+0x1ca0>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002df6:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <menu+0x1ca4>)
 8002df8:	2101      	movs	r1, #1
 8002dfa:	2002      	movs	r0, #2
 8002dfc:	f005 f8e0 	bl	8007fc0 <lcd_print>
 8002e00:	e04b      	b.n	8002e9a <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002e02:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <menu+0x1ca0>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d147      	bne.n	8002e9a <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002e0a:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <menu+0x1ca8>)
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	2002      	movs	r0, #2
 8002e10:	f005 f8d6 	bl	8007fc0 <lcd_print>
 8002e14:	e041      	b.n	8002e9a <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002e16:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <menu+0x1ce8>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d13d      	bne.n	8002e9a <menu+0x1d02>
			if(dilSecim == 0) {
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <menu+0x1ca0>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d130      	bne.n	8002e88 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002e26:	4a17      	ldr	r2, [pc, #92]	; (8002e84 <menu+0x1cec>)
 8002e28:	2101      	movs	r1, #1
 8002e2a:	2002      	movs	r0, #2
 8002e2c:	f005 f8c8 	bl	8007fc0 <lcd_print>
 8002e30:	e033      	b.n	8002e9a <menu+0x1d02>
 8002e32:	bf00      	nop
 8002e34:	2000022d 	.word	0x2000022d
 8002e38:	20000241 	.word	0x20000241
 8002e3c:	0800d5c8 	.word	0x0800d5c8
 8002e40:	0800d5dc 	.word	0x0800d5dc
 8002e44:	40010800 	.word	0x40010800
 8002e48:	2000024f 	.word	0x2000024f
 8002e4c:	20000118 	.word	0x20000118
 8002e50:	20000226 	.word	0x20000226
 8002e54:	2000024c 	.word	0x2000024c
 8002e58:	20000220 	.word	0x20000220
 8002e5c:	0800d968 	.word	0x0800d968
 8002e60:	0800d82c 	.word	0x0800d82c
 8002e64:	0800d97c 	.word	0x0800d97c
 8002e68:	0800d850 	.word	0x0800d850
 8002e6c:	2000023b 	.word	0x2000023b
 8002e70:	20000188 	.word	0x20000188
 8002e74:	2000022b 	.word	0x2000022b
 8002e78:	0800d990 	.word	0x0800d990
 8002e7c:	0800d9a4 	.word	0x0800d9a4
 8002e80:	2000022e 	.word	0x2000022e
 8002e84:	0800d628 	.word	0x0800d628
			} else if(dilSecim == 1) {
 8002e88:	4b99      	ldr	r3, [pc, #612]	; (80030f0 <menu+0x1f58>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d104      	bne.n	8002e9a <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002e90:	4a98      	ldr	r2, [pc, #608]	; (80030f4 <menu+0x1f5c>)
 8002e92:	2101      	movs	r1, #1
 8002e94:	2002      	movs	r0, #2
 8002e96:	f005 f893 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	4896      	ldr	r0, [pc, #600]	; (80030f8 <menu+0x1f60>)
 8002e9e:	f006 fbb5 	bl	800960c <HAL_GPIO_ReadPin>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d115      	bne.n	8002ed4 <menu+0x1d3c>
 8002ea8:	4b94      	ldr	r3, [pc, #592]	; (80030fc <menu+0x1f64>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	f083 0301 	eor.w	r3, r3, #1
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00e      	beq.n	8002ed4 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002eb6:	4b92      	ldr	r3, [pc, #584]	; (8003100 <menu+0x1f68>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	4b90      	ldr	r3, [pc, #576]	; (8003100 <menu+0x1f68>)
 8002ec0:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002ec2:	4b8f      	ldr	r3, [pc, #572]	; (8003100 <menu+0x1f68>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d902      	bls.n	8002ed0 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002eca:	4b8d      	ldr	r3, [pc, #564]	; (8003100 <menu+0x1f68>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ed0:	f001 fdfc 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ed4:	2104      	movs	r1, #4
 8002ed6:	4888      	ldr	r0, [pc, #544]	; (80030f8 <menu+0x1f60>)
 8002ed8:	f006 fb98 	bl	800960c <HAL_GPIO_ReadPin>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d115      	bne.n	8002f0e <menu+0x1d76>
 8002ee2:	4b86      	ldr	r3, [pc, #536]	; (80030fc <menu+0x1f64>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	f083 0301 	eor.w	r3, r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00e      	beq.n	8002f0e <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002ef0:	4b83      	ldr	r3, [pc, #524]	; (8003100 <menu+0x1f68>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	4b81      	ldr	r3, [pc, #516]	; (8003100 <menu+0x1f68>)
 8002efa:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002efc:	4b80      	ldr	r3, [pc, #512]	; (8003100 <menu+0x1f68>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002f04:	4b7e      	ldr	r3, [pc, #504]	; (8003100 <menu+0x1f68>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f0a:	f001 fddf 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f0e:	2108      	movs	r1, #8
 8002f10:	4879      	ldr	r0, [pc, #484]	; (80030f8 <menu+0x1f60>)
 8002f12:	f006 fb7b 	bl	800960c <HAL_GPIO_ReadPin>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d10d      	bne.n	8002f38 <menu+0x1da0>
 8002f1c:	4b77      	ldr	r3, [pc, #476]	; (80030fc <menu+0x1f64>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	f083 0301 	eor.w	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002f2a:	4b75      	ldr	r3, [pc, #468]	; (8003100 <menu+0x1f68>)
 8002f2c:	781a      	ldrb	r2, [r3, #0]
 8002f2e:	4b75      	ldr	r3, [pc, #468]	; (8003104 <menu+0x1f6c>)
 8002f30:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002f32:	4b75      	ldr	r3, [pc, #468]	; (8003108 <menu+0x1f70>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002f38:	4b74      	ldr	r3, [pc, #464]	; (800310c <menu+0x1f74>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b11      	cmp	r3, #17
 8002f3e:	f040 80c3 	bne.w	80030c8 <menu+0x1f30>
		if(dilSecim == 0) {
 8002f42:	4b6b      	ldr	r3, [pc, #428]	; (80030f0 <menu+0x1f58>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002f4a:	4a71      	ldr	r2, [pc, #452]	; (8003110 <menu+0x1f78>)
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f005 f836 	bl	8007fc0 <lcd_print>
 8002f54:	e008      	b.n	8002f68 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002f56:	4b66      	ldr	r3, [pc, #408]	; (80030f0 <menu+0x1f58>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d104      	bne.n	8002f68 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002f5e:	4a6d      	ldr	r2, [pc, #436]	; (8003114 <menu+0x1f7c>)
 8002f60:	2101      	movs	r1, #1
 8002f62:	2001      	movs	r0, #1
 8002f64:	f005 f82c 	bl	8007fc0 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002f68:	4b6b      	ldr	r3, [pc, #428]	; (8003118 <menu+0x1f80>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d113      	bne.n	8002f98 <menu+0x1e00>
			if(dilSecim == 0){
 8002f70:	4b5f      	ldr	r3, [pc, #380]	; (80030f0 <menu+0x1f58>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002f78:	4a68      	ldr	r2, [pc, #416]	; (800311c <menu+0x1f84>)
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	2002      	movs	r0, #2
 8002f7e:	f005 f81f 	bl	8007fc0 <lcd_print>
 8002f82:	e038      	b.n	8002ff6 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002f84:	4b5a      	ldr	r3, [pc, #360]	; (80030f0 <menu+0x1f58>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d134      	bne.n	8002ff6 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002f8c:	4a64      	ldr	r2, [pc, #400]	; (8003120 <menu+0x1f88>)
 8002f8e:	2101      	movs	r1, #1
 8002f90:	2002      	movs	r0, #2
 8002f92:	f005 f815 	bl	8007fc0 <lcd_print>
 8002f96:	e02e      	b.n	8002ff6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002f98:	4b5f      	ldr	r3, [pc, #380]	; (8003118 <menu+0x1f80>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d113      	bne.n	8002fc8 <menu+0x1e30>
			if(dilSecim == 0){
 8002fa0:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <menu+0x1f58>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002fa8:	4a5e      	ldr	r2, [pc, #376]	; (8003124 <menu+0x1f8c>)
 8002faa:	2101      	movs	r1, #1
 8002fac:	2002      	movs	r0, #2
 8002fae:	f005 f807 	bl	8007fc0 <lcd_print>
 8002fb2:	e020      	b.n	8002ff6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002fb4:	4b4e      	ldr	r3, [pc, #312]	; (80030f0 <menu+0x1f58>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d11c      	bne.n	8002ff6 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002fbc:	4a5a      	ldr	r2, [pc, #360]	; (8003128 <menu+0x1f90>)
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	2002      	movs	r0, #2
 8002fc2:	f004 fffd 	bl	8007fc0 <lcd_print>
 8002fc6:	e016      	b.n	8002ff6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002fc8:	4b53      	ldr	r3, [pc, #332]	; (8003118 <menu+0x1f80>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d112      	bne.n	8002ff6 <menu+0x1e5e>
			if(dilSecim == 0) {
 8002fd0:	4b47      	ldr	r3, [pc, #284]	; (80030f0 <menu+0x1f58>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002fd8:	4a54      	ldr	r2, [pc, #336]	; (800312c <menu+0x1f94>)
 8002fda:	2101      	movs	r1, #1
 8002fdc:	2002      	movs	r0, #2
 8002fde:	f004 ffef 	bl	8007fc0 <lcd_print>
 8002fe2:	e008      	b.n	8002ff6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002fe4:	4b42      	ldr	r3, [pc, #264]	; (80030f0 <menu+0x1f58>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d104      	bne.n	8002ff6 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002fec:	4a50      	ldr	r2, [pc, #320]	; (8003130 <menu+0x1f98>)
 8002fee:	2101      	movs	r1, #1
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	f004 ffe5 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	483f      	ldr	r0, [pc, #252]	; (80030f8 <menu+0x1f60>)
 8002ffa:	f006 fb07 	bl	800960c <HAL_GPIO_ReadPin>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b01      	cmp	r3, #1
 8003002:	d115      	bne.n	8003030 <menu+0x1e98>
 8003004:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <menu+0x1f64>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	f083 0301 	eor.w	r3, r3, #1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00e      	beq.n	8003030 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003012:	4b41      	ldr	r3, [pc, #260]	; (8003118 <menu+0x1f80>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4b3f      	ldr	r3, [pc, #252]	; (8003118 <menu+0x1f80>)
 800301c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800301e:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <menu+0x1f80>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d902      	bls.n	800302c <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8003026:	4b3c      	ldr	r3, [pc, #240]	; (8003118 <menu+0x1f80>)
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800302c:	f001 fd4e 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003030:	2104      	movs	r1, #4
 8003032:	4831      	ldr	r0, [pc, #196]	; (80030f8 <menu+0x1f60>)
 8003034:	f006 faea 	bl	800960c <HAL_GPIO_ReadPin>
 8003038:	4603      	mov	r3, r0
 800303a:	2b01      	cmp	r3, #1
 800303c:	d115      	bne.n	800306a <menu+0x1ed2>
 800303e:	4b2f      	ldr	r3, [pc, #188]	; (80030fc <menu+0x1f64>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	f083 0301 	eor.w	r3, r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00e      	beq.n	800306a <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800304c:	4b32      	ldr	r3, [pc, #200]	; (8003118 <menu+0x1f80>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	3b01      	subs	r3, #1
 8003052:	b2da      	uxtb	r2, r3
 8003054:	4b30      	ldr	r3, [pc, #192]	; (8003118 <menu+0x1f80>)
 8003056:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003058:	4b2f      	ldr	r3, [pc, #188]	; (8003118 <menu+0x1f80>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d902      	bls.n	8003066 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003060:	4b2d      	ldr	r3, [pc, #180]	; (8003118 <menu+0x1f80>)
 8003062:	2202      	movs	r2, #2
 8003064:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003066:	f001 fd31 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800306a:	2108      	movs	r1, #8
 800306c:	4822      	ldr	r0, [pc, #136]	; (80030f8 <menu+0x1f60>)
 800306e:	f006 facd 	bl	800960c <HAL_GPIO_ReadPin>
 8003072:	4603      	mov	r3, r0
 8003074:	2b01      	cmp	r3, #1
 8003076:	d127      	bne.n	80030c8 <menu+0x1f30>
 8003078:	4b20      	ldr	r3, [pc, #128]	; (80030fc <menu+0x1f64>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	f083 0301 	eor.w	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d020      	beq.n	80030c8 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003086:	4b24      	ldr	r3, [pc, #144]	; (8003118 <menu+0x1f80>)
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <menu+0x1f6c>)
 800308c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <menu+0x1f80>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d003      	beq.n	800309e <menu+0x1f06>
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <menu+0x1f80>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d106      	bne.n	80030ac <menu+0x1f14>
				calismaSekli = 0;
 800309e:	4b25      	ldr	r3, [pc, #148]	; (8003134 <menu+0x1f9c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80030a4:	4b23      	ldr	r3, [pc, #140]	; (8003134 <menu+0x1f9c>)
 80030a6:	781a      	ldrb	r2, [r3, #0]
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <menu+0x1f6c>)
 80030aa:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <menu+0x1f80>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d106      	bne.n	80030c2 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80030b4:	4b20      	ldr	r3, [pc, #128]	; (8003138 <menu+0x1fa0>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80030ba:	4b1f      	ldr	r3, [pc, #124]	; (8003138 <menu+0x1fa0>)
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <menu+0x1f6c>)
 80030c0:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <menu+0x1f70>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80030c8:	4b10      	ldr	r3, [pc, #64]	; (800310c <menu+0x1f74>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b12      	cmp	r3, #18
 80030ce:	f040 80d5 	bne.w	800327c <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <menu+0x1f80>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d13c      	bne.n	8003154 <menu+0x1fbc>
			if(dilSecim == 0) {
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <menu+0x1f58>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d12e      	bne.n	8003140 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80030e2:	4a16      	ldr	r2, [pc, #88]	; (800313c <menu+0x1fa4>)
 80030e4:	2101      	movs	r1, #1
 80030e6:	2001      	movs	r0, #1
 80030e8:	f004 ff6a 	bl	8007fc0 <lcd_print>
 80030ec:	e048      	b.n	8003180 <menu+0x1fe8>
 80030ee:	bf00      	nop
 80030f0:	20000241 	.word	0x20000241
 80030f4:	0800d63c 	.word	0x0800d63c
 80030f8:	40010800 	.word	0x40010800
 80030fc:	2000024f 	.word	0x2000024f
 8003100:	2000022e 	.word	0x2000022e
 8003104:	20000118 	.word	0x20000118
 8003108:	2000024c 	.word	0x2000024c
 800310c:	20000220 	.word	0x20000220
 8003110:	0800d9b8 	.word	0x0800d9b8
 8003114:	0800d9cc 	.word	0x0800d9cc
 8003118:	2000022f 	.word	0x2000022f
 800311c:	0800d9e0 	.word	0x0800d9e0
 8003120:	0800d9f0 	.word	0x0800d9f0
 8003124:	0800da00 	.word	0x0800da00
 8003128:	0800da10 	.word	0x0800da10
 800312c:	0800d5c8 	.word	0x0800d5c8
 8003130:	0800d5dc 	.word	0x0800d5dc
 8003134:	20000221 	.word	0x20000221
 8003138:	20000232 	.word	0x20000232
 800313c:	0800da20 	.word	0x0800da20
			} else if(dilSecim == 1) {
 8003140:	4b7b      	ldr	r3, [pc, #492]	; (8003330 <menu+0x2198>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d11b      	bne.n	8003180 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003148:	4a7a      	ldr	r2, [pc, #488]	; (8003334 <menu+0x219c>)
 800314a:	2101      	movs	r1, #1
 800314c:	2001      	movs	r0, #1
 800314e:	f004 ff37 	bl	8007fc0 <lcd_print>
 8003152:	e015      	b.n	8003180 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003154:	4b78      	ldr	r3, [pc, #480]	; (8003338 <menu+0x21a0>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d111      	bne.n	8003180 <menu+0x1fe8>
			if(dilSecim == 0){
 800315c:	4b74      	ldr	r3, [pc, #464]	; (8003330 <menu+0x2198>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d104      	bne.n	800316e <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003164:	4a75      	ldr	r2, [pc, #468]	; (800333c <menu+0x21a4>)
 8003166:	2101      	movs	r1, #1
 8003168:	2001      	movs	r0, #1
 800316a:	f004 ff29 	bl	8007fc0 <lcd_print>
			}
			if(dilSecim == 1){
 800316e:	4b70      	ldr	r3, [pc, #448]	; (8003330 <menu+0x2198>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d104      	bne.n	8003180 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003176:	4a72      	ldr	r2, [pc, #456]	; (8003340 <menu+0x21a8>)
 8003178:	2101      	movs	r1, #1
 800317a:	2001      	movs	r0, #1
 800317c:	f004 ff20 	bl	8007fc0 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003180:	4b70      	ldr	r3, [pc, #448]	; (8003344 <menu+0x21ac>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d113      	bne.n	80031b0 <menu+0x2018>
			if(dilSecim == 0) {
 8003188:	4b69      	ldr	r3, [pc, #420]	; (8003330 <menu+0x2198>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003190:	4a6d      	ldr	r2, [pc, #436]	; (8003348 <menu+0x21b0>)
 8003192:	2101      	movs	r1, #1
 8003194:	2002      	movs	r0, #2
 8003196:	f004 ff13 	bl	8007fc0 <lcd_print>
 800319a:	e020      	b.n	80031de <menu+0x2046>
			} else if(dilSecim == 1){
 800319c:	4b64      	ldr	r3, [pc, #400]	; (8003330 <menu+0x2198>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d11c      	bne.n	80031de <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80031a4:	4a69      	ldr	r2, [pc, #420]	; (800334c <menu+0x21b4>)
 80031a6:	2101      	movs	r1, #1
 80031a8:	2002      	movs	r0, #2
 80031aa:	f004 ff09 	bl	8007fc0 <lcd_print>
 80031ae:	e016      	b.n	80031de <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80031b0:	4b64      	ldr	r3, [pc, #400]	; (8003344 <menu+0x21ac>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d112      	bne.n	80031de <menu+0x2046>
			if(dilSecim == 0){
 80031b8:	4b5d      	ldr	r3, [pc, #372]	; (8003330 <menu+0x2198>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80031c0:	4a63      	ldr	r2, [pc, #396]	; (8003350 <menu+0x21b8>)
 80031c2:	2101      	movs	r1, #1
 80031c4:	2002      	movs	r0, #2
 80031c6:	f004 fefb 	bl	8007fc0 <lcd_print>
 80031ca:	e008      	b.n	80031de <menu+0x2046>
			} else if(dilSecim == 1){
 80031cc:	4b58      	ldr	r3, [pc, #352]	; (8003330 <menu+0x2198>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d104      	bne.n	80031de <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80031d4:	4a5f      	ldr	r2, [pc, #380]	; (8003354 <menu+0x21bc>)
 80031d6:	2101      	movs	r1, #1
 80031d8:	2002      	movs	r0, #2
 80031da:	f004 fef1 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031de:	2102      	movs	r1, #2
 80031e0:	485d      	ldr	r0, [pc, #372]	; (8003358 <menu+0x21c0>)
 80031e2:	f006 fa13 	bl	800960c <HAL_GPIO_ReadPin>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d115      	bne.n	8003218 <menu+0x2080>
 80031ec:	4b5b      	ldr	r3, [pc, #364]	; (800335c <menu+0x21c4>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	f083 0301 	eor.w	r3, r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00e      	beq.n	8003218 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80031fa:	4b52      	ldr	r3, [pc, #328]	; (8003344 <menu+0x21ac>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	3301      	adds	r3, #1
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4b50      	ldr	r3, [pc, #320]	; (8003344 <menu+0x21ac>)
 8003204:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003206:	4b4f      	ldr	r3, [pc, #316]	; (8003344 <menu+0x21ac>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d902      	bls.n	8003214 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800320e:	4b4d      	ldr	r3, [pc, #308]	; (8003344 <menu+0x21ac>)
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003214:	f001 fc5a 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003218:	2104      	movs	r1, #4
 800321a:	484f      	ldr	r0, [pc, #316]	; (8003358 <menu+0x21c0>)
 800321c:	f006 f9f6 	bl	800960c <HAL_GPIO_ReadPin>
 8003220:	4603      	mov	r3, r0
 8003222:	2b01      	cmp	r3, #1
 8003224:	d115      	bne.n	8003252 <menu+0x20ba>
 8003226:	4b4d      	ldr	r3, [pc, #308]	; (800335c <menu+0x21c4>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	f083 0301 	eor.w	r3, r3, #1
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00e      	beq.n	8003252 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003234:	4b43      	ldr	r3, [pc, #268]	; (8003344 <menu+0x21ac>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	3b01      	subs	r3, #1
 800323a:	b2da      	uxtb	r2, r3
 800323c:	4b41      	ldr	r3, [pc, #260]	; (8003344 <menu+0x21ac>)
 800323e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003240:	4b40      	ldr	r3, [pc, #256]	; (8003344 <menu+0x21ac>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003248:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <menu+0x21ac>)
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800324e:	f001 fc3d 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003252:	2108      	movs	r1, #8
 8003254:	4840      	ldr	r0, [pc, #256]	; (8003358 <menu+0x21c0>)
 8003256:	f006 f9d9 	bl	800960c <HAL_GPIO_ReadPin>
 800325a:	4603      	mov	r3, r0
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10d      	bne.n	800327c <menu+0x20e4>
 8003260:	4b3e      	ldr	r3, [pc, #248]	; (800335c <menu+0x21c4>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	f083 0301 	eor.w	r3, r3, #1
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800326e:	4b35      	ldr	r3, [pc, #212]	; (8003344 <menu+0x21ac>)
 8003270:	781a      	ldrb	r2, [r3, #0]
 8003272:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <menu+0x21c8>)
 8003274:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003276:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <menu+0x21cc>)
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800327c:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <menu+0x21d0>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b13      	cmp	r3, #19
 8003282:	f040 80d5 	bne.w	8003430 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003286:	4b2c      	ldr	r3, [pc, #176]	; (8003338 <menu+0x21a0>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d113      	bne.n	80032b6 <menu+0x211e>
			if(dilSecim == 0) {
 800328e:	4b28      	ldr	r3, [pc, #160]	; (8003330 <menu+0x2198>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d105      	bne.n	80032a2 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003296:	4a35      	ldr	r2, [pc, #212]	; (800336c <menu+0x21d4>)
 8003298:	2101      	movs	r1, #1
 800329a:	2001      	movs	r0, #1
 800329c:	f004 fe90 	bl	8007fc0 <lcd_print>
 80032a0:	e01f      	b.n	80032e2 <menu+0x214a>
			} else if(dilSecim == 1) {
 80032a2:	4b23      	ldr	r3, [pc, #140]	; (8003330 <menu+0x2198>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d11b      	bne.n	80032e2 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80032aa:	4a31      	ldr	r2, [pc, #196]	; (8003370 <menu+0x21d8>)
 80032ac:	2101      	movs	r1, #1
 80032ae:	2001      	movs	r0, #1
 80032b0:	f004 fe86 	bl	8007fc0 <lcd_print>
 80032b4:	e015      	b.n	80032e2 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032b6:	4b20      	ldr	r3, [pc, #128]	; (8003338 <menu+0x21a0>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d111      	bne.n	80032e2 <menu+0x214a>
			if(dilSecim == 0) {
 80032be:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <menu+0x2198>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80032c6:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <menu+0x21dc>)
 80032c8:	2101      	movs	r1, #1
 80032ca:	2001      	movs	r0, #1
 80032cc:	f004 fe78 	bl	8007fc0 <lcd_print>
			}
			if(dilSecim == 1) {
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <menu+0x2198>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d104      	bne.n	80032e2 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80032d8:	4a27      	ldr	r2, [pc, #156]	; (8003378 <menu+0x21e0>)
 80032da:	2101      	movs	r1, #1
 80032dc:	2001      	movs	r0, #1
 80032de:	f004 fe6f 	bl	8007fc0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <menu+0x21e4>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d113      	bne.n	8003312 <menu+0x217a>
			if(dilSecim == 0) {
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <menu+0x2198>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d105      	bne.n	80032fe <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80032f2:	4a15      	ldr	r2, [pc, #84]	; (8003348 <menu+0x21b0>)
 80032f4:	2101      	movs	r1, #1
 80032f6:	2002      	movs	r0, #2
 80032f8:	f004 fe62 	bl	8007fc0 <lcd_print>
 80032fc:	e049      	b.n	8003392 <menu+0x21fa>
			} else if(dilSecim == 1) {
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <menu+0x2198>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d145      	bne.n	8003392 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003306:	4a11      	ldr	r2, [pc, #68]	; (800334c <menu+0x21b4>)
 8003308:	2101      	movs	r1, #1
 800330a:	2002      	movs	r0, #2
 800330c:	f004 fe58 	bl	8007fc0 <lcd_print>
 8003310:	e03f      	b.n	8003392 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <menu+0x21e4>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d13b      	bne.n	8003392 <menu+0x21fa>
			if(dilSecim == 0) {
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <menu+0x2198>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d12e      	bne.n	8003380 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003322:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <menu+0x21b8>)
 8003324:	2101      	movs	r1, #1
 8003326:	2002      	movs	r0, #2
 8003328:	f004 fe4a 	bl	8007fc0 <lcd_print>
 800332c:	e031      	b.n	8003392 <menu+0x21fa>
 800332e:	bf00      	nop
 8003330:	20000241 	.word	0x20000241
 8003334:	0800da34 	.word	0x0800da34
 8003338:	2000022f 	.word	0x2000022f
 800333c:	0800da44 	.word	0x0800da44
 8003340:	0800da58 	.word	0x0800da58
 8003344:	20000230 	.word	0x20000230
 8003348:	0800d5c8 	.word	0x0800d5c8
 800334c:	0800d5dc 	.word	0x0800d5dc
 8003350:	0800d628 	.word	0x0800d628
 8003354:	0800d63c 	.word	0x0800d63c
 8003358:	40010800 	.word	0x40010800
 800335c:	2000024f 	.word	0x2000024f
 8003360:	20000118 	.word	0x20000118
 8003364:	2000024c 	.word	0x2000024c
 8003368:	20000220 	.word	0x20000220
 800336c:	0800da6c 	.word	0x0800da6c
 8003370:	0800da80 	.word	0x0800da80
 8003374:	0800da94 	.word	0x0800da94
 8003378:	0800daa8 	.word	0x0800daa8
 800337c:	20000231 	.word	0x20000231
			} else if(dilSecim == 1) {
 8003380:	4b90      	ldr	r3, [pc, #576]	; (80035c4 <menu+0x242c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d104      	bne.n	8003392 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003388:	4a8f      	ldr	r2, [pc, #572]	; (80035c8 <menu+0x2430>)
 800338a:	2101      	movs	r1, #1
 800338c:	2002      	movs	r0, #2
 800338e:	f004 fe17 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003392:	2102      	movs	r1, #2
 8003394:	488d      	ldr	r0, [pc, #564]	; (80035cc <menu+0x2434>)
 8003396:	f006 f939 	bl	800960c <HAL_GPIO_ReadPin>
 800339a:	4603      	mov	r3, r0
 800339c:	2b01      	cmp	r3, #1
 800339e:	d115      	bne.n	80033cc <menu+0x2234>
 80033a0:	4b8b      	ldr	r3, [pc, #556]	; (80035d0 <menu+0x2438>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	f083 0301 	eor.w	r3, r3, #1
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00e      	beq.n	80033cc <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80033ae:	4b89      	ldr	r3, [pc, #548]	; (80035d4 <menu+0x243c>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4b87      	ldr	r3, [pc, #540]	; (80035d4 <menu+0x243c>)
 80033b8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80033ba:	4b86      	ldr	r3, [pc, #536]	; (80035d4 <menu+0x243c>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d902      	bls.n	80033c8 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80033c2:	4b84      	ldr	r3, [pc, #528]	; (80035d4 <menu+0x243c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033c8:	f001 fb80 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033cc:	2104      	movs	r1, #4
 80033ce:	487f      	ldr	r0, [pc, #508]	; (80035cc <menu+0x2434>)
 80033d0:	f006 f91c 	bl	800960c <HAL_GPIO_ReadPin>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d115      	bne.n	8003406 <menu+0x226e>
 80033da:	4b7d      	ldr	r3, [pc, #500]	; (80035d0 <menu+0x2438>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	f083 0301 	eor.w	r3, r3, #1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00e      	beq.n	8003406 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80033e8:	4b7a      	ldr	r3, [pc, #488]	; (80035d4 <menu+0x243c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	4b78      	ldr	r3, [pc, #480]	; (80035d4 <menu+0x243c>)
 80033f2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80033f4:	4b77      	ldr	r3, [pc, #476]	; (80035d4 <menu+0x243c>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80033fc:	4b75      	ldr	r3, [pc, #468]	; (80035d4 <menu+0x243c>)
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003402:	f001 fb63 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003406:	2108      	movs	r1, #8
 8003408:	4870      	ldr	r0, [pc, #448]	; (80035cc <menu+0x2434>)
 800340a:	f006 f8ff 	bl	800960c <HAL_GPIO_ReadPin>
 800340e:	4603      	mov	r3, r0
 8003410:	2b01      	cmp	r3, #1
 8003412:	d10d      	bne.n	8003430 <menu+0x2298>
 8003414:	4b6e      	ldr	r3, [pc, #440]	; (80035d0 <menu+0x2438>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	f083 0301 	eor.w	r3, r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d006      	beq.n	8003430 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003422:	4b6c      	ldr	r3, [pc, #432]	; (80035d4 <menu+0x243c>)
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	4b6c      	ldr	r3, [pc, #432]	; (80035d8 <menu+0x2440>)
 8003428:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800342a:	4b6c      	ldr	r3, [pc, #432]	; (80035dc <menu+0x2444>)
 800342c:	2201      	movs	r2, #1
 800342e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003430:	4b6b      	ldr	r3, [pc, #428]	; (80035e0 <menu+0x2448>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b14      	cmp	r3, #20
 8003436:	f040 80b5 	bne.w	80035a4 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800343a:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <menu+0x244c>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d113      	bne.n	800346a <menu+0x22d2>
			if(dilSecim == 0) {
 8003442:	4b60      	ldr	r3, [pc, #384]	; (80035c4 <menu+0x242c>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800344a:	4a67      	ldr	r2, [pc, #412]	; (80035e8 <menu+0x2450>)
 800344c:	2101      	movs	r1, #1
 800344e:	2001      	movs	r0, #1
 8003450:	f004 fdb6 	bl	8007fc0 <lcd_print>
 8003454:	e020      	b.n	8003498 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003456:	4b5b      	ldr	r3, [pc, #364]	; (80035c4 <menu+0x242c>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d11c      	bne.n	8003498 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800345e:	4a63      	ldr	r2, [pc, #396]	; (80035ec <menu+0x2454>)
 8003460:	2101      	movs	r1, #1
 8003462:	2001      	movs	r0, #1
 8003464:	f004 fdac 	bl	8007fc0 <lcd_print>
 8003468:	e016      	b.n	8003498 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800346a:	4b5e      	ldr	r3, [pc, #376]	; (80035e4 <menu+0x244c>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d112      	bne.n	8003498 <menu+0x2300>
			if(dilSecim == 0) {
 8003472:	4b54      	ldr	r3, [pc, #336]	; (80035c4 <menu+0x242c>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800347a:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <menu+0x2458>)
 800347c:	2101      	movs	r1, #1
 800347e:	2001      	movs	r0, #1
 8003480:	f004 fd9e 	bl	8007fc0 <lcd_print>
 8003484:	e008      	b.n	8003498 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003486:	4b4f      	ldr	r3, [pc, #316]	; (80035c4 <menu+0x242c>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d104      	bne.n	8003498 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800348e:	4a59      	ldr	r2, [pc, #356]	; (80035f4 <menu+0x245c>)
 8003490:	2101      	movs	r1, #1
 8003492:	2001      	movs	r0, #1
 8003494:	f004 fd94 	bl	8007fc0 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003498:	4b57      	ldr	r3, [pc, #348]	; (80035f8 <menu+0x2460>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d113      	bne.n	80034c8 <menu+0x2330>
			if(dilSecim == 0) {
 80034a0:	4b48      	ldr	r3, [pc, #288]	; (80035c4 <menu+0x242c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80034a8:	4a54      	ldr	r2, [pc, #336]	; (80035fc <menu+0x2464>)
 80034aa:	2101      	movs	r1, #1
 80034ac:	2002      	movs	r0, #2
 80034ae:	f004 fd87 	bl	8007fc0 <lcd_print>
 80034b2:	e020      	b.n	80034f6 <menu+0x235e>
			} else if(dilSecim == 1) {
 80034b4:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <menu+0x242c>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d11c      	bne.n	80034f6 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80034bc:	4a50      	ldr	r2, [pc, #320]	; (8003600 <menu+0x2468>)
 80034be:	2101      	movs	r1, #1
 80034c0:	2002      	movs	r0, #2
 80034c2:	f004 fd7d 	bl	8007fc0 <lcd_print>
 80034c6:	e016      	b.n	80034f6 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80034c8:	4b4b      	ldr	r3, [pc, #300]	; (80035f8 <menu+0x2460>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d112      	bne.n	80034f6 <menu+0x235e>
			if(dilSecim == 0) {
 80034d0:	4b3c      	ldr	r3, [pc, #240]	; (80035c4 <menu+0x242c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d105      	bne.n	80034e4 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80034d8:	4a4a      	ldr	r2, [pc, #296]	; (8003604 <menu+0x246c>)
 80034da:	2101      	movs	r1, #1
 80034dc:	2002      	movs	r0, #2
 80034de:	f004 fd6f 	bl	8007fc0 <lcd_print>
 80034e2:	e008      	b.n	80034f6 <menu+0x235e>
			} else if(dilSecim == 1) {
 80034e4:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <menu+0x242c>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d104      	bne.n	80034f6 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80034ec:	4a46      	ldr	r2, [pc, #280]	; (8003608 <menu+0x2470>)
 80034ee:	2101      	movs	r1, #1
 80034f0:	2002      	movs	r0, #2
 80034f2:	f004 fd65 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80034f6:	2102      	movs	r1, #2
 80034f8:	4834      	ldr	r0, [pc, #208]	; (80035cc <menu+0x2434>)
 80034fa:	f006 f887 	bl	800960c <HAL_GPIO_ReadPin>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b01      	cmp	r3, #1
 8003502:	d119      	bne.n	8003538 <menu+0x23a0>
 8003504:	4b32      	ldr	r3, [pc, #200]	; (80035d0 <menu+0x2438>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f083 0301 	eor.w	r3, r3, #1
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d012      	beq.n	8003538 <menu+0x23a0>
 8003512:	4b34      	ldr	r3, [pc, #208]	; (80035e4 <menu+0x244c>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d10e      	bne.n	8003538 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800351a:	4b37      	ldr	r3, [pc, #220]	; (80035f8 <menu+0x2460>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <menu+0x2460>)
 8003524:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003526:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <menu+0x2460>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d902      	bls.n	8003534 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800352e:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <menu+0x2460>)
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003534:	f001 faca 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003538:	2104      	movs	r1, #4
 800353a:	4824      	ldr	r0, [pc, #144]	; (80035cc <menu+0x2434>)
 800353c:	f006 f866 	bl	800960c <HAL_GPIO_ReadPin>
 8003540:	4603      	mov	r3, r0
 8003542:	2b01      	cmp	r3, #1
 8003544:	d119      	bne.n	800357a <menu+0x23e2>
 8003546:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <menu+0x2438>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	f083 0301 	eor.w	r3, r3, #1
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d012      	beq.n	800357a <menu+0x23e2>
 8003554:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <menu+0x244c>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d10e      	bne.n	800357a <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 800355c:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <menu+0x2460>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	3b01      	subs	r3, #1
 8003562:	b2da      	uxtb	r2, r3
 8003564:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <menu+0x2460>)
 8003566:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003568:	4b23      	ldr	r3, [pc, #140]	; (80035f8 <menu+0x2460>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <menu+0x2460>)
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003576:	f001 faa9 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800357a:	2108      	movs	r1, #8
 800357c:	4813      	ldr	r0, [pc, #76]	; (80035cc <menu+0x2434>)
 800357e:	f006 f845 	bl	800960c <HAL_GPIO_ReadPin>
 8003582:	4603      	mov	r3, r0
 8003584:	2b01      	cmp	r3, #1
 8003586:	d10d      	bne.n	80035a4 <menu+0x240c>
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <menu+0x2438>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	f083 0301 	eor.w	r3, r3, #1
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003596:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <menu+0x2460>)
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <menu+0x2440>)
 800359c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <menu+0x2444>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80035a4:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <menu+0x2448>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b15      	cmp	r3, #21
 80035aa:	f040 80c2 	bne.w	8003732 <menu+0x259a>
		if(dilSecim == 0) {
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <menu+0x242c>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d12c      	bne.n	8003610 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80035b6:	4a15      	ldr	r2, [pc, #84]	; (800360c <menu+0x2474>)
 80035b8:	2101      	movs	r1, #1
 80035ba:	2001      	movs	r0, #1
 80035bc:	f004 fd00 	bl	8007fc0 <lcd_print>
 80035c0:	e02f      	b.n	8003622 <menu+0x248a>
 80035c2:	bf00      	nop
 80035c4:	20000241 	.word	0x20000241
 80035c8:	0800d63c 	.word	0x0800d63c
 80035cc:	40010800 	.word	0x40010800
 80035d0:	2000024f 	.word	0x2000024f
 80035d4:	20000231 	.word	0x20000231
 80035d8:	20000118 	.word	0x20000118
 80035dc:	2000024c 	.word	0x2000024c
 80035e0:	20000220 	.word	0x20000220
 80035e4:	2000022f 	.word	0x2000022f
 80035e8:	0800dabc 	.word	0x0800dabc
 80035ec:	0800dad0 	.word	0x0800dad0
 80035f0:	0800dae4 	.word	0x0800dae4
 80035f4:	0800daf8 	.word	0x0800daf8
 80035f8:	20000232 	.word	0x20000232
 80035fc:	0800db0c 	.word	0x0800db0c
 8003600:	0800db20 	.word	0x0800db20
 8003604:	0800db30 	.word	0x0800db30
 8003608:	0800db44 	.word	0x0800db44
 800360c:	0800db54 	.word	0x0800db54
		} else if(dilSecim == 1) {
 8003610:	4b9c      	ldr	r3, [pc, #624]	; (8003884 <menu+0x26ec>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d104      	bne.n	8003622 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003618:	4a9b      	ldr	r2, [pc, #620]	; (8003888 <menu+0x26f0>)
 800361a:	2101      	movs	r1, #1
 800361c:	2001      	movs	r0, #1
 800361e:	f004 fccf 	bl	8007fc0 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003622:	4b9a      	ldr	r3, [pc, #616]	; (800388c <menu+0x26f4>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d112      	bne.n	8003650 <menu+0x24b8>
			if(dilSecim == 0) {
 800362a:	4b96      	ldr	r3, [pc, #600]	; (8003884 <menu+0x26ec>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003632:	4a97      	ldr	r2, [pc, #604]	; (8003890 <menu+0x26f8>)
 8003634:	2101      	movs	r1, #1
 8003636:	2002      	movs	r0, #2
 8003638:	f004 fcc2 	bl	8007fc0 <lcd_print>
			}
			if(dilSecim == 1) {
 800363c:	4b91      	ldr	r3, [pc, #580]	; (8003884 <menu+0x26ec>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d11c      	bne.n	800367e <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003644:	4a93      	ldr	r2, [pc, #588]	; (8003894 <menu+0x26fc>)
 8003646:	2101      	movs	r1, #1
 8003648:	2002      	movs	r0, #2
 800364a:	f004 fcb9 	bl	8007fc0 <lcd_print>
 800364e:	e016      	b.n	800367e <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003650:	4b8e      	ldr	r3, [pc, #568]	; (800388c <menu+0x26f4>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d112      	bne.n	800367e <menu+0x24e6>
			if(dilSecim == 0) {
 8003658:	4b8a      	ldr	r3, [pc, #552]	; (8003884 <menu+0x26ec>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003660:	4a8d      	ldr	r2, [pc, #564]	; (8003898 <menu+0x2700>)
 8003662:	2101      	movs	r1, #1
 8003664:	2002      	movs	r0, #2
 8003666:	f004 fcab 	bl	8007fc0 <lcd_print>
 800366a:	e008      	b.n	800367e <menu+0x24e6>
			} else if(dilSecim == 1) {
 800366c:	4b85      	ldr	r3, [pc, #532]	; (8003884 <menu+0x26ec>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d104      	bne.n	800367e <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003674:	4a89      	ldr	r2, [pc, #548]	; (800389c <menu+0x2704>)
 8003676:	2101      	movs	r1, #1
 8003678:	2002      	movs	r0, #2
 800367a:	f004 fca1 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800367e:	2102      	movs	r1, #2
 8003680:	4887      	ldr	r0, [pc, #540]	; (80038a0 <menu+0x2708>)
 8003682:	f005 ffc3 	bl	800960c <HAL_GPIO_ReadPin>
 8003686:	4603      	mov	r3, r0
 8003688:	2b01      	cmp	r3, #1
 800368a:	d115      	bne.n	80036b8 <menu+0x2520>
 800368c:	4b85      	ldr	r3, [pc, #532]	; (80038a4 <menu+0x270c>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	f083 0301 	eor.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00e      	beq.n	80036b8 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 800369a:	4b7c      	ldr	r3, [pc, #496]	; (800388c <menu+0x26f4>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	3301      	adds	r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4b7a      	ldr	r3, [pc, #488]	; (800388c <menu+0x26f4>)
 80036a4:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80036a6:	4b79      	ldr	r3, [pc, #484]	; (800388c <menu+0x26f4>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d902      	bls.n	80036b4 <menu+0x251c>
				platformSilindirTipi = 0;
 80036ae:	4b77      	ldr	r3, [pc, #476]	; (800388c <menu+0x26f4>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036b4:	f001 fa0a 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b8:	2104      	movs	r1, #4
 80036ba:	4879      	ldr	r0, [pc, #484]	; (80038a0 <menu+0x2708>)
 80036bc:	f005 ffa6 	bl	800960c <HAL_GPIO_ReadPin>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d115      	bne.n	80036f2 <menu+0x255a>
 80036c6:	4b77      	ldr	r3, [pc, #476]	; (80038a4 <menu+0x270c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	f083 0301 	eor.w	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00e      	beq.n	80036f2 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80036d4:	4b6d      	ldr	r3, [pc, #436]	; (800388c <menu+0x26f4>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	3b01      	subs	r3, #1
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	4b6b      	ldr	r3, [pc, #428]	; (800388c <menu+0x26f4>)
 80036de:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80036e0:	4b6a      	ldr	r3, [pc, #424]	; (800388c <menu+0x26f4>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <menu+0x2556>
		   		platformSilindirTipi = 1;
 80036e8:	4b68      	ldr	r3, [pc, #416]	; (800388c <menu+0x26f4>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036ee:	f001 f9ed 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036f2:	2108      	movs	r1, #8
 80036f4:	486a      	ldr	r0, [pc, #424]	; (80038a0 <menu+0x2708>)
 80036f6:	f005 ff89 	bl	800960c <HAL_GPIO_ReadPin>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d118      	bne.n	8003732 <menu+0x259a>
 8003700:	4b68      	ldr	r3, [pc, #416]	; (80038a4 <menu+0x270c>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	f083 0301 	eor.w	r3, r3, #1
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d011      	beq.n	8003732 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 800370e:	4b5f      	ldr	r3, [pc, #380]	; (800388c <menu+0x26f4>)
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	4b65      	ldr	r3, [pc, #404]	; (80038a8 <menu+0x2710>)
 8003714:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003716:	4b5d      	ldr	r3, [pc, #372]	; (800388c <menu+0x26f4>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d106      	bne.n	800372c <menu+0x2594>
				altLimit = 1;
 800371e:	4b63      	ldr	r3, [pc, #396]	; (80038ac <menu+0x2714>)
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003724:	4b61      	ldr	r3, [pc, #388]	; (80038ac <menu+0x2714>)
 8003726:	781a      	ldrb	r2, [r3, #0]
 8003728:	4b5f      	ldr	r3, [pc, #380]	; (80038a8 <menu+0x2710>)
 800372a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800372c:	4b60      	ldr	r3, [pc, #384]	; (80038b0 <menu+0x2718>)
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003732:	4b60      	ldr	r3, [pc, #384]	; (80038b4 <menu+0x271c>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b16      	cmp	r3, #22
 8003738:	f040 8081 	bne.w	800383e <menu+0x26a6>
		if(dilSecim == 0) {
 800373c:	4b51      	ldr	r3, [pc, #324]	; (8003884 <menu+0x26ec>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d105      	bne.n	8003750 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003744:	4a5c      	ldr	r2, [pc, #368]	; (80038b8 <menu+0x2720>)
 8003746:	2101      	movs	r1, #1
 8003748:	2001      	movs	r0, #1
 800374a:	f004 fc39 	bl	8007fc0 <lcd_print>
 800374e:	e008      	b.n	8003762 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003750:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <menu+0x26ec>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d104      	bne.n	8003762 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003758:	4a58      	ldr	r2, [pc, #352]	; (80038bc <menu+0x2724>)
 800375a:	2101      	movs	r1, #1
 800375c:	2001      	movs	r0, #1
 800375e:	f004 fc2f 	bl	8007fc0 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003762:	4b48      	ldr	r3, [pc, #288]	; (8003884 <menu+0x26ec>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 800376a:	4a55      	ldr	r2, [pc, #340]	; (80038c0 <menu+0x2728>)
 800376c:	2101      	movs	r1, #1
 800376e:	2002      	movs	r0, #2
 8003770:	f004 fc26 	bl	8007fc0 <lcd_print>
 8003774:	e008      	b.n	8003788 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003776:	4b43      	ldr	r3, [pc, #268]	; (8003884 <menu+0x26ec>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d104      	bne.n	8003788 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 800377e:	4a51      	ldr	r2, [pc, #324]	; (80038c4 <menu+0x272c>)
 8003780:	2101      	movs	r1, #1
 8003782:	2002      	movs	r0, #2
 8003784:	f004 fc1c 	bl	8007fc0 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003788:	4b4f      	ldr	r3, [pc, #316]	; (80038c8 <menu+0x2730>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	220a      	movs	r2, #10
 800378e:	494f      	ldr	r1, [pc, #316]	; (80038cc <menu+0x2734>)
 8003790:	4618      	mov	r0, r3
 8003792:	f008 ff67 	bl	800c664 <itoa>
		lcd_print(2,16,snum);
 8003796:	4a4d      	ldr	r2, [pc, #308]	; (80038cc <menu+0x2734>)
 8003798:	2110      	movs	r1, #16
 800379a:	2002      	movs	r0, #2
 800379c:	f004 fc10 	bl	8007fc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037a0:	2102      	movs	r1, #2
 80037a2:	483f      	ldr	r0, [pc, #252]	; (80038a0 <menu+0x2708>)
 80037a4:	f005 ff32 	bl	800960c <HAL_GPIO_ReadPin>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d115      	bne.n	80037da <menu+0x2642>
 80037ae:	4b3d      	ldr	r3, [pc, #244]	; (80038a4 <menu+0x270c>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	f083 0301 	eor.w	r3, r3, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00e      	beq.n	80037da <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80037bc:	4b42      	ldr	r3, [pc, #264]	; (80038c8 <menu+0x2730>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	4b40      	ldr	r3, [pc, #256]	; (80038c8 <menu+0x2730>)
 80037c6:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80037c8:	4b3f      	ldr	r3, [pc, #252]	; (80038c8 <menu+0x2730>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b05      	cmp	r3, #5
 80037ce:	d902      	bls.n	80037d6 <menu+0x263e>
				yukariValfTmr = 0;
 80037d0:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <menu+0x2730>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037d6:	f001 f979 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037da:	2104      	movs	r1, #4
 80037dc:	4830      	ldr	r0, [pc, #192]	; (80038a0 <menu+0x2708>)
 80037de:	f005 ff15 	bl	800960c <HAL_GPIO_ReadPin>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d115      	bne.n	8003814 <menu+0x267c>
 80037e8:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <menu+0x270c>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	f083 0301 	eor.w	r3, r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00e      	beq.n	8003814 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 80037f6:	4b34      	ldr	r3, [pc, #208]	; (80038c8 <menu+0x2730>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <menu+0x2730>)
 8003800:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003802:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <menu+0x2730>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b06      	cmp	r3, #6
 8003808:	d902      	bls.n	8003810 <menu+0x2678>
		   		yukariValfTmr = 5;
 800380a:	4b2f      	ldr	r3, [pc, #188]	; (80038c8 <menu+0x2730>)
 800380c:	2205      	movs	r2, #5
 800380e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003810:	f001 f95c 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003814:	2108      	movs	r1, #8
 8003816:	4822      	ldr	r0, [pc, #136]	; (80038a0 <menu+0x2708>)
 8003818:	f005 fef8 	bl	800960c <HAL_GPIO_ReadPin>
 800381c:	4603      	mov	r3, r0
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10d      	bne.n	800383e <menu+0x26a6>
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <menu+0x270c>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	f083 0301 	eor.w	r3, r3, #1
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d006      	beq.n	800383e <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003830:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <menu+0x2730>)
 8003832:	781a      	ldrb	r2, [r3, #0]
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <menu+0x2710>)
 8003836:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003838:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <menu+0x2718>)
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 800383e:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <menu+0x271c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b17      	cmp	r3, #23
 8003844:	f040 80ac 	bne.w	80039a0 <menu+0x2808>
		if(dilSecim == 0) {
 8003848:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <menu+0x26ec>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d105      	bne.n	800385c <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003850:	4a1f      	ldr	r2, [pc, #124]	; (80038d0 <menu+0x2738>)
 8003852:	2101      	movs	r1, #1
 8003854:	2001      	movs	r0, #1
 8003856:	f004 fbb3 	bl	8007fc0 <lcd_print>
 800385a:	e008      	b.n	800386e <menu+0x26d6>
		} else if(dilSecim == 1) {
 800385c:	4b09      	ldr	r3, [pc, #36]	; (8003884 <menu+0x26ec>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d104      	bne.n	800386e <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003864:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <menu+0x273c>)
 8003866:	2101      	movs	r1, #1
 8003868:	2001      	movs	r0, #1
 800386a:	f004 fba9 	bl	8007fc0 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <menu+0x26ec>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d130      	bne.n	80038d8 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003876:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <menu+0x2728>)
 8003878:	2101      	movs	r1, #1
 800387a:	2002      	movs	r0, #2
 800387c:	f004 fba0 	bl	8007fc0 <lcd_print>
 8003880:	e033      	b.n	80038ea <menu+0x2752>
 8003882:	bf00      	nop
 8003884:	20000241 	.word	0x20000241
 8003888:	0800db68 	.word	0x0800db68
 800388c:	20000233 	.word	0x20000233
 8003890:	0800db0c 	.word	0x0800db0c
 8003894:	0800db20 	.word	0x0800db20
 8003898:	0800db30 	.word	0x0800db30
 800389c:	0800db44 	.word	0x0800db44
 80038a0:	40010800 	.word	0x40010800
 80038a4:	2000024f 	.word	0x2000024f
 80038a8:	20000118 	.word	0x20000118
 80038ac:	20000226 	.word	0x20000226
 80038b0:	2000024c 	.word	0x2000024c
 80038b4:	20000220 	.word	0x20000220
 80038b8:	0800db78 	.word	0x0800db78
 80038bc:	0800db8c 	.word	0x0800db8c
 80038c0:	0800d82c 	.word	0x0800d82c
 80038c4:	0800dba0 	.word	0x0800dba0
 80038c8:	20000234 	.word	0x20000234
 80038cc:	20000188 	.word	0x20000188
 80038d0:	0800dbb0 	.word	0x0800dbb0
 80038d4:	0800dbc4 	.word	0x0800dbc4
			} else if(dilSecim == 1) {
 80038d8:	4b98      	ldr	r3, [pc, #608]	; (8003b3c <menu+0x29a4>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d104      	bne.n	80038ea <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 80038e0:	4a97      	ldr	r2, [pc, #604]	; (8003b40 <menu+0x29a8>)
 80038e2:	2101      	movs	r1, #1
 80038e4:	2002      	movs	r0, #2
 80038e6:	f004 fb6b 	bl	8007fc0 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 80038ea:	4b96      	ldr	r3, [pc, #600]	; (8003b44 <menu+0x29ac>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	220a      	movs	r2, #10
 80038f0:	4995      	ldr	r1, [pc, #596]	; (8003b48 <menu+0x29b0>)
 80038f2:	4618      	mov	r0, r3
 80038f4:	f008 feb6 	bl	800c664 <itoa>
		lcd_print(2,16,snum);
 80038f8:	4a93      	ldr	r2, [pc, #588]	; (8003b48 <menu+0x29b0>)
 80038fa:	2110      	movs	r1, #16
 80038fc:	2002      	movs	r0, #2
 80038fe:	f004 fb5f 	bl	8007fc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003902:	2102      	movs	r1, #2
 8003904:	4891      	ldr	r0, [pc, #580]	; (8003b4c <menu+0x29b4>)
 8003906:	f005 fe81 	bl	800960c <HAL_GPIO_ReadPin>
 800390a:	4603      	mov	r3, r0
 800390c:	2b01      	cmp	r3, #1
 800390e:	d115      	bne.n	800393c <menu+0x27a4>
 8003910:	4b8f      	ldr	r3, [pc, #572]	; (8003b50 <menu+0x29b8>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	f083 0301 	eor.w	r3, r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00e      	beq.n	800393c <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 800391e:	4b89      	ldr	r3, [pc, #548]	; (8003b44 <menu+0x29ac>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	3301      	adds	r3, #1
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4b87      	ldr	r3, [pc, #540]	; (8003b44 <menu+0x29ac>)
 8003928:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 800392a:	4b86      	ldr	r3, [pc, #536]	; (8003b44 <menu+0x29ac>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b05      	cmp	r3, #5
 8003930:	d902      	bls.n	8003938 <menu+0x27a0>
				asagiValfTmr = 0;
 8003932:	4b84      	ldr	r3, [pc, #528]	; (8003b44 <menu+0x29ac>)
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003938:	f001 f8c8 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800393c:	2104      	movs	r1, #4
 800393e:	4883      	ldr	r0, [pc, #524]	; (8003b4c <menu+0x29b4>)
 8003940:	f005 fe64 	bl	800960c <HAL_GPIO_ReadPin>
 8003944:	4603      	mov	r3, r0
 8003946:	2b01      	cmp	r3, #1
 8003948:	d115      	bne.n	8003976 <menu+0x27de>
 800394a:	4b81      	ldr	r3, [pc, #516]	; (8003b50 <menu+0x29b8>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	f083 0301 	eor.w	r3, r3, #1
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00e      	beq.n	8003976 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003958:	4b7a      	ldr	r3, [pc, #488]	; (8003b44 <menu+0x29ac>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	3b01      	subs	r3, #1
 800395e:	b2da      	uxtb	r2, r3
 8003960:	4b78      	ldr	r3, [pc, #480]	; (8003b44 <menu+0x29ac>)
 8003962:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003964:	4b77      	ldr	r3, [pc, #476]	; (8003b44 <menu+0x29ac>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b06      	cmp	r3, #6
 800396a:	d902      	bls.n	8003972 <menu+0x27da>
		   		asagiValfTmr = 5;
 800396c:	4b75      	ldr	r3, [pc, #468]	; (8003b44 <menu+0x29ac>)
 800396e:	2205      	movs	r2, #5
 8003970:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003972:	f001 f8ab 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003976:	2108      	movs	r1, #8
 8003978:	4874      	ldr	r0, [pc, #464]	; (8003b4c <menu+0x29b4>)
 800397a:	f005 fe47 	bl	800960c <HAL_GPIO_ReadPin>
 800397e:	4603      	mov	r3, r0
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10d      	bne.n	80039a0 <menu+0x2808>
 8003984:	4b72      	ldr	r3, [pc, #456]	; (8003b50 <menu+0x29b8>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	f083 0301 	eor.w	r3, r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d006      	beq.n	80039a0 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003992:	4b6c      	ldr	r3, [pc, #432]	; (8003b44 <menu+0x29ac>)
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	4b6f      	ldr	r3, [pc, #444]	; (8003b54 <menu+0x29bc>)
 8003998:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 800399a:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <menu+0x29c0>)
 800399c:	2201      	movs	r2, #1
 800399e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80039a0:	4b6e      	ldr	r3, [pc, #440]	; (8003b5c <menu+0x29c4>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b18      	cmp	r3, #24
 80039a6:	f040 809d 	bne.w	8003ae4 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 80039aa:	4b6d      	ldr	r3, [pc, #436]	; (8003b60 <menu+0x29c8>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d113      	bne.n	80039da <menu+0x2842>
			if(dilSecim == 0) {
 80039b2:	4b62      	ldr	r3, [pc, #392]	; (8003b3c <menu+0x29a4>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d105      	bne.n	80039c6 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 80039ba:	4a6a      	ldr	r2, [pc, #424]	; (8003b64 <menu+0x29cc>)
 80039bc:	2101      	movs	r1, #1
 80039be:	2001      	movs	r0, #1
 80039c0:	f004 fafe 	bl	8007fc0 <lcd_print>
 80039c4:	e020      	b.n	8003a08 <menu+0x2870>
			} else if(dilSecim == 1) {
 80039c6:	4b5d      	ldr	r3, [pc, #372]	; (8003b3c <menu+0x29a4>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d11c      	bne.n	8003a08 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 80039ce:	4a66      	ldr	r2, [pc, #408]	; (8003b68 <menu+0x29d0>)
 80039d0:	2101      	movs	r1, #1
 80039d2:	2001      	movs	r0, #1
 80039d4:	f004 faf4 	bl	8007fc0 <lcd_print>
 80039d8:	e016      	b.n	8003a08 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80039da:	4b61      	ldr	r3, [pc, #388]	; (8003b60 <menu+0x29c8>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d112      	bne.n	8003a08 <menu+0x2870>
			if(dilSecim == 0) {
 80039e2:	4b56      	ldr	r3, [pc, #344]	; (8003b3c <menu+0x29a4>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d105      	bne.n	80039f6 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 80039ea:	4a60      	ldr	r2, [pc, #384]	; (8003b6c <menu+0x29d4>)
 80039ec:	2101      	movs	r1, #1
 80039ee:	2001      	movs	r0, #1
 80039f0:	f004 fae6 	bl	8007fc0 <lcd_print>
 80039f4:	e008      	b.n	8003a08 <menu+0x2870>
			} else if(dilSecim == 1) {
 80039f6:	4b51      	ldr	r3, [pc, #324]	; (8003b3c <menu+0x29a4>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d104      	bne.n	8003a08 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 80039fe:	4a5c      	ldr	r2, [pc, #368]	; (8003b70 <menu+0x29d8>)
 8003a00:	2101      	movs	r1, #1
 8003a02:	2001      	movs	r0, #1
 8003a04:	f004 fadc 	bl	8007fc0 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003a08:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <menu+0x29a4>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a10:	4a58      	ldr	r2, [pc, #352]	; (8003b74 <menu+0x29dc>)
 8003a12:	2101      	movs	r1, #1
 8003a14:	2002      	movs	r0, #2
 8003a16:	f004 fad3 	bl	8007fc0 <lcd_print>
 8003a1a:	e008      	b.n	8003a2e <menu+0x2896>
			} else if(dilSecim == 1) {
 8003a1c:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <menu+0x29a4>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d104      	bne.n	8003a2e <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003a24:	4a46      	ldr	r2, [pc, #280]	; (8003b40 <menu+0x29a8>)
 8003a26:	2101      	movs	r1, #1
 8003a28:	2002      	movs	r0, #2
 8003a2a:	f004 fac9 	bl	8007fc0 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003a2e:	4b52      	ldr	r3, [pc, #328]	; (8003b78 <menu+0x29e0>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	220a      	movs	r2, #10
 8003a34:	4944      	ldr	r1, [pc, #272]	; (8003b48 <menu+0x29b0>)
 8003a36:	4618      	mov	r0, r3
 8003a38:	f008 fe14 	bl	800c664 <itoa>
		lcd_print(2, 16, snum);
 8003a3c:	4a42      	ldr	r2, [pc, #264]	; (8003b48 <menu+0x29b0>)
 8003a3e:	2110      	movs	r1, #16
 8003a40:	2002      	movs	r0, #2
 8003a42:	f004 fabd 	bl	8007fc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a46:	2102      	movs	r1, #2
 8003a48:	4840      	ldr	r0, [pc, #256]	; (8003b4c <menu+0x29b4>)
 8003a4a:	f005 fddf 	bl	800960c <HAL_GPIO_ReadPin>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d115      	bne.n	8003a80 <menu+0x28e8>
 8003a54:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <menu+0x29b8>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	f083 0301 	eor.w	r3, r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00e      	beq.n	8003a80 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003a62:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <menu+0x29e0>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	3301      	adds	r3, #1
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4b43      	ldr	r3, [pc, #268]	; (8003b78 <menu+0x29e0>)
 8003a6c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003a6e:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <menu+0x29e0>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b05      	cmp	r3, #5
 8003a74:	d902      	bls.n	8003a7c <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003a76:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <menu+0x29e0>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a7c:	f001 f826 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a80:	2104      	movs	r1, #4
 8003a82:	4832      	ldr	r0, [pc, #200]	; (8003b4c <menu+0x29b4>)
 8003a84:	f005 fdc2 	bl	800960c <HAL_GPIO_ReadPin>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d115      	bne.n	8003aba <menu+0x2922>
 8003a8e:	4b30      	ldr	r3, [pc, #192]	; (8003b50 <menu+0x29b8>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	f083 0301 	eor.w	r3, r3, #1
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00e      	beq.n	8003aba <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003a9c:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <menu+0x29e0>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	4b34      	ldr	r3, [pc, #208]	; (8003b78 <menu+0x29e0>)
 8003aa6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003aa8:	4b33      	ldr	r3, [pc, #204]	; (8003b78 <menu+0x29e0>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b06      	cmp	r3, #6
 8003aae:	d902      	bls.n	8003ab6 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003ab0:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <menu+0x29e0>)
 8003ab2:	2205      	movs	r2, #5
 8003ab4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ab6:	f001 f809 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aba:	2108      	movs	r1, #8
 8003abc:	4823      	ldr	r0, [pc, #140]	; (8003b4c <menu+0x29b4>)
 8003abe:	f005 fda5 	bl	800960c <HAL_GPIO_ReadPin>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d10d      	bne.n	8003ae4 <menu+0x294c>
 8003ac8:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <menu+0x29b8>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	f083 0301 	eor.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d006      	beq.n	8003ae4 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003ad6:	4b28      	ldr	r3, [pc, #160]	; (8003b78 <menu+0x29e0>)
 8003ad8:	781a      	ldrb	r2, [r3, #0]
 8003ada:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <menu+0x29bc>)
 8003adc:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003ade:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <menu+0x29c0>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <menu+0x29c4>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b19      	cmp	r3, #25
 8003aea:	f040 80c4 	bne.w	8003c76 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003aee:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <menu+0x29c8>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d113      	bne.n	8003b1e <menu+0x2986>
			if(dilSecim == 0) {
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <menu+0x29a4>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d105      	bne.n	8003b0a <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003afe:	4a1f      	ldr	r2, [pc, #124]	; (8003b7c <menu+0x29e4>)
 8003b00:	2101      	movs	r1, #1
 8003b02:	2001      	movs	r0, #1
 8003b04:	f004 fa5c 	bl	8007fc0 <lcd_print>
 8003b08:	e047      	b.n	8003b9a <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <menu+0x29a4>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d143      	bne.n	8003b9a <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003b12:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <menu+0x29e8>)
 8003b14:	2101      	movs	r1, #1
 8003b16:	2001      	movs	r0, #1
 8003b18:	f004 fa52 	bl	8007fc0 <lcd_print>
 8003b1c:	e03d      	b.n	8003b9a <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <menu+0x29c8>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d139      	bne.n	8003b9a <menu+0x2a02>
			if(dilSecim == 0) {
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <menu+0x29a4>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d12c      	bne.n	8003b88 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003b2e:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <menu+0x29ec>)
 8003b30:	2101      	movs	r1, #1
 8003b32:	2001      	movs	r0, #1
 8003b34:	f004 fa44 	bl	8007fc0 <lcd_print>
 8003b38:	e02f      	b.n	8003b9a <menu+0x2a02>
 8003b3a:	bf00      	nop
 8003b3c:	20000241 	.word	0x20000241
 8003b40:	0800dba0 	.word	0x0800dba0
 8003b44:	20000235 	.word	0x20000235
 8003b48:	20000188 	.word	0x20000188
 8003b4c:	40010800 	.word	0x40010800
 8003b50:	2000024f 	.word	0x2000024f
 8003b54:	20000118 	.word	0x20000118
 8003b58:	2000024c 	.word	0x2000024c
 8003b5c:	20000220 	.word	0x20000220
 8003b60:	2000022f 	.word	0x2000022f
 8003b64:	0800dbd8 	.word	0x0800dbd8
 8003b68:	0800dbec 	.word	0x0800dbec
 8003b6c:	0800dc00 	.word	0x0800dc00
 8003b70:	0800dc14 	.word	0x0800dc14
 8003b74:	0800d82c 	.word	0x0800d82c
 8003b78:	20000236 	.word	0x20000236
 8003b7c:	0800dc28 	.word	0x0800dc28
 8003b80:	0800dc3c 	.word	0x0800dc3c
 8003b84:	0800dc50 	.word	0x0800dc50
			} else if(dilSecim == 1) {
 8003b88:	4b73      	ldr	r3, [pc, #460]	; (8003d58 <menu+0x2bc0>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d104      	bne.n	8003b9a <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003b90:	4a72      	ldr	r2, [pc, #456]	; (8003d5c <menu+0x2bc4>)
 8003b92:	2101      	movs	r1, #1
 8003b94:	2001      	movs	r0, #1
 8003b96:	f004 fa13 	bl	8007fc0 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003b9a:	4b6f      	ldr	r3, [pc, #444]	; (8003d58 <menu+0x2bc0>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ba2:	4a6f      	ldr	r2, [pc, #444]	; (8003d60 <menu+0x2bc8>)
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	2002      	movs	r0, #2
 8003ba8:	f004 fa0a 	bl	8007fc0 <lcd_print>
 8003bac:	e008      	b.n	8003bc0 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003bae:	4b6a      	ldr	r3, [pc, #424]	; (8003d58 <menu+0x2bc0>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d104      	bne.n	8003bc0 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003bb6:	4a6b      	ldr	r2, [pc, #428]	; (8003d64 <menu+0x2bcc>)
 8003bb8:	2101      	movs	r1, #1
 8003bba:	2002      	movs	r0, #2
 8003bbc:	f004 fa00 	bl	8007fc0 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003bc0:	4b69      	ldr	r3, [pc, #420]	; (8003d68 <menu+0x2bd0>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	220a      	movs	r2, #10
 8003bc6:	4969      	ldr	r1, [pc, #420]	; (8003d6c <menu+0x2bd4>)
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f008 fd4b 	bl	800c664 <itoa>
		lcd_print(2,16,snum);
 8003bce:	4a67      	ldr	r2, [pc, #412]	; (8003d6c <menu+0x2bd4>)
 8003bd0:	2110      	movs	r1, #16
 8003bd2:	2002      	movs	r0, #2
 8003bd4:	f004 f9f4 	bl	8007fc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bd8:	2102      	movs	r1, #2
 8003bda:	4865      	ldr	r0, [pc, #404]	; (8003d70 <menu+0x2bd8>)
 8003bdc:	f005 fd16 	bl	800960c <HAL_GPIO_ReadPin>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d115      	bne.n	8003c12 <menu+0x2a7a>
 8003be6:	4b63      	ldr	r3, [pc, #396]	; (8003d74 <menu+0x2bdc>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	f083 0301 	eor.w	r3, r3, #1
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00e      	beq.n	8003c12 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003bf4:	4b5c      	ldr	r3, [pc, #368]	; (8003d68 <menu+0x2bd0>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	4b5a      	ldr	r3, [pc, #360]	; (8003d68 <menu+0x2bd0>)
 8003bfe:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003c00:	4b59      	ldr	r3, [pc, #356]	; (8003d68 <menu+0x2bd0>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b05      	cmp	r3, #5
 8003c06:	d902      	bls.n	8003c0e <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003c08:	4b57      	ldr	r3, [pc, #348]	; (8003d68 <menu+0x2bd0>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c0e:	f000 ff5d 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c12:	2104      	movs	r1, #4
 8003c14:	4856      	ldr	r0, [pc, #344]	; (8003d70 <menu+0x2bd8>)
 8003c16:	f005 fcf9 	bl	800960c <HAL_GPIO_ReadPin>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d115      	bne.n	8003c4c <menu+0x2ab4>
 8003c20:	4b54      	ldr	r3, [pc, #336]	; (8003d74 <menu+0x2bdc>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	f083 0301 	eor.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00e      	beq.n	8003c4c <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003c2e:	4b4e      	ldr	r3, [pc, #312]	; (8003d68 <menu+0x2bd0>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	4b4c      	ldr	r3, [pc, #304]	; (8003d68 <menu+0x2bd0>)
 8003c38:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003c3a:	4b4b      	ldr	r3, [pc, #300]	; (8003d68 <menu+0x2bd0>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d902      	bls.n	8003c48 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003c42:	4b49      	ldr	r3, [pc, #292]	; (8003d68 <menu+0x2bd0>)
 8003c44:	2205      	movs	r2, #5
 8003c46:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c48:	f000 ff40 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c4c:	2108      	movs	r1, #8
 8003c4e:	4848      	ldr	r0, [pc, #288]	; (8003d70 <menu+0x2bd8>)
 8003c50:	f005 fcdc 	bl	800960c <HAL_GPIO_ReadPin>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d10d      	bne.n	8003c76 <menu+0x2ade>
 8003c5a:	4b46      	ldr	r3, [pc, #280]	; (8003d74 <menu+0x2bdc>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	f083 0301 	eor.w	r3, r3, #1
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d006      	beq.n	8003c76 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003c68:	4b3f      	ldr	r3, [pc, #252]	; (8003d68 <menu+0x2bd0>)
 8003c6a:	781a      	ldrb	r2, [r3, #0]
 8003c6c:	4b42      	ldr	r3, [pc, #264]	; (8003d78 <menu+0x2be0>)
 8003c6e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003c70:	4b42      	ldr	r3, [pc, #264]	; (8003d7c <menu+0x2be4>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003c76:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <menu+0x2be8>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b1a      	cmp	r3, #26
 8003c7c:	f040 80ec 	bne.w	8003e58 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003c80:	4b35      	ldr	r3, [pc, #212]	; (8003d58 <menu+0x2bc0>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003c88:	4a3e      	ldr	r2, [pc, #248]	; (8003d84 <menu+0x2bec>)
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	f004 f997 	bl	8007fc0 <lcd_print>
 8003c92:	e008      	b.n	8003ca6 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003c94:	4b30      	ldr	r3, [pc, #192]	; (8003d58 <menu+0x2bc0>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d104      	bne.n	8003ca6 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003c9c:	4a3a      	ldr	r2, [pc, #232]	; (8003d88 <menu+0x2bf0>)
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	f004 f98d 	bl	8007fc0 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003ca6:	4b39      	ldr	r3, [pc, #228]	; (8003d8c <menu+0x2bf4>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b63      	cmp	r3, #99	; 0x63
 8003cac:	d91e      	bls.n	8003cec <menu+0x2b54>
			if(dilSecim == 0) {
 8003cae:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <menu+0x2bc0>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d104      	bne.n	8003cc0 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cb6:	4a2a      	ldr	r2, [pc, #168]	; (8003d60 <menu+0x2bc8>)
 8003cb8:	2101      	movs	r1, #1
 8003cba:	2002      	movs	r0, #2
 8003cbc:	f004 f980 	bl	8007fc0 <lcd_print>
			}
			if(dilSecim == 1) {
 8003cc0:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <menu+0x2bc0>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d104      	bne.n	8003cd2 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003cc8:	4a26      	ldr	r2, [pc, #152]	; (8003d64 <menu+0x2bcc>)
 8003cca:	2101      	movs	r1, #1
 8003ccc:	2002      	movs	r0, #2
 8003cce:	f004 f977 	bl	8007fc0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003cd2:	4b2e      	ldr	r3, [pc, #184]	; (8003d8c <menu+0x2bf4>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	220a      	movs	r2, #10
 8003cd8:	4924      	ldr	r1, [pc, #144]	; (8003d6c <menu+0x2bd4>)
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f008 fcc2 	bl	800c664 <itoa>
			lcd_print(2,14,snum);
 8003ce0:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <menu+0x2bd4>)
 8003ce2:	210e      	movs	r1, #14
 8003ce4:	2002      	movs	r0, #2
 8003ce6:	f004 f96b 	bl	8007fc0 <lcd_print>
 8003cea:	e066      	b.n	8003dba <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003cec:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <menu+0x2bf4>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b09      	cmp	r3, #9
 8003cf2:	d923      	bls.n	8003d3c <menu+0x2ba4>
 8003cf4:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <menu+0x2bf4>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b63      	cmp	r3, #99	; 0x63
 8003cfa:	d81f      	bhi.n	8003d3c <menu+0x2ba4>
			if(dilSecim == 0) {
 8003cfc:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <menu+0x2bc0>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d105      	bne.n	8003d10 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d04:	4a16      	ldr	r2, [pc, #88]	; (8003d60 <menu+0x2bc8>)
 8003d06:	2101      	movs	r1, #1
 8003d08:	2002      	movs	r0, #2
 8003d0a:	f004 f959 	bl	8007fc0 <lcd_print>
 8003d0e:	e008      	b.n	8003d22 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <menu+0x2bc0>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d104      	bne.n	8003d22 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003d18:	4a12      	ldr	r2, [pc, #72]	; (8003d64 <menu+0x2bcc>)
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	2002      	movs	r0, #2
 8003d1e:	f004 f94f 	bl	8007fc0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d22:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <menu+0x2bf4>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	220a      	movs	r2, #10
 8003d28:	4910      	ldr	r1, [pc, #64]	; (8003d6c <menu+0x2bd4>)
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f008 fc9a 	bl	800c664 <itoa>
			lcd_print(2, 15, snum);
 8003d30:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <menu+0x2bd4>)
 8003d32:	210f      	movs	r1, #15
 8003d34:	2002      	movs	r0, #2
 8003d36:	f004 f943 	bl	8007fc0 <lcd_print>
 8003d3a:	e03e      	b.n	8003dba <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <menu+0x2bf4>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b09      	cmp	r3, #9
 8003d42:	d83a      	bhi.n	8003dba <menu+0x2c22>
			if(dilSecim == 0) {
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <menu+0x2bc0>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d121      	bne.n	8003d90 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d4c:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <menu+0x2bc8>)
 8003d4e:	2101      	movs	r1, #1
 8003d50:	2002      	movs	r0, #2
 8003d52:	f004 f935 	bl	8007fc0 <lcd_print>
 8003d56:	e024      	b.n	8003da2 <menu+0x2c0a>
 8003d58:	20000241 	.word	0x20000241
 8003d5c:	0800dc64 	.word	0x0800dc64
 8003d60:	0800d82c 	.word	0x0800d82c
 8003d64:	0800dba0 	.word	0x0800dba0
 8003d68:	20000237 	.word	0x20000237
 8003d6c:	20000188 	.word	0x20000188
 8003d70:	40010800 	.word	0x40010800
 8003d74:	2000024f 	.word	0x2000024f
 8003d78:	20000118 	.word	0x20000118
 8003d7c:	2000024c 	.word	0x2000024c
 8003d80:	20000220 	.word	0x20000220
 8003d84:	0800dc78 	.word	0x0800dc78
 8003d88:	0800dc8c 	.word	0x0800dc8c
 8003d8c:	20000238 	.word	0x20000238
			} else if(dilSecim == 1) {
 8003d90:	4b8f      	ldr	r3, [pc, #572]	; (8003fd0 <menu+0x2e38>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d104      	bne.n	8003da2 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003d98:	4a8e      	ldr	r2, [pc, #568]	; (8003fd4 <menu+0x2e3c>)
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	2002      	movs	r0, #2
 8003d9e:	f004 f90f 	bl	8007fc0 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003da2:	4b8d      	ldr	r3, [pc, #564]	; (8003fd8 <menu+0x2e40>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	220a      	movs	r2, #10
 8003da8:	498c      	ldr	r1, [pc, #560]	; (8003fdc <menu+0x2e44>)
 8003daa:	4618      	mov	r0, r3
 8003dac:	f008 fc5a 	bl	800c664 <itoa>
			lcd_print(2, 16, snum);
 8003db0:	4a8a      	ldr	r2, [pc, #552]	; (8003fdc <menu+0x2e44>)
 8003db2:	2110      	movs	r1, #16
 8003db4:	2002      	movs	r0, #2
 8003db6:	f004 f903 	bl	8007fc0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4888      	ldr	r0, [pc, #544]	; (8003fe0 <menu+0x2e48>)
 8003dbe:	f005 fc25 	bl	800960c <HAL_GPIO_ReadPin>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d115      	bne.n	8003df4 <menu+0x2c5c>
 8003dc8:	4b86      	ldr	r3, [pc, #536]	; (8003fe4 <menu+0x2e4c>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	f083 0301 	eor.w	r3, r3, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00e      	beq.n	8003df4 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003dd6:	4b80      	ldr	r3, [pc, #512]	; (8003fd8 <menu+0x2e40>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	4b7e      	ldr	r3, [pc, #504]	; (8003fd8 <menu+0x2e40>)
 8003de0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003de2:	4b7d      	ldr	r3, [pc, #500]	; (8003fd8 <menu+0x2e40>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2bb4      	cmp	r3, #180	; 0xb4
 8003de8:	d902      	bls.n	8003df0 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003dea:	4b7b      	ldr	r3, [pc, #492]	; (8003fd8 <menu+0x2e40>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003df0:	f000 fe6c 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003df4:	2104      	movs	r1, #4
 8003df6:	487a      	ldr	r0, [pc, #488]	; (8003fe0 <menu+0x2e48>)
 8003df8:	f005 fc08 	bl	800960c <HAL_GPIO_ReadPin>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d115      	bne.n	8003e2e <menu+0x2c96>
 8003e02:	4b78      	ldr	r3, [pc, #480]	; (8003fe4 <menu+0x2e4c>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	f083 0301 	eor.w	r3, r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00e      	beq.n	8003e2e <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003e10:	4b71      	ldr	r3, [pc, #452]	; (8003fd8 <menu+0x2e40>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	4b6f      	ldr	r3, [pc, #444]	; (8003fd8 <menu+0x2e40>)
 8003e1a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003e1c:	4b6e      	ldr	r3, [pc, #440]	; (8003fd8 <menu+0x2e40>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2bb5      	cmp	r3, #181	; 0xb5
 8003e22:	d902      	bls.n	8003e2a <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003e24:	4b6c      	ldr	r3, [pc, #432]	; (8003fd8 <menu+0x2e40>)
 8003e26:	22b4      	movs	r2, #180	; 0xb4
 8003e28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e2a:	f000 fe4f 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e2e:	2108      	movs	r1, #8
 8003e30:	486b      	ldr	r0, [pc, #428]	; (8003fe0 <menu+0x2e48>)
 8003e32:	f005 fbeb 	bl	800960c <HAL_GPIO_ReadPin>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d10d      	bne.n	8003e58 <menu+0x2cc0>
 8003e3c:	4b69      	ldr	r3, [pc, #420]	; (8003fe4 <menu+0x2e4c>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	f083 0301 	eor.w	r3, r3, #1
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d006      	beq.n	8003e58 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003e4a:	4b63      	ldr	r3, [pc, #396]	; (8003fd8 <menu+0x2e40>)
 8003e4c:	781a      	ldrb	r2, [r3, #0]
 8003e4e:	4b66      	ldr	r3, [pc, #408]	; (8003fe8 <menu+0x2e50>)
 8003e50:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003e52:	4b66      	ldr	r3, [pc, #408]	; (8003fec <menu+0x2e54>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003e58:	4b65      	ldr	r3, [pc, #404]	; (8003ff0 <menu+0x2e58>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b1b      	cmp	r3, #27
 8003e5e:	f040 8083 	bne.w	8003f68 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003e62:	4a64      	ldr	r2, [pc, #400]	; (8003ff4 <menu+0x2e5c>)
 8003e64:	2101      	movs	r1, #1
 8003e66:	2001      	movs	r0, #1
 8003e68:	f004 f8aa 	bl	8007fc0 <lcd_print>

		if(buzzer == 0) {
 8003e6c:	4b62      	ldr	r3, [pc, #392]	; (8003ff8 <menu+0x2e60>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d113      	bne.n	8003e9c <menu+0x2d04>
			if(dilSecim == 0) {
 8003e74:	4b56      	ldr	r3, [pc, #344]	; (8003fd0 <menu+0x2e38>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003e7c:	4a5f      	ldr	r2, [pc, #380]	; (8003ffc <menu+0x2e64>)
 8003e7e:	2101      	movs	r1, #1
 8003e80:	2002      	movs	r0, #2
 8003e82:	f004 f89d 	bl	8007fc0 <lcd_print>
 8003e86:	e020      	b.n	8003eca <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003e88:	4b51      	ldr	r3, [pc, #324]	; (8003fd0 <menu+0x2e38>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d11c      	bne.n	8003eca <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003e90:	4a5b      	ldr	r2, [pc, #364]	; (8004000 <menu+0x2e68>)
 8003e92:	2101      	movs	r1, #1
 8003e94:	2002      	movs	r0, #2
 8003e96:	f004 f893 	bl	8007fc0 <lcd_print>
 8003e9a:	e016      	b.n	8003eca <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003e9c:	4b56      	ldr	r3, [pc, #344]	; (8003ff8 <menu+0x2e60>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d112      	bne.n	8003eca <menu+0x2d32>
			if(dilSecim == 0) {
 8003ea4:	4b4a      	ldr	r3, [pc, #296]	; (8003fd0 <menu+0x2e38>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003eac:	4a55      	ldr	r2, [pc, #340]	; (8004004 <menu+0x2e6c>)
 8003eae:	2101      	movs	r1, #1
 8003eb0:	2002      	movs	r0, #2
 8003eb2:	f004 f885 	bl	8007fc0 <lcd_print>
 8003eb6:	e008      	b.n	8003eca <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003eb8:	4b45      	ldr	r3, [pc, #276]	; (8003fd0 <menu+0x2e38>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d104      	bne.n	8003eca <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003ec0:	4a51      	ldr	r2, [pc, #324]	; (8004008 <menu+0x2e70>)
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	2002      	movs	r0, #2
 8003ec6:	f004 f87b 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eca:	2102      	movs	r1, #2
 8003ecc:	4844      	ldr	r0, [pc, #272]	; (8003fe0 <menu+0x2e48>)
 8003ece:	f005 fb9d 	bl	800960c <HAL_GPIO_ReadPin>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d115      	bne.n	8003f04 <menu+0x2d6c>
 8003ed8:	4b42      	ldr	r3, [pc, #264]	; (8003fe4 <menu+0x2e4c>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	f083 0301 	eor.w	r3, r3, #1
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00e      	beq.n	8003f04 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003ee6:	4b44      	ldr	r3, [pc, #272]	; (8003ff8 <menu+0x2e60>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	3301      	adds	r3, #1
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4b42      	ldr	r3, [pc, #264]	; (8003ff8 <menu+0x2e60>)
 8003ef0:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003ef2:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <menu+0x2e60>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d902      	bls.n	8003f00 <menu+0x2d68>
				buzzer = 0;
 8003efa:	4b3f      	ldr	r3, [pc, #252]	; (8003ff8 <menu+0x2e60>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f00:	f000 fde4 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f04:	2104      	movs	r1, #4
 8003f06:	4836      	ldr	r0, [pc, #216]	; (8003fe0 <menu+0x2e48>)
 8003f08:	f005 fb80 	bl	800960c <HAL_GPIO_ReadPin>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d115      	bne.n	8003f3e <menu+0x2da6>
 8003f12:	4b34      	ldr	r3, [pc, #208]	; (8003fe4 <menu+0x2e4c>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	f083 0301 	eor.w	r3, r3, #1
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00e      	beq.n	8003f3e <menu+0x2da6>
			buzzer = buzzer - 1;
 8003f20:	4b35      	ldr	r3, [pc, #212]	; (8003ff8 <menu+0x2e60>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	4b33      	ldr	r3, [pc, #204]	; (8003ff8 <menu+0x2e60>)
 8003f2a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003f2c:	4b32      	ldr	r3, [pc, #200]	; (8003ff8 <menu+0x2e60>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <menu+0x2da2>
		   		buzzer = 1;
 8003f34:	4b30      	ldr	r3, [pc, #192]	; (8003ff8 <menu+0x2e60>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f3a:	f000 fdc7 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f3e:	2108      	movs	r1, #8
 8003f40:	4827      	ldr	r0, [pc, #156]	; (8003fe0 <menu+0x2e48>)
 8003f42:	f005 fb63 	bl	800960c <HAL_GPIO_ReadPin>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d10d      	bne.n	8003f68 <menu+0x2dd0>
 8003f4c:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <menu+0x2e4c>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	f083 0301 	eor.w	r3, r3, #1
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d006      	beq.n	8003f68 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003f5a:	4b27      	ldr	r3, [pc, #156]	; (8003ff8 <menu+0x2e60>)
 8003f5c:	781a      	ldrb	r2, [r3, #0]
 8003f5e:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <menu+0x2e50>)
 8003f60:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003f62:	4b22      	ldr	r3, [pc, #136]	; (8003fec <menu+0x2e54>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003f68:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <menu+0x2e58>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b1c      	cmp	r3, #28
 8003f6e:	f040 80ab 	bne.w	80040c8 <menu+0x2f30>
		calismaSayModu = 0;
 8003f72:	4b26      	ldr	r3, [pc, #152]	; (800400c <menu+0x2e74>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003f78:	4a25      	ldr	r2, [pc, #148]	; (8004010 <menu+0x2e78>)
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f004 f81f 	bl	8007fc0 <lcd_print>

		if(demoMode == 0) {
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <menu+0x2e7c>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d113      	bne.n	8003fb2 <menu+0x2e1a>
			if(dilSecim == 0) {
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <menu+0x2e38>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d105      	bne.n	8003f9e <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003f92:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <menu+0x2e64>)
 8003f94:	2101      	movs	r1, #1
 8003f96:	2002      	movs	r0, #2
 8003f98:	f004 f812 	bl	8007fc0 <lcd_print>
 8003f9c:	e045      	b.n	800402a <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <menu+0x2e38>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d141      	bne.n	800402a <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003fa6:	4a16      	ldr	r2, [pc, #88]	; (8004000 <menu+0x2e68>)
 8003fa8:	2101      	movs	r1, #1
 8003faa:	2002      	movs	r0, #2
 8003fac:	f004 f808 	bl	8007fc0 <lcd_print>
 8003fb0:	e03b      	b.n	800402a <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8003fb2:	4b18      	ldr	r3, [pc, #96]	; (8004014 <menu+0x2e7c>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d137      	bne.n	800402a <menu+0x2e92>
			if(dilSecim == 0){
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <menu+0x2e38>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d12a      	bne.n	8004018 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8003fc2:	4a10      	ldr	r2, [pc, #64]	; (8004004 <menu+0x2e6c>)
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	2002      	movs	r0, #2
 8003fc8:	f003 fffa 	bl	8007fc0 <lcd_print>
 8003fcc:	e02d      	b.n	800402a <menu+0x2e92>
 8003fce:	bf00      	nop
 8003fd0:	20000241 	.word	0x20000241
 8003fd4:	0800dba0 	.word	0x0800dba0
 8003fd8:	20000238 	.word	0x20000238
 8003fdc:	20000188 	.word	0x20000188
 8003fe0:	40010800 	.word	0x40010800
 8003fe4:	2000024f 	.word	0x2000024f
 8003fe8:	20000118 	.word	0x20000118
 8003fec:	2000024c 	.word	0x2000024c
 8003ff0:	20000220 	.word	0x20000220
 8003ff4:	0800dca0 	.word	0x0800dca0
 8003ff8:	2000023c 	.word	0x2000023c
 8003ffc:	0800d5c8 	.word	0x0800d5c8
 8004000:	0800d5dc 	.word	0x0800d5dc
 8004004:	0800d628 	.word	0x0800d628
 8004008:	0800d63c 	.word	0x0800d63c
 800400c:	20000240 	.word	0x20000240
 8004010:	0800dcb4 	.word	0x0800dcb4
 8004014:	2000023e 	.word	0x2000023e
			} else if(dilSecim == 1) {
 8004018:	4b71      	ldr	r3, [pc, #452]	; (80041e0 <menu+0x3048>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d104      	bne.n	800402a <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004020:	4a70      	ldr	r2, [pc, #448]	; (80041e4 <menu+0x304c>)
 8004022:	2101      	movs	r1, #1
 8004024:	2002      	movs	r0, #2
 8004026:	f003 ffcb 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800402a:	2102      	movs	r1, #2
 800402c:	486e      	ldr	r0, [pc, #440]	; (80041e8 <menu+0x3050>)
 800402e:	f005 faed 	bl	800960c <HAL_GPIO_ReadPin>
 8004032:	4603      	mov	r3, r0
 8004034:	2b01      	cmp	r3, #1
 8004036:	d115      	bne.n	8004064 <menu+0x2ecc>
 8004038:	4b6c      	ldr	r3, [pc, #432]	; (80041ec <menu+0x3054>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	f083 0301 	eor.w	r3, r3, #1
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00e      	beq.n	8004064 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004046:	4b6a      	ldr	r3, [pc, #424]	; (80041f0 <menu+0x3058>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	3301      	adds	r3, #1
 800404c:	b2da      	uxtb	r2, r3
 800404e:	4b68      	ldr	r3, [pc, #416]	; (80041f0 <menu+0x3058>)
 8004050:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004052:	4b67      	ldr	r3, [pc, #412]	; (80041f0 <menu+0x3058>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d902      	bls.n	8004060 <menu+0x2ec8>
				demoMode = 0;
 800405a:	4b65      	ldr	r3, [pc, #404]	; (80041f0 <menu+0x3058>)
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004060:	f000 fd34 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004064:	2104      	movs	r1, #4
 8004066:	4860      	ldr	r0, [pc, #384]	; (80041e8 <menu+0x3050>)
 8004068:	f005 fad0 	bl	800960c <HAL_GPIO_ReadPin>
 800406c:	4603      	mov	r3, r0
 800406e:	2b01      	cmp	r3, #1
 8004070:	d115      	bne.n	800409e <menu+0x2f06>
 8004072:	4b5e      	ldr	r3, [pc, #376]	; (80041ec <menu+0x3054>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	f083 0301 	eor.w	r3, r3, #1
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00e      	beq.n	800409e <menu+0x2f06>
			demoMode = demoMode - 1;
 8004080:	4b5b      	ldr	r3, [pc, #364]	; (80041f0 <menu+0x3058>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	3b01      	subs	r3, #1
 8004086:	b2da      	uxtb	r2, r3
 8004088:	4b59      	ldr	r3, [pc, #356]	; (80041f0 <menu+0x3058>)
 800408a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800408c:	4b58      	ldr	r3, [pc, #352]	; (80041f0 <menu+0x3058>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <menu+0x2f02>
		   		demoMode = 1;
 8004094:	4b56      	ldr	r3, [pc, #344]	; (80041f0 <menu+0x3058>)
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800409a:	f000 fd17 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800409e:	2108      	movs	r1, #8
 80040a0:	4851      	ldr	r0, [pc, #324]	; (80041e8 <menu+0x3050>)
 80040a2:	f005 fab3 	bl	800960c <HAL_GPIO_ReadPin>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d10d      	bne.n	80040c8 <menu+0x2f30>
 80040ac:	4b4f      	ldr	r3, [pc, #316]	; (80041ec <menu+0x3054>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	f083 0301 	eor.w	r3, r3, #1
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d006      	beq.n	80040c8 <menu+0x2f30>
			eepromData[26] = demoMode;
 80040ba:	4b4d      	ldr	r3, [pc, #308]	; (80041f0 <menu+0x3058>)
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	4b4d      	ldr	r3, [pc, #308]	; (80041f4 <menu+0x305c>)
 80040c0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80040c2:	4b4d      	ldr	r3, [pc, #308]	; (80041f8 <menu+0x3060>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80040c8:	4b4c      	ldr	r3, [pc, #304]	; (80041fc <menu+0x3064>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b1d      	cmp	r3, #29
 80040ce:	f040 8132 	bne.w	8004336 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80040d2:	4b4b      	ldr	r3, [pc, #300]	; (8004200 <menu+0x3068>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d113      	bne.n	8004102 <menu+0x2f6a>
 80040da:	4b4a      	ldr	r3, [pc, #296]	; (8004204 <menu+0x306c>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10f      	bne.n	8004102 <menu+0x2f6a>
 80040e2:	4b49      	ldr	r3, [pc, #292]	; (8004208 <menu+0x3070>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <menu+0x2f6a>
 80040ea:	4b48      	ldr	r3, [pc, #288]	; (800420c <menu+0x3074>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <menu+0x2f6a>
 80040f2:	4b47      	ldr	r3, [pc, #284]	; (8004210 <menu+0x3078>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d103      	bne.n	8004102 <menu+0x2f6a>
			calismaSayisiYar = 0;
 80040fa:	4b46      	ldr	r3, [pc, #280]	; (8004214 <menu+0x307c>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	e002      	b.n	8004108 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004102:	4b44      	ldr	r3, [pc, #272]	; (8004214 <menu+0x307c>)
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004108:	4b43      	ldr	r3, [pc, #268]	; (8004218 <menu+0x3080>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d154      	bne.n	80041ba <menu+0x3022>
			if(dilSecim == 0) {
 8004110:	4b33      	ldr	r3, [pc, #204]	; (80041e0 <menu+0x3048>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004118:	4a40      	ldr	r2, [pc, #256]	; (800421c <menu+0x3084>)
 800411a:	2101      	movs	r1, #1
 800411c:	2001      	movs	r0, #1
 800411e:	f003 ff4f 	bl	8007fc0 <lcd_print>
 8004122:	e008      	b.n	8004136 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004124:	4b2e      	ldr	r3, [pc, #184]	; (80041e0 <menu+0x3048>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d104      	bne.n	8004136 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 800412c:	4a3c      	ldr	r2, [pc, #240]	; (8004220 <menu+0x3088>)
 800412e:	2101      	movs	r1, #1
 8004130:	2001      	movs	r0, #1
 8004132:	f003 ff45 	bl	8007fc0 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004136:	4b36      	ldr	r3, [pc, #216]	; (8004210 <menu+0x3078>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	220a      	movs	r2, #10
 800413c:	4939      	ldr	r1, [pc, #228]	; (8004224 <menu+0x308c>)
 800413e:	4618      	mov	r0, r3
 8004140:	f008 fa90 	bl	800c664 <itoa>
			lcd_print(2, 12, snum);
 8004144:	4a37      	ldr	r2, [pc, #220]	; (8004224 <menu+0x308c>)
 8004146:	210c      	movs	r1, #12
 8004148:	2002      	movs	r0, #2
 800414a:	f003 ff39 	bl	8007fc0 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800414e:	4b2f      	ldr	r3, [pc, #188]	; (800420c <menu+0x3074>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	220a      	movs	r2, #10
 8004154:	4933      	ldr	r1, [pc, #204]	; (8004224 <menu+0x308c>)
 8004156:	4618      	mov	r0, r3
 8004158:	f008 fa84 	bl	800c664 <itoa>
			lcd_print(2, 13, snum);
 800415c:	4a31      	ldr	r2, [pc, #196]	; (8004224 <menu+0x308c>)
 800415e:	210d      	movs	r1, #13
 8004160:	2002      	movs	r0, #2
 8004162:	f003 ff2d 	bl	8007fc0 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004166:	4b28      	ldr	r3, [pc, #160]	; (8004208 <menu+0x3070>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	220a      	movs	r2, #10
 800416c:	492d      	ldr	r1, [pc, #180]	; (8004224 <menu+0x308c>)
 800416e:	4618      	mov	r0, r3
 8004170:	f008 fa78 	bl	800c664 <itoa>
			lcd_print(2, 14, snum);
 8004174:	4a2b      	ldr	r2, [pc, #172]	; (8004224 <menu+0x308c>)
 8004176:	210e      	movs	r1, #14
 8004178:	2002      	movs	r0, #2
 800417a:	f003 ff21 	bl	8007fc0 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800417e:	4b21      	ldr	r3, [pc, #132]	; (8004204 <menu+0x306c>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	220a      	movs	r2, #10
 8004184:	4927      	ldr	r1, [pc, #156]	; (8004224 <menu+0x308c>)
 8004186:	4618      	mov	r0, r3
 8004188:	f008 fa6c 	bl	800c664 <itoa>
			lcd_print(2, 15, snum);
 800418c:	4a25      	ldr	r2, [pc, #148]	; (8004224 <menu+0x308c>)
 800418e:	210f      	movs	r1, #15
 8004190:	2002      	movs	r0, #2
 8004192:	f003 ff15 	bl	8007fc0 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <menu+0x3068>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	220a      	movs	r2, #10
 800419c:	4921      	ldr	r1, [pc, #132]	; (8004224 <menu+0x308c>)
 800419e:	4618      	mov	r0, r3
 80041a0:	f008 fa60 	bl	800c664 <itoa>
			lcd_print(2, 16, snum);
 80041a4:	4a1f      	ldr	r2, [pc, #124]	; (8004224 <menu+0x308c>)
 80041a6:	2110      	movs	r1, #16
 80041a8:	2002      	movs	r0, #2
 80041aa:	f003 ff09 	bl	8007fc0 <lcd_print>

			lcd_print(2, 1, "           ");
 80041ae:	4a1e      	ldr	r2, [pc, #120]	; (8004228 <menu+0x3090>)
 80041b0:	2101      	movs	r1, #1
 80041b2:	2002      	movs	r0, #2
 80041b4:	f003 ff04 	bl	8007fc0 <lcd_print>
 80041b8:	e048      	b.n	800424c <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80041ba:	4b17      	ldr	r3, [pc, #92]	; (8004218 <menu+0x3080>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d144      	bne.n	800424c <menu+0x30b4>
			if(dilSecim == 0) {
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <menu+0x3048>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d132      	bne.n	8004230 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80041ca:	4a14      	ldr	r2, [pc, #80]	; (800421c <menu+0x3084>)
 80041cc:	2101      	movs	r1, #1
 80041ce:	2001      	movs	r0, #1
 80041d0:	f003 fef6 	bl	8007fc0 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80041d4:	4a15      	ldr	r2, [pc, #84]	; (800422c <menu+0x3094>)
 80041d6:	2101      	movs	r1, #1
 80041d8:	2002      	movs	r0, #2
 80041da:	f003 fef1 	bl	8007fc0 <lcd_print>
 80041de:	e035      	b.n	800424c <menu+0x30b4>
 80041e0:	20000241 	.word	0x20000241
 80041e4:	0800d63c 	.word	0x0800d63c
 80041e8:	40010800 	.word	0x40010800
 80041ec:	2000024f 	.word	0x2000024f
 80041f0:	2000023e 	.word	0x2000023e
 80041f4:	20000118 	.word	0x20000118
 80041f8:	2000024c 	.word	0x2000024c
 80041fc:	20000220 	.word	0x20000220
 8004200:	2000021d 	.word	0x2000021d
 8004204:	2000021e 	.word	0x2000021e
 8004208:	20000000 	.word	0x20000000
 800420c:	20000001 	.word	0x20000001
 8004210:	2000021f 	.word	0x2000021f
 8004214:	20000261 	.word	0x20000261
 8004218:	20000240 	.word	0x20000240
 800421c:	0800dcc4 	.word	0x0800dcc4
 8004220:	0800dcd8 	.word	0x0800dcd8
 8004224:	20000188 	.word	0x20000188
 8004228:	0800dcec 	.word	0x0800dcec
 800422c:	0800dcf8 	.word	0x0800dcf8
			} else if(dilSecim == 1) {
 8004230:	4b94      	ldr	r3, [pc, #592]	; (8004484 <menu+0x32ec>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d109      	bne.n	800424c <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004238:	4a93      	ldr	r2, [pc, #588]	; (8004488 <menu+0x32f0>)
 800423a:	2101      	movs	r1, #1
 800423c:	2001      	movs	r0, #1
 800423e:	f003 febf 	bl	8007fc0 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004242:	4a92      	ldr	r2, [pc, #584]	; (800448c <menu+0x32f4>)
 8004244:	2101      	movs	r1, #1
 8004246:	2002      	movs	r0, #2
 8004248:	f003 feba 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800424c:	2102      	movs	r1, #2
 800424e:	4890      	ldr	r0, [pc, #576]	; (8004490 <menu+0x32f8>)
 8004250:	f005 f9dc 	bl	800960c <HAL_GPIO_ReadPin>
 8004254:	4603      	mov	r3, r0
 8004256:	2b01      	cmp	r3, #1
 8004258:	d119      	bne.n	800428e <menu+0x30f6>
 800425a:	4b8e      	ldr	r3, [pc, #568]	; (8004494 <menu+0x32fc>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	f083 0301 	eor.w	r3, r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d012      	beq.n	800428e <menu+0x30f6>
 8004268:	4b8b      	ldr	r3, [pc, #556]	; (8004498 <menu+0x3300>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00e      	beq.n	800428e <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004270:	4b8a      	ldr	r3, [pc, #552]	; (800449c <menu+0x3304>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	3301      	adds	r3, #1
 8004276:	b2da      	uxtb	r2, r3
 8004278:	4b88      	ldr	r3, [pc, #544]	; (800449c <menu+0x3304>)
 800427a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800427c:	4b87      	ldr	r3, [pc, #540]	; (800449c <menu+0x3304>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d902      	bls.n	800428a <menu+0x30f2>
				calismaSayModu = 0;
 8004284:	4b85      	ldr	r3, [pc, #532]	; (800449c <menu+0x3304>)
 8004286:	2200      	movs	r2, #0
 8004288:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800428a:	f000 fc1f 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800428e:	2104      	movs	r1, #4
 8004290:	487f      	ldr	r0, [pc, #508]	; (8004490 <menu+0x32f8>)
 8004292:	f005 f9bb 	bl	800960c <HAL_GPIO_ReadPin>
 8004296:	4603      	mov	r3, r0
 8004298:	2b01      	cmp	r3, #1
 800429a:	d119      	bne.n	80042d0 <menu+0x3138>
 800429c:	4b7d      	ldr	r3, [pc, #500]	; (8004494 <menu+0x32fc>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	f083 0301 	eor.w	r3, r3, #1
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d012      	beq.n	80042d0 <menu+0x3138>
 80042aa:	4b7b      	ldr	r3, [pc, #492]	; (8004498 <menu+0x3300>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00e      	beq.n	80042d0 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80042b2:	4b7a      	ldr	r3, [pc, #488]	; (800449c <menu+0x3304>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4b78      	ldr	r3, [pc, #480]	; (800449c <menu+0x3304>)
 80042bc:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80042be:	4b77      	ldr	r3, [pc, #476]	; (800449c <menu+0x3304>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <menu+0x3134>
		   		calismaSayModu = 1;
 80042c6:	4b75      	ldr	r3, [pc, #468]	; (800449c <menu+0x3304>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042cc:	f000 fbfe 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042d0:	2108      	movs	r1, #8
 80042d2:	486f      	ldr	r0, [pc, #444]	; (8004490 <menu+0x32f8>)
 80042d4:	f005 f99a 	bl	800960c <HAL_GPIO_ReadPin>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d12b      	bne.n	8004336 <menu+0x319e>
 80042de:	4b6d      	ldr	r3, [pc, #436]	; (8004494 <menu+0x32fc>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	f083 0301 	eor.w	r3, r3, #1
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d024      	beq.n	8004336 <menu+0x319e>
			eepromData[32] = 0;
 80042ec:	4b6c      	ldr	r3, [pc, #432]	; (80044a0 <menu+0x3308>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80042f4:	4b6a      	ldr	r3, [pc, #424]	; (80044a0 <menu+0x3308>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80042fa:	4b69      	ldr	r3, [pc, #420]	; (80044a0 <menu+0x3308>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004300:	4b67      	ldr	r3, [pc, #412]	; (80044a0 <menu+0x3308>)
 8004302:	2200      	movs	r2, #0
 8004304:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004306:	4b66      	ldr	r3, [pc, #408]	; (80044a0 <menu+0x3308>)
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 800430c:	4b65      	ldr	r3, [pc, #404]	; (80044a4 <menu+0x330c>)
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004312:	4b65      	ldr	r3, [pc, #404]	; (80044a8 <menu+0x3310>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004318:	4b64      	ldr	r3, [pc, #400]	; (80044ac <menu+0x3314>)
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800431e:	4b64      	ldr	r3, [pc, #400]	; (80044b0 <menu+0x3318>)
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004324:	4b63      	ldr	r3, [pc, #396]	; (80044b4 <menu+0x331c>)
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800432a:	4b5c      	ldr	r3, [pc, #368]	; (800449c <menu+0x3304>)
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004330:	4b61      	ldr	r3, [pc, #388]	; (80044b8 <menu+0x3320>)
 8004332:	2201      	movs	r2, #1
 8004334:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004336:	4b61      	ldr	r3, [pc, #388]	; (80044bc <menu+0x3324>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b1e      	cmp	r3, #30
 800433c:	d16f      	bne.n	800441e <menu+0x3286>
		calismaSayModu = 0;
 800433e:	4b57      	ldr	r3, [pc, #348]	; (800449c <menu+0x3304>)
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004344:	4b4f      	ldr	r3, [pc, #316]	; (8004484 <menu+0x32ec>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 800434c:	4a5c      	ldr	r2, [pc, #368]	; (80044c0 <menu+0x3328>)
 800434e:	2101      	movs	r1, #1
 8004350:	2001      	movs	r0, #1
 8004352:	f003 fe35 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004356:	4a5b      	ldr	r2, [pc, #364]	; (80044c4 <menu+0x332c>)
 8004358:	2101      	movs	r1, #1
 800435a:	2002      	movs	r0, #2
 800435c:	f003 fe30 	bl	8007fc0 <lcd_print>
 8004360:	e00d      	b.n	800437e <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004362:	4b48      	ldr	r3, [pc, #288]	; (8004484 <menu+0x32ec>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d109      	bne.n	800437e <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800436a:	4a57      	ldr	r2, [pc, #348]	; (80044c8 <menu+0x3330>)
 800436c:	2101      	movs	r1, #1
 800436e:	2001      	movs	r0, #1
 8004370:	f003 fe26 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004374:	4a55      	ldr	r2, [pc, #340]	; (80044cc <menu+0x3334>)
 8004376:	2101      	movs	r1, #1
 8004378:	2002      	movs	r0, #2
 800437a:	f003 fe21 	bl	8007fc0 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800437e:	2102      	movs	r1, #2
 8004380:	4843      	ldr	r0, [pc, #268]	; (8004490 <menu+0x32f8>)
 8004382:	f005 f943 	bl	800960c <HAL_GPIO_ReadPin>
 8004386:	4603      	mov	r3, r0
 8004388:	2b01      	cmp	r3, #1
 800438a:	d115      	bne.n	80043b8 <menu+0x3220>
 800438c:	4b41      	ldr	r3, [pc, #260]	; (8004494 <menu+0x32fc>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	f083 0301 	eor.w	r3, r3, #1
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00e      	beq.n	80043b8 <menu+0x3220>
			dilSecim = dilSecim + 1;
 800439a:	4b3a      	ldr	r3, [pc, #232]	; (8004484 <menu+0x32ec>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	3301      	adds	r3, #1
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	4b38      	ldr	r3, [pc, #224]	; (8004484 <menu+0x32ec>)
 80043a4:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80043a6:	4b37      	ldr	r3, [pc, #220]	; (8004484 <menu+0x32ec>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d902      	bls.n	80043b4 <menu+0x321c>
				dilSecim = 0;
 80043ae:	4b35      	ldr	r3, [pc, #212]	; (8004484 <menu+0x32ec>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80043b4:	f000 fb8a 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043b8:	2104      	movs	r1, #4
 80043ba:	4835      	ldr	r0, [pc, #212]	; (8004490 <menu+0x32f8>)
 80043bc:	f005 f926 	bl	800960c <HAL_GPIO_ReadPin>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d115      	bne.n	80043f2 <menu+0x325a>
 80043c6:	4b33      	ldr	r3, [pc, #204]	; (8004494 <menu+0x32fc>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	f083 0301 	eor.w	r3, r3, #1
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00e      	beq.n	80043f2 <menu+0x325a>
			dilSecim = dilSecim - 1;
 80043d4:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <menu+0x32ec>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	3b01      	subs	r3, #1
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	4b29      	ldr	r3, [pc, #164]	; (8004484 <menu+0x32ec>)
 80043de:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80043e0:	4b28      	ldr	r3, [pc, #160]	; (8004484 <menu+0x32ec>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <menu+0x3256>
		   		dilSecim = 1;
 80043e8:	4b26      	ldr	r3, [pc, #152]	; (8004484 <menu+0x32ec>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80043ee:	f000 fb6d 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043f2:	2108      	movs	r1, #8
 80043f4:	4826      	ldr	r0, [pc, #152]	; (8004490 <menu+0x32f8>)
 80043f6:	f005 f909 	bl	800960c <HAL_GPIO_ReadPin>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d10e      	bne.n	800441e <menu+0x3286>
 8004400:	4b24      	ldr	r3, [pc, #144]	; (8004494 <menu+0x32fc>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f083 0301 	eor.w	r3, r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <menu+0x3286>
			eepromData[33] = dilSecim;
 800440e:	4b1d      	ldr	r3, [pc, #116]	; (8004484 <menu+0x32ec>)
 8004410:	781a      	ldrb	r2, [r3, #0]
 8004412:	4b23      	ldr	r3, [pc, #140]	; (80044a0 <menu+0x3308>)
 8004414:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004418:	4b27      	ldr	r3, [pc, #156]	; (80044b8 <menu+0x3320>)
 800441a:	2201      	movs	r2, #1
 800441c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800441e:	4b27      	ldr	r3, [pc, #156]	; (80044bc <menu+0x3324>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b1f      	cmp	r3, #31
 8004424:	f040 80b7 	bne.w	8004596 <menu+0x33fe>
		calismaSayModu = 0;
 8004428:	4b1c      	ldr	r3, [pc, #112]	; (800449c <menu+0x3304>)
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800442e:	4a28      	ldr	r2, [pc, #160]	; (80044d0 <menu+0x3338>)
 8004430:	2101      	movs	r1, #1
 8004432:	2001      	movs	r0, #1
 8004434:	f003 fdc4 	bl	8007fc0 <lcd_print>

		if(iotMode == 0) {
 8004438:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <menu+0x333c>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d113      	bne.n	8004468 <menu+0x32d0>
			if(dilSecim == 0) {
 8004440:	4b10      	ldr	r3, [pc, #64]	; (8004484 <menu+0x32ec>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d105      	bne.n	8004454 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004448:	4a23      	ldr	r2, [pc, #140]	; (80044d8 <menu+0x3340>)
 800444a:	2101      	movs	r1, #1
 800444c:	2002      	movs	r0, #2
 800444e:	f003 fdb7 	bl	8007fc0 <lcd_print>
 8004452:	e050      	b.n	80044f6 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <menu+0x32ec>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d14c      	bne.n	80044f6 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 800445c:	4a1f      	ldr	r2, [pc, #124]	; (80044dc <menu+0x3344>)
 800445e:	2101      	movs	r1, #1
 8004460:	2002      	movs	r0, #2
 8004462:	f003 fdad 	bl	8007fc0 <lcd_print>
 8004466:	e046      	b.n	80044f6 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004468:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <menu+0x333c>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d142      	bne.n	80044f6 <menu+0x335e>
			if(dilSecim == 0) {
 8004470:	4b04      	ldr	r3, [pc, #16]	; (8004484 <menu+0x32ec>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d135      	bne.n	80044e4 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004478:	4a19      	ldr	r2, [pc, #100]	; (80044e0 <menu+0x3348>)
 800447a:	2101      	movs	r1, #1
 800447c:	2002      	movs	r0, #2
 800447e:	f003 fd9f 	bl	8007fc0 <lcd_print>
 8004482:	e038      	b.n	80044f6 <menu+0x335e>
 8004484:	20000241 	.word	0x20000241
 8004488:	0800dcd8 	.word	0x0800dcd8
 800448c:	0800dd0c 	.word	0x0800dd0c
 8004490:	40010800 	.word	0x40010800
 8004494:	2000024f 	.word	0x2000024f
 8004498:	20000261 	.word	0x20000261
 800449c:	20000240 	.word	0x20000240
 80044a0:	20000118 	.word	0x20000118
 80044a4:	2000021f 	.word	0x2000021f
 80044a8:	20000001 	.word	0x20000001
 80044ac:	20000000 	.word	0x20000000
 80044b0:	2000021e 	.word	0x2000021e
 80044b4:	2000021d 	.word	0x2000021d
 80044b8:	2000024c 	.word	0x2000024c
 80044bc:	20000220 	.word	0x20000220
 80044c0:	0800dd20 	.word	0x0800dd20
 80044c4:	0800dd34 	.word	0x0800dd34
 80044c8:	0800dd48 	.word	0x0800dd48
 80044cc:	0800dd5c 	.word	0x0800dd5c
 80044d0:	0800dd70 	.word	0x0800dd70
 80044d4:	2000023f 	.word	0x2000023f
 80044d8:	0800d5c8 	.word	0x0800d5c8
 80044dc:	0800d5dc 	.word	0x0800d5dc
 80044e0:	0800d628 	.word	0x0800d628
			} else if(dilSecim == 1) {
 80044e4:	4ba4      	ldr	r3, [pc, #656]	; (8004778 <menu+0x35e0>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d104      	bne.n	80044f6 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80044ec:	4aa3      	ldr	r2, [pc, #652]	; (800477c <menu+0x35e4>)
 80044ee:	2101      	movs	r1, #1
 80044f0:	2002      	movs	r0, #2
 80044f2:	f003 fd65 	bl	8007fc0 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80044f6:	2102      	movs	r1, #2
 80044f8:	48a1      	ldr	r0, [pc, #644]	; (8004780 <menu+0x35e8>)
 80044fa:	f005 f887 	bl	800960c <HAL_GPIO_ReadPin>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b01      	cmp	r3, #1
 8004502:	d115      	bne.n	8004530 <menu+0x3398>
 8004504:	4b9f      	ldr	r3, [pc, #636]	; (8004784 <menu+0x35ec>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	f083 0301 	eor.w	r3, r3, #1
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00e      	beq.n	8004530 <menu+0x3398>
			iotMode = iotMode + 1;
 8004512:	4b9d      	ldr	r3, [pc, #628]	; (8004788 <menu+0x35f0>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	3301      	adds	r3, #1
 8004518:	b2da      	uxtb	r2, r3
 800451a:	4b9b      	ldr	r3, [pc, #620]	; (8004788 <menu+0x35f0>)
 800451c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800451e:	4b9a      	ldr	r3, [pc, #616]	; (8004788 <menu+0x35f0>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d902      	bls.n	800452c <menu+0x3394>
				iotMode = 0;
 8004526:	4b98      	ldr	r3, [pc, #608]	; (8004788 <menu+0x35f0>)
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800452c:	f000 face 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004530:	2104      	movs	r1, #4
 8004532:	4893      	ldr	r0, [pc, #588]	; (8004780 <menu+0x35e8>)
 8004534:	f005 f86a 	bl	800960c <HAL_GPIO_ReadPin>
 8004538:	4603      	mov	r3, r0
 800453a:	2b01      	cmp	r3, #1
 800453c:	d115      	bne.n	800456a <menu+0x33d2>
 800453e:	4b91      	ldr	r3, [pc, #580]	; (8004784 <menu+0x35ec>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	f083 0301 	eor.w	r3, r3, #1
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00e      	beq.n	800456a <menu+0x33d2>
			iotMode = iotMode - 1;
 800454c:	4b8e      	ldr	r3, [pc, #568]	; (8004788 <menu+0x35f0>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	3b01      	subs	r3, #1
 8004552:	b2da      	uxtb	r2, r3
 8004554:	4b8c      	ldr	r3, [pc, #560]	; (8004788 <menu+0x35f0>)
 8004556:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004558:	4b8b      	ldr	r3, [pc, #556]	; (8004788 <menu+0x35f0>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <menu+0x33ce>
		   		iotMode = 1;
 8004560:	4b89      	ldr	r3, [pc, #548]	; (8004788 <menu+0x35f0>)
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004566:	f000 fab1 	bl	8004acc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800456a:	2108      	movs	r1, #8
 800456c:	4884      	ldr	r0, [pc, #528]	; (8004780 <menu+0x35e8>)
 800456e:	f005 f84d 	bl	800960c <HAL_GPIO_ReadPin>
 8004572:	4603      	mov	r3, r0
 8004574:	2b01      	cmp	r3, #1
 8004576:	d10e      	bne.n	8004596 <menu+0x33fe>
 8004578:	4b82      	ldr	r3, [pc, #520]	; (8004784 <menu+0x35ec>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	f083 0301 	eor.w	r3, r3, #1
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004586:	4b80      	ldr	r3, [pc, #512]	; (8004788 <menu+0x35f0>)
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	4b80      	ldr	r3, [pc, #512]	; (800478c <menu+0x35f4>)
 800458c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004590:	4b7f      	ldr	r3, [pc, #508]	; (8004790 <menu+0x35f8>)
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004596:	4b7f      	ldr	r3, [pc, #508]	; (8004794 <menu+0x35fc>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b20      	cmp	r3, #32
 800459c:	d14b      	bne.n	8004636 <menu+0x349e>
		calismaSayModu = 0;
 800459e:	4b7e      	ldr	r3, [pc, #504]	; (8004798 <menu+0x3600>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 80045a4:	2001      	movs	r0, #1
 80045a6:	f7fc f8c7 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 80045aa:	2032      	movs	r0, #50	; 0x32
 80045ac:	f004 fa5e 	bl	8008a6c <HAL_Delay>

		if(dilSecim == 0) {
 80045b0:	4b71      	ldr	r3, [pc, #452]	; (8004778 <menu+0x35e0>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d105      	bne.n	80045c4 <menu+0x342c>
			lcd_print(1, 1, "MAKINE ID       ");
 80045b8:	4a78      	ldr	r2, [pc, #480]	; (800479c <menu+0x3604>)
 80045ba:	2101      	movs	r1, #1
 80045bc:	2001      	movs	r0, #1
 80045be:	f003 fcff 	bl	8007fc0 <lcd_print>
 80045c2:	e004      	b.n	80045ce <menu+0x3436>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80045c4:	4a76      	ldr	r2, [pc, #472]	; (80047a0 <menu+0x3608>)
 80045c6:	2101      	movs	r1, #1
 80045c8:	2001      	movs	r0, #1
 80045ca:	f003 fcf9 	bl	8007fc0 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 80045ce:	4a75      	ldr	r2, [pc, #468]	; (80047a4 <menu+0x360c>)
 80045d0:	2101      	movs	r1, #1
 80045d2:	2002      	movs	r0, #2
 80045d4:	f003 fcf4 	bl	8007fc0 <lcd_print>
		lcd_print(2, 13, "    ");
 80045d8:	4a73      	ldr	r2, [pc, #460]	; (80047a8 <menu+0x3610>)
 80045da:	210d      	movs	r1, #13
 80045dc:	2002      	movs	r0, #2
 80045de:	f003 fcef 	bl	8007fc0 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045e2:	2102      	movs	r1, #2
 80045e4:	4866      	ldr	r0, [pc, #408]	; (8004780 <menu+0x35e8>)
 80045e6:	f005 f811 	bl	800960c <HAL_GPIO_ReadPin>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d122      	bne.n	8004636 <menu+0x349e>
 80045f0:	2104      	movs	r1, #4
 80045f2:	4863      	ldr	r0, [pc, #396]	; (8004780 <menu+0x35e8>)
 80045f4:	f005 f80a 	bl	800960c <HAL_GPIO_ReadPin>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d11b      	bne.n	8004636 <menu+0x349e>
 80045fe:	4b61      	ldr	r3, [pc, #388]	; (8004784 <menu+0x35ec>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	f083 0301 	eor.w	r3, r3, #1
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d014      	beq.n	8004636 <menu+0x349e>
			takeMachineID();
 800460c:	f002 fb6a 	bl	8006ce4 <takeMachineID>

			convertArrays(1);
 8004610:	2001      	movs	r0, #1
 8004612:	f7fc f891 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 8004616:	2032      	movs	r0, #50	; 0x32
 8004618:	f004 fa28 	bl	8008a6c <HAL_Delay>

			HAL_Delay(250);
 800461c:	20fa      	movs	r0, #250	; 0xfa
 800461e:	f004 fa25 	bl	8008a6c <HAL_Delay>
			lcd_print(2, 1, machineID);
 8004622:	4a60      	ldr	r2, [pc, #384]	; (80047a4 <menu+0x360c>)
 8004624:	2101      	movs	r1, #1
 8004626:	2002      	movs	r0, #2
 8004628:	f003 fcca 	bl	8007fc0 <lcd_print>
			lcd_print(2, 13, "    ");
 800462c:	4a5e      	ldr	r2, [pc, #376]	; (80047a8 <menu+0x3610>)
 800462e:	210d      	movs	r1, #13
 8004630:	2002      	movs	r0, #2
 8004632:	f003 fcc5 	bl	8007fc0 <lcd_print>
		}
	}

	if (menuSayac == 33) {
 8004636:	4b57      	ldr	r3, [pc, #348]	; (8004794 <menu+0x35fc>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b21      	cmp	r3, #33	; 0x21
 800463c:	f040 80cd 	bne.w	80047da <menu+0x3642>
		uint8_t wifiSSIDTemp[wifiCharacterLimit];
		calismaSayModu = 0;
 8004640:	4b55      	ldr	r3, [pc, #340]	; (8004798 <menu+0x3600>)
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
		int ssidLength = strlen(wifiSSID);
 8004646:	4859      	ldr	r0, [pc, #356]	; (80047ac <menu+0x3614>)
 8004648:	f7fb fdec 	bl	8000224 <strlen>
 800464c:	4603      	mov	r3, r0
 800464e:	64fb      	str	r3, [r7, #76]	; 0x4c

		//customArrayConvert(wifiSSIDTemp, 2);
		convertArrays(2);
 8004650:	2002      	movs	r0, #2
 8004652:	f7fc f871 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 8004656:	2032      	movs	r0, #50	; 0x32
 8004658:	f004 fa08 	bl	8008a6c <HAL_Delay>

		lcd_print(1, 1, "WIFI SSID       ");
 800465c:	4a54      	ldr	r2, [pc, #336]	; (80047b0 <menu+0x3618>)
 800465e:	2101      	movs	r1, #1
 8004660:	2001      	movs	r0, #1
 8004662:	f003 fcad 	bl	8007fc0 <lcd_print>
		if(ssidLength == 16) {
 8004666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004668:	2b10      	cmp	r3, #16
 800466a:	d105      	bne.n	8004678 <menu+0x34e0>
			lcd_print(2, 1, wifiSSID);
 800466c:	4a4f      	ldr	r2, [pc, #316]	; (80047ac <menu+0x3614>)
 800466e:	2101      	movs	r1, #1
 8004670:	2002      	movs	r0, #2
 8004672:	f003 fca5 	bl	8007fc0 <lcd_print>
 8004676:	e030      	b.n	80046da <menu+0x3542>
		} else if(ssidLength < 16) {
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	2b0f      	cmp	r3, #15
 800467c:	dc15      	bgt.n	80046aa <menu+0x3512>
			for(int i=0; i<16-ssidLength; i++) {
 800467e:	2300      	movs	r3, #0
 8004680:	64bb      	str	r3, [r7, #72]	; 0x48
 8004682:	e00b      	b.n	800469c <menu+0x3504>
				lcd_delete_char(2, ssidLength);
 8004684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004686:	b2db      	uxtb	r3, r3
 8004688:	4619      	mov	r1, r3
 800468a:	2002      	movs	r0, #2
 800468c:	f003 fcce 	bl	800802c <lcd_delete_char>
				ssidLength++;
 8004690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004692:	3301      	adds	r3, #1
 8004694:	64fb      	str	r3, [r7, #76]	; 0x4c
			for(int i=0; i<16-ssidLength; i++) {
 8004696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004698:	3301      	adds	r3, #1
 800469a:	64bb      	str	r3, [r7, #72]	; 0x48
 800469c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469e:	f1c3 0310 	rsb	r3, r3, #16
 80046a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046a4:	429a      	cmp	r2, r3
 80046a6:	dbed      	blt.n	8004684 <menu+0x34ec>
 80046a8:	e017      	b.n	80046da <menu+0x3542>
			}
		} else {
			int lcdVal = 1;
 80046aa:	2301      	movs	r3, #1
 80046ac:	647b      	str	r3, [r7, #68]	; 0x44

			//Eğer ssid 16'dan büyükse buraya ekle
			for(int i=0; i<16; i++) {
 80046ae:	2300      	movs	r3, #0
 80046b0:	643b      	str	r3, [r7, #64]	; 0x40
 80046b2:	e00f      	b.n	80046d4 <menu+0x353c>
				lcd_print_char(2, lcdVal, wifiSSID[i]);
 80046b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b6:	b2d9      	uxtb	r1, r3
 80046b8:	4a3c      	ldr	r2, [pc, #240]	; (80047ac <menu+0x3614>)
 80046ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046bc:	4413      	add	r3, r2
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	2002      	movs	r0, #2
 80046c4:	f003 fc91 	bl	8007fea <lcd_print_char>
				lcdVal++;
 80046c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ca:	3301      	adds	r3, #1
 80046cc:	647b      	str	r3, [r7, #68]	; 0x44
			for(int i=0; i<16; i++) {
 80046ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d0:	3301      	adds	r3, #1
 80046d2:	643b      	str	r3, [r7, #64]	; 0x40
 80046d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d6:	2b0f      	cmp	r3, #15
 80046d8:	ddec      	ble.n	80046b4 <menu+0x351c>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046da:	2102      	movs	r1, #2
 80046dc:	4828      	ldr	r0, [pc, #160]	; (8004780 <menu+0x35e8>)
 80046de:	f004 ff95 	bl	800960c <HAL_GPIO_ReadPin>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d178      	bne.n	80047da <menu+0x3642>
 80046e8:	2104      	movs	r1, #4
 80046ea:	4825      	ldr	r0, [pc, #148]	; (8004780 <menu+0x35e8>)
 80046ec:	f004 ff8e 	bl	800960c <HAL_GPIO_ReadPin>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d171      	bne.n	80047da <menu+0x3642>
 80046f6:	4b23      	ldr	r3, [pc, #140]	; (8004784 <menu+0x35ec>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	f083 0301 	eor.w	r3, r3, #1
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d06a      	beq.n	80047da <menu+0x3642>
			takeWifiSSIDT(wifiSSIDTemp);
 8004704:	1d3b      	adds	r3, r7, #4
 8004706:	4618      	mov	r0, r3
 8004708:	f002 fe1e 	bl	8007348 <takeWifiSSIDT>

			convertArrays(2);
 800470c:	2002      	movs	r0, #2
 800470e:	f7fc f813 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 8004712:	2032      	movs	r0, #50	; 0x32
 8004714:	f004 f9aa 	bl	8008a6c <HAL_Delay>

			ssidLength = strlen(wifiSSID);
 8004718:	4824      	ldr	r0, [pc, #144]	; (80047ac <menu+0x3614>)
 800471a:	f7fb fd83 	bl	8000224 <strlen>
 800471e:	4603      	mov	r3, r0
 8004720:	64fb      	str	r3, [r7, #76]	; 0x4c

			HAL_Delay(250);
 8004722:	20fa      	movs	r0, #250	; 0xfa
 8004724:	f004 f9a2 	bl	8008a6c <HAL_Delay>
			if(ssidLength == 16) {
 8004728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472a:	2b10      	cmp	r3, #16
 800472c:	d105      	bne.n	800473a <menu+0x35a2>
				lcd_print(2, 1, wifiSSID);
 800472e:	4a1f      	ldr	r2, [pc, #124]	; (80047ac <menu+0x3614>)
 8004730:	2101      	movs	r1, #1
 8004732:	2002      	movs	r0, #2
 8004734:	f003 fc44 	bl	8007fc0 <lcd_print>
 8004738:	e04f      	b.n	80047da <menu+0x3642>
			} else if(ssidLength < 16) {
 800473a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473c:	2b0f      	cmp	r3, #15
 800473e:	dc15      	bgt.n	800476c <menu+0x35d4>
				for(int i=0; i<16-ssidLength; i++) {
 8004740:	2300      	movs	r3, #0
 8004742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004744:	e00b      	b.n	800475e <menu+0x35c6>
					lcd_delete_char(2, ssidLength);
 8004746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004748:	b2db      	uxtb	r3, r3
 800474a:	4619      	mov	r1, r3
 800474c:	2002      	movs	r0, #2
 800474e:	f003 fc6d 	bl	800802c <lcd_delete_char>
					ssidLength++;
 8004752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004754:	3301      	adds	r3, #1
 8004756:	64fb      	str	r3, [r7, #76]	; 0x4c
				for(int i=0; i<16-ssidLength; i++) {
 8004758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475a:	3301      	adds	r3, #1
 800475c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004760:	f1c3 0310 	rsb	r3, r3, #16
 8004764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004766:	429a      	cmp	r2, r3
 8004768:	dbed      	blt.n	8004746 <menu+0x35ae>
 800476a:	e036      	b.n	80047da <menu+0x3642>
				}
			} else {
				int lcdVal = 1;
 800476c:	2301      	movs	r3, #1
 800476e:	63bb      	str	r3, [r7, #56]	; 0x38

				//Eğer ssid 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 8004770:	2300      	movs	r3, #0
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
 8004774:	e02e      	b.n	80047d4 <menu+0x363c>
 8004776:	bf00      	nop
 8004778:	20000241 	.word	0x20000241
 800477c:	0800d63c 	.word	0x0800d63c
 8004780:	40010800 	.word	0x40010800
 8004784:	2000024f 	.word	0x2000024f
 8004788:	2000023f 	.word	0x2000023f
 800478c:	20000118 	.word	0x20000118
 8004790:	2000024c 	.word	0x2000024c
 8004794:	20000220 	.word	0x20000220
 8004798:	20000240 	.word	0x20000240
 800479c:	0800dd84 	.word	0x0800dd84
 80047a0:	0800dd98 	.word	0x0800dd98
 80047a4:	20000190 	.word	0x20000190
 80047a8:	0800ddac 	.word	0x0800ddac
 80047ac:	2000019c 	.word	0x2000019c
 80047b0:	0800ddb4 	.word	0x0800ddb4
					lcd_print_char(2, lcdVal, wifiSSID[i]);
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	b2d9      	uxtb	r1, r3
 80047b8:	4a8b      	ldr	r2, [pc, #556]	; (80049e8 <menu+0x3850>)
 80047ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047bc:	4413      	add	r3, r2
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	2002      	movs	r0, #2
 80047c4:	f003 fc11 	bl	8007fea <lcd_print_char>
					lcdVal++;
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	3301      	adds	r3, #1
 80047cc:	63bb      	str	r3, [r7, #56]	; 0x38
				for(int i=0; i<16; i++) {
 80047ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d0:	3301      	adds	r3, #1
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
 80047d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d6:	2b0f      	cmp	r3, #15
 80047d8:	ddec      	ble.n	80047b4 <menu+0x361c>
				}
			}
		}
	}

	if (menuSayac == 34) {
 80047da:	4b84      	ldr	r3, [pc, #528]	; (80049ec <menu+0x3854>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b22      	cmp	r3, #34	; 0x22
 80047e0:	f040 80ac 	bne.w	800493c <menu+0x37a4>
		calismaSayModu = 0;
 80047e4:	4b82      	ldr	r3, [pc, #520]	; (80049f0 <menu+0x3858>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	701a      	strb	r2, [r3, #0]
		int passLength = strlen(wifiPass);
 80047ea:	4882      	ldr	r0, [pc, #520]	; (80049f4 <menu+0x385c>)
 80047ec:	f7fb fd1a 	bl	8000224 <strlen>
 80047f0:	4603      	mov	r3, r0
 80047f2:	633b      	str	r3, [r7, #48]	; 0x30

		convertArrays(3);
 80047f4:	2003      	movs	r0, #3
 80047f6:	f7fb ff9f 	bl	8000738 <convertArrays>
		HAL_Delay(50);
 80047fa:	2032      	movs	r0, #50	; 0x32
 80047fc:	f004 f936 	bl	8008a6c <HAL_Delay>

		lcd_print(1, 1, "WIFI PASS       ");
 8004800:	4a7d      	ldr	r2, [pc, #500]	; (80049f8 <menu+0x3860>)
 8004802:	2101      	movs	r1, #1
 8004804:	2001      	movs	r0, #1
 8004806:	f003 fbdb 	bl	8007fc0 <lcd_print>
		if(passLength == 16) {
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	2b10      	cmp	r3, #16
 800480e:	d105      	bne.n	800481c <menu+0x3684>
			lcd_print(2, 1, wifiPass);
 8004810:	4a78      	ldr	r2, [pc, #480]	; (80049f4 <menu+0x385c>)
 8004812:	2101      	movs	r1, #1
 8004814:	2002      	movs	r0, #2
 8004816:	f003 fbd3 	bl	8007fc0 <lcd_print>
 800481a:	e030      	b.n	800487e <menu+0x36e6>
		} else if(passLength < 16) {
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	2b0f      	cmp	r3, #15
 8004820:	dc15      	bgt.n	800484e <menu+0x36b6>
			for(int i=0; i<16-passLength; i++) {
 8004822:	2300      	movs	r3, #0
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004826:	e00b      	b.n	8004840 <menu+0x36a8>
				lcd_delete_char(2, passLength);
 8004828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482a:	b2db      	uxtb	r3, r3
 800482c:	4619      	mov	r1, r3
 800482e:	2002      	movs	r0, #2
 8004830:	f003 fbfc 	bl	800802c <lcd_delete_char>
				passLength++;
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	3301      	adds	r3, #1
 8004838:	633b      	str	r3, [r7, #48]	; 0x30
			for(int i=0; i<16-passLength; i++) {
 800483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483c:	3301      	adds	r3, #1
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	f1c3 0310 	rsb	r3, r3, #16
 8004846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004848:	429a      	cmp	r2, r3
 800484a:	dbed      	blt.n	8004828 <menu+0x3690>
 800484c:	e017      	b.n	800487e <menu+0x36e6>
			}
		} else {
			int lcdVal = 1;
 800484e:	2301      	movs	r3, #1
 8004850:	62bb      	str	r3, [r7, #40]	; 0x28

			//Eğer pass 16'dan büyükse buraya ekle
			for(int i=0; i<16; i++) {
 8004852:	2300      	movs	r3, #0
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
 8004856:	e00f      	b.n	8004878 <menu+0x36e0>
				lcd_print_char(2, lcdVal, wifiPass[i]);
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	b2d9      	uxtb	r1, r3
 800485c:	4a65      	ldr	r2, [pc, #404]	; (80049f4 <menu+0x385c>)
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	4413      	add	r3, r2
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	2002      	movs	r0, #2
 8004868:	f003 fbbf 	bl	8007fea <lcd_print_char>
				lcdVal++;
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	3301      	adds	r3, #1
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
			for(int i=0; i<16; i++) {
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	3301      	adds	r3, #1
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	2b0f      	cmp	r3, #15
 800487c:	ddec      	ble.n	8004858 <menu+0x36c0>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800487e:	2102      	movs	r1, #2
 8004880:	485e      	ldr	r0, [pc, #376]	; (80049fc <menu+0x3864>)
 8004882:	f004 fec3 	bl	800960c <HAL_GPIO_ReadPin>
 8004886:	4603      	mov	r3, r0
 8004888:	2b01      	cmp	r3, #1
 800488a:	d157      	bne.n	800493c <menu+0x37a4>
 800488c:	2104      	movs	r1, #4
 800488e:	485b      	ldr	r0, [pc, #364]	; (80049fc <menu+0x3864>)
 8004890:	f004 febc 	bl	800960c <HAL_GPIO_ReadPin>
 8004894:	4603      	mov	r3, r0
 8004896:	2b01      	cmp	r3, #1
 8004898:	d150      	bne.n	800493c <menu+0x37a4>
 800489a:	4b59      	ldr	r3, [pc, #356]	; (8004a00 <menu+0x3868>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	f083 0301 	eor.w	r3, r3, #1
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d049      	beq.n	800493c <menu+0x37a4>
			takeWifiPass();
 80048a8:	f002 fee4 	bl	8007674 <takeWifiPass>

			convertArrays(3);
 80048ac:	2003      	movs	r0, #3
 80048ae:	f7fb ff43 	bl	8000738 <convertArrays>
			HAL_Delay(50);
 80048b2:	2032      	movs	r0, #50	; 0x32
 80048b4:	f004 f8da 	bl	8008a6c <HAL_Delay>

			passLength = strlen(wifiPass);
 80048b8:	484e      	ldr	r0, [pc, #312]	; (80049f4 <menu+0x385c>)
 80048ba:	f7fb fcb3 	bl	8000224 <strlen>
 80048be:	4603      	mov	r3, r0
 80048c0:	633b      	str	r3, [r7, #48]	; 0x30

			HAL_Delay(250);
 80048c2:	20fa      	movs	r0, #250	; 0xfa
 80048c4:	f004 f8d2 	bl	8008a6c <HAL_Delay>
			if(passLength == 16) {
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	2b10      	cmp	r3, #16
 80048cc:	d105      	bne.n	80048da <menu+0x3742>
				lcd_print(2, 1, wifiPass);
 80048ce:	4a49      	ldr	r2, [pc, #292]	; (80049f4 <menu+0x385c>)
 80048d0:	2101      	movs	r1, #1
 80048d2:	2002      	movs	r0, #2
 80048d4:	f003 fb74 	bl	8007fc0 <lcd_print>
 80048d8:	e030      	b.n	800493c <menu+0x37a4>
			} else if(passLength < 16) {
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	2b0f      	cmp	r3, #15
 80048de:	dc15      	bgt.n	800490c <menu+0x3774>
				for(int i=0; i<16-passLength; i++) {
 80048e0:	2300      	movs	r3, #0
 80048e2:	623b      	str	r3, [r7, #32]
 80048e4:	e00b      	b.n	80048fe <menu+0x3766>
					lcd_delete_char(2, passLength);
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	4619      	mov	r1, r3
 80048ec:	2002      	movs	r0, #2
 80048ee:	f003 fb9d 	bl	800802c <lcd_delete_char>
					passLength++;
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	3301      	adds	r3, #1
 80048f6:	633b      	str	r3, [r7, #48]	; 0x30
				for(int i=0; i<16-passLength; i++) {
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	3301      	adds	r3, #1
 80048fc:	623b      	str	r3, [r7, #32]
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	f1c3 0310 	rsb	r3, r3, #16
 8004904:	6a3a      	ldr	r2, [r7, #32]
 8004906:	429a      	cmp	r2, r3
 8004908:	dbed      	blt.n	80048e6 <menu+0x374e>
 800490a:	e017      	b.n	800493c <menu+0x37a4>
				}
			} else {
				int lcdVal = 1;
 800490c:	2301      	movs	r3, #1
 800490e:	61fb      	str	r3, [r7, #28]

				//Eğer pass 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 8004910:	2300      	movs	r3, #0
 8004912:	61bb      	str	r3, [r7, #24]
 8004914:	e00f      	b.n	8004936 <menu+0x379e>
					lcd_print_char(2, lcdVal, wifiPass[i]);
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	b2d9      	uxtb	r1, r3
 800491a:	4a36      	ldr	r2, [pc, #216]	; (80049f4 <menu+0x385c>)
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	4413      	add	r3, r2
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	2002      	movs	r0, #2
 8004926:	f003 fb60 	bl	8007fea <lcd_print_char>
					lcdVal++;
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3301      	adds	r3, #1
 800492e:	61fb      	str	r3, [r7, #28]
				for(int i=0; i<16; i++) {
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	3301      	adds	r3, #1
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	2b0f      	cmp	r3, #15
 800493a:	ddec      	ble.n	8004916 <menu+0x377e>
				}
			}
		}
	}

	if (menuSayac == 35) {
 800493c:	4b2b      	ldr	r3, [pc, #172]	; (80049ec <menu+0x3854>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b23      	cmp	r3, #35	; 0x23
 8004942:	d14d      	bne.n	80049e0 <menu+0x3848>
		if(dilSecim == 0) {
 8004944:	4b2f      	ldr	r3, [pc, #188]	; (8004a04 <menu+0x386c>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <menu+0x37ca>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800494c:	4a2e      	ldr	r2, [pc, #184]	; (8004a08 <menu+0x3870>)
 800494e:	2101      	movs	r1, #1
 8004950:	2001      	movs	r0, #1
 8004952:	f003 fb35 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004956:	4a2d      	ldr	r2, [pc, #180]	; (8004a0c <menu+0x3874>)
 8004958:	2101      	movs	r1, #1
 800495a:	2002      	movs	r0, #2
 800495c:	f003 fb30 	bl	8007fc0 <lcd_print>
 8004960:	e00d      	b.n	800497e <menu+0x37e6>
		} else if(dilSecim == 1) {
 8004962:	4b28      	ldr	r3, [pc, #160]	; (8004a04 <menu+0x386c>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d109      	bne.n	800497e <menu+0x37e6>
			lcd_print(1, 1, " EXIT THE MENU  ");
 800496a:	4a29      	ldr	r2, [pc, #164]	; (8004a10 <menu+0x3878>)
 800496c:	2101      	movs	r1, #1
 800496e:	2001      	movs	r0, #1
 8004970:	f003 fb26 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004974:	4a27      	ldr	r2, [pc, #156]	; (8004a14 <menu+0x387c>)
 8004976:	2101      	movs	r1, #1
 8004978:	2002      	movs	r0, #2
 800497a:	f003 fb21 	bl	8007fc0 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 800497e:	2108      	movs	r1, #8
 8004980:	481e      	ldr	r0, [pc, #120]	; (80049fc <menu+0x3864>)
 8004982:	f004 fe43 	bl	800960c <HAL_GPIO_ReadPin>
 8004986:	4603      	mov	r3, r0
 8004988:	2b01      	cmp	r3, #1
 800498a:	d129      	bne.n	80049e0 <menu+0x3848>
			menuGiris = 0;
 800498c:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <menu+0x3880>)
 800498e:	2200      	movs	r2, #0
 8004990:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004992:	bf00      	nop
 8004994:	4821      	ldr	r0, [pc, #132]	; (8004a1c <menu+0x3884>)
 8004996:	f005 fc62 	bl	800a25e <HAL_I2C_GetError>
 800499a:	4603      	mov	r3, r0
 800499c:	2b04      	cmp	r3, #4
 800499e:	d0f9      	beq.n	8004994 <menu+0x37fc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80049a0:	bf00      	nop
 80049a2:	481e      	ldr	r0, [pc, #120]	; (8004a1c <menu+0x3884>)
 80049a4:	f005 fc4e 	bl	800a244 <HAL_I2C_GetState>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d1f9      	bne.n	80049a2 <menu+0x380a>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80049ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80049b2:	9302      	str	r3, [sp, #8]
 80049b4:	236e      	movs	r3, #110	; 0x6e
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <menu+0x3888>)
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	236e      	movs	r3, #110	; 0x6e
 80049be:	2200      	movs	r2, #0
 80049c0:	21a0      	movs	r1, #160	; 0xa0
 80049c2:	4816      	ldr	r0, [pc, #88]	; (8004a1c <menu+0x3884>)
 80049c4:	f005 f8dc 	bl	8009b80 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 80049c8:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80049cc:	f004 f84e 	bl	8008a6c <HAL_Delay>

			lcd_clear();
 80049d0:	f003 fb22 	bl	8008018 <lcd_clear>
			HAL_Delay(500);
 80049d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049d8:	f004 f848 	bl	8008a6c <HAL_Delay>
			NVIC_SystemReset();
 80049dc:	f7fc fbc6 	bl	800116c <__NVIC_SystemReset>
		}
	}
}
 80049e0:	bf00      	nop
 80049e2:	3750      	adds	r7, #80	; 0x50
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	2000019c 	.word	0x2000019c
 80049ec:	20000220 	.word	0x20000220
 80049f0:	20000240 	.word	0x20000240
 80049f4:	200001b0 	.word	0x200001b0
 80049f8:	0800ddc8 	.word	0x0800ddc8
 80049fc:	40010800 	.word	0x40010800
 8004a00:	2000024f 	.word	0x2000024f
 8004a04:	20000241 	.word	0x20000241
 8004a08:	0800dddc 	.word	0x0800dddc
 8004a0c:	0800ddf0 	.word	0x0800ddf0
 8004a10:	0800de04 	.word	0x0800de04
 8004a14:	0800de18 	.word	0x0800de18
 8004a18:	2000023d 	.word	0x2000023d
 8004a1c:	200003a8 	.word	0x200003a8
 8004a20:	20000118 	.word	0x20000118

08004a24 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d105      	bne.n	8004a40 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004a34:	4a22      	ldr	r2, [pc, #136]	; (8004ac0 <lcdUpdate+0x9c>)
 8004a36:	2101      	movs	r1, #1
 8004a38:	2002      	movs	r0, #2
 8004a3a:	f003 fac1 	bl	8007fc0 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004a3e:	e03b      	b.n	8004ab8 <lcdUpdate+0x94>
	} else if(y==2) {
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d105      	bne.n	8004a52 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004a46:	4a1e      	ldr	r2, [pc, #120]	; (8004ac0 <lcdUpdate+0x9c>)
 8004a48:	2102      	movs	r1, #2
 8004a4a:	2002      	movs	r0, #2
 8004a4c:	f003 fab8 	bl	8007fc0 <lcd_print>
}
 8004a50:	e032      	b.n	8004ab8 <lcdUpdate+0x94>
	} else if(y==3) {
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d105      	bne.n	8004a64 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004a58:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <lcdUpdate+0x9c>)
 8004a5a:	2103      	movs	r1, #3
 8004a5c:	2002      	movs	r0, #2
 8004a5e:	f003 faaf 	bl	8007fc0 <lcd_print>
}
 8004a62:	e029      	b.n	8004ab8 <lcdUpdate+0x94>
	} else if(y==4) {
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d105      	bne.n	8004a76 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004a6a:	4a15      	ldr	r2, [pc, #84]	; (8004ac0 <lcdUpdate+0x9c>)
 8004a6c:	2104      	movs	r1, #4
 8004a6e:	2002      	movs	r0, #2
 8004a70:	f003 faa6 	bl	8007fc0 <lcd_print>
}
 8004a74:	e020      	b.n	8004ab8 <lcdUpdate+0x94>
	} else if(y==5) {
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	2b05      	cmp	r3, #5
 8004a7a:	d105      	bne.n	8004a88 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004a7c:	4a10      	ldr	r2, [pc, #64]	; (8004ac0 <lcdUpdate+0x9c>)
 8004a7e:	2105      	movs	r1, #5
 8004a80:	2002      	movs	r0, #2
 8004a82:	f003 fa9d 	bl	8007fc0 <lcd_print>
}
 8004a86:	e017      	b.n	8004ab8 <lcdUpdate+0x94>
	} else if(y==6) {
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	2b06      	cmp	r3, #6
 8004a8c:	d105      	bne.n	8004a9a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004a8e:	4a0c      	ldr	r2, [pc, #48]	; (8004ac0 <lcdUpdate+0x9c>)
 8004a90:	2106      	movs	r1, #6
 8004a92:	2002      	movs	r0, #2
 8004a94:	f003 fa94 	bl	8007fc0 <lcd_print>
}
 8004a98:	e00e      	b.n	8004ab8 <lcdUpdate+0x94>
	} else if (y==7) {
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	2b07      	cmp	r3, #7
 8004a9e:	d10b      	bne.n	8004ab8 <lcdUpdate+0x94>
		lcd_clear();
 8004aa0:	f003 faba 	bl	8008018 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004aa4:	4a07      	ldr	r2, [pc, #28]	; (8004ac4 <lcdUpdate+0xa0>)
 8004aa6:	2104      	movs	r1, #4
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f003 fa89 	bl	8007fc0 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004aae:	4a06      	ldr	r2, [pc, #24]	; (8004ac8 <lcdUpdate+0xa4>)
 8004ab0:	2106      	movs	r1, #6
 8004ab2:	2002      	movs	r0, #2
 8004ab4:	f003 fa84 	bl	8007fc0 <lcd_print>
}
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	0800de2c 	.word	0x0800de2c
 8004ac4:	0800de30 	.word	0x0800de30
 8004ac8:	0800de38 	.word	0x0800de38

08004acc <bekle>:

void bekle() {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
	timer1=millis;
 8004ad0:	4b47      	ldr	r3, [pc, #284]	; (8004bf0 <bekle+0x124>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a47      	ldr	r2, [pc, #284]	; (8004bf4 <bekle+0x128>)
 8004ad6:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ad8:	e002      	b.n	8004ae0 <bekle+0x14>
    	butonKontrol = 1;
 8004ada:	4b47      	ldr	r3, [pc, #284]	; (8004bf8 <bekle+0x12c>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	4846      	ldr	r0, [pc, #280]	; (8004bfc <bekle+0x130>)
 8004ae4:	f004 fd92 	bl	800960c <HAL_GPIO_ReadPin>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d109      	bne.n	8004b02 <bekle+0x36>
 8004aee:	4b40      	ldr	r3, [pc, #256]	; (8004bf0 <bekle+0x124>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4b40      	ldr	r3, [pc, #256]	; (8004bf4 <bekle+0x128>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d0ef      	beq.n	8004ada <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004afa:	e002      	b.n	8004b02 <bekle+0x36>
    	butonKontrol = 1;
 8004afc:	4b3e      	ldr	r3, [pc, #248]	; (8004bf8 <bekle+0x12c>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b02:	2108      	movs	r1, #8
 8004b04:	483e      	ldr	r0, [pc, #248]	; (8004c00 <bekle+0x134>)
 8004b06:	f004 fd81 	bl	800960c <HAL_GPIO_ReadPin>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d109      	bne.n	8004b24 <bekle+0x58>
 8004b10:	4b37      	ldr	r3, [pc, #220]	; (8004bf0 <bekle+0x124>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4b37      	ldr	r3, [pc, #220]	; (8004bf4 <bekle+0x128>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d0ef      	beq.n	8004afc <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b1c:	e002      	b.n	8004b24 <bekle+0x58>
    	butonKontrol = 1;
 8004b1e:	4b36      	ldr	r3, [pc, #216]	; (8004bf8 <bekle+0x12c>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b24:	2102      	movs	r1, #2
 8004b26:	4835      	ldr	r0, [pc, #212]	; (8004bfc <bekle+0x130>)
 8004b28:	f004 fd70 	bl	800960c <HAL_GPIO_ReadPin>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d109      	bne.n	8004b46 <bekle+0x7a>
 8004b32:	4b2f      	ldr	r3, [pc, #188]	; (8004bf0 <bekle+0x124>)
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4b2f      	ldr	r3, [pc, #188]	; (8004bf4 <bekle+0x128>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d0ef      	beq.n	8004b1e <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b3e:	e002      	b.n	8004b46 <bekle+0x7a>
    	butonKontrol = 1;
 8004b40:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <bekle+0x12c>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b46:	2104      	movs	r1, #4
 8004b48:	482c      	ldr	r0, [pc, #176]	; (8004bfc <bekle+0x130>)
 8004b4a:	f004 fd5f 	bl	800960c <HAL_GPIO_ReadPin>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d109      	bne.n	8004b68 <bekle+0x9c>
 8004b54:	4b26      	ldr	r3, [pc, #152]	; (8004bf0 <bekle+0x124>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	4b26      	ldr	r3, [pc, #152]	; (8004bf4 <bekle+0x128>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d0ef      	beq.n	8004b40 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b60:	e002      	b.n	8004b68 <bekle+0x9c>
    	butonKontrol = 1;
 8004b62:	4b25      	ldr	r3, [pc, #148]	; (8004bf8 <bekle+0x12c>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b68:	2108      	movs	r1, #8
 8004b6a:	4824      	ldr	r0, [pc, #144]	; (8004bfc <bekle+0x130>)
 8004b6c:	f004 fd4e 	bl	800960c <HAL_GPIO_ReadPin>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d109      	bne.n	8004b8a <bekle+0xbe>
 8004b76:	4b1e      	ldr	r3, [pc, #120]	; (8004bf0 <bekle+0x124>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b1e      	ldr	r3, [pc, #120]	; (8004bf4 <bekle+0x128>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d0ef      	beq.n	8004b62 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b82:	e002      	b.n	8004b8a <bekle+0xbe>
    	butonKontrol = 1;
 8004b84:	4b1c      	ldr	r3, [pc, #112]	; (8004bf8 <bekle+0x12c>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b8a:	2180      	movs	r1, #128	; 0x80
 8004b8c:	481c      	ldr	r0, [pc, #112]	; (8004c00 <bekle+0x134>)
 8004b8e:	f004 fd3d 	bl	800960c <HAL_GPIO_ReadPin>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <bekle+0xe0>
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <bekle+0x124>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4b15      	ldr	r3, [pc, #84]	; (8004bf4 <bekle+0x128>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d0ef      	beq.n	8004b84 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ba4:	e002      	b.n	8004bac <bekle+0xe0>
    	butonKontrol = 1;
 8004ba6:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <bekle+0x12c>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bb0:	4813      	ldr	r0, [pc, #76]	; (8004c00 <bekle+0x134>)
 8004bb2:	f004 fd2b 	bl	800960c <HAL_GPIO_ReadPin>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d109      	bne.n	8004bd0 <bekle+0x104>
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <bekle+0x124>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <bekle+0x128>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d0ee      	beq.n	8004ba6 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bc8:	e002      	b.n	8004bd0 <bekle+0x104>
    	butonKontrol = 1;
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <bekle+0x12c>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bd4:	480a      	ldr	r0, [pc, #40]	; (8004c00 <bekle+0x134>)
 8004bd6:	f004 fd19 	bl	800960c <HAL_GPIO_ReadPin>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d105      	bne.n	8004bec <bekle+0x120>
 8004be0:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <bekle+0x124>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	4b03      	ldr	r3, [pc, #12]	; (8004bf4 <bekle+0x128>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d0ee      	beq.n	8004bca <bekle+0xfe>
    }

}
 8004bec:	bf00      	nop
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	200001fc 	.word	0x200001fc
 8004bf4:	20000204 	.word	0x20000204
 8004bf8:	2000024f 	.word	0x2000024f
 8004bfc:	40010800 	.word	0x40010800
 8004c00:	40011000 	.word	0x40011000

08004c04 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <checkLCDBacklight+0x24>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <checkLCDBacklight+0x28>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b3b      	cmp	r3, #59	; 0x3b
 8004c14:	d903      	bls.n	8004c1e <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004c16:	2000      	movs	r0, #0
 8004c18:	f003 fa1e 	bl	8008058 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004c1c:	e002      	b.n	8004c24 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004c1e:	2001      	movs	r0, #1
 8004c20:	f003 fa1a 	bl	8008058 <lcd_backlight>
}
 8004c24:	bf00      	nop
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	200001fc 	.word	0x200001fc
 8004c2c:	20000218 	.word	0x20000218

08004c30 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004c34:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <checkBasincSalteri+0x54>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d102      	bne.n	8004c42 <checkBasincSalteri+0x12>
		basincVar=1;
 8004c3c:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <checkBasincSalteri+0x58>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <checkBasincSalteri+0x54>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d119      	bne.n	8004c7e <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c4e:	480f      	ldr	r0, [pc, #60]	; (8004c8c <checkBasincSalteri+0x5c>)
 8004c50:	f004 fcdc 	bl	800960c <HAL_GPIO_ReadPin>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <checkBasincSalteri+0x60>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <checkBasincSalteri+0x64>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d90a      	bls.n	8004c7e <checkBasincSalteri+0x4e>
				basincVar=1;
 8004c68:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <checkBasincSalteri+0x58>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004c6e:	e006      	b.n	8004c7e <checkBasincSalteri+0x4e>
			timer5=millis;
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <checkBasincSalteri+0x60>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a07      	ldr	r2, [pc, #28]	; (8004c94 <checkBasincSalteri+0x64>)
 8004c76:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <checkBasincSalteri+0x58>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	701a      	strb	r2, [r3, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000227 	.word	0x20000227
 8004c88:	20000223 	.word	0x20000223
 8004c8c:	40011000 	.word	0x40011000
 8004c90:	200001fc 	.word	0x200001fc
 8004c94:	20000214 	.word	0x20000214

08004c98 <checkBasGonder>:

void checkBasGonder() {
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004c9c:	4b1b      	ldr	r3, [pc, #108]	; (8004d0c <checkBasGonder+0x74>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d10b      	bne.n	8004cbc <checkBasGonder+0x24>
 8004ca4:	4b1a      	ldr	r3, [pc, #104]	; (8004d10 <checkBasGonder+0x78>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <checkBasGonder+0x24>
 8004cac:	4b19      	ldr	r3, [pc, #100]	; (8004d14 <checkBasGonder+0x7c>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d103      	bne.n	8004cbc <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004cb4:	4b18      	ldr	r3, [pc, #96]	; (8004d18 <checkBasGonder+0x80>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	e009      	b.n	8004cd0 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004cbc:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <checkBasGonder+0x78>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	f083 0301 	eor.w	r3, r3, #1
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004cca:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <checkBasGonder+0x80>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004cd0:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <checkBasGonder+0x74>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d10b      	bne.n	8004cf0 <checkBasGonder+0x58>
 8004cd8:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <checkBasGonder+0x84>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <checkBasGonder+0x58>
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <checkBasGonder+0x7c>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d103      	bne.n	8004cf0 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004ce8:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <checkBasGonder+0x88>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004cee:	e009      	b.n	8004d04 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <checkBasGonder+0x84>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	f083 0301 	eor.w	r3, r3, #1
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004cfe:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <checkBasGonder+0x88>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bc80      	pop	{r7}
 8004d0a:	4770      	bx	lr
 8004d0c:	20000221 	.word	0x20000221
 8004d10:	20000255 	.word	0x20000255
 8004d14:	2000022f 	.word	0x2000022f
 8004d18:	2000025c 	.word	0x2000025c
 8004d1c:	20000258 	.word	0x20000258
 8004d20:	2000025d 	.word	0x2000025d

08004d24 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004d28:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <checkKapiSecimleri+0x98>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004d30:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <checkKapiSecimleri+0x9c>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004d36:	4b21      	ldr	r3, [pc, #132]	; (8004dbc <checkKapiSecimleri+0x98>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d10e      	bne.n	8004d5c <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004d3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d42:	4820      	ldr	r0, [pc, #128]	; (8004dc4 <checkKapiSecimleri+0xa0>)
 8004d44:	f004 fc62 	bl	800960c <HAL_GPIO_ReadPin>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d103      	bne.n	8004d56 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004d4e:	4b1c      	ldr	r3, [pc, #112]	; (8004dc0 <checkKapiSecimleri+0x9c>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e002      	b.n	8004d5c <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004d56:	4b1a      	ldr	r3, [pc, #104]	; (8004dc0 <checkKapiSecimleri+0x9c>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004d5c:	4b17      	ldr	r3, [pc, #92]	; (8004dbc <checkKapiSecimleri+0x98>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d10e      	bne.n	8004d82 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d68:	4816      	ldr	r0, [pc, #88]	; (8004dc4 <checkKapiSecimleri+0xa0>)
 8004d6a:	f004 fc4f 	bl	800960c <HAL_GPIO_ReadPin>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d103      	bne.n	8004d7c <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004d74:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <checkKapiSecimleri+0x9c>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e002      	b.n	8004d82 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004d7c:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <checkKapiSecimleri+0x9c>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004d82:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <checkKapiSecimleri+0x98>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d116      	bne.n	8004db8 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d8e:	480d      	ldr	r0, [pc, #52]	; (8004dc4 <checkKapiSecimleri+0xa0>)
 8004d90:	f004 fc3c 	bl	800960c <HAL_GPIO_ReadPin>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <checkKapiSecimleri+0x8e>
 8004d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d9e:	4809      	ldr	r0, [pc, #36]	; (8004dc4 <checkKapiSecimleri+0xa0>)
 8004da0:	f004 fc34 	bl	800960c <HAL_GPIO_ReadPin>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004daa:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <checkKapiSecimleri+0x9c>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004db0:	e002      	b.n	8004db8 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004db2:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <checkKapiSecimleri+0x9c>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	701a      	strb	r2, [r3, #0]
}
 8004db8:	bf00      	nop
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20000228 	.word	0x20000228
 8004dc0:	20000273 	.word	0x20000273
 8004dc4:	40010800 	.word	0x40010800

08004dc8 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004dcc:	4b62      	ldr	r3, [pc, #392]	; (8004f58 <checkAktifCalisma+0x190>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f041 833e 	bne.w	8006452 <checkAktifCalisma+0x168a>
 8004dd6:	4b61      	ldr	r3, [pc, #388]	; (8004f5c <checkAktifCalisma+0x194>)
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f041 8339 	bne.w	8006452 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004de0:	4b5f      	ldr	r3, [pc, #380]	; (8004f60 <checkAktifCalisma+0x198>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11a      	bne.n	8004e1e <checkAktifCalisma+0x56>
 8004de8:	4b5e      	ldr	r3, [pc, #376]	; (8004f64 <checkAktifCalisma+0x19c>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d116      	bne.n	8004e1e <checkAktifCalisma+0x56>
 8004df0:	4b5d      	ldr	r3, [pc, #372]	; (8004f68 <checkAktifCalisma+0x1a0>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <checkAktifCalisma+0x46>
 8004df8:	4b5c      	ldr	r3, [pc, #368]	; (8004f6c <checkAktifCalisma+0x1a4>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	f083 0301 	eor.w	r3, r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <checkAktifCalisma+0x46>
 8004e06:	4b5a      	ldr	r3, [pc, #360]	; (8004f70 <checkAktifCalisma+0x1a8>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d007      	beq.n	8004e1e <checkAktifCalisma+0x56>
 8004e0e:	4b59      	ldr	r3, [pc, #356]	; (8004f74 <checkAktifCalisma+0x1ac>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d018      	beq.n	8004e48 <checkAktifCalisma+0x80>
 8004e16:	4b58      	ldr	r3, [pc, #352]	; (8004f78 <checkAktifCalisma+0x1b0>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d114      	bne.n	8004e48 <checkAktifCalisma+0x80>
 8004e1e:	4b57      	ldr	r3, [pc, #348]	; (8004f7c <checkAktifCalisma+0x1b4>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d010      	beq.n	8004e48 <checkAktifCalisma+0x80>
 8004e26:	4b56      	ldr	r3, [pc, #344]	; (8004f80 <checkAktifCalisma+0x1b8>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e34:	4853      	ldr	r0, [pc, #332]	; (8004f84 <checkAktifCalisma+0x1bc>)
 8004e36:	f004 fc00 	bl	800963a <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004e3a:	4b53      	ldr	r3, [pc, #332]	; (8004f88 <checkAktifCalisma+0x1c0>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004e40:	4b52      	ldr	r3, [pc, #328]	; (8004f8c <checkAktifCalisma+0x1c4>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	e008      	b.n	8004e5a <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e4e:	484d      	ldr	r0, [pc, #308]	; (8004f84 <checkAktifCalisma+0x1bc>)
 8004e50:	f004 fbf3 	bl	800963a <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004e54:	4b4c      	ldr	r3, [pc, #304]	; (8004f88 <checkAktifCalisma+0x1c0>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004e5a:	4b40      	ldr	r3, [pc, #256]	; (8004f5c <checkAktifCalisma+0x194>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d160      	bne.n	8004f24 <checkAktifCalisma+0x15c>
 8004e62:	4b46      	ldr	r3, [pc, #280]	; (8004f7c <checkAktifCalisma+0x1b4>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d05c      	beq.n	8004f24 <checkAktifCalisma+0x15c>
 8004e6a:	4b45      	ldr	r3, [pc, #276]	; (8004f80 <checkAktifCalisma+0x1b8>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d058      	beq.n	8004f24 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004e72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e76:	4843      	ldr	r0, [pc, #268]	; (8004f84 <checkAktifCalisma+0x1bc>)
 8004e78:	f004 fbc8 	bl	800960c <HAL_GPIO_ReadPin>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <checkAktifCalisma+0xc2>
 8004e82:	4b43      	ldr	r3, [pc, #268]	; (8004f90 <checkAktifCalisma+0x1c8>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d04c      	beq.n	8004f24 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e8a:	2102      	movs	r1, #2
 8004e8c:	4841      	ldr	r0, [pc, #260]	; (8004f94 <checkAktifCalisma+0x1cc>)
 8004e8e:	f004 fbbd 	bl	800960c <HAL_GPIO_ReadPin>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d145      	bne.n	8004f24 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004e98:	4b3f      	ldr	r3, [pc, #252]	; (8004f98 <checkAktifCalisma+0x1d0>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d041      	beq.n	8004f24 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ea4:	4837      	ldr	r0, [pc, #220]	; (8004f84 <checkAktifCalisma+0x1bc>)
 8004ea6:	f004 fbb1 	bl	800960c <HAL_GPIO_ReadPin>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d10e      	bne.n	8004ece <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004eb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eb4:	4833      	ldr	r0, [pc, #204]	; (8004f84 <checkAktifCalisma+0x1bc>)
 8004eb6:	f004 fba9 	bl	800960c <HAL_GPIO_ReadPin>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d106      	bne.n	8004ece <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004ec0:	2140      	movs	r1, #64	; 0x40
 8004ec2:	4834      	ldr	r0, [pc, #208]	; (8004f94 <checkAktifCalisma+0x1cc>)
 8004ec4:	f004 fba2 	bl	800960c <HAL_GPIO_ReadPin>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d003      	beq.n	8004ed6 <checkAktifCalisma+0x10e>
 8004ece:	4b24      	ldr	r3, [pc, #144]	; (8004f60 <checkAktifCalisma+0x198>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d026      	beq.n	8004f24 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004ed6:	4b24      	ldr	r3, [pc, #144]	; (8004f68 <checkAktifCalisma+0x1a0>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	f083 0301 	eor.w	r3, r3, #1
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01f      	beq.n	8004f24 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004ee4:	4b1f      	ldr	r3, [pc, #124]	; (8004f64 <checkAktifCalisma+0x19c>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	f083 0301 	eor.w	r3, r3, #1
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d018      	beq.n	8004f24 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004ef2:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <checkAktifCalisma+0x1ac>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	f083 0301 	eor.w	r3, r3, #1
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d011      	beq.n	8004f24 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004f00:	4b26      	ldr	r3, [pc, #152]	; (8004f9c <checkAktifCalisma+0x1d4>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	f083 0301 	eor.w	r3, r3, #1
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004f0e:	4b24      	ldr	r3, [pc, #144]	; (8004fa0 <checkAktifCalisma+0x1d8>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	f083 0301 	eor.w	r3, r3, #1
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004f1c:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <checkAktifCalisma+0x198>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	e002      	b.n	8004f2a <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004f24:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <checkAktifCalisma+0x198>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <checkAktifCalisma+0x198>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d03a      	beq.n	8004fa8 <checkAktifCalisma+0x1e0>
 8004f32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f36:	4817      	ldr	r0, [pc, #92]	; (8004f94 <checkAktifCalisma+0x1cc>)
 8004f38:	f004 fb68 	bl	800960c <HAL_GPIO_ReadPin>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d132      	bne.n	8004fa8 <checkAktifCalisma+0x1e0>
 8004f42:	4b18      	ldr	r3, [pc, #96]	; (8004fa4 <checkAktifCalisma+0x1dc>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d02e      	beq.n	8004fa8 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f50:	480c      	ldr	r0, [pc, #48]	; (8004f84 <checkAktifCalisma+0x1bc>)
 8004f52:	f004 fb72 	bl	800963a <HAL_GPIO_WritePin>
 8004f56:	e02d      	b.n	8004fb4 <checkAktifCalisma+0x1ec>
 8004f58:	2000023e 	.word	0x2000023e
 8004f5c:	2000023d 	.word	0x2000023d
 8004f60:	20000255 	.word	0x20000255
 8004f64:	20000256 	.word	0x20000256
 8004f68:	20000258 	.word	0x20000258
 8004f6c:	20000250 	.word	0x20000250
 8004f70:	20000233 	.word	0x20000233
 8004f74:	20000257 	.word	0x20000257
 8004f78:	20000232 	.word	0x20000232
 8004f7c:	20000272 	.word	0x20000272
 8004f80:	20000273 	.word	0x20000273
 8004f84:	40010c00 	.word	0x40010c00
 8004f88:	20000274 	.word	0x20000274
 8004f8c:	2000025f 	.word	0x2000025f
 8004f90:	2000025c 	.word	0x2000025c
 8004f94:	40011000 	.word	0x40011000
 8004f98:	20000223 	.word	0x20000223
 8004f9c:	2000025a 	.word	0x2000025a
 8004fa0:	2000025b 	.word	0x2000025b
 8004fa4:	2000022e 	.word	0x2000022e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fae:	4860      	ldr	r0, [pc, #384]	; (8005130 <checkAktifCalisma+0x368>)
 8004fb0:	f004 fb43 	bl	800963a <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004fb4:	4b5f      	ldr	r3, [pc, #380]	; (8005134 <checkAktifCalisma+0x36c>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d013      	beq.n	8004fe4 <checkAktifCalisma+0x21c>
 8004fbc:	4b5e      	ldr	r3, [pc, #376]	; (8005138 <checkAktifCalisma+0x370>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d007      	beq.n	8004fd4 <checkAktifCalisma+0x20c>
 8004fc4:	4b5c      	ldr	r3, [pc, #368]	; (8005138 <checkAktifCalisma+0x370>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d003      	beq.n	8004fd4 <checkAktifCalisma+0x20c>
 8004fcc:	4b5b      	ldr	r3, [pc, #364]	; (800513c <checkAktifCalisma+0x374>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d107      	bne.n	8004fe4 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	2104      	movs	r1, #4
 8004fd8:	4855      	ldr	r0, [pc, #340]	; (8005130 <checkAktifCalisma+0x368>)
 8004fda:	f004 fb2e 	bl	800963a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004fde:	4b58      	ldr	r3, [pc, #352]	; (8005140 <checkAktifCalisma+0x378>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004fe4:	4b56      	ldr	r3, [pc, #344]	; (8005140 <checkAktifCalisma+0x378>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d02f      	beq.n	800504c <checkAktifCalisma+0x284>
 8004fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ff0:	484f      	ldr	r0, [pc, #316]	; (8005130 <checkAktifCalisma+0x368>)
 8004ff2:	f004 fb0b 	bl	800960c <HAL_GPIO_ReadPin>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d106      	bne.n	800500a <checkAktifCalisma+0x242>
 8004ffc:	4b51      	ldr	r3, [pc, #324]	; (8005144 <checkAktifCalisma+0x37c>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	f083 0301 	eor.w	r3, r3, #1
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <checkAktifCalisma+0x250>
 800500a:	2102      	movs	r1, #2
 800500c:	484e      	ldr	r0, [pc, #312]	; (8005148 <checkAktifCalisma+0x380>)
 800500e:	f004 fafd 	bl	800960c <HAL_GPIO_ReadPin>
 8005012:	4603      	mov	r3, r0
 8005014:	2b01      	cmp	r3, #1
 8005016:	d119      	bne.n	800504c <checkAktifCalisma+0x284>
 8005018:	4b4c      	ldr	r3, [pc, #304]	; (800514c <checkAktifCalisma+0x384>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d015      	beq.n	800504c <checkAktifCalisma+0x284>
 8005020:	4b4b      	ldr	r3, [pc, #300]	; (8005150 <checkAktifCalisma+0x388>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d011      	beq.n	800504c <checkAktifCalisma+0x284>
 8005028:	4b4a      	ldr	r3, [pc, #296]	; (8005154 <checkAktifCalisma+0x38c>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00d      	beq.n	800504c <checkAktifCalisma+0x284>
 8005030:	4b49      	ldr	r3, [pc, #292]	; (8005158 <checkAktifCalisma+0x390>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	f083 0301 	eor.w	r3, r3, #1
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d006      	beq.n	800504c <checkAktifCalisma+0x284>
			timer2=millis;
 800503e:	4b47      	ldr	r3, [pc, #284]	; (800515c <checkAktifCalisma+0x394>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a47      	ldr	r2, [pc, #284]	; (8005160 <checkAktifCalisma+0x398>)
 8005044:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005046:	4b44      	ldr	r3, [pc, #272]	; (8005158 <checkAktifCalisma+0x390>)
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 800504c:	4b43      	ldr	r3, [pc, #268]	; (800515c <checkAktifCalisma+0x394>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	4b43      	ldr	r3, [pc, #268]	; (8005160 <checkAktifCalisma+0x398>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	4a43      	ldr	r2, [pc, #268]	; (8005164 <checkAktifCalisma+0x39c>)
 8005058:	7812      	ldrb	r2, [r2, #0]
 800505a:	4293      	cmp	r3, r2
 800505c:	d303      	bcc.n	8005066 <checkAktifCalisma+0x29e>
 800505e:	4b3e      	ldr	r3, [pc, #248]	; (8005158 <checkAktifCalisma+0x390>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d111      	bne.n	800508a <checkAktifCalisma+0x2c2>
 8005066:	4b39      	ldr	r3, [pc, #228]	; (800514c <checkAktifCalisma+0x384>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	f083 0301 	eor.w	r3, r3, #1
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <checkAktifCalisma+0x2c2>
 8005074:	4b36      	ldr	r3, [pc, #216]	; (8005150 <checkAktifCalisma+0x388>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	f083 0301 	eor.w	r3, r3, #1
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d103      	bne.n	800508a <checkAktifCalisma+0x2c2>
 8005082:	4b34      	ldr	r3, [pc, #208]	; (8005154 <checkAktifCalisma+0x38c>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800508a:	2200      	movs	r2, #0
 800508c:	2104      	movs	r1, #4
 800508e:	4828      	ldr	r0, [pc, #160]	; (8005130 <checkAktifCalisma+0x368>)
 8005090:	f004 fad3 	bl	800963a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005094:	4b2a      	ldr	r3, [pc, #168]	; (8005140 <checkAktifCalisma+0x378>)
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 800509a:	4b2f      	ldr	r3, [pc, #188]	; (8005158 <checkAktifCalisma+0x390>)
 800509c:	2200      	movs	r2, #0
 800509e:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80050a0:	4b31      	ldr	r3, [pc, #196]	; (8005168 <checkAktifCalisma+0x3a0>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80050a8:	4b30      	ldr	r3, [pc, #192]	; (800516c <checkAktifCalisma+0x3a4>)
 80050aa:	2201      	movs	r2, #1
 80050ac:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80050ae:	4b2e      	ldr	r3, [pc, #184]	; (8005168 <checkAktifCalisma+0x3a0>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d116      	bne.n	80050e4 <checkAktifCalisma+0x31c>
 80050b6:	4b2e      	ldr	r3, [pc, #184]	; (8005170 <checkAktifCalisma+0x3a8>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d112      	bne.n	80050e4 <checkAktifCalisma+0x31c>
 80050be:	2101      	movs	r1, #1
 80050c0:	4821      	ldr	r0, [pc, #132]	; (8005148 <checkAktifCalisma+0x380>)
 80050c2:	f004 faa3 	bl	800960c <HAL_GPIO_ReadPin>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10b      	bne.n	80050e4 <checkAktifCalisma+0x31c>
 80050cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050d0:	4817      	ldr	r0, [pc, #92]	; (8005130 <checkAktifCalisma+0x368>)
 80050d2:	f004 fa9b 	bl	800960c <HAL_GPIO_ReadPin>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d103      	bne.n	80050e4 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80050dc:	4b23      	ldr	r3, [pc, #140]	; (800516c <checkAktifCalisma+0x3a4>)
 80050de:	2201      	movs	r2, #1
 80050e0:	701a      	strb	r2, [r3, #0]
 80050e2:	e011      	b.n	8005108 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80050e4:	4b20      	ldr	r3, [pc, #128]	; (8005168 <checkAktifCalisma+0x3a0>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d10d      	bne.n	8005108 <checkAktifCalisma+0x340>
 80050ec:	2101      	movs	r1, #1
 80050ee:	4816      	ldr	r0, [pc, #88]	; (8005148 <checkAktifCalisma+0x380>)
 80050f0:	f004 fa8c 	bl	800960c <HAL_GPIO_ReadPin>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d106      	bne.n	8005108 <checkAktifCalisma+0x340>
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <checkAktifCalisma+0x3a8>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d102      	bne.n	8005108 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005102:	4b1a      	ldr	r3, [pc, #104]	; (800516c <checkAktifCalisma+0x3a4>)
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005108:	4b17      	ldr	r3, [pc, #92]	; (8005168 <checkAktifCalisma+0x3a0>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d134      	bne.n	800517a <checkAktifCalisma+0x3b2>
 8005110:	4b17      	ldr	r3, [pc, #92]	; (8005170 <checkAktifCalisma+0x3a8>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d130      	bne.n	800517a <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005118:	2101      	movs	r1, #1
 800511a:	480b      	ldr	r0, [pc, #44]	; (8005148 <checkAktifCalisma+0x380>)
 800511c:	f004 fa76 	bl	800960c <HAL_GPIO_ReadPin>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d126      	bne.n	8005174 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005126:	4b11      	ldr	r3, [pc, #68]	; (800516c <checkAktifCalisma+0x3a4>)
 8005128:	2201      	movs	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	e025      	b.n	800517a <checkAktifCalisma+0x3b2>
 800512e:	bf00      	nop
 8005130:	40010c00 	.word	0x40010c00
 8005134:	20000255 	.word	0x20000255
 8005138:	2000022f 	.word	0x2000022f
 800513c:	20000233 	.word	0x20000233
 8005140:	20000259 	.word	0x20000259
 8005144:	2000025c 	.word	0x2000025c
 8005148:	40011000 	.word	0x40011000
 800514c:	20000272 	.word	0x20000272
 8005150:	20000273 	.word	0x20000273
 8005154:	20000223 	.word	0x20000223
 8005158:	20000251 	.word	0x20000251
 800515c:	200001fc 	.word	0x200001fc
 8005160:	20000208 	.word	0x20000208
 8005164:	20000234 	.word	0x20000234
 8005168:	20000224 	.word	0x20000224
 800516c:	20000277 	.word	0x20000277
 8005170:	20000221 	.word	0x20000221
			} else {
				cerceveVar=0;
 8005174:	4b7f      	ldr	r3, [pc, #508]	; (8005374 <checkAktifCalisma+0x5ac>)
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800517a:	4b7f      	ldr	r3, [pc, #508]	; (8005378 <checkAktifCalisma+0x5b0>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d17c      	bne.n	800527c <checkAktifCalisma+0x4b4>
 8005182:	4b7e      	ldr	r3, [pc, #504]	; (800537c <checkAktifCalisma+0x5b4>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d078      	beq.n	800527c <checkAktifCalisma+0x4b4>
 800518a:	4b7d      	ldr	r3, [pc, #500]	; (8005380 <checkAktifCalisma+0x5b8>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d074      	beq.n	800527c <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005196:	487b      	ldr	r0, [pc, #492]	; (8005384 <checkAktifCalisma+0x5bc>)
 8005198:	f004 fa38 	bl	800960c <HAL_GPIO_ReadPin>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <checkAktifCalisma+0x3e2>
 80051a2:	4b79      	ldr	r3, [pc, #484]	; (8005388 <checkAktifCalisma+0x5c0>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d068      	beq.n	800527c <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80051aa:	4b72      	ldr	r3, [pc, #456]	; (8005374 <checkAktifCalisma+0x5ac>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d064      	beq.n	800527c <checkAktifCalisma+0x4b4>
 80051b2:	4b76      	ldr	r3, [pc, #472]	; (800538c <checkAktifCalisma+0x5c4>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	f083 0301 	eor.w	r3, r3, #1
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d05d      	beq.n	800527c <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80051c0:	2104      	movs	r1, #4
 80051c2:	4873      	ldr	r0, [pc, #460]	; (8005390 <checkAktifCalisma+0x5c8>)
 80051c4:	f004 fa22 	bl	800960c <HAL_GPIO_ReadPin>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <checkAktifCalisma+0x40e>
 80051ce:	4b71      	ldr	r3, [pc, #452]	; (8005394 <checkAktifCalisma+0x5cc>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d152      	bne.n	800527c <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80051d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051da:	486a      	ldr	r0, [pc, #424]	; (8005384 <checkAktifCalisma+0x5bc>)
 80051dc:	f004 fa16 	bl	800960c <HAL_GPIO_ReadPin>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d10e      	bne.n	8005204 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80051e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051ea:	4866      	ldr	r0, [pc, #408]	; (8005384 <checkAktifCalisma+0x5bc>)
 80051ec:	f004 fa0e 	bl	800960c <HAL_GPIO_ReadPin>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d106      	bne.n	8005204 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80051f6:	2140      	movs	r1, #64	; 0x40
 80051f8:	4865      	ldr	r0, [pc, #404]	; (8005390 <checkAktifCalisma+0x5c8>)
 80051fa:	f004 fa07 	bl	800960c <HAL_GPIO_ReadPin>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b01      	cmp	r3, #1
 8005202:	d003      	beq.n	800520c <checkAktifCalisma+0x444>
 8005204:	4b64      	ldr	r3, [pc, #400]	; (8005398 <checkAktifCalisma+0x5d0>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d037      	beq.n	800527c <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 800520c:	4b63      	ldr	r3, [pc, #396]	; (800539c <checkAktifCalisma+0x5d4>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	f083 0301 	eor.w	r3, r3, #1
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d030      	beq.n	800527c <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800521a:	4b61      	ldr	r3, [pc, #388]	; (80053a0 <checkAktifCalisma+0x5d8>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	f083 0301 	eor.w	r3, r3, #1
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d029      	beq.n	800527c <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005228:	4b5e      	ldr	r3, [pc, #376]	; (80053a4 <checkAktifCalisma+0x5dc>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	f083 0301 	eor.w	r3, r3, #1
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d022      	beq.n	800527c <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005236:	4b5c      	ldr	r3, [pc, #368]	; (80053a8 <checkAktifCalisma+0x5e0>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	f083 0301 	eor.w	r3, r3, #1
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01b      	beq.n	800527c <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005244:	4b59      	ldr	r3, [pc, #356]	; (80053ac <checkAktifCalisma+0x5e4>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	f083 0301 	eor.w	r3, r3, #1
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d014      	beq.n	800527c <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005252:	4b57      	ldr	r3, [pc, #348]	; (80053b0 <checkAktifCalisma+0x5e8>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	f083 0301 	eor.w	r3, r3, #1
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00d      	beq.n	800527c <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005260:	2201      	movs	r2, #1
 8005262:	2102      	movs	r1, #2
 8005264:	4847      	ldr	r0, [pc, #284]	; (8005384 <checkAktifCalisma+0x5bc>)
 8005266:	f004 f9e8 	bl	800963a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 800526a:	4b4b      	ldr	r3, [pc, #300]	; (8005398 <checkAktifCalisma+0x5d0>)
 800526c:	2201      	movs	r2, #1
 800526e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005270:	4b50      	ldr	r3, [pc, #320]	; (80053b4 <checkAktifCalisma+0x5ec>)
 8005272:	2201      	movs	r2, #1
 8005274:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8005276:	4b50      	ldr	r3, [pc, #320]	; (80053b8 <checkAktifCalisma+0x5f0>)
 8005278:	2201      	movs	r2, #1
 800527a:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 800527c:	4b46      	ldr	r3, [pc, #280]	; (8005398 <checkAktifCalisma+0x5d0>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d033      	beq.n	80052ec <checkAktifCalisma+0x524>
 8005284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005288:	483e      	ldr	r0, [pc, #248]	; (8005384 <checkAktifCalisma+0x5bc>)
 800528a:	f004 f9bf 	bl	800960c <HAL_GPIO_ReadPin>
 800528e:	4603      	mov	r3, r0
 8005290:	2b01      	cmp	r3, #1
 8005292:	d106      	bne.n	80052a2 <checkAktifCalisma+0x4da>
 8005294:	4b3c      	ldr	r3, [pc, #240]	; (8005388 <checkAktifCalisma+0x5c0>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	f083 0301 	eor.w	r3, r3, #1
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10a      	bne.n	80052b8 <checkAktifCalisma+0x4f0>
 80052a2:	2104      	movs	r1, #4
 80052a4:	483a      	ldr	r0, [pc, #232]	; (8005390 <checkAktifCalisma+0x5c8>)
 80052a6:	f004 f9b1 	bl	800960c <HAL_GPIO_ReadPin>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d11d      	bne.n	80052ec <checkAktifCalisma+0x524>
 80052b0:	4b38      	ldr	r3, [pc, #224]	; (8005394 <checkAktifCalisma+0x5cc>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d019      	beq.n	80052ec <checkAktifCalisma+0x524>
 80052b8:	4b30      	ldr	r3, [pc, #192]	; (800537c <checkAktifCalisma+0x5b4>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <checkAktifCalisma+0x524>
 80052c0:	4b2f      	ldr	r3, [pc, #188]	; (8005380 <checkAktifCalisma+0x5b8>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d011      	beq.n	80052ec <checkAktifCalisma+0x524>
 80052c8:	4b2a      	ldr	r3, [pc, #168]	; (8005374 <checkAktifCalisma+0x5ac>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00d      	beq.n	80052ec <checkAktifCalisma+0x524>
 80052d0:	4b3a      	ldr	r3, [pc, #232]	; (80053bc <checkAktifCalisma+0x5f4>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	f083 0301 	eor.w	r3, r3, #1
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d006      	beq.n	80052ec <checkAktifCalisma+0x524>
			timer2=millis;
 80052de:	4b38      	ldr	r3, [pc, #224]	; (80053c0 <checkAktifCalisma+0x5f8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a38      	ldr	r2, [pc, #224]	; (80053c4 <checkAktifCalisma+0x5fc>)
 80052e4:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80052e6:	4b35      	ldr	r3, [pc, #212]	; (80053bc <checkAktifCalisma+0x5f4>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80052ec:	4b34      	ldr	r3, [pc, #208]	; (80053c0 <checkAktifCalisma+0x5f8>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	4b34      	ldr	r3, [pc, #208]	; (80053c4 <checkAktifCalisma+0x5fc>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	4a34      	ldr	r2, [pc, #208]	; (80053c8 <checkAktifCalisma+0x600>)
 80052f8:	7812      	ldrb	r2, [r2, #0]
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d303      	bcc.n	8005306 <checkAktifCalisma+0x53e>
 80052fe:	4b2f      	ldr	r3, [pc, #188]	; (80053bc <checkAktifCalisma+0x5f4>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d114      	bne.n	8005330 <checkAktifCalisma+0x568>
 8005306:	4b1d      	ldr	r3, [pc, #116]	; (800537c <checkAktifCalisma+0x5b4>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	f083 0301 	eor.w	r3, r3, #1
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10d      	bne.n	8005330 <checkAktifCalisma+0x568>
 8005314:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <checkAktifCalisma+0x5b8>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	f083 0301 	eor.w	r3, r3, #1
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <checkAktifCalisma+0x568>
 8005322:	4b14      	ldr	r3, [pc, #80]	; (8005374 <checkAktifCalisma+0x5ac>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	f083 0301 	eor.w	r3, r3, #1
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005330:	2200      	movs	r2, #0
 8005332:	2102      	movs	r1, #2
 8005334:	4813      	ldr	r0, [pc, #76]	; (8005384 <checkAktifCalisma+0x5bc>)
 8005336:	f004 f980 	bl	800963a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800533a:	4b17      	ldr	r3, [pc, #92]	; (8005398 <checkAktifCalisma+0x5d0>)
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005340:	4b1e      	ldr	r3, [pc, #120]	; (80053bc <checkAktifCalisma+0x5f4>)
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005346:	4b14      	ldr	r3, [pc, #80]	; (8005398 <checkAktifCalisma+0x5d0>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d040      	beq.n	80053d0 <checkAktifCalisma+0x608>
 800534e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005352:	480f      	ldr	r0, [pc, #60]	; (8005390 <checkAktifCalisma+0x5c8>)
 8005354:	f004 f95a 	bl	800960c <HAL_GPIO_ReadPin>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d138      	bne.n	80053d0 <checkAktifCalisma+0x608>
 800535e:	4b1b      	ldr	r3, [pc, #108]	; (80053cc <checkAktifCalisma+0x604>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d034      	beq.n	80053d0 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005366:	2201      	movs	r2, #1
 8005368:	2101      	movs	r1, #1
 800536a:	4806      	ldr	r0, [pc, #24]	; (8005384 <checkAktifCalisma+0x5bc>)
 800536c:	f004 f965 	bl	800963a <HAL_GPIO_WritePin>
 8005370:	e033      	b.n	80053da <checkAktifCalisma+0x612>
 8005372:	bf00      	nop
 8005374:	20000277 	.word	0x20000277
 8005378:	2000023d 	.word	0x2000023d
 800537c:	20000272 	.word	0x20000272
 8005380:	20000273 	.word	0x20000273
 8005384:	40010c00 	.word	0x40010c00
 8005388:	2000025d 	.word	0x2000025d
 800538c:	20000271 	.word	0x20000271
 8005390:	40011000 	.word	0x40011000
 8005394:	20000226 	.word	0x20000226
 8005398:	20000258 	.word	0x20000258
 800539c:	20000255 	.word	0x20000255
 80053a0:	20000259 	.word	0x20000259
 80053a4:	20000256 	.word	0x20000256
 80053a8:	20000257 	.word	0x20000257
 80053ac:	2000025a 	.word	0x2000025a
 80053b0:	2000025b 	.word	0x2000025b
 80053b4:	20000260 	.word	0x20000260
 80053b8:	20000281 	.word	0x20000281
 80053bc:	20000250 	.word	0x20000250
 80053c0:	200001fc 	.word	0x200001fc
 80053c4:	20000208 	.word	0x20000208
 80053c8:	20000235 	.word	0x20000235
 80053cc:	20000225 	.word	0x20000225
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80053d0:	2200      	movs	r2, #0
 80053d2:	2101      	movs	r1, #1
 80053d4:	4836      	ldr	r0, [pc, #216]	; (80054b0 <checkAktifCalisma+0x6e8>)
 80053d6:	f004 f930 	bl	800963a <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80053da:	4b36      	ldr	r3, [pc, #216]	; (80054b4 <checkAktifCalisma+0x6ec>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f040 8080 	bne.w	80054e4 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80053e4:	4b34      	ldr	r3, [pc, #208]	; (80054b8 <checkAktifCalisma+0x6f0>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d003      	beq.n	80053f4 <checkAktifCalisma+0x62c>
 80053ec:	4b32      	ldr	r3, [pc, #200]	; (80054b8 <checkAktifCalisma+0x6f0>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d177      	bne.n	80054e4 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80053f4:	4b31      	ldr	r3, [pc, #196]	; (80054bc <checkAktifCalisma+0x6f4>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d073      	beq.n	80054e4 <checkAktifCalisma+0x71c>
 80053fc:	4b30      	ldr	r3, [pc, #192]	; (80054c0 <checkAktifCalisma+0x6f8>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d06f      	beq.n	80054e4 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005404:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005408:	4829      	ldr	r0, [pc, #164]	; (80054b0 <checkAktifCalisma+0x6e8>)
 800540a:	f004 f8ff 	bl	800960c <HAL_GPIO_ReadPin>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d167      	bne.n	80054e4 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005418:	482a      	ldr	r0, [pc, #168]	; (80054c4 <checkAktifCalisma+0x6fc>)
 800541a:	f004 f8f7 	bl	800960c <HAL_GPIO_ReadPin>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <checkAktifCalisma+0x664>
 8005424:	4b28      	ldr	r3, [pc, #160]	; (80054c8 <checkAktifCalisma+0x700>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d15b      	bne.n	80054e4 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800542c:	2140      	movs	r1, #64	; 0x40
 800542e:	4825      	ldr	r0, [pc, #148]	; (80054c4 <checkAktifCalisma+0x6fc>)
 8005430:	f004 f8ec 	bl	800960c <HAL_GPIO_ReadPin>
 8005434:	4603      	mov	r3, r0
 8005436:	2b01      	cmp	r3, #1
 8005438:	d10f      	bne.n	800545a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800543a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800543e:	481c      	ldr	r0, [pc, #112]	; (80054b0 <checkAktifCalisma+0x6e8>)
 8005440:	f004 f8e4 	bl	800960c <HAL_GPIO_ReadPin>
 8005444:	4603      	mov	r3, r0
 8005446:	2b01      	cmp	r3, #1
 8005448:	d107      	bne.n	800545a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800544a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800544e:	4818      	ldr	r0, [pc, #96]	; (80054b0 <checkAktifCalisma+0x6e8>)
 8005450:	f004 f8dc 	bl	800960c <HAL_GPIO_ReadPin>
 8005454:	4603      	mov	r3, r0
 8005456:	2b01      	cmp	r3, #1
 8005458:	d003      	beq.n	8005462 <checkAktifCalisma+0x69a>
 800545a:	4b1c      	ldr	r3, [pc, #112]	; (80054cc <checkAktifCalisma+0x704>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d040      	beq.n	80054e4 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005462:	4b1b      	ldr	r3, [pc, #108]	; (80054d0 <checkAktifCalisma+0x708>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	f083 0301 	eor.w	r3, r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d039      	beq.n	80054e4 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005470:	4b18      	ldr	r3, [pc, #96]	; (80054d4 <checkAktifCalisma+0x70c>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	f083 0301 	eor.w	r3, r3, #1
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d032      	beq.n	80054e4 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 800547e:	4b16      	ldr	r3, [pc, #88]	; (80054d8 <checkAktifCalisma+0x710>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	f083 0301 	eor.w	r3, r3, #1
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d02b      	beq.n	80054e4 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 800548c:	4b13      	ldr	r3, [pc, #76]	; (80054dc <checkAktifCalisma+0x714>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	f083 0301 	eor.w	r3, r3, #1
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d024      	beq.n	80054e4 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800549a:	4b11      	ldr	r3, [pc, #68]	; (80054e0 <checkAktifCalisma+0x718>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	f083 0301 	eor.w	r3, r3, #1
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01d      	beq.n	80054e4 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80054a8:	4b08      	ldr	r3, [pc, #32]	; (80054cc <checkAktifCalisma+0x704>)
 80054aa:	2201      	movs	r2, #1
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	e01c      	b.n	80054ea <checkAktifCalisma+0x722>
 80054b0:	40010c00 	.word	0x40010c00
 80054b4:	2000023d 	.word	0x2000023d
 80054b8:	2000022f 	.word	0x2000022f
 80054bc:	20000272 	.word	0x20000272
 80054c0:	20000273 	.word	0x20000273
 80054c4:	40011000 	.word	0x40011000
 80054c8:	20000230 	.word	0x20000230
 80054cc:	20000256 	.word	0x20000256
 80054d0:	20000255 	.word	0x20000255
 80054d4:	20000259 	.word	0x20000259
 80054d8:	20000258 	.word	0x20000258
 80054dc:	20000257 	.word	0x20000257
 80054e0:	2000025b 	.word	0x2000025b
		} else {
			devmotoryukaricalisiyor=0;
 80054e4:	4b64      	ldr	r3, [pc, #400]	; (8005678 <checkAktifCalisma+0x8b0>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80054ea:	4b63      	ldr	r3, [pc, #396]	; (8005678 <checkAktifCalisma+0x8b0>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80054f2:	2201      	movs	r2, #1
 80054f4:	2120      	movs	r1, #32
 80054f6:	4861      	ldr	r0, [pc, #388]	; (800567c <checkAktifCalisma+0x8b4>)
 80054f8:	f004 f89f 	bl	800963a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80054fc:	4b60      	ldr	r3, [pc, #384]	; (8005680 <checkAktifCalisma+0x8b8>)
 80054fe:	2201      	movs	r2, #1
 8005500:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005502:	4b5f      	ldr	r3, [pc, #380]	; (8005680 <checkAktifCalisma+0x8b8>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d025      	beq.n	8005556 <checkAktifCalisma+0x78e>
 800550a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800550e:	485d      	ldr	r0, [pc, #372]	; (8005684 <checkAktifCalisma+0x8bc>)
 8005510:	f004 f87c 	bl	800960c <HAL_GPIO_ReadPin>
 8005514:	4603      	mov	r3, r0
 8005516:	2b01      	cmp	r3, #1
 8005518:	d007      	beq.n	800552a <checkAktifCalisma+0x762>
 800551a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800551e:	4857      	ldr	r0, [pc, #348]	; (800567c <checkAktifCalisma+0x8b4>)
 8005520:	f004 f874 	bl	800960c <HAL_GPIO_ReadPin>
 8005524:	4603      	mov	r3, r0
 8005526:	2b01      	cmp	r3, #1
 8005528:	d115      	bne.n	8005556 <checkAktifCalisma+0x78e>
 800552a:	4b57      	ldr	r3, [pc, #348]	; (8005688 <checkAktifCalisma+0x8c0>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d011      	beq.n	8005556 <checkAktifCalisma+0x78e>
 8005532:	4b56      	ldr	r3, [pc, #344]	; (800568c <checkAktifCalisma+0x8c4>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00d      	beq.n	8005556 <checkAktifCalisma+0x78e>
 800553a:	4b55      	ldr	r3, [pc, #340]	; (8005690 <checkAktifCalisma+0x8c8>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	f083 0301 	eor.w	r3, r3, #1
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d006      	beq.n	8005556 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005548:	4b52      	ldr	r3, [pc, #328]	; (8005694 <checkAktifCalisma+0x8cc>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a52      	ldr	r2, [pc, #328]	; (8005698 <checkAktifCalisma+0x8d0>)
 800554e:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005550:	4b4f      	ldr	r3, [pc, #316]	; (8005690 <checkAktifCalisma+0x8c8>)
 8005552:	2201      	movs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005556:	4b4f      	ldr	r3, [pc, #316]	; (8005694 <checkAktifCalisma+0x8cc>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4b4f      	ldr	r3, [pc, #316]	; (8005698 <checkAktifCalisma+0x8d0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	4a4e      	ldr	r2, [pc, #312]	; (800569c <checkAktifCalisma+0x8d4>)
 8005562:	7812      	ldrb	r2, [r2, #0]
 8005564:	4293      	cmp	r3, r2
 8005566:	d303      	bcc.n	8005570 <checkAktifCalisma+0x7a8>
 8005568:	4b49      	ldr	r3, [pc, #292]	; (8005690 <checkAktifCalisma+0x8c8>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10d      	bne.n	800558c <checkAktifCalisma+0x7c4>
 8005570:	4b45      	ldr	r3, [pc, #276]	; (8005688 <checkAktifCalisma+0x8c0>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	f083 0301 	eor.w	r3, r3, #1
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d106      	bne.n	800558c <checkAktifCalisma+0x7c4>
 800557e:	4b43      	ldr	r3, [pc, #268]	; (800568c <checkAktifCalisma+0x8c4>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	f083 0301 	eor.w	r3, r3, #1
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800558c:	2200      	movs	r2, #0
 800558e:	2120      	movs	r1, #32
 8005590:	483a      	ldr	r0, [pc, #232]	; (800567c <checkAktifCalisma+0x8b4>)
 8005592:	f004 f852 	bl	800963a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8005596:	4b3a      	ldr	r3, [pc, #232]	; (8005680 <checkAktifCalisma+0x8b8>)
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 800559c:	4b3c      	ldr	r3, [pc, #240]	; (8005690 <checkAktifCalisma+0x8c8>)
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80055a2:	4b3f      	ldr	r3, [pc, #252]	; (80056a0 <checkAktifCalisma+0x8d8>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f040 8088 	bne.w	80056bc <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80055ac:	4b3d      	ldr	r3, [pc, #244]	; (80056a4 <checkAktifCalisma+0x8dc>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d003      	beq.n	80055bc <checkAktifCalisma+0x7f4>
 80055b4:	4b3b      	ldr	r3, [pc, #236]	; (80056a4 <checkAktifCalisma+0x8dc>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d17f      	bne.n	80056bc <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80055bc:	4b32      	ldr	r3, [pc, #200]	; (8005688 <checkAktifCalisma+0x8c0>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d07b      	beq.n	80056bc <checkAktifCalisma+0x8f4>
 80055c4:	4b31      	ldr	r3, [pc, #196]	; (800568c <checkAktifCalisma+0x8c4>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d077      	beq.n	80056bc <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80055cc:	2140      	movs	r1, #64	; 0x40
 80055ce:	482b      	ldr	r0, [pc, #172]	; (800567c <checkAktifCalisma+0x8b4>)
 80055d0:	f004 f81c 	bl	800960c <HAL_GPIO_ReadPin>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d170      	bne.n	80056bc <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80055da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055de:	4827      	ldr	r0, [pc, #156]	; (800567c <checkAktifCalisma+0x8b4>)
 80055e0:	f004 f814 	bl	800960c <HAL_GPIO_ReadPin>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <checkAktifCalisma+0x82a>
 80055ea:	4b2f      	ldr	r3, [pc, #188]	; (80056a8 <checkAktifCalisma+0x8e0>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d164      	bne.n	80056bc <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80055f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055f6:	4823      	ldr	r0, [pc, #140]	; (8005684 <checkAktifCalisma+0x8bc>)
 80055f8:	f004 f808 	bl	800960c <HAL_GPIO_ReadPin>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d10f      	bne.n	8005622 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005606:	481f      	ldr	r0, [pc, #124]	; (8005684 <checkAktifCalisma+0x8bc>)
 8005608:	f004 f800 	bl	800960c <HAL_GPIO_ReadPin>
 800560c:	4603      	mov	r3, r0
 800560e:	2b01      	cmp	r3, #1
 8005610:	d107      	bne.n	8005622 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005612:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005616:	481b      	ldr	r0, [pc, #108]	; (8005684 <checkAktifCalisma+0x8bc>)
 8005618:	f003 fff8 	bl	800960c <HAL_GPIO_ReadPin>
 800561c:	4603      	mov	r3, r0
 800561e:	2b01      	cmp	r3, #1
 8005620:	d003      	beq.n	800562a <checkAktifCalisma+0x862>
 8005622:	4b22      	ldr	r3, [pc, #136]	; (80056ac <checkAktifCalisma+0x8e4>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d048      	beq.n	80056bc <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800562a:	4b21      	ldr	r3, [pc, #132]	; (80056b0 <checkAktifCalisma+0x8e8>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	f083 0301 	eor.w	r3, r3, #1
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d041      	beq.n	80056bc <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005638:	4b1e      	ldr	r3, [pc, #120]	; (80056b4 <checkAktifCalisma+0x8ec>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	f083 0301 	eor.w	r3, r3, #1
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d03a      	beq.n	80056bc <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005646:	4b1c      	ldr	r3, [pc, #112]	; (80056b8 <checkAktifCalisma+0x8f0>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	f083 0301 	eor.w	r3, r3, #1
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d033      	beq.n	80056bc <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005654:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <checkAktifCalisma+0x8b8>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f083 0301 	eor.w	r3, r3, #1
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d02c      	beq.n	80056bc <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8005662:	4b05      	ldr	r3, [pc, #20]	; (8005678 <checkAktifCalisma+0x8b0>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	f083 0301 	eor.w	r3, r3, #1
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d025      	beq.n	80056bc <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005670:	4b0e      	ldr	r3, [pc, #56]	; (80056ac <checkAktifCalisma+0x8e4>)
 8005672:	2201      	movs	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e024      	b.n	80056c2 <checkAktifCalisma+0x8fa>
 8005678:	20000256 	.word	0x20000256
 800567c:	40011000 	.word	0x40011000
 8005680:	2000025a 	.word	0x2000025a
 8005684:	40010c00 	.word	0x40010c00
 8005688:	20000272 	.word	0x20000272
 800568c:	20000273 	.word	0x20000273
 8005690:	20000252 	.word	0x20000252
 8005694:	200001fc 	.word	0x200001fc
 8005698:	20000208 	.word	0x20000208
 800569c:	20000236 	.word	0x20000236
 80056a0:	2000023d 	.word	0x2000023d
 80056a4:	2000022f 	.word	0x2000022f
 80056a8:	20000231 	.word	0x20000231
 80056ac:	20000257 	.word	0x20000257
 80056b0:	20000255 	.word	0x20000255
 80056b4:	20000259 	.word	0x20000259
 80056b8:	20000258 	.word	0x20000258
		} else {
			devmotorasagicalisiyor=0;
 80056bc:	4b96      	ldr	r3, [pc, #600]	; (8005918 <checkAktifCalisma+0xb50>)
 80056be:	2200      	movs	r2, #0
 80056c0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80056c2:	4b95      	ldr	r3, [pc, #596]	; (8005918 <checkAktifCalisma+0xb50>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80056ca:	2201      	movs	r2, #1
 80056cc:	2110      	movs	r1, #16
 80056ce:	4893      	ldr	r0, [pc, #588]	; (800591c <checkAktifCalisma+0xb54>)
 80056d0:	f003 ffb3 	bl	800963a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80056d4:	4b92      	ldr	r3, [pc, #584]	; (8005920 <checkAktifCalisma+0xb58>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80056da:	4b91      	ldr	r3, [pc, #580]	; (8005920 <checkAktifCalisma+0xb58>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d024      	beq.n	800572c <checkAktifCalisma+0x964>
 80056e2:	2140      	movs	r1, #64	; 0x40
 80056e4:	488d      	ldr	r0, [pc, #564]	; (800591c <checkAktifCalisma+0xb54>)
 80056e6:	f003 ff91 	bl	800960c <HAL_GPIO_ReadPin>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d007      	beq.n	8005700 <checkAktifCalisma+0x938>
 80056f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056f4:	4889      	ldr	r0, [pc, #548]	; (800591c <checkAktifCalisma+0xb54>)
 80056f6:	f003 ff89 	bl	800960c <HAL_GPIO_ReadPin>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d115      	bne.n	800572c <checkAktifCalisma+0x964>
 8005700:	4b88      	ldr	r3, [pc, #544]	; (8005924 <checkAktifCalisma+0xb5c>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d011      	beq.n	800572c <checkAktifCalisma+0x964>
 8005708:	4b87      	ldr	r3, [pc, #540]	; (8005928 <checkAktifCalisma+0xb60>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00d      	beq.n	800572c <checkAktifCalisma+0x964>
 8005710:	4b86      	ldr	r3, [pc, #536]	; (800592c <checkAktifCalisma+0xb64>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	f083 0301 	eor.w	r3, r3, #1
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d006      	beq.n	800572c <checkAktifCalisma+0x964>
			timer2=millis;
 800571e:	4b84      	ldr	r3, [pc, #528]	; (8005930 <checkAktifCalisma+0xb68>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a84      	ldr	r2, [pc, #528]	; (8005934 <checkAktifCalisma+0xb6c>)
 8005724:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005726:	4b81      	ldr	r3, [pc, #516]	; (800592c <checkAktifCalisma+0xb64>)
 8005728:	2201      	movs	r2, #1
 800572a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800572c:	4b80      	ldr	r3, [pc, #512]	; (8005930 <checkAktifCalisma+0xb68>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	4b80      	ldr	r3, [pc, #512]	; (8005934 <checkAktifCalisma+0xb6c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	4a80      	ldr	r2, [pc, #512]	; (8005938 <checkAktifCalisma+0xb70>)
 8005738:	7812      	ldrb	r2, [r2, #0]
 800573a:	4293      	cmp	r3, r2
 800573c:	d303      	bcc.n	8005746 <checkAktifCalisma+0x97e>
 800573e:	4b7b      	ldr	r3, [pc, #492]	; (800592c <checkAktifCalisma+0xb64>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10d      	bne.n	8005762 <checkAktifCalisma+0x99a>
 8005746:	4b77      	ldr	r3, [pc, #476]	; (8005924 <checkAktifCalisma+0xb5c>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	f083 0301 	eor.w	r3, r3, #1
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d106      	bne.n	8005762 <checkAktifCalisma+0x99a>
 8005754:	4b74      	ldr	r3, [pc, #464]	; (8005928 <checkAktifCalisma+0xb60>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	f083 0301 	eor.w	r3, r3, #1
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005762:	2200      	movs	r2, #0
 8005764:	2110      	movs	r1, #16
 8005766:	486d      	ldr	r0, [pc, #436]	; (800591c <checkAktifCalisma+0xb54>)
 8005768:	f003 ff67 	bl	800963a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 800576c:	4b6c      	ldr	r3, [pc, #432]	; (8005920 <checkAktifCalisma+0xb58>)
 800576e:	2200      	movs	r2, #0
 8005770:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8005772:	4b6e      	ldr	r3, [pc, #440]	; (800592c <checkAktifCalisma+0xb64>)
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005778:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800577c:	486f      	ldr	r0, [pc, #444]	; (800593c <checkAktifCalisma+0xb74>)
 800577e:	f003 ff45 	bl	800960c <HAL_GPIO_ReadPin>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d120      	bne.n	80057ca <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800578c:	486b      	ldr	r0, [pc, #428]	; (800593c <checkAktifCalisma+0xb74>)
 800578e:	f003 ff3d 	bl	800960c <HAL_GPIO_ReadPin>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d118      	bne.n	80057ca <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005798:	2104      	movs	r1, #4
 800579a:	4868      	ldr	r0, [pc, #416]	; (800593c <checkAktifCalisma+0xb74>)
 800579c:	f003 ff36 	bl	800960c <HAL_GPIO_ReadPin>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d111      	bne.n	80057ca <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80057a6:	2102      	movs	r1, #2
 80057a8:	4864      	ldr	r0, [pc, #400]	; (800593c <checkAktifCalisma+0xb74>)
 80057aa:	f003 ff2f 	bl	800960c <HAL_GPIO_ReadPin>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80057b4:	2101      	movs	r1, #1
 80057b6:	4861      	ldr	r0, [pc, #388]	; (800593c <checkAktifCalisma+0xb74>)
 80057b8:	f003 ff28 	bl	800960c <HAL_GPIO_ReadPin>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d103      	bne.n	80057ca <checkAktifCalisma+0xa02>
			makineStop=1;
 80057c2:	4b5f      	ldr	r3, [pc, #380]	; (8005940 <checkAktifCalisma+0xb78>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	701a      	strb	r2, [r3, #0]
 80057c8:	e002      	b.n	80057d0 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80057ca:	4b5d      	ldr	r3, [pc, #372]	; (8005940 <checkAktifCalisma+0xb78>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057d0:	4b5c      	ldr	r3, [pc, #368]	; (8005944 <checkAktifCalisma+0xb7c>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d144      	bne.n	8005862 <checkAktifCalisma+0xa9a>
 80057d8:	4b5b      	ldr	r3, [pc, #364]	; (8005948 <checkAktifCalisma+0xb80>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d003      	beq.n	80057e8 <checkAktifCalisma+0xa20>
 80057e0:	4b59      	ldr	r3, [pc, #356]	; (8005948 <checkAktifCalisma+0xb80>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d13c      	bne.n	8005862 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80057e8:	2180      	movs	r1, #128	; 0x80
 80057ea:	484c      	ldr	r0, [pc, #304]	; (800591c <checkAktifCalisma+0xb54>)
 80057ec:	f003 ff0e 	bl	800960c <HAL_GPIO_ReadPin>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <checkAktifCalisma+0xa36>
 80057f6:	4b55      	ldr	r3, [pc, #340]	; (800594c <checkAktifCalisma+0xb84>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <checkAktifCalisma+0xa4e>
 80057fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005802:	484e      	ldr	r0, [pc, #312]	; (800593c <checkAktifCalisma+0xb74>)
 8005804:	f003 ff02 	bl	800960c <HAL_GPIO_ReadPin>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d129      	bne.n	8005862 <checkAktifCalisma+0xa9a>
 800580e:	4b4f      	ldr	r3, [pc, #316]	; (800594c <checkAktifCalisma+0xb84>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d125      	bne.n	8005862 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005816:	2104      	movs	r1, #4
 8005818:	4840      	ldr	r0, [pc, #256]	; (800591c <checkAktifCalisma+0xb54>)
 800581a:	f003 fef7 	bl	800960c <HAL_GPIO_ReadPin>
 800581e:	4603      	mov	r3, r0
 8005820:	2b01      	cmp	r3, #1
 8005822:	d003      	beq.n	800582c <checkAktifCalisma+0xa64>
 8005824:	4b4a      	ldr	r3, [pc, #296]	; (8005950 <checkAktifCalisma+0xb88>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d11a      	bne.n	8005862 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800582c:	2102      	movs	r1, #2
 800582e:	483b      	ldr	r0, [pc, #236]	; (800591c <checkAktifCalisma+0xb54>)
 8005830:	f003 feec 	bl	800960c <HAL_GPIO_ReadPin>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d113      	bne.n	8005862 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800583a:	4b46      	ldr	r3, [pc, #280]	; (8005954 <checkAktifCalisma+0xb8c>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	f083 0301 	eor.w	r3, r3, #1
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00c      	beq.n	8005862 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005848:	4b3d      	ldr	r3, [pc, #244]	; (8005940 <checkAktifCalisma+0xb78>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005850:	4b41      	ldr	r3, [pc, #260]	; (8005958 <checkAktifCalisma+0xb90>)
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005856:	4b36      	ldr	r3, [pc, #216]	; (8005930 <checkAktifCalisma+0xb68>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a40      	ldr	r2, [pc, #256]	; (800595c <checkAktifCalisma+0xb94>)
 800585c:	6013      	str	r3, [r2, #0]
			bekle();
 800585e:	f7ff f935 	bl	8004acc <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005862:	4b33      	ldr	r3, [pc, #204]	; (8005930 <checkAktifCalisma+0xb68>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	4b3d      	ldr	r3, [pc, #244]	; (800595c <checkAktifCalisma+0xb94>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	4a3c      	ldr	r2, [pc, #240]	; (8005960 <checkAktifCalisma+0xb98>)
 800586e:	7812      	ldrb	r2, [r2, #0]
 8005870:	4293      	cmp	r3, r2
 8005872:	d211      	bcs.n	8005898 <checkAktifCalisma+0xad0>
 8005874:	2104      	movs	r1, #4
 8005876:	4829      	ldr	r0, [pc, #164]	; (800591c <checkAktifCalisma+0xb54>)
 8005878:	f003 fec8 	bl	800960c <HAL_GPIO_ReadPin>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <checkAktifCalisma+0xad0>
 8005882:	4b33      	ldr	r3, [pc, #204]	; (8005950 <checkAktifCalisma+0xb88>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d006      	beq.n	8005898 <checkAktifCalisma+0xad0>
 800588a:	4b2d      	ldr	r3, [pc, #180]	; (8005940 <checkAktifCalisma+0xb78>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	f083 0301 	eor.w	r3, r3, #1
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005898:	4b2f      	ldr	r3, [pc, #188]	; (8005958 <checkAktifCalisma+0xb90>)
 800589a:	2200      	movs	r2, #0
 800589c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800589e:	4b29      	ldr	r3, [pc, #164]	; (8005944 <checkAktifCalisma+0xb7c>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d160      	bne.n	8005968 <checkAktifCalisma+0xba0>
 80058a6:	4b28      	ldr	r3, [pc, #160]	; (8005948 <checkAktifCalisma+0xb80>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d003      	beq.n	80058b6 <checkAktifCalisma+0xaee>
 80058ae:	4b26      	ldr	r3, [pc, #152]	; (8005948 <checkAktifCalisma+0xb80>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d158      	bne.n	8005968 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80058b6:	2104      	movs	r1, #4
 80058b8:	4818      	ldr	r0, [pc, #96]	; (800591c <checkAktifCalisma+0xb54>)
 80058ba:	f003 fea7 	bl	800960c <HAL_GPIO_ReadPin>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d003      	beq.n	80058cc <checkAktifCalisma+0xb04>
 80058c4:	4b22      	ldr	r3, [pc, #136]	; (8005950 <checkAktifCalisma+0xb88>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d14d      	bne.n	8005968 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058cc:	2102      	movs	r1, #2
 80058ce:	4813      	ldr	r0, [pc, #76]	; (800591c <checkAktifCalisma+0xb54>)
 80058d0:	f003 fe9c 	bl	800960c <HAL_GPIO_ReadPin>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d146      	bne.n	8005968 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80058da:	2180      	movs	r1, #128	; 0x80
 80058dc:	480f      	ldr	r0, [pc, #60]	; (800591c <checkAktifCalisma+0xb54>)
 80058de:	f003 fe95 	bl	800960c <HAL_GPIO_ReadPin>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d103      	bne.n	80058f0 <checkAktifCalisma+0xb28>
 80058e8:	4b18      	ldr	r3, [pc, #96]	; (800594c <checkAktifCalisma+0xb84>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00b      	beq.n	8005908 <checkAktifCalisma+0xb40>
 80058f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058f4:	4811      	ldr	r0, [pc, #68]	; (800593c <checkAktifCalisma+0xb74>)
 80058f6:	f003 fe89 	bl	800960c <HAL_GPIO_ReadPin>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d133      	bne.n	8005968 <checkAktifCalisma+0xba0>
 8005900:	4b12      	ldr	r3, [pc, #72]	; (800594c <checkAktifCalisma+0xb84>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d12f      	bne.n	8005968 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005908:	4b0d      	ldr	r3, [pc, #52]	; (8005940 <checkAktifCalisma+0xb78>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d02b      	beq.n	8005968 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005910:	4b14      	ldr	r3, [pc, #80]	; (8005964 <checkAktifCalisma+0xb9c>)
 8005912:	2201      	movs	r2, #1
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	e02a      	b.n	800596e <checkAktifCalisma+0xba6>
 8005918:	20000257 	.word	0x20000257
 800591c:	40011000 	.word	0x40011000
 8005920:	2000025b 	.word	0x2000025b
 8005924:	20000272 	.word	0x20000272
 8005928:	20000273 	.word	0x20000273
 800592c:	20000253 	.word	0x20000253
 8005930:	200001fc 	.word	0x200001fc
 8005934:	20000208 	.word	0x20000208
 8005938:	20000236 	.word	0x20000236
 800593c:	40010c00 	.word	0x40010c00
 8005940:	20000262 	.word	0x20000262
 8005944:	20000229 	.word	0x20000229
 8005948:	20000228 	.word	0x20000228
 800594c:	2000022c 	.word	0x2000022c
 8005950:	20000226 	.word	0x20000226
 8005954:	2000024f 	.word	0x2000024f
 8005958:	20000263 	.word	0x20000263
 800595c:	20000200 	.word	0x20000200
 8005960:	20000239 	.word	0x20000239
 8005964:	20000264 	.word	0x20000264
		} else {
			kapi1butonkontrol=0;
 8005968:	4b8b      	ldr	r3, [pc, #556]	; (8005b98 <checkAktifCalisma+0xdd0>)
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800596e:	4b8b      	ldr	r3, [pc, #556]	; (8005b9c <checkAktifCalisma+0xdd4>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d121      	bne.n	80059ba <checkAktifCalisma+0xbf2>
 8005976:	4b8a      	ldr	r3, [pc, #552]	; (8005ba0 <checkAktifCalisma+0xdd8>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d003      	beq.n	8005986 <checkAktifCalisma+0xbbe>
 800597e:	4b88      	ldr	r3, [pc, #544]	; (8005ba0 <checkAktifCalisma+0xdd8>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b03      	cmp	r3, #3
 8005984:	d119      	bne.n	80059ba <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005986:	2104      	movs	r1, #4
 8005988:	4886      	ldr	r0, [pc, #536]	; (8005ba4 <checkAktifCalisma+0xddc>)
 800598a:	f003 fe3f 	bl	800960c <HAL_GPIO_ReadPin>
 800598e:	4603      	mov	r3, r0
 8005990:	2b01      	cmp	r3, #1
 8005992:	d003      	beq.n	800599c <checkAktifCalisma+0xbd4>
 8005994:	4b84      	ldr	r3, [pc, #528]	; (8005ba8 <checkAktifCalisma+0xde0>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10e      	bne.n	80059ba <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800599c:	2102      	movs	r1, #2
 800599e:	4881      	ldr	r0, [pc, #516]	; (8005ba4 <checkAktifCalisma+0xddc>)
 80059a0:	f003 fe34 	bl	800960c <HAL_GPIO_ReadPin>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d107      	bne.n	80059ba <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80059aa:	4b80      	ldr	r3, [pc, #512]	; (8005bac <checkAktifCalisma+0xde4>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80059b2:	4b7f      	ldr	r3, [pc, #508]	; (8005bb0 <checkAktifCalisma+0xde8>)
 80059b4:	2201      	movs	r2, #1
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	e002      	b.n	80059c0 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80059ba:	4b7d      	ldr	r3, [pc, #500]	; (8005bb0 <checkAktifCalisma+0xde8>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80059c0:	4b75      	ldr	r3, [pc, #468]	; (8005b98 <checkAktifCalisma+0xdd0>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d107      	bne.n	80059d8 <checkAktifCalisma+0xc10>
 80059c8:	4b79      	ldr	r3, [pc, #484]	; (8005bb0 <checkAktifCalisma+0xde8>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d103      	bne.n	80059d8 <checkAktifCalisma+0xc10>
 80059d0:	4b78      	ldr	r3, [pc, #480]	; (8005bb4 <checkAktifCalisma+0xdec>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80059d8:	2201      	movs	r2, #1
 80059da:	2180      	movs	r1, #128	; 0x80
 80059dc:	4876      	ldr	r0, [pc, #472]	; (8005bb8 <checkAktifCalisma+0xdf0>)
 80059de:	f003 fe2c 	bl	800963a <HAL_GPIO_WritePin>
 80059e2:	e004      	b.n	80059ee <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80059e4:	2200      	movs	r2, #0
 80059e6:	2180      	movs	r1, #128	; 0x80
 80059e8:	4873      	ldr	r0, [pc, #460]	; (8005bb8 <checkAktifCalisma+0xdf0>)
 80059ea:	f003 fe26 	bl	800963a <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059ee:	4b73      	ldr	r3, [pc, #460]	; (8005bbc <checkAktifCalisma+0xdf4>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d141      	bne.n	8005a7a <checkAktifCalisma+0xcb2>
 80059f6:	4b6a      	ldr	r3, [pc, #424]	; (8005ba0 <checkAktifCalisma+0xdd8>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d003      	beq.n	8005a06 <checkAktifCalisma+0xc3e>
 80059fe:	4b68      	ldr	r3, [pc, #416]	; (8005ba0 <checkAktifCalisma+0xdd8>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d139      	bne.n	8005a7a <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a0a:	4866      	ldr	r0, [pc, #408]	; (8005ba4 <checkAktifCalisma+0xddc>)
 8005a0c:	f003 fdfe 	bl	800960c <HAL_GPIO_ReadPin>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d103      	bne.n	8005a1e <checkAktifCalisma+0xc56>
 8005a16:	4b6a      	ldr	r3, [pc, #424]	; (8005bc0 <checkAktifCalisma+0xdf8>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00b      	beq.n	8005a36 <checkAktifCalisma+0xc6e>
 8005a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a22:	4868      	ldr	r0, [pc, #416]	; (8005bc4 <checkAktifCalisma+0xdfc>)
 8005a24:	f003 fdf2 	bl	800960c <HAL_GPIO_ReadPin>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d125      	bne.n	8005a7a <checkAktifCalisma+0xcb2>
 8005a2e:	4b64      	ldr	r3, [pc, #400]	; (8005bc0 <checkAktifCalisma+0xdf8>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d121      	bne.n	8005a7a <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a36:	2102      	movs	r1, #2
 8005a38:	485a      	ldr	r0, [pc, #360]	; (8005ba4 <checkAktifCalisma+0xddc>)
 8005a3a:	f003 fde7 	bl	800960c <HAL_GPIO_ReadPin>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d11a      	bne.n	8005a7a <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a44:	2104      	movs	r1, #4
 8005a46:	4857      	ldr	r0, [pc, #348]	; (8005ba4 <checkAktifCalisma+0xddc>)
 8005a48:	f003 fde0 	bl	800960c <HAL_GPIO_ReadPin>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d113      	bne.n	8005a7a <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005a52:	4b56      	ldr	r3, [pc, #344]	; (8005bac <checkAktifCalisma+0xde4>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00f      	beq.n	8005a7a <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005a5a:	4b5b      	ldr	r3, [pc, #364]	; (8005bc8 <checkAktifCalisma+0xe00>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	f083 0301 	eor.w	r3, r3, #1
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005a68:	4b58      	ldr	r3, [pc, #352]	; (8005bcc <checkAktifCalisma+0xe04>)
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005a6e:	4b58      	ldr	r3, [pc, #352]	; (8005bd0 <checkAktifCalisma+0xe08>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a58      	ldr	r2, [pc, #352]	; (8005bd4 <checkAktifCalisma+0xe0c>)
 8005a74:	6013      	str	r3, [r2, #0]
			bekle();
 8005a76:	f7ff f829 	bl	8004acc <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005a7a:	4b55      	ldr	r3, [pc, #340]	; (8005bd0 <checkAktifCalisma+0xe08>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b55      	ldr	r3, [pc, #340]	; (8005bd4 <checkAktifCalisma+0xe0c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	4a54      	ldr	r2, [pc, #336]	; (8005bd8 <checkAktifCalisma+0xe10>)
 8005a86:	7812      	ldrb	r2, [r2, #0]
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d20d      	bcs.n	8005aa8 <checkAktifCalisma+0xce0>
 8005a8c:	2102      	movs	r1, #2
 8005a8e:	4845      	ldr	r0, [pc, #276]	; (8005ba4 <checkAktifCalisma+0xddc>)
 8005a90:	f003 fdbc 	bl	800960c <HAL_GPIO_ReadPin>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d006      	beq.n	8005aa8 <checkAktifCalisma+0xce0>
 8005a9a:	4b44      	ldr	r3, [pc, #272]	; (8005bac <checkAktifCalisma+0xde4>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	f083 0301 	eor.w	r3, r3, #1
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005aa8:	4b48      	ldr	r3, [pc, #288]	; (8005bcc <checkAktifCalisma+0xe04>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005aae:	4b43      	ldr	r3, [pc, #268]	; (8005bbc <checkAktifCalisma+0xdf4>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d135      	bne.n	8005b22 <checkAktifCalisma+0xd5a>
 8005ab6:	4b3a      	ldr	r3, [pc, #232]	; (8005ba0 <checkAktifCalisma+0xdd8>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d003      	beq.n	8005ac6 <checkAktifCalisma+0xcfe>
 8005abe:	4b38      	ldr	r3, [pc, #224]	; (8005ba0 <checkAktifCalisma+0xdd8>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d12d      	bne.n	8005b22 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005aca:	4836      	ldr	r0, [pc, #216]	; (8005ba4 <checkAktifCalisma+0xddc>)
 8005acc:	f003 fd9e 	bl	800960c <HAL_GPIO_ReadPin>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <checkAktifCalisma+0xd16>
 8005ad6:	4b3a      	ldr	r3, [pc, #232]	; (8005bc0 <checkAktifCalisma+0xdf8>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00b      	beq.n	8005af6 <checkAktifCalisma+0xd2e>
 8005ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ae2:	4838      	ldr	r0, [pc, #224]	; (8005bc4 <checkAktifCalisma+0xdfc>)
 8005ae4:	f003 fd92 	bl	800960c <HAL_GPIO_ReadPin>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d119      	bne.n	8005b22 <checkAktifCalisma+0xd5a>
 8005aee:	4b34      	ldr	r3, [pc, #208]	; (8005bc0 <checkAktifCalisma+0xdf8>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d115      	bne.n	8005b22 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005af6:	2102      	movs	r1, #2
 8005af8:	482a      	ldr	r0, [pc, #168]	; (8005ba4 <checkAktifCalisma+0xddc>)
 8005afa:	f003 fd87 	bl	800960c <HAL_GPIO_ReadPin>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d10e      	bne.n	8005b22 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b04:	2104      	movs	r1, #4
 8005b06:	4827      	ldr	r0, [pc, #156]	; (8005ba4 <checkAktifCalisma+0xddc>)
 8005b08:	f003 fd80 	bl	800960c <HAL_GPIO_ReadPin>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d107      	bne.n	8005b22 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005b12:	4b26      	ldr	r3, [pc, #152]	; (8005bac <checkAktifCalisma+0xde4>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005b1a:	4b30      	ldr	r3, [pc, #192]	; (8005bdc <checkAktifCalisma+0xe14>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	e002      	b.n	8005b28 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005b22:	4b2e      	ldr	r3, [pc, #184]	; (8005bdc <checkAktifCalisma+0xe14>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b28:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <checkAktifCalisma+0xdf4>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d11d      	bne.n	8005b6c <checkAktifCalisma+0xda4>
 8005b30:	4b1b      	ldr	r3, [pc, #108]	; (8005ba0 <checkAktifCalisma+0xdd8>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d003      	beq.n	8005b40 <checkAktifCalisma+0xd78>
 8005b38:	4b19      	ldr	r3, [pc, #100]	; (8005ba0 <checkAktifCalisma+0xdd8>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d115      	bne.n	8005b6c <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b40:	2102      	movs	r1, #2
 8005b42:	4818      	ldr	r0, [pc, #96]	; (8005ba4 <checkAktifCalisma+0xddc>)
 8005b44:	f003 fd62 	bl	800960c <HAL_GPIO_ReadPin>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d10e      	bne.n	8005b6c <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b4e:	2104      	movs	r1, #4
 8005b50:	4814      	ldr	r0, [pc, #80]	; (8005ba4 <checkAktifCalisma+0xddc>)
 8005b52:	f003 fd5b 	bl	800960c <HAL_GPIO_ReadPin>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d107      	bne.n	8005b6c <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005b5c:	4b13      	ldr	r3, [pc, #76]	; (8005bac <checkAktifCalisma+0xde4>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005b64:	4b1e      	ldr	r3, [pc, #120]	; (8005be0 <checkAktifCalisma+0xe18>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	e002      	b.n	8005b72 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005b6c:	4b1c      	ldr	r3, [pc, #112]	; (8005be0 <checkAktifCalisma+0xe18>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005b72:	4b1a      	ldr	r3, [pc, #104]	; (8005bdc <checkAktifCalisma+0xe14>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d107      	bne.n	8005b8a <checkAktifCalisma+0xdc2>
 8005b7a:	4b19      	ldr	r3, [pc, #100]	; (8005be0 <checkAktifCalisma+0xe18>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d103      	bne.n	8005b8a <checkAktifCalisma+0xdc2>
 8005b82:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <checkAktifCalisma+0xe04>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d02c      	beq.n	8005be4 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	2140      	movs	r1, #64	; 0x40
 8005b8e:	480a      	ldr	r0, [pc, #40]	; (8005bb8 <checkAktifCalisma+0xdf0>)
 8005b90:	f003 fd53 	bl	800963a <HAL_GPIO_WritePin>
 8005b94:	e02b      	b.n	8005bee <checkAktifCalisma+0xe26>
 8005b96:	bf00      	nop
 8005b98:	20000264 	.word	0x20000264
 8005b9c:	20000229 	.word	0x20000229
 8005ba0:	20000228 	.word	0x20000228
 8005ba4:	40011000 	.word	0x40011000
 8005ba8:	20000226 	.word	0x20000226
 8005bac:	20000262 	.word	0x20000262
 8005bb0:	20000265 	.word	0x20000265
 8005bb4:	20000263 	.word	0x20000263
 8005bb8:	40010800 	.word	0x40010800
 8005bbc:	2000022a 	.word	0x2000022a
 8005bc0:	2000022c 	.word	0x2000022c
 8005bc4:	40010c00 	.word	0x40010c00
 8005bc8:	2000024f 	.word	0x2000024f
 8005bcc:	20000266 	.word	0x20000266
 8005bd0:	200001fc 	.word	0x200001fc
 8005bd4:	20000200 	.word	0x20000200
 8005bd8:	2000023a 	.word	0x2000023a
 8005bdc:	20000267 	.word	0x20000267
 8005be0:	20000268 	.word	0x20000268
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005be4:	2200      	movs	r2, #0
 8005be6:	2140      	movs	r1, #64	; 0x40
 8005be8:	488d      	ldr	r0, [pc, #564]	; (8005e20 <checkAktifCalisma+0x1058>)
 8005bea:	f003 fd26 	bl	800963a <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005bee:	4b8d      	ldr	r3, [pc, #564]	; (8005e24 <checkAktifCalisma+0x105c>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <checkAktifCalisma+0xe36>
 8005bf6:	4b8b      	ldr	r3, [pc, #556]	; (8005e24 <checkAktifCalisma+0x105c>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d115      	bne.n	8005c2a <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005bfe:	2104      	movs	r1, #4
 8005c00:	4889      	ldr	r0, [pc, #548]	; (8005e28 <checkAktifCalisma+0x1060>)
 8005c02:	f003 fd03 	bl	800960c <HAL_GPIO_ReadPin>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d003      	beq.n	8005c14 <checkAktifCalisma+0xe4c>
 8005c0c:	4b87      	ldr	r3, [pc, #540]	; (8005e2c <checkAktifCalisma+0x1064>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005c14:	2102      	movs	r1, #2
 8005c16:	4884      	ldr	r0, [pc, #528]	; (8005e28 <checkAktifCalisma+0x1060>)
 8005c18:	f003 fcf8 	bl	800960c <HAL_GPIO_ReadPin>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005c22:	4b83      	ldr	r3, [pc, #524]	; (8005e30 <checkAktifCalisma+0x1068>)
 8005c24:	2201      	movs	r2, #1
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	e002      	b.n	8005c30 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005c2a:	4b81      	ldr	r3, [pc, #516]	; (8005e30 <checkAktifCalisma+0x1068>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005c30:	4b7c      	ldr	r3, [pc, #496]	; (8005e24 <checkAktifCalisma+0x105c>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d003      	beq.n	8005c40 <checkAktifCalisma+0xe78>
 8005c38:	4b7a      	ldr	r3, [pc, #488]	; (8005e24 <checkAktifCalisma+0x105c>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d111      	bne.n	8005c64 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c40:	2102      	movs	r1, #2
 8005c42:	4879      	ldr	r0, [pc, #484]	; (8005e28 <checkAktifCalisma+0x1060>)
 8005c44:	f003 fce2 	bl	800960c <HAL_GPIO_ReadPin>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d10a      	bne.n	8005c64 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005c4e:	2104      	movs	r1, #4
 8005c50:	4875      	ldr	r0, [pc, #468]	; (8005e28 <checkAktifCalisma+0x1060>)
 8005c52:	f003 fcdb 	bl	800960c <HAL_GPIO_ReadPin>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005c5c:	4b75      	ldr	r3, [pc, #468]	; (8005e34 <checkAktifCalisma+0x106c>)
 8005c5e:	2201      	movs	r2, #1
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	e002      	b.n	8005c6a <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005c64:	4b73      	ldr	r3, [pc, #460]	; (8005e34 <checkAktifCalisma+0x106c>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005c6a:	4b71      	ldr	r3, [pc, #452]	; (8005e30 <checkAktifCalisma+0x1068>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00f      	beq.n	8005c92 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005c72:	4b71      	ldr	r3, [pc, #452]	; (8005e38 <checkAktifCalisma+0x1070>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d10b      	bne.n	8005c92 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c7e:	486f      	ldr	r0, [pc, #444]	; (8005e3c <checkAktifCalisma+0x1074>)
 8005c80:	f003 fcc4 	bl	800960c <HAL_GPIO_ReadPin>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005c8a:	4b6d      	ldr	r3, [pc, #436]	; (8005e40 <checkAktifCalisma+0x1078>)
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	701a      	strb	r2, [r3, #0]
 8005c90:	e002      	b.n	8005c98 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005c92:	4b6b      	ldr	r3, [pc, #428]	; (8005e40 <checkAktifCalisma+0x1078>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005c98:	4b66      	ldr	r3, [pc, #408]	; (8005e34 <checkAktifCalisma+0x106c>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00f      	beq.n	8005cc0 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005ca0:	4b65      	ldr	r3, [pc, #404]	; (8005e38 <checkAktifCalisma+0x1070>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d10b      	bne.n	8005cc0 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005ca8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cac:	4863      	ldr	r0, [pc, #396]	; (8005e3c <checkAktifCalisma+0x1074>)
 8005cae:	f003 fcad 	bl	800960c <HAL_GPIO_ReadPin>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d103      	bne.n	8005cc0 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005cb8:	4b62      	ldr	r3, [pc, #392]	; (8005e44 <checkAktifCalisma+0x107c>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	e002      	b.n	8005cc6 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005cc0:	4b60      	ldr	r3, [pc, #384]	; (8005e44 <checkAktifCalisma+0x107c>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005cc6:	4b60      	ldr	r3, [pc, #384]	; (8005e48 <checkAktifCalisma+0x1080>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d137      	bne.n	8005d3e <checkAktifCalisma+0xf76>
 8005cce:	4b5f      	ldr	r3, [pc, #380]	; (8005e4c <checkAktifCalisma+0x1084>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d003      	beq.n	8005cde <checkAktifCalisma+0xf16>
 8005cd6:	4b5d      	ldr	r3, [pc, #372]	; (8005e4c <checkAktifCalisma+0x1084>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d12f      	bne.n	8005d3e <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005cde:	4b54      	ldr	r3, [pc, #336]	; (8005e30 <checkAktifCalisma+0x1068>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <checkAktifCalisma+0xf26>
 8005ce6:	4b53      	ldr	r3, [pc, #332]	; (8005e34 <checkAktifCalisma+0x106c>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d027      	beq.n	8005d3e <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cf2:	484d      	ldr	r0, [pc, #308]	; (8005e28 <checkAktifCalisma+0x1060>)
 8005cf4:	f003 fc8a 	bl	800960c <HAL_GPIO_ReadPin>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d103      	bne.n	8005d06 <checkAktifCalisma+0xf3e>
 8005cfe:	4b4e      	ldr	r3, [pc, #312]	; (8005e38 <checkAktifCalisma+0x1070>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d06:	4b4e      	ldr	r3, [pc, #312]	; (8005e40 <checkAktifCalisma+0x1078>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d103      	bne.n	8005d16 <checkAktifCalisma+0xf4e>
 8005d0e:	4b4d      	ldr	r3, [pc, #308]	; (8005e44 <checkAktifCalisma+0x107c>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d013      	beq.n	8005d3e <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005d16:	4b4e      	ldr	r3, [pc, #312]	; (8005e50 <checkAktifCalisma+0x1088>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00f      	beq.n	8005d3e <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005d1e:	4b4d      	ldr	r3, [pc, #308]	; (8005e54 <checkAktifCalisma+0x108c>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f083 0301 	eor.w	r3, r3, #1
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005d2c:	4b4a      	ldr	r3, [pc, #296]	; (8005e58 <checkAktifCalisma+0x1090>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005d32:	4b4a      	ldr	r3, [pc, #296]	; (8005e5c <checkAktifCalisma+0x1094>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a4a      	ldr	r2, [pc, #296]	; (8005e60 <checkAktifCalisma+0x1098>)
 8005d38:	6013      	str	r3, [r2, #0]
			bekle();
 8005d3a:	f7fe fec7 	bl	8004acc <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005d3e:	4b47      	ldr	r3, [pc, #284]	; (8005e5c <checkAktifCalisma+0x1094>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4b47      	ldr	r3, [pc, #284]	; (8005e60 <checkAktifCalisma+0x1098>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	4a46      	ldr	r2, [pc, #280]	; (8005e64 <checkAktifCalisma+0x109c>)
 8005d4a:	7812      	ldrb	r2, [r2, #0]
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d214      	bcs.n	8005d7a <checkAktifCalisma+0xfb2>
 8005d50:	4b37      	ldr	r3, [pc, #220]	; (8005e30 <checkAktifCalisma+0x1068>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	f083 0301 	eor.w	r3, r3, #1
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d006      	beq.n	8005d6c <checkAktifCalisma+0xfa4>
 8005d5e:	4b35      	ldr	r3, [pc, #212]	; (8005e34 <checkAktifCalisma+0x106c>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	f083 0301 	eor.w	r3, r3, #1
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d106      	bne.n	8005d7a <checkAktifCalisma+0xfb2>
 8005d6c:	4b38      	ldr	r3, [pc, #224]	; (8005e50 <checkAktifCalisma+0x1088>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	f083 0301 	eor.w	r3, r3, #1
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005d7a:	4b37      	ldr	r3, [pc, #220]	; (8005e58 <checkAktifCalisma+0x1090>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d80:	4b31      	ldr	r3, [pc, #196]	; (8005e48 <checkAktifCalisma+0x1080>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d12b      	bne.n	8005de0 <checkAktifCalisma+0x1018>
 8005d88:	4b30      	ldr	r3, [pc, #192]	; (8005e4c <checkAktifCalisma+0x1084>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d003      	beq.n	8005d98 <checkAktifCalisma+0xfd0>
 8005d90:	4b2e      	ldr	r3, [pc, #184]	; (8005e4c <checkAktifCalisma+0x1084>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d123      	bne.n	8005de0 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d98:	4b25      	ldr	r3, [pc, #148]	; (8005e30 <checkAktifCalisma+0x1068>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d103      	bne.n	8005da8 <checkAktifCalisma+0xfe0>
 8005da0:	4b24      	ldr	r3, [pc, #144]	; (8005e34 <checkAktifCalisma+0x106c>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01b      	beq.n	8005de0 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005da8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dac:	481e      	ldr	r0, [pc, #120]	; (8005e28 <checkAktifCalisma+0x1060>)
 8005dae:	f003 fc2d 	bl	800960c <HAL_GPIO_ReadPin>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d103      	bne.n	8005dc0 <checkAktifCalisma+0xff8>
 8005db8:	4b1f      	ldr	r3, [pc, #124]	; (8005e38 <checkAktifCalisma+0x1070>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d007      	beq.n	8005dd0 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005dc0:	4b1f      	ldr	r3, [pc, #124]	; (8005e40 <checkAktifCalisma+0x1078>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d103      	bne.n	8005dd0 <checkAktifCalisma+0x1008>
 8005dc8:	4b1e      	ldr	r3, [pc, #120]	; (8005e44 <checkAktifCalisma+0x107c>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d007      	beq.n	8005de0 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005dd0:	4b1f      	ldr	r3, [pc, #124]	; (8005e50 <checkAktifCalisma+0x1088>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005dd8:	4b23      	ldr	r3, [pc, #140]	; (8005e68 <checkAktifCalisma+0x10a0>)
 8005dda:	2201      	movs	r2, #1
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	e002      	b.n	8005de6 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005de0:	4b21      	ldr	r3, [pc, #132]	; (8005e68 <checkAktifCalisma+0x10a0>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005de6:	4b18      	ldr	r3, [pc, #96]	; (8005e48 <checkAktifCalisma+0x1080>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d140      	bne.n	8005e70 <checkAktifCalisma+0x10a8>
 8005dee:	4b17      	ldr	r3, [pc, #92]	; (8005e4c <checkAktifCalisma+0x1084>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d003      	beq.n	8005dfe <checkAktifCalisma+0x1036>
 8005df6:	4b15      	ldr	r3, [pc, #84]	; (8005e4c <checkAktifCalisma+0x1084>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d138      	bne.n	8005e70 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <checkAktifCalisma+0x1068>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d103      	bne.n	8005e0e <checkAktifCalisma+0x1046>
 8005e06:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <checkAktifCalisma+0x106c>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d030      	beq.n	8005e70 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005e0e:	4b10      	ldr	r3, [pc, #64]	; (8005e50 <checkAktifCalisma+0x1088>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d02c      	beq.n	8005e70 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005e16:	4b15      	ldr	r3, [pc, #84]	; (8005e6c <checkAktifCalisma+0x10a4>)
 8005e18:	2201      	movs	r2, #1
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	e02b      	b.n	8005e76 <checkAktifCalisma+0x10ae>
 8005e1e:	bf00      	nop
 8005e20:	40010800 	.word	0x40010800
 8005e24:	2000022d 	.word	0x2000022d
 8005e28:	40011000 	.word	0x40011000
 8005e2c:	20000226 	.word	0x20000226
 8005e30:	2000026c 	.word	0x2000026c
 8005e34:	2000026d 	.word	0x2000026d
 8005e38:	2000022c 	.word	0x2000022c
 8005e3c:	40010c00 	.word	0x40010c00
 8005e40:	2000027c 	.word	0x2000027c
 8005e44:	2000027d 	.word	0x2000027d
 8005e48:	2000022b 	.word	0x2000022b
 8005e4c:	20000228 	.word	0x20000228
 8005e50:	20000262 	.word	0x20000262
 8005e54:	2000024f 	.word	0x2000024f
 8005e58:	20000269 	.word	0x20000269
 8005e5c:	200001fc 	.word	0x200001fc
 8005e60:	20000200 	.word	0x20000200
 8005e64:	2000023b 	.word	0x2000023b
 8005e68:	2000026a 	.word	0x2000026a
 8005e6c:	2000026b 	.word	0x2000026b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005e70:	4b8b      	ldr	r3, [pc, #556]	; (80060a0 <checkAktifCalisma+0x12d8>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005e76:	4b8b      	ldr	r3, [pc, #556]	; (80060a4 <checkAktifCalisma+0x12dc>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d107      	bne.n	8005e8e <checkAktifCalisma+0x10c6>
 8005e7e:	4b8a      	ldr	r3, [pc, #552]	; (80060a8 <checkAktifCalisma+0x12e0>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <checkAktifCalisma+0x10c6>
 8005e86:	4b86      	ldr	r3, [pc, #536]	; (80060a0 <checkAktifCalisma+0x12d8>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d005      	beq.n	8005e9a <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005e8e:	2201      	movs	r2, #1
 8005e90:	2120      	movs	r1, #32
 8005e92:	4886      	ldr	r0, [pc, #536]	; (80060ac <checkAktifCalisma+0x12e4>)
 8005e94:	f003 fbd1 	bl	800963a <HAL_GPIO_WritePin>
 8005e98:	e004      	b.n	8005ea4 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2120      	movs	r1, #32
 8005e9e:	4883      	ldr	r0, [pc, #524]	; (80060ac <checkAktifCalisma+0x12e4>)
 8005ea0:	f003 fbcb 	bl	800963a <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005ea4:	4b82      	ldr	r3, [pc, #520]	; (80060b0 <checkAktifCalisma+0x12e8>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00e      	beq.n	8005eca <checkAktifCalisma+0x1102>
 8005eac:	2102      	movs	r1, #2
 8005eae:	4881      	ldr	r0, [pc, #516]	; (80060b4 <checkAktifCalisma+0x12ec>)
 8005eb0:	f003 fbac 	bl	800960c <HAL_GPIO_ReadPin>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d107      	bne.n	8005eca <checkAktifCalisma+0x1102>
 8005eba:	4b7f      	ldr	r3, [pc, #508]	; (80060b8 <checkAktifCalisma+0x12f0>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d103      	bne.n	8005eca <checkAktifCalisma+0x1102>
 8005ec2:	4b7e      	ldr	r3, [pc, #504]	; (80060bc <checkAktifCalisma+0x12f4>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d112      	bne.n	8005ef0 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005eca:	4b7d      	ldr	r3, [pc, #500]	; (80060c0 <checkAktifCalisma+0x12f8>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d066      	beq.n	8005fa0 <checkAktifCalisma+0x11d8>
 8005ed2:	2104      	movs	r1, #4
 8005ed4:	4877      	ldr	r0, [pc, #476]	; (80060b4 <checkAktifCalisma+0x12ec>)
 8005ed6:	f003 fb99 	bl	800960c <HAL_GPIO_ReadPin>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d15f      	bne.n	8005fa0 <checkAktifCalisma+0x11d8>
 8005ee0:	4b75      	ldr	r3, [pc, #468]	; (80060b8 <checkAktifCalisma+0x12f0>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d05b      	beq.n	8005fa0 <checkAktifCalisma+0x11d8>
 8005ee8:	4b74      	ldr	r3, [pc, #464]	; (80060bc <checkAktifCalisma+0x12f4>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d057      	beq.n	8005fa0 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005ef0:	4b74      	ldr	r3, [pc, #464]	; (80060c4 <checkAktifCalisma+0x12fc>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	4b72      	ldr	r3, [pc, #456]	; (80060c4 <checkAktifCalisma+0x12fc>)
 8005efa:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005efc:	4b71      	ldr	r3, [pc, #452]	; (80060c4 <checkAktifCalisma+0x12fc>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b09      	cmp	r3, #9
 8005f02:	d908      	bls.n	8005f16 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005f04:	4b6f      	ldr	r3, [pc, #444]	; (80060c4 <checkAktifCalisma+0x12fc>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005f0a:	4b6f      	ldr	r3, [pc, #444]	; (80060c8 <checkAktifCalisma+0x1300>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	4b6d      	ldr	r3, [pc, #436]	; (80060c8 <checkAktifCalisma+0x1300>)
 8005f14:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005f16:	4b6c      	ldr	r3, [pc, #432]	; (80060c8 <checkAktifCalisma+0x1300>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b09      	cmp	r3, #9
 8005f1c:	d908      	bls.n	8005f30 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005f1e:	4b6a      	ldr	r3, [pc, #424]	; (80060c8 <checkAktifCalisma+0x1300>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005f24:	4b69      	ldr	r3, [pc, #420]	; (80060cc <checkAktifCalisma+0x1304>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	4b67      	ldr	r3, [pc, #412]	; (80060cc <checkAktifCalisma+0x1304>)
 8005f2e:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005f30:	4b66      	ldr	r3, [pc, #408]	; (80060cc <checkAktifCalisma+0x1304>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b09      	cmp	r3, #9
 8005f36:	d908      	bls.n	8005f4a <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005f38:	4b64      	ldr	r3, [pc, #400]	; (80060cc <checkAktifCalisma+0x1304>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005f3e:	4b64      	ldr	r3, [pc, #400]	; (80060d0 <checkAktifCalisma+0x1308>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	3301      	adds	r3, #1
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	4b62      	ldr	r3, [pc, #392]	; (80060d0 <checkAktifCalisma+0x1308>)
 8005f48:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005f4a:	4b61      	ldr	r3, [pc, #388]	; (80060d0 <checkAktifCalisma+0x1308>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b09      	cmp	r3, #9
 8005f50:	d908      	bls.n	8005f64 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005f52:	4b5f      	ldr	r3, [pc, #380]	; (80060d0 <checkAktifCalisma+0x1308>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005f58:	4b5e      	ldr	r3, [pc, #376]	; (80060d4 <checkAktifCalisma+0x130c>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	4b5c      	ldr	r3, [pc, #368]	; (80060d4 <checkAktifCalisma+0x130c>)
 8005f62:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005f64:	4b5b      	ldr	r3, [pc, #364]	; (80060d4 <checkAktifCalisma+0x130c>)
 8005f66:	781a      	ldrb	r2, [r3, #0]
 8005f68:	4b5b      	ldr	r3, [pc, #364]	; (80060d8 <checkAktifCalisma+0x1310>)
 8005f6a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005f6e:	4b58      	ldr	r3, [pc, #352]	; (80060d0 <checkAktifCalisma+0x1308>)
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	4b59      	ldr	r3, [pc, #356]	; (80060d8 <checkAktifCalisma+0x1310>)
 8005f74:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005f76:	4b55      	ldr	r3, [pc, #340]	; (80060cc <checkAktifCalisma+0x1304>)
 8005f78:	781a      	ldrb	r2, [r3, #0]
 8005f7a:	4b57      	ldr	r3, [pc, #348]	; (80060d8 <checkAktifCalisma+0x1310>)
 8005f7c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005f7e:	4b52      	ldr	r3, [pc, #328]	; (80060c8 <checkAktifCalisma+0x1300>)
 8005f80:	781a      	ldrb	r2, [r3, #0]
 8005f82:	4b55      	ldr	r3, [pc, #340]	; (80060d8 <checkAktifCalisma+0x1310>)
 8005f84:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005f86:	4b4f      	ldr	r3, [pc, #316]	; (80060c4 <checkAktifCalisma+0x12fc>)
 8005f88:	781a      	ldrb	r2, [r3, #0]
 8005f8a:	4b53      	ldr	r3, [pc, #332]	; (80060d8 <checkAktifCalisma+0x1310>)
 8005f8c:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005f8e:	4b53      	ldr	r3, [pc, #332]	; (80060dc <checkAktifCalisma+0x1314>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005f94:	4b46      	ldr	r3, [pc, #280]	; (80060b0 <checkAktifCalisma+0x12e8>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005f9a:	4b49      	ldr	r3, [pc, #292]	; (80060c0 <checkAktifCalisma+0x12f8>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005fa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fa4:	484e      	ldr	r0, [pc, #312]	; (80060e0 <checkAktifCalisma+0x1318>)
 8005fa6:	f003 fb31 	bl	800960c <HAL_GPIO_ReadPin>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d016      	beq.n	8005fde <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005fb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fb4:	484a      	ldr	r0, [pc, #296]	; (80060e0 <checkAktifCalisma+0x1318>)
 8005fb6:	f003 fb29 	bl	800960c <HAL_GPIO_ReadPin>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00e      	beq.n	8005fde <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005fc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fc4:	4846      	ldr	r0, [pc, #280]	; (80060e0 <checkAktifCalisma+0x1318>)
 8005fc6:	f003 fb21 	bl	800960c <HAL_GPIO_ReadPin>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d006      	beq.n	8005fde <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005fd0:	2140      	movs	r1, #64	; 0x40
 8005fd2:	4838      	ldr	r0, [pc, #224]	; (80060b4 <checkAktifCalisma+0x12ec>)
 8005fd4:	f003 fb1a 	bl	800960c <HAL_GPIO_ReadPin>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d103      	bne.n	8005fe6 <checkAktifCalisma+0x121e>
			startBasili=1;
 8005fde:	4b41      	ldr	r3, [pc, #260]	; (80060e4 <checkAktifCalisma+0x131c>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	e002      	b.n	8005fec <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005fe6:	4b3f      	ldr	r3, [pc, #252]	; (80060e4 <checkAktifCalisma+0x131c>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005fec:	4b3d      	ldr	r3, [pc, #244]	; (80060e4 <checkAktifCalisma+0x131c>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d016      	beq.n	8006022 <checkAktifCalisma+0x125a>
 8005ff4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ff8:	4839      	ldr	r0, [pc, #228]	; (80060e0 <checkAktifCalisma+0x1318>)
 8005ffa:	f003 fb07 	bl	800960c <HAL_GPIO_ReadPin>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b01      	cmp	r3, #1
 8006002:	d10e      	bne.n	8006022 <checkAktifCalisma+0x125a>
			hataVar=1;
 8006004:	4b38      	ldr	r3, [pc, #224]	; (80060e8 <checkAktifCalisma+0x1320>)
 8006006:	2201      	movs	r2, #1
 8006008:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800600a:	2001      	movs	r0, #1
 800600c:	f7fa fd86 	bl	8000b1c <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006010:	2001      	movs	r0, #1
 8006012:	f7fa fd29 	bl	8000a68 <hata2EEPROM>
			convertAndSendData();
 8006016:	f001 fdd1 	bl	8007bbc <convertAndSendData>
			acilstophatasi=1;
 800601a:	4b34      	ldr	r3, [pc, #208]	; (80060ec <checkAktifCalisma+0x1324>)
 800601c:	2201      	movs	r2, #1
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	e018      	b.n	8006054 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006022:	4b32      	ldr	r3, [pc, #200]	; (80060ec <checkAktifCalisma+0x1324>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d014      	beq.n	8006054 <checkAktifCalisma+0x128c>
 800602a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800602e:	482c      	ldr	r0, [pc, #176]	; (80060e0 <checkAktifCalisma+0x1318>)
 8006030:	f003 faec 	bl	800960c <HAL_GPIO_ReadPin>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10c      	bne.n	8006054 <checkAktifCalisma+0x128c>
 800603a:	4b2a      	ldr	r3, [pc, #168]	; (80060e4 <checkAktifCalisma+0x131c>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	f083 0301 	eor.w	r3, r3, #1
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006048:	4b28      	ldr	r3, [pc, #160]	; (80060ec <checkAktifCalisma+0x1324>)
 800604a:	2200      	movs	r2, #0
 800604c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 800604e:	2001      	movs	r0, #1
 8006050:	f7fe fce8 	bl	8004a24 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006054:	4b26      	ldr	r3, [pc, #152]	; (80060f0 <checkAktifCalisma+0x1328>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	f083 0301 	eor.w	r3, r3, #1
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d04e      	beq.n	8006100 <checkAktifCalisma+0x1338>
 8006062:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006066:	481e      	ldr	r0, [pc, #120]	; (80060e0 <checkAktifCalisma+0x1318>)
 8006068:	f003 fad0 	bl	800960c <HAL_GPIO_ReadPin>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <checkAktifCalisma+0x12b2>
 8006072:	4b20      	ldr	r3, [pc, #128]	; (80060f4 <checkAktifCalisma+0x132c>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d042      	beq.n	8006100 <checkAktifCalisma+0x1338>
 800607a:	4b1f      	ldr	r3, [pc, #124]	; (80060f8 <checkAktifCalisma+0x1330>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d13e      	bne.n	8006100 <checkAktifCalisma+0x1338>
			hataVar=1;
 8006082:	4b19      	ldr	r3, [pc, #100]	; (80060e8 <checkAktifCalisma+0x1320>)
 8006084:	2201      	movs	r2, #1
 8006086:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006088:	2002      	movs	r0, #2
 800608a:	f7fa fd47 	bl	8000b1c <hataKoduLcdGoster>
			hata2EEPROM(2);
 800608e:	2002      	movs	r0, #2
 8006090:	f7fa fcea 	bl	8000a68 <hata2EEPROM>
			convertAndSendData();
 8006094:	f001 fd92 	bl	8007bbc <convertAndSendData>
			emniyetCercevesihatasi=1;
 8006098:	4b18      	ldr	r3, [pc, #96]	; (80060fc <checkAktifCalisma+0x1334>)
 800609a:	2201      	movs	r2, #1
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	e047      	b.n	8006130 <checkAktifCalisma+0x1368>
 80060a0:	2000026b 	.word	0x2000026b
 80060a4:	2000026a 	.word	0x2000026a
 80060a8:	20000269 	.word	0x20000269
 80060ac:	40010800 	.word	0x40010800
 80060b0:	2000025f 	.word	0x2000025f
 80060b4:	40011000 	.word	0x40011000
 80060b8:	20000226 	.word	0x20000226
 80060bc:	20000262 	.word	0x20000262
 80060c0:	20000260 	.word	0x20000260
 80060c4:	2000021d 	.word	0x2000021d
 80060c8:	2000021e 	.word	0x2000021e
 80060cc:	20000000 	.word	0x20000000
 80060d0:	20000001 	.word	0x20000001
 80060d4:	2000021f 	.word	0x2000021f
 80060d8:	20000118 	.word	0x20000118
 80060dc:	2000024c 	.word	0x2000024c
 80060e0:	40010c00 	.word	0x40010c00
 80060e4:	2000026e 	.word	0x2000026e
 80060e8:	20000275 	.word	0x20000275
 80060ec:	20000270 	.word	0x20000270
 80060f0:	20000277 	.word	0x20000277
 80060f4:	20000281 	.word	0x20000281
 80060f8:	20000224 	.word	0x20000224
 80060fc:	20000271 	.word	0x20000271
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006100:	4b9b      	ldr	r3, [pc, #620]	; (8006370 <checkAktifCalisma+0x15a8>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d013      	beq.n	8006130 <checkAktifCalisma+0x1368>
 8006108:	4b9a      	ldr	r3, [pc, #616]	; (8006374 <checkAktifCalisma+0x15ac>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00f      	beq.n	8006130 <checkAktifCalisma+0x1368>
 8006110:	4b99      	ldr	r3, [pc, #612]	; (8006378 <checkAktifCalisma+0x15b0>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	f083 0301 	eor.w	r3, r3, #1
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d008      	beq.n	8006130 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 800611e:	4b94      	ldr	r3, [pc, #592]	; (8006370 <checkAktifCalisma+0x15a8>)
 8006120:	2200      	movs	r2, #0
 8006122:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006124:	4b95      	ldr	r3, [pc, #596]	; (800637c <checkAktifCalisma+0x15b4>)
 8006126:	2200      	movs	r2, #0
 8006128:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800612a:	2002      	movs	r0, #2
 800612c:	f7fe fc7a 	bl	8004a24 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006130:	4b93      	ldr	r3, [pc, #588]	; (8006380 <checkAktifCalisma+0x15b8>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d11e      	bne.n	8006176 <checkAktifCalisma+0x13ae>
 8006138:	4b92      	ldr	r3, [pc, #584]	; (8006384 <checkAktifCalisma+0x15bc>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d11a      	bne.n	8006176 <checkAktifCalisma+0x13ae>
 8006140:	4b91      	ldr	r3, [pc, #580]	; (8006388 <checkAktifCalisma+0x15c0>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d016      	beq.n	8006176 <checkAktifCalisma+0x13ae>
 8006148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800614c:	488f      	ldr	r0, [pc, #572]	; (800638c <checkAktifCalisma+0x15c4>)
 800614e:	f003 fa5d 	bl	800960c <HAL_GPIO_ReadPin>
 8006152:	4603      	mov	r3, r0
 8006154:	2b01      	cmp	r3, #1
 8006156:	d10e      	bne.n	8006176 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006158:	4b8d      	ldr	r3, [pc, #564]	; (8006390 <checkAktifCalisma+0x15c8>)
 800615a:	2201      	movs	r2, #1
 800615c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800615e:	2003      	movs	r0, #3
 8006160:	f7fa fcdc 	bl	8000b1c <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006164:	2003      	movs	r0, #3
 8006166:	f7fa fc7f 	bl	8000a68 <hata2EEPROM>
			convertAndSendData();
 800616a:	f001 fd27 	bl	8007bbc <convertAndSendData>
			basinchatasi=1;
 800616e:	4b89      	ldr	r3, [pc, #548]	; (8006394 <checkAktifCalisma+0x15cc>)
 8006170:	2201      	movs	r2, #1
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	e015      	b.n	80061a2 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006176:	4b87      	ldr	r3, [pc, #540]	; (8006394 <checkAktifCalisma+0x15cc>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d011      	beq.n	80061a2 <checkAktifCalisma+0x13da>
 800617e:	4b80      	ldr	r3, [pc, #512]	; (8006380 <checkAktifCalisma+0x15b8>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d10d      	bne.n	80061a2 <checkAktifCalisma+0x13da>
 8006186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800618a:	4883      	ldr	r0, [pc, #524]	; (8006398 <checkAktifCalisma+0x15d0>)
 800618c:	f003 fa3e 	bl	800960c <HAL_GPIO_ReadPin>
 8006190:	4603      	mov	r3, r0
 8006192:	2b01      	cmp	r3, #1
 8006194:	d105      	bne.n	80061a2 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8006196:	4b7f      	ldr	r3, [pc, #508]	; (8006394 <checkAktifCalisma+0x15cc>)
 8006198:	2200      	movs	r2, #0
 800619a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 800619c:	2003      	movs	r0, #3
 800619e:	f7fe fc41 	bl	8004a24 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80061a2:	4b7e      	ldr	r3, [pc, #504]	; (800639c <checkAktifCalisma+0x15d4>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d103      	bne.n	80061b2 <checkAktifCalisma+0x13ea>
 80061aa:	4b7d      	ldr	r3, [pc, #500]	; (80063a0 <checkAktifCalisma+0x15d8>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01e      	beq.n	80061f0 <checkAktifCalisma+0x1428>
 80061b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061b6:	487b      	ldr	r0, [pc, #492]	; (80063a4 <checkAktifCalisma+0x15dc>)
 80061b8:	f003 fa28 	bl	800960c <HAL_GPIO_ReadPin>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d116      	bne.n	80061f0 <checkAktifCalisma+0x1428>
 80061c2:	4b79      	ldr	r3, [pc, #484]	; (80063a8 <checkAktifCalisma+0x15e0>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d003      	beq.n	80061d2 <checkAktifCalisma+0x140a>
 80061ca:	4b77      	ldr	r3, [pc, #476]	; (80063a8 <checkAktifCalisma+0x15e0>)
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d10e      	bne.n	80061f0 <checkAktifCalisma+0x1428>
			hataVar=1;
 80061d2:	4b6f      	ldr	r3, [pc, #444]	; (8006390 <checkAktifCalisma+0x15c8>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80061d8:	2004      	movs	r0, #4
 80061da:	f7fa fc9f 	bl	8000b1c <hataKoduLcdGoster>
			hata2EEPROM(4);
 80061de:	2004      	movs	r0, #4
 80061e0:	f7fa fc42 	bl	8000a68 <hata2EEPROM>
			convertAndSendData();
 80061e4:	f001 fcea 	bl	8007bbc <convertAndSendData>
			katkapisivicihatasi=1;
 80061e8:	4b70      	ldr	r3, [pc, #448]	; (80063ac <checkAktifCalisma+0x15e4>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	e01f      	b.n	8006230 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80061f0:	4b6e      	ldr	r3, [pc, #440]	; (80063ac <checkAktifCalisma+0x15e4>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01b      	beq.n	8006230 <checkAktifCalisma+0x1468>
 80061f8:	4b6d      	ldr	r3, [pc, #436]	; (80063b0 <checkAktifCalisma+0x15e8>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d017      	beq.n	8006230 <checkAktifCalisma+0x1468>
 8006200:	4b66      	ldr	r3, [pc, #408]	; (800639c <checkAktifCalisma+0x15d4>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	f083 0301 	eor.w	r3, r3, #1
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d010      	beq.n	8006230 <checkAktifCalisma+0x1468>
 800620e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006212:	4864      	ldr	r0, [pc, #400]	; (80063a4 <checkAktifCalisma+0x15dc>)
 8006214:	f003 f9fa 	bl	800960c <HAL_GPIO_ReadPin>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d108      	bne.n	8006230 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800621e:	4b63      	ldr	r3, [pc, #396]	; (80063ac <checkAktifCalisma+0x15e4>)
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006224:	4b5e      	ldr	r3, [pc, #376]	; (80063a0 <checkAktifCalisma+0x15d8>)
 8006226:	2200      	movs	r2, #0
 8006228:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800622a:	2004      	movs	r0, #4
 800622c:	f7fe fbfa 	bl	8004a24 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006230:	4b5a      	ldr	r3, [pc, #360]	; (800639c <checkAktifCalisma+0x15d4>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d103      	bne.n	8006240 <checkAktifCalisma+0x1478>
 8006238:	4b5e      	ldr	r3, [pc, #376]	; (80063b4 <checkAktifCalisma+0x15ec>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d01e      	beq.n	800627e <checkAktifCalisma+0x14b6>
 8006240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006244:	4857      	ldr	r0, [pc, #348]	; (80063a4 <checkAktifCalisma+0x15dc>)
 8006246:	f003 f9e1 	bl	800960c <HAL_GPIO_ReadPin>
 800624a:	4603      	mov	r3, r0
 800624c:	2b01      	cmp	r3, #1
 800624e:	d116      	bne.n	800627e <checkAktifCalisma+0x14b6>
 8006250:	4b55      	ldr	r3, [pc, #340]	; (80063a8 <checkAktifCalisma+0x15e0>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d003      	beq.n	8006260 <checkAktifCalisma+0x1498>
 8006258:	4b53      	ldr	r3, [pc, #332]	; (80063a8 <checkAktifCalisma+0x15e0>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b03      	cmp	r3, #3
 800625e:	d10e      	bne.n	800627e <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006260:	4b4b      	ldr	r3, [pc, #300]	; (8006390 <checkAktifCalisma+0x15c8>)
 8006262:	2201      	movs	r2, #1
 8006264:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006266:	2005      	movs	r0, #5
 8006268:	f7fa fc58 	bl	8000b1c <hataKoduLcdGoster>
			hata2EEPROM(5);
 800626c:	2005      	movs	r0, #5
 800626e:	f7fa fbfb 	bl	8000a68 <hata2EEPROM>
			convertAndSendData();
 8006272:	f001 fca3 	bl	8007bbc <convertAndSendData>
			tablakapisivicihatasi=1;
 8006276:	4b50      	ldr	r3, [pc, #320]	; (80063b8 <checkAktifCalisma+0x15f0>)
 8006278:	2201      	movs	r2, #1
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	e023      	b.n	80062c6 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 800627e:	4b4e      	ldr	r3, [pc, #312]	; (80063b8 <checkAktifCalisma+0x15f0>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d01f      	beq.n	80062c6 <checkAktifCalisma+0x14fe>
 8006286:	4b4a      	ldr	r3, [pc, #296]	; (80063b0 <checkAktifCalisma+0x15e8>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d01b      	beq.n	80062c6 <checkAktifCalisma+0x14fe>
 800628e:	4b43      	ldr	r3, [pc, #268]	; (800639c <checkAktifCalisma+0x15d4>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f083 0301 	eor.w	r3, r3, #1
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d014      	beq.n	80062c6 <checkAktifCalisma+0x14fe>
 800629c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062a0:	4840      	ldr	r0, [pc, #256]	; (80063a4 <checkAktifCalisma+0x15dc>)
 80062a2:	f003 f9b3 	bl	800960c <HAL_GPIO_ReadPin>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10c      	bne.n	80062c6 <checkAktifCalisma+0x14fe>
 80062ac:	4b40      	ldr	r3, [pc, #256]	; (80063b0 <checkAktifCalisma+0x15e8>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80062b4:	4b40      	ldr	r3, [pc, #256]	; (80063b8 <checkAktifCalisma+0x15f0>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80062ba:	4b3e      	ldr	r3, [pc, #248]	; (80063b4 <checkAktifCalisma+0x15ec>)
 80062bc:	2200      	movs	r2, #0
 80062be:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80062c0:	2005      	movs	r0, #5
 80062c2:	f7fe fbaf 	bl	8004a24 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80062c6:	4b30      	ldr	r3, [pc, #192]	; (8006388 <checkAktifCalisma+0x15c0>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d107      	bne.n	80062de <checkAktifCalisma+0x1516>
 80062ce:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <checkAktifCalisma+0x15b0>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d103      	bne.n	80062de <checkAktifCalisma+0x1516>
 80062d6:	4b39      	ldr	r3, [pc, #228]	; (80063bc <checkAktifCalisma+0x15f4>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d016      	beq.n	800630c <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80062de:	4b38      	ldr	r3, [pc, #224]	; (80063c0 <checkAktifCalisma+0x15f8>)
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	4b38      	ldr	r3, [pc, #224]	; (80063c4 <checkAktifCalisma+0x15fc>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	4a37      	ldr	r2, [pc, #220]	; (80063c8 <checkAktifCalisma+0x1600>)
 80062ea:	7812      	ldrb	r2, [r2, #0]
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d30d      	bcc.n	800630c <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80062f0:	4b27      	ldr	r3, [pc, #156]	; (8006390 <checkAktifCalisma+0x15c8>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80062f6:	2006      	movs	r0, #6
 80062f8:	f7fa fc10 	bl	8000b1c <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80062fc:	2006      	movs	r0, #6
 80062fe:	f7fa fbb3 	bl	8000a68 <hata2EEPROM>
			  	convertAndSendData();
 8006302:	f001 fc5b 	bl	8007bbc <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006306:	4b31      	ldr	r3, [pc, #196]	; (80063cc <checkAktifCalisma+0x1604>)
 8006308:	2201      	movs	r2, #1
 800630a:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800630c:	4b2f      	ldr	r3, [pc, #188]	; (80063cc <checkAktifCalisma+0x1604>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d013      	beq.n	800633c <checkAktifCalisma+0x1574>
 8006314:	2108      	movs	r1, #8
 8006316:	4823      	ldr	r0, [pc, #140]	; (80063a4 <checkAktifCalisma+0x15dc>)
 8006318:	f003 f978 	bl	800960c <HAL_GPIO_ReadPin>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00c      	beq.n	800633c <checkAktifCalisma+0x1574>
 8006322:	4b1e      	ldr	r3, [pc, #120]	; (800639c <checkAktifCalisma+0x15d4>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	f083 0301 	eor.w	r3, r3, #1
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d005      	beq.n	800633c <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006330:	4b26      	ldr	r3, [pc, #152]	; (80063cc <checkAktifCalisma+0x1604>)
 8006332:	2200      	movs	r2, #0
 8006334:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006336:	2006      	movs	r0, #6
 8006338:	f7fe fb74 	bl	8004a24 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800633c:	4b24      	ldr	r3, [pc, #144]	; (80063d0 <checkAktifCalisma+0x1608>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <checkAktifCalisma+0x1594>
 8006344:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <checkAktifCalisma+0x15b0>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d107      	bne.n	800635c <checkAktifCalisma+0x1594>
 800634c:	4b21      	ldr	r3, [pc, #132]	; (80063d4 <checkAktifCalisma+0x160c>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d103      	bne.n	800635c <checkAktifCalisma+0x1594>
 8006354:	4b19      	ldr	r3, [pc, #100]	; (80063bc <checkAktifCalisma+0x15f4>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d03f      	beq.n	80063dc <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 800635c:	4b1e      	ldr	r3, [pc, #120]	; (80063d8 <checkAktifCalisma+0x1610>)
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006362:	4b0f      	ldr	r3, [pc, #60]	; (80063a0 <checkAktifCalisma+0x15d8>)
 8006364:	2201      	movs	r2, #1
 8006366:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006368:	4b12      	ldr	r3, [pc, #72]	; (80063b4 <checkAktifCalisma+0x15ec>)
 800636a:	2201      	movs	r2, #1
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	e03c      	b.n	80063ea <checkAktifCalisma+0x1622>
 8006370:	20000271 	.word	0x20000271
 8006374:	20000277 	.word	0x20000277
 8006378:	20000258 	.word	0x20000258
 800637c:	20000281 	.word	0x20000281
 8006380:	20000223 	.word	0x20000223
 8006384:	20000227 	.word	0x20000227
 8006388:	20000274 	.word	0x20000274
 800638c:	40011000 	.word	0x40011000
 8006390:	20000275 	.word	0x20000275
 8006394:	2000027e 	.word	0x2000027e
 8006398:	40010c00 	.word	0x40010c00
 800639c:	2000026e 	.word	0x2000026e
 80063a0:	20000282 	.word	0x20000282
 80063a4:	40010800 	.word	0x40010800
 80063a8:	20000228 	.word	0x20000228
 80063ac:	2000027f 	.word	0x2000027f
 80063b0:	20000262 	.word	0x20000262
 80063b4:	20000283 	.word	0x20000283
 80063b8:	20000280 	.word	0x20000280
 80063bc:	20000257 	.word	0x20000257
 80063c0:	200001fc 	.word	0x200001fc
 80063c4:	20000210 	.word	0x20000210
 80063c8:	20000238 	.word	0x20000238
 80063cc:	2000026f 	.word	0x2000026f
 80063d0:	20000255 	.word	0x20000255
 80063d4:	20000256 	.word	0x20000256
 80063d8:	20000276 	.word	0x20000276
		} else {
			makineCalisiyor=1;
 80063dc:	4b1e      	ldr	r3, [pc, #120]	; (8006458 <checkAktifCalisma+0x1690>)
 80063de:	2201      	movs	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80063e2:	4b1e      	ldr	r3, [pc, #120]	; (800645c <checkAktifCalisma+0x1694>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1e      	ldr	r2, [pc, #120]	; (8006460 <checkAktifCalisma+0x1698>)
 80063e8:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80063ea:	4b1e      	ldr	r3, [pc, #120]	; (8006464 <checkAktifCalisma+0x169c>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d02f      	beq.n	8006452 <checkAktifCalisma+0x168a>
 80063f2:	4b1d      	ldr	r3, [pc, #116]	; (8006468 <checkAktifCalisma+0x16a0>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	f083 0301 	eor.w	r3, r3, #1
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d028      	beq.n	8006452 <checkAktifCalisma+0x168a>
 8006400:	4b1a      	ldr	r3, [pc, #104]	; (800646c <checkAktifCalisma+0x16a4>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	f083 0301 	eor.w	r3, r3, #1
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d021      	beq.n	8006452 <checkAktifCalisma+0x168a>
 800640e:	4b18      	ldr	r3, [pc, #96]	; (8006470 <checkAktifCalisma+0x16a8>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	f083 0301 	eor.w	r3, r3, #1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01a      	beq.n	8006452 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800641c:	4b15      	ldr	r3, [pc, #84]	; (8006474 <checkAktifCalisma+0x16ac>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	f083 0301 	eor.w	r3, r3, #1
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d013      	beq.n	8006452 <checkAktifCalisma+0x168a>
 800642a:	4b13      	ldr	r3, [pc, #76]	; (8006478 <checkAktifCalisma+0x16b0>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	f083 0301 	eor.w	r3, r3, #1
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00c      	beq.n	8006452 <checkAktifCalisma+0x168a>
 8006438:	4b10      	ldr	r3, [pc, #64]	; (800647c <checkAktifCalisma+0x16b4>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	f083 0301 	eor.w	r3, r3, #1
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <checkAktifCalisma+0x168a>
			hataVar=0;
 8006446:	4b07      	ldr	r3, [pc, #28]	; (8006464 <checkAktifCalisma+0x169c>)
 8006448:	2200      	movs	r2, #0
 800644a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 800644c:	2007      	movs	r0, #7
 800644e:	f7fe fae9 	bl	8004a24 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006452:	bf00      	nop
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000276 	.word	0x20000276
 800645c:	200001fc 	.word	0x200001fc
 8006460:	20000210 	.word	0x20000210
 8006464:	20000275 	.word	0x20000275
 8006468:	20000270 	.word	0x20000270
 800646c:	20000271 	.word	0x20000271
 8006470:	2000027e 	.word	0x2000027e
 8006474:	2000027f 	.word	0x2000027f
 8006478:	20000280 	.word	0x20000280
 800647c:	2000026f 	.word	0x2000026f

08006480 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006484:	4b8b      	ldr	r3, [pc, #556]	; (80066b4 <checkDemoModCalisma+0x234>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b01      	cmp	r3, #1
 800648a:	f040 8229 	bne.w	80068e0 <checkDemoModCalisma+0x460>
 800648e:	4b8a      	ldr	r3, [pc, #552]	; (80066b8 <checkDemoModCalisma+0x238>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8224 	beq.w	80068e0 <checkDemoModCalisma+0x460>
 8006498:	4b88      	ldr	r3, [pc, #544]	; (80066bc <checkDemoModCalisma+0x23c>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 821f 	bne.w	80068e0 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80064a2:	2102      	movs	r1, #2
 80064a4:	4886      	ldr	r0, [pc, #536]	; (80066c0 <checkDemoModCalisma+0x240>)
 80064a6:	f003 f8b1 	bl	800960c <HAL_GPIO_ReadPin>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d11d      	bne.n	80064ec <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80064b0:	4b84      	ldr	r3, [pc, #528]	; (80066c4 <checkDemoModCalisma+0x244>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	f083 0301 	eor.w	r3, r3, #1
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d016      	beq.n	80064ec <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80064be:	4b82      	ldr	r3, [pc, #520]	; (80066c8 <checkDemoModCalisma+0x248>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	f083 0301 	eor.w	r3, r3, #1
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00f      	beq.n	80064ec <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80064cc:	4b7f      	ldr	r3, [pc, #508]	; (80066cc <checkDemoModCalisma+0x24c>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	f083 0301 	eor.w	r3, r3, #1
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d008      	beq.n	80064ec <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80064da:	2201      	movs	r2, #1
 80064dc:	2104      	movs	r1, #4
 80064de:	487c      	ldr	r0, [pc, #496]	; (80066d0 <checkDemoModCalisma+0x250>)
 80064e0:	f003 f8ab 	bl	800963a <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80064e4:	4b7b      	ldr	r3, [pc, #492]	; (80066d4 <checkDemoModCalisma+0x254>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	e00e      	b.n	800650a <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80064ec:	2102      	movs	r1, #2
 80064ee:	4874      	ldr	r0, [pc, #464]	; (80066c0 <checkDemoModCalisma+0x240>)
 80064f0:	f003 f88c 	bl	800960c <HAL_GPIO_ReadPin>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d107      	bne.n	800650a <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80064fa:	2200      	movs	r2, #0
 80064fc:	2104      	movs	r1, #4
 80064fe:	4874      	ldr	r0, [pc, #464]	; (80066d0 <checkDemoModCalisma+0x250>)
 8006500:	f003 f89b 	bl	800963a <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006504:	4b73      	ldr	r3, [pc, #460]	; (80066d4 <checkDemoModCalisma+0x254>)
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800650a:	4b72      	ldr	r3, [pc, #456]	; (80066d4 <checkDemoModCalisma+0x254>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10b      	bne.n	800652a <checkDemoModCalisma+0xaa>
 8006512:	4b6d      	ldr	r3, [pc, #436]	; (80066c8 <checkDemoModCalisma+0x248>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d107      	bne.n	800652a <checkDemoModCalisma+0xaa>
 800651a:	4b6c      	ldr	r3, [pc, #432]	; (80066cc <checkDemoModCalisma+0x24c>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d103      	bne.n	800652a <checkDemoModCalisma+0xaa>
 8006522:	4b68      	ldr	r3, [pc, #416]	; (80066c4 <checkDemoModCalisma+0x244>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00c      	beq.n	8006544 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800652a:	2201      	movs	r2, #1
 800652c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006530:	4867      	ldr	r0, [pc, #412]	; (80066d0 <checkDemoModCalisma+0x250>)
 8006532:	f003 f882 	bl	800963a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006536:	2201      	movs	r2, #1
 8006538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800653c:	4864      	ldr	r0, [pc, #400]	; (80066d0 <checkDemoModCalisma+0x250>)
 800653e:	f003 f87c 	bl	800963a <HAL_GPIO_WritePin>
 8006542:	e00b      	b.n	800655c <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006544:	2200      	movs	r2, #0
 8006546:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800654a:	4861      	ldr	r0, [pc, #388]	; (80066d0 <checkDemoModCalisma+0x250>)
 800654c:	f003 f875 	bl	800963a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006550:	2200      	movs	r2, #0
 8006552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006556:	485e      	ldr	r0, [pc, #376]	; (80066d0 <checkDemoModCalisma+0x250>)
 8006558:	f003 f86f 	bl	800963a <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800655c:	2102      	movs	r1, #2
 800655e:	4858      	ldr	r0, [pc, #352]	; (80066c0 <checkDemoModCalisma+0x240>)
 8006560:	f003 f854 	bl	800960c <HAL_GPIO_ReadPin>
 8006564:	4603      	mov	r3, r0
 8006566:	2b01      	cmp	r3, #1
 8006568:	d10d      	bne.n	8006586 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800656a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800656e:	4854      	ldr	r0, [pc, #336]	; (80066c0 <checkDemoModCalisma+0x240>)
 8006570:	f003 f84c 	bl	800960c <HAL_GPIO_ReadPin>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d105      	bne.n	8006586 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 800657a:	4b56      	ldr	r3, [pc, #344]	; (80066d4 <checkDemoModCalisma+0x254>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	f083 0301 	eor.w	r3, r3, #1
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006586:	2102      	movs	r1, #2
 8006588:	484d      	ldr	r0, [pc, #308]	; (80066c0 <checkDemoModCalisma+0x240>)
 800658a:	f003 f83f 	bl	800960c <HAL_GPIO_ReadPin>
 800658e:	4603      	mov	r3, r0
 8006590:	2b01      	cmp	r3, #1
 8006592:	d125      	bne.n	80065e0 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006598:	4849      	ldr	r0, [pc, #292]	; (80066c0 <checkDemoModCalisma+0x240>)
 800659a:	f003 f837 	bl	800960c <HAL_GPIO_ReadPin>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d11d      	bne.n	80065e0 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80065a4:	4b4b      	ldr	r3, [pc, #300]	; (80066d4 <checkDemoModCalisma+0x254>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	f083 0301 	eor.w	r3, r3, #1
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d016      	beq.n	80065e0 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80065b2:	4b44      	ldr	r3, [pc, #272]	; (80066c4 <checkDemoModCalisma+0x244>)
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	f083 0301 	eor.w	r3, r3, #1
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00f      	beq.n	80065e0 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80065c0:	4b42      	ldr	r3, [pc, #264]	; (80066cc <checkDemoModCalisma+0x24c>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	f083 0301 	eor.w	r3, r3, #1
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d008      	beq.n	80065e0 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80065ce:	2201      	movs	r2, #1
 80065d0:	2120      	movs	r1, #32
 80065d2:	483b      	ldr	r0, [pc, #236]	; (80066c0 <checkDemoModCalisma+0x240>)
 80065d4:	f003 f831 	bl	800963a <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80065d8:	4b3b      	ldr	r3, [pc, #236]	; (80066c8 <checkDemoModCalisma+0x248>)
 80065da:	2201      	movs	r2, #1
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	e007      	b.n	80065f0 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80065e0:	2200      	movs	r2, #0
 80065e2:	2120      	movs	r1, #32
 80065e4:	4836      	ldr	r0, [pc, #216]	; (80066c0 <checkDemoModCalisma+0x240>)
 80065e6:	f003 f828 	bl	800963a <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80065ea:	4b37      	ldr	r3, [pc, #220]	; (80066c8 <checkDemoModCalisma+0x248>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065f0:	2102      	movs	r1, #2
 80065f2:	4833      	ldr	r0, [pc, #204]	; (80066c0 <checkDemoModCalisma+0x240>)
 80065f4:	f003 f80a 	bl	800960c <HAL_GPIO_ReadPin>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d125      	bne.n	800664a <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80065fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006602:	482f      	ldr	r0, [pc, #188]	; (80066c0 <checkDemoModCalisma+0x240>)
 8006604:	f003 f802 	bl	800960c <HAL_GPIO_ReadPin>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d11d      	bne.n	800664a <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800660e:	4b31      	ldr	r3, [pc, #196]	; (80066d4 <checkDemoModCalisma+0x254>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	f083 0301 	eor.w	r3, r3, #1
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d016      	beq.n	800664a <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 800661c:	4b2a      	ldr	r3, [pc, #168]	; (80066c8 <checkDemoModCalisma+0x248>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	f083 0301 	eor.w	r3, r3, #1
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00f      	beq.n	800664a <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800662a:	4b26      	ldr	r3, [pc, #152]	; (80066c4 <checkDemoModCalisma+0x244>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	f083 0301 	eor.w	r3, r3, #1
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006638:	2201      	movs	r2, #1
 800663a:	2110      	movs	r1, #16
 800663c:	4820      	ldr	r0, [pc, #128]	; (80066c0 <checkDemoModCalisma+0x240>)
 800663e:	f002 fffc 	bl	800963a <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006642:	4b22      	ldr	r3, [pc, #136]	; (80066cc <checkDemoModCalisma+0x24c>)
 8006644:	2201      	movs	r2, #1
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e007      	b.n	800665a <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800664a:	2200      	movs	r2, #0
 800664c:	2110      	movs	r1, #16
 800664e:	481c      	ldr	r0, [pc, #112]	; (80066c0 <checkDemoModCalisma+0x240>)
 8006650:	f002 fff3 	bl	800963a <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006654:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <checkDemoModCalisma+0x24c>)
 8006656:	2200      	movs	r2, #0
 8006658:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800665a:	2104      	movs	r1, #4
 800665c:	4818      	ldr	r0, [pc, #96]	; (80066c0 <checkDemoModCalisma+0x240>)
 800665e:	f002 ffd5 	bl	800960c <HAL_GPIO_ReadPin>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d139      	bne.n	80066dc <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006668:	4b1a      	ldr	r3, [pc, #104]	; (80066d4 <checkDemoModCalisma+0x254>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	f083 0301 	eor.w	r3, r3, #1
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d032      	beq.n	80066dc <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8006676:	4b15      	ldr	r3, [pc, #84]	; (80066cc <checkDemoModCalisma+0x24c>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	f083 0301 	eor.w	r3, r3, #1
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d02b      	beq.n	80066dc <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006684:	4b10      	ldr	r3, [pc, #64]	; (80066c8 <checkDemoModCalisma+0x248>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f083 0301 	eor.w	r3, r3, #1
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d024      	beq.n	80066dc <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006692:	2201      	movs	r2, #1
 8006694:	2102      	movs	r1, #2
 8006696:	480e      	ldr	r0, [pc, #56]	; (80066d0 <checkDemoModCalisma+0x250>)
 8006698:	f002 ffcf 	bl	800963a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800669c:	2201      	movs	r2, #1
 800669e:	2101      	movs	r1, #1
 80066a0:	480b      	ldr	r0, [pc, #44]	; (80066d0 <checkDemoModCalisma+0x250>)
 80066a2:	f002 ffca 	bl	800963a <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80066a6:	4b07      	ldr	r3, [pc, #28]	; (80066c4 <checkDemoModCalisma+0x244>)
 80066a8:	2201      	movs	r2, #1
 80066aa:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <checkDemoModCalisma+0x258>)
 80066ae:	2201      	movs	r2, #1
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	e027      	b.n	8006704 <checkDemoModCalisma+0x284>
 80066b4:	2000023e 	.word	0x2000023e
 80066b8:	20000272 	.word	0x20000272
 80066bc:	2000023d 	.word	0x2000023d
 80066c0:	40011000 	.word	0x40011000
 80066c4:	20000279 	.word	0x20000279
 80066c8:	2000027a 	.word	0x2000027a
 80066cc:	2000027b 	.word	0x2000027b
 80066d0:	40010c00 	.word	0x40010c00
 80066d4:	20000278 	.word	0x20000278
 80066d8:	2000025e 	.word	0x2000025e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80066dc:	2104      	movs	r1, #4
 80066de:	48a0      	ldr	r0, [pc, #640]	; (8006960 <checkDemoModCalisma+0x4e0>)
 80066e0:	f002 ff94 	bl	800960c <HAL_GPIO_ReadPin>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d10c      	bne.n	8006704 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80066ea:	2200      	movs	r2, #0
 80066ec:	2102      	movs	r1, #2
 80066ee:	489d      	ldr	r0, [pc, #628]	; (8006964 <checkDemoModCalisma+0x4e4>)
 80066f0:	f002 ffa3 	bl	800963a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80066f4:	2200      	movs	r2, #0
 80066f6:	2101      	movs	r1, #1
 80066f8:	489a      	ldr	r0, [pc, #616]	; (8006964 <checkDemoModCalisma+0x4e4>)
 80066fa:	f002 ff9e 	bl	800963a <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80066fe:	4b9a      	ldr	r3, [pc, #616]	; (8006968 <checkDemoModCalisma+0x4e8>)
 8006700:	2200      	movs	r2, #0
 8006702:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006704:	2104      	movs	r1, #4
 8006706:	4896      	ldr	r0, [pc, #600]	; (8006960 <checkDemoModCalisma+0x4e0>)
 8006708:	f002 ff80 	bl	800960c <HAL_GPIO_ReadPin>
 800670c:	4603      	mov	r3, r0
 800670e:	2b01      	cmp	r3, #1
 8006710:	d10d      	bne.n	800672e <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006712:	2201      	movs	r2, #1
 8006714:	2180      	movs	r1, #128	; 0x80
 8006716:	4895      	ldr	r0, [pc, #596]	; (800696c <checkDemoModCalisma+0x4ec>)
 8006718:	f002 ff8f 	bl	800963a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800671c:	2201      	movs	r2, #1
 800671e:	2120      	movs	r1, #32
 8006720:	4892      	ldr	r0, [pc, #584]	; (800696c <checkDemoModCalisma+0x4ec>)
 8006722:	f002 ff8a 	bl	800963a <HAL_GPIO_WritePin>
			timer3 = millis;
 8006726:	4b92      	ldr	r3, [pc, #584]	; (8006970 <checkDemoModCalisma+0x4f0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a92      	ldr	r2, [pc, #584]	; (8006974 <checkDemoModCalisma+0x4f4>)
 800672c:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800672e:	4b90      	ldr	r3, [pc, #576]	; (8006970 <checkDemoModCalisma+0x4f0>)
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b90      	ldr	r3, [pc, #576]	; (8006974 <checkDemoModCalisma+0x4f4>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b04      	cmp	r3, #4
 800673a:	d909      	bls.n	8006750 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800673c:	2200      	movs	r2, #0
 800673e:	2180      	movs	r1, #128	; 0x80
 8006740:	488a      	ldr	r0, [pc, #552]	; (800696c <checkDemoModCalisma+0x4ec>)
 8006742:	f002 ff7a 	bl	800963a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006746:	2200      	movs	r2, #0
 8006748:	2120      	movs	r1, #32
 800674a:	4888      	ldr	r0, [pc, #544]	; (800696c <checkDemoModCalisma+0x4ec>)
 800674c:	f002 ff75 	bl	800963a <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006750:	2102      	movs	r1, #2
 8006752:	4883      	ldr	r0, [pc, #524]	; (8006960 <checkDemoModCalisma+0x4e0>)
 8006754:	f002 ff5a 	bl	800960c <HAL_GPIO_ReadPin>
 8006758:	4603      	mov	r3, r0
 800675a:	2b01      	cmp	r3, #1
 800675c:	d108      	bne.n	8006770 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800675e:	2201      	movs	r2, #1
 8006760:	2140      	movs	r1, #64	; 0x40
 8006762:	4882      	ldr	r0, [pc, #520]	; (800696c <checkDemoModCalisma+0x4ec>)
 8006764:	f002 ff69 	bl	800963a <HAL_GPIO_WritePin>
			timer3 = millis;
 8006768:	4b81      	ldr	r3, [pc, #516]	; (8006970 <checkDemoModCalisma+0x4f0>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a81      	ldr	r2, [pc, #516]	; (8006974 <checkDemoModCalisma+0x4f4>)
 800676e:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006770:	4b7f      	ldr	r3, [pc, #508]	; (8006970 <checkDemoModCalisma+0x4f0>)
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	4b7f      	ldr	r3, [pc, #508]	; (8006974 <checkDemoModCalisma+0x4f4>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b04      	cmp	r3, #4
 800677c:	d904      	bls.n	8006788 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800677e:	2200      	movs	r2, #0
 8006780:	2140      	movs	r1, #64	; 0x40
 8006782:	487a      	ldr	r0, [pc, #488]	; (800696c <checkDemoModCalisma+0x4ec>)
 8006784:	f002 ff59 	bl	800963a <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006788:	4b7b      	ldr	r3, [pc, #492]	; (8006978 <checkDemoModCalisma+0x4f8>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d058      	beq.n	8006842 <checkDemoModCalisma+0x3c2>
 8006790:	4b7a      	ldr	r3, [pc, #488]	; (800697c <checkDemoModCalisma+0x4fc>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d054      	beq.n	8006842 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006798:	4b79      	ldr	r3, [pc, #484]	; (8006980 <checkDemoModCalisma+0x500>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	3301      	adds	r3, #1
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	4b77      	ldr	r3, [pc, #476]	; (8006980 <checkDemoModCalisma+0x500>)
 80067a2:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80067a4:	4b76      	ldr	r3, [pc, #472]	; (8006980 <checkDemoModCalisma+0x500>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b09      	cmp	r3, #9
 80067aa:	d908      	bls.n	80067be <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80067ac:	4b74      	ldr	r3, [pc, #464]	; (8006980 <checkDemoModCalisma+0x500>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80067b2:	4b74      	ldr	r3, [pc, #464]	; (8006984 <checkDemoModCalisma+0x504>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	3301      	adds	r3, #1
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	4b72      	ldr	r3, [pc, #456]	; (8006984 <checkDemoModCalisma+0x504>)
 80067bc:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80067be:	4b71      	ldr	r3, [pc, #452]	; (8006984 <checkDemoModCalisma+0x504>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b09      	cmp	r3, #9
 80067c4:	d908      	bls.n	80067d8 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80067c6:	4b6f      	ldr	r3, [pc, #444]	; (8006984 <checkDemoModCalisma+0x504>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80067cc:	4b6e      	ldr	r3, [pc, #440]	; (8006988 <checkDemoModCalisma+0x508>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	4b6c      	ldr	r3, [pc, #432]	; (8006988 <checkDemoModCalisma+0x508>)
 80067d6:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80067d8:	4b6b      	ldr	r3, [pc, #428]	; (8006988 <checkDemoModCalisma+0x508>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b09      	cmp	r3, #9
 80067de:	d908      	bls.n	80067f2 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80067e0:	4b69      	ldr	r3, [pc, #420]	; (8006988 <checkDemoModCalisma+0x508>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80067e6:	4b69      	ldr	r3, [pc, #420]	; (800698c <checkDemoModCalisma+0x50c>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	3301      	adds	r3, #1
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	4b67      	ldr	r3, [pc, #412]	; (800698c <checkDemoModCalisma+0x50c>)
 80067f0:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80067f2:	4b66      	ldr	r3, [pc, #408]	; (800698c <checkDemoModCalisma+0x50c>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b09      	cmp	r3, #9
 80067f8:	d908      	bls.n	800680c <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80067fa:	4b64      	ldr	r3, [pc, #400]	; (800698c <checkDemoModCalisma+0x50c>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006800:	4b63      	ldr	r3, [pc, #396]	; (8006990 <checkDemoModCalisma+0x510>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	3301      	adds	r3, #1
 8006806:	b2da      	uxtb	r2, r3
 8006808:	4b61      	ldr	r3, [pc, #388]	; (8006990 <checkDemoModCalisma+0x510>)
 800680a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800680c:	4b60      	ldr	r3, [pc, #384]	; (8006990 <checkDemoModCalisma+0x510>)
 800680e:	781a      	ldrb	r2, [r3, #0]
 8006810:	4b60      	ldr	r3, [pc, #384]	; (8006994 <checkDemoModCalisma+0x514>)
 8006812:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006816:	4b5d      	ldr	r3, [pc, #372]	; (800698c <checkDemoModCalisma+0x50c>)
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	4b5e      	ldr	r3, [pc, #376]	; (8006994 <checkDemoModCalisma+0x514>)
 800681c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800681e:	4b5a      	ldr	r3, [pc, #360]	; (8006988 <checkDemoModCalisma+0x508>)
 8006820:	781a      	ldrb	r2, [r3, #0]
 8006822:	4b5c      	ldr	r3, [pc, #368]	; (8006994 <checkDemoModCalisma+0x514>)
 8006824:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006826:	4b57      	ldr	r3, [pc, #348]	; (8006984 <checkDemoModCalisma+0x504>)
 8006828:	781a      	ldrb	r2, [r3, #0]
 800682a:	4b5a      	ldr	r3, [pc, #360]	; (8006994 <checkDemoModCalisma+0x514>)
 800682c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800682e:	4b54      	ldr	r3, [pc, #336]	; (8006980 <checkDemoModCalisma+0x500>)
 8006830:	781a      	ldrb	r2, [r3, #0]
 8006832:	4b58      	ldr	r3, [pc, #352]	; (8006994 <checkDemoModCalisma+0x514>)
 8006834:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006836:	4b58      	ldr	r3, [pc, #352]	; (8006998 <checkDemoModCalisma+0x518>)
 8006838:	2201      	movs	r2, #1
 800683a:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 800683c:	4b4f      	ldr	r3, [pc, #316]	; (800697c <checkDemoModCalisma+0x4fc>)
 800683e:	2200      	movs	r2, #0
 8006840:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006842:	4b56      	ldr	r3, [pc, #344]	; (800699c <checkDemoModCalisma+0x51c>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	f040 8087 	bne.w	800695a <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 800684c:	4a54      	ldr	r2, [pc, #336]	; (80069a0 <checkDemoModCalisma+0x520>)
 800684e:	2101      	movs	r1, #1
 8006850:	2002      	movs	r0, #2
 8006852:	f001 fbb5 	bl	8007fc0 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006856:	4a53      	ldr	r2, [pc, #332]	; (80069a4 <checkDemoModCalisma+0x524>)
 8006858:	2101      	movs	r1, #1
 800685a:	2001      	movs	r0, #1
 800685c:	f001 fbb0 	bl	8007fc0 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006860:	4b4b      	ldr	r3, [pc, #300]	; (8006990 <checkDemoModCalisma+0x510>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	220a      	movs	r2, #10
 8006866:	4950      	ldr	r1, [pc, #320]	; (80069a8 <checkDemoModCalisma+0x528>)
 8006868:	4618      	mov	r0, r3
 800686a:	f005 fefb 	bl	800c664 <itoa>
			lcd_print(2,12,snum);
 800686e:	4a4e      	ldr	r2, [pc, #312]	; (80069a8 <checkDemoModCalisma+0x528>)
 8006870:	210c      	movs	r1, #12
 8006872:	2002      	movs	r0, #2
 8006874:	f001 fba4 	bl	8007fc0 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006878:	4b44      	ldr	r3, [pc, #272]	; (800698c <checkDemoModCalisma+0x50c>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	220a      	movs	r2, #10
 800687e:	494a      	ldr	r1, [pc, #296]	; (80069a8 <checkDemoModCalisma+0x528>)
 8006880:	4618      	mov	r0, r3
 8006882:	f005 feef 	bl	800c664 <itoa>
			lcd_print(2,13,snum);
 8006886:	4a48      	ldr	r2, [pc, #288]	; (80069a8 <checkDemoModCalisma+0x528>)
 8006888:	210d      	movs	r1, #13
 800688a:	2002      	movs	r0, #2
 800688c:	f001 fb98 	bl	8007fc0 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006890:	4b3d      	ldr	r3, [pc, #244]	; (8006988 <checkDemoModCalisma+0x508>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	220a      	movs	r2, #10
 8006896:	4944      	ldr	r1, [pc, #272]	; (80069a8 <checkDemoModCalisma+0x528>)
 8006898:	4618      	mov	r0, r3
 800689a:	f005 fee3 	bl	800c664 <itoa>
			lcd_print(2,14,snum);
 800689e:	4a42      	ldr	r2, [pc, #264]	; (80069a8 <checkDemoModCalisma+0x528>)
 80068a0:	210e      	movs	r1, #14
 80068a2:	2002      	movs	r0, #2
 80068a4:	f001 fb8c 	bl	8007fc0 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80068a8:	4b36      	ldr	r3, [pc, #216]	; (8006984 <checkDemoModCalisma+0x504>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	220a      	movs	r2, #10
 80068ae:	493e      	ldr	r1, [pc, #248]	; (80069a8 <checkDemoModCalisma+0x528>)
 80068b0:	4618      	mov	r0, r3
 80068b2:	f005 fed7 	bl	800c664 <itoa>
			lcd_print(2,15,snum);
 80068b6:	4a3c      	ldr	r2, [pc, #240]	; (80069a8 <checkDemoModCalisma+0x528>)
 80068b8:	210f      	movs	r1, #15
 80068ba:	2002      	movs	r0, #2
 80068bc:	f001 fb80 	bl	8007fc0 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80068c0:	4b2f      	ldr	r3, [pc, #188]	; (8006980 <checkDemoModCalisma+0x500>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	220a      	movs	r2, #10
 80068c6:	4938      	ldr	r1, [pc, #224]	; (80069a8 <checkDemoModCalisma+0x528>)
 80068c8:	4618      	mov	r0, r3
 80068ca:	f005 fecb 	bl	800c664 <itoa>
			lcd_print(2,16,snum);
 80068ce:	4a36      	ldr	r2, [pc, #216]	; (80069a8 <checkDemoModCalisma+0x528>)
 80068d0:	2110      	movs	r1, #16
 80068d2:	2002      	movs	r0, #2
 80068d4:	f001 fb74 	bl	8007fc0 <lcd_print>
			mesajYazildi=1;
 80068d8:	4b34      	ldr	r3, [pc, #208]	; (80069ac <checkDemoModCalisma+0x52c>)
 80068da:	2201      	movs	r2, #1
 80068dc:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80068de:	e03c      	b.n	800695a <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80068e0:	4b33      	ldr	r3, [pc, #204]	; (80069b0 <checkDemoModCalisma+0x530>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d003      	beq.n	80068f0 <checkDemoModCalisma+0x470>
 80068e8:	4b2c      	ldr	r3, [pc, #176]	; (800699c <checkDemoModCalisma+0x51c>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d134      	bne.n	800695a <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80068f0:	2200      	movs	r2, #0
 80068f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068f6:	481b      	ldr	r0, [pc, #108]	; (8006964 <checkDemoModCalisma+0x4e4>)
 80068f8:	f002 fe9f 	bl	800963a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80068fc:	2200      	movs	r2, #0
 80068fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006902:	4818      	ldr	r0, [pc, #96]	; (8006964 <checkDemoModCalisma+0x4e4>)
 8006904:	f002 fe99 	bl	800963a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006908:	2200      	movs	r2, #0
 800690a:	2104      	movs	r1, #4
 800690c:	4815      	ldr	r0, [pc, #84]	; (8006964 <checkDemoModCalisma+0x4e4>)
 800690e:	f002 fe94 	bl	800963a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006912:	2200      	movs	r2, #0
 8006914:	2102      	movs	r1, #2
 8006916:	4813      	ldr	r0, [pc, #76]	; (8006964 <checkDemoModCalisma+0x4e4>)
 8006918:	f002 fe8f 	bl	800963a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800691c:	2200      	movs	r2, #0
 800691e:	2101      	movs	r1, #1
 8006920:	4810      	ldr	r0, [pc, #64]	; (8006964 <checkDemoModCalisma+0x4e4>)
 8006922:	f002 fe8a 	bl	800963a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006926:	2200      	movs	r2, #0
 8006928:	2120      	movs	r1, #32
 800692a:	480d      	ldr	r0, [pc, #52]	; (8006960 <checkDemoModCalisma+0x4e0>)
 800692c:	f002 fe85 	bl	800963a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006930:	2200      	movs	r2, #0
 8006932:	2110      	movs	r1, #16
 8006934:	480a      	ldr	r0, [pc, #40]	; (8006960 <checkDemoModCalisma+0x4e0>)
 8006936:	f002 fe80 	bl	800963a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800693a:	2200      	movs	r2, #0
 800693c:	2180      	movs	r1, #128	; 0x80
 800693e:	480b      	ldr	r0, [pc, #44]	; (800696c <checkDemoModCalisma+0x4ec>)
 8006940:	f002 fe7b 	bl	800963a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006944:	2200      	movs	r2, #0
 8006946:	2140      	movs	r1, #64	; 0x40
 8006948:	4808      	ldr	r0, [pc, #32]	; (800696c <checkDemoModCalisma+0x4ec>)
 800694a:	f002 fe76 	bl	800963a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800694e:	2200      	movs	r2, #0
 8006950:	2120      	movs	r1, #32
 8006952:	4806      	ldr	r0, [pc, #24]	; (800696c <checkDemoModCalisma+0x4ec>)
 8006954:	f002 fe71 	bl	800963a <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006958:	e7ff      	b.n	800695a <checkDemoModCalisma+0x4da>
 800695a:	bf00      	nop
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	40011000 	.word	0x40011000
 8006964:	40010c00 	.word	0x40010c00
 8006968:	20000279 	.word	0x20000279
 800696c:	40010800 	.word	0x40010800
 8006970:	200001fc 	.word	0x200001fc
 8006974:	2000020c 	.word	0x2000020c
 8006978:	20000278 	.word	0x20000278
 800697c:	2000025e 	.word	0x2000025e
 8006980:	2000021d 	.word	0x2000021d
 8006984:	2000021e 	.word	0x2000021e
 8006988:	20000000 	.word	0x20000000
 800698c:	20000001 	.word	0x20000001
 8006990:	2000021f 	.word	0x2000021f
 8006994:	20000118 	.word	0x20000118
 8006998:	2000024c 	.word	0x2000024c
 800699c:	2000023d 	.word	0x2000023d
 80069a0:	0800de3c 	.word	0x0800de3c
 80069a4:	0800de48 	.word	0x0800de48
 80069a8:	20000188 	.word	0x20000188
 80069ac:	20000254 	.word	0x20000254
 80069b0:	2000023e 	.word	0x2000023e

080069b4 <mainLoop>:

void mainLoop() {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80069ba:	f7fe f923 	bl	8004c04 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80069be:	2101      	movs	r1, #1
 80069c0:	48ac      	ldr	r0, [pc, #688]	; (8006c74 <mainLoop+0x2c0>)
 80069c2:	f002 fe23 	bl	800960c <HAL_GPIO_ReadPin>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d136      	bne.n	8006a3a <mainLoop+0x86>
 80069cc:	2108      	movs	r1, #8
 80069ce:	48aa      	ldr	r0, [pc, #680]	; (8006c78 <mainLoop+0x2c4>)
 80069d0:	f002 fe1c 	bl	800960c <HAL_GPIO_ReadPin>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d12f      	bne.n	8006a3a <mainLoop+0x86>
 80069da:	2102      	movs	r1, #2
 80069dc:	48a5      	ldr	r0, [pc, #660]	; (8006c74 <mainLoop+0x2c0>)
 80069de:	f002 fe15 	bl	800960c <HAL_GPIO_ReadPin>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d128      	bne.n	8006a3a <mainLoop+0x86>
 80069e8:	2104      	movs	r1, #4
 80069ea:	48a2      	ldr	r0, [pc, #648]	; (8006c74 <mainLoop+0x2c0>)
 80069ec:	f002 fe0e 	bl	800960c <HAL_GPIO_ReadPin>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d121      	bne.n	8006a3a <mainLoop+0x86>
 80069f6:	2108      	movs	r1, #8
 80069f8:	489e      	ldr	r0, [pc, #632]	; (8006c74 <mainLoop+0x2c0>)
 80069fa:	f002 fe07 	bl	800960c <HAL_GPIO_ReadPin>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d11a      	bne.n	8006a3a <mainLoop+0x86>
 8006a04:	2180      	movs	r1, #128	; 0x80
 8006a06:	489c      	ldr	r0, [pc, #624]	; (8006c78 <mainLoop+0x2c4>)
 8006a08:	f002 fe00 	bl	800960c <HAL_GPIO_ReadPin>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d113      	bne.n	8006a3a <mainLoop+0x86>
 8006a12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a16:	4898      	ldr	r0, [pc, #608]	; (8006c78 <mainLoop+0x2c4>)
 8006a18:	f002 fdf8 	bl	800960c <HAL_GPIO_ReadPin>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d10b      	bne.n	8006a3a <mainLoop+0x86>
 8006a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a26:	4894      	ldr	r0, [pc, #592]	; (8006c78 <mainLoop+0x2c4>)
 8006a28:	f002 fdf0 	bl	800960c <HAL_GPIO_ReadPin>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d103      	bne.n	8006a3a <mainLoop+0x86>
			butonKontrol=0;
 8006a32:	4b92      	ldr	r3, [pc, #584]	; (8006c7c <mainLoop+0x2c8>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	e003      	b.n	8006a42 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006a3a:	4b91      	ldr	r3, [pc, #580]	; (8006c80 <mainLoop+0x2cc>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a91      	ldr	r2, [pc, #580]	; (8006c84 <mainLoop+0x2d0>)
 8006a40:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006a42:	4b91      	ldr	r3, [pc, #580]	; (8006c88 <mainLoop+0x2d4>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d03a      	beq.n	8006ac0 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a4a:	bf00      	nop
 8006a4c:	488f      	ldr	r0, [pc, #572]	; (8006c8c <mainLoop+0x2d8>)
 8006a4e:	f003 fc06 	bl	800a25e <HAL_I2C_GetError>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d0f9      	beq.n	8006a4c <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006a58:	bf00      	nop
 8006a5a:	488c      	ldr	r0, [pc, #560]	; (8006c8c <mainLoop+0x2d8>)
 8006a5c:	f003 fbf2 	bl	800a244 <HAL_I2C_GetState>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b20      	cmp	r3, #32
 8006a64:	d1f9      	bne.n	8006a5a <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006a66:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a6a:	9302      	str	r3, [sp, #8]
 8006a6c:	236e      	movs	r3, #110	; 0x6e
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	4b87      	ldr	r3, [pc, #540]	; (8006c90 <mainLoop+0x2dc>)
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	236e      	movs	r3, #110	; 0x6e
 8006a76:	2200      	movs	r2, #0
 8006a78:	21a0      	movs	r1, #160	; 0xa0
 8006a7a:	4884      	ldr	r0, [pc, #528]	; (8006c8c <mainLoop+0x2d8>)
 8006a7c:	f003 f880 	bl	8009b80 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006a80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a84:	f001 fff2 	bl	8008a6c <HAL_Delay>

		  hafizaYaz=0;
 8006a88:	4b7f      	ldr	r3, [pc, #508]	; (8006c88 <mainLoop+0x2d4>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006a8e:	4b81      	ldr	r3, [pc, #516]	; (8006c94 <mainLoop+0x2e0>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d105      	bne.n	8006aa2 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006a96:	4a80      	ldr	r2, [pc, #512]	; (8006c98 <mainLoop+0x2e4>)
 8006a98:	2101      	movs	r1, #1
 8006a9a:	2002      	movs	r0, #2
 8006a9c:	f001 fa90 	bl	8007fc0 <lcd_print>
 8006aa0:	e008      	b.n	8006ab4 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006aa2:	4b7c      	ldr	r3, [pc, #496]	; (8006c94 <mainLoop+0x2e0>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d104      	bne.n	8006ab4 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006aaa:	4a7c      	ldr	r2, [pc, #496]	; (8006c9c <mainLoop+0x2e8>)
 8006aac:	2101      	movs	r1, #1
 8006aae:	2002      	movs	r0, #2
 8006ab0:	f001 fa86 	bl	8007fc0 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ab8:	f001 ffd8 	bl	8008a6c <HAL_Delay>
		  lcd_clear();
 8006abc:	f001 faac 	bl	8008018 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006ac0:	4b77      	ldr	r3, [pc, #476]	; (8006ca0 <mainLoop+0x2ec>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	f083 0301 	eor.w	r3, r3, #1
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d06d      	beq.n	8006baa <mainLoop+0x1f6>
 8006ace:	486f      	ldr	r0, [pc, #444]	; (8006c8c <mainLoop+0x2d8>)
 8006ad0:	f003 fbb8 	bl	800a244 <HAL_I2C_GetState>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d167      	bne.n	8006baa <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006ada:	4b72      	ldr	r3, [pc, #456]	; (8006ca4 <mainLoop+0x2f0>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	f083 0301 	eor.w	r3, r3, #1
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d044      	beq.n	8006b72 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006ae8:	4a6f      	ldr	r2, [pc, #444]	; (8006ca8 <mainLoop+0x2f4>)
 8006aea:	2101      	movs	r1, #1
 8006aec:	2001      	movs	r0, #1
 8006aee:	f001 fa67 	bl	8007fc0 <lcd_print>
			  if(dilSecim==0) {
 8006af2:	4b68      	ldr	r3, [pc, #416]	; (8006c94 <mainLoop+0x2e0>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d105      	bne.n	8006b06 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006afa:	4a6c      	ldr	r2, [pc, #432]	; (8006cac <mainLoop+0x2f8>)
 8006afc:	2101      	movs	r1, #1
 8006afe:	2002      	movs	r0, #2
 8006b00:	f001 fa5e 	bl	8007fc0 <lcd_print>
 8006b04:	e008      	b.n	8006b18 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006b06:	4b63      	ldr	r3, [pc, #396]	; (8006c94 <mainLoop+0x2e0>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d104      	bne.n	8006b18 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006b0e:	4a68      	ldr	r2, [pc, #416]	; (8006cb0 <mainLoop+0x2fc>)
 8006b10:	2101      	movs	r1, #1
 8006b12:	2002      	movs	r0, #2
 8006b14:	f001 fa54 	bl	8007fc0 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b1c:	f001 ffa6 	bl	8008a6c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b20:	bf00      	nop
 8006b22:	485a      	ldr	r0, [pc, #360]	; (8006c8c <mainLoop+0x2d8>)
 8006b24:	f003 fb9b 	bl	800a25e <HAL_I2C_GetError>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d0f9      	beq.n	8006b22 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b2e:	e003      	b.n	8006b38 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b34:	f001 ff9a 	bl	8008a6c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b38:	4854      	ldr	r0, [pc, #336]	; (8006c8c <mainLoop+0x2d8>)
 8006b3a:	f003 fb83 	bl	800a244 <HAL_I2C_GetState>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b20      	cmp	r3, #32
 8006b42:	d1f5      	bne.n	8006b30 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006b44:	4b53      	ldr	r3, [pc, #332]	; (8006c94 <mainLoop+0x2e0>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d105      	bne.n	8006b58 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006b4c:	4a59      	ldr	r2, [pc, #356]	; (8006cb4 <mainLoop+0x300>)
 8006b4e:	2101      	movs	r1, #1
 8006b50:	2002      	movs	r0, #2
 8006b52:	f001 fa35 	bl	8007fc0 <lcd_print>
 8006b56:	e008      	b.n	8006b6a <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006b58:	4b4e      	ldr	r3, [pc, #312]	; (8006c94 <mainLoop+0x2e0>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d104      	bne.n	8006b6a <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006b60:	4a55      	ldr	r2, [pc, #340]	; (8006cb8 <mainLoop+0x304>)
 8006b62:	2101      	movs	r1, #1
 8006b64:	2002      	movs	r0, #2
 8006b66:	f001 fa2b 	bl	8007fc0 <lcd_print>
			  }

			  ilkOkuma=1;
 8006b6a:	4b4e      	ldr	r3, [pc, #312]	; (8006ca4 <mainLoop+0x2f0>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	e014      	b.n	8006b9c <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006b72:	4b48      	ldr	r3, [pc, #288]	; (8006c94 <mainLoop+0x2e0>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d105      	bne.n	8006b86 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006b7a:	4a50      	ldr	r2, [pc, #320]	; (8006cbc <mainLoop+0x308>)
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	2002      	movs	r0, #2
 8006b80:	f001 fa1e 	bl	8007fc0 <lcd_print>
 8006b84:	e008      	b.n	8006b98 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006b86:	4b43      	ldr	r3, [pc, #268]	; (8006c94 <mainLoop+0x2e0>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d104      	bne.n	8006b98 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006b8e:	4a4c      	ldr	r2, [pc, #304]	; (8006cc0 <mainLoop+0x30c>)
 8006b90:	2101      	movs	r1, #1
 8006b92:	2002      	movs	r0, #2
 8006b94:	f001 fa14 	bl	8007fc0 <lcd_print>
			  }
			  lcd_clear();
 8006b98:	f001 fa3e 	bl	8008018 <lcd_clear>
		  }

		  lcd_clear();
 8006b9c:	f001 fa3c 	bl	8008018 <lcd_clear>

		  eepromKontrol();
 8006ba0:	f7f9 fb48 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006ba4:	4b3e      	ldr	r3, [pc, #248]	; (8006ca0 <mainLoop+0x2ec>)
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006baa:	4b46      	ldr	r3, [pc, #280]	; (8006cc4 <mainLoop+0x310>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d11c      	bne.n	8006bec <mainLoop+0x238>
 8006bb2:	4b45      	ldr	r3, [pc, #276]	; (8006cc8 <mainLoop+0x314>)
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	f083 0301 	eor.w	r3, r3, #1
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d015      	beq.n	8006bec <mainLoop+0x238>
 8006bc0:	4b42      	ldr	r3, [pc, #264]	; (8006ccc <mainLoop+0x318>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d111      	bne.n	8006bec <mainLoop+0x238>
			lcd_clear();
 8006bc8:	f001 fa26 	bl	8008018 <lcd_clear>
			HAL_Delay(10);
 8006bcc:	200a      	movs	r0, #10
 8006bce:	f001 ff4d 	bl	8008a6c <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006bd2:	4a3f      	ldr	r2, [pc, #252]	; (8006cd0 <mainLoop+0x31c>)
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	f001 f9f2 	bl	8007fc0 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006bdc:	4a3d      	ldr	r2, [pc, #244]	; (8006cd4 <mainLoop+0x320>)
 8006bde:	2101      	movs	r1, #1
 8006be0:	2002      	movs	r0, #2
 8006be2:	f001 f9ed 	bl	8007fc0 <lcd_print>
			mesajYazildi=1;
 8006be6:	4b38      	ldr	r3, [pc, #224]	; (8006cc8 <mainLoop+0x314>)
 8006be8:	2201      	movs	r2, #1
 8006bea:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006bec:	4b35      	ldr	r3, [pc, #212]	; (8006cc4 <mainLoop+0x310>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d112      	bne.n	8006c1a <mainLoop+0x266>
 8006bf4:	2102      	movs	r1, #2
 8006bf6:	481f      	ldr	r0, [pc, #124]	; (8006c74 <mainLoop+0x2c0>)
 8006bf8:	f002 fd08 	bl	800960c <HAL_GPIO_ReadPin>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d10b      	bne.n	8006c1a <mainLoop+0x266>
 8006c02:	2104      	movs	r1, #4
 8006c04:	481b      	ldr	r0, [pc, #108]	; (8006c74 <mainLoop+0x2c0>)
 8006c06:	f002 fd01 	bl	800960c <HAL_GPIO_ReadPin>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d104      	bne.n	8006c1a <mainLoop+0x266>
			menuGiris=1;
 8006c10:	4b2c      	ldr	r3, [pc, #176]	; (8006cc4 <mainLoop+0x310>)
 8006c12:	2201      	movs	r2, #1
 8006c14:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006c16:	f001 f9ff 	bl	8008018 <lcd_clear>
		}

		if(menuGiris==1) {
 8006c1a:	4b2a      	ldr	r3, [pc, #168]	; (8006cc4 <mainLoop+0x310>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d101      	bne.n	8006c26 <mainLoop+0x272>
			menu();
 8006c22:	f7fa fab9 	bl	8001198 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006c26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c2a:	4813      	ldr	r0, [pc, #76]	; (8006c78 <mainLoop+0x2c4>)
 8006c2c:	f002 fd1d 	bl	800966a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006c30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c34:	4828      	ldr	r0, [pc, #160]	; (8006cd8 <mainLoop+0x324>)
 8006c36:	f002 fce9 	bl	800960c <HAL_GPIO_ReadPin>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10a      	bne.n	8006c56 <mainLoop+0x2a2>
 8006c40:	4b26      	ldr	r3, [pc, #152]	; (8006cdc <mainLoop+0x328>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	f083 0301 	eor.w	r3, r3, #1
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <mainLoop+0x2a2>
			stopVar=1;
 8006c4e:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <mainLoop+0x32c>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	701a      	strb	r2, [r3, #0]
 8006c54:	e002      	b.n	8006c5c <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006c56:	4b22      	ldr	r3, [pc, #136]	; (8006ce0 <mainLoop+0x32c>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006c5c:	f7fd ffe8 	bl	8004c30 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006c60:	f7fe f81a 	bl	8004c98 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006c64:	f7fe f85e 	bl	8004d24 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006c68:	f7fe f8ae 	bl	8004dc8 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006c6c:	f7ff fc08 	bl	8006480 <checkDemoModCalisma>
		checkLCDBacklight();
 8006c70:	e6a3      	b.n	80069ba <mainLoop+0x6>
 8006c72:	bf00      	nop
 8006c74:	40010800 	.word	0x40010800
 8006c78:	40011000 	.word	0x40011000
 8006c7c:	2000024f 	.word	0x2000024f
 8006c80:	200001fc 	.word	0x200001fc
 8006c84:	20000218 	.word	0x20000218
 8006c88:	2000024c 	.word	0x2000024c
 8006c8c:	200003a8 	.word	0x200003a8
 8006c90:	20000118 	.word	0x20000118
 8006c94:	20000241 	.word	0x20000241
 8006c98:	0800de5c 	.word	0x0800de5c
 8006c9c:	0800de70 	.word	0x0800de70
 8006ca0:	2000024d 	.word	0x2000024d
 8006ca4:	2000024e 	.word	0x2000024e
 8006ca8:	0800de84 	.word	0x0800de84
 8006cac:	0800de98 	.word	0x0800de98
 8006cb0:	0800deac 	.word	0x0800deac
 8006cb4:	0800dec0 	.word	0x0800dec0
 8006cb8:	0800ded4 	.word	0x0800ded4
 8006cbc:	0800dee8 	.word	0x0800dee8
 8006cc0:	0800defc 	.word	0x0800defc
 8006cc4:	2000023d 	.word	0x2000023d
 8006cc8:	20000254 	.word	0x20000254
 8006ccc:	2000023e 	.word	0x2000023e
 8006cd0:	0800df10 	.word	0x0800df10
 8006cd4:	0800df24 	.word	0x0800df24
 8006cd8:	40010c00 	.word	0x40010c00
 8006cdc:	20000275 	.word	0x20000275
 8006ce0:	20000272 	.word	0x20000272

08006ce4 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08c      	sub	sp, #48	; 0x30
 8006ce8:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8006cea:	2001      	movs	r0, #1
 8006cec:	f001 f9c6 	bl	800807c <lcd_cursor>

	uint8_t inputMachineID[machineIDCharacterLimit];

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006cf0:	2305      	movs	r3, #5
 8006cf2:	61fb      	str	r3, [r7, #28]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	61bb      	str	r3, [r7, #24]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006cfc:	4ba4      	ldr	r3, [pc, #656]	; (8006f90 <takeMachineID+0x2ac>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	613b      	str	r3, [r7, #16]

    resetEEPROM4Wifi(1);
 8006d02:	2001      	movs	r0, #1
 8006d04:	f7f9 fda0 	bl	8000848 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8006d08:	2064      	movs	r0, #100	; 0x64
 8006d0a:	f001 feaf 	bl	8008a6c <HAL_Delay>

    printTemplate(1, 0);
 8006d0e:	2100      	movs	r1, #0
 8006d10:	2001      	movs	r0, #1
 8006d12:	f7fa f8b5 	bl	8000e80 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006d16:	2108      	movs	r1, #8
 8006d18:	489e      	ldr	r0, [pc, #632]	; (8006f94 <takeMachineID+0x2b0>)
 8006d1a:	f002 fc77 	bl	800960c <HAL_GPIO_ReadPin>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d134      	bne.n	8006d8e <takeMachineID+0xaa>
        	lcd_cursor(0);
 8006d24:	2000      	movs	r0, #0
 8006d26:	f001 f9a9 	bl	800807c <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006d2a:	489b      	ldr	r0, [pc, #620]	; (8006f98 <takeMachineID+0x2b4>)
 8006d2c:	f7f9 fa7a 	bl	8000224 <strlen>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b0c      	cmp	r3, #12
 8006d34:	d010      	beq.n	8006d58 <takeMachineID+0x74>
        		lcd_clear();
 8006d36:	f001 f96f 	bl	8008018 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006d3a:	4a98      	ldr	r2, [pc, #608]	; (8006f9c <takeMachineID+0x2b8>)
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	2001      	movs	r0, #1
 8006d40:	f001 f93e 	bl	8007fc0 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006d44:	4a96      	ldr	r2, [pc, #600]	; (8006fa0 <takeMachineID+0x2bc>)
 8006d46:	2101      	movs	r1, #1
 8006d48:	2002      	movs	r0, #2
 8006d4a:	f001 f939 	bl	8007fc0 <lcd_print>
        		HAL_Delay(1200);
 8006d4e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006d52:	f001 fe8b 	bl	8008a6c <HAL_Delay>
        		goto mainSection;
 8006d56:	e7c8      	b.n	8006cea <takeMachineID+0x6>
        	} else {
        		memcpy(inputMachineID, &eepromData[idStartPos], machineIDCharacterLimit);
 8006d58:	4b8d      	ldr	r3, [pc, #564]	; (8006f90 <takeMachineID+0x2ac>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a91      	ldr	r2, [pc, #580]	; (8006fa4 <takeMachineID+0x2c0>)
 8006d5e:	441a      	add	r2, r3
 8006d60:	1d3b      	adds	r3, r7, #4
 8006d62:	6810      	ldr	r0, [r2, #0]
 8006d64:	6851      	ldr	r1, [r2, #4]
 8006d66:	6892      	ldr	r2, [r2, #8]
 8006d68:	c307      	stmia	r3!, {r0, r1, r2}

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006d6a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d6e:	9302      	str	r3, [sp, #8]
 8006d70:	236e      	movs	r3, #110	; 0x6e
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	4b8b      	ldr	r3, [pc, #556]	; (8006fa4 <takeMachineID+0x2c0>)
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	236e      	movs	r3, #110	; 0x6e
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	21a0      	movs	r1, #160	; 0xa0
 8006d7e:	488a      	ldr	r0, [pc, #552]	; (8006fa8 <takeMachineID+0x2c4>)
 8006d80:	f002 fefe 	bl	8009b80 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006d84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d88:	f001 fe70 	bl	8008a6c <HAL_Delay>

            	break;
 8006d8c:	e13c      	b.n	8007008 <takeMachineID+0x324>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006d8e:	2101      	movs	r1, #1
 8006d90:	4880      	ldr	r0, [pc, #512]	; (8006f94 <takeMachineID+0x2b0>)
 8006d92:	f002 fc3b 	bl	800960c <HAL_GPIO_ReadPin>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d111      	bne.n	8006dc0 <takeMachineID+0xdc>
        	if(cursorPosition == 7) {
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	2b07      	cmp	r3, #7
 8006da0:	d102      	bne.n	8006da8 <takeMachineID+0xc4>
        		cursorPosition = 10;
 8006da2:	230a      	movs	r3, #10
 8006da4:	61bb      	str	r3, [r7, #24]
 8006da6:	e008      	b.n	8006dba <takeMachineID+0xd6>
        	} else if (cursorPosition == 14) {
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	2b0e      	cmp	r3, #14
 8006dac:	d102      	bne.n	8006db4 <takeMachineID+0xd0>
                cursorPosition = 3;
 8006dae:	2303      	movs	r3, #3
 8006db0:	61bb      	str	r3, [r7, #24]
 8006db2:	e002      	b.n	8006dba <takeMachineID+0xd6>
            } else {
            	cursorPosition++;
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	3301      	adds	r3, #1
 8006db8:	61bb      	str	r3, [r7, #24]
            }

        	HAL_Delay(150);
 8006dba:	2096      	movs	r0, #150	; 0x96
 8006dbc:	f001 fe56 	bl	8008a6c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006dc0:	2108      	movs	r1, #8
 8006dc2:	487a      	ldr	r0, [pc, #488]	; (8006fac <takeMachineID+0x2c8>)
 8006dc4:	f002 fc22 	bl	800960c <HAL_GPIO_ReadPin>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d111      	bne.n	8006df2 <takeMachineID+0x10e>
            if (cursorPosition == 3) {
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d102      	bne.n	8006dda <takeMachineID+0xf6>
                cursorPosition = 14;
 8006dd4:	230e      	movs	r3, #14
 8006dd6:	61bb      	str	r3, [r7, #24]
 8006dd8:	e008      	b.n	8006dec <takeMachineID+0x108>
            } else if(cursorPosition == 10) {
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	2b0a      	cmp	r3, #10
 8006dde:	d102      	bne.n	8006de6 <takeMachineID+0x102>
            	cursorPosition = 7;
 8006de0:	2307      	movs	r3, #7
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	e002      	b.n	8006dec <takeMachineID+0x108>
            } else {
            	cursorPosition--;
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	61bb      	str	r3, [r7, #24]
            }

            HAL_Delay(150);
 8006dec:	2096      	movs	r0, #150	; 0x96
 8006dee:	f001 fe3d 	bl	8008a6c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006df2:	2102      	movs	r1, #2
 8006df4:	4867      	ldr	r0, [pc, #412]	; (8006f94 <takeMachineID+0x2b0>)
 8006df6:	f002 fc09 	bl	800960c <HAL_GPIO_ReadPin>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	f040 80ab 	bne.w	8006f58 <takeMachineID+0x274>
        	if(cursorPosition == 3) {
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d10a      	bne.n	8006e1e <takeMachineID+0x13a>
        		//machineID[arrayPos] = '0';
        		inputMachineID[arrayPos] = 0;
 8006e08:	1d3a      	adds	r2, r7, #4
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	2200      	movs	r2, #0
 8006e10:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006e12:	4a64      	ldr	r2, [pc, #400]	; (8006fa4 <takeMachineID+0x2c0>)
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	4413      	add	r3, r2
 8006e18:	2200      	movs	r2, #0
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e07c      	b.n	8006f18 <takeMachineID+0x234>
        	} else if(cursorPosition == 4) {
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d10a      	bne.n	8006e3a <takeMachineID+0x156>
        		//machineID[arrayPos] = '1';
        		inputMachineID[arrayPos] = 1;
 8006e24:	1d3a      	adds	r2, r7, #4
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	4413      	add	r3, r2
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006e2e:	4a5d      	ldr	r2, [pc, #372]	; (8006fa4 <takeMachineID+0x2c0>)
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	4413      	add	r3, r2
 8006e34:	2201      	movs	r2, #1
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	e06e      	b.n	8006f18 <takeMachineID+0x234>
        	} else if(cursorPosition == 5) {
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	2b05      	cmp	r3, #5
 8006e3e:	d10a      	bne.n	8006e56 <takeMachineID+0x172>
        		//machineID[arrayPos] = '2';
        		inputMachineID[arrayPos] = 2;
 8006e40:	1d3a      	adds	r2, r7, #4
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	4413      	add	r3, r2
 8006e46:	2202      	movs	r2, #2
 8006e48:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006e4a:	4a56      	ldr	r2, [pc, #344]	; (8006fa4 <takeMachineID+0x2c0>)
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	4413      	add	r3, r2
 8006e50:	2202      	movs	r2, #2
 8006e52:	701a      	strb	r2, [r3, #0]
 8006e54:	e060      	b.n	8006f18 <takeMachineID+0x234>
        	} else if(cursorPosition == 6) {
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	2b06      	cmp	r3, #6
 8006e5a:	d10a      	bne.n	8006e72 <takeMachineID+0x18e>
        		//machineID[arrayPos] = '3';
        		inputMachineID[arrayPos] = 3;
 8006e5c:	1d3a      	adds	r2, r7, #4
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	4413      	add	r3, r2
 8006e62:	2203      	movs	r2, #3
 8006e64:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006e66:	4a4f      	ldr	r2, [pc, #316]	; (8006fa4 <takeMachineID+0x2c0>)
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	2203      	movs	r2, #3
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	e052      	b.n	8006f18 <takeMachineID+0x234>
        	} else if(cursorPosition == 7) {
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2b07      	cmp	r3, #7
 8006e76:	d10a      	bne.n	8006e8e <takeMachineID+0x1aa>
        		//machineID[arrayPos] = '4';
        		inputMachineID[arrayPos] = 4;
 8006e78:	1d3a      	adds	r2, r7, #4
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	2204      	movs	r2, #4
 8006e80:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006e82:	4a48      	ldr	r2, [pc, #288]	; (8006fa4 <takeMachineID+0x2c0>)
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	4413      	add	r3, r2
 8006e88:	2204      	movs	r2, #4
 8006e8a:	701a      	strb	r2, [r3, #0]
 8006e8c:	e044      	b.n	8006f18 <takeMachineID+0x234>
        	} else if(cursorPosition == 10) {
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2b0a      	cmp	r3, #10
 8006e92:	d10a      	bne.n	8006eaa <takeMachineID+0x1c6>
        		//machineID[arrayPos] = '5';
        		inputMachineID[arrayPos] = 5;
 8006e94:	1d3a      	adds	r2, r7, #4
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	4413      	add	r3, r2
 8006e9a:	2205      	movs	r2, #5
 8006e9c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006e9e:	4a41      	ldr	r2, [pc, #260]	; (8006fa4 <takeMachineID+0x2c0>)
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	2205      	movs	r2, #5
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	e036      	b.n	8006f18 <takeMachineID+0x234>
        	} else if(cursorPosition == 11) {
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b0b      	cmp	r3, #11
 8006eae:	d10a      	bne.n	8006ec6 <takeMachineID+0x1e2>
        		//machineID[arrayPos] = '6';
        		inputMachineID[arrayPos] = 6;
 8006eb0:	1d3a      	adds	r2, r7, #4
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	2206      	movs	r2, #6
 8006eb8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006eba:	4a3a      	ldr	r2, [pc, #232]	; (8006fa4 <takeMachineID+0x2c0>)
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	2206      	movs	r2, #6
 8006ec2:	701a      	strb	r2, [r3, #0]
 8006ec4:	e028      	b.n	8006f18 <takeMachineID+0x234>
        	} else if(cursorPosition == 12) {
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	2b0c      	cmp	r3, #12
 8006eca:	d10a      	bne.n	8006ee2 <takeMachineID+0x1fe>
        		//machineID[arrayPos] = '7';
        		inputMachineID[arrayPos] = 7;
 8006ecc:	1d3a      	adds	r2, r7, #4
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	2207      	movs	r2, #7
 8006ed4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006ed6:	4a33      	ldr	r2, [pc, #204]	; (8006fa4 <takeMachineID+0x2c0>)
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	4413      	add	r3, r2
 8006edc:	2207      	movs	r2, #7
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e01a      	b.n	8006f18 <takeMachineID+0x234>
        	} else if(cursorPosition == 13) {
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	2b0d      	cmp	r3, #13
 8006ee6:	d10a      	bne.n	8006efe <takeMachineID+0x21a>
        		//machineID[arrayPos] = '8';
        		inputMachineID[arrayPos] = 8;
 8006ee8:	1d3a      	adds	r2, r7, #4
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	4413      	add	r3, r2
 8006eee:	2208      	movs	r2, #8
 8006ef0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8006ef2:	4a2c      	ldr	r2, [pc, #176]	; (8006fa4 <takeMachineID+0x2c0>)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	2208      	movs	r2, #8
 8006efa:	701a      	strb	r2, [r3, #0]
 8006efc:	e00c      	b.n	8006f18 <takeMachineID+0x234>
        	} else if(cursorPosition == 14) {
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b0e      	cmp	r3, #14
 8006f02:	d109      	bne.n	8006f18 <takeMachineID+0x234>
        		//machineID[arrayPos] = '9';
        		inputMachineID[arrayPos] = 9;
 8006f04:	1d3a      	adds	r2, r7, #4
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	4413      	add	r3, r2
 8006f0a:	2209      	movs	r2, #9
 8006f0c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8006f0e:	4a25      	ldr	r2, [pc, #148]	; (8006fa4 <takeMachineID+0x2c0>)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	4413      	add	r3, r2
 8006f14:	2209      	movs	r2, #9
 8006f16:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	b2d9      	uxtb	r1, r3
 8006f1c:	4a1e      	ldr	r2, [pc, #120]	; (8006f98 <takeMachineID+0x2b4>)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	4413      	add	r3, r2
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	2001      	movs	r0, #1
 8006f28:	f001 f85f 	bl	8007fea <lcd_print_char>

        	writeLoc++;
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	61fb      	str	r3, [r7, #28]
        	arrayPos++;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	3301      	adds	r3, #1
 8006f36:	617b      	str	r3, [r7, #20]
        	eepromVal++;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	613b      	str	r3, [r7, #16]

        	//machineID[machineIDCharacterLimit] = '\0';
        	inputMachineID[arrayPos] = '\0';
 8006f3e:	1d3a      	adds	r2, r7, #4
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	4413      	add	r3, r2
 8006f44:	2200      	movs	r2, #0
 8006f46:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = '\0';
 8006f48:	4a16      	ldr	r2, [pc, #88]	; (8006fa4 <takeMachineID+0x2c0>)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	701a      	strb	r2, [r3, #0]

        	HAL_Delay(150);
 8006f52:	2096      	movs	r0, #150	; 0x96
 8006f54:	f001 fd8a 	bl	8008a6c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006f58:	2104      	movs	r1, #4
 8006f5a:	480e      	ldr	r0, [pc, #56]	; (8006f94 <takeMachineID+0x2b0>)
 8006f5c:	f002 fb56 	bl	800960c <HAL_GPIO_ReadPin>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d149      	bne.n	8006ffa <takeMachineID+0x316>
            if(strlen(machineID) >= 1) {
 8006f66:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <takeMachineID+0x2b4>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d042      	beq.n	8006ff4 <takeMachineID+0x310>
                //machineID[arrayPos] = '\0';
            	inputMachineID[arrayPos] = '\0';
 8006f6e:	1d3a      	adds	r2, r7, #4
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	4413      	add	r3, r2
 8006f74:	2200      	movs	r2, #0
 8006f76:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8006f78:	4a0a      	ldr	r2, [pc, #40]	; (8006fa4 <takeMachineID+0x2c0>)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	2200      	movs	r2, #0
 8006f80:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	2b05      	cmp	r3, #5
 8006f86:	dd13      	ble.n	8006fb0 <takeMachineID+0x2cc>
                	writeLoc--;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	61fb      	str	r3, [r7, #28]
 8006f8e:	e014      	b.n	8006fba <takeMachineID+0x2d6>
 8006f90:	20000004 	.word	0x20000004
 8006f94:	40010800 	.word	0x40010800
 8006f98:	20000190 	.word	0x20000190
 8006f9c:	0800df38 	.word	0x0800df38
 8006fa0:	0800df4c 	.word	0x0800df4c
 8006fa4:	20000118 	.word	0x20000118
 8006fa8:	200003a8 	.word	0x200003a8
 8006fac:	40011000 	.word	0x40011000
                } else if(writeLoc < 5) {
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	dc01      	bgt.n	8006fba <takeMachineID+0x2d6>
                	writeLoc = 5;
 8006fb6:	2305      	movs	r3, #5
 8006fb8:	61fb      	str	r3, [r7, #28]
                }

                if(arrayPos > 0) {
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dd06      	ble.n	8006fce <takeMachineID+0x2ea>
                	arrayPos--;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	617b      	str	r3, [r7, #20]
                	eepromVal--;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	613b      	str	r3, [r7, #16]
 8006fcc:	e007      	b.n	8006fde <takeMachineID+0x2fa>
                } else if(arrayPos < 0) {
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	da04      	bge.n	8006fde <takeMachineID+0x2fa>
                	arrayPos = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	617b      	str	r3, [r7, #20]
                	eepromVal = idStartPos;
 8006fd8:	4b0d      	ldr	r3, [pc, #52]	; (8007010 <takeMachineID+0x32c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	613b      	str	r3, [r7, #16]
                }

                lcd_delete_char(1, 4+arrayPos);
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	2001      	movs	r0, #1
 8006fea:	f001 f81f 	bl	800802c <lcd_delete_char>
                HAL_Delay(50);
 8006fee:	2032      	movs	r0, #50	; 0x32
 8006ff0:	f001 fd3c 	bl	8008a6c <HAL_Delay>
            }

            HAL_Delay(150);
 8006ff4:	2096      	movs	r0, #150	; 0x96
 8006ff6:	f001 fd39 	bl	8008a6c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	4619      	mov	r1, r3
 8007000:	2002      	movs	r0, #2
 8007002:	f000 ffbe 	bl	8007f82 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007006:	e686      	b.n	8006d16 <takeMachineID+0x32>
    }
}
 8007008:	bf00      	nop
 800700a:	3720      	adds	r7, #32
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	20000004 	.word	0x20000004

08007014 <takeWifiSSID>:

void takeWifiSSID() {
 8007014:	b5b0      	push	{r4, r5, r7, lr}
 8007016:	b08e      	sub	sp, #56	; 0x38
 8007018:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 800701a:	2001      	movs	r0, #1
 800701c:	f001 f82e 	bl	800807c <lcd_cursor>

    uint8_t inputWifiSSID[wifiCharacterLimit];

    resetEEPROM4Wifi(2);
 8007020:	2002      	movs	r0, #2
 8007022:	f7f9 fc11 	bl	8000848 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8007026:	2064      	movs	r0, #100	; 0x64
 8007028:	f001 fd20 	bl	8008a6c <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800702c:	2301      	movs	r3, #1
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007030:	2307      	movs	r3, #7
 8007032:	623b      	str	r3, [r7, #32]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007034:	2301      	movs	r3, #1
 8007036:	61fb      	str	r3, [r7, #28]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007038:	2300      	movs	r3, #0
 800703a:	61bb      	str	r3, [r7, #24]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800703c:	4ba8      	ldr	r3, [pc, #672]	; (80072e0 <takeWifiSSID+0x2cc>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	617b      	str	r3, [r7, #20]

    printTemplate(2, 1);
 8007042:	2101      	movs	r1, #1
 8007044:	2002      	movs	r0, #2
 8007046:	f7f9 ff1b 	bl	8000e80 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800704a:	2108      	movs	r1, #8
 800704c:	48a5      	ldr	r0, [pc, #660]	; (80072e4 <takeWifiSSID+0x2d0>)
 800704e:	f002 fadd 	bl	800960c <HAL_GPIO_ReadPin>
 8007052:	4603      	mov	r3, r0
 8007054:	2b01      	cmp	r3, #1
 8007056:	d138      	bne.n	80070ca <takeWifiSSID+0xb6>
            lcd_cursor(0);
 8007058:	2000      	movs	r0, #0
 800705a:	f001 f80f 	bl	800807c <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 800705e:	48a2      	ldr	r0, [pc, #648]	; (80072e8 <takeWifiSSID+0x2d4>)
 8007060:	f7f9 f8e0 	bl	8000224 <strlen>
 8007064:	4603      	mov	r3, r0
 8007066:	2b14      	cmp	r3, #20
 8007068:	d910      	bls.n	800708c <takeWifiSSID+0x78>
                lcd_clear();
 800706a:	f000 ffd5 	bl	8008018 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 800706e:	4a9f      	ldr	r2, [pc, #636]	; (80072ec <takeWifiSSID+0x2d8>)
 8007070:	2101      	movs	r1, #1
 8007072:	2001      	movs	r0, #1
 8007074:	f000 ffa4 	bl	8007fc0 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007078:	4a9d      	ldr	r2, [pc, #628]	; (80072f0 <takeWifiSSID+0x2dc>)
 800707a:	2101      	movs	r1, #1
 800707c:	2002      	movs	r0, #2
 800707e:	f000 ff9f 	bl	8007fc0 <lcd_print>
                HAL_Delay(1250);
 8007082:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007086:	f001 fcf1 	bl	8008a6c <HAL_Delay>
                goto mainSSIDSection;
 800708a:	e7c6      	b.n	800701a <takeWifiSSID+0x6>
            } else {
            	memcpy(inputWifiSSID, &eepromData[ssidStartPos], wifiCharacterLimit);
 800708c:	4b94      	ldr	r3, [pc, #592]	; (80072e0 <takeWifiSSID+0x2cc>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a98      	ldr	r2, [pc, #608]	; (80072f4 <takeWifiSSID+0x2e0>)
 8007092:	4413      	add	r3, r2
 8007094:	463c      	mov	r4, r7
 8007096:	461d      	mov	r5, r3
 8007098:	6828      	ldr	r0, [r5, #0]
 800709a:	6869      	ldr	r1, [r5, #4]
 800709c:	68aa      	ldr	r2, [r5, #8]
 800709e:	68eb      	ldr	r3, [r5, #12]
 80070a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070a2:	6928      	ldr	r0, [r5, #16]
 80070a4:	6020      	str	r0, [r4, #0]

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80070a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80070aa:	9302      	str	r3, [sp, #8]
 80070ac:	236e      	movs	r3, #110	; 0x6e
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	4b90      	ldr	r3, [pc, #576]	; (80072f4 <takeWifiSSID+0x2e0>)
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	236e      	movs	r3, #110	; 0x6e
 80070b6:	2200      	movs	r2, #0
 80070b8:	21a0      	movs	r1, #160	; 0xa0
 80070ba:	488f      	ldr	r0, [pc, #572]	; (80072f8 <takeWifiSSID+0x2e4>)
 80070bc:	f002 fd60 	bl	8009b80 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80070c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80070c4:	f001 fcd2 	bl	8008a6c <HAL_Delay>

            	break;
 80070c8:	e137      	b.n	800733a <takeWifiSSID+0x326>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80070ca:	2101      	movs	r1, #1
 80070cc:	4885      	ldr	r0, [pc, #532]	; (80072e4 <takeWifiSSID+0x2d0>)
 80070ce:	f002 fa9d 	bl	800960c <HAL_GPIO_ReadPin>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d14d      	bne.n	8007174 <takeWifiSSID+0x160>
        	if(cursorPosition > 80) {
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	2b50      	cmp	r3, #80	; 0x50
 80070dc:	dd01      	ble.n	80070e2 <takeWifiSSID+0xce>
        		cursorPosition = 1;
 80070de:	2301      	movs	r3, #1
 80070e0:	61fb      	str	r3, [r7, #28]
        	}

            if (cursorPosition == 16) {
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	2b10      	cmp	r3, #16
 80070e6:	d13f      	bne.n	8007168 <takeWifiSSID+0x154>
            	if(page == 1) {
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d109      	bne.n	8007102 <takeWifiSSID+0xee>
            		cursorPosition = 1;
 80070ee:	2301      	movs	r3, #1
 80070f0:	61fb      	str	r3, [r7, #28]
            		page++;
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	3301      	adds	r3, #1
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(2, 2);
 80070f8:	2102      	movs	r1, #2
 80070fa:	2002      	movs	r0, #2
 80070fc:	f7f9 fec0 	bl	8000e80 <printTemplate>
 8007100:	e035      	b.n	800716e <takeWifiSSID+0x15a>
            	} else if(page == 2) {
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	2b02      	cmp	r3, #2
 8007106:	d109      	bne.n	800711c <takeWifiSSID+0x108>
            		cursorPosition = 1;
 8007108:	2301      	movs	r3, #1
 800710a:	61fb      	str	r3, [r7, #28]
            		page++;
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	3301      	adds	r3, #1
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(2, 3);
 8007112:	2103      	movs	r1, #3
 8007114:	2002      	movs	r0, #2
 8007116:	f7f9 feb3 	bl	8000e80 <printTemplate>
 800711a:	e028      	b.n	800716e <takeWifiSSID+0x15a>
            	} else if(page == 3) {
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	2b03      	cmp	r3, #3
 8007120:	d109      	bne.n	8007136 <takeWifiSSID+0x122>
            		cursorPosition = 1;
 8007122:	2301      	movs	r3, #1
 8007124:	61fb      	str	r3, [r7, #28]
            		page++;
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	3301      	adds	r3, #1
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(2, 4);
 800712c:	2104      	movs	r1, #4
 800712e:	2002      	movs	r0, #2
 8007130:	f7f9 fea6 	bl	8000e80 <printTemplate>
 8007134:	e01b      	b.n	800716e <takeWifiSSID+0x15a>
            	} else if(page == 4) {
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	2b04      	cmp	r3, #4
 800713a:	d109      	bne.n	8007150 <takeWifiSSID+0x13c>
            		cursorPosition = 1;
 800713c:	2301      	movs	r3, #1
 800713e:	61fb      	str	r3, [r7, #28]
            		page++;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	3301      	adds	r3, #1
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(2, 5);
 8007146:	2105      	movs	r1, #5
 8007148:	2002      	movs	r0, #2
 800714a:	f7f9 fe99 	bl	8000e80 <printTemplate>
 800714e:	e00e      	b.n	800716e <takeWifiSSID+0x15a>
            	} else if(page == 5) {
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	2b05      	cmp	r3, #5
 8007154:	d10b      	bne.n	800716e <takeWifiSSID+0x15a>
            		cursorPosition = 1;
 8007156:	2301      	movs	r3, #1
 8007158:	61fb      	str	r3, [r7, #28]
            		page = 1;
 800715a:	2301      	movs	r3, #1
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(2, 1);
 800715e:	2101      	movs	r1, #1
 8007160:	2002      	movs	r0, #2
 8007162:	f7f9 fe8d 	bl	8000e80 <printTemplate>
 8007166:	e002      	b.n	800716e <takeWifiSSID+0x15a>
            	}
            } else {
            	cursorPosition++;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	3301      	adds	r3, #1
 800716c:	61fb      	str	r3, [r7, #28]
            }

            HAL_Delay(150);
 800716e:	2096      	movs	r0, #150	; 0x96
 8007170:	f001 fc7c 	bl	8008a6c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007174:	2108      	movs	r1, #8
 8007176:	4861      	ldr	r0, [pc, #388]	; (80072fc <takeWifiSSID+0x2e8>)
 8007178:	f002 fa48 	bl	800960c <HAL_GPIO_ReadPin>
 800717c:	4603      	mov	r3, r0
 800717e:	2b01      	cmp	r3, #1
 8007180:	d149      	bne.n	8007216 <takeWifiSSID+0x202>
        	if(cursorPosition < 1) {
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	2b00      	cmp	r3, #0
 8007186:	dc01      	bgt.n	800718c <takeWifiSSID+0x178>
        		cursorPosition = 80;
 8007188:	2350      	movs	r3, #80	; 0x50
 800718a:	61fb      	str	r3, [r7, #28]
        	}

            if(cursorPosition == 1) {
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d13b      	bne.n	800720a <takeWifiSSID+0x1f6>
            	if(page == 1) {
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	2b01      	cmp	r3, #1
 8007196:	d108      	bne.n	80071aa <takeWifiSSID+0x196>
            		cursorPosition = 16;
 8007198:	2310      	movs	r3, #16
 800719a:	61fb      	str	r3, [r7, #28]
            		page = 5;
 800719c:	2305      	movs	r3, #5
 800719e:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(2, 5);
 80071a0:	2105      	movs	r1, #5
 80071a2:	2002      	movs	r0, #2
 80071a4:	f7f9 fe6c 	bl	8000e80 <printTemplate>
 80071a8:	e032      	b.n	8007210 <takeWifiSSID+0x1fc>
            	} else if(page == 2) {
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d108      	bne.n	80071c2 <takeWifiSSID+0x1ae>
            		cursorPosition = 16;
 80071b0:	2310      	movs	r3, #16
 80071b2:	61fb      	str	r3, [r7, #28]
            		page = 1;
 80071b4:	2301      	movs	r3, #1
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(2, 1);
 80071b8:	2101      	movs	r1, #1
 80071ba:	2002      	movs	r0, #2
 80071bc:	f7f9 fe60 	bl	8000e80 <printTemplate>
 80071c0:	e026      	b.n	8007210 <takeWifiSSID+0x1fc>
            	} else if(page == 3) {
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d108      	bne.n	80071da <takeWifiSSID+0x1c6>
            		cursorPosition = 16;
 80071c8:	2310      	movs	r3, #16
 80071ca:	61fb      	str	r3, [r7, #28]
            		page = 2;
 80071cc:	2302      	movs	r3, #2
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(2, 2);
 80071d0:	2102      	movs	r1, #2
 80071d2:	2002      	movs	r0, #2
 80071d4:	f7f9 fe54 	bl	8000e80 <printTemplate>
 80071d8:	e01a      	b.n	8007210 <takeWifiSSID+0x1fc>
            	} else if(page == 4) {
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d108      	bne.n	80071f2 <takeWifiSSID+0x1de>
            		cursorPosition = 16;
 80071e0:	2310      	movs	r3, #16
 80071e2:	61fb      	str	r3, [r7, #28]
            		page = 3;
 80071e4:	2303      	movs	r3, #3
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(2, 3);
 80071e8:	2103      	movs	r1, #3
 80071ea:	2002      	movs	r0, #2
 80071ec:	f7f9 fe48 	bl	8000e80 <printTemplate>
 80071f0:	e00e      	b.n	8007210 <takeWifiSSID+0x1fc>
            	} else if(page == 5) {
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	2b05      	cmp	r3, #5
 80071f6:	d10b      	bne.n	8007210 <takeWifiSSID+0x1fc>
            		cursorPosition = 16;
 80071f8:	2310      	movs	r3, #16
 80071fa:	61fb      	str	r3, [r7, #28]
            		page = 4;
 80071fc:	2304      	movs	r3, #4
 80071fe:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(2, 4);
 8007200:	2104      	movs	r1, #4
 8007202:	2002      	movs	r0, #2
 8007204:	f7f9 fe3c 	bl	8000e80 <printTemplate>
 8007208:	e002      	b.n	8007210 <takeWifiSSID+0x1fc>
            	}
            } else {
            	cursorPosition--;
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	3b01      	subs	r3, #1
 800720e:	61fb      	str	r3, [r7, #28]
            }

            HAL_Delay(150);
 8007210:	2096      	movs	r0, #150	; 0x96
 8007212:	f001 fc2b 	bl	8008a6c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007216:	2102      	movs	r1, #2
 8007218:	4832      	ldr	r0, [pc, #200]	; (80072e4 <takeWifiSSID+0x2d0>)
 800721a:	f002 f9f7 	bl	800960c <HAL_GPIO_ReadPin>
 800721e:	4603      	mov	r3, r0
 8007220:	2b01      	cmp	r3, #1
 8007222:	d131      	bne.n	8007288 <takeWifiSSID+0x274>
        	//wifiSSID[arrayPosition] = charactersArray[cursorPosition - 1];
            //wifiSSIDInt[arrayPosition] = cursorPosition - 1;
        	inputWifiSSID[arrayPosition] = cursorPosition - 1;
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	3b01      	subs	r3, #1
 800722a:	b2d9      	uxtb	r1, r3
 800722c:	463a      	mov	r2, r7
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	4413      	add	r3, r2
 8007232:	460a      	mov	r2, r1
 8007234:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition - 1;
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	3b01      	subs	r3, #1
 800723c:	b2d9      	uxtb	r1, r3
 800723e:	4a2d      	ldr	r2, [pc, #180]	; (80072f4 <takeWifiSSID+0x2e0>)
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	4413      	add	r3, r2
 8007244:	460a      	mov	r2, r1
 8007246:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[arrayPosition]);
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	b2d9      	uxtb	r1, r3
 800724c:	4a26      	ldr	r2, [pc, #152]	; (80072e8 <takeWifiSSID+0x2d4>)
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	4413      	add	r3, r2
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	461a      	mov	r2, r3
 8007256:	2001      	movs	r0, #1
 8007258:	f000 fec7 	bl	8007fea <lcd_print_char>

            writeLoc++;
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	3301      	adds	r3, #1
 8007260:	623b      	str	r3, [r7, #32]
            arrayPosition++;
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	3301      	adds	r3, #1
 8007266:	61bb      	str	r3, [r7, #24]
            eepromVal++;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	3301      	adds	r3, #1
 800726c:	617b      	str	r3, [r7, #20]

            //wifiSSID[arrayPosition] = '\0';
            //wifiSSIDInt[arrayPosition] = '\0';
            inputWifiSSID[arrayPosition] = '\0';
 800726e:	463a      	mov	r2, r7
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	4413      	add	r3, r2
 8007274:	2200      	movs	r2, #0
 8007276:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 8007278:	4a1e      	ldr	r2, [pc, #120]	; (80072f4 <takeWifiSSID+0x2e0>)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	4413      	add	r3, r2
 800727e:	2200      	movs	r2, #0
 8007280:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007282:	2096      	movs	r0, #150	; 0x96
 8007284:	f001 fbf2 	bl	8008a6c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007288:	2104      	movs	r1, #4
 800728a:	4816      	ldr	r0, [pc, #88]	; (80072e4 <takeWifiSSID+0x2d0>)
 800728c:	f002 f9be 	bl	800960c <HAL_GPIO_ReadPin>
 8007290:	4603      	mov	r3, r0
 8007292:	2b01      	cmp	r3, #1
 8007294:	d14a      	bne.n	800732c <takeWifiSSID+0x318>
        	if(strlen(wifiSSID) >= 1) {
 8007296:	4b14      	ldr	r3, [pc, #80]	; (80072e8 <takeWifiSSID+0x2d4>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d043      	beq.n	8007326 <takeWifiSSID+0x312>
        		//wifiSSID[arrayPosition] = '\0';
        		//wifiSSIDInt[arrayPosition] = '\0';
        		inputWifiSSID[arrayPosition] = '\0';
 800729e:	463a      	mov	r2, r7
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	4413      	add	r3, r2
 80072a4:	2200      	movs	r2, #0
 80072a6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 80072a8:	4a12      	ldr	r2, [pc, #72]	; (80072f4 <takeWifiSSID+0x2e0>)
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	4413      	add	r3, r2
 80072ae:	2200      	movs	r2, #0
 80072b0:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	2b07      	cmp	r3, #7
 80072b6:	dd03      	ble.n	80072c0 <takeWifiSSID+0x2ac>
        			writeLoc--;
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	623b      	str	r3, [r7, #32]
 80072be:	e004      	b.n	80072ca <takeWifiSSID+0x2b6>
        		} else if(writeLoc < 7) {
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	2b06      	cmp	r3, #6
 80072c4:	dc01      	bgt.n	80072ca <takeWifiSSID+0x2b6>
        			writeLoc = 7;
 80072c6:	2307      	movs	r3, #7
 80072c8:	623b      	str	r3, [r7, #32]
        		}

        		if(arrayPosition > 0) {
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dd17      	ble.n	8007300 <takeWifiSSID+0x2ec>
        			arrayPosition--;
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	61bb      	str	r3, [r7, #24]
        			eepromVal--;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	3b01      	subs	r3, #1
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	e018      	b.n	8007310 <takeWifiSSID+0x2fc>
 80072de:	bf00      	nop
 80072e0:	20000008 	.word	0x20000008
 80072e4:	40010800 	.word	0x40010800
 80072e8:	2000019c 	.word	0x2000019c
 80072ec:	0800df60 	.word	0x0800df60
 80072f0:	0800df74 	.word	0x0800df74
 80072f4:	20000118 	.word	0x20000118
 80072f8:	200003a8 	.word	0x200003a8
 80072fc:	40011000 	.word	0x40011000
        		} else if(arrayPosition < 0) {
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	2b00      	cmp	r3, #0
 8007304:	da04      	bge.n	8007310 <takeWifiSSID+0x2fc>
        			arrayPosition = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	61bb      	str	r3, [r7, #24]
        			eepromVal = ssidStartPos;
 800730a:	4b0e      	ldr	r3, [pc, #56]	; (8007344 <takeWifiSSID+0x330>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	617b      	str	r3, [r7, #20]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	3306      	adds	r3, #6
 8007316:	b2db      	uxtb	r3, r3
 8007318:	4619      	mov	r1, r3
 800731a:	2001      	movs	r0, #1
 800731c:	f000 fe86 	bl	800802c <lcd_delete_char>
        		HAL_Delay(50);
 8007320:	2032      	movs	r0, #50	; 0x32
 8007322:	f001 fba3 	bl	8008a6c <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007326:	2096      	movs	r0, #150	; 0x96
 8007328:	f001 fba0 	bl	8008a6c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	4619      	mov	r1, r3
 8007332:	2002      	movs	r0, #2
 8007334:	f000 fe25 	bl	8007f82 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007338:	e687      	b.n	800704a <takeWifiSSID+0x36>
    }
}
 800733a:	bf00      	nop
 800733c:	3728      	adds	r7, #40	; 0x28
 800733e:	46bd      	mov	sp, r7
 8007340:	bdb0      	pop	{r4, r5, r7, pc}
 8007342:	bf00      	nop
 8007344:	20000008 	.word	0x20000008

08007348 <takeWifiSSIDT>:

void takeWifiSSIDT(uint8_t *inputArr) {
 8007348:	b580      	push	{r7, lr}
 800734a:	b08c      	sub	sp, #48	; 0x30
 800734c:	af04      	add	r7, sp, #16
 800734e:	6078      	str	r0, [r7, #4]
	mainSSIDSection:

    lcd_cursor(1);
 8007350:	2001      	movs	r0, #1
 8007352:	f000 fe93 	bl	800807c <lcd_cursor>

    resetEEPROM4Wifi(2);
 8007356:	2002      	movs	r0, #2
 8007358:	f7f9 fa76 	bl	8000848 <resetEEPROM4Wifi>
    HAL_Delay(100);
 800735c:	2064      	movs	r0, #100	; 0x64
 800735e:	f001 fb85 	bl	8008a6c <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007362:	2301      	movs	r3, #1
 8007364:	61fb      	str	r3, [r7, #28]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007366:	2307      	movs	r3, #7
 8007368:	61bb      	str	r3, [r7, #24]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800736a:	2301      	movs	r3, #1
 800736c:	617b      	str	r3, [r7, #20]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800736e:	2300      	movs	r3, #0
 8007370:	613b      	str	r3, [r7, #16]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007372:	4ba6      	ldr	r3, [pc, #664]	; (800760c <takeWifiSSIDT+0x2c4>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8007378:	2101      	movs	r1, #1
 800737a:	2002      	movs	r0, #2
 800737c:	f7f9 fd80 	bl	8000e80 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007380:	2108      	movs	r1, #8
 8007382:	48a3      	ldr	r0, [pc, #652]	; (8007610 <takeWifiSSIDT+0x2c8>)
 8007384:	f002 f942 	bl	800960c <HAL_GPIO_ReadPin>
 8007388:	4603      	mov	r3, r0
 800738a:	2b01      	cmp	r3, #1
 800738c:	d134      	bne.n	80073f8 <takeWifiSSIDT+0xb0>
            lcd_cursor(0);
 800738e:	2000      	movs	r0, #0
 8007390:	f000 fe74 	bl	800807c <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8007394:	489f      	ldr	r0, [pc, #636]	; (8007614 <takeWifiSSIDT+0x2cc>)
 8007396:	f7f8 ff45 	bl	8000224 <strlen>
 800739a:	4603      	mov	r3, r0
 800739c:	2b14      	cmp	r3, #20
 800739e:	d910      	bls.n	80073c2 <takeWifiSSIDT+0x7a>
                lcd_clear();
 80073a0:	f000 fe3a 	bl	8008018 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80073a4:	4a9c      	ldr	r2, [pc, #624]	; (8007618 <takeWifiSSIDT+0x2d0>)
 80073a6:	2101      	movs	r1, #1
 80073a8:	2001      	movs	r0, #1
 80073aa:	f000 fe09 	bl	8007fc0 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 80073ae:	4a9b      	ldr	r2, [pc, #620]	; (800761c <takeWifiSSIDT+0x2d4>)
 80073b0:	2101      	movs	r1, #1
 80073b2:	2002      	movs	r0, #2
 80073b4:	f000 fe04 	bl	8007fc0 <lcd_print>
                HAL_Delay(1250);
 80073b8:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80073bc:	f001 fb56 	bl	8008a6c <HAL_Delay>
                goto mainSSIDSection;
 80073c0:	e7c6      	b.n	8007350 <takeWifiSSIDT+0x8>
            } else {
            	memcpy(inputArr, &eepromData[ssidStartPos], wifiCharacterLimit);
 80073c2:	4b92      	ldr	r3, [pc, #584]	; (800760c <takeWifiSSIDT+0x2c4>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a96      	ldr	r2, [pc, #600]	; (8007620 <takeWifiSSIDT+0x2d8>)
 80073c8:	4413      	add	r3, r2
 80073ca:	2214      	movs	r2, #20
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f005 fab4 	bl	800c93c <memcpy>

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80073d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80073d8:	9302      	str	r3, [sp, #8]
 80073da:	236e      	movs	r3, #110	; 0x6e
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	4b90      	ldr	r3, [pc, #576]	; (8007620 <takeWifiSSIDT+0x2d8>)
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	236e      	movs	r3, #110	; 0x6e
 80073e4:	2200      	movs	r2, #0
 80073e6:	21a0      	movs	r1, #160	; 0xa0
 80073e8:	488e      	ldr	r0, [pc, #568]	; (8007624 <takeWifiSSIDT+0x2dc>)
 80073ea:	f002 fbc9 	bl	8009b80 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80073ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073f2:	f001 fb3b 	bl	8008a6c <HAL_Delay>

            	break;
 80073f6:	e136      	b.n	8007666 <takeWifiSSIDT+0x31e>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80073f8:	2101      	movs	r1, #1
 80073fa:	4885      	ldr	r0, [pc, #532]	; (8007610 <takeWifiSSIDT+0x2c8>)
 80073fc:	f002 f906 	bl	800960c <HAL_GPIO_ReadPin>
 8007400:	4603      	mov	r3, r0
 8007402:	2b01      	cmp	r3, #1
 8007404:	d14d      	bne.n	80074a2 <takeWifiSSIDT+0x15a>
        	if(cursorPosition > 80) {
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b50      	cmp	r3, #80	; 0x50
 800740a:	dd01      	ble.n	8007410 <takeWifiSSIDT+0xc8>
        		cursorPosition = 1;
 800740c:	2301      	movs	r3, #1
 800740e:	617b      	str	r3, [r7, #20]
        	}

            if (cursorPosition == 16) {
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2b10      	cmp	r3, #16
 8007414:	d13f      	bne.n	8007496 <takeWifiSSIDT+0x14e>
            	if(page == 1) {
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d109      	bne.n	8007430 <takeWifiSSIDT+0xe8>
            		cursorPosition = 1;
 800741c:	2301      	movs	r3, #1
 800741e:	617b      	str	r3, [r7, #20]
            		page++;
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	3301      	adds	r3, #1
 8007424:	61fb      	str	r3, [r7, #28]
            		printTemplate(2, 2);
 8007426:	2102      	movs	r1, #2
 8007428:	2002      	movs	r0, #2
 800742a:	f7f9 fd29 	bl	8000e80 <printTemplate>
 800742e:	e035      	b.n	800749c <takeWifiSSIDT+0x154>
            	} else if(page == 2) {
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2b02      	cmp	r3, #2
 8007434:	d109      	bne.n	800744a <takeWifiSSIDT+0x102>
            		cursorPosition = 1;
 8007436:	2301      	movs	r3, #1
 8007438:	617b      	str	r3, [r7, #20]
            		page++;
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	3301      	adds	r3, #1
 800743e:	61fb      	str	r3, [r7, #28]
            		printTemplate(2, 3);
 8007440:	2103      	movs	r1, #3
 8007442:	2002      	movs	r0, #2
 8007444:	f7f9 fd1c 	bl	8000e80 <printTemplate>
 8007448:	e028      	b.n	800749c <takeWifiSSIDT+0x154>
            	} else if(page == 3) {
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	2b03      	cmp	r3, #3
 800744e:	d109      	bne.n	8007464 <takeWifiSSIDT+0x11c>
            		cursorPosition = 1;
 8007450:	2301      	movs	r3, #1
 8007452:	617b      	str	r3, [r7, #20]
            		page++;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	3301      	adds	r3, #1
 8007458:	61fb      	str	r3, [r7, #28]
            		printTemplate(2, 4);
 800745a:	2104      	movs	r1, #4
 800745c:	2002      	movs	r0, #2
 800745e:	f7f9 fd0f 	bl	8000e80 <printTemplate>
 8007462:	e01b      	b.n	800749c <takeWifiSSIDT+0x154>
            	} else if(page == 4) {
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	2b04      	cmp	r3, #4
 8007468:	d109      	bne.n	800747e <takeWifiSSIDT+0x136>
            		cursorPosition = 1;
 800746a:	2301      	movs	r3, #1
 800746c:	617b      	str	r3, [r7, #20]
            		page++;
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	3301      	adds	r3, #1
 8007472:	61fb      	str	r3, [r7, #28]
            		printTemplate(2, 5);
 8007474:	2105      	movs	r1, #5
 8007476:	2002      	movs	r0, #2
 8007478:	f7f9 fd02 	bl	8000e80 <printTemplate>
 800747c:	e00e      	b.n	800749c <takeWifiSSIDT+0x154>
            	} else if(page == 5) {
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	2b05      	cmp	r3, #5
 8007482:	d10b      	bne.n	800749c <takeWifiSSIDT+0x154>
            		cursorPosition = 1;
 8007484:	2301      	movs	r3, #1
 8007486:	617b      	str	r3, [r7, #20]
            		page = 1;
 8007488:	2301      	movs	r3, #1
 800748a:	61fb      	str	r3, [r7, #28]
            		printTemplate(2, 1);
 800748c:	2101      	movs	r1, #1
 800748e:	2002      	movs	r0, #2
 8007490:	f7f9 fcf6 	bl	8000e80 <printTemplate>
 8007494:	e002      	b.n	800749c <takeWifiSSIDT+0x154>
            	}
            } else {
            	cursorPosition++;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	3301      	adds	r3, #1
 800749a:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(150);
 800749c:	2096      	movs	r0, #150	; 0x96
 800749e:	f001 fae5 	bl	8008a6c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80074a2:	2108      	movs	r1, #8
 80074a4:	4860      	ldr	r0, [pc, #384]	; (8007628 <takeWifiSSIDT+0x2e0>)
 80074a6:	f002 f8b1 	bl	800960c <HAL_GPIO_ReadPin>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d149      	bne.n	8007544 <takeWifiSSIDT+0x1fc>
        	if(cursorPosition < 1) {
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	dc01      	bgt.n	80074ba <takeWifiSSIDT+0x172>
        		cursorPosition = 80;
 80074b6:	2350      	movs	r3, #80	; 0x50
 80074b8:	617b      	str	r3, [r7, #20]
        	}

            if(cursorPosition == 1) {
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d13b      	bne.n	8007538 <takeWifiSSIDT+0x1f0>
            	if(page == 1) {
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d108      	bne.n	80074d8 <takeWifiSSIDT+0x190>
            		cursorPosition = 16;
 80074c6:	2310      	movs	r3, #16
 80074c8:	617b      	str	r3, [r7, #20]
            		page = 5;
 80074ca:	2305      	movs	r3, #5
 80074cc:	61fb      	str	r3, [r7, #28]
            		printTemplate(2, 5);
 80074ce:	2105      	movs	r1, #5
 80074d0:	2002      	movs	r0, #2
 80074d2:	f7f9 fcd5 	bl	8000e80 <printTemplate>
 80074d6:	e032      	b.n	800753e <takeWifiSSIDT+0x1f6>
            	} else if(page == 2) {
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d108      	bne.n	80074f0 <takeWifiSSIDT+0x1a8>
            		cursorPosition = 16;
 80074de:	2310      	movs	r3, #16
 80074e0:	617b      	str	r3, [r7, #20]
            		page = 1;
 80074e2:	2301      	movs	r3, #1
 80074e4:	61fb      	str	r3, [r7, #28]
            		printTemplate(2, 1);
 80074e6:	2101      	movs	r1, #1
 80074e8:	2002      	movs	r0, #2
 80074ea:	f7f9 fcc9 	bl	8000e80 <printTemplate>
 80074ee:	e026      	b.n	800753e <takeWifiSSIDT+0x1f6>
            	} else if(page == 3) {
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d108      	bne.n	8007508 <takeWifiSSIDT+0x1c0>
            		cursorPosition = 16;
 80074f6:	2310      	movs	r3, #16
 80074f8:	617b      	str	r3, [r7, #20]
            		page = 2;
 80074fa:	2302      	movs	r3, #2
 80074fc:	61fb      	str	r3, [r7, #28]
            		printTemplate(2, 2);
 80074fe:	2102      	movs	r1, #2
 8007500:	2002      	movs	r0, #2
 8007502:	f7f9 fcbd 	bl	8000e80 <printTemplate>
 8007506:	e01a      	b.n	800753e <takeWifiSSIDT+0x1f6>
            	} else if(page == 4) {
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	2b04      	cmp	r3, #4
 800750c:	d108      	bne.n	8007520 <takeWifiSSIDT+0x1d8>
            		cursorPosition = 16;
 800750e:	2310      	movs	r3, #16
 8007510:	617b      	str	r3, [r7, #20]
            		page = 3;
 8007512:	2303      	movs	r3, #3
 8007514:	61fb      	str	r3, [r7, #28]
            		printTemplate(2, 3);
 8007516:	2103      	movs	r1, #3
 8007518:	2002      	movs	r0, #2
 800751a:	f7f9 fcb1 	bl	8000e80 <printTemplate>
 800751e:	e00e      	b.n	800753e <takeWifiSSIDT+0x1f6>
            	} else if(page == 5) {
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	2b05      	cmp	r3, #5
 8007524:	d10b      	bne.n	800753e <takeWifiSSIDT+0x1f6>
            		cursorPosition = 16;
 8007526:	2310      	movs	r3, #16
 8007528:	617b      	str	r3, [r7, #20]
            		page = 4;
 800752a:	2304      	movs	r3, #4
 800752c:	61fb      	str	r3, [r7, #28]
            		printTemplate(2, 4);
 800752e:	2104      	movs	r1, #4
 8007530:	2002      	movs	r0, #2
 8007532:	f7f9 fca5 	bl	8000e80 <printTemplate>
 8007536:	e002      	b.n	800753e <takeWifiSSIDT+0x1f6>
            	}
            } else {
            	cursorPosition--;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	3b01      	subs	r3, #1
 800753c:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(150);
 800753e:	2096      	movs	r0, #150	; 0x96
 8007540:	f001 fa94 	bl	8008a6c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007544:	2102      	movs	r1, #2
 8007546:	4832      	ldr	r0, [pc, #200]	; (8007610 <takeWifiSSIDT+0x2c8>)
 8007548:	f002 f860 	bl	800960c <HAL_GPIO_ReadPin>
 800754c:	4603      	mov	r3, r0
 800754e:	2b01      	cmp	r3, #1
 8007550:	d130      	bne.n	80075b4 <takeWifiSSIDT+0x26c>
        	//wifiSSID[arrayPosition] = charactersArray[cursorPosition - 1];
            //wifiSSIDInt[arrayPosition] = cursorPosition - 1;
        	inputArr[arrayPosition] = cursorPosition - 1;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	b2da      	uxtb	r2, r3
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	6879      	ldr	r1, [r7, #4]
 800755a:	440b      	add	r3, r1
 800755c:	3a01      	subs	r2, #1
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition - 1;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	b2db      	uxtb	r3, r3
 8007566:	3b01      	subs	r3, #1
 8007568:	b2d9      	uxtb	r1, r3
 800756a:	4a2d      	ldr	r2, [pc, #180]	; (8007620 <takeWifiSSIDT+0x2d8>)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4413      	add	r3, r2
 8007570:	460a      	mov	r2, r1
 8007572:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[arrayPosition]);
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	b2d9      	uxtb	r1, r3
 8007578:	4a26      	ldr	r2, [pc, #152]	; (8007614 <takeWifiSSIDT+0x2cc>)
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	4413      	add	r3, r2
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	2001      	movs	r0, #1
 8007584:	f000 fd31 	bl	8007fea <lcd_print_char>

            writeLoc++;
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	3301      	adds	r3, #1
 800758c:	61bb      	str	r3, [r7, #24]
            arrayPosition++;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	3301      	adds	r3, #1
 8007592:	613b      	str	r3, [r7, #16]
            eepromVal++;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3301      	adds	r3, #1
 8007598:	60fb      	str	r3, [r7, #12]

            //wifiSSID[arrayPosition] = '\0';
            //wifiSSIDInt[arrayPosition] = '\0';
            inputArr[arrayPosition] = '\0';
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	4413      	add	r3, r2
 80075a0:	2200      	movs	r2, #0
 80075a2:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 80075a4:	4a1e      	ldr	r2, [pc, #120]	; (8007620 <takeWifiSSIDT+0x2d8>)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	2200      	movs	r2, #0
 80075ac:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80075ae:	2096      	movs	r0, #150	; 0x96
 80075b0:	f001 fa5c 	bl	8008a6c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80075b4:	2104      	movs	r1, #4
 80075b6:	4816      	ldr	r0, [pc, #88]	; (8007610 <takeWifiSSIDT+0x2c8>)
 80075b8:	f002 f828 	bl	800960c <HAL_GPIO_ReadPin>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d14a      	bne.n	8007658 <takeWifiSSIDT+0x310>
        	if(strlen(wifiSSID) >= 1) {
 80075c2:	4b14      	ldr	r3, [pc, #80]	; (8007614 <takeWifiSSIDT+0x2cc>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d043      	beq.n	8007652 <takeWifiSSIDT+0x30a>
        		//wifiSSID[arrayPosition] = '\0';
        		//wifiSSIDInt[arrayPosition] = '\0';
        		inputArr[arrayPosition] = '\0';
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	4413      	add	r3, r2
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 80075d4:	4a12      	ldr	r2, [pc, #72]	; (8007620 <takeWifiSSIDT+0x2d8>)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4413      	add	r3, r2
 80075da:	2200      	movs	r2, #0
 80075dc:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2b07      	cmp	r3, #7
 80075e2:	dd03      	ble.n	80075ec <takeWifiSSIDT+0x2a4>
        			writeLoc--;
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	61bb      	str	r3, [r7, #24]
 80075ea:	e004      	b.n	80075f6 <takeWifiSSIDT+0x2ae>
        		} else if(writeLoc < 7) {
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b06      	cmp	r3, #6
 80075f0:	dc01      	bgt.n	80075f6 <takeWifiSSIDT+0x2ae>
        			writeLoc = 7;
 80075f2:	2307      	movs	r3, #7
 80075f4:	61bb      	str	r3, [r7, #24]
        		}

        		if(arrayPosition > 0) {
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	dd17      	ble.n	800762c <takeWifiSSIDT+0x2e4>
        			arrayPosition--;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	3b01      	subs	r3, #1
 8007600:	613b      	str	r3, [r7, #16]
        			eepromVal--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3b01      	subs	r3, #1
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	e018      	b.n	800763c <takeWifiSSIDT+0x2f4>
 800760a:	bf00      	nop
 800760c:	20000008 	.word	0x20000008
 8007610:	40010800 	.word	0x40010800
 8007614:	2000019c 	.word	0x2000019c
 8007618:	0800df60 	.word	0x0800df60
 800761c:	0800df74 	.word	0x0800df74
 8007620:	20000118 	.word	0x20000118
 8007624:	200003a8 	.word	0x200003a8
 8007628:	40011000 	.word	0x40011000
        		} else if(arrayPosition < 0) {
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	da04      	bge.n	800763c <takeWifiSSIDT+0x2f4>
        			arrayPosition = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	613b      	str	r3, [r7, #16]
        			eepromVal = ssidStartPos;
 8007636:	4b0e      	ldr	r3, [pc, #56]	; (8007670 <takeWifiSSIDT+0x328>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	60fb      	str	r3, [r7, #12]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	b2db      	uxtb	r3, r3
 8007640:	3306      	adds	r3, #6
 8007642:	b2db      	uxtb	r3, r3
 8007644:	4619      	mov	r1, r3
 8007646:	2001      	movs	r0, #1
 8007648:	f000 fcf0 	bl	800802c <lcd_delete_char>
        		HAL_Delay(50);
 800764c:	2032      	movs	r0, #50	; 0x32
 800764e:	f001 fa0d 	bl	8008a6c <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007652:	2096      	movs	r0, #150	; 0x96
 8007654:	f001 fa0a 	bl	8008a6c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	4619      	mov	r1, r3
 800765e:	2002      	movs	r0, #2
 8007660:	f000 fc8f 	bl	8007f82 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007664:	e68c      	b.n	8007380 <takeWifiSSIDT+0x38>
    }
}
 8007666:	bf00      	nop
 8007668:	3720      	adds	r7, #32
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000008 	.word	0x20000008

08007674 <takeWifiPass>:

void takeWifiPass() {
 8007674:	b5b0      	push	{r4, r5, r7, lr}
 8007676:	b08e      	sub	sp, #56	; 0x38
 8007678:	af04      	add	r7, sp, #16
	mainPASSSection:

    lcd_cursor(1);
 800767a:	2001      	movs	r0, #1
 800767c:	f000 fcfe 	bl	800807c <lcd_cursor>

    uint8_t inputWifiPass[wifiCharacterLimit];

    resetEEPROM4Wifi(3);
 8007680:	2003      	movs	r0, #3
 8007682:	f7f9 f8e1 	bl	8000848 <resetEEPROM4Wifi>
    HAL_Delay(100);
 8007686:	2064      	movs	r0, #100	; 0x64
 8007688:	f001 f9f0 	bl	8008a6c <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800768c:	2301      	movs	r3, #1
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
    int writeLoc = 7; //seçilen karakterlerin yazılacağı başlangıç karakteri
 8007690:	2307      	movs	r3, #7
 8007692:	623b      	str	r3, [r7, #32]

    int cursorPosition = 1; //kullanıcının seçim yaparken kullandığı işaretçi değişkeni
 8007694:	2301      	movs	r3, #1
 8007696:	61fb      	str	r3, [r7, #28]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarmak için kullanılacak olan değişken
 8007698:	2300      	movs	r3, #0
 800769a:	61bb      	str	r3, [r7, #24]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma aktarırken kullanılacak olan değişken
 800769c:	4bae      	ldr	r3, [pc, #696]	; (8007958 <takeWifiPass+0x2e4>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	617b      	str	r3, [r7, #20]

    printTemplate(3, 1);
 80076a2:	2101      	movs	r1, #1
 80076a4:	2003      	movs	r0, #3
 80076a6:	f7f9 fbeb 	bl	8000e80 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80076aa:	2108      	movs	r1, #8
 80076ac:	48ab      	ldr	r0, [pc, #684]	; (800795c <takeWifiPass+0x2e8>)
 80076ae:	f001 ffad 	bl	800960c <HAL_GPIO_ReadPin>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d138      	bne.n	800772a <takeWifiPass+0xb6>
            lcd_cursor(0);
 80076b8:	2000      	movs	r0, #0
 80076ba:	f000 fcdf 	bl	800807c <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 80076be:	48a8      	ldr	r0, [pc, #672]	; (8007960 <takeWifiPass+0x2ec>)
 80076c0:	f7f8 fdb0 	bl	8000224 <strlen>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b14      	cmp	r3, #20
 80076c8:	d910      	bls.n	80076ec <takeWifiPass+0x78>
                lcd_clear();
 80076ca:	f000 fca5 	bl	8008018 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80076ce:	4aa5      	ldr	r2, [pc, #660]	; (8007964 <takeWifiPass+0x2f0>)
 80076d0:	2101      	movs	r1, #1
 80076d2:	2001      	movs	r0, #1
 80076d4:	f000 fc74 	bl	8007fc0 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80076d8:	4aa3      	ldr	r2, [pc, #652]	; (8007968 <takeWifiPass+0x2f4>)
 80076da:	2101      	movs	r1, #1
 80076dc:	2002      	movs	r0, #2
 80076de:	f000 fc6f 	bl	8007fc0 <lcd_print>
                HAL_Delay(1200);
 80076e2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80076e6:	f001 f9c1 	bl	8008a6c <HAL_Delay>
                goto mainPASSSection;
 80076ea:	e7c6      	b.n	800767a <takeWifiPass+0x6>
            } else {
            	memcpy(inputWifiPass, &eepromData[passStartPos], wifiCharacterLimit);
 80076ec:	4b9a      	ldr	r3, [pc, #616]	; (8007958 <takeWifiPass+0x2e4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a9e      	ldr	r2, [pc, #632]	; (800796c <takeWifiPass+0x2f8>)
 80076f2:	4413      	add	r3, r2
 80076f4:	463c      	mov	r4, r7
 80076f6:	461d      	mov	r5, r3
 80076f8:	6828      	ldr	r0, [r5, #0]
 80076fa:	6869      	ldr	r1, [r5, #4]
 80076fc:	68aa      	ldr	r2, [r5, #8]
 80076fe:	68eb      	ldr	r3, [r5, #12]
 8007700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007702:	6928      	ldr	r0, [r5, #16]
 8007704:	6020      	str	r0, [r4, #0]

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007706:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800770a:	9302      	str	r3, [sp, #8]
 800770c:	236e      	movs	r3, #110	; 0x6e
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	4b96      	ldr	r3, [pc, #600]	; (800796c <takeWifiPass+0x2f8>)
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	236e      	movs	r3, #110	; 0x6e
 8007716:	2200      	movs	r2, #0
 8007718:	21a0      	movs	r1, #160	; 0xa0
 800771a:	4895      	ldr	r0, [pc, #596]	; (8007970 <takeWifiPass+0x2fc>)
 800771c:	f002 fa30 	bl	8009b80 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007724:	f001 f9a2 	bl	8008a6c <HAL_Delay>

            	break;
 8007728:	e111      	b.n	800794e <takeWifiPass+0x2da>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800772a:	2101      	movs	r1, #1
 800772c:	488b      	ldr	r0, [pc, #556]	; (800795c <takeWifiPass+0x2e8>)
 800772e:	f001 ff6d 	bl	800960c <HAL_GPIO_ReadPin>
 8007732:	4603      	mov	r3, r0
 8007734:	2b01      	cmp	r3, #1
 8007736:	d14d      	bne.n	80077d4 <takeWifiPass+0x160>
        	if(cursorPosition > 80) {
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	2b50      	cmp	r3, #80	; 0x50
 800773c:	dd01      	ble.n	8007742 <takeWifiPass+0xce>
        	    cursorPosition = 1;
 800773e:	2301      	movs	r3, #1
 8007740:	61fb      	str	r3, [r7, #28]
        	}

            if (cursorPosition == 16) {
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	2b10      	cmp	r3, #16
 8007746:	d13f      	bne.n	80077c8 <takeWifiPass+0x154>
            	if(page == 1) {
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	2b01      	cmp	r3, #1
 800774c:	d109      	bne.n	8007762 <takeWifiPass+0xee>
            		cursorPosition = 1;
 800774e:	2301      	movs	r3, #1
 8007750:	61fb      	str	r3, [r7, #28]
            		page++;
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	3301      	adds	r3, #1
 8007756:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(3, 2);
 8007758:	2102      	movs	r1, #2
 800775a:	2003      	movs	r0, #3
 800775c:	f7f9 fb90 	bl	8000e80 <printTemplate>
 8007760:	e035      	b.n	80077ce <takeWifiPass+0x15a>
            	} else if(page == 2) {
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	2b02      	cmp	r3, #2
 8007766:	d109      	bne.n	800777c <takeWifiPass+0x108>
            		cursorPosition = 1;
 8007768:	2301      	movs	r3, #1
 800776a:	61fb      	str	r3, [r7, #28]
            		page++;
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	3301      	adds	r3, #1
 8007770:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(3, 3);
 8007772:	2103      	movs	r1, #3
 8007774:	2003      	movs	r0, #3
 8007776:	f7f9 fb83 	bl	8000e80 <printTemplate>
 800777a:	e028      	b.n	80077ce <takeWifiPass+0x15a>
            	} else if(page == 3) {
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	2b03      	cmp	r3, #3
 8007780:	d109      	bne.n	8007796 <takeWifiPass+0x122>
            		cursorPosition = 1;
 8007782:	2301      	movs	r3, #1
 8007784:	61fb      	str	r3, [r7, #28]
            		page++;
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	3301      	adds	r3, #1
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(3, 4);
 800778c:	2104      	movs	r1, #4
 800778e:	2003      	movs	r0, #3
 8007790:	f7f9 fb76 	bl	8000e80 <printTemplate>
 8007794:	e01b      	b.n	80077ce <takeWifiPass+0x15a>
            	} else if(page == 4) {
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	2b04      	cmp	r3, #4
 800779a:	d109      	bne.n	80077b0 <takeWifiPass+0x13c>
            		cursorPosition = 1;
 800779c:	2301      	movs	r3, #1
 800779e:	61fb      	str	r3, [r7, #28]
            		page++;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	3301      	adds	r3, #1
 80077a4:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(3, 5);
 80077a6:	2105      	movs	r1, #5
 80077a8:	2003      	movs	r0, #3
 80077aa:	f7f9 fb69 	bl	8000e80 <printTemplate>
 80077ae:	e00e      	b.n	80077ce <takeWifiPass+0x15a>
            	} else if(page == 5) {
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	2b05      	cmp	r3, #5
 80077b4:	d10b      	bne.n	80077ce <takeWifiPass+0x15a>
            		cursorPosition = 1;
 80077b6:	2301      	movs	r3, #1
 80077b8:	61fb      	str	r3, [r7, #28]
            		page = 1;
 80077ba:	2301      	movs	r3, #1
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(3, 1);
 80077be:	2101      	movs	r1, #1
 80077c0:	2003      	movs	r0, #3
 80077c2:	f7f9 fb5d 	bl	8000e80 <printTemplate>
 80077c6:	e002      	b.n	80077ce <takeWifiPass+0x15a>
            	}
            } else {
            	cursorPosition++;
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	3301      	adds	r3, #1
 80077cc:	61fb      	str	r3, [r7, #28]
            }

            HAL_Delay(150);
 80077ce:	2096      	movs	r0, #150	; 0x96
 80077d0:	f001 f94c 	bl	8008a6c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80077d4:	2108      	movs	r1, #8
 80077d6:	4867      	ldr	r0, [pc, #412]	; (8007974 <takeWifiPass+0x300>)
 80077d8:	f001 ff18 	bl	800960c <HAL_GPIO_ReadPin>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d149      	bne.n	8007876 <takeWifiPass+0x202>
        	if(cursorPosition < 1) {
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	dc01      	bgt.n	80077ec <takeWifiPass+0x178>
        	    cursorPosition = 80;
 80077e8:	2350      	movs	r3, #80	; 0x50
 80077ea:	61fb      	str	r3, [r7, #28]
        	}

            if(cursorPosition == 1) {
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d13b      	bne.n	800786a <takeWifiPass+0x1f6>
            	if(page == 1) {
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d108      	bne.n	800780a <takeWifiPass+0x196>
            		cursorPosition = 16;
 80077f8:	2310      	movs	r3, #16
 80077fa:	61fb      	str	r3, [r7, #28]
            		page = 5;
 80077fc:	2305      	movs	r3, #5
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(3, 5);
 8007800:	2105      	movs	r1, #5
 8007802:	2003      	movs	r0, #3
 8007804:	f7f9 fb3c 	bl	8000e80 <printTemplate>
 8007808:	e032      	b.n	8007870 <takeWifiPass+0x1fc>
            	} else if(page == 2) {
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	2b02      	cmp	r3, #2
 800780e:	d108      	bne.n	8007822 <takeWifiPass+0x1ae>
            		cursorPosition = 16;
 8007810:	2310      	movs	r3, #16
 8007812:	61fb      	str	r3, [r7, #28]
            		page = 1;
 8007814:	2301      	movs	r3, #1
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(3, 1);
 8007818:	2101      	movs	r1, #1
 800781a:	2003      	movs	r0, #3
 800781c:	f7f9 fb30 	bl	8000e80 <printTemplate>
 8007820:	e026      	b.n	8007870 <takeWifiPass+0x1fc>
            	} else if(page == 3) {
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	2b03      	cmp	r3, #3
 8007826:	d108      	bne.n	800783a <takeWifiPass+0x1c6>
            		cursorPosition = 16;
 8007828:	2310      	movs	r3, #16
 800782a:	61fb      	str	r3, [r7, #28]
            		page = 2;
 800782c:	2302      	movs	r3, #2
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(3, 2);
 8007830:	2102      	movs	r1, #2
 8007832:	2003      	movs	r0, #3
 8007834:	f7f9 fb24 	bl	8000e80 <printTemplate>
 8007838:	e01a      	b.n	8007870 <takeWifiPass+0x1fc>
            	} else if(page == 4) {
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	2b04      	cmp	r3, #4
 800783e:	d108      	bne.n	8007852 <takeWifiPass+0x1de>
            		cursorPosition = 16;
 8007840:	2310      	movs	r3, #16
 8007842:	61fb      	str	r3, [r7, #28]
            		page = 3;
 8007844:	2303      	movs	r3, #3
 8007846:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(3, 3);
 8007848:	2103      	movs	r1, #3
 800784a:	2003      	movs	r0, #3
 800784c:	f7f9 fb18 	bl	8000e80 <printTemplate>
 8007850:	e00e      	b.n	8007870 <takeWifiPass+0x1fc>
            	} else if(page == 5) {
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	2b05      	cmp	r3, #5
 8007856:	d10b      	bne.n	8007870 <takeWifiPass+0x1fc>
            		cursorPosition = 16;
 8007858:	2310      	movs	r3, #16
 800785a:	61fb      	str	r3, [r7, #28]
            		page = 4;
 800785c:	2304      	movs	r3, #4
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
            		printTemplate(3, 4);
 8007860:	2104      	movs	r1, #4
 8007862:	2003      	movs	r0, #3
 8007864:	f7f9 fb0c 	bl	8000e80 <printTemplate>
 8007868:	e002      	b.n	8007870 <takeWifiPass+0x1fc>
            	}
            } else {
            	cursorPosition--;
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	3b01      	subs	r3, #1
 800786e:	61fb      	str	r3, [r7, #28]
            }

            HAL_Delay(150);
 8007870:	2096      	movs	r0, #150	; 0x96
 8007872:	f001 f8fb 	bl	8008a6c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007876:	2102      	movs	r1, #2
 8007878:	4838      	ldr	r0, [pc, #224]	; (800795c <takeWifiPass+0x2e8>)
 800787a:	f001 fec7 	bl	800960c <HAL_GPIO_ReadPin>
 800787e:	4603      	mov	r3, r0
 8007880:	2b01      	cmp	r3, #1
 8007882:	d131      	bne.n	80078e8 <takeWifiPass+0x274>
        	//wifiPass[arrayPos] = charactersArray[cursorPosition - 1];
        	//wifiPassInt[arrayPos] = cursorPosition - 1;
        	inputWifiPass[arrayPos] = cursorPosition - 1;
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	3b01      	subs	r3, #1
 800788a:	b2d9      	uxtb	r1, r3
 800788c:	463a      	mov	r2, r7
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	4413      	add	r3, r2
 8007892:	460a      	mov	r2, r1
 8007894:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromVal] = cursorPosition - 1;
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	b2db      	uxtb	r3, r3
 800789a:	3b01      	subs	r3, #1
 800789c:	b2d9      	uxtb	r1, r3
 800789e:	4a33      	ldr	r2, [pc, #204]	; (800796c <takeWifiPass+0x2f8>)
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	4413      	add	r3, r2
 80078a4:	460a      	mov	r2, r1
 80078a6:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[arrayPos]);
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	b2d9      	uxtb	r1, r3
 80078ac:	4a2c      	ldr	r2, [pc, #176]	; (8007960 <takeWifiPass+0x2ec>)
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	4413      	add	r3, r2
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	461a      	mov	r2, r3
 80078b6:	2001      	movs	r0, #1
 80078b8:	f000 fb97 	bl	8007fea <lcd_print_char>

            writeLoc++;
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	3301      	adds	r3, #1
 80078c0:	623b      	str	r3, [r7, #32]
            arrayPos++;
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	3301      	adds	r3, #1
 80078c6:	61bb      	str	r3, [r7, #24]
            eepromVal++;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	3301      	adds	r3, #1
 80078cc:	617b      	str	r3, [r7, #20]

            //wifiPass[arrayPos] = '\0';
            //wifiPassInt[arrayPos] = '\0';
            inputWifiPass[arrayPos] = '\0';
 80078ce:	463a      	mov	r2, r7
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	4413      	add	r3, r2
 80078d4:	2200      	movs	r2, #0
 80078d6:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 80078d8:	4a24      	ldr	r2, [pc, #144]	; (800796c <takeWifiPass+0x2f8>)
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	4413      	add	r3, r2
 80078de:	2200      	movs	r2, #0
 80078e0:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80078e2:	2096      	movs	r0, #150	; 0x96
 80078e4:	f001 f8c2 	bl	8008a6c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80078e8:	2104      	movs	r1, #4
 80078ea:	481c      	ldr	r0, [pc, #112]	; (800795c <takeWifiPass+0x2e8>)
 80078ec:	f001 fe8e 	bl	800960c <HAL_GPIO_ReadPin>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d124      	bne.n	8007940 <takeWifiPass+0x2cc>
            if(strlen(wifiPass) >= 1) {
 80078f6:	4b1a      	ldr	r3, [pc, #104]	; (8007960 <takeWifiPass+0x2ec>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d01d      	beq.n	800793a <takeWifiPass+0x2c6>
            	//wifiPass[arrayPos] = '\0';
            	//wifiPassInt[arrayPos] = '\0';
            	inputWifiPass[arrayPos] = '\0';
 80078fe:	463a      	mov	r2, r7
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	4413      	add	r3, r2
 8007904:	2200      	movs	r2, #0
 8007906:	701a      	strb	r2, [r3, #0]
            	eepromData[eepromVal] = '\0';
 8007908:	4a18      	ldr	r2, [pc, #96]	; (800796c <takeWifiPass+0x2f8>)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	4413      	add	r3, r2
 800790e:	2200      	movs	r2, #0
 8007910:	701a      	strb	r2, [r3, #0]

            	writeLoc--;
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	3b01      	subs	r3, #1
 8007916:	623b      	str	r3, [r7, #32]
            	arrayPos--;
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	3b01      	subs	r3, #1
 800791c:	61bb      	str	r3, [r7, #24]
            	eepromVal--;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	3b01      	subs	r3, #1
 8007922:	617b      	str	r3, [r7, #20]

            	lcd_delete_char(1, 6+arrayPos);
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	3306      	adds	r3, #6
 800792a:	b2db      	uxtb	r3, r3
 800792c:	4619      	mov	r1, r3
 800792e:	2001      	movs	r0, #1
 8007930:	f000 fb7c 	bl	800802c <lcd_delete_char>
            	HAL_Delay(50);
 8007934:	2032      	movs	r0, #50	; 0x32
 8007936:	f001 f899 	bl	8008a6c <HAL_Delay>
            }

            HAL_Delay(150);
 800793a:	2096      	movs	r0, #150	; 0x96
 800793c:	f001 f896 	bl	8008a6c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	4619      	mov	r1, r3
 8007946:	2002      	movs	r0, #2
 8007948:	f000 fb1b 	bl	8007f82 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800794c:	e6ad      	b.n	80076aa <takeWifiPass+0x36>
    }
}
 800794e:	bf00      	nop
 8007950:	3728      	adds	r7, #40	; 0x28
 8007952:	46bd      	mov	sp, r7
 8007954:	bdb0      	pop	{r4, r5, r7, pc}
 8007956:	bf00      	nop
 8007958:	2000000c 	.word	0x2000000c
 800795c:	40010800 	.word	0x40010800
 8007960:	200001b0 	.word	0x200001b0
 8007964:	0800df60 	.word	0x0800df60
 8007968:	0800df88 	.word	0x0800df88
 800796c:	20000118 	.word	0x20000118
 8007970:	200003a8 	.word	0x200003a8
 8007974:	40011000 	.word	0x40011000

08007978 <mergeData>:

char* mergeData() {
 8007978:	b580      	push	{r7, lr}
 800797a:	b09c      	sub	sp, #112	; 0x70
 800797c:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 800797e:	2300      	movs	r3, #0
 8007980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007982:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007986:	2228      	movs	r2, #40	; 0x28
 8007988:	2100      	movs	r1, #0
 800798a:	4618      	mov	r0, r3
 800798c:	f004 ff91 	bl	800c8b2 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007990:	4b67      	ldr	r3, [pc, #412]	; (8007b30 <mergeData+0x1b8>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	713b      	strb	r3, [r7, #4]
 8007996:	4b67      	ldr	r3, [pc, #412]	; (8007b34 <mergeData+0x1bc>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	717b      	strb	r3, [r7, #5]
 800799c:	4b66      	ldr	r3, [pc, #408]	; (8007b38 <mergeData+0x1c0>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	71bb      	strb	r3, [r7, #6]
 80079a2:	4b66      	ldr	r3, [pc, #408]	; (8007b3c <mergeData+0x1c4>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	71fb      	strb	r3, [r7, #7]
 80079a8:	4b65      	ldr	r3, [pc, #404]	; (8007b40 <mergeData+0x1c8>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	723b      	strb	r3, [r7, #8]
 80079ae:	4b65      	ldr	r3, [pc, #404]	; (8007b44 <mergeData+0x1cc>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	727b      	strb	r3, [r7, #9]
 80079b4:	4b64      	ldr	r3, [pc, #400]	; (8007b48 <mergeData+0x1d0>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	72bb      	strb	r3, [r7, #10]
 80079ba:	4b64      	ldr	r3, [pc, #400]	; (8007b4c <mergeData+0x1d4>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	72fb      	strb	r3, [r7, #11]
 80079c0:	4b63      	ldr	r3, [pc, #396]	; (8007b50 <mergeData+0x1d8>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	733b      	strb	r3, [r7, #12]
 80079c6:	4b63      	ldr	r3, [pc, #396]	; (8007b54 <mergeData+0x1dc>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	737b      	strb	r3, [r7, #13]
 80079cc:	4b62      	ldr	r3, [pc, #392]	; (8007b58 <mergeData+0x1e0>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	73bb      	strb	r3, [r7, #14]
 80079d2:	4b62      	ldr	r3, [pc, #392]	; (8007b5c <mergeData+0x1e4>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	73fb      	strb	r3, [r7, #15]
 80079d8:	4b61      	ldr	r3, [pc, #388]	; (8007b60 <mergeData+0x1e8>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	743b      	strb	r3, [r7, #16]
 80079de:	4b61      	ldr	r3, [pc, #388]	; (8007b64 <mergeData+0x1ec>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	747b      	strb	r3, [r7, #17]
 80079e4:	4b60      	ldr	r3, [pc, #384]	; (8007b68 <mergeData+0x1f0>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	74bb      	strb	r3, [r7, #18]
 80079ea:	4b60      	ldr	r3, [pc, #384]	; (8007b6c <mergeData+0x1f4>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	74fb      	strb	r3, [r7, #19]
 80079f0:	4b5f      	ldr	r3, [pc, #380]	; (8007b70 <mergeData+0x1f8>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	753b      	strb	r3, [r7, #20]
 80079f6:	4b5f      	ldr	r3, [pc, #380]	; (8007b74 <mergeData+0x1fc>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	757b      	strb	r3, [r7, #21]
 80079fc:	4b5e      	ldr	r3, [pc, #376]	; (8007b78 <mergeData+0x200>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	75bb      	strb	r3, [r7, #22]
 8007a02:	4b5e      	ldr	r3, [pc, #376]	; (8007b7c <mergeData+0x204>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	75fb      	strb	r3, [r7, #23]
 8007a08:	4b5d      	ldr	r3, [pc, #372]	; (8007b80 <mergeData+0x208>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	763b      	strb	r3, [r7, #24]
 8007a0e:	4b5d      	ldr	r3, [pc, #372]	; (8007b84 <mergeData+0x20c>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	767b      	strb	r3, [r7, #25]
 8007a14:	4b5c      	ldr	r3, [pc, #368]	; (8007b88 <mergeData+0x210>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	76bb      	strb	r3, [r7, #26]
 8007a1a:	4b5c      	ldr	r3, [pc, #368]	; (8007b8c <mergeData+0x214>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	76fb      	strb	r3, [r7, #27]
 8007a20:	4b5b      	ldr	r3, [pc, #364]	; (8007b90 <mergeData+0x218>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	773b      	strb	r3, [r7, #28]
 8007a26:	4b5b      	ldr	r3, [pc, #364]	; (8007b94 <mergeData+0x21c>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	777b      	strb	r3, [r7, #29]
 8007a2c:	4b5a      	ldr	r3, [pc, #360]	; (8007b98 <mergeData+0x220>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	77bb      	strb	r3, [r7, #30]
 8007a32:	4b5a      	ldr	r3, [pc, #360]	; (8007b9c <mergeData+0x224>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	77fb      	strb	r3, [r7, #31]
 8007a38:	4b59      	ldr	r3, [pc, #356]	; (8007ba0 <mergeData+0x228>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	f887 3020 	strb.w	r3, [r7, #32]
 8007a40:	4b58      	ldr	r3, [pc, #352]	; (8007ba4 <mergeData+0x22c>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007a48:	4b57      	ldr	r3, [pc, #348]	; (8007ba8 <mergeData+0x230>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a50:	4b56      	ldr	r3, [pc, #344]	; (8007bac <mergeData+0x234>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a58:	4b55      	ldr	r3, [pc, #340]	; (8007bb0 <mergeData+0x238>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007a60:	4b54      	ldr	r3, [pc, #336]	; (8007bb4 <mergeData+0x23c>)
 8007a62:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007a66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 8007a6a:	4b52      	ldr	r3, [pc, #328]	; (8007bb4 <mergeData+0x23c>)
 8007a6c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007a70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007a74:	4b4f      	ldr	r3, [pc, #316]	; (8007bb4 <mergeData+0x23c>)
 8007a76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 8007a7e:	4b4d      	ldr	r3, [pc, #308]	; (8007bb4 <mergeData+0x23c>)
 8007a80:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007a84:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007a88:	4b4a      	ldr	r3, [pc, #296]	; (8007bb4 <mergeData+0x23c>)
 8007a8a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007a8e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8007a92:	4b48      	ldr	r3, [pc, #288]	; (8007bb4 <mergeData+0x23c>)
 8007a94:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007a98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007a9c:	4b45      	ldr	r3, [pc, #276]	; (8007bb4 <mergeData+0x23c>)
 8007a9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 8007aa6:	4b43      	ldr	r3, [pc, #268]	; (8007bb4 <mergeData+0x23c>)
 8007aa8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007aac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007ab0:	4b40      	ldr	r3, [pc, #256]	; (8007bb4 <mergeData+0x23c>)
 8007ab2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007ab6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007aba:	4b3e      	ldr	r3, [pc, #248]	; (8007bb4 <mergeData+0x23c>)
 8007abc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007ac0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007ac4:	2306      	movs	r3, #6
 8007ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007aca:	2300      	movs	r3, #0
 8007acc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ace:	e015      	b.n	8007afc <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007ad0:	1d3a      	adds	r2, r7, #4
 8007ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad4:	4413      	add	r3, r2
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ade:	4936      	ldr	r1, [pc, #216]	; (8007bb8 <mergeData+0x240>)
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f004 fe75 	bl	800c7d0 <siprintf>
	    strcat(combinedString, temp);
 8007ae6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007aea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007aee:	4611      	mov	r1, r2
 8007af0:	4618      	mov	r0, r3
 8007af2:	f004 fecf 	bl	800c894 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af8:	3301      	adds	r3, #1
 8007afa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afe:	2b2b      	cmp	r3, #43	; 0x2b
 8007b00:	d9e6      	bls.n	8007ad0 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007b02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7f8 fb8c 	bl	8000224 <strlen>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	3301      	adds	r3, #1
 8007b10:	4618      	mov	r0, r3
 8007b12:	f004 fda9 	bl	800c668 <malloc>
 8007b16:	4603      	mov	r3, r0
 8007b18:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 8007b1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007b22:	f004 ff19 	bl	800c958 <strcpy>
	return result;
 8007b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3770      	adds	r7, #112	; 0x70
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	2000022f 	.word	0x2000022f
 8007b34:	20000221 	.word	0x20000221
 8007b38:	20000224 	.word	0x20000224
 8007b3c:	20000225 	.word	0x20000225
 8007b40:	20000226 	.word	0x20000226
 8007b44:	2000022d 	.word	0x2000022d
 8007b48:	20000227 	.word	0x20000227
 8007b4c:	20000228 	.word	0x20000228
 8007b50:	2000022c 	.word	0x2000022c
 8007b54:	20000229 	.word	0x20000229
 8007b58:	20000239 	.word	0x20000239
 8007b5c:	2000022a 	.word	0x2000022a
 8007b60:	2000023a 	.word	0x2000023a
 8007b64:	2000022b 	.word	0x2000022b
 8007b68:	2000023b 	.word	0x2000023b
 8007b6c:	2000022e 	.word	0x2000022e
 8007b70:	20000230 	.word	0x20000230
 8007b74:	20000231 	.word	0x20000231
 8007b78:	20000232 	.word	0x20000232
 8007b7c:	20000233 	.word	0x20000233
 8007b80:	20000234 	.word	0x20000234
 8007b84:	20000235 	.word	0x20000235
 8007b88:	20000236 	.word	0x20000236
 8007b8c:	20000237 	.word	0x20000237
 8007b90:	20000238 	.word	0x20000238
 8007b94:	2000023c 	.word	0x2000023c
 8007b98:	2000023e 	.word	0x2000023e
 8007b9c:	2000021d 	.word	0x2000021d
 8007ba0:	2000021e 	.word	0x2000021e
 8007ba4:	20000000 	.word	0x20000000
 8007ba8:	20000001 	.word	0x20000001
 8007bac:	2000021f 	.word	0x2000021f
 8007bb0:	20000241 	.word	0x20000241
 8007bb4:	20000118 	.word	0x20000118
 8007bb8:	0800df9c 	.word	0x0800df9c

08007bbc <convertAndSendData>:

void convertAndSendData() {
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af02      	add	r7, sp, #8
	if(dilSecim == 0) {
 8007bc2:	4b16      	ldr	r3, [pc, #88]	; (8007c1c <convertAndSendData+0x60>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10a      	bne.n	8007be0 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007bca:	4a15      	ldr	r2, [pc, #84]	; (8007c20 <convertAndSendData+0x64>)
 8007bcc:	2101      	movs	r1, #1
 8007bce:	2001      	movs	r0, #1
 8007bd0:	f000 f9f6 	bl	8007fc0 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007bd4:	4a13      	ldr	r2, [pc, #76]	; (8007c24 <convertAndSendData+0x68>)
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	2002      	movs	r0, #2
 8007bda:	f000 f9f1 	bl	8007fc0 <lcd_print>
 8007bde:	e009      	b.n	8007bf4 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007be0:	4a11      	ldr	r2, [pc, #68]	; (8007c28 <convertAndSendData+0x6c>)
 8007be2:	2101      	movs	r1, #1
 8007be4:	2001      	movs	r0, #1
 8007be6:	f000 f9eb 	bl	8007fc0 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007bea:	4a10      	ldr	r2, [pc, #64]	; (8007c2c <convertAndSendData+0x70>)
 8007bec:	2101      	movs	r1, #1
 8007bee:	2002      	movs	r0, #2
 8007bf0:	f000 f9e6 	bl	8007fc0 <lcd_print>
	}

	sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8007bf4:	f7ff fec0 	bl	8007978 <mergeData>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	4b0c      	ldr	r3, [pc, #48]	; (8007c30 <convertAndSendData+0x74>)
 8007bfe:	4a0d      	ldr	r2, [pc, #52]	; (8007c34 <convertAndSendData+0x78>)
 8007c00:	490d      	ldr	r1, [pc, #52]	; (8007c38 <convertAndSendData+0x7c>)
 8007c02:	480e      	ldr	r0, [pc, #56]	; (8007c3c <convertAndSendData+0x80>)
 8007c04:	f7f8 fea0 	bl	8000948 <sendMachineData>

	HAL_Delay(500);
 8007c08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c0c:	f000 ff2e 	bl	8008a6c <HAL_Delay>
	lcd_clear();
 8007c10:	f000 fa02 	bl	8008018 <lcd_clear>
}
 8007c14:	bf00      	nop
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20000241 	.word	0x20000241
 8007c20:	0800dfa0 	.word	0x0800dfa0
 8007c24:	0800dfb4 	.word	0x0800dfb4
 8007c28:	0800dfc8 	.word	0x0800dfc8
 8007c2c:	0800dfdc 	.word	0x0800dfdc
 8007c30:	200001b0 	.word	0x200001b0
 8007c34:	2000019c 	.word	0x2000019c
 8007c38:	20000190 	.word	0x20000190
 8007c3c:	20000444 	.word	0x20000444

08007c40 <iotSetup>:

void iotSetup() {
 8007c40:	b580      	push	{r7, lr}
 8007c42:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007c44:	4b0e      	ldr	r3, [pc, #56]	; (8007c80 <iotSetup+0x40>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d017      	beq.n	8007c7c <iotSetup+0x3c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 8007c4c:	480d      	ldr	r0, [pc, #52]	; (8007c84 <iotSetup+0x44>)
 8007c4e:	f7f8 fae9 	bl	8000224 <strlen>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b0c      	cmp	r3, #12
 8007c56:	d001      	beq.n	8007c5c <iotSetup+0x1c>
			takeMachineID();
 8007c58:	f7ff f844 	bl	8006ce4 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007c5c:	480a      	ldr	r0, [pc, #40]	; (8007c88 <iotSetup+0x48>)
 8007c5e:	f7f8 fae1 	bl	8000224 <strlen>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d801      	bhi.n	8007c6c <iotSetup+0x2c>
			takeWifiSSID();
 8007c68:	f7ff f9d4 	bl	8007014 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007c6c:	4807      	ldr	r0, [pc, #28]	; (8007c8c <iotSetup+0x4c>)
 8007c6e:	f7f8 fad9 	bl	8000224 <strlen>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d801      	bhi.n	8007c7c <iotSetup+0x3c>
			takeWifiPass();
 8007c78:	f7ff fcfc 	bl	8007674 <takeWifiPass>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
	HAL_Delay(500);
	convertAndSendData();*/
}
 8007c7c:	bf00      	nop
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	2000023f 	.word	0x2000023f
 8007c84:	20000190 	.word	0x20000190
 8007c88:	2000019c 	.word	0x2000019c
 8007c8c:	200001b0 	.word	0x200001b0

08007c90 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	4603      	mov	r3, r0
 8007c98:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007c9a:	79fb      	ldrb	r3, [r7, #7]
 8007c9c:	f023 030f 	bic.w	r3, r3, #15
 8007ca0:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007ca8:	7b7b      	ldrb	r3, [r7, #13]
 8007caa:	f043 030c 	orr.w	r3, r3, #12
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007cb2:	7b7b      	ldrb	r3, [r7, #13]
 8007cb4:	f043 0308 	orr.w	r3, r3, #8
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007cbc:	7b3b      	ldrb	r3, [r7, #12]
 8007cbe:	f043 030c 	orr.w	r3, r3, #12
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007cc6:	7b3b      	ldrb	r3, [r7, #12]
 8007cc8:	f043 0308 	orr.w	r3, r3, #8
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007cd0:	bf00      	nop
 8007cd2:	4825      	ldr	r0, [pc, #148]	; (8007d68 <lcd_send_cmd+0xd8>)
 8007cd4:	f002 fac3 	bl	800a25e <HAL_I2C_GetError>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d0f9      	beq.n	8007cd2 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007cde:	bf00      	nop
 8007ce0:	4821      	ldr	r0, [pc, #132]	; (8007d68 <lcd_send_cmd+0xd8>)
 8007ce2:	f002 faaf 	bl	800a244 <HAL_I2C_GetState>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b20      	cmp	r3, #32
 8007cea:	d1f9      	bne.n	8007ce0 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007cec:	4b1f      	ldr	r3, [pc, #124]	; (8007d6c <lcd_send_cmd+0xdc>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d116      	bne.n	8007d22 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
 8007cf8:	e00f      	b.n	8007d1a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	3310      	adds	r3, #16
 8007cfe:	443b      	add	r3, r7
 8007d00:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	f022 0208 	bic.w	r2, r2, #8
 8007d0a:	b2d2      	uxtb	r2, r2
 8007d0c:	3310      	adds	r3, #16
 8007d0e:	443b      	add	r3, r7
 8007d10:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	3301      	adds	r3, #1
 8007d18:	73fb      	strb	r3, [r7, #15]
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d9ec      	bls.n	8007cfa <lcd_send_cmd+0x6a>
 8007d20:	e015      	b.n	8007d4e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007d22:	2300      	movs	r3, #0
 8007d24:	73bb      	strb	r3, [r7, #14]
 8007d26:	e00f      	b.n	8007d48 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	3310      	adds	r3, #16
 8007d2c:	443b      	add	r3, r7
 8007d2e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	f042 0208 	orr.w	r2, r2, #8
 8007d38:	b2d2      	uxtb	r2, r2
 8007d3a:	3310      	adds	r3, #16
 8007d3c:	443b      	add	r3, r7
 8007d3e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	3301      	adds	r3, #1
 8007d46:	73bb      	strb	r3, [r7, #14]
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d9ec      	bls.n	8007d28 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007d4e:	f107 0208 	add.w	r2, r7, #8
 8007d52:	2364      	movs	r3, #100	; 0x64
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	2304      	movs	r3, #4
 8007d58:	214e      	movs	r1, #78	; 0x4e
 8007d5a:	4803      	ldr	r0, [pc, #12]	; (8007d68 <lcd_send_cmd+0xd8>)
 8007d5c:	f001 fe12 	bl	8009984 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007d60:	bf00      	nop
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	200003a8 	.word	0x200003a8
 8007d6c:	2000037e 	.word	0x2000037e

08007d70 <lcd_send_data>:

void lcd_send_data (char data) {
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	4603      	mov	r3, r0
 8007d78:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	f023 030f 	bic.w	r3, r3, #15
 8007d80:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	011b      	lsls	r3, r3, #4
 8007d86:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007d88:	7b7b      	ldrb	r3, [r7, #13]
 8007d8a:	f043 030d 	orr.w	r3, r3, #13
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007d92:	7b7b      	ldrb	r3, [r7, #13]
 8007d94:	f043 0309 	orr.w	r3, r3, #9
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007d9c:	7b3b      	ldrb	r3, [r7, #12]
 8007d9e:	f043 030d 	orr.w	r3, r3, #13
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007da6:	7b3b      	ldrb	r3, [r7, #12]
 8007da8:	f043 0309 	orr.w	r3, r3, #9
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007db0:	bf00      	nop
 8007db2:	4825      	ldr	r0, [pc, #148]	; (8007e48 <lcd_send_data+0xd8>)
 8007db4:	f002 fa53 	bl	800a25e <HAL_I2C_GetError>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	d0f9      	beq.n	8007db2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007dbe:	bf00      	nop
 8007dc0:	4821      	ldr	r0, [pc, #132]	; (8007e48 <lcd_send_data+0xd8>)
 8007dc2:	f002 fa3f 	bl	800a244 <HAL_I2C_GetState>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b20      	cmp	r3, #32
 8007dca:	d1f9      	bne.n	8007dc0 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007dcc:	4b1f      	ldr	r3, [pc, #124]	; (8007e4c <lcd_send_data+0xdc>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d116      	bne.n	8007e02 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	73fb      	strb	r3, [r7, #15]
 8007dd8:	e00f      	b.n	8007dfa <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
 8007ddc:	3310      	adds	r3, #16
 8007dde:	443b      	add	r3, r7
 8007de0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	f022 0208 	bic.w	r2, r2, #8
 8007dea:	b2d2      	uxtb	r2, r2
 8007dec:	3310      	adds	r3, #16
 8007dee:	443b      	add	r3, r7
 8007df0:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
 8007df6:	3301      	adds	r3, #1
 8007df8:	73fb      	strb	r3, [r7, #15]
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d9ec      	bls.n	8007dda <lcd_send_data+0x6a>
 8007e00:	e015      	b.n	8007e2e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007e02:	2300      	movs	r3, #0
 8007e04:	73bb      	strb	r3, [r7, #14]
 8007e06:	e00f      	b.n	8007e28 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	3310      	adds	r3, #16
 8007e0c:	443b      	add	r3, r7
 8007e0e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	f042 0208 	orr.w	r2, r2, #8
 8007e18:	b2d2      	uxtb	r2, r2
 8007e1a:	3310      	adds	r3, #16
 8007e1c:	443b      	add	r3, r7
 8007e1e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	3301      	adds	r3, #1
 8007e26:	73bb      	strb	r3, [r7, #14]
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d9ec      	bls.n	8007e08 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007e2e:	f107 0208 	add.w	r2, r7, #8
 8007e32:	2364      	movs	r3, #100	; 0x64
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	2304      	movs	r3, #4
 8007e38:	214e      	movs	r1, #78	; 0x4e
 8007e3a:	4803      	ldr	r0, [pc, #12]	; (8007e48 <lcd_send_data+0xd8>)
 8007e3c:	f001 fda2 	bl	8009984 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007e40:	bf00      	nop
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	200003a8 	.word	0x200003a8
 8007e4c:	2000037e 	.word	0x2000037e

08007e50 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007e58:	e006      	b.n	8007e68 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7ff ff84 	bl	8007d70 <lcd_send_data>
	while (*str) {
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1f4      	bne.n	8007e5a <lcd_send_string+0xa>
	}
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <lcd_send_char>:

void lcd_send_char(char ch) {
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af02      	add	r7, sp, #8
 8007e82:	4603      	mov	r3, r0
 8007e84:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007e86:	79fb      	ldrb	r3, [r7, #7]
 8007e88:	f023 030f 	bic.w	r3, r3, #15
 8007e8c:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	011b      	lsls	r3, r3, #4
 8007e92:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007e94:	7b7b      	ldrb	r3, [r7, #13]
 8007e96:	f043 030d 	orr.w	r3, r3, #13
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007e9e:	7b7b      	ldrb	r3, [r7, #13]
 8007ea0:	f043 0309 	orr.w	r3, r3, #9
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007ea8:	7b3b      	ldrb	r3, [r7, #12]
 8007eaa:	f043 030d 	orr.w	r3, r3, #13
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007eb2:	7b3b      	ldrb	r3, [r7, #12]
 8007eb4:	f043 0309 	orr.w	r3, r3, #9
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ebc:	bf00      	nop
 8007ebe:	4825      	ldr	r0, [pc, #148]	; (8007f54 <lcd_send_char+0xd8>)
 8007ec0:	f002 f9cd 	bl	800a25e <HAL_I2C_GetError>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d0f9      	beq.n	8007ebe <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007eca:	bf00      	nop
 8007ecc:	4821      	ldr	r0, [pc, #132]	; (8007f54 <lcd_send_char+0xd8>)
 8007ece:	f002 f9b9 	bl	800a244 <HAL_I2C_GetState>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b20      	cmp	r3, #32
 8007ed6:	d1f9      	bne.n	8007ecc <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007ed8:	4b1f      	ldr	r3, [pc, #124]	; (8007f58 <lcd_send_char+0xdc>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d116      	bne.n	8007f0e <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	73fb      	strb	r3, [r7, #15]
 8007ee4:	e00f      	b.n	8007f06 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	3310      	adds	r3, #16
 8007eea:	443b      	add	r3, r7
 8007eec:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	f022 0208 	bic.w	r2, r2, #8
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	3310      	adds	r3, #16
 8007efa:	443b      	add	r3, r7
 8007efc:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	3301      	adds	r3, #1
 8007f04:	73fb      	strb	r3, [r7, #15]
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d9ec      	bls.n	8007ee6 <lcd_send_char+0x6a>
 8007f0c:	e015      	b.n	8007f3a <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007f0e:	2300      	movs	r3, #0
 8007f10:	73bb      	strb	r3, [r7, #14]
 8007f12:	e00f      	b.n	8007f34 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	3310      	adds	r3, #16
 8007f18:	443b      	add	r3, r7
 8007f1a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	f042 0208 	orr.w	r2, r2, #8
 8007f24:	b2d2      	uxtb	r2, r2
 8007f26:	3310      	adds	r3, #16
 8007f28:	443b      	add	r3, r7
 8007f2a:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	3301      	adds	r3, #1
 8007f32:	73bb      	strb	r3, [r7, #14]
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d9ec      	bls.n	8007f14 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007f3a:	f107 0208 	add.w	r2, r7, #8
 8007f3e:	2364      	movs	r3, #100	; 0x64
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	2304      	movs	r3, #4
 8007f44:	214e      	movs	r1, #78	; 0x4e
 8007f46:	4803      	ldr	r0, [pc, #12]	; (8007f54 <lcd_send_char+0xd8>)
 8007f48:	f001 fd1c 	bl	8009984 <HAL_I2C_Master_Transmit>
}
 8007f4c:	bf00      	nop
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	200003a8 	.word	0x200003a8
 8007f58:	2000037e 	.word	0x2000037e

08007f5c <lcd_init>:

void lcd_init (void) {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007f60:	2002      	movs	r0, #2
 8007f62:	f7ff fe95 	bl	8007c90 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007f66:	2028      	movs	r0, #40	; 0x28
 8007f68:	f7ff fe92 	bl	8007c90 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007f6c:	200c      	movs	r0, #12
 8007f6e:	f7ff fe8f 	bl	8007c90 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007f72:	2080      	movs	r0, #128	; 0x80
 8007f74:	f7ff fe8c 	bl	8007c90 <lcd_send_cmd>
	lcd_backlight(1);
 8007f78:	2001      	movs	r0, #1
 8007f7a:	f000 f86d 	bl	8008058 <lcd_backlight>
}
 8007f7e:	bf00      	nop
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	4603      	mov	r3, r0
 8007f8a:	460a      	mov	r2, r1
 8007f8c:	71fb      	strb	r3, [r7, #7]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d106      	bne.n	8007fa6 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007f98:	79bb      	ldrb	r3, [r7, #6]
 8007f9a:	337f      	adds	r3, #127	; 0x7f
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff fe76 	bl	8007c90 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007fa4:	e008      	b.n	8007fb8 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007fa6:	79fb      	ldrb	r3, [r7, #7]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d105      	bne.n	8007fb8 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007fac:	79bb      	ldrb	r3, [r7, #6]
 8007fae:	3b41      	subs	r3, #65	; 0x41
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7ff fe6c 	bl	8007c90 <lcd_send_cmd>
}
 8007fb8:	bf00      	nop
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	603a      	str	r2, [r7, #0]
 8007fca:	71fb      	strb	r3, [r7, #7]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007fd0:	79ba      	ldrb	r2, [r7, #6]
 8007fd2:	79fb      	ldrb	r3, [r7, #7]
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff ffd3 	bl	8007f82 <lcd_gotoxy>
	lcd_send_string(str);
 8007fdc:	6838      	ldr	r0, [r7, #0]
 8007fde:	f7ff ff37 	bl	8007e50 <lcd_send_string>
}
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b082      	sub	sp, #8
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	71fb      	strb	r3, [r7, #7]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	71bb      	strb	r3, [r7, #6]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007ffc:	79ba      	ldrb	r2, [r7, #6]
 8007ffe:	79fb      	ldrb	r3, [r7, #7]
 8008000:	4611      	mov	r1, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f7ff ffbd 	bl	8007f82 <lcd_gotoxy>
    lcd_send_char(ch);
 8008008:	797b      	ldrb	r3, [r7, #5]
 800800a:	4618      	mov	r0, r3
 800800c:	f7ff ff36 	bl	8007e7c <lcd_send_char>
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <lcd_clear>:

void lcd_clear(void) {
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 800801c:	2001      	movs	r0, #1
 800801e:	f7ff fe37 	bl	8007c90 <lcd_send_cmd>
    HAL_Delay(2);
 8008022:	2002      	movs	r0, #2
 8008024:	f000 fd22 	bl	8008a6c <HAL_Delay>
}
 8008028:	bf00      	nop
 800802a:	bd80      	pop	{r7, pc}

0800802c <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	460a      	mov	r2, r1
 8008036:	71fb      	strb	r3, [r7, #7]
 8008038:	4613      	mov	r3, r2
 800803a:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 800803c:	79ba      	ldrb	r2, [r7, #6]
 800803e:	79fb      	ldrb	r3, [r7, #7]
 8008040:	4611      	mov	r1, r2
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff ff9d 	bl	8007f82 <lcd_gotoxy>

    lcd_send_char(' ');
 8008048:	2020      	movs	r0, #32
 800804a:	f7ff ff17 	bl	8007e7c <lcd_send_char>
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8008062:	4a05      	ldr	r2, [pc, #20]	; (8008078 <lcd_backlight+0x20>)
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8008068:	2000      	movs	r0, #0
 800806a:	f7ff fe11 	bl	8007c90 <lcd_send_cmd>
}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	2000037e 	.word	0x2000037e

0800807c <lcd_cursor>:

void lcd_cursor(int state) {
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d106      	bne.n	8008098 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 800808a:	200e      	movs	r0, #14
 800808c:	f7ff fe00 	bl	8007c90 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8008090:	200f      	movs	r0, #15
 8008092:	f7ff fdfd 	bl	8007c90 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8008096:	e002      	b.n	800809e <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8008098:	200c      	movs	r0, #12
 800809a:	f7ff fdf9 	bl	8007c90 <lcd_send_cmd>
}
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80080b0:	4b04      	ldr	r3, [pc, #16]	; (80080c4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	3301      	adds	r3, #1
 80080b6:	4a03      	ldr	r2, [pc, #12]	; (80080c4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80080b8:	6013      	str	r3, [r2, #0]
}
 80080ba:	bf00      	nop
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	bc80      	pop	{r7}
 80080c2:	4770      	bx	lr
 80080c4:	200001fc 	.word	0x200001fc

080080c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80080cc:	f000 fc6c 	bl	80089a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80080d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080d4:	f000 fcca 	bl	8008a6c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80080d8:	f000 f89c 	bl	8008214 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80080dc:	f000 f9be 	bl	800845c <MX_GPIO_Init>
  MX_CAN_Init();
 80080e0:	f000 f8de 	bl	80082a0 <MX_CAN_Init>
  MX_I2C1_Init();
 80080e4:	f000 f910 	bl	8008308 <MX_I2C1_Init>
  MX_TIM1_Init();
 80080e8:	f000 f93c 	bl	8008364 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80080ec:	f000 f98c 	bl	8008408 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80080f0:	2201      	movs	r2, #1
 80080f2:	2140      	movs	r1, #64	; 0x40
 80080f4:	483e      	ldr	r0, [pc, #248]	; (80081f0 <main+0x128>)
 80080f6:	f001 faa0 	bl	800963a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80080fa:	2201      	movs	r2, #1
 80080fc:	2180      	movs	r1, #128	; 0x80
 80080fe:	483c      	ldr	r0, [pc, #240]	; (80081f0 <main+0x128>)
 8008100:	f001 fa9b 	bl	800963a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008104:	200a      	movs	r0, #10
 8008106:	f000 fcb1 	bl	8008a6c <HAL_Delay>
  lcd_init();
 800810a:	f7ff ff27 	bl	8007f5c <lcd_init>
  HAL_Delay(10);
 800810e:	200a      	movs	r0, #10
 8008110:	f000 fcac 	bl	8008a6c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008114:	4837      	ldr	r0, [pc, #220]	; (80081f4 <main+0x12c>)
 8008116:	f003 f943 	bl	800b3a0 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800811a:	bf00      	nop
 800811c:	4836      	ldr	r0, [pc, #216]	; (80081f8 <main+0x130>)
 800811e:	f002 f89e 	bl	800a25e <HAL_I2C_GetError>
 8008122:	4603      	mov	r3, r0
 8008124:	2b04      	cmp	r3, #4
 8008126:	d0f9      	beq.n	800811c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008128:	bf00      	nop
 800812a:	4833      	ldr	r0, [pc, #204]	; (80081f8 <main+0x130>)
 800812c:	f002 f88a 	bl	800a244 <HAL_I2C_GetState>
 8008130:	4603      	mov	r3, r0
 8008132:	2b20      	cmp	r3, #32
 8008134:	d1f9      	bne.n	800812a <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008136:	2200      	movs	r2, #0
 8008138:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800813c:	482c      	ldr	r0, [pc, #176]	; (80081f0 <main+0x128>)
 800813e:	f001 fa7c 	bl	800963a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008142:	2200      	movs	r2, #0
 8008144:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008148:	4829      	ldr	r0, [pc, #164]	; (80081f0 <main+0x128>)
 800814a:	f001 fa76 	bl	800963a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800814e:	2200      	movs	r2, #0
 8008150:	2104      	movs	r1, #4
 8008152:	4827      	ldr	r0, [pc, #156]	; (80081f0 <main+0x128>)
 8008154:	f001 fa71 	bl	800963a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008158:	2200      	movs	r2, #0
 800815a:	2102      	movs	r1, #2
 800815c:	4824      	ldr	r0, [pc, #144]	; (80081f0 <main+0x128>)
 800815e:	f001 fa6c 	bl	800963a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008162:	2200      	movs	r2, #0
 8008164:	2101      	movs	r1, #1
 8008166:	4822      	ldr	r0, [pc, #136]	; (80081f0 <main+0x128>)
 8008168:	f001 fa67 	bl	800963a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800816c:	2200      	movs	r2, #0
 800816e:	2120      	movs	r1, #32
 8008170:	4822      	ldr	r0, [pc, #136]	; (80081fc <main+0x134>)
 8008172:	f001 fa62 	bl	800963a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008176:	2200      	movs	r2, #0
 8008178:	2110      	movs	r1, #16
 800817a:	4820      	ldr	r0, [pc, #128]	; (80081fc <main+0x134>)
 800817c:	f001 fa5d 	bl	800963a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008180:	2200      	movs	r2, #0
 8008182:	2180      	movs	r1, #128	; 0x80
 8008184:	481e      	ldr	r0, [pc, #120]	; (8008200 <main+0x138>)
 8008186:	f001 fa58 	bl	800963a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800818a:	2200      	movs	r2, #0
 800818c:	2140      	movs	r1, #64	; 0x40
 800818e:	481c      	ldr	r0, [pc, #112]	; (8008200 <main+0x138>)
 8008190:	f001 fa53 	bl	800963a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008194:	2200      	movs	r2, #0
 8008196:	2120      	movs	r1, #32
 8008198:	4819      	ldr	r0, [pc, #100]	; (8008200 <main+0x138>)
 800819a:	f001 fa4e 	bl	800963a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800819e:	2200      	movs	r2, #0
 80081a0:	2110      	movs	r1, #16
 80081a2:	4817      	ldr	r0, [pc, #92]	; (8008200 <main+0x138>)
 80081a4:	f001 fa49 	bl	800963a <HAL_GPIO_WritePin>

  i2cTest();
 80081a8:	f7f8 fdbc 	bl	8000d24 <i2cTest>
  HAL_Delay(100);
 80081ac:	2064      	movs	r0, #100	; 0x64
 80081ae:	f000 fc5d 	bl	8008a6c <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80081b2:	4a14      	ldr	r2, [pc, #80]	; (8008204 <main+0x13c>)
 80081b4:	2101      	movs	r1, #1
 80081b6:	2001      	movs	r0, #1
 80081b8:	f7ff ff02 	bl	8007fc0 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80081bc:	4a12      	ldr	r2, [pc, #72]	; (8008208 <main+0x140>)
 80081be:	2101      	movs	r1, #1
 80081c0:	2002      	movs	r0, #2
 80081c2:	f7ff fefd 	bl	8007fc0 <lcd_print>
  HAL_Delay(1000);
 80081c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081ca:	f000 fc4f 	bl	8008a6c <HAL_Delay>
  lcd_clear();
 80081ce:	f7ff ff23 	bl	8008018 <lcd_clear>

  eepromKontrol();
 80081d2:	f7f8 f82f 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 80081d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80081da:	f000 fc47 	bl	8008a6c <HAL_Delay>

  backLightTimer = millis;
 80081de:	4b0b      	ldr	r3, [pc, #44]	; (800820c <main+0x144>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a0b      	ldr	r2, [pc, #44]	; (8008210 <main+0x148>)
 80081e4:	6013      	str	r3, [r2, #0]

  iotSetup();
 80081e6:	f7ff fd2b 	bl	8007c40 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80081ea:	f7fe fbe3 	bl	80069b4 <mainLoop>
 80081ee:	e7fc      	b.n	80081ea <main+0x122>
 80081f0:	40010c00 	.word	0x40010c00
 80081f4:	200003fc 	.word	0x200003fc
 80081f8:	200003a8 	.word	0x200003a8
 80081fc:	40011000 	.word	0x40011000
 8008200:	40010800 	.word	0x40010800
 8008204:	0800dff0 	.word	0x0800dff0
 8008208:	0800e004 	.word	0x0800e004
 800820c:	200001fc 	.word	0x200001fc
 8008210:	20000218 	.word	0x20000218

08008214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b090      	sub	sp, #64	; 0x40
 8008218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800821a:	f107 0318 	add.w	r3, r7, #24
 800821e:	2228      	movs	r2, #40	; 0x28
 8008220:	2100      	movs	r1, #0
 8008222:	4618      	mov	r0, r3
 8008224:	f004 fb45 	bl	800c8b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008228:	1d3b      	adds	r3, r7, #4
 800822a:	2200      	movs	r2, #0
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	605a      	str	r2, [r3, #4]
 8008230:	609a      	str	r2, [r3, #8]
 8008232:	60da      	str	r2, [r3, #12]
 8008234:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008236:	2301      	movs	r3, #1
 8008238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800823a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800823e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008240:	2300      	movs	r3, #0
 8008242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008244:	2301      	movs	r3, #1
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008248:	2302      	movs	r3, #2
 800824a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800824c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008250:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008252:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008256:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008258:	f107 0318 	add.w	r3, r7, #24
 800825c:	4618      	mov	r0, r3
 800825e:	f002 fc3f 	bl	800aae0 <HAL_RCC_OscConfig>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d001      	beq.n	800826c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008268:	f000 f9a2 	bl	80085b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800826c:	230f      	movs	r3, #15
 800826e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008270:	2302      	movs	r3, #2
 8008272:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800827c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800827e:	2300      	movs	r3, #0
 8008280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008282:	1d3b      	adds	r3, r7, #4
 8008284:	2102      	movs	r1, #2
 8008286:	4618      	mov	r0, r3
 8008288:	f002 feac 	bl	800afe4 <HAL_RCC_ClockConfig>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008292:	f000 f98d 	bl	80085b0 <Error_Handler>
  }
}
 8008296:	bf00      	nop
 8008298:	3740      	adds	r7, #64	; 0x40
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80082a4:	4b16      	ldr	r3, [pc, #88]	; (8008300 <MX_CAN_Init+0x60>)
 80082a6:	4a17      	ldr	r2, [pc, #92]	; (8008304 <MX_CAN_Init+0x64>)
 80082a8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80082aa:	4b15      	ldr	r3, [pc, #84]	; (8008300 <MX_CAN_Init+0x60>)
 80082ac:	2210      	movs	r2, #16
 80082ae:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80082b0:	4b13      	ldr	r3, [pc, #76]	; (8008300 <MX_CAN_Init+0x60>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80082b6:	4b12      	ldr	r3, [pc, #72]	; (8008300 <MX_CAN_Init+0x60>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80082bc:	4b10      	ldr	r3, [pc, #64]	; (8008300 <MX_CAN_Init+0x60>)
 80082be:	2200      	movs	r2, #0
 80082c0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80082c2:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <MX_CAN_Init+0x60>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80082c8:	4b0d      	ldr	r3, [pc, #52]	; (8008300 <MX_CAN_Init+0x60>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80082ce:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <MX_CAN_Init+0x60>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80082d4:	4b0a      	ldr	r3, [pc, #40]	; (8008300 <MX_CAN_Init+0x60>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80082da:	4b09      	ldr	r3, [pc, #36]	; (8008300 <MX_CAN_Init+0x60>)
 80082dc:	2200      	movs	r2, #0
 80082de:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80082e0:	4b07      	ldr	r3, [pc, #28]	; (8008300 <MX_CAN_Init+0x60>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80082e6:	4b06      	ldr	r3, [pc, #24]	; (8008300 <MX_CAN_Init+0x60>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80082ec:	4804      	ldr	r0, [pc, #16]	; (8008300 <MX_CAN_Init+0x60>)
 80082ee:	f000 fbe1 	bl	8008ab4 <HAL_CAN_Init>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80082f8:	f000 f95a 	bl	80085b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80082fc:	bf00      	nop
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20000380 	.word	0x20000380
 8008304:	40006400 	.word	0x40006400

08008308 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800830c:	4b12      	ldr	r3, [pc, #72]	; (8008358 <MX_I2C1_Init+0x50>)
 800830e:	4a13      	ldr	r2, [pc, #76]	; (800835c <MX_I2C1_Init+0x54>)
 8008310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008312:	4b11      	ldr	r3, [pc, #68]	; (8008358 <MX_I2C1_Init+0x50>)
 8008314:	4a12      	ldr	r2, [pc, #72]	; (8008360 <MX_I2C1_Init+0x58>)
 8008316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008318:	4b0f      	ldr	r3, [pc, #60]	; (8008358 <MX_I2C1_Init+0x50>)
 800831a:	2200      	movs	r2, #0
 800831c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800831e:	4b0e      	ldr	r3, [pc, #56]	; (8008358 <MX_I2C1_Init+0x50>)
 8008320:	2200      	movs	r2, #0
 8008322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008324:	4b0c      	ldr	r3, [pc, #48]	; (8008358 <MX_I2C1_Init+0x50>)
 8008326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800832a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800832c:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <MX_I2C1_Init+0x50>)
 800832e:	2200      	movs	r2, #0
 8008330:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008332:	4b09      	ldr	r3, [pc, #36]	; (8008358 <MX_I2C1_Init+0x50>)
 8008334:	2200      	movs	r2, #0
 8008336:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008338:	4b07      	ldr	r3, [pc, #28]	; (8008358 <MX_I2C1_Init+0x50>)
 800833a:	2200      	movs	r2, #0
 800833c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800833e:	4b06      	ldr	r3, [pc, #24]	; (8008358 <MX_I2C1_Init+0x50>)
 8008340:	2200      	movs	r2, #0
 8008342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008344:	4804      	ldr	r0, [pc, #16]	; (8008358 <MX_I2C1_Init+0x50>)
 8008346:	f001 f9a9 	bl	800969c <HAL_I2C_Init>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008350:	f000 f92e 	bl	80085b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008354:	bf00      	nop
 8008356:	bd80      	pop	{r7, pc}
 8008358:	200003a8 	.word	0x200003a8
 800835c:	40005400 	.word	0x40005400
 8008360:	00061a80 	.word	0x00061a80

08008364 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800836a:	f107 0308 	add.w	r3, r7, #8
 800836e:	2200      	movs	r2, #0
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	605a      	str	r2, [r3, #4]
 8008374:	609a      	str	r2, [r3, #8]
 8008376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008378:	463b      	mov	r3, r7
 800837a:	2200      	movs	r2, #0
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008380:	4b1f      	ldr	r3, [pc, #124]	; (8008400 <MX_TIM1_Init+0x9c>)
 8008382:	4a20      	ldr	r2, [pc, #128]	; (8008404 <MX_TIM1_Init+0xa0>)
 8008384:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008386:	4b1e      	ldr	r3, [pc, #120]	; (8008400 <MX_TIM1_Init+0x9c>)
 8008388:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800838c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800838e:	4b1c      	ldr	r3, [pc, #112]	; (8008400 <MX_TIM1_Init+0x9c>)
 8008390:	2200      	movs	r2, #0
 8008392:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008394:	4b1a      	ldr	r3, [pc, #104]	; (8008400 <MX_TIM1_Init+0x9c>)
 8008396:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800839a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800839c:	4b18      	ldr	r3, [pc, #96]	; (8008400 <MX_TIM1_Init+0x9c>)
 800839e:	2200      	movs	r2, #0
 80083a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80083a2:	4b17      	ldr	r3, [pc, #92]	; (8008400 <MX_TIM1_Init+0x9c>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083a8:	4b15      	ldr	r3, [pc, #84]	; (8008400 <MX_TIM1_Init+0x9c>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80083ae:	4814      	ldr	r0, [pc, #80]	; (8008400 <MX_TIM1_Init+0x9c>)
 80083b0:	f002 ffa6 	bl	800b300 <HAL_TIM_Base_Init>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80083ba:	f000 f8f9 	bl	80085b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80083be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80083c4:	f107 0308 	add.w	r3, r7, #8
 80083c8:	4619      	mov	r1, r3
 80083ca:	480d      	ldr	r0, [pc, #52]	; (8008400 <MX_TIM1_Init+0x9c>)
 80083cc:	f003 f950 	bl	800b670 <HAL_TIM_ConfigClockSource>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80083d6:	f000 f8eb 	bl	80085b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80083da:	2300      	movs	r3, #0
 80083dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083de:	2300      	movs	r3, #0
 80083e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80083e2:	463b      	mov	r3, r7
 80083e4:	4619      	mov	r1, r3
 80083e6:	4806      	ldr	r0, [pc, #24]	; (8008400 <MX_TIM1_Init+0x9c>)
 80083e8:	f003 fb3e 	bl	800ba68 <HAL_TIMEx_MasterConfigSynchronization>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80083f2:	f000 f8dd 	bl	80085b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80083f6:	bf00      	nop
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	200003fc 	.word	0x200003fc
 8008404:	40012c00 	.word	0x40012c00

08008408 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800840c:	4b11      	ldr	r3, [pc, #68]	; (8008454 <MX_USART1_UART_Init+0x4c>)
 800840e:	4a12      	ldr	r2, [pc, #72]	; (8008458 <MX_USART1_UART_Init+0x50>)
 8008410:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008412:	4b10      	ldr	r3, [pc, #64]	; (8008454 <MX_USART1_UART_Init+0x4c>)
 8008414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008418:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800841a:	4b0e      	ldr	r3, [pc, #56]	; (8008454 <MX_USART1_UART_Init+0x4c>)
 800841c:	2200      	movs	r2, #0
 800841e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008420:	4b0c      	ldr	r3, [pc, #48]	; (8008454 <MX_USART1_UART_Init+0x4c>)
 8008422:	2200      	movs	r2, #0
 8008424:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008426:	4b0b      	ldr	r3, [pc, #44]	; (8008454 <MX_USART1_UART_Init+0x4c>)
 8008428:	2200      	movs	r2, #0
 800842a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800842c:	4b09      	ldr	r3, [pc, #36]	; (8008454 <MX_USART1_UART_Init+0x4c>)
 800842e:	220c      	movs	r2, #12
 8008430:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008432:	4b08      	ldr	r3, [pc, #32]	; (8008454 <MX_USART1_UART_Init+0x4c>)
 8008434:	2200      	movs	r2, #0
 8008436:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008438:	4b06      	ldr	r3, [pc, #24]	; (8008454 <MX_USART1_UART_Init+0x4c>)
 800843a:	2200      	movs	r2, #0
 800843c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800843e:	4805      	ldr	r0, [pc, #20]	; (8008454 <MX_USART1_UART_Init+0x4c>)
 8008440:	f003 fb90 	bl	800bb64 <HAL_UART_Init>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800844a:	f000 f8b1 	bl	80085b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800844e:	bf00      	nop
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20000444 	.word	0x20000444
 8008458:	40013800 	.word	0x40013800

0800845c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b088      	sub	sp, #32
 8008460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008462:	f107 0310 	add.w	r3, r7, #16
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	605a      	str	r2, [r3, #4]
 800846c:	609a      	str	r2, [r3, #8]
 800846e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008470:	4b4b      	ldr	r3, [pc, #300]	; (80085a0 <MX_GPIO_Init+0x144>)
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	4a4a      	ldr	r2, [pc, #296]	; (80085a0 <MX_GPIO_Init+0x144>)
 8008476:	f043 0310 	orr.w	r3, r3, #16
 800847a:	6193      	str	r3, [r2, #24]
 800847c:	4b48      	ldr	r3, [pc, #288]	; (80085a0 <MX_GPIO_Init+0x144>)
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	f003 0310 	and.w	r3, r3, #16
 8008484:	60fb      	str	r3, [r7, #12]
 8008486:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008488:	4b45      	ldr	r3, [pc, #276]	; (80085a0 <MX_GPIO_Init+0x144>)
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	4a44      	ldr	r2, [pc, #272]	; (80085a0 <MX_GPIO_Init+0x144>)
 800848e:	f043 0320 	orr.w	r3, r3, #32
 8008492:	6193      	str	r3, [r2, #24]
 8008494:	4b42      	ldr	r3, [pc, #264]	; (80085a0 <MX_GPIO_Init+0x144>)
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	60bb      	str	r3, [r7, #8]
 800849e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80084a0:	4b3f      	ldr	r3, [pc, #252]	; (80085a0 <MX_GPIO_Init+0x144>)
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	4a3e      	ldr	r2, [pc, #248]	; (80085a0 <MX_GPIO_Init+0x144>)
 80084a6:	f043 0304 	orr.w	r3, r3, #4
 80084aa:	6193      	str	r3, [r2, #24]
 80084ac:	4b3c      	ldr	r3, [pc, #240]	; (80085a0 <MX_GPIO_Init+0x144>)
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	607b      	str	r3, [r7, #4]
 80084b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80084b8:	4b39      	ldr	r3, [pc, #228]	; (80085a0 <MX_GPIO_Init+0x144>)
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	4a38      	ldr	r2, [pc, #224]	; (80085a0 <MX_GPIO_Init+0x144>)
 80084be:	f043 0308 	orr.w	r3, r3, #8
 80084c2:	6193      	str	r3, [r2, #24]
 80084c4:	4b36      	ldr	r3, [pc, #216]	; (80085a0 <MX_GPIO_Init+0x144>)
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	f003 0308 	and.w	r3, r3, #8
 80084cc:	603b      	str	r3, [r7, #0]
 80084ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80084d0:	2200      	movs	r2, #0
 80084d2:	21f0      	movs	r1, #240	; 0xf0
 80084d4:	4833      	ldr	r0, [pc, #204]	; (80085a4 <MX_GPIO_Init+0x148>)
 80084d6:	f001 f8b0 	bl	800963a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80084da:	2200      	movs	r2, #0
 80084dc:	f241 0130 	movw	r1, #4144	; 0x1030
 80084e0:	4831      	ldr	r0, [pc, #196]	; (80085a8 <MX_GPIO_Init+0x14c>)
 80084e2:	f001 f8aa 	bl	800963a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80084e6:	2200      	movs	r2, #0
 80084e8:	f640 4107 	movw	r1, #3079	; 0xc07
 80084ec:	482f      	ldr	r0, [pc, #188]	; (80085ac <MX_GPIO_Init+0x150>)
 80084ee:	f001 f8a4 	bl	800963a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80084f2:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80084f6:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084f8:	2300      	movs	r3, #0
 80084fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084fc:	2300      	movs	r3, #0
 80084fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008500:	f107 0310 	add.w	r3, r7, #16
 8008504:	4619      	mov	r1, r3
 8008506:	4828      	ldr	r0, [pc, #160]	; (80085a8 <MX_GPIO_Init+0x14c>)
 8008508:	f000 fe20 	bl	800914c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 800850c:	f248 130f 	movw	r3, #33039	; 0x810f
 8008510:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008512:	2300      	movs	r3, #0
 8008514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008516:	2300      	movs	r3, #0
 8008518:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800851a:	f107 0310 	add.w	r3, r7, #16
 800851e:	4619      	mov	r1, r3
 8008520:	4820      	ldr	r0, [pc, #128]	; (80085a4 <MX_GPIO_Init+0x148>)
 8008522:	f000 fe13 	bl	800914c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008526:	23f0      	movs	r3, #240	; 0xf0
 8008528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800852a:	2301      	movs	r3, #1
 800852c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800852e:	2300      	movs	r3, #0
 8008530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008532:	2302      	movs	r3, #2
 8008534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008536:	f107 0310 	add.w	r3, r7, #16
 800853a:	4619      	mov	r1, r3
 800853c:	4819      	ldr	r0, [pc, #100]	; (80085a4 <MX_GPIO_Init+0x148>)
 800853e:	f000 fe05 	bl	800914c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008542:	f241 0330 	movw	r3, #4144	; 0x1030
 8008546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008548:	2301      	movs	r3, #1
 800854a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800854c:	2300      	movs	r3, #0
 800854e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008550:	2302      	movs	r3, #2
 8008552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008554:	f107 0310 	add.w	r3, r7, #16
 8008558:	4619      	mov	r1, r3
 800855a:	4813      	ldr	r0, [pc, #76]	; (80085a8 <MX_GPIO_Init+0x14c>)
 800855c:	f000 fdf6 	bl	800914c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008560:	f640 4307 	movw	r3, #3079	; 0xc07
 8008564:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008566:	2301      	movs	r3, #1
 8008568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800856a:	2300      	movs	r3, #0
 800856c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800856e:	2302      	movs	r3, #2
 8008570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008572:	f107 0310 	add.w	r3, r7, #16
 8008576:	4619      	mov	r1, r3
 8008578:	480c      	ldr	r0, [pc, #48]	; (80085ac <MX_GPIO_Init+0x150>)
 800857a:	f000 fde7 	bl	800914c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800857e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008584:	2300      	movs	r3, #0
 8008586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008588:	2300      	movs	r3, #0
 800858a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800858c:	f107 0310 	add.w	r3, r7, #16
 8008590:	4619      	mov	r1, r3
 8008592:	4806      	ldr	r0, [pc, #24]	; (80085ac <MX_GPIO_Init+0x150>)
 8008594:	f000 fdda 	bl	800914c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008598:	bf00      	nop
 800859a:	3720      	adds	r7, #32
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	40021000 	.word	0x40021000
 80085a4:	40010800 	.word	0x40010800
 80085a8:	40011000 	.word	0x40011000
 80085ac:	40010c00 	.word	0x40010c00

080085b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80085b0:	b480      	push	{r7}
 80085b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80085b4:	bf00      	nop
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr

080085bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80085c2:	4b15      	ldr	r3, [pc, #84]	; (8008618 <HAL_MspInit+0x5c>)
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	4a14      	ldr	r2, [pc, #80]	; (8008618 <HAL_MspInit+0x5c>)
 80085c8:	f043 0301 	orr.w	r3, r3, #1
 80085cc:	6193      	str	r3, [r2, #24]
 80085ce:	4b12      	ldr	r3, [pc, #72]	; (8008618 <HAL_MspInit+0x5c>)
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	60bb      	str	r3, [r7, #8]
 80085d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80085da:	4b0f      	ldr	r3, [pc, #60]	; (8008618 <HAL_MspInit+0x5c>)
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	4a0e      	ldr	r2, [pc, #56]	; (8008618 <HAL_MspInit+0x5c>)
 80085e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085e4:	61d3      	str	r3, [r2, #28]
 80085e6:	4b0c      	ldr	r3, [pc, #48]	; (8008618 <HAL_MspInit+0x5c>)
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085ee:	607b      	str	r3, [r7, #4]
 80085f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80085f2:	4b0a      	ldr	r3, [pc, #40]	; (800861c <HAL_MspInit+0x60>)
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	60fb      	str	r3, [r7, #12]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	4a04      	ldr	r2, [pc, #16]	; (800861c <HAL_MspInit+0x60>)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800860e:	bf00      	nop
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	bc80      	pop	{r7}
 8008616:	4770      	bx	lr
 8008618:	40021000 	.word	0x40021000
 800861c:	40010000 	.word	0x40010000

08008620 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008628:	f107 0310 	add.w	r3, r7, #16
 800862c:	2200      	movs	r2, #0
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	605a      	str	r2, [r3, #4]
 8008632:	609a      	str	r2, [r3, #8]
 8008634:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a1c      	ldr	r2, [pc, #112]	; (80086ac <HAL_CAN_MspInit+0x8c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d131      	bne.n	80086a4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008640:	4b1b      	ldr	r3, [pc, #108]	; (80086b0 <HAL_CAN_MspInit+0x90>)
 8008642:	69db      	ldr	r3, [r3, #28]
 8008644:	4a1a      	ldr	r2, [pc, #104]	; (80086b0 <HAL_CAN_MspInit+0x90>)
 8008646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800864a:	61d3      	str	r3, [r2, #28]
 800864c:	4b18      	ldr	r3, [pc, #96]	; (80086b0 <HAL_CAN_MspInit+0x90>)
 800864e:	69db      	ldr	r3, [r3, #28]
 8008650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008658:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <HAL_CAN_MspInit+0x90>)
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	4a14      	ldr	r2, [pc, #80]	; (80086b0 <HAL_CAN_MspInit+0x90>)
 800865e:	f043 0304 	orr.w	r3, r3, #4
 8008662:	6193      	str	r3, [r2, #24]
 8008664:	4b12      	ldr	r3, [pc, #72]	; (80086b0 <HAL_CAN_MspInit+0x90>)
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	f003 0304 	and.w	r3, r3, #4
 800866c:	60bb      	str	r3, [r7, #8]
 800866e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008676:	2300      	movs	r3, #0
 8008678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800867a:	2300      	movs	r3, #0
 800867c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800867e:	f107 0310 	add.w	r3, r7, #16
 8008682:	4619      	mov	r1, r3
 8008684:	480b      	ldr	r0, [pc, #44]	; (80086b4 <HAL_CAN_MspInit+0x94>)
 8008686:	f000 fd61 	bl	800914c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800868a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800868e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008690:	2302      	movs	r3, #2
 8008692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008694:	2303      	movs	r3, #3
 8008696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008698:	f107 0310 	add.w	r3, r7, #16
 800869c:	4619      	mov	r1, r3
 800869e:	4805      	ldr	r0, [pc, #20]	; (80086b4 <HAL_CAN_MspInit+0x94>)
 80086a0:	f000 fd54 	bl	800914c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80086a4:	bf00      	nop
 80086a6:	3720      	adds	r7, #32
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	40006400 	.word	0x40006400
 80086b0:	40021000 	.word	0x40021000
 80086b4:	40010800 	.word	0x40010800

080086b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086c0:	f107 0310 	add.w	r3, r7, #16
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	605a      	str	r2, [r3, #4]
 80086ca:	609a      	str	r2, [r3, #8]
 80086cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a15      	ldr	r2, [pc, #84]	; (8008728 <HAL_I2C_MspInit+0x70>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d123      	bne.n	8008720 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086d8:	4b14      	ldr	r3, [pc, #80]	; (800872c <HAL_I2C_MspInit+0x74>)
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	4a13      	ldr	r2, [pc, #76]	; (800872c <HAL_I2C_MspInit+0x74>)
 80086de:	f043 0308 	orr.w	r3, r3, #8
 80086e2:	6193      	str	r3, [r2, #24]
 80086e4:	4b11      	ldr	r3, [pc, #68]	; (800872c <HAL_I2C_MspInit+0x74>)
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80086f0:	23c0      	movs	r3, #192	; 0xc0
 80086f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80086f4:	2312      	movs	r3, #18
 80086f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80086f8:	2303      	movs	r3, #3
 80086fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086fc:	f107 0310 	add.w	r3, r7, #16
 8008700:	4619      	mov	r1, r3
 8008702:	480b      	ldr	r0, [pc, #44]	; (8008730 <HAL_I2C_MspInit+0x78>)
 8008704:	f000 fd22 	bl	800914c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008708:	4b08      	ldr	r3, [pc, #32]	; (800872c <HAL_I2C_MspInit+0x74>)
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	4a07      	ldr	r2, [pc, #28]	; (800872c <HAL_I2C_MspInit+0x74>)
 800870e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008712:	61d3      	str	r3, [r2, #28]
 8008714:	4b05      	ldr	r3, [pc, #20]	; (800872c <HAL_I2C_MspInit+0x74>)
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800871c:	60bb      	str	r3, [r7, #8]
 800871e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008720:	bf00      	nop
 8008722:	3720      	adds	r7, #32
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	40005400 	.word	0x40005400
 800872c:	40021000 	.word	0x40021000
 8008730:	40010c00 	.word	0x40010c00

08008734 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a0a      	ldr	r2, [pc, #40]	; (800876c <HAL_I2C_MspDeInit+0x38>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d10d      	bne.n	8008762 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008746:	4b0a      	ldr	r3, [pc, #40]	; (8008770 <HAL_I2C_MspDeInit+0x3c>)
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	4a09      	ldr	r2, [pc, #36]	; (8008770 <HAL_I2C_MspDeInit+0x3c>)
 800874c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008750:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008752:	2140      	movs	r1, #64	; 0x40
 8008754:	4807      	ldr	r0, [pc, #28]	; (8008774 <HAL_I2C_MspDeInit+0x40>)
 8008756:	f000 fe8d 	bl	8009474 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800875a:	2180      	movs	r1, #128	; 0x80
 800875c:	4805      	ldr	r0, [pc, #20]	; (8008774 <HAL_I2C_MspDeInit+0x40>)
 800875e:	f000 fe89 	bl	8009474 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	40005400 	.word	0x40005400
 8008770:	40021000 	.word	0x40021000
 8008774:	40010c00 	.word	0x40010c00

08008778 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a0d      	ldr	r2, [pc, #52]	; (80087bc <HAL_TIM_Base_MspInit+0x44>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d113      	bne.n	80087b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800878a:	4b0d      	ldr	r3, [pc, #52]	; (80087c0 <HAL_TIM_Base_MspInit+0x48>)
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	4a0c      	ldr	r2, [pc, #48]	; (80087c0 <HAL_TIM_Base_MspInit+0x48>)
 8008790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008794:	6193      	str	r3, [r2, #24]
 8008796:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <HAL_TIM_Base_MspInit+0x48>)
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800879e:	60fb      	str	r3, [r7, #12]
 80087a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80087a2:	2200      	movs	r2, #0
 80087a4:	2100      	movs	r1, #0
 80087a6:	2019      	movs	r0, #25
 80087a8:	f000 fb57 	bl	8008e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80087ac:	2019      	movs	r0, #25
 80087ae:	f000 fb70 	bl	8008e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80087b2:	bf00      	nop
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	40012c00 	.word	0x40012c00
 80087c0:	40021000 	.word	0x40021000

080087c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b088      	sub	sp, #32
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087cc:	f107 0310 	add.w	r3, r7, #16
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	605a      	str	r2, [r3, #4]
 80087d6:	609a      	str	r2, [r3, #8]
 80087d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a20      	ldr	r2, [pc, #128]	; (8008860 <HAL_UART_MspInit+0x9c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d139      	bne.n	8008858 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80087e4:	4b1f      	ldr	r3, [pc, #124]	; (8008864 <HAL_UART_MspInit+0xa0>)
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	4a1e      	ldr	r2, [pc, #120]	; (8008864 <HAL_UART_MspInit+0xa0>)
 80087ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087ee:	6193      	str	r3, [r2, #24]
 80087f0:	4b1c      	ldr	r3, [pc, #112]	; (8008864 <HAL_UART_MspInit+0xa0>)
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087f8:	60fb      	str	r3, [r7, #12]
 80087fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087fc:	4b19      	ldr	r3, [pc, #100]	; (8008864 <HAL_UART_MspInit+0xa0>)
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	4a18      	ldr	r2, [pc, #96]	; (8008864 <HAL_UART_MspInit+0xa0>)
 8008802:	f043 0304 	orr.w	r3, r3, #4
 8008806:	6193      	str	r3, [r2, #24]
 8008808:	4b16      	ldr	r3, [pc, #88]	; (8008864 <HAL_UART_MspInit+0xa0>)
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	60bb      	str	r3, [r7, #8]
 8008812:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008818:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800881a:	2302      	movs	r3, #2
 800881c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800881e:	2303      	movs	r3, #3
 8008820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008822:	f107 0310 	add.w	r3, r7, #16
 8008826:	4619      	mov	r1, r3
 8008828:	480f      	ldr	r0, [pc, #60]	; (8008868 <HAL_UART_MspInit+0xa4>)
 800882a:	f000 fc8f 	bl	800914c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800882e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008834:	2300      	movs	r3, #0
 8008836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008838:	2300      	movs	r3, #0
 800883a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800883c:	f107 0310 	add.w	r3, r7, #16
 8008840:	4619      	mov	r1, r3
 8008842:	4809      	ldr	r0, [pc, #36]	; (8008868 <HAL_UART_MspInit+0xa4>)
 8008844:	f000 fc82 	bl	800914c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008848:	2200      	movs	r2, #0
 800884a:	2100      	movs	r1, #0
 800884c:	2025      	movs	r0, #37	; 0x25
 800884e:	f000 fb04 	bl	8008e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008852:	2025      	movs	r0, #37	; 0x25
 8008854:	f000 fb1d 	bl	8008e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008858:	bf00      	nop
 800885a:	3720      	adds	r7, #32
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	40013800 	.word	0x40013800
 8008864:	40021000 	.word	0x40021000
 8008868:	40010800 	.word	0x40010800

0800886c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008870:	e7fe      	b.n	8008870 <NMI_Handler+0x4>

08008872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008872:	b480      	push	{r7}
 8008874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008876:	e7fe      	b.n	8008876 <HardFault_Handler+0x4>

08008878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800887c:	e7fe      	b.n	800887c <MemManage_Handler+0x4>

0800887e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800887e:	b480      	push	{r7}
 8008880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008882:	e7fe      	b.n	8008882 <BusFault_Handler+0x4>

08008884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008884:	b480      	push	{r7}
 8008886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008888:	e7fe      	b.n	8008888 <UsageFault_Handler+0x4>

0800888a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800888a:	b480      	push	{r7}
 800888c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800888e:	bf00      	nop
 8008890:	46bd      	mov	sp, r7
 8008892:	bc80      	pop	{r7}
 8008894:	4770      	bx	lr

08008896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008896:	b480      	push	{r7}
 8008898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800889a:	bf00      	nop
 800889c:	46bd      	mov	sp, r7
 800889e:	bc80      	pop	{r7}
 80088a0:	4770      	bx	lr

080088a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80088a2:	b480      	push	{r7}
 80088a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80088a6:	bf00      	nop
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bc80      	pop	{r7}
 80088ac:	4770      	bx	lr

080088ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088b2:	f000 f8bf 	bl	8008a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088b6:	bf00      	nop
 80088b8:	bd80      	pop	{r7, pc}
	...

080088bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80088c0:	4802      	ldr	r0, [pc, #8]	; (80088cc <TIM1_UP_IRQHandler+0x10>)
 80088c2:	f002 fdcd 	bl	800b460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80088c6:	bf00      	nop
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	200003fc 	.word	0x200003fc

080088d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80088d4:	4802      	ldr	r0, [pc, #8]	; (80088e0 <USART1_IRQHandler+0x10>)
 80088d6:	f003 f9cb 	bl	800bc70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80088da:	bf00      	nop
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	20000444 	.word	0x20000444

080088e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80088ec:	4a14      	ldr	r2, [pc, #80]	; (8008940 <_sbrk+0x5c>)
 80088ee:	4b15      	ldr	r3, [pc, #84]	; (8008944 <_sbrk+0x60>)
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80088f8:	4b13      	ldr	r3, [pc, #76]	; (8008948 <_sbrk+0x64>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d102      	bne.n	8008906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008900:	4b11      	ldr	r3, [pc, #68]	; (8008948 <_sbrk+0x64>)
 8008902:	4a12      	ldr	r2, [pc, #72]	; (800894c <_sbrk+0x68>)
 8008904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008906:	4b10      	ldr	r3, [pc, #64]	; (8008948 <_sbrk+0x64>)
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4413      	add	r3, r2
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	429a      	cmp	r2, r3
 8008912:	d207      	bcs.n	8008924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008914:	f003 ffe6 	bl	800c8e4 <__errno>
 8008918:	4603      	mov	r3, r0
 800891a:	220c      	movs	r2, #12
 800891c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800891e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008922:	e009      	b.n	8008938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008924:	4b08      	ldr	r3, [pc, #32]	; (8008948 <_sbrk+0x64>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800892a:	4b07      	ldr	r3, [pc, #28]	; (8008948 <_sbrk+0x64>)
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4413      	add	r3, r2
 8008932:	4a05      	ldr	r2, [pc, #20]	; (8008948 <_sbrk+0x64>)
 8008934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008936:	68fb      	ldr	r3, [r7, #12]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	2000c000 	.word	0x2000c000
 8008944:	00000400 	.word	0x00000400
 8008948:	2000048c 	.word	0x2000048c
 800894c:	200005e0 	.word	0x200005e0

08008950 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008954:	bf00      	nop
 8008956:	46bd      	mov	sp, r7
 8008958:	bc80      	pop	{r7}
 800895a:	4770      	bx	lr

0800895c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800895c:	480c      	ldr	r0, [pc, #48]	; (8008990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800895e:	490d      	ldr	r1, [pc, #52]	; (8008994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008960:	4a0d      	ldr	r2, [pc, #52]	; (8008998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008964:	e002      	b.n	800896c <LoopCopyDataInit>

08008966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800896a:	3304      	adds	r3, #4

0800896c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800896c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800896e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008970:	d3f9      	bcc.n	8008966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008972:	4a0a      	ldr	r2, [pc, #40]	; (800899c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008974:	4c0a      	ldr	r4, [pc, #40]	; (80089a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008978:	e001      	b.n	800897e <LoopFillZerobss>

0800897a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800897a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800897c:	3204      	adds	r2, #4

0800897e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800897e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008980:	d3fb      	bcc.n	800897a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008982:	f7ff ffe5 	bl	8008950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008986:	f003 ffb3 	bl	800c8f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800898a:	f7ff fb9d 	bl	80080c8 <main>
  bx lr
 800898e:	4770      	bx	lr
  ldr r0, =_sdata
 8008990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008994:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8008998:	0800e0a4 	.word	0x0800e0a4
  ldr r2, =_sbss
 800899c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80089a0:	200005dc 	.word	0x200005dc

080089a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80089a4:	e7fe      	b.n	80089a4 <ADC1_2_IRQHandler>
	...

080089a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80089ac:	4b08      	ldr	r3, [pc, #32]	; (80089d0 <HAL_Init+0x28>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a07      	ldr	r2, [pc, #28]	; (80089d0 <HAL_Init+0x28>)
 80089b2:	f043 0310 	orr.w	r3, r3, #16
 80089b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80089b8:	2003      	movs	r0, #3
 80089ba:	f000 fa43 	bl	8008e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80089be:	200f      	movs	r0, #15
 80089c0:	f000 f808 	bl	80089d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80089c4:	f7ff fdfa 	bl	80085bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	40022000 	.word	0x40022000

080089d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80089dc:	4b12      	ldr	r3, [pc, #72]	; (8008a28 <HAL_InitTick+0x54>)
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	4b12      	ldr	r3, [pc, #72]	; (8008a2c <HAL_InitTick+0x58>)
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	4619      	mov	r1, r3
 80089e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80089ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fa5b 	bl	8008eae <HAL_SYSTICK_Config>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e00e      	b.n	8008a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b0f      	cmp	r3, #15
 8008a06:	d80a      	bhi.n	8008a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a08:	2200      	movs	r2, #0
 8008a0a:	6879      	ldr	r1, [r7, #4]
 8008a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a10:	f000 fa23 	bl	8008e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a14:	4a06      	ldr	r2, [pc, #24]	; (8008a30 <HAL_InitTick+0x5c>)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e000      	b.n	8008a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	200000a0 	.word	0x200000a0
 8008a2c:	200000a8 	.word	0x200000a8
 8008a30:	200000a4 	.word	0x200000a4

08008a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a34:	b480      	push	{r7}
 8008a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a38:	4b05      	ldr	r3, [pc, #20]	; (8008a50 <HAL_IncTick+0x1c>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	4b05      	ldr	r3, [pc, #20]	; (8008a54 <HAL_IncTick+0x20>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4413      	add	r3, r2
 8008a44:	4a03      	ldr	r2, [pc, #12]	; (8008a54 <HAL_IncTick+0x20>)
 8008a46:	6013      	str	r3, [r2, #0]
}
 8008a48:	bf00      	nop
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bc80      	pop	{r7}
 8008a4e:	4770      	bx	lr
 8008a50:	200000a8 	.word	0x200000a8
 8008a54:	20000490 	.word	0x20000490

08008a58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8008a5c:	4b02      	ldr	r3, [pc, #8]	; (8008a68 <HAL_GetTick+0x10>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bc80      	pop	{r7}
 8008a66:	4770      	bx	lr
 8008a68:	20000490 	.word	0x20000490

08008a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008a74:	f7ff fff0 	bl	8008a58 <HAL_GetTick>
 8008a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a84:	d005      	beq.n	8008a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008a86:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <HAL_Delay+0x44>)
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4413      	add	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008a92:	bf00      	nop
 8008a94:	f7ff ffe0 	bl	8008a58 <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d8f7      	bhi.n	8008a94 <HAL_Delay+0x28>
  {
  }
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	200000a8 	.word	0x200000a8

08008ab4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e0ed      	b.n	8008ca2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d102      	bne.n	8008ad8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff fda4 	bl	8008620 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f042 0201 	orr.w	r2, r2, #1
 8008ae6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ae8:	f7ff ffb6 	bl	8008a58 <HAL_GetTick>
 8008aec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008aee:	e012      	b.n	8008b16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008af0:	f7ff ffb2 	bl	8008a58 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b0a      	cmp	r3, #10
 8008afc:	d90b      	bls.n	8008b16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2205      	movs	r2, #5
 8008b0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e0c5      	b.n	8008ca2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d0e5      	beq.n	8008af0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f022 0202 	bic.w	r2, r2, #2
 8008b32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b34:	f7ff ff90 	bl	8008a58 <HAL_GetTick>
 8008b38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008b3a:	e012      	b.n	8008b62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008b3c:	f7ff ff8c 	bl	8008a58 <HAL_GetTick>
 8008b40:	4602      	mov	r2, r0
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	2b0a      	cmp	r3, #10
 8008b48:	d90b      	bls.n	8008b62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2205      	movs	r2, #5
 8008b5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e09f      	b.n	8008ca2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f003 0302 	and.w	r3, r3, #2
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e5      	bne.n	8008b3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	7e1b      	ldrb	r3, [r3, #24]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d108      	bne.n	8008b8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	e007      	b.n	8008b9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	7e5b      	ldrb	r3, [r3, #25]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d108      	bne.n	8008bb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	e007      	b.n	8008bc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	7e9b      	ldrb	r3, [r3, #26]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d108      	bne.n	8008bde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f042 0220 	orr.w	r2, r2, #32
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	e007      	b.n	8008bee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f022 0220 	bic.w	r2, r2, #32
 8008bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	7edb      	ldrb	r3, [r3, #27]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d108      	bne.n	8008c08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 0210 	bic.w	r2, r2, #16
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	e007      	b.n	8008c18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f042 0210 	orr.w	r2, r2, #16
 8008c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	7f1b      	ldrb	r3, [r3, #28]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d108      	bne.n	8008c32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f042 0208 	orr.w	r2, r2, #8
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	e007      	b.n	8008c42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f022 0208 	bic.w	r2, r2, #8
 8008c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	7f5b      	ldrb	r3, [r3, #29]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d108      	bne.n	8008c5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f042 0204 	orr.w	r2, r2, #4
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	e007      	b.n	8008c6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f022 0204 	bic.w	r2, r2, #4
 8008c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	689a      	ldr	r2, [r3, #8]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	431a      	orrs	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	695b      	ldr	r3, [r3, #20]
 8008c80:	ea42 0103 	orr.w	r1, r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	1e5a      	subs	r2, r3, #1
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	430a      	orrs	r2, r1
 8008c90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
	...

08008cac <__NVIC_SetPriorityGrouping>:
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008cbc:	4b0c      	ldr	r3, [pc, #48]	; (8008cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008cc8:	4013      	ands	r3, r2
 8008cca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008cde:	4a04      	ldr	r2, [pc, #16]	; (8008cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	60d3      	str	r3, [r2, #12]
}
 8008ce4:	bf00      	nop
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bc80      	pop	{r7}
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	e000ed00 	.word	0xe000ed00

08008cf4 <__NVIC_GetPriorityGrouping>:
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008cf8:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <__NVIC_GetPriorityGrouping+0x18>)
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	0a1b      	lsrs	r3, r3, #8
 8008cfe:	f003 0307 	and.w	r3, r3, #7
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bc80      	pop	{r7}
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	e000ed00 	.word	0xe000ed00

08008d10 <__NVIC_EnableIRQ>:
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	db0b      	blt.n	8008d3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	f003 021f 	and.w	r2, r3, #31
 8008d28:	4906      	ldr	r1, [pc, #24]	; (8008d44 <__NVIC_EnableIRQ+0x34>)
 8008d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d2e:	095b      	lsrs	r3, r3, #5
 8008d30:	2001      	movs	r0, #1
 8008d32:	fa00 f202 	lsl.w	r2, r0, r2
 8008d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008d3a:	bf00      	nop
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bc80      	pop	{r7}
 8008d42:	4770      	bx	lr
 8008d44:	e000e100 	.word	0xe000e100

08008d48 <__NVIC_SetPriority>:
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	6039      	str	r1, [r7, #0]
 8008d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	db0a      	blt.n	8008d72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	490c      	ldr	r1, [pc, #48]	; (8008d94 <__NVIC_SetPriority+0x4c>)
 8008d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d66:	0112      	lsls	r2, r2, #4
 8008d68:	b2d2      	uxtb	r2, r2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008d70:	e00a      	b.n	8008d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	4908      	ldr	r1, [pc, #32]	; (8008d98 <__NVIC_SetPriority+0x50>)
 8008d78:	79fb      	ldrb	r3, [r7, #7]
 8008d7a:	f003 030f 	and.w	r3, r3, #15
 8008d7e:	3b04      	subs	r3, #4
 8008d80:	0112      	lsls	r2, r2, #4
 8008d82:	b2d2      	uxtb	r2, r2
 8008d84:	440b      	add	r3, r1
 8008d86:	761a      	strb	r2, [r3, #24]
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bc80      	pop	{r7}
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	e000e100 	.word	0xe000e100
 8008d98:	e000ed00 	.word	0xe000ed00

08008d9c <NVIC_EncodePriority>:
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b089      	sub	sp, #36	; 0x24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f003 0307 	and.w	r3, r3, #7
 8008dae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	f1c3 0307 	rsb	r3, r3, #7
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	bf28      	it	cs
 8008dba:	2304      	movcs	r3, #4
 8008dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	2b06      	cmp	r3, #6
 8008dc4:	d902      	bls.n	8008dcc <NVIC_EncodePriority+0x30>
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	3b03      	subs	r3, #3
 8008dca:	e000      	b.n	8008dce <NVIC_EncodePriority+0x32>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dda:	43da      	mvns	r2, r3
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	401a      	ands	r2, r3
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008de4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	fa01 f303 	lsl.w	r3, r1, r3
 8008dee:	43d9      	mvns	r1, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008df4:	4313      	orrs	r3, r2
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3724      	adds	r7, #36	; 0x24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bc80      	pop	{r7}
 8008dfe:	4770      	bx	lr

08008e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e10:	d301      	bcc.n	8008e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008e12:	2301      	movs	r3, #1
 8008e14:	e00f      	b.n	8008e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e16:	4a0a      	ldr	r2, [pc, #40]	; (8008e40 <SysTick_Config+0x40>)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008e1e:	210f      	movs	r1, #15
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e24:	f7ff ff90 	bl	8008d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e28:	4b05      	ldr	r3, [pc, #20]	; (8008e40 <SysTick_Config+0x40>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e2e:	4b04      	ldr	r3, [pc, #16]	; (8008e40 <SysTick_Config+0x40>)
 8008e30:	2207      	movs	r2, #7
 8008e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	e000e010 	.word	0xe000e010

08008e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7ff ff2d 	bl	8008cac <__NVIC_SetPriorityGrouping>
}
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b086      	sub	sp, #24
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	4603      	mov	r3, r0
 8008e62:	60b9      	str	r1, [r7, #8]
 8008e64:	607a      	str	r2, [r7, #4]
 8008e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008e6c:	f7ff ff42 	bl	8008cf4 <__NVIC_GetPriorityGrouping>
 8008e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	68b9      	ldr	r1, [r7, #8]
 8008e76:	6978      	ldr	r0, [r7, #20]
 8008e78:	f7ff ff90 	bl	8008d9c <NVIC_EncodePriority>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e82:	4611      	mov	r1, r2
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7ff ff5f 	bl	8008d48 <__NVIC_SetPriority>
}
 8008e8a:	bf00      	nop
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	4603      	mov	r3, r0
 8008e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7ff ff35 	bl	8008d10 <__NVIC_EnableIRQ>
}
 8008ea6:	bf00      	nop
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7ff ffa2 	bl	8008e00 <SysTick_Config>
 8008ebc:	4603      	mov	r3, r0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b085      	sub	sp, #20
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d008      	beq.n	8008ef0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2204      	movs	r2, #4
 8008ee2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e020      	b.n	8008f32 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f022 020e 	bic.w	r2, r2, #14
 8008efe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0201 	bic.w	r2, r2, #1
 8008f0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f18:	2101      	movs	r1, #1
 8008f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8008f1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bc80      	pop	{r7}
 8008f3a:	4770      	bx	lr

08008f3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d005      	beq.n	8008f60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2204      	movs	r2, #4
 8008f58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	73fb      	strb	r3, [r7, #15]
 8008f5e:	e0d6      	b.n	800910e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f022 020e 	bic.w	r2, r2, #14
 8008f6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f022 0201 	bic.w	r2, r2, #1
 8008f7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	4b64      	ldr	r3, [pc, #400]	; (8009118 <HAL_DMA_Abort_IT+0x1dc>)
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d958      	bls.n	800903e <HAL_DMA_Abort_IT+0x102>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a62      	ldr	r2, [pc, #392]	; (800911c <HAL_DMA_Abort_IT+0x1e0>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d04f      	beq.n	8009036 <HAL_DMA_Abort_IT+0xfa>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a61      	ldr	r2, [pc, #388]	; (8009120 <HAL_DMA_Abort_IT+0x1e4>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d048      	beq.n	8009032 <HAL_DMA_Abort_IT+0xf6>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a5f      	ldr	r2, [pc, #380]	; (8009124 <HAL_DMA_Abort_IT+0x1e8>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d040      	beq.n	800902c <HAL_DMA_Abort_IT+0xf0>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a5e      	ldr	r2, [pc, #376]	; (8009128 <HAL_DMA_Abort_IT+0x1ec>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d038      	beq.n	8009026 <HAL_DMA_Abort_IT+0xea>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a5c      	ldr	r2, [pc, #368]	; (800912c <HAL_DMA_Abort_IT+0x1f0>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d030      	beq.n	8009020 <HAL_DMA_Abort_IT+0xe4>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a5b      	ldr	r2, [pc, #364]	; (8009130 <HAL_DMA_Abort_IT+0x1f4>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d028      	beq.n	800901a <HAL_DMA_Abort_IT+0xde>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a52      	ldr	r2, [pc, #328]	; (8009118 <HAL_DMA_Abort_IT+0x1dc>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d020      	beq.n	8009014 <HAL_DMA_Abort_IT+0xd8>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a57      	ldr	r2, [pc, #348]	; (8009134 <HAL_DMA_Abort_IT+0x1f8>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d019      	beq.n	8009010 <HAL_DMA_Abort_IT+0xd4>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a55      	ldr	r2, [pc, #340]	; (8009138 <HAL_DMA_Abort_IT+0x1fc>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d012      	beq.n	800900c <HAL_DMA_Abort_IT+0xd0>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a54      	ldr	r2, [pc, #336]	; (800913c <HAL_DMA_Abort_IT+0x200>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d00a      	beq.n	8009006 <HAL_DMA_Abort_IT+0xca>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a52      	ldr	r2, [pc, #328]	; (8009140 <HAL_DMA_Abort_IT+0x204>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d102      	bne.n	8009000 <HAL_DMA_Abort_IT+0xc4>
 8008ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ffe:	e01b      	b.n	8009038 <HAL_DMA_Abort_IT+0xfc>
 8009000:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009004:	e018      	b.n	8009038 <HAL_DMA_Abort_IT+0xfc>
 8009006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800900a:	e015      	b.n	8009038 <HAL_DMA_Abort_IT+0xfc>
 800900c:	2310      	movs	r3, #16
 800900e:	e013      	b.n	8009038 <HAL_DMA_Abort_IT+0xfc>
 8009010:	2301      	movs	r3, #1
 8009012:	e011      	b.n	8009038 <HAL_DMA_Abort_IT+0xfc>
 8009014:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009018:	e00e      	b.n	8009038 <HAL_DMA_Abort_IT+0xfc>
 800901a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800901e:	e00b      	b.n	8009038 <HAL_DMA_Abort_IT+0xfc>
 8009020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009024:	e008      	b.n	8009038 <HAL_DMA_Abort_IT+0xfc>
 8009026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800902a:	e005      	b.n	8009038 <HAL_DMA_Abort_IT+0xfc>
 800902c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009030:	e002      	b.n	8009038 <HAL_DMA_Abort_IT+0xfc>
 8009032:	2310      	movs	r3, #16
 8009034:	e000      	b.n	8009038 <HAL_DMA_Abort_IT+0xfc>
 8009036:	2301      	movs	r3, #1
 8009038:	4a42      	ldr	r2, [pc, #264]	; (8009144 <HAL_DMA_Abort_IT+0x208>)
 800903a:	6053      	str	r3, [r2, #4]
 800903c:	e057      	b.n	80090ee <HAL_DMA_Abort_IT+0x1b2>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a36      	ldr	r2, [pc, #216]	; (800911c <HAL_DMA_Abort_IT+0x1e0>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d04f      	beq.n	80090e8 <HAL_DMA_Abort_IT+0x1ac>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a34      	ldr	r2, [pc, #208]	; (8009120 <HAL_DMA_Abort_IT+0x1e4>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d048      	beq.n	80090e4 <HAL_DMA_Abort_IT+0x1a8>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a33      	ldr	r2, [pc, #204]	; (8009124 <HAL_DMA_Abort_IT+0x1e8>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d040      	beq.n	80090de <HAL_DMA_Abort_IT+0x1a2>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a31      	ldr	r2, [pc, #196]	; (8009128 <HAL_DMA_Abort_IT+0x1ec>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d038      	beq.n	80090d8 <HAL_DMA_Abort_IT+0x19c>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a30      	ldr	r2, [pc, #192]	; (800912c <HAL_DMA_Abort_IT+0x1f0>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d030      	beq.n	80090d2 <HAL_DMA_Abort_IT+0x196>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a2e      	ldr	r2, [pc, #184]	; (8009130 <HAL_DMA_Abort_IT+0x1f4>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d028      	beq.n	80090cc <HAL_DMA_Abort_IT+0x190>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a26      	ldr	r2, [pc, #152]	; (8009118 <HAL_DMA_Abort_IT+0x1dc>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d020      	beq.n	80090c6 <HAL_DMA_Abort_IT+0x18a>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a2a      	ldr	r2, [pc, #168]	; (8009134 <HAL_DMA_Abort_IT+0x1f8>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d019      	beq.n	80090c2 <HAL_DMA_Abort_IT+0x186>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a29      	ldr	r2, [pc, #164]	; (8009138 <HAL_DMA_Abort_IT+0x1fc>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d012      	beq.n	80090be <HAL_DMA_Abort_IT+0x182>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a27      	ldr	r2, [pc, #156]	; (800913c <HAL_DMA_Abort_IT+0x200>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d00a      	beq.n	80090b8 <HAL_DMA_Abort_IT+0x17c>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a26      	ldr	r2, [pc, #152]	; (8009140 <HAL_DMA_Abort_IT+0x204>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d102      	bne.n	80090b2 <HAL_DMA_Abort_IT+0x176>
 80090ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090b0:	e01b      	b.n	80090ea <HAL_DMA_Abort_IT+0x1ae>
 80090b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80090b6:	e018      	b.n	80090ea <HAL_DMA_Abort_IT+0x1ae>
 80090b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090bc:	e015      	b.n	80090ea <HAL_DMA_Abort_IT+0x1ae>
 80090be:	2310      	movs	r3, #16
 80090c0:	e013      	b.n	80090ea <HAL_DMA_Abort_IT+0x1ae>
 80090c2:	2301      	movs	r3, #1
 80090c4:	e011      	b.n	80090ea <HAL_DMA_Abort_IT+0x1ae>
 80090c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090ca:	e00e      	b.n	80090ea <HAL_DMA_Abort_IT+0x1ae>
 80090cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80090d0:	e00b      	b.n	80090ea <HAL_DMA_Abort_IT+0x1ae>
 80090d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80090d6:	e008      	b.n	80090ea <HAL_DMA_Abort_IT+0x1ae>
 80090d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090dc:	e005      	b.n	80090ea <HAL_DMA_Abort_IT+0x1ae>
 80090de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e2:	e002      	b.n	80090ea <HAL_DMA_Abort_IT+0x1ae>
 80090e4:	2310      	movs	r3, #16
 80090e6:	e000      	b.n	80090ea <HAL_DMA_Abort_IT+0x1ae>
 80090e8:	2301      	movs	r3, #1
 80090ea:	4a17      	ldr	r2, [pc, #92]	; (8009148 <HAL_DMA_Abort_IT+0x20c>)
 80090ec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	4798      	blx	r3
    } 
  }
  return status;
 800910e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	40020080 	.word	0x40020080
 800911c:	40020008 	.word	0x40020008
 8009120:	4002001c 	.word	0x4002001c
 8009124:	40020030 	.word	0x40020030
 8009128:	40020044 	.word	0x40020044
 800912c:	40020058 	.word	0x40020058
 8009130:	4002006c 	.word	0x4002006c
 8009134:	40020408 	.word	0x40020408
 8009138:	4002041c 	.word	0x4002041c
 800913c:	40020430 	.word	0x40020430
 8009140:	40020444 	.word	0x40020444
 8009144:	40020400 	.word	0x40020400
 8009148:	40020000 	.word	0x40020000

0800914c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800914c:	b480      	push	{r7}
 800914e:	b08b      	sub	sp, #44	; 0x2c
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009156:	2300      	movs	r3, #0
 8009158:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800915a:	2300      	movs	r3, #0
 800915c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800915e:	e179      	b.n	8009454 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009160:	2201      	movs	r2, #1
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	fa02 f303 	lsl.w	r3, r2, r3
 8009168:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	69fa      	ldr	r2, [r7, #28]
 8009170:	4013      	ands	r3, r2
 8009172:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	429a      	cmp	r2, r3
 800917a:	f040 8168 	bne.w	800944e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	4a96      	ldr	r2, [pc, #600]	; (80093dc <HAL_GPIO_Init+0x290>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d05e      	beq.n	8009246 <HAL_GPIO_Init+0xfa>
 8009188:	4a94      	ldr	r2, [pc, #592]	; (80093dc <HAL_GPIO_Init+0x290>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d875      	bhi.n	800927a <HAL_GPIO_Init+0x12e>
 800918e:	4a94      	ldr	r2, [pc, #592]	; (80093e0 <HAL_GPIO_Init+0x294>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d058      	beq.n	8009246 <HAL_GPIO_Init+0xfa>
 8009194:	4a92      	ldr	r2, [pc, #584]	; (80093e0 <HAL_GPIO_Init+0x294>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d86f      	bhi.n	800927a <HAL_GPIO_Init+0x12e>
 800919a:	4a92      	ldr	r2, [pc, #584]	; (80093e4 <HAL_GPIO_Init+0x298>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d052      	beq.n	8009246 <HAL_GPIO_Init+0xfa>
 80091a0:	4a90      	ldr	r2, [pc, #576]	; (80093e4 <HAL_GPIO_Init+0x298>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d869      	bhi.n	800927a <HAL_GPIO_Init+0x12e>
 80091a6:	4a90      	ldr	r2, [pc, #576]	; (80093e8 <HAL_GPIO_Init+0x29c>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d04c      	beq.n	8009246 <HAL_GPIO_Init+0xfa>
 80091ac:	4a8e      	ldr	r2, [pc, #568]	; (80093e8 <HAL_GPIO_Init+0x29c>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d863      	bhi.n	800927a <HAL_GPIO_Init+0x12e>
 80091b2:	4a8e      	ldr	r2, [pc, #568]	; (80093ec <HAL_GPIO_Init+0x2a0>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d046      	beq.n	8009246 <HAL_GPIO_Init+0xfa>
 80091b8:	4a8c      	ldr	r2, [pc, #560]	; (80093ec <HAL_GPIO_Init+0x2a0>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d85d      	bhi.n	800927a <HAL_GPIO_Init+0x12e>
 80091be:	2b12      	cmp	r3, #18
 80091c0:	d82a      	bhi.n	8009218 <HAL_GPIO_Init+0xcc>
 80091c2:	2b12      	cmp	r3, #18
 80091c4:	d859      	bhi.n	800927a <HAL_GPIO_Init+0x12e>
 80091c6:	a201      	add	r2, pc, #4	; (adr r2, 80091cc <HAL_GPIO_Init+0x80>)
 80091c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091cc:	08009247 	.word	0x08009247
 80091d0:	08009221 	.word	0x08009221
 80091d4:	08009233 	.word	0x08009233
 80091d8:	08009275 	.word	0x08009275
 80091dc:	0800927b 	.word	0x0800927b
 80091e0:	0800927b 	.word	0x0800927b
 80091e4:	0800927b 	.word	0x0800927b
 80091e8:	0800927b 	.word	0x0800927b
 80091ec:	0800927b 	.word	0x0800927b
 80091f0:	0800927b 	.word	0x0800927b
 80091f4:	0800927b 	.word	0x0800927b
 80091f8:	0800927b 	.word	0x0800927b
 80091fc:	0800927b 	.word	0x0800927b
 8009200:	0800927b 	.word	0x0800927b
 8009204:	0800927b 	.word	0x0800927b
 8009208:	0800927b 	.word	0x0800927b
 800920c:	0800927b 	.word	0x0800927b
 8009210:	08009229 	.word	0x08009229
 8009214:	0800923d 	.word	0x0800923d
 8009218:	4a75      	ldr	r2, [pc, #468]	; (80093f0 <HAL_GPIO_Init+0x2a4>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d013      	beq.n	8009246 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800921e:	e02c      	b.n	800927a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	623b      	str	r3, [r7, #32]
          break;
 8009226:	e029      	b.n	800927c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	3304      	adds	r3, #4
 800922e:	623b      	str	r3, [r7, #32]
          break;
 8009230:	e024      	b.n	800927c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	3308      	adds	r3, #8
 8009238:	623b      	str	r3, [r7, #32]
          break;
 800923a:	e01f      	b.n	800927c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	330c      	adds	r3, #12
 8009242:	623b      	str	r3, [r7, #32]
          break;
 8009244:	e01a      	b.n	800927c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d102      	bne.n	8009254 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800924e:	2304      	movs	r3, #4
 8009250:	623b      	str	r3, [r7, #32]
          break;
 8009252:	e013      	b.n	800927c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d105      	bne.n	8009268 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800925c:	2308      	movs	r3, #8
 800925e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	69fa      	ldr	r2, [r7, #28]
 8009264:	611a      	str	r2, [r3, #16]
          break;
 8009266:	e009      	b.n	800927c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009268:	2308      	movs	r3, #8
 800926a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	69fa      	ldr	r2, [r7, #28]
 8009270:	615a      	str	r2, [r3, #20]
          break;
 8009272:	e003      	b.n	800927c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009274:	2300      	movs	r3, #0
 8009276:	623b      	str	r3, [r7, #32]
          break;
 8009278:	e000      	b.n	800927c <HAL_GPIO_Init+0x130>
          break;
 800927a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	2bff      	cmp	r3, #255	; 0xff
 8009280:	d801      	bhi.n	8009286 <HAL_GPIO_Init+0x13a>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	e001      	b.n	800928a <HAL_GPIO_Init+0x13e>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	3304      	adds	r3, #4
 800928a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	2bff      	cmp	r3, #255	; 0xff
 8009290:	d802      	bhi.n	8009298 <HAL_GPIO_Init+0x14c>
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	e002      	b.n	800929e <HAL_GPIO_Init+0x152>
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	3b08      	subs	r3, #8
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	210f      	movs	r1, #15
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	fa01 f303 	lsl.w	r3, r1, r3
 80092ac:	43db      	mvns	r3, r3
 80092ae:	401a      	ands	r2, r3
 80092b0:	6a39      	ldr	r1, [r7, #32]
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	fa01 f303 	lsl.w	r3, r1, r3
 80092b8:	431a      	orrs	r2, r3
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 80c1 	beq.w	800944e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80092cc:	4b49      	ldr	r3, [pc, #292]	; (80093f4 <HAL_GPIO_Init+0x2a8>)
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	4a48      	ldr	r2, [pc, #288]	; (80093f4 <HAL_GPIO_Init+0x2a8>)
 80092d2:	f043 0301 	orr.w	r3, r3, #1
 80092d6:	6193      	str	r3, [r2, #24]
 80092d8:	4b46      	ldr	r3, [pc, #280]	; (80093f4 <HAL_GPIO_Init+0x2a8>)
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	60bb      	str	r3, [r7, #8]
 80092e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80092e4:	4a44      	ldr	r2, [pc, #272]	; (80093f8 <HAL_GPIO_Init+0x2ac>)
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	089b      	lsrs	r3, r3, #2
 80092ea:	3302      	adds	r3, #2
 80092ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	f003 0303 	and.w	r3, r3, #3
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	220f      	movs	r2, #15
 80092fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009300:	43db      	mvns	r3, r3
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	4013      	ands	r3, r2
 8009306:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a3c      	ldr	r2, [pc, #240]	; (80093fc <HAL_GPIO_Init+0x2b0>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d01f      	beq.n	8009350 <HAL_GPIO_Init+0x204>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a3b      	ldr	r2, [pc, #236]	; (8009400 <HAL_GPIO_Init+0x2b4>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d019      	beq.n	800934c <HAL_GPIO_Init+0x200>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a3a      	ldr	r2, [pc, #232]	; (8009404 <HAL_GPIO_Init+0x2b8>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d013      	beq.n	8009348 <HAL_GPIO_Init+0x1fc>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a39      	ldr	r2, [pc, #228]	; (8009408 <HAL_GPIO_Init+0x2bc>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d00d      	beq.n	8009344 <HAL_GPIO_Init+0x1f8>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a38      	ldr	r2, [pc, #224]	; (800940c <HAL_GPIO_Init+0x2c0>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d007      	beq.n	8009340 <HAL_GPIO_Init+0x1f4>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a37      	ldr	r2, [pc, #220]	; (8009410 <HAL_GPIO_Init+0x2c4>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d101      	bne.n	800933c <HAL_GPIO_Init+0x1f0>
 8009338:	2305      	movs	r3, #5
 800933a:	e00a      	b.n	8009352 <HAL_GPIO_Init+0x206>
 800933c:	2306      	movs	r3, #6
 800933e:	e008      	b.n	8009352 <HAL_GPIO_Init+0x206>
 8009340:	2304      	movs	r3, #4
 8009342:	e006      	b.n	8009352 <HAL_GPIO_Init+0x206>
 8009344:	2303      	movs	r3, #3
 8009346:	e004      	b.n	8009352 <HAL_GPIO_Init+0x206>
 8009348:	2302      	movs	r3, #2
 800934a:	e002      	b.n	8009352 <HAL_GPIO_Init+0x206>
 800934c:	2301      	movs	r3, #1
 800934e:	e000      	b.n	8009352 <HAL_GPIO_Init+0x206>
 8009350:	2300      	movs	r3, #0
 8009352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009354:	f002 0203 	and.w	r2, r2, #3
 8009358:	0092      	lsls	r2, r2, #2
 800935a:	4093      	lsls	r3, r2
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	4313      	orrs	r3, r2
 8009360:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009362:	4925      	ldr	r1, [pc, #148]	; (80093f8 <HAL_GPIO_Init+0x2ac>)
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	089b      	lsrs	r3, r3, #2
 8009368:	3302      	adds	r3, #2
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d006      	beq.n	800938a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800937c:	4b25      	ldr	r3, [pc, #148]	; (8009414 <HAL_GPIO_Init+0x2c8>)
 800937e:	689a      	ldr	r2, [r3, #8]
 8009380:	4924      	ldr	r1, [pc, #144]	; (8009414 <HAL_GPIO_Init+0x2c8>)
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	4313      	orrs	r3, r2
 8009386:	608b      	str	r3, [r1, #8]
 8009388:	e006      	b.n	8009398 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800938a:	4b22      	ldr	r3, [pc, #136]	; (8009414 <HAL_GPIO_Init+0x2c8>)
 800938c:	689a      	ldr	r2, [r3, #8]
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	43db      	mvns	r3, r3
 8009392:	4920      	ldr	r1, [pc, #128]	; (8009414 <HAL_GPIO_Init+0x2c8>)
 8009394:	4013      	ands	r3, r2
 8009396:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d006      	beq.n	80093b2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80093a4:	4b1b      	ldr	r3, [pc, #108]	; (8009414 <HAL_GPIO_Init+0x2c8>)
 80093a6:	68da      	ldr	r2, [r3, #12]
 80093a8:	491a      	ldr	r1, [pc, #104]	; (8009414 <HAL_GPIO_Init+0x2c8>)
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	60cb      	str	r3, [r1, #12]
 80093b0:	e006      	b.n	80093c0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80093b2:	4b18      	ldr	r3, [pc, #96]	; (8009414 <HAL_GPIO_Init+0x2c8>)
 80093b4:	68da      	ldr	r2, [r3, #12]
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	43db      	mvns	r3, r3
 80093ba:	4916      	ldr	r1, [pc, #88]	; (8009414 <HAL_GPIO_Init+0x2c8>)
 80093bc:	4013      	ands	r3, r2
 80093be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d025      	beq.n	8009418 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80093cc:	4b11      	ldr	r3, [pc, #68]	; (8009414 <HAL_GPIO_Init+0x2c8>)
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	4910      	ldr	r1, [pc, #64]	; (8009414 <HAL_GPIO_Init+0x2c8>)
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	604b      	str	r3, [r1, #4]
 80093d8:	e025      	b.n	8009426 <HAL_GPIO_Init+0x2da>
 80093da:	bf00      	nop
 80093dc:	10320000 	.word	0x10320000
 80093e0:	10310000 	.word	0x10310000
 80093e4:	10220000 	.word	0x10220000
 80093e8:	10210000 	.word	0x10210000
 80093ec:	10120000 	.word	0x10120000
 80093f0:	10110000 	.word	0x10110000
 80093f4:	40021000 	.word	0x40021000
 80093f8:	40010000 	.word	0x40010000
 80093fc:	40010800 	.word	0x40010800
 8009400:	40010c00 	.word	0x40010c00
 8009404:	40011000 	.word	0x40011000
 8009408:	40011400 	.word	0x40011400
 800940c:	40011800 	.word	0x40011800
 8009410:	40011c00 	.word	0x40011c00
 8009414:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009418:	4b15      	ldr	r3, [pc, #84]	; (8009470 <HAL_GPIO_Init+0x324>)
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	43db      	mvns	r3, r3
 8009420:	4913      	ldr	r1, [pc, #76]	; (8009470 <HAL_GPIO_Init+0x324>)
 8009422:	4013      	ands	r3, r2
 8009424:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d006      	beq.n	8009440 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009432:	4b0f      	ldr	r3, [pc, #60]	; (8009470 <HAL_GPIO_Init+0x324>)
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	490e      	ldr	r1, [pc, #56]	; (8009470 <HAL_GPIO_Init+0x324>)
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	4313      	orrs	r3, r2
 800943c:	600b      	str	r3, [r1, #0]
 800943e:	e006      	b.n	800944e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009440:	4b0b      	ldr	r3, [pc, #44]	; (8009470 <HAL_GPIO_Init+0x324>)
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	43db      	mvns	r3, r3
 8009448:	4909      	ldr	r1, [pc, #36]	; (8009470 <HAL_GPIO_Init+0x324>)
 800944a:	4013      	ands	r3, r2
 800944c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009450:	3301      	adds	r3, #1
 8009452:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945a:	fa22 f303 	lsr.w	r3, r2, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	f47f ae7e 	bne.w	8009160 <HAL_GPIO_Init+0x14>
  }
}
 8009464:	bf00      	nop
 8009466:	bf00      	nop
 8009468:	372c      	adds	r7, #44	; 0x2c
 800946a:	46bd      	mov	sp, r7
 800946c:	bc80      	pop	{r7}
 800946e:	4770      	bx	lr
 8009470:	40010400 	.word	0x40010400

08009474 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009474:	b480      	push	{r7}
 8009476:	b089      	sub	sp, #36	; 0x24
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800947e:	2300      	movs	r3, #0
 8009480:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009482:	e0a6      	b.n	80095d2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009484:	2201      	movs	r2, #1
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	fa02 f303 	lsl.w	r3, r2, r3
 800948c:	683a      	ldr	r2, [r7, #0]
 800948e:	4013      	ands	r3, r2
 8009490:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 8099 	beq.w	80095cc <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800949a:	4a54      	ldr	r2, [pc, #336]	; (80095ec <HAL_GPIO_DeInit+0x178>)
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	089b      	lsrs	r3, r3, #2
 80094a0:	3302      	adds	r3, #2
 80094a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094a6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	f003 0303 	and.w	r3, r3, #3
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	220f      	movs	r2, #15
 80094b2:	fa02 f303 	lsl.w	r3, r2, r3
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	4013      	ands	r3, r2
 80094ba:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a4c      	ldr	r2, [pc, #304]	; (80095f0 <HAL_GPIO_DeInit+0x17c>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d01f      	beq.n	8009504 <HAL_GPIO_DeInit+0x90>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a4b      	ldr	r2, [pc, #300]	; (80095f4 <HAL_GPIO_DeInit+0x180>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d019      	beq.n	8009500 <HAL_GPIO_DeInit+0x8c>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a4a      	ldr	r2, [pc, #296]	; (80095f8 <HAL_GPIO_DeInit+0x184>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d013      	beq.n	80094fc <HAL_GPIO_DeInit+0x88>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a49      	ldr	r2, [pc, #292]	; (80095fc <HAL_GPIO_DeInit+0x188>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d00d      	beq.n	80094f8 <HAL_GPIO_DeInit+0x84>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a48      	ldr	r2, [pc, #288]	; (8009600 <HAL_GPIO_DeInit+0x18c>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d007      	beq.n	80094f4 <HAL_GPIO_DeInit+0x80>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a47      	ldr	r2, [pc, #284]	; (8009604 <HAL_GPIO_DeInit+0x190>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d101      	bne.n	80094f0 <HAL_GPIO_DeInit+0x7c>
 80094ec:	2305      	movs	r3, #5
 80094ee:	e00a      	b.n	8009506 <HAL_GPIO_DeInit+0x92>
 80094f0:	2306      	movs	r3, #6
 80094f2:	e008      	b.n	8009506 <HAL_GPIO_DeInit+0x92>
 80094f4:	2304      	movs	r3, #4
 80094f6:	e006      	b.n	8009506 <HAL_GPIO_DeInit+0x92>
 80094f8:	2303      	movs	r3, #3
 80094fa:	e004      	b.n	8009506 <HAL_GPIO_DeInit+0x92>
 80094fc:	2302      	movs	r3, #2
 80094fe:	e002      	b.n	8009506 <HAL_GPIO_DeInit+0x92>
 8009500:	2301      	movs	r3, #1
 8009502:	e000      	b.n	8009506 <HAL_GPIO_DeInit+0x92>
 8009504:	2300      	movs	r3, #0
 8009506:	69fa      	ldr	r2, [r7, #28]
 8009508:	f002 0203 	and.w	r2, r2, #3
 800950c:	0092      	lsls	r2, r2, #2
 800950e:	4093      	lsls	r3, r2
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	429a      	cmp	r2, r3
 8009514:	d132      	bne.n	800957c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009516:	4b3c      	ldr	r3, [pc, #240]	; (8009608 <HAL_GPIO_DeInit+0x194>)
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	43db      	mvns	r3, r3
 800951e:	493a      	ldr	r1, [pc, #232]	; (8009608 <HAL_GPIO_DeInit+0x194>)
 8009520:	4013      	ands	r3, r2
 8009522:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009524:	4b38      	ldr	r3, [pc, #224]	; (8009608 <HAL_GPIO_DeInit+0x194>)
 8009526:	685a      	ldr	r2, [r3, #4]
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	43db      	mvns	r3, r3
 800952c:	4936      	ldr	r1, [pc, #216]	; (8009608 <HAL_GPIO_DeInit+0x194>)
 800952e:	4013      	ands	r3, r2
 8009530:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009532:	4b35      	ldr	r3, [pc, #212]	; (8009608 <HAL_GPIO_DeInit+0x194>)
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	43db      	mvns	r3, r3
 800953a:	4933      	ldr	r1, [pc, #204]	; (8009608 <HAL_GPIO_DeInit+0x194>)
 800953c:	4013      	ands	r3, r2
 800953e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009540:	4b31      	ldr	r3, [pc, #196]	; (8009608 <HAL_GPIO_DeInit+0x194>)
 8009542:	689a      	ldr	r2, [r3, #8]
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	43db      	mvns	r3, r3
 8009548:	492f      	ldr	r1, [pc, #188]	; (8009608 <HAL_GPIO_DeInit+0x194>)
 800954a:	4013      	ands	r3, r2
 800954c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	f003 0303 	and.w	r3, r3, #3
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	220f      	movs	r2, #15
 8009558:	fa02 f303 	lsl.w	r3, r2, r3
 800955c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800955e:	4a23      	ldr	r2, [pc, #140]	; (80095ec <HAL_GPIO_DeInit+0x178>)
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	089b      	lsrs	r3, r3, #2
 8009564:	3302      	adds	r3, #2
 8009566:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	43da      	mvns	r2, r3
 800956e:	481f      	ldr	r0, [pc, #124]	; (80095ec <HAL_GPIO_DeInit+0x178>)
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	089b      	lsrs	r3, r3, #2
 8009574:	400a      	ands	r2, r1
 8009576:	3302      	adds	r3, #2
 8009578:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	2bff      	cmp	r3, #255	; 0xff
 8009580:	d801      	bhi.n	8009586 <HAL_GPIO_DeInit+0x112>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	e001      	b.n	800958a <HAL_GPIO_DeInit+0x116>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	3304      	adds	r3, #4
 800958a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	2bff      	cmp	r3, #255	; 0xff
 8009590:	d802      	bhi.n	8009598 <HAL_GPIO_DeInit+0x124>
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	e002      	b.n	800959e <HAL_GPIO_DeInit+0x12a>
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	3b08      	subs	r3, #8
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	210f      	movs	r1, #15
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	fa01 f303 	lsl.w	r3, r1, r3
 80095ac:	43db      	mvns	r3, r3
 80095ae:	401a      	ands	r2, r3
 80095b0:	2104      	movs	r1, #4
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	fa01 f303 	lsl.w	r3, r1, r3
 80095b8:	431a      	orrs	r2, r3
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	43db      	mvns	r3, r3
 80095c6:	401a      	ands	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	60da      	str	r2, [r3, #12]
    }

    position++;
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	3301      	adds	r3, #1
 80095d0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	fa22 f303 	lsr.w	r3, r2, r3
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f47f af52 	bne.w	8009484 <HAL_GPIO_DeInit+0x10>
  }
}
 80095e0:	bf00      	nop
 80095e2:	bf00      	nop
 80095e4:	3724      	adds	r7, #36	; 0x24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bc80      	pop	{r7}
 80095ea:	4770      	bx	lr
 80095ec:	40010000 	.word	0x40010000
 80095f0:	40010800 	.word	0x40010800
 80095f4:	40010c00 	.word	0x40010c00
 80095f8:	40011000 	.word	0x40011000
 80095fc:	40011400 	.word	0x40011400
 8009600:	40011800 	.word	0x40011800
 8009604:	40011c00 	.word	0x40011c00
 8009608:	40010400 	.word	0x40010400

0800960c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	689a      	ldr	r2, [r3, #8]
 800961c:	887b      	ldrh	r3, [r7, #2]
 800961e:	4013      	ands	r3, r2
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009624:	2301      	movs	r3, #1
 8009626:	73fb      	strb	r3, [r7, #15]
 8009628:	e001      	b.n	800962e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800962a:	2300      	movs	r3, #0
 800962c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800962e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3714      	adds	r7, #20
 8009634:	46bd      	mov	sp, r7
 8009636:	bc80      	pop	{r7}
 8009638:	4770      	bx	lr

0800963a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800963a:	b480      	push	{r7}
 800963c:	b083      	sub	sp, #12
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	807b      	strh	r3, [r7, #2]
 8009646:	4613      	mov	r3, r2
 8009648:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800964a:	787b      	ldrb	r3, [r7, #1]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d003      	beq.n	8009658 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009650:	887a      	ldrh	r2, [r7, #2]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009656:	e003      	b.n	8009660 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009658:	887b      	ldrh	r3, [r7, #2]
 800965a:	041a      	lsls	r2, r3, #16
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	611a      	str	r2, [r3, #16]
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	bc80      	pop	{r7}
 8009668:	4770      	bx	lr

0800966a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800966a:	b480      	push	{r7}
 800966c:	b085      	sub	sp, #20
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	460b      	mov	r3, r1
 8009674:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800967c:	887a      	ldrh	r2, [r7, #2]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4013      	ands	r3, r2
 8009682:	041a      	lsls	r2, r3, #16
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	43d9      	mvns	r1, r3
 8009688:	887b      	ldrh	r3, [r7, #2]
 800968a:	400b      	ands	r3, r1
 800968c:	431a      	orrs	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	611a      	str	r2, [r3, #16]
}
 8009692:	bf00      	nop
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	bc80      	pop	{r7}
 800969a:	4770      	bx	lr

0800969c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e12b      	b.n	8009906 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d106      	bne.n	80096c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7fe fff8 	bl	80086b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2224      	movs	r2, #36	; 0x24
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f022 0201 	bic.w	r2, r2, #1
 80096de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80096fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009700:	f001 fdb8 	bl	800b274 <HAL_RCC_GetPCLK1Freq>
 8009704:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	4a81      	ldr	r2, [pc, #516]	; (8009910 <HAL_I2C_Init+0x274>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d807      	bhi.n	8009720 <HAL_I2C_Init+0x84>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4a80      	ldr	r2, [pc, #512]	; (8009914 <HAL_I2C_Init+0x278>)
 8009714:	4293      	cmp	r3, r2
 8009716:	bf94      	ite	ls
 8009718:	2301      	movls	r3, #1
 800971a:	2300      	movhi	r3, #0
 800971c:	b2db      	uxtb	r3, r3
 800971e:	e006      	b.n	800972e <HAL_I2C_Init+0x92>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	4a7d      	ldr	r2, [pc, #500]	; (8009918 <HAL_I2C_Init+0x27c>)
 8009724:	4293      	cmp	r3, r2
 8009726:	bf94      	ite	ls
 8009728:	2301      	movls	r3, #1
 800972a:	2300      	movhi	r3, #0
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e0e7      	b.n	8009906 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	4a78      	ldr	r2, [pc, #480]	; (800991c <HAL_I2C_Init+0x280>)
 800973a:	fba2 2303 	umull	r2, r3, r2, r3
 800973e:	0c9b      	lsrs	r3, r3, #18
 8009740:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	430a      	orrs	r2, r1
 8009754:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6a1b      	ldr	r3, [r3, #32]
 800975c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	4a6a      	ldr	r2, [pc, #424]	; (8009910 <HAL_I2C_Init+0x274>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d802      	bhi.n	8009770 <HAL_I2C_Init+0xd4>
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	3301      	adds	r3, #1
 800976e:	e009      	b.n	8009784 <HAL_I2C_Init+0xe8>
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009776:	fb02 f303 	mul.w	r3, r2, r3
 800977a:	4a69      	ldr	r2, [pc, #420]	; (8009920 <HAL_I2C_Init+0x284>)
 800977c:	fba2 2303 	umull	r2, r3, r2, r3
 8009780:	099b      	lsrs	r3, r3, #6
 8009782:	3301      	adds	r3, #1
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	6812      	ldr	r2, [r2, #0]
 8009788:	430b      	orrs	r3, r1
 800978a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009796:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	495c      	ldr	r1, [pc, #368]	; (8009910 <HAL_I2C_Init+0x274>)
 80097a0:	428b      	cmp	r3, r1
 80097a2:	d819      	bhi.n	80097d8 <HAL_I2C_Init+0x13c>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	1e59      	subs	r1, r3, #1
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80097b2:	1c59      	adds	r1, r3, #1
 80097b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80097b8:	400b      	ands	r3, r1
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00a      	beq.n	80097d4 <HAL_I2C_Init+0x138>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	1e59      	subs	r1, r3, #1
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80097cc:	3301      	adds	r3, #1
 80097ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097d2:	e051      	b.n	8009878 <HAL_I2C_Init+0x1dc>
 80097d4:	2304      	movs	r3, #4
 80097d6:	e04f      	b.n	8009878 <HAL_I2C_Init+0x1dc>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d111      	bne.n	8009804 <HAL_I2C_Init+0x168>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	1e58      	subs	r0, r3, #1
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6859      	ldr	r1, [r3, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	005b      	lsls	r3, r3, #1
 80097ec:	440b      	add	r3, r1
 80097ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80097f2:	3301      	adds	r3, #1
 80097f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	bf0c      	ite	eq
 80097fc:	2301      	moveq	r3, #1
 80097fe:	2300      	movne	r3, #0
 8009800:	b2db      	uxtb	r3, r3
 8009802:	e012      	b.n	800982a <HAL_I2C_Init+0x18e>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	1e58      	subs	r0, r3, #1
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6859      	ldr	r1, [r3, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	440b      	add	r3, r1
 8009812:	0099      	lsls	r1, r3, #2
 8009814:	440b      	add	r3, r1
 8009816:	fbb0 f3f3 	udiv	r3, r0, r3
 800981a:	3301      	adds	r3, #1
 800981c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009820:	2b00      	cmp	r3, #0
 8009822:	bf0c      	ite	eq
 8009824:	2301      	moveq	r3, #1
 8009826:	2300      	movne	r3, #0
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d001      	beq.n	8009832 <HAL_I2C_Init+0x196>
 800982e:	2301      	movs	r3, #1
 8009830:	e022      	b.n	8009878 <HAL_I2C_Init+0x1dc>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10e      	bne.n	8009858 <HAL_I2C_Init+0x1bc>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	1e58      	subs	r0, r3, #1
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6859      	ldr	r1, [r3, #4]
 8009842:	460b      	mov	r3, r1
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	440b      	add	r3, r1
 8009848:	fbb0 f3f3 	udiv	r3, r0, r3
 800984c:	3301      	adds	r3, #1
 800984e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009856:	e00f      	b.n	8009878 <HAL_I2C_Init+0x1dc>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	1e58      	subs	r0, r3, #1
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6859      	ldr	r1, [r3, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	440b      	add	r3, r1
 8009866:	0099      	lsls	r1, r3, #2
 8009868:	440b      	add	r3, r1
 800986a:	fbb0 f3f3 	udiv	r3, r0, r3
 800986e:	3301      	adds	r3, #1
 8009870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009878:	6879      	ldr	r1, [r7, #4]
 800987a:	6809      	ldr	r1, [r1, #0]
 800987c:	4313      	orrs	r3, r2
 800987e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	69da      	ldr	r2, [r3, #28]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	431a      	orrs	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	430a      	orrs	r2, r1
 800989a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80098a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	6911      	ldr	r1, [r2, #16]
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	68d2      	ldr	r2, [r2, #12]
 80098b2:	4311      	orrs	r1, r2
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	6812      	ldr	r2, [r2, #0]
 80098b8:	430b      	orrs	r3, r1
 80098ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	695a      	ldr	r2, [r3, #20]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	431a      	orrs	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	430a      	orrs	r2, r1
 80098d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f042 0201 	orr.w	r2, r2, #1
 80098e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2220      	movs	r2, #32
 80098f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	000186a0 	.word	0x000186a0
 8009914:	001e847f 	.word	0x001e847f
 8009918:	003d08ff 	.word	0x003d08ff
 800991c:	431bde83 	.word	0x431bde83
 8009920:	10624dd3 	.word	0x10624dd3

08009924 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e021      	b.n	800997a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2224      	movs	r2, #36	; 0x24
 800993a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f022 0201 	bic.w	r2, r2, #1
 800994c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7fe fef0 	bl	8008734 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
	...

08009984 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af02      	add	r7, sp, #8
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	607a      	str	r2, [r7, #4]
 800998e:	461a      	mov	r2, r3
 8009990:	460b      	mov	r3, r1
 8009992:	817b      	strh	r3, [r7, #10]
 8009994:	4613      	mov	r3, r2
 8009996:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009998:	f7ff f85e 	bl	8008a58 <HAL_GetTick>
 800999c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b20      	cmp	r3, #32
 80099a8:	f040 80e0 	bne.w	8009b6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	2319      	movs	r3, #25
 80099b2:	2201      	movs	r2, #1
 80099b4:	4970      	ldr	r1, [pc, #448]	; (8009b78 <HAL_I2C_Master_Transmit+0x1f4>)
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 fe5c 	bl	800a674 <I2C_WaitOnFlagUntilTimeout>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80099c2:	2302      	movs	r3, #2
 80099c4:	e0d3      	b.n	8009b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d101      	bne.n	80099d4 <HAL_I2C_Master_Transmit+0x50>
 80099d0:	2302      	movs	r3, #2
 80099d2:	e0cc      	b.n	8009b6e <HAL_I2C_Master_Transmit+0x1ea>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d007      	beq.n	80099fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f042 0201 	orr.w	r2, r2, #1
 80099f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2221      	movs	r2, #33	; 0x21
 8009a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2210      	movs	r2, #16
 8009a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	893a      	ldrh	r2, [r7, #8]
 8009a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	4a50      	ldr	r2, [pc, #320]	; (8009b7c <HAL_I2C_Master_Transmit+0x1f8>)
 8009a3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009a3c:	8979      	ldrh	r1, [r7, #10]
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	6a3a      	ldr	r2, [r7, #32]
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 fc16 	bl	800a274 <I2C_MasterRequestWrite>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d001      	beq.n	8009a52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e08d      	b.n	8009b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a52:	2300      	movs	r3, #0
 8009a54:	613b      	str	r3, [r7, #16]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	695b      	ldr	r3, [r3, #20]
 8009a5c:	613b      	str	r3, [r7, #16]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	613b      	str	r3, [r7, #16]
 8009a66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009a68:	e066      	b.n	8009b38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	6a39      	ldr	r1, [r7, #32]
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 ff1a 	bl	800a8a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00d      	beq.n	8009a96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7e:	2b04      	cmp	r3, #4
 8009a80:	d107      	bne.n	8009a92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e06b      	b.n	8009b6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9a:	781a      	ldrb	r2, [r3, #0]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	f003 0304 	and.w	r3, r3, #4
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d11b      	bne.n	8009b0c <HAL_I2C_Master_Transmit+0x188>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d017      	beq.n	8009b0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	781a      	ldrb	r2, [r3, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aec:	1c5a      	adds	r2, r3, #1
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	3b01      	subs	r3, #1
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b04:	3b01      	subs	r3, #1
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	6a39      	ldr	r1, [r7, #32]
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 ff11 	bl	800a938 <I2C_WaitOnBTFFlagUntilTimeout>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00d      	beq.n	8009b38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	d107      	bne.n	8009b34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e01a      	b.n	8009b6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d194      	bne.n	8009a6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2220      	movs	r2, #32
 8009b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	e000      	b.n	8009b6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009b6c:	2302      	movs	r3, #2
  }
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	00100002 	.word	0x00100002
 8009b7c:	ffff0000 	.word	0xffff0000

08009b80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b088      	sub	sp, #32
 8009b84:	af02      	add	r7, sp, #8
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	4608      	mov	r0, r1
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	4603      	mov	r3, r0
 8009b90:	817b      	strh	r3, [r7, #10]
 8009b92:	460b      	mov	r3, r1
 8009b94:	813b      	strh	r3, [r7, #8]
 8009b96:	4613      	mov	r3, r2
 8009b98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b9a:	f7fe ff5d 	bl	8008a58 <HAL_GetTick>
 8009b9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b20      	cmp	r3, #32
 8009baa:	f040 80d9 	bne.w	8009d60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	2319      	movs	r3, #25
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	496d      	ldr	r1, [pc, #436]	; (8009d6c <HAL_I2C_Mem_Write+0x1ec>)
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f000 fd5b 	bl	800a674 <I2C_WaitOnFlagUntilTimeout>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	e0cc      	b.n	8009d62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d101      	bne.n	8009bd6 <HAL_I2C_Mem_Write+0x56>
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	e0c5      	b.n	8009d62 <HAL_I2C_Mem_Write+0x1e2>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0301 	and.w	r3, r3, #1
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d007      	beq.n	8009bfc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f042 0201 	orr.w	r2, r2, #1
 8009bfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2221      	movs	r2, #33	; 0x21
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2240      	movs	r2, #64	; 0x40
 8009c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6a3a      	ldr	r2, [r7, #32]
 8009c26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	4a4d      	ldr	r2, [pc, #308]	; (8009d70 <HAL_I2C_Mem_Write+0x1f0>)
 8009c3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009c3e:	88f8      	ldrh	r0, [r7, #6]
 8009c40:	893a      	ldrh	r2, [r7, #8]
 8009c42:	8979      	ldrh	r1, [r7, #10]
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	9301      	str	r3, [sp, #4]
 8009c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f000 fb92 	bl	800a378 <I2C_RequestMemoryWrite>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d052      	beq.n	8009d00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e081      	b.n	8009d62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 fe20 	bl	800a8a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00d      	beq.n	8009c8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c72:	2b04      	cmp	r3, #4
 8009c74:	d107      	bne.n	8009c86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e06b      	b.n	8009d62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	781a      	ldrb	r2, [r3, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	f003 0304 	and.w	r3, r3, #4
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	d11b      	bne.n	8009d00 <HAL_I2C_Mem_Write+0x180>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d017      	beq.n	8009d00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	781a      	ldrb	r2, [r3, #0]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	1c5a      	adds	r2, r3, #1
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cea:	3b01      	subs	r3, #1
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1aa      	bne.n	8009c5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f000 fe13 	bl	800a938 <I2C_WaitOnBTFFlagUntilTimeout>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00d      	beq.n	8009d34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1c:	2b04      	cmp	r3, #4
 8009d1e:	d107      	bne.n	8009d30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e016      	b.n	8009d62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2220      	movs	r2, #32
 8009d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	e000      	b.n	8009d62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009d60:	2302      	movs	r3, #2
  }
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	00100002 	.word	0x00100002
 8009d70:	ffff0000 	.word	0xffff0000

08009d74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b08c      	sub	sp, #48	; 0x30
 8009d78:	af02      	add	r7, sp, #8
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	4608      	mov	r0, r1
 8009d7e:	4611      	mov	r1, r2
 8009d80:	461a      	mov	r2, r3
 8009d82:	4603      	mov	r3, r0
 8009d84:	817b      	strh	r3, [r7, #10]
 8009d86:	460b      	mov	r3, r1
 8009d88:	813b      	strh	r3, [r7, #8]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009d92:	f7fe fe61 	bl	8008a58 <HAL_GetTick>
 8009d96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	2b20      	cmp	r3, #32
 8009da2:	f040 8244 	bne.w	800a22e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	2319      	movs	r3, #25
 8009dac:	2201      	movs	r2, #1
 8009dae:	4982      	ldr	r1, [pc, #520]	; (8009fb8 <HAL_I2C_Mem_Read+0x244>)
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fc5f 	bl	800a674 <I2C_WaitOnFlagUntilTimeout>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	e237      	b.n	800a230 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d101      	bne.n	8009dce <HAL_I2C_Mem_Read+0x5a>
 8009dca:	2302      	movs	r3, #2
 8009dcc:	e230      	b.n	800a230 <HAL_I2C_Mem_Read+0x4bc>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 0301 	and.w	r3, r3, #1
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d007      	beq.n	8009df4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f042 0201 	orr.w	r2, r2, #1
 8009df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2222      	movs	r2, #34	; 0x22
 8009e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2240      	movs	r2, #64	; 0x40
 8009e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4a62      	ldr	r2, [pc, #392]	; (8009fbc <HAL_I2C_Mem_Read+0x248>)
 8009e34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e36:	88f8      	ldrh	r0, [r7, #6]
 8009e38:	893a      	ldrh	r2, [r7, #8]
 8009e3a:	8979      	ldrh	r1, [r7, #10]
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	9301      	str	r3, [sp, #4]
 8009e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	4603      	mov	r3, r0
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f000 fb2c 	bl	800a4a4 <I2C_RequestMemoryRead>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e1ec      	b.n	800a230 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d113      	bne.n	8009e86 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e5e:	2300      	movs	r3, #0
 8009e60:	61fb      	str	r3, [r7, #28]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	695b      	ldr	r3, [r3, #20]
 8009e68:	61fb      	str	r3, [r7, #28]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	e1c0      	b.n	800a208 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d11e      	bne.n	8009ecc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e9e:	b672      	cpsid	i
}
 8009ea0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	61bb      	str	r3, [r7, #24]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	695b      	ldr	r3, [r3, #20]
 8009eac:	61bb      	str	r3, [r7, #24]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	61bb      	str	r3, [r7, #24]
 8009eb6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ec6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009ec8:	b662      	cpsie	i
}
 8009eca:	e035      	b.n	8009f38 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d11e      	bne.n	8009f12 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ee2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ee4:	b672      	cpsid	i
}
 8009ee6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ee8:	2300      	movs	r3, #0
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	617b      	str	r3, [r7, #20]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	617b      	str	r3, [r7, #20]
 8009efc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009f0e:	b662      	cpsie	i
}
 8009f10:	e012      	b.n	8009f38 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f20:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f22:	2300      	movs	r3, #0
 8009f24:	613b      	str	r3, [r7, #16]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	613b      	str	r3, [r7, #16]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	613b      	str	r3, [r7, #16]
 8009f36:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009f38:	e166      	b.n	800a208 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	f200 811f 	bhi.w	800a182 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d123      	bne.n	8009f94 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 fd39 	bl	800a9c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e167      	b.n	800a230 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	691a      	ldr	r2, [r3, #16]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6a:	b2d2      	uxtb	r2, r2
 8009f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f72:	1c5a      	adds	r2, r3, #1
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f92:	e139      	b.n	800a208 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d152      	bne.n	800a042 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	4906      	ldr	r1, [pc, #24]	; (8009fc0 <HAL_I2C_Mem_Read+0x24c>)
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f000 fb64 	bl	800a674 <I2C_WaitOnFlagUntilTimeout>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d008      	beq.n	8009fc4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e13c      	b.n	800a230 <HAL_I2C_Mem_Read+0x4bc>
 8009fb6:	bf00      	nop
 8009fb8:	00100002 	.word	0x00100002
 8009fbc:	ffff0000 	.word	0xffff0000
 8009fc0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009fc4:	b672      	cpsid	i
}
 8009fc6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	691a      	ldr	r2, [r3, #16]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	b2d2      	uxtb	r2, r2
 8009fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fea:	1c5a      	adds	r2, r3, #1
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a000:	b29b      	uxth	r3, r3
 800a002:	3b01      	subs	r3, #1
 800a004:	b29a      	uxth	r2, r3
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a00a:	b662      	cpsie	i
}
 800a00c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	691a      	ldr	r2, [r3, #16]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a018:	b2d2      	uxtb	r2, r2
 800a01a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	1c5a      	adds	r2, r3, #1
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a02a:	3b01      	subs	r3, #1
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a036:	b29b      	uxth	r3, r3
 800a038:	3b01      	subs	r3, #1
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a040:	e0e2      	b.n	800a208 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a048:	2200      	movs	r2, #0
 800a04a:	497b      	ldr	r1, [pc, #492]	; (800a238 <HAL_I2C_Mem_Read+0x4c4>)
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 fb11 	bl	800a674 <I2C_WaitOnFlagUntilTimeout>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e0e9      	b.n	800a230 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a06a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a06c:	b672      	cpsid	i
}
 800a06e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	691a      	ldr	r2, [r3, #16]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07a:	b2d2      	uxtb	r2, r2
 800a07c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a082:	1c5a      	adds	r2, r3, #1
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a08c:	3b01      	subs	r3, #1
 800a08e:	b29a      	uxth	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a098:	b29b      	uxth	r3, r3
 800a09a:	3b01      	subs	r3, #1
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a0a2:	4b66      	ldr	r3, [pc, #408]	; (800a23c <HAL_I2C_Mem_Read+0x4c8>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	08db      	lsrs	r3, r3, #3
 800a0a8:	4a65      	ldr	r2, [pc, #404]	; (800a240 <HAL_I2C_Mem_Read+0x4cc>)
 800a0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ae:	0a1a      	lsrs	r2, r3, #8
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4413      	add	r3, r2
 800a0b6:	00da      	lsls	r2, r3, #3
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d118      	bne.n	800a0fa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2220      	movs	r2, #32
 800a0d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e2:	f043 0220 	orr.w	r2, r3, #32
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a0ea:	b662      	cpsie	i
}
 800a0ec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e09a      	b.n	800a230 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	695b      	ldr	r3, [r3, #20]
 800a100:	f003 0304 	and.w	r3, r3, #4
 800a104:	2b04      	cmp	r3, #4
 800a106:	d1d9      	bne.n	800a0bc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a116:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	691a      	ldr	r2, [r3, #16]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a122:	b2d2      	uxtb	r2, r2
 800a124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12a:	1c5a      	adds	r2, r3, #1
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a134:	3b01      	subs	r3, #1
 800a136:	b29a      	uxth	r2, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a140:	b29b      	uxth	r3, r3
 800a142:	3b01      	subs	r3, #1
 800a144:	b29a      	uxth	r2, r3
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a14a:	b662      	cpsie	i
}
 800a14c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	691a      	ldr	r2, [r3, #16]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	b2d2      	uxtb	r2, r2
 800a15a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a160:	1c5a      	adds	r2, r3, #1
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a16a:	3b01      	subs	r3, #1
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a176:	b29b      	uxth	r3, r3
 800a178:	3b01      	subs	r3, #1
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a180:	e042      	b.n	800a208 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a184:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f000 fc1e 	bl	800a9c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e04c      	b.n	800a230 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	691a      	ldr	r2, [r3, #16]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a0:	b2d2      	uxtb	r2, r2
 800a1a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a8:	1c5a      	adds	r2, r3, #1
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	f003 0304 	and.w	r3, r3, #4
 800a1d2:	2b04      	cmp	r3, #4
 800a1d4:	d118      	bne.n	800a208 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	691a      	ldr	r2, [r3, #16]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e0:	b2d2      	uxtb	r2, r2
 800a1e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e8:	1c5a      	adds	r2, r3, #1
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	3b01      	subs	r3, #1
 800a202:	b29a      	uxth	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f47f ae94 	bne.w	8009f3a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2220      	movs	r2, #32
 800a216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	e000      	b.n	800a230 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a22e:	2302      	movs	r3, #2
  }
}
 800a230:	4618      	mov	r0, r3
 800a232:	3728      	adds	r7, #40	; 0x28
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	00010004 	.word	0x00010004
 800a23c:	200000a0 	.word	0x200000a0
 800a240:	14f8b589 	.word	0x14f8b589

0800a244 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a252:	b2db      	uxtb	r3, r3
}
 800a254:	4618      	mov	r0, r3
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	bc80      	pop	{r7}
 800a25c:	4770      	bx	lr

0800a25e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a25e:	b480      	push	{r7}
 800a260:	b083      	sub	sp, #12
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	bc80      	pop	{r7}
 800a272:	4770      	bx	lr

0800a274 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b088      	sub	sp, #32
 800a278:	af02      	add	r7, sp, #8
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	607a      	str	r2, [r7, #4]
 800a27e:	603b      	str	r3, [r7, #0]
 800a280:	460b      	mov	r3, r1
 800a282:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a288:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2b08      	cmp	r3, #8
 800a28e:	d006      	beq.n	800a29e <I2C_MasterRequestWrite+0x2a>
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d003      	beq.n	800a29e <I2C_MasterRequestWrite+0x2a>
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a29c:	d108      	bne.n	800a2b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2ac:	601a      	str	r2, [r3, #0]
 800a2ae:	e00b      	b.n	800a2c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b4:	2b12      	cmp	r3, #18
 800a2b6:	d107      	bne.n	800a2c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f000 f9cd 	bl	800a674 <I2C_WaitOnFlagUntilTimeout>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00d      	beq.n	800a2fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2ee:	d103      	bne.n	800a2f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e035      	b.n	800a368 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a304:	d108      	bne.n	800a318 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a306:	897b      	ldrh	r3, [r7, #10]
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	461a      	mov	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a314:	611a      	str	r2, [r3, #16]
 800a316:	e01b      	b.n	800a350 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a318:	897b      	ldrh	r3, [r7, #10]
 800a31a:	11db      	asrs	r3, r3, #7
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	f003 0306 	and.w	r3, r3, #6
 800a322:	b2db      	uxtb	r3, r3
 800a324:	f063 030f 	orn	r3, r3, #15
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	490e      	ldr	r1, [pc, #56]	; (800a370 <I2C_MasterRequestWrite+0xfc>)
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f000 fa16 	bl	800a768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d001      	beq.n	800a346 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e010      	b.n	800a368 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a346:	897b      	ldrh	r3, [r7, #10]
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	4907      	ldr	r1, [pc, #28]	; (800a374 <I2C_MasterRequestWrite+0x100>)
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 fa06 	bl	800a768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d001      	beq.n	800a366 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e000      	b.n	800a368 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	00010008 	.word	0x00010008
 800a374:	00010002 	.word	0x00010002

0800a378 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af02      	add	r7, sp, #8
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	4608      	mov	r0, r1
 800a382:	4611      	mov	r1, r2
 800a384:	461a      	mov	r2, r3
 800a386:	4603      	mov	r3, r0
 800a388:	817b      	strh	r3, [r7, #10]
 800a38a:	460b      	mov	r3, r1
 800a38c:	813b      	strh	r3, [r7, #8]
 800a38e:	4613      	mov	r3, r2
 800a390:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	6a3b      	ldr	r3, [r7, #32]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 f960 	bl	800a674 <I2C_WaitOnFlagUntilTimeout>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00d      	beq.n	800a3d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3c8:	d103      	bne.n	800a3d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e05f      	b.n	800a496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a3d6:	897b      	ldrh	r3, [r7, #10]
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	461a      	mov	r2, r3
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a3e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	6a3a      	ldr	r2, [r7, #32]
 800a3ea:	492d      	ldr	r1, [pc, #180]	; (800a4a0 <I2C_RequestMemoryWrite+0x128>)
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f000 f9bb 	bl	800a768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d001      	beq.n	800a3fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e04c      	b.n	800a496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	617b      	str	r3, [r7, #20]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	617b      	str	r3, [r7, #20]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	617b      	str	r3, [r7, #20]
 800a410:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a414:	6a39      	ldr	r1, [r7, #32]
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f000 fa46 	bl	800a8a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00d      	beq.n	800a43e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a426:	2b04      	cmp	r3, #4
 800a428:	d107      	bne.n	800a43a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a438:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e02b      	b.n	800a496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a43e:	88fb      	ldrh	r3, [r7, #6]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d105      	bne.n	800a450 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a444:	893b      	ldrh	r3, [r7, #8]
 800a446:	b2da      	uxtb	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	611a      	str	r2, [r3, #16]
 800a44e:	e021      	b.n	800a494 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a450:	893b      	ldrh	r3, [r7, #8]
 800a452:	0a1b      	lsrs	r3, r3, #8
 800a454:	b29b      	uxth	r3, r3
 800a456:	b2da      	uxtb	r2, r3
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a45e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a460:	6a39      	ldr	r1, [r7, #32]
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 fa20 	bl	800a8a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00d      	beq.n	800a48a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a472:	2b04      	cmp	r3, #4
 800a474:	d107      	bne.n	800a486 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a484:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e005      	b.n	800a496 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a48a:	893b      	ldrh	r3, [r7, #8]
 800a48c:	b2da      	uxtb	r2, r3
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	00010002 	.word	0x00010002

0800a4a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b088      	sub	sp, #32
 800a4a8:	af02      	add	r7, sp, #8
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	4608      	mov	r0, r1
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	817b      	strh	r3, [r7, #10]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	813b      	strh	r3, [r7, #8]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a4cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	6a3b      	ldr	r3, [r7, #32]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 f8c2 	bl	800a674 <I2C_WaitOnFlagUntilTimeout>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00d      	beq.n	800a512 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a504:	d103      	bne.n	800a50e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a50c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a50e:	2303      	movs	r3, #3
 800a510:	e0aa      	b.n	800a668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a512:	897b      	ldrh	r3, [r7, #10]
 800a514:	b2db      	uxtb	r3, r3
 800a516:	461a      	mov	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a520:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	6a3a      	ldr	r2, [r7, #32]
 800a526:	4952      	ldr	r1, [pc, #328]	; (800a670 <I2C_RequestMemoryRead+0x1cc>)
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f000 f91d 	bl	800a768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d001      	beq.n	800a538 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e097      	b.n	800a668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a538:	2300      	movs	r3, #0
 800a53a:	617b      	str	r3, [r7, #20]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	617b      	str	r3, [r7, #20]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	617b      	str	r3, [r7, #20]
 800a54c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a54e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a550:	6a39      	ldr	r1, [r7, #32]
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f000 f9a8 	bl	800a8a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00d      	beq.n	800a57a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a562:	2b04      	cmp	r3, #4
 800a564:	d107      	bne.n	800a576 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a574:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e076      	b.n	800a668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a57a:	88fb      	ldrh	r3, [r7, #6]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d105      	bne.n	800a58c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a580:	893b      	ldrh	r3, [r7, #8]
 800a582:	b2da      	uxtb	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	611a      	str	r2, [r3, #16]
 800a58a:	e021      	b.n	800a5d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a58c:	893b      	ldrh	r3, [r7, #8]
 800a58e:	0a1b      	lsrs	r3, r3, #8
 800a590:	b29b      	uxth	r3, r3
 800a592:	b2da      	uxtb	r2, r3
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a59a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a59c:	6a39      	ldr	r1, [r7, #32]
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f000 f982 	bl	800a8a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00d      	beq.n	800a5c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ae:	2b04      	cmp	r3, #4
 800a5b0:	d107      	bne.n	800a5c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e050      	b.n	800a668 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a5c6:	893b      	ldrh	r3, [r7, #8]
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d2:	6a39      	ldr	r1, [r7, #32]
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 f967 	bl	800a8a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00d      	beq.n	800a5fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e4:	2b04      	cmp	r3, #4
 800a5e6:	d107      	bne.n	800a5f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e035      	b.n	800a668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a60a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	6a3b      	ldr	r3, [r7, #32]
 800a612:	2200      	movs	r2, #0
 800a614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f000 f82b 	bl	800a674 <I2C_WaitOnFlagUntilTimeout>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00d      	beq.n	800a640 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a62e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a632:	d103      	bne.n	800a63c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a63a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e013      	b.n	800a668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a640:	897b      	ldrh	r3, [r7, #10]
 800a642:	b2db      	uxtb	r3, r3
 800a644:	f043 0301 	orr.w	r3, r3, #1
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	6a3a      	ldr	r2, [r7, #32]
 800a654:	4906      	ldr	r1, [pc, #24]	; (800a670 <I2C_RequestMemoryRead+0x1cc>)
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 f886 	bl	800a768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e000      	b.n	800a668 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	00010002 	.word	0x00010002

0800a674 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	603b      	str	r3, [r7, #0]
 800a680:	4613      	mov	r3, r2
 800a682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a684:	e048      	b.n	800a718 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a68c:	d044      	beq.n	800a718 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a68e:	f7fe f9e3 	bl	8008a58 <HAL_GetTick>
 800a692:	4602      	mov	r2, r0
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d302      	bcc.n	800a6a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d139      	bne.n	800a718 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	0c1b      	lsrs	r3, r3, #16
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d10d      	bne.n	800a6ca <I2C_WaitOnFlagUntilTimeout+0x56>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	43da      	mvns	r2, r3
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	bf0c      	ite	eq
 800a6c0:	2301      	moveq	r3, #1
 800a6c2:	2300      	movne	r3, #0
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	e00c      	b.n	800a6e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	43da      	mvns	r2, r3
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	bf0c      	ite	eq
 800a6dc:	2301      	moveq	r3, #1
 800a6de:	2300      	movne	r3, #0
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	79fb      	ldrb	r3, [r7, #7]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d116      	bne.n	800a718 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a704:	f043 0220 	orr.w	r2, r3, #32
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e023      	b.n	800a760 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	0c1b      	lsrs	r3, r3, #16
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d10d      	bne.n	800a73e <I2C_WaitOnFlagUntilTimeout+0xca>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	695b      	ldr	r3, [r3, #20]
 800a728:	43da      	mvns	r2, r3
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	4013      	ands	r3, r2
 800a72e:	b29b      	uxth	r3, r3
 800a730:	2b00      	cmp	r3, #0
 800a732:	bf0c      	ite	eq
 800a734:	2301      	moveq	r3, #1
 800a736:	2300      	movne	r3, #0
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	461a      	mov	r2, r3
 800a73c:	e00c      	b.n	800a758 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	699b      	ldr	r3, [r3, #24]
 800a744:	43da      	mvns	r2, r3
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	4013      	ands	r3, r2
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	bf0c      	ite	eq
 800a750:	2301      	moveq	r3, #1
 800a752:	2300      	movne	r3, #0
 800a754:	b2db      	uxtb	r3, r3
 800a756:	461a      	mov	r2, r3
 800a758:	79fb      	ldrb	r3, [r7, #7]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d093      	beq.n	800a686 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
 800a774:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a776:	e071      	b.n	800a85c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a786:	d123      	bne.n	800a7d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a796:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a7a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7bc:	f043 0204 	orr.w	r2, r3, #4
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e067      	b.n	800a8a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7d6:	d041      	beq.n	800a85c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7d8:	f7fe f93e 	bl	8008a58 <HAL_GetTick>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d302      	bcc.n	800a7ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d136      	bne.n	800a85c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	0c1b      	lsrs	r3, r3, #16
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d10c      	bne.n	800a812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	695b      	ldr	r3, [r3, #20]
 800a7fe:	43da      	mvns	r2, r3
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	4013      	ands	r3, r2
 800a804:	b29b      	uxth	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	bf14      	ite	ne
 800a80a:	2301      	movne	r3, #1
 800a80c:	2300      	moveq	r3, #0
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	e00b      	b.n	800a82a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	43da      	mvns	r2, r3
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	4013      	ands	r3, r2
 800a81e:	b29b      	uxth	r3, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	bf14      	ite	ne
 800a824:	2301      	movne	r3, #1
 800a826:	2300      	moveq	r3, #0
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d016      	beq.n	800a85c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2220      	movs	r2, #32
 800a838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a848:	f043 0220 	orr.w	r2, r3, #32
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	e021      	b.n	800a8a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	0c1b      	lsrs	r3, r3, #16
 800a860:	b2db      	uxtb	r3, r3
 800a862:	2b01      	cmp	r3, #1
 800a864:	d10c      	bne.n	800a880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	43da      	mvns	r2, r3
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	4013      	ands	r3, r2
 800a872:	b29b      	uxth	r3, r3
 800a874:	2b00      	cmp	r3, #0
 800a876:	bf14      	ite	ne
 800a878:	2301      	movne	r3, #1
 800a87a:	2300      	moveq	r3, #0
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	e00b      	b.n	800a898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	43da      	mvns	r2, r3
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	4013      	ands	r3, r2
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	bf14      	ite	ne
 800a892:	2301      	movne	r3, #1
 800a894:	2300      	moveq	r3, #0
 800a896:	b2db      	uxtb	r3, r3
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f47f af6d 	bne.w	800a778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a8b4:	e034      	b.n	800a920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f000 f8e3 	bl	800aa82 <I2C_IsAcknowledgeFailed>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d001      	beq.n	800a8c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e034      	b.n	800a930 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8cc:	d028      	beq.n	800a920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8ce:	f7fe f8c3 	bl	8008a58 <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d302      	bcc.n	800a8e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d11d      	bne.n	800a920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ee:	2b80      	cmp	r3, #128	; 0x80
 800a8f0:	d016      	beq.n	800a920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90c:	f043 0220 	orr.w	r2, r3, #32
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e007      	b.n	800a930 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a92a:	2b80      	cmp	r3, #128	; 0x80
 800a92c:	d1c3      	bne.n	800a8b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a944:	e034      	b.n	800a9b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f000 f89b 	bl	800aa82 <I2C_IsAcknowledgeFailed>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e034      	b.n	800a9c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a95c:	d028      	beq.n	800a9b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a95e:	f7fe f87b 	bl	8008a58 <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d302      	bcc.n	800a974 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d11d      	bne.n	800a9b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	f003 0304 	and.w	r3, r3, #4
 800a97e:	2b04      	cmp	r3, #4
 800a980:	d016      	beq.n	800a9b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2220      	movs	r2, #32
 800a98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99c:	f043 0220 	orr.w	r2, r3, #32
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e007      	b.n	800a9c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	f003 0304 	and.w	r3, r3, #4
 800a9ba:	2b04      	cmp	r3, #4
 800a9bc:	d1c3      	bne.n	800a946 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a9d4:	e049      	b.n	800aa6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	695b      	ldr	r3, [r3, #20]
 800a9dc:	f003 0310 	and.w	r3, r3, #16
 800a9e0:	2b10      	cmp	r3, #16
 800a9e2:	d119      	bne.n	800aa18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f06f 0210 	mvn.w	r2, #16
 800a9ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2220      	movs	r2, #32
 800a9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e030      	b.n	800aa7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa18:	f7fe f81e 	bl	8008a58 <HAL_GetTick>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d302      	bcc.n	800aa2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d11d      	bne.n	800aa6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	695b      	ldr	r3, [r3, #20]
 800aa34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa38:	2b40      	cmp	r3, #64	; 0x40
 800aa3a:	d016      	beq.n	800aa6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2220      	movs	r2, #32
 800aa46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa56:	f043 0220 	orr.w	r2, r3, #32
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e007      	b.n	800aa7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa74:	2b40      	cmp	r3, #64	; 0x40
 800aa76:	d1ae      	bne.n	800a9d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800aa82:	b480      	push	{r7}
 800aa84:	b083      	sub	sp, #12
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	695b      	ldr	r3, [r3, #20]
 800aa90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa98:	d11b      	bne.n	800aad2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aaa2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2220      	movs	r2, #32
 800aaae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aabe:	f043 0204 	orr.w	r2, r3, #4
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	e000      	b.n	800aad4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800aad2:	2300      	movs	r3, #0
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	bc80      	pop	{r7}
 800aadc:	4770      	bx	lr
	...

0800aae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d101      	bne.n	800aaf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e272      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f000 8087 	beq.w	800ac0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab00:	4b92      	ldr	r3, [pc, #584]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	f003 030c 	and.w	r3, r3, #12
 800ab08:	2b04      	cmp	r3, #4
 800ab0a:	d00c      	beq.n	800ab26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ab0c:	4b8f      	ldr	r3, [pc, #572]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	f003 030c 	and.w	r3, r3, #12
 800ab14:	2b08      	cmp	r3, #8
 800ab16:	d112      	bne.n	800ab3e <HAL_RCC_OscConfig+0x5e>
 800ab18:	4b8c      	ldr	r3, [pc, #560]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab24:	d10b      	bne.n	800ab3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab26:	4b89      	ldr	r3, [pc, #548]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d06c      	beq.n	800ac0c <HAL_RCC_OscConfig+0x12c>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d168      	bne.n	800ac0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e24c      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab46:	d106      	bne.n	800ab56 <HAL_RCC_OscConfig+0x76>
 800ab48:	4b80      	ldr	r3, [pc, #512]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a7f      	ldr	r2, [pc, #508]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab52:	6013      	str	r3, [r2, #0]
 800ab54:	e02e      	b.n	800abb4 <HAL_RCC_OscConfig+0xd4>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10c      	bne.n	800ab78 <HAL_RCC_OscConfig+0x98>
 800ab5e:	4b7b      	ldr	r3, [pc, #492]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a7a      	ldr	r2, [pc, #488]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab68:	6013      	str	r3, [r2, #0]
 800ab6a:	4b78      	ldr	r3, [pc, #480]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a77      	ldr	r2, [pc, #476]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab74:	6013      	str	r3, [r2, #0]
 800ab76:	e01d      	b.n	800abb4 <HAL_RCC_OscConfig+0xd4>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab80:	d10c      	bne.n	800ab9c <HAL_RCC_OscConfig+0xbc>
 800ab82:	4b72      	ldr	r3, [pc, #456]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a71      	ldr	r2, [pc, #452]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab8c:	6013      	str	r3, [r2, #0]
 800ab8e:	4b6f      	ldr	r3, [pc, #444]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a6e      	ldr	r2, [pc, #440]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab98:	6013      	str	r3, [r2, #0]
 800ab9a:	e00b      	b.n	800abb4 <HAL_RCC_OscConfig+0xd4>
 800ab9c:	4b6b      	ldr	r3, [pc, #428]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a6a      	ldr	r2, [pc, #424]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800aba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aba6:	6013      	str	r3, [r2, #0]
 800aba8:	4b68      	ldr	r3, [pc, #416]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a67      	ldr	r2, [pc, #412]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800abae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d013      	beq.n	800abe4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abbc:	f7fd ff4c 	bl	8008a58 <HAL_GetTick>
 800abc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abc2:	e008      	b.n	800abd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abc4:	f7fd ff48 	bl	8008a58 <HAL_GetTick>
 800abc8:	4602      	mov	r2, r0
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	1ad3      	subs	r3, r2, r3
 800abce:	2b64      	cmp	r3, #100	; 0x64
 800abd0:	d901      	bls.n	800abd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800abd2:	2303      	movs	r3, #3
 800abd4:	e200      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abd6:	4b5d      	ldr	r3, [pc, #372]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d0f0      	beq.n	800abc4 <HAL_RCC_OscConfig+0xe4>
 800abe2:	e014      	b.n	800ac0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abe4:	f7fd ff38 	bl	8008a58 <HAL_GetTick>
 800abe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abea:	e008      	b.n	800abfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abec:	f7fd ff34 	bl	8008a58 <HAL_GetTick>
 800abf0:	4602      	mov	r2, r0
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	2b64      	cmp	r3, #100	; 0x64
 800abf8:	d901      	bls.n	800abfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e1ec      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abfe:	4b53      	ldr	r3, [pc, #332]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1f0      	bne.n	800abec <HAL_RCC_OscConfig+0x10c>
 800ac0a:	e000      	b.n	800ac0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 0302 	and.w	r3, r3, #2
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d063      	beq.n	800ace2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ac1a:	4b4c      	ldr	r3, [pc, #304]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f003 030c 	and.w	r3, r3, #12
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00b      	beq.n	800ac3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ac26:	4b49      	ldr	r3, [pc, #292]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f003 030c 	and.w	r3, r3, #12
 800ac2e:	2b08      	cmp	r3, #8
 800ac30:	d11c      	bne.n	800ac6c <HAL_RCC_OscConfig+0x18c>
 800ac32:	4b46      	ldr	r3, [pc, #280]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d116      	bne.n	800ac6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac3e:	4b43      	ldr	r3, [pc, #268]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f003 0302 	and.w	r3, r3, #2
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d005      	beq.n	800ac56 <HAL_RCC_OscConfig+0x176>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d001      	beq.n	800ac56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	e1c0      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac56:	4b3d      	ldr	r3, [pc, #244]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	00db      	lsls	r3, r3, #3
 800ac64:	4939      	ldr	r1, [pc, #228]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ac66:	4313      	orrs	r3, r2
 800ac68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac6a:	e03a      	b.n	800ace2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d020      	beq.n	800acb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac74:	4b36      	ldr	r3, [pc, #216]	; (800ad50 <HAL_RCC_OscConfig+0x270>)
 800ac76:	2201      	movs	r2, #1
 800ac78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac7a:	f7fd feed 	bl	8008a58 <HAL_GetTick>
 800ac7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac80:	e008      	b.n	800ac94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac82:	f7fd fee9 	bl	8008a58 <HAL_GetTick>
 800ac86:	4602      	mov	r2, r0
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d901      	bls.n	800ac94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800ac90:	2303      	movs	r3, #3
 800ac92:	e1a1      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac94:	4b2d      	ldr	r3, [pc, #180]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0302 	and.w	r3, r3, #2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d0f0      	beq.n	800ac82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aca0:	4b2a      	ldr	r3, [pc, #168]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	695b      	ldr	r3, [r3, #20]
 800acac:	00db      	lsls	r3, r3, #3
 800acae:	4927      	ldr	r1, [pc, #156]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800acb0:	4313      	orrs	r3, r2
 800acb2:	600b      	str	r3, [r1, #0]
 800acb4:	e015      	b.n	800ace2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800acb6:	4b26      	ldr	r3, [pc, #152]	; (800ad50 <HAL_RCC_OscConfig+0x270>)
 800acb8:	2200      	movs	r2, #0
 800acba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acbc:	f7fd fecc 	bl	8008a58 <HAL_GetTick>
 800acc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acc2:	e008      	b.n	800acd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acc4:	f7fd fec8 	bl	8008a58 <HAL_GetTick>
 800acc8:	4602      	mov	r2, r0
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d901      	bls.n	800acd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800acd2:	2303      	movs	r3, #3
 800acd4:	e180      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acd6:	4b1d      	ldr	r3, [pc, #116]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f003 0302 	and.w	r3, r3, #2
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1f0      	bne.n	800acc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 0308 	and.w	r3, r3, #8
 800acea:	2b00      	cmp	r3, #0
 800acec:	d03a      	beq.n	800ad64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d019      	beq.n	800ad2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800acf6:	4b17      	ldr	r3, [pc, #92]	; (800ad54 <HAL_RCC_OscConfig+0x274>)
 800acf8:	2201      	movs	r2, #1
 800acfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800acfc:	f7fd feac 	bl	8008a58 <HAL_GetTick>
 800ad00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad02:	e008      	b.n	800ad16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad04:	f7fd fea8 	bl	8008a58 <HAL_GetTick>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	1ad3      	subs	r3, r2, r3
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d901      	bls.n	800ad16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ad12:	2303      	movs	r3, #3
 800ad14:	e160      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad16:	4b0d      	ldr	r3, [pc, #52]	; (800ad4c <HAL_RCC_OscConfig+0x26c>)
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	f003 0302 	and.w	r3, r3, #2
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d0f0      	beq.n	800ad04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ad22:	2001      	movs	r0, #1
 800ad24:	f000 face 	bl	800b2c4 <RCC_Delay>
 800ad28:	e01c      	b.n	800ad64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad2a:	4b0a      	ldr	r3, [pc, #40]	; (800ad54 <HAL_RCC_OscConfig+0x274>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad30:	f7fd fe92 	bl	8008a58 <HAL_GetTick>
 800ad34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad36:	e00f      	b.n	800ad58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad38:	f7fd fe8e 	bl	8008a58 <HAL_GetTick>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d908      	bls.n	800ad58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ad46:	2303      	movs	r3, #3
 800ad48:	e146      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
 800ad4a:	bf00      	nop
 800ad4c:	40021000 	.word	0x40021000
 800ad50:	42420000 	.word	0x42420000
 800ad54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad58:	4b92      	ldr	r3, [pc, #584]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ad5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5c:	f003 0302 	and.w	r3, r3, #2
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1e9      	bne.n	800ad38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0304 	and.w	r3, r3, #4
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 80a6 	beq.w	800aebe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ad72:	2300      	movs	r3, #0
 800ad74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad76:	4b8b      	ldr	r3, [pc, #556]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10d      	bne.n	800ad9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad82:	4b88      	ldr	r3, [pc, #544]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ad84:	69db      	ldr	r3, [r3, #28]
 800ad86:	4a87      	ldr	r2, [pc, #540]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ad88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad8c:	61d3      	str	r3, [r2, #28]
 800ad8e:	4b85      	ldr	r3, [pc, #532]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad96:	60bb      	str	r3, [r7, #8]
 800ad98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad9e:	4b82      	ldr	r3, [pc, #520]	; (800afa8 <HAL_RCC_OscConfig+0x4c8>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d118      	bne.n	800addc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800adaa:	4b7f      	ldr	r3, [pc, #508]	; (800afa8 <HAL_RCC_OscConfig+0x4c8>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a7e      	ldr	r2, [pc, #504]	; (800afa8 <HAL_RCC_OscConfig+0x4c8>)
 800adb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800adb6:	f7fd fe4f 	bl	8008a58 <HAL_GetTick>
 800adba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800adbc:	e008      	b.n	800add0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800adbe:	f7fd fe4b 	bl	8008a58 <HAL_GetTick>
 800adc2:	4602      	mov	r2, r0
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	2b64      	cmp	r3, #100	; 0x64
 800adca:	d901      	bls.n	800add0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800adcc:	2303      	movs	r3, #3
 800adce:	e103      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800add0:	4b75      	ldr	r3, [pc, #468]	; (800afa8 <HAL_RCC_OscConfig+0x4c8>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add8:	2b00      	cmp	r3, #0
 800adda:	d0f0      	beq.n	800adbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d106      	bne.n	800adf2 <HAL_RCC_OscConfig+0x312>
 800ade4:	4b6f      	ldr	r3, [pc, #444]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	4a6e      	ldr	r2, [pc, #440]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800adea:	f043 0301 	orr.w	r3, r3, #1
 800adee:	6213      	str	r3, [r2, #32]
 800adf0:	e02d      	b.n	800ae4e <HAL_RCC_OscConfig+0x36e>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10c      	bne.n	800ae14 <HAL_RCC_OscConfig+0x334>
 800adfa:	4b6a      	ldr	r3, [pc, #424]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	4a69      	ldr	r2, [pc, #420]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ae00:	f023 0301 	bic.w	r3, r3, #1
 800ae04:	6213      	str	r3, [r2, #32]
 800ae06:	4b67      	ldr	r3, [pc, #412]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	4a66      	ldr	r2, [pc, #408]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ae0c:	f023 0304 	bic.w	r3, r3, #4
 800ae10:	6213      	str	r3, [r2, #32]
 800ae12:	e01c      	b.n	800ae4e <HAL_RCC_OscConfig+0x36e>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	2b05      	cmp	r3, #5
 800ae1a:	d10c      	bne.n	800ae36 <HAL_RCC_OscConfig+0x356>
 800ae1c:	4b61      	ldr	r3, [pc, #388]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ae1e:	6a1b      	ldr	r3, [r3, #32]
 800ae20:	4a60      	ldr	r2, [pc, #384]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ae22:	f043 0304 	orr.w	r3, r3, #4
 800ae26:	6213      	str	r3, [r2, #32]
 800ae28:	4b5e      	ldr	r3, [pc, #376]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ae2a:	6a1b      	ldr	r3, [r3, #32]
 800ae2c:	4a5d      	ldr	r2, [pc, #372]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ae2e:	f043 0301 	orr.w	r3, r3, #1
 800ae32:	6213      	str	r3, [r2, #32]
 800ae34:	e00b      	b.n	800ae4e <HAL_RCC_OscConfig+0x36e>
 800ae36:	4b5b      	ldr	r3, [pc, #364]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	4a5a      	ldr	r2, [pc, #360]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ae3c:	f023 0301 	bic.w	r3, r3, #1
 800ae40:	6213      	str	r3, [r2, #32]
 800ae42:	4b58      	ldr	r3, [pc, #352]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	4a57      	ldr	r2, [pc, #348]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ae48:	f023 0304 	bic.w	r3, r3, #4
 800ae4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d015      	beq.n	800ae82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae56:	f7fd fdff 	bl	8008a58 <HAL_GetTick>
 800ae5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae5c:	e00a      	b.n	800ae74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae5e:	f7fd fdfb 	bl	8008a58 <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d901      	bls.n	800ae74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ae70:	2303      	movs	r3, #3
 800ae72:	e0b1      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae74:	4b4b      	ldr	r3, [pc, #300]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800ae76:	6a1b      	ldr	r3, [r3, #32]
 800ae78:	f003 0302 	and.w	r3, r3, #2
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d0ee      	beq.n	800ae5e <HAL_RCC_OscConfig+0x37e>
 800ae80:	e014      	b.n	800aeac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae82:	f7fd fde9 	bl	8008a58 <HAL_GetTick>
 800ae86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae88:	e00a      	b.n	800aea0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae8a:	f7fd fde5 	bl	8008a58 <HAL_GetTick>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d901      	bls.n	800aea0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	e09b      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aea0:	4b40      	ldr	r3, [pc, #256]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	f003 0302 	and.w	r3, r3, #2
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1ee      	bne.n	800ae8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aeac:	7dfb      	ldrb	r3, [r7, #23]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d105      	bne.n	800aebe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aeb2:	4b3c      	ldr	r3, [pc, #240]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800aeb4:	69db      	ldr	r3, [r3, #28]
 800aeb6:	4a3b      	ldr	r2, [pc, #236]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800aeb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aebc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	69db      	ldr	r3, [r3, #28]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 8087 	beq.w	800afd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aec8:	4b36      	ldr	r3, [pc, #216]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	f003 030c 	and.w	r3, r3, #12
 800aed0:	2b08      	cmp	r3, #8
 800aed2:	d061      	beq.n	800af98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	69db      	ldr	r3, [r3, #28]
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d146      	bne.n	800af6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aedc:	4b33      	ldr	r3, [pc, #204]	; (800afac <HAL_RCC_OscConfig+0x4cc>)
 800aede:	2200      	movs	r2, #0
 800aee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aee2:	f7fd fdb9 	bl	8008a58 <HAL_GetTick>
 800aee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aee8:	e008      	b.n	800aefc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aeea:	f7fd fdb5 	bl	8008a58 <HAL_GetTick>
 800aeee:	4602      	mov	r2, r0
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d901      	bls.n	800aefc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800aef8:	2303      	movs	r3, #3
 800aefa:	e06d      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aefc:	4b29      	ldr	r3, [pc, #164]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d1f0      	bne.n	800aeea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af10:	d108      	bne.n	800af24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800af12:	4b24      	ldr	r3, [pc, #144]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	4921      	ldr	r1, [pc, #132]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800af20:	4313      	orrs	r3, r2
 800af22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800af24:	4b1f      	ldr	r3, [pc, #124]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a19      	ldr	r1, [r3, #32]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	430b      	orrs	r3, r1
 800af36:	491b      	ldr	r1, [pc, #108]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800af38:	4313      	orrs	r3, r2
 800af3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af3c:	4b1b      	ldr	r3, [pc, #108]	; (800afac <HAL_RCC_OscConfig+0x4cc>)
 800af3e:	2201      	movs	r2, #1
 800af40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af42:	f7fd fd89 	bl	8008a58 <HAL_GetTick>
 800af46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800af48:	e008      	b.n	800af5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af4a:	f7fd fd85 	bl	8008a58 <HAL_GetTick>
 800af4e:	4602      	mov	r2, r0
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	2b02      	cmp	r3, #2
 800af56:	d901      	bls.n	800af5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800af58:	2303      	movs	r3, #3
 800af5a:	e03d      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800af5c:	4b11      	ldr	r3, [pc, #68]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af64:	2b00      	cmp	r3, #0
 800af66:	d0f0      	beq.n	800af4a <HAL_RCC_OscConfig+0x46a>
 800af68:	e035      	b.n	800afd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af6a:	4b10      	ldr	r3, [pc, #64]	; (800afac <HAL_RCC_OscConfig+0x4cc>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af70:	f7fd fd72 	bl	8008a58 <HAL_GetTick>
 800af74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af76:	e008      	b.n	800af8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af78:	f7fd fd6e 	bl	8008a58 <HAL_GetTick>
 800af7c:	4602      	mov	r2, r0
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	2b02      	cmp	r3, #2
 800af84:	d901      	bls.n	800af8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800af86:	2303      	movs	r3, #3
 800af88:	e026      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af8a:	4b06      	ldr	r3, [pc, #24]	; (800afa4 <HAL_RCC_OscConfig+0x4c4>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1f0      	bne.n	800af78 <HAL_RCC_OscConfig+0x498>
 800af96:	e01e      	b.n	800afd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	69db      	ldr	r3, [r3, #28]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d107      	bne.n	800afb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	e019      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
 800afa4:	40021000 	.word	0x40021000
 800afa8:	40007000 	.word	0x40007000
 800afac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800afb0:	4b0b      	ldr	r3, [pc, #44]	; (800afe0 <HAL_RCC_OscConfig+0x500>)
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a1b      	ldr	r3, [r3, #32]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d106      	bne.n	800afd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afce:	429a      	cmp	r2, r3
 800afd0:	d001      	beq.n	800afd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	e000      	b.n	800afd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3718      	adds	r7, #24
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	40021000 	.word	0x40021000

0800afe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d101      	bne.n	800aff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	e0d0      	b.n	800b19a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aff8:	4b6a      	ldr	r3, [pc, #424]	; (800b1a4 <HAL_RCC_ClockConfig+0x1c0>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 0307 	and.w	r3, r3, #7
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	429a      	cmp	r2, r3
 800b004:	d910      	bls.n	800b028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b006:	4b67      	ldr	r3, [pc, #412]	; (800b1a4 <HAL_RCC_ClockConfig+0x1c0>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f023 0207 	bic.w	r2, r3, #7
 800b00e:	4965      	ldr	r1, [pc, #404]	; (800b1a4 <HAL_RCC_ClockConfig+0x1c0>)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	4313      	orrs	r3, r2
 800b014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b016:	4b63      	ldr	r3, [pc, #396]	; (800b1a4 <HAL_RCC_ClockConfig+0x1c0>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f003 0307 	and.w	r3, r3, #7
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	429a      	cmp	r2, r3
 800b022:	d001      	beq.n	800b028 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	e0b8      	b.n	800b19a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 0302 	and.w	r3, r3, #2
 800b030:	2b00      	cmp	r3, #0
 800b032:	d020      	beq.n	800b076 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 0304 	and.w	r3, r3, #4
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d005      	beq.n	800b04c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b040:	4b59      	ldr	r3, [pc, #356]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	4a58      	ldr	r2, [pc, #352]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b046:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b04a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f003 0308 	and.w	r3, r3, #8
 800b054:	2b00      	cmp	r3, #0
 800b056:	d005      	beq.n	800b064 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b058:	4b53      	ldr	r3, [pc, #332]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	4a52      	ldr	r2, [pc, #328]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b05e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b062:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b064:	4b50      	ldr	r3, [pc, #320]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	494d      	ldr	r1, [pc, #308]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b072:	4313      	orrs	r3, r2
 800b074:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f003 0301 	and.w	r3, r3, #1
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d040      	beq.n	800b104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d107      	bne.n	800b09a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b08a:	4b47      	ldr	r3, [pc, #284]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b092:	2b00      	cmp	r3, #0
 800b094:	d115      	bne.n	800b0c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	e07f      	b.n	800b19a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d107      	bne.n	800b0b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0a2:	4b41      	ldr	r3, [pc, #260]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d109      	bne.n	800b0c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e073      	b.n	800b19a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0b2:	4b3d      	ldr	r3, [pc, #244]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 0302 	and.w	r3, r3, #2
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d101      	bne.n	800b0c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e06b      	b.n	800b19a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b0c2:	4b39      	ldr	r3, [pc, #228]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	f023 0203 	bic.w	r2, r3, #3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	4936      	ldr	r1, [pc, #216]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b0d4:	f7fd fcc0 	bl	8008a58 <HAL_GetTick>
 800b0d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0da:	e00a      	b.n	800b0f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0dc:	f7fd fcbc 	bl	8008a58 <HAL_GetTick>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d901      	bls.n	800b0f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	e053      	b.n	800b19a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0f2:	4b2d      	ldr	r3, [pc, #180]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	f003 020c 	and.w	r2, r3, #12
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	429a      	cmp	r2, r3
 800b102:	d1eb      	bne.n	800b0dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b104:	4b27      	ldr	r3, [pc, #156]	; (800b1a4 <HAL_RCC_ClockConfig+0x1c0>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0307 	and.w	r3, r3, #7
 800b10c:	683a      	ldr	r2, [r7, #0]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d210      	bcs.n	800b134 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b112:	4b24      	ldr	r3, [pc, #144]	; (800b1a4 <HAL_RCC_ClockConfig+0x1c0>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f023 0207 	bic.w	r2, r3, #7
 800b11a:	4922      	ldr	r1, [pc, #136]	; (800b1a4 <HAL_RCC_ClockConfig+0x1c0>)
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	4313      	orrs	r3, r2
 800b120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b122:	4b20      	ldr	r3, [pc, #128]	; (800b1a4 <HAL_RCC_ClockConfig+0x1c0>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 0307 	and.w	r3, r3, #7
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d001      	beq.n	800b134 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	e032      	b.n	800b19a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 0304 	and.w	r3, r3, #4
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d008      	beq.n	800b152 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b140:	4b19      	ldr	r3, [pc, #100]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	4916      	ldr	r1, [pc, #88]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b14e:	4313      	orrs	r3, r2
 800b150:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f003 0308 	and.w	r3, r3, #8
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d009      	beq.n	800b172 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b15e:	4b12      	ldr	r3, [pc, #72]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	00db      	lsls	r3, r3, #3
 800b16c:	490e      	ldr	r1, [pc, #56]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b16e:	4313      	orrs	r3, r2
 800b170:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b172:	f000 f821 	bl	800b1b8 <HAL_RCC_GetSysClockFreq>
 800b176:	4602      	mov	r2, r0
 800b178:	4b0b      	ldr	r3, [pc, #44]	; (800b1a8 <HAL_RCC_ClockConfig+0x1c4>)
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	091b      	lsrs	r3, r3, #4
 800b17e:	f003 030f 	and.w	r3, r3, #15
 800b182:	490a      	ldr	r1, [pc, #40]	; (800b1ac <HAL_RCC_ClockConfig+0x1c8>)
 800b184:	5ccb      	ldrb	r3, [r1, r3]
 800b186:	fa22 f303 	lsr.w	r3, r2, r3
 800b18a:	4a09      	ldr	r2, [pc, #36]	; (800b1b0 <HAL_RCC_ClockConfig+0x1cc>)
 800b18c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b18e:	4b09      	ldr	r3, [pc, #36]	; (800b1b4 <HAL_RCC_ClockConfig+0x1d0>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4618      	mov	r0, r3
 800b194:	f7fd fc1e 	bl	80089d4 <HAL_InitTick>

  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	40022000 	.word	0x40022000
 800b1a8:	40021000 	.word	0x40021000
 800b1ac:	0800e018 	.word	0x0800e018
 800b1b0:	200000a0 	.word	0x200000a0
 800b1b4:	200000a4 	.word	0x200000a4

0800b1b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b087      	sub	sp, #28
 800b1bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	60fb      	str	r3, [r7, #12]
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	60bb      	str	r3, [r7, #8]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	617b      	str	r3, [r7, #20]
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b1d2:	4b1e      	ldr	r3, [pc, #120]	; (800b24c <HAL_RCC_GetSysClockFreq+0x94>)
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f003 030c 	and.w	r3, r3, #12
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	d002      	beq.n	800b1e8 <HAL_RCC_GetSysClockFreq+0x30>
 800b1e2:	2b08      	cmp	r3, #8
 800b1e4:	d003      	beq.n	800b1ee <HAL_RCC_GetSysClockFreq+0x36>
 800b1e6:	e027      	b.n	800b238 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b1e8:	4b19      	ldr	r3, [pc, #100]	; (800b250 <HAL_RCC_GetSysClockFreq+0x98>)
 800b1ea:	613b      	str	r3, [r7, #16]
      break;
 800b1ec:	e027      	b.n	800b23e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	0c9b      	lsrs	r3, r3, #18
 800b1f2:	f003 030f 	and.w	r3, r3, #15
 800b1f6:	4a17      	ldr	r2, [pc, #92]	; (800b254 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b1f8:	5cd3      	ldrb	r3, [r2, r3]
 800b1fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b202:	2b00      	cmp	r3, #0
 800b204:	d010      	beq.n	800b228 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b206:	4b11      	ldr	r3, [pc, #68]	; (800b24c <HAL_RCC_GetSysClockFreq+0x94>)
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	0c5b      	lsrs	r3, r3, #17
 800b20c:	f003 0301 	and.w	r3, r3, #1
 800b210:	4a11      	ldr	r2, [pc, #68]	; (800b258 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b212:	5cd3      	ldrb	r3, [r2, r3]
 800b214:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a0d      	ldr	r2, [pc, #52]	; (800b250 <HAL_RCC_GetSysClockFreq+0x98>)
 800b21a:	fb03 f202 	mul.w	r2, r3, r2
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	fbb2 f3f3 	udiv	r3, r2, r3
 800b224:	617b      	str	r3, [r7, #20]
 800b226:	e004      	b.n	800b232 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a0c      	ldr	r2, [pc, #48]	; (800b25c <HAL_RCC_GetSysClockFreq+0xa4>)
 800b22c:	fb02 f303 	mul.w	r3, r2, r3
 800b230:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	613b      	str	r3, [r7, #16]
      break;
 800b236:	e002      	b.n	800b23e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b238:	4b05      	ldr	r3, [pc, #20]	; (800b250 <HAL_RCC_GetSysClockFreq+0x98>)
 800b23a:	613b      	str	r3, [r7, #16]
      break;
 800b23c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b23e:	693b      	ldr	r3, [r7, #16]
}
 800b240:	4618      	mov	r0, r3
 800b242:	371c      	adds	r7, #28
 800b244:	46bd      	mov	sp, r7
 800b246:	bc80      	pop	{r7}
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	40021000 	.word	0x40021000
 800b250:	007a1200 	.word	0x007a1200
 800b254:	0800e030 	.word	0x0800e030
 800b258:	0800e040 	.word	0x0800e040
 800b25c:	003d0900 	.word	0x003d0900

0800b260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b260:	b480      	push	{r7}
 800b262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b264:	4b02      	ldr	r3, [pc, #8]	; (800b270 <HAL_RCC_GetHCLKFreq+0x10>)
 800b266:	681b      	ldr	r3, [r3, #0]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bc80      	pop	{r7}
 800b26e:	4770      	bx	lr
 800b270:	200000a0 	.word	0x200000a0

0800b274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b278:	f7ff fff2 	bl	800b260 <HAL_RCC_GetHCLKFreq>
 800b27c:	4602      	mov	r2, r0
 800b27e:	4b05      	ldr	r3, [pc, #20]	; (800b294 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	0a1b      	lsrs	r3, r3, #8
 800b284:	f003 0307 	and.w	r3, r3, #7
 800b288:	4903      	ldr	r1, [pc, #12]	; (800b298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b28a:	5ccb      	ldrb	r3, [r1, r3]
 800b28c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b290:	4618      	mov	r0, r3
 800b292:	bd80      	pop	{r7, pc}
 800b294:	40021000 	.word	0x40021000
 800b298:	0800e028 	.word	0x0800e028

0800b29c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b2a0:	f7ff ffde 	bl	800b260 <HAL_RCC_GetHCLKFreq>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	4b05      	ldr	r3, [pc, #20]	; (800b2bc <HAL_RCC_GetPCLK2Freq+0x20>)
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	0adb      	lsrs	r3, r3, #11
 800b2ac:	f003 0307 	and.w	r3, r3, #7
 800b2b0:	4903      	ldr	r1, [pc, #12]	; (800b2c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b2b2:	5ccb      	ldrb	r3, [r1, r3]
 800b2b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	40021000 	.word	0x40021000
 800b2c0:	0800e028 	.word	0x0800e028

0800b2c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b2cc:	4b0a      	ldr	r3, [pc, #40]	; (800b2f8 <RCC_Delay+0x34>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a0a      	ldr	r2, [pc, #40]	; (800b2fc <RCC_Delay+0x38>)
 800b2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d6:	0a5b      	lsrs	r3, r3, #9
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	fb02 f303 	mul.w	r3, r2, r3
 800b2de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b2e0:	bf00      	nop
  }
  while (Delay --);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	1e5a      	subs	r2, r3, #1
 800b2e6:	60fa      	str	r2, [r7, #12]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1f9      	bne.n	800b2e0 <RCC_Delay+0x1c>
}
 800b2ec:	bf00      	nop
 800b2ee:	bf00      	nop
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bc80      	pop	{r7}
 800b2f6:	4770      	bx	lr
 800b2f8:	200000a0 	.word	0x200000a0
 800b2fc:	10624dd3 	.word	0x10624dd3

0800b300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d101      	bne.n	800b312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	e041      	b.n	800b396 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d106      	bne.n	800b32c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f7fd fa26 	bl	8008778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2202      	movs	r2, #2
 800b330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	3304      	adds	r3, #4
 800b33c:	4619      	mov	r1, r3
 800b33e:	4610      	mov	r0, r2
 800b340:	f000 fa82 	bl	800b848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
	...

0800b3a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d001      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e044      	b.n	800b442 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68da      	ldr	r2, [r3, #12]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f042 0201 	orr.w	r2, r2, #1
 800b3ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a1d      	ldr	r2, [pc, #116]	; (800b44c <HAL_TIM_Base_Start_IT+0xac>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d018      	beq.n	800b40c <HAL_TIM_Base_Start_IT+0x6c>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a1c      	ldr	r2, [pc, #112]	; (800b450 <HAL_TIM_Base_Start_IT+0xb0>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d013      	beq.n	800b40c <HAL_TIM_Base_Start_IT+0x6c>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ec:	d00e      	beq.n	800b40c <HAL_TIM_Base_Start_IT+0x6c>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a18      	ldr	r2, [pc, #96]	; (800b454 <HAL_TIM_Base_Start_IT+0xb4>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d009      	beq.n	800b40c <HAL_TIM_Base_Start_IT+0x6c>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a16      	ldr	r2, [pc, #88]	; (800b458 <HAL_TIM_Base_Start_IT+0xb8>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d004      	beq.n	800b40c <HAL_TIM_Base_Start_IT+0x6c>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a15      	ldr	r2, [pc, #84]	; (800b45c <HAL_TIM_Base_Start_IT+0xbc>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d111      	bne.n	800b430 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f003 0307 	and.w	r3, r3, #7
 800b416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2b06      	cmp	r3, #6
 800b41c:	d010      	beq.n	800b440 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f042 0201 	orr.w	r2, r2, #1
 800b42c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b42e:	e007      	b.n	800b440 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f042 0201 	orr.w	r2, r2, #1
 800b43e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	bc80      	pop	{r7}
 800b44a:	4770      	bx	lr
 800b44c:	40012c00 	.word	0x40012c00
 800b450:	40013400 	.word	0x40013400
 800b454:	40000400 	.word	0x40000400
 800b458:	40000800 	.word	0x40000800
 800b45c:	40000c00 	.word	0x40000c00

0800b460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	f003 0302 	and.w	r3, r3, #2
 800b472:	2b02      	cmp	r3, #2
 800b474:	d122      	bne.n	800b4bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	f003 0302 	and.w	r3, r3, #2
 800b480:	2b02      	cmp	r3, #2
 800b482:	d11b      	bne.n	800b4bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f06f 0202 	mvn.w	r2, #2
 800b48c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2201      	movs	r2, #1
 800b492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	699b      	ldr	r3, [r3, #24]
 800b49a:	f003 0303 	and.w	r3, r3, #3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d003      	beq.n	800b4aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 f9b4 	bl	800b810 <HAL_TIM_IC_CaptureCallback>
 800b4a8:	e005      	b.n	800b4b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 f9a7 	bl	800b7fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f9b6 	bl	800b822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	f003 0304 	and.w	r3, r3, #4
 800b4c6:	2b04      	cmp	r3, #4
 800b4c8:	d122      	bne.n	800b510 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	f003 0304 	and.w	r3, r3, #4
 800b4d4:	2b04      	cmp	r3, #4
 800b4d6:	d11b      	bne.n	800b510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f06f 0204 	mvn.w	r2, #4
 800b4e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2202      	movs	r2, #2
 800b4e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	699b      	ldr	r3, [r3, #24]
 800b4ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d003      	beq.n	800b4fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f98a 	bl	800b810 <HAL_TIM_IC_CaptureCallback>
 800b4fc:	e005      	b.n	800b50a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f97d 	bl	800b7fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f98c 	bl	800b822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	f003 0308 	and.w	r3, r3, #8
 800b51a:	2b08      	cmp	r3, #8
 800b51c:	d122      	bne.n	800b564 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	f003 0308 	and.w	r3, r3, #8
 800b528:	2b08      	cmp	r3, #8
 800b52a:	d11b      	bne.n	800b564 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f06f 0208 	mvn.w	r2, #8
 800b534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2204      	movs	r2, #4
 800b53a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	69db      	ldr	r3, [r3, #28]
 800b542:	f003 0303 	and.w	r3, r3, #3
 800b546:	2b00      	cmp	r3, #0
 800b548:	d003      	beq.n	800b552 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f960 	bl	800b810 <HAL_TIM_IC_CaptureCallback>
 800b550:	e005      	b.n	800b55e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f953 	bl	800b7fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f962 	bl	800b822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	f003 0310 	and.w	r3, r3, #16
 800b56e:	2b10      	cmp	r3, #16
 800b570:	d122      	bne.n	800b5b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	f003 0310 	and.w	r3, r3, #16
 800b57c:	2b10      	cmp	r3, #16
 800b57e:	d11b      	bne.n	800b5b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f06f 0210 	mvn.w	r2, #16
 800b588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2208      	movs	r2, #8
 800b58e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	69db      	ldr	r3, [r3, #28]
 800b596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d003      	beq.n	800b5a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f936 	bl	800b810 <HAL_TIM_IC_CaptureCallback>
 800b5a4:	e005      	b.n	800b5b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f929 	bl	800b7fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f938 	bl	800b822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	f003 0301 	and.w	r3, r3, #1
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d10e      	bne.n	800b5e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	f003 0301 	and.w	r3, r3, #1
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d107      	bne.n	800b5e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f06f 0201 	mvn.w	r2, #1
 800b5dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7fc fd62 	bl	80080a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ee:	2b80      	cmp	r3, #128	; 0x80
 800b5f0:	d10e      	bne.n	800b610 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5fc:	2b80      	cmp	r3, #128	; 0x80
 800b5fe:	d107      	bne.n	800b610 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 faa1 	bl	800bb52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	691b      	ldr	r3, [r3, #16]
 800b616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b61a:	2b40      	cmp	r3, #64	; 0x40
 800b61c:	d10e      	bne.n	800b63c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b628:	2b40      	cmp	r3, #64	; 0x40
 800b62a:	d107      	bne.n	800b63c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f8fc 	bl	800b834 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	691b      	ldr	r3, [r3, #16]
 800b642:	f003 0320 	and.w	r3, r3, #32
 800b646:	2b20      	cmp	r3, #32
 800b648:	d10e      	bne.n	800b668 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	f003 0320 	and.w	r3, r3, #32
 800b654:	2b20      	cmp	r3, #32
 800b656:	d107      	bne.n	800b668 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f06f 0220 	mvn.w	r2, #32
 800b660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fa6c 	bl	800bb40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b668:	bf00      	nop
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b684:	2b01      	cmp	r3, #1
 800b686:	d101      	bne.n	800b68c <HAL_TIM_ConfigClockSource+0x1c>
 800b688:	2302      	movs	r3, #2
 800b68a:	e0b4      	b.n	800b7f6 <HAL_TIM_ConfigClockSource+0x186>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2202      	movs	r2, #2
 800b698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b6aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6c4:	d03e      	beq.n	800b744 <HAL_TIM_ConfigClockSource+0xd4>
 800b6c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6ca:	f200 8087 	bhi.w	800b7dc <HAL_TIM_ConfigClockSource+0x16c>
 800b6ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6d2:	f000 8086 	beq.w	800b7e2 <HAL_TIM_ConfigClockSource+0x172>
 800b6d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6da:	d87f      	bhi.n	800b7dc <HAL_TIM_ConfigClockSource+0x16c>
 800b6dc:	2b70      	cmp	r3, #112	; 0x70
 800b6de:	d01a      	beq.n	800b716 <HAL_TIM_ConfigClockSource+0xa6>
 800b6e0:	2b70      	cmp	r3, #112	; 0x70
 800b6e2:	d87b      	bhi.n	800b7dc <HAL_TIM_ConfigClockSource+0x16c>
 800b6e4:	2b60      	cmp	r3, #96	; 0x60
 800b6e6:	d050      	beq.n	800b78a <HAL_TIM_ConfigClockSource+0x11a>
 800b6e8:	2b60      	cmp	r3, #96	; 0x60
 800b6ea:	d877      	bhi.n	800b7dc <HAL_TIM_ConfigClockSource+0x16c>
 800b6ec:	2b50      	cmp	r3, #80	; 0x50
 800b6ee:	d03c      	beq.n	800b76a <HAL_TIM_ConfigClockSource+0xfa>
 800b6f0:	2b50      	cmp	r3, #80	; 0x50
 800b6f2:	d873      	bhi.n	800b7dc <HAL_TIM_ConfigClockSource+0x16c>
 800b6f4:	2b40      	cmp	r3, #64	; 0x40
 800b6f6:	d058      	beq.n	800b7aa <HAL_TIM_ConfigClockSource+0x13a>
 800b6f8:	2b40      	cmp	r3, #64	; 0x40
 800b6fa:	d86f      	bhi.n	800b7dc <HAL_TIM_ConfigClockSource+0x16c>
 800b6fc:	2b30      	cmp	r3, #48	; 0x30
 800b6fe:	d064      	beq.n	800b7ca <HAL_TIM_ConfigClockSource+0x15a>
 800b700:	2b30      	cmp	r3, #48	; 0x30
 800b702:	d86b      	bhi.n	800b7dc <HAL_TIM_ConfigClockSource+0x16c>
 800b704:	2b20      	cmp	r3, #32
 800b706:	d060      	beq.n	800b7ca <HAL_TIM_ConfigClockSource+0x15a>
 800b708:	2b20      	cmp	r3, #32
 800b70a:	d867      	bhi.n	800b7dc <HAL_TIM_ConfigClockSource+0x16c>
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d05c      	beq.n	800b7ca <HAL_TIM_ConfigClockSource+0x15a>
 800b710:	2b10      	cmp	r3, #16
 800b712:	d05a      	beq.n	800b7ca <HAL_TIM_ConfigClockSource+0x15a>
 800b714:	e062      	b.n	800b7dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b726:	f000 f980 	bl	800ba2a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b738:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	609a      	str	r2, [r3, #8]
      break;
 800b742:	e04f      	b.n	800b7e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b754:	f000 f969 	bl	800ba2a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	689a      	ldr	r2, [r3, #8]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b766:	609a      	str	r2, [r3, #8]
      break;
 800b768:	e03c      	b.n	800b7e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b776:	461a      	mov	r2, r3
 800b778:	f000 f8e0 	bl	800b93c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2150      	movs	r1, #80	; 0x50
 800b782:	4618      	mov	r0, r3
 800b784:	f000 f937 	bl	800b9f6 <TIM_ITRx_SetConfig>
      break;
 800b788:	e02c      	b.n	800b7e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b796:	461a      	mov	r2, r3
 800b798:	f000 f8fe 	bl	800b998 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2160      	movs	r1, #96	; 0x60
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f000 f927 	bl	800b9f6 <TIM_ITRx_SetConfig>
      break;
 800b7a8:	e01c      	b.n	800b7e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	f000 f8c0 	bl	800b93c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2140      	movs	r1, #64	; 0x40
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 f917 	bl	800b9f6 <TIM_ITRx_SetConfig>
      break;
 800b7c8:	e00c      	b.n	800b7e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	f000 f90e 	bl	800b9f6 <TIM_ITRx_SetConfig>
      break;
 800b7da:	e003      	b.n	800b7e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	73fb      	strb	r3, [r7, #15]
      break;
 800b7e0:	e000      	b.n	800b7e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b7e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7fe:	b480      	push	{r7}
 800b800:	b083      	sub	sp, #12
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b806:	bf00      	nop
 800b808:	370c      	adds	r7, #12
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bc80      	pop	{r7}
 800b80e:	4770      	bx	lr

0800b810 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b818:	bf00      	nop
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bc80      	pop	{r7}
 800b820:	4770      	bx	lr

0800b822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b822:	b480      	push	{r7}
 800b824:	b083      	sub	sp, #12
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b82a:	bf00      	nop
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	bc80      	pop	{r7}
 800b832:	4770      	bx	lr

0800b834 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b83c:	bf00      	nop
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	bc80      	pop	{r7}
 800b844:	4770      	bx	lr
	...

0800b848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a33      	ldr	r2, [pc, #204]	; (800b928 <TIM_Base_SetConfig+0xe0>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d013      	beq.n	800b888 <TIM_Base_SetConfig+0x40>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a32      	ldr	r2, [pc, #200]	; (800b92c <TIM_Base_SetConfig+0xe4>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d00f      	beq.n	800b888 <TIM_Base_SetConfig+0x40>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b86e:	d00b      	beq.n	800b888 <TIM_Base_SetConfig+0x40>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a2f      	ldr	r2, [pc, #188]	; (800b930 <TIM_Base_SetConfig+0xe8>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d007      	beq.n	800b888 <TIM_Base_SetConfig+0x40>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a2e      	ldr	r2, [pc, #184]	; (800b934 <TIM_Base_SetConfig+0xec>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d003      	beq.n	800b888 <TIM_Base_SetConfig+0x40>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4a2d      	ldr	r2, [pc, #180]	; (800b938 <TIM_Base_SetConfig+0xf0>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d108      	bne.n	800b89a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b88e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	4313      	orrs	r3, r2
 800b898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4a22      	ldr	r2, [pc, #136]	; (800b928 <TIM_Base_SetConfig+0xe0>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d013      	beq.n	800b8ca <TIM_Base_SetConfig+0x82>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4a21      	ldr	r2, [pc, #132]	; (800b92c <TIM_Base_SetConfig+0xe4>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d00f      	beq.n	800b8ca <TIM_Base_SetConfig+0x82>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8b0:	d00b      	beq.n	800b8ca <TIM_Base_SetConfig+0x82>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4a1e      	ldr	r2, [pc, #120]	; (800b930 <TIM_Base_SetConfig+0xe8>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d007      	beq.n	800b8ca <TIM_Base_SetConfig+0x82>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a1d      	ldr	r2, [pc, #116]	; (800b934 <TIM_Base_SetConfig+0xec>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d003      	beq.n	800b8ca <TIM_Base_SetConfig+0x82>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a1c      	ldr	r2, [pc, #112]	; (800b938 <TIM_Base_SetConfig+0xf0>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d108      	bne.n	800b8dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	695b      	ldr	r3, [r3, #20]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	689a      	ldr	r2, [r3, #8]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a09      	ldr	r2, [pc, #36]	; (800b928 <TIM_Base_SetConfig+0xe0>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d003      	beq.n	800b910 <TIM_Base_SetConfig+0xc8>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a08      	ldr	r2, [pc, #32]	; (800b92c <TIM_Base_SetConfig+0xe4>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d103      	bne.n	800b918 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	691a      	ldr	r2, [r3, #16]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	615a      	str	r2, [r3, #20]
}
 800b91e:	bf00      	nop
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	bc80      	pop	{r7}
 800b926:	4770      	bx	lr
 800b928:	40012c00 	.word	0x40012c00
 800b92c:	40013400 	.word	0x40013400
 800b930:	40000400 	.word	0x40000400
 800b934:	40000800 	.word	0x40000800
 800b938:	40000c00 	.word	0x40000c00

0800b93c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6a1b      	ldr	r3, [r3, #32]
 800b94c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6a1b      	ldr	r3, [r3, #32]
 800b952:	f023 0201 	bic.w	r2, r3, #1
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	699b      	ldr	r3, [r3, #24]
 800b95e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	011b      	lsls	r3, r3, #4
 800b96c:	693a      	ldr	r2, [r7, #16]
 800b96e:	4313      	orrs	r3, r2
 800b970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	f023 030a 	bic.w	r3, r3, #10
 800b978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	4313      	orrs	r3, r2
 800b980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	697a      	ldr	r2, [r7, #20]
 800b98c:	621a      	str	r2, [r3, #32]
}
 800b98e:	bf00      	nop
 800b990:	371c      	adds	r7, #28
 800b992:	46bd      	mov	sp, r7
 800b994:	bc80      	pop	{r7}
 800b996:	4770      	bx	lr

0800b998 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b998:	b480      	push	{r7}
 800b99a:	b087      	sub	sp, #28
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6a1b      	ldr	r3, [r3, #32]
 800b9a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	f023 0210 	bic.w	r2, r3, #16
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	699b      	ldr	r3, [r3, #24]
 800b9ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b9c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	031b      	lsls	r3, r3, #12
 800b9c8:	693a      	ldr	r2, [r7, #16]
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b9d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	011b      	lsls	r3, r3, #4
 800b9da:	697a      	ldr	r2, [r7, #20]
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	693a      	ldr	r2, [r7, #16]
 800b9e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	697a      	ldr	r2, [r7, #20]
 800b9ea:	621a      	str	r2, [r3, #32]
}
 800b9ec:	bf00      	nop
 800b9ee:	371c      	adds	r7, #28
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bc80      	pop	{r7}
 800b9f4:	4770      	bx	lr

0800b9f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9f6:	b480      	push	{r7}
 800b9f8:	b085      	sub	sp, #20
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba0e:	683a      	ldr	r2, [r7, #0]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	f043 0307 	orr.w	r3, r3, #7
 800ba18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	609a      	str	r2, [r3, #8]
}
 800ba20:	bf00      	nop
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bc80      	pop	{r7}
 800ba28:	4770      	bx	lr

0800ba2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	b087      	sub	sp, #28
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	60f8      	str	r0, [r7, #12]
 800ba32:	60b9      	str	r1, [r7, #8]
 800ba34:	607a      	str	r2, [r7, #4]
 800ba36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	021a      	lsls	r2, r3, #8
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	431a      	orrs	r2, r3
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	697a      	ldr	r2, [r7, #20]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	697a      	ldr	r2, [r7, #20]
 800ba5c:	609a      	str	r2, [r3, #8]
}
 800ba5e:	bf00      	nop
 800ba60:	371c      	adds	r7, #28
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bc80      	pop	{r7}
 800ba66:	4770      	bx	lr

0800ba68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d101      	bne.n	800ba80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	e050      	b.n	800bb22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	4313      	orrs	r3, r2
 800bab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a1b      	ldr	r2, [pc, #108]	; (800bb2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d018      	beq.n	800baf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a19      	ldr	r2, [pc, #100]	; (800bb30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d013      	beq.n	800baf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bad6:	d00e      	beq.n	800baf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a15      	ldr	r2, [pc, #84]	; (800bb34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d009      	beq.n	800baf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a14      	ldr	r2, [pc, #80]	; (800bb38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d004      	beq.n	800baf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a12      	ldr	r2, [pc, #72]	; (800bb3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d10c      	bne.n	800bb10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bafc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68ba      	ldr	r2, [r7, #8]
 800bb0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bc80      	pop	{r7}
 800bb2a:	4770      	bx	lr
 800bb2c:	40012c00 	.word	0x40012c00
 800bb30:	40013400 	.word	0x40013400
 800bb34:	40000400 	.word	0x40000400
 800bb38:	40000800 	.word	0x40000800
 800bb3c:	40000c00 	.word	0x40000c00

0800bb40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bc80      	pop	{r7}
 800bb50:	4770      	bx	lr

0800bb52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb52:	b480      	push	{r7}
 800bb54:	b083      	sub	sp, #12
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb5a:	bf00      	nop
 800bb5c:	370c      	adds	r7, #12
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bc80      	pop	{r7}
 800bb62:	4770      	bx	lr

0800bb64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d101      	bne.n	800bb76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	e042      	b.n	800bbfc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d106      	bne.n	800bb90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7fc fe1a 	bl	80087c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2224      	movs	r2, #36	; 0x24
 800bb94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68da      	ldr	r2, [r3, #12]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fcb5 	bl	800c518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	691a      	ldr	r2, [r3, #16]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	695a      	ldr	r2, [r3, #20]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68da      	ldr	r2, [r3, #12]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bbdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2220      	movs	r2, #32
 800bbf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	2b20      	cmp	r3, #32
 800bc1c:	d121      	bne.n	800bc62 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d002      	beq.n	800bc2a <HAL_UART_Transmit_IT+0x26>
 800bc24:	88fb      	ldrh	r3, [r7, #6]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d101      	bne.n	800bc2e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e01a      	b.n	800bc64 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	88fa      	ldrh	r2, [r7, #6]
 800bc38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	88fa      	ldrh	r2, [r7, #6]
 800bc3e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2200      	movs	r2, #0
 800bc44:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2221      	movs	r2, #33	; 0x21
 800bc4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68da      	ldr	r2, [r3, #12]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc5c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	e000      	b.n	800bc64 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800bc62:	2302      	movs	r3, #2
  }
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bc80      	pop	{r7}
 800bc6c:	4770      	bx	lr
	...

0800bc70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b0ba      	sub	sp, #232	; 0xe8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bc96:	2300      	movs	r3, #0
 800bc98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bca6:	f003 030f 	and.w	r3, r3, #15
 800bcaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bcae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10f      	bne.n	800bcd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bcb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcba:	f003 0320 	and.w	r3, r3, #32
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d009      	beq.n	800bcd6 <HAL_UART_IRQHandler+0x66>
 800bcc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcc6:	f003 0320 	and.w	r3, r3, #32
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d003      	beq.n	800bcd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fb63 	bl	800c39a <UART_Receive_IT>
      return;
 800bcd4:	e25b      	b.n	800c18e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bcd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f000 80de 	beq.w	800be9c <HAL_UART_IRQHandler+0x22c>
 800bce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bce4:	f003 0301 	and.w	r3, r3, #1
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d106      	bne.n	800bcfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bcec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcf0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 80d1 	beq.w	800be9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bcfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00b      	beq.n	800bd1e <HAL_UART_IRQHandler+0xae>
 800bd06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d005      	beq.n	800bd1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd16:	f043 0201 	orr.w	r2, r3, #1
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd22:	f003 0304 	and.w	r3, r3, #4
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00b      	beq.n	800bd42 <HAL_UART_IRQHandler+0xd2>
 800bd2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d005      	beq.n	800bd42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd3a:	f043 0202 	orr.w	r2, r3, #2
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd46:	f003 0302 	and.w	r3, r3, #2
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00b      	beq.n	800bd66 <HAL_UART_IRQHandler+0xf6>
 800bd4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d005      	beq.n	800bd66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd5e:	f043 0204 	orr.w	r2, r3, #4
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bd66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd6a:	f003 0308 	and.w	r3, r3, #8
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d011      	beq.n	800bd96 <HAL_UART_IRQHandler+0x126>
 800bd72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd76:	f003 0320 	and.w	r3, r3, #32
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d105      	bne.n	800bd8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bd7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd82:	f003 0301 	and.w	r3, r3, #1
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d005      	beq.n	800bd96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd8e:	f043 0208 	orr.w	r2, r3, #8
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 81f2 	beq.w	800c184 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bda0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bda4:	f003 0320 	and.w	r3, r3, #32
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d008      	beq.n	800bdbe <HAL_UART_IRQHandler+0x14e>
 800bdac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdb0:	f003 0320 	and.w	r3, r3, #32
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d002      	beq.n	800bdbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 faee 	bl	800c39a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	695b      	ldr	r3, [r3, #20]
 800bdc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	bf14      	ite	ne
 800bdcc:	2301      	movne	r3, #1
 800bdce:	2300      	moveq	r3, #0
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdda:	f003 0308 	and.w	r3, r3, #8
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d103      	bne.n	800bdea <HAL_UART_IRQHandler+0x17a>
 800bde2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d04f      	beq.n	800be8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 f9f8 	bl	800c1e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	695b      	ldr	r3, [r3, #20]
 800bdf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d041      	beq.n	800be82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	3314      	adds	r3, #20
 800be04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be0c:	e853 3f00 	ldrex	r3, [r3]
 800be10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800be14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800be18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3314      	adds	r3, #20
 800be26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800be2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800be2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800be36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800be3a:	e841 2300 	strex	r3, r2, [r1]
 800be3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800be42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1d9      	bne.n	800bdfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d013      	beq.n	800be7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be56:	4a7e      	ldr	r2, [pc, #504]	; (800c050 <HAL_UART_IRQHandler+0x3e0>)
 800be58:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be5e:	4618      	mov	r0, r3
 800be60:	f7fd f86c 	bl	8008f3c <HAL_DMA_Abort_IT>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d016      	beq.n	800be98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800be74:	4610      	mov	r0, r2
 800be76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be78:	e00e      	b.n	800be98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f99c 	bl	800c1b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be80:	e00a      	b.n	800be98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 f998 	bl	800c1b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be88:	e006      	b.n	800be98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 f994 	bl	800c1b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800be96:	e175      	b.n	800c184 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be98:	bf00      	nop
    return;
 800be9a:	e173      	b.n	800c184 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	f040 814f 	bne.w	800c144 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beaa:	f003 0310 	and.w	r3, r3, #16
 800beae:	2b00      	cmp	r3, #0
 800beb0:	f000 8148 	beq.w	800c144 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800beb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800beb8:	f003 0310 	and.w	r3, r3, #16
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f000 8141 	beq.w	800c144 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bec2:	2300      	movs	r3, #0
 800bec4:	60bb      	str	r3, [r7, #8]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	60bb      	str	r3, [r7, #8]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	60bb      	str	r3, [r7, #8]
 800bed6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	695b      	ldr	r3, [r3, #20]
 800bede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	f000 80b6 	beq.w	800c054 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bef4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f000 8145 	beq.w	800c188 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bf02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf06:	429a      	cmp	r2, r3
 800bf08:	f080 813e 	bcs.w	800c188 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf18:	699b      	ldr	r3, [r3, #24]
 800bf1a:	2b20      	cmp	r3, #32
 800bf1c:	f000 8088 	beq.w	800c030 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	330c      	adds	r3, #12
 800bf26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf2e:	e853 3f00 	ldrex	r3, [r3]
 800bf32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bf36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	330c      	adds	r3, #12
 800bf48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bf4c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bf50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf54:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bf58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf5c:	e841 2300 	strex	r3, r2, [r1]
 800bf60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1d9      	bne.n	800bf20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	3314      	adds	r3, #20
 800bf72:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf76:	e853 3f00 	ldrex	r3, [r3]
 800bf7a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf7e:	f023 0301 	bic.w	r3, r3, #1
 800bf82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	3314      	adds	r3, #20
 800bf8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bf94:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf96:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bf98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf9c:	e841 2300 	strex	r3, r2, [r1]
 800bfa0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bfa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1e1      	bne.n	800bf6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3314      	adds	r3, #20
 800bfae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfb2:	e853 3f00 	ldrex	r3, [r3]
 800bfb6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bfb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	3314      	adds	r3, #20
 800bfc8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bfcc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bfce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bfd2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bfd4:	e841 2300 	strex	r3, r2, [r1]
 800bfd8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bfda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1e3      	bne.n	800bfa8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2220      	movs	r2, #32
 800bfe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	330c      	adds	r3, #12
 800bff4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff8:	e853 3f00 	ldrex	r3, [r3]
 800bffc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c000:	f023 0310 	bic.w	r3, r3, #16
 800c004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	330c      	adds	r3, #12
 800c00e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c012:	65ba      	str	r2, [r7, #88]	; 0x58
 800c014:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c016:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c018:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c01a:	e841 2300 	strex	r3, r2, [r1]
 800c01e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1e3      	bne.n	800bfee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fc ff4b 	bl	8008ec6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2202      	movs	r2, #2
 800c034:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c03e:	b29b      	uxth	r3, r3
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	b29b      	uxth	r3, r3
 800c044:	4619      	mov	r1, r3
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 f8bf 	bl	800c1ca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c04c:	e09c      	b.n	800c188 <HAL_UART_IRQHandler+0x518>
 800c04e:	bf00      	nop
 800c050:	0800c2a5 	.word	0x0800c2a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c068:	b29b      	uxth	r3, r3
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 808e 	beq.w	800c18c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c074:	2b00      	cmp	r3, #0
 800c076:	f000 8089 	beq.w	800c18c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	330c      	adds	r3, #12
 800c080:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c084:	e853 3f00 	ldrex	r3, [r3]
 800c088:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c08c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c090:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	330c      	adds	r3, #12
 800c09a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c09e:	647a      	str	r2, [r7, #68]	; 0x44
 800c0a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c0a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0a6:	e841 2300 	strex	r3, r2, [r1]
 800c0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1e3      	bne.n	800c07a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	3314      	adds	r3, #20
 800c0b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	e853 3f00 	ldrex	r3, [r3]
 800c0c0:	623b      	str	r3, [r7, #32]
   return(result);
 800c0c2:	6a3b      	ldr	r3, [r7, #32]
 800c0c4:	f023 0301 	bic.w	r3, r3, #1
 800c0c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	3314      	adds	r3, #20
 800c0d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c0d6:	633a      	str	r2, [r7, #48]	; 0x30
 800c0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0de:	e841 2300 	strex	r3, r2, [r1]
 800c0e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1e3      	bne.n	800c0b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2220      	movs	r2, #32
 800c0ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	330c      	adds	r3, #12
 800c0fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	e853 3f00 	ldrex	r3, [r3]
 800c106:	60fb      	str	r3, [r7, #12]
   return(result);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f023 0310 	bic.w	r3, r3, #16
 800c10e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	330c      	adds	r3, #12
 800c118:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c11c:	61fa      	str	r2, [r7, #28]
 800c11e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c120:	69b9      	ldr	r1, [r7, #24]
 800c122:	69fa      	ldr	r2, [r7, #28]
 800c124:	e841 2300 	strex	r3, r2, [r1]
 800c128:	617b      	str	r3, [r7, #20]
   return(result);
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d1e3      	bne.n	800c0f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2202      	movs	r2, #2
 800c134:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c136:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c13a:	4619      	mov	r1, r3
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f844 	bl	800c1ca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c142:	e023      	b.n	800c18c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d009      	beq.n	800c164 <HAL_UART_IRQHandler+0x4f4>
 800c150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d003      	beq.n	800c164 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 f8b5 	bl	800c2cc <UART_Transmit_IT>
    return;
 800c162:	e014      	b.n	800c18e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00e      	beq.n	800c18e <HAL_UART_IRQHandler+0x51e>
 800c170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d008      	beq.n	800c18e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 f8f4 	bl	800c36a <UART_EndTransmit_IT>
    return;
 800c182:	e004      	b.n	800c18e <HAL_UART_IRQHandler+0x51e>
    return;
 800c184:	bf00      	nop
 800c186:	e002      	b.n	800c18e <HAL_UART_IRQHandler+0x51e>
      return;
 800c188:	bf00      	nop
 800c18a:	e000      	b.n	800c18e <HAL_UART_IRQHandler+0x51e>
      return;
 800c18c:	bf00      	nop
  }
}
 800c18e:	37e8      	adds	r7, #232	; 0xe8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bc80      	pop	{r7}
 800c1a4:	4770      	bx	lr

0800c1a6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1a6:	b480      	push	{r7}
 800c1a8:	b083      	sub	sp, #12
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c1ae:	bf00      	nop
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bc80      	pop	{r7}
 800c1b6:	4770      	bx	lr

0800c1b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c1c0:	bf00      	nop
 800c1c2:	370c      	adds	r7, #12
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bc80      	pop	{r7}
 800c1c8:	4770      	bx	lr

0800c1ca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	b083      	sub	sp, #12
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c1d6:	bf00      	nop
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bc80      	pop	{r7}
 800c1de:	4770      	bx	lr

0800c1e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b095      	sub	sp, #84	; 0x54
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	330c      	adds	r3, #12
 800c1ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f2:	e853 3f00 	ldrex	r3, [r3]
 800c1f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	330c      	adds	r3, #12
 800c206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c208:	643a      	str	r2, [r7, #64]	; 0x40
 800c20a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c20e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c210:	e841 2300 	strex	r3, r2, [r1]
 800c214:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1e5      	bne.n	800c1e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	3314      	adds	r3, #20
 800c222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c224:	6a3b      	ldr	r3, [r7, #32]
 800c226:	e853 3f00 	ldrex	r3, [r3]
 800c22a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	f023 0301 	bic.w	r3, r3, #1
 800c232:	64bb      	str	r3, [r7, #72]	; 0x48
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3314      	adds	r3, #20
 800c23a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c23c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c23e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c244:	e841 2300 	strex	r3, r2, [r1]
 800c248:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1e5      	bne.n	800c21c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c254:	2b01      	cmp	r3, #1
 800c256:	d119      	bne.n	800c28c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	330c      	adds	r3, #12
 800c25e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	e853 3f00 	ldrex	r3, [r3]
 800c266:	60bb      	str	r3, [r7, #8]
   return(result);
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	f023 0310 	bic.w	r3, r3, #16
 800c26e:	647b      	str	r3, [r7, #68]	; 0x44
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	330c      	adds	r3, #12
 800c276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c278:	61ba      	str	r2, [r7, #24]
 800c27a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27c:	6979      	ldr	r1, [r7, #20]
 800c27e:	69ba      	ldr	r2, [r7, #24]
 800c280:	e841 2300 	strex	r3, r2, [r1]
 800c284:	613b      	str	r3, [r7, #16]
   return(result);
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1e5      	bne.n	800c258 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2220      	movs	r2, #32
 800c290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c29a:	bf00      	nop
 800c29c:	3754      	adds	r7, #84	; 0x54
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bc80      	pop	{r7}
 800c2a2:	4770      	bx	lr

0800c2a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f7ff ff7a 	bl	800c1b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2c4:	bf00      	nop
 800c2c6:	3710      	adds	r7, #16
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	2b21      	cmp	r3, #33	; 0x21
 800c2de:	d13e      	bne.n	800c35e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2e8:	d114      	bne.n	800c314 <UART_Transmit_IT+0x48>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	691b      	ldr	r3, [r3, #16]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d110      	bne.n	800c314 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6a1b      	ldr	r3, [r3, #32]
 800c2f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	881b      	ldrh	r3, [r3, #0]
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c306:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6a1b      	ldr	r3, [r3, #32]
 800c30c:	1c9a      	adds	r2, r3, #2
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	621a      	str	r2, [r3, #32]
 800c312:	e008      	b.n	800c326 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6a1b      	ldr	r3, [r3, #32]
 800c318:	1c59      	adds	r1, r3, #1
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	6211      	str	r1, [r2, #32]
 800c31e:	781a      	ldrb	r2, [r3, #0]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	3b01      	subs	r3, #1
 800c32e:	b29b      	uxth	r3, r3
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	4619      	mov	r1, r3
 800c334:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10f      	bne.n	800c35a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	68da      	ldr	r2, [r3, #12]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c348:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	68da      	ldr	r2, [r3, #12]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c358:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c35a:	2300      	movs	r3, #0
 800c35c:	e000      	b.n	800c360 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c35e:	2302      	movs	r3, #2
  }
}
 800c360:	4618      	mov	r0, r3
 800c362:	3714      	adds	r7, #20
 800c364:	46bd      	mov	sp, r7
 800c366:	bc80      	pop	{r7}
 800c368:	4770      	bx	lr

0800c36a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b082      	sub	sp, #8
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	68da      	ldr	r2, [r3, #12]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c380:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2220      	movs	r2, #32
 800c386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7ff ff02 	bl	800c194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b08c      	sub	sp, #48	; 0x30
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	2b22      	cmp	r3, #34	; 0x22
 800c3ac:	f040 80ae 	bne.w	800c50c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3b8:	d117      	bne.n	800c3ea <UART_Receive_IT+0x50>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	691b      	ldr	r3, [r3, #16]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d113      	bne.n	800c3ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e2:	1c9a      	adds	r2, r3, #2
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	629a      	str	r2, [r3, #40]	; 0x28
 800c3e8:	e026      	b.n	800c438 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3fc:	d007      	beq.n	800c40e <UART_Receive_IT+0x74>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d10a      	bne.n	800c41c <UART_Receive_IT+0x82>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d106      	bne.n	800c41c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	b2da      	uxtb	r2, r3
 800c416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c418:	701a      	strb	r2, [r3, #0]
 800c41a:	e008      	b.n	800c42e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	b2db      	uxtb	r3, r3
 800c424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c428:	b2da      	uxtb	r2, r3
 800c42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c432:	1c5a      	adds	r2, r3, #1
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	3b01      	subs	r3, #1
 800c440:	b29b      	uxth	r3, r3
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	4619      	mov	r1, r3
 800c446:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d15d      	bne.n	800c508 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	68da      	ldr	r2, [r3, #12]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f022 0220 	bic.w	r2, r2, #32
 800c45a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	68da      	ldr	r2, [r3, #12]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c46a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	695a      	ldr	r2, [r3, #20]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f022 0201 	bic.w	r2, r2, #1
 800c47a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2220      	movs	r2, #32
 800c480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d135      	bne.n	800c4fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	330c      	adds	r3, #12
 800c49e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	e853 3f00 	ldrex	r3, [r3]
 800c4a6:	613b      	str	r3, [r7, #16]
   return(result);
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	f023 0310 	bic.w	r3, r3, #16
 800c4ae:	627b      	str	r3, [r7, #36]	; 0x24
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	330c      	adds	r3, #12
 800c4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4b8:	623a      	str	r2, [r7, #32]
 800c4ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4bc:	69f9      	ldr	r1, [r7, #28]
 800c4be:	6a3a      	ldr	r2, [r7, #32]
 800c4c0:	e841 2300 	strex	r3, r2, [r1]
 800c4c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1e5      	bne.n	800c498 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f003 0310 	and.w	r3, r3, #16
 800c4d6:	2b10      	cmp	r3, #16
 800c4d8:	d10a      	bne.n	800c4f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c4da:	2300      	movs	r3, #0
 800c4dc:	60fb      	str	r3, [r7, #12]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	60fb      	str	r3, [r7, #12]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	60fb      	str	r3, [r7, #12]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7ff fe67 	bl	800c1ca <HAL_UARTEx_RxEventCallback>
 800c4fc:	e002      	b.n	800c504 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f7ff fe51 	bl	800c1a6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	e002      	b.n	800c50e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c508:	2300      	movs	r3, #0
 800c50a:	e000      	b.n	800c50e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c50c:	2302      	movs	r3, #2
  }
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3730      	adds	r7, #48	; 0x30
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	691b      	ldr	r3, [r3, #16]
 800c526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	68da      	ldr	r2, [r3, #12]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	430a      	orrs	r2, r1
 800c534:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	689a      	ldr	r2, [r3, #8]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	691b      	ldr	r3, [r3, #16]
 800c53e:	431a      	orrs	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	695b      	ldr	r3, [r3, #20]
 800c544:	4313      	orrs	r3, r2
 800c546:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c552:	f023 030c 	bic.w	r3, r3, #12
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	6812      	ldr	r2, [r2, #0]
 800c55a:	68b9      	ldr	r1, [r7, #8]
 800c55c:	430b      	orrs	r3, r1
 800c55e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	695b      	ldr	r3, [r3, #20]
 800c566:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	699a      	ldr	r2, [r3, #24]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	430a      	orrs	r2, r1
 800c574:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a2c      	ldr	r2, [pc, #176]	; (800c62c <UART_SetConfig+0x114>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d103      	bne.n	800c588 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c580:	f7fe fe8c 	bl	800b29c <HAL_RCC_GetPCLK2Freq>
 800c584:	60f8      	str	r0, [r7, #12]
 800c586:	e002      	b.n	800c58e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c588:	f7fe fe74 	bl	800b274 <HAL_RCC_GetPCLK1Freq>
 800c58c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	4613      	mov	r3, r2
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	4413      	add	r3, r2
 800c596:	009a      	lsls	r2, r3, #2
 800c598:	441a      	add	r2, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5a4:	4a22      	ldr	r2, [pc, #136]	; (800c630 <UART_SetConfig+0x118>)
 800c5a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5aa:	095b      	lsrs	r3, r3, #5
 800c5ac:	0119      	lsls	r1, r3, #4
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4413      	add	r3, r2
 800c5b6:	009a      	lsls	r2, r3, #2
 800c5b8:	441a      	add	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c5c4:	4b1a      	ldr	r3, [pc, #104]	; (800c630 <UART_SetConfig+0x118>)
 800c5c6:	fba3 0302 	umull	r0, r3, r3, r2
 800c5ca:	095b      	lsrs	r3, r3, #5
 800c5cc:	2064      	movs	r0, #100	; 0x64
 800c5ce:	fb00 f303 	mul.w	r3, r0, r3
 800c5d2:	1ad3      	subs	r3, r2, r3
 800c5d4:	011b      	lsls	r3, r3, #4
 800c5d6:	3332      	adds	r3, #50	; 0x32
 800c5d8:	4a15      	ldr	r2, [pc, #84]	; (800c630 <UART_SetConfig+0x118>)
 800c5da:	fba2 2303 	umull	r2, r3, r2, r3
 800c5de:	095b      	lsrs	r3, r3, #5
 800c5e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5e4:	4419      	add	r1, r3
 800c5e6:	68fa      	ldr	r2, [r7, #12]
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	4413      	add	r3, r2
 800c5ee:	009a      	lsls	r2, r3, #2
 800c5f0:	441a      	add	r2, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	fbb2 f2f3 	udiv	r2, r2, r3
 800c5fc:	4b0c      	ldr	r3, [pc, #48]	; (800c630 <UART_SetConfig+0x118>)
 800c5fe:	fba3 0302 	umull	r0, r3, r3, r2
 800c602:	095b      	lsrs	r3, r3, #5
 800c604:	2064      	movs	r0, #100	; 0x64
 800c606:	fb00 f303 	mul.w	r3, r0, r3
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	011b      	lsls	r3, r3, #4
 800c60e:	3332      	adds	r3, #50	; 0x32
 800c610:	4a07      	ldr	r2, [pc, #28]	; (800c630 <UART_SetConfig+0x118>)
 800c612:	fba2 2303 	umull	r2, r3, r2, r3
 800c616:	095b      	lsrs	r3, r3, #5
 800c618:	f003 020f 	and.w	r2, r3, #15
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	440a      	add	r2, r1
 800c622:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c624:	bf00      	nop
 800c626:	3710      	adds	r7, #16
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	40013800 	.word	0x40013800
 800c630:	51eb851f 	.word	0x51eb851f

0800c634 <__itoa>:
 800c634:	1e93      	subs	r3, r2, #2
 800c636:	2b22      	cmp	r3, #34	; 0x22
 800c638:	b510      	push	{r4, lr}
 800c63a:	460c      	mov	r4, r1
 800c63c:	d904      	bls.n	800c648 <__itoa+0x14>
 800c63e:	2300      	movs	r3, #0
 800c640:	461c      	mov	r4, r3
 800c642:	700b      	strb	r3, [r1, #0]
 800c644:	4620      	mov	r0, r4
 800c646:	bd10      	pop	{r4, pc}
 800c648:	2a0a      	cmp	r2, #10
 800c64a:	d109      	bne.n	800c660 <__itoa+0x2c>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	da07      	bge.n	800c660 <__itoa+0x2c>
 800c650:	232d      	movs	r3, #45	; 0x2d
 800c652:	700b      	strb	r3, [r1, #0]
 800c654:	2101      	movs	r1, #1
 800c656:	4240      	negs	r0, r0
 800c658:	4421      	add	r1, r4
 800c65a:	f000 f8d9 	bl	800c810 <__utoa>
 800c65e:	e7f1      	b.n	800c644 <__itoa+0x10>
 800c660:	2100      	movs	r1, #0
 800c662:	e7f9      	b.n	800c658 <__itoa+0x24>

0800c664 <itoa>:
 800c664:	f7ff bfe6 	b.w	800c634 <__itoa>

0800c668 <malloc>:
 800c668:	4b02      	ldr	r3, [pc, #8]	; (800c674 <malloc+0xc>)
 800c66a:	4601      	mov	r1, r0
 800c66c:	6818      	ldr	r0, [r3, #0]
 800c66e:	f000 b823 	b.w	800c6b8 <_malloc_r>
 800c672:	bf00      	nop
 800c674:	200000f8 	.word	0x200000f8

0800c678 <sbrk_aligned>:
 800c678:	b570      	push	{r4, r5, r6, lr}
 800c67a:	4e0e      	ldr	r6, [pc, #56]	; (800c6b4 <sbrk_aligned+0x3c>)
 800c67c:	460c      	mov	r4, r1
 800c67e:	6831      	ldr	r1, [r6, #0]
 800c680:	4605      	mov	r5, r0
 800c682:	b911      	cbnz	r1, 800c68a <sbrk_aligned+0x12>
 800c684:	f000 f91e 	bl	800c8c4 <_sbrk_r>
 800c688:	6030      	str	r0, [r6, #0]
 800c68a:	4621      	mov	r1, r4
 800c68c:	4628      	mov	r0, r5
 800c68e:	f000 f919 	bl	800c8c4 <_sbrk_r>
 800c692:	1c43      	adds	r3, r0, #1
 800c694:	d00a      	beq.n	800c6ac <sbrk_aligned+0x34>
 800c696:	1cc4      	adds	r4, r0, #3
 800c698:	f024 0403 	bic.w	r4, r4, #3
 800c69c:	42a0      	cmp	r0, r4
 800c69e:	d007      	beq.n	800c6b0 <sbrk_aligned+0x38>
 800c6a0:	1a21      	subs	r1, r4, r0
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	f000 f90e 	bl	800c8c4 <_sbrk_r>
 800c6a8:	3001      	adds	r0, #1
 800c6aa:	d101      	bne.n	800c6b0 <sbrk_aligned+0x38>
 800c6ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	bd70      	pop	{r4, r5, r6, pc}
 800c6b4:	20000498 	.word	0x20000498

0800c6b8 <_malloc_r>:
 800c6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6bc:	1ccd      	adds	r5, r1, #3
 800c6be:	f025 0503 	bic.w	r5, r5, #3
 800c6c2:	3508      	adds	r5, #8
 800c6c4:	2d0c      	cmp	r5, #12
 800c6c6:	bf38      	it	cc
 800c6c8:	250c      	movcc	r5, #12
 800c6ca:	2d00      	cmp	r5, #0
 800c6cc:	4607      	mov	r7, r0
 800c6ce:	db01      	blt.n	800c6d4 <_malloc_r+0x1c>
 800c6d0:	42a9      	cmp	r1, r5
 800c6d2:	d905      	bls.n	800c6e0 <_malloc_r+0x28>
 800c6d4:	230c      	movs	r3, #12
 800c6d6:	2600      	movs	r6, #0
 800c6d8:	603b      	str	r3, [r7, #0]
 800c6da:	4630      	mov	r0, r6
 800c6dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c7b4 <_malloc_r+0xfc>
 800c6e4:	f000 f868 	bl	800c7b8 <__malloc_lock>
 800c6e8:	f8d8 3000 	ldr.w	r3, [r8]
 800c6ec:	461c      	mov	r4, r3
 800c6ee:	bb5c      	cbnz	r4, 800c748 <_malloc_r+0x90>
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	4638      	mov	r0, r7
 800c6f4:	f7ff ffc0 	bl	800c678 <sbrk_aligned>
 800c6f8:	1c43      	adds	r3, r0, #1
 800c6fa:	4604      	mov	r4, r0
 800c6fc:	d155      	bne.n	800c7aa <_malloc_r+0xf2>
 800c6fe:	f8d8 4000 	ldr.w	r4, [r8]
 800c702:	4626      	mov	r6, r4
 800c704:	2e00      	cmp	r6, #0
 800c706:	d145      	bne.n	800c794 <_malloc_r+0xdc>
 800c708:	2c00      	cmp	r4, #0
 800c70a:	d048      	beq.n	800c79e <_malloc_r+0xe6>
 800c70c:	6823      	ldr	r3, [r4, #0]
 800c70e:	4631      	mov	r1, r6
 800c710:	4638      	mov	r0, r7
 800c712:	eb04 0903 	add.w	r9, r4, r3
 800c716:	f000 f8d5 	bl	800c8c4 <_sbrk_r>
 800c71a:	4581      	cmp	r9, r0
 800c71c:	d13f      	bne.n	800c79e <_malloc_r+0xe6>
 800c71e:	6821      	ldr	r1, [r4, #0]
 800c720:	4638      	mov	r0, r7
 800c722:	1a6d      	subs	r5, r5, r1
 800c724:	4629      	mov	r1, r5
 800c726:	f7ff ffa7 	bl	800c678 <sbrk_aligned>
 800c72a:	3001      	adds	r0, #1
 800c72c:	d037      	beq.n	800c79e <_malloc_r+0xe6>
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	442b      	add	r3, r5
 800c732:	6023      	str	r3, [r4, #0]
 800c734:	f8d8 3000 	ldr.w	r3, [r8]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d038      	beq.n	800c7ae <_malloc_r+0xf6>
 800c73c:	685a      	ldr	r2, [r3, #4]
 800c73e:	42a2      	cmp	r2, r4
 800c740:	d12b      	bne.n	800c79a <_malloc_r+0xe2>
 800c742:	2200      	movs	r2, #0
 800c744:	605a      	str	r2, [r3, #4]
 800c746:	e00f      	b.n	800c768 <_malloc_r+0xb0>
 800c748:	6822      	ldr	r2, [r4, #0]
 800c74a:	1b52      	subs	r2, r2, r5
 800c74c:	d41f      	bmi.n	800c78e <_malloc_r+0xd6>
 800c74e:	2a0b      	cmp	r2, #11
 800c750:	d917      	bls.n	800c782 <_malloc_r+0xca>
 800c752:	1961      	adds	r1, r4, r5
 800c754:	42a3      	cmp	r3, r4
 800c756:	6025      	str	r5, [r4, #0]
 800c758:	bf18      	it	ne
 800c75a:	6059      	strne	r1, [r3, #4]
 800c75c:	6863      	ldr	r3, [r4, #4]
 800c75e:	bf08      	it	eq
 800c760:	f8c8 1000 	streq.w	r1, [r8]
 800c764:	5162      	str	r2, [r4, r5]
 800c766:	604b      	str	r3, [r1, #4]
 800c768:	4638      	mov	r0, r7
 800c76a:	f104 060b 	add.w	r6, r4, #11
 800c76e:	f000 f829 	bl	800c7c4 <__malloc_unlock>
 800c772:	f026 0607 	bic.w	r6, r6, #7
 800c776:	1d23      	adds	r3, r4, #4
 800c778:	1af2      	subs	r2, r6, r3
 800c77a:	d0ae      	beq.n	800c6da <_malloc_r+0x22>
 800c77c:	1b9b      	subs	r3, r3, r6
 800c77e:	50a3      	str	r3, [r4, r2]
 800c780:	e7ab      	b.n	800c6da <_malloc_r+0x22>
 800c782:	42a3      	cmp	r3, r4
 800c784:	6862      	ldr	r2, [r4, #4]
 800c786:	d1dd      	bne.n	800c744 <_malloc_r+0x8c>
 800c788:	f8c8 2000 	str.w	r2, [r8]
 800c78c:	e7ec      	b.n	800c768 <_malloc_r+0xb0>
 800c78e:	4623      	mov	r3, r4
 800c790:	6864      	ldr	r4, [r4, #4]
 800c792:	e7ac      	b.n	800c6ee <_malloc_r+0x36>
 800c794:	4634      	mov	r4, r6
 800c796:	6876      	ldr	r6, [r6, #4]
 800c798:	e7b4      	b.n	800c704 <_malloc_r+0x4c>
 800c79a:	4613      	mov	r3, r2
 800c79c:	e7cc      	b.n	800c738 <_malloc_r+0x80>
 800c79e:	230c      	movs	r3, #12
 800c7a0:	4638      	mov	r0, r7
 800c7a2:	603b      	str	r3, [r7, #0]
 800c7a4:	f000 f80e 	bl	800c7c4 <__malloc_unlock>
 800c7a8:	e797      	b.n	800c6da <_malloc_r+0x22>
 800c7aa:	6025      	str	r5, [r4, #0]
 800c7ac:	e7dc      	b.n	800c768 <_malloc_r+0xb0>
 800c7ae:	605b      	str	r3, [r3, #4]
 800c7b0:	deff      	udf	#255	; 0xff
 800c7b2:	bf00      	nop
 800c7b4:	20000494 	.word	0x20000494

0800c7b8 <__malloc_lock>:
 800c7b8:	4801      	ldr	r0, [pc, #4]	; (800c7c0 <__malloc_lock+0x8>)
 800c7ba:	f000 b8bd 	b.w	800c938 <__retarget_lock_acquire_recursive>
 800c7be:	bf00      	nop
 800c7c0:	200005d4 	.word	0x200005d4

0800c7c4 <__malloc_unlock>:
 800c7c4:	4801      	ldr	r0, [pc, #4]	; (800c7cc <__malloc_unlock+0x8>)
 800c7c6:	f000 b8b8 	b.w	800c93a <__retarget_lock_release_recursive>
 800c7ca:	bf00      	nop
 800c7cc:	200005d4 	.word	0x200005d4

0800c7d0 <siprintf>:
 800c7d0:	b40e      	push	{r1, r2, r3}
 800c7d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c7d6:	b500      	push	{lr}
 800c7d8:	b09c      	sub	sp, #112	; 0x70
 800c7da:	ab1d      	add	r3, sp, #116	; 0x74
 800c7dc:	9002      	str	r0, [sp, #8]
 800c7de:	9006      	str	r0, [sp, #24]
 800c7e0:	9107      	str	r1, [sp, #28]
 800c7e2:	9104      	str	r1, [sp, #16]
 800c7e4:	4808      	ldr	r0, [pc, #32]	; (800c808 <siprintf+0x38>)
 800c7e6:	4909      	ldr	r1, [pc, #36]	; (800c80c <siprintf+0x3c>)
 800c7e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7ec:	9105      	str	r1, [sp, #20]
 800c7ee:	6800      	ldr	r0, [r0, #0]
 800c7f0:	a902      	add	r1, sp, #8
 800c7f2:	9301      	str	r3, [sp, #4]
 800c7f4:	f000 f95a 	bl	800caac <_svfiprintf_r>
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	9b02      	ldr	r3, [sp, #8]
 800c7fc:	701a      	strb	r2, [r3, #0]
 800c7fe:	b01c      	add	sp, #112	; 0x70
 800c800:	f85d eb04 	ldr.w	lr, [sp], #4
 800c804:	b003      	add	sp, #12
 800c806:	4770      	bx	lr
 800c808:	200000f8 	.word	0x200000f8
 800c80c:	ffff0208 	.word	0xffff0208

0800c810 <__utoa>:
 800c810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c812:	b08b      	sub	sp, #44	; 0x2c
 800c814:	4605      	mov	r5, r0
 800c816:	460b      	mov	r3, r1
 800c818:	466e      	mov	r6, sp
 800c81a:	4c1d      	ldr	r4, [pc, #116]	; (800c890 <__utoa+0x80>)
 800c81c:	f104 0c20 	add.w	ip, r4, #32
 800c820:	4637      	mov	r7, r6
 800c822:	6820      	ldr	r0, [r4, #0]
 800c824:	6861      	ldr	r1, [r4, #4]
 800c826:	3408      	adds	r4, #8
 800c828:	c703      	stmia	r7!, {r0, r1}
 800c82a:	4564      	cmp	r4, ip
 800c82c:	463e      	mov	r6, r7
 800c82e:	d1f7      	bne.n	800c820 <__utoa+0x10>
 800c830:	7921      	ldrb	r1, [r4, #4]
 800c832:	6820      	ldr	r0, [r4, #0]
 800c834:	7139      	strb	r1, [r7, #4]
 800c836:	1e91      	subs	r1, r2, #2
 800c838:	2922      	cmp	r1, #34	; 0x22
 800c83a:	6038      	str	r0, [r7, #0]
 800c83c:	f04f 0100 	mov.w	r1, #0
 800c840:	d904      	bls.n	800c84c <__utoa+0x3c>
 800c842:	7019      	strb	r1, [r3, #0]
 800c844:	460b      	mov	r3, r1
 800c846:	4618      	mov	r0, r3
 800c848:	b00b      	add	sp, #44	; 0x2c
 800c84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c84c:	1e58      	subs	r0, r3, #1
 800c84e:	4684      	mov	ip, r0
 800c850:	fbb5 f7f2 	udiv	r7, r5, r2
 800c854:	fb02 5617 	mls	r6, r2, r7, r5
 800c858:	3628      	adds	r6, #40	; 0x28
 800c85a:	446e      	add	r6, sp
 800c85c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c860:	460c      	mov	r4, r1
 800c862:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c866:	462e      	mov	r6, r5
 800c868:	42b2      	cmp	r2, r6
 800c86a:	463d      	mov	r5, r7
 800c86c:	f101 0101 	add.w	r1, r1, #1
 800c870:	d9ee      	bls.n	800c850 <__utoa+0x40>
 800c872:	2200      	movs	r2, #0
 800c874:	545a      	strb	r2, [r3, r1]
 800c876:	1919      	adds	r1, r3, r4
 800c878:	1aa5      	subs	r5, r4, r2
 800c87a:	42aa      	cmp	r2, r5
 800c87c:	dae3      	bge.n	800c846 <__utoa+0x36>
 800c87e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c882:	780e      	ldrb	r6, [r1, #0]
 800c884:	3201      	adds	r2, #1
 800c886:	7006      	strb	r6, [r0, #0]
 800c888:	f801 5901 	strb.w	r5, [r1], #-1
 800c88c:	e7f4      	b.n	800c878 <__utoa+0x68>
 800c88e:	bf00      	nop
 800c890:	0800e042 	.word	0x0800e042

0800c894 <strcat>:
 800c894:	4602      	mov	r2, r0
 800c896:	b510      	push	{r4, lr}
 800c898:	7814      	ldrb	r4, [r2, #0]
 800c89a:	4613      	mov	r3, r2
 800c89c:	3201      	adds	r2, #1
 800c89e:	2c00      	cmp	r4, #0
 800c8a0:	d1fa      	bne.n	800c898 <strcat+0x4>
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8ac:	2a00      	cmp	r2, #0
 800c8ae:	d1f9      	bne.n	800c8a4 <strcat+0x10>
 800c8b0:	bd10      	pop	{r4, pc}

0800c8b2 <memset>:
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	4402      	add	r2, r0
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d100      	bne.n	800c8bc <memset+0xa>
 800c8ba:	4770      	bx	lr
 800c8bc:	f803 1b01 	strb.w	r1, [r3], #1
 800c8c0:	e7f9      	b.n	800c8b6 <memset+0x4>
	...

0800c8c4 <_sbrk_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	4d05      	ldr	r5, [pc, #20]	; (800c8e0 <_sbrk_r+0x1c>)
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	4608      	mov	r0, r1
 800c8ce:	602b      	str	r3, [r5, #0]
 800c8d0:	f7fc f808 	bl	80088e4 <_sbrk>
 800c8d4:	1c43      	adds	r3, r0, #1
 800c8d6:	d102      	bne.n	800c8de <_sbrk_r+0x1a>
 800c8d8:	682b      	ldr	r3, [r5, #0]
 800c8da:	b103      	cbz	r3, 800c8de <_sbrk_r+0x1a>
 800c8dc:	6023      	str	r3, [r4, #0]
 800c8de:	bd38      	pop	{r3, r4, r5, pc}
 800c8e0:	200005d8 	.word	0x200005d8

0800c8e4 <__errno>:
 800c8e4:	4b01      	ldr	r3, [pc, #4]	; (800c8ec <__errno+0x8>)
 800c8e6:	6818      	ldr	r0, [r3, #0]
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	200000f8 	.word	0x200000f8

0800c8f0 <__libc_init_array>:
 800c8f0:	b570      	push	{r4, r5, r6, lr}
 800c8f2:	2600      	movs	r6, #0
 800c8f4:	4d0c      	ldr	r5, [pc, #48]	; (800c928 <__libc_init_array+0x38>)
 800c8f6:	4c0d      	ldr	r4, [pc, #52]	; (800c92c <__libc_init_array+0x3c>)
 800c8f8:	1b64      	subs	r4, r4, r5
 800c8fa:	10a4      	asrs	r4, r4, #2
 800c8fc:	42a6      	cmp	r6, r4
 800c8fe:	d109      	bne.n	800c914 <__libc_init_array+0x24>
 800c900:	f000 fbc6 	bl	800d090 <_init>
 800c904:	2600      	movs	r6, #0
 800c906:	4d0a      	ldr	r5, [pc, #40]	; (800c930 <__libc_init_array+0x40>)
 800c908:	4c0a      	ldr	r4, [pc, #40]	; (800c934 <__libc_init_array+0x44>)
 800c90a:	1b64      	subs	r4, r4, r5
 800c90c:	10a4      	asrs	r4, r4, #2
 800c90e:	42a6      	cmp	r6, r4
 800c910:	d105      	bne.n	800c91e <__libc_init_array+0x2e>
 800c912:	bd70      	pop	{r4, r5, r6, pc}
 800c914:	f855 3b04 	ldr.w	r3, [r5], #4
 800c918:	4798      	blx	r3
 800c91a:	3601      	adds	r6, #1
 800c91c:	e7ee      	b.n	800c8fc <__libc_init_array+0xc>
 800c91e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c922:	4798      	blx	r3
 800c924:	3601      	adds	r6, #1
 800c926:	e7f2      	b.n	800c90e <__libc_init_array+0x1e>
 800c928:	0800e09c 	.word	0x0800e09c
 800c92c:	0800e09c 	.word	0x0800e09c
 800c930:	0800e09c 	.word	0x0800e09c
 800c934:	0800e0a0 	.word	0x0800e0a0

0800c938 <__retarget_lock_acquire_recursive>:
 800c938:	4770      	bx	lr

0800c93a <__retarget_lock_release_recursive>:
 800c93a:	4770      	bx	lr

0800c93c <memcpy>:
 800c93c:	440a      	add	r2, r1
 800c93e:	4291      	cmp	r1, r2
 800c940:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c944:	d100      	bne.n	800c948 <memcpy+0xc>
 800c946:	4770      	bx	lr
 800c948:	b510      	push	{r4, lr}
 800c94a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c94e:	4291      	cmp	r1, r2
 800c950:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c954:	d1f9      	bne.n	800c94a <memcpy+0xe>
 800c956:	bd10      	pop	{r4, pc}

0800c958 <strcpy>:
 800c958:	4603      	mov	r3, r0
 800c95a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c95e:	f803 2b01 	strb.w	r2, [r3], #1
 800c962:	2a00      	cmp	r2, #0
 800c964:	d1f9      	bne.n	800c95a <strcpy+0x2>
 800c966:	4770      	bx	lr

0800c968 <_free_r>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	4605      	mov	r5, r0
 800c96c:	2900      	cmp	r1, #0
 800c96e:	d040      	beq.n	800c9f2 <_free_r+0x8a>
 800c970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c974:	1f0c      	subs	r4, r1, #4
 800c976:	2b00      	cmp	r3, #0
 800c978:	bfb8      	it	lt
 800c97a:	18e4      	addlt	r4, r4, r3
 800c97c:	f7ff ff1c 	bl	800c7b8 <__malloc_lock>
 800c980:	4a1c      	ldr	r2, [pc, #112]	; (800c9f4 <_free_r+0x8c>)
 800c982:	6813      	ldr	r3, [r2, #0]
 800c984:	b933      	cbnz	r3, 800c994 <_free_r+0x2c>
 800c986:	6063      	str	r3, [r4, #4]
 800c988:	6014      	str	r4, [r2, #0]
 800c98a:	4628      	mov	r0, r5
 800c98c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c990:	f7ff bf18 	b.w	800c7c4 <__malloc_unlock>
 800c994:	42a3      	cmp	r3, r4
 800c996:	d908      	bls.n	800c9aa <_free_r+0x42>
 800c998:	6820      	ldr	r0, [r4, #0]
 800c99a:	1821      	adds	r1, r4, r0
 800c99c:	428b      	cmp	r3, r1
 800c99e:	bf01      	itttt	eq
 800c9a0:	6819      	ldreq	r1, [r3, #0]
 800c9a2:	685b      	ldreq	r3, [r3, #4]
 800c9a4:	1809      	addeq	r1, r1, r0
 800c9a6:	6021      	streq	r1, [r4, #0]
 800c9a8:	e7ed      	b.n	800c986 <_free_r+0x1e>
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	b10b      	cbz	r3, 800c9b4 <_free_r+0x4c>
 800c9b0:	42a3      	cmp	r3, r4
 800c9b2:	d9fa      	bls.n	800c9aa <_free_r+0x42>
 800c9b4:	6811      	ldr	r1, [r2, #0]
 800c9b6:	1850      	adds	r0, r2, r1
 800c9b8:	42a0      	cmp	r0, r4
 800c9ba:	d10b      	bne.n	800c9d4 <_free_r+0x6c>
 800c9bc:	6820      	ldr	r0, [r4, #0]
 800c9be:	4401      	add	r1, r0
 800c9c0:	1850      	adds	r0, r2, r1
 800c9c2:	4283      	cmp	r3, r0
 800c9c4:	6011      	str	r1, [r2, #0]
 800c9c6:	d1e0      	bne.n	800c98a <_free_r+0x22>
 800c9c8:	6818      	ldr	r0, [r3, #0]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	4408      	add	r0, r1
 800c9ce:	6010      	str	r0, [r2, #0]
 800c9d0:	6053      	str	r3, [r2, #4]
 800c9d2:	e7da      	b.n	800c98a <_free_r+0x22>
 800c9d4:	d902      	bls.n	800c9dc <_free_r+0x74>
 800c9d6:	230c      	movs	r3, #12
 800c9d8:	602b      	str	r3, [r5, #0]
 800c9da:	e7d6      	b.n	800c98a <_free_r+0x22>
 800c9dc:	6820      	ldr	r0, [r4, #0]
 800c9de:	1821      	adds	r1, r4, r0
 800c9e0:	428b      	cmp	r3, r1
 800c9e2:	bf01      	itttt	eq
 800c9e4:	6819      	ldreq	r1, [r3, #0]
 800c9e6:	685b      	ldreq	r3, [r3, #4]
 800c9e8:	1809      	addeq	r1, r1, r0
 800c9ea:	6021      	streq	r1, [r4, #0]
 800c9ec:	6063      	str	r3, [r4, #4]
 800c9ee:	6054      	str	r4, [r2, #4]
 800c9f0:	e7cb      	b.n	800c98a <_free_r+0x22>
 800c9f2:	bd38      	pop	{r3, r4, r5, pc}
 800c9f4:	20000494 	.word	0x20000494

0800c9f8 <__ssputs_r>:
 800c9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9fc:	461f      	mov	r7, r3
 800c9fe:	688e      	ldr	r6, [r1, #8]
 800ca00:	4682      	mov	sl, r0
 800ca02:	42be      	cmp	r6, r7
 800ca04:	460c      	mov	r4, r1
 800ca06:	4690      	mov	r8, r2
 800ca08:	680b      	ldr	r3, [r1, #0]
 800ca0a:	d82c      	bhi.n	800ca66 <__ssputs_r+0x6e>
 800ca0c:	898a      	ldrh	r2, [r1, #12]
 800ca0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca12:	d026      	beq.n	800ca62 <__ssputs_r+0x6a>
 800ca14:	6965      	ldr	r5, [r4, #20]
 800ca16:	6909      	ldr	r1, [r1, #16]
 800ca18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca1c:	eba3 0901 	sub.w	r9, r3, r1
 800ca20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca24:	1c7b      	adds	r3, r7, #1
 800ca26:	444b      	add	r3, r9
 800ca28:	106d      	asrs	r5, r5, #1
 800ca2a:	429d      	cmp	r5, r3
 800ca2c:	bf38      	it	cc
 800ca2e:	461d      	movcc	r5, r3
 800ca30:	0553      	lsls	r3, r2, #21
 800ca32:	d527      	bpl.n	800ca84 <__ssputs_r+0x8c>
 800ca34:	4629      	mov	r1, r5
 800ca36:	f7ff fe3f 	bl	800c6b8 <_malloc_r>
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	b360      	cbz	r0, 800ca98 <__ssputs_r+0xa0>
 800ca3e:	464a      	mov	r2, r9
 800ca40:	6921      	ldr	r1, [r4, #16]
 800ca42:	f7ff ff7b 	bl	800c93c <memcpy>
 800ca46:	89a3      	ldrh	r3, [r4, #12]
 800ca48:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca50:	81a3      	strh	r3, [r4, #12]
 800ca52:	6126      	str	r6, [r4, #16]
 800ca54:	444e      	add	r6, r9
 800ca56:	6026      	str	r6, [r4, #0]
 800ca58:	463e      	mov	r6, r7
 800ca5a:	6165      	str	r5, [r4, #20]
 800ca5c:	eba5 0509 	sub.w	r5, r5, r9
 800ca60:	60a5      	str	r5, [r4, #8]
 800ca62:	42be      	cmp	r6, r7
 800ca64:	d900      	bls.n	800ca68 <__ssputs_r+0x70>
 800ca66:	463e      	mov	r6, r7
 800ca68:	4632      	mov	r2, r6
 800ca6a:	4641      	mov	r1, r8
 800ca6c:	6820      	ldr	r0, [r4, #0]
 800ca6e:	f000 fade 	bl	800d02e <memmove>
 800ca72:	2000      	movs	r0, #0
 800ca74:	68a3      	ldr	r3, [r4, #8]
 800ca76:	1b9b      	subs	r3, r3, r6
 800ca78:	60a3      	str	r3, [r4, #8]
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	4433      	add	r3, r6
 800ca7e:	6023      	str	r3, [r4, #0]
 800ca80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca84:	462a      	mov	r2, r5
 800ca86:	f000 faa3 	bl	800cfd0 <_realloc_r>
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d1e0      	bne.n	800ca52 <__ssputs_r+0x5a>
 800ca90:	4650      	mov	r0, sl
 800ca92:	6921      	ldr	r1, [r4, #16]
 800ca94:	f7ff ff68 	bl	800c968 <_free_r>
 800ca98:	230c      	movs	r3, #12
 800ca9a:	f8ca 3000 	str.w	r3, [sl]
 800ca9e:	89a3      	ldrh	r3, [r4, #12]
 800caa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800caa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caa8:	81a3      	strh	r3, [r4, #12]
 800caaa:	e7e9      	b.n	800ca80 <__ssputs_r+0x88>

0800caac <_svfiprintf_r>:
 800caac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab0:	4698      	mov	r8, r3
 800cab2:	898b      	ldrh	r3, [r1, #12]
 800cab4:	4607      	mov	r7, r0
 800cab6:	061b      	lsls	r3, r3, #24
 800cab8:	460d      	mov	r5, r1
 800caba:	4614      	mov	r4, r2
 800cabc:	b09d      	sub	sp, #116	; 0x74
 800cabe:	d50e      	bpl.n	800cade <_svfiprintf_r+0x32>
 800cac0:	690b      	ldr	r3, [r1, #16]
 800cac2:	b963      	cbnz	r3, 800cade <_svfiprintf_r+0x32>
 800cac4:	2140      	movs	r1, #64	; 0x40
 800cac6:	f7ff fdf7 	bl	800c6b8 <_malloc_r>
 800caca:	6028      	str	r0, [r5, #0]
 800cacc:	6128      	str	r0, [r5, #16]
 800cace:	b920      	cbnz	r0, 800cada <_svfiprintf_r+0x2e>
 800cad0:	230c      	movs	r3, #12
 800cad2:	603b      	str	r3, [r7, #0]
 800cad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cad8:	e0d0      	b.n	800cc7c <_svfiprintf_r+0x1d0>
 800cada:	2340      	movs	r3, #64	; 0x40
 800cadc:	616b      	str	r3, [r5, #20]
 800cade:	2300      	movs	r3, #0
 800cae0:	9309      	str	r3, [sp, #36]	; 0x24
 800cae2:	2320      	movs	r3, #32
 800cae4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cae8:	2330      	movs	r3, #48	; 0x30
 800caea:	f04f 0901 	mov.w	r9, #1
 800caee:	f8cd 800c 	str.w	r8, [sp, #12]
 800caf2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800cc94 <_svfiprintf_r+0x1e8>
 800caf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cafa:	4623      	mov	r3, r4
 800cafc:	469a      	mov	sl, r3
 800cafe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb02:	b10a      	cbz	r2, 800cb08 <_svfiprintf_r+0x5c>
 800cb04:	2a25      	cmp	r2, #37	; 0x25
 800cb06:	d1f9      	bne.n	800cafc <_svfiprintf_r+0x50>
 800cb08:	ebba 0b04 	subs.w	fp, sl, r4
 800cb0c:	d00b      	beq.n	800cb26 <_svfiprintf_r+0x7a>
 800cb0e:	465b      	mov	r3, fp
 800cb10:	4622      	mov	r2, r4
 800cb12:	4629      	mov	r1, r5
 800cb14:	4638      	mov	r0, r7
 800cb16:	f7ff ff6f 	bl	800c9f8 <__ssputs_r>
 800cb1a:	3001      	adds	r0, #1
 800cb1c:	f000 80a9 	beq.w	800cc72 <_svfiprintf_r+0x1c6>
 800cb20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb22:	445a      	add	r2, fp
 800cb24:	9209      	str	r2, [sp, #36]	; 0x24
 800cb26:	f89a 3000 	ldrb.w	r3, [sl]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f000 80a1 	beq.w	800cc72 <_svfiprintf_r+0x1c6>
 800cb30:	2300      	movs	r3, #0
 800cb32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb3a:	f10a 0a01 	add.w	sl, sl, #1
 800cb3e:	9304      	str	r3, [sp, #16]
 800cb40:	9307      	str	r3, [sp, #28]
 800cb42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb46:	931a      	str	r3, [sp, #104]	; 0x68
 800cb48:	4654      	mov	r4, sl
 800cb4a:	2205      	movs	r2, #5
 800cb4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb50:	4850      	ldr	r0, [pc, #320]	; (800cc94 <_svfiprintf_r+0x1e8>)
 800cb52:	f000 fa86 	bl	800d062 <memchr>
 800cb56:	9a04      	ldr	r2, [sp, #16]
 800cb58:	b9d8      	cbnz	r0, 800cb92 <_svfiprintf_r+0xe6>
 800cb5a:	06d0      	lsls	r0, r2, #27
 800cb5c:	bf44      	itt	mi
 800cb5e:	2320      	movmi	r3, #32
 800cb60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb64:	0711      	lsls	r1, r2, #28
 800cb66:	bf44      	itt	mi
 800cb68:	232b      	movmi	r3, #43	; 0x2b
 800cb6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb6e:	f89a 3000 	ldrb.w	r3, [sl]
 800cb72:	2b2a      	cmp	r3, #42	; 0x2a
 800cb74:	d015      	beq.n	800cba2 <_svfiprintf_r+0xf6>
 800cb76:	4654      	mov	r4, sl
 800cb78:	2000      	movs	r0, #0
 800cb7a:	f04f 0c0a 	mov.w	ip, #10
 800cb7e:	9a07      	ldr	r2, [sp, #28]
 800cb80:	4621      	mov	r1, r4
 800cb82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb86:	3b30      	subs	r3, #48	; 0x30
 800cb88:	2b09      	cmp	r3, #9
 800cb8a:	d94d      	bls.n	800cc28 <_svfiprintf_r+0x17c>
 800cb8c:	b1b0      	cbz	r0, 800cbbc <_svfiprintf_r+0x110>
 800cb8e:	9207      	str	r2, [sp, #28]
 800cb90:	e014      	b.n	800cbbc <_svfiprintf_r+0x110>
 800cb92:	eba0 0308 	sub.w	r3, r0, r8
 800cb96:	fa09 f303 	lsl.w	r3, r9, r3
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	46a2      	mov	sl, r4
 800cb9e:	9304      	str	r3, [sp, #16]
 800cba0:	e7d2      	b.n	800cb48 <_svfiprintf_r+0x9c>
 800cba2:	9b03      	ldr	r3, [sp, #12]
 800cba4:	1d19      	adds	r1, r3, #4
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	9103      	str	r1, [sp, #12]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	bfbb      	ittet	lt
 800cbae:	425b      	neglt	r3, r3
 800cbb0:	f042 0202 	orrlt.w	r2, r2, #2
 800cbb4:	9307      	strge	r3, [sp, #28]
 800cbb6:	9307      	strlt	r3, [sp, #28]
 800cbb8:	bfb8      	it	lt
 800cbba:	9204      	strlt	r2, [sp, #16]
 800cbbc:	7823      	ldrb	r3, [r4, #0]
 800cbbe:	2b2e      	cmp	r3, #46	; 0x2e
 800cbc0:	d10c      	bne.n	800cbdc <_svfiprintf_r+0x130>
 800cbc2:	7863      	ldrb	r3, [r4, #1]
 800cbc4:	2b2a      	cmp	r3, #42	; 0x2a
 800cbc6:	d134      	bne.n	800cc32 <_svfiprintf_r+0x186>
 800cbc8:	9b03      	ldr	r3, [sp, #12]
 800cbca:	3402      	adds	r4, #2
 800cbcc:	1d1a      	adds	r2, r3, #4
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	9203      	str	r2, [sp, #12]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	bfb8      	it	lt
 800cbd6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cbda:	9305      	str	r3, [sp, #20]
 800cbdc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800cc98 <_svfiprintf_r+0x1ec>
 800cbe0:	2203      	movs	r2, #3
 800cbe2:	4650      	mov	r0, sl
 800cbe4:	7821      	ldrb	r1, [r4, #0]
 800cbe6:	f000 fa3c 	bl	800d062 <memchr>
 800cbea:	b138      	cbz	r0, 800cbfc <_svfiprintf_r+0x150>
 800cbec:	2240      	movs	r2, #64	; 0x40
 800cbee:	9b04      	ldr	r3, [sp, #16]
 800cbf0:	eba0 000a 	sub.w	r0, r0, sl
 800cbf4:	4082      	lsls	r2, r0
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	3401      	adds	r4, #1
 800cbfa:	9304      	str	r3, [sp, #16]
 800cbfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc00:	2206      	movs	r2, #6
 800cc02:	4826      	ldr	r0, [pc, #152]	; (800cc9c <_svfiprintf_r+0x1f0>)
 800cc04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc08:	f000 fa2b 	bl	800d062 <memchr>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d038      	beq.n	800cc82 <_svfiprintf_r+0x1d6>
 800cc10:	4b23      	ldr	r3, [pc, #140]	; (800cca0 <_svfiprintf_r+0x1f4>)
 800cc12:	bb1b      	cbnz	r3, 800cc5c <_svfiprintf_r+0x1b0>
 800cc14:	9b03      	ldr	r3, [sp, #12]
 800cc16:	3307      	adds	r3, #7
 800cc18:	f023 0307 	bic.w	r3, r3, #7
 800cc1c:	3308      	adds	r3, #8
 800cc1e:	9303      	str	r3, [sp, #12]
 800cc20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc22:	4433      	add	r3, r6
 800cc24:	9309      	str	r3, [sp, #36]	; 0x24
 800cc26:	e768      	b.n	800cafa <_svfiprintf_r+0x4e>
 800cc28:	460c      	mov	r4, r1
 800cc2a:	2001      	movs	r0, #1
 800cc2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc30:	e7a6      	b.n	800cb80 <_svfiprintf_r+0xd4>
 800cc32:	2300      	movs	r3, #0
 800cc34:	f04f 0c0a 	mov.w	ip, #10
 800cc38:	4619      	mov	r1, r3
 800cc3a:	3401      	adds	r4, #1
 800cc3c:	9305      	str	r3, [sp, #20]
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc44:	3a30      	subs	r2, #48	; 0x30
 800cc46:	2a09      	cmp	r2, #9
 800cc48:	d903      	bls.n	800cc52 <_svfiprintf_r+0x1a6>
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d0c6      	beq.n	800cbdc <_svfiprintf_r+0x130>
 800cc4e:	9105      	str	r1, [sp, #20]
 800cc50:	e7c4      	b.n	800cbdc <_svfiprintf_r+0x130>
 800cc52:	4604      	mov	r4, r0
 800cc54:	2301      	movs	r3, #1
 800cc56:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc5a:	e7f0      	b.n	800cc3e <_svfiprintf_r+0x192>
 800cc5c:	ab03      	add	r3, sp, #12
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	462a      	mov	r2, r5
 800cc62:	4638      	mov	r0, r7
 800cc64:	4b0f      	ldr	r3, [pc, #60]	; (800cca4 <_svfiprintf_r+0x1f8>)
 800cc66:	a904      	add	r1, sp, #16
 800cc68:	f3af 8000 	nop.w
 800cc6c:	1c42      	adds	r2, r0, #1
 800cc6e:	4606      	mov	r6, r0
 800cc70:	d1d6      	bne.n	800cc20 <_svfiprintf_r+0x174>
 800cc72:	89ab      	ldrh	r3, [r5, #12]
 800cc74:	065b      	lsls	r3, r3, #25
 800cc76:	f53f af2d 	bmi.w	800cad4 <_svfiprintf_r+0x28>
 800cc7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc7c:	b01d      	add	sp, #116	; 0x74
 800cc7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc82:	ab03      	add	r3, sp, #12
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	462a      	mov	r2, r5
 800cc88:	4638      	mov	r0, r7
 800cc8a:	4b06      	ldr	r3, [pc, #24]	; (800cca4 <_svfiprintf_r+0x1f8>)
 800cc8c:	a904      	add	r1, sp, #16
 800cc8e:	f000 f87d 	bl	800cd8c <_printf_i>
 800cc92:	e7eb      	b.n	800cc6c <_svfiprintf_r+0x1c0>
 800cc94:	0800e067 	.word	0x0800e067
 800cc98:	0800e06d 	.word	0x0800e06d
 800cc9c:	0800e071 	.word	0x0800e071
 800cca0:	00000000 	.word	0x00000000
 800cca4:	0800c9f9 	.word	0x0800c9f9

0800cca8 <_printf_common>:
 800cca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccac:	4616      	mov	r6, r2
 800ccae:	4699      	mov	r9, r3
 800ccb0:	688a      	ldr	r2, [r1, #8]
 800ccb2:	690b      	ldr	r3, [r1, #16]
 800ccb4:	4607      	mov	r7, r0
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	bfb8      	it	lt
 800ccba:	4613      	movlt	r3, r2
 800ccbc:	6033      	str	r3, [r6, #0]
 800ccbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccc8:	b10a      	cbz	r2, 800ccce <_printf_common+0x26>
 800ccca:	3301      	adds	r3, #1
 800cccc:	6033      	str	r3, [r6, #0]
 800ccce:	6823      	ldr	r3, [r4, #0]
 800ccd0:	0699      	lsls	r1, r3, #26
 800ccd2:	bf42      	ittt	mi
 800ccd4:	6833      	ldrmi	r3, [r6, #0]
 800ccd6:	3302      	addmi	r3, #2
 800ccd8:	6033      	strmi	r3, [r6, #0]
 800ccda:	6825      	ldr	r5, [r4, #0]
 800ccdc:	f015 0506 	ands.w	r5, r5, #6
 800cce0:	d106      	bne.n	800ccf0 <_printf_common+0x48>
 800cce2:	f104 0a19 	add.w	sl, r4, #25
 800cce6:	68e3      	ldr	r3, [r4, #12]
 800cce8:	6832      	ldr	r2, [r6, #0]
 800ccea:	1a9b      	subs	r3, r3, r2
 800ccec:	42ab      	cmp	r3, r5
 800ccee:	dc2b      	bgt.n	800cd48 <_printf_common+0xa0>
 800ccf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ccf4:	1e13      	subs	r3, r2, #0
 800ccf6:	6822      	ldr	r2, [r4, #0]
 800ccf8:	bf18      	it	ne
 800ccfa:	2301      	movne	r3, #1
 800ccfc:	0692      	lsls	r2, r2, #26
 800ccfe:	d430      	bmi.n	800cd62 <_printf_common+0xba>
 800cd00:	4649      	mov	r1, r9
 800cd02:	4638      	mov	r0, r7
 800cd04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd08:	47c0      	blx	r8
 800cd0a:	3001      	adds	r0, #1
 800cd0c:	d023      	beq.n	800cd56 <_printf_common+0xae>
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	6922      	ldr	r2, [r4, #16]
 800cd12:	f003 0306 	and.w	r3, r3, #6
 800cd16:	2b04      	cmp	r3, #4
 800cd18:	bf14      	ite	ne
 800cd1a:	2500      	movne	r5, #0
 800cd1c:	6833      	ldreq	r3, [r6, #0]
 800cd1e:	f04f 0600 	mov.w	r6, #0
 800cd22:	bf08      	it	eq
 800cd24:	68e5      	ldreq	r5, [r4, #12]
 800cd26:	f104 041a 	add.w	r4, r4, #26
 800cd2a:	bf08      	it	eq
 800cd2c:	1aed      	subeq	r5, r5, r3
 800cd2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cd32:	bf08      	it	eq
 800cd34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	bfc4      	itt	gt
 800cd3c:	1a9b      	subgt	r3, r3, r2
 800cd3e:	18ed      	addgt	r5, r5, r3
 800cd40:	42b5      	cmp	r5, r6
 800cd42:	d11a      	bne.n	800cd7a <_printf_common+0xd2>
 800cd44:	2000      	movs	r0, #0
 800cd46:	e008      	b.n	800cd5a <_printf_common+0xb2>
 800cd48:	2301      	movs	r3, #1
 800cd4a:	4652      	mov	r2, sl
 800cd4c:	4649      	mov	r1, r9
 800cd4e:	4638      	mov	r0, r7
 800cd50:	47c0      	blx	r8
 800cd52:	3001      	adds	r0, #1
 800cd54:	d103      	bne.n	800cd5e <_printf_common+0xb6>
 800cd56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd5e:	3501      	adds	r5, #1
 800cd60:	e7c1      	b.n	800cce6 <_printf_common+0x3e>
 800cd62:	2030      	movs	r0, #48	; 0x30
 800cd64:	18e1      	adds	r1, r4, r3
 800cd66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd6a:	1c5a      	adds	r2, r3, #1
 800cd6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd70:	4422      	add	r2, r4
 800cd72:	3302      	adds	r3, #2
 800cd74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd78:	e7c2      	b.n	800cd00 <_printf_common+0x58>
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	4622      	mov	r2, r4
 800cd7e:	4649      	mov	r1, r9
 800cd80:	4638      	mov	r0, r7
 800cd82:	47c0      	blx	r8
 800cd84:	3001      	adds	r0, #1
 800cd86:	d0e6      	beq.n	800cd56 <_printf_common+0xae>
 800cd88:	3601      	adds	r6, #1
 800cd8a:	e7d9      	b.n	800cd40 <_printf_common+0x98>

0800cd8c <_printf_i>:
 800cd8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd90:	7e0f      	ldrb	r7, [r1, #24]
 800cd92:	4691      	mov	r9, r2
 800cd94:	2f78      	cmp	r7, #120	; 0x78
 800cd96:	4680      	mov	r8, r0
 800cd98:	460c      	mov	r4, r1
 800cd9a:	469a      	mov	sl, r3
 800cd9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cda2:	d807      	bhi.n	800cdb4 <_printf_i+0x28>
 800cda4:	2f62      	cmp	r7, #98	; 0x62
 800cda6:	d80a      	bhi.n	800cdbe <_printf_i+0x32>
 800cda8:	2f00      	cmp	r7, #0
 800cdaa:	f000 80d5 	beq.w	800cf58 <_printf_i+0x1cc>
 800cdae:	2f58      	cmp	r7, #88	; 0x58
 800cdb0:	f000 80c1 	beq.w	800cf36 <_printf_i+0x1aa>
 800cdb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cdbc:	e03a      	b.n	800ce34 <_printf_i+0xa8>
 800cdbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdc2:	2b15      	cmp	r3, #21
 800cdc4:	d8f6      	bhi.n	800cdb4 <_printf_i+0x28>
 800cdc6:	a101      	add	r1, pc, #4	; (adr r1, 800cdcc <_printf_i+0x40>)
 800cdc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdcc:	0800ce25 	.word	0x0800ce25
 800cdd0:	0800ce39 	.word	0x0800ce39
 800cdd4:	0800cdb5 	.word	0x0800cdb5
 800cdd8:	0800cdb5 	.word	0x0800cdb5
 800cddc:	0800cdb5 	.word	0x0800cdb5
 800cde0:	0800cdb5 	.word	0x0800cdb5
 800cde4:	0800ce39 	.word	0x0800ce39
 800cde8:	0800cdb5 	.word	0x0800cdb5
 800cdec:	0800cdb5 	.word	0x0800cdb5
 800cdf0:	0800cdb5 	.word	0x0800cdb5
 800cdf4:	0800cdb5 	.word	0x0800cdb5
 800cdf8:	0800cf3f 	.word	0x0800cf3f
 800cdfc:	0800ce65 	.word	0x0800ce65
 800ce00:	0800cef9 	.word	0x0800cef9
 800ce04:	0800cdb5 	.word	0x0800cdb5
 800ce08:	0800cdb5 	.word	0x0800cdb5
 800ce0c:	0800cf61 	.word	0x0800cf61
 800ce10:	0800cdb5 	.word	0x0800cdb5
 800ce14:	0800ce65 	.word	0x0800ce65
 800ce18:	0800cdb5 	.word	0x0800cdb5
 800ce1c:	0800cdb5 	.word	0x0800cdb5
 800ce20:	0800cf01 	.word	0x0800cf01
 800ce24:	682b      	ldr	r3, [r5, #0]
 800ce26:	1d1a      	adds	r2, r3, #4
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	602a      	str	r2, [r5, #0]
 800ce2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce34:	2301      	movs	r3, #1
 800ce36:	e0a0      	b.n	800cf7a <_printf_i+0x1ee>
 800ce38:	6820      	ldr	r0, [r4, #0]
 800ce3a:	682b      	ldr	r3, [r5, #0]
 800ce3c:	0607      	lsls	r7, r0, #24
 800ce3e:	f103 0104 	add.w	r1, r3, #4
 800ce42:	6029      	str	r1, [r5, #0]
 800ce44:	d501      	bpl.n	800ce4a <_printf_i+0xbe>
 800ce46:	681e      	ldr	r6, [r3, #0]
 800ce48:	e003      	b.n	800ce52 <_printf_i+0xc6>
 800ce4a:	0646      	lsls	r6, r0, #25
 800ce4c:	d5fb      	bpl.n	800ce46 <_printf_i+0xba>
 800ce4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ce52:	2e00      	cmp	r6, #0
 800ce54:	da03      	bge.n	800ce5e <_printf_i+0xd2>
 800ce56:	232d      	movs	r3, #45	; 0x2d
 800ce58:	4276      	negs	r6, r6
 800ce5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce5e:	230a      	movs	r3, #10
 800ce60:	4859      	ldr	r0, [pc, #356]	; (800cfc8 <_printf_i+0x23c>)
 800ce62:	e012      	b.n	800ce8a <_printf_i+0xfe>
 800ce64:	682b      	ldr	r3, [r5, #0]
 800ce66:	6820      	ldr	r0, [r4, #0]
 800ce68:	1d19      	adds	r1, r3, #4
 800ce6a:	6029      	str	r1, [r5, #0]
 800ce6c:	0605      	lsls	r5, r0, #24
 800ce6e:	d501      	bpl.n	800ce74 <_printf_i+0xe8>
 800ce70:	681e      	ldr	r6, [r3, #0]
 800ce72:	e002      	b.n	800ce7a <_printf_i+0xee>
 800ce74:	0641      	lsls	r1, r0, #25
 800ce76:	d5fb      	bpl.n	800ce70 <_printf_i+0xe4>
 800ce78:	881e      	ldrh	r6, [r3, #0]
 800ce7a:	2f6f      	cmp	r7, #111	; 0x6f
 800ce7c:	bf0c      	ite	eq
 800ce7e:	2308      	moveq	r3, #8
 800ce80:	230a      	movne	r3, #10
 800ce82:	4851      	ldr	r0, [pc, #324]	; (800cfc8 <_printf_i+0x23c>)
 800ce84:	2100      	movs	r1, #0
 800ce86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce8a:	6865      	ldr	r5, [r4, #4]
 800ce8c:	2d00      	cmp	r5, #0
 800ce8e:	bfa8      	it	ge
 800ce90:	6821      	ldrge	r1, [r4, #0]
 800ce92:	60a5      	str	r5, [r4, #8]
 800ce94:	bfa4      	itt	ge
 800ce96:	f021 0104 	bicge.w	r1, r1, #4
 800ce9a:	6021      	strge	r1, [r4, #0]
 800ce9c:	b90e      	cbnz	r6, 800cea2 <_printf_i+0x116>
 800ce9e:	2d00      	cmp	r5, #0
 800cea0:	d04b      	beq.n	800cf3a <_printf_i+0x1ae>
 800cea2:	4615      	mov	r5, r2
 800cea4:	fbb6 f1f3 	udiv	r1, r6, r3
 800cea8:	fb03 6711 	mls	r7, r3, r1, r6
 800ceac:	5dc7      	ldrb	r7, [r0, r7]
 800ceae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ceb2:	4637      	mov	r7, r6
 800ceb4:	42bb      	cmp	r3, r7
 800ceb6:	460e      	mov	r6, r1
 800ceb8:	d9f4      	bls.n	800cea4 <_printf_i+0x118>
 800ceba:	2b08      	cmp	r3, #8
 800cebc:	d10b      	bne.n	800ced6 <_printf_i+0x14a>
 800cebe:	6823      	ldr	r3, [r4, #0]
 800cec0:	07de      	lsls	r6, r3, #31
 800cec2:	d508      	bpl.n	800ced6 <_printf_i+0x14a>
 800cec4:	6923      	ldr	r3, [r4, #16]
 800cec6:	6861      	ldr	r1, [r4, #4]
 800cec8:	4299      	cmp	r1, r3
 800ceca:	bfde      	ittt	le
 800cecc:	2330      	movle	r3, #48	; 0x30
 800cece:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ced2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ced6:	1b52      	subs	r2, r2, r5
 800ced8:	6122      	str	r2, [r4, #16]
 800ceda:	464b      	mov	r3, r9
 800cedc:	4621      	mov	r1, r4
 800cede:	4640      	mov	r0, r8
 800cee0:	f8cd a000 	str.w	sl, [sp]
 800cee4:	aa03      	add	r2, sp, #12
 800cee6:	f7ff fedf 	bl	800cca8 <_printf_common>
 800ceea:	3001      	adds	r0, #1
 800ceec:	d14a      	bne.n	800cf84 <_printf_i+0x1f8>
 800ceee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cef2:	b004      	add	sp, #16
 800cef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef8:	6823      	ldr	r3, [r4, #0]
 800cefa:	f043 0320 	orr.w	r3, r3, #32
 800cefe:	6023      	str	r3, [r4, #0]
 800cf00:	2778      	movs	r7, #120	; 0x78
 800cf02:	4832      	ldr	r0, [pc, #200]	; (800cfcc <_printf_i+0x240>)
 800cf04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cf08:	6823      	ldr	r3, [r4, #0]
 800cf0a:	6829      	ldr	r1, [r5, #0]
 800cf0c:	061f      	lsls	r7, r3, #24
 800cf0e:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf12:	d402      	bmi.n	800cf1a <_printf_i+0x18e>
 800cf14:	065f      	lsls	r7, r3, #25
 800cf16:	bf48      	it	mi
 800cf18:	b2b6      	uxthmi	r6, r6
 800cf1a:	07df      	lsls	r7, r3, #31
 800cf1c:	bf48      	it	mi
 800cf1e:	f043 0320 	orrmi.w	r3, r3, #32
 800cf22:	6029      	str	r1, [r5, #0]
 800cf24:	bf48      	it	mi
 800cf26:	6023      	strmi	r3, [r4, #0]
 800cf28:	b91e      	cbnz	r6, 800cf32 <_printf_i+0x1a6>
 800cf2a:	6823      	ldr	r3, [r4, #0]
 800cf2c:	f023 0320 	bic.w	r3, r3, #32
 800cf30:	6023      	str	r3, [r4, #0]
 800cf32:	2310      	movs	r3, #16
 800cf34:	e7a6      	b.n	800ce84 <_printf_i+0xf8>
 800cf36:	4824      	ldr	r0, [pc, #144]	; (800cfc8 <_printf_i+0x23c>)
 800cf38:	e7e4      	b.n	800cf04 <_printf_i+0x178>
 800cf3a:	4615      	mov	r5, r2
 800cf3c:	e7bd      	b.n	800ceba <_printf_i+0x12e>
 800cf3e:	682b      	ldr	r3, [r5, #0]
 800cf40:	6826      	ldr	r6, [r4, #0]
 800cf42:	1d18      	adds	r0, r3, #4
 800cf44:	6961      	ldr	r1, [r4, #20]
 800cf46:	6028      	str	r0, [r5, #0]
 800cf48:	0635      	lsls	r5, r6, #24
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	d501      	bpl.n	800cf52 <_printf_i+0x1c6>
 800cf4e:	6019      	str	r1, [r3, #0]
 800cf50:	e002      	b.n	800cf58 <_printf_i+0x1cc>
 800cf52:	0670      	lsls	r0, r6, #25
 800cf54:	d5fb      	bpl.n	800cf4e <_printf_i+0x1c2>
 800cf56:	8019      	strh	r1, [r3, #0]
 800cf58:	2300      	movs	r3, #0
 800cf5a:	4615      	mov	r5, r2
 800cf5c:	6123      	str	r3, [r4, #16]
 800cf5e:	e7bc      	b.n	800ceda <_printf_i+0x14e>
 800cf60:	682b      	ldr	r3, [r5, #0]
 800cf62:	2100      	movs	r1, #0
 800cf64:	1d1a      	adds	r2, r3, #4
 800cf66:	602a      	str	r2, [r5, #0]
 800cf68:	681d      	ldr	r5, [r3, #0]
 800cf6a:	6862      	ldr	r2, [r4, #4]
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	f000 f878 	bl	800d062 <memchr>
 800cf72:	b108      	cbz	r0, 800cf78 <_printf_i+0x1ec>
 800cf74:	1b40      	subs	r0, r0, r5
 800cf76:	6060      	str	r0, [r4, #4]
 800cf78:	6863      	ldr	r3, [r4, #4]
 800cf7a:	6123      	str	r3, [r4, #16]
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf82:	e7aa      	b.n	800ceda <_printf_i+0x14e>
 800cf84:	462a      	mov	r2, r5
 800cf86:	4649      	mov	r1, r9
 800cf88:	4640      	mov	r0, r8
 800cf8a:	6923      	ldr	r3, [r4, #16]
 800cf8c:	47d0      	blx	sl
 800cf8e:	3001      	adds	r0, #1
 800cf90:	d0ad      	beq.n	800ceee <_printf_i+0x162>
 800cf92:	6823      	ldr	r3, [r4, #0]
 800cf94:	079b      	lsls	r3, r3, #30
 800cf96:	d413      	bmi.n	800cfc0 <_printf_i+0x234>
 800cf98:	68e0      	ldr	r0, [r4, #12]
 800cf9a:	9b03      	ldr	r3, [sp, #12]
 800cf9c:	4298      	cmp	r0, r3
 800cf9e:	bfb8      	it	lt
 800cfa0:	4618      	movlt	r0, r3
 800cfa2:	e7a6      	b.n	800cef2 <_printf_i+0x166>
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	4632      	mov	r2, r6
 800cfa8:	4649      	mov	r1, r9
 800cfaa:	4640      	mov	r0, r8
 800cfac:	47d0      	blx	sl
 800cfae:	3001      	adds	r0, #1
 800cfb0:	d09d      	beq.n	800ceee <_printf_i+0x162>
 800cfb2:	3501      	adds	r5, #1
 800cfb4:	68e3      	ldr	r3, [r4, #12]
 800cfb6:	9903      	ldr	r1, [sp, #12]
 800cfb8:	1a5b      	subs	r3, r3, r1
 800cfba:	42ab      	cmp	r3, r5
 800cfbc:	dcf2      	bgt.n	800cfa4 <_printf_i+0x218>
 800cfbe:	e7eb      	b.n	800cf98 <_printf_i+0x20c>
 800cfc0:	2500      	movs	r5, #0
 800cfc2:	f104 0619 	add.w	r6, r4, #25
 800cfc6:	e7f5      	b.n	800cfb4 <_printf_i+0x228>
 800cfc8:	0800e078 	.word	0x0800e078
 800cfcc:	0800e089 	.word	0x0800e089

0800cfd0 <_realloc_r>:
 800cfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd4:	4680      	mov	r8, r0
 800cfd6:	4614      	mov	r4, r2
 800cfd8:	460e      	mov	r6, r1
 800cfda:	b921      	cbnz	r1, 800cfe6 <_realloc_r+0x16>
 800cfdc:	4611      	mov	r1, r2
 800cfde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe2:	f7ff bb69 	b.w	800c6b8 <_malloc_r>
 800cfe6:	b92a      	cbnz	r2, 800cff4 <_realloc_r+0x24>
 800cfe8:	f7ff fcbe 	bl	800c968 <_free_r>
 800cfec:	4625      	mov	r5, r4
 800cfee:	4628      	mov	r0, r5
 800cff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cff4:	f000 f843 	bl	800d07e <_malloc_usable_size_r>
 800cff8:	4284      	cmp	r4, r0
 800cffa:	4607      	mov	r7, r0
 800cffc:	d802      	bhi.n	800d004 <_realloc_r+0x34>
 800cffe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d002:	d812      	bhi.n	800d02a <_realloc_r+0x5a>
 800d004:	4621      	mov	r1, r4
 800d006:	4640      	mov	r0, r8
 800d008:	f7ff fb56 	bl	800c6b8 <_malloc_r>
 800d00c:	4605      	mov	r5, r0
 800d00e:	2800      	cmp	r0, #0
 800d010:	d0ed      	beq.n	800cfee <_realloc_r+0x1e>
 800d012:	42bc      	cmp	r4, r7
 800d014:	4622      	mov	r2, r4
 800d016:	4631      	mov	r1, r6
 800d018:	bf28      	it	cs
 800d01a:	463a      	movcs	r2, r7
 800d01c:	f7ff fc8e 	bl	800c93c <memcpy>
 800d020:	4631      	mov	r1, r6
 800d022:	4640      	mov	r0, r8
 800d024:	f7ff fca0 	bl	800c968 <_free_r>
 800d028:	e7e1      	b.n	800cfee <_realloc_r+0x1e>
 800d02a:	4635      	mov	r5, r6
 800d02c:	e7df      	b.n	800cfee <_realloc_r+0x1e>

0800d02e <memmove>:
 800d02e:	4288      	cmp	r0, r1
 800d030:	b510      	push	{r4, lr}
 800d032:	eb01 0402 	add.w	r4, r1, r2
 800d036:	d902      	bls.n	800d03e <memmove+0x10>
 800d038:	4284      	cmp	r4, r0
 800d03a:	4623      	mov	r3, r4
 800d03c:	d807      	bhi.n	800d04e <memmove+0x20>
 800d03e:	1e43      	subs	r3, r0, #1
 800d040:	42a1      	cmp	r1, r4
 800d042:	d008      	beq.n	800d056 <memmove+0x28>
 800d044:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d048:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d04c:	e7f8      	b.n	800d040 <memmove+0x12>
 800d04e:	4601      	mov	r1, r0
 800d050:	4402      	add	r2, r0
 800d052:	428a      	cmp	r2, r1
 800d054:	d100      	bne.n	800d058 <memmove+0x2a>
 800d056:	bd10      	pop	{r4, pc}
 800d058:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d05c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d060:	e7f7      	b.n	800d052 <memmove+0x24>

0800d062 <memchr>:
 800d062:	4603      	mov	r3, r0
 800d064:	b510      	push	{r4, lr}
 800d066:	b2c9      	uxtb	r1, r1
 800d068:	4402      	add	r2, r0
 800d06a:	4293      	cmp	r3, r2
 800d06c:	4618      	mov	r0, r3
 800d06e:	d101      	bne.n	800d074 <memchr+0x12>
 800d070:	2000      	movs	r0, #0
 800d072:	e003      	b.n	800d07c <memchr+0x1a>
 800d074:	7804      	ldrb	r4, [r0, #0]
 800d076:	3301      	adds	r3, #1
 800d078:	428c      	cmp	r4, r1
 800d07a:	d1f6      	bne.n	800d06a <memchr+0x8>
 800d07c:	bd10      	pop	{r4, pc}

0800d07e <_malloc_usable_size_r>:
 800d07e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d082:	1f18      	subs	r0, r3, #4
 800d084:	2b00      	cmp	r3, #0
 800d086:	bfbc      	itt	lt
 800d088:	580b      	ldrlt	r3, [r1, r0]
 800d08a:	18c0      	addlt	r0, r0, r3
 800d08c:	4770      	bx	lr
	...

0800d090 <_init>:
 800d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d092:	bf00      	nop
 800d094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d096:	bc08      	pop	{r3}
 800d098:	469e      	mov	lr, r3
 800d09a:	4770      	bx	lr

0800d09c <_fini>:
 800d09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d09e:	bf00      	nop
 800d0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0a2:	bc08      	pop	{r3}
 800d0a4:	469e      	mov	lr, r3
 800d0a6:	4770      	bx	lr
