
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cad8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff4  0800ccbc  0800ccbc  0001ccbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcb0  0800dcb0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800dcb0  0800dcb0  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dcb0  0800dcb0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcb0  0800dcb0  0001dcb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcb4  0800dcb4  0001dcb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800dcb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000fc  0800ddb4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800ddb4  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016756  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034f5  00000000  00000000  000368be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00039db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e50  00000000  00000000  0003b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6ae  00000000  00000000  0003be80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb9c  00000000  00000000  0005852e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee28  00000000  00000000  000750ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051d4  00000000  00000000  00113ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001190c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000fc 	.word	0x200000fc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cca4 	.word	0x0800cca4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000100 	.word	0x20000100
 8000220:	0800cca4 	.word	0x0800cca4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fb9a 	bl	8009988 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fa12 	bl	8008680 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000118 	.word	0x20000118
 80004bc:	200003a8 	.word	0x200003a8
 80004c0:	200001f9 	.word	0x200001f9
 80004c4:	20000221 	.word	0x20000221
 80004c8:	20000224 	.word	0x20000224
 80004cc:	20000225 	.word	0x20000225
 80004d0:	20000226 	.word	0x20000226
 80004d4:	20000227 	.word	0x20000227
 80004d8:	20000228 	.word	0x20000228
 80004dc:	20000229 	.word	0x20000229
 80004e0:	20000239 	.word	0x20000239
 80004e4:	2000022a 	.word	0x2000022a
 80004e8:	2000023a 	.word	0x2000023a
 80004ec:	2000022b 	.word	0x2000022b
 80004f0:	2000023b 	.word	0x2000023b
 80004f4:	2000022e 	.word	0x2000022e
 80004f8:	2000022f 	.word	0x2000022f
 80004fc:	20000230 	.word	0x20000230
 8000500:	20000231 	.word	0x20000231
 8000504:	20000232 	.word	0x20000232
 8000508:	20000233 	.word	0x20000233
 800050c:	20000234 	.word	0x20000234
 8000510:	20000235 	.word	0x20000235
 8000514:	20000236 	.word	0x20000236
 8000518:	20000237 	.word	0x20000237
 800051c:	20000238 	.word	0x20000238
 8000520:	2000023c 	.word	0x2000023c
 8000524:	2000023e 	.word	0x2000023e
 8000528:	2000021c 	.word	0x2000021c
 800052c:	2000021d 	.word	0x2000021d
 8000530:	2000021e 	.word	0x2000021e
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	2000021f 	.word	0x2000021f
 8000540:	20000241 	.word	0x20000241
 8000544:	2000023f 	.word	0x2000023f
 8000548:	2000022d 	.word	0x2000022d
 800054c:	20000240 	.word	0x20000240
 8000550:	2000022c 	.word	0x2000022c
 8000554:	20000242 	.word	0x20000242
 8000558:	20000243 	.word	0x20000243
 800055c:	20000244 	.word	0x20000244
 8000560:	20000245 	.word	0x20000245
 8000564:	20000246 	.word	0x20000246
 8000568:	20000247 	.word	0x20000247
 800056c:	20000248 	.word	0x20000248
 8000570:	20000249 	.word	0x20000249
 8000574:	2000024a 	.word	0x2000024a
 8000578:	2000024b 	.word	0x2000024b
 800057c:	200001f8 	.word	0x200001f8
	}

	if(kapi1AcSure>5) {
 8000580:	4b6b      	ldr	r3, [pc, #428]	; (8000730 <eepromKontrol+0x4fc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b69      	ldr	r3, [pc, #420]	; (8000730 <eepromKontrol+0x4fc>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b69      	ldr	r3, [pc, #420]	; (8000734 <eepromKontrol+0x500>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b67      	ldr	r3, [pc, #412]	; (8000734 <eepromKontrol+0x500>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b66      	ldr	r3, [pc, #408]	; (8000738 <eepromKontrol+0x504>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b64      	ldr	r3, [pc, #400]	; (8000738 <eepromKontrol+0x504>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b64      	ldr	r3, [pc, #400]	; (800073c <eepromKontrol+0x508>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b62      	ldr	r3, [pc, #392]	; (800073c <eepromKontrol+0x508>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b61      	ldr	r3, [pc, #388]	; (8000740 <eepromKontrol+0x50c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b5f      	ldr	r3, [pc, #380]	; (8000740 <eepromKontrol+0x50c>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b5f      	ldr	r3, [pc, #380]	; (8000744 <eepromKontrol+0x510>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b5d      	ldr	r3, [pc, #372]	; (8000744 <eepromKontrol+0x510>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <eepromKontrol+0x514>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b5a      	ldr	r3, [pc, #360]	; (8000748 <eepromKontrol+0x514>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b5a      	ldr	r3, [pc, #360]	; (800074c <eepromKontrol+0x518>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b58      	ldr	r3, [pc, #352]	; (800074c <eepromKontrol+0x518>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b57      	ldr	r3, [pc, #348]	; (8000750 <eepromKontrol+0x51c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b55      	ldr	r3, [pc, #340]	; (8000750 <eepromKontrol+0x51c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b55      	ldr	r3, [pc, #340]	; (8000754 <eepromKontrol+0x520>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b53      	ldr	r3, [pc, #332]	; (8000754 <eepromKontrol+0x520>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b52      	ldr	r3, [pc, #328]	; (8000758 <eepromKontrol+0x524>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b50      	ldr	r3, [pc, #320]	; (8000758 <eepromKontrol+0x524>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b50      	ldr	r3, [pc, #320]	; (800075c <eepromKontrol+0x528>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b4e      	ldr	r3, [pc, #312]	; (800075c <eepromKontrol+0x528>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b4d      	ldr	r3, [pc, #308]	; (8000760 <eepromKontrol+0x52c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <eepromKontrol+0x52c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b4b      	ldr	r3, [pc, #300]	; (8000764 <eepromKontrol+0x530>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b49      	ldr	r3, [pc, #292]	; (8000764 <eepromKontrol+0x530>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b48      	ldr	r3, [pc, #288]	; (8000768 <eepromKontrol+0x534>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b46      	ldr	r3, [pc, #280]	; (8000768 <eepromKontrol+0x534>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <eepromKontrol+0x538>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b44      	ldr	r3, [pc, #272]	; (800076c <eepromKontrol+0x538>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b43      	ldr	r3, [pc, #268]	; (8000770 <eepromKontrol+0x53c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b41      	ldr	r3, [pc, #260]	; (8000770 <eepromKontrol+0x53c>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b41      	ldr	r3, [pc, #260]	; (8000774 <eepromKontrol+0x540>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b3f      	ldr	r3, [pc, #252]	; (8000774 <eepromKontrol+0x540>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <eepromKontrol+0x544>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b3c      	ldr	r3, [pc, #240]	; (8000778 <eepromKontrol+0x544>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b3c      	ldr	r3, [pc, #240]	; (800077c <eepromKontrol+0x548>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b3a      	ldr	r3, [pc, #232]	; (800077c <eepromKontrol+0x548>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <eepromKontrol+0x54c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b37      	ldr	r3, [pc, #220]	; (8000780 <eepromKontrol+0x54c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b37      	ldr	r3, [pc, #220]	; (8000784 <eepromKontrol+0x550>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <eepromKontrol+0x550>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
		lcd_print(2, 1, snum);
		HAL_Delay(2000);
		eepromTest2Val++;
	}*/

	memcpy(machineIDInt, &eepromData[idStartPos], machineIDCharacterLimit); //destination, source, size
 80006b4:	4b34      	ldr	r3, [pc, #208]	; (8000788 <eepromKontrol+0x554>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a34      	ldr	r2, [pc, #208]	; (800078c <eepromKontrol+0x558>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b34      	ldr	r3, [pc, #208]	; (8000790 <eepromKontrol+0x55c>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	convertArrays(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 f86a 	bl	80007a4 <convertArrays>
	HAL_Delay(250);
 80006d0:	20fa      	movs	r0, #250	; 0xfa
 80006d2:	f007 ffd5 	bl	8008680 <HAL_Delay>


	memcpy(wifiSSIDInt, &eepromData[ssidStartPos], wifiCharacterLimit); //destination, source, size
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <eepromKontrol+0x560>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a2c      	ldr	r2, [pc, #176]	; (800078c <eepromKontrol+0x558>)
 80006dc:	441a      	add	r2, r3
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <eepromKontrol+0x564>)
 80006e0:	6811      	ldr	r1, [r2, #0]
 80006e2:	6855      	ldr	r5, [r2, #4]
 80006e4:	6894      	ldr	r4, [r2, #8]
 80006e6:	68d0      	ldr	r0, [r2, #12]
 80006e8:	6019      	str	r1, [r3, #0]
 80006ea:	605d      	str	r5, [r3, #4]
 80006ec:	609c      	str	r4, [r3, #8]
 80006ee:	60d8      	str	r0, [r3, #12]
 80006f0:	6911      	ldr	r1, [r2, #16]
 80006f2:	6119      	str	r1, [r3, #16]
	convertArrays(2);
 80006f4:	2002      	movs	r0, #2
 80006f6:	f000 f855 	bl	80007a4 <convertArrays>
	HAL_Delay(250);
 80006fa:	20fa      	movs	r0, #250	; 0xfa
 80006fc:	f007 ffc0 	bl	8008680 <HAL_Delay>

	memcpy(wifiPassInt, &eepromData[passStartPos], wifiCharacterLimit); //destination, source, size
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <eepromKontrol+0x568>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <eepromKontrol+0x558>)
 8000706:	441a      	add	r2, r3
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <eepromKontrol+0x56c>)
 800070a:	6811      	ldr	r1, [r2, #0]
 800070c:	6855      	ldr	r5, [r2, #4]
 800070e:	6894      	ldr	r4, [r2, #8]
 8000710:	68d0      	ldr	r0, [r2, #12]
 8000712:	6019      	str	r1, [r3, #0]
 8000714:	605d      	str	r5, [r3, #4]
 8000716:	609c      	str	r4, [r3, #8]
 8000718:	60d8      	str	r0, [r3, #12]
 800071a:	6911      	ldr	r1, [r2, #16]
 800071c:	6119      	str	r1, [r3, #16]
	convertArrays(3);
 800071e:	2003      	movs	r0, #3
 8000720:	f000 f840 	bl	80007a4 <convertArrays>
	HAL_Delay(250);
 8000724:	20fa      	movs	r0, #250	; 0xfa
 8000726:	f007 ffab 	bl	8008680 <HAL_Delay>
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bdb0      	pop	{r4, r5, r7, pc}
 8000730:	20000239 	.word	0x20000239
 8000734:	2000022a 	.word	0x2000022a
 8000738:	2000023a 	.word	0x2000023a
 800073c:	2000022b 	.word	0x2000022b
 8000740:	2000022d 	.word	0x2000022d
 8000744:	2000023b 	.word	0x2000023b
 8000748:	2000022e 	.word	0x2000022e
 800074c:	2000022f 	.word	0x2000022f
 8000750:	20000230 	.word	0x20000230
 8000754:	20000231 	.word	0x20000231
 8000758:	20000232 	.word	0x20000232
 800075c:	20000233 	.word	0x20000233
 8000760:	20000234 	.word	0x20000234
 8000764:	20000235 	.word	0x20000235
 8000768:	20000236 	.word	0x20000236
 800076c:	20000237 	.word	0x20000237
 8000770:	20000238 	.word	0x20000238
 8000774:	2000023c 	.word	0x2000023c
 8000778:	2000023e 	.word	0x2000023e
 800077c:	20000240 	.word	0x20000240
 8000780:	20000241 	.word	0x20000241
 8000784:	2000023f 	.word	0x2000023f
 8000788:	20000004 	.word	0x20000004
 800078c:	20000118 	.word	0x20000118
 8000790:	200001c4 	.word	0x200001c4
 8000794:	20000008 	.word	0x20000008
 8000798:	200001d0 	.word	0x200001d0
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	200001e4 	.word	0x200001e4

080007a4 <convertArrays>:

void convertArrays(int state) {
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d120      	bne.n	80007f4 <convertArrays+0x50>
		//memset(machineID, 0, machineID[0]);
		int eepromVal = idStartPos;
 80007b2:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <convertArrays+0xfc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	61fb      	str	r3, [r7, #28]

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	e016      	b.n	80007ec <convertArrays+0x48>
			machineID[i] = idCharactersArray[eepromData[eepromVal]];
 80007be:	4a39      	ldr	r2, [pc, #228]	; (80008a4 <convertArrays+0x100>)
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <convertArrays+0x104>)
 80007ca:	5c99      	ldrb	r1, [r3, r2]
 80007cc:	4a37      	ldr	r2, [pc, #220]	; (80008ac <convertArrays+0x108>)
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	4413      	add	r3, r2
 80007d2:	460a      	mov	r2, r1
 80007d4:	701a      	strb	r2, [r3, #0]
			machineID[i + 1] = '\0';
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a34      	ldr	r2, [pc, #208]	; (80008ac <convertArrays+0x108>)
 80007dc:	2100      	movs	r1, #0
 80007de:	54d1      	strb	r1, [r2, r3]

			eepromVal++;
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	3301      	adds	r3, #1
 80007e4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	3301      	adds	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	2b0b      	cmp	r3, #11
 80007f0:	dde5      	ble.n	80007be <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 80007f2:	e04f      	b.n	8000894 <convertArrays+0xf0>
	} else if(state == 2) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d126      	bne.n	8000848 <convertArrays+0xa4>
		int eepromVal = ssidStartPos;
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <convertArrays+0x10c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	e01c      	b.n	8000840 <convertArrays+0x9c>
			if(eepromData[eepromVal] != 0) {
 8000806:	4a27      	ldr	r2, [pc, #156]	; (80008a4 <convertArrays+0x100>)
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	4413      	add	r3, r2
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d013      	beq.n	800083a <convertArrays+0x96>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000812:	4a24      	ldr	r2, [pc, #144]	; (80008a4 <convertArrays+0x100>)
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <convertArrays+0x110>)
 800081e:	5c99      	ldrb	r1, [r3, r2]
 8000820:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <convertArrays+0x114>)
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	4413      	add	r3, r2
 8000826:	460a      	mov	r2, r1
 8000828:	701a      	strb	r2, [r3, #0]
				wifiSSID[i + 1] = '\0';
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	3301      	adds	r3, #1
 800082e:	4a22      	ldr	r2, [pc, #136]	; (80008b8 <convertArrays+0x114>)
 8000830:	2100      	movs	r1, #0
 8000832:	54d1      	strb	r1, [r2, r3]
				eepromVal++;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	3301      	adds	r3, #1
 8000838:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	3301      	adds	r3, #1
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	2b13      	cmp	r3, #19
 8000844:	dddf      	ble.n	8000806 <convertArrays+0x62>
}
 8000846:	e025      	b.n	8000894 <convertArrays+0xf0>
		int eepromVal = passStartPos;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <convertArrays+0x118>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	e01c      	b.n	800088e <convertArrays+0xea>
			if(eepromData[eepromVal] != 0) {
 8000854:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <convertArrays+0x100>)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d013      	beq.n	8000888 <convertArrays+0xe4>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000860:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <convertArrays+0x100>)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <convertArrays+0x110>)
 800086c:	5c99      	ldrb	r1, [r3, r2]
 800086e:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <convertArrays+0x11c>)
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4413      	add	r3, r2
 8000874:	460a      	mov	r2, r1
 8000876:	701a      	strb	r2, [r3, #0]
				wifiPass[i + 1] = '\0';
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3301      	adds	r3, #1
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <convertArrays+0x11c>)
 800087e:	2100      	movs	r1, #0
 8000880:	54d1      	strb	r1, [r2, r3]
				eepromVal++;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	3301      	adds	r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	3301      	adds	r3, #1
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	2b13      	cmp	r3, #19
 8000892:	dddf      	ble.n	8000854 <convertArrays+0xb0>
}
 8000894:	bf00      	nop
 8000896:	3724      	adds	r7, #36	; 0x24
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000004 	.word	0x20000004
 80008a4:	20000118 	.word	0x20000118
 80008a8:	20000010 	.word	0x20000010
 80008ac:	20000190 	.word	0x20000190
 80008b0:	20000008 	.word	0x20000008
 80008b4:	2000001c 	.word	0x2000001c
 80008b8:	2000019c 	.word	0x2000019c
 80008bc:	2000000c 	.word	0x2000000c
 80008c0:	200001b0 	.word	0x200001b0

080008c4 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b0c9      	sub	sp, #292	; 0x124
 80008c8:	af04      	add	r7, sp, #16
 80008ca:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80008ce:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 80008d2:	6020      	str	r0, [r4, #0]
 80008d4:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80008d8:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 80008dc:	6001      	str	r1, [r0, #0]
 80008de:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80008e2:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80008e6:	600a      	str	r2, [r1, #0]
 80008e8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80008ec:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80008f0:	6013      	str	r3, [r2, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80008f2:	4a36      	ldr	r2, [pc, #216]	; (80009cc <sendMachineData+0x108>)
 80008f4:	4936      	ldr	r1, [pc, #216]	; (80009d0 <sendMachineData+0x10c>)
 80008f6:	4837      	ldr	r0, [pc, #220]	; (80009d4 <sendMachineData+0x110>)
 80008f8:	f00b fdb6 	bl	800c468 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008fc:	4835      	ldr	r0, [pc, #212]	; (80009d4 <sendMachineData+0x110>)
 80008fe:	f7ff fc91 	bl	8000224 <strlen>
 8000902:	4603      	mov	r3, r0
 8000904:	b29a      	uxth	r2, r3
 8000906:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800090a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800090e:	4931      	ldr	r1, [pc, #196]	; (80009d4 <sendMachineData+0x110>)
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	f00a ff81 	bl	800b818 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000916:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800091a:	f007 feb1 	bl	8008680 <HAL_Delay>

	sprintf(local_txA,
 800091e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000922:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000926:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800092a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800092e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000932:	4929      	ldr	r1, [pc, #164]	; (80009d8 <sendMachineData+0x114>)
 8000934:	9102      	str	r1, [sp, #8]
 8000936:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800093a:	9101      	str	r1, [sp, #4]
 800093c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000940:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000944:	6809      	ldr	r1, [r1, #0]
 8000946:	9100      	str	r1, [sp, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	4923      	ldr	r1, [pc, #140]	; (80009dc <sendMachineData+0x118>)
 800094e:	f00b fd8b 	bl	800c468 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000952:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fc64 	bl	8000224 <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800096a:	491d      	ldr	r1, [pc, #116]	; (80009e0 <sendMachineData+0x11c>)
 800096c:	4618      	mov	r0, r3
 800096e:	f00b fd7b 	bl	800c468 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fc54 	bl	8000224 <strlen>
 800097c:	4603      	mov	r3, r0
 800097e:	b29a      	uxth	r2, r3
 8000980:	f107 0110 	add.w	r1, r7, #16
 8000984:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000988:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800098c:	6818      	ldr	r0, [r3, #0]
 800098e:	f00a ff43 	bl	800b818 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000992:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000996:	f007 fe73 	bl	8008680 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800099a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fc40 	bl	8000224 <strlen>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80009ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	f00a ff2f 	bl	800b818 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 80009ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009be:	f007 fe5f 	bl	8008680 <HAL_Delay>
}
 80009c2:	bf00      	nop
 80009c4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd90      	pop	{r4, r7, pc}
 80009cc:	0800cd0c 	.word	0x0800cd0c
 80009d0:	0800cd1c 	.word	0x0800cd1c
 80009d4:	20000284 	.word	0x20000284
 80009d8:	0800cdb0 	.word	0x0800cdb0
 80009dc:	0800cd3c 	.word	0x0800cd3c
 80009e0:	0800cdc4 	.word	0x0800cdc4

080009e4 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af04      	add	r7, sp, #16
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <hata2EEPROM+0xa4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <hata2EEPROM+0xa8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	4a25      	ldr	r2, [pc, #148]	; (8000a90 <hata2EEPROM+0xac>)
 80009fc:	5cd3      	ldrb	r3, [r2, r3]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000a02:	f000 f92b 	bl	8000c5c <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000a06:	e000      	b.n	8000a0a <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000a08:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	e012      	b.n	8000a36 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000a10:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <hata2EEPROM+0xa8>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <hata2EEPROM+0xac>)
 8000a1a:	5cd3      	ldrb	r3, [r2, r3]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d107      	bne.n	8000a30 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <hata2EEPROM+0xa8>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	4919      	ldr	r1, [pc, #100]	; (8000a90 <hata2EEPROM+0xac>)
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	54ca      	strb	r2, [r1, r3]
					break;
 8000a2e:	e007      	b.n	8000a40 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3301      	adds	r3, #1
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <hata2EEPROM+0xa4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbe7      	blt.n	8000a10 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <hata2EEPROM+0xa8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	b299      	uxth	r1, r3
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <hata2EEPROM+0xa4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	b298      	uxth	r0, r3
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <hata2EEPROM+0xa8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <hata2EEPROM+0xac>)
 8000a52:	4413      	add	r3, r2
 8000a54:	4a0c      	ldr	r2, [pc, #48]	; (8000a88 <hata2EEPROM+0xa4>)
 8000a56:	6812      	ldr	r2, [r2, #0]
 8000a58:	b292      	uxth	r2, r2
 8000a5a:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000a5e:	9402      	str	r4, [sp, #8]
 8000a60:	9201      	str	r2, [sp, #4]
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	4603      	mov	r3, r0
 8000a66:	460a      	mov	r2, r1
 8000a68:	21a0      	movs	r1, #160	; 0xa0
 8000a6a:	480a      	ldr	r0, [pc, #40]	; (8000a94 <hata2EEPROM+0xb0>)
 8000a6c:	f008 fe92 	bl	8009794 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a74:	f007 fe04 	bl	8008680 <HAL_Delay>
	eepromKontrol(1);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f7ff fbdb 	bl	8000234 <eepromKontrol>
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd90      	pop	{r4, r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000098 	.word	0x20000098
 8000a8c:	2000009c 	.word	0x2000009c
 8000a90:	20000118 	.word	0x20000118
 8000a94:	200003a8 	.word	0x200003a8

08000a98 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d11d      	bne.n	8000ae4 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000aa8:	4b62      	ldr	r3, [pc, #392]	; (8000c34 <hataKoduLcdGoster+0x19c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d105      	bne.n	8000abc <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000ab0:	4a61      	ldr	r2, [pc, #388]	; (8000c38 <hataKoduLcdGoster+0x1a0>)
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f007 f88d 	bl	8007bd4 <lcd_print>
 8000aba:	e008      	b.n	8000ace <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000abc:	4b5d      	ldr	r3, [pc, #372]	; (8000c34 <hataKoduLcdGoster+0x19c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d104      	bne.n	8000ace <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000ac4:	4a5d      	ldr	r2, [pc, #372]	; (8000c3c <hataKoduLcdGoster+0x1a4>)
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f007 f883 	bl	8007bd4 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000ace:	4a5c      	ldr	r2, [pc, #368]	; (8000c40 <hataKoduLcdGoster+0x1a8>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	f007 f87e 	bl	8007bd4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ad8:	4a5a      	ldr	r2, [pc, #360]	; (8000c44 <hataKoduLcdGoster+0x1ac>)
 8000ada:	2107      	movs	r1, #7
 8000adc:	2002      	movs	r0, #2
 8000ade:	f007 f879 	bl	8007bd4 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000ae2:	e0a3      	b.n	8000c2c <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d11d      	bne.n	8000b26 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000aea:	4b52      	ldr	r3, [pc, #328]	; (8000c34 <hataKoduLcdGoster+0x19c>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d105      	bne.n	8000afe <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000af2:	4a51      	ldr	r2, [pc, #324]	; (8000c38 <hataKoduLcdGoster+0x1a0>)
 8000af4:	2101      	movs	r1, #1
 8000af6:	2001      	movs	r0, #1
 8000af8:	f007 f86c 	bl	8007bd4 <lcd_print>
 8000afc:	e008      	b.n	8000b10 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000afe:	4b4d      	ldr	r3, [pc, #308]	; (8000c34 <hataKoduLcdGoster+0x19c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d104      	bne.n	8000b10 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000b06:	4a4d      	ldr	r2, [pc, #308]	; (8000c3c <hataKoduLcdGoster+0x1a4>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f007 f862 	bl	8007bd4 <lcd_print>
		lcd_print(2, 2, "2");
 8000b10:	4a4d      	ldr	r2, [pc, #308]	; (8000c48 <hataKoduLcdGoster+0x1b0>)
 8000b12:	2102      	movs	r1, #2
 8000b14:	2002      	movs	r0, #2
 8000b16:	f007 f85d 	bl	8007bd4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b1a:	4a4a      	ldr	r2, [pc, #296]	; (8000c44 <hataKoduLcdGoster+0x1ac>)
 8000b1c:	2107      	movs	r1, #7
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f007 f858 	bl	8007bd4 <lcd_print>
}
 8000b24:	e082      	b.n	8000c2c <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	d11d      	bne.n	8000b68 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000b2c:	4b41      	ldr	r3, [pc, #260]	; (8000c34 <hataKoduLcdGoster+0x19c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d105      	bne.n	8000b40 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000b34:	4a40      	ldr	r2, [pc, #256]	; (8000c38 <hataKoduLcdGoster+0x1a0>)
 8000b36:	2101      	movs	r1, #1
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f007 f84b 	bl	8007bd4 <lcd_print>
 8000b3e:	e008      	b.n	8000b52 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000b40:	4b3c      	ldr	r3, [pc, #240]	; (8000c34 <hataKoduLcdGoster+0x19c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d104      	bne.n	8000b52 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000b48:	4a3c      	ldr	r2, [pc, #240]	; (8000c3c <hataKoduLcdGoster+0x1a4>)
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f007 f841 	bl	8007bd4 <lcd_print>
		lcd_print(2, 3, "3");
 8000b52:	4a3e      	ldr	r2, [pc, #248]	; (8000c4c <hataKoduLcdGoster+0x1b4>)
 8000b54:	2103      	movs	r1, #3
 8000b56:	2002      	movs	r0, #2
 8000b58:	f007 f83c 	bl	8007bd4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b5c:	4a39      	ldr	r2, [pc, #228]	; (8000c44 <hataKoduLcdGoster+0x1ac>)
 8000b5e:	2107      	movs	r1, #7
 8000b60:	2002      	movs	r0, #2
 8000b62:	f007 f837 	bl	8007bd4 <lcd_print>
}
 8000b66:	e061      	b.n	8000c2c <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d11d      	bne.n	8000baa <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000b6e:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <hataKoduLcdGoster+0x19c>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d105      	bne.n	8000b82 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000b76:	4a30      	ldr	r2, [pc, #192]	; (8000c38 <hataKoduLcdGoster+0x1a0>)
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f007 f82a 	bl	8007bd4 <lcd_print>
 8000b80:	e008      	b.n	8000b94 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000b82:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <hataKoduLcdGoster+0x19c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d104      	bne.n	8000b94 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000b8a:	4a2c      	ldr	r2, [pc, #176]	; (8000c3c <hataKoduLcdGoster+0x1a4>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f007 f820 	bl	8007bd4 <lcd_print>
		lcd_print(2, 4, "4");
 8000b94:	4a2e      	ldr	r2, [pc, #184]	; (8000c50 <hataKoduLcdGoster+0x1b8>)
 8000b96:	2104      	movs	r1, #4
 8000b98:	2002      	movs	r0, #2
 8000b9a:	f007 f81b 	bl	8007bd4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b9e:	4a29      	ldr	r2, [pc, #164]	; (8000c44 <hataKoduLcdGoster+0x1ac>)
 8000ba0:	2107      	movs	r1, #7
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f007 f816 	bl	8007bd4 <lcd_print>
}
 8000ba8:	e040      	b.n	8000c2c <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b05      	cmp	r3, #5
 8000bae:	d11d      	bne.n	8000bec <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <hataKoduLcdGoster+0x19c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d105      	bne.n	8000bc4 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <hataKoduLcdGoster+0x1a0>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f007 f809 	bl	8007bd4 <lcd_print>
 8000bc2:	e008      	b.n	8000bd6 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <hataKoduLcdGoster+0x19c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d104      	bne.n	8000bd6 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <hataKoduLcdGoster+0x1a4>)
 8000bce:	2101      	movs	r1, #1
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f006 ffff 	bl	8007bd4 <lcd_print>
		lcd_print(2, 5, "5");
 8000bd6:	4a1f      	ldr	r2, [pc, #124]	; (8000c54 <hataKoduLcdGoster+0x1bc>)
 8000bd8:	2105      	movs	r1, #5
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f006 fffa 	bl	8007bd4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000be0:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <hataKoduLcdGoster+0x1ac>)
 8000be2:	2107      	movs	r1, #7
 8000be4:	2002      	movs	r0, #2
 8000be6:	f006 fff5 	bl	8007bd4 <lcd_print>
}
 8000bea:	e01f      	b.n	8000c2c <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d11c      	bne.n	8000c2c <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <hataKoduLcdGoster+0x19c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d105      	bne.n	8000c06 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <hataKoduLcdGoster+0x1a0>)
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f006 ffe8 	bl	8007bd4 <lcd_print>
 8000c04:	e008      	b.n	8000c18 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <hataKoduLcdGoster+0x19c>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d104      	bne.n	8000c18 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <hataKoduLcdGoster+0x1a4>)
 8000c10:	2101      	movs	r1, #1
 8000c12:	2001      	movs	r0, #1
 8000c14:	f006 ffde 	bl	8007bd4 <lcd_print>
		lcd_print(2, 6, "6");
 8000c18:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <hataKoduLcdGoster+0x1c0>)
 8000c1a:	2106      	movs	r1, #6
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f006 ffd9 	bl	8007bd4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <hataKoduLcdGoster+0x1ac>)
 8000c24:	2107      	movs	r1, #7
 8000c26:	2002      	movs	r0, #2
 8000c28:	f006 ffd4 	bl	8007bd4 <lcd_print>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000241 	.word	0x20000241
 8000c38:	0800ce50 	.word	0x0800ce50
 8000c3c:	0800ce60 	.word	0x0800ce60
 8000c40:	0800ce70 	.word	0x0800ce70
 8000c44:	0800ce74 	.word	0x0800ce74
 8000c48:	0800ce80 	.word	0x0800ce80
 8000c4c:	0800ce84 	.word	0x0800ce84
 8000c50:	0800ce88 	.word	0x0800ce88
 8000c54:	0800ce8c 	.word	0x0800ce8c
 8000c58:	0800ce90 	.word	0x0800ce90

08000c5c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	e009      	b.n	8000c7c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <eepromDataFillWithEmpty+0x38>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c70:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <eepromDataFillWithEmpty+0x3c>)
 8000c72:	2100      	movs	r1, #0
 8000c74:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <eepromDataFillWithEmpty+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	dbf0      	blt.n	8000c68 <eepromDataFillWithEmpty+0xc>
	}
}
 8000c86:	bf00      	nop
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000070 	.word	0x20000070
 8000c98:	20000118 	.word	0x20000118
 8000c9c:	20000098 	.word	0x20000098

08000ca0 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000cb2:	4b50      	ldr	r3, [pc, #320]	; (8000df4 <i2cTest+0x154>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b4e      	ldr	r3, [pc, #312]	; (8000df4 <i2cTest+0x154>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 0201 	bic.w	r2, r2, #1
 8000cc0:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000cc2:	484c      	ldr	r0, [pc, #304]	; (8000df4 <i2cTest+0x154>)
 8000cc4:	f008 fc38 	bl	8009538 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cc8:	23c0      	movs	r3, #192	; 0xc0
 8000cca:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000ccc:	2311      	movs	r3, #17
 8000cce:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000cd8:	463b      	mov	r3, r7
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4846      	ldr	r0, [pc, #280]	; (8000df8 <i2cTest+0x158>)
 8000cde:	f008 f83f 	bl	8008d60 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2140      	movs	r1, #64	; 0x40
 8000ce6:	4844      	ldr	r0, [pc, #272]	; (8000df8 <i2cTest+0x158>)
 8000ce8:	f008 fab1 	bl	800924e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	4841      	ldr	r0, [pc, #260]	; (8000df8 <i2cTest+0x158>)
 8000cf2:	f008 faac 	bl	800924e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000cf6:	200a      	movs	r0, #10
 8000cf8:	f007 fcc2 	bl	8008680 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000cfc:	bf00      	nop
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	483d      	ldr	r0, [pc, #244]	; (8000df8 <i2cTest+0x158>)
 8000d02:	f008 fa8d 	bl	8009220 <HAL_GPIO_ReadPin>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d006      	beq.n	8000d1a <i2cTest+0x7a>
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	483a      	ldr	r0, [pc, #232]	; (8000df8 <i2cTest+0x158>)
 8000d10:	f008 fa86 	bl	8009220 <HAL_GPIO_ReadPin>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d1f1      	bne.n	8000cfe <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	4836      	ldr	r0, [pc, #216]	; (8000df8 <i2cTest+0x158>)
 8000d20:	f008 fa95 	bl	800924e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000d24:	200a      	movs	r0, #10
 8000d26:	f007 fcab 	bl	8008680 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000d2a:	bf00      	nop
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	4832      	ldr	r0, [pc, #200]	; (8000df8 <i2cTest+0x158>)
 8000d30:	f008 fa76 	bl	8009220 <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d0f8      	beq.n	8000d2c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2140      	movs	r1, #64	; 0x40
 8000d3e:	482e      	ldr	r0, [pc, #184]	; (8000df8 <i2cTest+0x158>)
 8000d40:	f008 fa85 	bl	800924e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d44:	200a      	movs	r0, #10
 8000d46:	f007 fc9b 	bl	8008680 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000d4a:	bf00      	nop
 8000d4c:	2140      	movs	r1, #64	; 0x40
 8000d4e:	482a      	ldr	r0, [pc, #168]	; (8000df8 <i2cTest+0x158>)
 8000d50:	f008 fa66 	bl	8009220 <HAL_GPIO_ReadPin>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d0f8      	beq.n	8000d4c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2140      	movs	r1, #64	; 0x40
 8000d5e:	4826      	ldr	r0, [pc, #152]	; (8000df8 <i2cTest+0x158>)
 8000d60:	f008 fa75 	bl	800924e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d64:	200a      	movs	r0, #10
 8000d66:	f007 fc8b 	bl	8008680 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000d6a:	bf00      	nop
 8000d6c:	2140      	movs	r1, #64	; 0x40
 8000d6e:	4822      	ldr	r0, [pc, #136]	; (8000df8 <i2cTest+0x158>)
 8000d70:	f008 fa56 	bl	8009220 <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d1f8      	bne.n	8000d6c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	481e      	ldr	r0, [pc, #120]	; (8000df8 <i2cTest+0x158>)
 8000d80:	f008 fa65 	bl	800924e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d84:	200a      	movs	r0, #10
 8000d86:	f007 fc7b 	bl	8008680 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d8a:	bf00      	nop
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	481a      	ldr	r0, [pc, #104]	; (8000df8 <i2cTest+0x158>)
 8000d90:	f008 fa46 	bl	8009220 <HAL_GPIO_ReadPin>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d1f8      	bne.n	8000d8c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d9a:	23c0      	movs	r3, #192	; 0xc0
 8000d9c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d9e:	2312      	movs	r3, #18
 8000da0:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000daa:	463b      	mov	r3, r7
 8000dac:	4619      	mov	r1, r3
 8000dae:	4812      	ldr	r0, [pc, #72]	; (8000df8 <i2cTest+0x158>)
 8000db0:	f007 ffd6 	bl	8008d60 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <i2cTest+0x154>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <i2cTest+0x154>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dc2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <i2cTest+0x154>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <i2cTest+0x154>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dd2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <i2cTest+0x154>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <i2cTest+0x154>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f042 0201 	orr.w	r2, r2, #1
 8000de2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000de4:	4803      	ldr	r0, [pc, #12]	; (8000df4 <i2cTest+0x154>)
 8000de6:	f008 fa63 	bl	80092b0 <HAL_I2C_Init>
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200003a8 	.word	0x200003a8
 8000df8:	40010c00 	.word	0x40010c00

08000dfc <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000e06:	20c8      	movs	r0, #200	; 0xc8
 8000e08:	f007 fc3a 	bl	8008680 <HAL_Delay>
	lcd_clear();
 8000e0c:	f006 ff0e 	bl	8007c2c <lcd_clear>
	if(type == 1 && page == 0) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d143      	bne.n	8000e9e <printTemplate+0xa2>
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d140      	bne.n	8000e9e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000e1c:	4a9d      	ldr	r2, [pc, #628]	; (8001094 <printTemplate+0x298>)
 8000e1e:	2101      	movs	r1, #1
 8000e20:	2001      	movs	r0, #1
 8000e22:	f006 fed7 	bl	8007bd4 <lcd_print>
		lcd_print(2, 3, "0");
 8000e26:	4a9c      	ldr	r2, [pc, #624]	; (8001098 <printTemplate+0x29c>)
 8000e28:	2103      	movs	r1, #3
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	f006 fed2 	bl	8007bd4 <lcd_print>
		lcd_print(2, 4, "1");
 8000e30:	4a9a      	ldr	r2, [pc, #616]	; (800109c <printTemplate+0x2a0>)
 8000e32:	2104      	movs	r1, #4
 8000e34:	2002      	movs	r0, #2
 8000e36:	f006 fecd 	bl	8007bd4 <lcd_print>
		lcd_print(2, 5, "2");
 8000e3a:	4a99      	ldr	r2, [pc, #612]	; (80010a0 <printTemplate+0x2a4>)
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f006 fec8 	bl	8007bd4 <lcd_print>
		lcd_print(2, 6, "3");
 8000e44:	4a97      	ldr	r2, [pc, #604]	; (80010a4 <printTemplate+0x2a8>)
 8000e46:	2106      	movs	r1, #6
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f006 fec3 	bl	8007bd4 <lcd_print>
		lcd_print(2, 7, "4");
 8000e4e:	4a96      	ldr	r2, [pc, #600]	; (80010a8 <printTemplate+0x2ac>)
 8000e50:	2107      	movs	r1, #7
 8000e52:	2002      	movs	r0, #2
 8000e54:	f006 febe 	bl	8007bd4 <lcd_print>
		lcd_print(2, 10, "5");
 8000e58:	4a94      	ldr	r2, [pc, #592]	; (80010ac <printTemplate+0x2b0>)
 8000e5a:	210a      	movs	r1, #10
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f006 feb9 	bl	8007bd4 <lcd_print>
		lcd_print(2, 11, "6");
 8000e62:	4a93      	ldr	r2, [pc, #588]	; (80010b0 <printTemplate+0x2b4>)
 8000e64:	210b      	movs	r1, #11
 8000e66:	2002      	movs	r0, #2
 8000e68:	f006 feb4 	bl	8007bd4 <lcd_print>
		lcd_print(2, 12, "7");
 8000e6c:	4a91      	ldr	r2, [pc, #580]	; (80010b4 <printTemplate+0x2b8>)
 8000e6e:	210c      	movs	r1, #12
 8000e70:	2002      	movs	r0, #2
 8000e72:	f006 feaf 	bl	8007bd4 <lcd_print>
		lcd_print(2, 13, "8");
 8000e76:	4a90      	ldr	r2, [pc, #576]	; (80010b8 <printTemplate+0x2bc>)
 8000e78:	210d      	movs	r1, #13
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f006 feaa 	bl	8007bd4 <lcd_print>
		lcd_print(2, 14, "9");
 8000e80:	4a8e      	ldr	r2, [pc, #568]	; (80010bc <printTemplate+0x2c0>)
 8000e82:	210e      	movs	r1, #14
 8000e84:	2002      	movs	r0, #2
 8000e86:	f006 fea5 	bl	8007bd4 <lcd_print>
		lcd_print(1, 5, machineID);
 8000e8a:	4a8d      	ldr	r2, [pc, #564]	; (80010c0 <printTemplate+0x2c4>)
 8000e8c:	2105      	movs	r1, #5
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f006 fea0 	bl	8007bd4 <lcd_print>
		lcd_gotoxy(2, 3);
 8000e94:	2103      	movs	r1, #3
 8000e96:	2002      	movs	r0, #2
 8000e98:	f006 fe7d 	bl	8007b96 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000e9c:	e0f5      	b.n	800108a <printTemplate+0x28e>
	} else if(type == 2) {
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d178      	bne.n	8000f96 <printTemplate+0x19a>
		if(page == 1) {
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d114      	bne.n	8000ed4 <printTemplate+0xd8>
			lcd_clear();
 8000eaa:	f006 febf 	bl	8007c2c <lcd_clear>
			HAL_Delay(100);
 8000eae:	2064      	movs	r0, #100	; 0x64
 8000eb0:	f007 fbe6 	bl	8008680 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000eb4:	4a83      	ldr	r2, [pc, #524]	; (80010c4 <printTemplate+0x2c8>)
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f006 fe8b 	bl	8007bd4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ebe:	4a82      	ldr	r2, [pc, #520]	; (80010c8 <printTemplate+0x2cc>)
 8000ec0:	2107      	movs	r1, #7
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f006 fe86 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000ec8:	4a80      	ldr	r2, [pc, #512]	; (80010cc <printTemplate+0x2d0>)
 8000eca:	2101      	movs	r1, #1
 8000ecc:	2002      	movs	r0, #2
 8000ece:	f006 fe81 	bl	8007bd4 <lcd_print>
}
 8000ed2:	e0da      	b.n	800108a <printTemplate+0x28e>
		} else if(page == 2) {
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d114      	bne.n	8000f04 <printTemplate+0x108>
			lcd_clear();
 8000eda:	f006 fea7 	bl	8007c2c <lcd_clear>
			HAL_Delay(100);
 8000ede:	2064      	movs	r0, #100	; 0x64
 8000ee0:	f007 fbce 	bl	8008680 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ee4:	4a77      	ldr	r2, [pc, #476]	; (80010c4 <printTemplate+0x2c8>)
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f006 fe73 	bl	8007bd4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000eee:	4a76      	ldr	r2, [pc, #472]	; (80010c8 <printTemplate+0x2cc>)
 8000ef0:	2107      	movs	r1, #7
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f006 fe6e 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ef8:	4a75      	ldr	r2, [pc, #468]	; (80010d0 <printTemplate+0x2d4>)
 8000efa:	2101      	movs	r1, #1
 8000efc:	2002      	movs	r0, #2
 8000efe:	f006 fe69 	bl	8007bd4 <lcd_print>
}
 8000f02:	e0c2      	b.n	800108a <printTemplate+0x28e>
		} else if(page == 3) {
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d114      	bne.n	8000f34 <printTemplate+0x138>
			lcd_clear();
 8000f0a:	f006 fe8f 	bl	8007c2c <lcd_clear>
			HAL_Delay(100);
 8000f0e:	2064      	movs	r0, #100	; 0x64
 8000f10:	f007 fbb6 	bl	8008680 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f14:	4a6b      	ldr	r2, [pc, #428]	; (80010c4 <printTemplate+0x2c8>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f006 fe5b 	bl	8007bd4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f1e:	4a6a      	ldr	r2, [pc, #424]	; (80010c8 <printTemplate+0x2cc>)
 8000f20:	2107      	movs	r1, #7
 8000f22:	2001      	movs	r0, #1
 8000f24:	f006 fe56 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000f28:	4a6a      	ldr	r2, [pc, #424]	; (80010d4 <printTemplate+0x2d8>)
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f006 fe51 	bl	8007bd4 <lcd_print>
}
 8000f32:	e0aa      	b.n	800108a <printTemplate+0x28e>
		} else if(page == 4) {
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d114      	bne.n	8000f64 <printTemplate+0x168>
			lcd_clear();
 8000f3a:	f006 fe77 	bl	8007c2c <lcd_clear>
			HAL_Delay(100);
 8000f3e:	2064      	movs	r0, #100	; 0x64
 8000f40:	f007 fb9e 	bl	8008680 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f44:	4a5f      	ldr	r2, [pc, #380]	; (80010c4 <printTemplate+0x2c8>)
 8000f46:	2101      	movs	r1, #1
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f006 fe43 	bl	8007bd4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f4e:	4a5e      	ldr	r2, [pc, #376]	; (80010c8 <printTemplate+0x2cc>)
 8000f50:	2107      	movs	r1, #7
 8000f52:	2001      	movs	r0, #1
 8000f54:	f006 fe3e 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000f58:	4a5f      	ldr	r2, [pc, #380]	; (80010d8 <printTemplate+0x2dc>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f006 fe39 	bl	8007bd4 <lcd_print>
}
 8000f62:	e092      	b.n	800108a <printTemplate+0x28e>
		} else if(page == 5) {
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	f040 808f 	bne.w	800108a <printTemplate+0x28e>
			lcd_clear();
 8000f6c:	f006 fe5e 	bl	8007c2c <lcd_clear>
			HAL_Delay(100);
 8000f70:	2064      	movs	r0, #100	; 0x64
 8000f72:	f007 fb85 	bl	8008680 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f76:	4a53      	ldr	r2, [pc, #332]	; (80010c4 <printTemplate+0x2c8>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f006 fe2a 	bl	8007bd4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f80:	4a51      	ldr	r2, [pc, #324]	; (80010c8 <printTemplate+0x2cc>)
 8000f82:	2107      	movs	r1, #7
 8000f84:	2001      	movs	r0, #1
 8000f86:	f006 fe25 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000f8a:	4a54      	ldr	r2, [pc, #336]	; (80010dc <printTemplate+0x2e0>)
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f006 fe20 	bl	8007bd4 <lcd_print>
}
 8000f94:	e079      	b.n	800108a <printTemplate+0x28e>
	} else if(type == 3) {
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d176      	bne.n	800108a <printTemplate+0x28e>
		if(page == 1) {
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d114      	bne.n	8000fcc <printTemplate+0x1d0>
			lcd_clear();
 8000fa2:	f006 fe43 	bl	8007c2c <lcd_clear>
			HAL_Delay(100);
 8000fa6:	2064      	movs	r0, #100	; 0x64
 8000fa8:	f007 fb6a 	bl	8008680 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <printTemplate+0x2e4>)
 8000fae:	2101      	movs	r1, #1
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f006 fe0f 	bl	8007bd4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fb6:	4a4b      	ldr	r2, [pc, #300]	; (80010e4 <printTemplate+0x2e8>)
 8000fb8:	2107      	movs	r1, #7
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f006 fe0a 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000fc0:	4a42      	ldr	r2, [pc, #264]	; (80010cc <printTemplate+0x2d0>)
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f006 fe05 	bl	8007bd4 <lcd_print>
}
 8000fca:	e05e      	b.n	800108a <printTemplate+0x28e>
		} else if(page == 2) {
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d114      	bne.n	8000ffc <printTemplate+0x200>
			lcd_clear();
 8000fd2:	f006 fe2b 	bl	8007c2c <lcd_clear>
			HAL_Delay(100);
 8000fd6:	2064      	movs	r0, #100	; 0x64
 8000fd8:	f007 fb52 	bl	8008680 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fdc:	4a40      	ldr	r2, [pc, #256]	; (80010e0 <printTemplate+0x2e4>)
 8000fde:	2101      	movs	r1, #1
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f006 fdf7 	bl	8007bd4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fe6:	4a3f      	ldr	r2, [pc, #252]	; (80010e4 <printTemplate+0x2e8>)
 8000fe8:	2107      	movs	r1, #7
 8000fea:	2001      	movs	r0, #1
 8000fec:	f006 fdf2 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ff0:	4a37      	ldr	r2, [pc, #220]	; (80010d0 <printTemplate+0x2d4>)
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f006 fded 	bl	8007bd4 <lcd_print>
}
 8000ffa:	e046      	b.n	800108a <printTemplate+0x28e>
		} else if(page == 3) {
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d114      	bne.n	800102c <printTemplate+0x230>
			lcd_clear();
 8001002:	f006 fe13 	bl	8007c2c <lcd_clear>
			HAL_Delay(100);
 8001006:	2064      	movs	r0, #100	; 0x64
 8001008:	f007 fb3a 	bl	8008680 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800100c:	4a34      	ldr	r2, [pc, #208]	; (80010e0 <printTemplate+0x2e4>)
 800100e:	2101      	movs	r1, #1
 8001010:	2001      	movs	r0, #1
 8001012:	f006 fddf 	bl	8007bd4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001016:	4a33      	ldr	r2, [pc, #204]	; (80010e4 <printTemplate+0x2e8>)
 8001018:	2107      	movs	r1, #7
 800101a:	2001      	movs	r0, #1
 800101c:	f006 fdda 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001020:	4a2c      	ldr	r2, [pc, #176]	; (80010d4 <printTemplate+0x2d8>)
 8001022:	2101      	movs	r1, #1
 8001024:	2002      	movs	r0, #2
 8001026:	f006 fdd5 	bl	8007bd4 <lcd_print>
}
 800102a:	e02e      	b.n	800108a <printTemplate+0x28e>
		} else if(page == 4) {
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2b04      	cmp	r3, #4
 8001030:	d114      	bne.n	800105c <printTemplate+0x260>
			lcd_clear();
 8001032:	f006 fdfb 	bl	8007c2c <lcd_clear>
			HAL_Delay(100);
 8001036:	2064      	movs	r0, #100	; 0x64
 8001038:	f007 fb22 	bl	8008680 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800103c:	4a28      	ldr	r2, [pc, #160]	; (80010e0 <printTemplate+0x2e4>)
 800103e:	2101      	movs	r1, #1
 8001040:	2001      	movs	r0, #1
 8001042:	f006 fdc7 	bl	8007bd4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001046:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <printTemplate+0x2e8>)
 8001048:	2107      	movs	r1, #7
 800104a:	2001      	movs	r0, #1
 800104c:	f006 fdc2 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <printTemplate+0x2dc>)
 8001052:	2101      	movs	r1, #1
 8001054:	2002      	movs	r0, #2
 8001056:	f006 fdbd 	bl	8007bd4 <lcd_print>
}
 800105a:	e016      	b.n	800108a <printTemplate+0x28e>
		} else if(page == 5) {
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2b05      	cmp	r3, #5
 8001060:	d113      	bne.n	800108a <printTemplate+0x28e>
			lcd_clear();
 8001062:	f006 fde3 	bl	8007c2c <lcd_clear>
			HAL_Delay(100);
 8001066:	2064      	movs	r0, #100	; 0x64
 8001068:	f007 fb0a 	bl	8008680 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800106c:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <printTemplate+0x2e4>)
 800106e:	2101      	movs	r1, #1
 8001070:	2001      	movs	r0, #1
 8001072:	f006 fdaf 	bl	8007bd4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001076:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <printTemplate+0x2e8>)
 8001078:	2107      	movs	r1, #7
 800107a:	2001      	movs	r0, #1
 800107c:	f006 fdaa 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001080:	4a16      	ldr	r2, [pc, #88]	; (80010dc <printTemplate+0x2e0>)
 8001082:	2101      	movs	r1, #1
 8001084:	2002      	movs	r0, #2
 8001086:	f006 fda5 	bl	8007bd4 <lcd_print>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	0800ce94 	.word	0x0800ce94
 8001098:	0800ce9c 	.word	0x0800ce9c
 800109c:	0800cea0 	.word	0x0800cea0
 80010a0:	0800cea4 	.word	0x0800cea4
 80010a4:	0800cea8 	.word	0x0800cea8
 80010a8:	0800ceac 	.word	0x0800ceac
 80010ac:	0800ceb0 	.word	0x0800ceb0
 80010b0:	0800ceb4 	.word	0x0800ceb4
 80010b4:	0800ceb8 	.word	0x0800ceb8
 80010b8:	0800cebc 	.word	0x0800cebc
 80010bc:	0800cec0 	.word	0x0800cec0
 80010c0:	20000190 	.word	0x20000190
 80010c4:	0800cec4 	.word	0x0800cec4
 80010c8:	2000019c 	.word	0x2000019c
 80010cc:	0800cecc 	.word	0x0800cecc
 80010d0:	0800cee0 	.word	0x0800cee0
 80010d4:	0800cef4 	.word	0x0800cef4
 80010d8:	0800cf08 	.word	0x0800cf08
 80010dc:	0800cf1c 	.word	0x0800cf1c
 80010e0:	0800cf30 	.word	0x0800cf30
 80010e4:	200001b0 	.word	0x200001b0

080010e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010ec:	f3bf 8f4f 	dsb	sy
}
 80010f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <__NVIC_SystemReset+0x24>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80010fa:	4904      	ldr	r1, [pc, #16]	; (800110c <__NVIC_SystemReset+0x24>)
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_SystemReset+0x28>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001102:	f3bf 8f4f 	dsb	sy
}
 8001106:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <__NVIC_SystemReset+0x20>
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	05fa0004 	.word	0x05fa0004

08001114 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800111a:	2101      	movs	r1, #1
 800111c:	488e      	ldr	r0, [pc, #568]	; (8001358 <menu+0x244>)
 800111e:	f008 f87f 	bl	8009220 <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	f040 808e 	bne.w	8001246 <menu+0x132>
 800112a:	4b8c      	ldr	r3, [pc, #560]	; (800135c <menu+0x248>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 8086 	beq.w	8001246 <menu+0x132>
		menuSayac = menuSayac+1;
 800113a:	4b89      	ldr	r3, [pc, #548]	; (8001360 <menu+0x24c>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b87      	ldr	r3, [pc, #540]	; (8001360 <menu+0x24c>)
 8001144:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001146:	4b86      	ldr	r3, [pc, #536]	; (8001360 <menu+0x24c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b24      	cmp	r3, #36	; 0x24
 800114c:	d102      	bne.n	8001154 <menu+0x40>
			menuSayac = 1;
 800114e:	4b84      	ldr	r3, [pc, #528]	; (8001360 <menu+0x24c>)
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001154:	4b82      	ldr	r3, [pc, #520]	; (8001360 <menu+0x24c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b12      	cmp	r3, #18
 800115a:	d106      	bne.n	800116a <menu+0x56>
 800115c:	4b81      	ldr	r3, [pc, #516]	; (8001364 <menu+0x250>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <menu+0x56>
			menuSayac = 21;
 8001164:	4b7e      	ldr	r3, [pc, #504]	; (8001360 <menu+0x24c>)
 8001166:	2215      	movs	r2, #21
 8001168:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800116a:	4b7d      	ldr	r3, [pc, #500]	; (8001360 <menu+0x24c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b08      	cmp	r3, #8
 8001170:	d106      	bne.n	8001180 <menu+0x6c>
 8001172:	4b7d      	ldr	r3, [pc, #500]	; (8001368 <menu+0x254>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <menu+0x6c>
			menuSayac = 16;
 800117a:	4b79      	ldr	r3, [pc, #484]	; (8001360 <menu+0x24c>)
 800117c:	2210      	movs	r2, #16
 800117e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001180:	4b77      	ldr	r3, [pc, #476]	; (8001360 <menu+0x24c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b0d      	cmp	r3, #13
 8001186:	d106      	bne.n	8001196 <menu+0x82>
 8001188:	4b77      	ldr	r3, [pc, #476]	; (8001368 <menu+0x254>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d102      	bne.n	8001196 <menu+0x82>
			menuSayac = 16;
 8001190:	4b73      	ldr	r3, [pc, #460]	; (8001360 <menu+0x24c>)
 8001192:	2210      	movs	r2, #16
 8001194:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001196:	4b72      	ldr	r3, [pc, #456]	; (8001360 <menu+0x24c>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b09      	cmp	r3, #9
 800119c:	d106      	bne.n	80011ac <menu+0x98>
 800119e:	4b72      	ldr	r3, [pc, #456]	; (8001368 <menu+0x254>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d102      	bne.n	80011ac <menu+0x98>
			menuSayac = 13;
 80011a6:	4b6e      	ldr	r3, [pc, #440]	; (8001360 <menu+0x24c>)
 80011a8:	220d      	movs	r2, #13
 80011aa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80011ac:	4b6c      	ldr	r3, [pc, #432]	; (8001360 <menu+0x24c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b0a      	cmp	r3, #10
 80011b2:	d10a      	bne.n	80011ca <menu+0xb6>
 80011b4:	4b6d      	ldr	r3, [pc, #436]	; (800136c <menu+0x258>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d003      	beq.n	80011c4 <menu+0xb0>
 80011bc:	4b6b      	ldr	r3, [pc, #428]	; (800136c <menu+0x258>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d102      	bne.n	80011ca <menu+0xb6>
			menuSayac = 11;
 80011c4:	4b66      	ldr	r3, [pc, #408]	; (8001360 <menu+0x24c>)
 80011c6:	220b      	movs	r2, #11
 80011c8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80011ca:	4b65      	ldr	r3, [pc, #404]	; (8001360 <menu+0x24c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b0c      	cmp	r3, #12
 80011d0:	d10e      	bne.n	80011f0 <menu+0xdc>
 80011d2:	4b67      	ldr	r3, [pc, #412]	; (8001370 <menu+0x25c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d003      	beq.n	80011e2 <menu+0xce>
 80011da:	4b65      	ldr	r3, [pc, #404]	; (8001370 <menu+0x25c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d106      	bne.n	80011f0 <menu+0xdc>
 80011e2:	4b61      	ldr	r3, [pc, #388]	; (8001368 <menu+0x254>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d102      	bne.n	80011f0 <menu+0xdc>
			menuSayac = 16;
 80011ea:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <menu+0x24c>)
 80011ec:	2210      	movs	r2, #16
 80011ee:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80011f0:	4b5b      	ldr	r3, [pc, #364]	; (8001360 <menu+0x24c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b0c      	cmp	r3, #12
 80011f6:	d10e      	bne.n	8001216 <menu+0x102>
 80011f8:	4b5d      	ldr	r3, [pc, #372]	; (8001370 <menu+0x25c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d003      	beq.n	8001208 <menu+0xf4>
 8001200:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <menu+0x25c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d106      	bne.n	8001216 <menu+0x102>
 8001208:	4b57      	ldr	r3, [pc, #348]	; (8001368 <menu+0x254>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b03      	cmp	r3, #3
 800120e:	d102      	bne.n	8001216 <menu+0x102>
			menuSayac = 13;
 8001210:	4b53      	ldr	r3, [pc, #332]	; (8001360 <menu+0x24c>)
 8001212:	220d      	movs	r2, #13
 8001214:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001216:	4b52      	ldr	r3, [pc, #328]	; (8001360 <menu+0x24c>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b0f      	cmp	r3, #15
 800121c:	d106      	bne.n	800122c <menu+0x118>
 800121e:	4b55      	ldr	r3, [pc, #340]	; (8001374 <menu+0x260>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d102      	bne.n	800122c <menu+0x118>
			menuSayac = 16;
 8001226:	4b4e      	ldr	r3, [pc, #312]	; (8001360 <menu+0x24c>)
 8001228:	2210      	movs	r2, #16
 800122a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800122c:	4b4c      	ldr	r3, [pc, #304]	; (8001360 <menu+0x24c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b18      	cmp	r3, #24
 8001232:	d106      	bne.n	8001242 <menu+0x12e>
 8001234:	4b4b      	ldr	r3, [pc, #300]	; (8001364 <menu+0x250>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <menu+0x12e>
			menuSayac = 26;
 800123c:	4b48      	ldr	r3, [pc, #288]	; (8001360 <menu+0x24c>)
 800123e:	221a      	movs	r2, #26
 8001240:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001242:	f003 fba7 	bl	8004994 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001246:	2108      	movs	r1, #8
 8001248:	484b      	ldr	r0, [pc, #300]	; (8001378 <menu+0x264>)
 800124a:	f007 ffe9 	bl	8009220 <HAL_GPIO_ReadPin>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d175      	bne.n	8001340 <menu+0x22c>
 8001254:	4b41      	ldr	r3, [pc, #260]	; (800135c <menu+0x248>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	f083 0301 	eor.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d06e      	beq.n	8001340 <menu+0x22c>
		if (menuSayac <= 1) {
 8001262:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <menu+0x24c>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d802      	bhi.n	8001270 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <menu+0x24c>)
 800126c:	2224      	movs	r2, #36	; 0x24
 800126e:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001270:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <menu+0x24c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3b01      	subs	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b39      	ldr	r3, [pc, #228]	; (8001360 <menu+0x24c>)
 800127a:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800127c:	4b38      	ldr	r3, [pc, #224]	; (8001360 <menu+0x24c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b14      	cmp	r3, #20
 8001282:	d106      	bne.n	8001292 <menu+0x17e>
 8001284:	4b37      	ldr	r3, [pc, #220]	; (8001364 <menu+0x250>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <menu+0x17e>
			menuSayac = 17;
 800128c:	4b34      	ldr	r3, [pc, #208]	; (8001360 <menu+0x24c>)
 800128e:	2211      	movs	r2, #17
 8001290:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001292:	4b33      	ldr	r3, [pc, #204]	; (8001360 <menu+0x24c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	d106      	bne.n	80012a8 <menu+0x194>
 800129a:	4b33      	ldr	r3, [pc, #204]	; (8001368 <menu+0x254>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d102      	bne.n	80012a8 <menu+0x194>
			menuSayac = 7;
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <menu+0x24c>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80012a8:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <menu+0x24c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d106      	bne.n	80012be <menu+0x1aa>
 80012b0:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <menu+0x254>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d102      	bne.n	80012be <menu+0x1aa>
			menuSayac = 12;
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <menu+0x24c>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <menu+0x24c>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b0c      	cmp	r3, #12
 80012c4:	d106      	bne.n	80012d4 <menu+0x1c0>
 80012c6:	4b28      	ldr	r3, [pc, #160]	; (8001368 <menu+0x254>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d102      	bne.n	80012d4 <menu+0x1c0>
			menuSayac = 8;
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <menu+0x24c>)
 80012d0:	2208      	movs	r2, #8
 80012d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <menu+0x24c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b0a      	cmp	r3, #10
 80012da:	d10a      	bne.n	80012f2 <menu+0x1de>
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <menu+0x258>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d003      	beq.n	80012ec <menu+0x1d8>
 80012e4:	4b21      	ldr	r3, [pc, #132]	; (800136c <menu+0x258>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d102      	bne.n	80012f2 <menu+0x1de>
			menuSayac = 9;
 80012ec:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <menu+0x24c>)
 80012ee:	2209      	movs	r2, #9
 80012f0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <menu+0x24c>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b0c      	cmp	r3, #12
 80012f8:	d10a      	bne.n	8001310 <menu+0x1fc>
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <menu+0x25c>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d003      	beq.n	800130a <menu+0x1f6>
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <menu+0x25c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d102      	bne.n	8001310 <menu+0x1fc>
			menuSayac = 11;
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <menu+0x24c>)
 800130c:	220b      	movs	r2, #11
 800130e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <menu+0x24c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d106      	bne.n	8001326 <menu+0x212>
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <menu+0x260>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d102      	bne.n	8001326 <menu+0x212>
			menuSayac = 14;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <menu+0x24c>)
 8001322:	220e      	movs	r2, #14
 8001324:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <menu+0x24c>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b19      	cmp	r3, #25
 800132c:	d106      	bne.n	800133c <menu+0x228>
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <menu+0x250>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <menu+0x228>
			menuSayac = 23;
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <menu+0x24c>)
 8001338:	2217      	movs	r2, #23
 800133a:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800133c:	f003 fb2a 	bl	8004994 <bekle>
	}

	if (menuSayac == 0) {
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <menu+0x24c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d133      	bne.n	80013b0 <menu+0x29c>
		if(dilSecim == 0) {
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <menu+0x268>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d121      	bne.n	8001394 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001350:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <menu+0x26c>)
 8001352:	2101      	movs	r1, #1
 8001354:	2001      	movs	r0, #1
 8001356:	e015      	b.n	8001384 <menu+0x270>
 8001358:	40010800 	.word	0x40010800
 800135c:	2000024f 	.word	0x2000024f
 8001360:	20000220 	.word	0x20000220
 8001364:	2000022f 	.word	0x2000022f
 8001368:	20000228 	.word	0x20000228
 800136c:	20000229 	.word	0x20000229
 8001370:	2000022a 	.word	0x2000022a
 8001374:	2000022b 	.word	0x2000022b
 8001378:	40011000 	.word	0x40011000
 800137c:	20000241 	.word	0x20000241
 8001380:	0800cf38 	.word	0x0800cf38
 8001384:	f006 fc26 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001388:	4a94      	ldr	r2, [pc, #592]	; (80015dc <menu+0x4c8>)
 800138a:	2101      	movs	r1, #1
 800138c:	2002      	movs	r0, #2
 800138e:	f006 fc21 	bl	8007bd4 <lcd_print>
 8001392:	e00d      	b.n	80013b0 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001394:	4b92      	ldr	r3, [pc, #584]	; (80015e0 <menu+0x4cc>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d109      	bne.n	80013b0 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 800139c:	4a91      	ldr	r2, [pc, #580]	; (80015e4 <menu+0x4d0>)
 800139e:	2101      	movs	r1, #1
 80013a0:	2001      	movs	r0, #1
 80013a2:	f006 fc17 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80013a6:	4a90      	ldr	r2, [pc, #576]	; (80015e8 <menu+0x4d4>)
 80013a8:	2101      	movs	r1, #1
 80013aa:	2002      	movs	r0, #2
 80013ac:	f006 fc12 	bl	8007bd4 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80013b0:	4b8e      	ldr	r3, [pc, #568]	; (80015ec <menu+0x4d8>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	f040 82b5 	bne.w	8001924 <menu+0x810>
		if(dilSecim == 0) {
 80013ba:	4b89      	ldr	r3, [pc, #548]	; (80015e0 <menu+0x4cc>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d105      	bne.n	80013ce <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80013c2:	4a8b      	ldr	r2, [pc, #556]	; (80015f0 <menu+0x4dc>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	2001      	movs	r0, #1
 80013c8:	f006 fc04 	bl	8007bd4 <lcd_print>
 80013cc:	e008      	b.n	80013e0 <menu+0x2cc>
		} else if(dilSecim == 1) {
 80013ce:	4b84      	ldr	r3, [pc, #528]	; (80015e0 <menu+0x4cc>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d104      	bne.n	80013e0 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80013d6:	4a87      	ldr	r2, [pc, #540]	; (80015f4 <menu+0x4e0>)
 80013d8:	2101      	movs	r1, #1
 80013da:	2001      	movs	r0, #1
 80013dc:	f006 fbfa 	bl	8007bd4 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80013e0:	4b85      	ldr	r3, [pc, #532]	; (80015f8 <menu+0x4e4>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d123      	bne.n	8001430 <menu+0x31c>
			if(dilSecim == 0) {
 80013e8:	4b7d      	ldr	r3, [pc, #500]	; (80015e0 <menu+0x4cc>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d105      	bne.n	80013fc <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80013f0:	4a82      	ldr	r2, [pc, #520]	; (80015fc <menu+0x4e8>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	2002      	movs	r0, #2
 80013f6:	f006 fbed 	bl	8007bd4 <lcd_print>
 80013fa:	e008      	b.n	800140e <menu+0x2fa>

			} else if(dilSecim == 1) {
 80013fc:	4b78      	ldr	r3, [pc, #480]	; (80015e0 <menu+0x4cc>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d104      	bne.n	800140e <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001404:	4a7e      	ldr	r2, [pc, #504]	; (8001600 <menu+0x4ec>)
 8001406:	2101      	movs	r1, #1
 8001408:	2002      	movs	r0, #2
 800140a:	f006 fbe3 	bl	8007bd4 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800140e:	4a7d      	ldr	r2, [pc, #500]	; (8001604 <menu+0x4f0>)
 8001410:	210f      	movs	r1, #15
 8001412:	2002      	movs	r0, #2
 8001414:	f006 fbde 	bl	8007bd4 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001418:	4b7b      	ldr	r3, [pc, #492]	; (8001608 <menu+0x4f4>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	220a      	movs	r2, #10
 800141e:	497b      	ldr	r1, [pc, #492]	; (800160c <menu+0x4f8>)
 8001420:	4618      	mov	r0, r3
 8001422:	f00a ff29 	bl	800c278 <itoa>
			lcd_print(2, 14, snum);
 8001426:	4a79      	ldr	r2, [pc, #484]	; (800160c <menu+0x4f8>)
 8001428:	210e      	movs	r1, #14
 800142a:	2002      	movs	r0, #2
 800142c:	f006 fbd2 	bl	8007bd4 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001430:	4b71      	ldr	r3, [pc, #452]	; (80015f8 <menu+0x4e4>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d123      	bne.n	8001480 <menu+0x36c>
			if(dilSecim == 0) {
 8001438:	4b69      	ldr	r3, [pc, #420]	; (80015e0 <menu+0x4cc>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d105      	bne.n	800144c <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001440:	4a73      	ldr	r2, [pc, #460]	; (8001610 <menu+0x4fc>)
 8001442:	2101      	movs	r1, #1
 8001444:	2002      	movs	r0, #2
 8001446:	f006 fbc5 	bl	8007bd4 <lcd_print>
 800144a:	e008      	b.n	800145e <menu+0x34a>
			} else if(dilSecim == 1) {
 800144c:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <menu+0x4cc>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d104      	bne.n	800145e <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001454:	4a6f      	ldr	r2, [pc, #444]	; (8001614 <menu+0x500>)
 8001456:	2101      	movs	r1, #1
 8001458:	2002      	movs	r0, #2
 800145a:	f006 fbbb 	bl	8007bd4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800145e:	4a6e      	ldr	r2, [pc, #440]	; (8001618 <menu+0x504>)
 8001460:	210f      	movs	r1, #15
 8001462:	2002      	movs	r0, #2
 8001464:	f006 fbb6 	bl	8007bd4 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001468:	4b6c      	ldr	r3, [pc, #432]	; (800161c <menu+0x508>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	220a      	movs	r2, #10
 800146e:	4967      	ldr	r1, [pc, #412]	; (800160c <menu+0x4f8>)
 8001470:	4618      	mov	r0, r3
 8001472:	f00a ff01 	bl	800c278 <itoa>
			lcd_print(2, 14, snum);
 8001476:	4a65      	ldr	r2, [pc, #404]	; (800160c <menu+0x4f8>)
 8001478:	210e      	movs	r1, #14
 800147a:	2002      	movs	r0, #2
 800147c:	f006 fbaa 	bl	8007bd4 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001480:	4b5d      	ldr	r3, [pc, #372]	; (80015f8 <menu+0x4e4>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d123      	bne.n	80014d0 <menu+0x3bc>
			if(dilSecim == 0) {
 8001488:	4b55      	ldr	r3, [pc, #340]	; (80015e0 <menu+0x4cc>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d105      	bne.n	800149c <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001490:	4a63      	ldr	r2, [pc, #396]	; (8001620 <menu+0x50c>)
 8001492:	2101      	movs	r1, #1
 8001494:	2002      	movs	r0, #2
 8001496:	f006 fb9d 	bl	8007bd4 <lcd_print>
 800149a:	e008      	b.n	80014ae <menu+0x39a>
			} else if(dilSecim == 1) {
 800149c:	4b50      	ldr	r3, [pc, #320]	; (80015e0 <menu+0x4cc>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d104      	bne.n	80014ae <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80014a4:	4a5f      	ldr	r2, [pc, #380]	; (8001624 <menu+0x510>)
 80014a6:	2101      	movs	r1, #1
 80014a8:	2002      	movs	r0, #2
 80014aa:	f006 fb93 	bl	8007bd4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80014ae:	4a5a      	ldr	r2, [pc, #360]	; (8001618 <menu+0x504>)
 80014b0:	210f      	movs	r1, #15
 80014b2:	2002      	movs	r0, #2
 80014b4:	f006 fb8e 	bl	8007bd4 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80014b8:	4b5b      	ldr	r3, [pc, #364]	; (8001628 <menu+0x514>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	220a      	movs	r2, #10
 80014be:	4953      	ldr	r1, [pc, #332]	; (800160c <menu+0x4f8>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00a fed9 	bl	800c278 <itoa>
			lcd_print(2, 14, snum);
 80014c6:	4a51      	ldr	r2, [pc, #324]	; (800160c <menu+0x4f8>)
 80014c8:	210e      	movs	r1, #14
 80014ca:	2002      	movs	r0, #2
 80014cc:	f006 fb82 	bl	8007bd4 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80014d0:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <menu+0x4e4>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d123      	bne.n	8001520 <menu+0x40c>
			if(dilSecim == 0) {
 80014d8:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <menu+0x4cc>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d105      	bne.n	80014ec <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80014e0:	4a52      	ldr	r2, [pc, #328]	; (800162c <menu+0x518>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	2002      	movs	r0, #2
 80014e6:	f006 fb75 	bl	8007bd4 <lcd_print>
 80014ea:	e008      	b.n	80014fe <menu+0x3ea>
			} else if(dilSecim == 1) {
 80014ec:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <menu+0x4cc>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d104      	bne.n	80014fe <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80014f4:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <menu+0x51c>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	2002      	movs	r0, #2
 80014fa:	f006 fb6b 	bl	8007bd4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80014fe:	4a46      	ldr	r2, [pc, #280]	; (8001618 <menu+0x504>)
 8001500:	210f      	movs	r1, #15
 8001502:	2002      	movs	r0, #2
 8001504:	f006 fb66 	bl	8007bd4 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001508:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <menu+0x520>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	220a      	movs	r2, #10
 800150e:	493f      	ldr	r1, [pc, #252]	; (800160c <menu+0x4f8>)
 8001510:	4618      	mov	r0, r3
 8001512:	f00a feb1 	bl	800c278 <itoa>
			lcd_print(2, 14, snum);
 8001516:	4a3d      	ldr	r2, [pc, #244]	; (800160c <menu+0x4f8>)
 8001518:	210e      	movs	r1, #14
 800151a:	2002      	movs	r0, #2
 800151c:	f006 fb5a 	bl	8007bd4 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001520:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <menu+0x4e4>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b04      	cmp	r3, #4
 8001526:	d123      	bne.n	8001570 <menu+0x45c>
			if(dilSecim == 0) {
 8001528:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <menu+0x4cc>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d105      	bne.n	800153c <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001530:	4a41      	ldr	r2, [pc, #260]	; (8001638 <menu+0x524>)
 8001532:	2101      	movs	r1, #1
 8001534:	2002      	movs	r0, #2
 8001536:	f006 fb4d 	bl	8007bd4 <lcd_print>
 800153a:	e008      	b.n	800154e <menu+0x43a>
			} else if(dilSecim == 1) {
 800153c:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <menu+0x4cc>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d104      	bne.n	800154e <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001544:	4a3d      	ldr	r2, [pc, #244]	; (800163c <menu+0x528>)
 8001546:	2101      	movs	r1, #1
 8001548:	2002      	movs	r0, #2
 800154a:	f006 fb43 	bl	8007bd4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800154e:	4a32      	ldr	r2, [pc, #200]	; (8001618 <menu+0x504>)
 8001550:	210f      	movs	r1, #15
 8001552:	2002      	movs	r0, #2
 8001554:	f006 fb3e 	bl	8007bd4 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <menu+0x52c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	220a      	movs	r2, #10
 800155e:	492b      	ldr	r1, [pc, #172]	; (800160c <menu+0x4f8>)
 8001560:	4618      	mov	r0, r3
 8001562:	f00a fe89 	bl	800c278 <itoa>
			lcd_print(2, 14, snum);
 8001566:	4a29      	ldr	r2, [pc, #164]	; (800160c <menu+0x4f8>)
 8001568:	210e      	movs	r1, #14
 800156a:	2002      	movs	r0, #2
 800156c:	f006 fb32 	bl	8007bd4 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <menu+0x4e4>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b05      	cmp	r3, #5
 8001576:	d123      	bne.n	80015c0 <menu+0x4ac>
			if(dilSecim == 0) {
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <menu+0x4cc>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d105      	bne.n	800158c <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001580:	4a30      	ldr	r2, [pc, #192]	; (8001644 <menu+0x530>)
 8001582:	2101      	movs	r1, #1
 8001584:	2002      	movs	r0, #2
 8001586:	f006 fb25 	bl	8007bd4 <lcd_print>
 800158a:	e008      	b.n	800159e <menu+0x48a>
			} else if(dilSecim == 1) {
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <menu+0x4cc>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d104      	bne.n	800159e <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001594:	4a2c      	ldr	r2, [pc, #176]	; (8001648 <menu+0x534>)
 8001596:	2101      	movs	r1, #1
 8001598:	2002      	movs	r0, #2
 800159a:	f006 fb1b 	bl	8007bd4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800159e:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <menu+0x504>)
 80015a0:	210f      	movs	r1, #15
 80015a2:	2002      	movs	r0, #2
 80015a4:	f006 fb16 	bl	8007bd4 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <menu+0x538>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	220a      	movs	r2, #10
 80015ae:	4917      	ldr	r1, [pc, #92]	; (800160c <menu+0x4f8>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00a fe61 	bl	800c278 <itoa>
			lcd_print(2, 14, snum);
 80015b6:	4a15      	ldr	r2, [pc, #84]	; (800160c <menu+0x4f8>)
 80015b8:	210e      	movs	r1, #14
 80015ba:	2002      	movs	r0, #2
 80015bc:	f006 fb0a 	bl	8007bd4 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <menu+0x4e4>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b06      	cmp	r3, #6
 80015c6:	d15f      	bne.n	8001688 <menu+0x574>
			if(dilSecim == 0) {
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <menu+0x4cc>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d141      	bne.n	8001654 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80015d0:	4a1f      	ldr	r2, [pc, #124]	; (8001650 <menu+0x53c>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	2002      	movs	r0, #2
 80015d6:	f006 fafd 	bl	8007bd4 <lcd_print>
 80015da:	e044      	b.n	8001666 <menu+0x552>
 80015dc:	0800cf4c 	.word	0x0800cf4c
 80015e0:	20000241 	.word	0x20000241
 80015e4:	0800cf60 	.word	0x0800cf60
 80015e8:	0800cf74 	.word	0x0800cf74
 80015ec:	20000220 	.word	0x20000220
 80015f0:	0800cf88 	.word	0x0800cf88
 80015f4:	0800cf9c 	.word	0x0800cf9c
 80015f8:	20000222 	.word	0x20000222
 80015fc:	0800cfb0 	.word	0x0800cfb0
 8001600:	0800cfc0 	.word	0x0800cfc0
 8001604:	0800cfd0 	.word	0x0800cfd0
 8001608:	20000242 	.word	0x20000242
 800160c:	20000188 	.word	0x20000188
 8001610:	0800cfd4 	.word	0x0800cfd4
 8001614:	0800cfe4 	.word	0x0800cfe4
 8001618:	0800cff4 	.word	0x0800cff4
 800161c:	20000243 	.word	0x20000243
 8001620:	0800cff8 	.word	0x0800cff8
 8001624:	0800d008 	.word	0x0800d008
 8001628:	20000244 	.word	0x20000244
 800162c:	0800d018 	.word	0x0800d018
 8001630:	0800d028 	.word	0x0800d028
 8001634:	20000245 	.word	0x20000245
 8001638:	0800d038 	.word	0x0800d038
 800163c:	0800d048 	.word	0x0800d048
 8001640:	20000246 	.word	0x20000246
 8001644:	0800d058 	.word	0x0800d058
 8001648:	0800d068 	.word	0x0800d068
 800164c:	20000247 	.word	0x20000247
 8001650:	0800d078 	.word	0x0800d078
			} else if(dilSecim == 1) {
 8001654:	4b4f      	ldr	r3, [pc, #316]	; (8001794 <menu+0x680>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d104      	bne.n	8001666 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 800165c:	4a4e      	ldr	r2, [pc, #312]	; (8001798 <menu+0x684>)
 800165e:	2101      	movs	r1, #1
 8001660:	2002      	movs	r0, #2
 8001662:	f006 fab7 	bl	8007bd4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001666:	4a4d      	ldr	r2, [pc, #308]	; (800179c <menu+0x688>)
 8001668:	210f      	movs	r1, #15
 800166a:	2002      	movs	r0, #2
 800166c:	f006 fab2 	bl	8007bd4 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001670:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <menu+0x68c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	220a      	movs	r2, #10
 8001676:	494b      	ldr	r1, [pc, #300]	; (80017a4 <menu+0x690>)
 8001678:	4618      	mov	r0, r3
 800167a:	f00a fdfd 	bl	800c278 <itoa>
			lcd_print(2, 14, snum);
 800167e:	4a49      	ldr	r2, [pc, #292]	; (80017a4 <menu+0x690>)
 8001680:	210e      	movs	r1, #14
 8001682:	2002      	movs	r0, #2
 8001684:	f006 faa6 	bl	8007bd4 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001688:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <menu+0x694>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b07      	cmp	r3, #7
 800168e:	d123      	bne.n	80016d8 <menu+0x5c4>
			if(dilSecim == 0) {
 8001690:	4b40      	ldr	r3, [pc, #256]	; (8001794 <menu+0x680>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001698:	4a44      	ldr	r2, [pc, #272]	; (80017ac <menu+0x698>)
 800169a:	2101      	movs	r1, #1
 800169c:	2002      	movs	r0, #2
 800169e:	f006 fa99 	bl	8007bd4 <lcd_print>
 80016a2:	e008      	b.n	80016b6 <menu+0x5a2>
			} else if(dilSecim == 1) {
 80016a4:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <menu+0x680>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d104      	bne.n	80016b6 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 80016ac:	4a40      	ldr	r2, [pc, #256]	; (80017b0 <menu+0x69c>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	2002      	movs	r0, #2
 80016b2:	f006 fa8f 	bl	8007bd4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016b6:	4a39      	ldr	r2, [pc, #228]	; (800179c <menu+0x688>)
 80016b8:	210f      	movs	r1, #15
 80016ba:	2002      	movs	r0, #2
 80016bc:	f006 fa8a 	bl	8007bd4 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80016c0:	4b3c      	ldr	r3, [pc, #240]	; (80017b4 <menu+0x6a0>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	220a      	movs	r2, #10
 80016c6:	4937      	ldr	r1, [pc, #220]	; (80017a4 <menu+0x690>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00a fdd5 	bl	800c278 <itoa>
			lcd_print(2, 14, snum);
 80016ce:	4a35      	ldr	r2, [pc, #212]	; (80017a4 <menu+0x690>)
 80016d0:	210e      	movs	r1, #14
 80016d2:	2002      	movs	r0, #2
 80016d4:	f006 fa7e 	bl	8007bd4 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80016d8:	4b33      	ldr	r3, [pc, #204]	; (80017a8 <menu+0x694>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d123      	bne.n	8001728 <menu+0x614>
			if(dilSecim == 0) {
 80016e0:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <menu+0x680>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d105      	bne.n	80016f4 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 80016e8:	4a33      	ldr	r2, [pc, #204]	; (80017b8 <menu+0x6a4>)
 80016ea:	2101      	movs	r1, #1
 80016ec:	2002      	movs	r0, #2
 80016ee:	f006 fa71 	bl	8007bd4 <lcd_print>
 80016f2:	e008      	b.n	8001706 <menu+0x5f2>
			} else if(dilSecim == 1) {
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <menu+0x680>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d104      	bne.n	8001706 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 80016fc:	4a2f      	ldr	r2, [pc, #188]	; (80017bc <menu+0x6a8>)
 80016fe:	2101      	movs	r1, #1
 8001700:	2002      	movs	r0, #2
 8001702:	f006 fa67 	bl	8007bd4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001706:	4a25      	ldr	r2, [pc, #148]	; (800179c <menu+0x688>)
 8001708:	210f      	movs	r1, #15
 800170a:	2002      	movs	r0, #2
 800170c:	f006 fa62 	bl	8007bd4 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <menu+0x6ac>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	220a      	movs	r2, #10
 8001716:	4923      	ldr	r1, [pc, #140]	; (80017a4 <menu+0x690>)
 8001718:	4618      	mov	r0, r3
 800171a:	f00a fdad 	bl	800c278 <itoa>
			lcd_print(2, 14, snum);
 800171e:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <menu+0x690>)
 8001720:	210e      	movs	r1, #14
 8001722:	2002      	movs	r0, #2
 8001724:	f006 fa56 	bl	8007bd4 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <menu+0x694>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b09      	cmp	r3, #9
 800172e:	d123      	bne.n	8001778 <menu+0x664>
			if(dilSecim == 0) {
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <menu+0x680>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001738:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <menu+0x6b0>)
 800173a:	2101      	movs	r1, #1
 800173c:	2002      	movs	r0, #2
 800173e:	f006 fa49 	bl	8007bd4 <lcd_print>
 8001742:	e008      	b.n	8001756 <menu+0x642>
			} else if(dilSecim == 1) {
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <menu+0x680>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d104      	bne.n	8001756 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 800174c:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <menu+0x6b4>)
 800174e:	2101      	movs	r1, #1
 8001750:	2002      	movs	r0, #2
 8001752:	f006 fa3f 	bl	8007bd4 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001756:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <menu+0x6b8>)
 8001758:	2110      	movs	r1, #16
 800175a:	2002      	movs	r0, #2
 800175c:	f006 fa3a 	bl	8007bd4 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <menu+0x6bc>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	220a      	movs	r2, #10
 8001766:	490f      	ldr	r1, [pc, #60]	; (80017a4 <menu+0x690>)
 8001768:	4618      	mov	r0, r3
 800176a:	f00a fd85 	bl	800c278 <itoa>
			lcd_print(2, 15, snum);
 800176e:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <menu+0x690>)
 8001770:	210f      	movs	r1, #15
 8001772:	2002      	movs	r0, #2
 8001774:	f006 fa2e 	bl	8007bd4 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <menu+0x694>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b0a      	cmp	r3, #10
 800177e:	d134      	bne.n	80017ea <menu+0x6d6>
			if(dilSecim == 0) {
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <menu+0x680>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d127      	bne.n	80017d8 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001788:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <menu+0x6c0>)
 800178a:	2101      	movs	r1, #1
 800178c:	2002      	movs	r0, #2
 800178e:	f006 fa21 	bl	8007bd4 <lcd_print>
 8001792:	e02a      	b.n	80017ea <menu+0x6d6>
 8001794:	20000241 	.word	0x20000241
 8001798:	0800d088 	.word	0x0800d088
 800179c:	0800cff4 	.word	0x0800cff4
 80017a0:	20000248 	.word	0x20000248
 80017a4:	20000188 	.word	0x20000188
 80017a8:	20000222 	.word	0x20000222
 80017ac:	0800d098 	.word	0x0800d098
 80017b0:	0800d0a8 	.word	0x0800d0a8
 80017b4:	20000249 	.word	0x20000249
 80017b8:	0800d0b8 	.word	0x0800d0b8
 80017bc:	0800d0c8 	.word	0x0800d0c8
 80017c0:	2000024a 	.word	0x2000024a
 80017c4:	0800d0d8 	.word	0x0800d0d8
 80017c8:	0800d0e8 	.word	0x0800d0e8
 80017cc:	0800d0f8 	.word	0x0800d0f8
 80017d0:	2000024b 	.word	0x2000024b
 80017d4:	0800d0fc 	.word	0x0800d0fc
			} else if(dilSecim == 1) {
 80017d8:	4b82      	ldr	r3, [pc, #520]	; (80019e4 <menu+0x8d0>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d104      	bne.n	80017ea <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 80017e0:	4a81      	ldr	r2, [pc, #516]	; (80019e8 <menu+0x8d4>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	2002      	movs	r0, #2
 80017e6:	f006 f9f5 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80017ea:	2102      	movs	r1, #2
 80017ec:	487f      	ldr	r0, [pc, #508]	; (80019ec <menu+0x8d8>)
 80017ee:	f007 fd17 	bl	8009220 <HAL_GPIO_ReadPin>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d119      	bne.n	800182c <menu+0x718>
 80017f8:	4b7d      	ldr	r3, [pc, #500]	; (80019f0 <menu+0x8dc>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	f083 0301 	eor.w	r3, r3, #1
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d012      	beq.n	800182c <menu+0x718>
 8001806:	4b7b      	ldr	r3, [pc, #492]	; (80019f4 <menu+0x8e0>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10e      	bne.n	800182c <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 800180e:	4b7a      	ldr	r3, [pc, #488]	; (80019f8 <menu+0x8e4>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b78      	ldr	r3, [pc, #480]	; (80019f8 <menu+0x8e4>)
 8001818:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800181a:	4b77      	ldr	r3, [pc, #476]	; (80019f8 <menu+0x8e4>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b0a      	cmp	r3, #10
 8001820:	d902      	bls.n	8001828 <menu+0x714>
				hataGostermeSirasi = 0;
 8001822:	4b75      	ldr	r3, [pc, #468]	; (80019f8 <menu+0x8e4>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001828:	f003 f8b4 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800182c:	2104      	movs	r1, #4
 800182e:	486f      	ldr	r0, [pc, #444]	; (80019ec <menu+0x8d8>)
 8001830:	f007 fcf6 	bl	8009220 <HAL_GPIO_ReadPin>
 8001834:	4603      	mov	r3, r0
 8001836:	2b01      	cmp	r3, #1
 8001838:	d119      	bne.n	800186e <menu+0x75a>
 800183a:	4b6d      	ldr	r3, [pc, #436]	; (80019f0 <menu+0x8dc>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	f083 0301 	eor.w	r3, r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d012      	beq.n	800186e <menu+0x75a>
 8001848:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <menu+0x8e0>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10e      	bne.n	800186e <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001850:	4b69      	ldr	r3, [pc, #420]	; (80019f8 <menu+0x8e4>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	3b01      	subs	r3, #1
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <menu+0x8e4>)
 800185a:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 800185c:	4b66      	ldr	r3, [pc, #408]	; (80019f8 <menu+0x8e4>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b0b      	cmp	r3, #11
 8001862:	d902      	bls.n	800186a <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001864:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <menu+0x8e4>)
 8001866:	220a      	movs	r2, #10
 8001868:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800186a:	f003 f893 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800186e:	2108      	movs	r1, #8
 8001870:	485e      	ldr	r0, [pc, #376]	; (80019ec <menu+0x8d8>)
 8001872:	f007 fcd5 	bl	8009220 <HAL_GPIO_ReadPin>
 8001876:	4603      	mov	r3, r0
 8001878:	2b01      	cmp	r3, #1
 800187a:	d153      	bne.n	8001924 <menu+0x810>
 800187c:	4b5c      	ldr	r3, [pc, #368]	; (80019f0 <menu+0x8dc>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d04c      	beq.n	8001924 <menu+0x810>
 800188a:	4b5b      	ldr	r3, [pc, #364]	; (80019f8 <menu+0x8e4>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b0a      	cmp	r3, #10
 8001890:	d148      	bne.n	8001924 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001892:	4b5a      	ldr	r3, [pc, #360]	; (80019fc <menu+0x8e8>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
 8001898:	4b59      	ldr	r3, [pc, #356]	; (8001a00 <menu+0x8ec>)
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80018a0:	4b58      	ldr	r3, [pc, #352]	; (8001a04 <menu+0x8f0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	4b56      	ldr	r3, [pc, #344]	; (8001a00 <menu+0x8ec>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80018ae:	4b56      	ldr	r3, [pc, #344]	; (8001a08 <menu+0x8f4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	4b52      	ldr	r3, [pc, #328]	; (8001a00 <menu+0x8ec>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <menu+0x8f8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	4b4f      	ldr	r3, [pc, #316]	; (8001a00 <menu+0x8ec>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80018ca:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <menu+0x8fc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	4b4b      	ldr	r3, [pc, #300]	; (8001a00 <menu+0x8ec>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80018d8:	4b4e      	ldr	r3, [pc, #312]	; (8001a14 <menu+0x900>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	4b48      	ldr	r3, [pc, #288]	; (8001a00 <menu+0x8ec>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80018e6:	4b4c      	ldr	r3, [pc, #304]	; (8001a18 <menu+0x904>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	4b44      	ldr	r3, [pc, #272]	; (8001a00 <menu+0x8ec>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80018f4:	4b49      	ldr	r3, [pc, #292]	; (8001a1c <menu+0x908>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <menu+0x8ec>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <menu+0x90c>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	4b3d      	ldr	r3, [pc, #244]	; (8001a00 <menu+0x8ec>)
 800190a:	2200      	movs	r2, #0
 800190c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <menu+0x910>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
 8001916:	4b3a      	ldr	r3, [pc, #232]	; (8001a00 <menu+0x8ec>)
 8001918:	2200      	movs	r2, #0
 800191a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 800191e:	4b42      	ldr	r3, [pc, #264]	; (8001a28 <menu+0x914>)
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001924:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <menu+0x918>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b02      	cmp	r3, #2
 800192a:	f040 80fc 	bne.w	8001b26 <menu+0xa12>
		if(dilSecim == 0) {
 800192e:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <menu+0x8d0>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d105      	bne.n	8001942 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001936:	4a3e      	ldr	r2, [pc, #248]	; (8001a30 <menu+0x91c>)
 8001938:	2101      	movs	r1, #1
 800193a:	2001      	movs	r0, #1
 800193c:	f006 f94a 	bl	8007bd4 <lcd_print>
 8001940:	e008      	b.n	8001954 <menu+0x840>
		} else if(dilSecim == 1) {
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <menu+0x8d0>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d104      	bne.n	8001954 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 800194a:	4a3a      	ldr	r2, [pc, #232]	; (8001a34 <menu+0x920>)
 800194c:	2101      	movs	r1, #1
 800194e:	2001      	movs	r0, #1
 8001950:	f006 f940 	bl	8007bd4 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <menu+0x8e0>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d003      	beq.n	8001964 <menu+0x850>
 800195c:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <menu+0x8e0>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d112      	bne.n	800198a <menu+0x876>
			if(dilSecim == 0) {
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <menu+0x8d0>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d105      	bne.n	8001978 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 800196c:	4a32      	ldr	r2, [pc, #200]	; (8001a38 <menu+0x924>)
 800196e:	2101      	movs	r1, #1
 8001970:	2002      	movs	r0, #2
 8001972:	f006 f92f 	bl	8007bd4 <lcd_print>
 8001976:	e008      	b.n	800198a <menu+0x876>
			} else if(dilSecim == 1) {
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <menu+0x8d0>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d104      	bne.n	800198a <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001980:	4a2e      	ldr	r2, [pc, #184]	; (8001a3c <menu+0x928>)
 8001982:	2101      	movs	r1, #1
 8001984:	2002      	movs	r0, #2
 8001986:	f006 f925 	bl	8007bd4 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 800198a:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <menu+0x92c>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d116      	bne.n	80019c0 <menu+0x8ac>
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <menu+0x8e0>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d112      	bne.n	80019c0 <menu+0x8ac>
			if(dilSecim == 0) {
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <menu+0x8d0>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 80019a2:	4a28      	ldr	r2, [pc, #160]	; (8001a44 <menu+0x930>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	2002      	movs	r0, #2
 80019a8:	f006 f914 	bl	8007bd4 <lcd_print>
 80019ac:	e008      	b.n	80019c0 <menu+0x8ac>
			} else if(dilSecim == 1) {
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <menu+0x8d0>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d104      	bne.n	80019c0 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 80019b6:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <menu+0x934>)
 80019b8:	2101      	movs	r1, #1
 80019ba:	2002      	movs	r0, #2
 80019bc:	f006 f90a 	bl	8007bd4 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 80019c0:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <menu+0x92c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d14c      	bne.n	8001a62 <menu+0x94e>
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <menu+0x8e0>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d148      	bne.n	8001a62 <menu+0x94e>
			if(dilSecim == 0) {
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <menu+0x8d0>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d13b      	bne.n	8001a50 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 80019d8:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <menu+0x938>)
 80019da:	2101      	movs	r1, #1
 80019dc:	2002      	movs	r0, #2
 80019de:	f006 f8f9 	bl	8007bd4 <lcd_print>
 80019e2:	e03e      	b.n	8001a62 <menu+0x94e>
 80019e4:	20000241 	.word	0x20000241
 80019e8:	0800d110 	.word	0x0800d110
 80019ec:	40010800 	.word	0x40010800
 80019f0:	2000024f 	.word	0x2000024f
 80019f4:	2000022f 	.word	0x2000022f
 80019f8:	20000222 	.word	0x20000222
 80019fc:	20000242 	.word	0x20000242
 8001a00:	20000118 	.word	0x20000118
 8001a04:	20000243 	.word	0x20000243
 8001a08:	20000244 	.word	0x20000244
 8001a0c:	20000245 	.word	0x20000245
 8001a10:	20000246 	.word	0x20000246
 8001a14:	20000247 	.word	0x20000247
 8001a18:	20000248 	.word	0x20000248
 8001a1c:	20000249 	.word	0x20000249
 8001a20:	2000024a 	.word	0x2000024a
 8001a24:	2000024b 	.word	0x2000024b
 8001a28:	2000024c 	.word	0x2000024c
 8001a2c:	20000220 	.word	0x20000220
 8001a30:	0800d124 	.word	0x0800d124
 8001a34:	0800d138 	.word	0x0800d138
 8001a38:	0800d14c 	.word	0x0800d14c
 8001a3c:	0800d160 	.word	0x0800d160
 8001a40:	20000221 	.word	0x20000221
 8001a44:	0800d174 	.word	0x0800d174
 8001a48:	0800d184 	.word	0x0800d184
 8001a4c:	0800d194 	.word	0x0800d194
			} else if(dilSecim == 1) {
 8001a50:	4b98      	ldr	r3, [pc, #608]	; (8001cb4 <menu+0xba0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d104      	bne.n	8001a62 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001a58:	4a97      	ldr	r2, [pc, #604]	; (8001cb8 <menu+0xba4>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f006 f8b9 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a62:	2102      	movs	r1, #2
 8001a64:	4895      	ldr	r0, [pc, #596]	; (8001cbc <menu+0xba8>)
 8001a66:	f007 fbdb 	bl	8009220 <HAL_GPIO_ReadPin>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d119      	bne.n	8001aa4 <menu+0x990>
 8001a70:	4b93      	ldr	r3, [pc, #588]	; (8001cc0 <menu+0xbac>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	f083 0301 	eor.w	r3, r3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d012      	beq.n	8001aa4 <menu+0x990>
 8001a7e:	4b91      	ldr	r3, [pc, #580]	; (8001cc4 <menu+0xbb0>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10e      	bne.n	8001aa4 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001a86:	4b90      	ldr	r3, [pc, #576]	; (8001cc8 <menu+0xbb4>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b8e      	ldr	r3, [pc, #568]	; (8001cc8 <menu+0xbb4>)
 8001a90:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001a92:	4b8d      	ldr	r3, [pc, #564]	; (8001cc8 <menu+0xbb4>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d902      	bls.n	8001aa0 <menu+0x98c>
				calismaSekli = 0;
 8001a9a:	4b8b      	ldr	r3, [pc, #556]	; (8001cc8 <menu+0xbb4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001aa0:	f002 ff78 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001aa4:	2104      	movs	r1, #4
 8001aa6:	4885      	ldr	r0, [pc, #532]	; (8001cbc <menu+0xba8>)
 8001aa8:	f007 fbba 	bl	8009220 <HAL_GPIO_ReadPin>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d119      	bne.n	8001ae6 <menu+0x9d2>
 8001ab2:	4b83      	ldr	r3, [pc, #524]	; (8001cc0 <menu+0xbac>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	f083 0301 	eor.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d012      	beq.n	8001ae6 <menu+0x9d2>
 8001ac0:	4b80      	ldr	r3, [pc, #512]	; (8001cc4 <menu+0xbb0>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10e      	bne.n	8001ae6 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001ac8:	4b7f      	ldr	r3, [pc, #508]	; (8001cc8 <menu+0xbb4>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b7d      	ldr	r3, [pc, #500]	; (8001cc8 <menu+0xbb4>)
 8001ad2:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001ad4:	4b7c      	ldr	r3, [pc, #496]	; (8001cc8 <menu+0xbb4>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <menu+0x9ce>
	    		calismaSekli = 1;
 8001adc:	4b7a      	ldr	r3, [pc, #488]	; (8001cc8 <menu+0xbb4>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001ae2:	f002 ff57 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ae6:	2108      	movs	r1, #8
 8001ae8:	4874      	ldr	r0, [pc, #464]	; (8001cbc <menu+0xba8>)
 8001aea:	f007 fb99 	bl	8009220 <HAL_GPIO_ReadPin>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d118      	bne.n	8001b26 <menu+0xa12>
 8001af4:	4b72      	ldr	r3, [pc, #456]	; (8001cc0 <menu+0xbac>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	f083 0301 	eor.w	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d011      	beq.n	8001b26 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001b02:	4b71      	ldr	r3, [pc, #452]	; (8001cc8 <menu+0xbb4>)
 8001b04:	781a      	ldrb	r2, [r3, #0]
 8001b06:	4b71      	ldr	r3, [pc, #452]	; (8001ccc <menu+0xbb8>)
 8001b08:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001b0a:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <menu+0xbb4>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d106      	bne.n	8001b20 <menu+0xa0c>
				altLimit = 1;
 8001b12:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <menu+0xbbc>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001b18:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <menu+0xbbc>)
 8001b1a:	781a      	ldrb	r2, [r3, #0]
 8001b1c:	4b6b      	ldr	r3, [pc, #428]	; (8001ccc <menu+0xbb8>)
 8001b1e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001b20:	4b6c      	ldr	r3, [pc, #432]	; (8001cd4 <menu+0xbc0>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001b26:	4b6c      	ldr	r3, [pc, #432]	; (8001cd8 <menu+0xbc4>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	f040 8083 	bne.w	8001c36 <menu+0xb22>
		if(dilSecim == 0) {
 8001b30:	4b60      	ldr	r3, [pc, #384]	; (8001cb4 <menu+0xba0>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001b38:	4a68      	ldr	r2, [pc, #416]	; (8001cdc <menu+0xbc8>)
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f006 f849 	bl	8007bd4 <lcd_print>
 8001b42:	e008      	b.n	8001b56 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001b44:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <menu+0xba0>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d104      	bne.n	8001b56 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001b4c:	4a64      	ldr	r2, [pc, #400]	; (8001ce0 <menu+0xbcc>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	2001      	movs	r0, #1
 8001b52:	f006 f83f 	bl	8007bd4 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001b56:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <menu+0xbd0>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d113      	bne.n	8001b86 <menu+0xa72>
			if(dilSecim == 0) {
 8001b5e:	4b55      	ldr	r3, [pc, #340]	; (8001cb4 <menu+0xba0>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001b66:	4a60      	ldr	r2, [pc, #384]	; (8001ce8 <menu+0xbd4>)
 8001b68:	2101      	movs	r1, #1
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	f006 f832 	bl	8007bd4 <lcd_print>
 8001b70:	e012      	b.n	8001b98 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001b72:	4b50      	ldr	r3, [pc, #320]	; (8001cb4 <menu+0xba0>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d10e      	bne.n	8001b98 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001b7a:	4a5c      	ldr	r2, [pc, #368]	; (8001cec <menu+0xbd8>)
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	2002      	movs	r0, #2
 8001b80:	f006 f828 	bl	8007bd4 <lcd_print>
 8001b84:	e008      	b.n	8001b98 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001b86:	4b57      	ldr	r3, [pc, #348]	; (8001ce4 <menu+0xbd0>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d104      	bne.n	8001b98 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001b8e:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <menu+0xbdc>)
 8001b90:	2101      	movs	r1, #1
 8001b92:	2002      	movs	r0, #2
 8001b94:	f006 f81e 	bl	8007bd4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b98:	2102      	movs	r1, #2
 8001b9a:	4848      	ldr	r0, [pc, #288]	; (8001cbc <menu+0xba8>)
 8001b9c:	f007 fb40 	bl	8009220 <HAL_GPIO_ReadPin>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d115      	bne.n	8001bd2 <menu+0xabe>
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <menu+0xbac>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	f083 0301 	eor.w	r3, r3, #1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00e      	beq.n	8001bd2 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001bb4:	4b4b      	ldr	r3, [pc, #300]	; (8001ce4 <menu+0xbd0>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	4b49      	ldr	r3, [pc, #292]	; (8001ce4 <menu+0xbd0>)
 8001bbe:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001bc0:	4b48      	ldr	r3, [pc, #288]	; (8001ce4 <menu+0xbd0>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d902      	bls.n	8001bce <menu+0xaba>
				emniyetCercevesi = 0;
 8001bc8:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <menu+0xbd0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bce:	f002 fee1 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	4839      	ldr	r0, [pc, #228]	; (8001cbc <menu+0xba8>)
 8001bd6:	f007 fb23 	bl	8009220 <HAL_GPIO_ReadPin>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d115      	bne.n	8001c0c <menu+0xaf8>
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <menu+0xbac>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	f083 0301 	eor.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00e      	beq.n	8001c0c <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <menu+0xbd0>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4b3b      	ldr	r3, [pc, #236]	; (8001ce4 <menu+0xbd0>)
 8001bf8:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <menu+0xbd0>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <menu+0xbd0>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c08:	f002 fec4 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	482b      	ldr	r0, [pc, #172]	; (8001cbc <menu+0xba8>)
 8001c10:	f007 fb06 	bl	8009220 <HAL_GPIO_ReadPin>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d10d      	bne.n	8001c36 <menu+0xb22>
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <menu+0xbac>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	f083 0301 	eor.w	r3, r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001c28:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <menu+0xbd0>)
 8001c2a:	781a      	ldrb	r2, [r3, #0]
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <menu+0xbb8>)
 8001c2e:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001c30:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <menu+0xbc0>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <menu+0xbc4>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	f040 80ba 	bne.w	8001db4 <menu+0xca0>
		if(dilSecim == 0) {
 8001c40:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <menu+0xba0>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d105      	bne.n	8001c54 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001c48:	4a2a      	ldr	r2, [pc, #168]	; (8001cf4 <menu+0xbe0>)
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f005 ffc1 	bl	8007bd4 <lcd_print>
 8001c52:	e008      	b.n	8001c66 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <menu+0xba0>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d104      	bne.n	8001c66 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001c5c:	4a26      	ldr	r2, [pc, #152]	; (8001cf8 <menu+0xbe4>)
 8001c5e:	2101      	movs	r1, #1
 8001c60:	2001      	movs	r0, #1
 8001c62:	f005 ffb7 	bl	8007bd4 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <menu+0xbe8>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d113      	bne.n	8001c96 <menu+0xb82>
			if(dilSecim == 0) {
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <menu+0xba0>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001c76:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <menu+0xbd4>)
 8001c78:	2101      	movs	r1, #1
 8001c7a:	2002      	movs	r0, #2
 8001c7c:	f005 ffaa 	bl	8007bd4 <lcd_print>
 8001c80:	e049      	b.n	8001d16 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <menu+0xba0>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d145      	bne.n	8001d16 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001c8a:	4a18      	ldr	r2, [pc, #96]	; (8001cec <menu+0xbd8>)
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	2002      	movs	r0, #2
 8001c90:	f005 ffa0 	bl	8007bd4 <lcd_print>
 8001c94:	e03f      	b.n	8001d16 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <menu+0xbe8>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d13b      	bne.n	8001d16 <menu+0xc02>
			if(dilSecim == 0) {
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <menu+0xba0>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d12e      	bne.n	8001d04 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001ca6:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <menu+0xbec>)
 8001ca8:	2101      	movs	r1, #1
 8001caa:	2002      	movs	r0, #2
 8001cac:	f005 ff92 	bl	8007bd4 <lcd_print>
 8001cb0:	e031      	b.n	8001d16 <menu+0xc02>
 8001cb2:	bf00      	nop
 8001cb4:	20000241 	.word	0x20000241
 8001cb8:	0800d1a4 	.word	0x0800d1a4
 8001cbc:	40010800 	.word	0x40010800
 8001cc0:	2000024f 	.word	0x2000024f
 8001cc4:	2000022f 	.word	0x2000022f
 8001cc8:	20000221 	.word	0x20000221
 8001ccc:	20000118 	.word	0x20000118
 8001cd0:	20000226 	.word	0x20000226
 8001cd4:	2000024c 	.word	0x2000024c
 8001cd8:	20000220 	.word	0x20000220
 8001cdc:	0800d1b4 	.word	0x0800d1b4
 8001ce0:	0800d1c8 	.word	0x0800d1c8
 8001ce4:	20000224 	.word	0x20000224
 8001ce8:	0800d1dc 	.word	0x0800d1dc
 8001cec:	0800d1f0 	.word	0x0800d1f0
 8001cf0:	0800d204 	.word	0x0800d204
 8001cf4:	0800d214 	.word	0x0800d214
 8001cf8:	0800d228 	.word	0x0800d228
 8001cfc:	20000225 	.word	0x20000225
 8001d00:	0800d23c 	.word	0x0800d23c
			} else if(dilSecim == 1) {
 8001d04:	4b92      	ldr	r3, [pc, #584]	; (8001f50 <menu+0xe3c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d104      	bne.n	8001d16 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001d0c:	4a91      	ldr	r2, [pc, #580]	; (8001f54 <menu+0xe40>)
 8001d0e:	2101      	movs	r1, #1
 8001d10:	2002      	movs	r0, #2
 8001d12:	f005 ff5f 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d16:	2102      	movs	r1, #2
 8001d18:	488f      	ldr	r0, [pc, #572]	; (8001f58 <menu+0xe44>)
 8001d1a:	f007 fa81 	bl	8009220 <HAL_GPIO_ReadPin>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d115      	bne.n	8001d50 <menu+0xc3c>
 8001d24:	4b8d      	ldr	r3, [pc, #564]	; (8001f5c <menu+0xe48>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	f083 0301 	eor.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00e      	beq.n	8001d50 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001d32:	4b8b      	ldr	r3, [pc, #556]	; (8001f60 <menu+0xe4c>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b89      	ldr	r3, [pc, #548]	; (8001f60 <menu+0xe4c>)
 8001d3c:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001d3e:	4b88      	ldr	r3, [pc, #544]	; (8001f60 <menu+0xe4c>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d902      	bls.n	8001d4c <menu+0xc38>
				yavaslamaLimit = 0;
 8001d46:	4b86      	ldr	r3, [pc, #536]	; (8001f60 <menu+0xe4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d4c:	f002 fe22 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d50:	2104      	movs	r1, #4
 8001d52:	4881      	ldr	r0, [pc, #516]	; (8001f58 <menu+0xe44>)
 8001d54:	f007 fa64 	bl	8009220 <HAL_GPIO_ReadPin>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d115      	bne.n	8001d8a <menu+0xc76>
 8001d5e:	4b7f      	ldr	r3, [pc, #508]	; (8001f5c <menu+0xe48>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	f083 0301 	eor.w	r3, r3, #1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00e      	beq.n	8001d8a <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001d6c:	4b7c      	ldr	r3, [pc, #496]	; (8001f60 <menu+0xe4c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <menu+0xe4c>)
 8001d76:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001d78:	4b79      	ldr	r3, [pc, #484]	; (8001f60 <menu+0xe4c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001d80:	4b77      	ldr	r3, [pc, #476]	; (8001f60 <menu+0xe4c>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d86:	f002 fe05 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d8a:	2108      	movs	r1, #8
 8001d8c:	4872      	ldr	r0, [pc, #456]	; (8001f58 <menu+0xe44>)
 8001d8e:	f007 fa47 	bl	8009220 <HAL_GPIO_ReadPin>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d10d      	bne.n	8001db4 <menu+0xca0>
 8001d98:	4b70      	ldr	r3, [pc, #448]	; (8001f5c <menu+0xe48>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	f083 0301 	eor.w	r3, r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001da6:	4b6e      	ldr	r3, [pc, #440]	; (8001f60 <menu+0xe4c>)
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	4b6e      	ldr	r3, [pc, #440]	; (8001f64 <menu+0xe50>)
 8001dac:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001dae:	4b6e      	ldr	r3, [pc, #440]	; (8001f68 <menu+0xe54>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001db4:	4b6d      	ldr	r3, [pc, #436]	; (8001f6c <menu+0xe58>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	f040 80b9 	bne.w	8001f30 <menu+0xe1c>
		if(dilSecim == 0) {
 8001dbe:	4b64      	ldr	r3, [pc, #400]	; (8001f50 <menu+0xe3c>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d105      	bne.n	8001dd2 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001dc6:	4a6a      	ldr	r2, [pc, #424]	; (8001f70 <menu+0xe5c>)
 8001dc8:	2101      	movs	r1, #1
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f005 ff02 	bl	8007bd4 <lcd_print>
 8001dd0:	e008      	b.n	8001de4 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001dd2:	4b5f      	ldr	r3, [pc, #380]	; (8001f50 <menu+0xe3c>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d104      	bne.n	8001de4 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001dda:	4a66      	ldr	r2, [pc, #408]	; (8001f74 <menu+0xe60>)
 8001ddc:	2101      	movs	r1, #1
 8001dde:	2001      	movs	r0, #1
 8001de0:	f005 fef8 	bl	8007bd4 <lcd_print>
		}

		if(altLimit == 0) {
 8001de4:	4b64      	ldr	r3, [pc, #400]	; (8001f78 <menu+0xe64>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d113      	bne.n	8001e14 <menu+0xd00>
			if(dilSecim == 0) {
 8001dec:	4b58      	ldr	r3, [pc, #352]	; (8001f50 <menu+0xe3c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001df4:	4a61      	ldr	r2, [pc, #388]	; (8001f7c <menu+0xe68>)
 8001df6:	2101      	movs	r1, #1
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f005 feeb 	bl	8007bd4 <lcd_print>
 8001dfe:	e020      	b.n	8001e42 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001e00:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <menu+0xe3c>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d11c      	bne.n	8001e42 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001e08:	4a5d      	ldr	r2, [pc, #372]	; (8001f80 <menu+0xe6c>)
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	f005 fee1 	bl	8007bd4 <lcd_print>
 8001e12:	e016      	b.n	8001e42 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001e14:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <menu+0xe64>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d112      	bne.n	8001e42 <menu+0xd2e>
			if(dilSecim == 0){
 8001e1c:	4b4c      	ldr	r3, [pc, #304]	; (8001f50 <menu+0xe3c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001e24:	4a57      	ldr	r2, [pc, #348]	; (8001f84 <menu+0xe70>)
 8001e26:	2101      	movs	r1, #1
 8001e28:	2002      	movs	r0, #2
 8001e2a:	f005 fed3 	bl	8007bd4 <lcd_print>
 8001e2e:	e008      	b.n	8001e42 <menu+0xd2e>
			} else if(dilSecim == 1){
 8001e30:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <menu+0xe3c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d104      	bne.n	8001e42 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001e38:	4a46      	ldr	r2, [pc, #280]	; (8001f54 <menu+0xe40>)
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	f005 fec9 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001e42:	2102      	movs	r1, #2
 8001e44:	4844      	ldr	r0, [pc, #272]	; (8001f58 <menu+0xe44>)
 8001e46:	f007 f9eb 	bl	8009220 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d119      	bne.n	8001e84 <menu+0xd70>
 8001e50:	4b42      	ldr	r3, [pc, #264]	; (8001f5c <menu+0xe48>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	f083 0301 	eor.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d012      	beq.n	8001e84 <menu+0xd70>
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	; (8001f88 <menu+0xe74>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10e      	bne.n	8001e84 <menu+0xd70>
			altLimit = altLimit + 1;
 8001e66:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <menu+0xe64>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b42      	ldr	r3, [pc, #264]	; (8001f78 <menu+0xe64>)
 8001e70:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001e72:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <menu+0xe64>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d902      	bls.n	8001e80 <menu+0xd6c>
				altLimit = 0;
 8001e7a:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <menu+0xe64>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e80:	f002 fd88 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001e84:	2104      	movs	r1, #4
 8001e86:	4834      	ldr	r0, [pc, #208]	; (8001f58 <menu+0xe44>)
 8001e88:	f007 f9ca 	bl	8009220 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d119      	bne.n	8001ec6 <menu+0xdb2>
 8001e92:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <menu+0xe48>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	f083 0301 	eor.w	r3, r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d012      	beq.n	8001ec6 <menu+0xdb2>
 8001ea0:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <menu+0xe74>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10e      	bne.n	8001ec6 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001ea8:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <menu+0xe64>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <menu+0xe64>)
 8001eb2:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001eb4:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <menu+0xe64>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <menu+0xdae>
		   		altLimit = 1;
 8001ebc:	4b2e      	ldr	r3, [pc, #184]	; (8001f78 <menu+0xe64>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ec2:	f002 fd67 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ec6:	2108      	movs	r1, #8
 8001ec8:	4823      	ldr	r0, [pc, #140]	; (8001f58 <menu+0xe44>)
 8001eca:	f007 f9a9 	bl	8009220 <HAL_GPIO_ReadPin>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d12d      	bne.n	8001f30 <menu+0xe1c>
 8001ed4:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <menu+0xe48>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	f083 0301 	eor.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d026      	beq.n	8001f30 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <menu+0xe64>)
 8001ee4:	781a      	ldrb	r2, [r3, #0]
 8001ee6:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <menu+0xe50>)
 8001ee8:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001eea:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <menu+0xe64>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d110      	bne.n	8001f14 <menu+0xe00>
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <menu+0xe78>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <menu+0xdee>
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <menu+0xe78>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d108      	bne.n	8001f14 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001f02:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <menu+0xe78>)
 8001f04:	2203      	movs	r2, #3
 8001f06:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001f08:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <menu+0xe78>)
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <menu+0xe50>)
 8001f0e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001f12:	e00a      	b.n	8001f2a <menu+0xe16>
			} else if(altLimit == 0) {
 8001f14:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <menu+0xe64>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d106      	bne.n	8001f2a <menu+0xe16>
				platformSilindirTipi = 0;
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <menu+0xe7c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <menu+0xe7c>)
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <menu+0xe50>)
 8001f28:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <menu+0xe54>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <menu+0xe58>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b06      	cmp	r3, #6
 8001f36:	f040 80b6 	bne.w	80020a6 <menu+0xf92>
		if(dilSecim == 0) {
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <menu+0xe3c>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d12a      	bne.n	8001f98 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001f42:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <menu+0xe80>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	2001      	movs	r0, #1
 8001f48:	f005 fe44 	bl	8007bd4 <lcd_print>
 8001f4c:	e02d      	b.n	8001faa <menu+0xe96>
 8001f4e:	bf00      	nop
 8001f50:	20000241 	.word	0x20000241
 8001f54:	0800d250 	.word	0x0800d250
 8001f58:	40010800 	.word	0x40010800
 8001f5c:	2000024f 	.word	0x2000024f
 8001f60:	20000225 	.word	0x20000225
 8001f64:	20000118 	.word	0x20000118
 8001f68:	2000024c 	.word	0x2000024c
 8001f6c:	20000220 	.word	0x20000220
 8001f70:	0800d264 	.word	0x0800d264
 8001f74:	0800d278 	.word	0x0800d278
 8001f78:	20000226 	.word	0x20000226
 8001f7c:	0800d1dc 	.word	0x0800d1dc
 8001f80:	0800d1f0 	.word	0x0800d1f0
 8001f84:	0800d23c 	.word	0x0800d23c
 8001f88:	20000221 	.word	0x20000221
 8001f8c:	2000022d 	.word	0x2000022d
 8001f90:	20000233 	.word	0x20000233
 8001f94:	0800d28c 	.word	0x0800d28c
		} else if(dilSecim == 1){
 8001f98:	4b7a      	ldr	r3, [pc, #488]	; (8002184 <menu+0x1070>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d104      	bne.n	8001faa <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8001fa0:	4a79      	ldr	r2, [pc, #484]	; (8002188 <menu+0x1074>)
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f005 fe15 	bl	8007bd4 <lcd_print>
		}
		if(basincSalteri == 0){
 8001faa:	4b78      	ldr	r3, [pc, #480]	; (800218c <menu+0x1078>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d113      	bne.n	8001fda <menu+0xec6>
			if(dilSecim == 0) {
 8001fb2:	4b74      	ldr	r3, [pc, #464]	; (8002184 <menu+0x1070>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d105      	bne.n	8001fc6 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001fba:	4a75      	ldr	r2, [pc, #468]	; (8002190 <menu+0x107c>)
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	2002      	movs	r0, #2
 8001fc0:	f005 fe08 	bl	8007bd4 <lcd_print>
 8001fc4:	e020      	b.n	8002008 <menu+0xef4>
			} else if(dilSecim == 1){
 8001fc6:	4b6f      	ldr	r3, [pc, #444]	; (8002184 <menu+0x1070>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d11c      	bne.n	8002008 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8001fce:	4a71      	ldr	r2, [pc, #452]	; (8002194 <menu+0x1080>)
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	2002      	movs	r0, #2
 8001fd4:	f005 fdfe 	bl	8007bd4 <lcd_print>
 8001fd8:	e016      	b.n	8002008 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8001fda:	4b6c      	ldr	r3, [pc, #432]	; (800218c <menu+0x1078>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d112      	bne.n	8002008 <menu+0xef4>
			if(dilSecim == 0) {
 8001fe2:	4b68      	ldr	r3, [pc, #416]	; (8002184 <menu+0x1070>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8001fea:	4a6b      	ldr	r2, [pc, #428]	; (8002198 <menu+0x1084>)
 8001fec:	2101      	movs	r1, #1
 8001fee:	2002      	movs	r0, #2
 8001ff0:	f005 fdf0 	bl	8007bd4 <lcd_print>
 8001ff4:	e008      	b.n	8002008 <menu+0xef4>
			} else if(dilSecim == 1) {
 8001ff6:	4b63      	ldr	r3, [pc, #396]	; (8002184 <menu+0x1070>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d104      	bne.n	8002008 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8001ffe:	4a67      	ldr	r2, [pc, #412]	; (800219c <menu+0x1088>)
 8002000:	2101      	movs	r1, #1
 8002002:	2002      	movs	r0, #2
 8002004:	f005 fde6 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002008:	2102      	movs	r1, #2
 800200a:	4865      	ldr	r0, [pc, #404]	; (80021a0 <menu+0x108c>)
 800200c:	f007 f908 	bl	8009220 <HAL_GPIO_ReadPin>
 8002010:	4603      	mov	r3, r0
 8002012:	2b01      	cmp	r3, #1
 8002014:	d115      	bne.n	8002042 <menu+0xf2e>
 8002016:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <menu+0x1090>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	f083 0301 	eor.w	r3, r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00e      	beq.n	8002042 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002024:	4b59      	ldr	r3, [pc, #356]	; (800218c <menu+0x1078>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b57      	ldr	r3, [pc, #348]	; (800218c <menu+0x1078>)
 800202e:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002030:	4b56      	ldr	r3, [pc, #344]	; (800218c <menu+0x1078>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d902      	bls.n	800203e <menu+0xf2a>
				basincSalteri = 0;
 8002038:	4b54      	ldr	r3, [pc, #336]	; (800218c <menu+0x1078>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800203e:	f002 fca9 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002042:	2104      	movs	r1, #4
 8002044:	4856      	ldr	r0, [pc, #344]	; (80021a0 <menu+0x108c>)
 8002046:	f007 f8eb 	bl	8009220 <HAL_GPIO_ReadPin>
 800204a:	4603      	mov	r3, r0
 800204c:	2b01      	cmp	r3, #1
 800204e:	d115      	bne.n	800207c <menu+0xf68>
 8002050:	4b54      	ldr	r3, [pc, #336]	; (80021a4 <menu+0x1090>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	f083 0301 	eor.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00e      	beq.n	800207c <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800205e:	4b4b      	ldr	r3, [pc, #300]	; (800218c <menu+0x1078>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	3b01      	subs	r3, #1
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b49      	ldr	r3, [pc, #292]	; (800218c <menu+0x1078>)
 8002068:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800206a:	4b48      	ldr	r3, [pc, #288]	; (800218c <menu+0x1078>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <menu+0xf64>
		   		basincSalteri = 1;
 8002072:	4b46      	ldr	r3, [pc, #280]	; (800218c <menu+0x1078>)
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002078:	f002 fc8c 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800207c:	2108      	movs	r1, #8
 800207e:	4848      	ldr	r0, [pc, #288]	; (80021a0 <menu+0x108c>)
 8002080:	f007 f8ce 	bl	8009220 <HAL_GPIO_ReadPin>
 8002084:	4603      	mov	r3, r0
 8002086:	2b01      	cmp	r3, #1
 8002088:	d10d      	bne.n	80020a6 <menu+0xf92>
 800208a:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <menu+0x1090>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f083 0301 	eor.w	r3, r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002098:	4b3c      	ldr	r3, [pc, #240]	; (800218c <menu+0x1078>)
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	4b42      	ldr	r3, [pc, #264]	; (80021a8 <menu+0x1094>)
 800209e:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80020a0:	4b42      	ldr	r3, [pc, #264]	; (80021ac <menu+0x1098>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80020a6:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <menu+0x109c>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b07      	cmp	r3, #7
 80020ac:	f040 80f5 	bne.w	800229a <menu+0x1186>
		if(dilSecim == 0) {
 80020b0:	4b34      	ldr	r3, [pc, #208]	; (8002184 <menu+0x1070>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80020b8:	4a3e      	ldr	r2, [pc, #248]	; (80021b4 <menu+0x10a0>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	2001      	movs	r0, #1
 80020be:	f005 fd89 	bl	8007bd4 <lcd_print>
 80020c2:	e008      	b.n	80020d6 <menu+0xfc2>
		} else if(dilSecim == 1){
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <menu+0x1070>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d104      	bne.n	80020d6 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80020cc:	4a3a      	ldr	r2, [pc, #232]	; (80021b8 <menu+0x10a4>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	2001      	movs	r0, #1
 80020d2:	f005 fd7f 	bl	8007bd4 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80020d6:	4b39      	ldr	r3, [pc, #228]	; (80021bc <menu+0x10a8>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d113      	bne.n	8002106 <menu+0xff2>
			if(dilSecim == 0) {
 80020de:	4b29      	ldr	r3, [pc, #164]	; (8002184 <menu+0x1070>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80020e6:	4a2a      	ldr	r2, [pc, #168]	; (8002190 <menu+0x107c>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	2002      	movs	r0, #2
 80020ec:	f005 fd72 	bl	8007bd4 <lcd_print>
 80020f0:	e079      	b.n	80021e6 <menu+0x10d2>
			} else if(dilSecim == 1){
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <menu+0x1070>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d175      	bne.n	80021e6 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80020fa:	4a26      	ldr	r2, [pc, #152]	; (8002194 <menu+0x1080>)
 80020fc:	2101      	movs	r1, #1
 80020fe:	2002      	movs	r0, #2
 8002100:	f005 fd68 	bl	8007bd4 <lcd_print>
 8002104:	e06f      	b.n	80021e6 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002106:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <menu+0x10a8>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d113      	bne.n	8002136 <menu+0x1022>
			if(dilSecim == 0) {
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <menu+0x1070>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d105      	bne.n	8002122 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002116:	4a2a      	ldr	r2, [pc, #168]	; (80021c0 <menu+0x10ac>)
 8002118:	2101      	movs	r1, #1
 800211a:	2002      	movs	r0, #2
 800211c:	f005 fd5a 	bl	8007bd4 <lcd_print>
 8002120:	e061      	b.n	80021e6 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <menu+0x1070>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d15d      	bne.n	80021e6 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800212a:	4a26      	ldr	r2, [pc, #152]	; (80021c4 <menu+0x10b0>)
 800212c:	2101      	movs	r1, #1
 800212e:	2002      	movs	r0, #2
 8002130:	f005 fd50 	bl	8007bd4 <lcd_print>
 8002134:	e057      	b.n	80021e6 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002136:	4b21      	ldr	r3, [pc, #132]	; (80021bc <menu+0x10a8>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d113      	bne.n	8002166 <menu+0x1052>
			if(dilSecim == 0) {
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <menu+0x1070>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d105      	bne.n	8002152 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002146:	4a20      	ldr	r2, [pc, #128]	; (80021c8 <menu+0x10b4>)
 8002148:	2101      	movs	r1, #1
 800214a:	2002      	movs	r0, #2
 800214c:	f005 fd42 	bl	8007bd4 <lcd_print>
 8002150:	e049      	b.n	80021e6 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <menu+0x1070>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d145      	bne.n	80021e6 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800215a:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <menu+0x10b8>)
 800215c:	2101      	movs	r1, #1
 800215e:	2002      	movs	r0, #2
 8002160:	f005 fd38 	bl	8007bd4 <lcd_print>
 8002164:	e03f      	b.n	80021e6 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <menu+0x10a8>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d13b      	bne.n	80021e6 <menu+0x10d2>
			if(dilSecim == 0) {
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <menu+0x1070>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d12e      	bne.n	80021d4 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002176:	4a16      	ldr	r2, [pc, #88]	; (80021d0 <menu+0x10bc>)
 8002178:	2101      	movs	r1, #1
 800217a:	2002      	movs	r0, #2
 800217c:	f005 fd2a 	bl	8007bd4 <lcd_print>
 8002180:	e031      	b.n	80021e6 <menu+0x10d2>
 8002182:	bf00      	nop
 8002184:	20000241 	.word	0x20000241
 8002188:	0800d29c 	.word	0x0800d29c
 800218c:	20000227 	.word	0x20000227
 8002190:	0800d1dc 	.word	0x0800d1dc
 8002194:	0800d1f0 	.word	0x0800d1f0
 8002198:	0800d23c 	.word	0x0800d23c
 800219c:	0800d250 	.word	0x0800d250
 80021a0:	40010800 	.word	0x40010800
 80021a4:	2000024f 	.word	0x2000024f
 80021a8:	20000118 	.word	0x20000118
 80021ac:	2000024c 	.word	0x2000024c
 80021b0:	20000220 	.word	0x20000220
 80021b4:	0800d2ac 	.word	0x0800d2ac
 80021b8:	0800d2c0 	.word	0x0800d2c0
 80021bc:	20000228 	.word	0x20000228
 80021c0:	0800d2d4 	.word	0x0800d2d4
 80021c4:	0800d2e8 	.word	0x0800d2e8
 80021c8:	0800d2fc 	.word	0x0800d2fc
 80021cc:	0800d310 	.word	0x0800d310
 80021d0:	0800d324 	.word	0x0800d324
			} else if(dilSecim == 1){
 80021d4:	4b99      	ldr	r3, [pc, #612]	; (800243c <menu+0x1328>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d104      	bne.n	80021e6 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80021dc:	4a98      	ldr	r2, [pc, #608]	; (8002440 <menu+0x132c>)
 80021de:	2101      	movs	r1, #1
 80021e0:	2002      	movs	r0, #2
 80021e2:	f005 fcf7 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021e6:	2102      	movs	r1, #2
 80021e8:	4896      	ldr	r0, [pc, #600]	; (8002444 <menu+0x1330>)
 80021ea:	f007 f819 	bl	8009220 <HAL_GPIO_ReadPin>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d115      	bne.n	8002220 <menu+0x110c>
 80021f4:	4b94      	ldr	r3, [pc, #592]	; (8002448 <menu+0x1334>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	f083 0301 	eor.w	r3, r3, #1
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00e      	beq.n	8002220 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002202:	4b92      	ldr	r3, [pc, #584]	; (800244c <menu+0x1338>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4b90      	ldr	r3, [pc, #576]	; (800244c <menu+0x1338>)
 800220c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800220e:	4b8f      	ldr	r3, [pc, #572]	; (800244c <menu+0x1338>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d902      	bls.n	800221c <menu+0x1108>
				kapiSecimleri = 0;
 8002216:	4b8d      	ldr	r3, [pc, #564]	; (800244c <menu+0x1338>)
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800221c:	f002 fbba 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002220:	2104      	movs	r1, #4
 8002222:	4888      	ldr	r0, [pc, #544]	; (8002444 <menu+0x1330>)
 8002224:	f006 fffc 	bl	8009220 <HAL_GPIO_ReadPin>
 8002228:	4603      	mov	r3, r0
 800222a:	2b01      	cmp	r3, #1
 800222c:	d115      	bne.n	800225a <menu+0x1146>
 800222e:	4b86      	ldr	r3, [pc, #536]	; (8002448 <menu+0x1334>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	f083 0301 	eor.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00e      	beq.n	800225a <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 800223c:	4b83      	ldr	r3, [pc, #524]	; (800244c <menu+0x1338>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	3b01      	subs	r3, #1
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b81      	ldr	r3, [pc, #516]	; (800244c <menu+0x1338>)
 8002246:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002248:	4b80      	ldr	r3, [pc, #512]	; (800244c <menu+0x1338>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d902      	bls.n	8002256 <menu+0x1142>
		   		kapiSecimleri = 3;
 8002250:	4b7e      	ldr	r3, [pc, #504]	; (800244c <menu+0x1338>)
 8002252:	2203      	movs	r2, #3
 8002254:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002256:	f002 fb9d 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800225a:	2108      	movs	r1, #8
 800225c:	4879      	ldr	r0, [pc, #484]	; (8002444 <menu+0x1330>)
 800225e:	f006 ffdf 	bl	8009220 <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b01      	cmp	r3, #1
 8002266:	d118      	bne.n	800229a <menu+0x1186>
 8002268:	4b77      	ldr	r3, [pc, #476]	; (8002448 <menu+0x1334>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f083 0301 	eor.w	r3, r3, #1
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d011      	beq.n	800229a <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002276:	4b75      	ldr	r3, [pc, #468]	; (800244c <menu+0x1338>)
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	4b75      	ldr	r3, [pc, #468]	; (8002450 <menu+0x133c>)
 800227c:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800227e:	4b73      	ldr	r3, [pc, #460]	; (800244c <menu+0x1338>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d006      	beq.n	8002294 <menu+0x1180>
				altLimit = 1;
 8002286:	4b73      	ldr	r3, [pc, #460]	; (8002454 <menu+0x1340>)
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800228c:	4b71      	ldr	r3, [pc, #452]	; (8002454 <menu+0x1340>)
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	4b6f      	ldr	r3, [pc, #444]	; (8002450 <menu+0x133c>)
 8002292:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002294:	4b70      	ldr	r3, [pc, #448]	; (8002458 <menu+0x1344>)
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800229a:	4b70      	ldr	r3, [pc, #448]	; (800245c <menu+0x1348>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b08      	cmp	r3, #8
 80022a0:	f040 8092 	bne.w	80023c8 <menu+0x12b4>
		if(dilSecim == 0) {
 80022a4:	4b65      	ldr	r3, [pc, #404]	; (800243c <menu+0x1328>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80022ac:	4a6c      	ldr	r2, [pc, #432]	; (8002460 <menu+0x134c>)
 80022ae:	2101      	movs	r1, #1
 80022b0:	2001      	movs	r0, #1
 80022b2:	f005 fc8f 	bl	8007bd4 <lcd_print>
 80022b6:	e008      	b.n	80022ca <menu+0x11b6>
		} else if(dilSecim == 1) {
 80022b8:	4b60      	ldr	r3, [pc, #384]	; (800243c <menu+0x1328>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d104      	bne.n	80022ca <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80022c0:	4a68      	ldr	r2, [pc, #416]	; (8002464 <menu+0x1350>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	2001      	movs	r0, #1
 80022c6:	f005 fc85 	bl	8007bd4 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80022ca:	4b67      	ldr	r3, [pc, #412]	; (8002468 <menu+0x1354>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d113      	bne.n	80022fa <menu+0x11e6>
			if(dilSecim == 0) {
 80022d2:	4b5a      	ldr	r3, [pc, #360]	; (800243c <menu+0x1328>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80022da:	4a64      	ldr	r2, [pc, #400]	; (800246c <menu+0x1358>)
 80022dc:	2101      	movs	r1, #1
 80022de:	2002      	movs	r0, #2
 80022e0:	f005 fc78 	bl	8007bd4 <lcd_print>
 80022e4:	e020      	b.n	8002328 <menu+0x1214>
			} else if(dilSecim == 1) {
 80022e6:	4b55      	ldr	r3, [pc, #340]	; (800243c <menu+0x1328>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d11c      	bne.n	8002328 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80022ee:	4a60      	ldr	r2, [pc, #384]	; (8002470 <menu+0x135c>)
 80022f0:	2101      	movs	r1, #1
 80022f2:	2002      	movs	r0, #2
 80022f4:	f005 fc6e 	bl	8007bd4 <lcd_print>
 80022f8:	e016      	b.n	8002328 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80022fa:	4b5b      	ldr	r3, [pc, #364]	; (8002468 <menu+0x1354>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d112      	bne.n	8002328 <menu+0x1214>
			if(dilSecim == 0){
 8002302:	4b4e      	ldr	r3, [pc, #312]	; (800243c <menu+0x1328>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d105      	bne.n	8002316 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800230a:	4a5a      	ldr	r2, [pc, #360]	; (8002474 <menu+0x1360>)
 800230c:	2101      	movs	r1, #1
 800230e:	2002      	movs	r0, #2
 8002310:	f005 fc60 	bl	8007bd4 <lcd_print>
 8002314:	e008      	b.n	8002328 <menu+0x1214>
			} else if(dilSecim == 1){
 8002316:	4b49      	ldr	r3, [pc, #292]	; (800243c <menu+0x1328>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d104      	bne.n	8002328 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800231e:	4a56      	ldr	r2, [pc, #344]	; (8002478 <menu+0x1364>)
 8002320:	2101      	movs	r1, #1
 8002322:	2002      	movs	r0, #2
 8002324:	f005 fc56 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002328:	2102      	movs	r1, #2
 800232a:	4846      	ldr	r0, [pc, #280]	; (8002444 <menu+0x1330>)
 800232c:	f006 ff78 	bl	8009220 <HAL_GPIO_ReadPin>
 8002330:	4603      	mov	r3, r0
 8002332:	2b01      	cmp	r3, #1
 8002334:	d115      	bne.n	8002362 <menu+0x124e>
 8002336:	4b44      	ldr	r3, [pc, #272]	; (8002448 <menu+0x1334>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f083 0301 	eor.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00e      	beq.n	8002362 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002344:	4b48      	ldr	r3, [pc, #288]	; (8002468 <menu+0x1354>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b46      	ldr	r3, [pc, #280]	; (8002468 <menu+0x1354>)
 800234e:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002350:	4b45      	ldr	r3, [pc, #276]	; (8002468 <menu+0x1354>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d902      	bls.n	800235e <menu+0x124a>
				kapiAcTipi = 0;
 8002358:	4b43      	ldr	r3, [pc, #268]	; (8002468 <menu+0x1354>)
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800235e:	f002 fb19 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002362:	2104      	movs	r1, #4
 8002364:	4837      	ldr	r0, [pc, #220]	; (8002444 <menu+0x1330>)
 8002366:	f006 ff5b 	bl	8009220 <HAL_GPIO_ReadPin>
 800236a:	4603      	mov	r3, r0
 800236c:	2b01      	cmp	r3, #1
 800236e:	d115      	bne.n	800239c <menu+0x1288>
 8002370:	4b35      	ldr	r3, [pc, #212]	; (8002448 <menu+0x1334>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00e      	beq.n	800239c <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800237e:	4b3a      	ldr	r3, [pc, #232]	; (8002468 <menu+0x1354>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	3b01      	subs	r3, #1
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <menu+0x1354>)
 8002388:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800238a:	4b37      	ldr	r3, [pc, #220]	; (8002468 <menu+0x1354>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <menu+0x1284>
		   		kapiAcTipi = 1;
 8002392:	4b35      	ldr	r3, [pc, #212]	; (8002468 <menu+0x1354>)
 8002394:	2201      	movs	r2, #1
 8002396:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002398:	f002 fafc 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800239c:	2108      	movs	r1, #8
 800239e:	4829      	ldr	r0, [pc, #164]	; (8002444 <menu+0x1330>)
 80023a0:	f006 ff3e 	bl	8009220 <HAL_GPIO_ReadPin>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d10e      	bne.n	80023c8 <menu+0x12b4>
 80023aa:	4b27      	ldr	r3, [pc, #156]	; (8002448 <menu+0x1334>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	f083 0301 	eor.w	r3, r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <menu+0x1354>)
 80023ba:	781a      	ldrb	r2, [r3, #0]
 80023bc:	4b24      	ldr	r3, [pc, #144]	; (8002450 <menu+0x133c>)
 80023be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80023c2:	4b25      	ldr	r3, [pc, #148]	; (8002458 <menu+0x1344>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <menu+0x1348>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b09      	cmp	r3, #9
 80023ce:	f040 80b9 	bne.w	8002544 <menu+0x1430>
		if(dilSecim == 0){
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <menu+0x1328>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80023da:	4a28      	ldr	r2, [pc, #160]	; (800247c <menu+0x1368>)
 80023dc:	2101      	movs	r1, #1
 80023de:	2001      	movs	r0, #1
 80023e0:	f005 fbf8 	bl	8007bd4 <lcd_print>
 80023e4:	e008      	b.n	80023f8 <menu+0x12e4>
		} else if(dilSecim == 1) {
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <menu+0x1328>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d104      	bne.n	80023f8 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80023ee:	4a24      	ldr	r2, [pc, #144]	; (8002480 <menu+0x136c>)
 80023f0:	2101      	movs	r1, #1
 80023f2:	2001      	movs	r0, #1
 80023f4:	f005 fbee 	bl	8007bd4 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80023f8:	4b22      	ldr	r3, [pc, #136]	; (8002484 <menu+0x1370>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d105      	bne.n	800240c <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002400:	4a21      	ldr	r2, [pc, #132]	; (8002488 <menu+0x1374>)
 8002402:	2101      	movs	r1, #1
 8002404:	2002      	movs	r0, #2
 8002406:	f005 fbe5 	bl	8007bd4 <lcd_print>
 800240a:	e04c      	b.n	80024a6 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <menu+0x1370>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d13f      	bne.n	8002494 <menu+0x1380>
			if(dilSecim == 0){
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <menu+0x1328>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 800241c:	4a1b      	ldr	r2, [pc, #108]	; (800248c <menu+0x1378>)
 800241e:	2101      	movs	r1, #1
 8002420:	2002      	movs	r0, #2
 8002422:	f005 fbd7 	bl	8007bd4 <lcd_print>
 8002426:	e03e      	b.n	80024a6 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <menu+0x1328>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d13a      	bne.n	80024a6 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002430:	4a17      	ldr	r2, [pc, #92]	; (8002490 <menu+0x137c>)
 8002432:	2101      	movs	r1, #1
 8002434:	2002      	movs	r0, #2
 8002436:	f005 fbcd 	bl	8007bd4 <lcd_print>
 800243a:	e034      	b.n	80024a6 <menu+0x1392>
 800243c:	20000241 	.word	0x20000241
 8002440:	0800d338 	.word	0x0800d338
 8002444:	40010800 	.word	0x40010800
 8002448:	2000024f 	.word	0x2000024f
 800244c:	20000228 	.word	0x20000228
 8002450:	20000118 	.word	0x20000118
 8002454:	20000226 	.word	0x20000226
 8002458:	2000024c 	.word	0x2000024c
 800245c:	20000220 	.word	0x20000220
 8002460:	0800d34c 	.word	0x0800d34c
 8002464:	0800d360 	.word	0x0800d360
 8002468:	2000022c 	.word	0x2000022c
 800246c:	0800d374 	.word	0x0800d374
 8002470:	0800d384 	.word	0x0800d384
 8002474:	0800d394 	.word	0x0800d394
 8002478:	0800d3a8 	.word	0x0800d3a8
 800247c:	0800d3bc 	.word	0x0800d3bc
 8002480:	0800d3d0 	.word	0x0800d3d0
 8002484:	20000229 	.word	0x20000229
 8002488:	0800d3e4 	.word	0x0800d3e4
 800248c:	0800d3f8 	.word	0x0800d3f8
 8002490:	0800d408 	.word	0x0800d408
			}
		} else if(kapi1Tip == 2) {
 8002494:	4b8a      	ldr	r3, [pc, #552]	; (80026c0 <menu+0x15ac>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d104      	bne.n	80024a6 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 800249c:	4a89      	ldr	r2, [pc, #548]	; (80026c4 <menu+0x15b0>)
 800249e:	2101      	movs	r1, #1
 80024a0:	2002      	movs	r0, #2
 80024a2:	f005 fb97 	bl	8007bd4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024a6:	2102      	movs	r1, #2
 80024a8:	4887      	ldr	r0, [pc, #540]	; (80026c8 <menu+0x15b4>)
 80024aa:	f006 feb9 	bl	8009220 <HAL_GPIO_ReadPin>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d115      	bne.n	80024e0 <menu+0x13cc>
 80024b4:	4b85      	ldr	r3, [pc, #532]	; (80026cc <menu+0x15b8>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	f083 0301 	eor.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00e      	beq.n	80024e0 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80024c2:	4b7f      	ldr	r3, [pc, #508]	; (80026c0 <menu+0x15ac>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	3301      	adds	r3, #1
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4b7d      	ldr	r3, [pc, #500]	; (80026c0 <menu+0x15ac>)
 80024cc:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80024ce:	4b7c      	ldr	r3, [pc, #496]	; (80026c0 <menu+0x15ac>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d902      	bls.n	80024dc <menu+0x13c8>
				kapi1Tip = 0;
 80024d6:	4b7a      	ldr	r3, [pc, #488]	; (80026c0 <menu+0x15ac>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024dc:	f002 fa5a 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024e0:	2104      	movs	r1, #4
 80024e2:	4879      	ldr	r0, [pc, #484]	; (80026c8 <menu+0x15b4>)
 80024e4:	f006 fe9c 	bl	8009220 <HAL_GPIO_ReadPin>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d115      	bne.n	800251a <menu+0x1406>
 80024ee:	4b77      	ldr	r3, [pc, #476]	; (80026cc <menu+0x15b8>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	f083 0301 	eor.w	r3, r3, #1
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00e      	beq.n	800251a <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80024fc:	4b70      	ldr	r3, [pc, #448]	; (80026c0 <menu+0x15ac>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	3b01      	subs	r3, #1
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b6e      	ldr	r3, [pc, #440]	; (80026c0 <menu+0x15ac>)
 8002506:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002508:	4b6d      	ldr	r3, [pc, #436]	; (80026c0 <menu+0x15ac>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d902      	bls.n	8002516 <menu+0x1402>
		   		kapi1Tip = 2;
 8002510:	4b6b      	ldr	r3, [pc, #428]	; (80026c0 <menu+0x15ac>)
 8002512:	2202      	movs	r2, #2
 8002514:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002516:	f002 fa3d 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800251a:	2108      	movs	r1, #8
 800251c:	486a      	ldr	r0, [pc, #424]	; (80026c8 <menu+0x15b4>)
 800251e:	f006 fe7f 	bl	8009220 <HAL_GPIO_ReadPin>
 8002522:	4603      	mov	r3, r0
 8002524:	2b01      	cmp	r3, #1
 8002526:	d10d      	bne.n	8002544 <menu+0x1430>
 8002528:	4b68      	ldr	r3, [pc, #416]	; (80026cc <menu+0x15b8>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	f083 0301 	eor.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d006      	beq.n	8002544 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002536:	4b62      	ldr	r3, [pc, #392]	; (80026c0 <menu+0x15ac>)
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <menu+0x15bc>)
 800253c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800253e:	4b65      	ldr	r3, [pc, #404]	; (80026d4 <menu+0x15c0>)
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002544:	4b64      	ldr	r3, [pc, #400]	; (80026d8 <menu+0x15c4>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b0a      	cmp	r3, #10
 800254a:	d17f      	bne.n	800264c <menu+0x1538>
		if(dilSecim == 0) {
 800254c:	4b63      	ldr	r3, [pc, #396]	; (80026dc <menu+0x15c8>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10a      	bne.n	800256a <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002554:	4a62      	ldr	r2, [pc, #392]	; (80026e0 <menu+0x15cc>)
 8002556:	2101      	movs	r1, #1
 8002558:	2001      	movs	r0, #1
 800255a:	f005 fb3b 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800255e:	4a61      	ldr	r2, [pc, #388]	; (80026e4 <menu+0x15d0>)
 8002560:	2101      	movs	r1, #1
 8002562:	2002      	movs	r0, #2
 8002564:	f005 fb36 	bl	8007bd4 <lcd_print>
 8002568:	e00d      	b.n	8002586 <menu+0x1472>
		} else if(dilSecim == 1) {
 800256a:	4b5c      	ldr	r3, [pc, #368]	; (80026dc <menu+0x15c8>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d109      	bne.n	8002586 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002572:	4a5d      	ldr	r2, [pc, #372]	; (80026e8 <menu+0x15d4>)
 8002574:	2101      	movs	r1, #1
 8002576:	2001      	movs	r0, #1
 8002578:	f005 fb2c 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800257c:	4a5b      	ldr	r2, [pc, #364]	; (80026ec <menu+0x15d8>)
 800257e:	2101      	movs	r1, #1
 8002580:	2002      	movs	r0, #2
 8002582:	f005 fb27 	bl	8007bd4 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002586:	4b5a      	ldr	r3, [pc, #360]	; (80026f0 <menu+0x15dc>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	220a      	movs	r2, #10
 800258c:	4959      	ldr	r1, [pc, #356]	; (80026f4 <menu+0x15e0>)
 800258e:	4618      	mov	r0, r3
 8002590:	f009 fe72 	bl	800c278 <itoa>
		lcd_print(2,16,snum);
 8002594:	4a57      	ldr	r2, [pc, #348]	; (80026f4 <menu+0x15e0>)
 8002596:	2110      	movs	r1, #16
 8002598:	2002      	movs	r0, #2
 800259a:	f005 fb1b 	bl	8007bd4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800259e:	2102      	movs	r1, #2
 80025a0:	4849      	ldr	r0, [pc, #292]	; (80026c8 <menu+0x15b4>)
 80025a2:	f006 fe3d 	bl	8009220 <HAL_GPIO_ReadPin>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d119      	bne.n	80025e0 <menu+0x14cc>
 80025ac:	4b47      	ldr	r3, [pc, #284]	; (80026cc <menu+0x15b8>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f083 0301 	eor.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d012      	beq.n	80025e0 <menu+0x14cc>
 80025ba:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <menu+0x15ac>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10e      	bne.n	80025e0 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80025c2:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <menu+0x15dc>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	3301      	adds	r3, #1
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4b49      	ldr	r3, [pc, #292]	; (80026f0 <menu+0x15dc>)
 80025cc:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80025ce:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <menu+0x15dc>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d902      	bls.n	80025dc <menu+0x14c8>
				kapi1AcSure = 0;
 80025d6:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <menu+0x15dc>)
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025dc:	f002 f9da 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80025e0:	2104      	movs	r1, #4
 80025e2:	4839      	ldr	r0, [pc, #228]	; (80026c8 <menu+0x15b4>)
 80025e4:	f006 fe1c 	bl	8009220 <HAL_GPIO_ReadPin>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d119      	bne.n	8002622 <menu+0x150e>
 80025ee:	4b37      	ldr	r3, [pc, #220]	; (80026cc <menu+0x15b8>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	f083 0301 	eor.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d012      	beq.n	8002622 <menu+0x150e>
 80025fc:	4b30      	ldr	r3, [pc, #192]	; (80026c0 <menu+0x15ac>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10e      	bne.n	8002622 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002604:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <menu+0x15dc>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	3b01      	subs	r3, #1
 800260a:	b2da      	uxtb	r2, r3
 800260c:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <menu+0x15dc>)
 800260e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002610:	4b37      	ldr	r3, [pc, #220]	; (80026f0 <menu+0x15dc>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b06      	cmp	r3, #6
 8002616:	d902      	bls.n	800261e <menu+0x150a>
		   		kapi1AcSure = 5;
 8002618:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <menu+0x15dc>)
 800261a:	2205      	movs	r2, #5
 800261c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800261e:	f002 f9b9 	bl	8004994 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002622:	2108      	movs	r1, #8
 8002624:	4828      	ldr	r0, [pc, #160]	; (80026c8 <menu+0x15b4>)
 8002626:	f006 fdfb 	bl	8009220 <HAL_GPIO_ReadPin>
 800262a:	4603      	mov	r3, r0
 800262c:	2b01      	cmp	r3, #1
 800262e:	d10d      	bne.n	800264c <menu+0x1538>
 8002630:	4b26      	ldr	r3, [pc, #152]	; (80026cc <menu+0x15b8>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	f083 0301 	eor.w	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 800263e:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <menu+0x15dc>)
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <menu+0x15bc>)
 8002644:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002646:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <menu+0x15c0>)
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 800264c:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <menu+0x15c4>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b0b      	cmp	r3, #11
 8002652:	f040 80b5 	bne.w	80027c0 <menu+0x16ac>
		if(dilSecim == 0) {
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <menu+0x15c8>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d105      	bne.n	800266a <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 800265e:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <menu+0x15e4>)
 8002660:	2101      	movs	r1, #1
 8002662:	2001      	movs	r0, #1
 8002664:	f005 fab6 	bl	8007bd4 <lcd_print>
 8002668:	e008      	b.n	800267c <menu+0x1568>
		} else if(dilSecim == 1) {
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <menu+0x15c8>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d104      	bne.n	800267c <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002672:	4a22      	ldr	r2, [pc, #136]	; (80026fc <menu+0x15e8>)
 8002674:	2101      	movs	r1, #1
 8002676:	2001      	movs	r0, #1
 8002678:	f005 faac 	bl	8007bd4 <lcd_print>
		}

		if(kapi2Tip == 0) {
 800267c:	4b20      	ldr	r3, [pc, #128]	; (8002700 <menu+0x15ec>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002684:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <menu+0x15f0>)
 8002686:	2101      	movs	r1, #1
 8002688:	2002      	movs	r0, #2
 800268a:	f005 faa3 	bl	8007bd4 <lcd_print>
 800268e:	e048      	b.n	8002722 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <menu+0x15ec>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d13b      	bne.n	8002710 <menu+0x15fc>
			if(dilSecim == 0) {
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <menu+0x15c8>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 80026a0:	4a19      	ldr	r2, [pc, #100]	; (8002708 <menu+0x15f4>)
 80026a2:	2101      	movs	r1, #1
 80026a4:	2002      	movs	r0, #2
 80026a6:	f005 fa95 	bl	8007bd4 <lcd_print>
 80026aa:	e03a      	b.n	8002722 <menu+0x160e>
			} else if(dilSecim == 1) {
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <menu+0x15c8>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d136      	bne.n	8002722 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80026b4:	4a15      	ldr	r2, [pc, #84]	; (800270c <menu+0x15f8>)
 80026b6:	2101      	movs	r1, #1
 80026b8:	2002      	movs	r0, #2
 80026ba:	f005 fa8b 	bl	8007bd4 <lcd_print>
 80026be:	e030      	b.n	8002722 <menu+0x160e>
 80026c0:	20000229 	.word	0x20000229
 80026c4:	0800d41c 	.word	0x0800d41c
 80026c8:	40010800 	.word	0x40010800
 80026cc:	2000024f 	.word	0x2000024f
 80026d0:	20000118 	.word	0x20000118
 80026d4:	2000024c 	.word	0x2000024c
 80026d8:	20000220 	.word	0x20000220
 80026dc:	20000241 	.word	0x20000241
 80026e0:	0800d42c 	.word	0x0800d42c
 80026e4:	0800d440 	.word	0x0800d440
 80026e8:	0800d450 	.word	0x0800d450
 80026ec:	0800d464 	.word	0x0800d464
 80026f0:	20000239 	.word	0x20000239
 80026f4:	20000188 	.word	0x20000188
 80026f8:	0800d474 	.word	0x0800d474
 80026fc:	0800d488 	.word	0x0800d488
 8002700:	2000022a 	.word	0x2000022a
 8002704:	0800d3e4 	.word	0x0800d3e4
 8002708:	0800d3f8 	.word	0x0800d3f8
 800270c:	0800d408 	.word	0x0800d408
			}
		} else if(kapi2Tip == 2) {
 8002710:	4b8a      	ldr	r3, [pc, #552]	; (800293c <menu+0x1828>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d104      	bne.n	8002722 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002718:	4a89      	ldr	r2, [pc, #548]	; (8002940 <menu+0x182c>)
 800271a:	2101      	movs	r1, #1
 800271c:	2002      	movs	r0, #2
 800271e:	f005 fa59 	bl	8007bd4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002722:	2102      	movs	r1, #2
 8002724:	4887      	ldr	r0, [pc, #540]	; (8002944 <menu+0x1830>)
 8002726:	f006 fd7b 	bl	8009220 <HAL_GPIO_ReadPin>
 800272a:	4603      	mov	r3, r0
 800272c:	2b01      	cmp	r3, #1
 800272e:	d115      	bne.n	800275c <menu+0x1648>
 8002730:	4b85      	ldr	r3, [pc, #532]	; (8002948 <menu+0x1834>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	f083 0301 	eor.w	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00e      	beq.n	800275c <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 800273e:	4b7f      	ldr	r3, [pc, #508]	; (800293c <menu+0x1828>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	3301      	adds	r3, #1
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4b7d      	ldr	r3, [pc, #500]	; (800293c <menu+0x1828>)
 8002748:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 800274a:	4b7c      	ldr	r3, [pc, #496]	; (800293c <menu+0x1828>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d902      	bls.n	8002758 <menu+0x1644>
				kapi2Tip = 0;
 8002752:	4b7a      	ldr	r3, [pc, #488]	; (800293c <menu+0x1828>)
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002758:	f002 f91c 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800275c:	2104      	movs	r1, #4
 800275e:	4879      	ldr	r0, [pc, #484]	; (8002944 <menu+0x1830>)
 8002760:	f006 fd5e 	bl	8009220 <HAL_GPIO_ReadPin>
 8002764:	4603      	mov	r3, r0
 8002766:	2b01      	cmp	r3, #1
 8002768:	d115      	bne.n	8002796 <menu+0x1682>
 800276a:	4b77      	ldr	r3, [pc, #476]	; (8002948 <menu+0x1834>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	f083 0301 	eor.w	r3, r3, #1
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00e      	beq.n	8002796 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002778:	4b70      	ldr	r3, [pc, #448]	; (800293c <menu+0x1828>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	3b01      	subs	r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	4b6e      	ldr	r3, [pc, #440]	; (800293c <menu+0x1828>)
 8002782:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002784:	4b6d      	ldr	r3, [pc, #436]	; (800293c <menu+0x1828>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d902      	bls.n	8002792 <menu+0x167e>
		   		kapi2Tip = 2;
 800278c:	4b6b      	ldr	r3, [pc, #428]	; (800293c <menu+0x1828>)
 800278e:	2202      	movs	r2, #2
 8002790:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002792:	f002 f8ff 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002796:	2108      	movs	r1, #8
 8002798:	486a      	ldr	r0, [pc, #424]	; (8002944 <menu+0x1830>)
 800279a:	f006 fd41 	bl	8009220 <HAL_GPIO_ReadPin>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d10d      	bne.n	80027c0 <menu+0x16ac>
 80027a4:	4b68      	ldr	r3, [pc, #416]	; (8002948 <menu+0x1834>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	f083 0301 	eor.w	r3, r3, #1
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d006      	beq.n	80027c0 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 80027b2:	4b62      	ldr	r3, [pc, #392]	; (800293c <menu+0x1828>)
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	4b65      	ldr	r3, [pc, #404]	; (800294c <menu+0x1838>)
 80027b8:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80027ba:	4b65      	ldr	r3, [pc, #404]	; (8002950 <menu+0x183c>)
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80027c0:	4b64      	ldr	r3, [pc, #400]	; (8002954 <menu+0x1840>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d17f      	bne.n	80028c8 <menu+0x17b4>
		if(dilSecim == 0) {
 80027c8:	4b63      	ldr	r3, [pc, #396]	; (8002958 <menu+0x1844>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 80027d0:	4a62      	ldr	r2, [pc, #392]	; (800295c <menu+0x1848>)
 80027d2:	2101      	movs	r1, #1
 80027d4:	2001      	movs	r0, #1
 80027d6:	f005 f9fd 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80027da:	4a61      	ldr	r2, [pc, #388]	; (8002960 <menu+0x184c>)
 80027dc:	2101      	movs	r1, #1
 80027de:	2002      	movs	r0, #2
 80027e0:	f005 f9f8 	bl	8007bd4 <lcd_print>
 80027e4:	e00d      	b.n	8002802 <menu+0x16ee>
		} else if(dilSecim == 1) {
 80027e6:	4b5c      	ldr	r3, [pc, #368]	; (8002958 <menu+0x1844>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d109      	bne.n	8002802 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 80027ee:	4a5d      	ldr	r2, [pc, #372]	; (8002964 <menu+0x1850>)
 80027f0:	2101      	movs	r1, #1
 80027f2:	2001      	movs	r0, #1
 80027f4:	f005 f9ee 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80027f8:	4a5b      	ldr	r2, [pc, #364]	; (8002968 <menu+0x1854>)
 80027fa:	2101      	movs	r1, #1
 80027fc:	2002      	movs	r0, #2
 80027fe:	f005 f9e9 	bl	8007bd4 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002802:	4b5a      	ldr	r3, [pc, #360]	; (800296c <menu+0x1858>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	220a      	movs	r2, #10
 8002808:	4959      	ldr	r1, [pc, #356]	; (8002970 <menu+0x185c>)
 800280a:	4618      	mov	r0, r3
 800280c:	f009 fd34 	bl	800c278 <itoa>
		lcd_print(2,16,snum);
 8002810:	4a57      	ldr	r2, [pc, #348]	; (8002970 <menu+0x185c>)
 8002812:	2110      	movs	r1, #16
 8002814:	2002      	movs	r0, #2
 8002816:	f005 f9dd 	bl	8007bd4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800281a:	2102      	movs	r1, #2
 800281c:	4849      	ldr	r0, [pc, #292]	; (8002944 <menu+0x1830>)
 800281e:	f006 fcff 	bl	8009220 <HAL_GPIO_ReadPin>
 8002822:	4603      	mov	r3, r0
 8002824:	2b01      	cmp	r3, #1
 8002826:	d119      	bne.n	800285c <menu+0x1748>
 8002828:	4b47      	ldr	r3, [pc, #284]	; (8002948 <menu+0x1834>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	f083 0301 	eor.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d012      	beq.n	800285c <menu+0x1748>
 8002836:	4b41      	ldr	r3, [pc, #260]	; (800293c <menu+0x1828>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10e      	bne.n	800285c <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 800283e:	4b4b      	ldr	r3, [pc, #300]	; (800296c <menu+0x1858>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	3301      	adds	r3, #1
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b49      	ldr	r3, [pc, #292]	; (800296c <menu+0x1858>)
 8002848:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 800284a:	4b48      	ldr	r3, [pc, #288]	; (800296c <menu+0x1858>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b05      	cmp	r3, #5
 8002850:	d902      	bls.n	8002858 <menu+0x1744>
				kapi2AcSure = 0;
 8002852:	4b46      	ldr	r3, [pc, #280]	; (800296c <menu+0x1858>)
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002858:	f002 f89c 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800285c:	2104      	movs	r1, #4
 800285e:	4839      	ldr	r0, [pc, #228]	; (8002944 <menu+0x1830>)
 8002860:	f006 fcde 	bl	8009220 <HAL_GPIO_ReadPin>
 8002864:	4603      	mov	r3, r0
 8002866:	2b01      	cmp	r3, #1
 8002868:	d119      	bne.n	800289e <menu+0x178a>
 800286a:	4b37      	ldr	r3, [pc, #220]	; (8002948 <menu+0x1834>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	f083 0301 	eor.w	r3, r3, #1
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d012      	beq.n	800289e <menu+0x178a>
 8002878:	4b30      	ldr	r3, [pc, #192]	; (800293c <menu+0x1828>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10e      	bne.n	800289e <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002880:	4b3a      	ldr	r3, [pc, #232]	; (800296c <menu+0x1858>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	3b01      	subs	r3, #1
 8002886:	b2da      	uxtb	r2, r3
 8002888:	4b38      	ldr	r3, [pc, #224]	; (800296c <menu+0x1858>)
 800288a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 800288c:	4b37      	ldr	r3, [pc, #220]	; (800296c <menu+0x1858>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b06      	cmp	r3, #6
 8002892:	d902      	bls.n	800289a <menu+0x1786>
		   		kapi2AcSure = 5;
 8002894:	4b35      	ldr	r3, [pc, #212]	; (800296c <menu+0x1858>)
 8002896:	2205      	movs	r2, #5
 8002898:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800289a:	f002 f87b 	bl	8004994 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800289e:	2108      	movs	r1, #8
 80028a0:	4828      	ldr	r0, [pc, #160]	; (8002944 <menu+0x1830>)
 80028a2:	f006 fcbd 	bl	8009220 <HAL_GPIO_ReadPin>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d10d      	bne.n	80028c8 <menu+0x17b4>
 80028ac:	4b26      	ldr	r3, [pc, #152]	; (8002948 <menu+0x1834>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	f083 0301 	eor.w	r3, r3, #1
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d006      	beq.n	80028c8 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 80028ba:	4b2c      	ldr	r3, [pc, #176]	; (800296c <menu+0x1858>)
 80028bc:	781a      	ldrb	r2, [r3, #0]
 80028be:	4b23      	ldr	r3, [pc, #140]	; (800294c <menu+0x1838>)
 80028c0:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <menu+0x183c>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80028c8:	4b22      	ldr	r3, [pc, #136]	; (8002954 <menu+0x1840>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b0d      	cmp	r3, #13
 80028ce:	f040 80b5 	bne.w	8002a3c <menu+0x1928>
		if(dilSecim == 0) {
 80028d2:	4b21      	ldr	r3, [pc, #132]	; (8002958 <menu+0x1844>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d105      	bne.n	80028e6 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 80028da:	4a26      	ldr	r2, [pc, #152]	; (8002974 <menu+0x1860>)
 80028dc:	2101      	movs	r1, #1
 80028de:	2001      	movs	r0, #1
 80028e0:	f005 f978 	bl	8007bd4 <lcd_print>
 80028e4:	e008      	b.n	80028f8 <menu+0x17e4>
		} else if(dilSecim == 1){
 80028e6:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <menu+0x1844>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d104      	bne.n	80028f8 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 80028ee:	4a22      	ldr	r2, [pc, #136]	; (8002978 <menu+0x1864>)
 80028f0:	2101      	movs	r1, #1
 80028f2:	2001      	movs	r0, #1
 80028f4:	f005 f96e 	bl	8007bd4 <lcd_print>
		}

		if(kapitablaTip == 0) {
 80028f8:	4b20      	ldr	r3, [pc, #128]	; (800297c <menu+0x1868>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002900:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <menu+0x186c>)
 8002902:	2101      	movs	r1, #1
 8002904:	2002      	movs	r0, #2
 8002906:	f005 f965 	bl	8007bd4 <lcd_print>
 800290a:	e048      	b.n	800299e <menu+0x188a>
		} else if(kapitablaTip == 1) {
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <menu+0x1868>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d13b      	bne.n	800298c <menu+0x1878>
			if(dilSecim == 0) {
 8002914:	4b10      	ldr	r3, [pc, #64]	; (8002958 <menu+0x1844>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d105      	bne.n	8002928 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 800291c:	4a19      	ldr	r2, [pc, #100]	; (8002984 <menu+0x1870>)
 800291e:	2101      	movs	r1, #1
 8002920:	2002      	movs	r0, #2
 8002922:	f005 f957 	bl	8007bd4 <lcd_print>
 8002926:	e03a      	b.n	800299e <menu+0x188a>
			} else if(dilSecim == 1) {
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <menu+0x1844>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d136      	bne.n	800299e <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002930:	4a15      	ldr	r2, [pc, #84]	; (8002988 <menu+0x1874>)
 8002932:	2101      	movs	r1, #1
 8002934:	2002      	movs	r0, #2
 8002936:	f005 f94d 	bl	8007bd4 <lcd_print>
 800293a:	e030      	b.n	800299e <menu+0x188a>
 800293c:	2000022a 	.word	0x2000022a
 8002940:	0800d41c 	.word	0x0800d41c
 8002944:	40010800 	.word	0x40010800
 8002948:	2000024f 	.word	0x2000024f
 800294c:	20000118 	.word	0x20000118
 8002950:	2000024c 	.word	0x2000024c
 8002954:	20000220 	.word	0x20000220
 8002958:	20000241 	.word	0x20000241
 800295c:	0800d49c 	.word	0x0800d49c
 8002960:	0800d440 	.word	0x0800d440
 8002964:	0800d4b0 	.word	0x0800d4b0
 8002968:	0800d464 	.word	0x0800d464
 800296c:	2000023a 	.word	0x2000023a
 8002970:	20000188 	.word	0x20000188
 8002974:	0800d4c4 	.word	0x0800d4c4
 8002978:	0800d4d8 	.word	0x0800d4d8
 800297c:	2000022b 	.word	0x2000022b
 8002980:	0800d3e4 	.word	0x0800d3e4
 8002984:	0800d3f8 	.word	0x0800d3f8
 8002988:	0800d408 	.word	0x0800d408
			}
		} else if(kapitablaTip == 2) {
 800298c:	4b5b      	ldr	r3, [pc, #364]	; (8002afc <menu+0x19e8>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d104      	bne.n	800299e <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002994:	4a5a      	ldr	r2, [pc, #360]	; (8002b00 <menu+0x19ec>)
 8002996:	2101      	movs	r1, #1
 8002998:	2002      	movs	r0, #2
 800299a:	f005 f91b 	bl	8007bd4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800299e:	2102      	movs	r1, #2
 80029a0:	4858      	ldr	r0, [pc, #352]	; (8002b04 <menu+0x19f0>)
 80029a2:	f006 fc3d 	bl	8009220 <HAL_GPIO_ReadPin>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d115      	bne.n	80029d8 <menu+0x18c4>
 80029ac:	4b56      	ldr	r3, [pc, #344]	; (8002b08 <menu+0x19f4>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	f083 0301 	eor.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00e      	beq.n	80029d8 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 80029ba:	4b50      	ldr	r3, [pc, #320]	; (8002afc <menu+0x19e8>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b4e      	ldr	r3, [pc, #312]	; (8002afc <menu+0x19e8>)
 80029c4:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80029c6:	4b4d      	ldr	r3, [pc, #308]	; (8002afc <menu+0x19e8>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d902      	bls.n	80029d4 <menu+0x18c0>
				kapitablaTip = 0;
 80029ce:	4b4b      	ldr	r3, [pc, #300]	; (8002afc <menu+0x19e8>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029d4:	f001 ffde 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029d8:	2104      	movs	r1, #4
 80029da:	484a      	ldr	r0, [pc, #296]	; (8002b04 <menu+0x19f0>)
 80029dc:	f006 fc20 	bl	8009220 <HAL_GPIO_ReadPin>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d115      	bne.n	8002a12 <menu+0x18fe>
 80029e6:	4b48      	ldr	r3, [pc, #288]	; (8002b08 <menu+0x19f4>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	f083 0301 	eor.w	r3, r3, #1
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00e      	beq.n	8002a12 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 80029f4:	4b41      	ldr	r3, [pc, #260]	; (8002afc <menu+0x19e8>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <menu+0x19e8>)
 80029fe:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002a00:	4b3e      	ldr	r3, [pc, #248]	; (8002afc <menu+0x19e8>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d902      	bls.n	8002a0e <menu+0x18fa>
		   		kapitablaTip = 2;
 8002a08:	4b3c      	ldr	r3, [pc, #240]	; (8002afc <menu+0x19e8>)
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a0e:	f001 ffc1 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a12:	2108      	movs	r1, #8
 8002a14:	483b      	ldr	r0, [pc, #236]	; (8002b04 <menu+0x19f0>)
 8002a16:	f006 fc03 	bl	8009220 <HAL_GPIO_ReadPin>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d10d      	bne.n	8002a3c <menu+0x1928>
 8002a20:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <menu+0x19f4>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	f083 0301 	eor.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002a2e:	4b33      	ldr	r3, [pc, #204]	; (8002afc <menu+0x19e8>)
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <menu+0x19f8>)
 8002a34:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002a36:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <menu+0x19fc>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002a3c:	4b35      	ldr	r3, [pc, #212]	; (8002b14 <menu+0x1a00>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b0e      	cmp	r3, #14
 8002a42:	f040 80f2 	bne.w	8002c2a <menu+0x1b16>
		if(dilSecim == 0) {
 8002a46:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <menu+0x1a04>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002a4e:	4a33      	ldr	r2, [pc, #204]	; (8002b1c <menu+0x1a08>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	2001      	movs	r0, #1
 8002a54:	f005 f8be 	bl	8007bd4 <lcd_print>
 8002a58:	e008      	b.n	8002a6c <menu+0x1958>
		} else if(dilSecim == 1) {
 8002a5a:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <menu+0x1a04>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d104      	bne.n	8002a6c <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002a62:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <menu+0x1a0c>)
 8002a64:	2101      	movs	r1, #1
 8002a66:	2001      	movs	r0, #1
 8002a68:	f005 f8b4 	bl	8007bd4 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002a6c:	4b2d      	ldr	r3, [pc, #180]	; (8002b24 <menu+0x1a10>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d113      	bne.n	8002a9c <menu+0x1988>
			if(dilSecim == 0){
 8002a74:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <menu+0x1a04>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002a7c:	4a2a      	ldr	r2, [pc, #168]	; (8002b28 <menu+0x1a14>)
 8002a7e:	2101      	movs	r1, #1
 8002a80:	2002      	movs	r0, #2
 8002a82:	f005 f8a7 	bl	8007bd4 <lcd_print>
 8002a86:	e071      	b.n	8002b6c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002a88:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <menu+0x1a04>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d16d      	bne.n	8002b6c <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002a90:	4a26      	ldr	r2, [pc, #152]	; (8002b2c <menu+0x1a18>)
 8002a92:	2101      	movs	r1, #1
 8002a94:	2002      	movs	r0, #2
 8002a96:	f005 f89d 	bl	8007bd4 <lcd_print>
 8002a9a:	e067      	b.n	8002b6c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002a9c:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <menu+0x1a10>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d112      	bne.n	8002aca <menu+0x19b6>
			if(dilSecim == 0){
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <menu+0x1a04>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d104      	bne.n	8002ab6 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002aac:	4a20      	ldr	r2, [pc, #128]	; (8002b30 <menu+0x1a1c>)
 8002aae:	2101      	movs	r1, #1
 8002ab0:	2002      	movs	r0, #2
 8002ab2:	f005 f88f 	bl	8007bd4 <lcd_print>
			}
			if(dilSecim == 1){
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <menu+0x1a04>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d156      	bne.n	8002b6c <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002abe:	4a1d      	ldr	r2, [pc, #116]	; (8002b34 <menu+0x1a20>)
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	2002      	movs	r0, #2
 8002ac4:	f005 f886 	bl	8007bd4 <lcd_print>
 8002ac8:	e050      	b.n	8002b6c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002aca:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <menu+0x1a10>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d136      	bne.n	8002b40 <menu+0x1a2c>
			if(dilSecim == 0){
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <menu+0x1a04>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d105      	bne.n	8002ae6 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <menu+0x1a24>)
 8002adc:	2101      	movs	r1, #1
 8002ade:	2002      	movs	r0, #2
 8002ae0:	f005 f878 	bl	8007bd4 <lcd_print>
 8002ae4:	e042      	b.n	8002b6c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <menu+0x1a04>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d13e      	bne.n	8002b6c <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002aee:	4a13      	ldr	r2, [pc, #76]	; (8002b3c <menu+0x1a28>)
 8002af0:	2101      	movs	r1, #1
 8002af2:	2002      	movs	r0, #2
 8002af4:	f005 f86e 	bl	8007bd4 <lcd_print>
 8002af8:	e038      	b.n	8002b6c <menu+0x1a58>
 8002afa:	bf00      	nop
 8002afc:	2000022b 	.word	0x2000022b
 8002b00:	0800d41c 	.word	0x0800d41c
 8002b04:	40010800 	.word	0x40010800
 8002b08:	2000024f 	.word	0x2000024f
 8002b0c:	20000118 	.word	0x20000118
 8002b10:	2000024c 	.word	0x2000024c
 8002b14:	20000220 	.word	0x20000220
 8002b18:	20000241 	.word	0x20000241
 8002b1c:	0800d4ec 	.word	0x0800d4ec
 8002b20:	0800d500 	.word	0x0800d500
 8002b24:	2000022d 	.word	0x2000022d
 8002b28:	0800d514 	.word	0x0800d514
 8002b2c:	0800d524 	.word	0x0800d524
 8002b30:	0800d534 	.word	0x0800d534
 8002b34:	0800d544 	.word	0x0800d544
 8002b38:	0800d554 	.word	0x0800d554
 8002b3c:	0800d568 	.word	0x0800d568
			}
		} else if(kapiTablaAcKonum == 3) {
 8002b40:	4b9b      	ldr	r3, [pc, #620]	; (8002db0 <menu+0x1c9c>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d111      	bne.n	8002b6c <menu+0x1a58>
			if(dilSecim == 0) {
 8002b48:	4b9a      	ldr	r3, [pc, #616]	; (8002db4 <menu+0x1ca0>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d104      	bne.n	8002b5a <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002b50:	4a99      	ldr	r2, [pc, #612]	; (8002db8 <menu+0x1ca4>)
 8002b52:	2101      	movs	r1, #1
 8002b54:	2002      	movs	r0, #2
 8002b56:	f005 f83d 	bl	8007bd4 <lcd_print>
			}
			if(dilSecim == 1) {
 8002b5a:	4b96      	ldr	r3, [pc, #600]	; (8002db4 <menu+0x1ca0>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d104      	bne.n	8002b6c <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002b62:	4a96      	ldr	r2, [pc, #600]	; (8002dbc <menu+0x1ca8>)
 8002b64:	2101      	movs	r1, #1
 8002b66:	2002      	movs	r0, #2
 8002b68:	f005 f834 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	4894      	ldr	r0, [pc, #592]	; (8002dc0 <menu+0x1cac>)
 8002b70:	f006 fb56 	bl	8009220 <HAL_GPIO_ReadPin>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d115      	bne.n	8002ba6 <menu+0x1a92>
 8002b7a:	4b92      	ldr	r3, [pc, #584]	; (8002dc4 <menu+0x1cb0>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	f083 0301 	eor.w	r3, r3, #1
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00e      	beq.n	8002ba6 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002b88:	4b89      	ldr	r3, [pc, #548]	; (8002db0 <menu+0x1c9c>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	4b87      	ldr	r3, [pc, #540]	; (8002db0 <menu+0x1c9c>)
 8002b92:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002b94:	4b86      	ldr	r3, [pc, #536]	; (8002db0 <menu+0x1c9c>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d902      	bls.n	8002ba2 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002b9c:	4b84      	ldr	r3, [pc, #528]	; (8002db0 <menu+0x1c9c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ba2:	f001 fef7 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ba6:	2104      	movs	r1, #4
 8002ba8:	4885      	ldr	r0, [pc, #532]	; (8002dc0 <menu+0x1cac>)
 8002baa:	f006 fb39 	bl	8009220 <HAL_GPIO_ReadPin>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d115      	bne.n	8002be0 <menu+0x1acc>
 8002bb4:	4b83      	ldr	r3, [pc, #524]	; (8002dc4 <menu+0x1cb0>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	f083 0301 	eor.w	r3, r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00e      	beq.n	8002be0 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002bc2:	4b7b      	ldr	r3, [pc, #492]	; (8002db0 <menu+0x1c9c>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4b79      	ldr	r3, [pc, #484]	; (8002db0 <menu+0x1c9c>)
 8002bcc:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002bce:	4b78      	ldr	r3, [pc, #480]	; (8002db0 <menu+0x1c9c>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d902      	bls.n	8002bdc <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002bd6:	4b76      	ldr	r3, [pc, #472]	; (8002db0 <menu+0x1c9c>)
 8002bd8:	2202      	movs	r2, #2
 8002bda:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bdc:	f001 feda 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002be0:	2108      	movs	r1, #8
 8002be2:	4877      	ldr	r0, [pc, #476]	; (8002dc0 <menu+0x1cac>)
 8002be4:	f006 fb1c 	bl	8009220 <HAL_GPIO_ReadPin>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d11d      	bne.n	8002c2a <menu+0x1b16>
 8002bee:	4b75      	ldr	r3, [pc, #468]	; (8002dc4 <menu+0x1cb0>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	f083 0301 	eor.w	r3, r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d016      	beq.n	8002c2a <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002bfc:	4b6c      	ldr	r3, [pc, #432]	; (8002db0 <menu+0x1c9c>)
 8002bfe:	781a      	ldrb	r2, [r3, #0]
 8002c00:	4b71      	ldr	r3, [pc, #452]	; (8002dc8 <menu+0x1cb4>)
 8002c02:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002c06:	4b6a      	ldr	r3, [pc, #424]	; (8002db0 <menu+0x1c9c>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <menu+0x1b02>
 8002c0e:	4b68      	ldr	r3, [pc, #416]	; (8002db0 <menu+0x1c9c>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d106      	bne.n	8002c24 <menu+0x1b10>
				altLimit = 1;
 8002c16:	4b6d      	ldr	r3, [pc, #436]	; (8002dcc <menu+0x1cb8>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002c1c:	4b6b      	ldr	r3, [pc, #428]	; (8002dcc <menu+0x1cb8>)
 8002c1e:	781a      	ldrb	r2, [r3, #0]
 8002c20:	4b69      	ldr	r3, [pc, #420]	; (8002dc8 <menu+0x1cb4>)
 8002c22:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002c24:	4b6a      	ldr	r3, [pc, #424]	; (8002dd0 <menu+0x1cbc>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002c2a:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <menu+0x1cc0>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b0f      	cmp	r3, #15
 8002c30:	d17f      	bne.n	8002d32 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002c32:	4b60      	ldr	r3, [pc, #384]	; (8002db4 <menu+0x1ca0>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002c3a:	4a67      	ldr	r2, [pc, #412]	; (8002dd8 <menu+0x1cc4>)
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	2001      	movs	r0, #1
 8002c40:	f004 ffc8 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002c44:	4a65      	ldr	r2, [pc, #404]	; (8002ddc <menu+0x1cc8>)
 8002c46:	2101      	movs	r1, #1
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f004 ffc3 	bl	8007bd4 <lcd_print>
 8002c4e:	e00d      	b.n	8002c6c <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002c50:	4b58      	ldr	r3, [pc, #352]	; (8002db4 <menu+0x1ca0>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d109      	bne.n	8002c6c <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002c58:	4a61      	ldr	r2, [pc, #388]	; (8002de0 <menu+0x1ccc>)
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	f004 ffb9 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002c62:	4a60      	ldr	r2, [pc, #384]	; (8002de4 <menu+0x1cd0>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	2002      	movs	r0, #2
 8002c68:	f004 ffb4 	bl	8007bd4 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002c6c:	4b5e      	ldr	r3, [pc, #376]	; (8002de8 <menu+0x1cd4>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	220a      	movs	r2, #10
 8002c72:	495e      	ldr	r1, [pc, #376]	; (8002dec <menu+0x1cd8>)
 8002c74:	4618      	mov	r0, r3
 8002c76:	f009 faff 	bl	800c278 <itoa>
		lcd_print(2,16,snum);
 8002c7a:	4a5c      	ldr	r2, [pc, #368]	; (8002dec <menu+0x1cd8>)
 8002c7c:	2110      	movs	r1, #16
 8002c7e:	2002      	movs	r0, #2
 8002c80:	f004 ffa8 	bl	8007bd4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002c84:	2102      	movs	r1, #2
 8002c86:	484e      	ldr	r0, [pc, #312]	; (8002dc0 <menu+0x1cac>)
 8002c88:	f006 faca 	bl	8009220 <HAL_GPIO_ReadPin>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d119      	bne.n	8002cc6 <menu+0x1bb2>
 8002c92:	4b4c      	ldr	r3, [pc, #304]	; (8002dc4 <menu+0x1cb0>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	f083 0301 	eor.w	r3, r3, #1
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d012      	beq.n	8002cc6 <menu+0x1bb2>
 8002ca0:	4b53      	ldr	r3, [pc, #332]	; (8002df0 <menu+0x1cdc>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10e      	bne.n	8002cc6 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002ca8:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <menu+0x1cd4>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	4b4d      	ldr	r3, [pc, #308]	; (8002de8 <menu+0x1cd4>)
 8002cb2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002cb4:	4b4c      	ldr	r3, [pc, #304]	; (8002de8 <menu+0x1cd4>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d902      	bls.n	8002cc2 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002cbc:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <menu+0x1cd4>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cc2:	f001 fe67 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002cc6:	2104      	movs	r1, #4
 8002cc8:	483d      	ldr	r0, [pc, #244]	; (8002dc0 <menu+0x1cac>)
 8002cca:	f006 faa9 	bl	8009220 <HAL_GPIO_ReadPin>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d119      	bne.n	8002d08 <menu+0x1bf4>
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <menu+0x1cb0>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	f083 0301 	eor.w	r3, r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d012      	beq.n	8002d08 <menu+0x1bf4>
 8002ce2:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <menu+0x1cdc>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10e      	bne.n	8002d08 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002cea:	4b3f      	ldr	r3, [pc, #252]	; (8002de8 <menu+0x1cd4>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4b3d      	ldr	r3, [pc, #244]	; (8002de8 <menu+0x1cd4>)
 8002cf4:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002cf6:	4b3c      	ldr	r3, [pc, #240]	; (8002de8 <menu+0x1cd4>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d902      	bls.n	8002d04 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002cfe:	4b3a      	ldr	r3, [pc, #232]	; (8002de8 <menu+0x1cd4>)
 8002d00:	2205      	movs	r2, #5
 8002d02:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002d04:	f001 fe46 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d08:	2108      	movs	r1, #8
 8002d0a:	482d      	ldr	r0, [pc, #180]	; (8002dc0 <menu+0x1cac>)
 8002d0c:	f006 fa88 	bl	8009220 <HAL_GPIO_ReadPin>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d10d      	bne.n	8002d32 <menu+0x1c1e>
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <menu+0x1cb0>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	f083 0301 	eor.w	r3, r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d006      	beq.n	8002d32 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002d24:	4b30      	ldr	r3, [pc, #192]	; (8002de8 <menu+0x1cd4>)
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <menu+0x1cb4>)
 8002d2a:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002d2c:	4b28      	ldr	r3, [pc, #160]	; (8002dd0 <menu+0x1cbc>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002d32:	4b28      	ldr	r3, [pc, #160]	; (8002dd4 <menu+0x1cc0>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b10      	cmp	r3, #16
 8002d38:	f040 80bc 	bne.w	8002eb4 <menu+0x1da0>
		if(dilSecim == 0) {
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <menu+0x1ca0>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002d44:	4a2b      	ldr	r2, [pc, #172]	; (8002df4 <menu+0x1ce0>)
 8002d46:	2101      	movs	r1, #1
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f004 ff43 	bl	8007bd4 <lcd_print>
 8002d4e:	e008      	b.n	8002d62 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002d50:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <menu+0x1ca0>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d104      	bne.n	8002d62 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002d58:	4a27      	ldr	r2, [pc, #156]	; (8002df8 <menu+0x1ce4>)
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	f004 ff39 	bl	8007bd4 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002d62:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <menu+0x1ce8>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d113      	bne.n	8002d92 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <menu+0x1ca0>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d105      	bne.n	8002d7e <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002d72:	4a11      	ldr	r2, [pc, #68]	; (8002db8 <menu+0x1ca4>)
 8002d74:	2101      	movs	r1, #1
 8002d76:	2002      	movs	r0, #2
 8002d78:	f004 ff2c 	bl	8007bd4 <lcd_print>
 8002d7c:	e04b      	b.n	8002e16 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <menu+0x1ca0>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d147      	bne.n	8002e16 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002d86:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <menu+0x1ca8>)
 8002d88:	2101      	movs	r1, #1
 8002d8a:	2002      	movs	r0, #2
 8002d8c:	f004 ff22 	bl	8007bd4 <lcd_print>
 8002d90:	e041      	b.n	8002e16 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002d92:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <menu+0x1ce8>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d13d      	bne.n	8002e16 <menu+0x1d02>
			if(dilSecim == 0) {
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <menu+0x1ca0>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d130      	bne.n	8002e04 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002da2:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <menu+0x1cec>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	2002      	movs	r0, #2
 8002da8:	f004 ff14 	bl	8007bd4 <lcd_print>
 8002dac:	e033      	b.n	8002e16 <menu+0x1d02>
 8002dae:	bf00      	nop
 8002db0:	2000022d 	.word	0x2000022d
 8002db4:	20000241 	.word	0x20000241
 8002db8:	0800d1dc 	.word	0x0800d1dc
 8002dbc:	0800d1f0 	.word	0x0800d1f0
 8002dc0:	40010800 	.word	0x40010800
 8002dc4:	2000024f 	.word	0x2000024f
 8002dc8:	20000118 	.word	0x20000118
 8002dcc:	20000226 	.word	0x20000226
 8002dd0:	2000024c 	.word	0x2000024c
 8002dd4:	20000220 	.word	0x20000220
 8002dd8:	0800d57c 	.word	0x0800d57c
 8002ddc:	0800d440 	.word	0x0800d440
 8002de0:	0800d590 	.word	0x0800d590
 8002de4:	0800d464 	.word	0x0800d464
 8002de8:	2000023b 	.word	0x2000023b
 8002dec:	20000188 	.word	0x20000188
 8002df0:	2000022b 	.word	0x2000022b
 8002df4:	0800d5a4 	.word	0x0800d5a4
 8002df8:	0800d5b8 	.word	0x0800d5b8
 8002dfc:	2000022e 	.word	0x2000022e
 8002e00:	0800d23c 	.word	0x0800d23c
			} else if(dilSecim == 1) {
 8002e04:	4b99      	ldr	r3, [pc, #612]	; (800306c <menu+0x1f58>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d104      	bne.n	8002e16 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002e0c:	4a98      	ldr	r2, [pc, #608]	; (8003070 <menu+0x1f5c>)
 8002e0e:	2101      	movs	r1, #1
 8002e10:	2002      	movs	r0, #2
 8002e12:	f004 fedf 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e16:	2102      	movs	r1, #2
 8002e18:	4896      	ldr	r0, [pc, #600]	; (8003074 <menu+0x1f60>)
 8002e1a:	f006 fa01 	bl	8009220 <HAL_GPIO_ReadPin>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d115      	bne.n	8002e50 <menu+0x1d3c>
 8002e24:	4b94      	ldr	r3, [pc, #592]	; (8003078 <menu+0x1f64>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	f083 0301 	eor.w	r3, r3, #1
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00e      	beq.n	8002e50 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002e32:	4b92      	ldr	r3, [pc, #584]	; (800307c <menu+0x1f68>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	3301      	adds	r3, #1
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b90      	ldr	r3, [pc, #576]	; (800307c <menu+0x1f68>)
 8002e3c:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002e3e:	4b8f      	ldr	r3, [pc, #572]	; (800307c <menu+0x1f68>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d902      	bls.n	8002e4c <menu+0x1d38>
				yukariYavasLimit = 0;
 8002e46:	4b8d      	ldr	r3, [pc, #564]	; (800307c <menu+0x1f68>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e4c:	f001 fda2 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e50:	2104      	movs	r1, #4
 8002e52:	4888      	ldr	r0, [pc, #544]	; (8003074 <menu+0x1f60>)
 8002e54:	f006 f9e4 	bl	8009220 <HAL_GPIO_ReadPin>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d115      	bne.n	8002e8a <menu+0x1d76>
 8002e5e:	4b86      	ldr	r3, [pc, #536]	; (8003078 <menu+0x1f64>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	f083 0301 	eor.w	r3, r3, #1
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00e      	beq.n	8002e8a <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002e6c:	4b83      	ldr	r3, [pc, #524]	; (800307c <menu+0x1f68>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	4b81      	ldr	r3, [pc, #516]	; (800307c <menu+0x1f68>)
 8002e76:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002e78:	4b80      	ldr	r3, [pc, #512]	; (800307c <menu+0x1f68>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002e80:	4b7e      	ldr	r3, [pc, #504]	; (800307c <menu+0x1f68>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e86:	f001 fd85 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e8a:	2108      	movs	r1, #8
 8002e8c:	4879      	ldr	r0, [pc, #484]	; (8003074 <menu+0x1f60>)
 8002e8e:	f006 f9c7 	bl	8009220 <HAL_GPIO_ReadPin>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d10d      	bne.n	8002eb4 <menu+0x1da0>
 8002e98:	4b77      	ldr	r3, [pc, #476]	; (8003078 <menu+0x1f64>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	f083 0301 	eor.w	r3, r3, #1
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d006      	beq.n	8002eb4 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002ea6:	4b75      	ldr	r3, [pc, #468]	; (800307c <menu+0x1f68>)
 8002ea8:	781a      	ldrb	r2, [r3, #0]
 8002eaa:	4b75      	ldr	r3, [pc, #468]	; (8003080 <menu+0x1f6c>)
 8002eac:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002eae:	4b75      	ldr	r3, [pc, #468]	; (8003084 <menu+0x1f70>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002eb4:	4b74      	ldr	r3, [pc, #464]	; (8003088 <menu+0x1f74>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b11      	cmp	r3, #17
 8002eba:	f040 80c3 	bne.w	8003044 <menu+0x1f30>
		if(dilSecim == 0) {
 8002ebe:	4b6b      	ldr	r3, [pc, #428]	; (800306c <menu+0x1f58>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002ec6:	4a71      	ldr	r2, [pc, #452]	; (800308c <menu+0x1f78>)
 8002ec8:	2101      	movs	r1, #1
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f004 fe82 	bl	8007bd4 <lcd_print>
 8002ed0:	e008      	b.n	8002ee4 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002ed2:	4b66      	ldr	r3, [pc, #408]	; (800306c <menu+0x1f58>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d104      	bne.n	8002ee4 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002eda:	4a6d      	ldr	r2, [pc, #436]	; (8003090 <menu+0x1f7c>)
 8002edc:	2101      	movs	r1, #1
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f004 fe78 	bl	8007bd4 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002ee4:	4b6b      	ldr	r3, [pc, #428]	; (8003094 <menu+0x1f80>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d113      	bne.n	8002f14 <menu+0x1e00>
			if(dilSecim == 0){
 8002eec:	4b5f      	ldr	r3, [pc, #380]	; (800306c <menu+0x1f58>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002ef4:	4a68      	ldr	r2, [pc, #416]	; (8003098 <menu+0x1f84>)
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	2002      	movs	r0, #2
 8002efa:	f004 fe6b 	bl	8007bd4 <lcd_print>
 8002efe:	e038      	b.n	8002f72 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002f00:	4b5a      	ldr	r3, [pc, #360]	; (800306c <menu+0x1f58>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d134      	bne.n	8002f72 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002f08:	4a64      	ldr	r2, [pc, #400]	; (800309c <menu+0x1f88>)
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	2002      	movs	r0, #2
 8002f0e:	f004 fe61 	bl	8007bd4 <lcd_print>
 8002f12:	e02e      	b.n	8002f72 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002f14:	4b5f      	ldr	r3, [pc, #380]	; (8003094 <menu+0x1f80>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d113      	bne.n	8002f44 <menu+0x1e30>
			if(dilSecim == 0){
 8002f1c:	4b53      	ldr	r3, [pc, #332]	; (800306c <menu+0x1f58>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002f24:	4a5e      	ldr	r2, [pc, #376]	; (80030a0 <menu+0x1f8c>)
 8002f26:	2101      	movs	r1, #1
 8002f28:	2002      	movs	r0, #2
 8002f2a:	f004 fe53 	bl	8007bd4 <lcd_print>
 8002f2e:	e020      	b.n	8002f72 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002f30:	4b4e      	ldr	r3, [pc, #312]	; (800306c <menu+0x1f58>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d11c      	bne.n	8002f72 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002f38:	4a5a      	ldr	r2, [pc, #360]	; (80030a4 <menu+0x1f90>)
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	f004 fe49 	bl	8007bd4 <lcd_print>
 8002f42:	e016      	b.n	8002f72 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002f44:	4b53      	ldr	r3, [pc, #332]	; (8003094 <menu+0x1f80>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d112      	bne.n	8002f72 <menu+0x1e5e>
			if(dilSecim == 0) {
 8002f4c:	4b47      	ldr	r3, [pc, #284]	; (800306c <menu+0x1f58>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002f54:	4a54      	ldr	r2, [pc, #336]	; (80030a8 <menu+0x1f94>)
 8002f56:	2101      	movs	r1, #1
 8002f58:	2002      	movs	r0, #2
 8002f5a:	f004 fe3b 	bl	8007bd4 <lcd_print>
 8002f5e:	e008      	b.n	8002f72 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002f60:	4b42      	ldr	r3, [pc, #264]	; (800306c <menu+0x1f58>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d104      	bne.n	8002f72 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002f68:	4a50      	ldr	r2, [pc, #320]	; (80030ac <menu+0x1f98>)
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	2002      	movs	r0, #2
 8002f6e:	f004 fe31 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f72:	2102      	movs	r1, #2
 8002f74:	483f      	ldr	r0, [pc, #252]	; (8003074 <menu+0x1f60>)
 8002f76:	f006 f953 	bl	8009220 <HAL_GPIO_ReadPin>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d115      	bne.n	8002fac <menu+0x1e98>
 8002f80:	4b3d      	ldr	r3, [pc, #244]	; (8003078 <menu+0x1f64>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	f083 0301 	eor.w	r3, r3, #1
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00e      	beq.n	8002fac <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002f8e:	4b41      	ldr	r3, [pc, #260]	; (8003094 <menu+0x1f80>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	3301      	adds	r3, #1
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <menu+0x1f80>)
 8002f98:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002f9a:	4b3e      	ldr	r3, [pc, #248]	; (8003094 <menu+0x1f80>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d902      	bls.n	8002fa8 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8002fa2:	4b3c      	ldr	r3, [pc, #240]	; (8003094 <menu+0x1f80>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fa8:	f001 fcf4 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fac:	2104      	movs	r1, #4
 8002fae:	4831      	ldr	r0, [pc, #196]	; (8003074 <menu+0x1f60>)
 8002fb0:	f006 f936 	bl	8009220 <HAL_GPIO_ReadPin>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d115      	bne.n	8002fe6 <menu+0x1ed2>
 8002fba:	4b2f      	ldr	r3, [pc, #188]	; (8003078 <menu+0x1f64>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	f083 0301 	eor.w	r3, r3, #1
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00e      	beq.n	8002fe6 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002fc8:	4b32      	ldr	r3, [pc, #200]	; (8003094 <menu+0x1f80>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	4b30      	ldr	r3, [pc, #192]	; (8003094 <menu+0x1f80>)
 8002fd2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002fd4:	4b2f      	ldr	r3, [pc, #188]	; (8003094 <menu+0x1f80>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d902      	bls.n	8002fe2 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <menu+0x1f80>)
 8002fde:	2202      	movs	r2, #2
 8002fe0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fe2:	f001 fcd7 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fe6:	2108      	movs	r1, #8
 8002fe8:	4822      	ldr	r0, [pc, #136]	; (8003074 <menu+0x1f60>)
 8002fea:	f006 f919 	bl	8009220 <HAL_GPIO_ReadPin>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d127      	bne.n	8003044 <menu+0x1f30>
 8002ff4:	4b20      	ldr	r3, [pc, #128]	; (8003078 <menu+0x1f64>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	f083 0301 	eor.w	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d020      	beq.n	8003044 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003002:	4b24      	ldr	r3, [pc, #144]	; (8003094 <menu+0x1f80>)
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <menu+0x1f6c>)
 8003008:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800300a:	4b22      	ldr	r3, [pc, #136]	; (8003094 <menu+0x1f80>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d003      	beq.n	800301a <menu+0x1f06>
 8003012:	4b20      	ldr	r3, [pc, #128]	; (8003094 <menu+0x1f80>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d106      	bne.n	8003028 <menu+0x1f14>
				calismaSekli = 0;
 800301a:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <menu+0x1f9c>)
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003020:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <menu+0x1f9c>)
 8003022:	781a      	ldrb	r2, [r3, #0]
 8003024:	4b16      	ldr	r3, [pc, #88]	; (8003080 <menu+0x1f6c>)
 8003026:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003028:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <menu+0x1f80>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d106      	bne.n	800303e <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003030:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <menu+0x1fa0>)
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003036:	4b1f      	ldr	r3, [pc, #124]	; (80030b4 <menu+0x1fa0>)
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	4b11      	ldr	r3, [pc, #68]	; (8003080 <menu+0x1f6c>)
 800303c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <menu+0x1f70>)
 8003040:	2201      	movs	r2, #1
 8003042:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <menu+0x1f74>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b12      	cmp	r3, #18
 800304a:	f040 80d5 	bne.w	80031f8 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <menu+0x1f80>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d13c      	bne.n	80030d0 <menu+0x1fbc>
			if(dilSecim == 0) {
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <menu+0x1f58>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d12e      	bne.n	80030bc <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800305e:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <menu+0x1fa4>)
 8003060:	2101      	movs	r1, #1
 8003062:	2001      	movs	r0, #1
 8003064:	f004 fdb6 	bl	8007bd4 <lcd_print>
 8003068:	e048      	b.n	80030fc <menu+0x1fe8>
 800306a:	bf00      	nop
 800306c:	20000241 	.word	0x20000241
 8003070:	0800d250 	.word	0x0800d250
 8003074:	40010800 	.word	0x40010800
 8003078:	2000024f 	.word	0x2000024f
 800307c:	2000022e 	.word	0x2000022e
 8003080:	20000118 	.word	0x20000118
 8003084:	2000024c 	.word	0x2000024c
 8003088:	20000220 	.word	0x20000220
 800308c:	0800d5cc 	.word	0x0800d5cc
 8003090:	0800d5e0 	.word	0x0800d5e0
 8003094:	2000022f 	.word	0x2000022f
 8003098:	0800d5f4 	.word	0x0800d5f4
 800309c:	0800d604 	.word	0x0800d604
 80030a0:	0800d614 	.word	0x0800d614
 80030a4:	0800d624 	.word	0x0800d624
 80030a8:	0800d1dc 	.word	0x0800d1dc
 80030ac:	0800d1f0 	.word	0x0800d1f0
 80030b0:	20000221 	.word	0x20000221
 80030b4:	20000232 	.word	0x20000232
 80030b8:	0800d634 	.word	0x0800d634
			} else if(dilSecim == 1) {
 80030bc:	4b7b      	ldr	r3, [pc, #492]	; (80032ac <menu+0x2198>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d11b      	bne.n	80030fc <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80030c4:	4a7a      	ldr	r2, [pc, #488]	; (80032b0 <menu+0x219c>)
 80030c6:	2101      	movs	r1, #1
 80030c8:	2001      	movs	r0, #1
 80030ca:	f004 fd83 	bl	8007bd4 <lcd_print>
 80030ce:	e015      	b.n	80030fc <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80030d0:	4b78      	ldr	r3, [pc, #480]	; (80032b4 <menu+0x21a0>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d111      	bne.n	80030fc <menu+0x1fe8>
			if(dilSecim == 0){
 80030d8:	4b74      	ldr	r3, [pc, #464]	; (80032ac <menu+0x2198>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d104      	bne.n	80030ea <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80030e0:	4a75      	ldr	r2, [pc, #468]	; (80032b8 <menu+0x21a4>)
 80030e2:	2101      	movs	r1, #1
 80030e4:	2001      	movs	r0, #1
 80030e6:	f004 fd75 	bl	8007bd4 <lcd_print>
			}
			if(dilSecim == 1){
 80030ea:	4b70      	ldr	r3, [pc, #448]	; (80032ac <menu+0x2198>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d104      	bne.n	80030fc <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80030f2:	4a72      	ldr	r2, [pc, #456]	; (80032bc <menu+0x21a8>)
 80030f4:	2101      	movs	r1, #1
 80030f6:	2001      	movs	r0, #1
 80030f8:	f004 fd6c 	bl	8007bd4 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80030fc:	4b70      	ldr	r3, [pc, #448]	; (80032c0 <menu+0x21ac>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d113      	bne.n	800312c <menu+0x2018>
			if(dilSecim == 0) {
 8003104:	4b69      	ldr	r3, [pc, #420]	; (80032ac <menu+0x2198>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 800310c:	4a6d      	ldr	r2, [pc, #436]	; (80032c4 <menu+0x21b0>)
 800310e:	2101      	movs	r1, #1
 8003110:	2002      	movs	r0, #2
 8003112:	f004 fd5f 	bl	8007bd4 <lcd_print>
 8003116:	e020      	b.n	800315a <menu+0x2046>
			} else if(dilSecim == 1){
 8003118:	4b64      	ldr	r3, [pc, #400]	; (80032ac <menu+0x2198>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d11c      	bne.n	800315a <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003120:	4a69      	ldr	r2, [pc, #420]	; (80032c8 <menu+0x21b4>)
 8003122:	2101      	movs	r1, #1
 8003124:	2002      	movs	r0, #2
 8003126:	f004 fd55 	bl	8007bd4 <lcd_print>
 800312a:	e016      	b.n	800315a <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 800312c:	4b64      	ldr	r3, [pc, #400]	; (80032c0 <menu+0x21ac>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d112      	bne.n	800315a <menu+0x2046>
			if(dilSecim == 0){
 8003134:	4b5d      	ldr	r3, [pc, #372]	; (80032ac <menu+0x2198>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 800313c:	4a63      	ldr	r2, [pc, #396]	; (80032cc <menu+0x21b8>)
 800313e:	2101      	movs	r1, #1
 8003140:	2002      	movs	r0, #2
 8003142:	f004 fd47 	bl	8007bd4 <lcd_print>
 8003146:	e008      	b.n	800315a <menu+0x2046>
			} else if(dilSecim == 1){
 8003148:	4b58      	ldr	r3, [pc, #352]	; (80032ac <menu+0x2198>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d104      	bne.n	800315a <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003150:	4a5f      	ldr	r2, [pc, #380]	; (80032d0 <menu+0x21bc>)
 8003152:	2101      	movs	r1, #1
 8003154:	2002      	movs	r0, #2
 8003156:	f004 fd3d 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800315a:	2102      	movs	r1, #2
 800315c:	485d      	ldr	r0, [pc, #372]	; (80032d4 <menu+0x21c0>)
 800315e:	f006 f85f 	bl	8009220 <HAL_GPIO_ReadPin>
 8003162:	4603      	mov	r3, r0
 8003164:	2b01      	cmp	r3, #1
 8003166:	d115      	bne.n	8003194 <menu+0x2080>
 8003168:	4b5b      	ldr	r3, [pc, #364]	; (80032d8 <menu+0x21c4>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	f083 0301 	eor.w	r3, r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00e      	beq.n	8003194 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003176:	4b52      	ldr	r3, [pc, #328]	; (80032c0 <menu+0x21ac>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	3301      	adds	r3, #1
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <menu+0x21ac>)
 8003180:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003182:	4b4f      	ldr	r3, [pc, #316]	; (80032c0 <menu+0x21ac>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d902      	bls.n	8003190 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800318a:	4b4d      	ldr	r3, [pc, #308]	; (80032c0 <menu+0x21ac>)
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003190:	f001 fc00 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003194:	2104      	movs	r1, #4
 8003196:	484f      	ldr	r0, [pc, #316]	; (80032d4 <menu+0x21c0>)
 8003198:	f006 f842 	bl	8009220 <HAL_GPIO_ReadPin>
 800319c:	4603      	mov	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d115      	bne.n	80031ce <menu+0x20ba>
 80031a2:	4b4d      	ldr	r3, [pc, #308]	; (80032d8 <menu+0x21c4>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	f083 0301 	eor.w	r3, r3, #1
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00e      	beq.n	80031ce <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80031b0:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <menu+0x21ac>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <menu+0x21ac>)
 80031ba:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80031bc:	4b40      	ldr	r3, [pc, #256]	; (80032c0 <menu+0x21ac>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80031c4:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <menu+0x21ac>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031ca:	f001 fbe3 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ce:	2108      	movs	r1, #8
 80031d0:	4840      	ldr	r0, [pc, #256]	; (80032d4 <menu+0x21c0>)
 80031d2:	f006 f825 	bl	8009220 <HAL_GPIO_ReadPin>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d10d      	bne.n	80031f8 <menu+0x20e4>
 80031dc:	4b3e      	ldr	r3, [pc, #248]	; (80032d8 <menu+0x21c4>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	f083 0301 	eor.w	r3, r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d006      	beq.n	80031f8 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80031ea:	4b35      	ldr	r3, [pc, #212]	; (80032c0 <menu+0x21ac>)
 80031ec:	781a      	ldrb	r2, [r3, #0]
 80031ee:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <menu+0x21c8>)
 80031f0:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80031f2:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <menu+0x21cc>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80031f8:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <menu+0x21d0>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b13      	cmp	r3, #19
 80031fe:	f040 80d5 	bne.w	80033ac <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003202:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <menu+0x21a0>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d113      	bne.n	8003232 <menu+0x211e>
			if(dilSecim == 0) {
 800320a:	4b28      	ldr	r3, [pc, #160]	; (80032ac <menu+0x2198>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d105      	bne.n	800321e <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003212:	4a35      	ldr	r2, [pc, #212]	; (80032e8 <menu+0x21d4>)
 8003214:	2101      	movs	r1, #1
 8003216:	2001      	movs	r0, #1
 8003218:	f004 fcdc 	bl	8007bd4 <lcd_print>
 800321c:	e01f      	b.n	800325e <menu+0x214a>
			} else if(dilSecim == 1) {
 800321e:	4b23      	ldr	r3, [pc, #140]	; (80032ac <menu+0x2198>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d11b      	bne.n	800325e <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003226:	4a31      	ldr	r2, [pc, #196]	; (80032ec <menu+0x21d8>)
 8003228:	2101      	movs	r1, #1
 800322a:	2001      	movs	r0, #1
 800322c:	f004 fcd2 	bl	8007bd4 <lcd_print>
 8003230:	e015      	b.n	800325e <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003232:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <menu+0x21a0>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d111      	bne.n	800325e <menu+0x214a>
			if(dilSecim == 0) {
 800323a:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <menu+0x2198>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d104      	bne.n	800324c <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003242:	4a2b      	ldr	r2, [pc, #172]	; (80032f0 <menu+0x21dc>)
 8003244:	2101      	movs	r1, #1
 8003246:	2001      	movs	r0, #1
 8003248:	f004 fcc4 	bl	8007bd4 <lcd_print>
			}
			if(dilSecim == 1) {
 800324c:	4b17      	ldr	r3, [pc, #92]	; (80032ac <menu+0x2198>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d104      	bne.n	800325e <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003254:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <menu+0x21e0>)
 8003256:	2101      	movs	r1, #1
 8003258:	2001      	movs	r0, #1
 800325a:	f004 fcbb 	bl	8007bd4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800325e:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <menu+0x21e4>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d113      	bne.n	800328e <menu+0x217a>
			if(dilSecim == 0) {
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <menu+0x2198>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800326e:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <menu+0x21b0>)
 8003270:	2101      	movs	r1, #1
 8003272:	2002      	movs	r0, #2
 8003274:	f004 fcae 	bl	8007bd4 <lcd_print>
 8003278:	e049      	b.n	800330e <menu+0x21fa>
			} else if(dilSecim == 1) {
 800327a:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <menu+0x2198>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d145      	bne.n	800330e <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003282:	4a11      	ldr	r2, [pc, #68]	; (80032c8 <menu+0x21b4>)
 8003284:	2101      	movs	r1, #1
 8003286:	2002      	movs	r0, #2
 8003288:	f004 fca4 	bl	8007bd4 <lcd_print>
 800328c:	e03f      	b.n	800330e <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800328e:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <menu+0x21e4>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d13b      	bne.n	800330e <menu+0x21fa>
			if(dilSecim == 0) {
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <menu+0x2198>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d12e      	bne.n	80032fc <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800329e:	4a0b      	ldr	r2, [pc, #44]	; (80032cc <menu+0x21b8>)
 80032a0:	2101      	movs	r1, #1
 80032a2:	2002      	movs	r0, #2
 80032a4:	f004 fc96 	bl	8007bd4 <lcd_print>
 80032a8:	e031      	b.n	800330e <menu+0x21fa>
 80032aa:	bf00      	nop
 80032ac:	20000241 	.word	0x20000241
 80032b0:	0800d648 	.word	0x0800d648
 80032b4:	2000022f 	.word	0x2000022f
 80032b8:	0800d658 	.word	0x0800d658
 80032bc:	0800d66c 	.word	0x0800d66c
 80032c0:	20000230 	.word	0x20000230
 80032c4:	0800d1dc 	.word	0x0800d1dc
 80032c8:	0800d1f0 	.word	0x0800d1f0
 80032cc:	0800d23c 	.word	0x0800d23c
 80032d0:	0800d250 	.word	0x0800d250
 80032d4:	40010800 	.word	0x40010800
 80032d8:	2000024f 	.word	0x2000024f
 80032dc:	20000118 	.word	0x20000118
 80032e0:	2000024c 	.word	0x2000024c
 80032e4:	20000220 	.word	0x20000220
 80032e8:	0800d680 	.word	0x0800d680
 80032ec:	0800d694 	.word	0x0800d694
 80032f0:	0800d6a8 	.word	0x0800d6a8
 80032f4:	0800d6bc 	.word	0x0800d6bc
 80032f8:	20000231 	.word	0x20000231
			} else if(dilSecim == 1) {
 80032fc:	4b90      	ldr	r3, [pc, #576]	; (8003540 <menu+0x242c>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d104      	bne.n	800330e <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003304:	4a8f      	ldr	r2, [pc, #572]	; (8003544 <menu+0x2430>)
 8003306:	2101      	movs	r1, #1
 8003308:	2002      	movs	r0, #2
 800330a:	f004 fc63 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800330e:	2102      	movs	r1, #2
 8003310:	488d      	ldr	r0, [pc, #564]	; (8003548 <menu+0x2434>)
 8003312:	f005 ff85 	bl	8009220 <HAL_GPIO_ReadPin>
 8003316:	4603      	mov	r3, r0
 8003318:	2b01      	cmp	r3, #1
 800331a:	d115      	bne.n	8003348 <menu+0x2234>
 800331c:	4b8b      	ldr	r3, [pc, #556]	; (800354c <menu+0x2438>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	f083 0301 	eor.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00e      	beq.n	8003348 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800332a:	4b89      	ldr	r3, [pc, #548]	; (8003550 <menu+0x243c>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	3301      	adds	r3, #1
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4b87      	ldr	r3, [pc, #540]	; (8003550 <menu+0x243c>)
 8003334:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003336:	4b86      	ldr	r3, [pc, #536]	; (8003550 <menu+0x243c>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d902      	bls.n	8003344 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800333e:	4b84      	ldr	r3, [pc, #528]	; (8003550 <menu+0x243c>)
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003344:	f001 fb26 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003348:	2104      	movs	r1, #4
 800334a:	487f      	ldr	r0, [pc, #508]	; (8003548 <menu+0x2434>)
 800334c:	f005 ff68 	bl	8009220 <HAL_GPIO_ReadPin>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	d115      	bne.n	8003382 <menu+0x226e>
 8003356:	4b7d      	ldr	r3, [pc, #500]	; (800354c <menu+0x2438>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	f083 0301 	eor.w	r3, r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00e      	beq.n	8003382 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003364:	4b7a      	ldr	r3, [pc, #488]	; (8003550 <menu+0x243c>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	3b01      	subs	r3, #1
 800336a:	b2da      	uxtb	r2, r3
 800336c:	4b78      	ldr	r3, [pc, #480]	; (8003550 <menu+0x243c>)
 800336e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003370:	4b77      	ldr	r3, [pc, #476]	; (8003550 <menu+0x243c>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003378:	4b75      	ldr	r3, [pc, #468]	; (8003550 <menu+0x243c>)
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800337e:	f001 fb09 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003382:	2108      	movs	r1, #8
 8003384:	4870      	ldr	r0, [pc, #448]	; (8003548 <menu+0x2434>)
 8003386:	f005 ff4b 	bl	8009220 <HAL_GPIO_ReadPin>
 800338a:	4603      	mov	r3, r0
 800338c:	2b01      	cmp	r3, #1
 800338e:	d10d      	bne.n	80033ac <menu+0x2298>
 8003390:	4b6e      	ldr	r3, [pc, #440]	; (800354c <menu+0x2438>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	f083 0301 	eor.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d006      	beq.n	80033ac <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800339e:	4b6c      	ldr	r3, [pc, #432]	; (8003550 <menu+0x243c>)
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	4b6c      	ldr	r3, [pc, #432]	; (8003554 <menu+0x2440>)
 80033a4:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80033a6:	4b6c      	ldr	r3, [pc, #432]	; (8003558 <menu+0x2444>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80033ac:	4b6b      	ldr	r3, [pc, #428]	; (800355c <menu+0x2448>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b14      	cmp	r3, #20
 80033b2:	f040 80b5 	bne.w	8003520 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80033b6:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <menu+0x244c>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d113      	bne.n	80033e6 <menu+0x22d2>
			if(dilSecim == 0) {
 80033be:	4b60      	ldr	r3, [pc, #384]	; (8003540 <menu+0x242c>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80033c6:	4a67      	ldr	r2, [pc, #412]	; (8003564 <menu+0x2450>)
 80033c8:	2101      	movs	r1, #1
 80033ca:	2001      	movs	r0, #1
 80033cc:	f004 fc02 	bl	8007bd4 <lcd_print>
 80033d0:	e020      	b.n	8003414 <menu+0x2300>
			} else if(dilSecim == 1) {
 80033d2:	4b5b      	ldr	r3, [pc, #364]	; (8003540 <menu+0x242c>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d11c      	bne.n	8003414 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80033da:	4a63      	ldr	r2, [pc, #396]	; (8003568 <menu+0x2454>)
 80033dc:	2101      	movs	r1, #1
 80033de:	2001      	movs	r0, #1
 80033e0:	f004 fbf8 	bl	8007bd4 <lcd_print>
 80033e4:	e016      	b.n	8003414 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80033e6:	4b5e      	ldr	r3, [pc, #376]	; (8003560 <menu+0x244c>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d112      	bne.n	8003414 <menu+0x2300>
			if(dilSecim == 0) {
 80033ee:	4b54      	ldr	r3, [pc, #336]	; (8003540 <menu+0x242c>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d105      	bne.n	8003402 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80033f6:	4a5d      	ldr	r2, [pc, #372]	; (800356c <menu+0x2458>)
 80033f8:	2101      	movs	r1, #1
 80033fa:	2001      	movs	r0, #1
 80033fc:	f004 fbea 	bl	8007bd4 <lcd_print>
 8003400:	e008      	b.n	8003414 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003402:	4b4f      	ldr	r3, [pc, #316]	; (8003540 <menu+0x242c>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d104      	bne.n	8003414 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800340a:	4a59      	ldr	r2, [pc, #356]	; (8003570 <menu+0x245c>)
 800340c:	2101      	movs	r1, #1
 800340e:	2001      	movs	r0, #1
 8003410:	f004 fbe0 	bl	8007bd4 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003414:	4b57      	ldr	r3, [pc, #348]	; (8003574 <menu+0x2460>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d113      	bne.n	8003444 <menu+0x2330>
			if(dilSecim == 0) {
 800341c:	4b48      	ldr	r3, [pc, #288]	; (8003540 <menu+0x242c>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d105      	bne.n	8003430 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003424:	4a54      	ldr	r2, [pc, #336]	; (8003578 <menu+0x2464>)
 8003426:	2101      	movs	r1, #1
 8003428:	2002      	movs	r0, #2
 800342a:	f004 fbd3 	bl	8007bd4 <lcd_print>
 800342e:	e020      	b.n	8003472 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003430:	4b43      	ldr	r3, [pc, #268]	; (8003540 <menu+0x242c>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d11c      	bne.n	8003472 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003438:	4a50      	ldr	r2, [pc, #320]	; (800357c <menu+0x2468>)
 800343a:	2101      	movs	r1, #1
 800343c:	2002      	movs	r0, #2
 800343e:	f004 fbc9 	bl	8007bd4 <lcd_print>
 8003442:	e016      	b.n	8003472 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003444:	4b4b      	ldr	r3, [pc, #300]	; (8003574 <menu+0x2460>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d112      	bne.n	8003472 <menu+0x235e>
			if(dilSecim == 0) {
 800344c:	4b3c      	ldr	r3, [pc, #240]	; (8003540 <menu+0x242c>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003454:	4a4a      	ldr	r2, [pc, #296]	; (8003580 <menu+0x246c>)
 8003456:	2101      	movs	r1, #1
 8003458:	2002      	movs	r0, #2
 800345a:	f004 fbbb 	bl	8007bd4 <lcd_print>
 800345e:	e008      	b.n	8003472 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003460:	4b37      	ldr	r3, [pc, #220]	; (8003540 <menu+0x242c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d104      	bne.n	8003472 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003468:	4a46      	ldr	r2, [pc, #280]	; (8003584 <menu+0x2470>)
 800346a:	2101      	movs	r1, #1
 800346c:	2002      	movs	r0, #2
 800346e:	f004 fbb1 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003472:	2102      	movs	r1, #2
 8003474:	4834      	ldr	r0, [pc, #208]	; (8003548 <menu+0x2434>)
 8003476:	f005 fed3 	bl	8009220 <HAL_GPIO_ReadPin>
 800347a:	4603      	mov	r3, r0
 800347c:	2b01      	cmp	r3, #1
 800347e:	d119      	bne.n	80034b4 <menu+0x23a0>
 8003480:	4b32      	ldr	r3, [pc, #200]	; (800354c <menu+0x2438>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	f083 0301 	eor.w	r3, r3, #1
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d012      	beq.n	80034b4 <menu+0x23a0>
 800348e:	4b34      	ldr	r3, [pc, #208]	; (8003560 <menu+0x244c>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d10e      	bne.n	80034b4 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003496:	4b37      	ldr	r3, [pc, #220]	; (8003574 <menu+0x2460>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	3301      	adds	r3, #1
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4b35      	ldr	r3, [pc, #212]	; (8003574 <menu+0x2460>)
 80034a0:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80034a2:	4b34      	ldr	r3, [pc, #208]	; (8003574 <menu+0x2460>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d902      	bls.n	80034b0 <menu+0x239c>
				devirmeSilindirTipi = 0;
 80034aa:	4b32      	ldr	r3, [pc, #200]	; (8003574 <menu+0x2460>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034b0:	f001 fa70 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80034b4:	2104      	movs	r1, #4
 80034b6:	4824      	ldr	r0, [pc, #144]	; (8003548 <menu+0x2434>)
 80034b8:	f005 feb2 	bl	8009220 <HAL_GPIO_ReadPin>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d119      	bne.n	80034f6 <menu+0x23e2>
 80034c2:	4b22      	ldr	r3, [pc, #136]	; (800354c <menu+0x2438>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	f083 0301 	eor.w	r3, r3, #1
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d012      	beq.n	80034f6 <menu+0x23e2>
 80034d0:	4b23      	ldr	r3, [pc, #140]	; (8003560 <menu+0x244c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d10e      	bne.n	80034f6 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80034d8:	4b26      	ldr	r3, [pc, #152]	; (8003574 <menu+0x2460>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	3b01      	subs	r3, #1
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b24      	ldr	r3, [pc, #144]	; (8003574 <menu+0x2460>)
 80034e2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80034e4:	4b23      	ldr	r3, [pc, #140]	; (8003574 <menu+0x2460>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80034ec:	4b21      	ldr	r3, [pc, #132]	; (8003574 <menu+0x2460>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034f2:	f001 fa4f 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034f6:	2108      	movs	r1, #8
 80034f8:	4813      	ldr	r0, [pc, #76]	; (8003548 <menu+0x2434>)
 80034fa:	f005 fe91 	bl	8009220 <HAL_GPIO_ReadPin>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b01      	cmp	r3, #1
 8003502:	d10d      	bne.n	8003520 <menu+0x240c>
 8003504:	4b11      	ldr	r3, [pc, #68]	; (800354c <menu+0x2438>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f083 0301 	eor.w	r3, r3, #1
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d006      	beq.n	8003520 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003512:	4b18      	ldr	r3, [pc, #96]	; (8003574 <menu+0x2460>)
 8003514:	781a      	ldrb	r2, [r3, #0]
 8003516:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <menu+0x2440>)
 8003518:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <menu+0x2444>)
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003520:	4b0e      	ldr	r3, [pc, #56]	; (800355c <menu+0x2448>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b15      	cmp	r3, #21
 8003526:	f040 80c2 	bne.w	80036ae <menu+0x259a>
		if(dilSecim == 0) {
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <menu+0x242c>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d12c      	bne.n	800358c <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003532:	4a15      	ldr	r2, [pc, #84]	; (8003588 <menu+0x2474>)
 8003534:	2101      	movs	r1, #1
 8003536:	2001      	movs	r0, #1
 8003538:	f004 fb4c 	bl	8007bd4 <lcd_print>
 800353c:	e02f      	b.n	800359e <menu+0x248a>
 800353e:	bf00      	nop
 8003540:	20000241 	.word	0x20000241
 8003544:	0800d250 	.word	0x0800d250
 8003548:	40010800 	.word	0x40010800
 800354c:	2000024f 	.word	0x2000024f
 8003550:	20000231 	.word	0x20000231
 8003554:	20000118 	.word	0x20000118
 8003558:	2000024c 	.word	0x2000024c
 800355c:	20000220 	.word	0x20000220
 8003560:	2000022f 	.word	0x2000022f
 8003564:	0800d6d0 	.word	0x0800d6d0
 8003568:	0800d6e4 	.word	0x0800d6e4
 800356c:	0800d6f8 	.word	0x0800d6f8
 8003570:	0800d70c 	.word	0x0800d70c
 8003574:	20000232 	.word	0x20000232
 8003578:	0800d720 	.word	0x0800d720
 800357c:	0800d734 	.word	0x0800d734
 8003580:	0800d744 	.word	0x0800d744
 8003584:	0800d758 	.word	0x0800d758
 8003588:	0800d768 	.word	0x0800d768
		} else if(dilSecim == 1) {
 800358c:	4b9c      	ldr	r3, [pc, #624]	; (8003800 <menu+0x26ec>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d104      	bne.n	800359e <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003594:	4a9b      	ldr	r2, [pc, #620]	; (8003804 <menu+0x26f0>)
 8003596:	2101      	movs	r1, #1
 8003598:	2001      	movs	r0, #1
 800359a:	f004 fb1b 	bl	8007bd4 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800359e:	4b9a      	ldr	r3, [pc, #616]	; (8003808 <menu+0x26f4>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d112      	bne.n	80035cc <menu+0x24b8>
			if(dilSecim == 0) {
 80035a6:	4b96      	ldr	r3, [pc, #600]	; (8003800 <menu+0x26ec>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80035ae:	4a97      	ldr	r2, [pc, #604]	; (800380c <menu+0x26f8>)
 80035b0:	2101      	movs	r1, #1
 80035b2:	2002      	movs	r0, #2
 80035b4:	f004 fb0e 	bl	8007bd4 <lcd_print>
			}
			if(dilSecim == 1) {
 80035b8:	4b91      	ldr	r3, [pc, #580]	; (8003800 <menu+0x26ec>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d11c      	bne.n	80035fa <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80035c0:	4a93      	ldr	r2, [pc, #588]	; (8003810 <menu+0x26fc>)
 80035c2:	2101      	movs	r1, #1
 80035c4:	2002      	movs	r0, #2
 80035c6:	f004 fb05 	bl	8007bd4 <lcd_print>
 80035ca:	e016      	b.n	80035fa <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80035cc:	4b8e      	ldr	r3, [pc, #568]	; (8003808 <menu+0x26f4>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d112      	bne.n	80035fa <menu+0x24e6>
			if(dilSecim == 0) {
 80035d4:	4b8a      	ldr	r3, [pc, #552]	; (8003800 <menu+0x26ec>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80035dc:	4a8d      	ldr	r2, [pc, #564]	; (8003814 <menu+0x2700>)
 80035de:	2101      	movs	r1, #1
 80035e0:	2002      	movs	r0, #2
 80035e2:	f004 faf7 	bl	8007bd4 <lcd_print>
 80035e6:	e008      	b.n	80035fa <menu+0x24e6>
			} else if(dilSecim == 1) {
 80035e8:	4b85      	ldr	r3, [pc, #532]	; (8003800 <menu+0x26ec>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d104      	bne.n	80035fa <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 80035f0:	4a89      	ldr	r2, [pc, #548]	; (8003818 <menu+0x2704>)
 80035f2:	2101      	movs	r1, #1
 80035f4:	2002      	movs	r0, #2
 80035f6:	f004 faed 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035fa:	2102      	movs	r1, #2
 80035fc:	4887      	ldr	r0, [pc, #540]	; (800381c <menu+0x2708>)
 80035fe:	f005 fe0f 	bl	8009220 <HAL_GPIO_ReadPin>
 8003602:	4603      	mov	r3, r0
 8003604:	2b01      	cmp	r3, #1
 8003606:	d115      	bne.n	8003634 <menu+0x2520>
 8003608:	4b85      	ldr	r3, [pc, #532]	; (8003820 <menu+0x270c>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	f083 0301 	eor.w	r3, r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00e      	beq.n	8003634 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003616:	4b7c      	ldr	r3, [pc, #496]	; (8003808 <menu+0x26f4>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	3301      	adds	r3, #1
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4b7a      	ldr	r3, [pc, #488]	; (8003808 <menu+0x26f4>)
 8003620:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003622:	4b79      	ldr	r3, [pc, #484]	; (8003808 <menu+0x26f4>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d902      	bls.n	8003630 <menu+0x251c>
				platformSilindirTipi = 0;
 800362a:	4b77      	ldr	r3, [pc, #476]	; (8003808 <menu+0x26f4>)
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003630:	f001 f9b0 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003634:	2104      	movs	r1, #4
 8003636:	4879      	ldr	r0, [pc, #484]	; (800381c <menu+0x2708>)
 8003638:	f005 fdf2 	bl	8009220 <HAL_GPIO_ReadPin>
 800363c:	4603      	mov	r3, r0
 800363e:	2b01      	cmp	r3, #1
 8003640:	d115      	bne.n	800366e <menu+0x255a>
 8003642:	4b77      	ldr	r3, [pc, #476]	; (8003820 <menu+0x270c>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	f083 0301 	eor.w	r3, r3, #1
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00e      	beq.n	800366e <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003650:	4b6d      	ldr	r3, [pc, #436]	; (8003808 <menu+0x26f4>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	3b01      	subs	r3, #1
 8003656:	b2da      	uxtb	r2, r3
 8003658:	4b6b      	ldr	r3, [pc, #428]	; (8003808 <menu+0x26f4>)
 800365a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 800365c:	4b6a      	ldr	r3, [pc, #424]	; (8003808 <menu+0x26f4>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003664:	4b68      	ldr	r3, [pc, #416]	; (8003808 <menu+0x26f4>)
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800366a:	f001 f993 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800366e:	2108      	movs	r1, #8
 8003670:	486a      	ldr	r0, [pc, #424]	; (800381c <menu+0x2708>)
 8003672:	f005 fdd5 	bl	8009220 <HAL_GPIO_ReadPin>
 8003676:	4603      	mov	r3, r0
 8003678:	2b01      	cmp	r3, #1
 800367a:	d118      	bne.n	80036ae <menu+0x259a>
 800367c:	4b68      	ldr	r3, [pc, #416]	; (8003820 <menu+0x270c>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	f083 0301 	eor.w	r3, r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d011      	beq.n	80036ae <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 800368a:	4b5f      	ldr	r3, [pc, #380]	; (8003808 <menu+0x26f4>)
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	4b65      	ldr	r3, [pc, #404]	; (8003824 <menu+0x2710>)
 8003690:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003692:	4b5d      	ldr	r3, [pc, #372]	; (8003808 <menu+0x26f4>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d106      	bne.n	80036a8 <menu+0x2594>
				altLimit = 1;
 800369a:	4b63      	ldr	r3, [pc, #396]	; (8003828 <menu+0x2714>)
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80036a0:	4b61      	ldr	r3, [pc, #388]	; (8003828 <menu+0x2714>)
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	4b5f      	ldr	r3, [pc, #380]	; (8003824 <menu+0x2710>)
 80036a6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80036a8:	4b60      	ldr	r3, [pc, #384]	; (800382c <menu+0x2718>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80036ae:	4b60      	ldr	r3, [pc, #384]	; (8003830 <menu+0x271c>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b16      	cmp	r3, #22
 80036b4:	f040 8081 	bne.w	80037ba <menu+0x26a6>
		if(dilSecim == 0) {
 80036b8:	4b51      	ldr	r3, [pc, #324]	; (8003800 <menu+0x26ec>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80036c0:	4a5c      	ldr	r2, [pc, #368]	; (8003834 <menu+0x2720>)
 80036c2:	2101      	movs	r1, #1
 80036c4:	2001      	movs	r0, #1
 80036c6:	f004 fa85 	bl	8007bd4 <lcd_print>
 80036ca:	e008      	b.n	80036de <menu+0x25ca>
		} else if(dilSecim == 1) {
 80036cc:	4b4c      	ldr	r3, [pc, #304]	; (8003800 <menu+0x26ec>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d104      	bne.n	80036de <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80036d4:	4a58      	ldr	r2, [pc, #352]	; (8003838 <menu+0x2724>)
 80036d6:	2101      	movs	r1, #1
 80036d8:	2001      	movs	r0, #1
 80036da:	f004 fa7b 	bl	8007bd4 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80036de:	4b48      	ldr	r3, [pc, #288]	; (8003800 <menu+0x26ec>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d105      	bne.n	80036f2 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 80036e6:	4a55      	ldr	r2, [pc, #340]	; (800383c <menu+0x2728>)
 80036e8:	2101      	movs	r1, #1
 80036ea:	2002      	movs	r0, #2
 80036ec:	f004 fa72 	bl	8007bd4 <lcd_print>
 80036f0:	e008      	b.n	8003704 <menu+0x25f0>
			} else if(dilSecim == 1){
 80036f2:	4b43      	ldr	r3, [pc, #268]	; (8003800 <menu+0x26ec>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d104      	bne.n	8003704 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 80036fa:	4a51      	ldr	r2, [pc, #324]	; (8003840 <menu+0x272c>)
 80036fc:	2101      	movs	r1, #1
 80036fe:	2002      	movs	r0, #2
 8003700:	f004 fa68 	bl	8007bd4 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003704:	4b4f      	ldr	r3, [pc, #316]	; (8003844 <menu+0x2730>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	220a      	movs	r2, #10
 800370a:	494f      	ldr	r1, [pc, #316]	; (8003848 <menu+0x2734>)
 800370c:	4618      	mov	r0, r3
 800370e:	f008 fdb3 	bl	800c278 <itoa>
		lcd_print(2,16,snum);
 8003712:	4a4d      	ldr	r2, [pc, #308]	; (8003848 <menu+0x2734>)
 8003714:	2110      	movs	r1, #16
 8003716:	2002      	movs	r0, #2
 8003718:	f004 fa5c 	bl	8007bd4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800371c:	2102      	movs	r1, #2
 800371e:	483f      	ldr	r0, [pc, #252]	; (800381c <menu+0x2708>)
 8003720:	f005 fd7e 	bl	8009220 <HAL_GPIO_ReadPin>
 8003724:	4603      	mov	r3, r0
 8003726:	2b01      	cmp	r3, #1
 8003728:	d115      	bne.n	8003756 <menu+0x2642>
 800372a:	4b3d      	ldr	r3, [pc, #244]	; (8003820 <menu+0x270c>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	f083 0301 	eor.w	r3, r3, #1
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00e      	beq.n	8003756 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003738:	4b42      	ldr	r3, [pc, #264]	; (8003844 <menu+0x2730>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	3301      	adds	r3, #1
 800373e:	b2da      	uxtb	r2, r3
 8003740:	4b40      	ldr	r3, [pc, #256]	; (8003844 <menu+0x2730>)
 8003742:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003744:	4b3f      	ldr	r3, [pc, #252]	; (8003844 <menu+0x2730>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b05      	cmp	r3, #5
 800374a:	d902      	bls.n	8003752 <menu+0x263e>
				yukariValfTmr = 0;
 800374c:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <menu+0x2730>)
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003752:	f001 f91f 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003756:	2104      	movs	r1, #4
 8003758:	4830      	ldr	r0, [pc, #192]	; (800381c <menu+0x2708>)
 800375a:	f005 fd61 	bl	8009220 <HAL_GPIO_ReadPin>
 800375e:	4603      	mov	r3, r0
 8003760:	2b01      	cmp	r3, #1
 8003762:	d115      	bne.n	8003790 <menu+0x267c>
 8003764:	4b2e      	ldr	r3, [pc, #184]	; (8003820 <menu+0x270c>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	f083 0301 	eor.w	r3, r3, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00e      	beq.n	8003790 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003772:	4b34      	ldr	r3, [pc, #208]	; (8003844 <menu+0x2730>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	3b01      	subs	r3, #1
 8003778:	b2da      	uxtb	r2, r3
 800377a:	4b32      	ldr	r3, [pc, #200]	; (8003844 <menu+0x2730>)
 800377c:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800377e:	4b31      	ldr	r3, [pc, #196]	; (8003844 <menu+0x2730>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b06      	cmp	r3, #6
 8003784:	d902      	bls.n	800378c <menu+0x2678>
		   		yukariValfTmr = 5;
 8003786:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <menu+0x2730>)
 8003788:	2205      	movs	r2, #5
 800378a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800378c:	f001 f902 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003790:	2108      	movs	r1, #8
 8003792:	4822      	ldr	r0, [pc, #136]	; (800381c <menu+0x2708>)
 8003794:	f005 fd44 	bl	8009220 <HAL_GPIO_ReadPin>
 8003798:	4603      	mov	r3, r0
 800379a:	2b01      	cmp	r3, #1
 800379c:	d10d      	bne.n	80037ba <menu+0x26a6>
 800379e:	4b20      	ldr	r3, [pc, #128]	; (8003820 <menu+0x270c>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	f083 0301 	eor.w	r3, r3, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 80037ac:	4b25      	ldr	r3, [pc, #148]	; (8003844 <menu+0x2730>)
 80037ae:	781a      	ldrb	r2, [r3, #0]
 80037b0:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <menu+0x2710>)
 80037b2:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80037b4:	4b1d      	ldr	r3, [pc, #116]	; (800382c <menu+0x2718>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <menu+0x271c>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b17      	cmp	r3, #23
 80037c0:	f040 80ac 	bne.w	800391c <menu+0x2808>
		if(dilSecim == 0) {
 80037c4:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <menu+0x26ec>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80037cc:	4a1f      	ldr	r2, [pc, #124]	; (800384c <menu+0x2738>)
 80037ce:	2101      	movs	r1, #1
 80037d0:	2001      	movs	r0, #1
 80037d2:	f004 f9ff 	bl	8007bd4 <lcd_print>
 80037d6:	e008      	b.n	80037ea <menu+0x26d6>
		} else if(dilSecim == 1) {
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <menu+0x26ec>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d104      	bne.n	80037ea <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 80037e0:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <menu+0x273c>)
 80037e2:	2101      	movs	r1, #1
 80037e4:	2001      	movs	r0, #1
 80037e6:	f004 f9f5 	bl	8007bd4 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <menu+0x26ec>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d130      	bne.n	8003854 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 80037f2:	4a12      	ldr	r2, [pc, #72]	; (800383c <menu+0x2728>)
 80037f4:	2101      	movs	r1, #1
 80037f6:	2002      	movs	r0, #2
 80037f8:	f004 f9ec 	bl	8007bd4 <lcd_print>
 80037fc:	e033      	b.n	8003866 <menu+0x2752>
 80037fe:	bf00      	nop
 8003800:	20000241 	.word	0x20000241
 8003804:	0800d77c 	.word	0x0800d77c
 8003808:	20000233 	.word	0x20000233
 800380c:	0800d720 	.word	0x0800d720
 8003810:	0800d734 	.word	0x0800d734
 8003814:	0800d744 	.word	0x0800d744
 8003818:	0800d758 	.word	0x0800d758
 800381c:	40010800 	.word	0x40010800
 8003820:	2000024f 	.word	0x2000024f
 8003824:	20000118 	.word	0x20000118
 8003828:	20000226 	.word	0x20000226
 800382c:	2000024c 	.word	0x2000024c
 8003830:	20000220 	.word	0x20000220
 8003834:	0800d78c 	.word	0x0800d78c
 8003838:	0800d7a0 	.word	0x0800d7a0
 800383c:	0800d440 	.word	0x0800d440
 8003840:	0800d7b4 	.word	0x0800d7b4
 8003844:	20000234 	.word	0x20000234
 8003848:	20000188 	.word	0x20000188
 800384c:	0800d7c4 	.word	0x0800d7c4
 8003850:	0800d7d8 	.word	0x0800d7d8
			} else if(dilSecim == 1) {
 8003854:	4b98      	ldr	r3, [pc, #608]	; (8003ab8 <menu+0x29a4>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d104      	bne.n	8003866 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 800385c:	4a97      	ldr	r2, [pc, #604]	; (8003abc <menu+0x29a8>)
 800385e:	2101      	movs	r1, #1
 8003860:	2002      	movs	r0, #2
 8003862:	f004 f9b7 	bl	8007bd4 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003866:	4b96      	ldr	r3, [pc, #600]	; (8003ac0 <menu+0x29ac>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	220a      	movs	r2, #10
 800386c:	4995      	ldr	r1, [pc, #596]	; (8003ac4 <menu+0x29b0>)
 800386e:	4618      	mov	r0, r3
 8003870:	f008 fd02 	bl	800c278 <itoa>
		lcd_print(2,16,snum);
 8003874:	4a93      	ldr	r2, [pc, #588]	; (8003ac4 <menu+0x29b0>)
 8003876:	2110      	movs	r1, #16
 8003878:	2002      	movs	r0, #2
 800387a:	f004 f9ab 	bl	8007bd4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800387e:	2102      	movs	r1, #2
 8003880:	4891      	ldr	r0, [pc, #580]	; (8003ac8 <menu+0x29b4>)
 8003882:	f005 fccd 	bl	8009220 <HAL_GPIO_ReadPin>
 8003886:	4603      	mov	r3, r0
 8003888:	2b01      	cmp	r3, #1
 800388a:	d115      	bne.n	80038b8 <menu+0x27a4>
 800388c:	4b8f      	ldr	r3, [pc, #572]	; (8003acc <menu+0x29b8>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	f083 0301 	eor.w	r3, r3, #1
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00e      	beq.n	80038b8 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 800389a:	4b89      	ldr	r3, [pc, #548]	; (8003ac0 <menu+0x29ac>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	3301      	adds	r3, #1
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4b87      	ldr	r3, [pc, #540]	; (8003ac0 <menu+0x29ac>)
 80038a4:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80038a6:	4b86      	ldr	r3, [pc, #536]	; (8003ac0 <menu+0x29ac>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	d902      	bls.n	80038b4 <menu+0x27a0>
				asagiValfTmr = 0;
 80038ae:	4b84      	ldr	r3, [pc, #528]	; (8003ac0 <menu+0x29ac>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038b4:	f001 f86e 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038b8:	2104      	movs	r1, #4
 80038ba:	4883      	ldr	r0, [pc, #524]	; (8003ac8 <menu+0x29b4>)
 80038bc:	f005 fcb0 	bl	8009220 <HAL_GPIO_ReadPin>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d115      	bne.n	80038f2 <menu+0x27de>
 80038c6:	4b81      	ldr	r3, [pc, #516]	; (8003acc <menu+0x29b8>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	f083 0301 	eor.w	r3, r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00e      	beq.n	80038f2 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 80038d4:	4b7a      	ldr	r3, [pc, #488]	; (8003ac0 <menu+0x29ac>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	3b01      	subs	r3, #1
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	4b78      	ldr	r3, [pc, #480]	; (8003ac0 <menu+0x29ac>)
 80038de:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80038e0:	4b77      	ldr	r3, [pc, #476]	; (8003ac0 <menu+0x29ac>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b06      	cmp	r3, #6
 80038e6:	d902      	bls.n	80038ee <menu+0x27da>
		   		asagiValfTmr = 5;
 80038e8:	4b75      	ldr	r3, [pc, #468]	; (8003ac0 <menu+0x29ac>)
 80038ea:	2205      	movs	r2, #5
 80038ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038ee:	f001 f851 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038f2:	2108      	movs	r1, #8
 80038f4:	4874      	ldr	r0, [pc, #464]	; (8003ac8 <menu+0x29b4>)
 80038f6:	f005 fc93 	bl	8009220 <HAL_GPIO_ReadPin>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d10d      	bne.n	800391c <menu+0x2808>
 8003900:	4b72      	ldr	r3, [pc, #456]	; (8003acc <menu+0x29b8>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	f083 0301 	eor.w	r3, r3, #1
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d006      	beq.n	800391c <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 800390e:	4b6c      	ldr	r3, [pc, #432]	; (8003ac0 <menu+0x29ac>)
 8003910:	781a      	ldrb	r2, [r3, #0]
 8003912:	4b6f      	ldr	r3, [pc, #444]	; (8003ad0 <menu+0x29bc>)
 8003914:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003916:	4b6f      	ldr	r3, [pc, #444]	; (8003ad4 <menu+0x29c0>)
 8003918:	2201      	movs	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 800391c:	4b6e      	ldr	r3, [pc, #440]	; (8003ad8 <menu+0x29c4>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b18      	cmp	r3, #24
 8003922:	f040 809d 	bne.w	8003a60 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003926:	4b6d      	ldr	r3, [pc, #436]	; (8003adc <menu+0x29c8>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d113      	bne.n	8003956 <menu+0x2842>
			if(dilSecim == 0) {
 800392e:	4b62      	ldr	r3, [pc, #392]	; (8003ab8 <menu+0x29a4>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d105      	bne.n	8003942 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003936:	4a6a      	ldr	r2, [pc, #424]	; (8003ae0 <menu+0x29cc>)
 8003938:	2101      	movs	r1, #1
 800393a:	2001      	movs	r0, #1
 800393c:	f004 f94a 	bl	8007bd4 <lcd_print>
 8003940:	e020      	b.n	8003984 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003942:	4b5d      	ldr	r3, [pc, #372]	; (8003ab8 <menu+0x29a4>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d11c      	bne.n	8003984 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 800394a:	4a66      	ldr	r2, [pc, #408]	; (8003ae4 <menu+0x29d0>)
 800394c:	2101      	movs	r1, #1
 800394e:	2001      	movs	r0, #1
 8003950:	f004 f940 	bl	8007bd4 <lcd_print>
 8003954:	e016      	b.n	8003984 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003956:	4b61      	ldr	r3, [pc, #388]	; (8003adc <menu+0x29c8>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d112      	bne.n	8003984 <menu+0x2870>
			if(dilSecim == 0) {
 800395e:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <menu+0x29a4>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d105      	bne.n	8003972 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003966:	4a60      	ldr	r2, [pc, #384]	; (8003ae8 <menu+0x29d4>)
 8003968:	2101      	movs	r1, #1
 800396a:	2001      	movs	r0, #1
 800396c:	f004 f932 	bl	8007bd4 <lcd_print>
 8003970:	e008      	b.n	8003984 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003972:	4b51      	ldr	r3, [pc, #324]	; (8003ab8 <menu+0x29a4>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d104      	bne.n	8003984 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 800397a:	4a5c      	ldr	r2, [pc, #368]	; (8003aec <menu+0x29d8>)
 800397c:	2101      	movs	r1, #1
 800397e:	2001      	movs	r0, #1
 8003980:	f004 f928 	bl	8007bd4 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003984:	4b4c      	ldr	r3, [pc, #304]	; (8003ab8 <menu+0x29a4>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d105      	bne.n	8003998 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 800398c:	4a58      	ldr	r2, [pc, #352]	; (8003af0 <menu+0x29dc>)
 800398e:	2101      	movs	r1, #1
 8003990:	2002      	movs	r0, #2
 8003992:	f004 f91f 	bl	8007bd4 <lcd_print>
 8003996:	e008      	b.n	80039aa <menu+0x2896>
			} else if(dilSecim == 1) {
 8003998:	4b47      	ldr	r3, [pc, #284]	; (8003ab8 <menu+0x29a4>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d104      	bne.n	80039aa <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 80039a0:	4a46      	ldr	r2, [pc, #280]	; (8003abc <menu+0x29a8>)
 80039a2:	2101      	movs	r1, #1
 80039a4:	2002      	movs	r0, #2
 80039a6:	f004 f915 	bl	8007bd4 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80039aa:	4b52      	ldr	r3, [pc, #328]	; (8003af4 <menu+0x29e0>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	220a      	movs	r2, #10
 80039b0:	4944      	ldr	r1, [pc, #272]	; (8003ac4 <menu+0x29b0>)
 80039b2:	4618      	mov	r0, r3
 80039b4:	f008 fc60 	bl	800c278 <itoa>
		lcd_print(2, 16, snum);
 80039b8:	4a42      	ldr	r2, [pc, #264]	; (8003ac4 <menu+0x29b0>)
 80039ba:	2110      	movs	r1, #16
 80039bc:	2002      	movs	r0, #2
 80039be:	f004 f909 	bl	8007bd4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039c2:	2102      	movs	r1, #2
 80039c4:	4840      	ldr	r0, [pc, #256]	; (8003ac8 <menu+0x29b4>)
 80039c6:	f005 fc2b 	bl	8009220 <HAL_GPIO_ReadPin>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d115      	bne.n	80039fc <menu+0x28e8>
 80039d0:	4b3e      	ldr	r3, [pc, #248]	; (8003acc <menu+0x29b8>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	f083 0301 	eor.w	r3, r3, #1
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00e      	beq.n	80039fc <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80039de:	4b45      	ldr	r3, [pc, #276]	; (8003af4 <menu+0x29e0>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <menu+0x29e0>)
 80039e8:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 80039ea:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <menu+0x29e0>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d902      	bls.n	80039f8 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 80039f2:	4b40      	ldr	r3, [pc, #256]	; (8003af4 <menu+0x29e0>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039f8:	f000 ffcc 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039fc:	2104      	movs	r1, #4
 80039fe:	4832      	ldr	r0, [pc, #200]	; (8003ac8 <menu+0x29b4>)
 8003a00:	f005 fc0e 	bl	8009220 <HAL_GPIO_ReadPin>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d115      	bne.n	8003a36 <menu+0x2922>
 8003a0a:	4b30      	ldr	r3, [pc, #192]	; (8003acc <menu+0x29b8>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	f083 0301 	eor.w	r3, r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00e      	beq.n	8003a36 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003a18:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <menu+0x29e0>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	4b34      	ldr	r3, [pc, #208]	; (8003af4 <menu+0x29e0>)
 8003a22:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003a24:	4b33      	ldr	r3, [pc, #204]	; (8003af4 <menu+0x29e0>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b06      	cmp	r3, #6
 8003a2a:	d902      	bls.n	8003a32 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003a2c:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <menu+0x29e0>)
 8003a2e:	2205      	movs	r2, #5
 8003a30:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a32:	f000 ffaf 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a36:	2108      	movs	r1, #8
 8003a38:	4823      	ldr	r0, [pc, #140]	; (8003ac8 <menu+0x29b4>)
 8003a3a:	f005 fbf1 	bl	8009220 <HAL_GPIO_ReadPin>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d10d      	bne.n	8003a60 <menu+0x294c>
 8003a44:	4b21      	ldr	r3, [pc, #132]	; (8003acc <menu+0x29b8>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	f083 0301 	eor.w	r3, r3, #1
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003a52:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <menu+0x29e0>)
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <menu+0x29bc>)
 8003a58:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <menu+0x29c0>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003a60:	4b1d      	ldr	r3, [pc, #116]	; (8003ad8 <menu+0x29c4>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b19      	cmp	r3, #25
 8003a66:	f040 80c4 	bne.w	8003bf2 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003a6a:	4b1c      	ldr	r3, [pc, #112]	; (8003adc <menu+0x29c8>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d113      	bne.n	8003a9a <menu+0x2986>
			if(dilSecim == 0) {
 8003a72:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <menu+0x29a4>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d105      	bne.n	8003a86 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003a7a:	4a1f      	ldr	r2, [pc, #124]	; (8003af8 <menu+0x29e4>)
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f004 f8a8 	bl	8007bd4 <lcd_print>
 8003a84:	e047      	b.n	8003b16 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <menu+0x29a4>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d143      	bne.n	8003b16 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003a8e:	4a1b      	ldr	r2, [pc, #108]	; (8003afc <menu+0x29e8>)
 8003a90:	2101      	movs	r1, #1
 8003a92:	2001      	movs	r0, #1
 8003a94:	f004 f89e 	bl	8007bd4 <lcd_print>
 8003a98:	e03d      	b.n	8003b16 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <menu+0x29c8>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d139      	bne.n	8003b16 <menu+0x2a02>
			if(dilSecim == 0) {
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <menu+0x29a4>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d12c      	bne.n	8003b04 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003aaa:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <menu+0x29ec>)
 8003aac:	2101      	movs	r1, #1
 8003aae:	2001      	movs	r0, #1
 8003ab0:	f004 f890 	bl	8007bd4 <lcd_print>
 8003ab4:	e02f      	b.n	8003b16 <menu+0x2a02>
 8003ab6:	bf00      	nop
 8003ab8:	20000241 	.word	0x20000241
 8003abc:	0800d7b4 	.word	0x0800d7b4
 8003ac0:	20000235 	.word	0x20000235
 8003ac4:	20000188 	.word	0x20000188
 8003ac8:	40010800 	.word	0x40010800
 8003acc:	2000024f 	.word	0x2000024f
 8003ad0:	20000118 	.word	0x20000118
 8003ad4:	2000024c 	.word	0x2000024c
 8003ad8:	20000220 	.word	0x20000220
 8003adc:	2000022f 	.word	0x2000022f
 8003ae0:	0800d7ec 	.word	0x0800d7ec
 8003ae4:	0800d800 	.word	0x0800d800
 8003ae8:	0800d814 	.word	0x0800d814
 8003aec:	0800d828 	.word	0x0800d828
 8003af0:	0800d440 	.word	0x0800d440
 8003af4:	20000236 	.word	0x20000236
 8003af8:	0800d83c 	.word	0x0800d83c
 8003afc:	0800d850 	.word	0x0800d850
 8003b00:	0800d864 	.word	0x0800d864
			} else if(dilSecim == 1) {
 8003b04:	4b73      	ldr	r3, [pc, #460]	; (8003cd4 <menu+0x2bc0>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d104      	bne.n	8003b16 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003b0c:	4a72      	ldr	r2, [pc, #456]	; (8003cd8 <menu+0x2bc4>)
 8003b0e:	2101      	movs	r1, #1
 8003b10:	2001      	movs	r0, #1
 8003b12:	f004 f85f 	bl	8007bd4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003b16:	4b6f      	ldr	r3, [pc, #444]	; (8003cd4 <menu+0x2bc0>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b1e:	4a6f      	ldr	r2, [pc, #444]	; (8003cdc <menu+0x2bc8>)
 8003b20:	2101      	movs	r1, #1
 8003b22:	2002      	movs	r0, #2
 8003b24:	f004 f856 	bl	8007bd4 <lcd_print>
 8003b28:	e008      	b.n	8003b3c <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003b2a:	4b6a      	ldr	r3, [pc, #424]	; (8003cd4 <menu+0x2bc0>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d104      	bne.n	8003b3c <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003b32:	4a6b      	ldr	r2, [pc, #428]	; (8003ce0 <menu+0x2bcc>)
 8003b34:	2101      	movs	r1, #1
 8003b36:	2002      	movs	r0, #2
 8003b38:	f004 f84c 	bl	8007bd4 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003b3c:	4b69      	ldr	r3, [pc, #420]	; (8003ce4 <menu+0x2bd0>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	220a      	movs	r2, #10
 8003b42:	4969      	ldr	r1, [pc, #420]	; (8003ce8 <menu+0x2bd4>)
 8003b44:	4618      	mov	r0, r3
 8003b46:	f008 fb97 	bl	800c278 <itoa>
		lcd_print(2,16,snum);
 8003b4a:	4a67      	ldr	r2, [pc, #412]	; (8003ce8 <menu+0x2bd4>)
 8003b4c:	2110      	movs	r1, #16
 8003b4e:	2002      	movs	r0, #2
 8003b50:	f004 f840 	bl	8007bd4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b54:	2102      	movs	r1, #2
 8003b56:	4865      	ldr	r0, [pc, #404]	; (8003cec <menu+0x2bd8>)
 8003b58:	f005 fb62 	bl	8009220 <HAL_GPIO_ReadPin>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d115      	bne.n	8003b8e <menu+0x2a7a>
 8003b62:	4b63      	ldr	r3, [pc, #396]	; (8003cf0 <menu+0x2bdc>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	f083 0301 	eor.w	r3, r3, #1
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00e      	beq.n	8003b8e <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003b70:	4b5c      	ldr	r3, [pc, #368]	; (8003ce4 <menu+0x2bd0>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	4b5a      	ldr	r3, [pc, #360]	; (8003ce4 <menu+0x2bd0>)
 8003b7a:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003b7c:	4b59      	ldr	r3, [pc, #356]	; (8003ce4 <menu+0x2bd0>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b05      	cmp	r3, #5
 8003b82:	d902      	bls.n	8003b8a <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003b84:	4b57      	ldr	r3, [pc, #348]	; (8003ce4 <menu+0x2bd0>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b8a:	f000 ff03 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b8e:	2104      	movs	r1, #4
 8003b90:	4856      	ldr	r0, [pc, #344]	; (8003cec <menu+0x2bd8>)
 8003b92:	f005 fb45 	bl	8009220 <HAL_GPIO_ReadPin>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d115      	bne.n	8003bc8 <menu+0x2ab4>
 8003b9c:	4b54      	ldr	r3, [pc, #336]	; (8003cf0 <menu+0x2bdc>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	f083 0301 	eor.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00e      	beq.n	8003bc8 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003baa:	4b4e      	ldr	r3, [pc, #312]	; (8003ce4 <menu+0x2bd0>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4b4c      	ldr	r3, [pc, #304]	; (8003ce4 <menu+0x2bd0>)
 8003bb4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003bb6:	4b4b      	ldr	r3, [pc, #300]	; (8003ce4 <menu+0x2bd0>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b06      	cmp	r3, #6
 8003bbc:	d902      	bls.n	8003bc4 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003bbe:	4b49      	ldr	r3, [pc, #292]	; (8003ce4 <menu+0x2bd0>)
 8003bc0:	2205      	movs	r2, #5
 8003bc2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003bc4:	f000 fee6 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bc8:	2108      	movs	r1, #8
 8003bca:	4848      	ldr	r0, [pc, #288]	; (8003cec <menu+0x2bd8>)
 8003bcc:	f005 fb28 	bl	8009220 <HAL_GPIO_ReadPin>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d10d      	bne.n	8003bf2 <menu+0x2ade>
 8003bd6:	4b46      	ldr	r3, [pc, #280]	; (8003cf0 <menu+0x2bdc>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	f083 0301 	eor.w	r3, r3, #1
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d006      	beq.n	8003bf2 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003be4:	4b3f      	ldr	r3, [pc, #252]	; (8003ce4 <menu+0x2bd0>)
 8003be6:	781a      	ldrb	r2, [r3, #0]
 8003be8:	4b42      	ldr	r3, [pc, #264]	; (8003cf4 <menu+0x2be0>)
 8003bea:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003bec:	4b42      	ldr	r3, [pc, #264]	; (8003cf8 <menu+0x2be4>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003bf2:	4b42      	ldr	r3, [pc, #264]	; (8003cfc <menu+0x2be8>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b1a      	cmp	r3, #26
 8003bf8:	f040 80ec 	bne.w	8003dd4 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003bfc:	4b35      	ldr	r3, [pc, #212]	; (8003cd4 <menu+0x2bc0>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003c04:	4a3e      	ldr	r2, [pc, #248]	; (8003d00 <menu+0x2bec>)
 8003c06:	2101      	movs	r1, #1
 8003c08:	2001      	movs	r0, #1
 8003c0a:	f003 ffe3 	bl	8007bd4 <lcd_print>
 8003c0e:	e008      	b.n	8003c22 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003c10:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <menu+0x2bc0>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d104      	bne.n	8003c22 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003c18:	4a3a      	ldr	r2, [pc, #232]	; (8003d04 <menu+0x2bf0>)
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f003 ffd9 	bl	8007bd4 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003c22:	4b39      	ldr	r3, [pc, #228]	; (8003d08 <menu+0x2bf4>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b63      	cmp	r3, #99	; 0x63
 8003c28:	d91e      	bls.n	8003c68 <menu+0x2b54>
			if(dilSecim == 0) {
 8003c2a:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <menu+0x2bc0>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d104      	bne.n	8003c3c <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c32:	4a2a      	ldr	r2, [pc, #168]	; (8003cdc <menu+0x2bc8>)
 8003c34:	2101      	movs	r1, #1
 8003c36:	2002      	movs	r0, #2
 8003c38:	f003 ffcc 	bl	8007bd4 <lcd_print>
			}
			if(dilSecim == 1) {
 8003c3c:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <menu+0x2bc0>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d104      	bne.n	8003c4e <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003c44:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <menu+0x2bcc>)
 8003c46:	2101      	movs	r1, #1
 8003c48:	2002      	movs	r0, #2
 8003c4a:	f003 ffc3 	bl	8007bd4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003c4e:	4b2e      	ldr	r3, [pc, #184]	; (8003d08 <menu+0x2bf4>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	220a      	movs	r2, #10
 8003c54:	4924      	ldr	r1, [pc, #144]	; (8003ce8 <menu+0x2bd4>)
 8003c56:	4618      	mov	r0, r3
 8003c58:	f008 fb0e 	bl	800c278 <itoa>
			lcd_print(2,14,snum);
 8003c5c:	4a22      	ldr	r2, [pc, #136]	; (8003ce8 <menu+0x2bd4>)
 8003c5e:	210e      	movs	r1, #14
 8003c60:	2002      	movs	r0, #2
 8003c62:	f003 ffb7 	bl	8007bd4 <lcd_print>
 8003c66:	e066      	b.n	8003d36 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003c68:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <menu+0x2bf4>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b09      	cmp	r3, #9
 8003c6e:	d923      	bls.n	8003cb8 <menu+0x2ba4>
 8003c70:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <menu+0x2bf4>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b63      	cmp	r3, #99	; 0x63
 8003c76:	d81f      	bhi.n	8003cb8 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003c78:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <menu+0x2bc0>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c80:	4a16      	ldr	r2, [pc, #88]	; (8003cdc <menu+0x2bc8>)
 8003c82:	2101      	movs	r1, #1
 8003c84:	2002      	movs	r0, #2
 8003c86:	f003 ffa5 	bl	8007bd4 <lcd_print>
 8003c8a:	e008      	b.n	8003c9e <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <menu+0x2bc0>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d104      	bne.n	8003c9e <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003c94:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <menu+0x2bcc>)
 8003c96:	2101      	movs	r1, #1
 8003c98:	2002      	movs	r0, #2
 8003c9a:	f003 ff9b 	bl	8007bd4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <menu+0x2bf4>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	220a      	movs	r2, #10
 8003ca4:	4910      	ldr	r1, [pc, #64]	; (8003ce8 <menu+0x2bd4>)
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f008 fae6 	bl	800c278 <itoa>
			lcd_print(2, 15, snum);
 8003cac:	4a0e      	ldr	r2, [pc, #56]	; (8003ce8 <menu+0x2bd4>)
 8003cae:	210f      	movs	r1, #15
 8003cb0:	2002      	movs	r0, #2
 8003cb2:	f003 ff8f 	bl	8007bd4 <lcd_print>
 8003cb6:	e03e      	b.n	8003d36 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003cb8:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <menu+0x2bf4>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b09      	cmp	r3, #9
 8003cbe:	d83a      	bhi.n	8003d36 <menu+0x2c22>
			if(dilSecim == 0) {
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <menu+0x2bc0>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d121      	bne.n	8003d0c <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cc8:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <menu+0x2bc8>)
 8003cca:	2101      	movs	r1, #1
 8003ccc:	2002      	movs	r0, #2
 8003cce:	f003 ff81 	bl	8007bd4 <lcd_print>
 8003cd2:	e024      	b.n	8003d1e <menu+0x2c0a>
 8003cd4:	20000241 	.word	0x20000241
 8003cd8:	0800d878 	.word	0x0800d878
 8003cdc:	0800d440 	.word	0x0800d440
 8003ce0:	0800d7b4 	.word	0x0800d7b4
 8003ce4:	20000237 	.word	0x20000237
 8003ce8:	20000188 	.word	0x20000188
 8003cec:	40010800 	.word	0x40010800
 8003cf0:	2000024f 	.word	0x2000024f
 8003cf4:	20000118 	.word	0x20000118
 8003cf8:	2000024c 	.word	0x2000024c
 8003cfc:	20000220 	.word	0x20000220
 8003d00:	0800d88c 	.word	0x0800d88c
 8003d04:	0800d8a0 	.word	0x0800d8a0
 8003d08:	20000238 	.word	0x20000238
			} else if(dilSecim == 1) {
 8003d0c:	4b8f      	ldr	r3, [pc, #572]	; (8003f4c <menu+0x2e38>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d104      	bne.n	8003d1e <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003d14:	4a8e      	ldr	r2, [pc, #568]	; (8003f50 <menu+0x2e3c>)
 8003d16:	2101      	movs	r1, #1
 8003d18:	2002      	movs	r0, #2
 8003d1a:	f003 ff5b 	bl	8007bd4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d1e:	4b8d      	ldr	r3, [pc, #564]	; (8003f54 <menu+0x2e40>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	220a      	movs	r2, #10
 8003d24:	498c      	ldr	r1, [pc, #560]	; (8003f58 <menu+0x2e44>)
 8003d26:	4618      	mov	r0, r3
 8003d28:	f008 faa6 	bl	800c278 <itoa>
			lcd_print(2, 16, snum);
 8003d2c:	4a8a      	ldr	r2, [pc, #552]	; (8003f58 <menu+0x2e44>)
 8003d2e:	2110      	movs	r1, #16
 8003d30:	2002      	movs	r0, #2
 8003d32:	f003 ff4f 	bl	8007bd4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d36:	2102      	movs	r1, #2
 8003d38:	4888      	ldr	r0, [pc, #544]	; (8003f5c <menu+0x2e48>)
 8003d3a:	f005 fa71 	bl	8009220 <HAL_GPIO_ReadPin>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d115      	bne.n	8003d70 <menu+0x2c5c>
 8003d44:	4b86      	ldr	r3, [pc, #536]	; (8003f60 <menu+0x2e4c>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	f083 0301 	eor.w	r3, r3, #1
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00e      	beq.n	8003d70 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003d52:	4b80      	ldr	r3, [pc, #512]	; (8003f54 <menu+0x2e40>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	3301      	adds	r3, #1
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	4b7e      	ldr	r3, [pc, #504]	; (8003f54 <menu+0x2e40>)
 8003d5c:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003d5e:	4b7d      	ldr	r3, [pc, #500]	; (8003f54 <menu+0x2e40>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2bb4      	cmp	r3, #180	; 0xb4
 8003d64:	d902      	bls.n	8003d6c <menu+0x2c58>
				makineCalismaTmr = 0;
 8003d66:	4b7b      	ldr	r3, [pc, #492]	; (8003f54 <menu+0x2e40>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d6c:	f000 fe12 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d70:	2104      	movs	r1, #4
 8003d72:	487a      	ldr	r0, [pc, #488]	; (8003f5c <menu+0x2e48>)
 8003d74:	f005 fa54 	bl	8009220 <HAL_GPIO_ReadPin>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d115      	bne.n	8003daa <menu+0x2c96>
 8003d7e:	4b78      	ldr	r3, [pc, #480]	; (8003f60 <menu+0x2e4c>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	f083 0301 	eor.w	r3, r3, #1
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00e      	beq.n	8003daa <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003d8c:	4b71      	ldr	r3, [pc, #452]	; (8003f54 <menu+0x2e40>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	4b6f      	ldr	r3, [pc, #444]	; (8003f54 <menu+0x2e40>)
 8003d96:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003d98:	4b6e      	ldr	r3, [pc, #440]	; (8003f54 <menu+0x2e40>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2bb5      	cmp	r3, #181	; 0xb5
 8003d9e:	d902      	bls.n	8003da6 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003da0:	4b6c      	ldr	r3, [pc, #432]	; (8003f54 <menu+0x2e40>)
 8003da2:	22b4      	movs	r2, #180	; 0xb4
 8003da4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003da6:	f000 fdf5 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003daa:	2108      	movs	r1, #8
 8003dac:	486b      	ldr	r0, [pc, #428]	; (8003f5c <menu+0x2e48>)
 8003dae:	f005 fa37 	bl	8009220 <HAL_GPIO_ReadPin>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d10d      	bne.n	8003dd4 <menu+0x2cc0>
 8003db8:	4b69      	ldr	r3, [pc, #420]	; (8003f60 <menu+0x2e4c>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	f083 0301 	eor.w	r3, r3, #1
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d006      	beq.n	8003dd4 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003dc6:	4b63      	ldr	r3, [pc, #396]	; (8003f54 <menu+0x2e40>)
 8003dc8:	781a      	ldrb	r2, [r3, #0]
 8003dca:	4b66      	ldr	r3, [pc, #408]	; (8003f64 <menu+0x2e50>)
 8003dcc:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003dce:	4b66      	ldr	r3, [pc, #408]	; (8003f68 <menu+0x2e54>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003dd4:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <menu+0x2e58>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b1b      	cmp	r3, #27
 8003dda:	f040 8083 	bne.w	8003ee4 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003dde:	4a64      	ldr	r2, [pc, #400]	; (8003f70 <menu+0x2e5c>)
 8003de0:	2101      	movs	r1, #1
 8003de2:	2001      	movs	r0, #1
 8003de4:	f003 fef6 	bl	8007bd4 <lcd_print>

		if(buzzer == 0) {
 8003de8:	4b62      	ldr	r3, [pc, #392]	; (8003f74 <menu+0x2e60>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d113      	bne.n	8003e18 <menu+0x2d04>
			if(dilSecim == 0) {
 8003df0:	4b56      	ldr	r3, [pc, #344]	; (8003f4c <menu+0x2e38>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d105      	bne.n	8003e04 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003df8:	4a5f      	ldr	r2, [pc, #380]	; (8003f78 <menu+0x2e64>)
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	2002      	movs	r0, #2
 8003dfe:	f003 fee9 	bl	8007bd4 <lcd_print>
 8003e02:	e020      	b.n	8003e46 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003e04:	4b51      	ldr	r3, [pc, #324]	; (8003f4c <menu+0x2e38>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d11c      	bne.n	8003e46 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003e0c:	4a5b      	ldr	r2, [pc, #364]	; (8003f7c <menu+0x2e68>)
 8003e0e:	2101      	movs	r1, #1
 8003e10:	2002      	movs	r0, #2
 8003e12:	f003 fedf 	bl	8007bd4 <lcd_print>
 8003e16:	e016      	b.n	8003e46 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003e18:	4b56      	ldr	r3, [pc, #344]	; (8003f74 <menu+0x2e60>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d112      	bne.n	8003e46 <menu+0x2d32>
			if(dilSecim == 0) {
 8003e20:	4b4a      	ldr	r3, [pc, #296]	; (8003f4c <menu+0x2e38>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003e28:	4a55      	ldr	r2, [pc, #340]	; (8003f80 <menu+0x2e6c>)
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	2002      	movs	r0, #2
 8003e2e:	f003 fed1 	bl	8007bd4 <lcd_print>
 8003e32:	e008      	b.n	8003e46 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003e34:	4b45      	ldr	r3, [pc, #276]	; (8003f4c <menu+0x2e38>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d104      	bne.n	8003e46 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003e3c:	4a51      	ldr	r2, [pc, #324]	; (8003f84 <menu+0x2e70>)
 8003e3e:	2101      	movs	r1, #1
 8003e40:	2002      	movs	r0, #2
 8003e42:	f003 fec7 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e46:	2102      	movs	r1, #2
 8003e48:	4844      	ldr	r0, [pc, #272]	; (8003f5c <menu+0x2e48>)
 8003e4a:	f005 f9e9 	bl	8009220 <HAL_GPIO_ReadPin>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d115      	bne.n	8003e80 <menu+0x2d6c>
 8003e54:	4b42      	ldr	r3, [pc, #264]	; (8003f60 <menu+0x2e4c>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	f083 0301 	eor.w	r3, r3, #1
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00e      	beq.n	8003e80 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003e62:	4b44      	ldr	r3, [pc, #272]	; (8003f74 <menu+0x2e60>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	3301      	adds	r3, #1
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	4b42      	ldr	r3, [pc, #264]	; (8003f74 <menu+0x2e60>)
 8003e6c:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003e6e:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <menu+0x2e60>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d902      	bls.n	8003e7c <menu+0x2d68>
				buzzer = 0;
 8003e76:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <menu+0x2e60>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e7c:	f000 fd8a 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e80:	2104      	movs	r1, #4
 8003e82:	4836      	ldr	r0, [pc, #216]	; (8003f5c <menu+0x2e48>)
 8003e84:	f005 f9cc 	bl	8009220 <HAL_GPIO_ReadPin>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d115      	bne.n	8003eba <menu+0x2da6>
 8003e8e:	4b34      	ldr	r3, [pc, #208]	; (8003f60 <menu+0x2e4c>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	f083 0301 	eor.w	r3, r3, #1
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00e      	beq.n	8003eba <menu+0x2da6>
			buzzer = buzzer - 1;
 8003e9c:	4b35      	ldr	r3, [pc, #212]	; (8003f74 <menu+0x2e60>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	4b33      	ldr	r3, [pc, #204]	; (8003f74 <menu+0x2e60>)
 8003ea6:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003ea8:	4b32      	ldr	r3, [pc, #200]	; (8003f74 <menu+0x2e60>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <menu+0x2da2>
		   		buzzer = 1;
 8003eb0:	4b30      	ldr	r3, [pc, #192]	; (8003f74 <menu+0x2e60>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003eb6:	f000 fd6d 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eba:	2108      	movs	r1, #8
 8003ebc:	4827      	ldr	r0, [pc, #156]	; (8003f5c <menu+0x2e48>)
 8003ebe:	f005 f9af 	bl	8009220 <HAL_GPIO_ReadPin>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d10d      	bne.n	8003ee4 <menu+0x2dd0>
 8003ec8:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <menu+0x2e4c>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	f083 0301 	eor.w	r3, r3, #1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d006      	beq.n	8003ee4 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003ed6:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <menu+0x2e60>)
 8003ed8:	781a      	ldrb	r2, [r3, #0]
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <menu+0x2e50>)
 8003edc:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <menu+0x2e54>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003ee4:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <menu+0x2e58>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b1c      	cmp	r3, #28
 8003eea:	f040 80ab 	bne.w	8004044 <menu+0x2f30>
		calismaSayModu = 0;
 8003eee:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <menu+0x2e74>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003ef4:	4a25      	ldr	r2, [pc, #148]	; (8003f8c <menu+0x2e78>)
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	2001      	movs	r0, #1
 8003efa:	f003 fe6b 	bl	8007bd4 <lcd_print>

		if(demoMode == 0) {
 8003efe:	4b24      	ldr	r3, [pc, #144]	; (8003f90 <menu+0x2e7c>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d113      	bne.n	8003f2e <menu+0x2e1a>
			if(dilSecim == 0) {
 8003f06:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <menu+0x2e38>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d105      	bne.n	8003f1a <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003f0e:	4a1a      	ldr	r2, [pc, #104]	; (8003f78 <menu+0x2e64>)
 8003f10:	2101      	movs	r1, #1
 8003f12:	2002      	movs	r0, #2
 8003f14:	f003 fe5e 	bl	8007bd4 <lcd_print>
 8003f18:	e045      	b.n	8003fa6 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <menu+0x2e38>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d141      	bne.n	8003fa6 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003f22:	4a16      	ldr	r2, [pc, #88]	; (8003f7c <menu+0x2e68>)
 8003f24:	2101      	movs	r1, #1
 8003f26:	2002      	movs	r0, #2
 8003f28:	f003 fe54 	bl	8007bd4 <lcd_print>
 8003f2c:	e03b      	b.n	8003fa6 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8003f2e:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <menu+0x2e7c>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d137      	bne.n	8003fa6 <menu+0x2e92>
			if(dilSecim == 0){
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <menu+0x2e38>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d12a      	bne.n	8003f94 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8003f3e:	4a10      	ldr	r2, [pc, #64]	; (8003f80 <menu+0x2e6c>)
 8003f40:	2101      	movs	r1, #1
 8003f42:	2002      	movs	r0, #2
 8003f44:	f003 fe46 	bl	8007bd4 <lcd_print>
 8003f48:	e02d      	b.n	8003fa6 <menu+0x2e92>
 8003f4a:	bf00      	nop
 8003f4c:	20000241 	.word	0x20000241
 8003f50:	0800d7b4 	.word	0x0800d7b4
 8003f54:	20000238 	.word	0x20000238
 8003f58:	20000188 	.word	0x20000188
 8003f5c:	40010800 	.word	0x40010800
 8003f60:	2000024f 	.word	0x2000024f
 8003f64:	20000118 	.word	0x20000118
 8003f68:	2000024c 	.word	0x2000024c
 8003f6c:	20000220 	.word	0x20000220
 8003f70:	0800d8b4 	.word	0x0800d8b4
 8003f74:	2000023c 	.word	0x2000023c
 8003f78:	0800d1dc 	.word	0x0800d1dc
 8003f7c:	0800d1f0 	.word	0x0800d1f0
 8003f80:	0800d23c 	.word	0x0800d23c
 8003f84:	0800d250 	.word	0x0800d250
 8003f88:	20000240 	.word	0x20000240
 8003f8c:	0800d8c8 	.word	0x0800d8c8
 8003f90:	2000023e 	.word	0x2000023e
			} else if(dilSecim == 1) {
 8003f94:	4b71      	ldr	r3, [pc, #452]	; (800415c <menu+0x3048>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d104      	bne.n	8003fa6 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003f9c:	4a70      	ldr	r2, [pc, #448]	; (8004160 <menu+0x304c>)
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	2002      	movs	r0, #2
 8003fa2:	f003 fe17 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	486e      	ldr	r0, [pc, #440]	; (8004164 <menu+0x3050>)
 8003faa:	f005 f939 	bl	8009220 <HAL_GPIO_ReadPin>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d115      	bne.n	8003fe0 <menu+0x2ecc>
 8003fb4:	4b6c      	ldr	r3, [pc, #432]	; (8004168 <menu+0x3054>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	f083 0301 	eor.w	r3, r3, #1
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00e      	beq.n	8003fe0 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8003fc2:	4b6a      	ldr	r3, [pc, #424]	; (800416c <menu+0x3058>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4b68      	ldr	r3, [pc, #416]	; (800416c <menu+0x3058>)
 8003fcc:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003fce:	4b67      	ldr	r3, [pc, #412]	; (800416c <menu+0x3058>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d902      	bls.n	8003fdc <menu+0x2ec8>
				demoMode = 0;
 8003fd6:	4b65      	ldr	r3, [pc, #404]	; (800416c <menu+0x3058>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003fdc:	f000 fcda 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fe0:	2104      	movs	r1, #4
 8003fe2:	4860      	ldr	r0, [pc, #384]	; (8004164 <menu+0x3050>)
 8003fe4:	f005 f91c 	bl	8009220 <HAL_GPIO_ReadPin>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d115      	bne.n	800401a <menu+0x2f06>
 8003fee:	4b5e      	ldr	r3, [pc, #376]	; (8004168 <menu+0x3054>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	f083 0301 	eor.w	r3, r3, #1
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00e      	beq.n	800401a <menu+0x2f06>
			demoMode = demoMode - 1;
 8003ffc:	4b5b      	ldr	r3, [pc, #364]	; (800416c <menu+0x3058>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	3b01      	subs	r3, #1
 8004002:	b2da      	uxtb	r2, r3
 8004004:	4b59      	ldr	r3, [pc, #356]	; (800416c <menu+0x3058>)
 8004006:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004008:	4b58      	ldr	r3, [pc, #352]	; (800416c <menu+0x3058>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <menu+0x2f02>
		   		demoMode = 1;
 8004010:	4b56      	ldr	r3, [pc, #344]	; (800416c <menu+0x3058>)
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004016:	f000 fcbd 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800401a:	2108      	movs	r1, #8
 800401c:	4851      	ldr	r0, [pc, #324]	; (8004164 <menu+0x3050>)
 800401e:	f005 f8ff 	bl	8009220 <HAL_GPIO_ReadPin>
 8004022:	4603      	mov	r3, r0
 8004024:	2b01      	cmp	r3, #1
 8004026:	d10d      	bne.n	8004044 <menu+0x2f30>
 8004028:	4b4f      	ldr	r3, [pc, #316]	; (8004168 <menu+0x3054>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	f083 0301 	eor.w	r3, r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d006      	beq.n	8004044 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004036:	4b4d      	ldr	r3, [pc, #308]	; (800416c <menu+0x3058>)
 8004038:	781a      	ldrb	r2, [r3, #0]
 800403a:	4b4d      	ldr	r3, [pc, #308]	; (8004170 <menu+0x305c>)
 800403c:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800403e:	4b4d      	ldr	r3, [pc, #308]	; (8004174 <menu+0x3060>)
 8004040:	2201      	movs	r2, #1
 8004042:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004044:	4b4c      	ldr	r3, [pc, #304]	; (8004178 <menu+0x3064>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b1d      	cmp	r3, #29
 800404a:	f040 8132 	bne.w	80042b2 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800404e:	4b4b      	ldr	r3, [pc, #300]	; (800417c <menu+0x3068>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d113      	bne.n	800407e <menu+0x2f6a>
 8004056:	4b4a      	ldr	r3, [pc, #296]	; (8004180 <menu+0x306c>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10f      	bne.n	800407e <menu+0x2f6a>
 800405e:	4b49      	ldr	r3, [pc, #292]	; (8004184 <menu+0x3070>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <menu+0x2f6a>
 8004066:	4b48      	ldr	r3, [pc, #288]	; (8004188 <menu+0x3074>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d107      	bne.n	800407e <menu+0x2f6a>
 800406e:	4b47      	ldr	r3, [pc, #284]	; (800418c <menu+0x3078>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d103      	bne.n	800407e <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004076:	4b46      	ldr	r3, [pc, #280]	; (8004190 <menu+0x307c>)
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	e002      	b.n	8004084 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800407e:	4b44      	ldr	r3, [pc, #272]	; (8004190 <menu+0x307c>)
 8004080:	2201      	movs	r2, #1
 8004082:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004084:	4b43      	ldr	r3, [pc, #268]	; (8004194 <menu+0x3080>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d154      	bne.n	8004136 <menu+0x3022>
			if(dilSecim == 0) {
 800408c:	4b33      	ldr	r3, [pc, #204]	; (800415c <menu+0x3048>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d105      	bne.n	80040a0 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004094:	4a40      	ldr	r2, [pc, #256]	; (8004198 <menu+0x3084>)
 8004096:	2101      	movs	r1, #1
 8004098:	2001      	movs	r0, #1
 800409a:	f003 fd9b 	bl	8007bd4 <lcd_print>
 800409e:	e008      	b.n	80040b2 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80040a0:	4b2e      	ldr	r3, [pc, #184]	; (800415c <menu+0x3048>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d104      	bne.n	80040b2 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80040a8:	4a3c      	ldr	r2, [pc, #240]	; (800419c <menu+0x3088>)
 80040aa:	2101      	movs	r1, #1
 80040ac:	2001      	movs	r0, #1
 80040ae:	f003 fd91 	bl	8007bd4 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80040b2:	4b36      	ldr	r3, [pc, #216]	; (800418c <menu+0x3078>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	220a      	movs	r2, #10
 80040b8:	4939      	ldr	r1, [pc, #228]	; (80041a0 <menu+0x308c>)
 80040ba:	4618      	mov	r0, r3
 80040bc:	f008 f8dc 	bl	800c278 <itoa>
			lcd_print(2, 12, snum);
 80040c0:	4a37      	ldr	r2, [pc, #220]	; (80041a0 <menu+0x308c>)
 80040c2:	210c      	movs	r1, #12
 80040c4:	2002      	movs	r0, #2
 80040c6:	f003 fd85 	bl	8007bd4 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80040ca:	4b2f      	ldr	r3, [pc, #188]	; (8004188 <menu+0x3074>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	220a      	movs	r2, #10
 80040d0:	4933      	ldr	r1, [pc, #204]	; (80041a0 <menu+0x308c>)
 80040d2:	4618      	mov	r0, r3
 80040d4:	f008 f8d0 	bl	800c278 <itoa>
			lcd_print(2, 13, snum);
 80040d8:	4a31      	ldr	r2, [pc, #196]	; (80041a0 <menu+0x308c>)
 80040da:	210d      	movs	r1, #13
 80040dc:	2002      	movs	r0, #2
 80040de:	f003 fd79 	bl	8007bd4 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80040e2:	4b28      	ldr	r3, [pc, #160]	; (8004184 <menu+0x3070>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	220a      	movs	r2, #10
 80040e8:	492d      	ldr	r1, [pc, #180]	; (80041a0 <menu+0x308c>)
 80040ea:	4618      	mov	r0, r3
 80040ec:	f008 f8c4 	bl	800c278 <itoa>
			lcd_print(2, 14, snum);
 80040f0:	4a2b      	ldr	r2, [pc, #172]	; (80041a0 <menu+0x308c>)
 80040f2:	210e      	movs	r1, #14
 80040f4:	2002      	movs	r0, #2
 80040f6:	f003 fd6d 	bl	8007bd4 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <menu+0x306c>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	220a      	movs	r2, #10
 8004100:	4927      	ldr	r1, [pc, #156]	; (80041a0 <menu+0x308c>)
 8004102:	4618      	mov	r0, r3
 8004104:	f008 f8b8 	bl	800c278 <itoa>
			lcd_print(2, 15, snum);
 8004108:	4a25      	ldr	r2, [pc, #148]	; (80041a0 <menu+0x308c>)
 800410a:	210f      	movs	r1, #15
 800410c:	2002      	movs	r0, #2
 800410e:	f003 fd61 	bl	8007bd4 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004112:	4b1a      	ldr	r3, [pc, #104]	; (800417c <menu+0x3068>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	220a      	movs	r2, #10
 8004118:	4921      	ldr	r1, [pc, #132]	; (80041a0 <menu+0x308c>)
 800411a:	4618      	mov	r0, r3
 800411c:	f008 f8ac 	bl	800c278 <itoa>
			lcd_print(2, 16, snum);
 8004120:	4a1f      	ldr	r2, [pc, #124]	; (80041a0 <menu+0x308c>)
 8004122:	2110      	movs	r1, #16
 8004124:	2002      	movs	r0, #2
 8004126:	f003 fd55 	bl	8007bd4 <lcd_print>

			lcd_print(2, 1, "           ");
 800412a:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <menu+0x3090>)
 800412c:	2101      	movs	r1, #1
 800412e:	2002      	movs	r0, #2
 8004130:	f003 fd50 	bl	8007bd4 <lcd_print>
 8004134:	e048      	b.n	80041c8 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004136:	4b17      	ldr	r3, [pc, #92]	; (8004194 <menu+0x3080>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d144      	bne.n	80041c8 <menu+0x30b4>
			if(dilSecim == 0) {
 800413e:	4b07      	ldr	r3, [pc, #28]	; (800415c <menu+0x3048>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d132      	bne.n	80041ac <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004146:	4a14      	ldr	r2, [pc, #80]	; (8004198 <menu+0x3084>)
 8004148:	2101      	movs	r1, #1
 800414a:	2001      	movs	r0, #1
 800414c:	f003 fd42 	bl	8007bd4 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004150:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <menu+0x3094>)
 8004152:	2101      	movs	r1, #1
 8004154:	2002      	movs	r0, #2
 8004156:	f003 fd3d 	bl	8007bd4 <lcd_print>
 800415a:	e035      	b.n	80041c8 <menu+0x30b4>
 800415c:	20000241 	.word	0x20000241
 8004160:	0800d250 	.word	0x0800d250
 8004164:	40010800 	.word	0x40010800
 8004168:	2000024f 	.word	0x2000024f
 800416c:	2000023e 	.word	0x2000023e
 8004170:	20000118 	.word	0x20000118
 8004174:	2000024c 	.word	0x2000024c
 8004178:	20000220 	.word	0x20000220
 800417c:	2000021d 	.word	0x2000021d
 8004180:	2000021e 	.word	0x2000021e
 8004184:	20000000 	.word	0x20000000
 8004188:	20000001 	.word	0x20000001
 800418c:	2000021f 	.word	0x2000021f
 8004190:	20000261 	.word	0x20000261
 8004194:	20000240 	.word	0x20000240
 8004198:	0800d8d8 	.word	0x0800d8d8
 800419c:	0800d8ec 	.word	0x0800d8ec
 80041a0:	20000188 	.word	0x20000188
 80041a4:	0800d900 	.word	0x0800d900
 80041a8:	0800d90c 	.word	0x0800d90c
			} else if(dilSecim == 1) {
 80041ac:	4b94      	ldr	r3, [pc, #592]	; (8004400 <menu+0x32ec>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d109      	bne.n	80041c8 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80041b4:	4a93      	ldr	r2, [pc, #588]	; (8004404 <menu+0x32f0>)
 80041b6:	2101      	movs	r1, #1
 80041b8:	2001      	movs	r0, #1
 80041ba:	f003 fd0b 	bl	8007bd4 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80041be:	4a92      	ldr	r2, [pc, #584]	; (8004408 <menu+0x32f4>)
 80041c0:	2101      	movs	r1, #1
 80041c2:	2002      	movs	r0, #2
 80041c4:	f003 fd06 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80041c8:	2102      	movs	r1, #2
 80041ca:	4890      	ldr	r0, [pc, #576]	; (800440c <menu+0x32f8>)
 80041cc:	f005 f828 	bl	8009220 <HAL_GPIO_ReadPin>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d119      	bne.n	800420a <menu+0x30f6>
 80041d6:	4b8e      	ldr	r3, [pc, #568]	; (8004410 <menu+0x32fc>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	f083 0301 	eor.w	r3, r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d012      	beq.n	800420a <menu+0x30f6>
 80041e4:	4b8b      	ldr	r3, [pc, #556]	; (8004414 <menu+0x3300>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00e      	beq.n	800420a <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80041ec:	4b8a      	ldr	r3, [pc, #552]	; (8004418 <menu+0x3304>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	4b88      	ldr	r3, [pc, #544]	; (8004418 <menu+0x3304>)
 80041f6:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80041f8:	4b87      	ldr	r3, [pc, #540]	; (8004418 <menu+0x3304>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d902      	bls.n	8004206 <menu+0x30f2>
				calismaSayModu = 0;
 8004200:	4b85      	ldr	r3, [pc, #532]	; (8004418 <menu+0x3304>)
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004206:	f000 fbc5 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800420a:	2104      	movs	r1, #4
 800420c:	487f      	ldr	r0, [pc, #508]	; (800440c <menu+0x32f8>)
 800420e:	f005 f807 	bl	8009220 <HAL_GPIO_ReadPin>
 8004212:	4603      	mov	r3, r0
 8004214:	2b01      	cmp	r3, #1
 8004216:	d119      	bne.n	800424c <menu+0x3138>
 8004218:	4b7d      	ldr	r3, [pc, #500]	; (8004410 <menu+0x32fc>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	f083 0301 	eor.w	r3, r3, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d012      	beq.n	800424c <menu+0x3138>
 8004226:	4b7b      	ldr	r3, [pc, #492]	; (8004414 <menu+0x3300>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00e      	beq.n	800424c <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800422e:	4b7a      	ldr	r3, [pc, #488]	; (8004418 <menu+0x3304>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	3b01      	subs	r3, #1
 8004234:	b2da      	uxtb	r2, r3
 8004236:	4b78      	ldr	r3, [pc, #480]	; (8004418 <menu+0x3304>)
 8004238:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800423a:	4b77      	ldr	r3, [pc, #476]	; (8004418 <menu+0x3304>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <menu+0x3134>
		   		calismaSayModu = 1;
 8004242:	4b75      	ldr	r3, [pc, #468]	; (8004418 <menu+0x3304>)
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004248:	f000 fba4 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800424c:	2108      	movs	r1, #8
 800424e:	486f      	ldr	r0, [pc, #444]	; (800440c <menu+0x32f8>)
 8004250:	f004 ffe6 	bl	8009220 <HAL_GPIO_ReadPin>
 8004254:	4603      	mov	r3, r0
 8004256:	2b01      	cmp	r3, #1
 8004258:	d12b      	bne.n	80042b2 <menu+0x319e>
 800425a:	4b6d      	ldr	r3, [pc, #436]	; (8004410 <menu+0x32fc>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	f083 0301 	eor.w	r3, r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d024      	beq.n	80042b2 <menu+0x319e>
			eepromData[32] = 0;
 8004268:	4b6c      	ldr	r3, [pc, #432]	; (800441c <menu+0x3308>)
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004270:	4b6a      	ldr	r3, [pc, #424]	; (800441c <menu+0x3308>)
 8004272:	2200      	movs	r2, #0
 8004274:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004276:	4b69      	ldr	r3, [pc, #420]	; (800441c <menu+0x3308>)
 8004278:	2200      	movs	r2, #0
 800427a:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 800427c:	4b67      	ldr	r3, [pc, #412]	; (800441c <menu+0x3308>)
 800427e:	2200      	movs	r2, #0
 8004280:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004282:	4b66      	ldr	r3, [pc, #408]	; (800441c <menu+0x3308>)
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004288:	4b65      	ldr	r3, [pc, #404]	; (8004420 <menu+0x330c>)
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800428e:	4b65      	ldr	r3, [pc, #404]	; (8004424 <menu+0x3310>)
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004294:	4b64      	ldr	r3, [pc, #400]	; (8004428 <menu+0x3314>)
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800429a:	4b64      	ldr	r3, [pc, #400]	; (800442c <menu+0x3318>)
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80042a0:	4b63      	ldr	r3, [pc, #396]	; (8004430 <menu+0x331c>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80042a6:	4b5c      	ldr	r3, [pc, #368]	; (8004418 <menu+0x3304>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80042ac:	4b61      	ldr	r3, [pc, #388]	; (8004434 <menu+0x3320>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80042b2:	4b61      	ldr	r3, [pc, #388]	; (8004438 <menu+0x3324>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b1e      	cmp	r3, #30
 80042b8:	d16f      	bne.n	800439a <menu+0x3286>
		calismaSayModu = 0;
 80042ba:	4b57      	ldr	r3, [pc, #348]	; (8004418 <menu+0x3304>)
 80042bc:	2200      	movs	r2, #0
 80042be:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80042c0:	4b4f      	ldr	r3, [pc, #316]	; (8004400 <menu+0x32ec>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80042c8:	4a5c      	ldr	r2, [pc, #368]	; (800443c <menu+0x3328>)
 80042ca:	2101      	movs	r1, #1
 80042cc:	2001      	movs	r0, #1
 80042ce:	f003 fc81 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80042d2:	4a5b      	ldr	r2, [pc, #364]	; (8004440 <menu+0x332c>)
 80042d4:	2101      	movs	r1, #1
 80042d6:	2002      	movs	r0, #2
 80042d8:	f003 fc7c 	bl	8007bd4 <lcd_print>
 80042dc:	e00d      	b.n	80042fa <menu+0x31e6>
		} else if(dilSecim == 1) {
 80042de:	4b48      	ldr	r3, [pc, #288]	; (8004400 <menu+0x32ec>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d109      	bne.n	80042fa <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80042e6:	4a57      	ldr	r2, [pc, #348]	; (8004444 <menu+0x3330>)
 80042e8:	2101      	movs	r1, #1
 80042ea:	2001      	movs	r0, #1
 80042ec:	f003 fc72 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80042f0:	4a55      	ldr	r2, [pc, #340]	; (8004448 <menu+0x3334>)
 80042f2:	2101      	movs	r1, #1
 80042f4:	2002      	movs	r0, #2
 80042f6:	f003 fc6d 	bl	8007bd4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80042fa:	2102      	movs	r1, #2
 80042fc:	4843      	ldr	r0, [pc, #268]	; (800440c <menu+0x32f8>)
 80042fe:	f004 ff8f 	bl	8009220 <HAL_GPIO_ReadPin>
 8004302:	4603      	mov	r3, r0
 8004304:	2b01      	cmp	r3, #1
 8004306:	d115      	bne.n	8004334 <menu+0x3220>
 8004308:	4b41      	ldr	r3, [pc, #260]	; (8004410 <menu+0x32fc>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	f083 0301 	eor.w	r3, r3, #1
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00e      	beq.n	8004334 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004316:	4b3a      	ldr	r3, [pc, #232]	; (8004400 <menu+0x32ec>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	3301      	adds	r3, #1
 800431c:	b2da      	uxtb	r2, r3
 800431e:	4b38      	ldr	r3, [pc, #224]	; (8004400 <menu+0x32ec>)
 8004320:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004322:	4b37      	ldr	r3, [pc, #220]	; (8004400 <menu+0x32ec>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d902      	bls.n	8004330 <menu+0x321c>
				dilSecim = 0;
 800432a:	4b35      	ldr	r3, [pc, #212]	; (8004400 <menu+0x32ec>)
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004330:	f000 fb30 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004334:	2104      	movs	r1, #4
 8004336:	4835      	ldr	r0, [pc, #212]	; (800440c <menu+0x32f8>)
 8004338:	f004 ff72 	bl	8009220 <HAL_GPIO_ReadPin>
 800433c:	4603      	mov	r3, r0
 800433e:	2b01      	cmp	r3, #1
 8004340:	d115      	bne.n	800436e <menu+0x325a>
 8004342:	4b33      	ldr	r3, [pc, #204]	; (8004410 <menu+0x32fc>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	f083 0301 	eor.w	r3, r3, #1
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00e      	beq.n	800436e <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004350:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <menu+0x32ec>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	3b01      	subs	r3, #1
 8004356:	b2da      	uxtb	r2, r3
 8004358:	4b29      	ldr	r3, [pc, #164]	; (8004400 <menu+0x32ec>)
 800435a:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800435c:	4b28      	ldr	r3, [pc, #160]	; (8004400 <menu+0x32ec>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <menu+0x3256>
		   		dilSecim = 1;
 8004364:	4b26      	ldr	r3, [pc, #152]	; (8004400 <menu+0x32ec>)
 8004366:	2201      	movs	r2, #1
 8004368:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800436a:	f000 fb13 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800436e:	2108      	movs	r1, #8
 8004370:	4826      	ldr	r0, [pc, #152]	; (800440c <menu+0x32f8>)
 8004372:	f004 ff55 	bl	8009220 <HAL_GPIO_ReadPin>
 8004376:	4603      	mov	r3, r0
 8004378:	2b01      	cmp	r3, #1
 800437a:	d10e      	bne.n	800439a <menu+0x3286>
 800437c:	4b24      	ldr	r3, [pc, #144]	; (8004410 <menu+0x32fc>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	f083 0301 	eor.w	r3, r3, #1
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <menu+0x3286>
			eepromData[33] = dilSecim;
 800438a:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <menu+0x32ec>)
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	4b23      	ldr	r3, [pc, #140]	; (800441c <menu+0x3308>)
 8004390:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004394:	4b27      	ldr	r3, [pc, #156]	; (8004434 <menu+0x3320>)
 8004396:	2201      	movs	r2, #1
 8004398:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800439a:	4b27      	ldr	r3, [pc, #156]	; (8004438 <menu+0x3324>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b1f      	cmp	r3, #31
 80043a0:	f040 80b7 	bne.w	8004512 <menu+0x33fe>
		calismaSayModu = 0;
 80043a4:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <menu+0x3304>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80043aa:	4a28      	ldr	r2, [pc, #160]	; (800444c <menu+0x3338>)
 80043ac:	2101      	movs	r1, #1
 80043ae:	2001      	movs	r0, #1
 80043b0:	f003 fc10 	bl	8007bd4 <lcd_print>

		if(iotMode == 0) {
 80043b4:	4b26      	ldr	r3, [pc, #152]	; (8004450 <menu+0x333c>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d113      	bne.n	80043e4 <menu+0x32d0>
			if(dilSecim == 0) {
 80043bc:	4b10      	ldr	r3, [pc, #64]	; (8004400 <menu+0x32ec>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d105      	bne.n	80043d0 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80043c4:	4a23      	ldr	r2, [pc, #140]	; (8004454 <menu+0x3340>)
 80043c6:	2101      	movs	r1, #1
 80043c8:	2002      	movs	r0, #2
 80043ca:	f003 fc03 	bl	8007bd4 <lcd_print>
 80043ce:	e050      	b.n	8004472 <menu+0x335e>
			} else if(dilSecim == 1) {
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <menu+0x32ec>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d14c      	bne.n	8004472 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80043d8:	4a1f      	ldr	r2, [pc, #124]	; (8004458 <menu+0x3344>)
 80043da:	2101      	movs	r1, #1
 80043dc:	2002      	movs	r0, #2
 80043de:	f003 fbf9 	bl	8007bd4 <lcd_print>
 80043e2:	e046      	b.n	8004472 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80043e4:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <menu+0x333c>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d142      	bne.n	8004472 <menu+0x335e>
			if(dilSecim == 0) {
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <menu+0x32ec>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d135      	bne.n	8004460 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80043f4:	4a19      	ldr	r2, [pc, #100]	; (800445c <menu+0x3348>)
 80043f6:	2101      	movs	r1, #1
 80043f8:	2002      	movs	r0, #2
 80043fa:	f003 fbeb 	bl	8007bd4 <lcd_print>
 80043fe:	e038      	b.n	8004472 <menu+0x335e>
 8004400:	20000241 	.word	0x20000241
 8004404:	0800d8ec 	.word	0x0800d8ec
 8004408:	0800d920 	.word	0x0800d920
 800440c:	40010800 	.word	0x40010800
 8004410:	2000024f 	.word	0x2000024f
 8004414:	20000261 	.word	0x20000261
 8004418:	20000240 	.word	0x20000240
 800441c:	20000118 	.word	0x20000118
 8004420:	2000021f 	.word	0x2000021f
 8004424:	20000001 	.word	0x20000001
 8004428:	20000000 	.word	0x20000000
 800442c:	2000021e 	.word	0x2000021e
 8004430:	2000021d 	.word	0x2000021d
 8004434:	2000024c 	.word	0x2000024c
 8004438:	20000220 	.word	0x20000220
 800443c:	0800d934 	.word	0x0800d934
 8004440:	0800d948 	.word	0x0800d948
 8004444:	0800d95c 	.word	0x0800d95c
 8004448:	0800d970 	.word	0x0800d970
 800444c:	0800d984 	.word	0x0800d984
 8004450:	2000023f 	.word	0x2000023f
 8004454:	0800d1dc 	.word	0x0800d1dc
 8004458:	0800d1f0 	.word	0x0800d1f0
 800445c:	0800d23c 	.word	0x0800d23c
			} else if(dilSecim == 1) {
 8004460:	4b8c      	ldr	r3, [pc, #560]	; (8004694 <menu+0x3580>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d104      	bne.n	8004472 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004468:	4a8b      	ldr	r2, [pc, #556]	; (8004698 <menu+0x3584>)
 800446a:	2101      	movs	r1, #1
 800446c:	2002      	movs	r0, #2
 800446e:	f003 fbb1 	bl	8007bd4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004472:	2102      	movs	r1, #2
 8004474:	4889      	ldr	r0, [pc, #548]	; (800469c <menu+0x3588>)
 8004476:	f004 fed3 	bl	8009220 <HAL_GPIO_ReadPin>
 800447a:	4603      	mov	r3, r0
 800447c:	2b01      	cmp	r3, #1
 800447e:	d115      	bne.n	80044ac <menu+0x3398>
 8004480:	4b87      	ldr	r3, [pc, #540]	; (80046a0 <menu+0x358c>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	f083 0301 	eor.w	r3, r3, #1
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00e      	beq.n	80044ac <menu+0x3398>
			iotMode = iotMode + 1;
 800448e:	4b85      	ldr	r3, [pc, #532]	; (80046a4 <menu+0x3590>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	3301      	adds	r3, #1
 8004494:	b2da      	uxtb	r2, r3
 8004496:	4b83      	ldr	r3, [pc, #524]	; (80046a4 <menu+0x3590>)
 8004498:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800449a:	4b82      	ldr	r3, [pc, #520]	; (80046a4 <menu+0x3590>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d902      	bls.n	80044a8 <menu+0x3394>
				iotMode = 0;
 80044a2:	4b80      	ldr	r3, [pc, #512]	; (80046a4 <menu+0x3590>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80044a8:	f000 fa74 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044ac:	2104      	movs	r1, #4
 80044ae:	487b      	ldr	r0, [pc, #492]	; (800469c <menu+0x3588>)
 80044b0:	f004 feb6 	bl	8009220 <HAL_GPIO_ReadPin>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d115      	bne.n	80044e6 <menu+0x33d2>
 80044ba:	4b79      	ldr	r3, [pc, #484]	; (80046a0 <menu+0x358c>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	f083 0301 	eor.w	r3, r3, #1
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00e      	beq.n	80044e6 <menu+0x33d2>
			iotMode = iotMode - 1;
 80044c8:	4b76      	ldr	r3, [pc, #472]	; (80046a4 <menu+0x3590>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	4b74      	ldr	r3, [pc, #464]	; (80046a4 <menu+0x3590>)
 80044d2:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80044d4:	4b73      	ldr	r3, [pc, #460]	; (80046a4 <menu+0x3590>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <menu+0x33ce>
		   		iotMode = 1;
 80044dc:	4b71      	ldr	r3, [pc, #452]	; (80046a4 <menu+0x3590>)
 80044de:	2201      	movs	r2, #1
 80044e0:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80044e2:	f000 fa57 	bl	8004994 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044e6:	2108      	movs	r1, #8
 80044e8:	486c      	ldr	r0, [pc, #432]	; (800469c <menu+0x3588>)
 80044ea:	f004 fe99 	bl	8009220 <HAL_GPIO_ReadPin>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d10e      	bne.n	8004512 <menu+0x33fe>
 80044f4:	4b6a      	ldr	r3, [pc, #424]	; (80046a0 <menu+0x358c>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	f083 0301 	eor.w	r3, r3, #1
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004502:	4b68      	ldr	r3, [pc, #416]	; (80046a4 <menu+0x3590>)
 8004504:	781a      	ldrb	r2, [r3, #0]
 8004506:	4b68      	ldr	r3, [pc, #416]	; (80046a8 <menu+0x3594>)
 8004508:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 800450c:	4b67      	ldr	r3, [pc, #412]	; (80046ac <menu+0x3598>)
 800450e:	2201      	movs	r2, #1
 8004510:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004512:	4b67      	ldr	r3, [pc, #412]	; (80046b0 <menu+0x359c>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b20      	cmp	r3, #32
 8004518:	d14b      	bne.n	80045b2 <menu+0x349e>
		calismaSayModu = 0;
 800451a:	4b66      	ldr	r3, [pc, #408]	; (80046b4 <menu+0x35a0>)
 800451c:	2200      	movs	r2, #0
 800451e:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8004520:	2001      	movs	r0, #1
 8004522:	f7fc f93f 	bl	80007a4 <convertArrays>
		HAL_Delay(50);
 8004526:	2032      	movs	r0, #50	; 0x32
 8004528:	f004 f8aa 	bl	8008680 <HAL_Delay>

		if(dilSecim == 0) {
 800452c:	4b59      	ldr	r3, [pc, #356]	; (8004694 <menu+0x3580>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d105      	bne.n	8004540 <menu+0x342c>
			lcd_print(1, 1, "MAKINE ID       ");
 8004534:	4a60      	ldr	r2, [pc, #384]	; (80046b8 <menu+0x35a4>)
 8004536:	2101      	movs	r1, #1
 8004538:	2001      	movs	r0, #1
 800453a:	f003 fb4b 	bl	8007bd4 <lcd_print>
 800453e:	e004      	b.n	800454a <menu+0x3436>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004540:	4a5e      	ldr	r2, [pc, #376]	; (80046bc <menu+0x35a8>)
 8004542:	2101      	movs	r1, #1
 8004544:	2001      	movs	r0, #1
 8004546:	f003 fb45 	bl	8007bd4 <lcd_print>
		}
		lcd_print(2, 1, machineID);
 800454a:	4a5d      	ldr	r2, [pc, #372]	; (80046c0 <menu+0x35ac>)
 800454c:	2101      	movs	r1, #1
 800454e:	2002      	movs	r0, #2
 8004550:	f003 fb40 	bl	8007bd4 <lcd_print>
		lcd_print(2, 13, "    ");
 8004554:	4a5b      	ldr	r2, [pc, #364]	; (80046c4 <menu+0x35b0>)
 8004556:	210d      	movs	r1, #13
 8004558:	2002      	movs	r0, #2
 800455a:	f003 fb3b 	bl	8007bd4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800455e:	2102      	movs	r1, #2
 8004560:	484e      	ldr	r0, [pc, #312]	; (800469c <menu+0x3588>)
 8004562:	f004 fe5d 	bl	8009220 <HAL_GPIO_ReadPin>
 8004566:	4603      	mov	r3, r0
 8004568:	2b01      	cmp	r3, #1
 800456a:	d122      	bne.n	80045b2 <menu+0x349e>
 800456c:	2104      	movs	r1, #4
 800456e:	484b      	ldr	r0, [pc, #300]	; (800469c <menu+0x3588>)
 8004570:	f004 fe56 	bl	8009220 <HAL_GPIO_ReadPin>
 8004574:	4603      	mov	r3, r0
 8004576:	2b01      	cmp	r3, #1
 8004578:	d11b      	bne.n	80045b2 <menu+0x349e>
 800457a:	4b49      	ldr	r3, [pc, #292]	; (80046a0 <menu+0x358c>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	f083 0301 	eor.w	r3, r3, #1
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d014      	beq.n	80045b2 <menu+0x349e>
			takeMachineID();
 8004588:	f002 fb4c 	bl	8006c24 <takeMachineID>

			convertArrays(1);
 800458c:	2001      	movs	r0, #1
 800458e:	f7fc f909 	bl	80007a4 <convertArrays>
			HAL_Delay(50);
 8004592:	2032      	movs	r0, #50	; 0x32
 8004594:	f004 f874 	bl	8008680 <HAL_Delay>

			HAL_Delay(250);
 8004598:	20fa      	movs	r0, #250	; 0xfa
 800459a:	f004 f871 	bl	8008680 <HAL_Delay>
			lcd_print(2, 1, machineID);
 800459e:	4a48      	ldr	r2, [pc, #288]	; (80046c0 <menu+0x35ac>)
 80045a0:	2101      	movs	r1, #1
 80045a2:	2002      	movs	r0, #2
 80045a4:	f003 fb16 	bl	8007bd4 <lcd_print>
			lcd_print(2, 13, "    ");
 80045a8:	4a46      	ldr	r2, [pc, #280]	; (80046c4 <menu+0x35b0>)
 80045aa:	210d      	movs	r1, #13
 80045ac:	2002      	movs	r0, #2
 80045ae:	f003 fb11 	bl	8007bd4 <lcd_print>
		}
	}

	if (menuSayac == 33) {
 80045b2:	4b3f      	ldr	r3, [pc, #252]	; (80046b0 <menu+0x359c>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b21      	cmp	r3, #33	; 0x21
 80045b8:	f040 809f 	bne.w	80046fa <menu+0x35e6>
		calismaSayModu = 0;
 80045bc:	4b3d      	ldr	r3, [pc, #244]	; (80046b4 <menu+0x35a0>)
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 80045c2:	2001      	movs	r0, #1
 80045c4:	f003 fb52 	bl	8007c6c <lcd_backlight>

		int ssidLength = strlen(wifiSSID);
 80045c8:	483f      	ldr	r0, [pc, #252]	; (80046c8 <menu+0x35b4>)
 80045ca:	f7fb fe2b 	bl	8000224 <strlen>
 80045ce:	4603      	mov	r3, r0
 80045d0:	61fb      	str	r3, [r7, #28]

		convertArrays(2);
 80045d2:	2002      	movs	r0, #2
 80045d4:	f7fc f8e6 	bl	80007a4 <convertArrays>
		HAL_Delay(50);
 80045d8:	2032      	movs	r0, #50	; 0x32
 80045da:	f004 f851 	bl	8008680 <HAL_Delay>

		lcd_print(1, 1, "WIFI SSID       ");
 80045de:	4a3b      	ldr	r2, [pc, #236]	; (80046cc <menu+0x35b8>)
 80045e0:	2101      	movs	r1, #1
 80045e2:	2001      	movs	r0, #1
 80045e4:	f003 faf6 	bl	8007bd4 <lcd_print>
		lcd_print(2, 1, "                ");
 80045e8:	4a39      	ldr	r2, [pc, #228]	; (80046d0 <menu+0x35bc>)
 80045ea:	2101      	movs	r1, #1
 80045ec:	2002      	movs	r0, #2
 80045ee:	f003 faf1 	bl	8007bd4 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 80045f2:	4a35      	ldr	r2, [pc, #212]	; (80046c8 <menu+0x35b4>)
 80045f4:	2101      	movs	r1, #1
 80045f6:	2002      	movs	r0, #2
 80045f8:	f003 faec 	bl	8007bd4 <lcd_print>
				lcd_print_char(2, lcdVal, wifiSSID[i]);
				lcdVal++;
			}
		}*/

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045fc:	2102      	movs	r1, #2
 80045fe:	4827      	ldr	r0, [pc, #156]	; (800469c <menu+0x3588>)
 8004600:	f004 fe0e 	bl	8009220 <HAL_GPIO_ReadPin>
 8004604:	4603      	mov	r3, r0
 8004606:	2b01      	cmp	r3, #1
 8004608:	d177      	bne.n	80046fa <menu+0x35e6>
 800460a:	2104      	movs	r1, #4
 800460c:	4823      	ldr	r0, [pc, #140]	; (800469c <menu+0x3588>)
 800460e:	f004 fe07 	bl	8009220 <HAL_GPIO_ReadPin>
 8004612:	4603      	mov	r3, r0
 8004614:	2b01      	cmp	r3, #1
 8004616:	d170      	bne.n	80046fa <menu+0x35e6>
 8004618:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <menu+0x358c>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f083 0301 	eor.w	r3, r3, #1
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d069      	beq.n	80046fa <menu+0x35e6>
			takeWifiSSID();
 8004626:	f002 fc8d 	bl	8006f44 <takeWifiSSID>

			convertArrays(2);
 800462a:	2002      	movs	r0, #2
 800462c:	f7fc f8ba 	bl	80007a4 <convertArrays>
			HAL_Delay(50);
 8004630:	2032      	movs	r0, #50	; 0x32
 8004632:	f004 f825 	bl	8008680 <HAL_Delay>

			ssidLength = strlen(wifiSSID);
 8004636:	4824      	ldr	r0, [pc, #144]	; (80046c8 <menu+0x35b4>)
 8004638:	f7fb fdf4 	bl	8000224 <strlen>
 800463c:	4603      	mov	r3, r0
 800463e:	61fb      	str	r3, [r7, #28]

			HAL_Delay(250);
 8004640:	20fa      	movs	r0, #250	; 0xfa
 8004642:	f004 f81d 	bl	8008680 <HAL_Delay>
			if(ssidLength == 16) {
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	2b10      	cmp	r3, #16
 800464a:	d105      	bne.n	8004658 <menu+0x3544>
				lcd_print(2, 1, wifiSSID);
 800464c:	4a1e      	ldr	r2, [pc, #120]	; (80046c8 <menu+0x35b4>)
 800464e:	2101      	movs	r1, #1
 8004650:	2002      	movs	r0, #2
 8004652:	f003 fabf 	bl	8007bd4 <lcd_print>
 8004656:	e050      	b.n	80046fa <menu+0x35e6>
			} else if(ssidLength < 16) {
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b0f      	cmp	r3, #15
 800465c:	dc15      	bgt.n	800468a <menu+0x3576>
				for(int i=0; i<16-ssidLength; i++) {
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	e00b      	b.n	800467c <menu+0x3568>
					lcd_delete_char(2, ssidLength);
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	4619      	mov	r1, r3
 800466a:	2002      	movs	r0, #2
 800466c:	f003 fae8 	bl	8007c40 <lcd_delete_char>
					ssidLength++;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	3301      	adds	r3, #1
 8004674:	61fb      	str	r3, [r7, #28]
				for(int i=0; i<16-ssidLength; i++) {
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	3301      	adds	r3, #1
 800467a:	61bb      	str	r3, [r7, #24]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f1c3 0310 	rsb	r3, r3, #16
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	429a      	cmp	r2, r3
 8004686:	dbed      	blt.n	8004664 <menu+0x3550>
 8004688:	e037      	b.n	80046fa <menu+0x35e6>
				}
			} else {
				int lcdVal = 1;
 800468a:	2301      	movs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]

				//Eğer ssid 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 800468e:	2300      	movs	r3, #0
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	e02f      	b.n	80046f4 <menu+0x35e0>
 8004694:	20000241 	.word	0x20000241
 8004698:	0800d250 	.word	0x0800d250
 800469c:	40010800 	.word	0x40010800
 80046a0:	2000024f 	.word	0x2000024f
 80046a4:	2000023f 	.word	0x2000023f
 80046a8:	20000118 	.word	0x20000118
 80046ac:	2000024c 	.word	0x2000024c
 80046b0:	20000220 	.word	0x20000220
 80046b4:	20000240 	.word	0x20000240
 80046b8:	0800d998 	.word	0x0800d998
 80046bc:	0800d9ac 	.word	0x0800d9ac
 80046c0:	20000190 	.word	0x20000190
 80046c4:	0800d9c0 	.word	0x0800d9c0
 80046c8:	2000019c 	.word	0x2000019c
 80046cc:	0800d9c8 	.word	0x0800d9c8
 80046d0:	0800d9dc 	.word	0x0800d9dc
					lcd_print_char(2, lcdVal, wifiSSID[i]);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	b2d9      	uxtb	r1, r3
 80046d8:	4a74      	ldr	r2, [pc, #464]	; (80048ac <menu+0x3798>)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	4413      	add	r3, r2
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	2002      	movs	r0, #2
 80046e4:	f003 fa8b 	bl	8007bfe <lcd_print_char>
					lcdVal++;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3301      	adds	r3, #1
 80046ec:	617b      	str	r3, [r7, #20]
				for(int i=0; i<16; i++) {
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	3301      	adds	r3, #1
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	2b0f      	cmp	r3, #15
 80046f8:	ddec      	ble.n	80046d4 <menu+0x35c0>
				}
			}
		}
	}

	if (menuSayac == 34) {
 80046fa:	4b6d      	ldr	r3, [pc, #436]	; (80048b0 <menu+0x379c>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b22      	cmp	r3, #34	; 0x22
 8004700:	d17e      	bne.n	8004800 <menu+0x36ec>
		calismaSayModu = 0;
 8004702:	4b6c      	ldr	r3, [pc, #432]	; (80048b4 <menu+0x37a0>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
		lcd_backlight(1);
 8004708:	2001      	movs	r0, #1
 800470a:	f003 faaf 	bl	8007c6c <lcd_backlight>

		int passLength = strlen(wifiPass);
 800470e:	486a      	ldr	r0, [pc, #424]	; (80048b8 <menu+0x37a4>)
 8004710:	f7fb fd88 	bl	8000224 <strlen>
 8004714:	4603      	mov	r3, r0
 8004716:	60fb      	str	r3, [r7, #12]

		convertArrays(3);
 8004718:	2003      	movs	r0, #3
 800471a:	f7fc f843 	bl	80007a4 <convertArrays>
		HAL_Delay(50);
 800471e:	2032      	movs	r0, #50	; 0x32
 8004720:	f003 ffae 	bl	8008680 <HAL_Delay>

		lcd_print(1, 1, "WIFI PASS       ");
 8004724:	4a65      	ldr	r2, [pc, #404]	; (80048bc <menu+0x37a8>)
 8004726:	2101      	movs	r1, #1
 8004728:	2001      	movs	r0, #1
 800472a:	f003 fa53 	bl	8007bd4 <lcd_print>
		lcd_print(2, 1, "                ");
 800472e:	4a64      	ldr	r2, [pc, #400]	; (80048c0 <menu+0x37ac>)
 8004730:	2101      	movs	r1, #1
 8004732:	2002      	movs	r0, #2
 8004734:	f003 fa4e 	bl	8007bd4 <lcd_print>
		lcd_print(2, 1, wifiPass);
 8004738:	4a5f      	ldr	r2, [pc, #380]	; (80048b8 <menu+0x37a4>)
 800473a:	2101      	movs	r1, #1
 800473c:	2002      	movs	r0, #2
 800473e:	f003 fa49 	bl	8007bd4 <lcd_print>
				lcd_print_char(2, lcdVal, wifiPass[i]);
				lcdVal++;
			}
		}*/

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004742:	2102      	movs	r1, #2
 8004744:	485f      	ldr	r0, [pc, #380]	; (80048c4 <menu+0x37b0>)
 8004746:	f004 fd6b 	bl	8009220 <HAL_GPIO_ReadPin>
 800474a:	4603      	mov	r3, r0
 800474c:	2b01      	cmp	r3, #1
 800474e:	d157      	bne.n	8004800 <menu+0x36ec>
 8004750:	2104      	movs	r1, #4
 8004752:	485c      	ldr	r0, [pc, #368]	; (80048c4 <menu+0x37b0>)
 8004754:	f004 fd64 	bl	8009220 <HAL_GPIO_ReadPin>
 8004758:	4603      	mov	r3, r0
 800475a:	2b01      	cmp	r3, #1
 800475c:	d150      	bne.n	8004800 <menu+0x36ec>
 800475e:	4b5a      	ldr	r3, [pc, #360]	; (80048c8 <menu+0x37b4>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	f083 0301 	eor.w	r3, r3, #1
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d049      	beq.n	8004800 <menu+0x36ec>
			takeWifiPass();
 800476c:	f002 fd9a 	bl	80072a4 <takeWifiPass>

			convertArrays(3);
 8004770:	2003      	movs	r0, #3
 8004772:	f7fc f817 	bl	80007a4 <convertArrays>
			HAL_Delay(50);
 8004776:	2032      	movs	r0, #50	; 0x32
 8004778:	f003 ff82 	bl	8008680 <HAL_Delay>

			passLength = strlen(wifiPass);
 800477c:	484e      	ldr	r0, [pc, #312]	; (80048b8 <menu+0x37a4>)
 800477e:	f7fb fd51 	bl	8000224 <strlen>
 8004782:	4603      	mov	r3, r0
 8004784:	60fb      	str	r3, [r7, #12]

			HAL_Delay(250);
 8004786:	20fa      	movs	r0, #250	; 0xfa
 8004788:	f003 ff7a 	bl	8008680 <HAL_Delay>
			if(passLength == 16) {
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b10      	cmp	r3, #16
 8004790:	d105      	bne.n	800479e <menu+0x368a>
				lcd_print(2, 1, wifiPass);
 8004792:	4a49      	ldr	r2, [pc, #292]	; (80048b8 <menu+0x37a4>)
 8004794:	2101      	movs	r1, #1
 8004796:	2002      	movs	r0, #2
 8004798:	f003 fa1c 	bl	8007bd4 <lcd_print>
 800479c:	e030      	b.n	8004800 <menu+0x36ec>
			} else if(passLength < 16) {
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b0f      	cmp	r3, #15
 80047a2:	dc15      	bgt.n	80047d0 <menu+0x36bc>
				for(int i=0; i<16-passLength; i++) {
 80047a4:	2300      	movs	r3, #0
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	e00b      	b.n	80047c2 <menu+0x36ae>
					lcd_delete_char(2, passLength);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	4619      	mov	r1, r3
 80047b0:	2002      	movs	r0, #2
 80047b2:	f003 fa45 	bl	8007c40 <lcd_delete_char>
					passLength++;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3301      	adds	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
				for(int i=0; i<16-passLength; i++) {
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	3301      	adds	r3, #1
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f1c3 0310 	rsb	r3, r3, #16
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	dbed      	blt.n	80047aa <menu+0x3696>
 80047ce:	e017      	b.n	8004800 <menu+0x36ec>
				}
			} else {
				int lcdVal = 1;
 80047d0:	2301      	movs	r3, #1
 80047d2:	607b      	str	r3, [r7, #4]

				//Eğer pass 16'dan büyükse buraya ekle
				for(int i=0; i<16; i++) {
 80047d4:	2300      	movs	r3, #0
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	e00f      	b.n	80047fa <menu+0x36e6>
					lcd_print_char(2, lcdVal, wifiPass[i]);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	b2d9      	uxtb	r1, r3
 80047de:	4a36      	ldr	r2, [pc, #216]	; (80048b8 <menu+0x37a4>)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	4413      	add	r3, r2
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	2002      	movs	r0, #2
 80047ea:	f003 fa08 	bl	8007bfe <lcd_print_char>
					lcdVal++;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3301      	adds	r3, #1
 80047f2:	607b      	str	r3, [r7, #4]
				for(int i=0; i<16; i++) {
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	3301      	adds	r3, #1
 80047f8:	603b      	str	r3, [r7, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b0f      	cmp	r3, #15
 80047fe:	ddec      	ble.n	80047da <menu+0x36c6>
				}
			}
		}
	}

	if (menuSayac == 35) {
 8004800:	4b2b      	ldr	r3, [pc, #172]	; (80048b0 <menu+0x379c>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b23      	cmp	r3, #35	; 0x23
 8004806:	d14d      	bne.n	80048a4 <menu+0x3790>
		if(dilSecim == 0) {
 8004808:	4b30      	ldr	r3, [pc, #192]	; (80048cc <menu+0x37b8>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <menu+0x3712>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004810:	4a2f      	ldr	r2, [pc, #188]	; (80048d0 <menu+0x37bc>)
 8004812:	2101      	movs	r1, #1
 8004814:	2001      	movs	r0, #1
 8004816:	f003 f9dd 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 800481a:	4a2e      	ldr	r2, [pc, #184]	; (80048d4 <menu+0x37c0>)
 800481c:	2101      	movs	r1, #1
 800481e:	2002      	movs	r0, #2
 8004820:	f003 f9d8 	bl	8007bd4 <lcd_print>
 8004824:	e00d      	b.n	8004842 <menu+0x372e>
		} else if(dilSecim == 1) {
 8004826:	4b29      	ldr	r3, [pc, #164]	; (80048cc <menu+0x37b8>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d109      	bne.n	8004842 <menu+0x372e>
			lcd_print(1, 1, " EXIT THE MENU  ");
 800482e:	4a2a      	ldr	r2, [pc, #168]	; (80048d8 <menu+0x37c4>)
 8004830:	2101      	movs	r1, #1
 8004832:	2001      	movs	r0, #1
 8004834:	f003 f9ce 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004838:	4a28      	ldr	r2, [pc, #160]	; (80048dc <menu+0x37c8>)
 800483a:	2101      	movs	r1, #1
 800483c:	2002      	movs	r0, #2
 800483e:	f003 f9c9 	bl	8007bd4 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004842:	2108      	movs	r1, #8
 8004844:	481f      	ldr	r0, [pc, #124]	; (80048c4 <menu+0x37b0>)
 8004846:	f004 fceb 	bl	8009220 <HAL_GPIO_ReadPin>
 800484a:	4603      	mov	r3, r0
 800484c:	2b01      	cmp	r3, #1
 800484e:	d129      	bne.n	80048a4 <menu+0x3790>
			menuGiris = 0;
 8004850:	4b23      	ldr	r3, [pc, #140]	; (80048e0 <menu+0x37cc>)
 8004852:	2200      	movs	r2, #0
 8004854:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004856:	bf00      	nop
 8004858:	4822      	ldr	r0, [pc, #136]	; (80048e4 <menu+0x37d0>)
 800485a:	f005 fb0a 	bl	8009e72 <HAL_I2C_GetError>
 800485e:	4603      	mov	r3, r0
 8004860:	2b04      	cmp	r3, #4
 8004862:	d0f9      	beq.n	8004858 <menu+0x3744>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004864:	bf00      	nop
 8004866:	481f      	ldr	r0, [pc, #124]	; (80048e4 <menu+0x37d0>)
 8004868:	f005 faf6 	bl	8009e58 <HAL_I2C_GetState>
 800486c:	4603      	mov	r3, r0
 800486e:	2b20      	cmp	r3, #32
 8004870:	d1f9      	bne.n	8004866 <menu+0x3752>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004872:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004876:	9302      	str	r3, [sp, #8]
 8004878:	236e      	movs	r3, #110	; 0x6e
 800487a:	9301      	str	r3, [sp, #4]
 800487c:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <menu+0x37d4>)
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	236e      	movs	r3, #110	; 0x6e
 8004882:	2200      	movs	r2, #0
 8004884:	21a0      	movs	r1, #160	; 0xa0
 8004886:	4817      	ldr	r0, [pc, #92]	; (80048e4 <menu+0x37d0>)
 8004888:	f004 ff84 	bl	8009794 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 800488c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004890:	f003 fef6 	bl	8008680 <HAL_Delay>

			lcd_clear();
 8004894:	f003 f9ca 	bl	8007c2c <lcd_clear>
			HAL_Delay(500);
 8004898:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800489c:	f003 fef0 	bl	8008680 <HAL_Delay>
			NVIC_SystemReset();
 80048a0:	f7fc fc22 	bl	80010e8 <__NVIC_SystemReset>
		}
	}
}
 80048a4:	bf00      	nop
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	2000019c 	.word	0x2000019c
 80048b0:	20000220 	.word	0x20000220
 80048b4:	20000240 	.word	0x20000240
 80048b8:	200001b0 	.word	0x200001b0
 80048bc:	0800d9f0 	.word	0x0800d9f0
 80048c0:	0800d9dc 	.word	0x0800d9dc
 80048c4:	40010800 	.word	0x40010800
 80048c8:	2000024f 	.word	0x2000024f
 80048cc:	20000241 	.word	0x20000241
 80048d0:	0800da04 	.word	0x0800da04
 80048d4:	0800da18 	.word	0x0800da18
 80048d8:	0800da2c 	.word	0x0800da2c
 80048dc:	0800da40 	.word	0x0800da40
 80048e0:	2000023d 	.word	0x2000023d
 80048e4:	200003a8 	.word	0x200003a8
 80048e8:	20000118 	.word	0x20000118

080048ec <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d105      	bne.n	8004908 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80048fc:	4a22      	ldr	r2, [pc, #136]	; (8004988 <lcdUpdate+0x9c>)
 80048fe:	2101      	movs	r1, #1
 8004900:	2002      	movs	r0, #2
 8004902:	f003 f967 	bl	8007bd4 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004906:	e03b      	b.n	8004980 <lcdUpdate+0x94>
	} else if(y==2) {
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d105      	bne.n	800491a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800490e:	4a1e      	ldr	r2, [pc, #120]	; (8004988 <lcdUpdate+0x9c>)
 8004910:	2102      	movs	r1, #2
 8004912:	2002      	movs	r0, #2
 8004914:	f003 f95e 	bl	8007bd4 <lcd_print>
}
 8004918:	e032      	b.n	8004980 <lcdUpdate+0x94>
	} else if(y==3) {
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d105      	bne.n	800492c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004920:	4a19      	ldr	r2, [pc, #100]	; (8004988 <lcdUpdate+0x9c>)
 8004922:	2103      	movs	r1, #3
 8004924:	2002      	movs	r0, #2
 8004926:	f003 f955 	bl	8007bd4 <lcd_print>
}
 800492a:	e029      	b.n	8004980 <lcdUpdate+0x94>
	} else if(y==4) {
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	2b04      	cmp	r3, #4
 8004930:	d105      	bne.n	800493e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004932:	4a15      	ldr	r2, [pc, #84]	; (8004988 <lcdUpdate+0x9c>)
 8004934:	2104      	movs	r1, #4
 8004936:	2002      	movs	r0, #2
 8004938:	f003 f94c 	bl	8007bd4 <lcd_print>
}
 800493c:	e020      	b.n	8004980 <lcdUpdate+0x94>
	} else if(y==5) {
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	2b05      	cmp	r3, #5
 8004942:	d105      	bne.n	8004950 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004944:	4a10      	ldr	r2, [pc, #64]	; (8004988 <lcdUpdate+0x9c>)
 8004946:	2105      	movs	r1, #5
 8004948:	2002      	movs	r0, #2
 800494a:	f003 f943 	bl	8007bd4 <lcd_print>
}
 800494e:	e017      	b.n	8004980 <lcdUpdate+0x94>
	} else if(y==6) {
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	2b06      	cmp	r3, #6
 8004954:	d105      	bne.n	8004962 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004956:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <lcdUpdate+0x9c>)
 8004958:	2106      	movs	r1, #6
 800495a:	2002      	movs	r0, #2
 800495c:	f003 f93a 	bl	8007bd4 <lcd_print>
}
 8004960:	e00e      	b.n	8004980 <lcdUpdate+0x94>
	} else if (y==7) {
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	2b07      	cmp	r3, #7
 8004966:	d10b      	bne.n	8004980 <lcdUpdate+0x94>
		lcd_clear();
 8004968:	f003 f960 	bl	8007c2c <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 800496c:	4a07      	ldr	r2, [pc, #28]	; (800498c <lcdUpdate+0xa0>)
 800496e:	2104      	movs	r1, #4
 8004970:	2001      	movs	r0, #1
 8004972:	f003 f92f 	bl	8007bd4 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004976:	4a06      	ldr	r2, [pc, #24]	; (8004990 <lcdUpdate+0xa4>)
 8004978:	2106      	movs	r1, #6
 800497a:	2002      	movs	r0, #2
 800497c:	f003 f92a 	bl	8007bd4 <lcd_print>
}
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	0800da54 	.word	0x0800da54
 800498c:	0800da58 	.word	0x0800da58
 8004990:	0800da60 	.word	0x0800da60

08004994 <bekle>:

void bekle() {
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
	timer1=millis;
 8004998:	4b47      	ldr	r3, [pc, #284]	; (8004ab8 <bekle+0x124>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a47      	ldr	r2, [pc, #284]	; (8004abc <bekle+0x128>)
 800499e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049a0:	e002      	b.n	80049a8 <bekle+0x14>
    	butonKontrol = 1;
 80049a2:	4b47      	ldr	r3, [pc, #284]	; (8004ac0 <bekle+0x12c>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049a8:	2101      	movs	r1, #1
 80049aa:	4846      	ldr	r0, [pc, #280]	; (8004ac4 <bekle+0x130>)
 80049ac:	f004 fc38 	bl	8009220 <HAL_GPIO_ReadPin>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d109      	bne.n	80049ca <bekle+0x36>
 80049b6:	4b40      	ldr	r3, [pc, #256]	; (8004ab8 <bekle+0x124>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4b40      	ldr	r3, [pc, #256]	; (8004abc <bekle+0x128>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d0ef      	beq.n	80049a2 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049c2:	e002      	b.n	80049ca <bekle+0x36>
    	butonKontrol = 1;
 80049c4:	4b3e      	ldr	r3, [pc, #248]	; (8004ac0 <bekle+0x12c>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049ca:	2108      	movs	r1, #8
 80049cc:	483e      	ldr	r0, [pc, #248]	; (8004ac8 <bekle+0x134>)
 80049ce:	f004 fc27 	bl	8009220 <HAL_GPIO_ReadPin>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d109      	bne.n	80049ec <bekle+0x58>
 80049d8:	4b37      	ldr	r3, [pc, #220]	; (8004ab8 <bekle+0x124>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b37      	ldr	r3, [pc, #220]	; (8004abc <bekle+0x128>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d0ef      	beq.n	80049c4 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049e4:	e002      	b.n	80049ec <bekle+0x58>
    	butonKontrol = 1;
 80049e6:	4b36      	ldr	r3, [pc, #216]	; (8004ac0 <bekle+0x12c>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049ec:	2102      	movs	r1, #2
 80049ee:	4835      	ldr	r0, [pc, #212]	; (8004ac4 <bekle+0x130>)
 80049f0:	f004 fc16 	bl	8009220 <HAL_GPIO_ReadPin>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d109      	bne.n	8004a0e <bekle+0x7a>
 80049fa:	4b2f      	ldr	r3, [pc, #188]	; (8004ab8 <bekle+0x124>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b2f      	ldr	r3, [pc, #188]	; (8004abc <bekle+0x128>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d0ef      	beq.n	80049e6 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a06:	e002      	b.n	8004a0e <bekle+0x7a>
    	butonKontrol = 1;
 8004a08:	4b2d      	ldr	r3, [pc, #180]	; (8004ac0 <bekle+0x12c>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a0e:	2104      	movs	r1, #4
 8004a10:	482c      	ldr	r0, [pc, #176]	; (8004ac4 <bekle+0x130>)
 8004a12:	f004 fc05 	bl	8009220 <HAL_GPIO_ReadPin>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d109      	bne.n	8004a30 <bekle+0x9c>
 8004a1c:	4b26      	ldr	r3, [pc, #152]	; (8004ab8 <bekle+0x124>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b26      	ldr	r3, [pc, #152]	; (8004abc <bekle+0x128>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d0ef      	beq.n	8004a08 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a28:	e002      	b.n	8004a30 <bekle+0x9c>
    	butonKontrol = 1;
 8004a2a:	4b25      	ldr	r3, [pc, #148]	; (8004ac0 <bekle+0x12c>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a30:	2108      	movs	r1, #8
 8004a32:	4824      	ldr	r0, [pc, #144]	; (8004ac4 <bekle+0x130>)
 8004a34:	f004 fbf4 	bl	8009220 <HAL_GPIO_ReadPin>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d109      	bne.n	8004a52 <bekle+0xbe>
 8004a3e:	4b1e      	ldr	r3, [pc, #120]	; (8004ab8 <bekle+0x124>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <bekle+0x128>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d0ef      	beq.n	8004a2a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a4a:	e002      	b.n	8004a52 <bekle+0xbe>
    	butonKontrol = 1;
 8004a4c:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <bekle+0x12c>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a52:	2180      	movs	r1, #128	; 0x80
 8004a54:	481c      	ldr	r0, [pc, #112]	; (8004ac8 <bekle+0x134>)
 8004a56:	f004 fbe3 	bl	8009220 <HAL_GPIO_ReadPin>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d109      	bne.n	8004a74 <bekle+0xe0>
 8004a60:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <bekle+0x124>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <bekle+0x128>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d0ef      	beq.n	8004a4c <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a6c:	e002      	b.n	8004a74 <bekle+0xe0>
    	butonKontrol = 1;
 8004a6e:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <bekle+0x12c>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a78:	4813      	ldr	r0, [pc, #76]	; (8004ac8 <bekle+0x134>)
 8004a7a:	f004 fbd1 	bl	8009220 <HAL_GPIO_ReadPin>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <bekle+0x104>
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <bekle+0x124>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <bekle+0x128>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d0ee      	beq.n	8004a6e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a90:	e002      	b.n	8004a98 <bekle+0x104>
    	butonKontrol = 1;
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <bekle+0x12c>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a9c:	480a      	ldr	r0, [pc, #40]	; (8004ac8 <bekle+0x134>)
 8004a9e:	f004 fbbf 	bl	8009220 <HAL_GPIO_ReadPin>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <bekle+0x120>
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <bekle+0x124>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <bekle+0x128>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d0ee      	beq.n	8004a92 <bekle+0xfe>
    }

}
 8004ab4:	bf00      	nop
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	200001fc 	.word	0x200001fc
 8004abc:	20000204 	.word	0x20000204
 8004ac0:	2000024f 	.word	0x2000024f
 8004ac4:	40010800 	.word	0x40010800
 8004ac8:	40011000 	.word	0x40011000

08004acc <buttonCheck>:

uint8_t buttonCheck(void) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	4815      	ldr	r0, [pc, #84]	; (8004b28 <buttonCheck+0x5c>)
 8004ad4:	f004 fba4 	bl	8009220 <HAL_GPIO_ReadPin>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d01b      	beq.n	8004b16 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8004ade:	2108      	movs	r1, #8
 8004ae0:	4812      	ldr	r0, [pc, #72]	; (8004b2c <buttonCheck+0x60>)
 8004ae2:	f004 fb9d 	bl	8009220 <HAL_GPIO_ReadPin>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d014      	beq.n	8004b16 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004aec:	2102      	movs	r1, #2
 8004aee:	480e      	ldr	r0, [pc, #56]	; (8004b28 <buttonCheck+0x5c>)
 8004af0:	f004 fb96 	bl	8009220 <HAL_GPIO_ReadPin>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d00d      	beq.n	8004b16 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8004afa:	2104      	movs	r1, #4
 8004afc:	480a      	ldr	r0, [pc, #40]	; (8004b28 <buttonCheck+0x5c>)
 8004afe:	f004 fb8f 	bl	8009220 <HAL_GPIO_ReadPin>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d006      	beq.n	8004b16 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8004b08:	2108      	movs	r1, #8
 8004b0a:	4807      	ldr	r0, [pc, #28]	; (8004b28 <buttonCheck+0x5c>)
 8004b0c:	f004 fb88 	bl	8009220 <HAL_GPIO_ReadPin>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d104      	bne.n	8004b20 <buttonCheck+0x54>
		backLightTimer = 0;
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <buttonCheck+0x64>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
		return 1;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <buttonCheck+0x56>
	}
	return 0;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40010800 	.word	0x40010800
 8004b2c:	40011000 	.word	0x40011000
 8004b30:	20000218 	.word	0x20000218

08004b34 <checkLCDBacklight>:

void checkLCDBacklight() {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004b38:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <checkLCDBacklight+0x24>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <checkLCDBacklight+0x28>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b3b      	cmp	r3, #59	; 0x3b
 8004b44:	d903      	bls.n	8004b4e <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004b46:	2000      	movs	r0, #0
 8004b48:	f003 f890 	bl	8007c6c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004b4c:	e002      	b.n	8004b54 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004b4e:	2001      	movs	r0, #1
 8004b50:	f003 f88c 	bl	8007c6c <lcd_backlight>
}
 8004b54:	bf00      	nop
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	200001fc 	.word	0x200001fc
 8004b5c:	20000218 	.word	0x20000218

08004b60 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004b64:	4b13      	ldr	r3, [pc, #76]	; (8004bb4 <checkBasincSalteri+0x54>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <checkBasincSalteri+0x12>
		basincVar=1;
 8004b6c:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <checkBasincSalteri+0x58>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004b72:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <checkBasincSalteri+0x54>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d119      	bne.n	8004bae <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b7e:	480f      	ldr	r0, [pc, #60]	; (8004bbc <checkBasincSalteri+0x5c>)
 8004b80:	f004 fb4e 	bl	8009220 <HAL_GPIO_ReadPin>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <checkBasincSalteri+0x60>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <checkBasincSalteri+0x64>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d90a      	bls.n	8004bae <checkBasincSalteri+0x4e>
				basincVar=1;
 8004b98:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <checkBasincSalteri+0x58>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004b9e:	e006      	b.n	8004bae <checkBasincSalteri+0x4e>
			timer5=millis;
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <checkBasincSalteri+0x60>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a07      	ldr	r2, [pc, #28]	; (8004bc4 <checkBasincSalteri+0x64>)
 8004ba6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004ba8:	4b03      	ldr	r3, [pc, #12]	; (8004bb8 <checkBasincSalteri+0x58>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000227 	.word	0x20000227
 8004bb8:	20000223 	.word	0x20000223
 8004bbc:	40011000 	.word	0x40011000
 8004bc0:	200001fc 	.word	0x200001fc
 8004bc4:	20000214 	.word	0x20000214

08004bc8 <checkBasGonder>:

void checkBasGonder() {
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004bcc:	4b1b      	ldr	r3, [pc, #108]	; (8004c3c <checkBasGonder+0x74>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d10b      	bne.n	8004bec <checkBasGonder+0x24>
 8004bd4:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <checkBasGonder+0x78>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <checkBasGonder+0x24>
 8004bdc:	4b19      	ldr	r3, [pc, #100]	; (8004c44 <checkBasGonder+0x7c>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d103      	bne.n	8004bec <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004be4:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <checkBasGonder+0x80>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	e009      	b.n	8004c00 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004bec:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <checkBasGonder+0x78>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	f083 0301 	eor.w	r3, r3, #1
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004bfa:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <checkBasGonder+0x80>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004c00:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <checkBasGonder+0x74>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d10b      	bne.n	8004c20 <checkBasGonder+0x58>
 8004c08:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <checkBasGonder+0x84>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <checkBasGonder+0x58>
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <checkBasGonder+0x7c>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d103      	bne.n	8004c20 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004c18:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <checkBasGonder+0x88>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004c1e:	e009      	b.n	8004c34 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <checkBasGonder+0x84>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	f083 0301 	eor.w	r3, r3, #1
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004c2e:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <checkBasGonder+0x88>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
}
 8004c34:	bf00      	nop
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	20000221 	.word	0x20000221
 8004c40:	20000255 	.word	0x20000255
 8004c44:	2000022f 	.word	0x2000022f
 8004c48:	2000025c 	.word	0x2000025c
 8004c4c:	20000258 	.word	0x20000258
 8004c50:	2000025d 	.word	0x2000025d

08004c54 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004c58:	4b24      	ldr	r3, [pc, #144]	; (8004cec <checkKapiSecimleri+0x98>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004c60:	4b23      	ldr	r3, [pc, #140]	; (8004cf0 <checkKapiSecimleri+0x9c>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004c66:	4b21      	ldr	r3, [pc, #132]	; (8004cec <checkKapiSecimleri+0x98>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d10e      	bne.n	8004c8c <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004c6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c72:	4820      	ldr	r0, [pc, #128]	; (8004cf4 <checkKapiSecimleri+0xa0>)
 8004c74:	f004 fad4 	bl	8009220 <HAL_GPIO_ReadPin>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004c7e:	4b1c      	ldr	r3, [pc, #112]	; (8004cf0 <checkKapiSecimleri+0x9c>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e002      	b.n	8004c8c <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004c86:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <checkKapiSecimleri+0x9c>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004c8c:	4b17      	ldr	r3, [pc, #92]	; (8004cec <checkKapiSecimleri+0x98>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d10e      	bne.n	8004cb2 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c98:	4816      	ldr	r0, [pc, #88]	; (8004cf4 <checkKapiSecimleri+0xa0>)
 8004c9a:	f004 fac1 	bl	8009220 <HAL_GPIO_ReadPin>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004ca4:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <checkKapiSecimleri+0x9c>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e002      	b.n	8004cb2 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004cac:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <checkKapiSecimleri+0x9c>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004cb2:	4b0e      	ldr	r3, [pc, #56]	; (8004cec <checkKapiSecimleri+0x98>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d116      	bne.n	8004ce8 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004cba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cbe:	480d      	ldr	r0, [pc, #52]	; (8004cf4 <checkKapiSecimleri+0xa0>)
 8004cc0:	f004 faae 	bl	8009220 <HAL_GPIO_ReadPin>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10b      	bne.n	8004ce2 <checkKapiSecimleri+0x8e>
 8004cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cce:	4809      	ldr	r0, [pc, #36]	; (8004cf4 <checkKapiSecimleri+0xa0>)
 8004cd0:	f004 faa6 	bl	8009220 <HAL_GPIO_ReadPin>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d103      	bne.n	8004ce2 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <checkKapiSecimleri+0x9c>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004ce0:	e002      	b.n	8004ce8 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004ce2:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <checkKapiSecimleri+0x9c>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
}
 8004ce8:	bf00      	nop
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	20000228 	.word	0x20000228
 8004cf0:	20000273 	.word	0x20000273
 8004cf4:	40010800 	.word	0x40010800

08004cf8 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004cfc:	4b62      	ldr	r3, [pc, #392]	; (8004e88 <checkAktifCalisma+0x190>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f041 833e 	bne.w	8006382 <checkAktifCalisma+0x168a>
 8004d06:	4b61      	ldr	r3, [pc, #388]	; (8004e8c <checkAktifCalisma+0x194>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f041 8339 	bne.w	8006382 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004d10:	4b5f      	ldr	r3, [pc, #380]	; (8004e90 <checkAktifCalisma+0x198>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d11a      	bne.n	8004d4e <checkAktifCalisma+0x56>
 8004d18:	4b5e      	ldr	r3, [pc, #376]	; (8004e94 <checkAktifCalisma+0x19c>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d116      	bne.n	8004d4e <checkAktifCalisma+0x56>
 8004d20:	4b5d      	ldr	r3, [pc, #372]	; (8004e98 <checkAktifCalisma+0x1a0>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <checkAktifCalisma+0x46>
 8004d28:	4b5c      	ldr	r3, [pc, #368]	; (8004e9c <checkAktifCalisma+0x1a4>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	f083 0301 	eor.w	r3, r3, #1
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <checkAktifCalisma+0x46>
 8004d36:	4b5a      	ldr	r3, [pc, #360]	; (8004ea0 <checkAktifCalisma+0x1a8>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d007      	beq.n	8004d4e <checkAktifCalisma+0x56>
 8004d3e:	4b59      	ldr	r3, [pc, #356]	; (8004ea4 <checkAktifCalisma+0x1ac>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d018      	beq.n	8004d78 <checkAktifCalisma+0x80>
 8004d46:	4b58      	ldr	r3, [pc, #352]	; (8004ea8 <checkAktifCalisma+0x1b0>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d114      	bne.n	8004d78 <checkAktifCalisma+0x80>
 8004d4e:	4b57      	ldr	r3, [pc, #348]	; (8004eac <checkAktifCalisma+0x1b4>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d010      	beq.n	8004d78 <checkAktifCalisma+0x80>
 8004d56:	4b56      	ldr	r3, [pc, #344]	; (8004eb0 <checkAktifCalisma+0x1b8>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00c      	beq.n	8004d78 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d64:	4853      	ldr	r0, [pc, #332]	; (8004eb4 <checkAktifCalisma+0x1bc>)
 8004d66:	f004 fa72 	bl	800924e <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004d6a:	4b53      	ldr	r3, [pc, #332]	; (8004eb8 <checkAktifCalisma+0x1c0>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004d70:	4b52      	ldr	r3, [pc, #328]	; (8004ebc <checkAktifCalisma+0x1c4>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	e008      	b.n	8004d8a <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d7e:	484d      	ldr	r0, [pc, #308]	; (8004eb4 <checkAktifCalisma+0x1bc>)
 8004d80:	f004 fa65 	bl	800924e <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004d84:	4b4c      	ldr	r3, [pc, #304]	; (8004eb8 <checkAktifCalisma+0x1c0>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004d8a:	4b40      	ldr	r3, [pc, #256]	; (8004e8c <checkAktifCalisma+0x194>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d160      	bne.n	8004e54 <checkAktifCalisma+0x15c>
 8004d92:	4b46      	ldr	r3, [pc, #280]	; (8004eac <checkAktifCalisma+0x1b4>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d05c      	beq.n	8004e54 <checkAktifCalisma+0x15c>
 8004d9a:	4b45      	ldr	r3, [pc, #276]	; (8004eb0 <checkAktifCalisma+0x1b8>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d058      	beq.n	8004e54 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004da2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004da6:	4843      	ldr	r0, [pc, #268]	; (8004eb4 <checkAktifCalisma+0x1bc>)
 8004da8:	f004 fa3a 	bl	8009220 <HAL_GPIO_ReadPin>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <checkAktifCalisma+0xc2>
 8004db2:	4b43      	ldr	r3, [pc, #268]	; (8004ec0 <checkAktifCalisma+0x1c8>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d04c      	beq.n	8004e54 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004dba:	2102      	movs	r1, #2
 8004dbc:	4841      	ldr	r0, [pc, #260]	; (8004ec4 <checkAktifCalisma+0x1cc>)
 8004dbe:	f004 fa2f 	bl	8009220 <HAL_GPIO_ReadPin>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d145      	bne.n	8004e54 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004dc8:	4b3f      	ldr	r3, [pc, #252]	; (8004ec8 <checkAktifCalisma+0x1d0>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d041      	beq.n	8004e54 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004dd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004dd4:	4837      	ldr	r0, [pc, #220]	; (8004eb4 <checkAktifCalisma+0x1bc>)
 8004dd6:	f004 fa23 	bl	8009220 <HAL_GPIO_ReadPin>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d10e      	bne.n	8004dfe <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004de0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004de4:	4833      	ldr	r0, [pc, #204]	; (8004eb4 <checkAktifCalisma+0x1bc>)
 8004de6:	f004 fa1b 	bl	8009220 <HAL_GPIO_ReadPin>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d106      	bne.n	8004dfe <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004df0:	2140      	movs	r1, #64	; 0x40
 8004df2:	4834      	ldr	r0, [pc, #208]	; (8004ec4 <checkAktifCalisma+0x1cc>)
 8004df4:	f004 fa14 	bl	8009220 <HAL_GPIO_ReadPin>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d003      	beq.n	8004e06 <checkAktifCalisma+0x10e>
 8004dfe:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <checkAktifCalisma+0x198>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d026      	beq.n	8004e54 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004e06:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <checkAktifCalisma+0x1a0>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	f083 0301 	eor.w	r3, r3, #1
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01f      	beq.n	8004e54 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004e14:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <checkAktifCalisma+0x19c>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	f083 0301 	eor.w	r3, r3, #1
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d018      	beq.n	8004e54 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004e22:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <checkAktifCalisma+0x1ac>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	f083 0301 	eor.w	r3, r3, #1
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d011      	beq.n	8004e54 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004e30:	4b26      	ldr	r3, [pc, #152]	; (8004ecc <checkAktifCalisma+0x1d4>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	f083 0301 	eor.w	r3, r3, #1
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004e3e:	4b24      	ldr	r3, [pc, #144]	; (8004ed0 <checkAktifCalisma+0x1d8>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	f083 0301 	eor.w	r3, r3, #1
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004e4c:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <checkAktifCalisma+0x198>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	e002      	b.n	8004e5a <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004e54:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <checkAktifCalisma+0x198>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <checkAktifCalisma+0x198>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d03a      	beq.n	8004ed8 <checkAktifCalisma+0x1e0>
 8004e62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e66:	4817      	ldr	r0, [pc, #92]	; (8004ec4 <checkAktifCalisma+0x1cc>)
 8004e68:	f004 f9da 	bl	8009220 <HAL_GPIO_ReadPin>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d132      	bne.n	8004ed8 <checkAktifCalisma+0x1e0>
 8004e72:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <checkAktifCalisma+0x1dc>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d02e      	beq.n	8004ed8 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e80:	480c      	ldr	r0, [pc, #48]	; (8004eb4 <checkAktifCalisma+0x1bc>)
 8004e82:	f004 f9e4 	bl	800924e <HAL_GPIO_WritePin>
 8004e86:	e02d      	b.n	8004ee4 <checkAktifCalisma+0x1ec>
 8004e88:	2000023e 	.word	0x2000023e
 8004e8c:	2000023d 	.word	0x2000023d
 8004e90:	20000255 	.word	0x20000255
 8004e94:	20000256 	.word	0x20000256
 8004e98:	20000258 	.word	0x20000258
 8004e9c:	20000250 	.word	0x20000250
 8004ea0:	20000233 	.word	0x20000233
 8004ea4:	20000257 	.word	0x20000257
 8004ea8:	20000232 	.word	0x20000232
 8004eac:	20000272 	.word	0x20000272
 8004eb0:	20000273 	.word	0x20000273
 8004eb4:	40010c00 	.word	0x40010c00
 8004eb8:	20000274 	.word	0x20000274
 8004ebc:	2000025f 	.word	0x2000025f
 8004ec0:	2000025c 	.word	0x2000025c
 8004ec4:	40011000 	.word	0x40011000
 8004ec8:	20000223 	.word	0x20000223
 8004ecc:	2000025a 	.word	0x2000025a
 8004ed0:	2000025b 	.word	0x2000025b
 8004ed4:	2000022e 	.word	0x2000022e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ede:	4860      	ldr	r0, [pc, #384]	; (8005060 <checkAktifCalisma+0x368>)
 8004ee0:	f004 f9b5 	bl	800924e <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004ee4:	4b5f      	ldr	r3, [pc, #380]	; (8005064 <checkAktifCalisma+0x36c>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d013      	beq.n	8004f14 <checkAktifCalisma+0x21c>
 8004eec:	4b5e      	ldr	r3, [pc, #376]	; (8005068 <checkAktifCalisma+0x370>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d007      	beq.n	8004f04 <checkAktifCalisma+0x20c>
 8004ef4:	4b5c      	ldr	r3, [pc, #368]	; (8005068 <checkAktifCalisma+0x370>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d003      	beq.n	8004f04 <checkAktifCalisma+0x20c>
 8004efc:	4b5b      	ldr	r3, [pc, #364]	; (800506c <checkAktifCalisma+0x374>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d107      	bne.n	8004f14 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004f04:	2201      	movs	r2, #1
 8004f06:	2104      	movs	r1, #4
 8004f08:	4855      	ldr	r0, [pc, #340]	; (8005060 <checkAktifCalisma+0x368>)
 8004f0a:	f004 f9a0 	bl	800924e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004f0e:	4b58      	ldr	r3, [pc, #352]	; (8005070 <checkAktifCalisma+0x378>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004f14:	4b56      	ldr	r3, [pc, #344]	; (8005070 <checkAktifCalisma+0x378>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d02f      	beq.n	8004f7c <checkAktifCalisma+0x284>
 8004f1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f20:	484f      	ldr	r0, [pc, #316]	; (8005060 <checkAktifCalisma+0x368>)
 8004f22:	f004 f97d 	bl	8009220 <HAL_GPIO_ReadPin>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d106      	bne.n	8004f3a <checkAktifCalisma+0x242>
 8004f2c:	4b51      	ldr	r3, [pc, #324]	; (8005074 <checkAktifCalisma+0x37c>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	f083 0301 	eor.w	r3, r3, #1
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <checkAktifCalisma+0x250>
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	484e      	ldr	r0, [pc, #312]	; (8005078 <checkAktifCalisma+0x380>)
 8004f3e:	f004 f96f 	bl	8009220 <HAL_GPIO_ReadPin>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d119      	bne.n	8004f7c <checkAktifCalisma+0x284>
 8004f48:	4b4c      	ldr	r3, [pc, #304]	; (800507c <checkAktifCalisma+0x384>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d015      	beq.n	8004f7c <checkAktifCalisma+0x284>
 8004f50:	4b4b      	ldr	r3, [pc, #300]	; (8005080 <checkAktifCalisma+0x388>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d011      	beq.n	8004f7c <checkAktifCalisma+0x284>
 8004f58:	4b4a      	ldr	r3, [pc, #296]	; (8005084 <checkAktifCalisma+0x38c>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00d      	beq.n	8004f7c <checkAktifCalisma+0x284>
 8004f60:	4b49      	ldr	r3, [pc, #292]	; (8005088 <checkAktifCalisma+0x390>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	f083 0301 	eor.w	r3, r3, #1
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d006      	beq.n	8004f7c <checkAktifCalisma+0x284>
			timer2=millis;
 8004f6e:	4b47      	ldr	r3, [pc, #284]	; (800508c <checkAktifCalisma+0x394>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a47      	ldr	r2, [pc, #284]	; (8005090 <checkAktifCalisma+0x398>)
 8004f74:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004f76:	4b44      	ldr	r3, [pc, #272]	; (8005088 <checkAktifCalisma+0x390>)
 8004f78:	2201      	movs	r2, #1
 8004f7a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004f7c:	4b43      	ldr	r3, [pc, #268]	; (800508c <checkAktifCalisma+0x394>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4b43      	ldr	r3, [pc, #268]	; (8005090 <checkAktifCalisma+0x398>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	4a43      	ldr	r2, [pc, #268]	; (8005094 <checkAktifCalisma+0x39c>)
 8004f88:	7812      	ldrb	r2, [r2, #0]
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d303      	bcc.n	8004f96 <checkAktifCalisma+0x29e>
 8004f8e:	4b3e      	ldr	r3, [pc, #248]	; (8005088 <checkAktifCalisma+0x390>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d111      	bne.n	8004fba <checkAktifCalisma+0x2c2>
 8004f96:	4b39      	ldr	r3, [pc, #228]	; (800507c <checkAktifCalisma+0x384>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	f083 0301 	eor.w	r3, r3, #1
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <checkAktifCalisma+0x2c2>
 8004fa4:	4b36      	ldr	r3, [pc, #216]	; (8005080 <checkAktifCalisma+0x388>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	f083 0301 	eor.w	r3, r3, #1
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <checkAktifCalisma+0x2c2>
 8004fb2:	4b34      	ldr	r3, [pc, #208]	; (8005084 <checkAktifCalisma+0x38c>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2104      	movs	r1, #4
 8004fbe:	4828      	ldr	r0, [pc, #160]	; (8005060 <checkAktifCalisma+0x368>)
 8004fc0:	f004 f945 	bl	800924e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004fc4:	4b2a      	ldr	r3, [pc, #168]	; (8005070 <checkAktifCalisma+0x378>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004fca:	4b2f      	ldr	r3, [pc, #188]	; (8005088 <checkAktifCalisma+0x390>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004fd0:	4b31      	ldr	r3, [pc, #196]	; (8005098 <checkAktifCalisma+0x3a0>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004fd8:	4b30      	ldr	r3, [pc, #192]	; (800509c <checkAktifCalisma+0x3a4>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004fde:	4b2e      	ldr	r3, [pc, #184]	; (8005098 <checkAktifCalisma+0x3a0>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d116      	bne.n	8005014 <checkAktifCalisma+0x31c>
 8004fe6:	4b2e      	ldr	r3, [pc, #184]	; (80050a0 <checkAktifCalisma+0x3a8>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d112      	bne.n	8005014 <checkAktifCalisma+0x31c>
 8004fee:	2101      	movs	r1, #1
 8004ff0:	4821      	ldr	r0, [pc, #132]	; (8005078 <checkAktifCalisma+0x380>)
 8004ff2:	f004 f915 	bl	8009220 <HAL_GPIO_ReadPin>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10b      	bne.n	8005014 <checkAktifCalisma+0x31c>
 8004ffc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005000:	4817      	ldr	r0, [pc, #92]	; (8005060 <checkAktifCalisma+0x368>)
 8005002:	f004 f90d 	bl	8009220 <HAL_GPIO_ReadPin>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d103      	bne.n	8005014 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 800500c:	4b23      	ldr	r3, [pc, #140]	; (800509c <checkAktifCalisma+0x3a4>)
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	e011      	b.n	8005038 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005014:	4b20      	ldr	r3, [pc, #128]	; (8005098 <checkAktifCalisma+0x3a0>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d10d      	bne.n	8005038 <checkAktifCalisma+0x340>
 800501c:	2101      	movs	r1, #1
 800501e:	4816      	ldr	r0, [pc, #88]	; (8005078 <checkAktifCalisma+0x380>)
 8005020:	f004 f8fe 	bl	8009220 <HAL_GPIO_ReadPin>
 8005024:	4603      	mov	r3, r0
 8005026:	2b01      	cmp	r3, #1
 8005028:	d106      	bne.n	8005038 <checkAktifCalisma+0x340>
 800502a:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <checkAktifCalisma+0x3a8>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005032:	4b1a      	ldr	r3, [pc, #104]	; (800509c <checkAktifCalisma+0x3a4>)
 8005034:	2200      	movs	r2, #0
 8005036:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005038:	4b17      	ldr	r3, [pc, #92]	; (8005098 <checkAktifCalisma+0x3a0>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d134      	bne.n	80050aa <checkAktifCalisma+0x3b2>
 8005040:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <checkAktifCalisma+0x3a8>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d130      	bne.n	80050aa <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005048:	2101      	movs	r1, #1
 800504a:	480b      	ldr	r0, [pc, #44]	; (8005078 <checkAktifCalisma+0x380>)
 800504c:	f004 f8e8 	bl	8009220 <HAL_GPIO_ReadPin>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d126      	bne.n	80050a4 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <checkAktifCalisma+0x3a4>)
 8005058:	2201      	movs	r2, #1
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	e025      	b.n	80050aa <checkAktifCalisma+0x3b2>
 800505e:	bf00      	nop
 8005060:	40010c00 	.word	0x40010c00
 8005064:	20000255 	.word	0x20000255
 8005068:	2000022f 	.word	0x2000022f
 800506c:	20000233 	.word	0x20000233
 8005070:	20000259 	.word	0x20000259
 8005074:	2000025c 	.word	0x2000025c
 8005078:	40011000 	.word	0x40011000
 800507c:	20000272 	.word	0x20000272
 8005080:	20000273 	.word	0x20000273
 8005084:	20000223 	.word	0x20000223
 8005088:	20000251 	.word	0x20000251
 800508c:	200001fc 	.word	0x200001fc
 8005090:	20000208 	.word	0x20000208
 8005094:	20000234 	.word	0x20000234
 8005098:	20000224 	.word	0x20000224
 800509c:	20000277 	.word	0x20000277
 80050a0:	20000221 	.word	0x20000221
			} else {
				cerceveVar=0;
 80050a4:	4b7f      	ldr	r3, [pc, #508]	; (80052a4 <checkAktifCalisma+0x5ac>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80050aa:	4b7f      	ldr	r3, [pc, #508]	; (80052a8 <checkAktifCalisma+0x5b0>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d17c      	bne.n	80051ac <checkAktifCalisma+0x4b4>
 80050b2:	4b7e      	ldr	r3, [pc, #504]	; (80052ac <checkAktifCalisma+0x5b4>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d078      	beq.n	80051ac <checkAktifCalisma+0x4b4>
 80050ba:	4b7d      	ldr	r3, [pc, #500]	; (80052b0 <checkAktifCalisma+0x5b8>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d074      	beq.n	80051ac <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80050c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050c6:	487b      	ldr	r0, [pc, #492]	; (80052b4 <checkAktifCalisma+0x5bc>)
 80050c8:	f004 f8aa 	bl	8009220 <HAL_GPIO_ReadPin>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <checkAktifCalisma+0x3e2>
 80050d2:	4b79      	ldr	r3, [pc, #484]	; (80052b8 <checkAktifCalisma+0x5c0>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d068      	beq.n	80051ac <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80050da:	4b72      	ldr	r3, [pc, #456]	; (80052a4 <checkAktifCalisma+0x5ac>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d064      	beq.n	80051ac <checkAktifCalisma+0x4b4>
 80050e2:	4b76      	ldr	r3, [pc, #472]	; (80052bc <checkAktifCalisma+0x5c4>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	f083 0301 	eor.w	r3, r3, #1
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d05d      	beq.n	80051ac <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80050f0:	2104      	movs	r1, #4
 80050f2:	4873      	ldr	r0, [pc, #460]	; (80052c0 <checkAktifCalisma+0x5c8>)
 80050f4:	f004 f894 	bl	8009220 <HAL_GPIO_ReadPin>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <checkAktifCalisma+0x40e>
 80050fe:	4b71      	ldr	r3, [pc, #452]	; (80052c4 <checkAktifCalisma+0x5cc>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d152      	bne.n	80051ac <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800510a:	486a      	ldr	r0, [pc, #424]	; (80052b4 <checkAktifCalisma+0x5bc>)
 800510c:	f004 f888 	bl	8009220 <HAL_GPIO_ReadPin>
 8005110:	4603      	mov	r3, r0
 8005112:	2b01      	cmp	r3, #1
 8005114:	d10e      	bne.n	8005134 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800511a:	4866      	ldr	r0, [pc, #408]	; (80052b4 <checkAktifCalisma+0x5bc>)
 800511c:	f004 f880 	bl	8009220 <HAL_GPIO_ReadPin>
 8005120:	4603      	mov	r3, r0
 8005122:	2b01      	cmp	r3, #1
 8005124:	d106      	bne.n	8005134 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005126:	2140      	movs	r1, #64	; 0x40
 8005128:	4865      	ldr	r0, [pc, #404]	; (80052c0 <checkAktifCalisma+0x5c8>)
 800512a:	f004 f879 	bl	8009220 <HAL_GPIO_ReadPin>
 800512e:	4603      	mov	r3, r0
 8005130:	2b01      	cmp	r3, #1
 8005132:	d003      	beq.n	800513c <checkAktifCalisma+0x444>
 8005134:	4b64      	ldr	r3, [pc, #400]	; (80052c8 <checkAktifCalisma+0x5d0>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d037      	beq.n	80051ac <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 800513c:	4b63      	ldr	r3, [pc, #396]	; (80052cc <checkAktifCalisma+0x5d4>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	f083 0301 	eor.w	r3, r3, #1
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d030      	beq.n	80051ac <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800514a:	4b61      	ldr	r3, [pc, #388]	; (80052d0 <checkAktifCalisma+0x5d8>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	f083 0301 	eor.w	r3, r3, #1
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d029      	beq.n	80051ac <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005158:	4b5e      	ldr	r3, [pc, #376]	; (80052d4 <checkAktifCalisma+0x5dc>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	f083 0301 	eor.w	r3, r3, #1
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d022      	beq.n	80051ac <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005166:	4b5c      	ldr	r3, [pc, #368]	; (80052d8 <checkAktifCalisma+0x5e0>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	f083 0301 	eor.w	r3, r3, #1
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01b      	beq.n	80051ac <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005174:	4b59      	ldr	r3, [pc, #356]	; (80052dc <checkAktifCalisma+0x5e4>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	f083 0301 	eor.w	r3, r3, #1
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d014      	beq.n	80051ac <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005182:	4b57      	ldr	r3, [pc, #348]	; (80052e0 <checkAktifCalisma+0x5e8>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	f083 0301 	eor.w	r3, r3, #1
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00d      	beq.n	80051ac <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005190:	2201      	movs	r2, #1
 8005192:	2102      	movs	r1, #2
 8005194:	4847      	ldr	r0, [pc, #284]	; (80052b4 <checkAktifCalisma+0x5bc>)
 8005196:	f004 f85a 	bl	800924e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 800519a:	4b4b      	ldr	r3, [pc, #300]	; (80052c8 <checkAktifCalisma+0x5d0>)
 800519c:	2201      	movs	r2, #1
 800519e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80051a0:	4b50      	ldr	r3, [pc, #320]	; (80052e4 <checkAktifCalisma+0x5ec>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80051a6:	4b50      	ldr	r3, [pc, #320]	; (80052e8 <checkAktifCalisma+0x5f0>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80051ac:	4b46      	ldr	r3, [pc, #280]	; (80052c8 <checkAktifCalisma+0x5d0>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d033      	beq.n	800521c <checkAktifCalisma+0x524>
 80051b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051b8:	483e      	ldr	r0, [pc, #248]	; (80052b4 <checkAktifCalisma+0x5bc>)
 80051ba:	f004 f831 	bl	8009220 <HAL_GPIO_ReadPin>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d106      	bne.n	80051d2 <checkAktifCalisma+0x4da>
 80051c4:	4b3c      	ldr	r3, [pc, #240]	; (80052b8 <checkAktifCalisma+0x5c0>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	f083 0301 	eor.w	r3, r3, #1
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <checkAktifCalisma+0x4f0>
 80051d2:	2104      	movs	r1, #4
 80051d4:	483a      	ldr	r0, [pc, #232]	; (80052c0 <checkAktifCalisma+0x5c8>)
 80051d6:	f004 f823 	bl	8009220 <HAL_GPIO_ReadPin>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d11d      	bne.n	800521c <checkAktifCalisma+0x524>
 80051e0:	4b38      	ldr	r3, [pc, #224]	; (80052c4 <checkAktifCalisma+0x5cc>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d019      	beq.n	800521c <checkAktifCalisma+0x524>
 80051e8:	4b30      	ldr	r3, [pc, #192]	; (80052ac <checkAktifCalisma+0x5b4>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d015      	beq.n	800521c <checkAktifCalisma+0x524>
 80051f0:	4b2f      	ldr	r3, [pc, #188]	; (80052b0 <checkAktifCalisma+0x5b8>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d011      	beq.n	800521c <checkAktifCalisma+0x524>
 80051f8:	4b2a      	ldr	r3, [pc, #168]	; (80052a4 <checkAktifCalisma+0x5ac>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00d      	beq.n	800521c <checkAktifCalisma+0x524>
 8005200:	4b3a      	ldr	r3, [pc, #232]	; (80052ec <checkAktifCalisma+0x5f4>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	f083 0301 	eor.w	r3, r3, #1
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d006      	beq.n	800521c <checkAktifCalisma+0x524>
			timer2=millis;
 800520e:	4b38      	ldr	r3, [pc, #224]	; (80052f0 <checkAktifCalisma+0x5f8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a38      	ldr	r2, [pc, #224]	; (80052f4 <checkAktifCalisma+0x5fc>)
 8005214:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005216:	4b35      	ldr	r3, [pc, #212]	; (80052ec <checkAktifCalisma+0x5f4>)
 8005218:	2201      	movs	r2, #1
 800521a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800521c:	4b34      	ldr	r3, [pc, #208]	; (80052f0 <checkAktifCalisma+0x5f8>)
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	4b34      	ldr	r3, [pc, #208]	; (80052f4 <checkAktifCalisma+0x5fc>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	4a34      	ldr	r2, [pc, #208]	; (80052f8 <checkAktifCalisma+0x600>)
 8005228:	7812      	ldrb	r2, [r2, #0]
 800522a:	4293      	cmp	r3, r2
 800522c:	d303      	bcc.n	8005236 <checkAktifCalisma+0x53e>
 800522e:	4b2f      	ldr	r3, [pc, #188]	; (80052ec <checkAktifCalisma+0x5f4>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d114      	bne.n	8005260 <checkAktifCalisma+0x568>
 8005236:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <checkAktifCalisma+0x5b4>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	f083 0301 	eor.w	r3, r3, #1
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10d      	bne.n	8005260 <checkAktifCalisma+0x568>
 8005244:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <checkAktifCalisma+0x5b8>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	f083 0301 	eor.w	r3, r3, #1
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <checkAktifCalisma+0x568>
 8005252:	4b14      	ldr	r3, [pc, #80]	; (80052a4 <checkAktifCalisma+0x5ac>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	f083 0301 	eor.w	r3, r3, #1
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005260:	2200      	movs	r2, #0
 8005262:	2102      	movs	r1, #2
 8005264:	4813      	ldr	r0, [pc, #76]	; (80052b4 <checkAktifCalisma+0x5bc>)
 8005266:	f003 fff2 	bl	800924e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800526a:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <checkAktifCalisma+0x5d0>)
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005270:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <checkAktifCalisma+0x5f4>)
 8005272:	2200      	movs	r2, #0
 8005274:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005276:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <checkAktifCalisma+0x5d0>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d040      	beq.n	8005300 <checkAktifCalisma+0x608>
 800527e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005282:	480f      	ldr	r0, [pc, #60]	; (80052c0 <checkAktifCalisma+0x5c8>)
 8005284:	f003 ffcc 	bl	8009220 <HAL_GPIO_ReadPin>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d138      	bne.n	8005300 <checkAktifCalisma+0x608>
 800528e:	4b1b      	ldr	r3, [pc, #108]	; (80052fc <checkAktifCalisma+0x604>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d034      	beq.n	8005300 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005296:	2201      	movs	r2, #1
 8005298:	2101      	movs	r1, #1
 800529a:	4806      	ldr	r0, [pc, #24]	; (80052b4 <checkAktifCalisma+0x5bc>)
 800529c:	f003 ffd7 	bl	800924e <HAL_GPIO_WritePin>
 80052a0:	e033      	b.n	800530a <checkAktifCalisma+0x612>
 80052a2:	bf00      	nop
 80052a4:	20000277 	.word	0x20000277
 80052a8:	2000023d 	.word	0x2000023d
 80052ac:	20000272 	.word	0x20000272
 80052b0:	20000273 	.word	0x20000273
 80052b4:	40010c00 	.word	0x40010c00
 80052b8:	2000025d 	.word	0x2000025d
 80052bc:	20000271 	.word	0x20000271
 80052c0:	40011000 	.word	0x40011000
 80052c4:	20000226 	.word	0x20000226
 80052c8:	20000258 	.word	0x20000258
 80052cc:	20000255 	.word	0x20000255
 80052d0:	20000259 	.word	0x20000259
 80052d4:	20000256 	.word	0x20000256
 80052d8:	20000257 	.word	0x20000257
 80052dc:	2000025a 	.word	0x2000025a
 80052e0:	2000025b 	.word	0x2000025b
 80052e4:	20000260 	.word	0x20000260
 80052e8:	20000281 	.word	0x20000281
 80052ec:	20000250 	.word	0x20000250
 80052f0:	200001fc 	.word	0x200001fc
 80052f4:	20000208 	.word	0x20000208
 80052f8:	20000235 	.word	0x20000235
 80052fc:	20000225 	.word	0x20000225
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005300:	2200      	movs	r2, #0
 8005302:	2101      	movs	r1, #1
 8005304:	4836      	ldr	r0, [pc, #216]	; (80053e0 <checkAktifCalisma+0x6e8>)
 8005306:	f003 ffa2 	bl	800924e <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800530a:	4b36      	ldr	r3, [pc, #216]	; (80053e4 <checkAktifCalisma+0x6ec>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f040 8080 	bne.w	8005414 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005314:	4b34      	ldr	r3, [pc, #208]	; (80053e8 <checkAktifCalisma+0x6f0>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d003      	beq.n	8005324 <checkAktifCalisma+0x62c>
 800531c:	4b32      	ldr	r3, [pc, #200]	; (80053e8 <checkAktifCalisma+0x6f0>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d177      	bne.n	8005414 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005324:	4b31      	ldr	r3, [pc, #196]	; (80053ec <checkAktifCalisma+0x6f4>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d073      	beq.n	8005414 <checkAktifCalisma+0x71c>
 800532c:	4b30      	ldr	r3, [pc, #192]	; (80053f0 <checkAktifCalisma+0x6f8>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d06f      	beq.n	8005414 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005334:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005338:	4829      	ldr	r0, [pc, #164]	; (80053e0 <checkAktifCalisma+0x6e8>)
 800533a:	f003 ff71 	bl	8009220 <HAL_GPIO_ReadPin>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d167      	bne.n	8005414 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005348:	482a      	ldr	r0, [pc, #168]	; (80053f4 <checkAktifCalisma+0x6fc>)
 800534a:	f003 ff69 	bl	8009220 <HAL_GPIO_ReadPin>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <checkAktifCalisma+0x664>
 8005354:	4b28      	ldr	r3, [pc, #160]	; (80053f8 <checkAktifCalisma+0x700>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d15b      	bne.n	8005414 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800535c:	2140      	movs	r1, #64	; 0x40
 800535e:	4825      	ldr	r0, [pc, #148]	; (80053f4 <checkAktifCalisma+0x6fc>)
 8005360:	f003 ff5e 	bl	8009220 <HAL_GPIO_ReadPin>
 8005364:	4603      	mov	r3, r0
 8005366:	2b01      	cmp	r3, #1
 8005368:	d10f      	bne.n	800538a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800536a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800536e:	481c      	ldr	r0, [pc, #112]	; (80053e0 <checkAktifCalisma+0x6e8>)
 8005370:	f003 ff56 	bl	8009220 <HAL_GPIO_ReadPin>
 8005374:	4603      	mov	r3, r0
 8005376:	2b01      	cmp	r3, #1
 8005378:	d107      	bne.n	800538a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800537a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800537e:	4818      	ldr	r0, [pc, #96]	; (80053e0 <checkAktifCalisma+0x6e8>)
 8005380:	f003 ff4e 	bl	8009220 <HAL_GPIO_ReadPin>
 8005384:	4603      	mov	r3, r0
 8005386:	2b01      	cmp	r3, #1
 8005388:	d003      	beq.n	8005392 <checkAktifCalisma+0x69a>
 800538a:	4b1c      	ldr	r3, [pc, #112]	; (80053fc <checkAktifCalisma+0x704>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d040      	beq.n	8005414 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005392:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <checkAktifCalisma+0x708>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	f083 0301 	eor.w	r3, r3, #1
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d039      	beq.n	8005414 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80053a0:	4b18      	ldr	r3, [pc, #96]	; (8005404 <checkAktifCalisma+0x70c>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	f083 0301 	eor.w	r3, r3, #1
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d032      	beq.n	8005414 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80053ae:	4b16      	ldr	r3, [pc, #88]	; (8005408 <checkAktifCalisma+0x710>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	f083 0301 	eor.w	r3, r3, #1
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d02b      	beq.n	8005414 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80053bc:	4b13      	ldr	r3, [pc, #76]	; (800540c <checkAktifCalisma+0x714>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	f083 0301 	eor.w	r3, r3, #1
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d024      	beq.n	8005414 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80053ca:	4b11      	ldr	r3, [pc, #68]	; (8005410 <checkAktifCalisma+0x718>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	f083 0301 	eor.w	r3, r3, #1
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01d      	beq.n	8005414 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80053d8:	4b08      	ldr	r3, [pc, #32]	; (80053fc <checkAktifCalisma+0x704>)
 80053da:	2201      	movs	r2, #1
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	e01c      	b.n	800541a <checkAktifCalisma+0x722>
 80053e0:	40010c00 	.word	0x40010c00
 80053e4:	2000023d 	.word	0x2000023d
 80053e8:	2000022f 	.word	0x2000022f
 80053ec:	20000272 	.word	0x20000272
 80053f0:	20000273 	.word	0x20000273
 80053f4:	40011000 	.word	0x40011000
 80053f8:	20000230 	.word	0x20000230
 80053fc:	20000256 	.word	0x20000256
 8005400:	20000255 	.word	0x20000255
 8005404:	20000259 	.word	0x20000259
 8005408:	20000258 	.word	0x20000258
 800540c:	20000257 	.word	0x20000257
 8005410:	2000025b 	.word	0x2000025b
		} else {
			devmotoryukaricalisiyor=0;
 8005414:	4b64      	ldr	r3, [pc, #400]	; (80055a8 <checkAktifCalisma+0x8b0>)
 8005416:	2200      	movs	r2, #0
 8005418:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800541a:	4b63      	ldr	r3, [pc, #396]	; (80055a8 <checkAktifCalisma+0x8b0>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005422:	2201      	movs	r2, #1
 8005424:	2120      	movs	r1, #32
 8005426:	4861      	ldr	r0, [pc, #388]	; (80055ac <checkAktifCalisma+0x8b4>)
 8005428:	f003 ff11 	bl	800924e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 800542c:	4b60      	ldr	r3, [pc, #384]	; (80055b0 <checkAktifCalisma+0x8b8>)
 800542e:	2201      	movs	r2, #1
 8005430:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005432:	4b5f      	ldr	r3, [pc, #380]	; (80055b0 <checkAktifCalisma+0x8b8>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d025      	beq.n	8005486 <checkAktifCalisma+0x78e>
 800543a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800543e:	485d      	ldr	r0, [pc, #372]	; (80055b4 <checkAktifCalisma+0x8bc>)
 8005440:	f003 feee 	bl	8009220 <HAL_GPIO_ReadPin>
 8005444:	4603      	mov	r3, r0
 8005446:	2b01      	cmp	r3, #1
 8005448:	d007      	beq.n	800545a <checkAktifCalisma+0x762>
 800544a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800544e:	4857      	ldr	r0, [pc, #348]	; (80055ac <checkAktifCalisma+0x8b4>)
 8005450:	f003 fee6 	bl	8009220 <HAL_GPIO_ReadPin>
 8005454:	4603      	mov	r3, r0
 8005456:	2b01      	cmp	r3, #1
 8005458:	d115      	bne.n	8005486 <checkAktifCalisma+0x78e>
 800545a:	4b57      	ldr	r3, [pc, #348]	; (80055b8 <checkAktifCalisma+0x8c0>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d011      	beq.n	8005486 <checkAktifCalisma+0x78e>
 8005462:	4b56      	ldr	r3, [pc, #344]	; (80055bc <checkAktifCalisma+0x8c4>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00d      	beq.n	8005486 <checkAktifCalisma+0x78e>
 800546a:	4b55      	ldr	r3, [pc, #340]	; (80055c0 <checkAktifCalisma+0x8c8>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	f083 0301 	eor.w	r3, r3, #1
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d006      	beq.n	8005486 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005478:	4b52      	ldr	r3, [pc, #328]	; (80055c4 <checkAktifCalisma+0x8cc>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a52      	ldr	r2, [pc, #328]	; (80055c8 <checkAktifCalisma+0x8d0>)
 800547e:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005480:	4b4f      	ldr	r3, [pc, #316]	; (80055c0 <checkAktifCalisma+0x8c8>)
 8005482:	2201      	movs	r2, #1
 8005484:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005486:	4b4f      	ldr	r3, [pc, #316]	; (80055c4 <checkAktifCalisma+0x8cc>)
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	4b4f      	ldr	r3, [pc, #316]	; (80055c8 <checkAktifCalisma+0x8d0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	4a4e      	ldr	r2, [pc, #312]	; (80055cc <checkAktifCalisma+0x8d4>)
 8005492:	7812      	ldrb	r2, [r2, #0]
 8005494:	4293      	cmp	r3, r2
 8005496:	d303      	bcc.n	80054a0 <checkAktifCalisma+0x7a8>
 8005498:	4b49      	ldr	r3, [pc, #292]	; (80055c0 <checkAktifCalisma+0x8c8>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10d      	bne.n	80054bc <checkAktifCalisma+0x7c4>
 80054a0:	4b45      	ldr	r3, [pc, #276]	; (80055b8 <checkAktifCalisma+0x8c0>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	f083 0301 	eor.w	r3, r3, #1
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <checkAktifCalisma+0x7c4>
 80054ae:	4b43      	ldr	r3, [pc, #268]	; (80055bc <checkAktifCalisma+0x8c4>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	f083 0301 	eor.w	r3, r3, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80054bc:	2200      	movs	r2, #0
 80054be:	2120      	movs	r1, #32
 80054c0:	483a      	ldr	r0, [pc, #232]	; (80055ac <checkAktifCalisma+0x8b4>)
 80054c2:	f003 fec4 	bl	800924e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80054c6:	4b3a      	ldr	r3, [pc, #232]	; (80055b0 <checkAktifCalisma+0x8b8>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80054cc:	4b3c      	ldr	r3, [pc, #240]	; (80055c0 <checkAktifCalisma+0x8c8>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80054d2:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <checkAktifCalisma+0x8d8>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f040 8088 	bne.w	80055ec <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80054dc:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <checkAktifCalisma+0x8dc>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d003      	beq.n	80054ec <checkAktifCalisma+0x7f4>
 80054e4:	4b3b      	ldr	r3, [pc, #236]	; (80055d4 <checkAktifCalisma+0x8dc>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d17f      	bne.n	80055ec <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80054ec:	4b32      	ldr	r3, [pc, #200]	; (80055b8 <checkAktifCalisma+0x8c0>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d07b      	beq.n	80055ec <checkAktifCalisma+0x8f4>
 80054f4:	4b31      	ldr	r3, [pc, #196]	; (80055bc <checkAktifCalisma+0x8c4>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d077      	beq.n	80055ec <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80054fc:	2140      	movs	r1, #64	; 0x40
 80054fe:	482b      	ldr	r0, [pc, #172]	; (80055ac <checkAktifCalisma+0x8b4>)
 8005500:	f003 fe8e 	bl	8009220 <HAL_GPIO_ReadPin>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d170      	bne.n	80055ec <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800550a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800550e:	4827      	ldr	r0, [pc, #156]	; (80055ac <checkAktifCalisma+0x8b4>)
 8005510:	f003 fe86 	bl	8009220 <HAL_GPIO_ReadPin>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <checkAktifCalisma+0x82a>
 800551a:	4b2f      	ldr	r3, [pc, #188]	; (80055d8 <checkAktifCalisma+0x8e0>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d164      	bne.n	80055ec <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005526:	4823      	ldr	r0, [pc, #140]	; (80055b4 <checkAktifCalisma+0x8bc>)
 8005528:	f003 fe7a 	bl	8009220 <HAL_GPIO_ReadPin>
 800552c:	4603      	mov	r3, r0
 800552e:	2b01      	cmp	r3, #1
 8005530:	d10f      	bne.n	8005552 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005536:	481f      	ldr	r0, [pc, #124]	; (80055b4 <checkAktifCalisma+0x8bc>)
 8005538:	f003 fe72 	bl	8009220 <HAL_GPIO_ReadPin>
 800553c:	4603      	mov	r3, r0
 800553e:	2b01      	cmp	r3, #1
 8005540:	d107      	bne.n	8005552 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005542:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005546:	481b      	ldr	r0, [pc, #108]	; (80055b4 <checkAktifCalisma+0x8bc>)
 8005548:	f003 fe6a 	bl	8009220 <HAL_GPIO_ReadPin>
 800554c:	4603      	mov	r3, r0
 800554e:	2b01      	cmp	r3, #1
 8005550:	d003      	beq.n	800555a <checkAktifCalisma+0x862>
 8005552:	4b22      	ldr	r3, [pc, #136]	; (80055dc <checkAktifCalisma+0x8e4>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d048      	beq.n	80055ec <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800555a:	4b21      	ldr	r3, [pc, #132]	; (80055e0 <checkAktifCalisma+0x8e8>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	f083 0301 	eor.w	r3, r3, #1
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d041      	beq.n	80055ec <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005568:	4b1e      	ldr	r3, [pc, #120]	; (80055e4 <checkAktifCalisma+0x8ec>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f083 0301 	eor.w	r3, r3, #1
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d03a      	beq.n	80055ec <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005576:	4b1c      	ldr	r3, [pc, #112]	; (80055e8 <checkAktifCalisma+0x8f0>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	f083 0301 	eor.w	r3, r3, #1
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d033      	beq.n	80055ec <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005584:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <checkAktifCalisma+0x8b8>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f083 0301 	eor.w	r3, r3, #1
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d02c      	beq.n	80055ec <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8005592:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <checkAktifCalisma+0x8b0>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	f083 0301 	eor.w	r3, r3, #1
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d025      	beq.n	80055ec <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80055a0:	4b0e      	ldr	r3, [pc, #56]	; (80055dc <checkAktifCalisma+0x8e4>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	e024      	b.n	80055f2 <checkAktifCalisma+0x8fa>
 80055a8:	20000256 	.word	0x20000256
 80055ac:	40011000 	.word	0x40011000
 80055b0:	2000025a 	.word	0x2000025a
 80055b4:	40010c00 	.word	0x40010c00
 80055b8:	20000272 	.word	0x20000272
 80055bc:	20000273 	.word	0x20000273
 80055c0:	20000252 	.word	0x20000252
 80055c4:	200001fc 	.word	0x200001fc
 80055c8:	20000208 	.word	0x20000208
 80055cc:	20000236 	.word	0x20000236
 80055d0:	2000023d 	.word	0x2000023d
 80055d4:	2000022f 	.word	0x2000022f
 80055d8:	20000231 	.word	0x20000231
 80055dc:	20000257 	.word	0x20000257
 80055e0:	20000255 	.word	0x20000255
 80055e4:	20000259 	.word	0x20000259
 80055e8:	20000258 	.word	0x20000258
		} else {
			devmotorasagicalisiyor=0;
 80055ec:	4b96      	ldr	r3, [pc, #600]	; (8005848 <checkAktifCalisma+0xb50>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80055f2:	4b95      	ldr	r3, [pc, #596]	; (8005848 <checkAktifCalisma+0xb50>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80055fa:	2201      	movs	r2, #1
 80055fc:	2110      	movs	r1, #16
 80055fe:	4893      	ldr	r0, [pc, #588]	; (800584c <checkAktifCalisma+0xb54>)
 8005600:	f003 fe25 	bl	800924e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005604:	4b92      	ldr	r3, [pc, #584]	; (8005850 <checkAktifCalisma+0xb58>)
 8005606:	2201      	movs	r2, #1
 8005608:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800560a:	4b91      	ldr	r3, [pc, #580]	; (8005850 <checkAktifCalisma+0xb58>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d024      	beq.n	800565c <checkAktifCalisma+0x964>
 8005612:	2140      	movs	r1, #64	; 0x40
 8005614:	488d      	ldr	r0, [pc, #564]	; (800584c <checkAktifCalisma+0xb54>)
 8005616:	f003 fe03 	bl	8009220 <HAL_GPIO_ReadPin>
 800561a:	4603      	mov	r3, r0
 800561c:	2b01      	cmp	r3, #1
 800561e:	d007      	beq.n	8005630 <checkAktifCalisma+0x938>
 8005620:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005624:	4889      	ldr	r0, [pc, #548]	; (800584c <checkAktifCalisma+0xb54>)
 8005626:	f003 fdfb 	bl	8009220 <HAL_GPIO_ReadPin>
 800562a:	4603      	mov	r3, r0
 800562c:	2b01      	cmp	r3, #1
 800562e:	d115      	bne.n	800565c <checkAktifCalisma+0x964>
 8005630:	4b88      	ldr	r3, [pc, #544]	; (8005854 <checkAktifCalisma+0xb5c>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d011      	beq.n	800565c <checkAktifCalisma+0x964>
 8005638:	4b87      	ldr	r3, [pc, #540]	; (8005858 <checkAktifCalisma+0xb60>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00d      	beq.n	800565c <checkAktifCalisma+0x964>
 8005640:	4b86      	ldr	r3, [pc, #536]	; (800585c <checkAktifCalisma+0xb64>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	f083 0301 	eor.w	r3, r3, #1
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d006      	beq.n	800565c <checkAktifCalisma+0x964>
			timer2=millis;
 800564e:	4b84      	ldr	r3, [pc, #528]	; (8005860 <checkAktifCalisma+0xb68>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a84      	ldr	r2, [pc, #528]	; (8005864 <checkAktifCalisma+0xb6c>)
 8005654:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005656:	4b81      	ldr	r3, [pc, #516]	; (800585c <checkAktifCalisma+0xb64>)
 8005658:	2201      	movs	r2, #1
 800565a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800565c:	4b80      	ldr	r3, [pc, #512]	; (8005860 <checkAktifCalisma+0xb68>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	4b80      	ldr	r3, [pc, #512]	; (8005864 <checkAktifCalisma+0xb6c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	4a80      	ldr	r2, [pc, #512]	; (8005868 <checkAktifCalisma+0xb70>)
 8005668:	7812      	ldrb	r2, [r2, #0]
 800566a:	4293      	cmp	r3, r2
 800566c:	d303      	bcc.n	8005676 <checkAktifCalisma+0x97e>
 800566e:	4b7b      	ldr	r3, [pc, #492]	; (800585c <checkAktifCalisma+0xb64>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10d      	bne.n	8005692 <checkAktifCalisma+0x99a>
 8005676:	4b77      	ldr	r3, [pc, #476]	; (8005854 <checkAktifCalisma+0xb5c>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	f083 0301 	eor.w	r3, r3, #1
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d106      	bne.n	8005692 <checkAktifCalisma+0x99a>
 8005684:	4b74      	ldr	r3, [pc, #464]	; (8005858 <checkAktifCalisma+0xb60>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	f083 0301 	eor.w	r3, r3, #1
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005692:	2200      	movs	r2, #0
 8005694:	2110      	movs	r1, #16
 8005696:	486d      	ldr	r0, [pc, #436]	; (800584c <checkAktifCalisma+0xb54>)
 8005698:	f003 fdd9 	bl	800924e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 800569c:	4b6c      	ldr	r3, [pc, #432]	; (8005850 <checkAktifCalisma+0xb58>)
 800569e:	2200      	movs	r2, #0
 80056a0:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80056a2:	4b6e      	ldr	r3, [pc, #440]	; (800585c <checkAktifCalisma+0xb64>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80056a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056ac:	486f      	ldr	r0, [pc, #444]	; (800586c <checkAktifCalisma+0xb74>)
 80056ae:	f003 fdb7 	bl	8009220 <HAL_GPIO_ReadPin>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d120      	bne.n	80056fa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80056b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056bc:	486b      	ldr	r0, [pc, #428]	; (800586c <checkAktifCalisma+0xb74>)
 80056be:	f003 fdaf 	bl	8009220 <HAL_GPIO_ReadPin>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d118      	bne.n	80056fa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80056c8:	2104      	movs	r1, #4
 80056ca:	4868      	ldr	r0, [pc, #416]	; (800586c <checkAktifCalisma+0xb74>)
 80056cc:	f003 fda8 	bl	8009220 <HAL_GPIO_ReadPin>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d111      	bne.n	80056fa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80056d6:	2102      	movs	r1, #2
 80056d8:	4864      	ldr	r0, [pc, #400]	; (800586c <checkAktifCalisma+0xb74>)
 80056da:	f003 fda1 	bl	8009220 <HAL_GPIO_ReadPin>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80056e4:	2101      	movs	r1, #1
 80056e6:	4861      	ldr	r0, [pc, #388]	; (800586c <checkAktifCalisma+0xb74>)
 80056e8:	f003 fd9a 	bl	8009220 <HAL_GPIO_ReadPin>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d103      	bne.n	80056fa <checkAktifCalisma+0xa02>
			makineStop=1;
 80056f2:	4b5f      	ldr	r3, [pc, #380]	; (8005870 <checkAktifCalisma+0xb78>)
 80056f4:	2201      	movs	r2, #1
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	e002      	b.n	8005700 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80056fa:	4b5d      	ldr	r3, [pc, #372]	; (8005870 <checkAktifCalisma+0xb78>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005700:	4b5c      	ldr	r3, [pc, #368]	; (8005874 <checkAktifCalisma+0xb7c>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d144      	bne.n	8005792 <checkAktifCalisma+0xa9a>
 8005708:	4b5b      	ldr	r3, [pc, #364]	; (8005878 <checkAktifCalisma+0xb80>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d003      	beq.n	8005718 <checkAktifCalisma+0xa20>
 8005710:	4b59      	ldr	r3, [pc, #356]	; (8005878 <checkAktifCalisma+0xb80>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d13c      	bne.n	8005792 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005718:	2180      	movs	r1, #128	; 0x80
 800571a:	484c      	ldr	r0, [pc, #304]	; (800584c <checkAktifCalisma+0xb54>)
 800571c:	f003 fd80 	bl	8009220 <HAL_GPIO_ReadPin>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d103      	bne.n	800572e <checkAktifCalisma+0xa36>
 8005726:	4b55      	ldr	r3, [pc, #340]	; (800587c <checkAktifCalisma+0xb84>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00b      	beq.n	8005746 <checkAktifCalisma+0xa4e>
 800572e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005732:	484e      	ldr	r0, [pc, #312]	; (800586c <checkAktifCalisma+0xb74>)
 8005734:	f003 fd74 	bl	8009220 <HAL_GPIO_ReadPin>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d129      	bne.n	8005792 <checkAktifCalisma+0xa9a>
 800573e:	4b4f      	ldr	r3, [pc, #316]	; (800587c <checkAktifCalisma+0xb84>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d125      	bne.n	8005792 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005746:	2104      	movs	r1, #4
 8005748:	4840      	ldr	r0, [pc, #256]	; (800584c <checkAktifCalisma+0xb54>)
 800574a:	f003 fd69 	bl	8009220 <HAL_GPIO_ReadPin>
 800574e:	4603      	mov	r3, r0
 8005750:	2b01      	cmp	r3, #1
 8005752:	d003      	beq.n	800575c <checkAktifCalisma+0xa64>
 8005754:	4b4a      	ldr	r3, [pc, #296]	; (8005880 <checkAktifCalisma+0xb88>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d11a      	bne.n	8005792 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800575c:	2102      	movs	r1, #2
 800575e:	483b      	ldr	r0, [pc, #236]	; (800584c <checkAktifCalisma+0xb54>)
 8005760:	f003 fd5e 	bl	8009220 <HAL_GPIO_ReadPin>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d113      	bne.n	8005792 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800576a:	4b46      	ldr	r3, [pc, #280]	; (8005884 <checkAktifCalisma+0xb8c>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f083 0301 	eor.w	r3, r3, #1
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00c      	beq.n	8005792 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005778:	4b3d      	ldr	r3, [pc, #244]	; (8005870 <checkAktifCalisma+0xb78>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d008      	beq.n	8005792 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005780:	4b41      	ldr	r3, [pc, #260]	; (8005888 <checkAktifCalisma+0xb90>)
 8005782:	2201      	movs	r2, #1
 8005784:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005786:	4b36      	ldr	r3, [pc, #216]	; (8005860 <checkAktifCalisma+0xb68>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a40      	ldr	r2, [pc, #256]	; (800588c <checkAktifCalisma+0xb94>)
 800578c:	6013      	str	r3, [r2, #0]
			bekle();
 800578e:	f7ff f901 	bl	8004994 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005792:	4b33      	ldr	r3, [pc, #204]	; (8005860 <checkAktifCalisma+0xb68>)
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	4b3d      	ldr	r3, [pc, #244]	; (800588c <checkAktifCalisma+0xb94>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	4a3c      	ldr	r2, [pc, #240]	; (8005890 <checkAktifCalisma+0xb98>)
 800579e:	7812      	ldrb	r2, [r2, #0]
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d211      	bcs.n	80057c8 <checkAktifCalisma+0xad0>
 80057a4:	2104      	movs	r1, #4
 80057a6:	4829      	ldr	r0, [pc, #164]	; (800584c <checkAktifCalisma+0xb54>)
 80057a8:	f003 fd3a 	bl	8009220 <HAL_GPIO_ReadPin>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <checkAktifCalisma+0xad0>
 80057b2:	4b33      	ldr	r3, [pc, #204]	; (8005880 <checkAktifCalisma+0xb88>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d006      	beq.n	80057c8 <checkAktifCalisma+0xad0>
 80057ba:	4b2d      	ldr	r3, [pc, #180]	; (8005870 <checkAktifCalisma+0xb78>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	f083 0301 	eor.w	r3, r3, #1
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80057c8:	4b2f      	ldr	r3, [pc, #188]	; (8005888 <checkAktifCalisma+0xb90>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057ce:	4b29      	ldr	r3, [pc, #164]	; (8005874 <checkAktifCalisma+0xb7c>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d160      	bne.n	8005898 <checkAktifCalisma+0xba0>
 80057d6:	4b28      	ldr	r3, [pc, #160]	; (8005878 <checkAktifCalisma+0xb80>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d003      	beq.n	80057e6 <checkAktifCalisma+0xaee>
 80057de:	4b26      	ldr	r3, [pc, #152]	; (8005878 <checkAktifCalisma+0xb80>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d158      	bne.n	8005898 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80057e6:	2104      	movs	r1, #4
 80057e8:	4818      	ldr	r0, [pc, #96]	; (800584c <checkAktifCalisma+0xb54>)
 80057ea:	f003 fd19 	bl	8009220 <HAL_GPIO_ReadPin>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d003      	beq.n	80057fc <checkAktifCalisma+0xb04>
 80057f4:	4b22      	ldr	r3, [pc, #136]	; (8005880 <checkAktifCalisma+0xb88>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d14d      	bne.n	8005898 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80057fc:	2102      	movs	r1, #2
 80057fe:	4813      	ldr	r0, [pc, #76]	; (800584c <checkAktifCalisma+0xb54>)
 8005800:	f003 fd0e 	bl	8009220 <HAL_GPIO_ReadPin>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d146      	bne.n	8005898 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800580a:	2180      	movs	r1, #128	; 0x80
 800580c:	480f      	ldr	r0, [pc, #60]	; (800584c <checkAktifCalisma+0xb54>)
 800580e:	f003 fd07 	bl	8009220 <HAL_GPIO_ReadPin>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <checkAktifCalisma+0xb28>
 8005818:	4b18      	ldr	r3, [pc, #96]	; (800587c <checkAktifCalisma+0xb84>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <checkAktifCalisma+0xb40>
 8005820:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005824:	4811      	ldr	r0, [pc, #68]	; (800586c <checkAktifCalisma+0xb74>)
 8005826:	f003 fcfb 	bl	8009220 <HAL_GPIO_ReadPin>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d133      	bne.n	8005898 <checkAktifCalisma+0xba0>
 8005830:	4b12      	ldr	r3, [pc, #72]	; (800587c <checkAktifCalisma+0xb84>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d12f      	bne.n	8005898 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005838:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <checkAktifCalisma+0xb78>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02b      	beq.n	8005898 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005840:	4b14      	ldr	r3, [pc, #80]	; (8005894 <checkAktifCalisma+0xb9c>)
 8005842:	2201      	movs	r2, #1
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	e02a      	b.n	800589e <checkAktifCalisma+0xba6>
 8005848:	20000257 	.word	0x20000257
 800584c:	40011000 	.word	0x40011000
 8005850:	2000025b 	.word	0x2000025b
 8005854:	20000272 	.word	0x20000272
 8005858:	20000273 	.word	0x20000273
 800585c:	20000253 	.word	0x20000253
 8005860:	200001fc 	.word	0x200001fc
 8005864:	20000208 	.word	0x20000208
 8005868:	20000236 	.word	0x20000236
 800586c:	40010c00 	.word	0x40010c00
 8005870:	20000262 	.word	0x20000262
 8005874:	20000229 	.word	0x20000229
 8005878:	20000228 	.word	0x20000228
 800587c:	2000022c 	.word	0x2000022c
 8005880:	20000226 	.word	0x20000226
 8005884:	2000024f 	.word	0x2000024f
 8005888:	20000263 	.word	0x20000263
 800588c:	20000200 	.word	0x20000200
 8005890:	20000239 	.word	0x20000239
 8005894:	20000264 	.word	0x20000264
		} else {
			kapi1butonkontrol=0;
 8005898:	4b8b      	ldr	r3, [pc, #556]	; (8005ac8 <checkAktifCalisma+0xdd0>)
 800589a:	2200      	movs	r2, #0
 800589c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800589e:	4b8b      	ldr	r3, [pc, #556]	; (8005acc <checkAktifCalisma+0xdd4>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d121      	bne.n	80058ea <checkAktifCalisma+0xbf2>
 80058a6:	4b8a      	ldr	r3, [pc, #552]	; (8005ad0 <checkAktifCalisma+0xdd8>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d003      	beq.n	80058b6 <checkAktifCalisma+0xbbe>
 80058ae:	4b88      	ldr	r3, [pc, #544]	; (8005ad0 <checkAktifCalisma+0xdd8>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d119      	bne.n	80058ea <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80058b6:	2104      	movs	r1, #4
 80058b8:	4886      	ldr	r0, [pc, #536]	; (8005ad4 <checkAktifCalisma+0xddc>)
 80058ba:	f003 fcb1 	bl	8009220 <HAL_GPIO_ReadPin>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d003      	beq.n	80058cc <checkAktifCalisma+0xbd4>
 80058c4:	4b84      	ldr	r3, [pc, #528]	; (8005ad8 <checkAktifCalisma+0xde0>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10e      	bne.n	80058ea <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058cc:	2102      	movs	r1, #2
 80058ce:	4881      	ldr	r0, [pc, #516]	; (8005ad4 <checkAktifCalisma+0xddc>)
 80058d0:	f003 fca6 	bl	8009220 <HAL_GPIO_ReadPin>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d107      	bne.n	80058ea <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80058da:	4b80      	ldr	r3, [pc, #512]	; (8005adc <checkAktifCalisma+0xde4>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80058e2:	4b7f      	ldr	r3, [pc, #508]	; (8005ae0 <checkAktifCalisma+0xde8>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	701a      	strb	r2, [r3, #0]
 80058e8:	e002      	b.n	80058f0 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80058ea:	4b7d      	ldr	r3, [pc, #500]	; (8005ae0 <checkAktifCalisma+0xde8>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80058f0:	4b75      	ldr	r3, [pc, #468]	; (8005ac8 <checkAktifCalisma+0xdd0>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d107      	bne.n	8005908 <checkAktifCalisma+0xc10>
 80058f8:	4b79      	ldr	r3, [pc, #484]	; (8005ae0 <checkAktifCalisma+0xde8>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d103      	bne.n	8005908 <checkAktifCalisma+0xc10>
 8005900:	4b78      	ldr	r3, [pc, #480]	; (8005ae4 <checkAktifCalisma+0xdec>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005908:	2201      	movs	r2, #1
 800590a:	2180      	movs	r1, #128	; 0x80
 800590c:	4876      	ldr	r0, [pc, #472]	; (8005ae8 <checkAktifCalisma+0xdf0>)
 800590e:	f003 fc9e 	bl	800924e <HAL_GPIO_WritePin>
 8005912:	e004      	b.n	800591e <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005914:	2200      	movs	r2, #0
 8005916:	2180      	movs	r1, #128	; 0x80
 8005918:	4873      	ldr	r0, [pc, #460]	; (8005ae8 <checkAktifCalisma+0xdf0>)
 800591a:	f003 fc98 	bl	800924e <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800591e:	4b73      	ldr	r3, [pc, #460]	; (8005aec <checkAktifCalisma+0xdf4>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d141      	bne.n	80059aa <checkAktifCalisma+0xcb2>
 8005926:	4b6a      	ldr	r3, [pc, #424]	; (8005ad0 <checkAktifCalisma+0xdd8>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d003      	beq.n	8005936 <checkAktifCalisma+0xc3e>
 800592e:	4b68      	ldr	r3, [pc, #416]	; (8005ad0 <checkAktifCalisma+0xdd8>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b03      	cmp	r3, #3
 8005934:	d139      	bne.n	80059aa <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800593a:	4866      	ldr	r0, [pc, #408]	; (8005ad4 <checkAktifCalisma+0xddc>)
 800593c:	f003 fc70 	bl	8009220 <HAL_GPIO_ReadPin>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <checkAktifCalisma+0xc56>
 8005946:	4b6a      	ldr	r3, [pc, #424]	; (8005af0 <checkAktifCalisma+0xdf8>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <checkAktifCalisma+0xc6e>
 800594e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005952:	4868      	ldr	r0, [pc, #416]	; (8005af4 <checkAktifCalisma+0xdfc>)
 8005954:	f003 fc64 	bl	8009220 <HAL_GPIO_ReadPin>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d125      	bne.n	80059aa <checkAktifCalisma+0xcb2>
 800595e:	4b64      	ldr	r3, [pc, #400]	; (8005af0 <checkAktifCalisma+0xdf8>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d121      	bne.n	80059aa <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005966:	2102      	movs	r1, #2
 8005968:	485a      	ldr	r0, [pc, #360]	; (8005ad4 <checkAktifCalisma+0xddc>)
 800596a:	f003 fc59 	bl	8009220 <HAL_GPIO_ReadPin>
 800596e:	4603      	mov	r3, r0
 8005970:	2b01      	cmp	r3, #1
 8005972:	d11a      	bne.n	80059aa <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005974:	2104      	movs	r1, #4
 8005976:	4857      	ldr	r0, [pc, #348]	; (8005ad4 <checkAktifCalisma+0xddc>)
 8005978:	f003 fc52 	bl	8009220 <HAL_GPIO_ReadPin>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d113      	bne.n	80059aa <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005982:	4b56      	ldr	r3, [pc, #344]	; (8005adc <checkAktifCalisma+0xde4>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00f      	beq.n	80059aa <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 800598a:	4b5b      	ldr	r3, [pc, #364]	; (8005af8 <checkAktifCalisma+0xe00>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f083 0301 	eor.w	r3, r3, #1
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005998:	4b58      	ldr	r3, [pc, #352]	; (8005afc <checkAktifCalisma+0xe04>)
 800599a:	2201      	movs	r2, #1
 800599c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800599e:	4b58      	ldr	r3, [pc, #352]	; (8005b00 <checkAktifCalisma+0xe08>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a58      	ldr	r2, [pc, #352]	; (8005b04 <checkAktifCalisma+0xe0c>)
 80059a4:	6013      	str	r3, [r2, #0]
			bekle();
 80059a6:	f7fe fff5 	bl	8004994 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80059aa:	4b55      	ldr	r3, [pc, #340]	; (8005b00 <checkAktifCalisma+0xe08>)
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4b55      	ldr	r3, [pc, #340]	; (8005b04 <checkAktifCalisma+0xe0c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	4a54      	ldr	r2, [pc, #336]	; (8005b08 <checkAktifCalisma+0xe10>)
 80059b6:	7812      	ldrb	r2, [r2, #0]
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d20d      	bcs.n	80059d8 <checkAktifCalisma+0xce0>
 80059bc:	2102      	movs	r1, #2
 80059be:	4845      	ldr	r0, [pc, #276]	; (8005ad4 <checkAktifCalisma+0xddc>)
 80059c0:	f003 fc2e 	bl	8009220 <HAL_GPIO_ReadPin>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d006      	beq.n	80059d8 <checkAktifCalisma+0xce0>
 80059ca:	4b44      	ldr	r3, [pc, #272]	; (8005adc <checkAktifCalisma+0xde4>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f083 0301 	eor.w	r3, r3, #1
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80059d8:	4b48      	ldr	r3, [pc, #288]	; (8005afc <checkAktifCalisma+0xe04>)
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059de:	4b43      	ldr	r3, [pc, #268]	; (8005aec <checkAktifCalisma+0xdf4>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d135      	bne.n	8005a52 <checkAktifCalisma+0xd5a>
 80059e6:	4b3a      	ldr	r3, [pc, #232]	; (8005ad0 <checkAktifCalisma+0xdd8>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d003      	beq.n	80059f6 <checkAktifCalisma+0xcfe>
 80059ee:	4b38      	ldr	r3, [pc, #224]	; (8005ad0 <checkAktifCalisma+0xdd8>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d12d      	bne.n	8005a52 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80059f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059fa:	4836      	ldr	r0, [pc, #216]	; (8005ad4 <checkAktifCalisma+0xddc>)
 80059fc:	f003 fc10 	bl	8009220 <HAL_GPIO_ReadPin>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <checkAktifCalisma+0xd16>
 8005a06:	4b3a      	ldr	r3, [pc, #232]	; (8005af0 <checkAktifCalisma+0xdf8>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <checkAktifCalisma+0xd2e>
 8005a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a12:	4838      	ldr	r0, [pc, #224]	; (8005af4 <checkAktifCalisma+0xdfc>)
 8005a14:	f003 fc04 	bl	8009220 <HAL_GPIO_ReadPin>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d119      	bne.n	8005a52 <checkAktifCalisma+0xd5a>
 8005a1e:	4b34      	ldr	r3, [pc, #208]	; (8005af0 <checkAktifCalisma+0xdf8>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d115      	bne.n	8005a52 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a26:	2102      	movs	r1, #2
 8005a28:	482a      	ldr	r0, [pc, #168]	; (8005ad4 <checkAktifCalisma+0xddc>)
 8005a2a:	f003 fbf9 	bl	8009220 <HAL_GPIO_ReadPin>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d10e      	bne.n	8005a52 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a34:	2104      	movs	r1, #4
 8005a36:	4827      	ldr	r0, [pc, #156]	; (8005ad4 <checkAktifCalisma+0xddc>)
 8005a38:	f003 fbf2 	bl	8009220 <HAL_GPIO_ReadPin>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d107      	bne.n	8005a52 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005a42:	4b26      	ldr	r3, [pc, #152]	; (8005adc <checkAktifCalisma+0xde4>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005a4a:	4b30      	ldr	r3, [pc, #192]	; (8005b0c <checkAktifCalisma+0xe14>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	e002      	b.n	8005a58 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005a52:	4b2e      	ldr	r3, [pc, #184]	; (8005b0c <checkAktifCalisma+0xe14>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a58:	4b24      	ldr	r3, [pc, #144]	; (8005aec <checkAktifCalisma+0xdf4>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d11d      	bne.n	8005a9c <checkAktifCalisma+0xda4>
 8005a60:	4b1b      	ldr	r3, [pc, #108]	; (8005ad0 <checkAktifCalisma+0xdd8>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d003      	beq.n	8005a70 <checkAktifCalisma+0xd78>
 8005a68:	4b19      	ldr	r3, [pc, #100]	; (8005ad0 <checkAktifCalisma+0xdd8>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d115      	bne.n	8005a9c <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a70:	2102      	movs	r1, #2
 8005a72:	4818      	ldr	r0, [pc, #96]	; (8005ad4 <checkAktifCalisma+0xddc>)
 8005a74:	f003 fbd4 	bl	8009220 <HAL_GPIO_ReadPin>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d10e      	bne.n	8005a9c <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a7e:	2104      	movs	r1, #4
 8005a80:	4814      	ldr	r0, [pc, #80]	; (8005ad4 <checkAktifCalisma+0xddc>)
 8005a82:	f003 fbcd 	bl	8009220 <HAL_GPIO_ReadPin>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d107      	bne.n	8005a9c <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005a8c:	4b13      	ldr	r3, [pc, #76]	; (8005adc <checkAktifCalisma+0xde4>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005a94:	4b1e      	ldr	r3, [pc, #120]	; (8005b10 <checkAktifCalisma+0xe18>)
 8005a96:	2201      	movs	r2, #1
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	e002      	b.n	8005aa2 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005a9c:	4b1c      	ldr	r3, [pc, #112]	; (8005b10 <checkAktifCalisma+0xe18>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005aa2:	4b1a      	ldr	r3, [pc, #104]	; (8005b0c <checkAktifCalisma+0xe14>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d107      	bne.n	8005aba <checkAktifCalisma+0xdc2>
 8005aaa:	4b19      	ldr	r3, [pc, #100]	; (8005b10 <checkAktifCalisma+0xe18>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <checkAktifCalisma+0xdc2>
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <checkAktifCalisma+0xe04>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d02c      	beq.n	8005b14 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005aba:	2201      	movs	r2, #1
 8005abc:	2140      	movs	r1, #64	; 0x40
 8005abe:	480a      	ldr	r0, [pc, #40]	; (8005ae8 <checkAktifCalisma+0xdf0>)
 8005ac0:	f003 fbc5 	bl	800924e <HAL_GPIO_WritePin>
 8005ac4:	e02b      	b.n	8005b1e <checkAktifCalisma+0xe26>
 8005ac6:	bf00      	nop
 8005ac8:	20000264 	.word	0x20000264
 8005acc:	20000229 	.word	0x20000229
 8005ad0:	20000228 	.word	0x20000228
 8005ad4:	40011000 	.word	0x40011000
 8005ad8:	20000226 	.word	0x20000226
 8005adc:	20000262 	.word	0x20000262
 8005ae0:	20000265 	.word	0x20000265
 8005ae4:	20000263 	.word	0x20000263
 8005ae8:	40010800 	.word	0x40010800
 8005aec:	2000022a 	.word	0x2000022a
 8005af0:	2000022c 	.word	0x2000022c
 8005af4:	40010c00 	.word	0x40010c00
 8005af8:	2000024f 	.word	0x2000024f
 8005afc:	20000266 	.word	0x20000266
 8005b00:	200001fc 	.word	0x200001fc
 8005b04:	20000200 	.word	0x20000200
 8005b08:	2000023a 	.word	0x2000023a
 8005b0c:	20000267 	.word	0x20000267
 8005b10:	20000268 	.word	0x20000268
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005b14:	2200      	movs	r2, #0
 8005b16:	2140      	movs	r1, #64	; 0x40
 8005b18:	488d      	ldr	r0, [pc, #564]	; (8005d50 <checkAktifCalisma+0x1058>)
 8005b1a:	f003 fb98 	bl	800924e <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005b1e:	4b8d      	ldr	r3, [pc, #564]	; (8005d54 <checkAktifCalisma+0x105c>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <checkAktifCalisma+0xe36>
 8005b26:	4b8b      	ldr	r3, [pc, #556]	; (8005d54 <checkAktifCalisma+0x105c>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d115      	bne.n	8005b5a <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005b2e:	2104      	movs	r1, #4
 8005b30:	4889      	ldr	r0, [pc, #548]	; (8005d58 <checkAktifCalisma+0x1060>)
 8005b32:	f003 fb75 	bl	8009220 <HAL_GPIO_ReadPin>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d003      	beq.n	8005b44 <checkAktifCalisma+0xe4c>
 8005b3c:	4b87      	ldr	r3, [pc, #540]	; (8005d5c <checkAktifCalisma+0x1064>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005b44:	2102      	movs	r1, #2
 8005b46:	4884      	ldr	r0, [pc, #528]	; (8005d58 <checkAktifCalisma+0x1060>)
 8005b48:	f003 fb6a 	bl	8009220 <HAL_GPIO_ReadPin>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005b52:	4b83      	ldr	r3, [pc, #524]	; (8005d60 <checkAktifCalisma+0x1068>)
 8005b54:	2201      	movs	r2, #1
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	e002      	b.n	8005b60 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005b5a:	4b81      	ldr	r3, [pc, #516]	; (8005d60 <checkAktifCalisma+0x1068>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005b60:	4b7c      	ldr	r3, [pc, #496]	; (8005d54 <checkAktifCalisma+0x105c>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d003      	beq.n	8005b70 <checkAktifCalisma+0xe78>
 8005b68:	4b7a      	ldr	r3, [pc, #488]	; (8005d54 <checkAktifCalisma+0x105c>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d111      	bne.n	8005b94 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b70:	2102      	movs	r1, #2
 8005b72:	4879      	ldr	r0, [pc, #484]	; (8005d58 <checkAktifCalisma+0x1060>)
 8005b74:	f003 fb54 	bl	8009220 <HAL_GPIO_ReadPin>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d10a      	bne.n	8005b94 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005b7e:	2104      	movs	r1, #4
 8005b80:	4875      	ldr	r0, [pc, #468]	; (8005d58 <checkAktifCalisma+0x1060>)
 8005b82:	f003 fb4d 	bl	8009220 <HAL_GPIO_ReadPin>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d103      	bne.n	8005b94 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005b8c:	4b75      	ldr	r3, [pc, #468]	; (8005d64 <checkAktifCalisma+0x106c>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	e002      	b.n	8005b9a <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005b94:	4b73      	ldr	r3, [pc, #460]	; (8005d64 <checkAktifCalisma+0x106c>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005b9a:	4b71      	ldr	r3, [pc, #452]	; (8005d60 <checkAktifCalisma+0x1068>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00f      	beq.n	8005bc2 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005ba2:	4b71      	ldr	r3, [pc, #452]	; (8005d68 <checkAktifCalisma+0x1070>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d10b      	bne.n	8005bc2 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bae:	486f      	ldr	r0, [pc, #444]	; (8005d6c <checkAktifCalisma+0x1074>)
 8005bb0:	f003 fb36 	bl	8009220 <HAL_GPIO_ReadPin>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d103      	bne.n	8005bc2 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005bba:	4b6d      	ldr	r3, [pc, #436]	; (8005d70 <checkAktifCalisma+0x1078>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	e002      	b.n	8005bc8 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005bc2:	4b6b      	ldr	r3, [pc, #428]	; (8005d70 <checkAktifCalisma+0x1078>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005bc8:	4b66      	ldr	r3, [pc, #408]	; (8005d64 <checkAktifCalisma+0x106c>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00f      	beq.n	8005bf0 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005bd0:	4b65      	ldr	r3, [pc, #404]	; (8005d68 <checkAktifCalisma+0x1070>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d10b      	bne.n	8005bf0 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bdc:	4863      	ldr	r0, [pc, #396]	; (8005d6c <checkAktifCalisma+0x1074>)
 8005bde:	f003 fb1f 	bl	8009220 <HAL_GPIO_ReadPin>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d103      	bne.n	8005bf0 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005be8:	4b62      	ldr	r3, [pc, #392]	; (8005d74 <checkAktifCalisma+0x107c>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	e002      	b.n	8005bf6 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005bf0:	4b60      	ldr	r3, [pc, #384]	; (8005d74 <checkAktifCalisma+0x107c>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005bf6:	4b60      	ldr	r3, [pc, #384]	; (8005d78 <checkAktifCalisma+0x1080>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d137      	bne.n	8005c6e <checkAktifCalisma+0xf76>
 8005bfe:	4b5f      	ldr	r3, [pc, #380]	; (8005d7c <checkAktifCalisma+0x1084>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d003      	beq.n	8005c0e <checkAktifCalisma+0xf16>
 8005c06:	4b5d      	ldr	r3, [pc, #372]	; (8005d7c <checkAktifCalisma+0x1084>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d12f      	bne.n	8005c6e <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c0e:	4b54      	ldr	r3, [pc, #336]	; (8005d60 <checkAktifCalisma+0x1068>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <checkAktifCalisma+0xf26>
 8005c16:	4b53      	ldr	r3, [pc, #332]	; (8005d64 <checkAktifCalisma+0x106c>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d027      	beq.n	8005c6e <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c22:	484d      	ldr	r0, [pc, #308]	; (8005d58 <checkAktifCalisma+0x1060>)
 8005c24:	f003 fafc 	bl	8009220 <HAL_GPIO_ReadPin>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d103      	bne.n	8005c36 <checkAktifCalisma+0xf3e>
 8005c2e:	4b4e      	ldr	r3, [pc, #312]	; (8005d68 <checkAktifCalisma+0x1070>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005c36:	4b4e      	ldr	r3, [pc, #312]	; (8005d70 <checkAktifCalisma+0x1078>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d103      	bne.n	8005c46 <checkAktifCalisma+0xf4e>
 8005c3e:	4b4d      	ldr	r3, [pc, #308]	; (8005d74 <checkAktifCalisma+0x107c>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d013      	beq.n	8005c6e <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005c46:	4b4e      	ldr	r3, [pc, #312]	; (8005d80 <checkAktifCalisma+0x1088>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00f      	beq.n	8005c6e <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005c4e:	4b4d      	ldr	r3, [pc, #308]	; (8005d84 <checkAktifCalisma+0x108c>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	f083 0301 	eor.w	r3, r3, #1
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d008      	beq.n	8005c6e <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005c5c:	4b4a      	ldr	r3, [pc, #296]	; (8005d88 <checkAktifCalisma+0x1090>)
 8005c5e:	2201      	movs	r2, #1
 8005c60:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005c62:	4b4a      	ldr	r3, [pc, #296]	; (8005d8c <checkAktifCalisma+0x1094>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a4a      	ldr	r2, [pc, #296]	; (8005d90 <checkAktifCalisma+0x1098>)
 8005c68:	6013      	str	r3, [r2, #0]
			bekle();
 8005c6a:	f7fe fe93 	bl	8004994 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005c6e:	4b47      	ldr	r3, [pc, #284]	; (8005d8c <checkAktifCalisma+0x1094>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4b47      	ldr	r3, [pc, #284]	; (8005d90 <checkAktifCalisma+0x1098>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	4a46      	ldr	r2, [pc, #280]	; (8005d94 <checkAktifCalisma+0x109c>)
 8005c7a:	7812      	ldrb	r2, [r2, #0]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d214      	bcs.n	8005caa <checkAktifCalisma+0xfb2>
 8005c80:	4b37      	ldr	r3, [pc, #220]	; (8005d60 <checkAktifCalisma+0x1068>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	f083 0301 	eor.w	r3, r3, #1
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d006      	beq.n	8005c9c <checkAktifCalisma+0xfa4>
 8005c8e:	4b35      	ldr	r3, [pc, #212]	; (8005d64 <checkAktifCalisma+0x106c>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	f083 0301 	eor.w	r3, r3, #1
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d106      	bne.n	8005caa <checkAktifCalisma+0xfb2>
 8005c9c:	4b38      	ldr	r3, [pc, #224]	; (8005d80 <checkAktifCalisma+0x1088>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	f083 0301 	eor.w	r3, r3, #1
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005caa:	4b37      	ldr	r3, [pc, #220]	; (8005d88 <checkAktifCalisma+0x1090>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005cb0:	4b31      	ldr	r3, [pc, #196]	; (8005d78 <checkAktifCalisma+0x1080>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d12b      	bne.n	8005d10 <checkAktifCalisma+0x1018>
 8005cb8:	4b30      	ldr	r3, [pc, #192]	; (8005d7c <checkAktifCalisma+0x1084>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d003      	beq.n	8005cc8 <checkAktifCalisma+0xfd0>
 8005cc0:	4b2e      	ldr	r3, [pc, #184]	; (8005d7c <checkAktifCalisma+0x1084>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d123      	bne.n	8005d10 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005cc8:	4b25      	ldr	r3, [pc, #148]	; (8005d60 <checkAktifCalisma+0x1068>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d103      	bne.n	8005cd8 <checkAktifCalisma+0xfe0>
 8005cd0:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <checkAktifCalisma+0x106c>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01b      	beq.n	8005d10 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cdc:	481e      	ldr	r0, [pc, #120]	; (8005d58 <checkAktifCalisma+0x1060>)
 8005cde:	f003 fa9f 	bl	8009220 <HAL_GPIO_ReadPin>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d103      	bne.n	8005cf0 <checkAktifCalisma+0xff8>
 8005ce8:	4b1f      	ldr	r3, [pc, #124]	; (8005d68 <checkAktifCalisma+0x1070>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005cf0:	4b1f      	ldr	r3, [pc, #124]	; (8005d70 <checkAktifCalisma+0x1078>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d103      	bne.n	8005d00 <checkAktifCalisma+0x1008>
 8005cf8:	4b1e      	ldr	r3, [pc, #120]	; (8005d74 <checkAktifCalisma+0x107c>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d007      	beq.n	8005d10 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005d00:	4b1f      	ldr	r3, [pc, #124]	; (8005d80 <checkAktifCalisma+0x1088>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005d08:	4b23      	ldr	r3, [pc, #140]	; (8005d98 <checkAktifCalisma+0x10a0>)
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	e002      	b.n	8005d16 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005d10:	4b21      	ldr	r3, [pc, #132]	; (8005d98 <checkAktifCalisma+0x10a0>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d16:	4b18      	ldr	r3, [pc, #96]	; (8005d78 <checkAktifCalisma+0x1080>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d140      	bne.n	8005da0 <checkAktifCalisma+0x10a8>
 8005d1e:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <checkAktifCalisma+0x1084>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d003      	beq.n	8005d2e <checkAktifCalisma+0x1036>
 8005d26:	4b15      	ldr	r3, [pc, #84]	; (8005d7c <checkAktifCalisma+0x1084>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d138      	bne.n	8005da0 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d2e:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <checkAktifCalisma+0x1068>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <checkAktifCalisma+0x1046>
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <checkAktifCalisma+0x106c>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d030      	beq.n	8005da0 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005d3e:	4b10      	ldr	r3, [pc, #64]	; (8005d80 <checkAktifCalisma+0x1088>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d02c      	beq.n	8005da0 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005d46:	4b15      	ldr	r3, [pc, #84]	; (8005d9c <checkAktifCalisma+0x10a4>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e02b      	b.n	8005da6 <checkAktifCalisma+0x10ae>
 8005d4e:	bf00      	nop
 8005d50:	40010800 	.word	0x40010800
 8005d54:	2000022d 	.word	0x2000022d
 8005d58:	40011000 	.word	0x40011000
 8005d5c:	20000226 	.word	0x20000226
 8005d60:	2000026c 	.word	0x2000026c
 8005d64:	2000026d 	.word	0x2000026d
 8005d68:	2000022c 	.word	0x2000022c
 8005d6c:	40010c00 	.word	0x40010c00
 8005d70:	2000027c 	.word	0x2000027c
 8005d74:	2000027d 	.word	0x2000027d
 8005d78:	2000022b 	.word	0x2000022b
 8005d7c:	20000228 	.word	0x20000228
 8005d80:	20000262 	.word	0x20000262
 8005d84:	2000024f 	.word	0x2000024f
 8005d88:	20000269 	.word	0x20000269
 8005d8c:	200001fc 	.word	0x200001fc
 8005d90:	20000200 	.word	0x20000200
 8005d94:	2000023b 	.word	0x2000023b
 8005d98:	2000026a 	.word	0x2000026a
 8005d9c:	2000026b 	.word	0x2000026b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005da0:	4b8b      	ldr	r3, [pc, #556]	; (8005fd0 <checkAktifCalisma+0x12d8>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005da6:	4b8b      	ldr	r3, [pc, #556]	; (8005fd4 <checkAktifCalisma+0x12dc>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d107      	bne.n	8005dbe <checkAktifCalisma+0x10c6>
 8005dae:	4b8a      	ldr	r3, [pc, #552]	; (8005fd8 <checkAktifCalisma+0x12e0>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <checkAktifCalisma+0x10c6>
 8005db6:	4b86      	ldr	r3, [pc, #536]	; (8005fd0 <checkAktifCalisma+0x12d8>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	2120      	movs	r1, #32
 8005dc2:	4886      	ldr	r0, [pc, #536]	; (8005fdc <checkAktifCalisma+0x12e4>)
 8005dc4:	f003 fa43 	bl	800924e <HAL_GPIO_WritePin>
 8005dc8:	e004      	b.n	8005dd4 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2120      	movs	r1, #32
 8005dce:	4883      	ldr	r0, [pc, #524]	; (8005fdc <checkAktifCalisma+0x12e4>)
 8005dd0:	f003 fa3d 	bl	800924e <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005dd4:	4b82      	ldr	r3, [pc, #520]	; (8005fe0 <checkAktifCalisma+0x12e8>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00e      	beq.n	8005dfa <checkAktifCalisma+0x1102>
 8005ddc:	2102      	movs	r1, #2
 8005dde:	4881      	ldr	r0, [pc, #516]	; (8005fe4 <checkAktifCalisma+0x12ec>)
 8005de0:	f003 fa1e 	bl	8009220 <HAL_GPIO_ReadPin>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d107      	bne.n	8005dfa <checkAktifCalisma+0x1102>
 8005dea:	4b7f      	ldr	r3, [pc, #508]	; (8005fe8 <checkAktifCalisma+0x12f0>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d103      	bne.n	8005dfa <checkAktifCalisma+0x1102>
 8005df2:	4b7e      	ldr	r3, [pc, #504]	; (8005fec <checkAktifCalisma+0x12f4>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d112      	bne.n	8005e20 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005dfa:	4b7d      	ldr	r3, [pc, #500]	; (8005ff0 <checkAktifCalisma+0x12f8>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d066      	beq.n	8005ed0 <checkAktifCalisma+0x11d8>
 8005e02:	2104      	movs	r1, #4
 8005e04:	4877      	ldr	r0, [pc, #476]	; (8005fe4 <checkAktifCalisma+0x12ec>)
 8005e06:	f003 fa0b 	bl	8009220 <HAL_GPIO_ReadPin>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d15f      	bne.n	8005ed0 <checkAktifCalisma+0x11d8>
 8005e10:	4b75      	ldr	r3, [pc, #468]	; (8005fe8 <checkAktifCalisma+0x12f0>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d05b      	beq.n	8005ed0 <checkAktifCalisma+0x11d8>
 8005e18:	4b74      	ldr	r3, [pc, #464]	; (8005fec <checkAktifCalisma+0x12f4>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d057      	beq.n	8005ed0 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005e20:	4b74      	ldr	r3, [pc, #464]	; (8005ff4 <checkAktifCalisma+0x12fc>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	3301      	adds	r3, #1
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	4b72      	ldr	r3, [pc, #456]	; (8005ff4 <checkAktifCalisma+0x12fc>)
 8005e2a:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005e2c:	4b71      	ldr	r3, [pc, #452]	; (8005ff4 <checkAktifCalisma+0x12fc>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b09      	cmp	r3, #9
 8005e32:	d908      	bls.n	8005e46 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005e34:	4b6f      	ldr	r3, [pc, #444]	; (8005ff4 <checkAktifCalisma+0x12fc>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005e3a:	4b6f      	ldr	r3, [pc, #444]	; (8005ff8 <checkAktifCalisma+0x1300>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	4b6d      	ldr	r3, [pc, #436]	; (8005ff8 <checkAktifCalisma+0x1300>)
 8005e44:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005e46:	4b6c      	ldr	r3, [pc, #432]	; (8005ff8 <checkAktifCalisma+0x1300>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b09      	cmp	r3, #9
 8005e4c:	d908      	bls.n	8005e60 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005e4e:	4b6a      	ldr	r3, [pc, #424]	; (8005ff8 <checkAktifCalisma+0x1300>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005e54:	4b69      	ldr	r3, [pc, #420]	; (8005ffc <checkAktifCalisma+0x1304>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	4b67      	ldr	r3, [pc, #412]	; (8005ffc <checkAktifCalisma+0x1304>)
 8005e5e:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005e60:	4b66      	ldr	r3, [pc, #408]	; (8005ffc <checkAktifCalisma+0x1304>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b09      	cmp	r3, #9
 8005e66:	d908      	bls.n	8005e7a <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005e68:	4b64      	ldr	r3, [pc, #400]	; (8005ffc <checkAktifCalisma+0x1304>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005e6e:	4b64      	ldr	r3, [pc, #400]	; (8006000 <checkAktifCalisma+0x1308>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	3301      	adds	r3, #1
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	4b62      	ldr	r3, [pc, #392]	; (8006000 <checkAktifCalisma+0x1308>)
 8005e78:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005e7a:	4b61      	ldr	r3, [pc, #388]	; (8006000 <checkAktifCalisma+0x1308>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b09      	cmp	r3, #9
 8005e80:	d908      	bls.n	8005e94 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005e82:	4b5f      	ldr	r3, [pc, #380]	; (8006000 <checkAktifCalisma+0x1308>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005e88:	4b5e      	ldr	r3, [pc, #376]	; (8006004 <checkAktifCalisma+0x130c>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	4b5c      	ldr	r3, [pc, #368]	; (8006004 <checkAktifCalisma+0x130c>)
 8005e92:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005e94:	4b5b      	ldr	r3, [pc, #364]	; (8006004 <checkAktifCalisma+0x130c>)
 8005e96:	781a      	ldrb	r2, [r3, #0]
 8005e98:	4b5b      	ldr	r3, [pc, #364]	; (8006008 <checkAktifCalisma+0x1310>)
 8005e9a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005e9e:	4b58      	ldr	r3, [pc, #352]	; (8006000 <checkAktifCalisma+0x1308>)
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	4b59      	ldr	r3, [pc, #356]	; (8006008 <checkAktifCalisma+0x1310>)
 8005ea4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005ea6:	4b55      	ldr	r3, [pc, #340]	; (8005ffc <checkAktifCalisma+0x1304>)
 8005ea8:	781a      	ldrb	r2, [r3, #0]
 8005eaa:	4b57      	ldr	r3, [pc, #348]	; (8006008 <checkAktifCalisma+0x1310>)
 8005eac:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005eae:	4b52      	ldr	r3, [pc, #328]	; (8005ff8 <checkAktifCalisma+0x1300>)
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	4b55      	ldr	r3, [pc, #340]	; (8006008 <checkAktifCalisma+0x1310>)
 8005eb4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005eb6:	4b4f      	ldr	r3, [pc, #316]	; (8005ff4 <checkAktifCalisma+0x12fc>)
 8005eb8:	781a      	ldrb	r2, [r3, #0]
 8005eba:	4b53      	ldr	r3, [pc, #332]	; (8006008 <checkAktifCalisma+0x1310>)
 8005ebc:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005ebe:	4b53      	ldr	r3, [pc, #332]	; (800600c <checkAktifCalisma+0x1314>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005ec4:	4b46      	ldr	r3, [pc, #280]	; (8005fe0 <checkAktifCalisma+0x12e8>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005eca:	4b49      	ldr	r3, [pc, #292]	; (8005ff0 <checkAktifCalisma+0x12f8>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ed4:	484e      	ldr	r0, [pc, #312]	; (8006010 <checkAktifCalisma+0x1318>)
 8005ed6:	f003 f9a3 	bl	8009220 <HAL_GPIO_ReadPin>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d016      	beq.n	8005f0e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005ee0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ee4:	484a      	ldr	r0, [pc, #296]	; (8006010 <checkAktifCalisma+0x1318>)
 8005ee6:	f003 f99b 	bl	8009220 <HAL_GPIO_ReadPin>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00e      	beq.n	8005f0e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ef4:	4846      	ldr	r0, [pc, #280]	; (8006010 <checkAktifCalisma+0x1318>)
 8005ef6:	f003 f993 	bl	8009220 <HAL_GPIO_ReadPin>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d006      	beq.n	8005f0e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005f00:	2140      	movs	r1, #64	; 0x40
 8005f02:	4838      	ldr	r0, [pc, #224]	; (8005fe4 <checkAktifCalisma+0x12ec>)
 8005f04:	f003 f98c 	bl	8009220 <HAL_GPIO_ReadPin>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d103      	bne.n	8005f16 <checkAktifCalisma+0x121e>
			startBasili=1;
 8005f0e:	4b41      	ldr	r3, [pc, #260]	; (8006014 <checkAktifCalisma+0x131c>)
 8005f10:	2201      	movs	r2, #1
 8005f12:	701a      	strb	r2, [r3, #0]
 8005f14:	e002      	b.n	8005f1c <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005f16:	4b3f      	ldr	r3, [pc, #252]	; (8006014 <checkAktifCalisma+0x131c>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005f1c:	4b3d      	ldr	r3, [pc, #244]	; (8006014 <checkAktifCalisma+0x131c>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d016      	beq.n	8005f52 <checkAktifCalisma+0x125a>
 8005f24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f28:	4839      	ldr	r0, [pc, #228]	; (8006010 <checkAktifCalisma+0x1318>)
 8005f2a:	f003 f979 	bl	8009220 <HAL_GPIO_ReadPin>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d10e      	bne.n	8005f52 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005f34:	4b38      	ldr	r3, [pc, #224]	; (8006018 <checkAktifCalisma+0x1320>)
 8005f36:	2201      	movs	r2, #1
 8005f38:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	f7fa fdac 	bl	8000a98 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005f40:	2001      	movs	r0, #1
 8005f42:	f7fa fd4f 	bl	80009e4 <hata2EEPROM>
			convertAndSendData();
 8005f46:	f001 fc65 	bl	8007814 <convertAndSendData>
			acilstophatasi=1;
 8005f4a:	4b34      	ldr	r3, [pc, #208]	; (800601c <checkAktifCalisma+0x1324>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	e018      	b.n	8005f84 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005f52:	4b32      	ldr	r3, [pc, #200]	; (800601c <checkAktifCalisma+0x1324>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d014      	beq.n	8005f84 <checkAktifCalisma+0x128c>
 8005f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f5e:	482c      	ldr	r0, [pc, #176]	; (8006010 <checkAktifCalisma+0x1318>)
 8005f60:	f003 f95e 	bl	8009220 <HAL_GPIO_ReadPin>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10c      	bne.n	8005f84 <checkAktifCalisma+0x128c>
 8005f6a:	4b2a      	ldr	r3, [pc, #168]	; (8006014 <checkAktifCalisma+0x131c>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	f083 0301 	eor.w	r3, r3, #1
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005f78:	4b28      	ldr	r3, [pc, #160]	; (800601c <checkAktifCalisma+0x1324>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005f7e:	2001      	movs	r0, #1
 8005f80:	f7fe fcb4 	bl	80048ec <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005f84:	4b26      	ldr	r3, [pc, #152]	; (8006020 <checkAktifCalisma+0x1328>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f083 0301 	eor.w	r3, r3, #1
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d04e      	beq.n	8006030 <checkAktifCalisma+0x1338>
 8005f92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f96:	481e      	ldr	r0, [pc, #120]	; (8006010 <checkAktifCalisma+0x1318>)
 8005f98:	f003 f942 	bl	8009220 <HAL_GPIO_ReadPin>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <checkAktifCalisma+0x12b2>
 8005fa2:	4b20      	ldr	r3, [pc, #128]	; (8006024 <checkAktifCalisma+0x132c>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d042      	beq.n	8006030 <checkAktifCalisma+0x1338>
 8005faa:	4b1f      	ldr	r3, [pc, #124]	; (8006028 <checkAktifCalisma+0x1330>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d13e      	bne.n	8006030 <checkAktifCalisma+0x1338>
			hataVar=1;
 8005fb2:	4b19      	ldr	r3, [pc, #100]	; (8006018 <checkAktifCalisma+0x1320>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005fb8:	2002      	movs	r0, #2
 8005fba:	f7fa fd6d 	bl	8000a98 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005fbe:	2002      	movs	r0, #2
 8005fc0:	f7fa fd10 	bl	80009e4 <hata2EEPROM>
			convertAndSendData();
 8005fc4:	f001 fc26 	bl	8007814 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005fc8:	4b18      	ldr	r3, [pc, #96]	; (800602c <checkAktifCalisma+0x1334>)
 8005fca:	2201      	movs	r2, #1
 8005fcc:	701a      	strb	r2, [r3, #0]
 8005fce:	e047      	b.n	8006060 <checkAktifCalisma+0x1368>
 8005fd0:	2000026b 	.word	0x2000026b
 8005fd4:	2000026a 	.word	0x2000026a
 8005fd8:	20000269 	.word	0x20000269
 8005fdc:	40010800 	.word	0x40010800
 8005fe0:	2000025f 	.word	0x2000025f
 8005fe4:	40011000 	.word	0x40011000
 8005fe8:	20000226 	.word	0x20000226
 8005fec:	20000262 	.word	0x20000262
 8005ff0:	20000260 	.word	0x20000260
 8005ff4:	2000021d 	.word	0x2000021d
 8005ff8:	2000021e 	.word	0x2000021e
 8005ffc:	20000000 	.word	0x20000000
 8006000:	20000001 	.word	0x20000001
 8006004:	2000021f 	.word	0x2000021f
 8006008:	20000118 	.word	0x20000118
 800600c:	2000024c 	.word	0x2000024c
 8006010:	40010c00 	.word	0x40010c00
 8006014:	2000026e 	.word	0x2000026e
 8006018:	20000275 	.word	0x20000275
 800601c:	20000270 	.word	0x20000270
 8006020:	20000277 	.word	0x20000277
 8006024:	20000281 	.word	0x20000281
 8006028:	20000224 	.word	0x20000224
 800602c:	20000271 	.word	0x20000271
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006030:	4b9b      	ldr	r3, [pc, #620]	; (80062a0 <checkAktifCalisma+0x15a8>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d013      	beq.n	8006060 <checkAktifCalisma+0x1368>
 8006038:	4b9a      	ldr	r3, [pc, #616]	; (80062a4 <checkAktifCalisma+0x15ac>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00f      	beq.n	8006060 <checkAktifCalisma+0x1368>
 8006040:	4b99      	ldr	r3, [pc, #612]	; (80062a8 <checkAktifCalisma+0x15b0>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	f083 0301 	eor.w	r3, r3, #1
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d008      	beq.n	8006060 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 800604e:	4b94      	ldr	r3, [pc, #592]	; (80062a0 <checkAktifCalisma+0x15a8>)
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006054:	4b95      	ldr	r3, [pc, #596]	; (80062ac <checkAktifCalisma+0x15b4>)
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800605a:	2002      	movs	r0, #2
 800605c:	f7fe fc46 	bl	80048ec <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006060:	4b93      	ldr	r3, [pc, #588]	; (80062b0 <checkAktifCalisma+0x15b8>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d11e      	bne.n	80060a6 <checkAktifCalisma+0x13ae>
 8006068:	4b92      	ldr	r3, [pc, #584]	; (80062b4 <checkAktifCalisma+0x15bc>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d11a      	bne.n	80060a6 <checkAktifCalisma+0x13ae>
 8006070:	4b91      	ldr	r3, [pc, #580]	; (80062b8 <checkAktifCalisma+0x15c0>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d016      	beq.n	80060a6 <checkAktifCalisma+0x13ae>
 8006078:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800607c:	488f      	ldr	r0, [pc, #572]	; (80062bc <checkAktifCalisma+0x15c4>)
 800607e:	f003 f8cf 	bl	8009220 <HAL_GPIO_ReadPin>
 8006082:	4603      	mov	r3, r0
 8006084:	2b01      	cmp	r3, #1
 8006086:	d10e      	bne.n	80060a6 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006088:	4b8d      	ldr	r3, [pc, #564]	; (80062c0 <checkAktifCalisma+0x15c8>)
 800608a:	2201      	movs	r2, #1
 800608c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800608e:	2003      	movs	r0, #3
 8006090:	f7fa fd02 	bl	8000a98 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006094:	2003      	movs	r0, #3
 8006096:	f7fa fca5 	bl	80009e4 <hata2EEPROM>
			convertAndSendData();
 800609a:	f001 fbbb 	bl	8007814 <convertAndSendData>
			basinchatasi=1;
 800609e:	4b89      	ldr	r3, [pc, #548]	; (80062c4 <checkAktifCalisma+0x15cc>)
 80060a0:	2201      	movs	r2, #1
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	e015      	b.n	80060d2 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80060a6:	4b87      	ldr	r3, [pc, #540]	; (80062c4 <checkAktifCalisma+0x15cc>)
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d011      	beq.n	80060d2 <checkAktifCalisma+0x13da>
 80060ae:	4b80      	ldr	r3, [pc, #512]	; (80062b0 <checkAktifCalisma+0x15b8>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d10d      	bne.n	80060d2 <checkAktifCalisma+0x13da>
 80060b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060ba:	4883      	ldr	r0, [pc, #524]	; (80062c8 <checkAktifCalisma+0x15d0>)
 80060bc:	f003 f8b0 	bl	8009220 <HAL_GPIO_ReadPin>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d105      	bne.n	80060d2 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80060c6:	4b7f      	ldr	r3, [pc, #508]	; (80062c4 <checkAktifCalisma+0x15cc>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80060cc:	2003      	movs	r0, #3
 80060ce:	f7fe fc0d 	bl	80048ec <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80060d2:	4b7e      	ldr	r3, [pc, #504]	; (80062cc <checkAktifCalisma+0x15d4>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d103      	bne.n	80060e2 <checkAktifCalisma+0x13ea>
 80060da:	4b7d      	ldr	r3, [pc, #500]	; (80062d0 <checkAktifCalisma+0x15d8>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01e      	beq.n	8006120 <checkAktifCalisma+0x1428>
 80060e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060e6:	487b      	ldr	r0, [pc, #492]	; (80062d4 <checkAktifCalisma+0x15dc>)
 80060e8:	f003 f89a 	bl	8009220 <HAL_GPIO_ReadPin>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d116      	bne.n	8006120 <checkAktifCalisma+0x1428>
 80060f2:	4b79      	ldr	r3, [pc, #484]	; (80062d8 <checkAktifCalisma+0x15e0>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d003      	beq.n	8006102 <checkAktifCalisma+0x140a>
 80060fa:	4b77      	ldr	r3, [pc, #476]	; (80062d8 <checkAktifCalisma+0x15e0>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d10e      	bne.n	8006120 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006102:	4b6f      	ldr	r3, [pc, #444]	; (80062c0 <checkAktifCalisma+0x15c8>)
 8006104:	2201      	movs	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006108:	2004      	movs	r0, #4
 800610a:	f7fa fcc5 	bl	8000a98 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800610e:	2004      	movs	r0, #4
 8006110:	f7fa fc68 	bl	80009e4 <hata2EEPROM>
			convertAndSendData();
 8006114:	f001 fb7e 	bl	8007814 <convertAndSendData>
			katkapisivicihatasi=1;
 8006118:	4b70      	ldr	r3, [pc, #448]	; (80062dc <checkAktifCalisma+0x15e4>)
 800611a:	2201      	movs	r2, #1
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	e01f      	b.n	8006160 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006120:	4b6e      	ldr	r3, [pc, #440]	; (80062dc <checkAktifCalisma+0x15e4>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01b      	beq.n	8006160 <checkAktifCalisma+0x1468>
 8006128:	4b6d      	ldr	r3, [pc, #436]	; (80062e0 <checkAktifCalisma+0x15e8>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d017      	beq.n	8006160 <checkAktifCalisma+0x1468>
 8006130:	4b66      	ldr	r3, [pc, #408]	; (80062cc <checkAktifCalisma+0x15d4>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	f083 0301 	eor.w	r3, r3, #1
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d010      	beq.n	8006160 <checkAktifCalisma+0x1468>
 800613e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006142:	4864      	ldr	r0, [pc, #400]	; (80062d4 <checkAktifCalisma+0x15dc>)
 8006144:	f003 f86c 	bl	8009220 <HAL_GPIO_ReadPin>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d108      	bne.n	8006160 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800614e:	4b63      	ldr	r3, [pc, #396]	; (80062dc <checkAktifCalisma+0x15e4>)
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006154:	4b5e      	ldr	r3, [pc, #376]	; (80062d0 <checkAktifCalisma+0x15d8>)
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800615a:	2004      	movs	r0, #4
 800615c:	f7fe fbc6 	bl	80048ec <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006160:	4b5a      	ldr	r3, [pc, #360]	; (80062cc <checkAktifCalisma+0x15d4>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d103      	bne.n	8006170 <checkAktifCalisma+0x1478>
 8006168:	4b5e      	ldr	r3, [pc, #376]	; (80062e4 <checkAktifCalisma+0x15ec>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01e      	beq.n	80061ae <checkAktifCalisma+0x14b6>
 8006170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006174:	4857      	ldr	r0, [pc, #348]	; (80062d4 <checkAktifCalisma+0x15dc>)
 8006176:	f003 f853 	bl	8009220 <HAL_GPIO_ReadPin>
 800617a:	4603      	mov	r3, r0
 800617c:	2b01      	cmp	r3, #1
 800617e:	d116      	bne.n	80061ae <checkAktifCalisma+0x14b6>
 8006180:	4b55      	ldr	r3, [pc, #340]	; (80062d8 <checkAktifCalisma+0x15e0>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d003      	beq.n	8006190 <checkAktifCalisma+0x1498>
 8006188:	4b53      	ldr	r3, [pc, #332]	; (80062d8 <checkAktifCalisma+0x15e0>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b03      	cmp	r3, #3
 800618e:	d10e      	bne.n	80061ae <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006190:	4b4b      	ldr	r3, [pc, #300]	; (80062c0 <checkAktifCalisma+0x15c8>)
 8006192:	2201      	movs	r2, #1
 8006194:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006196:	2005      	movs	r0, #5
 8006198:	f7fa fc7e 	bl	8000a98 <hataKoduLcdGoster>
			hata2EEPROM(5);
 800619c:	2005      	movs	r0, #5
 800619e:	f7fa fc21 	bl	80009e4 <hata2EEPROM>
			convertAndSendData();
 80061a2:	f001 fb37 	bl	8007814 <convertAndSendData>
			tablakapisivicihatasi=1;
 80061a6:	4b50      	ldr	r3, [pc, #320]	; (80062e8 <checkAktifCalisma+0x15f0>)
 80061a8:	2201      	movs	r2, #1
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	e023      	b.n	80061f6 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80061ae:	4b4e      	ldr	r3, [pc, #312]	; (80062e8 <checkAktifCalisma+0x15f0>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d01f      	beq.n	80061f6 <checkAktifCalisma+0x14fe>
 80061b6:	4b4a      	ldr	r3, [pc, #296]	; (80062e0 <checkAktifCalisma+0x15e8>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d01b      	beq.n	80061f6 <checkAktifCalisma+0x14fe>
 80061be:	4b43      	ldr	r3, [pc, #268]	; (80062cc <checkAktifCalisma+0x15d4>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	f083 0301 	eor.w	r3, r3, #1
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d014      	beq.n	80061f6 <checkAktifCalisma+0x14fe>
 80061cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061d0:	4840      	ldr	r0, [pc, #256]	; (80062d4 <checkAktifCalisma+0x15dc>)
 80061d2:	f003 f825 	bl	8009220 <HAL_GPIO_ReadPin>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10c      	bne.n	80061f6 <checkAktifCalisma+0x14fe>
 80061dc:	4b40      	ldr	r3, [pc, #256]	; (80062e0 <checkAktifCalisma+0x15e8>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80061e4:	4b40      	ldr	r3, [pc, #256]	; (80062e8 <checkAktifCalisma+0x15f0>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80061ea:	4b3e      	ldr	r3, [pc, #248]	; (80062e4 <checkAktifCalisma+0x15ec>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80061f0:	2005      	movs	r0, #5
 80061f2:	f7fe fb7b 	bl	80048ec <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80061f6:	4b30      	ldr	r3, [pc, #192]	; (80062b8 <checkAktifCalisma+0x15c0>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d107      	bne.n	800620e <checkAktifCalisma+0x1516>
 80061fe:	4b2a      	ldr	r3, [pc, #168]	; (80062a8 <checkAktifCalisma+0x15b0>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d103      	bne.n	800620e <checkAktifCalisma+0x1516>
 8006206:	4b39      	ldr	r3, [pc, #228]	; (80062ec <checkAktifCalisma+0x15f4>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d016      	beq.n	800623c <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800620e:	4b38      	ldr	r3, [pc, #224]	; (80062f0 <checkAktifCalisma+0x15f8>)
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	4b38      	ldr	r3, [pc, #224]	; (80062f4 <checkAktifCalisma+0x15fc>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	4a37      	ldr	r2, [pc, #220]	; (80062f8 <checkAktifCalisma+0x1600>)
 800621a:	7812      	ldrb	r2, [r2, #0]
 800621c:	4293      	cmp	r3, r2
 800621e:	d30d      	bcc.n	800623c <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006220:	4b27      	ldr	r3, [pc, #156]	; (80062c0 <checkAktifCalisma+0x15c8>)
 8006222:	2201      	movs	r2, #1
 8006224:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006226:	2006      	movs	r0, #6
 8006228:	f7fa fc36 	bl	8000a98 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 800622c:	2006      	movs	r0, #6
 800622e:	f7fa fbd9 	bl	80009e4 <hata2EEPROM>
			  	convertAndSendData();
 8006232:	f001 faef 	bl	8007814 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006236:	4b31      	ldr	r3, [pc, #196]	; (80062fc <checkAktifCalisma+0x1604>)
 8006238:	2201      	movs	r2, #1
 800623a:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800623c:	4b2f      	ldr	r3, [pc, #188]	; (80062fc <checkAktifCalisma+0x1604>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d013      	beq.n	800626c <checkAktifCalisma+0x1574>
 8006244:	2108      	movs	r1, #8
 8006246:	4823      	ldr	r0, [pc, #140]	; (80062d4 <checkAktifCalisma+0x15dc>)
 8006248:	f002 ffea 	bl	8009220 <HAL_GPIO_ReadPin>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00c      	beq.n	800626c <checkAktifCalisma+0x1574>
 8006252:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <checkAktifCalisma+0x15d4>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	f083 0301 	eor.w	r3, r3, #1
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006260:	4b26      	ldr	r3, [pc, #152]	; (80062fc <checkAktifCalisma+0x1604>)
 8006262:	2200      	movs	r2, #0
 8006264:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006266:	2006      	movs	r0, #6
 8006268:	f7fe fb40 	bl	80048ec <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800626c:	4b24      	ldr	r3, [pc, #144]	; (8006300 <checkAktifCalisma+0x1608>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10b      	bne.n	800628c <checkAktifCalisma+0x1594>
 8006274:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <checkAktifCalisma+0x15b0>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d107      	bne.n	800628c <checkAktifCalisma+0x1594>
 800627c:	4b21      	ldr	r3, [pc, #132]	; (8006304 <checkAktifCalisma+0x160c>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d103      	bne.n	800628c <checkAktifCalisma+0x1594>
 8006284:	4b19      	ldr	r3, [pc, #100]	; (80062ec <checkAktifCalisma+0x15f4>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d03f      	beq.n	800630c <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 800628c:	4b1e      	ldr	r3, [pc, #120]	; (8006308 <checkAktifCalisma+0x1610>)
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006292:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <checkAktifCalisma+0x15d8>)
 8006294:	2201      	movs	r2, #1
 8006296:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006298:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <checkAktifCalisma+0x15ec>)
 800629a:	2201      	movs	r2, #1
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	e03c      	b.n	800631a <checkAktifCalisma+0x1622>
 80062a0:	20000271 	.word	0x20000271
 80062a4:	20000277 	.word	0x20000277
 80062a8:	20000258 	.word	0x20000258
 80062ac:	20000281 	.word	0x20000281
 80062b0:	20000223 	.word	0x20000223
 80062b4:	20000227 	.word	0x20000227
 80062b8:	20000274 	.word	0x20000274
 80062bc:	40011000 	.word	0x40011000
 80062c0:	20000275 	.word	0x20000275
 80062c4:	2000027e 	.word	0x2000027e
 80062c8:	40010c00 	.word	0x40010c00
 80062cc:	2000026e 	.word	0x2000026e
 80062d0:	20000282 	.word	0x20000282
 80062d4:	40010800 	.word	0x40010800
 80062d8:	20000228 	.word	0x20000228
 80062dc:	2000027f 	.word	0x2000027f
 80062e0:	20000262 	.word	0x20000262
 80062e4:	20000283 	.word	0x20000283
 80062e8:	20000280 	.word	0x20000280
 80062ec:	20000257 	.word	0x20000257
 80062f0:	200001fc 	.word	0x200001fc
 80062f4:	20000210 	.word	0x20000210
 80062f8:	20000238 	.word	0x20000238
 80062fc:	2000026f 	.word	0x2000026f
 8006300:	20000255 	.word	0x20000255
 8006304:	20000256 	.word	0x20000256
 8006308:	20000276 	.word	0x20000276
		} else {
			makineCalisiyor=1;
 800630c:	4b1e      	ldr	r3, [pc, #120]	; (8006388 <checkAktifCalisma+0x1690>)
 800630e:	2201      	movs	r2, #1
 8006310:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006312:	4b1e      	ldr	r3, [pc, #120]	; (800638c <checkAktifCalisma+0x1694>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a1e      	ldr	r2, [pc, #120]	; (8006390 <checkAktifCalisma+0x1698>)
 8006318:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800631a:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <checkAktifCalisma+0x169c>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d02f      	beq.n	8006382 <checkAktifCalisma+0x168a>
 8006322:	4b1d      	ldr	r3, [pc, #116]	; (8006398 <checkAktifCalisma+0x16a0>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	f083 0301 	eor.w	r3, r3, #1
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d028      	beq.n	8006382 <checkAktifCalisma+0x168a>
 8006330:	4b1a      	ldr	r3, [pc, #104]	; (800639c <checkAktifCalisma+0x16a4>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f083 0301 	eor.w	r3, r3, #1
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d021      	beq.n	8006382 <checkAktifCalisma+0x168a>
 800633e:	4b18      	ldr	r3, [pc, #96]	; (80063a0 <checkAktifCalisma+0x16a8>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	f083 0301 	eor.w	r3, r3, #1
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01a      	beq.n	8006382 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800634c:	4b15      	ldr	r3, [pc, #84]	; (80063a4 <checkAktifCalisma+0x16ac>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	f083 0301 	eor.w	r3, r3, #1
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d013      	beq.n	8006382 <checkAktifCalisma+0x168a>
 800635a:	4b13      	ldr	r3, [pc, #76]	; (80063a8 <checkAktifCalisma+0x16b0>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	f083 0301 	eor.w	r3, r3, #1
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00c      	beq.n	8006382 <checkAktifCalisma+0x168a>
 8006368:	4b10      	ldr	r3, [pc, #64]	; (80063ac <checkAktifCalisma+0x16b4>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	f083 0301 	eor.w	r3, r3, #1
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <checkAktifCalisma+0x168a>
			hataVar=0;
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <checkAktifCalisma+0x169c>)
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 800637c:	2007      	movs	r0, #7
 800637e:	f7fe fab5 	bl	80048ec <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006382:	bf00      	nop
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20000276 	.word	0x20000276
 800638c:	200001fc 	.word	0x200001fc
 8006390:	20000210 	.word	0x20000210
 8006394:	20000275 	.word	0x20000275
 8006398:	20000270 	.word	0x20000270
 800639c:	20000271 	.word	0x20000271
 80063a0:	2000027e 	.word	0x2000027e
 80063a4:	2000027f 	.word	0x2000027f
 80063a8:	20000280 	.word	0x20000280
 80063ac:	2000026f 	.word	0x2000026f

080063b0 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80063b4:	4b8b      	ldr	r3, [pc, #556]	; (80065e4 <checkDemoModCalisma+0x234>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	f040 8229 	bne.w	8006810 <checkDemoModCalisma+0x460>
 80063be:	4b8a      	ldr	r3, [pc, #552]	; (80065e8 <checkDemoModCalisma+0x238>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8224 	beq.w	8006810 <checkDemoModCalisma+0x460>
 80063c8:	4b88      	ldr	r3, [pc, #544]	; (80065ec <checkDemoModCalisma+0x23c>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 821f 	bne.w	8006810 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80063d2:	2102      	movs	r1, #2
 80063d4:	4886      	ldr	r0, [pc, #536]	; (80065f0 <checkDemoModCalisma+0x240>)
 80063d6:	f002 ff23 	bl	8009220 <HAL_GPIO_ReadPin>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d11d      	bne.n	800641c <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80063e0:	4b84      	ldr	r3, [pc, #528]	; (80065f4 <checkDemoModCalisma+0x244>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	f083 0301 	eor.w	r3, r3, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d016      	beq.n	800641c <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80063ee:	4b82      	ldr	r3, [pc, #520]	; (80065f8 <checkDemoModCalisma+0x248>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	f083 0301 	eor.w	r3, r3, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00f      	beq.n	800641c <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80063fc:	4b7f      	ldr	r3, [pc, #508]	; (80065fc <checkDemoModCalisma+0x24c>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	f083 0301 	eor.w	r3, r3, #1
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d008      	beq.n	800641c <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800640a:	2201      	movs	r2, #1
 800640c:	2104      	movs	r1, #4
 800640e:	487c      	ldr	r0, [pc, #496]	; (8006600 <checkDemoModCalisma+0x250>)
 8006410:	f002 ff1d 	bl	800924e <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006414:	4b7b      	ldr	r3, [pc, #492]	; (8006604 <checkDemoModCalisma+0x254>)
 8006416:	2201      	movs	r2, #1
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	e00e      	b.n	800643a <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800641c:	2102      	movs	r1, #2
 800641e:	4874      	ldr	r0, [pc, #464]	; (80065f0 <checkDemoModCalisma+0x240>)
 8006420:	f002 fefe 	bl	8009220 <HAL_GPIO_ReadPin>
 8006424:	4603      	mov	r3, r0
 8006426:	2b01      	cmp	r3, #1
 8006428:	d107      	bne.n	800643a <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800642a:	2200      	movs	r2, #0
 800642c:	2104      	movs	r1, #4
 800642e:	4874      	ldr	r0, [pc, #464]	; (8006600 <checkDemoModCalisma+0x250>)
 8006430:	f002 ff0d 	bl	800924e <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006434:	4b73      	ldr	r3, [pc, #460]	; (8006604 <checkDemoModCalisma+0x254>)
 8006436:	2200      	movs	r2, #0
 8006438:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800643a:	4b72      	ldr	r3, [pc, #456]	; (8006604 <checkDemoModCalisma+0x254>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <checkDemoModCalisma+0xaa>
 8006442:	4b6d      	ldr	r3, [pc, #436]	; (80065f8 <checkDemoModCalisma+0x248>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d107      	bne.n	800645a <checkDemoModCalisma+0xaa>
 800644a:	4b6c      	ldr	r3, [pc, #432]	; (80065fc <checkDemoModCalisma+0x24c>)
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d103      	bne.n	800645a <checkDemoModCalisma+0xaa>
 8006452:	4b68      	ldr	r3, [pc, #416]	; (80065f4 <checkDemoModCalisma+0x244>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00c      	beq.n	8006474 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800645a:	2201      	movs	r2, #1
 800645c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006460:	4867      	ldr	r0, [pc, #412]	; (8006600 <checkDemoModCalisma+0x250>)
 8006462:	f002 fef4 	bl	800924e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006466:	2201      	movs	r2, #1
 8006468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800646c:	4864      	ldr	r0, [pc, #400]	; (8006600 <checkDemoModCalisma+0x250>)
 800646e:	f002 feee 	bl	800924e <HAL_GPIO_WritePin>
 8006472:	e00b      	b.n	800648c <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006474:	2200      	movs	r2, #0
 8006476:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800647a:	4861      	ldr	r0, [pc, #388]	; (8006600 <checkDemoModCalisma+0x250>)
 800647c:	f002 fee7 	bl	800924e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006480:	2200      	movs	r2, #0
 8006482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006486:	485e      	ldr	r0, [pc, #376]	; (8006600 <checkDemoModCalisma+0x250>)
 8006488:	f002 fee1 	bl	800924e <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800648c:	2102      	movs	r1, #2
 800648e:	4858      	ldr	r0, [pc, #352]	; (80065f0 <checkDemoModCalisma+0x240>)
 8006490:	f002 fec6 	bl	8009220 <HAL_GPIO_ReadPin>
 8006494:	4603      	mov	r3, r0
 8006496:	2b01      	cmp	r3, #1
 8006498:	d10d      	bne.n	80064b6 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800649a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800649e:	4854      	ldr	r0, [pc, #336]	; (80065f0 <checkDemoModCalisma+0x240>)
 80064a0:	f002 febe 	bl	8009220 <HAL_GPIO_ReadPin>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d105      	bne.n	80064b6 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80064aa:	4b56      	ldr	r3, [pc, #344]	; (8006604 <checkDemoModCalisma+0x254>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	f083 0301 	eor.w	r3, r3, #1
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80064b6:	2102      	movs	r1, #2
 80064b8:	484d      	ldr	r0, [pc, #308]	; (80065f0 <checkDemoModCalisma+0x240>)
 80064ba:	f002 feb1 	bl	8009220 <HAL_GPIO_ReadPin>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d125      	bne.n	8006510 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80064c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064c8:	4849      	ldr	r0, [pc, #292]	; (80065f0 <checkDemoModCalisma+0x240>)
 80064ca:	f002 fea9 	bl	8009220 <HAL_GPIO_ReadPin>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d11d      	bne.n	8006510 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80064d4:	4b4b      	ldr	r3, [pc, #300]	; (8006604 <checkDemoModCalisma+0x254>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	f083 0301 	eor.w	r3, r3, #1
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d016      	beq.n	8006510 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80064e2:	4b44      	ldr	r3, [pc, #272]	; (80065f4 <checkDemoModCalisma+0x244>)
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	f083 0301 	eor.w	r3, r3, #1
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00f      	beq.n	8006510 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80064f0:	4b42      	ldr	r3, [pc, #264]	; (80065fc <checkDemoModCalisma+0x24c>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	f083 0301 	eor.w	r3, r3, #1
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d008      	beq.n	8006510 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80064fe:	2201      	movs	r2, #1
 8006500:	2120      	movs	r1, #32
 8006502:	483b      	ldr	r0, [pc, #236]	; (80065f0 <checkDemoModCalisma+0x240>)
 8006504:	f002 fea3 	bl	800924e <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006508:	4b3b      	ldr	r3, [pc, #236]	; (80065f8 <checkDemoModCalisma+0x248>)
 800650a:	2201      	movs	r2, #1
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e007      	b.n	8006520 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006510:	2200      	movs	r2, #0
 8006512:	2120      	movs	r1, #32
 8006514:	4836      	ldr	r0, [pc, #216]	; (80065f0 <checkDemoModCalisma+0x240>)
 8006516:	f002 fe9a 	bl	800924e <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800651a:	4b37      	ldr	r3, [pc, #220]	; (80065f8 <checkDemoModCalisma+0x248>)
 800651c:	2200      	movs	r2, #0
 800651e:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006520:	2102      	movs	r1, #2
 8006522:	4833      	ldr	r0, [pc, #204]	; (80065f0 <checkDemoModCalisma+0x240>)
 8006524:	f002 fe7c 	bl	8009220 <HAL_GPIO_ReadPin>
 8006528:	4603      	mov	r3, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d125      	bne.n	800657a <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800652e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006532:	482f      	ldr	r0, [pc, #188]	; (80065f0 <checkDemoModCalisma+0x240>)
 8006534:	f002 fe74 	bl	8009220 <HAL_GPIO_ReadPin>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d11d      	bne.n	800657a <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800653e:	4b31      	ldr	r3, [pc, #196]	; (8006604 <checkDemoModCalisma+0x254>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	f083 0301 	eor.w	r3, r3, #1
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d016      	beq.n	800657a <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 800654c:	4b2a      	ldr	r3, [pc, #168]	; (80065f8 <checkDemoModCalisma+0x248>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	f083 0301 	eor.w	r3, r3, #1
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00f      	beq.n	800657a <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800655a:	4b26      	ldr	r3, [pc, #152]	; (80065f4 <checkDemoModCalisma+0x244>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	f083 0301 	eor.w	r3, r3, #1
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d008      	beq.n	800657a <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006568:	2201      	movs	r2, #1
 800656a:	2110      	movs	r1, #16
 800656c:	4820      	ldr	r0, [pc, #128]	; (80065f0 <checkDemoModCalisma+0x240>)
 800656e:	f002 fe6e 	bl	800924e <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006572:	4b22      	ldr	r3, [pc, #136]	; (80065fc <checkDemoModCalisma+0x24c>)
 8006574:	2201      	movs	r2, #1
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	e007      	b.n	800658a <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800657a:	2200      	movs	r2, #0
 800657c:	2110      	movs	r1, #16
 800657e:	481c      	ldr	r0, [pc, #112]	; (80065f0 <checkDemoModCalisma+0x240>)
 8006580:	f002 fe65 	bl	800924e <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006584:	4b1d      	ldr	r3, [pc, #116]	; (80065fc <checkDemoModCalisma+0x24c>)
 8006586:	2200      	movs	r2, #0
 8006588:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800658a:	2104      	movs	r1, #4
 800658c:	4818      	ldr	r0, [pc, #96]	; (80065f0 <checkDemoModCalisma+0x240>)
 800658e:	f002 fe47 	bl	8009220 <HAL_GPIO_ReadPin>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d139      	bne.n	800660c <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006598:	4b1a      	ldr	r3, [pc, #104]	; (8006604 <checkDemoModCalisma+0x254>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f083 0301 	eor.w	r3, r3, #1
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d032      	beq.n	800660c <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80065a6:	4b15      	ldr	r3, [pc, #84]	; (80065fc <checkDemoModCalisma+0x24c>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	f083 0301 	eor.w	r3, r3, #1
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d02b      	beq.n	800660c <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80065b4:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <checkDemoModCalisma+0x248>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	f083 0301 	eor.w	r3, r3, #1
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d024      	beq.n	800660c <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80065c2:	2201      	movs	r2, #1
 80065c4:	2102      	movs	r1, #2
 80065c6:	480e      	ldr	r0, [pc, #56]	; (8006600 <checkDemoModCalisma+0x250>)
 80065c8:	f002 fe41 	bl	800924e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80065cc:	2201      	movs	r2, #1
 80065ce:	2101      	movs	r1, #1
 80065d0:	480b      	ldr	r0, [pc, #44]	; (8006600 <checkDemoModCalisma+0x250>)
 80065d2:	f002 fe3c 	bl	800924e <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80065d6:	4b07      	ldr	r3, [pc, #28]	; (80065f4 <checkDemoModCalisma+0x244>)
 80065d8:	2201      	movs	r2, #1
 80065da:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <checkDemoModCalisma+0x258>)
 80065de:	2201      	movs	r2, #1
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	e027      	b.n	8006634 <checkDemoModCalisma+0x284>
 80065e4:	2000023e 	.word	0x2000023e
 80065e8:	20000272 	.word	0x20000272
 80065ec:	2000023d 	.word	0x2000023d
 80065f0:	40011000 	.word	0x40011000
 80065f4:	20000279 	.word	0x20000279
 80065f8:	2000027a 	.word	0x2000027a
 80065fc:	2000027b 	.word	0x2000027b
 8006600:	40010c00 	.word	0x40010c00
 8006604:	20000278 	.word	0x20000278
 8006608:	2000025e 	.word	0x2000025e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 800660c:	2104      	movs	r1, #4
 800660e:	48a0      	ldr	r0, [pc, #640]	; (8006890 <checkDemoModCalisma+0x4e0>)
 8006610:	f002 fe06 	bl	8009220 <HAL_GPIO_ReadPin>
 8006614:	4603      	mov	r3, r0
 8006616:	2b01      	cmp	r3, #1
 8006618:	d10c      	bne.n	8006634 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800661a:	2200      	movs	r2, #0
 800661c:	2102      	movs	r1, #2
 800661e:	489d      	ldr	r0, [pc, #628]	; (8006894 <checkDemoModCalisma+0x4e4>)
 8006620:	f002 fe15 	bl	800924e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006624:	2200      	movs	r2, #0
 8006626:	2101      	movs	r1, #1
 8006628:	489a      	ldr	r0, [pc, #616]	; (8006894 <checkDemoModCalisma+0x4e4>)
 800662a:	f002 fe10 	bl	800924e <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800662e:	4b9a      	ldr	r3, [pc, #616]	; (8006898 <checkDemoModCalisma+0x4e8>)
 8006630:	2200      	movs	r2, #0
 8006632:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006634:	2104      	movs	r1, #4
 8006636:	4896      	ldr	r0, [pc, #600]	; (8006890 <checkDemoModCalisma+0x4e0>)
 8006638:	f002 fdf2 	bl	8009220 <HAL_GPIO_ReadPin>
 800663c:	4603      	mov	r3, r0
 800663e:	2b01      	cmp	r3, #1
 8006640:	d10d      	bne.n	800665e <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006642:	2201      	movs	r2, #1
 8006644:	2180      	movs	r1, #128	; 0x80
 8006646:	4895      	ldr	r0, [pc, #596]	; (800689c <checkDemoModCalisma+0x4ec>)
 8006648:	f002 fe01 	bl	800924e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800664c:	2201      	movs	r2, #1
 800664e:	2120      	movs	r1, #32
 8006650:	4892      	ldr	r0, [pc, #584]	; (800689c <checkDemoModCalisma+0x4ec>)
 8006652:	f002 fdfc 	bl	800924e <HAL_GPIO_WritePin>
			timer3 = millis;
 8006656:	4b92      	ldr	r3, [pc, #584]	; (80068a0 <checkDemoModCalisma+0x4f0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a92      	ldr	r2, [pc, #584]	; (80068a4 <checkDemoModCalisma+0x4f4>)
 800665c:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800665e:	4b90      	ldr	r3, [pc, #576]	; (80068a0 <checkDemoModCalisma+0x4f0>)
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b90      	ldr	r3, [pc, #576]	; (80068a4 <checkDemoModCalisma+0x4f4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b04      	cmp	r3, #4
 800666a:	d909      	bls.n	8006680 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800666c:	2200      	movs	r2, #0
 800666e:	2180      	movs	r1, #128	; 0x80
 8006670:	488a      	ldr	r0, [pc, #552]	; (800689c <checkDemoModCalisma+0x4ec>)
 8006672:	f002 fdec 	bl	800924e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006676:	2200      	movs	r2, #0
 8006678:	2120      	movs	r1, #32
 800667a:	4888      	ldr	r0, [pc, #544]	; (800689c <checkDemoModCalisma+0x4ec>)
 800667c:	f002 fde7 	bl	800924e <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006680:	2102      	movs	r1, #2
 8006682:	4883      	ldr	r0, [pc, #524]	; (8006890 <checkDemoModCalisma+0x4e0>)
 8006684:	f002 fdcc 	bl	8009220 <HAL_GPIO_ReadPin>
 8006688:	4603      	mov	r3, r0
 800668a:	2b01      	cmp	r3, #1
 800668c:	d108      	bne.n	80066a0 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800668e:	2201      	movs	r2, #1
 8006690:	2140      	movs	r1, #64	; 0x40
 8006692:	4882      	ldr	r0, [pc, #520]	; (800689c <checkDemoModCalisma+0x4ec>)
 8006694:	f002 fddb 	bl	800924e <HAL_GPIO_WritePin>
			timer3 = millis;
 8006698:	4b81      	ldr	r3, [pc, #516]	; (80068a0 <checkDemoModCalisma+0x4f0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a81      	ldr	r2, [pc, #516]	; (80068a4 <checkDemoModCalisma+0x4f4>)
 800669e:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80066a0:	4b7f      	ldr	r3, [pc, #508]	; (80068a0 <checkDemoModCalisma+0x4f0>)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	4b7f      	ldr	r3, [pc, #508]	; (80068a4 <checkDemoModCalisma+0x4f4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d904      	bls.n	80066b8 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80066ae:	2200      	movs	r2, #0
 80066b0:	2140      	movs	r1, #64	; 0x40
 80066b2:	487a      	ldr	r0, [pc, #488]	; (800689c <checkDemoModCalisma+0x4ec>)
 80066b4:	f002 fdcb 	bl	800924e <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80066b8:	4b7b      	ldr	r3, [pc, #492]	; (80068a8 <checkDemoModCalisma+0x4f8>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d058      	beq.n	8006772 <checkDemoModCalisma+0x3c2>
 80066c0:	4b7a      	ldr	r3, [pc, #488]	; (80068ac <checkDemoModCalisma+0x4fc>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d054      	beq.n	8006772 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80066c8:	4b79      	ldr	r3, [pc, #484]	; (80068b0 <checkDemoModCalisma+0x500>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	3301      	adds	r3, #1
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	4b77      	ldr	r3, [pc, #476]	; (80068b0 <checkDemoModCalisma+0x500>)
 80066d2:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80066d4:	4b76      	ldr	r3, [pc, #472]	; (80068b0 <checkDemoModCalisma+0x500>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b09      	cmp	r3, #9
 80066da:	d908      	bls.n	80066ee <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80066dc:	4b74      	ldr	r3, [pc, #464]	; (80068b0 <checkDemoModCalisma+0x500>)
 80066de:	2200      	movs	r2, #0
 80066e0:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80066e2:	4b74      	ldr	r3, [pc, #464]	; (80068b4 <checkDemoModCalisma+0x504>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	3301      	adds	r3, #1
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	4b72      	ldr	r3, [pc, #456]	; (80068b4 <checkDemoModCalisma+0x504>)
 80066ec:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80066ee:	4b71      	ldr	r3, [pc, #452]	; (80068b4 <checkDemoModCalisma+0x504>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b09      	cmp	r3, #9
 80066f4:	d908      	bls.n	8006708 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80066f6:	4b6f      	ldr	r3, [pc, #444]	; (80068b4 <checkDemoModCalisma+0x504>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80066fc:	4b6e      	ldr	r3, [pc, #440]	; (80068b8 <checkDemoModCalisma+0x508>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	3301      	adds	r3, #1
 8006702:	b2da      	uxtb	r2, r3
 8006704:	4b6c      	ldr	r3, [pc, #432]	; (80068b8 <checkDemoModCalisma+0x508>)
 8006706:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006708:	4b6b      	ldr	r3, [pc, #428]	; (80068b8 <checkDemoModCalisma+0x508>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b09      	cmp	r3, #9
 800670e:	d908      	bls.n	8006722 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006710:	4b69      	ldr	r3, [pc, #420]	; (80068b8 <checkDemoModCalisma+0x508>)
 8006712:	2200      	movs	r2, #0
 8006714:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006716:	4b69      	ldr	r3, [pc, #420]	; (80068bc <checkDemoModCalisma+0x50c>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	3301      	adds	r3, #1
 800671c:	b2da      	uxtb	r2, r3
 800671e:	4b67      	ldr	r3, [pc, #412]	; (80068bc <checkDemoModCalisma+0x50c>)
 8006720:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006722:	4b66      	ldr	r3, [pc, #408]	; (80068bc <checkDemoModCalisma+0x50c>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b09      	cmp	r3, #9
 8006728:	d908      	bls.n	800673c <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800672a:	4b64      	ldr	r3, [pc, #400]	; (80068bc <checkDemoModCalisma+0x50c>)
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006730:	4b63      	ldr	r3, [pc, #396]	; (80068c0 <checkDemoModCalisma+0x510>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	3301      	adds	r3, #1
 8006736:	b2da      	uxtb	r2, r3
 8006738:	4b61      	ldr	r3, [pc, #388]	; (80068c0 <checkDemoModCalisma+0x510>)
 800673a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800673c:	4b60      	ldr	r3, [pc, #384]	; (80068c0 <checkDemoModCalisma+0x510>)
 800673e:	781a      	ldrb	r2, [r3, #0]
 8006740:	4b60      	ldr	r3, [pc, #384]	; (80068c4 <checkDemoModCalisma+0x514>)
 8006742:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006746:	4b5d      	ldr	r3, [pc, #372]	; (80068bc <checkDemoModCalisma+0x50c>)
 8006748:	781a      	ldrb	r2, [r3, #0]
 800674a:	4b5e      	ldr	r3, [pc, #376]	; (80068c4 <checkDemoModCalisma+0x514>)
 800674c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800674e:	4b5a      	ldr	r3, [pc, #360]	; (80068b8 <checkDemoModCalisma+0x508>)
 8006750:	781a      	ldrb	r2, [r3, #0]
 8006752:	4b5c      	ldr	r3, [pc, #368]	; (80068c4 <checkDemoModCalisma+0x514>)
 8006754:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006756:	4b57      	ldr	r3, [pc, #348]	; (80068b4 <checkDemoModCalisma+0x504>)
 8006758:	781a      	ldrb	r2, [r3, #0]
 800675a:	4b5a      	ldr	r3, [pc, #360]	; (80068c4 <checkDemoModCalisma+0x514>)
 800675c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800675e:	4b54      	ldr	r3, [pc, #336]	; (80068b0 <checkDemoModCalisma+0x500>)
 8006760:	781a      	ldrb	r2, [r3, #0]
 8006762:	4b58      	ldr	r3, [pc, #352]	; (80068c4 <checkDemoModCalisma+0x514>)
 8006764:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006766:	4b58      	ldr	r3, [pc, #352]	; (80068c8 <checkDemoModCalisma+0x518>)
 8006768:	2201      	movs	r2, #1
 800676a:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 800676c:	4b4f      	ldr	r3, [pc, #316]	; (80068ac <checkDemoModCalisma+0x4fc>)
 800676e:	2200      	movs	r2, #0
 8006770:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006772:	4b56      	ldr	r3, [pc, #344]	; (80068cc <checkDemoModCalisma+0x51c>)
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f040 8087 	bne.w	800688a <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 800677c:	4a54      	ldr	r2, [pc, #336]	; (80068d0 <checkDemoModCalisma+0x520>)
 800677e:	2101      	movs	r1, #1
 8006780:	2002      	movs	r0, #2
 8006782:	f001 fa27 	bl	8007bd4 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006786:	4a53      	ldr	r2, [pc, #332]	; (80068d4 <checkDemoModCalisma+0x524>)
 8006788:	2101      	movs	r1, #1
 800678a:	2001      	movs	r0, #1
 800678c:	f001 fa22 	bl	8007bd4 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006790:	4b4b      	ldr	r3, [pc, #300]	; (80068c0 <checkDemoModCalisma+0x510>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	220a      	movs	r2, #10
 8006796:	4950      	ldr	r1, [pc, #320]	; (80068d8 <checkDemoModCalisma+0x528>)
 8006798:	4618      	mov	r0, r3
 800679a:	f005 fd6d 	bl	800c278 <itoa>
			lcd_print(2,12,snum);
 800679e:	4a4e      	ldr	r2, [pc, #312]	; (80068d8 <checkDemoModCalisma+0x528>)
 80067a0:	210c      	movs	r1, #12
 80067a2:	2002      	movs	r0, #2
 80067a4:	f001 fa16 	bl	8007bd4 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80067a8:	4b44      	ldr	r3, [pc, #272]	; (80068bc <checkDemoModCalisma+0x50c>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	220a      	movs	r2, #10
 80067ae:	494a      	ldr	r1, [pc, #296]	; (80068d8 <checkDemoModCalisma+0x528>)
 80067b0:	4618      	mov	r0, r3
 80067b2:	f005 fd61 	bl	800c278 <itoa>
			lcd_print(2,13,snum);
 80067b6:	4a48      	ldr	r2, [pc, #288]	; (80068d8 <checkDemoModCalisma+0x528>)
 80067b8:	210d      	movs	r1, #13
 80067ba:	2002      	movs	r0, #2
 80067bc:	f001 fa0a 	bl	8007bd4 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80067c0:	4b3d      	ldr	r3, [pc, #244]	; (80068b8 <checkDemoModCalisma+0x508>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	220a      	movs	r2, #10
 80067c6:	4944      	ldr	r1, [pc, #272]	; (80068d8 <checkDemoModCalisma+0x528>)
 80067c8:	4618      	mov	r0, r3
 80067ca:	f005 fd55 	bl	800c278 <itoa>
			lcd_print(2,14,snum);
 80067ce:	4a42      	ldr	r2, [pc, #264]	; (80068d8 <checkDemoModCalisma+0x528>)
 80067d0:	210e      	movs	r1, #14
 80067d2:	2002      	movs	r0, #2
 80067d4:	f001 f9fe 	bl	8007bd4 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80067d8:	4b36      	ldr	r3, [pc, #216]	; (80068b4 <checkDemoModCalisma+0x504>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	220a      	movs	r2, #10
 80067de:	493e      	ldr	r1, [pc, #248]	; (80068d8 <checkDemoModCalisma+0x528>)
 80067e0:	4618      	mov	r0, r3
 80067e2:	f005 fd49 	bl	800c278 <itoa>
			lcd_print(2,15,snum);
 80067e6:	4a3c      	ldr	r2, [pc, #240]	; (80068d8 <checkDemoModCalisma+0x528>)
 80067e8:	210f      	movs	r1, #15
 80067ea:	2002      	movs	r0, #2
 80067ec:	f001 f9f2 	bl	8007bd4 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80067f0:	4b2f      	ldr	r3, [pc, #188]	; (80068b0 <checkDemoModCalisma+0x500>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	220a      	movs	r2, #10
 80067f6:	4938      	ldr	r1, [pc, #224]	; (80068d8 <checkDemoModCalisma+0x528>)
 80067f8:	4618      	mov	r0, r3
 80067fa:	f005 fd3d 	bl	800c278 <itoa>
			lcd_print(2,16,snum);
 80067fe:	4a36      	ldr	r2, [pc, #216]	; (80068d8 <checkDemoModCalisma+0x528>)
 8006800:	2110      	movs	r1, #16
 8006802:	2002      	movs	r0, #2
 8006804:	f001 f9e6 	bl	8007bd4 <lcd_print>
			mesajYazildi=1;
 8006808:	4b34      	ldr	r3, [pc, #208]	; (80068dc <checkDemoModCalisma+0x52c>)
 800680a:	2201      	movs	r2, #1
 800680c:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800680e:	e03c      	b.n	800688a <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006810:	4b33      	ldr	r3, [pc, #204]	; (80068e0 <checkDemoModCalisma+0x530>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d003      	beq.n	8006820 <checkDemoModCalisma+0x470>
 8006818:	4b2c      	ldr	r3, [pc, #176]	; (80068cc <checkDemoModCalisma+0x51c>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d134      	bne.n	800688a <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006820:	2200      	movs	r2, #0
 8006822:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006826:	481b      	ldr	r0, [pc, #108]	; (8006894 <checkDemoModCalisma+0x4e4>)
 8006828:	f002 fd11 	bl	800924e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800682c:	2200      	movs	r2, #0
 800682e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006832:	4818      	ldr	r0, [pc, #96]	; (8006894 <checkDemoModCalisma+0x4e4>)
 8006834:	f002 fd0b 	bl	800924e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006838:	2200      	movs	r2, #0
 800683a:	2104      	movs	r1, #4
 800683c:	4815      	ldr	r0, [pc, #84]	; (8006894 <checkDemoModCalisma+0x4e4>)
 800683e:	f002 fd06 	bl	800924e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006842:	2200      	movs	r2, #0
 8006844:	2102      	movs	r1, #2
 8006846:	4813      	ldr	r0, [pc, #76]	; (8006894 <checkDemoModCalisma+0x4e4>)
 8006848:	f002 fd01 	bl	800924e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800684c:	2200      	movs	r2, #0
 800684e:	2101      	movs	r1, #1
 8006850:	4810      	ldr	r0, [pc, #64]	; (8006894 <checkDemoModCalisma+0x4e4>)
 8006852:	f002 fcfc 	bl	800924e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006856:	2200      	movs	r2, #0
 8006858:	2120      	movs	r1, #32
 800685a:	480d      	ldr	r0, [pc, #52]	; (8006890 <checkDemoModCalisma+0x4e0>)
 800685c:	f002 fcf7 	bl	800924e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006860:	2200      	movs	r2, #0
 8006862:	2110      	movs	r1, #16
 8006864:	480a      	ldr	r0, [pc, #40]	; (8006890 <checkDemoModCalisma+0x4e0>)
 8006866:	f002 fcf2 	bl	800924e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800686a:	2200      	movs	r2, #0
 800686c:	2180      	movs	r1, #128	; 0x80
 800686e:	480b      	ldr	r0, [pc, #44]	; (800689c <checkDemoModCalisma+0x4ec>)
 8006870:	f002 fced 	bl	800924e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006874:	2200      	movs	r2, #0
 8006876:	2140      	movs	r1, #64	; 0x40
 8006878:	4808      	ldr	r0, [pc, #32]	; (800689c <checkDemoModCalisma+0x4ec>)
 800687a:	f002 fce8 	bl	800924e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800687e:	2200      	movs	r2, #0
 8006880:	2120      	movs	r1, #32
 8006882:	4806      	ldr	r0, [pc, #24]	; (800689c <checkDemoModCalisma+0x4ec>)
 8006884:	f002 fce3 	bl	800924e <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006888:	e7ff      	b.n	800688a <checkDemoModCalisma+0x4da>
 800688a:	bf00      	nop
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	40011000 	.word	0x40011000
 8006894:	40010c00 	.word	0x40010c00
 8006898:	20000279 	.word	0x20000279
 800689c:	40010800 	.word	0x40010800
 80068a0:	200001fc 	.word	0x200001fc
 80068a4:	2000020c 	.word	0x2000020c
 80068a8:	20000278 	.word	0x20000278
 80068ac:	2000025e 	.word	0x2000025e
 80068b0:	2000021d 	.word	0x2000021d
 80068b4:	2000021e 	.word	0x2000021e
 80068b8:	20000000 	.word	0x20000000
 80068bc:	20000001 	.word	0x20000001
 80068c0:	2000021f 	.word	0x2000021f
 80068c4:	20000118 	.word	0x20000118
 80068c8:	2000024c 	.word	0x2000024c
 80068cc:	2000023d 	.word	0x2000023d
 80068d0:	0800da64 	.word	0x0800da64
 80068d4:	0800da70 	.word	0x0800da70
 80068d8:	20000188 	.word	0x20000188
 80068dc:	20000254 	.word	0x20000254
 80068e0:	2000023e 	.word	0x2000023e

080068e4 <mainLoop>:

void mainLoop() {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80068ea:	f7fe f923 	bl	8004b34 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80068ee:	2101      	movs	r1, #1
 80068f0:	48a8      	ldr	r0, [pc, #672]	; (8006b94 <mainLoop+0x2b0>)
 80068f2:	f002 fc95 	bl	8009220 <HAL_GPIO_ReadPin>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d136      	bne.n	800696a <mainLoop+0x86>
 80068fc:	2108      	movs	r1, #8
 80068fe:	48a6      	ldr	r0, [pc, #664]	; (8006b98 <mainLoop+0x2b4>)
 8006900:	f002 fc8e 	bl	8009220 <HAL_GPIO_ReadPin>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d12f      	bne.n	800696a <mainLoop+0x86>
 800690a:	2102      	movs	r1, #2
 800690c:	48a1      	ldr	r0, [pc, #644]	; (8006b94 <mainLoop+0x2b0>)
 800690e:	f002 fc87 	bl	8009220 <HAL_GPIO_ReadPin>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d128      	bne.n	800696a <mainLoop+0x86>
 8006918:	2104      	movs	r1, #4
 800691a:	489e      	ldr	r0, [pc, #632]	; (8006b94 <mainLoop+0x2b0>)
 800691c:	f002 fc80 	bl	8009220 <HAL_GPIO_ReadPin>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d121      	bne.n	800696a <mainLoop+0x86>
 8006926:	2108      	movs	r1, #8
 8006928:	489a      	ldr	r0, [pc, #616]	; (8006b94 <mainLoop+0x2b0>)
 800692a:	f002 fc79 	bl	8009220 <HAL_GPIO_ReadPin>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d11a      	bne.n	800696a <mainLoop+0x86>
 8006934:	2180      	movs	r1, #128	; 0x80
 8006936:	4898      	ldr	r0, [pc, #608]	; (8006b98 <mainLoop+0x2b4>)
 8006938:	f002 fc72 	bl	8009220 <HAL_GPIO_ReadPin>
 800693c:	4603      	mov	r3, r0
 800693e:	2b01      	cmp	r3, #1
 8006940:	d113      	bne.n	800696a <mainLoop+0x86>
 8006942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006946:	4894      	ldr	r0, [pc, #592]	; (8006b98 <mainLoop+0x2b4>)
 8006948:	f002 fc6a 	bl	8009220 <HAL_GPIO_ReadPin>
 800694c:	4603      	mov	r3, r0
 800694e:	2b01      	cmp	r3, #1
 8006950:	d10b      	bne.n	800696a <mainLoop+0x86>
 8006952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006956:	4890      	ldr	r0, [pc, #576]	; (8006b98 <mainLoop+0x2b4>)
 8006958:	f002 fc62 	bl	8009220 <HAL_GPIO_ReadPin>
 800695c:	4603      	mov	r3, r0
 800695e:	2b01      	cmp	r3, #1
 8006960:	d103      	bne.n	800696a <mainLoop+0x86>
			butonKontrol=0;
 8006962:	4b8e      	ldr	r3, [pc, #568]	; (8006b9c <mainLoop+0x2b8>)
 8006964:	2200      	movs	r2, #0
 8006966:	701a      	strb	r2, [r3, #0]
 8006968:	e003      	b.n	8006972 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800696a:	4b8d      	ldr	r3, [pc, #564]	; (8006ba0 <mainLoop+0x2bc>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a8d      	ldr	r2, [pc, #564]	; (8006ba4 <mainLoop+0x2c0>)
 8006970:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() != 1) {
 8006972:	f7fe f8ab 	bl	8004acc <buttonCheck>
 8006976:	4603      	mov	r3, r0
 8006978:	2b01      	cmp	r3, #1
 800697a:	d003      	beq.n	8006984 <mainLoop+0xa0>
			backLightTimer = millis;
 800697c:	4b88      	ldr	r3, [pc, #544]	; (8006ba0 <mainLoop+0x2bc>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a88      	ldr	r2, [pc, #544]	; (8006ba4 <mainLoop+0x2c0>)
 8006982:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006984:	4b88      	ldr	r3, [pc, #544]	; (8006ba8 <mainLoop+0x2c4>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d03a      	beq.n	8006a02 <mainLoop+0x11e>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800698c:	bf00      	nop
 800698e:	4887      	ldr	r0, [pc, #540]	; (8006bac <mainLoop+0x2c8>)
 8006990:	f003 fa6f 	bl	8009e72 <HAL_I2C_GetError>
 8006994:	4603      	mov	r3, r0
 8006996:	2b04      	cmp	r3, #4
 8006998:	d0f9      	beq.n	800698e <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800699a:	bf00      	nop
 800699c:	4883      	ldr	r0, [pc, #524]	; (8006bac <mainLoop+0x2c8>)
 800699e:	f003 fa5b 	bl	8009e58 <HAL_I2C_GetState>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b20      	cmp	r3, #32
 80069a6:	d1f9      	bne.n	800699c <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80069a8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80069ac:	9302      	str	r3, [sp, #8]
 80069ae:	236e      	movs	r3, #110	; 0x6e
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	4b7f      	ldr	r3, [pc, #508]	; (8006bb0 <mainLoop+0x2cc>)
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	236e      	movs	r3, #110	; 0x6e
 80069b8:	2200      	movs	r2, #0
 80069ba:	21a0      	movs	r1, #160	; 0xa0
 80069bc:	487b      	ldr	r0, [pc, #492]	; (8006bac <mainLoop+0x2c8>)
 80069be:	f002 fee9 	bl	8009794 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80069c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069c6:	f001 fe5b 	bl	8008680 <HAL_Delay>

		  hafizaYaz=0;
 80069ca:	4b77      	ldr	r3, [pc, #476]	; (8006ba8 <mainLoop+0x2c4>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80069d0:	4b78      	ldr	r3, [pc, #480]	; (8006bb4 <mainLoop+0x2d0>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d105      	bne.n	80069e4 <mainLoop+0x100>
			  lcd_print(2,1,"Data yazildi    ");
 80069d8:	4a77      	ldr	r2, [pc, #476]	; (8006bb8 <mainLoop+0x2d4>)
 80069da:	2101      	movs	r1, #1
 80069dc:	2002      	movs	r0, #2
 80069de:	f001 f8f9 	bl	8007bd4 <lcd_print>
 80069e2:	e008      	b.n	80069f6 <mainLoop+0x112>
		  } else if(dilSecim==1) {
 80069e4:	4b73      	ldr	r3, [pc, #460]	; (8006bb4 <mainLoop+0x2d0>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d104      	bne.n	80069f6 <mainLoop+0x112>
			  lcd_print(2,1,"Data Wrote      ");
 80069ec:	4a73      	ldr	r2, [pc, #460]	; (8006bbc <mainLoop+0x2d8>)
 80069ee:	2101      	movs	r1, #1
 80069f0:	2002      	movs	r0, #2
 80069f2:	f001 f8ef 	bl	8007bd4 <lcd_print>
		  }

		  HAL_Delay(1000);
 80069f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069fa:	f001 fe41 	bl	8008680 <HAL_Delay>
		  lcd_clear();
 80069fe:	f001 f915 	bl	8007c2c <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006a02:	4b6f      	ldr	r3, [pc, #444]	; (8006bc0 <mainLoop+0x2dc>)
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	f083 0301 	eor.w	r3, r3, #1
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d06b      	beq.n	8006ae8 <mainLoop+0x204>
 8006a10:	4866      	ldr	r0, [pc, #408]	; (8006bac <mainLoop+0x2c8>)
 8006a12:	f003 fa21 	bl	8009e58 <HAL_I2C_GetState>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d165      	bne.n	8006ae8 <mainLoop+0x204>
		  if(ilkOkuma==0) {
 8006a1c:	4b69      	ldr	r3, [pc, #420]	; (8006bc4 <mainLoop+0x2e0>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	f083 0301 	eor.w	r3, r3, #1
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d044      	beq.n	8006ab4 <mainLoop+0x1d0>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006a2a:	4a67      	ldr	r2, [pc, #412]	; (8006bc8 <mainLoop+0x2e4>)
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	2001      	movs	r0, #1
 8006a30:	f001 f8d0 	bl	8007bd4 <lcd_print>
			  if(dilSecim==0) {
 8006a34:	4b5f      	ldr	r3, [pc, #380]	; (8006bb4 <mainLoop+0x2d0>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <mainLoop+0x164>
				  lcd_print(2,1,"Data Okunuyor...");
 8006a3c:	4a63      	ldr	r2, [pc, #396]	; (8006bcc <mainLoop+0x2e8>)
 8006a3e:	2101      	movs	r1, #1
 8006a40:	2002      	movs	r0, #2
 8006a42:	f001 f8c7 	bl	8007bd4 <lcd_print>
 8006a46:	e008      	b.n	8006a5a <mainLoop+0x176>
			  } else if(dilSecim==1) {
 8006a48:	4b5a      	ldr	r3, [pc, #360]	; (8006bb4 <mainLoop+0x2d0>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d104      	bne.n	8006a5a <mainLoop+0x176>
				  lcd_print(2,1,"Data Reading... ");
 8006a50:	4a5f      	ldr	r2, [pc, #380]	; (8006bd0 <mainLoop+0x2ec>)
 8006a52:	2101      	movs	r1, #1
 8006a54:	2002      	movs	r0, #2
 8006a56:	f001 f8bd 	bl	8007bd4 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006a5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a5e:	f001 fe0f 	bl	8008680 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a62:	bf00      	nop
 8006a64:	4851      	ldr	r0, [pc, #324]	; (8006bac <mainLoop+0x2c8>)
 8006a66:	f003 fa04 	bl	8009e72 <HAL_I2C_GetError>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d0f9      	beq.n	8006a64 <mainLoop+0x180>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006a70:	e003      	b.n	8006a7a <mainLoop+0x196>
				  HAL_Delay(1000);
 8006a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a76:	f001 fe03 	bl	8008680 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006a7a:	484c      	ldr	r0, [pc, #304]	; (8006bac <mainLoop+0x2c8>)
 8006a7c:	f003 f9ec 	bl	8009e58 <HAL_I2C_GetState>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d1f5      	bne.n	8006a72 <mainLoop+0x18e>
			  }

			  if(dilSecim==0) {
 8006a86:	4b4b      	ldr	r3, [pc, #300]	; (8006bb4 <mainLoop+0x2d0>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d105      	bne.n	8006a9a <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Okundu.    ");
 8006a8e:	4a51      	ldr	r2, [pc, #324]	; (8006bd4 <mainLoop+0x2f0>)
 8006a90:	2101      	movs	r1, #1
 8006a92:	2002      	movs	r0, #2
 8006a94:	f001 f89e 	bl	8007bd4 <lcd_print>
 8006a98:	e008      	b.n	8006aac <mainLoop+0x1c8>
			  } else if(dilSecim==1) {
 8006a9a:	4b46      	ldr	r3, [pc, #280]	; (8006bb4 <mainLoop+0x2d0>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d104      	bne.n	8006aac <mainLoop+0x1c8>
				  lcd_print(2,1,"Data Read.      ");
 8006aa2:	4a4d      	ldr	r2, [pc, #308]	; (8006bd8 <mainLoop+0x2f4>)
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	2002      	movs	r0, #2
 8006aa8:	f001 f894 	bl	8007bd4 <lcd_print>
			  }

			  ilkOkuma=1;
 8006aac:	4b45      	ldr	r3, [pc, #276]	; (8006bc4 <mainLoop+0x2e0>)
 8006aae:	2201      	movs	r2, #1
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	e014      	b.n	8006ade <mainLoop+0x1fa>
		  } else {
			  if(dilSecim==0) {
 8006ab4:	4b3f      	ldr	r3, [pc, #252]	; (8006bb4 <mainLoop+0x2d0>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d105      	bne.n	8006ac8 <mainLoop+0x1e4>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006abc:	4a47      	ldr	r2, [pc, #284]	; (8006bdc <mainLoop+0x2f8>)
 8006abe:	2101      	movs	r1, #1
 8006ac0:	2002      	movs	r0, #2
 8006ac2:	f001 f887 	bl	8007bd4 <lcd_print>
 8006ac6:	e008      	b.n	8006ada <mainLoop+0x1f6>
			  } else if(dilSecim==1) {
 8006ac8:	4b3a      	ldr	r3, [pc, #232]	; (8006bb4 <mainLoop+0x2d0>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d104      	bne.n	8006ada <mainLoop+0x1f6>
				  lcd_print(2,1,"Value Saved     ");
 8006ad0:	4a43      	ldr	r2, [pc, #268]	; (8006be0 <mainLoop+0x2fc>)
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	2002      	movs	r0, #2
 8006ad6:	f001 f87d 	bl	8007bd4 <lcd_print>
			  }
			  lcd_clear();
 8006ada:	f001 f8a7 	bl	8007c2c <lcd_clear>
		  }

		  lcd_clear();
 8006ade:	f001 f8a5 	bl	8007c2c <lcd_clear>

		  //eepromKontrol();
		  hafizaOku=1;
 8006ae2:	4b37      	ldr	r3, [pc, #220]	; (8006bc0 <mainLoop+0x2dc>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006ae8:	4b3e      	ldr	r3, [pc, #248]	; (8006be4 <mainLoop+0x300>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d11c      	bne.n	8006b2a <mainLoop+0x246>
 8006af0:	4b3d      	ldr	r3, [pc, #244]	; (8006be8 <mainLoop+0x304>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	f083 0301 	eor.w	r3, r3, #1
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d015      	beq.n	8006b2a <mainLoop+0x246>
 8006afe:	4b3b      	ldr	r3, [pc, #236]	; (8006bec <mainLoop+0x308>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d111      	bne.n	8006b2a <mainLoop+0x246>
			lcd_clear();
 8006b06:	f001 f891 	bl	8007c2c <lcd_clear>
			HAL_Delay(10);
 8006b0a:	200a      	movs	r0, #10
 8006b0c:	f001 fdb8 	bl	8008680 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006b10:	4a37      	ldr	r2, [pc, #220]	; (8006bf0 <mainLoop+0x30c>)
 8006b12:	2101      	movs	r1, #1
 8006b14:	2001      	movs	r0, #1
 8006b16:	f001 f85d 	bl	8007bd4 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006b1a:	4a36      	ldr	r2, [pc, #216]	; (8006bf4 <mainLoop+0x310>)
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	2002      	movs	r0, #2
 8006b20:	f001 f858 	bl	8007bd4 <lcd_print>
			mesajYazildi=1;
 8006b24:	4b30      	ldr	r3, [pc, #192]	; (8006be8 <mainLoop+0x304>)
 8006b26:	2201      	movs	r2, #1
 8006b28:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006b2a:	4b2e      	ldr	r3, [pc, #184]	; (8006be4 <mainLoop+0x300>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d112      	bne.n	8006b58 <mainLoop+0x274>
 8006b32:	2102      	movs	r1, #2
 8006b34:	4817      	ldr	r0, [pc, #92]	; (8006b94 <mainLoop+0x2b0>)
 8006b36:	f002 fb73 	bl	8009220 <HAL_GPIO_ReadPin>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d10b      	bne.n	8006b58 <mainLoop+0x274>
 8006b40:	2104      	movs	r1, #4
 8006b42:	4814      	ldr	r0, [pc, #80]	; (8006b94 <mainLoop+0x2b0>)
 8006b44:	f002 fb6c 	bl	8009220 <HAL_GPIO_ReadPin>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d104      	bne.n	8006b58 <mainLoop+0x274>
			menuGiris=1;
 8006b4e:	4b25      	ldr	r3, [pc, #148]	; (8006be4 <mainLoop+0x300>)
 8006b50:	2201      	movs	r2, #1
 8006b52:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006b54:	f001 f86a 	bl	8007c2c <lcd_clear>
		}

		if(menuGiris==1) {
 8006b58:	4b22      	ldr	r3, [pc, #136]	; (8006be4 <mainLoop+0x300>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <mainLoop+0x280>
			menu();
 8006b60:	f7fa fad8 	bl	8001114 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b68:	480b      	ldr	r0, [pc, #44]	; (8006b98 <mainLoop+0x2b4>)
 8006b6a:	f002 fb88 	bl	800927e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b72:	4821      	ldr	r0, [pc, #132]	; (8006bf8 <mainLoop+0x314>)
 8006b74:	f002 fb54 	bl	8009220 <HAL_GPIO_ReadPin>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d142      	bne.n	8006c04 <mainLoop+0x320>
 8006b7e:	4b1f      	ldr	r3, [pc, #124]	; (8006bfc <mainLoop+0x318>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	f083 0301 	eor.w	r3, r3, #1
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d03b      	beq.n	8006c04 <mainLoop+0x320>
			stopVar=1;
 8006b8c:	4b1c      	ldr	r3, [pc, #112]	; (8006c00 <mainLoop+0x31c>)
 8006b8e:	2201      	movs	r2, #1
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	e03a      	b.n	8006c0a <mainLoop+0x326>
 8006b94:	40010800 	.word	0x40010800
 8006b98:	40011000 	.word	0x40011000
 8006b9c:	2000024f 	.word	0x2000024f
 8006ba0:	200001fc 	.word	0x200001fc
 8006ba4:	20000218 	.word	0x20000218
 8006ba8:	2000024c 	.word	0x2000024c
 8006bac:	200003a8 	.word	0x200003a8
 8006bb0:	20000118 	.word	0x20000118
 8006bb4:	20000241 	.word	0x20000241
 8006bb8:	0800da84 	.word	0x0800da84
 8006bbc:	0800da98 	.word	0x0800da98
 8006bc0:	2000024d 	.word	0x2000024d
 8006bc4:	2000024e 	.word	0x2000024e
 8006bc8:	0800daac 	.word	0x0800daac
 8006bcc:	0800dac0 	.word	0x0800dac0
 8006bd0:	0800dad4 	.word	0x0800dad4
 8006bd4:	0800dae8 	.word	0x0800dae8
 8006bd8:	0800dafc 	.word	0x0800dafc
 8006bdc:	0800db10 	.word	0x0800db10
 8006be0:	0800db24 	.word	0x0800db24
 8006be4:	2000023d 	.word	0x2000023d
 8006be8:	20000254 	.word	0x20000254
 8006bec:	2000023e 	.word	0x2000023e
 8006bf0:	0800db38 	.word	0x0800db38
 8006bf4:	0800db4c 	.word	0x0800db4c
 8006bf8:	40010c00 	.word	0x40010c00
 8006bfc:	20000275 	.word	0x20000275
 8006c00:	20000272 	.word	0x20000272
		} else {
			stopVar=0;
 8006c04:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <mainLoop+0x33c>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006c0a:	f7fd ffa9 	bl	8004b60 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006c0e:	f7fd ffdb 	bl	8004bc8 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006c12:	f7fe f81f 	bl	8004c54 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006c16:	f7fe f86f 	bl	8004cf8 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006c1a:	f7ff fbc9 	bl	80063b0 <checkDemoModCalisma>
		checkLCDBacklight();
 8006c1e:	e664      	b.n	80068ea <mainLoop+0x6>
 8006c20:	20000272 	.word	0x20000272

08006c24 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "IoTMenu.h"
#include "EEPROMProcess.h"

void takeMachineID() {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	f001 f830 	bl	8007c90 <lcd_cursor>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8006c30:	2305      	movs	r3, #5
 8006c32:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8006c34:	2303      	movs	r3, #3
 8006c36:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8006c38:	2300      	movs	r3, #0
 8006c3a:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8006c3c:	4ba6      	ldr	r3, [pc, #664]	; (8006ed8 <takeMachineID+0x2b4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	603b      	str	r3, [r7, #0]

    //resetEEPROM4Wifi(1);
    memset(machineIDInt, 0, machineIDCharacterLimit*sizeof(*machineIDInt));
 8006c42:	220c      	movs	r2, #12
 8006c44:	2100      	movs	r1, #0
 8006c46:	48a5      	ldr	r0, [pc, #660]	; (8006edc <takeMachineID+0x2b8>)
 8006c48:	f005 fc2e 	bl	800c4a8 <memset>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8006c4c:	220c      	movs	r2, #12
 8006c4e:	2100      	movs	r1, #0
 8006c50:	48a3      	ldr	r0, [pc, #652]	; (8006ee0 <takeMachineID+0x2bc>)
 8006c52:	f005 fc29 	bl	800c4a8 <memset>
    HAL_Delay(100);
 8006c56:	2064      	movs	r0, #100	; 0x64
 8006c58:	f001 fd12 	bl	8008680 <HAL_Delay>

    printTemplate(1, 0);
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	2001      	movs	r0, #1
 8006c60:	f7fa f8cc 	bl	8000dfc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006c64:	2108      	movs	r1, #8
 8006c66:	489f      	ldr	r0, [pc, #636]	; (8006ee4 <takeMachineID+0x2c0>)
 8006c68:	f002 fada 	bl	8009220 <HAL_GPIO_ReadPin>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d12b      	bne.n	8006cca <takeMachineID+0xa6>
        	lcd_cursor(0);
 8006c72:	2000      	movs	r0, #0
 8006c74:	f001 f80c 	bl	8007c90 <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006c78:	4899      	ldr	r0, [pc, #612]	; (8006ee0 <takeMachineID+0x2bc>)
 8006c7a:	f7f9 fad3 	bl	8000224 <strlen>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b0c      	cmp	r3, #12
 8006c82:	d010      	beq.n	8006ca6 <takeMachineID+0x82>
        		lcd_clear();
 8006c84:	f000 ffd2 	bl	8007c2c <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006c88:	4a97      	ldr	r2, [pc, #604]	; (8006ee8 <takeMachineID+0x2c4>)
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	f000 ffa1 	bl	8007bd4 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006c92:	4a96      	ldr	r2, [pc, #600]	; (8006eec <takeMachineID+0x2c8>)
 8006c94:	2101      	movs	r1, #1
 8006c96:	2002      	movs	r0, #2
 8006c98:	f000 ff9c 	bl	8007bd4 <lcd_print>
        		HAL_Delay(1200);
 8006c9c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006ca0:	f001 fcee 	bl	8008680 <HAL_Delay>
        		goto mainSection;
 8006ca4:	e7c1      	b.n	8006c2a <takeMachineID+0x6>
        	} else {
        		//memcpy(&eepromData[idStartPos], machineIDInt, machineIDCharacterLimit); //destination, source, size

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006ca6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006caa:	9302      	str	r3, [sp, #8]
 8006cac:	236e      	movs	r3, #110	; 0x6e
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	4b8f      	ldr	r3, [pc, #572]	; (8006ef0 <takeMachineID+0x2cc>)
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	236e      	movs	r3, #110	; 0x6e
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	21a0      	movs	r1, #160	; 0xa0
 8006cba:	488e      	ldr	r0, [pc, #568]	; (8006ef4 <takeMachineID+0x2d0>)
 8006cbc:	f002 fd6a 	bl	8009794 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cc4:	f001 fcdc 	bl	8008680 <HAL_Delay>

            	break;
 8006cc8:	e135      	b.n	8006f36 <takeMachineID+0x312>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006cca:	2101      	movs	r1, #1
 8006ccc:	4885      	ldr	r0, [pc, #532]	; (8006ee4 <takeMachineID+0x2c0>)
 8006cce:	f002 faa7 	bl	8009220 <HAL_GPIO_ReadPin>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d111      	bne.n	8006cfc <takeMachineID+0xd8>
        	if(cursorPosition == 7) {
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b07      	cmp	r3, #7
 8006cdc:	d102      	bne.n	8006ce4 <takeMachineID+0xc0>
        		cursorPosition = 10;
 8006cde:	230a      	movs	r3, #10
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	e008      	b.n	8006cf6 <takeMachineID+0xd2>
        	} else if (cursorPosition == 14) {
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b0e      	cmp	r3, #14
 8006ce8:	d102      	bne.n	8006cf0 <takeMachineID+0xcc>
                cursorPosition = 3;
 8006cea:	2303      	movs	r3, #3
 8006cec:	60bb      	str	r3, [r7, #8]
 8006cee:	e002      	b.n	8006cf6 <takeMachineID+0xd2>
            } else {
            	cursorPosition++;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006cf6:	2096      	movs	r0, #150	; 0x96
 8006cf8:	f001 fcc2 	bl	8008680 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006cfc:	2108      	movs	r1, #8
 8006cfe:	487e      	ldr	r0, [pc, #504]	; (8006ef8 <takeMachineID+0x2d4>)
 8006d00:	f002 fa8e 	bl	8009220 <HAL_GPIO_ReadPin>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d111      	bne.n	8006d2e <takeMachineID+0x10a>
            if (cursorPosition == 3) {
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d102      	bne.n	8006d16 <takeMachineID+0xf2>
                cursorPosition = 14;
 8006d10:	230e      	movs	r3, #14
 8006d12:	60bb      	str	r3, [r7, #8]
 8006d14:	e008      	b.n	8006d28 <takeMachineID+0x104>
            } else if(cursorPosition == 10) {
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2b0a      	cmp	r3, #10
 8006d1a:	d102      	bne.n	8006d22 <takeMachineID+0xfe>
            	cursorPosition = 7;
 8006d1c:	2307      	movs	r3, #7
 8006d1e:	60bb      	str	r3, [r7, #8]
 8006d20:	e002      	b.n	8006d28 <takeMachineID+0x104>
            } else {
            	cursorPosition--;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006d28:	2096      	movs	r0, #150	; 0x96
 8006d2a:	f001 fca9 	bl	8008680 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006d2e:	2102      	movs	r1, #2
 8006d30:	486c      	ldr	r0, [pc, #432]	; (8006ee4 <takeMachineID+0x2c0>)
 8006d32:	f002 fa75 	bl	8009220 <HAL_GPIO_ReadPin>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	f040 80a1 	bne.w	8006e80 <takeMachineID+0x25c>
        	if(cursorPosition == 3) {
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d10a      	bne.n	8006d5a <takeMachineID+0x136>
        		machineID[arrayPos] = '0';
 8006d44:	4a66      	ldr	r2, [pc, #408]	; (8006ee0 <takeMachineID+0x2bc>)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4413      	add	r3, r2
 8006d4a:	2230      	movs	r2, #48	; 0x30
 8006d4c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8006d4e:	4a68      	ldr	r2, [pc, #416]	; (8006ef0 <takeMachineID+0x2cc>)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	4413      	add	r3, r2
 8006d54:	2200      	movs	r2, #0
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	e07c      	b.n	8006e54 <takeMachineID+0x230>
        	} else if(cursorPosition == 4) {
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d10a      	bne.n	8006d76 <takeMachineID+0x152>
        		machineID[arrayPos] = '1';
 8006d60:	4a5f      	ldr	r2, [pc, #380]	; (8006ee0 <takeMachineID+0x2bc>)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4413      	add	r3, r2
 8006d66:	2231      	movs	r2, #49	; 0x31
 8006d68:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8006d6a:	4a61      	ldr	r2, [pc, #388]	; (8006ef0 <takeMachineID+0x2cc>)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	4413      	add	r3, r2
 8006d70:	2201      	movs	r2, #1
 8006d72:	701a      	strb	r2, [r3, #0]
 8006d74:	e06e      	b.n	8006e54 <takeMachineID+0x230>
        	} else if(cursorPosition == 5) {
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b05      	cmp	r3, #5
 8006d7a:	d10a      	bne.n	8006d92 <takeMachineID+0x16e>
        		machineID[arrayPos] = '2';
 8006d7c:	4a58      	ldr	r2, [pc, #352]	; (8006ee0 <takeMachineID+0x2bc>)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4413      	add	r3, r2
 8006d82:	2232      	movs	r2, #50	; 0x32
 8006d84:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8006d86:	4a5a      	ldr	r2, [pc, #360]	; (8006ef0 <takeMachineID+0x2cc>)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	701a      	strb	r2, [r3, #0]
 8006d90:	e060      	b.n	8006e54 <takeMachineID+0x230>
        	} else if(cursorPosition == 6) {
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b06      	cmp	r3, #6
 8006d96:	d10a      	bne.n	8006dae <takeMachineID+0x18a>
        		machineID[arrayPos] = '3';
 8006d98:	4a51      	ldr	r2, [pc, #324]	; (8006ee0 <takeMachineID+0x2bc>)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	2233      	movs	r2, #51	; 0x33
 8006da0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8006da2:	4a53      	ldr	r2, [pc, #332]	; (8006ef0 <takeMachineID+0x2cc>)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	4413      	add	r3, r2
 8006da8:	2203      	movs	r2, #3
 8006daa:	701a      	strb	r2, [r3, #0]
 8006dac:	e052      	b.n	8006e54 <takeMachineID+0x230>
        	} else if(cursorPosition == 7) {
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2b07      	cmp	r3, #7
 8006db2:	d10a      	bne.n	8006dca <takeMachineID+0x1a6>
        		machineID[arrayPos] = '4';
 8006db4:	4a4a      	ldr	r2, [pc, #296]	; (8006ee0 <takeMachineID+0x2bc>)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4413      	add	r3, r2
 8006dba:	2234      	movs	r2, #52	; 0x34
 8006dbc:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8006dbe:	4a4c      	ldr	r2, [pc, #304]	; (8006ef0 <takeMachineID+0x2cc>)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	701a      	strb	r2, [r3, #0]
 8006dc8:	e044      	b.n	8006e54 <takeMachineID+0x230>
        	} else if(cursorPosition == 10) {
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2b0a      	cmp	r3, #10
 8006dce:	d10a      	bne.n	8006de6 <takeMachineID+0x1c2>
        		machineID[arrayPos] = '5';
 8006dd0:	4a43      	ldr	r2, [pc, #268]	; (8006ee0 <takeMachineID+0x2bc>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	2235      	movs	r2, #53	; 0x35
 8006dd8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8006dda:	4a45      	ldr	r2, [pc, #276]	; (8006ef0 <takeMachineID+0x2cc>)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	4413      	add	r3, r2
 8006de0:	2205      	movs	r2, #5
 8006de2:	701a      	strb	r2, [r3, #0]
 8006de4:	e036      	b.n	8006e54 <takeMachineID+0x230>
        	} else if(cursorPosition == 11) {
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b0b      	cmp	r3, #11
 8006dea:	d10a      	bne.n	8006e02 <takeMachineID+0x1de>
        		machineID[arrayPos] = '6';
 8006dec:	4a3c      	ldr	r2, [pc, #240]	; (8006ee0 <takeMachineID+0x2bc>)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4413      	add	r3, r2
 8006df2:	2236      	movs	r2, #54	; 0x36
 8006df4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8006df6:	4a3e      	ldr	r2, [pc, #248]	; (8006ef0 <takeMachineID+0x2cc>)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	2206      	movs	r2, #6
 8006dfe:	701a      	strb	r2, [r3, #0]
 8006e00:	e028      	b.n	8006e54 <takeMachineID+0x230>
        	} else if(cursorPosition == 12) {
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b0c      	cmp	r3, #12
 8006e06:	d10a      	bne.n	8006e1e <takeMachineID+0x1fa>
        		machineID[arrayPos] = '7';
 8006e08:	4a35      	ldr	r2, [pc, #212]	; (8006ee0 <takeMachineID+0x2bc>)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	2237      	movs	r2, #55	; 0x37
 8006e10:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8006e12:	4a37      	ldr	r2, [pc, #220]	; (8006ef0 <takeMachineID+0x2cc>)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	4413      	add	r3, r2
 8006e18:	2207      	movs	r2, #7
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e01a      	b.n	8006e54 <takeMachineID+0x230>
        	} else if(cursorPosition == 13) {
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b0d      	cmp	r3, #13
 8006e22:	d10a      	bne.n	8006e3a <takeMachineID+0x216>
        		machineID[arrayPos] = '8';
 8006e24:	4a2e      	ldr	r2, [pc, #184]	; (8006ee0 <takeMachineID+0x2bc>)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4413      	add	r3, r2
 8006e2a:	2238      	movs	r2, #56	; 0x38
 8006e2c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8006e2e:	4a30      	ldr	r2, [pc, #192]	; (8006ef0 <takeMachineID+0x2cc>)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	4413      	add	r3, r2
 8006e34:	2208      	movs	r2, #8
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	e00c      	b.n	8006e54 <takeMachineID+0x230>
        	} else if(cursorPosition == 14) {
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b0e      	cmp	r3, #14
 8006e3e:	d109      	bne.n	8006e54 <takeMachineID+0x230>
        		machineID[arrayPos] = '9';
 8006e40:	4a27      	ldr	r2, [pc, #156]	; (8006ee0 <takeMachineID+0x2bc>)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4413      	add	r3, r2
 8006e46:	2239      	movs	r2, #57	; 0x39
 8006e48:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8006e4a:	4a29      	ldr	r2, [pc, #164]	; (8006ef0 <takeMachineID+0x2cc>)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	4413      	add	r3, r2
 8006e50:	2209      	movs	r2, #9
 8006e52:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	b2d9      	uxtb	r1, r3
 8006e58:	4a21      	ldr	r2, [pc, #132]	; (8006ee0 <takeMachineID+0x2bc>)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	2001      	movs	r0, #1
 8006e64:	f000 fecb 	bl	8007bfe <lcd_print_char>

        	writeLoc++;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3301      	adds	r3, #1
 8006e72:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	3301      	adds	r3, #1
 8006e78:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8006e7a:	2096      	movs	r0, #150	; 0x96
 8006e7c:	f001 fc00 	bl	8008680 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006e80:	2104      	movs	r1, #4
 8006e82:	4818      	ldr	r0, [pc, #96]	; (8006ee4 <takeMachineID+0x2c0>)
 8006e84:	f002 f9cc 	bl	8009220 <HAL_GPIO_ReadPin>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d14c      	bne.n	8006f28 <takeMachineID+0x304>
            if(strlen(machineID) >= 1) {
 8006e8e:	4b14      	ldr	r3, [pc, #80]	; (8006ee0 <takeMachineID+0x2bc>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d045      	beq.n	8006f22 <takeMachineID+0x2fe>
                machineID[arrayPos] = '\0';
 8006e96:	4a12      	ldr	r2, [pc, #72]	; (8006ee0 <takeMachineID+0x2bc>)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8006ea0:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <takeMachineID+0x2cc>)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b05      	cmp	r3, #5
 8006eae:	dd03      	ble.n	8006eb8 <takeMachineID+0x294>
                	writeLoc--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	e004      	b.n	8006ec2 <takeMachineID+0x29e>
                } else if(writeLoc < 5) {
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	dc01      	bgt.n	8006ec2 <takeMachineID+0x29e>
                	writeLoc = 5;
 8006ebe:	2305      	movs	r3, #5
 8006ec0:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dd19      	ble.n	8006efc <takeMachineID+0x2d8>
                	arrayPos--;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	e01a      	b.n	8006f0c <takeMachineID+0x2e8>
 8006ed6:	bf00      	nop
 8006ed8:	20000004 	.word	0x20000004
 8006edc:	200001c4 	.word	0x200001c4
 8006ee0:	20000190 	.word	0x20000190
 8006ee4:	40010800 	.word	0x40010800
 8006ee8:	0800db60 	.word	0x0800db60
 8006eec:	0800db74 	.word	0x0800db74
 8006ef0:	20000118 	.word	0x20000118
 8006ef4:	200003a8 	.word	0x200003a8
 8006ef8:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	da04      	bge.n	8006f0c <takeMachineID+0x2e8>
                	arrayPos = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8006f06:	4b0e      	ldr	r3, [pc, #56]	; (8006f40 <takeMachineID+0x31c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	3304      	adds	r3, #4
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	4619      	mov	r1, r3
 8006f16:	2001      	movs	r0, #1
 8006f18:	f000 fe92 	bl	8007c40 <lcd_delete_char>
                HAL_Delay(50);
 8006f1c:	2032      	movs	r0, #50	; 0x32
 8006f1e:	f001 fbaf 	bl	8008680 <HAL_Delay>
            }

            HAL_Delay(150);
 8006f22:	2096      	movs	r0, #150	; 0x96
 8006f24:	f001 fbac 	bl	8008680 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	2002      	movs	r0, #2
 8006f30:	f000 fe31 	bl	8007b96 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006f34:	e696      	b.n	8006c64 <takeMachineID+0x40>
    }
}
 8006f36:	bf00      	nop
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000004 	.word	0x20000004

08006f44 <takeWifiSSID>:

void takeWifiSSID() {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08c      	sub	sp, #48	; 0x30
 8006f48:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 8006f4a:	2001      	movs	r0, #1
 8006f4c:	f000 fea0 	bl	8007c90 <lcd_cursor>

    //resetEEPROM4Wifi(2);
    memset(wifiSSIDInt, 0, wifiCharacterLimit*sizeof(*wifiSSIDInt));
 8006f50:	2214      	movs	r2, #20
 8006f52:	2100      	movs	r1, #0
 8006f54:	4880      	ldr	r0, [pc, #512]	; (8007158 <takeWifiSSID+0x214>)
 8006f56:	f005 faa7 	bl	800c4a8 <memset>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8006f5a:	2214      	movs	r2, #20
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	487f      	ldr	r0, [pc, #508]	; (800715c <takeWifiSSID+0x218>)
 8006f60:	f005 faa2 	bl	800c4a8 <memset>
    int eepromTestVal = ssidStartPos;
 8006f64:	4b7e      	ldr	r3, [pc, #504]	; (8007160 <takeWifiSSID+0x21c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	61fb      	str	r3, [r7, #28]
    for(int i=0; i<wifiCharacterLimit; i++) {
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61bb      	str	r3, [r7, #24]
 8006f6e:	e00a      	b.n	8006f86 <takeWifiSSID+0x42>
    	eepromData[eepromTestVal] = '\0';
 8006f70:	4a7c      	ldr	r2, [pc, #496]	; (8007164 <takeWifiSSID+0x220>)
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	4413      	add	r3, r2
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
    	eepromTestVal++;
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	61fb      	str	r3, [r7, #28]
    for(int i=0; i<wifiCharacterLimit; i++) {
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	3301      	adds	r3, #1
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b13      	cmp	r3, #19
 8006f8a:	ddf1      	ble.n	8006f70 <takeWifiSSID+0x2c>
    }
    HAL_Delay(100);
 8006f8c:	2064      	movs	r0, #100	; 0x64
 8006f8e:	f001 fb77 	bl	8008680 <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8006f92:	2301      	movs	r3, #1
 8006f94:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8006f96:	2307      	movs	r3, #7
 8006f98:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8006fa2:	4b6f      	ldr	r3, [pc, #444]	; (8007160 <takeWifiSSID+0x21c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006fa8:	2101      	movs	r1, #1
 8006faa:	2002      	movs	r0, #2
 8006fac:	f7f9 ff26 	bl	8000dfc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006fb0:	2108      	movs	r1, #8
 8006fb2:	486d      	ldr	r0, [pc, #436]	; (8007168 <takeWifiSSID+0x224>)
 8006fb4:	f002 f934 	bl	8009220 <HAL_GPIO_ReadPin>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d12b      	bne.n	8007016 <takeWifiSSID+0xd2>
            lcd_cursor(0);
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	f000 fe66 	bl	8007c90 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006fc4:	4865      	ldr	r0, [pc, #404]	; (800715c <takeWifiSSID+0x218>)
 8006fc6:	f7f9 f92d 	bl	8000224 <strlen>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b14      	cmp	r3, #20
 8006fce:	d910      	bls.n	8006ff2 <takeWifiSSID+0xae>
                lcd_clear();
 8006fd0:	f000 fe2c 	bl	8007c2c <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006fd4:	4a65      	ldr	r2, [pc, #404]	; (800716c <takeWifiSSID+0x228>)
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	2001      	movs	r0, #1
 8006fda:	f000 fdfb 	bl	8007bd4 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006fde:	4a64      	ldr	r2, [pc, #400]	; (8007170 <takeWifiSSID+0x22c>)
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	2002      	movs	r0, #2
 8006fe4:	f000 fdf6 	bl	8007bd4 <lcd_print>
                HAL_Delay(1250);
 8006fe8:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8006fec:	f001 fb48 	bl	8008680 <HAL_Delay>
                goto mainSSIDSection;
 8006ff0:	e7ab      	b.n	8006f4a <takeWifiSSID+0x6>
            } else {
            	//memcpy(&eepromData[ssidStartPos], wifiSSIDInt, wifiCharacterLimit); //destination, source, size

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006ff2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006ff6:	9302      	str	r3, [sp, #8]
 8006ff8:	236e      	movs	r3, #110	; 0x6e
 8006ffa:	9301      	str	r3, [sp, #4]
 8006ffc:	4b59      	ldr	r3, [pc, #356]	; (8007164 <takeWifiSSID+0x220>)
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	236e      	movs	r3, #110	; 0x6e
 8007002:	2200      	movs	r2, #0
 8007004:	21a0      	movs	r1, #160	; 0xa0
 8007006:	485b      	ldr	r0, [pc, #364]	; (8007174 <takeWifiSSID+0x230>)
 8007008:	f002 fbc4 	bl	8009794 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 800700c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007010:	f001 fb36 	bl	8008680 <HAL_Delay>

            	break;
 8007014:	e135      	b.n	8007282 <takeWifiSSID+0x33e>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007016:	2101      	movs	r1, #1
 8007018:	4853      	ldr	r0, [pc, #332]	; (8007168 <takeWifiSSID+0x224>)
 800701a:	f002 f901 	bl	8009220 <HAL_GPIO_ReadPin>
 800701e:	4603      	mov	r3, r0
 8007020:	2b01      	cmp	r3, #1
 8007022:	d14d      	bne.n	80070c0 <takeWifiSSID+0x17c>
        	if(cursorPosition > 80) {
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2b50      	cmp	r3, #80	; 0x50
 8007028:	dd01      	ble.n	800702e <takeWifiSSID+0xea>
        		cursorPosition = 1;
 800702a:	2301      	movs	r3, #1
 800702c:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b10      	cmp	r3, #16
 8007032:	d13f      	bne.n	80070b4 <takeWifiSSID+0x170>
            	if(page == 1) {
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d109      	bne.n	800704e <takeWifiSSID+0x10a>
            		cursorPosition = 1;
 800703a:	2301      	movs	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]
            		page++;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	3301      	adds	r3, #1
 8007042:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007044:	2102      	movs	r1, #2
 8007046:	2002      	movs	r0, #2
 8007048:	f7f9 fed8 	bl	8000dfc <printTemplate>
 800704c:	e035      	b.n	80070ba <takeWifiSSID+0x176>
            	} else if(page == 2) {
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b02      	cmp	r3, #2
 8007052:	d109      	bne.n	8007068 <takeWifiSSID+0x124>
            		cursorPosition = 1;
 8007054:	2301      	movs	r3, #1
 8007056:	60fb      	str	r3, [r7, #12]
            		page++;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	3301      	adds	r3, #1
 800705c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800705e:	2103      	movs	r1, #3
 8007060:	2002      	movs	r0, #2
 8007062:	f7f9 fecb 	bl	8000dfc <printTemplate>
 8007066:	e028      	b.n	80070ba <takeWifiSSID+0x176>
            	} else if(page == 3) {
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b03      	cmp	r3, #3
 800706c:	d109      	bne.n	8007082 <takeWifiSSID+0x13e>
            		cursorPosition = 1;
 800706e:	2301      	movs	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]
            		page++;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	3301      	adds	r3, #1
 8007076:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007078:	2104      	movs	r1, #4
 800707a:	2002      	movs	r0, #2
 800707c:	f7f9 febe 	bl	8000dfc <printTemplate>
 8007080:	e01b      	b.n	80070ba <takeWifiSSID+0x176>
            	} else if(page == 4) {
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b04      	cmp	r3, #4
 8007086:	d109      	bne.n	800709c <takeWifiSSID+0x158>
            		cursorPosition = 1;
 8007088:	2301      	movs	r3, #1
 800708a:	60fb      	str	r3, [r7, #12]
            		page++;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	3301      	adds	r3, #1
 8007090:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007092:	2105      	movs	r1, #5
 8007094:	2002      	movs	r0, #2
 8007096:	f7f9 feb1 	bl	8000dfc <printTemplate>
 800709a:	e00e      	b.n	80070ba <takeWifiSSID+0x176>
            	} else if(page == 5) {
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2b05      	cmp	r3, #5
 80070a0:	d10b      	bne.n	80070ba <takeWifiSSID+0x176>
            		cursorPosition = 1;
 80070a2:	2301      	movs	r3, #1
 80070a4:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80070a6:	2301      	movs	r3, #1
 80070a8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80070aa:	2101      	movs	r1, #1
 80070ac:	2002      	movs	r0, #2
 80070ae:	f7f9 fea5 	bl	8000dfc <printTemplate>
 80070b2:	e002      	b.n	80070ba <takeWifiSSID+0x176>
            	}
            } else {
            	cursorPosition++;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3301      	adds	r3, #1
 80070b8:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80070ba:	2096      	movs	r0, #150	; 0x96
 80070bc:	f001 fae0 	bl	8008680 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80070c0:	2108      	movs	r1, #8
 80070c2:	482d      	ldr	r0, [pc, #180]	; (8007178 <takeWifiSSID+0x234>)
 80070c4:	f002 f8ac 	bl	8009220 <HAL_GPIO_ReadPin>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d15c      	bne.n	8007188 <takeWifiSSID+0x244>
        	if(cursorPosition < 1) {
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	dc01      	bgt.n	80070d8 <takeWifiSSID+0x194>
        		cursorPosition = 80;
 80070d4:	2350      	movs	r3, #80	; 0x50
 80070d6:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d14e      	bne.n	800717c <takeWifiSSID+0x238>
            	if(page == 1) {
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d108      	bne.n	80070f6 <takeWifiSSID+0x1b2>
            		cursorPosition = 16;
 80070e4:	2310      	movs	r3, #16
 80070e6:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80070e8:	2305      	movs	r3, #5
 80070ea:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80070ec:	2105      	movs	r1, #5
 80070ee:	2002      	movs	r0, #2
 80070f0:	f7f9 fe84 	bl	8000dfc <printTemplate>
 80070f4:	e045      	b.n	8007182 <takeWifiSSID+0x23e>
            	} else if(page == 2) {
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d108      	bne.n	800710e <takeWifiSSID+0x1ca>
            		cursorPosition = 16;
 80070fc:	2310      	movs	r3, #16
 80070fe:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007100:	2301      	movs	r3, #1
 8007102:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007104:	2101      	movs	r1, #1
 8007106:	2002      	movs	r0, #2
 8007108:	f7f9 fe78 	bl	8000dfc <printTemplate>
 800710c:	e039      	b.n	8007182 <takeWifiSSID+0x23e>
            	} else if(page == 3) {
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2b03      	cmp	r3, #3
 8007112:	d108      	bne.n	8007126 <takeWifiSSID+0x1e2>
            		cursorPosition = 16;
 8007114:	2310      	movs	r3, #16
 8007116:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007118:	2302      	movs	r3, #2
 800711a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800711c:	2102      	movs	r1, #2
 800711e:	2002      	movs	r0, #2
 8007120:	f7f9 fe6c 	bl	8000dfc <printTemplate>
 8007124:	e02d      	b.n	8007182 <takeWifiSSID+0x23e>
            	} else if(page == 4) {
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b04      	cmp	r3, #4
 800712a:	d108      	bne.n	800713e <takeWifiSSID+0x1fa>
            		cursorPosition = 16;
 800712c:	2310      	movs	r3, #16
 800712e:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007130:	2303      	movs	r3, #3
 8007132:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007134:	2103      	movs	r1, #3
 8007136:	2002      	movs	r0, #2
 8007138:	f7f9 fe60 	bl	8000dfc <printTemplate>
 800713c:	e021      	b.n	8007182 <takeWifiSSID+0x23e>
            	} else if(page == 5) {
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b05      	cmp	r3, #5
 8007142:	d11e      	bne.n	8007182 <takeWifiSSID+0x23e>
            		cursorPosition = 16;
 8007144:	2310      	movs	r3, #16
 8007146:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007148:	2304      	movs	r3, #4
 800714a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800714c:	2104      	movs	r1, #4
 800714e:	2002      	movs	r0, #2
 8007150:	f7f9 fe54 	bl	8000dfc <printTemplate>
 8007154:	e015      	b.n	8007182 <takeWifiSSID+0x23e>
 8007156:	bf00      	nop
 8007158:	200001d0 	.word	0x200001d0
 800715c:	2000019c 	.word	0x2000019c
 8007160:	20000008 	.word	0x20000008
 8007164:	20000118 	.word	0x20000118
 8007168:	40010800 	.word	0x40010800
 800716c:	0800db88 	.word	0x0800db88
 8007170:	0800db9c 	.word	0x0800db9c
 8007174:	200003a8 	.word	0x200003a8
 8007178:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3b01      	subs	r3, #1
 8007180:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007182:	2096      	movs	r0, #150	; 0x96
 8007184:	f001 fa7c 	bl	8008680 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007188:	2102      	movs	r1, #2
 800718a:	4840      	ldr	r0, [pc, #256]	; (800728c <takeWifiSSID+0x348>)
 800718c:	f002 f848 	bl	8009220 <HAL_GPIO_ReadPin>
 8007190:	4603      	mov	r3, r0
 8007192:	2b01      	cmp	r3, #1
 8007194:	d12d      	bne.n	80071f2 <takeWifiSSID+0x2ae>
            wifiSSIDInt[arrayPosition] = cursorPosition;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	b2d9      	uxtb	r1, r3
 800719a:	4a3d      	ldr	r2, [pc, #244]	; (8007290 <takeWifiSSID+0x34c>)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4413      	add	r3, r2
 80071a0:	460a      	mov	r2, r1
 80071a2:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	b2d9      	uxtb	r1, r3
 80071a8:	4a3a      	ldr	r2, [pc, #232]	; (8007294 <takeWifiSSID+0x350>)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4413      	add	r3, r2
 80071ae:	460a      	mov	r2, r1
 80071b0:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	b2d9      	uxtb	r1, r3
 80071b6:	4a38      	ldr	r2, [pc, #224]	; (8007298 <takeWifiSSID+0x354>)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4413      	add	r3, r2
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	2001      	movs	r0, #1
 80071c2:	f000 fd1c 	bl	8007bfe <lcd_print_char>

            writeLoc++;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	3301      	adds	r3, #1
 80071ca:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	3301      	adds	r3, #1
 80071d0:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3301      	adds	r3, #1
 80071d6:	607b      	str	r3, [r7, #4]

            wifiSSIDInt[arrayPosition] = '\0';
 80071d8:	4a2d      	ldr	r2, [pc, #180]	; (8007290 <takeWifiSSID+0x34c>)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	4413      	add	r3, r2
 80071de:	2200      	movs	r2, #0
 80071e0:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 80071e2:	4a2c      	ldr	r2, [pc, #176]	; (8007294 <takeWifiSSID+0x350>)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4413      	add	r3, r2
 80071e8:	2200      	movs	r2, #0
 80071ea:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80071ec:	2096      	movs	r0, #150	; 0x96
 80071ee:	f001 fa47 	bl	8008680 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80071f2:	2104      	movs	r1, #4
 80071f4:	4825      	ldr	r0, [pc, #148]	; (800728c <takeWifiSSID+0x348>)
 80071f6:	f002 f813 	bl	8009220 <HAL_GPIO_ReadPin>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d139      	bne.n	8007274 <takeWifiSSID+0x330>
        	if(strlen(wifiSSID) >= 1) {
 8007200:	4b26      	ldr	r3, [pc, #152]	; (800729c <takeWifiSSID+0x358>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d032      	beq.n	800726e <takeWifiSSID+0x32a>
        		wifiSSIDInt[arrayPosition] = '\0';
 8007208:	4a21      	ldr	r2, [pc, #132]	; (8007290 <takeWifiSSID+0x34c>)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	4413      	add	r3, r2
 800720e:	2200      	movs	r2, #0
 8007210:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 8007212:	4a20      	ldr	r2, [pc, #128]	; (8007294 <takeWifiSSID+0x350>)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4413      	add	r3, r2
 8007218:	2200      	movs	r2, #0
 800721a:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2b07      	cmp	r3, #7
 8007220:	dd03      	ble.n	800722a <takeWifiSSID+0x2e6>
        			writeLoc--;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	3b01      	subs	r3, #1
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	e004      	b.n	8007234 <takeWifiSSID+0x2f0>
        		} else if(writeLoc < 7) {
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b06      	cmp	r3, #6
 800722e:	dc01      	bgt.n	8007234 <takeWifiSSID+0x2f0>
        			writeLoc = 7;
 8007230:	2307      	movs	r3, #7
 8007232:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	dd06      	ble.n	8007248 <takeWifiSSID+0x304>
        			arrayPosition--;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	3b01      	subs	r3, #1
 800723e:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3b01      	subs	r3, #1
 8007244:	607b      	str	r3, [r7, #4]
 8007246:	e007      	b.n	8007258 <takeWifiSSID+0x314>
        		} else if(arrayPosition < 0) {
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	da04      	bge.n	8007258 <takeWifiSSID+0x314>
        			arrayPosition = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007252:	4b13      	ldr	r3, [pc, #76]	; (80072a0 <takeWifiSSID+0x35c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	b2db      	uxtb	r3, r3
 800725c:	3306      	adds	r3, #6
 800725e:	b2db      	uxtb	r3, r3
 8007260:	4619      	mov	r1, r3
 8007262:	2001      	movs	r0, #1
 8007264:	f000 fcec 	bl	8007c40 <lcd_delete_char>
        		HAL_Delay(50);
 8007268:	2032      	movs	r0, #50	; 0x32
 800726a:	f001 fa09 	bl	8008680 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800726e:	2096      	movs	r0, #150	; 0x96
 8007270:	f001 fa06 	bl	8008680 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	4619      	mov	r1, r3
 800727a:	2002      	movs	r0, #2
 800727c:	f000 fc8b 	bl	8007b96 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007280:	e696      	b.n	8006fb0 <takeWifiSSID+0x6c>
    }
}
 8007282:	bf00      	nop
 8007284:	3720      	adds	r7, #32
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	40010800 	.word	0x40010800
 8007290:	200001d0 	.word	0x200001d0
 8007294:	20000118 	.word	0x20000118
 8007298:	2000001c 	.word	0x2000001c
 800729c:	2000019c 	.word	0x2000019c
 80072a0:	20000008 	.word	0x20000008

080072a4 <takeWifiPass>:

void takeWifiPass() {
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	; 0x28
 80072a8:	af04      	add	r7, sp, #16
	mainPassSection:

    lcd_cursor(1);
 80072aa:	2001      	movs	r0, #1
 80072ac:	f000 fcf0 	bl	8007c90 <lcd_cursor>

    //resetEEPROM4Wifi(3);
    memset(wifiPassInt, 0, wifiCharacterLimit*sizeof(*wifiPassInt));
 80072b0:	2214      	movs	r2, #20
 80072b2:	2100      	movs	r1, #0
 80072b4:	48a9      	ldr	r0, [pc, #676]	; (800755c <takeWifiPass+0x2b8>)
 80072b6:	f005 f8f7 	bl	800c4a8 <memset>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 80072ba:	2214      	movs	r2, #20
 80072bc:	2100      	movs	r1, #0
 80072be:	48a8      	ldr	r0, [pc, #672]	; (8007560 <takeWifiPass+0x2bc>)
 80072c0:	f005 f8f2 	bl	800c4a8 <memset>
    HAL_Delay(100);
 80072c4:	2064      	movs	r0, #100	; 0x64
 80072c6:	f001 f9db 	bl	8008680 <HAL_Delay>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80072ca:	2301      	movs	r3, #1
 80072cc:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80072ce:	2307      	movs	r3, #7
 80072d0:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80072d2:	2301      	movs	r3, #1
 80072d4:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80072d6:	2300      	movs	r3, #0
 80072d8:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80072da:	4ba2      	ldr	r3, [pc, #648]	; (8007564 <takeWifiPass+0x2c0>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80072e0:	2101      	movs	r1, #1
 80072e2:	2002      	movs	r0, #2
 80072e4:	f7f9 fd8a 	bl	8000dfc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80072e8:	2108      	movs	r1, #8
 80072ea:	489f      	ldr	r0, [pc, #636]	; (8007568 <takeWifiPass+0x2c4>)
 80072ec:	f001 ff98 	bl	8009220 <HAL_GPIO_ReadPin>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d12b      	bne.n	800734e <takeWifiPass+0xaa>
            lcd_cursor(0);
 80072f6:	2000      	movs	r0, #0
 80072f8:	f000 fcca 	bl	8007c90 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 80072fc:	489b      	ldr	r0, [pc, #620]	; (800756c <takeWifiPass+0x2c8>)
 80072fe:	f7f8 ff91 	bl	8000224 <strlen>
 8007302:	4603      	mov	r3, r0
 8007304:	2b14      	cmp	r3, #20
 8007306:	d910      	bls.n	800732a <takeWifiPass+0x86>
                lcd_clear();
 8007308:	f000 fc90 	bl	8007c2c <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 800730c:	4a98      	ldr	r2, [pc, #608]	; (8007570 <takeWifiPass+0x2cc>)
 800730e:	2101      	movs	r1, #1
 8007310:	2001      	movs	r0, #1
 8007312:	f000 fc5f 	bl	8007bd4 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007316:	4a97      	ldr	r2, [pc, #604]	; (8007574 <takeWifiPass+0x2d0>)
 8007318:	2101      	movs	r1, #1
 800731a:	2002      	movs	r0, #2
 800731c:	f000 fc5a 	bl	8007bd4 <lcd_print>
                HAL_Delay(1250);
 8007320:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8007324:	f001 f9ac 	bl	8008680 <HAL_Delay>
                goto mainPassSection;
 8007328:	e7bf      	b.n	80072aa <takeWifiPass+0x6>
            } else {
            	//memcpy(&eepromData[passStartPos], wifiPassInt, wifiCharacterLimit); //destination, source, size
            	//HAL_Delay(100);

            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800732a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800732e:	9302      	str	r3, [sp, #8]
 8007330:	236e      	movs	r3, #110	; 0x6e
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	4b90      	ldr	r3, [pc, #576]	; (8007578 <takeWifiPass+0x2d4>)
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	236e      	movs	r3, #110	; 0x6e
 800733a:	2200      	movs	r2, #0
 800733c:	21a0      	movs	r1, #160	; 0xa0
 800733e:	488f      	ldr	r0, [pc, #572]	; (800757c <takeWifiPass+0x2d8>)
 8007340:	f002 fa28 	bl	8009794 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007344:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007348:	f001 f99a 	bl	8008680 <HAL_Delay>

            	break;
 800734c:	e139      	b.n	80075c2 <takeWifiPass+0x31e>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800734e:	2101      	movs	r1, #1
 8007350:	4885      	ldr	r0, [pc, #532]	; (8007568 <takeWifiPass+0x2c4>)
 8007352:	f001 ff65 	bl	8009220 <HAL_GPIO_ReadPin>
 8007356:	4603      	mov	r3, r0
 8007358:	2b01      	cmp	r3, #1
 800735a:	d14d      	bne.n	80073f8 <takeWifiPass+0x154>
        	if(cursorPosition > 80) {
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b50      	cmp	r3, #80	; 0x50
 8007360:	dd01      	ble.n	8007366 <takeWifiPass+0xc2>
        		cursorPosition = 1;
 8007362:	2301      	movs	r3, #1
 8007364:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b10      	cmp	r3, #16
 800736a:	d13f      	bne.n	80073ec <takeWifiPass+0x148>
            	if(page == 1) {
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d109      	bne.n	8007386 <takeWifiPass+0xe2>
            		cursorPosition = 1;
 8007372:	2301      	movs	r3, #1
 8007374:	60fb      	str	r3, [r7, #12]
            		page++;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	3301      	adds	r3, #1
 800737a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800737c:	2102      	movs	r1, #2
 800737e:	2002      	movs	r0, #2
 8007380:	f7f9 fd3c 	bl	8000dfc <printTemplate>
 8007384:	e035      	b.n	80073f2 <takeWifiPass+0x14e>
            	} else if(page == 2) {
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b02      	cmp	r3, #2
 800738a:	d109      	bne.n	80073a0 <takeWifiPass+0xfc>
            		cursorPosition = 1;
 800738c:	2301      	movs	r3, #1
 800738e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	3301      	adds	r3, #1
 8007394:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007396:	2103      	movs	r1, #3
 8007398:	2002      	movs	r0, #2
 800739a:	f7f9 fd2f 	bl	8000dfc <printTemplate>
 800739e:	e028      	b.n	80073f2 <takeWifiPass+0x14e>
            	} else if(page == 3) {
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d109      	bne.n	80073ba <takeWifiPass+0x116>
            		cursorPosition = 1;
 80073a6:	2301      	movs	r3, #1
 80073a8:	60fb      	str	r3, [r7, #12]
            		page++;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	3301      	adds	r3, #1
 80073ae:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 80073b0:	2104      	movs	r1, #4
 80073b2:	2002      	movs	r0, #2
 80073b4:	f7f9 fd22 	bl	8000dfc <printTemplate>
 80073b8:	e01b      	b.n	80073f2 <takeWifiPass+0x14e>
            	} else if(page == 4) {
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2b04      	cmp	r3, #4
 80073be:	d109      	bne.n	80073d4 <takeWifiPass+0x130>
            		cursorPosition = 1;
 80073c0:	2301      	movs	r3, #1
 80073c2:	60fb      	str	r3, [r7, #12]
            		page++;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	3301      	adds	r3, #1
 80073c8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80073ca:	2105      	movs	r1, #5
 80073cc:	2002      	movs	r0, #2
 80073ce:	f7f9 fd15 	bl	8000dfc <printTemplate>
 80073d2:	e00e      	b.n	80073f2 <takeWifiPass+0x14e>
            	} else if(page == 5) {
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b05      	cmp	r3, #5
 80073d8:	d10b      	bne.n	80073f2 <takeWifiPass+0x14e>
            		cursorPosition = 1;
 80073da:	2301      	movs	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80073de:	2301      	movs	r3, #1
 80073e0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80073e2:	2101      	movs	r1, #1
 80073e4:	2002      	movs	r0, #2
 80073e6:	f7f9 fd09 	bl	8000dfc <printTemplate>
 80073ea:	e002      	b.n	80073f2 <takeWifiPass+0x14e>
            	}
            } else {
            	cursorPosition++;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	3301      	adds	r3, #1
 80073f0:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80073f2:	2096      	movs	r0, #150	; 0x96
 80073f4:	f001 f944 	bl	8008680 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80073f8:	2108      	movs	r1, #8
 80073fa:	4861      	ldr	r0, [pc, #388]	; (8007580 <takeWifiPass+0x2dc>)
 80073fc:	f001 ff10 	bl	8009220 <HAL_GPIO_ReadPin>
 8007400:	4603      	mov	r3, r0
 8007402:	2b01      	cmp	r3, #1
 8007404:	d149      	bne.n	800749a <takeWifiPass+0x1f6>
        	if(cursorPosition < 1) {
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	dc01      	bgt.n	8007410 <takeWifiPass+0x16c>
        		cursorPosition = 80;
 800740c:	2350      	movs	r3, #80	; 0x50
 800740e:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d13b      	bne.n	800748e <takeWifiPass+0x1ea>
            	if(page == 1) {
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d108      	bne.n	800742e <takeWifiPass+0x18a>
            		cursorPosition = 16;
 800741c:	2310      	movs	r3, #16
 800741e:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007420:	2305      	movs	r3, #5
 8007422:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007424:	2105      	movs	r1, #5
 8007426:	2002      	movs	r0, #2
 8007428:	f7f9 fce8 	bl	8000dfc <printTemplate>
 800742c:	e032      	b.n	8007494 <takeWifiPass+0x1f0>
            	} else if(page == 2) {
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b02      	cmp	r3, #2
 8007432:	d108      	bne.n	8007446 <takeWifiPass+0x1a2>
            		cursorPosition = 16;
 8007434:	2310      	movs	r3, #16
 8007436:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007438:	2301      	movs	r3, #1
 800743a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800743c:	2101      	movs	r1, #1
 800743e:	2002      	movs	r0, #2
 8007440:	f7f9 fcdc 	bl	8000dfc <printTemplate>
 8007444:	e026      	b.n	8007494 <takeWifiPass+0x1f0>
            	} else if(page == 3) {
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b03      	cmp	r3, #3
 800744a:	d108      	bne.n	800745e <takeWifiPass+0x1ba>
            		cursorPosition = 16;
 800744c:	2310      	movs	r3, #16
 800744e:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007450:	2302      	movs	r3, #2
 8007452:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007454:	2102      	movs	r1, #2
 8007456:	2002      	movs	r0, #2
 8007458:	f7f9 fcd0 	bl	8000dfc <printTemplate>
 800745c:	e01a      	b.n	8007494 <takeWifiPass+0x1f0>
            	} else if(page == 4) {
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2b04      	cmp	r3, #4
 8007462:	d108      	bne.n	8007476 <takeWifiPass+0x1d2>
            		cursorPosition = 16;
 8007464:	2310      	movs	r3, #16
 8007466:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007468:	2303      	movs	r3, #3
 800746a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800746c:	2103      	movs	r1, #3
 800746e:	2002      	movs	r0, #2
 8007470:	f7f9 fcc4 	bl	8000dfc <printTemplate>
 8007474:	e00e      	b.n	8007494 <takeWifiPass+0x1f0>
            	} else if(page == 5) {
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2b05      	cmp	r3, #5
 800747a:	d10b      	bne.n	8007494 <takeWifiPass+0x1f0>
            		cursorPosition = 16;
 800747c:	2310      	movs	r3, #16
 800747e:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007480:	2304      	movs	r3, #4
 8007482:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007484:	2104      	movs	r1, #4
 8007486:	2002      	movs	r0, #2
 8007488:	f7f9 fcb8 	bl	8000dfc <printTemplate>
 800748c:	e002      	b.n	8007494 <takeWifiPass+0x1f0>
            	}
            } else {
            	cursorPosition--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3b01      	subs	r3, #1
 8007492:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007494:	2096      	movs	r0, #150	; 0x96
 8007496:	f001 f8f3 	bl	8008680 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800749a:	2102      	movs	r1, #2
 800749c:	4832      	ldr	r0, [pc, #200]	; (8007568 <takeWifiPass+0x2c4>)
 800749e:	f001 febf 	bl	8009220 <HAL_GPIO_ReadPin>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d12d      	bne.n	8007504 <takeWifiPass+0x260>
            wifiPassInt[arrayPosition] = cursorPosition;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	b2d9      	uxtb	r1, r3
 80074ac:	4a2b      	ldr	r2, [pc, #172]	; (800755c <takeWifiPass+0x2b8>)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	4413      	add	r3, r2
 80074b2:	460a      	mov	r2, r1
 80074b4:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = cursorPosition;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	b2d9      	uxtb	r1, r3
 80074ba:	4a2f      	ldr	r2, [pc, #188]	; (8007578 <takeWifiPass+0x2d4>)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4413      	add	r3, r2
 80074c0:	460a      	mov	r2, r1
 80074c2:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	b2d9      	uxtb	r1, r3
 80074c8:	4a2e      	ldr	r2, [pc, #184]	; (8007584 <takeWifiPass+0x2e0>)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4413      	add	r3, r2
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	461a      	mov	r2, r3
 80074d2:	2001      	movs	r0, #1
 80074d4:	f000 fb93 	bl	8007bfe <lcd_print_char>

            writeLoc++;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	3301      	adds	r3, #1
 80074dc:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	3301      	adds	r3, #1
 80074e2:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3301      	adds	r3, #1
 80074e8:	607b      	str	r3, [r7, #4]

            wifiPassInt[arrayPosition] = '\0';
 80074ea:	4a1c      	ldr	r2, [pc, #112]	; (800755c <takeWifiPass+0x2b8>)
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	4413      	add	r3, r2
 80074f0:	2200      	movs	r2, #0
 80074f2:	701a      	strb	r2, [r3, #0]
            eepromData[eepromVal] = '\0';
 80074f4:	4a20      	ldr	r2, [pc, #128]	; (8007578 <takeWifiPass+0x2d4>)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4413      	add	r3, r2
 80074fa:	2200      	movs	r2, #0
 80074fc:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80074fe:	2096      	movs	r0, #150	; 0x96
 8007500:	f001 f8be 	bl	8008680 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007504:	2104      	movs	r1, #4
 8007506:	4818      	ldr	r0, [pc, #96]	; (8007568 <takeWifiPass+0x2c4>)
 8007508:	f001 fe8a 	bl	8009220 <HAL_GPIO_ReadPin>
 800750c:	4603      	mov	r3, r0
 800750e:	2b01      	cmp	r3, #1
 8007510:	d150      	bne.n	80075b4 <takeWifiPass+0x310>
        	if(strlen(wifiSSID) >= 1) {
 8007512:	4b16      	ldr	r3, [pc, #88]	; (800756c <takeWifiPass+0x2c8>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d049      	beq.n	80075ae <takeWifiPass+0x30a>
        		wifiPassInt[arrayPosition] = '\0';
 800751a:	4a10      	ldr	r2, [pc, #64]	; (800755c <takeWifiPass+0x2b8>)
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	4413      	add	r3, r2
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = '\0';
 8007524:	4a14      	ldr	r2, [pc, #80]	; (8007578 <takeWifiPass+0x2d4>)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4413      	add	r3, r2
 800752a:	2200      	movs	r2, #0
 800752c:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	2b07      	cmp	r3, #7
 8007532:	dd03      	ble.n	800753c <takeWifiPass+0x298>
        			writeLoc--;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	3b01      	subs	r3, #1
 8007538:	613b      	str	r3, [r7, #16]
 800753a:	e004      	b.n	8007546 <takeWifiPass+0x2a2>
        		} else if(writeLoc < 7) {
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	2b06      	cmp	r3, #6
 8007540:	dc01      	bgt.n	8007546 <takeWifiPass+0x2a2>
        			writeLoc = 7;
 8007542:	2307      	movs	r3, #7
 8007544:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	dd1d      	ble.n	8007588 <takeWifiPass+0x2e4>
        			arrayPosition--;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	3b01      	subs	r3, #1
 8007550:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	3b01      	subs	r3, #1
 8007556:	607b      	str	r3, [r7, #4]
 8007558:	e01e      	b.n	8007598 <takeWifiPass+0x2f4>
 800755a:	bf00      	nop
 800755c:	200001e4 	.word	0x200001e4
 8007560:	200001b0 	.word	0x200001b0
 8007564:	2000000c 	.word	0x2000000c
 8007568:	40010800 	.word	0x40010800
 800756c:	2000019c 	.word	0x2000019c
 8007570:	0800db88 	.word	0x0800db88
 8007574:	0800db9c 	.word	0x0800db9c
 8007578:	20000118 	.word	0x20000118
 800757c:	200003a8 	.word	0x200003a8
 8007580:	40011000 	.word	0x40011000
 8007584:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	da04      	bge.n	8007598 <takeWifiPass+0x2f4>
        			arrayPosition = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8007592:	4b0e      	ldr	r3, [pc, #56]	; (80075cc <takeWifiPass+0x328>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	b2db      	uxtb	r3, r3
 800759c:	3306      	adds	r3, #6
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	4619      	mov	r1, r3
 80075a2:	2001      	movs	r0, #1
 80075a4:	f000 fb4c 	bl	8007c40 <lcd_delete_char>
        		HAL_Delay(50);
 80075a8:	2032      	movs	r0, #50	; 0x32
 80075aa:	f001 f869 	bl	8008680 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80075ae:	2096      	movs	r0, #150	; 0x96
 80075b0:	f001 f866 	bl	8008680 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	4619      	mov	r1, r3
 80075ba:	2002      	movs	r0, #2
 80075bc:	f000 faeb 	bl	8007b96 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80075c0:	e692      	b.n	80072e8 <takeWifiPass+0x44>
    }
}
 80075c2:	bf00      	nop
 80075c4:	3718      	adds	r7, #24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	2000000c 	.word	0x2000000c

080075d0 <mergeData>:

char* mergeData() {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b09c      	sub	sp, #112	; 0x70
 80075d4:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 80075d6:	2300      	movs	r3, #0
 80075d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80075de:	2228      	movs	r2, #40	; 0x28
 80075e0:	2100      	movs	r1, #0
 80075e2:	4618      	mov	r0, r3
 80075e4:	f004 ff60 	bl	800c4a8 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80075e8:	4b67      	ldr	r3, [pc, #412]	; (8007788 <mergeData+0x1b8>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	713b      	strb	r3, [r7, #4]
 80075ee:	4b67      	ldr	r3, [pc, #412]	; (800778c <mergeData+0x1bc>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	717b      	strb	r3, [r7, #5]
 80075f4:	4b66      	ldr	r3, [pc, #408]	; (8007790 <mergeData+0x1c0>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	71bb      	strb	r3, [r7, #6]
 80075fa:	4b66      	ldr	r3, [pc, #408]	; (8007794 <mergeData+0x1c4>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	71fb      	strb	r3, [r7, #7]
 8007600:	4b65      	ldr	r3, [pc, #404]	; (8007798 <mergeData+0x1c8>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	723b      	strb	r3, [r7, #8]
 8007606:	4b65      	ldr	r3, [pc, #404]	; (800779c <mergeData+0x1cc>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	727b      	strb	r3, [r7, #9]
 800760c:	4b64      	ldr	r3, [pc, #400]	; (80077a0 <mergeData+0x1d0>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	72bb      	strb	r3, [r7, #10]
 8007612:	4b64      	ldr	r3, [pc, #400]	; (80077a4 <mergeData+0x1d4>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	72fb      	strb	r3, [r7, #11]
 8007618:	4b63      	ldr	r3, [pc, #396]	; (80077a8 <mergeData+0x1d8>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	733b      	strb	r3, [r7, #12]
 800761e:	4b63      	ldr	r3, [pc, #396]	; (80077ac <mergeData+0x1dc>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	737b      	strb	r3, [r7, #13]
 8007624:	4b62      	ldr	r3, [pc, #392]	; (80077b0 <mergeData+0x1e0>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	73bb      	strb	r3, [r7, #14]
 800762a:	4b62      	ldr	r3, [pc, #392]	; (80077b4 <mergeData+0x1e4>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	73fb      	strb	r3, [r7, #15]
 8007630:	4b61      	ldr	r3, [pc, #388]	; (80077b8 <mergeData+0x1e8>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	743b      	strb	r3, [r7, #16]
 8007636:	4b61      	ldr	r3, [pc, #388]	; (80077bc <mergeData+0x1ec>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	747b      	strb	r3, [r7, #17]
 800763c:	4b60      	ldr	r3, [pc, #384]	; (80077c0 <mergeData+0x1f0>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	74bb      	strb	r3, [r7, #18]
 8007642:	4b60      	ldr	r3, [pc, #384]	; (80077c4 <mergeData+0x1f4>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	74fb      	strb	r3, [r7, #19]
 8007648:	4b5f      	ldr	r3, [pc, #380]	; (80077c8 <mergeData+0x1f8>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	753b      	strb	r3, [r7, #20]
 800764e:	4b5f      	ldr	r3, [pc, #380]	; (80077cc <mergeData+0x1fc>)
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	757b      	strb	r3, [r7, #21]
 8007654:	4b5e      	ldr	r3, [pc, #376]	; (80077d0 <mergeData+0x200>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	75bb      	strb	r3, [r7, #22]
 800765a:	4b5e      	ldr	r3, [pc, #376]	; (80077d4 <mergeData+0x204>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	75fb      	strb	r3, [r7, #23]
 8007660:	4b5d      	ldr	r3, [pc, #372]	; (80077d8 <mergeData+0x208>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	763b      	strb	r3, [r7, #24]
 8007666:	4b5d      	ldr	r3, [pc, #372]	; (80077dc <mergeData+0x20c>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	767b      	strb	r3, [r7, #25]
 800766c:	4b5c      	ldr	r3, [pc, #368]	; (80077e0 <mergeData+0x210>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	76bb      	strb	r3, [r7, #26]
 8007672:	4b5c      	ldr	r3, [pc, #368]	; (80077e4 <mergeData+0x214>)
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	76fb      	strb	r3, [r7, #27]
 8007678:	4b5b      	ldr	r3, [pc, #364]	; (80077e8 <mergeData+0x218>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	773b      	strb	r3, [r7, #28]
 800767e:	4b5b      	ldr	r3, [pc, #364]	; (80077ec <mergeData+0x21c>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	777b      	strb	r3, [r7, #29]
 8007684:	4b5a      	ldr	r3, [pc, #360]	; (80077f0 <mergeData+0x220>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	77bb      	strb	r3, [r7, #30]
 800768a:	4b5a      	ldr	r3, [pc, #360]	; (80077f4 <mergeData+0x224>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	77fb      	strb	r3, [r7, #31]
 8007690:	4b59      	ldr	r3, [pc, #356]	; (80077f8 <mergeData+0x228>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	f887 3020 	strb.w	r3, [r7, #32]
 8007698:	4b58      	ldr	r3, [pc, #352]	; (80077fc <mergeData+0x22c>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80076a0:	4b57      	ldr	r3, [pc, #348]	; (8007800 <mergeData+0x230>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076a8:	4b56      	ldr	r3, [pc, #344]	; (8007804 <mergeData+0x234>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076b0:	4b55      	ldr	r3, [pc, #340]	; (8007808 <mergeData+0x238>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80076b8:	4b54      	ldr	r3, [pc, #336]	; (800780c <mergeData+0x23c>)
 80076ba:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80076be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 80076c2:	4b52      	ldr	r3, [pc, #328]	; (800780c <mergeData+0x23c>)
 80076c4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80076c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 80076cc:	4b4f      	ldr	r3, [pc, #316]	; (800780c <mergeData+0x23c>)
 80076ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80076d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 80076d6:	4b4d      	ldr	r3, [pc, #308]	; (800780c <mergeData+0x23c>)
 80076d8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80076dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 80076e0:	4b4a      	ldr	r3, [pc, #296]	; (800780c <mergeData+0x23c>)
 80076e2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80076e6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 80076ea:	4b48      	ldr	r3, [pc, #288]	; (800780c <mergeData+0x23c>)
 80076ec:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80076f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 80076f4:	4b45      	ldr	r3, [pc, #276]	; (800780c <mergeData+0x23c>)
 80076f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80076fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 80076fe:	4b43      	ldr	r3, [pc, #268]	; (800780c <mergeData+0x23c>)
 8007700:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007704:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007708:	4b40      	ldr	r3, [pc, #256]	; (800780c <mergeData+0x23c>)
 800770a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800770e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007712:	4b3e      	ldr	r3, [pc, #248]	; (800780c <mergeData+0x23c>)
 8007714:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007718:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800771c:	2306      	movs	r3, #6
 800771e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007722:	2300      	movs	r3, #0
 8007724:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007726:	e015      	b.n	8007754 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007728:	1d3a      	adds	r2, r7, #4
 800772a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800772c:	4413      	add	r3, r2
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	461a      	mov	r2, r3
 8007732:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007736:	4936      	ldr	r1, [pc, #216]	; (8007810 <mergeData+0x240>)
 8007738:	4618      	mov	r0, r3
 800773a:	f004 fe95 	bl	800c468 <siprintf>
	    strcat(combinedString, temp);
 800773e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007742:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007746:	4611      	mov	r1, r2
 8007748:	4618      	mov	r0, r3
 800774a:	f004 feb5 	bl	800c4b8 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800774e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007750:	3301      	adds	r3, #1
 8007752:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007756:	2b2b      	cmp	r3, #43	; 0x2b
 8007758:	d9e6      	bls.n	8007728 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800775a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800775e:	4618      	mov	r0, r3
 8007760:	f7f8 fd60 	bl	8000224 <strlen>
 8007764:	4603      	mov	r3, r0
 8007766:	3301      	adds	r3, #1
 8007768:	4618      	mov	r0, r3
 800776a:	f004 fd87 	bl	800c27c <malloc>
 800776e:	4603      	mov	r3, r0
 8007770:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 8007772:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007776:	4619      	mov	r1, r3
 8007778:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800777a:	f004 fee9 	bl	800c550 <strcpy>
	return result;
 800777e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8007780:	4618      	mov	r0, r3
 8007782:	3770      	adds	r7, #112	; 0x70
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	2000022f 	.word	0x2000022f
 800778c:	20000221 	.word	0x20000221
 8007790:	20000224 	.word	0x20000224
 8007794:	20000225 	.word	0x20000225
 8007798:	20000226 	.word	0x20000226
 800779c:	2000022d 	.word	0x2000022d
 80077a0:	20000227 	.word	0x20000227
 80077a4:	20000228 	.word	0x20000228
 80077a8:	2000022c 	.word	0x2000022c
 80077ac:	20000229 	.word	0x20000229
 80077b0:	20000239 	.word	0x20000239
 80077b4:	2000022a 	.word	0x2000022a
 80077b8:	2000023a 	.word	0x2000023a
 80077bc:	2000022b 	.word	0x2000022b
 80077c0:	2000023b 	.word	0x2000023b
 80077c4:	2000022e 	.word	0x2000022e
 80077c8:	20000230 	.word	0x20000230
 80077cc:	20000231 	.word	0x20000231
 80077d0:	20000232 	.word	0x20000232
 80077d4:	20000233 	.word	0x20000233
 80077d8:	20000234 	.word	0x20000234
 80077dc:	20000235 	.word	0x20000235
 80077e0:	20000236 	.word	0x20000236
 80077e4:	20000237 	.word	0x20000237
 80077e8:	20000238 	.word	0x20000238
 80077ec:	2000023c 	.word	0x2000023c
 80077f0:	2000023e 	.word	0x2000023e
 80077f4:	2000021d 	.word	0x2000021d
 80077f8:	2000021e 	.word	0x2000021e
 80077fc:	20000000 	.word	0x20000000
 8007800:	20000001 	.word	0x20000001
 8007804:	2000021f 	.word	0x2000021f
 8007808:	20000241 	.word	0x20000241
 800780c:	20000118 	.word	0x20000118
 8007810:	0800dbb0 	.word	0x0800dbb0

08007814 <convertAndSendData>:

void convertAndSendData() {
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af02      	add	r7, sp, #8
	if(dilSecim == 0) {
 800781a:	4b16      	ldr	r3, [pc, #88]	; (8007874 <convertAndSendData+0x60>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007822:	4a15      	ldr	r2, [pc, #84]	; (8007878 <convertAndSendData+0x64>)
 8007824:	2101      	movs	r1, #1
 8007826:	2001      	movs	r0, #1
 8007828:	f000 f9d4 	bl	8007bd4 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 800782c:	4a13      	ldr	r2, [pc, #76]	; (800787c <convertAndSendData+0x68>)
 800782e:	2101      	movs	r1, #1
 8007830:	2002      	movs	r0, #2
 8007832:	f000 f9cf 	bl	8007bd4 <lcd_print>
 8007836:	e009      	b.n	800784c <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 8007838:	4a11      	ldr	r2, [pc, #68]	; (8007880 <convertAndSendData+0x6c>)
 800783a:	2101      	movs	r1, #1
 800783c:	2001      	movs	r0, #1
 800783e:	f000 f9c9 	bl	8007bd4 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007842:	4a10      	ldr	r2, [pc, #64]	; (8007884 <convertAndSendData+0x70>)
 8007844:	2101      	movs	r1, #1
 8007846:	2002      	movs	r0, #2
 8007848:	f000 f9c4 	bl	8007bd4 <lcd_print>
	}

	sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 800784c:	f7ff fec0 	bl	80075d0 <mergeData>
 8007850:	4603      	mov	r3, r0
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <convertAndSendData+0x74>)
 8007856:	4a0d      	ldr	r2, [pc, #52]	; (800788c <convertAndSendData+0x78>)
 8007858:	490d      	ldr	r1, [pc, #52]	; (8007890 <convertAndSendData+0x7c>)
 800785a:	480e      	ldr	r0, [pc, #56]	; (8007894 <convertAndSendData+0x80>)
 800785c:	f7f9 f832 	bl	80008c4 <sendMachineData>

	HAL_Delay(500);
 8007860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007864:	f000 ff0c 	bl	8008680 <HAL_Delay>
	lcd_clear();
 8007868:	f000 f9e0 	bl	8007c2c <lcd_clear>
}
 800786c:	bf00      	nop
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	20000241 	.word	0x20000241
 8007878:	0800dbb4 	.word	0x0800dbb4
 800787c:	0800dbc8 	.word	0x0800dbc8
 8007880:	0800dbdc 	.word	0x0800dbdc
 8007884:	0800dbf0 	.word	0x0800dbf0
 8007888:	200001b0 	.word	0x200001b0
 800788c:	2000019c 	.word	0x2000019c
 8007890:	20000190 	.word	0x20000190
 8007894:	20000444 	.word	0x20000444

08007898 <iotSetup>:

void iotSetup() {
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
	HAL_Delay(500);
	convertAndSendData();*/
}
 800789c:	bf00      	nop
 800789e:	46bd      	mov	sp, r7
 80078a0:	bc80      	pop	{r7}
 80078a2:	4770      	bx	lr

080078a4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	4603      	mov	r3, r0
 80078ac:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80078ae:	79fb      	ldrb	r3, [r7, #7]
 80078b0:	f023 030f 	bic.w	r3, r3, #15
 80078b4:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80078bc:	7b7b      	ldrb	r3, [r7, #13]
 80078be:	f043 030c 	orr.w	r3, r3, #12
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80078c6:	7b7b      	ldrb	r3, [r7, #13]
 80078c8:	f043 0308 	orr.w	r3, r3, #8
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80078d0:	7b3b      	ldrb	r3, [r7, #12]
 80078d2:	f043 030c 	orr.w	r3, r3, #12
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80078da:	7b3b      	ldrb	r3, [r7, #12]
 80078dc:	f043 0308 	orr.w	r3, r3, #8
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80078e4:	bf00      	nop
 80078e6:	4825      	ldr	r0, [pc, #148]	; (800797c <lcd_send_cmd+0xd8>)
 80078e8:	f002 fac3 	bl	8009e72 <HAL_I2C_GetError>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d0f9      	beq.n	80078e6 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80078f2:	bf00      	nop
 80078f4:	4821      	ldr	r0, [pc, #132]	; (800797c <lcd_send_cmd+0xd8>)
 80078f6:	f002 faaf 	bl	8009e58 <HAL_I2C_GetState>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	d1f9      	bne.n	80078f4 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007900:	4b1f      	ldr	r3, [pc, #124]	; (8007980 <lcd_send_cmd+0xdc>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d116      	bne.n	8007936 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
 800790c:	e00f      	b.n	800792e <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	3310      	adds	r3, #16
 8007912:	443b      	add	r3, r7
 8007914:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	f022 0208 	bic.w	r2, r2, #8
 800791e:	b2d2      	uxtb	r2, r2
 8007920:	3310      	adds	r3, #16
 8007922:	443b      	add	r3, r7
 8007924:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	3301      	adds	r3, #1
 800792c:	73fb      	strb	r3, [r7, #15]
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	2b03      	cmp	r3, #3
 8007932:	d9ec      	bls.n	800790e <lcd_send_cmd+0x6a>
 8007934:	e015      	b.n	8007962 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007936:	2300      	movs	r3, #0
 8007938:	73bb      	strb	r3, [r7, #14]
 800793a:	e00f      	b.n	800795c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	3310      	adds	r3, #16
 8007940:	443b      	add	r3, r7
 8007942:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	f042 0208 	orr.w	r2, r2, #8
 800794c:	b2d2      	uxtb	r2, r2
 800794e:	3310      	adds	r3, #16
 8007950:	443b      	add	r3, r7
 8007952:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	3301      	adds	r3, #1
 800795a:	73bb      	strb	r3, [r7, #14]
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	2b03      	cmp	r3, #3
 8007960:	d9ec      	bls.n	800793c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007962:	f107 0208 	add.w	r2, r7, #8
 8007966:	2364      	movs	r3, #100	; 0x64
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	2304      	movs	r3, #4
 800796c:	214e      	movs	r1, #78	; 0x4e
 800796e:	4803      	ldr	r0, [pc, #12]	; (800797c <lcd_send_cmd+0xd8>)
 8007970:	f001 fe12 	bl	8009598 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007974:	bf00      	nop
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	200003a8 	.word	0x200003a8
 8007980:	2000037e 	.word	0x2000037e

08007984 <lcd_send_data>:

void lcd_send_data (char data) {
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af02      	add	r7, sp, #8
 800798a:	4603      	mov	r3, r0
 800798c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800798e:	79fb      	ldrb	r3, [r7, #7]
 8007990:	f023 030f 	bic.w	r3, r3, #15
 8007994:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	011b      	lsls	r3, r3, #4
 800799a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800799c:	7b7b      	ldrb	r3, [r7, #13]
 800799e:	f043 030d 	orr.w	r3, r3, #13
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80079a6:	7b7b      	ldrb	r3, [r7, #13]
 80079a8:	f043 0309 	orr.w	r3, r3, #9
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80079b0:	7b3b      	ldrb	r3, [r7, #12]
 80079b2:	f043 030d 	orr.w	r3, r3, #13
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80079ba:	7b3b      	ldrb	r3, [r7, #12]
 80079bc:	f043 0309 	orr.w	r3, r3, #9
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80079c4:	bf00      	nop
 80079c6:	4825      	ldr	r0, [pc, #148]	; (8007a5c <lcd_send_data+0xd8>)
 80079c8:	f002 fa53 	bl	8009e72 <HAL_I2C_GetError>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d0f9      	beq.n	80079c6 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80079d2:	bf00      	nop
 80079d4:	4821      	ldr	r0, [pc, #132]	; (8007a5c <lcd_send_data+0xd8>)
 80079d6:	f002 fa3f 	bl	8009e58 <HAL_I2C_GetState>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b20      	cmp	r3, #32
 80079de:	d1f9      	bne.n	80079d4 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80079e0:	4b1f      	ldr	r3, [pc, #124]	; (8007a60 <lcd_send_data+0xdc>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d116      	bne.n	8007a16 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
 80079ec:	e00f      	b.n	8007a0e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	3310      	adds	r3, #16
 80079f2:	443b      	add	r3, r7
 80079f4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
 80079fa:	f022 0208 	bic.w	r2, r2, #8
 80079fe:	b2d2      	uxtb	r2, r2
 8007a00:	3310      	adds	r3, #16
 8007a02:	443b      	add	r3, r7
 8007a04:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	73fb      	strb	r3, [r7, #15]
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d9ec      	bls.n	80079ee <lcd_send_data+0x6a>
 8007a14:	e015      	b.n	8007a42 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007a16:	2300      	movs	r3, #0
 8007a18:	73bb      	strb	r3, [r7, #14]
 8007a1a:	e00f      	b.n	8007a3c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	3310      	adds	r3, #16
 8007a20:	443b      	add	r3, r7
 8007a22:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	f042 0208 	orr.w	r2, r2, #8
 8007a2c:	b2d2      	uxtb	r2, r2
 8007a2e:	3310      	adds	r3, #16
 8007a30:	443b      	add	r3, r7
 8007a32:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	73bb      	strb	r3, [r7, #14]
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d9ec      	bls.n	8007a1c <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007a42:	f107 0208 	add.w	r2, r7, #8
 8007a46:	2364      	movs	r3, #100	; 0x64
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	2304      	movs	r3, #4
 8007a4c:	214e      	movs	r1, #78	; 0x4e
 8007a4e:	4803      	ldr	r0, [pc, #12]	; (8007a5c <lcd_send_data+0xd8>)
 8007a50:	f001 fda2 	bl	8009598 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007a54:	bf00      	nop
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	200003a8 	.word	0x200003a8
 8007a60:	2000037e 	.word	0x2000037e

08007a64 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007a6c:	e006      	b.n	8007a7c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff ff84 	bl	8007984 <lcd_send_data>
	while (*str) {
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1f4      	bne.n	8007a6e <lcd_send_string+0xa>
	}
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	4603      	mov	r3, r0
 8007a98:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	f023 030f 	bic.w	r3, r3, #15
 8007aa0:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007aa8:	7b7b      	ldrb	r3, [r7, #13]
 8007aaa:	f043 030d 	orr.w	r3, r3, #13
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007ab2:	7b7b      	ldrb	r3, [r7, #13]
 8007ab4:	f043 0309 	orr.w	r3, r3, #9
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007abc:	7b3b      	ldrb	r3, [r7, #12]
 8007abe:	f043 030d 	orr.w	r3, r3, #13
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007ac6:	7b3b      	ldrb	r3, [r7, #12]
 8007ac8:	f043 0309 	orr.w	r3, r3, #9
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ad0:	bf00      	nop
 8007ad2:	4825      	ldr	r0, [pc, #148]	; (8007b68 <lcd_send_char+0xd8>)
 8007ad4:	f002 f9cd 	bl	8009e72 <HAL_I2C_GetError>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b04      	cmp	r3, #4
 8007adc:	d0f9      	beq.n	8007ad2 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ade:	bf00      	nop
 8007ae0:	4821      	ldr	r0, [pc, #132]	; (8007b68 <lcd_send_char+0xd8>)
 8007ae2:	f002 f9b9 	bl	8009e58 <HAL_I2C_GetState>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b20      	cmp	r3, #32
 8007aea:	d1f9      	bne.n	8007ae0 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007aec:	4b1f      	ldr	r3, [pc, #124]	; (8007b6c <lcd_send_char+0xdc>)
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d116      	bne.n	8007b22 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007af4:	2300      	movs	r3, #0
 8007af6:	73fb      	strb	r3, [r7, #15]
 8007af8:	e00f      	b.n	8007b1a <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	3310      	adds	r3, #16
 8007afe:	443b      	add	r3, r7
 8007b00:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	f022 0208 	bic.w	r2, r2, #8
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	443b      	add	r3, r7
 8007b10:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	3301      	adds	r3, #1
 8007b18:	73fb      	strb	r3, [r7, #15]
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	d9ec      	bls.n	8007afa <lcd_send_char+0x6a>
 8007b20:	e015      	b.n	8007b4e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007b22:	2300      	movs	r3, #0
 8007b24:	73bb      	strb	r3, [r7, #14]
 8007b26:	e00f      	b.n	8007b48 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	3310      	adds	r3, #16
 8007b2c:	443b      	add	r3, r7
 8007b2e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	f042 0208 	orr.w	r2, r2, #8
 8007b38:	b2d2      	uxtb	r2, r2
 8007b3a:	3310      	adds	r3, #16
 8007b3c:	443b      	add	r3, r7
 8007b3e:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	3301      	adds	r3, #1
 8007b46:	73bb      	strb	r3, [r7, #14]
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d9ec      	bls.n	8007b28 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007b4e:	f107 0208 	add.w	r2, r7, #8
 8007b52:	2364      	movs	r3, #100	; 0x64
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	2304      	movs	r3, #4
 8007b58:	214e      	movs	r1, #78	; 0x4e
 8007b5a:	4803      	ldr	r0, [pc, #12]	; (8007b68 <lcd_send_char+0xd8>)
 8007b5c:	f001 fd1c 	bl	8009598 <HAL_I2C_Master_Transmit>
}
 8007b60:	bf00      	nop
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	200003a8 	.word	0x200003a8
 8007b6c:	2000037e 	.word	0x2000037e

08007b70 <lcd_init>:

void lcd_init (void) {
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007b74:	2002      	movs	r0, #2
 8007b76:	f7ff fe95 	bl	80078a4 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007b7a:	2028      	movs	r0, #40	; 0x28
 8007b7c:	f7ff fe92 	bl	80078a4 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007b80:	200c      	movs	r0, #12
 8007b82:	f7ff fe8f 	bl	80078a4 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007b86:	2080      	movs	r0, #128	; 0x80
 8007b88:	f7ff fe8c 	bl	80078a4 <lcd_send_cmd>
	lcd_backlight(1);
 8007b8c:	2001      	movs	r0, #1
 8007b8e:	f000 f86d 	bl	8007c6c <lcd_backlight>
}
 8007b92:	bf00      	nop
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	460a      	mov	r2, r1
 8007ba0:	71fb      	strb	r3, [r7, #7]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d106      	bne.n	8007bba <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007bac:	79bb      	ldrb	r3, [r7, #6]
 8007bae:	337f      	adds	r3, #127	; 0x7f
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff fe76 	bl	80078a4 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007bb8:	e008      	b.n	8007bcc <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d105      	bne.n	8007bcc <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007bc0:	79bb      	ldrb	r3, [r7, #6]
 8007bc2:	3b41      	subs	r3, #65	; 0x41
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff fe6c 	bl	80078a4 <lcd_send_cmd>
}
 8007bcc:	bf00      	nop
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	603a      	str	r2, [r7, #0]
 8007bde:	71fb      	strb	r3, [r7, #7]
 8007be0:	460b      	mov	r3, r1
 8007be2:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007be4:	79ba      	ldrb	r2, [r7, #6]
 8007be6:	79fb      	ldrb	r3, [r7, #7]
 8007be8:	4611      	mov	r1, r2
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7ff ffd3 	bl	8007b96 <lcd_gotoxy>
	lcd_send_string(str);
 8007bf0:	6838      	ldr	r0, [r7, #0]
 8007bf2:	f7ff ff37 	bl	8007a64 <lcd_send_string>
}
 8007bf6:	bf00      	nop
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	4603      	mov	r3, r0
 8007c06:	71fb      	strb	r3, [r7, #7]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	71bb      	strb	r3, [r7, #6]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007c10:	79ba      	ldrb	r2, [r7, #6]
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	4611      	mov	r1, r2
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff ffbd 	bl	8007b96 <lcd_gotoxy>
    lcd_send_char(ch);
 8007c1c:	797b      	ldrb	r3, [r7, #5]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff ff36 	bl	8007a90 <lcd_send_char>
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <lcd_clear>:

void lcd_clear(void) {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007c30:	2001      	movs	r0, #1
 8007c32:	f7ff fe37 	bl	80078a4 <lcd_send_cmd>
    HAL_Delay(2);
 8007c36:	2002      	movs	r0, #2
 8007c38:	f000 fd22 	bl	8008680 <HAL_Delay>
}
 8007c3c:	bf00      	nop
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	460a      	mov	r2, r1
 8007c4a:	71fb      	strb	r3, [r7, #7]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007c50:	79ba      	ldrb	r2, [r7, #6]
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	4611      	mov	r1, r2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff ff9d 	bl	8007b96 <lcd_gotoxy>

    lcd_send_char(' ');
 8007c5c:	2020      	movs	r0, #32
 8007c5e:	f7ff ff17 	bl	8007a90 <lcd_send_char>
}
 8007c62:	bf00      	nop
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
	...

08007c6c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	4603      	mov	r3, r0
 8007c74:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007c76:	4a05      	ldr	r2, [pc, #20]	; (8007c8c <lcd_backlight+0x20>)
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	f7ff fe11 	bl	80078a4 <lcd_send_cmd>
}
 8007c82:	bf00      	nop
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	2000037e 	.word	0x2000037e

08007c90 <lcd_cursor>:

void lcd_cursor(int state) {
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d106      	bne.n	8007cac <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007c9e:	200e      	movs	r0, #14
 8007ca0:	f7ff fe00 	bl	80078a4 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007ca4:	200f      	movs	r0, #15
 8007ca6:	f7ff fdfd 	bl	80078a4 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007caa:	e002      	b.n	8007cb2 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007cac:	200c      	movs	r0, #12
 8007cae:	f7ff fdf9 	bl	80078a4 <lcd_send_cmd>
}
 8007cb2:	bf00      	nop
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007cc4:	4b04      	ldr	r3, [pc, #16]	; (8007cd8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	4a03      	ldr	r2, [pc, #12]	; (8007cd8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007ccc:	6013      	str	r3, [r2, #0]
}
 8007cce:	bf00      	nop
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bc80      	pop	{r7}
 8007cd6:	4770      	bx	lr
 8007cd8:	200001fc 	.word	0x200001fc

08007cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ce0:	f000 fc6c 	bl	80085bc <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ce8:	f000 fcca 	bl	8008680 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007cec:	f000 f89c 	bl	8007e28 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007cf0:	f000 f9be 	bl	8008070 <MX_GPIO_Init>
  MX_CAN_Init();
 8007cf4:	f000 f8de 	bl	8007eb4 <MX_CAN_Init>
  MX_I2C1_Init();
 8007cf8:	f000 f910 	bl	8007f1c <MX_I2C1_Init>
  MX_TIM1_Init();
 8007cfc:	f000 f93c 	bl	8007f78 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007d00:	f000 f98c 	bl	800801c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007d04:	2201      	movs	r2, #1
 8007d06:	2140      	movs	r1, #64	; 0x40
 8007d08:	483e      	ldr	r0, [pc, #248]	; (8007e04 <main+0x128>)
 8007d0a:	f001 faa0 	bl	800924e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007d0e:	2201      	movs	r2, #1
 8007d10:	2180      	movs	r1, #128	; 0x80
 8007d12:	483c      	ldr	r0, [pc, #240]	; (8007e04 <main+0x128>)
 8007d14:	f001 fa9b 	bl	800924e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007d18:	200a      	movs	r0, #10
 8007d1a:	f000 fcb1 	bl	8008680 <HAL_Delay>
  lcd_init();
 8007d1e:	f7ff ff27 	bl	8007b70 <lcd_init>
  HAL_Delay(10);
 8007d22:	200a      	movs	r0, #10
 8007d24:	f000 fcac 	bl	8008680 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007d28:	4837      	ldr	r0, [pc, #220]	; (8007e08 <main+0x12c>)
 8007d2a:	f003 f943 	bl	800afb4 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007d2e:	bf00      	nop
 8007d30:	4836      	ldr	r0, [pc, #216]	; (8007e0c <main+0x130>)
 8007d32:	f002 f89e 	bl	8009e72 <HAL_I2C_GetError>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d0f9      	beq.n	8007d30 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007d3c:	bf00      	nop
 8007d3e:	4833      	ldr	r0, [pc, #204]	; (8007e0c <main+0x130>)
 8007d40:	f002 f88a 	bl	8009e58 <HAL_I2C_GetState>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	d1f9      	bne.n	8007d3e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d50:	482c      	ldr	r0, [pc, #176]	; (8007e04 <main+0x128>)
 8007d52:	f001 fa7c 	bl	800924e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007d56:	2200      	movs	r2, #0
 8007d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d5c:	4829      	ldr	r0, [pc, #164]	; (8007e04 <main+0x128>)
 8007d5e:	f001 fa76 	bl	800924e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007d62:	2200      	movs	r2, #0
 8007d64:	2104      	movs	r1, #4
 8007d66:	4827      	ldr	r0, [pc, #156]	; (8007e04 <main+0x128>)
 8007d68:	f001 fa71 	bl	800924e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2102      	movs	r1, #2
 8007d70:	4824      	ldr	r0, [pc, #144]	; (8007e04 <main+0x128>)
 8007d72:	f001 fa6c 	bl	800924e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007d76:	2200      	movs	r2, #0
 8007d78:	2101      	movs	r1, #1
 8007d7a:	4822      	ldr	r0, [pc, #136]	; (8007e04 <main+0x128>)
 8007d7c:	f001 fa67 	bl	800924e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007d80:	2200      	movs	r2, #0
 8007d82:	2120      	movs	r1, #32
 8007d84:	4822      	ldr	r0, [pc, #136]	; (8007e10 <main+0x134>)
 8007d86:	f001 fa62 	bl	800924e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2110      	movs	r1, #16
 8007d8e:	4820      	ldr	r0, [pc, #128]	; (8007e10 <main+0x134>)
 8007d90:	f001 fa5d 	bl	800924e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007d94:	2200      	movs	r2, #0
 8007d96:	2180      	movs	r1, #128	; 0x80
 8007d98:	481e      	ldr	r0, [pc, #120]	; (8007e14 <main+0x138>)
 8007d9a:	f001 fa58 	bl	800924e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2140      	movs	r1, #64	; 0x40
 8007da2:	481c      	ldr	r0, [pc, #112]	; (8007e14 <main+0x138>)
 8007da4:	f001 fa53 	bl	800924e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007da8:	2200      	movs	r2, #0
 8007daa:	2120      	movs	r1, #32
 8007dac:	4819      	ldr	r0, [pc, #100]	; (8007e14 <main+0x138>)
 8007dae:	f001 fa4e 	bl	800924e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007db2:	2200      	movs	r2, #0
 8007db4:	2110      	movs	r1, #16
 8007db6:	4817      	ldr	r0, [pc, #92]	; (8007e14 <main+0x138>)
 8007db8:	f001 fa49 	bl	800924e <HAL_GPIO_WritePin>

  i2cTest();
 8007dbc:	f7f8 ff70 	bl	8000ca0 <i2cTest>
  HAL_Delay(100);
 8007dc0:	2064      	movs	r0, #100	; 0x64
 8007dc2:	f000 fc5d 	bl	8008680 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007dc6:	4a14      	ldr	r2, [pc, #80]	; (8007e18 <main+0x13c>)
 8007dc8:	2101      	movs	r1, #1
 8007dca:	2001      	movs	r0, #1
 8007dcc:	f7ff ff02 	bl	8007bd4 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007dd0:	4a12      	ldr	r2, [pc, #72]	; (8007e1c <main+0x140>)
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	2002      	movs	r0, #2
 8007dd6:	f7ff fefd 	bl	8007bd4 <lcd_print>
  HAL_Delay(1000);
 8007dda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007dde:	f000 fc4f 	bl	8008680 <HAL_Delay>
  lcd_clear();
 8007de2:	f7ff ff23 	bl	8007c2c <lcd_clear>

  eepromKontrol();
 8007de6:	f7f8 fa25 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007dea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007dee:	f000 fc47 	bl	8008680 <HAL_Delay>

  backLightTimer = millis;
 8007df2:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <main+0x144>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a0b      	ldr	r2, [pc, #44]	; (8007e24 <main+0x148>)
 8007df8:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007dfa:	f7ff fd4d 	bl	8007898 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007dfe:	f7fe fd71 	bl	80068e4 <mainLoop>
 8007e02:	e7fc      	b.n	8007dfe <main+0x122>
 8007e04:	40010c00 	.word	0x40010c00
 8007e08:	200003fc 	.word	0x200003fc
 8007e0c:	200003a8 	.word	0x200003a8
 8007e10:	40011000 	.word	0x40011000
 8007e14:	40010800 	.word	0x40010800
 8007e18:	0800dc04 	.word	0x0800dc04
 8007e1c:	0800dc18 	.word	0x0800dc18
 8007e20:	200001fc 	.word	0x200001fc
 8007e24:	20000218 	.word	0x20000218

08007e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b090      	sub	sp, #64	; 0x40
 8007e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e2e:	f107 0318 	add.w	r3, r7, #24
 8007e32:	2228      	movs	r2, #40	; 0x28
 8007e34:	2100      	movs	r1, #0
 8007e36:	4618      	mov	r0, r3
 8007e38:	f004 fb36 	bl	800c4a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e3c:	1d3b      	adds	r3, r7, #4
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	605a      	str	r2, [r3, #4]
 8007e44:	609a      	str	r2, [r3, #8]
 8007e46:	60da      	str	r2, [r3, #12]
 8007e48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007e4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007e54:	2300      	movs	r3, #0
 8007e56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007e60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007e66:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e6c:	f107 0318 	add.w	r3, r7, #24
 8007e70:	4618      	mov	r0, r3
 8007e72:	f002 fc3f 	bl	800a6f4 <HAL_RCC_OscConfig>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007e7c:	f000 f9a2 	bl	80081c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e80:	230f      	movs	r3, #15
 8007e82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e84:	2302      	movs	r3, #2
 8007e86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007e92:	2300      	movs	r3, #0
 8007e94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007e96:	1d3b      	adds	r3, r7, #4
 8007e98:	2102      	movs	r1, #2
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f002 feac 	bl	800abf8 <HAL_RCC_ClockConfig>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007ea6:	f000 f98d 	bl	80081c4 <Error_Handler>
  }
}
 8007eaa:	bf00      	nop
 8007eac:	3740      	adds	r7, #64	; 0x40
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007eb8:	4b16      	ldr	r3, [pc, #88]	; (8007f14 <MX_CAN_Init+0x60>)
 8007eba:	4a17      	ldr	r2, [pc, #92]	; (8007f18 <MX_CAN_Init+0x64>)
 8007ebc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007ebe:	4b15      	ldr	r3, [pc, #84]	; (8007f14 <MX_CAN_Init+0x60>)
 8007ec0:	2210      	movs	r2, #16
 8007ec2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007ec4:	4b13      	ldr	r3, [pc, #76]	; (8007f14 <MX_CAN_Init+0x60>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007eca:	4b12      	ldr	r3, [pc, #72]	; (8007f14 <MX_CAN_Init+0x60>)
 8007ecc:	2200      	movs	r2, #0
 8007ece:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007ed0:	4b10      	ldr	r3, [pc, #64]	; (8007f14 <MX_CAN_Init+0x60>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007ed6:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <MX_CAN_Init+0x60>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007edc:	4b0d      	ldr	r3, [pc, #52]	; (8007f14 <MX_CAN_Init+0x60>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <MX_CAN_Init+0x60>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007ee8:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <MX_CAN_Init+0x60>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <MX_CAN_Init+0x60>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007ef4:	4b07      	ldr	r3, [pc, #28]	; (8007f14 <MX_CAN_Init+0x60>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007efa:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <MX_CAN_Init+0x60>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007f00:	4804      	ldr	r0, [pc, #16]	; (8007f14 <MX_CAN_Init+0x60>)
 8007f02:	f000 fbe1 	bl	80086c8 <HAL_CAN_Init>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007f0c:	f000 f95a 	bl	80081c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007f10:	bf00      	nop
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20000380 	.word	0x20000380
 8007f18:	40006400 	.word	0x40006400

08007f1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007f20:	4b12      	ldr	r3, [pc, #72]	; (8007f6c <MX_I2C1_Init+0x50>)
 8007f22:	4a13      	ldr	r2, [pc, #76]	; (8007f70 <MX_I2C1_Init+0x54>)
 8007f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007f26:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <MX_I2C1_Init+0x50>)
 8007f28:	4a12      	ldr	r2, [pc, #72]	; (8007f74 <MX_I2C1_Init+0x58>)
 8007f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007f2c:	4b0f      	ldr	r3, [pc, #60]	; (8007f6c <MX_I2C1_Init+0x50>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007f32:	4b0e      	ldr	r3, [pc, #56]	; (8007f6c <MX_I2C1_Init+0x50>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f38:	4b0c      	ldr	r3, [pc, #48]	; (8007f6c <MX_I2C1_Init+0x50>)
 8007f3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f40:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <MX_I2C1_Init+0x50>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007f46:	4b09      	ldr	r3, [pc, #36]	; (8007f6c <MX_I2C1_Init+0x50>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f4c:	4b07      	ldr	r3, [pc, #28]	; (8007f6c <MX_I2C1_Init+0x50>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f52:	4b06      	ldr	r3, [pc, #24]	; (8007f6c <MX_I2C1_Init+0x50>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007f58:	4804      	ldr	r0, [pc, #16]	; (8007f6c <MX_I2C1_Init+0x50>)
 8007f5a:	f001 f9a9 	bl	80092b0 <HAL_I2C_Init>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d001      	beq.n	8007f68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007f64:	f000 f92e 	bl	80081c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007f68:	bf00      	nop
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	200003a8 	.word	0x200003a8
 8007f70:	40005400 	.word	0x40005400
 8007f74:	00061a80 	.word	0x00061a80

08007f78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f7e:	f107 0308 	add.w	r3, r7, #8
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	605a      	str	r2, [r3, #4]
 8007f88:	609a      	str	r2, [r3, #8]
 8007f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007f94:	4b1f      	ldr	r3, [pc, #124]	; (8008014 <MX_TIM1_Init+0x9c>)
 8007f96:	4a20      	ldr	r2, [pc, #128]	; (8008018 <MX_TIM1_Init+0xa0>)
 8007f98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007f9a:	4b1e      	ldr	r3, [pc, #120]	; (8008014 <MX_TIM1_Init+0x9c>)
 8007f9c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007fa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fa2:	4b1c      	ldr	r3, [pc, #112]	; (8008014 <MX_TIM1_Init+0x9c>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007fa8:	4b1a      	ldr	r3, [pc, #104]	; (8008014 <MX_TIM1_Init+0x9c>)
 8007faa:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007fae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fb0:	4b18      	ldr	r3, [pc, #96]	; (8008014 <MX_TIM1_Init+0x9c>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007fb6:	4b17      	ldr	r3, [pc, #92]	; (8008014 <MX_TIM1_Init+0x9c>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fbc:	4b15      	ldr	r3, [pc, #84]	; (8008014 <MX_TIM1_Init+0x9c>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007fc2:	4814      	ldr	r0, [pc, #80]	; (8008014 <MX_TIM1_Init+0x9c>)
 8007fc4:	f002 ffa6 	bl	800af14 <HAL_TIM_Base_Init>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007fce:	f000 f8f9 	bl	80081c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007fd8:	f107 0308 	add.w	r3, r7, #8
 8007fdc:	4619      	mov	r1, r3
 8007fde:	480d      	ldr	r0, [pc, #52]	; (8008014 <MX_TIM1_Init+0x9c>)
 8007fe0:	f003 f950 	bl	800b284 <HAL_TIM_ConfigClockSource>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007fea:	f000 f8eb 	bl	80081c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	4806      	ldr	r0, [pc, #24]	; (8008014 <MX_TIM1_Init+0x9c>)
 8007ffc:	f003 fb3e 	bl	800b67c <HAL_TIMEx_MasterConfigSynchronization>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008006:	f000 f8dd 	bl	80081c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800800a:	bf00      	nop
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	200003fc 	.word	0x200003fc
 8008018:	40012c00 	.word	0x40012c00

0800801c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008020:	4b11      	ldr	r3, [pc, #68]	; (8008068 <MX_USART1_UART_Init+0x4c>)
 8008022:	4a12      	ldr	r2, [pc, #72]	; (800806c <MX_USART1_UART_Init+0x50>)
 8008024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008026:	4b10      	ldr	r3, [pc, #64]	; (8008068 <MX_USART1_UART_Init+0x4c>)
 8008028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800802c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800802e:	4b0e      	ldr	r3, [pc, #56]	; (8008068 <MX_USART1_UART_Init+0x4c>)
 8008030:	2200      	movs	r2, #0
 8008032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008034:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <MX_USART1_UART_Init+0x4c>)
 8008036:	2200      	movs	r2, #0
 8008038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800803a:	4b0b      	ldr	r3, [pc, #44]	; (8008068 <MX_USART1_UART_Init+0x4c>)
 800803c:	2200      	movs	r2, #0
 800803e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008040:	4b09      	ldr	r3, [pc, #36]	; (8008068 <MX_USART1_UART_Init+0x4c>)
 8008042:	220c      	movs	r2, #12
 8008044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008046:	4b08      	ldr	r3, [pc, #32]	; (8008068 <MX_USART1_UART_Init+0x4c>)
 8008048:	2200      	movs	r2, #0
 800804a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800804c:	4b06      	ldr	r3, [pc, #24]	; (8008068 <MX_USART1_UART_Init+0x4c>)
 800804e:	2200      	movs	r2, #0
 8008050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008052:	4805      	ldr	r0, [pc, #20]	; (8008068 <MX_USART1_UART_Init+0x4c>)
 8008054:	f003 fb90 	bl	800b778 <HAL_UART_Init>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800805e:	f000 f8b1 	bl	80081c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008062:	bf00      	nop
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	20000444 	.word	0x20000444
 800806c:	40013800 	.word	0x40013800

08008070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008076:	f107 0310 	add.w	r3, r7, #16
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	605a      	str	r2, [r3, #4]
 8008080:	609a      	str	r2, [r3, #8]
 8008082:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008084:	4b4b      	ldr	r3, [pc, #300]	; (80081b4 <MX_GPIO_Init+0x144>)
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	4a4a      	ldr	r2, [pc, #296]	; (80081b4 <MX_GPIO_Init+0x144>)
 800808a:	f043 0310 	orr.w	r3, r3, #16
 800808e:	6193      	str	r3, [r2, #24]
 8008090:	4b48      	ldr	r3, [pc, #288]	; (80081b4 <MX_GPIO_Init+0x144>)
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	f003 0310 	and.w	r3, r3, #16
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800809c:	4b45      	ldr	r3, [pc, #276]	; (80081b4 <MX_GPIO_Init+0x144>)
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	4a44      	ldr	r2, [pc, #272]	; (80081b4 <MX_GPIO_Init+0x144>)
 80080a2:	f043 0320 	orr.w	r3, r3, #32
 80080a6:	6193      	str	r3, [r2, #24]
 80080a8:	4b42      	ldr	r3, [pc, #264]	; (80081b4 <MX_GPIO_Init+0x144>)
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	f003 0320 	and.w	r3, r3, #32
 80080b0:	60bb      	str	r3, [r7, #8]
 80080b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80080b4:	4b3f      	ldr	r3, [pc, #252]	; (80081b4 <MX_GPIO_Init+0x144>)
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	4a3e      	ldr	r2, [pc, #248]	; (80081b4 <MX_GPIO_Init+0x144>)
 80080ba:	f043 0304 	orr.w	r3, r3, #4
 80080be:	6193      	str	r3, [r2, #24]
 80080c0:	4b3c      	ldr	r3, [pc, #240]	; (80081b4 <MX_GPIO_Init+0x144>)
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	607b      	str	r3, [r7, #4]
 80080ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80080cc:	4b39      	ldr	r3, [pc, #228]	; (80081b4 <MX_GPIO_Init+0x144>)
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	4a38      	ldr	r2, [pc, #224]	; (80081b4 <MX_GPIO_Init+0x144>)
 80080d2:	f043 0308 	orr.w	r3, r3, #8
 80080d6:	6193      	str	r3, [r2, #24]
 80080d8:	4b36      	ldr	r3, [pc, #216]	; (80081b4 <MX_GPIO_Init+0x144>)
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	603b      	str	r3, [r7, #0]
 80080e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80080e4:	2200      	movs	r2, #0
 80080e6:	21f0      	movs	r1, #240	; 0xf0
 80080e8:	4833      	ldr	r0, [pc, #204]	; (80081b8 <MX_GPIO_Init+0x148>)
 80080ea:	f001 f8b0 	bl	800924e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80080ee:	2200      	movs	r2, #0
 80080f0:	f241 0130 	movw	r1, #4144	; 0x1030
 80080f4:	4831      	ldr	r0, [pc, #196]	; (80081bc <MX_GPIO_Init+0x14c>)
 80080f6:	f001 f8aa 	bl	800924e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80080fa:	2200      	movs	r2, #0
 80080fc:	f640 4107 	movw	r1, #3079	; 0xc07
 8008100:	482f      	ldr	r0, [pc, #188]	; (80081c0 <MX_GPIO_Init+0x150>)
 8008102:	f001 f8a4 	bl	800924e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008106:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800810a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800810c:	2300      	movs	r3, #0
 800810e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008110:	2300      	movs	r3, #0
 8008112:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008114:	f107 0310 	add.w	r3, r7, #16
 8008118:	4619      	mov	r1, r3
 800811a:	4828      	ldr	r0, [pc, #160]	; (80081bc <MX_GPIO_Init+0x14c>)
 800811c:	f000 fe20 	bl	8008d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008120:	f248 130f 	movw	r3, #33039	; 0x810f
 8008124:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008126:	2300      	movs	r3, #0
 8008128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800812a:	2300      	movs	r3, #0
 800812c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800812e:	f107 0310 	add.w	r3, r7, #16
 8008132:	4619      	mov	r1, r3
 8008134:	4820      	ldr	r0, [pc, #128]	; (80081b8 <MX_GPIO_Init+0x148>)
 8008136:	f000 fe13 	bl	8008d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800813a:	23f0      	movs	r3, #240	; 0xf0
 800813c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800813e:	2301      	movs	r3, #1
 8008140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008142:	2300      	movs	r3, #0
 8008144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008146:	2302      	movs	r3, #2
 8008148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800814a:	f107 0310 	add.w	r3, r7, #16
 800814e:	4619      	mov	r1, r3
 8008150:	4819      	ldr	r0, [pc, #100]	; (80081b8 <MX_GPIO_Init+0x148>)
 8008152:	f000 fe05 	bl	8008d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008156:	f241 0330 	movw	r3, #4144	; 0x1030
 800815a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800815c:	2301      	movs	r3, #1
 800815e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008160:	2300      	movs	r3, #0
 8008162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008164:	2302      	movs	r3, #2
 8008166:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008168:	f107 0310 	add.w	r3, r7, #16
 800816c:	4619      	mov	r1, r3
 800816e:	4813      	ldr	r0, [pc, #76]	; (80081bc <MX_GPIO_Init+0x14c>)
 8008170:	f000 fdf6 	bl	8008d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008174:	f640 4307 	movw	r3, #3079	; 0xc07
 8008178:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800817a:	2301      	movs	r3, #1
 800817c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800817e:	2300      	movs	r3, #0
 8008180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008182:	2302      	movs	r3, #2
 8008184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008186:	f107 0310 	add.w	r3, r7, #16
 800818a:	4619      	mov	r1, r3
 800818c:	480c      	ldr	r0, [pc, #48]	; (80081c0 <MX_GPIO_Init+0x150>)
 800818e:	f000 fde7 	bl	8008d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008192:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008198:	2300      	movs	r3, #0
 800819a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800819c:	2300      	movs	r3, #0
 800819e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081a0:	f107 0310 	add.w	r3, r7, #16
 80081a4:	4619      	mov	r1, r3
 80081a6:	4806      	ldr	r0, [pc, #24]	; (80081c0 <MX_GPIO_Init+0x150>)
 80081a8:	f000 fdda 	bl	8008d60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80081ac:	bf00      	nop
 80081ae:	3720      	adds	r7, #32
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	40021000 	.word	0x40021000
 80081b8:	40010800 	.word	0x40010800
 80081bc:	40011000 	.word	0x40011000
 80081c0:	40010c00 	.word	0x40010c00

080081c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80081c8:	bf00      	nop
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bc80      	pop	{r7}
 80081ce:	4770      	bx	lr

080081d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80081d6:	4b15      	ldr	r3, [pc, #84]	; (800822c <HAL_MspInit+0x5c>)
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	4a14      	ldr	r2, [pc, #80]	; (800822c <HAL_MspInit+0x5c>)
 80081dc:	f043 0301 	orr.w	r3, r3, #1
 80081e0:	6193      	str	r3, [r2, #24]
 80081e2:	4b12      	ldr	r3, [pc, #72]	; (800822c <HAL_MspInit+0x5c>)
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	60bb      	str	r3, [r7, #8]
 80081ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80081ee:	4b0f      	ldr	r3, [pc, #60]	; (800822c <HAL_MspInit+0x5c>)
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	4a0e      	ldr	r2, [pc, #56]	; (800822c <HAL_MspInit+0x5c>)
 80081f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081f8:	61d3      	str	r3, [r2, #28]
 80081fa:	4b0c      	ldr	r3, [pc, #48]	; (800822c <HAL_MspInit+0x5c>)
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008202:	607b      	str	r3, [r7, #4]
 8008204:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008206:	4b0a      	ldr	r3, [pc, #40]	; (8008230 <HAL_MspInit+0x60>)
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	4a04      	ldr	r2, [pc, #16]	; (8008230 <HAL_MspInit+0x60>)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008222:	bf00      	nop
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	bc80      	pop	{r7}
 800822a:	4770      	bx	lr
 800822c:	40021000 	.word	0x40021000
 8008230:	40010000 	.word	0x40010000

08008234 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800823c:	f107 0310 	add.w	r3, r7, #16
 8008240:	2200      	movs	r2, #0
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	605a      	str	r2, [r3, #4]
 8008246:	609a      	str	r2, [r3, #8]
 8008248:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a1c      	ldr	r2, [pc, #112]	; (80082c0 <HAL_CAN_MspInit+0x8c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d131      	bne.n	80082b8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008254:	4b1b      	ldr	r3, [pc, #108]	; (80082c4 <HAL_CAN_MspInit+0x90>)
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	4a1a      	ldr	r2, [pc, #104]	; (80082c4 <HAL_CAN_MspInit+0x90>)
 800825a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800825e:	61d3      	str	r3, [r2, #28]
 8008260:	4b18      	ldr	r3, [pc, #96]	; (80082c4 <HAL_CAN_MspInit+0x90>)
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800826c:	4b15      	ldr	r3, [pc, #84]	; (80082c4 <HAL_CAN_MspInit+0x90>)
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	4a14      	ldr	r2, [pc, #80]	; (80082c4 <HAL_CAN_MspInit+0x90>)
 8008272:	f043 0304 	orr.w	r3, r3, #4
 8008276:	6193      	str	r3, [r2, #24]
 8008278:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <HAL_CAN_MspInit+0x90>)
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	60bb      	str	r3, [r7, #8]
 8008282:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008288:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800828a:	2300      	movs	r3, #0
 800828c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800828e:	2300      	movs	r3, #0
 8008290:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008292:	f107 0310 	add.w	r3, r7, #16
 8008296:	4619      	mov	r1, r3
 8008298:	480b      	ldr	r0, [pc, #44]	; (80082c8 <HAL_CAN_MspInit+0x94>)
 800829a:	f000 fd61 	bl	8008d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800829e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082a4:	2302      	movs	r3, #2
 80082a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80082a8:	2303      	movs	r3, #3
 80082aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ac:	f107 0310 	add.w	r3, r7, #16
 80082b0:	4619      	mov	r1, r3
 80082b2:	4805      	ldr	r0, [pc, #20]	; (80082c8 <HAL_CAN_MspInit+0x94>)
 80082b4:	f000 fd54 	bl	8008d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80082b8:	bf00      	nop
 80082ba:	3720      	adds	r7, #32
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	40006400 	.word	0x40006400
 80082c4:	40021000 	.word	0x40021000
 80082c8:	40010800 	.word	0x40010800

080082cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082d4:	f107 0310 	add.w	r3, r7, #16
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	605a      	str	r2, [r3, #4]
 80082de:	609a      	str	r2, [r3, #8]
 80082e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a15      	ldr	r2, [pc, #84]	; (800833c <HAL_I2C_MspInit+0x70>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d123      	bne.n	8008334 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082ec:	4b14      	ldr	r3, [pc, #80]	; (8008340 <HAL_I2C_MspInit+0x74>)
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	4a13      	ldr	r2, [pc, #76]	; (8008340 <HAL_I2C_MspInit+0x74>)
 80082f2:	f043 0308 	orr.w	r3, r3, #8
 80082f6:	6193      	str	r3, [r2, #24]
 80082f8:	4b11      	ldr	r3, [pc, #68]	; (8008340 <HAL_I2C_MspInit+0x74>)
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	f003 0308 	and.w	r3, r3, #8
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008304:	23c0      	movs	r3, #192	; 0xc0
 8008306:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008308:	2312      	movs	r3, #18
 800830a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800830c:	2303      	movs	r3, #3
 800830e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008310:	f107 0310 	add.w	r3, r7, #16
 8008314:	4619      	mov	r1, r3
 8008316:	480b      	ldr	r0, [pc, #44]	; (8008344 <HAL_I2C_MspInit+0x78>)
 8008318:	f000 fd22 	bl	8008d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800831c:	4b08      	ldr	r3, [pc, #32]	; (8008340 <HAL_I2C_MspInit+0x74>)
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	4a07      	ldr	r2, [pc, #28]	; (8008340 <HAL_I2C_MspInit+0x74>)
 8008322:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008326:	61d3      	str	r3, [r2, #28]
 8008328:	4b05      	ldr	r3, [pc, #20]	; (8008340 <HAL_I2C_MspInit+0x74>)
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008330:	60bb      	str	r3, [r7, #8]
 8008332:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008334:	bf00      	nop
 8008336:	3720      	adds	r7, #32
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	40005400 	.word	0x40005400
 8008340:	40021000 	.word	0x40021000
 8008344:	40010c00 	.word	0x40010c00

08008348 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a0a      	ldr	r2, [pc, #40]	; (8008380 <HAL_I2C_MspDeInit+0x38>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d10d      	bne.n	8008376 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800835a:	4b0a      	ldr	r3, [pc, #40]	; (8008384 <HAL_I2C_MspDeInit+0x3c>)
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	4a09      	ldr	r2, [pc, #36]	; (8008384 <HAL_I2C_MspDeInit+0x3c>)
 8008360:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008364:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008366:	2140      	movs	r1, #64	; 0x40
 8008368:	4807      	ldr	r0, [pc, #28]	; (8008388 <HAL_I2C_MspDeInit+0x40>)
 800836a:	f000 fe8d 	bl	8009088 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800836e:	2180      	movs	r1, #128	; 0x80
 8008370:	4805      	ldr	r0, [pc, #20]	; (8008388 <HAL_I2C_MspDeInit+0x40>)
 8008372:	f000 fe89 	bl	8009088 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	40005400 	.word	0x40005400
 8008384:	40021000 	.word	0x40021000
 8008388:	40010c00 	.word	0x40010c00

0800838c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a0d      	ldr	r2, [pc, #52]	; (80083d0 <HAL_TIM_Base_MspInit+0x44>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d113      	bne.n	80083c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800839e:	4b0d      	ldr	r3, [pc, #52]	; (80083d4 <HAL_TIM_Base_MspInit+0x48>)
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	4a0c      	ldr	r2, [pc, #48]	; (80083d4 <HAL_TIM_Base_MspInit+0x48>)
 80083a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80083a8:	6193      	str	r3, [r2, #24]
 80083aa:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <HAL_TIM_Base_MspInit+0x48>)
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80083b6:	2200      	movs	r2, #0
 80083b8:	2100      	movs	r1, #0
 80083ba:	2019      	movs	r0, #25
 80083bc:	f000 fb57 	bl	8008a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80083c0:	2019      	movs	r0, #25
 80083c2:	f000 fb70 	bl	8008aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80083c6:	bf00      	nop
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	40012c00 	.word	0x40012c00
 80083d4:	40021000 	.word	0x40021000

080083d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e0:	f107 0310 	add.w	r3, r7, #16
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	605a      	str	r2, [r3, #4]
 80083ea:	609a      	str	r2, [r3, #8]
 80083ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a20      	ldr	r2, [pc, #128]	; (8008474 <HAL_UART_MspInit+0x9c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d139      	bne.n	800846c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80083f8:	4b1f      	ldr	r3, [pc, #124]	; (8008478 <HAL_UART_MspInit+0xa0>)
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	4a1e      	ldr	r2, [pc, #120]	; (8008478 <HAL_UART_MspInit+0xa0>)
 80083fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008402:	6193      	str	r3, [r2, #24]
 8008404:	4b1c      	ldr	r3, [pc, #112]	; (8008478 <HAL_UART_MspInit+0xa0>)
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008410:	4b19      	ldr	r3, [pc, #100]	; (8008478 <HAL_UART_MspInit+0xa0>)
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	4a18      	ldr	r2, [pc, #96]	; (8008478 <HAL_UART_MspInit+0xa0>)
 8008416:	f043 0304 	orr.w	r3, r3, #4
 800841a:	6193      	str	r3, [r2, #24]
 800841c:	4b16      	ldr	r3, [pc, #88]	; (8008478 <HAL_UART_MspInit+0xa0>)
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	60bb      	str	r3, [r7, #8]
 8008426:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800842c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800842e:	2302      	movs	r3, #2
 8008430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008432:	2303      	movs	r3, #3
 8008434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008436:	f107 0310 	add.w	r3, r7, #16
 800843a:	4619      	mov	r1, r3
 800843c:	480f      	ldr	r0, [pc, #60]	; (800847c <HAL_UART_MspInit+0xa4>)
 800843e:	f000 fc8f 	bl	8008d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008448:	2300      	movs	r3, #0
 800844a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800844c:	2300      	movs	r3, #0
 800844e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008450:	f107 0310 	add.w	r3, r7, #16
 8008454:	4619      	mov	r1, r3
 8008456:	4809      	ldr	r0, [pc, #36]	; (800847c <HAL_UART_MspInit+0xa4>)
 8008458:	f000 fc82 	bl	8008d60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800845c:	2200      	movs	r2, #0
 800845e:	2100      	movs	r1, #0
 8008460:	2025      	movs	r0, #37	; 0x25
 8008462:	f000 fb04 	bl	8008a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008466:	2025      	movs	r0, #37	; 0x25
 8008468:	f000 fb1d 	bl	8008aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800846c:	bf00      	nop
 800846e:	3720      	adds	r7, #32
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	40013800 	.word	0x40013800
 8008478:	40021000 	.word	0x40021000
 800847c:	40010800 	.word	0x40010800

08008480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008480:	b480      	push	{r7}
 8008482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008484:	e7fe      	b.n	8008484 <NMI_Handler+0x4>

08008486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008486:	b480      	push	{r7}
 8008488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800848a:	e7fe      	b.n	800848a <HardFault_Handler+0x4>

0800848c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008490:	e7fe      	b.n	8008490 <MemManage_Handler+0x4>

08008492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008492:	b480      	push	{r7}
 8008494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008496:	e7fe      	b.n	8008496 <BusFault_Handler+0x4>

08008498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008498:	b480      	push	{r7}
 800849a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800849c:	e7fe      	b.n	800849c <UsageFault_Handler+0x4>

0800849e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800849e:	b480      	push	{r7}
 80084a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80084a2:	bf00      	nop
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bc80      	pop	{r7}
 80084a8:	4770      	bx	lr

080084aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80084aa:	b480      	push	{r7}
 80084ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80084ae:	bf00      	nop
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr

080084b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80084b6:	b480      	push	{r7}
 80084b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80084ba:	bf00      	nop
 80084bc:	46bd      	mov	sp, r7
 80084be:	bc80      	pop	{r7}
 80084c0:	4770      	bx	lr

080084c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80084c6:	f000 f8bf 	bl	8008648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80084ca:	bf00      	nop
 80084cc:	bd80      	pop	{r7, pc}
	...

080084d0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80084d4:	4802      	ldr	r0, [pc, #8]	; (80084e0 <TIM1_UP_IRQHandler+0x10>)
 80084d6:	f002 fdcd 	bl	800b074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80084da:	bf00      	nop
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	200003fc 	.word	0x200003fc

080084e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80084e8:	4802      	ldr	r0, [pc, #8]	; (80084f4 <USART1_IRQHandler+0x10>)
 80084ea:	f003 f9cb 	bl	800b884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80084ee:	bf00      	nop
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20000444 	.word	0x20000444

080084f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008500:	4a14      	ldr	r2, [pc, #80]	; (8008554 <_sbrk+0x5c>)
 8008502:	4b15      	ldr	r3, [pc, #84]	; (8008558 <_sbrk+0x60>)
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800850c:	4b13      	ldr	r3, [pc, #76]	; (800855c <_sbrk+0x64>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008514:	4b11      	ldr	r3, [pc, #68]	; (800855c <_sbrk+0x64>)
 8008516:	4a12      	ldr	r2, [pc, #72]	; (8008560 <_sbrk+0x68>)
 8008518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800851a:	4b10      	ldr	r3, [pc, #64]	; (800855c <_sbrk+0x64>)
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4413      	add	r3, r2
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	429a      	cmp	r2, r3
 8008526:	d207      	bcs.n	8008538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008528:	f003 ffe6 	bl	800c4f8 <__errno>
 800852c:	4603      	mov	r3, r0
 800852e:	220c      	movs	r2, #12
 8008530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008532:	f04f 33ff 	mov.w	r3, #4294967295
 8008536:	e009      	b.n	800854c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008538:	4b08      	ldr	r3, [pc, #32]	; (800855c <_sbrk+0x64>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800853e:	4b07      	ldr	r3, [pc, #28]	; (800855c <_sbrk+0x64>)
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4413      	add	r3, r2
 8008546:	4a05      	ldr	r2, [pc, #20]	; (800855c <_sbrk+0x64>)
 8008548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800854a:	68fb      	ldr	r3, [r7, #12]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	2000c000 	.word	0x2000c000
 8008558:	00000400 	.word	0x00000400
 800855c:	2000048c 	.word	0x2000048c
 8008560:	200005e0 	.word	0x200005e0

08008564 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008564:	b480      	push	{r7}
 8008566:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008568:	bf00      	nop
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr

08008570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008570:	480c      	ldr	r0, [pc, #48]	; (80085a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008572:	490d      	ldr	r1, [pc, #52]	; (80085a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008574:	4a0d      	ldr	r2, [pc, #52]	; (80085ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008578:	e002      	b.n	8008580 <LoopCopyDataInit>

0800857a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800857a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800857c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800857e:	3304      	adds	r3, #4

08008580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008584:	d3f9      	bcc.n	800857a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008586:	4a0a      	ldr	r2, [pc, #40]	; (80085b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008588:	4c0a      	ldr	r4, [pc, #40]	; (80085b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800858a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800858c:	e001      	b.n	8008592 <LoopFillZerobss>

0800858e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800858e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008590:	3204      	adds	r2, #4

08008592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008594:	d3fb      	bcc.n	800858e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008596:	f7ff ffe5 	bl	8008564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800859a:	f003 ffb3 	bl	800c504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800859e:	f7ff fb9d 	bl	8007cdc <main>
  bx lr
 80085a2:	4770      	bx	lr
  ldr r0, =_sdata
 80085a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80085a8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80085ac:	0800dcb8 	.word	0x0800dcb8
  ldr r2, =_sbss
 80085b0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80085b4:	200005dc 	.word	0x200005dc

080085b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80085b8:	e7fe      	b.n	80085b8 <ADC1_2_IRQHandler>
	...

080085bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80085c0:	4b08      	ldr	r3, [pc, #32]	; (80085e4 <HAL_Init+0x28>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a07      	ldr	r2, [pc, #28]	; (80085e4 <HAL_Init+0x28>)
 80085c6:	f043 0310 	orr.w	r3, r3, #16
 80085ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80085cc:	2003      	movs	r0, #3
 80085ce:	f000 fa43 	bl	8008a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80085d2:	200f      	movs	r0, #15
 80085d4:	f000 f808 	bl	80085e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80085d8:	f7ff fdfa 	bl	80081d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	40022000 	.word	0x40022000

080085e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80085f0:	4b12      	ldr	r3, [pc, #72]	; (800863c <HAL_InitTick+0x54>)
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	4b12      	ldr	r3, [pc, #72]	; (8008640 <HAL_InitTick+0x58>)
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	4619      	mov	r1, r3
 80085fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008602:	fbb2 f3f3 	udiv	r3, r2, r3
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fa5b 	bl	8008ac2 <HAL_SYSTICK_Config>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e00e      	b.n	8008634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b0f      	cmp	r3, #15
 800861a:	d80a      	bhi.n	8008632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800861c:	2200      	movs	r2, #0
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
 8008624:	f000 fa23 	bl	8008a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008628:	4a06      	ldr	r2, [pc, #24]	; (8008644 <HAL_InitTick+0x5c>)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	e000      	b.n	8008634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	200000a0 	.word	0x200000a0
 8008640:	200000a8 	.word	0x200000a8
 8008644:	200000a4 	.word	0x200000a4

08008648 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008648:	b480      	push	{r7}
 800864a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800864c:	4b05      	ldr	r3, [pc, #20]	; (8008664 <HAL_IncTick+0x1c>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	461a      	mov	r2, r3
 8008652:	4b05      	ldr	r3, [pc, #20]	; (8008668 <HAL_IncTick+0x20>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4413      	add	r3, r2
 8008658:	4a03      	ldr	r2, [pc, #12]	; (8008668 <HAL_IncTick+0x20>)
 800865a:	6013      	str	r3, [r2, #0]
}
 800865c:	bf00      	nop
 800865e:	46bd      	mov	sp, r7
 8008660:	bc80      	pop	{r7}
 8008662:	4770      	bx	lr
 8008664:	200000a8 	.word	0x200000a8
 8008668:	20000490 	.word	0x20000490

0800866c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
  return uwTick;
 8008670:	4b02      	ldr	r3, [pc, #8]	; (800867c <HAL_GetTick+0x10>)
 8008672:	681b      	ldr	r3, [r3, #0]
}
 8008674:	4618      	mov	r0, r3
 8008676:	46bd      	mov	sp, r7
 8008678:	bc80      	pop	{r7}
 800867a:	4770      	bx	lr
 800867c:	20000490 	.word	0x20000490

08008680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008688:	f7ff fff0 	bl	800866c <HAL_GetTick>
 800868c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008698:	d005      	beq.n	80086a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800869a:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <HAL_Delay+0x44>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4413      	add	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80086a6:	bf00      	nop
 80086a8:	f7ff ffe0 	bl	800866c <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d8f7      	bhi.n	80086a8 <HAL_Delay+0x28>
  {
  }
}
 80086b8:	bf00      	nop
 80086ba:	bf00      	nop
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	200000a8 	.word	0x200000a8

080086c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e0ed      	b.n	80088b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d102      	bne.n	80086ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7ff fda4 	bl	8008234 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0201 	orr.w	r2, r2, #1
 80086fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086fc:	f7ff ffb6 	bl	800866c <HAL_GetTick>
 8008700:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008702:	e012      	b.n	800872a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008704:	f7ff ffb2 	bl	800866c <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	2b0a      	cmp	r3, #10
 8008710:	d90b      	bls.n	800872a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2205      	movs	r2, #5
 8008722:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e0c5      	b.n	80088b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0e5      	beq.n	8008704 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 0202 	bic.w	r2, r2, #2
 8008746:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008748:	f7ff ff90 	bl	800866c <HAL_GetTick>
 800874c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800874e:	e012      	b.n	8008776 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008750:	f7ff ff8c 	bl	800866c <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	2b0a      	cmp	r3, #10
 800875c:	d90b      	bls.n	8008776 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008762:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2205      	movs	r2, #5
 800876e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e09f      	b.n	80088b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f003 0302 	and.w	r3, r3, #2
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1e5      	bne.n	8008750 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	7e1b      	ldrb	r3, [r3, #24]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d108      	bne.n	800879e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	e007      	b.n	80087ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	7e5b      	ldrb	r3, [r3, #25]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d108      	bne.n	80087c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	e007      	b.n	80087d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7e9b      	ldrb	r3, [r3, #26]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d108      	bne.n	80087f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0220 	orr.w	r2, r2, #32
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	e007      	b.n	8008802 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f022 0220 	bic.w	r2, r2, #32
 8008800:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	7edb      	ldrb	r3, [r3, #27]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d108      	bne.n	800881c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0210 	bic.w	r2, r2, #16
 8008818:	601a      	str	r2, [r3, #0]
 800881a:	e007      	b.n	800882c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0210 	orr.w	r2, r2, #16
 800882a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	7f1b      	ldrb	r3, [r3, #28]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d108      	bne.n	8008846 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0208 	orr.w	r2, r2, #8
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	e007      	b.n	8008856 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f022 0208 	bic.w	r2, r2, #8
 8008854:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	7f5b      	ldrb	r3, [r3, #29]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d108      	bne.n	8008870 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f042 0204 	orr.w	r2, r2, #4
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	e007      	b.n	8008880 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0204 	bic.w	r2, r2, #4
 800887e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	431a      	orrs	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	431a      	orrs	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	ea42 0103 	orr.w	r1, r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	1e5a      	subs	r2, r3, #1
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <__NVIC_SetPriorityGrouping>:
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f003 0307 	and.w	r3, r3, #7
 80088ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80088d0:	4b0c      	ldr	r3, [pc, #48]	; (8008904 <__NVIC_SetPriorityGrouping+0x44>)
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80088dc:	4013      	ands	r3, r2
 80088de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80088e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80088ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80088f2:	4a04      	ldr	r2, [pc, #16]	; (8008904 <__NVIC_SetPriorityGrouping+0x44>)
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	60d3      	str	r3, [r2, #12]
}
 80088f8:	bf00      	nop
 80088fa:	3714      	adds	r7, #20
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bc80      	pop	{r7}
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	e000ed00 	.word	0xe000ed00

08008908 <__NVIC_GetPriorityGrouping>:
{
 8008908:	b480      	push	{r7}
 800890a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800890c:	4b04      	ldr	r3, [pc, #16]	; (8008920 <__NVIC_GetPriorityGrouping+0x18>)
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	0a1b      	lsrs	r3, r3, #8
 8008912:	f003 0307 	and.w	r3, r3, #7
}
 8008916:	4618      	mov	r0, r3
 8008918:	46bd      	mov	sp, r7
 800891a:	bc80      	pop	{r7}
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	e000ed00 	.word	0xe000ed00

08008924 <__NVIC_EnableIRQ>:
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	4603      	mov	r3, r0
 800892c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800892e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008932:	2b00      	cmp	r3, #0
 8008934:	db0b      	blt.n	800894e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	f003 021f 	and.w	r2, r3, #31
 800893c:	4906      	ldr	r1, [pc, #24]	; (8008958 <__NVIC_EnableIRQ+0x34>)
 800893e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008942:	095b      	lsrs	r3, r3, #5
 8008944:	2001      	movs	r0, #1
 8008946:	fa00 f202 	lsl.w	r2, r0, r2
 800894a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800894e:	bf00      	nop
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	bc80      	pop	{r7}
 8008956:	4770      	bx	lr
 8008958:	e000e100 	.word	0xe000e100

0800895c <__NVIC_SetPriority>:
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	6039      	str	r1, [r7, #0]
 8008966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800896c:	2b00      	cmp	r3, #0
 800896e:	db0a      	blt.n	8008986 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	b2da      	uxtb	r2, r3
 8008974:	490c      	ldr	r1, [pc, #48]	; (80089a8 <__NVIC_SetPriority+0x4c>)
 8008976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800897a:	0112      	lsls	r2, r2, #4
 800897c:	b2d2      	uxtb	r2, r2
 800897e:	440b      	add	r3, r1
 8008980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008984:	e00a      	b.n	800899c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	b2da      	uxtb	r2, r3
 800898a:	4908      	ldr	r1, [pc, #32]	; (80089ac <__NVIC_SetPriority+0x50>)
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	3b04      	subs	r3, #4
 8008994:	0112      	lsls	r2, r2, #4
 8008996:	b2d2      	uxtb	r2, r2
 8008998:	440b      	add	r3, r1
 800899a:	761a      	strb	r2, [r3, #24]
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bc80      	pop	{r7}
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	e000e100 	.word	0xe000e100
 80089ac:	e000ed00 	.word	0xe000ed00

080089b0 <NVIC_EncodePriority>:
{
 80089b0:	b480      	push	{r7}
 80089b2:	b089      	sub	sp, #36	; 0x24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f003 0307 	and.w	r3, r3, #7
 80089c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	f1c3 0307 	rsb	r3, r3, #7
 80089ca:	2b04      	cmp	r3, #4
 80089cc:	bf28      	it	cs
 80089ce:	2304      	movcs	r3, #4
 80089d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	3304      	adds	r3, #4
 80089d6:	2b06      	cmp	r3, #6
 80089d8:	d902      	bls.n	80089e0 <NVIC_EncodePriority+0x30>
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	3b03      	subs	r3, #3
 80089de:	e000      	b.n	80089e2 <NVIC_EncodePriority+0x32>
 80089e0:	2300      	movs	r3, #0
 80089e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089e4:	f04f 32ff 	mov.w	r2, #4294967295
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	fa02 f303 	lsl.w	r3, r2, r3
 80089ee:	43da      	mvns	r2, r3
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	401a      	ands	r2, r3
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80089f8:	f04f 31ff 	mov.w	r1, #4294967295
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008a02:	43d9      	mvns	r1, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a08:	4313      	orrs	r3, r2
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3724      	adds	r7, #36	; 0x24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bc80      	pop	{r7}
 8008a12:	4770      	bx	lr

08008a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a24:	d301      	bcc.n	8008a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a26:	2301      	movs	r3, #1
 8008a28:	e00f      	b.n	8008a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a2a:	4a0a      	ldr	r2, [pc, #40]	; (8008a54 <SysTick_Config+0x40>)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a32:	210f      	movs	r1, #15
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
 8008a38:	f7ff ff90 	bl	800895c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a3c:	4b05      	ldr	r3, [pc, #20]	; (8008a54 <SysTick_Config+0x40>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a42:	4b04      	ldr	r3, [pc, #16]	; (8008a54 <SysTick_Config+0x40>)
 8008a44:	2207      	movs	r2, #7
 8008a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	e000e010 	.word	0xe000e010

08008a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7ff ff2d 	bl	80088c0 <__NVIC_SetPriorityGrouping>
}
 8008a66:	bf00      	nop
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b086      	sub	sp, #24
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	4603      	mov	r3, r0
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	607a      	str	r2, [r7, #4]
 8008a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008a80:	f7ff ff42 	bl	8008908 <__NVIC_GetPriorityGrouping>
 8008a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	68b9      	ldr	r1, [r7, #8]
 8008a8a:	6978      	ldr	r0, [r7, #20]
 8008a8c:	f7ff ff90 	bl	80089b0 <NVIC_EncodePriority>
 8008a90:	4602      	mov	r2, r0
 8008a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a96:	4611      	mov	r1, r2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7ff ff5f 	bl	800895c <__NVIC_SetPriority>
}
 8008a9e:	bf00      	nop
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b082      	sub	sp, #8
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	4603      	mov	r3, r0
 8008aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff ff35 	bl	8008924 <__NVIC_EnableIRQ>
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7ff ffa2 	bl	8008a14 <SysTick_Config>
 8008ad0:	4603      	mov	r3, r0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b085      	sub	sp, #20
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d008      	beq.n	8008b04 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2204      	movs	r2, #4
 8008af6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e020      	b.n	8008b46 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f022 020e 	bic.w	r2, r2, #14
 8008b12:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 0201 	bic.w	r2, r2, #1
 8008b22:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8008b32:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3714      	adds	r7, #20
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bc80      	pop	{r7}
 8008b4e:	4770      	bx	lr

08008b50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d005      	beq.n	8008b74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2204      	movs	r2, #4
 8008b6c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	73fb      	strb	r3, [r7, #15]
 8008b72:	e0d6      	b.n	8008d22 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f022 020e 	bic.w	r2, r2, #14
 8008b82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 0201 	bic.w	r2, r2, #1
 8008b92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	4b64      	ldr	r3, [pc, #400]	; (8008d2c <HAL_DMA_Abort_IT+0x1dc>)
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d958      	bls.n	8008c52 <HAL_DMA_Abort_IT+0x102>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a62      	ldr	r2, [pc, #392]	; (8008d30 <HAL_DMA_Abort_IT+0x1e0>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d04f      	beq.n	8008c4a <HAL_DMA_Abort_IT+0xfa>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a61      	ldr	r2, [pc, #388]	; (8008d34 <HAL_DMA_Abort_IT+0x1e4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d048      	beq.n	8008c46 <HAL_DMA_Abort_IT+0xf6>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a5f      	ldr	r2, [pc, #380]	; (8008d38 <HAL_DMA_Abort_IT+0x1e8>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d040      	beq.n	8008c40 <HAL_DMA_Abort_IT+0xf0>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a5e      	ldr	r2, [pc, #376]	; (8008d3c <HAL_DMA_Abort_IT+0x1ec>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d038      	beq.n	8008c3a <HAL_DMA_Abort_IT+0xea>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a5c      	ldr	r2, [pc, #368]	; (8008d40 <HAL_DMA_Abort_IT+0x1f0>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d030      	beq.n	8008c34 <HAL_DMA_Abort_IT+0xe4>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a5b      	ldr	r2, [pc, #364]	; (8008d44 <HAL_DMA_Abort_IT+0x1f4>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d028      	beq.n	8008c2e <HAL_DMA_Abort_IT+0xde>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a52      	ldr	r2, [pc, #328]	; (8008d2c <HAL_DMA_Abort_IT+0x1dc>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d020      	beq.n	8008c28 <HAL_DMA_Abort_IT+0xd8>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a57      	ldr	r2, [pc, #348]	; (8008d48 <HAL_DMA_Abort_IT+0x1f8>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d019      	beq.n	8008c24 <HAL_DMA_Abort_IT+0xd4>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a55      	ldr	r2, [pc, #340]	; (8008d4c <HAL_DMA_Abort_IT+0x1fc>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d012      	beq.n	8008c20 <HAL_DMA_Abort_IT+0xd0>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a54      	ldr	r2, [pc, #336]	; (8008d50 <HAL_DMA_Abort_IT+0x200>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d00a      	beq.n	8008c1a <HAL_DMA_Abort_IT+0xca>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a52      	ldr	r2, [pc, #328]	; (8008d54 <HAL_DMA_Abort_IT+0x204>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d102      	bne.n	8008c14 <HAL_DMA_Abort_IT+0xc4>
 8008c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c12:	e01b      	b.n	8008c4c <HAL_DMA_Abort_IT+0xfc>
 8008c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c18:	e018      	b.n	8008c4c <HAL_DMA_Abort_IT+0xfc>
 8008c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c1e:	e015      	b.n	8008c4c <HAL_DMA_Abort_IT+0xfc>
 8008c20:	2310      	movs	r3, #16
 8008c22:	e013      	b.n	8008c4c <HAL_DMA_Abort_IT+0xfc>
 8008c24:	2301      	movs	r3, #1
 8008c26:	e011      	b.n	8008c4c <HAL_DMA_Abort_IT+0xfc>
 8008c28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c2c:	e00e      	b.n	8008c4c <HAL_DMA_Abort_IT+0xfc>
 8008c2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c32:	e00b      	b.n	8008c4c <HAL_DMA_Abort_IT+0xfc>
 8008c34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c38:	e008      	b.n	8008c4c <HAL_DMA_Abort_IT+0xfc>
 8008c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c3e:	e005      	b.n	8008c4c <HAL_DMA_Abort_IT+0xfc>
 8008c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c44:	e002      	b.n	8008c4c <HAL_DMA_Abort_IT+0xfc>
 8008c46:	2310      	movs	r3, #16
 8008c48:	e000      	b.n	8008c4c <HAL_DMA_Abort_IT+0xfc>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4a42      	ldr	r2, [pc, #264]	; (8008d58 <HAL_DMA_Abort_IT+0x208>)
 8008c4e:	6053      	str	r3, [r2, #4]
 8008c50:	e057      	b.n	8008d02 <HAL_DMA_Abort_IT+0x1b2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a36      	ldr	r2, [pc, #216]	; (8008d30 <HAL_DMA_Abort_IT+0x1e0>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d04f      	beq.n	8008cfc <HAL_DMA_Abort_IT+0x1ac>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a34      	ldr	r2, [pc, #208]	; (8008d34 <HAL_DMA_Abort_IT+0x1e4>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d048      	beq.n	8008cf8 <HAL_DMA_Abort_IT+0x1a8>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a33      	ldr	r2, [pc, #204]	; (8008d38 <HAL_DMA_Abort_IT+0x1e8>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d040      	beq.n	8008cf2 <HAL_DMA_Abort_IT+0x1a2>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a31      	ldr	r2, [pc, #196]	; (8008d3c <HAL_DMA_Abort_IT+0x1ec>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d038      	beq.n	8008cec <HAL_DMA_Abort_IT+0x19c>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a30      	ldr	r2, [pc, #192]	; (8008d40 <HAL_DMA_Abort_IT+0x1f0>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d030      	beq.n	8008ce6 <HAL_DMA_Abort_IT+0x196>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a2e      	ldr	r2, [pc, #184]	; (8008d44 <HAL_DMA_Abort_IT+0x1f4>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d028      	beq.n	8008ce0 <HAL_DMA_Abort_IT+0x190>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a26      	ldr	r2, [pc, #152]	; (8008d2c <HAL_DMA_Abort_IT+0x1dc>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d020      	beq.n	8008cda <HAL_DMA_Abort_IT+0x18a>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a2a      	ldr	r2, [pc, #168]	; (8008d48 <HAL_DMA_Abort_IT+0x1f8>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d019      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x186>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a29      	ldr	r2, [pc, #164]	; (8008d4c <HAL_DMA_Abort_IT+0x1fc>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d012      	beq.n	8008cd2 <HAL_DMA_Abort_IT+0x182>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a27      	ldr	r2, [pc, #156]	; (8008d50 <HAL_DMA_Abort_IT+0x200>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d00a      	beq.n	8008ccc <HAL_DMA_Abort_IT+0x17c>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a26      	ldr	r2, [pc, #152]	; (8008d54 <HAL_DMA_Abort_IT+0x204>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d102      	bne.n	8008cc6 <HAL_DMA_Abort_IT+0x176>
 8008cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cc4:	e01b      	b.n	8008cfe <HAL_DMA_Abort_IT+0x1ae>
 8008cc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cca:	e018      	b.n	8008cfe <HAL_DMA_Abort_IT+0x1ae>
 8008ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cd0:	e015      	b.n	8008cfe <HAL_DMA_Abort_IT+0x1ae>
 8008cd2:	2310      	movs	r3, #16
 8008cd4:	e013      	b.n	8008cfe <HAL_DMA_Abort_IT+0x1ae>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e011      	b.n	8008cfe <HAL_DMA_Abort_IT+0x1ae>
 8008cda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cde:	e00e      	b.n	8008cfe <HAL_DMA_Abort_IT+0x1ae>
 8008ce0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ce4:	e00b      	b.n	8008cfe <HAL_DMA_Abort_IT+0x1ae>
 8008ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cea:	e008      	b.n	8008cfe <HAL_DMA_Abort_IT+0x1ae>
 8008cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cf0:	e005      	b.n	8008cfe <HAL_DMA_Abort_IT+0x1ae>
 8008cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cf6:	e002      	b.n	8008cfe <HAL_DMA_Abort_IT+0x1ae>
 8008cf8:	2310      	movs	r3, #16
 8008cfa:	e000      	b.n	8008cfe <HAL_DMA_Abort_IT+0x1ae>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	4a17      	ldr	r2, [pc, #92]	; (8008d5c <HAL_DMA_Abort_IT+0x20c>)
 8008d00:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	4798      	blx	r3
    } 
  }
  return status;
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	40020080 	.word	0x40020080
 8008d30:	40020008 	.word	0x40020008
 8008d34:	4002001c 	.word	0x4002001c
 8008d38:	40020030 	.word	0x40020030
 8008d3c:	40020044 	.word	0x40020044
 8008d40:	40020058 	.word	0x40020058
 8008d44:	4002006c 	.word	0x4002006c
 8008d48:	40020408 	.word	0x40020408
 8008d4c:	4002041c 	.word	0x4002041c
 8008d50:	40020430 	.word	0x40020430
 8008d54:	40020444 	.word	0x40020444
 8008d58:	40020400 	.word	0x40020400
 8008d5c:	40020000 	.word	0x40020000

08008d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b08b      	sub	sp, #44	; 0x2c
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d72:	e179      	b.n	8009068 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008d74:	2201      	movs	r2, #1
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	69fa      	ldr	r2, [r7, #28]
 8008d84:	4013      	ands	r3, r2
 8008d86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	f040 8168 	bne.w	8009062 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	4a96      	ldr	r2, [pc, #600]	; (8008ff0 <HAL_GPIO_Init+0x290>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d05e      	beq.n	8008e5a <HAL_GPIO_Init+0xfa>
 8008d9c:	4a94      	ldr	r2, [pc, #592]	; (8008ff0 <HAL_GPIO_Init+0x290>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d875      	bhi.n	8008e8e <HAL_GPIO_Init+0x12e>
 8008da2:	4a94      	ldr	r2, [pc, #592]	; (8008ff4 <HAL_GPIO_Init+0x294>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d058      	beq.n	8008e5a <HAL_GPIO_Init+0xfa>
 8008da8:	4a92      	ldr	r2, [pc, #584]	; (8008ff4 <HAL_GPIO_Init+0x294>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d86f      	bhi.n	8008e8e <HAL_GPIO_Init+0x12e>
 8008dae:	4a92      	ldr	r2, [pc, #584]	; (8008ff8 <HAL_GPIO_Init+0x298>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d052      	beq.n	8008e5a <HAL_GPIO_Init+0xfa>
 8008db4:	4a90      	ldr	r2, [pc, #576]	; (8008ff8 <HAL_GPIO_Init+0x298>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d869      	bhi.n	8008e8e <HAL_GPIO_Init+0x12e>
 8008dba:	4a90      	ldr	r2, [pc, #576]	; (8008ffc <HAL_GPIO_Init+0x29c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d04c      	beq.n	8008e5a <HAL_GPIO_Init+0xfa>
 8008dc0:	4a8e      	ldr	r2, [pc, #568]	; (8008ffc <HAL_GPIO_Init+0x29c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d863      	bhi.n	8008e8e <HAL_GPIO_Init+0x12e>
 8008dc6:	4a8e      	ldr	r2, [pc, #568]	; (8009000 <HAL_GPIO_Init+0x2a0>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d046      	beq.n	8008e5a <HAL_GPIO_Init+0xfa>
 8008dcc:	4a8c      	ldr	r2, [pc, #560]	; (8009000 <HAL_GPIO_Init+0x2a0>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d85d      	bhi.n	8008e8e <HAL_GPIO_Init+0x12e>
 8008dd2:	2b12      	cmp	r3, #18
 8008dd4:	d82a      	bhi.n	8008e2c <HAL_GPIO_Init+0xcc>
 8008dd6:	2b12      	cmp	r3, #18
 8008dd8:	d859      	bhi.n	8008e8e <HAL_GPIO_Init+0x12e>
 8008dda:	a201      	add	r2, pc, #4	; (adr r2, 8008de0 <HAL_GPIO_Init+0x80>)
 8008ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de0:	08008e5b 	.word	0x08008e5b
 8008de4:	08008e35 	.word	0x08008e35
 8008de8:	08008e47 	.word	0x08008e47
 8008dec:	08008e89 	.word	0x08008e89
 8008df0:	08008e8f 	.word	0x08008e8f
 8008df4:	08008e8f 	.word	0x08008e8f
 8008df8:	08008e8f 	.word	0x08008e8f
 8008dfc:	08008e8f 	.word	0x08008e8f
 8008e00:	08008e8f 	.word	0x08008e8f
 8008e04:	08008e8f 	.word	0x08008e8f
 8008e08:	08008e8f 	.word	0x08008e8f
 8008e0c:	08008e8f 	.word	0x08008e8f
 8008e10:	08008e8f 	.word	0x08008e8f
 8008e14:	08008e8f 	.word	0x08008e8f
 8008e18:	08008e8f 	.word	0x08008e8f
 8008e1c:	08008e8f 	.word	0x08008e8f
 8008e20:	08008e8f 	.word	0x08008e8f
 8008e24:	08008e3d 	.word	0x08008e3d
 8008e28:	08008e51 	.word	0x08008e51
 8008e2c:	4a75      	ldr	r2, [pc, #468]	; (8009004 <HAL_GPIO_Init+0x2a4>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d013      	beq.n	8008e5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008e32:	e02c      	b.n	8008e8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	623b      	str	r3, [r7, #32]
          break;
 8008e3a:	e029      	b.n	8008e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	3304      	adds	r3, #4
 8008e42:	623b      	str	r3, [r7, #32]
          break;
 8008e44:	e024      	b.n	8008e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	623b      	str	r3, [r7, #32]
          break;
 8008e4e:	e01f      	b.n	8008e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	330c      	adds	r3, #12
 8008e56:	623b      	str	r3, [r7, #32]
          break;
 8008e58:	e01a      	b.n	8008e90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d102      	bne.n	8008e68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008e62:	2304      	movs	r3, #4
 8008e64:	623b      	str	r3, [r7, #32]
          break;
 8008e66:	e013      	b.n	8008e90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d105      	bne.n	8008e7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008e70:	2308      	movs	r3, #8
 8008e72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	69fa      	ldr	r2, [r7, #28]
 8008e78:	611a      	str	r2, [r3, #16]
          break;
 8008e7a:	e009      	b.n	8008e90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008e7c:	2308      	movs	r3, #8
 8008e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	69fa      	ldr	r2, [r7, #28]
 8008e84:	615a      	str	r2, [r3, #20]
          break;
 8008e86:	e003      	b.n	8008e90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	623b      	str	r3, [r7, #32]
          break;
 8008e8c:	e000      	b.n	8008e90 <HAL_GPIO_Init+0x130>
          break;
 8008e8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	2bff      	cmp	r3, #255	; 0xff
 8008e94:	d801      	bhi.n	8008e9a <HAL_GPIO_Init+0x13a>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	e001      	b.n	8008e9e <HAL_GPIO_Init+0x13e>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	2bff      	cmp	r3, #255	; 0xff
 8008ea4:	d802      	bhi.n	8008eac <HAL_GPIO_Init+0x14c>
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	e002      	b.n	8008eb2 <HAL_GPIO_Init+0x152>
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	3b08      	subs	r3, #8
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	210f      	movs	r1, #15
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec0:	43db      	mvns	r3, r3
 8008ec2:	401a      	ands	r2, r3
 8008ec4:	6a39      	ldr	r1, [r7, #32]
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ecc:	431a      	orrs	r2, r3
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f000 80c1 	beq.w	8009062 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008ee0:	4b49      	ldr	r3, [pc, #292]	; (8009008 <HAL_GPIO_Init+0x2a8>)
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	4a48      	ldr	r2, [pc, #288]	; (8009008 <HAL_GPIO_Init+0x2a8>)
 8008ee6:	f043 0301 	orr.w	r3, r3, #1
 8008eea:	6193      	str	r3, [r2, #24]
 8008eec:	4b46      	ldr	r3, [pc, #280]	; (8009008 <HAL_GPIO_Init+0x2a8>)
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	60bb      	str	r3, [r7, #8]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008ef8:	4a44      	ldr	r2, [pc, #272]	; (800900c <HAL_GPIO_Init+0x2ac>)
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	089b      	lsrs	r3, r3, #2
 8008efe:	3302      	adds	r3, #2
 8008f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	f003 0303 	and.w	r3, r3, #3
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	220f      	movs	r2, #15
 8008f10:	fa02 f303 	lsl.w	r3, r2, r3
 8008f14:	43db      	mvns	r3, r3
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	4013      	ands	r3, r2
 8008f1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a3c      	ldr	r2, [pc, #240]	; (8009010 <HAL_GPIO_Init+0x2b0>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d01f      	beq.n	8008f64 <HAL_GPIO_Init+0x204>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a3b      	ldr	r2, [pc, #236]	; (8009014 <HAL_GPIO_Init+0x2b4>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d019      	beq.n	8008f60 <HAL_GPIO_Init+0x200>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a3a      	ldr	r2, [pc, #232]	; (8009018 <HAL_GPIO_Init+0x2b8>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d013      	beq.n	8008f5c <HAL_GPIO_Init+0x1fc>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a39      	ldr	r2, [pc, #228]	; (800901c <HAL_GPIO_Init+0x2bc>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00d      	beq.n	8008f58 <HAL_GPIO_Init+0x1f8>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a38      	ldr	r2, [pc, #224]	; (8009020 <HAL_GPIO_Init+0x2c0>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d007      	beq.n	8008f54 <HAL_GPIO_Init+0x1f4>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a37      	ldr	r2, [pc, #220]	; (8009024 <HAL_GPIO_Init+0x2c4>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d101      	bne.n	8008f50 <HAL_GPIO_Init+0x1f0>
 8008f4c:	2305      	movs	r3, #5
 8008f4e:	e00a      	b.n	8008f66 <HAL_GPIO_Init+0x206>
 8008f50:	2306      	movs	r3, #6
 8008f52:	e008      	b.n	8008f66 <HAL_GPIO_Init+0x206>
 8008f54:	2304      	movs	r3, #4
 8008f56:	e006      	b.n	8008f66 <HAL_GPIO_Init+0x206>
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e004      	b.n	8008f66 <HAL_GPIO_Init+0x206>
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e002      	b.n	8008f66 <HAL_GPIO_Init+0x206>
 8008f60:	2301      	movs	r3, #1
 8008f62:	e000      	b.n	8008f66 <HAL_GPIO_Init+0x206>
 8008f64:	2300      	movs	r3, #0
 8008f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f68:	f002 0203 	and.w	r2, r2, #3
 8008f6c:	0092      	lsls	r2, r2, #2
 8008f6e:	4093      	lsls	r3, r2
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008f76:	4925      	ldr	r1, [pc, #148]	; (800900c <HAL_GPIO_Init+0x2ac>)
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	089b      	lsrs	r3, r3, #2
 8008f7c:	3302      	adds	r3, #2
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d006      	beq.n	8008f9e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008f90:	4b25      	ldr	r3, [pc, #148]	; (8009028 <HAL_GPIO_Init+0x2c8>)
 8008f92:	689a      	ldr	r2, [r3, #8]
 8008f94:	4924      	ldr	r1, [pc, #144]	; (8009028 <HAL_GPIO_Init+0x2c8>)
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	608b      	str	r3, [r1, #8]
 8008f9c:	e006      	b.n	8008fac <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008f9e:	4b22      	ldr	r3, [pc, #136]	; (8009028 <HAL_GPIO_Init+0x2c8>)
 8008fa0:	689a      	ldr	r2, [r3, #8]
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	43db      	mvns	r3, r3
 8008fa6:	4920      	ldr	r1, [pc, #128]	; (8009028 <HAL_GPIO_Init+0x2c8>)
 8008fa8:	4013      	ands	r3, r2
 8008faa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d006      	beq.n	8008fc6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008fb8:	4b1b      	ldr	r3, [pc, #108]	; (8009028 <HAL_GPIO_Init+0x2c8>)
 8008fba:	68da      	ldr	r2, [r3, #12]
 8008fbc:	491a      	ldr	r1, [pc, #104]	; (8009028 <HAL_GPIO_Init+0x2c8>)
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	60cb      	str	r3, [r1, #12]
 8008fc4:	e006      	b.n	8008fd4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008fc6:	4b18      	ldr	r3, [pc, #96]	; (8009028 <HAL_GPIO_Init+0x2c8>)
 8008fc8:	68da      	ldr	r2, [r3, #12]
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	43db      	mvns	r3, r3
 8008fce:	4916      	ldr	r1, [pc, #88]	; (8009028 <HAL_GPIO_Init+0x2c8>)
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d025      	beq.n	800902c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008fe0:	4b11      	ldr	r3, [pc, #68]	; (8009028 <HAL_GPIO_Init+0x2c8>)
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	4910      	ldr	r1, [pc, #64]	; (8009028 <HAL_GPIO_Init+0x2c8>)
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	604b      	str	r3, [r1, #4]
 8008fec:	e025      	b.n	800903a <HAL_GPIO_Init+0x2da>
 8008fee:	bf00      	nop
 8008ff0:	10320000 	.word	0x10320000
 8008ff4:	10310000 	.word	0x10310000
 8008ff8:	10220000 	.word	0x10220000
 8008ffc:	10210000 	.word	0x10210000
 8009000:	10120000 	.word	0x10120000
 8009004:	10110000 	.word	0x10110000
 8009008:	40021000 	.word	0x40021000
 800900c:	40010000 	.word	0x40010000
 8009010:	40010800 	.word	0x40010800
 8009014:	40010c00 	.word	0x40010c00
 8009018:	40011000 	.word	0x40011000
 800901c:	40011400 	.word	0x40011400
 8009020:	40011800 	.word	0x40011800
 8009024:	40011c00 	.word	0x40011c00
 8009028:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800902c:	4b15      	ldr	r3, [pc, #84]	; (8009084 <HAL_GPIO_Init+0x324>)
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	43db      	mvns	r3, r3
 8009034:	4913      	ldr	r1, [pc, #76]	; (8009084 <HAL_GPIO_Init+0x324>)
 8009036:	4013      	ands	r3, r2
 8009038:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d006      	beq.n	8009054 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009046:	4b0f      	ldr	r3, [pc, #60]	; (8009084 <HAL_GPIO_Init+0x324>)
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	490e      	ldr	r1, [pc, #56]	; (8009084 <HAL_GPIO_Init+0x324>)
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	4313      	orrs	r3, r2
 8009050:	600b      	str	r3, [r1, #0]
 8009052:	e006      	b.n	8009062 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009054:	4b0b      	ldr	r3, [pc, #44]	; (8009084 <HAL_GPIO_Init+0x324>)
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	43db      	mvns	r3, r3
 800905c:	4909      	ldr	r1, [pc, #36]	; (8009084 <HAL_GPIO_Init+0x324>)
 800905e:	4013      	ands	r3, r2
 8009060:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	3301      	adds	r3, #1
 8009066:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	fa22 f303 	lsr.w	r3, r2, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	f47f ae7e 	bne.w	8008d74 <HAL_GPIO_Init+0x14>
  }
}
 8009078:	bf00      	nop
 800907a:	bf00      	nop
 800907c:	372c      	adds	r7, #44	; 0x2c
 800907e:	46bd      	mov	sp, r7
 8009080:	bc80      	pop	{r7}
 8009082:	4770      	bx	lr
 8009084:	40010400 	.word	0x40010400

08009088 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009088:	b480      	push	{r7}
 800908a:	b089      	sub	sp, #36	; 0x24
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009092:	2300      	movs	r3, #0
 8009094:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009096:	e0a6      	b.n	80091e6 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009098:	2201      	movs	r2, #1
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	fa02 f303 	lsl.w	r3, r2, r3
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	4013      	ands	r3, r2
 80090a4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 8099 	beq.w	80091e0 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80090ae:	4a54      	ldr	r2, [pc, #336]	; (8009200 <HAL_GPIO_DeInit+0x178>)
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	089b      	lsrs	r3, r3, #2
 80090b4:	3302      	adds	r3, #2
 80090b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ba:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	f003 0303 	and.w	r3, r3, #3
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	220f      	movs	r2, #15
 80090c6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	4013      	ands	r3, r2
 80090ce:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a4c      	ldr	r2, [pc, #304]	; (8009204 <HAL_GPIO_DeInit+0x17c>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d01f      	beq.n	8009118 <HAL_GPIO_DeInit+0x90>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a4b      	ldr	r2, [pc, #300]	; (8009208 <HAL_GPIO_DeInit+0x180>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d019      	beq.n	8009114 <HAL_GPIO_DeInit+0x8c>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a4a      	ldr	r2, [pc, #296]	; (800920c <HAL_GPIO_DeInit+0x184>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d013      	beq.n	8009110 <HAL_GPIO_DeInit+0x88>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a49      	ldr	r2, [pc, #292]	; (8009210 <HAL_GPIO_DeInit+0x188>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d00d      	beq.n	800910c <HAL_GPIO_DeInit+0x84>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a48      	ldr	r2, [pc, #288]	; (8009214 <HAL_GPIO_DeInit+0x18c>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d007      	beq.n	8009108 <HAL_GPIO_DeInit+0x80>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a47      	ldr	r2, [pc, #284]	; (8009218 <HAL_GPIO_DeInit+0x190>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d101      	bne.n	8009104 <HAL_GPIO_DeInit+0x7c>
 8009100:	2305      	movs	r3, #5
 8009102:	e00a      	b.n	800911a <HAL_GPIO_DeInit+0x92>
 8009104:	2306      	movs	r3, #6
 8009106:	e008      	b.n	800911a <HAL_GPIO_DeInit+0x92>
 8009108:	2304      	movs	r3, #4
 800910a:	e006      	b.n	800911a <HAL_GPIO_DeInit+0x92>
 800910c:	2303      	movs	r3, #3
 800910e:	e004      	b.n	800911a <HAL_GPIO_DeInit+0x92>
 8009110:	2302      	movs	r3, #2
 8009112:	e002      	b.n	800911a <HAL_GPIO_DeInit+0x92>
 8009114:	2301      	movs	r3, #1
 8009116:	e000      	b.n	800911a <HAL_GPIO_DeInit+0x92>
 8009118:	2300      	movs	r3, #0
 800911a:	69fa      	ldr	r2, [r7, #28]
 800911c:	f002 0203 	and.w	r2, r2, #3
 8009120:	0092      	lsls	r2, r2, #2
 8009122:	4093      	lsls	r3, r2
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	429a      	cmp	r2, r3
 8009128:	d132      	bne.n	8009190 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800912a:	4b3c      	ldr	r3, [pc, #240]	; (800921c <HAL_GPIO_DeInit+0x194>)
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	43db      	mvns	r3, r3
 8009132:	493a      	ldr	r1, [pc, #232]	; (800921c <HAL_GPIO_DeInit+0x194>)
 8009134:	4013      	ands	r3, r2
 8009136:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009138:	4b38      	ldr	r3, [pc, #224]	; (800921c <HAL_GPIO_DeInit+0x194>)
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	43db      	mvns	r3, r3
 8009140:	4936      	ldr	r1, [pc, #216]	; (800921c <HAL_GPIO_DeInit+0x194>)
 8009142:	4013      	ands	r3, r2
 8009144:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009146:	4b35      	ldr	r3, [pc, #212]	; (800921c <HAL_GPIO_DeInit+0x194>)
 8009148:	68da      	ldr	r2, [r3, #12]
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	43db      	mvns	r3, r3
 800914e:	4933      	ldr	r1, [pc, #204]	; (800921c <HAL_GPIO_DeInit+0x194>)
 8009150:	4013      	ands	r3, r2
 8009152:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009154:	4b31      	ldr	r3, [pc, #196]	; (800921c <HAL_GPIO_DeInit+0x194>)
 8009156:	689a      	ldr	r2, [r3, #8]
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	43db      	mvns	r3, r3
 800915c:	492f      	ldr	r1, [pc, #188]	; (800921c <HAL_GPIO_DeInit+0x194>)
 800915e:	4013      	ands	r3, r2
 8009160:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	f003 0303 	and.w	r3, r3, #3
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	220f      	movs	r2, #15
 800916c:	fa02 f303 	lsl.w	r3, r2, r3
 8009170:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009172:	4a23      	ldr	r2, [pc, #140]	; (8009200 <HAL_GPIO_DeInit+0x178>)
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	089b      	lsrs	r3, r3, #2
 8009178:	3302      	adds	r3, #2
 800917a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	43da      	mvns	r2, r3
 8009182:	481f      	ldr	r0, [pc, #124]	; (8009200 <HAL_GPIO_DeInit+0x178>)
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	089b      	lsrs	r3, r3, #2
 8009188:	400a      	ands	r2, r1
 800918a:	3302      	adds	r3, #2
 800918c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	2bff      	cmp	r3, #255	; 0xff
 8009194:	d801      	bhi.n	800919a <HAL_GPIO_DeInit+0x112>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	e001      	b.n	800919e <HAL_GPIO_DeInit+0x116>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	3304      	adds	r3, #4
 800919e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	2bff      	cmp	r3, #255	; 0xff
 80091a4:	d802      	bhi.n	80091ac <HAL_GPIO_DeInit+0x124>
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	e002      	b.n	80091b2 <HAL_GPIO_DeInit+0x12a>
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	3b08      	subs	r3, #8
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	210f      	movs	r1, #15
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	fa01 f303 	lsl.w	r3, r1, r3
 80091c0:	43db      	mvns	r3, r3
 80091c2:	401a      	ands	r2, r3
 80091c4:	2104      	movs	r1, #4
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	fa01 f303 	lsl.w	r3, r1, r3
 80091cc:	431a      	orrs	r2, r3
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	43db      	mvns	r3, r3
 80091da:	401a      	ands	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	60da      	str	r2, [r3, #12]
    }

    position++;
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	3301      	adds	r3, #1
 80091e4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	fa22 f303 	lsr.w	r3, r2, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f47f af52 	bne.w	8009098 <HAL_GPIO_DeInit+0x10>
  }
}
 80091f4:	bf00      	nop
 80091f6:	bf00      	nop
 80091f8:	3724      	adds	r7, #36	; 0x24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bc80      	pop	{r7}
 80091fe:	4770      	bx	lr
 8009200:	40010000 	.word	0x40010000
 8009204:	40010800 	.word	0x40010800
 8009208:	40010c00 	.word	0x40010c00
 800920c:	40011000 	.word	0x40011000
 8009210:	40011400 	.word	0x40011400
 8009214:	40011800 	.word	0x40011800
 8009218:	40011c00 	.word	0x40011c00
 800921c:	40010400 	.word	0x40010400

08009220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689a      	ldr	r2, [r3, #8]
 8009230:	887b      	ldrh	r3, [r7, #2]
 8009232:	4013      	ands	r3, r2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009238:	2301      	movs	r3, #1
 800923a:	73fb      	strb	r3, [r7, #15]
 800923c:	e001      	b.n	8009242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009242:	7bfb      	ldrb	r3, [r7, #15]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	bc80      	pop	{r7}
 800924c:	4770      	bx	lr

0800924e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800924e:	b480      	push	{r7}
 8009250:	b083      	sub	sp, #12
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	807b      	strh	r3, [r7, #2]
 800925a:	4613      	mov	r3, r2
 800925c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800925e:	787b      	ldrb	r3, [r7, #1]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d003      	beq.n	800926c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009264:	887a      	ldrh	r2, [r7, #2]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800926a:	e003      	b.n	8009274 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800926c:	887b      	ldrh	r3, [r7, #2]
 800926e:	041a      	lsls	r2, r3, #16
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	611a      	str	r2, [r3, #16]
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	bc80      	pop	{r7}
 800927c:	4770      	bx	lr

0800927e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800927e:	b480      	push	{r7}
 8009280:	b085      	sub	sp, #20
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009290:	887a      	ldrh	r2, [r7, #2]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	4013      	ands	r3, r2
 8009296:	041a      	lsls	r2, r3, #16
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	43d9      	mvns	r1, r3
 800929c:	887b      	ldrh	r3, [r7, #2]
 800929e:	400b      	ands	r3, r1
 80092a0:	431a      	orrs	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	611a      	str	r2, [r3, #16]
}
 80092a6:	bf00      	nop
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bc80      	pop	{r7}
 80092ae:	4770      	bx	lr

080092b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e12b      	b.n	800951a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d106      	bne.n	80092dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f7fe fff8 	bl	80082cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2224      	movs	r2, #36	; 0x24
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f022 0201 	bic.w	r2, r2, #1
 80092f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009302:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009312:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009314:	f001 fdb8 	bl	800ae88 <HAL_RCC_GetPCLK1Freq>
 8009318:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	4a81      	ldr	r2, [pc, #516]	; (8009524 <HAL_I2C_Init+0x274>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d807      	bhi.n	8009334 <HAL_I2C_Init+0x84>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4a80      	ldr	r2, [pc, #512]	; (8009528 <HAL_I2C_Init+0x278>)
 8009328:	4293      	cmp	r3, r2
 800932a:	bf94      	ite	ls
 800932c:	2301      	movls	r3, #1
 800932e:	2300      	movhi	r3, #0
 8009330:	b2db      	uxtb	r3, r3
 8009332:	e006      	b.n	8009342 <HAL_I2C_Init+0x92>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4a7d      	ldr	r2, [pc, #500]	; (800952c <HAL_I2C_Init+0x27c>)
 8009338:	4293      	cmp	r3, r2
 800933a:	bf94      	ite	ls
 800933c:	2301      	movls	r3, #1
 800933e:	2300      	movhi	r3, #0
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b00      	cmp	r3, #0
 8009344:	d001      	beq.n	800934a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e0e7      	b.n	800951a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	4a78      	ldr	r2, [pc, #480]	; (8009530 <HAL_I2C_Init+0x280>)
 800934e:	fba2 2303 	umull	r2, r3, r2, r3
 8009352:	0c9b      	lsrs	r3, r3, #18
 8009354:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	430a      	orrs	r2, r1
 8009368:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6a1b      	ldr	r3, [r3, #32]
 8009370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	4a6a      	ldr	r2, [pc, #424]	; (8009524 <HAL_I2C_Init+0x274>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d802      	bhi.n	8009384 <HAL_I2C_Init+0xd4>
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	3301      	adds	r3, #1
 8009382:	e009      	b.n	8009398 <HAL_I2C_Init+0xe8>
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800938a:	fb02 f303 	mul.w	r3, r2, r3
 800938e:	4a69      	ldr	r2, [pc, #420]	; (8009534 <HAL_I2C_Init+0x284>)
 8009390:	fba2 2303 	umull	r2, r3, r2, r3
 8009394:	099b      	lsrs	r3, r3, #6
 8009396:	3301      	adds	r3, #1
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	6812      	ldr	r2, [r2, #0]
 800939c:	430b      	orrs	r3, r1
 800939e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80093aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	495c      	ldr	r1, [pc, #368]	; (8009524 <HAL_I2C_Init+0x274>)
 80093b4:	428b      	cmp	r3, r1
 80093b6:	d819      	bhi.n	80093ec <HAL_I2C_Init+0x13c>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	1e59      	subs	r1, r3, #1
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80093c6:	1c59      	adds	r1, r3, #1
 80093c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80093cc:	400b      	ands	r3, r1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00a      	beq.n	80093e8 <HAL_I2C_Init+0x138>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	1e59      	subs	r1, r3, #1
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80093e0:	3301      	adds	r3, #1
 80093e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093e6:	e051      	b.n	800948c <HAL_I2C_Init+0x1dc>
 80093e8:	2304      	movs	r3, #4
 80093ea:	e04f      	b.n	800948c <HAL_I2C_Init+0x1dc>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d111      	bne.n	8009418 <HAL_I2C_Init+0x168>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	1e58      	subs	r0, r3, #1
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6859      	ldr	r1, [r3, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	005b      	lsls	r3, r3, #1
 8009400:	440b      	add	r3, r1
 8009402:	fbb0 f3f3 	udiv	r3, r0, r3
 8009406:	3301      	adds	r3, #1
 8009408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800940c:	2b00      	cmp	r3, #0
 800940e:	bf0c      	ite	eq
 8009410:	2301      	moveq	r3, #1
 8009412:	2300      	movne	r3, #0
 8009414:	b2db      	uxtb	r3, r3
 8009416:	e012      	b.n	800943e <HAL_I2C_Init+0x18e>
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	1e58      	subs	r0, r3, #1
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6859      	ldr	r1, [r3, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	440b      	add	r3, r1
 8009426:	0099      	lsls	r1, r3, #2
 8009428:	440b      	add	r3, r1
 800942a:	fbb0 f3f3 	udiv	r3, r0, r3
 800942e:	3301      	adds	r3, #1
 8009430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009434:	2b00      	cmp	r3, #0
 8009436:	bf0c      	ite	eq
 8009438:	2301      	moveq	r3, #1
 800943a:	2300      	movne	r3, #0
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <HAL_I2C_Init+0x196>
 8009442:	2301      	movs	r3, #1
 8009444:	e022      	b.n	800948c <HAL_I2C_Init+0x1dc>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10e      	bne.n	800946c <HAL_I2C_Init+0x1bc>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	1e58      	subs	r0, r3, #1
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6859      	ldr	r1, [r3, #4]
 8009456:	460b      	mov	r3, r1
 8009458:	005b      	lsls	r3, r3, #1
 800945a:	440b      	add	r3, r1
 800945c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009460:	3301      	adds	r3, #1
 8009462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800946a:	e00f      	b.n	800948c <HAL_I2C_Init+0x1dc>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	1e58      	subs	r0, r3, #1
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6859      	ldr	r1, [r3, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	440b      	add	r3, r1
 800947a:	0099      	lsls	r1, r3, #2
 800947c:	440b      	add	r3, r1
 800947e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009482:	3301      	adds	r3, #1
 8009484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009488:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800948c:	6879      	ldr	r1, [r7, #4]
 800948e:	6809      	ldr	r1, [r1, #0]
 8009490:	4313      	orrs	r3, r2
 8009492:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	69da      	ldr	r2, [r3, #28]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a1b      	ldr	r3, [r3, #32]
 80094a6:	431a      	orrs	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	430a      	orrs	r2, r1
 80094ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80094ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	6911      	ldr	r1, [r2, #16]
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	68d2      	ldr	r2, [r2, #12]
 80094c6:	4311      	orrs	r1, r2
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	6812      	ldr	r2, [r2, #0]
 80094cc:	430b      	orrs	r3, r1
 80094ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	695a      	ldr	r2, [r3, #20]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	431a      	orrs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	430a      	orrs	r2, r1
 80094ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f042 0201 	orr.w	r2, r2, #1
 80094fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2220      	movs	r2, #32
 8009506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	000186a0 	.word	0x000186a0
 8009528:	001e847f 	.word	0x001e847f
 800952c:	003d08ff 	.word	0x003d08ff
 8009530:	431bde83 	.word	0x431bde83
 8009534:	10624dd3 	.word	0x10624dd3

08009538 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e021      	b.n	800958e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2224      	movs	r2, #36	; 0x24
 800954e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f022 0201 	bic.w	r2, r2, #1
 8009560:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7fe fef0 	bl	8008348 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b088      	sub	sp, #32
 800959c:	af02      	add	r7, sp, #8
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	607a      	str	r2, [r7, #4]
 80095a2:	461a      	mov	r2, r3
 80095a4:	460b      	mov	r3, r1
 80095a6:	817b      	strh	r3, [r7, #10]
 80095a8:	4613      	mov	r3, r2
 80095aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80095ac:	f7ff f85e 	bl	800866c <HAL_GetTick>
 80095b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b20      	cmp	r3, #32
 80095bc:	f040 80e0 	bne.w	8009780 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	2319      	movs	r3, #25
 80095c6:	2201      	movs	r2, #1
 80095c8:	4970      	ldr	r1, [pc, #448]	; (800978c <HAL_I2C_Master_Transmit+0x1f4>)
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f000 fe5c 	bl	800a288 <I2C_WaitOnFlagUntilTimeout>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80095d6:	2302      	movs	r3, #2
 80095d8:	e0d3      	b.n	8009782 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d101      	bne.n	80095e8 <HAL_I2C_Master_Transmit+0x50>
 80095e4:	2302      	movs	r3, #2
 80095e6:	e0cc      	b.n	8009782 <HAL_I2C_Master_Transmit+0x1ea>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d007      	beq.n	800960e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f042 0201 	orr.w	r2, r2, #1
 800960c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800961c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2221      	movs	r2, #33	; 0x21
 8009622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2210      	movs	r2, #16
 800962a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	893a      	ldrh	r2, [r7, #8]
 800963e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009644:	b29a      	uxth	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	4a50      	ldr	r2, [pc, #320]	; (8009790 <HAL_I2C_Master_Transmit+0x1f8>)
 800964e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009650:	8979      	ldrh	r1, [r7, #10]
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	6a3a      	ldr	r2, [r7, #32]
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 fc16 	bl	8009e88 <I2C_MasterRequestWrite>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e08d      	b.n	8009782 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009666:	2300      	movs	r3, #0
 8009668:	613b      	str	r3, [r7, #16]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	695b      	ldr	r3, [r3, #20]
 8009670:	613b      	str	r3, [r7, #16]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	613b      	str	r3, [r7, #16]
 800967a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800967c:	e066      	b.n	800974c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	6a39      	ldr	r1, [r7, #32]
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 ff1a 	bl	800a4bc <I2C_WaitOnTXEFlagUntilTimeout>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00d      	beq.n	80096aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009692:	2b04      	cmp	r3, #4
 8009694:	d107      	bne.n	80096a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e06b      	b.n	8009782 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ae:	781a      	ldrb	r2, [r3, #0]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ba:	1c5a      	adds	r2, r3, #1
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	3b01      	subs	r3, #1
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d2:	3b01      	subs	r3, #1
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	695b      	ldr	r3, [r3, #20]
 80096e0:	f003 0304 	and.w	r3, r3, #4
 80096e4:	2b04      	cmp	r3, #4
 80096e6:	d11b      	bne.n	8009720 <HAL_I2C_Master_Transmit+0x188>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d017      	beq.n	8009720 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f4:	781a      	ldrb	r2, [r3, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800970a:	b29b      	uxth	r3, r3
 800970c:	3b01      	subs	r3, #1
 800970e:	b29a      	uxth	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009718:	3b01      	subs	r3, #1
 800971a:	b29a      	uxth	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	6a39      	ldr	r1, [r7, #32]
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f000 ff11 	bl	800a54c <I2C_WaitOnBTFFlagUntilTimeout>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00d      	beq.n	800974c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009734:	2b04      	cmp	r3, #4
 8009736:	d107      	bne.n	8009748 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009746:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e01a      	b.n	8009782 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009750:	2b00      	cmp	r3, #0
 8009752:	d194      	bne.n	800967e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2220      	movs	r2, #32
 8009768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	e000      	b.n	8009782 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009780:	2302      	movs	r3, #2
  }
}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	00100002 	.word	0x00100002
 8009790:	ffff0000 	.word	0xffff0000

08009794 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b088      	sub	sp, #32
 8009798:	af02      	add	r7, sp, #8
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	4608      	mov	r0, r1
 800979e:	4611      	mov	r1, r2
 80097a0:	461a      	mov	r2, r3
 80097a2:	4603      	mov	r3, r0
 80097a4:	817b      	strh	r3, [r7, #10]
 80097a6:	460b      	mov	r3, r1
 80097a8:	813b      	strh	r3, [r7, #8]
 80097aa:	4613      	mov	r3, r2
 80097ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80097ae:	f7fe ff5d 	bl	800866c <HAL_GetTick>
 80097b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b20      	cmp	r3, #32
 80097be:	f040 80d9 	bne.w	8009974 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	2319      	movs	r3, #25
 80097c8:	2201      	movs	r2, #1
 80097ca:	496d      	ldr	r1, [pc, #436]	; (8009980 <HAL_I2C_Mem_Write+0x1ec>)
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f000 fd5b 	bl	800a288 <I2C_WaitOnFlagUntilTimeout>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d001      	beq.n	80097dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80097d8:	2302      	movs	r3, #2
 80097da:	e0cc      	b.n	8009976 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d101      	bne.n	80097ea <HAL_I2C_Mem_Write+0x56>
 80097e6:	2302      	movs	r3, #2
 80097e8:	e0c5      	b.n	8009976 <HAL_I2C_Mem_Write+0x1e2>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d007      	beq.n	8009810 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0201 	orr.w	r2, r2, #1
 800980e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800981e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2221      	movs	r2, #33	; 0x21
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2240      	movs	r2, #64	; 0x40
 800982c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6a3a      	ldr	r2, [r7, #32]
 800983a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009840:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009846:	b29a      	uxth	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	4a4d      	ldr	r2, [pc, #308]	; (8009984 <HAL_I2C_Mem_Write+0x1f0>)
 8009850:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009852:	88f8      	ldrh	r0, [r7, #6]
 8009854:	893a      	ldrh	r2, [r7, #8]
 8009856:	8979      	ldrh	r1, [r7, #10]
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	9301      	str	r3, [sp, #4]
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	4603      	mov	r3, r0
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 fb92 	bl	8009f8c <I2C_RequestMemoryWrite>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d052      	beq.n	8009914 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e081      	b.n	8009976 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 fe20 	bl	800a4bc <I2C_WaitOnTXEFlagUntilTimeout>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00d      	beq.n	800989e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009886:	2b04      	cmp	r3, #4
 8009888:	d107      	bne.n	800989a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009898:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e06b      	b.n	8009976 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a2:	781a      	ldrb	r2, [r3, #0]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098b8:	3b01      	subs	r3, #1
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	3b01      	subs	r3, #1
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	f003 0304 	and.w	r3, r3, #4
 80098d8:	2b04      	cmp	r3, #4
 80098da:	d11b      	bne.n	8009914 <HAL_I2C_Mem_Write+0x180>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d017      	beq.n	8009914 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e8:	781a      	ldrb	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f4:	1c5a      	adds	r2, r3, #1
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098fe:	3b01      	subs	r3, #1
 8009900:	b29a      	uxth	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800990a:	b29b      	uxth	r3, r3
 800990c:	3b01      	subs	r3, #1
 800990e:	b29a      	uxth	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1aa      	bne.n	8009872 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 fe13 	bl	800a54c <I2C_WaitOnBTFFlagUntilTimeout>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00d      	beq.n	8009948 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009930:	2b04      	cmp	r3, #4
 8009932:	d107      	bne.n	8009944 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009942:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e016      	b.n	8009976 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2220      	movs	r2, #32
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009970:	2300      	movs	r3, #0
 8009972:	e000      	b.n	8009976 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009974:	2302      	movs	r3, #2
  }
}
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	00100002 	.word	0x00100002
 8009984:	ffff0000 	.word	0xffff0000

08009988 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08c      	sub	sp, #48	; 0x30
 800998c:	af02      	add	r7, sp, #8
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	4608      	mov	r0, r1
 8009992:	4611      	mov	r1, r2
 8009994:	461a      	mov	r2, r3
 8009996:	4603      	mov	r3, r0
 8009998:	817b      	strh	r3, [r7, #10]
 800999a:	460b      	mov	r3, r1
 800999c:	813b      	strh	r3, [r7, #8]
 800999e:	4613      	mov	r3, r2
 80099a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80099a6:	f7fe fe61 	bl	800866c <HAL_GetTick>
 80099aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b20      	cmp	r3, #32
 80099b6:	f040 8244 	bne.w	8009e42 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	2319      	movs	r3, #25
 80099c0:	2201      	movs	r2, #1
 80099c2:	4982      	ldr	r1, [pc, #520]	; (8009bcc <HAL_I2C_Mem_Read+0x244>)
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 fc5f 	bl	800a288 <I2C_WaitOnFlagUntilTimeout>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80099d0:	2302      	movs	r3, #2
 80099d2:	e237      	b.n	8009e44 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d101      	bne.n	80099e2 <HAL_I2C_Mem_Read+0x5a>
 80099de:	2302      	movs	r3, #2
 80099e0:	e230      	b.n	8009e44 <HAL_I2C_Mem_Read+0x4bc>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d007      	beq.n	8009a08 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f042 0201 	orr.w	r2, r2, #1
 8009a06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2222      	movs	r2, #34	; 0x22
 8009a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2240      	movs	r2, #64	; 0x40
 8009a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009a38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4a62      	ldr	r2, [pc, #392]	; (8009bd0 <HAL_I2C_Mem_Read+0x248>)
 8009a48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a4a:	88f8      	ldrh	r0, [r7, #6]
 8009a4c:	893a      	ldrh	r2, [r7, #8]
 8009a4e:	8979      	ldrh	r1, [r7, #10]
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	9301      	str	r3, [sp, #4]
 8009a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	4603      	mov	r3, r0
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 fb2c 	bl	800a0b8 <I2C_RequestMemoryRead>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e1ec      	b.n	8009e44 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d113      	bne.n	8009a9a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a72:	2300      	movs	r3, #0
 8009a74:	61fb      	str	r3, [r7, #28]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	695b      	ldr	r3, [r3, #20]
 8009a7c:	61fb      	str	r3, [r7, #28]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	61fb      	str	r3, [r7, #28]
 8009a86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	e1c0      	b.n	8009e1c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d11e      	bne.n	8009ae0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ab0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ab2:	b672      	cpsid	i
}
 8009ab4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	61bb      	str	r3, [r7, #24]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	61bb      	str	r3, [r7, #24]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	61bb      	str	r3, [r7, #24]
 8009aca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ada:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009adc:	b662      	cpsie	i
}
 8009ade:	e035      	b.n	8009b4c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d11e      	bne.n	8009b26 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009af6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009af8:	b672      	cpsid	i
}
 8009afa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009afc:	2300      	movs	r3, #0
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	617b      	str	r3, [r7, #20]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009b22:	b662      	cpsie	i
}
 8009b24:	e012      	b.n	8009b4c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b34:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b36:	2300      	movs	r3, #0
 8009b38:	613b      	str	r3, [r7, #16]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	695b      	ldr	r3, [r3, #20]
 8009b40:	613b      	str	r3, [r7, #16]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	613b      	str	r3, [r7, #16]
 8009b4a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009b4c:	e166      	b.n	8009e1c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	f200 811f 	bhi.w	8009d96 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d123      	bne.n	8009ba8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 fd39 	bl	800a5dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	e167      	b.n	8009e44 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	691a      	ldr	r2, [r3, #16]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7e:	b2d2      	uxtb	r2, r2
 8009b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	1c5a      	adds	r2, r3, #1
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b90:	3b01      	subs	r3, #1
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ba6:	e139      	b.n	8009e1c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d152      	bne.n	8009c56 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	4906      	ldr	r1, [pc, #24]	; (8009bd4 <HAL_I2C_Mem_Read+0x24c>)
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f000 fb64 	bl	800a288 <I2C_WaitOnFlagUntilTimeout>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d008      	beq.n	8009bd8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e13c      	b.n	8009e44 <HAL_I2C_Mem_Read+0x4bc>
 8009bca:	bf00      	nop
 8009bcc:	00100002 	.word	0x00100002
 8009bd0:	ffff0000 	.word	0xffff0000
 8009bd4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009bd8:	b672      	cpsid	i
}
 8009bda:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	691a      	ldr	r2, [r3, #16]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	b2d2      	uxtb	r2, r2
 8009bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	1c5a      	adds	r2, r3, #1
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	3b01      	subs	r3, #1
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009c1e:	b662      	cpsie	i
}
 8009c20:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	691a      	ldr	r2, [r3, #16]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2c:	b2d2      	uxtb	r2, r2
 8009c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c54:	e0e2      	b.n	8009e1c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	497b      	ldr	r1, [pc, #492]	; (8009e4c <HAL_I2C_Mem_Read+0x4c4>)
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f000 fb11 	bl	800a288 <I2C_WaitOnFlagUntilTimeout>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d001      	beq.n	8009c70 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e0e9      	b.n	8009e44 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c80:	b672      	cpsid	i
}
 8009c82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	691a      	ldr	r2, [r3, #16]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009cb6:	4b66      	ldr	r3, [pc, #408]	; (8009e50 <HAL_I2C_Mem_Read+0x4c8>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	08db      	lsrs	r3, r3, #3
 8009cbc:	4a65      	ldr	r2, [pc, #404]	; (8009e54 <HAL_I2C_Mem_Read+0x4cc>)
 8009cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc2:	0a1a      	lsrs	r2, r3, #8
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	00da      	lsls	r2, r3, #3
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d118      	bne.n	8009d0e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf6:	f043 0220 	orr.w	r2, r3, #32
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009cfe:	b662      	cpsie	i
}
 8009d00:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e09a      	b.n	8009e44 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	695b      	ldr	r3, [r3, #20]
 8009d14:	f003 0304 	and.w	r3, r3, #4
 8009d18:	2b04      	cmp	r3, #4
 8009d1a:	d1d9      	bne.n	8009cd0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	691a      	ldr	r2, [r3, #16]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	b2d2      	uxtb	r2, r2
 8009d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	1c5a      	adds	r2, r3, #1
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	3b01      	subs	r3, #1
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d5e:	b662      	cpsie	i
}
 8009d60:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	b2d2      	uxtb	r2, r2
 8009d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d94:	e042      	b.n	8009e1c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 fc1e 	bl	800a5dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e04c      	b.n	8009e44 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	691a      	ldr	r2, [r3, #16]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db4:	b2d2      	uxtb	r2, r2
 8009db6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	f003 0304 	and.w	r3, r3, #4
 8009de6:	2b04      	cmp	r3, #4
 8009de8:	d118      	bne.n	8009e1c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	691a      	ldr	r2, [r3, #16]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df4:	b2d2      	uxtb	r2, r2
 8009df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e06:	3b01      	subs	r3, #1
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	3b01      	subs	r3, #1
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f47f ae94 	bne.w	8009b4e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2220      	movs	r2, #32
 8009e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	e000      	b.n	8009e44 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009e42:	2302      	movs	r3, #2
  }
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3728      	adds	r7, #40	; 0x28
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	00010004 	.word	0x00010004
 8009e50:	200000a0 	.word	0x200000a0
 8009e54:	14f8b589 	.word	0x14f8b589

08009e58 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e66:	b2db      	uxtb	r3, r3
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bc80      	pop	{r7}
 8009e70:	4770      	bx	lr

08009e72 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b083      	sub	sp, #12
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bc80      	pop	{r7}
 8009e86:	4770      	bx	lr

08009e88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b088      	sub	sp, #32
 8009e8c:	af02      	add	r7, sp, #8
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	607a      	str	r2, [r7, #4]
 8009e92:	603b      	str	r3, [r7, #0]
 8009e94:	460b      	mov	r3, r1
 8009e96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	d006      	beq.n	8009eb2 <I2C_MasterRequestWrite+0x2a>
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d003      	beq.n	8009eb2 <I2C_MasterRequestWrite+0x2a>
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009eb0:	d108      	bne.n	8009ec4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	e00b      	b.n	8009edc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec8:	2b12      	cmp	r3, #18
 8009eca:	d107      	bne.n	8009edc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009eda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 f9cd 	bl	800a288 <I2C_WaitOnFlagUntilTimeout>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00d      	beq.n	8009f10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f02:	d103      	bne.n	8009f0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e035      	b.n	8009f7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f18:	d108      	bne.n	8009f2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f1a:	897b      	ldrh	r3, [r7, #10]
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	461a      	mov	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009f28:	611a      	str	r2, [r3, #16]
 8009f2a:	e01b      	b.n	8009f64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009f2c:	897b      	ldrh	r3, [r7, #10]
 8009f2e:	11db      	asrs	r3, r3, #7
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	f003 0306 	and.w	r3, r3, #6
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	f063 030f 	orn	r3, r3, #15
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	490e      	ldr	r1, [pc, #56]	; (8009f84 <I2C_MasterRequestWrite+0xfc>)
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 fa16 	bl	800a37c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e010      	b.n	8009f7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009f5a:	897b      	ldrh	r3, [r7, #10]
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	4907      	ldr	r1, [pc, #28]	; (8009f88 <I2C_MasterRequestWrite+0x100>)
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f000 fa06 	bl	800a37c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e000      	b.n	8009f7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	00010008 	.word	0x00010008
 8009f88:	00010002 	.word	0x00010002

08009f8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b088      	sub	sp, #32
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	4608      	mov	r0, r1
 8009f96:	4611      	mov	r1, r2
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	817b      	strh	r3, [r7, #10]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	813b      	strh	r3, [r7, #8]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f000 f960 	bl	800a288 <I2C_WaitOnFlagUntilTimeout>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00d      	beq.n	8009fea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fdc:	d103      	bne.n	8009fe6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e05f      	b.n	800a0aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fea:	897b      	ldrh	r3, [r7, #10]
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	461a      	mov	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ff8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	6a3a      	ldr	r2, [r7, #32]
 8009ffe:	492d      	ldr	r1, [pc, #180]	; (800a0b4 <I2C_RequestMemoryWrite+0x128>)
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f000 f9bb 	bl	800a37c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e04c      	b.n	800a0aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a010:	2300      	movs	r3, #0
 800a012:	617b      	str	r3, [r7, #20]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	617b      	str	r3, [r7, #20]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	617b      	str	r3, [r7, #20]
 800a024:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a028:	6a39      	ldr	r1, [r7, #32]
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 fa46 	bl	800a4bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00d      	beq.n	800a052 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03a:	2b04      	cmp	r3, #4
 800a03c:	d107      	bne.n	800a04e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a04c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e02b      	b.n	800a0aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a052:	88fb      	ldrh	r3, [r7, #6]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d105      	bne.n	800a064 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a058:	893b      	ldrh	r3, [r7, #8]
 800a05a:	b2da      	uxtb	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	611a      	str	r2, [r3, #16]
 800a062:	e021      	b.n	800a0a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a064:	893b      	ldrh	r3, [r7, #8]
 800a066:	0a1b      	lsrs	r3, r3, #8
 800a068:	b29b      	uxth	r3, r3
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a074:	6a39      	ldr	r1, [r7, #32]
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 fa20 	bl	800a4bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00d      	beq.n	800a09e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a086:	2b04      	cmp	r3, #4
 800a088:	d107      	bne.n	800a09a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a098:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e005      	b.n	800a0aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a09e:	893b      	ldrh	r3, [r7, #8]
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	00010002 	.word	0x00010002

0800a0b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af02      	add	r7, sp, #8
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	4608      	mov	r0, r1
 800a0c2:	4611      	mov	r1, r2
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	817b      	strh	r3, [r7, #10]
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	813b      	strh	r3, [r7, #8]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a0e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 f8c2 	bl	800a288 <I2C_WaitOnFlagUntilTimeout>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00d      	beq.n	800a126 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a118:	d103      	bne.n	800a122 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a120:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a122:	2303      	movs	r3, #3
 800a124:	e0aa      	b.n	800a27c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a126:	897b      	ldrh	r3, [r7, #10]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	461a      	mov	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a134:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	6a3a      	ldr	r2, [r7, #32]
 800a13a:	4952      	ldr	r1, [pc, #328]	; (800a284 <I2C_RequestMemoryRead+0x1cc>)
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 f91d 	bl	800a37c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e097      	b.n	800a27c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a14c:	2300      	movs	r3, #0
 800a14e:	617b      	str	r3, [r7, #20]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	617b      	str	r3, [r7, #20]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	617b      	str	r3, [r7, #20]
 800a160:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a164:	6a39      	ldr	r1, [r7, #32]
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 f9a8 	bl	800a4bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00d      	beq.n	800a18e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a176:	2b04      	cmp	r3, #4
 800a178:	d107      	bne.n	800a18a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a188:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e076      	b.n	800a27c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a18e:	88fb      	ldrh	r3, [r7, #6]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d105      	bne.n	800a1a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a194:	893b      	ldrh	r3, [r7, #8]
 800a196:	b2da      	uxtb	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	611a      	str	r2, [r3, #16]
 800a19e:	e021      	b.n	800a1e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1a0:	893b      	ldrh	r3, [r7, #8]
 800a1a2:	0a1b      	lsrs	r3, r3, #8
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b0:	6a39      	ldr	r1, [r7, #32]
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 f982 	bl	800a4bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00d      	beq.n	800a1da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c2:	2b04      	cmp	r3, #4
 800a1c4:	d107      	bne.n	800a1d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e050      	b.n	800a27c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1da:	893b      	ldrh	r3, [r7, #8]
 800a1dc:	b2da      	uxtb	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e6:	6a39      	ldr	r1, [r7, #32]
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f000 f967 	bl	800a4bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00d      	beq.n	800a210 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f8:	2b04      	cmp	r3, #4
 800a1fa:	d107      	bne.n	800a20c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a20a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e035      	b.n	800a27c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a21e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	2200      	movs	r2, #0
 800a228:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 f82b 	bl	800a288 <I2C_WaitOnFlagUntilTimeout>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00d      	beq.n	800a254 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a246:	d103      	bne.n	800a250 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a24e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e013      	b.n	800a27c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a254:	897b      	ldrh	r3, [r7, #10]
 800a256:	b2db      	uxtb	r3, r3
 800a258:	f043 0301 	orr.w	r3, r3, #1
 800a25c:	b2da      	uxtb	r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a266:	6a3a      	ldr	r2, [r7, #32]
 800a268:	4906      	ldr	r1, [pc, #24]	; (800a284 <I2C_RequestMemoryRead+0x1cc>)
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f000 f886 	bl	800a37c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d001      	beq.n	800a27a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e000      	b.n	800a27c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	00010002 	.word	0x00010002

0800a288 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	603b      	str	r3, [r7, #0]
 800a294:	4613      	mov	r3, r2
 800a296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a298:	e048      	b.n	800a32c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a0:	d044      	beq.n	800a32c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2a2:	f7fe f9e3 	bl	800866c <HAL_GetTick>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d302      	bcc.n	800a2b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d139      	bne.n	800a32c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	0c1b      	lsrs	r3, r3, #16
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d10d      	bne.n	800a2de <I2C_WaitOnFlagUntilTimeout+0x56>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	43da      	mvns	r2, r3
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	bf0c      	ite	eq
 800a2d4:	2301      	moveq	r3, #1
 800a2d6:	2300      	movne	r3, #0
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	461a      	mov	r2, r3
 800a2dc:	e00c      	b.n	800a2f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	43da      	mvns	r2, r3
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	bf0c      	ite	eq
 800a2f0:	2301      	moveq	r3, #1
 800a2f2:	2300      	movne	r3, #0
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	79fb      	ldrb	r3, [r7, #7]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d116      	bne.n	800a32c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2220      	movs	r2, #32
 800a308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a318:	f043 0220 	orr.w	r2, r3, #32
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e023      	b.n	800a374 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	0c1b      	lsrs	r3, r3, #16
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b01      	cmp	r3, #1
 800a334:	d10d      	bne.n	800a352 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	43da      	mvns	r2, r3
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	4013      	ands	r3, r2
 800a342:	b29b      	uxth	r3, r3
 800a344:	2b00      	cmp	r3, #0
 800a346:	bf0c      	ite	eq
 800a348:	2301      	moveq	r3, #1
 800a34a:	2300      	movne	r3, #0
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	461a      	mov	r2, r3
 800a350:	e00c      	b.n	800a36c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	699b      	ldr	r3, [r3, #24]
 800a358:	43da      	mvns	r2, r3
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	4013      	ands	r3, r2
 800a35e:	b29b      	uxth	r3, r3
 800a360:	2b00      	cmp	r3, #0
 800a362:	bf0c      	ite	eq
 800a364:	2301      	moveq	r3, #1
 800a366:	2300      	movne	r3, #0
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	461a      	mov	r2, r3
 800a36c:	79fb      	ldrb	r3, [r7, #7]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d093      	beq.n	800a29a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
 800a388:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a38a:	e071      	b.n	800a470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a39a:	d123      	bne.n	800a3e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a3b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2220      	movs	r2, #32
 800a3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d0:	f043 0204 	orr.w	r2, r3, #4
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e067      	b.n	800a4b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ea:	d041      	beq.n	800a470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3ec:	f7fe f93e 	bl	800866c <HAL_GetTick>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d302      	bcc.n	800a402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d136      	bne.n	800a470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	0c1b      	lsrs	r3, r3, #16
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d10c      	bne.n	800a426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	43da      	mvns	r2, r3
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	4013      	ands	r3, r2
 800a418:	b29b      	uxth	r3, r3
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	bf14      	ite	ne
 800a41e:	2301      	movne	r3, #1
 800a420:	2300      	moveq	r3, #0
 800a422:	b2db      	uxtb	r3, r3
 800a424:	e00b      	b.n	800a43e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	43da      	mvns	r2, r3
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	4013      	ands	r3, r2
 800a432:	b29b      	uxth	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	bf14      	ite	ne
 800a438:	2301      	movne	r3, #1
 800a43a:	2300      	moveq	r3, #0
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d016      	beq.n	800a470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2220      	movs	r2, #32
 800a44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45c:	f043 0220 	orr.w	r2, r3, #32
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e021      	b.n	800a4b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	0c1b      	lsrs	r3, r3, #16
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b01      	cmp	r3, #1
 800a478:	d10c      	bne.n	800a494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	43da      	mvns	r2, r3
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	4013      	ands	r3, r2
 800a486:	b29b      	uxth	r3, r3
 800a488:	2b00      	cmp	r3, #0
 800a48a:	bf14      	ite	ne
 800a48c:	2301      	movne	r3, #1
 800a48e:	2300      	moveq	r3, #0
 800a490:	b2db      	uxtb	r3, r3
 800a492:	e00b      	b.n	800a4ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	43da      	mvns	r2, r3
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	4013      	ands	r3, r2
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	bf14      	ite	ne
 800a4a6:	2301      	movne	r3, #1
 800a4a8:	2300      	moveq	r3, #0
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f47f af6d 	bne.w	800a38c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a4c8:	e034      	b.n	800a534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 f8e3 	bl	800a696 <I2C_IsAcknowledgeFailed>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d001      	beq.n	800a4da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e034      	b.n	800a544 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e0:	d028      	beq.n	800a534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4e2:	f7fe f8c3 	bl	800866c <HAL_GetTick>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d302      	bcc.n	800a4f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d11d      	bne.n	800a534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a502:	2b80      	cmp	r3, #128	; 0x80
 800a504:	d016      	beq.n	800a534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2220      	movs	r2, #32
 800a510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a520:	f043 0220 	orr.w	r2, r3, #32
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e007      	b.n	800a544 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a53e:	2b80      	cmp	r3, #128	; 0x80
 800a540:	d1c3      	bne.n	800a4ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a558:	e034      	b.n	800a5c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f000 f89b 	bl	800a696 <I2C_IsAcknowledgeFailed>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e034      	b.n	800a5d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a570:	d028      	beq.n	800a5c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a572:	f7fe f87b 	bl	800866c <HAL_GetTick>
 800a576:	4602      	mov	r2, r0
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d302      	bcc.n	800a588 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d11d      	bne.n	800a5c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	695b      	ldr	r3, [r3, #20]
 800a58e:	f003 0304 	and.w	r3, r3, #4
 800a592:	2b04      	cmp	r3, #4
 800a594:	d016      	beq.n	800a5c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b0:	f043 0220 	orr.w	r2, r3, #32
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e007      	b.n	800a5d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	f003 0304 	and.w	r3, r3, #4
 800a5ce:	2b04      	cmp	r3, #4
 800a5d0:	d1c3      	bne.n	800a55a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a5e8:	e049      	b.n	800a67e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	695b      	ldr	r3, [r3, #20]
 800a5f0:	f003 0310 	and.w	r3, r3, #16
 800a5f4:	2b10      	cmp	r3, #16
 800a5f6:	d119      	bne.n	800a62c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f06f 0210 	mvn.w	r2, #16
 800a600:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2220      	movs	r2, #32
 800a60c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	e030      	b.n	800a68e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a62c:	f7fe f81e 	bl	800866c <HAL_GetTick>
 800a630:	4602      	mov	r2, r0
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d302      	bcc.n	800a642 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d11d      	bne.n	800a67e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	695b      	ldr	r3, [r3, #20]
 800a648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a64c:	2b40      	cmp	r3, #64	; 0x40
 800a64e:	d016      	beq.n	800a67e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2220      	movs	r2, #32
 800a65a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66a:	f043 0220 	orr.w	r2, r3, #32
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e007      	b.n	800a68e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a688:	2b40      	cmp	r3, #64	; 0x40
 800a68a:	d1ae      	bne.n	800a5ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a696:	b480      	push	{r7}
 800a698:	b083      	sub	sp, #12
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	695b      	ldr	r3, [r3, #20]
 800a6a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6ac:	d11b      	bne.n	800a6e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a6b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d2:	f043 0204 	orr.w	r2, r3, #4
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e000      	b.n	800a6e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bc80      	pop	{r7}
 800a6f0:	4770      	bx	lr
	...

0800a6f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e272      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f000 8087 	beq.w	800a822 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a714:	4b92      	ldr	r3, [pc, #584]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	f003 030c 	and.w	r3, r3, #12
 800a71c:	2b04      	cmp	r3, #4
 800a71e:	d00c      	beq.n	800a73a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a720:	4b8f      	ldr	r3, [pc, #572]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	f003 030c 	and.w	r3, r3, #12
 800a728:	2b08      	cmp	r3, #8
 800a72a:	d112      	bne.n	800a752 <HAL_RCC_OscConfig+0x5e>
 800a72c:	4b8c      	ldr	r3, [pc, #560]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a738:	d10b      	bne.n	800a752 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a73a:	4b89      	ldr	r3, [pc, #548]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a742:	2b00      	cmp	r3, #0
 800a744:	d06c      	beq.n	800a820 <HAL_RCC_OscConfig+0x12c>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d168      	bne.n	800a820 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	e24c      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a75a:	d106      	bne.n	800a76a <HAL_RCC_OscConfig+0x76>
 800a75c:	4b80      	ldr	r3, [pc, #512]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a7f      	ldr	r2, [pc, #508]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a766:	6013      	str	r3, [r2, #0]
 800a768:	e02e      	b.n	800a7c8 <HAL_RCC_OscConfig+0xd4>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d10c      	bne.n	800a78c <HAL_RCC_OscConfig+0x98>
 800a772:	4b7b      	ldr	r3, [pc, #492]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a7a      	ldr	r2, [pc, #488]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	4b78      	ldr	r3, [pc, #480]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a77      	ldr	r2, [pc, #476]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a788:	6013      	str	r3, [r2, #0]
 800a78a:	e01d      	b.n	800a7c8 <HAL_RCC_OscConfig+0xd4>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a794:	d10c      	bne.n	800a7b0 <HAL_RCC_OscConfig+0xbc>
 800a796:	4b72      	ldr	r3, [pc, #456]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a71      	ldr	r2, [pc, #452]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a79c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	4b6f      	ldr	r3, [pc, #444]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a6e      	ldr	r2, [pc, #440]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a7a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7ac:	6013      	str	r3, [r2, #0]
 800a7ae:	e00b      	b.n	800a7c8 <HAL_RCC_OscConfig+0xd4>
 800a7b0:	4b6b      	ldr	r3, [pc, #428]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a6a      	ldr	r2, [pc, #424]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a7b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7ba:	6013      	str	r3, [r2, #0]
 800a7bc:	4b68      	ldr	r3, [pc, #416]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a67      	ldr	r2, [pc, #412]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a7c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d013      	beq.n	800a7f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7d0:	f7fd ff4c 	bl	800866c <HAL_GetTick>
 800a7d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7d6:	e008      	b.n	800a7ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7d8:	f7fd ff48 	bl	800866c <HAL_GetTick>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	2b64      	cmp	r3, #100	; 0x64
 800a7e4:	d901      	bls.n	800a7ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a7e6:	2303      	movs	r3, #3
 800a7e8:	e200      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7ea:	4b5d      	ldr	r3, [pc, #372]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d0f0      	beq.n	800a7d8 <HAL_RCC_OscConfig+0xe4>
 800a7f6:	e014      	b.n	800a822 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7f8:	f7fd ff38 	bl	800866c <HAL_GetTick>
 800a7fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a7fe:	e008      	b.n	800a812 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a800:	f7fd ff34 	bl	800866c <HAL_GetTick>
 800a804:	4602      	mov	r2, r0
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	2b64      	cmp	r3, #100	; 0x64
 800a80c:	d901      	bls.n	800a812 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a80e:	2303      	movs	r3, #3
 800a810:	e1ec      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a812:	4b53      	ldr	r3, [pc, #332]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1f0      	bne.n	800a800 <HAL_RCC_OscConfig+0x10c>
 800a81e:	e000      	b.n	800a822 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f003 0302 	and.w	r3, r3, #2
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d063      	beq.n	800a8f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a82e:	4b4c      	ldr	r3, [pc, #304]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	f003 030c 	and.w	r3, r3, #12
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00b      	beq.n	800a852 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a83a:	4b49      	ldr	r3, [pc, #292]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	f003 030c 	and.w	r3, r3, #12
 800a842:	2b08      	cmp	r3, #8
 800a844:	d11c      	bne.n	800a880 <HAL_RCC_OscConfig+0x18c>
 800a846:	4b46      	ldr	r3, [pc, #280]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d116      	bne.n	800a880 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a852:	4b43      	ldr	r3, [pc, #268]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 0302 	and.w	r3, r3, #2
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d005      	beq.n	800a86a <HAL_RCC_OscConfig+0x176>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	2b01      	cmp	r3, #1
 800a864:	d001      	beq.n	800a86a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e1c0      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a86a:	4b3d      	ldr	r3, [pc, #244]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	00db      	lsls	r3, r3, #3
 800a878:	4939      	ldr	r1, [pc, #228]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a87a:	4313      	orrs	r3, r2
 800a87c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a87e:	e03a      	b.n	800a8f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d020      	beq.n	800a8ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a888:	4b36      	ldr	r3, [pc, #216]	; (800a964 <HAL_RCC_OscConfig+0x270>)
 800a88a:	2201      	movs	r2, #1
 800a88c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a88e:	f7fd feed 	bl	800866c <HAL_GetTick>
 800a892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a894:	e008      	b.n	800a8a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a896:	f7fd fee9 	bl	800866c <HAL_GetTick>
 800a89a:	4602      	mov	r2, r0
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d901      	bls.n	800a8a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e1a1      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8a8:	4b2d      	ldr	r3, [pc, #180]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 0302 	and.w	r3, r3, #2
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d0f0      	beq.n	800a896 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8b4:	4b2a      	ldr	r3, [pc, #168]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	00db      	lsls	r3, r3, #3
 800a8c2:	4927      	ldr	r1, [pc, #156]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	600b      	str	r3, [r1, #0]
 800a8c8:	e015      	b.n	800a8f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8ca:	4b26      	ldr	r3, [pc, #152]	; (800a964 <HAL_RCC_OscConfig+0x270>)
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8d0:	f7fd fecc 	bl	800866c <HAL_GetTick>
 800a8d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8d6:	e008      	b.n	800a8ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8d8:	f7fd fec8 	bl	800866c <HAL_GetTick>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d901      	bls.n	800a8ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	e180      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8ea:	4b1d      	ldr	r3, [pc, #116]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 0302 	and.w	r3, r3, #2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1f0      	bne.n	800a8d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 0308 	and.w	r3, r3, #8
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d03a      	beq.n	800a978 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d019      	beq.n	800a93e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a90a:	4b17      	ldr	r3, [pc, #92]	; (800a968 <HAL_RCC_OscConfig+0x274>)
 800a90c:	2201      	movs	r2, #1
 800a90e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a910:	f7fd feac 	bl	800866c <HAL_GetTick>
 800a914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a916:	e008      	b.n	800a92a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a918:	f7fd fea8 	bl	800866c <HAL_GetTick>
 800a91c:	4602      	mov	r2, r0
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	2b02      	cmp	r3, #2
 800a924:	d901      	bls.n	800a92a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e160      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a92a:	4b0d      	ldr	r3, [pc, #52]	; (800a960 <HAL_RCC_OscConfig+0x26c>)
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92e:	f003 0302 	and.w	r3, r3, #2
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0f0      	beq.n	800a918 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a936:	2001      	movs	r0, #1
 800a938:	f000 face 	bl	800aed8 <RCC_Delay>
 800a93c:	e01c      	b.n	800a978 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a93e:	4b0a      	ldr	r3, [pc, #40]	; (800a968 <HAL_RCC_OscConfig+0x274>)
 800a940:	2200      	movs	r2, #0
 800a942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a944:	f7fd fe92 	bl	800866c <HAL_GetTick>
 800a948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a94a:	e00f      	b.n	800a96c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a94c:	f7fd fe8e 	bl	800866c <HAL_GetTick>
 800a950:	4602      	mov	r2, r0
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	1ad3      	subs	r3, r2, r3
 800a956:	2b02      	cmp	r3, #2
 800a958:	d908      	bls.n	800a96c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a95a:	2303      	movs	r3, #3
 800a95c:	e146      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
 800a95e:	bf00      	nop
 800a960:	40021000 	.word	0x40021000
 800a964:	42420000 	.word	0x42420000
 800a968:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a96c:	4b92      	ldr	r3, [pc, #584]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	f003 0302 	and.w	r3, r3, #2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e9      	bne.n	800a94c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f003 0304 	and.w	r3, r3, #4
 800a980:	2b00      	cmp	r3, #0
 800a982:	f000 80a6 	beq.w	800aad2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a986:	2300      	movs	r3, #0
 800a988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a98a:	4b8b      	ldr	r3, [pc, #556]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800a98c:	69db      	ldr	r3, [r3, #28]
 800a98e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10d      	bne.n	800a9b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a996:	4b88      	ldr	r3, [pc, #544]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800a998:	69db      	ldr	r3, [r3, #28]
 800a99a:	4a87      	ldr	r2, [pc, #540]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800a99c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9a0:	61d3      	str	r3, [r2, #28]
 800a9a2:	4b85      	ldr	r3, [pc, #532]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9aa:	60bb      	str	r3, [r7, #8]
 800a9ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9b2:	4b82      	ldr	r3, [pc, #520]	; (800abbc <HAL_RCC_OscConfig+0x4c8>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d118      	bne.n	800a9f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9be:	4b7f      	ldr	r3, [pc, #508]	; (800abbc <HAL_RCC_OscConfig+0x4c8>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a7e      	ldr	r2, [pc, #504]	; (800abbc <HAL_RCC_OscConfig+0x4c8>)
 800a9c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9ca:	f7fd fe4f 	bl	800866c <HAL_GetTick>
 800a9ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9d0:	e008      	b.n	800a9e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9d2:	f7fd fe4b 	bl	800866c <HAL_GetTick>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	2b64      	cmp	r3, #100	; 0x64
 800a9de:	d901      	bls.n	800a9e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	e103      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9e4:	4b75      	ldr	r3, [pc, #468]	; (800abbc <HAL_RCC_OscConfig+0x4c8>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d0f0      	beq.n	800a9d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d106      	bne.n	800aa06 <HAL_RCC_OscConfig+0x312>
 800a9f8:	4b6f      	ldr	r3, [pc, #444]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800a9fa:	6a1b      	ldr	r3, [r3, #32]
 800a9fc:	4a6e      	ldr	r2, [pc, #440]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800a9fe:	f043 0301 	orr.w	r3, r3, #1
 800aa02:	6213      	str	r3, [r2, #32]
 800aa04:	e02d      	b.n	800aa62 <HAL_RCC_OscConfig+0x36e>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10c      	bne.n	800aa28 <HAL_RCC_OscConfig+0x334>
 800aa0e:	4b6a      	ldr	r3, [pc, #424]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	4a69      	ldr	r2, [pc, #420]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aa14:	f023 0301 	bic.w	r3, r3, #1
 800aa18:	6213      	str	r3, [r2, #32]
 800aa1a:	4b67      	ldr	r3, [pc, #412]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	4a66      	ldr	r2, [pc, #408]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aa20:	f023 0304 	bic.w	r3, r3, #4
 800aa24:	6213      	str	r3, [r2, #32]
 800aa26:	e01c      	b.n	800aa62 <HAL_RCC_OscConfig+0x36e>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	2b05      	cmp	r3, #5
 800aa2e:	d10c      	bne.n	800aa4a <HAL_RCC_OscConfig+0x356>
 800aa30:	4b61      	ldr	r3, [pc, #388]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aa32:	6a1b      	ldr	r3, [r3, #32]
 800aa34:	4a60      	ldr	r2, [pc, #384]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aa36:	f043 0304 	orr.w	r3, r3, #4
 800aa3a:	6213      	str	r3, [r2, #32]
 800aa3c:	4b5e      	ldr	r3, [pc, #376]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aa3e:	6a1b      	ldr	r3, [r3, #32]
 800aa40:	4a5d      	ldr	r2, [pc, #372]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aa42:	f043 0301 	orr.w	r3, r3, #1
 800aa46:	6213      	str	r3, [r2, #32]
 800aa48:	e00b      	b.n	800aa62 <HAL_RCC_OscConfig+0x36e>
 800aa4a:	4b5b      	ldr	r3, [pc, #364]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	4a5a      	ldr	r2, [pc, #360]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aa50:	f023 0301 	bic.w	r3, r3, #1
 800aa54:	6213      	str	r3, [r2, #32]
 800aa56:	4b58      	ldr	r3, [pc, #352]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	4a57      	ldr	r2, [pc, #348]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aa5c:	f023 0304 	bic.w	r3, r3, #4
 800aa60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d015      	beq.n	800aa96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa6a:	f7fd fdff 	bl	800866c <HAL_GetTick>
 800aa6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa70:	e00a      	b.n	800aa88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa72:	f7fd fdfb 	bl	800866c <HAL_GetTick>
 800aa76:	4602      	mov	r2, r0
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	1ad3      	subs	r3, r2, r3
 800aa7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d901      	bls.n	800aa88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e0b1      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa88:	4b4b      	ldr	r3, [pc, #300]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aa8a:	6a1b      	ldr	r3, [r3, #32]
 800aa8c:	f003 0302 	and.w	r3, r3, #2
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d0ee      	beq.n	800aa72 <HAL_RCC_OscConfig+0x37e>
 800aa94:	e014      	b.n	800aac0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa96:	f7fd fde9 	bl	800866c <HAL_GetTick>
 800aa9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa9c:	e00a      	b.n	800aab4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa9e:	f7fd fde5 	bl	800866c <HAL_GetTick>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d901      	bls.n	800aab4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800aab0:	2303      	movs	r3, #3
 800aab2:	e09b      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aab4:	4b40      	ldr	r3, [pc, #256]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aab6:	6a1b      	ldr	r3, [r3, #32]
 800aab8:	f003 0302 	and.w	r3, r3, #2
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1ee      	bne.n	800aa9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d105      	bne.n	800aad2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aac6:	4b3c      	ldr	r3, [pc, #240]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aac8:	69db      	ldr	r3, [r3, #28]
 800aaca:	4a3b      	ldr	r2, [pc, #236]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aacc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aad0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	f000 8087 	beq.w	800abea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aadc:	4b36      	ldr	r3, [pc, #216]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	f003 030c 	and.w	r3, r3, #12
 800aae4:	2b08      	cmp	r3, #8
 800aae6:	d061      	beq.n	800abac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	69db      	ldr	r3, [r3, #28]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d146      	bne.n	800ab7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaf0:	4b33      	ldr	r3, [pc, #204]	; (800abc0 <HAL_RCC_OscConfig+0x4cc>)
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaf6:	f7fd fdb9 	bl	800866c <HAL_GetTick>
 800aafa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aafc:	e008      	b.n	800ab10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aafe:	f7fd fdb5 	bl	800866c <HAL_GetTick>
 800ab02:	4602      	mov	r2, r0
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	1ad3      	subs	r3, r2, r3
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d901      	bls.n	800ab10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	e06d      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab10:	4b29      	ldr	r3, [pc, #164]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1f0      	bne.n	800aafe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a1b      	ldr	r3, [r3, #32]
 800ab20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab24:	d108      	bne.n	800ab38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ab26:	4b24      	ldr	r3, [pc, #144]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	4921      	ldr	r1, [pc, #132]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800ab34:	4313      	orrs	r3, r2
 800ab36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab38:	4b1f      	ldr	r3, [pc, #124]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a19      	ldr	r1, [r3, #32]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab48:	430b      	orrs	r3, r1
 800ab4a:	491b      	ldr	r1, [pc, #108]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab50:	4b1b      	ldr	r3, [pc, #108]	; (800abc0 <HAL_RCC_OscConfig+0x4cc>)
 800ab52:	2201      	movs	r2, #1
 800ab54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab56:	f7fd fd89 	bl	800866c <HAL_GetTick>
 800ab5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab5c:	e008      	b.n	800ab70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab5e:	f7fd fd85 	bl	800866c <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d901      	bls.n	800ab70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e03d      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab70:	4b11      	ldr	r3, [pc, #68]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d0f0      	beq.n	800ab5e <HAL_RCC_OscConfig+0x46a>
 800ab7c:	e035      	b.n	800abea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab7e:	4b10      	ldr	r3, [pc, #64]	; (800abc0 <HAL_RCC_OscConfig+0x4cc>)
 800ab80:	2200      	movs	r2, #0
 800ab82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab84:	f7fd fd72 	bl	800866c <HAL_GetTick>
 800ab88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab8a:	e008      	b.n	800ab9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab8c:	f7fd fd6e 	bl	800866c <HAL_GetTick>
 800ab90:	4602      	mov	r2, r0
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d901      	bls.n	800ab9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	e026      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab9e:	4b06      	ldr	r3, [pc, #24]	; (800abb8 <HAL_RCC_OscConfig+0x4c4>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1f0      	bne.n	800ab8c <HAL_RCC_OscConfig+0x498>
 800abaa:	e01e      	b.n	800abea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d107      	bne.n	800abc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e019      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
 800abb8:	40021000 	.word	0x40021000
 800abbc:	40007000 	.word	0x40007000
 800abc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800abc4:	4b0b      	ldr	r3, [pc, #44]	; (800abf4 <HAL_RCC_OscConfig+0x500>)
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6a1b      	ldr	r3, [r3, #32]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d106      	bne.n	800abe6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d001      	beq.n	800abea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e000      	b.n	800abec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3718      	adds	r7, #24
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	40021000 	.word	0x40021000

0800abf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d101      	bne.n	800ac0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e0d0      	b.n	800adae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ac0c:	4b6a      	ldr	r3, [pc, #424]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 0307 	and.w	r3, r3, #7
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d910      	bls.n	800ac3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac1a:	4b67      	ldr	r3, [pc, #412]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f023 0207 	bic.w	r2, r3, #7
 800ac22:	4965      	ldr	r1, [pc, #404]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac2a:	4b63      	ldr	r3, [pc, #396]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 0307 	and.w	r3, r3, #7
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d001      	beq.n	800ac3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e0b8      	b.n	800adae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 0302 	and.w	r3, r3, #2
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d020      	beq.n	800ac8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0304 	and.w	r3, r3, #4
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d005      	beq.n	800ac60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac54:	4b59      	ldr	r3, [pc, #356]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	4a58      	ldr	r2, [pc, #352]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ac5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ac5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f003 0308 	and.w	r3, r3, #8
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d005      	beq.n	800ac78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac6c:	4b53      	ldr	r3, [pc, #332]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	4a52      	ldr	r2, [pc, #328]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ac72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ac76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac78:	4b50      	ldr	r3, [pc, #320]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	494d      	ldr	r1, [pc, #308]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 0301 	and.w	r3, r3, #1
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d040      	beq.n	800ad18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d107      	bne.n	800acae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac9e:	4b47      	ldr	r3, [pc, #284]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d115      	bne.n	800acd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	e07f      	b.n	800adae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d107      	bne.n	800acc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800acb6:	4b41      	ldr	r3, [pc, #260]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d109      	bne.n	800acd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e073      	b.n	800adae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acc6:	4b3d      	ldr	r3, [pc, #244]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f003 0302 	and.w	r3, r3, #2
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e06b      	b.n	800adae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800acd6:	4b39      	ldr	r3, [pc, #228]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	f023 0203 	bic.w	r2, r3, #3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	4936      	ldr	r1, [pc, #216]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ace4:	4313      	orrs	r3, r2
 800ace6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ace8:	f7fd fcc0 	bl	800866c <HAL_GetTick>
 800acec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acee:	e00a      	b.n	800ad06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acf0:	f7fd fcbc 	bl	800866c <HAL_GetTick>
 800acf4:	4602      	mov	r2, r0
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d901      	bls.n	800ad06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ad02:	2303      	movs	r3, #3
 800ad04:	e053      	b.n	800adae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad06:	4b2d      	ldr	r3, [pc, #180]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f003 020c 	and.w	r2, r3, #12
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d1eb      	bne.n	800acf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ad18:	4b27      	ldr	r3, [pc, #156]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0307 	and.w	r3, r3, #7
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d210      	bcs.n	800ad48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad26:	4b24      	ldr	r3, [pc, #144]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f023 0207 	bic.w	r2, r3, #7
 800ad2e:	4922      	ldr	r1, [pc, #136]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad36:	4b20      	ldr	r3, [pc, #128]	; (800adb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 0307 	and.w	r3, r3, #7
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d001      	beq.n	800ad48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e032      	b.n	800adae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 0304 	and.w	r3, r3, #4
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d008      	beq.n	800ad66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad54:	4b19      	ldr	r3, [pc, #100]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	4916      	ldr	r1, [pc, #88]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ad62:	4313      	orrs	r3, r2
 800ad64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0308 	and.w	r3, r3, #8
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d009      	beq.n	800ad86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ad72:	4b12      	ldr	r3, [pc, #72]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	490e      	ldr	r1, [pc, #56]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ad82:	4313      	orrs	r3, r2
 800ad84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad86:	f000 f821 	bl	800adcc <HAL_RCC_GetSysClockFreq>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	4b0b      	ldr	r3, [pc, #44]	; (800adbc <HAL_RCC_ClockConfig+0x1c4>)
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	091b      	lsrs	r3, r3, #4
 800ad92:	f003 030f 	and.w	r3, r3, #15
 800ad96:	490a      	ldr	r1, [pc, #40]	; (800adc0 <HAL_RCC_ClockConfig+0x1c8>)
 800ad98:	5ccb      	ldrb	r3, [r1, r3]
 800ad9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad9e:	4a09      	ldr	r2, [pc, #36]	; (800adc4 <HAL_RCC_ClockConfig+0x1cc>)
 800ada0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ada2:	4b09      	ldr	r3, [pc, #36]	; (800adc8 <HAL_RCC_ClockConfig+0x1d0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fd fc1e 	bl	80085e8 <HAL_InitTick>

  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	40022000 	.word	0x40022000
 800adbc:	40021000 	.word	0x40021000
 800adc0:	0800dc2c 	.word	0x0800dc2c
 800adc4:	200000a0 	.word	0x200000a0
 800adc8:	200000a4 	.word	0x200000a4

0800adcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800adcc:	b480      	push	{r7}
 800adce:	b087      	sub	sp, #28
 800add0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800add2:	2300      	movs	r3, #0
 800add4:	60fb      	str	r3, [r7, #12]
 800add6:	2300      	movs	r3, #0
 800add8:	60bb      	str	r3, [r7, #8]
 800adda:	2300      	movs	r3, #0
 800addc:	617b      	str	r3, [r7, #20]
 800adde:	2300      	movs	r3, #0
 800ade0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ade2:	2300      	movs	r3, #0
 800ade4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ade6:	4b1e      	ldr	r3, [pc, #120]	; (800ae60 <HAL_RCC_GetSysClockFreq+0x94>)
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f003 030c 	and.w	r3, r3, #12
 800adf2:	2b04      	cmp	r3, #4
 800adf4:	d002      	beq.n	800adfc <HAL_RCC_GetSysClockFreq+0x30>
 800adf6:	2b08      	cmp	r3, #8
 800adf8:	d003      	beq.n	800ae02 <HAL_RCC_GetSysClockFreq+0x36>
 800adfa:	e027      	b.n	800ae4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800adfc:	4b19      	ldr	r3, [pc, #100]	; (800ae64 <HAL_RCC_GetSysClockFreq+0x98>)
 800adfe:	613b      	str	r3, [r7, #16]
      break;
 800ae00:	e027      	b.n	800ae52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	0c9b      	lsrs	r3, r3, #18
 800ae06:	f003 030f 	and.w	r3, r3, #15
 800ae0a:	4a17      	ldr	r2, [pc, #92]	; (800ae68 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ae0c:	5cd3      	ldrb	r3, [r2, r3]
 800ae0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d010      	beq.n	800ae3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ae1a:	4b11      	ldr	r3, [pc, #68]	; (800ae60 <HAL_RCC_GetSysClockFreq+0x94>)
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	0c5b      	lsrs	r3, r3, #17
 800ae20:	f003 0301 	and.w	r3, r3, #1
 800ae24:	4a11      	ldr	r2, [pc, #68]	; (800ae6c <HAL_RCC_GetSysClockFreq+0xa0>)
 800ae26:	5cd3      	ldrb	r3, [r2, r3]
 800ae28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4a0d      	ldr	r2, [pc, #52]	; (800ae64 <HAL_RCC_GetSysClockFreq+0x98>)
 800ae2e:	fb03 f202 	mul.w	r2, r3, r2
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae38:	617b      	str	r3, [r7, #20]
 800ae3a:	e004      	b.n	800ae46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a0c      	ldr	r2, [pc, #48]	; (800ae70 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ae40:	fb02 f303 	mul.w	r3, r2, r3
 800ae44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	613b      	str	r3, [r7, #16]
      break;
 800ae4a:	e002      	b.n	800ae52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ae4c:	4b05      	ldr	r3, [pc, #20]	; (800ae64 <HAL_RCC_GetSysClockFreq+0x98>)
 800ae4e:	613b      	str	r3, [r7, #16]
      break;
 800ae50:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae52:	693b      	ldr	r3, [r7, #16]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	371c      	adds	r7, #28
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bc80      	pop	{r7}
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	40021000 	.word	0x40021000
 800ae64:	007a1200 	.word	0x007a1200
 800ae68:	0800dc44 	.word	0x0800dc44
 800ae6c:	0800dc54 	.word	0x0800dc54
 800ae70:	003d0900 	.word	0x003d0900

0800ae74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae74:	b480      	push	{r7}
 800ae76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae78:	4b02      	ldr	r3, [pc, #8]	; (800ae84 <HAL_RCC_GetHCLKFreq+0x10>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bc80      	pop	{r7}
 800ae82:	4770      	bx	lr
 800ae84:	200000a0 	.word	0x200000a0

0800ae88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ae8c:	f7ff fff2 	bl	800ae74 <HAL_RCC_GetHCLKFreq>
 800ae90:	4602      	mov	r2, r0
 800ae92:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	0a1b      	lsrs	r3, r3, #8
 800ae98:	f003 0307 	and.w	r3, r3, #7
 800ae9c:	4903      	ldr	r1, [pc, #12]	; (800aeac <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae9e:	5ccb      	ldrb	r3, [r1, r3]
 800aea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	40021000 	.word	0x40021000
 800aeac:	0800dc3c 	.word	0x0800dc3c

0800aeb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aeb4:	f7ff ffde 	bl	800ae74 <HAL_RCC_GetHCLKFreq>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	4b05      	ldr	r3, [pc, #20]	; (800aed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	0adb      	lsrs	r3, r3, #11
 800aec0:	f003 0307 	and.w	r3, r3, #7
 800aec4:	4903      	ldr	r1, [pc, #12]	; (800aed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aec6:	5ccb      	ldrb	r3, [r1, r3]
 800aec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aecc:	4618      	mov	r0, r3
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	40021000 	.word	0x40021000
 800aed4:	0800dc3c 	.word	0x0800dc3c

0800aed8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800aee0:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <RCC_Delay+0x34>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a0a      	ldr	r2, [pc, #40]	; (800af10 <RCC_Delay+0x38>)
 800aee6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeea:	0a5b      	lsrs	r3, r3, #9
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	fb02 f303 	mul.w	r3, r2, r3
 800aef2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800aef4:	bf00      	nop
  }
  while (Delay --);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	1e5a      	subs	r2, r3, #1
 800aefa:	60fa      	str	r2, [r7, #12]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1f9      	bne.n	800aef4 <RCC_Delay+0x1c>
}
 800af00:	bf00      	nop
 800af02:	bf00      	nop
 800af04:	3714      	adds	r7, #20
 800af06:	46bd      	mov	sp, r7
 800af08:	bc80      	pop	{r7}
 800af0a:	4770      	bx	lr
 800af0c:	200000a0 	.word	0x200000a0
 800af10:	10624dd3 	.word	0x10624dd3

0800af14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d101      	bne.n	800af26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e041      	b.n	800afaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d106      	bne.n	800af40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f7fd fa26 	bl	800838c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2202      	movs	r2, #2
 800af44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	3304      	adds	r3, #4
 800af50:	4619      	mov	r1, r3
 800af52:	4610      	mov	r0, r2
 800af54:	f000 fa82 	bl	800b45c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
	...

0800afb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d001      	beq.n	800afcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	e044      	b.n	800b056 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68da      	ldr	r2, [r3, #12]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f042 0201 	orr.w	r2, r2, #1
 800afe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a1d      	ldr	r2, [pc, #116]	; (800b060 <HAL_TIM_Base_Start_IT+0xac>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d018      	beq.n	800b020 <HAL_TIM_Base_Start_IT+0x6c>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a1c      	ldr	r2, [pc, #112]	; (800b064 <HAL_TIM_Base_Start_IT+0xb0>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d013      	beq.n	800b020 <HAL_TIM_Base_Start_IT+0x6c>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b000:	d00e      	beq.n	800b020 <HAL_TIM_Base_Start_IT+0x6c>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a18      	ldr	r2, [pc, #96]	; (800b068 <HAL_TIM_Base_Start_IT+0xb4>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d009      	beq.n	800b020 <HAL_TIM_Base_Start_IT+0x6c>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a16      	ldr	r2, [pc, #88]	; (800b06c <HAL_TIM_Base_Start_IT+0xb8>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d004      	beq.n	800b020 <HAL_TIM_Base_Start_IT+0x6c>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a15      	ldr	r2, [pc, #84]	; (800b070 <HAL_TIM_Base_Start_IT+0xbc>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d111      	bne.n	800b044 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	f003 0307 	and.w	r3, r3, #7
 800b02a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2b06      	cmp	r3, #6
 800b030:	d010      	beq.n	800b054 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f042 0201 	orr.w	r2, r2, #1
 800b040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b042:	e007      	b.n	800b054 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f042 0201 	orr.w	r2, r2, #1
 800b052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bc80      	pop	{r7}
 800b05e:	4770      	bx	lr
 800b060:	40012c00 	.word	0x40012c00
 800b064:	40013400 	.word	0x40013400
 800b068:	40000400 	.word	0x40000400
 800b06c:	40000800 	.word	0x40000800
 800b070:	40000c00 	.word	0x40000c00

0800b074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	f003 0302 	and.w	r3, r3, #2
 800b086:	2b02      	cmp	r3, #2
 800b088:	d122      	bne.n	800b0d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	f003 0302 	and.w	r3, r3, #2
 800b094:	2b02      	cmp	r3, #2
 800b096:	d11b      	bne.n	800b0d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f06f 0202 	mvn.w	r2, #2
 800b0a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	f003 0303 	and.w	r3, r3, #3
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d003      	beq.n	800b0be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 f9b4 	bl	800b424 <HAL_TIM_IC_CaptureCallback>
 800b0bc:	e005      	b.n	800b0ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f9a7 	bl	800b412 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f9b6 	bl	800b436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	f003 0304 	and.w	r3, r3, #4
 800b0da:	2b04      	cmp	r3, #4
 800b0dc:	d122      	bne.n	800b124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	f003 0304 	and.w	r3, r3, #4
 800b0e8:	2b04      	cmp	r3, #4
 800b0ea:	d11b      	bne.n	800b124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f06f 0204 	mvn.w	r2, #4
 800b0f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2202      	movs	r2, #2
 800b0fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b106:	2b00      	cmp	r3, #0
 800b108:	d003      	beq.n	800b112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f98a 	bl	800b424 <HAL_TIM_IC_CaptureCallback>
 800b110:	e005      	b.n	800b11e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f97d 	bl	800b412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f98c 	bl	800b436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	691b      	ldr	r3, [r3, #16]
 800b12a:	f003 0308 	and.w	r3, r3, #8
 800b12e:	2b08      	cmp	r3, #8
 800b130:	d122      	bne.n	800b178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	f003 0308 	and.w	r3, r3, #8
 800b13c:	2b08      	cmp	r3, #8
 800b13e:	d11b      	bne.n	800b178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f06f 0208 	mvn.w	r2, #8
 800b148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2204      	movs	r2, #4
 800b14e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	69db      	ldr	r3, [r3, #28]
 800b156:	f003 0303 	and.w	r3, r3, #3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d003      	beq.n	800b166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f960 	bl	800b424 <HAL_TIM_IC_CaptureCallback>
 800b164:	e005      	b.n	800b172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f953 	bl	800b412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 f962 	bl	800b436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	f003 0310 	and.w	r3, r3, #16
 800b182:	2b10      	cmp	r3, #16
 800b184:	d122      	bne.n	800b1cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	f003 0310 	and.w	r3, r3, #16
 800b190:	2b10      	cmp	r3, #16
 800b192:	d11b      	bne.n	800b1cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f06f 0210 	mvn.w	r2, #16
 800b19c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2208      	movs	r2, #8
 800b1a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	69db      	ldr	r3, [r3, #28]
 800b1aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f936 	bl	800b424 <HAL_TIM_IC_CaptureCallback>
 800b1b8:	e005      	b.n	800b1c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f929 	bl	800b412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f938 	bl	800b436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	f003 0301 	and.w	r3, r3, #1
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d10e      	bne.n	800b1f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	f003 0301 	and.w	r3, r3, #1
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d107      	bne.n	800b1f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f06f 0201 	mvn.w	r2, #1
 800b1f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7fc fd62 	bl	8007cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b202:	2b80      	cmp	r3, #128	; 0x80
 800b204:	d10e      	bne.n	800b224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b210:	2b80      	cmp	r3, #128	; 0x80
 800b212:	d107      	bne.n	800b224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b21c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 faa1 	bl	800b766 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b22e:	2b40      	cmp	r3, #64	; 0x40
 800b230:	d10e      	bne.n	800b250 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b23c:	2b40      	cmp	r3, #64	; 0x40
 800b23e:	d107      	bne.n	800b250 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f8fc 	bl	800b448 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	f003 0320 	and.w	r3, r3, #32
 800b25a:	2b20      	cmp	r3, #32
 800b25c:	d10e      	bne.n	800b27c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	68db      	ldr	r3, [r3, #12]
 800b264:	f003 0320 	and.w	r3, r3, #32
 800b268:	2b20      	cmp	r3, #32
 800b26a:	d107      	bne.n	800b27c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f06f 0220 	mvn.w	r2, #32
 800b274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 fa6c 	bl	800b754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d101      	bne.n	800b2a0 <HAL_TIM_ConfigClockSource+0x1c>
 800b29c:	2302      	movs	r3, #2
 800b29e:	e0b4      	b.n	800b40a <HAL_TIM_ConfigClockSource+0x186>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b2be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2d8:	d03e      	beq.n	800b358 <HAL_TIM_ConfigClockSource+0xd4>
 800b2da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2de:	f200 8087 	bhi.w	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b2e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2e6:	f000 8086 	beq.w	800b3f6 <HAL_TIM_ConfigClockSource+0x172>
 800b2ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ee:	d87f      	bhi.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b2f0:	2b70      	cmp	r3, #112	; 0x70
 800b2f2:	d01a      	beq.n	800b32a <HAL_TIM_ConfigClockSource+0xa6>
 800b2f4:	2b70      	cmp	r3, #112	; 0x70
 800b2f6:	d87b      	bhi.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b2f8:	2b60      	cmp	r3, #96	; 0x60
 800b2fa:	d050      	beq.n	800b39e <HAL_TIM_ConfigClockSource+0x11a>
 800b2fc:	2b60      	cmp	r3, #96	; 0x60
 800b2fe:	d877      	bhi.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b300:	2b50      	cmp	r3, #80	; 0x50
 800b302:	d03c      	beq.n	800b37e <HAL_TIM_ConfigClockSource+0xfa>
 800b304:	2b50      	cmp	r3, #80	; 0x50
 800b306:	d873      	bhi.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b308:	2b40      	cmp	r3, #64	; 0x40
 800b30a:	d058      	beq.n	800b3be <HAL_TIM_ConfigClockSource+0x13a>
 800b30c:	2b40      	cmp	r3, #64	; 0x40
 800b30e:	d86f      	bhi.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b310:	2b30      	cmp	r3, #48	; 0x30
 800b312:	d064      	beq.n	800b3de <HAL_TIM_ConfigClockSource+0x15a>
 800b314:	2b30      	cmp	r3, #48	; 0x30
 800b316:	d86b      	bhi.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b318:	2b20      	cmp	r3, #32
 800b31a:	d060      	beq.n	800b3de <HAL_TIM_ConfigClockSource+0x15a>
 800b31c:	2b20      	cmp	r3, #32
 800b31e:	d867      	bhi.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b320:	2b00      	cmp	r3, #0
 800b322:	d05c      	beq.n	800b3de <HAL_TIM_ConfigClockSource+0x15a>
 800b324:	2b10      	cmp	r3, #16
 800b326:	d05a      	beq.n	800b3de <HAL_TIM_ConfigClockSource+0x15a>
 800b328:	e062      	b.n	800b3f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b33a:	f000 f980 	bl	800b63e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b34c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	609a      	str	r2, [r3, #8]
      break;
 800b356:	e04f      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b368:	f000 f969 	bl	800b63e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	689a      	ldr	r2, [r3, #8]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b37a:	609a      	str	r2, [r3, #8]
      break;
 800b37c:	e03c      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b38a:	461a      	mov	r2, r3
 800b38c:	f000 f8e0 	bl	800b550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2150      	movs	r1, #80	; 0x50
 800b396:	4618      	mov	r0, r3
 800b398:	f000 f937 	bl	800b60a <TIM_ITRx_SetConfig>
      break;
 800b39c:	e02c      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	f000 f8fe 	bl	800b5ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2160      	movs	r1, #96	; 0x60
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 f927 	bl	800b60a <TIM_ITRx_SetConfig>
      break;
 800b3bc:	e01c      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	f000 f8c0 	bl	800b550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2140      	movs	r1, #64	; 0x40
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f000 f917 	bl	800b60a <TIM_ITRx_SetConfig>
      break;
 800b3dc:	e00c      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	f000 f90e 	bl	800b60a <TIM_ITRx_SetConfig>
      break;
 800b3ee:	e003      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3f4:	e000      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b3f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b408:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b412:	b480      	push	{r7}
 800b414:	b083      	sub	sp, #12
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b41a:	bf00      	nop
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	bc80      	pop	{r7}
 800b422:	4770      	bx	lr

0800b424 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b42c:	bf00      	nop
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	bc80      	pop	{r7}
 800b434:	4770      	bx	lr

0800b436 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b436:	b480      	push	{r7}
 800b438:	b083      	sub	sp, #12
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b43e:	bf00      	nop
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	bc80      	pop	{r7}
 800b446:	4770      	bx	lr

0800b448 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	bc80      	pop	{r7}
 800b458:	4770      	bx	lr
	...

0800b45c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a33      	ldr	r2, [pc, #204]	; (800b53c <TIM_Base_SetConfig+0xe0>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d013      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a32      	ldr	r2, [pc, #200]	; (800b540 <TIM_Base_SetConfig+0xe4>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d00f      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b482:	d00b      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a2f      	ldr	r2, [pc, #188]	; (800b544 <TIM_Base_SetConfig+0xe8>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d007      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a2e      	ldr	r2, [pc, #184]	; (800b548 <TIM_Base_SetConfig+0xec>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d003      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a2d      	ldr	r2, [pc, #180]	; (800b54c <TIM_Base_SetConfig+0xf0>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d108      	bne.n	800b4ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a22      	ldr	r2, [pc, #136]	; (800b53c <TIM_Base_SetConfig+0xe0>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d013      	beq.n	800b4de <TIM_Base_SetConfig+0x82>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a21      	ldr	r2, [pc, #132]	; (800b540 <TIM_Base_SetConfig+0xe4>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d00f      	beq.n	800b4de <TIM_Base_SetConfig+0x82>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4c4:	d00b      	beq.n	800b4de <TIM_Base_SetConfig+0x82>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4a1e      	ldr	r2, [pc, #120]	; (800b544 <TIM_Base_SetConfig+0xe8>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d007      	beq.n	800b4de <TIM_Base_SetConfig+0x82>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a1d      	ldr	r2, [pc, #116]	; (800b548 <TIM_Base_SetConfig+0xec>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d003      	beq.n	800b4de <TIM_Base_SetConfig+0x82>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a1c      	ldr	r2, [pc, #112]	; (800b54c <TIM_Base_SetConfig+0xf0>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d108      	bne.n	800b4f0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	689a      	ldr	r2, [r3, #8]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4a09      	ldr	r2, [pc, #36]	; (800b53c <TIM_Base_SetConfig+0xe0>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d003      	beq.n	800b524 <TIM_Base_SetConfig+0xc8>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	4a08      	ldr	r2, [pc, #32]	; (800b540 <TIM_Base_SetConfig+0xe4>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d103      	bne.n	800b52c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	691a      	ldr	r2, [r3, #16]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	615a      	str	r2, [r3, #20]
}
 800b532:	bf00      	nop
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	bc80      	pop	{r7}
 800b53a:	4770      	bx	lr
 800b53c:	40012c00 	.word	0x40012c00
 800b540:	40013400 	.word	0x40013400
 800b544:	40000400 	.word	0x40000400
 800b548:	40000800 	.word	0x40000800
 800b54c:	40000c00 	.word	0x40000c00

0800b550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b550:	b480      	push	{r7}
 800b552:	b087      	sub	sp, #28
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6a1b      	ldr	r3, [r3, #32]
 800b560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6a1b      	ldr	r3, [r3, #32]
 800b566:	f023 0201 	bic.w	r2, r3, #1
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	699b      	ldr	r3, [r3, #24]
 800b572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b57a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	011b      	lsls	r3, r3, #4
 800b580:	693a      	ldr	r2, [r7, #16]
 800b582:	4313      	orrs	r3, r2
 800b584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	f023 030a 	bic.w	r3, r3, #10
 800b58c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b58e:	697a      	ldr	r2, [r7, #20]
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	4313      	orrs	r3, r2
 800b594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	621a      	str	r2, [r3, #32]
}
 800b5a2:	bf00      	nop
 800b5a4:	371c      	adds	r7, #28
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bc80      	pop	{r7}
 800b5aa:	4770      	bx	lr

0800b5ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b087      	sub	sp, #28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6a1b      	ldr	r3, [r3, #32]
 800b5bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6a1b      	ldr	r3, [r3, #32]
 800b5c2:	f023 0210 	bic.w	r2, r3, #16
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	699b      	ldr	r3, [r3, #24]
 800b5ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b5d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	031b      	lsls	r3, r3, #12
 800b5dc:	693a      	ldr	r2, [r7, #16]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b5e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	011b      	lsls	r3, r3, #4
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	693a      	ldr	r2, [r7, #16]
 800b5f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	621a      	str	r2, [r3, #32]
}
 800b600:	bf00      	nop
 800b602:	371c      	adds	r7, #28
 800b604:	46bd      	mov	sp, r7
 800b606:	bc80      	pop	{r7}
 800b608:	4770      	bx	lr

0800b60a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b085      	sub	sp, #20
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b620:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4313      	orrs	r3, r2
 800b628:	f043 0307 	orr.w	r3, r3, #7
 800b62c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	609a      	str	r2, [r3, #8]
}
 800b634:	bf00      	nop
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	bc80      	pop	{r7}
 800b63c:	4770      	bx	lr

0800b63e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b63e:	b480      	push	{r7}
 800b640:	b087      	sub	sp, #28
 800b642:	af00      	add	r7, sp, #0
 800b644:	60f8      	str	r0, [r7, #12]
 800b646:	60b9      	str	r1, [r7, #8]
 800b648:	607a      	str	r2, [r7, #4]
 800b64a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b658:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	021a      	lsls	r2, r3, #8
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	431a      	orrs	r2, r3
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	4313      	orrs	r3, r2
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	4313      	orrs	r3, r2
 800b66a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	609a      	str	r2, [r3, #8]
}
 800b672:	bf00      	nop
 800b674:	371c      	adds	r7, #28
 800b676:	46bd      	mov	sp, r7
 800b678:	bc80      	pop	{r7}
 800b67a:	4770      	bx	lr

0800b67c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d101      	bne.n	800b694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b690:	2302      	movs	r3, #2
 800b692:	e050      	b.n	800b736 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a1b      	ldr	r2, [pc, #108]	; (800b740 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d018      	beq.n	800b70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a19      	ldr	r2, [pc, #100]	; (800b744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d013      	beq.n	800b70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ea:	d00e      	beq.n	800b70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a15      	ldr	r2, [pc, #84]	; (800b748 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d009      	beq.n	800b70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a14      	ldr	r2, [pc, #80]	; (800b74c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d004      	beq.n	800b70a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a12      	ldr	r2, [pc, #72]	; (800b750 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d10c      	bne.n	800b724 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	68ba      	ldr	r2, [r7, #8]
 800b718:	4313      	orrs	r3, r2
 800b71a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bc80      	pop	{r7}
 800b73e:	4770      	bx	lr
 800b740:	40012c00 	.word	0x40012c00
 800b744:	40013400 	.word	0x40013400
 800b748:	40000400 	.word	0x40000400
 800b74c:	40000800 	.word	0x40000800
 800b750:	40000c00 	.word	0x40000c00

0800b754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b75c:	bf00      	nop
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	bc80      	pop	{r7}
 800b764:	4770      	bx	lr

0800b766 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b766:	b480      	push	{r7}
 800b768:	b083      	sub	sp, #12
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b76e:	bf00      	nop
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	bc80      	pop	{r7}
 800b776:	4770      	bx	lr

0800b778 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d101      	bne.n	800b78a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e042      	b.n	800b810 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b790:	b2db      	uxtb	r3, r3
 800b792:	2b00      	cmp	r3, #0
 800b794:	d106      	bne.n	800b7a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7fc fe1a 	bl	80083d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2224      	movs	r2, #36	; 0x24
 800b7a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68da      	ldr	r2, [r3, #12]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b7ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 fcb5 	bl	800c12c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	691a      	ldr	r2, [r3, #16]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	695a      	ldr	r2, [r3, #20]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68da      	ldr	r2, [r3, #12]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b7f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2220      	movs	r2, #32
 800b7fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2220      	movs	r2, #32
 800b804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	4613      	mov	r3, r2
 800b824:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	2b20      	cmp	r3, #32
 800b830:	d121      	bne.n	800b876 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d002      	beq.n	800b83e <HAL_UART_Transmit_IT+0x26>
 800b838:	88fb      	ldrh	r3, [r7, #6]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d101      	bne.n	800b842 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e01a      	b.n	800b878 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	88fa      	ldrh	r2, [r7, #6]
 800b84c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	88fa      	ldrh	r2, [r7, #6]
 800b852:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2200      	movs	r2, #0
 800b858:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2221      	movs	r2, #33	; 0x21
 800b85e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	68da      	ldr	r2, [r3, #12]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b870:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	e000      	b.n	800b878 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b876:	2302      	movs	r3, #2
  }
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3714      	adds	r7, #20
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bc80      	pop	{r7}
 800b880:	4770      	bx	lr
	...

0800b884 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b0ba      	sub	sp, #232	; 0xe8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	695b      	ldr	r3, [r3, #20]
 800b8a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b8b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ba:	f003 030f 	and.w	r3, r3, #15
 800b8be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b8c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d10f      	bne.n	800b8ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ce:	f003 0320 	and.w	r3, r3, #32
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d009      	beq.n	800b8ea <HAL_UART_IRQHandler+0x66>
 800b8d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8da:	f003 0320 	and.w	r3, r3, #32
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d003      	beq.n	800b8ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fb63 	bl	800bfae <UART_Receive_IT>
      return;
 800b8e8:	e25b      	b.n	800bda2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b8ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f000 80de 	beq.w	800bab0 <HAL_UART_IRQHandler+0x22c>
 800b8f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8f8:	f003 0301 	and.w	r3, r3, #1
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d106      	bne.n	800b90e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b904:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b908:	2b00      	cmp	r3, #0
 800b90a:	f000 80d1 	beq.w	800bab0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b90e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b912:	f003 0301 	and.w	r3, r3, #1
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00b      	beq.n	800b932 <HAL_UART_IRQHandler+0xae>
 800b91a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b91e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b922:	2b00      	cmp	r3, #0
 800b924:	d005      	beq.n	800b932 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b92a:	f043 0201 	orr.w	r2, r3, #1
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b936:	f003 0304 	and.w	r3, r3, #4
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00b      	beq.n	800b956 <HAL_UART_IRQHandler+0xd2>
 800b93e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b942:	f003 0301 	and.w	r3, r3, #1
 800b946:	2b00      	cmp	r3, #0
 800b948:	d005      	beq.n	800b956 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b94e:	f043 0202 	orr.w	r2, r3, #2
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b95a:	f003 0302 	and.w	r3, r3, #2
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00b      	beq.n	800b97a <HAL_UART_IRQHandler+0xf6>
 800b962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b966:	f003 0301 	and.w	r3, r3, #1
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d005      	beq.n	800b97a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b972:	f043 0204 	orr.w	r2, r3, #4
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b97a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b97e:	f003 0308 	and.w	r3, r3, #8
 800b982:	2b00      	cmp	r3, #0
 800b984:	d011      	beq.n	800b9aa <HAL_UART_IRQHandler+0x126>
 800b986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b98a:	f003 0320 	and.w	r3, r3, #32
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d105      	bne.n	800b99e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b996:	f003 0301 	and.w	r3, r3, #1
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d005      	beq.n	800b9aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9a2:	f043 0208 	orr.w	r2, r3, #8
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f000 81f2 	beq.w	800bd98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b9b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9b8:	f003 0320 	and.w	r3, r3, #32
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d008      	beq.n	800b9d2 <HAL_UART_IRQHandler+0x14e>
 800b9c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9c4:	f003 0320 	and.w	r3, r3, #32
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d002      	beq.n	800b9d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 faee 	bl	800bfae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	695b      	ldr	r3, [r3, #20]
 800b9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	bf14      	ite	ne
 800b9e0:	2301      	movne	r3, #1
 800b9e2:	2300      	moveq	r3, #0
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ee:	f003 0308 	and.w	r3, r3, #8
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d103      	bne.n	800b9fe <HAL_UART_IRQHandler+0x17a>
 800b9f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d04f      	beq.n	800ba9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f9f8 	bl	800bdf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d041      	beq.n	800ba96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	3314      	adds	r3, #20
 800ba18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba20:	e853 3f00 	ldrex	r3, [r3]
 800ba24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ba28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	3314      	adds	r3, #20
 800ba3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ba3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ba42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ba4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ba4e:	e841 2300 	strex	r3, r2, [r1]
 800ba52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ba56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1d9      	bne.n	800ba12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d013      	beq.n	800ba8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba6a:	4a7e      	ldr	r2, [pc, #504]	; (800bc64 <HAL_UART_IRQHandler+0x3e0>)
 800ba6c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fd f86c 	bl	8008b50 <HAL_DMA_Abort_IT>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d016      	beq.n	800baac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ba88:	4610      	mov	r0, r2
 800ba8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba8c:	e00e      	b.n	800baac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f99c 	bl	800bdcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba94:	e00a      	b.n	800baac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f998 	bl	800bdcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba9c:	e006      	b.n	800baac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f994 	bl	800bdcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800baaa:	e175      	b.n	800bd98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baac:	bf00      	nop
    return;
 800baae:	e173      	b.n	800bd98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	f040 814f 	bne.w	800bd58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800baba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800babe:	f003 0310 	and.w	r3, r3, #16
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f000 8148 	beq.w	800bd58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bacc:	f003 0310 	and.w	r3, r3, #16
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f000 8141 	beq.w	800bd58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bad6:	2300      	movs	r3, #0
 800bad8:	60bb      	str	r3, [r7, #8]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	60bb      	str	r3, [r7, #8]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	60bb      	str	r3, [r7, #8]
 800baea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	695b      	ldr	r3, [r3, #20]
 800baf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f000 80b6 	beq.w	800bc68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f000 8145 	beq.w	800bd9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bb16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	f080 813e 	bcs.w	800bd9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb2c:	699b      	ldr	r3, [r3, #24]
 800bb2e:	2b20      	cmp	r3, #32
 800bb30:	f000 8088 	beq.w	800bc44 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	330c      	adds	r3, #12
 800bb3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb42:	e853 3f00 	ldrex	r3, [r3]
 800bb46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bb4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	330c      	adds	r3, #12
 800bb5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bb60:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bb64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bb6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bb70:	e841 2300 	strex	r3, r2, [r1]
 800bb74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bb78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1d9      	bne.n	800bb34 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	3314      	adds	r3, #20
 800bb86:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb8a:	e853 3f00 	ldrex	r3, [r3]
 800bb8e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bb90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb92:	f023 0301 	bic.w	r3, r3, #1
 800bb96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	3314      	adds	r3, #20
 800bba0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bba4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bba8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbaa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bbac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bbb0:	e841 2300 	strex	r3, r2, [r1]
 800bbb4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bbb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1e1      	bne.n	800bb80 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3314      	adds	r3, #20
 800bbc2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbc6:	e853 3f00 	ldrex	r3, [r3]
 800bbca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bbcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	3314      	adds	r3, #20
 800bbdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bbe0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bbe2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bbe6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bbe8:	e841 2300 	strex	r3, r2, [r1]
 800bbec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bbee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1e3      	bne.n	800bbbc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	330c      	adds	r3, #12
 800bc08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc0c:	e853 3f00 	ldrex	r3, [r3]
 800bc10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc14:	f023 0310 	bic.w	r3, r3, #16
 800bc18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	330c      	adds	r3, #12
 800bc22:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bc26:	65ba      	str	r2, [r7, #88]	; 0x58
 800bc28:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc2e:	e841 2300 	strex	r3, r2, [r1]
 800bc32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1e3      	bne.n	800bc02 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fc ff4b 	bl	8008ada <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2202      	movs	r2, #2
 800bc48:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	1ad3      	subs	r3, r2, r3
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f8bf 	bl	800bdde <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc60:	e09c      	b.n	800bd9c <HAL_UART_IRQHandler+0x518>
 800bc62:	bf00      	nop
 800bc64:	0800beb9 	.word	0x0800beb9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	1ad3      	subs	r3, r2, r3
 800bc74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f000 808e 	beq.w	800bda0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bc84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 8089 	beq.w	800bda0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	330c      	adds	r3, #12
 800bc94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc98:	e853 3f00 	ldrex	r3, [r3]
 800bc9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bca4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	330c      	adds	r3, #12
 800bcae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bcb2:	647a      	str	r2, [r7, #68]	; 0x44
 800bcb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bcb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcba:	e841 2300 	strex	r3, r2, [r1]
 800bcbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bcc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1e3      	bne.n	800bc8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3314      	adds	r3, #20
 800bccc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd0:	e853 3f00 	ldrex	r3, [r3]
 800bcd4:	623b      	str	r3, [r7, #32]
   return(result);
 800bcd6:	6a3b      	ldr	r3, [r7, #32]
 800bcd8:	f023 0301 	bic.w	r3, r3, #1
 800bcdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	3314      	adds	r3, #20
 800bce6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bcea:	633a      	str	r2, [r7, #48]	; 0x30
 800bcec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcf2:	e841 2300 	strex	r3, r2, [r1]
 800bcf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1e3      	bne.n	800bcc6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2220      	movs	r2, #32
 800bd02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	330c      	adds	r3, #12
 800bd12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	e853 3f00 	ldrex	r3, [r3]
 800bd1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f023 0310 	bic.w	r3, r3, #16
 800bd22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	330c      	adds	r3, #12
 800bd2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bd30:	61fa      	str	r2, [r7, #28]
 800bd32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd34:	69b9      	ldr	r1, [r7, #24]
 800bd36:	69fa      	ldr	r2, [r7, #28]
 800bd38:	e841 2300 	strex	r3, r2, [r1]
 800bd3c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1e3      	bne.n	800bd0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2202      	movs	r2, #2
 800bd48:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bd4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd4e:	4619      	mov	r1, r3
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f844 	bl	800bdde <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd56:	e023      	b.n	800bda0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bd58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d009      	beq.n	800bd78 <HAL_UART_IRQHandler+0x4f4>
 800bd64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d003      	beq.n	800bd78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 f8b5 	bl	800bee0 <UART_Transmit_IT>
    return;
 800bd76:	e014      	b.n	800bda2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bd78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00e      	beq.n	800bda2 <HAL_UART_IRQHandler+0x51e>
 800bd84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d008      	beq.n	800bda2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 f8f4 	bl	800bf7e <UART_EndTransmit_IT>
    return;
 800bd96:	e004      	b.n	800bda2 <HAL_UART_IRQHandler+0x51e>
    return;
 800bd98:	bf00      	nop
 800bd9a:	e002      	b.n	800bda2 <HAL_UART_IRQHandler+0x51e>
      return;
 800bd9c:	bf00      	nop
 800bd9e:	e000      	b.n	800bda2 <HAL_UART_IRQHandler+0x51e>
      return;
 800bda0:	bf00      	nop
  }
}
 800bda2:	37e8      	adds	r7, #232	; 0xe8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bc80      	pop	{r7}
 800bdb8:	4770      	bx	lr

0800bdba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bdba:	b480      	push	{r7}
 800bdbc:	b083      	sub	sp, #12
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bdc2:	bf00      	nop
 800bdc4:	370c      	adds	r7, #12
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bc80      	pop	{r7}
 800bdca:	4770      	bx	lr

0800bdcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bdd4:	bf00      	nop
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bc80      	pop	{r7}
 800bddc:	4770      	bx	lr

0800bdde <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bdde:	b480      	push	{r7}
 800bde0:	b083      	sub	sp, #12
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	460b      	mov	r3, r1
 800bde8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bdea:	bf00      	nop
 800bdec:	370c      	adds	r7, #12
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bc80      	pop	{r7}
 800bdf2:	4770      	bx	lr

0800bdf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b095      	sub	sp, #84	; 0x54
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	330c      	adds	r3, #12
 800be02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be06:	e853 3f00 	ldrex	r3, [r3]
 800be0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be12:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	330c      	adds	r3, #12
 800be1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be1c:	643a      	str	r2, [r7, #64]	; 0x40
 800be1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be24:	e841 2300 	strex	r3, r2, [r1]
 800be28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1e5      	bne.n	800bdfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	3314      	adds	r3, #20
 800be36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be38:	6a3b      	ldr	r3, [r7, #32]
 800be3a:	e853 3f00 	ldrex	r3, [r3]
 800be3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	f023 0301 	bic.w	r3, r3, #1
 800be46:	64bb      	str	r3, [r7, #72]	; 0x48
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	3314      	adds	r3, #20
 800be4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be50:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be58:	e841 2300 	strex	r3, r2, [r1]
 800be5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1e5      	bne.n	800be30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d119      	bne.n	800bea0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	330c      	adds	r3, #12
 800be72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	e853 3f00 	ldrex	r3, [r3]
 800be7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	f023 0310 	bic.w	r3, r3, #16
 800be82:	647b      	str	r3, [r7, #68]	; 0x44
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	330c      	adds	r3, #12
 800be8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be8c:	61ba      	str	r2, [r7, #24]
 800be8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be90:	6979      	ldr	r1, [r7, #20]
 800be92:	69ba      	ldr	r2, [r7, #24]
 800be94:	e841 2300 	strex	r3, r2, [r1]
 800be98:	613b      	str	r3, [r7, #16]
   return(result);
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1e5      	bne.n	800be6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2220      	movs	r2, #32
 800bea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	631a      	str	r2, [r3, #48]	; 0x30
}
 800beae:	bf00      	nop
 800beb0:	3754      	adds	r7, #84	; 0x54
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bc80      	pop	{r7}
 800beb6:	4770      	bx	lr

0800beb8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2200      	movs	r2, #0
 800bed0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f7ff ff7a 	bl	800bdcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bed8:	bf00      	nop
 800beda:	3710      	adds	r7, #16
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	2b21      	cmp	r3, #33	; 0x21
 800bef2:	d13e      	bne.n	800bf72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800befc:	d114      	bne.n	800bf28 <UART_Transmit_IT+0x48>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d110      	bne.n	800bf28 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6a1b      	ldr	r3, [r3, #32]
 800bf0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	881b      	ldrh	r3, [r3, #0]
 800bf10:	461a      	mov	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a1b      	ldr	r3, [r3, #32]
 800bf20:	1c9a      	adds	r2, r3, #2
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	621a      	str	r2, [r3, #32]
 800bf26:	e008      	b.n	800bf3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6a1b      	ldr	r3, [r3, #32]
 800bf2c:	1c59      	adds	r1, r3, #1
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	6211      	str	r1, [r2, #32]
 800bf32:	781a      	ldrb	r2, [r3, #0]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	3b01      	subs	r3, #1
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	4619      	mov	r1, r3
 800bf48:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10f      	bne.n	800bf6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	68da      	ldr	r2, [r3, #12]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	68da      	ldr	r2, [r3, #12]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	e000      	b.n	800bf74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bf72:	2302      	movs	r3, #2
  }
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3714      	adds	r7, #20
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bc80      	pop	{r7}
 800bf7c:	4770      	bx	lr

0800bf7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b082      	sub	sp, #8
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	68da      	ldr	r2, [r3, #12]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2220      	movs	r2, #32
 800bf9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff ff02 	bl	800bda8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3708      	adds	r7, #8
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b08c      	sub	sp, #48	; 0x30
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	2b22      	cmp	r3, #34	; 0x22
 800bfc0:	f040 80ae 	bne.w	800c120 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfcc:	d117      	bne.n	800bffe <UART_Receive_IT+0x50>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d113      	bne.n	800bffe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfde:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bff6:	1c9a      	adds	r2, r3, #2
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	629a      	str	r2, [r3, #40]	; 0x28
 800bffc:	e026      	b.n	800c04c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c002:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c004:	2300      	movs	r3, #0
 800c006:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c010:	d007      	beq.n	800c022 <UART_Receive_IT+0x74>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	689b      	ldr	r3, [r3, #8]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d10a      	bne.n	800c030 <UART_Receive_IT+0x82>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d106      	bne.n	800c030 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	b2da      	uxtb	r2, r3
 800c02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02c:	701a      	strb	r2, [r3, #0]
 800c02e:	e008      	b.n	800c042 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	b2db      	uxtb	r3, r3
 800c038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c040:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c046:	1c5a      	adds	r2, r3, #1
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c050:	b29b      	uxth	r3, r3
 800c052:	3b01      	subs	r3, #1
 800c054:	b29b      	uxth	r3, r3
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	4619      	mov	r1, r3
 800c05a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d15d      	bne.n	800c11c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68da      	ldr	r2, [r3, #12]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f022 0220 	bic.w	r2, r2, #32
 800c06e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68da      	ldr	r2, [r3, #12]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c07e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	695a      	ldr	r2, [r3, #20]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f022 0201 	bic.w	r2, r2, #1
 800c08e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2220      	movs	r2, #32
 800c094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d135      	bne.n	800c112 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	330c      	adds	r3, #12
 800c0b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	e853 3f00 	ldrex	r3, [r3]
 800c0ba:	613b      	str	r3, [r7, #16]
   return(result);
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	f023 0310 	bic.w	r3, r3, #16
 800c0c2:	627b      	str	r3, [r7, #36]	; 0x24
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	330c      	adds	r3, #12
 800c0ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0cc:	623a      	str	r2, [r7, #32]
 800c0ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d0:	69f9      	ldr	r1, [r7, #28]
 800c0d2:	6a3a      	ldr	r2, [r7, #32]
 800c0d4:	e841 2300 	strex	r3, r2, [r1]
 800c0d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d1e5      	bne.n	800c0ac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f003 0310 	and.w	r3, r3, #16
 800c0ea:	2b10      	cmp	r3, #16
 800c0ec:	d10a      	bne.n	800c104 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	60fb      	str	r3, [r7, #12]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	60fb      	str	r3, [r7, #12]
 800c102:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c108:	4619      	mov	r1, r3
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7ff fe67 	bl	800bdde <HAL_UARTEx_RxEventCallback>
 800c110:	e002      	b.n	800c118 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7ff fe51 	bl	800bdba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c118:	2300      	movs	r3, #0
 800c11a:	e002      	b.n	800c122 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c11c:	2300      	movs	r3, #0
 800c11e:	e000      	b.n	800c122 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c120:	2302      	movs	r3, #2
  }
}
 800c122:	4618      	mov	r0, r3
 800c124:	3730      	adds	r7, #48	; 0x30
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
	...

0800c12c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	68da      	ldr	r2, [r3, #12]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	430a      	orrs	r2, r1
 800c148:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	689a      	ldr	r2, [r3, #8]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	691b      	ldr	r3, [r3, #16]
 800c152:	431a      	orrs	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	695b      	ldr	r3, [r3, #20]
 800c158:	4313      	orrs	r3, r2
 800c15a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c166:	f023 030c 	bic.w	r3, r3, #12
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	6812      	ldr	r2, [r2, #0]
 800c16e:	68b9      	ldr	r1, [r7, #8]
 800c170:	430b      	orrs	r3, r1
 800c172:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	695b      	ldr	r3, [r3, #20]
 800c17a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	699a      	ldr	r2, [r3, #24]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	430a      	orrs	r2, r1
 800c188:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a2c      	ldr	r2, [pc, #176]	; (800c240 <UART_SetConfig+0x114>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d103      	bne.n	800c19c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c194:	f7fe fe8c 	bl	800aeb0 <HAL_RCC_GetPCLK2Freq>
 800c198:	60f8      	str	r0, [r7, #12]
 800c19a:	e002      	b.n	800c1a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c19c:	f7fe fe74 	bl	800ae88 <HAL_RCC_GetPCLK1Freq>
 800c1a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	4413      	add	r3, r2
 800c1aa:	009a      	lsls	r2, r3, #2
 800c1ac:	441a      	add	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1b8:	4a22      	ldr	r2, [pc, #136]	; (800c244 <UART_SetConfig+0x118>)
 800c1ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c1be:	095b      	lsrs	r3, r3, #5
 800c1c0:	0119      	lsls	r1, r3, #4
 800c1c2:	68fa      	ldr	r2, [r7, #12]
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	4413      	add	r3, r2
 800c1ca:	009a      	lsls	r2, r3, #2
 800c1cc:	441a      	add	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c1d8:	4b1a      	ldr	r3, [pc, #104]	; (800c244 <UART_SetConfig+0x118>)
 800c1da:	fba3 0302 	umull	r0, r3, r3, r2
 800c1de:	095b      	lsrs	r3, r3, #5
 800c1e0:	2064      	movs	r0, #100	; 0x64
 800c1e2:	fb00 f303 	mul.w	r3, r0, r3
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	011b      	lsls	r3, r3, #4
 800c1ea:	3332      	adds	r3, #50	; 0x32
 800c1ec:	4a15      	ldr	r2, [pc, #84]	; (800c244 <UART_SetConfig+0x118>)
 800c1ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f2:	095b      	lsrs	r3, r3, #5
 800c1f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1f8:	4419      	add	r1, r3
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	4413      	add	r3, r2
 800c202:	009a      	lsls	r2, r3, #2
 800c204:	441a      	add	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c210:	4b0c      	ldr	r3, [pc, #48]	; (800c244 <UART_SetConfig+0x118>)
 800c212:	fba3 0302 	umull	r0, r3, r3, r2
 800c216:	095b      	lsrs	r3, r3, #5
 800c218:	2064      	movs	r0, #100	; 0x64
 800c21a:	fb00 f303 	mul.w	r3, r0, r3
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	011b      	lsls	r3, r3, #4
 800c222:	3332      	adds	r3, #50	; 0x32
 800c224:	4a07      	ldr	r2, [pc, #28]	; (800c244 <UART_SetConfig+0x118>)
 800c226:	fba2 2303 	umull	r2, r3, r2, r3
 800c22a:	095b      	lsrs	r3, r3, #5
 800c22c:	f003 020f 	and.w	r2, r3, #15
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	440a      	add	r2, r1
 800c236:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c238:	bf00      	nop
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	40013800 	.word	0x40013800
 800c244:	51eb851f 	.word	0x51eb851f

0800c248 <__itoa>:
 800c248:	1e93      	subs	r3, r2, #2
 800c24a:	2b22      	cmp	r3, #34	; 0x22
 800c24c:	b510      	push	{r4, lr}
 800c24e:	460c      	mov	r4, r1
 800c250:	d904      	bls.n	800c25c <__itoa+0x14>
 800c252:	2300      	movs	r3, #0
 800c254:	461c      	mov	r4, r3
 800c256:	700b      	strb	r3, [r1, #0]
 800c258:	4620      	mov	r0, r4
 800c25a:	bd10      	pop	{r4, pc}
 800c25c:	2a0a      	cmp	r2, #10
 800c25e:	d109      	bne.n	800c274 <__itoa+0x2c>
 800c260:	2800      	cmp	r0, #0
 800c262:	da07      	bge.n	800c274 <__itoa+0x2c>
 800c264:	232d      	movs	r3, #45	; 0x2d
 800c266:	700b      	strb	r3, [r1, #0]
 800c268:	2101      	movs	r1, #1
 800c26a:	4240      	negs	r0, r0
 800c26c:	4421      	add	r1, r4
 800c26e:	f000 f8b9 	bl	800c3e4 <__utoa>
 800c272:	e7f1      	b.n	800c258 <__itoa+0x10>
 800c274:	2100      	movs	r1, #0
 800c276:	e7f9      	b.n	800c26c <__itoa+0x24>

0800c278 <itoa>:
 800c278:	f7ff bfe6 	b.w	800c248 <__itoa>

0800c27c <malloc>:
 800c27c:	4b02      	ldr	r3, [pc, #8]	; (800c288 <malloc+0xc>)
 800c27e:	4601      	mov	r1, r0
 800c280:	6818      	ldr	r0, [r3, #0]
 800c282:	f000 b823 	b.w	800c2cc <_malloc_r>
 800c286:	bf00      	nop
 800c288:	200000f8 	.word	0x200000f8

0800c28c <sbrk_aligned>:
 800c28c:	b570      	push	{r4, r5, r6, lr}
 800c28e:	4e0e      	ldr	r6, [pc, #56]	; (800c2c8 <sbrk_aligned+0x3c>)
 800c290:	460c      	mov	r4, r1
 800c292:	6831      	ldr	r1, [r6, #0]
 800c294:	4605      	mov	r5, r0
 800c296:	b911      	cbnz	r1, 800c29e <sbrk_aligned+0x12>
 800c298:	f000 f91e 	bl	800c4d8 <_sbrk_r>
 800c29c:	6030      	str	r0, [r6, #0]
 800c29e:	4621      	mov	r1, r4
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	f000 f919 	bl	800c4d8 <_sbrk_r>
 800c2a6:	1c43      	adds	r3, r0, #1
 800c2a8:	d00a      	beq.n	800c2c0 <sbrk_aligned+0x34>
 800c2aa:	1cc4      	adds	r4, r0, #3
 800c2ac:	f024 0403 	bic.w	r4, r4, #3
 800c2b0:	42a0      	cmp	r0, r4
 800c2b2:	d007      	beq.n	800c2c4 <sbrk_aligned+0x38>
 800c2b4:	1a21      	subs	r1, r4, r0
 800c2b6:	4628      	mov	r0, r5
 800c2b8:	f000 f90e 	bl	800c4d8 <_sbrk_r>
 800c2bc:	3001      	adds	r0, #1
 800c2be:	d101      	bne.n	800c2c4 <sbrk_aligned+0x38>
 800c2c0:	f04f 34ff 	mov.w	r4, #4294967295
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	bd70      	pop	{r4, r5, r6, pc}
 800c2c8:	20000498 	.word	0x20000498

0800c2cc <_malloc_r>:
 800c2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2d0:	1ccd      	adds	r5, r1, #3
 800c2d2:	f025 0503 	bic.w	r5, r5, #3
 800c2d6:	3508      	adds	r5, #8
 800c2d8:	2d0c      	cmp	r5, #12
 800c2da:	bf38      	it	cc
 800c2dc:	250c      	movcc	r5, #12
 800c2de:	2d00      	cmp	r5, #0
 800c2e0:	4607      	mov	r7, r0
 800c2e2:	db01      	blt.n	800c2e8 <_malloc_r+0x1c>
 800c2e4:	42a9      	cmp	r1, r5
 800c2e6:	d905      	bls.n	800c2f4 <_malloc_r+0x28>
 800c2e8:	230c      	movs	r3, #12
 800c2ea:	2600      	movs	r6, #0
 800c2ec:	603b      	str	r3, [r7, #0]
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c3c8 <_malloc_r+0xfc>
 800c2f8:	f000 f868 	bl	800c3cc <__malloc_lock>
 800c2fc:	f8d8 3000 	ldr.w	r3, [r8]
 800c300:	461c      	mov	r4, r3
 800c302:	bb5c      	cbnz	r4, 800c35c <_malloc_r+0x90>
 800c304:	4629      	mov	r1, r5
 800c306:	4638      	mov	r0, r7
 800c308:	f7ff ffc0 	bl	800c28c <sbrk_aligned>
 800c30c:	1c43      	adds	r3, r0, #1
 800c30e:	4604      	mov	r4, r0
 800c310:	d155      	bne.n	800c3be <_malloc_r+0xf2>
 800c312:	f8d8 4000 	ldr.w	r4, [r8]
 800c316:	4626      	mov	r6, r4
 800c318:	2e00      	cmp	r6, #0
 800c31a:	d145      	bne.n	800c3a8 <_malloc_r+0xdc>
 800c31c:	2c00      	cmp	r4, #0
 800c31e:	d048      	beq.n	800c3b2 <_malloc_r+0xe6>
 800c320:	6823      	ldr	r3, [r4, #0]
 800c322:	4631      	mov	r1, r6
 800c324:	4638      	mov	r0, r7
 800c326:	eb04 0903 	add.w	r9, r4, r3
 800c32a:	f000 f8d5 	bl	800c4d8 <_sbrk_r>
 800c32e:	4581      	cmp	r9, r0
 800c330:	d13f      	bne.n	800c3b2 <_malloc_r+0xe6>
 800c332:	6821      	ldr	r1, [r4, #0]
 800c334:	4638      	mov	r0, r7
 800c336:	1a6d      	subs	r5, r5, r1
 800c338:	4629      	mov	r1, r5
 800c33a:	f7ff ffa7 	bl	800c28c <sbrk_aligned>
 800c33e:	3001      	adds	r0, #1
 800c340:	d037      	beq.n	800c3b2 <_malloc_r+0xe6>
 800c342:	6823      	ldr	r3, [r4, #0]
 800c344:	442b      	add	r3, r5
 800c346:	6023      	str	r3, [r4, #0]
 800c348:	f8d8 3000 	ldr.w	r3, [r8]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d038      	beq.n	800c3c2 <_malloc_r+0xf6>
 800c350:	685a      	ldr	r2, [r3, #4]
 800c352:	42a2      	cmp	r2, r4
 800c354:	d12b      	bne.n	800c3ae <_malloc_r+0xe2>
 800c356:	2200      	movs	r2, #0
 800c358:	605a      	str	r2, [r3, #4]
 800c35a:	e00f      	b.n	800c37c <_malloc_r+0xb0>
 800c35c:	6822      	ldr	r2, [r4, #0]
 800c35e:	1b52      	subs	r2, r2, r5
 800c360:	d41f      	bmi.n	800c3a2 <_malloc_r+0xd6>
 800c362:	2a0b      	cmp	r2, #11
 800c364:	d917      	bls.n	800c396 <_malloc_r+0xca>
 800c366:	1961      	adds	r1, r4, r5
 800c368:	42a3      	cmp	r3, r4
 800c36a:	6025      	str	r5, [r4, #0]
 800c36c:	bf18      	it	ne
 800c36e:	6059      	strne	r1, [r3, #4]
 800c370:	6863      	ldr	r3, [r4, #4]
 800c372:	bf08      	it	eq
 800c374:	f8c8 1000 	streq.w	r1, [r8]
 800c378:	5162      	str	r2, [r4, r5]
 800c37a:	604b      	str	r3, [r1, #4]
 800c37c:	4638      	mov	r0, r7
 800c37e:	f104 060b 	add.w	r6, r4, #11
 800c382:	f000 f829 	bl	800c3d8 <__malloc_unlock>
 800c386:	f026 0607 	bic.w	r6, r6, #7
 800c38a:	1d23      	adds	r3, r4, #4
 800c38c:	1af2      	subs	r2, r6, r3
 800c38e:	d0ae      	beq.n	800c2ee <_malloc_r+0x22>
 800c390:	1b9b      	subs	r3, r3, r6
 800c392:	50a3      	str	r3, [r4, r2]
 800c394:	e7ab      	b.n	800c2ee <_malloc_r+0x22>
 800c396:	42a3      	cmp	r3, r4
 800c398:	6862      	ldr	r2, [r4, #4]
 800c39a:	d1dd      	bne.n	800c358 <_malloc_r+0x8c>
 800c39c:	f8c8 2000 	str.w	r2, [r8]
 800c3a0:	e7ec      	b.n	800c37c <_malloc_r+0xb0>
 800c3a2:	4623      	mov	r3, r4
 800c3a4:	6864      	ldr	r4, [r4, #4]
 800c3a6:	e7ac      	b.n	800c302 <_malloc_r+0x36>
 800c3a8:	4634      	mov	r4, r6
 800c3aa:	6876      	ldr	r6, [r6, #4]
 800c3ac:	e7b4      	b.n	800c318 <_malloc_r+0x4c>
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	e7cc      	b.n	800c34c <_malloc_r+0x80>
 800c3b2:	230c      	movs	r3, #12
 800c3b4:	4638      	mov	r0, r7
 800c3b6:	603b      	str	r3, [r7, #0]
 800c3b8:	f000 f80e 	bl	800c3d8 <__malloc_unlock>
 800c3bc:	e797      	b.n	800c2ee <_malloc_r+0x22>
 800c3be:	6025      	str	r5, [r4, #0]
 800c3c0:	e7dc      	b.n	800c37c <_malloc_r+0xb0>
 800c3c2:	605b      	str	r3, [r3, #4]
 800c3c4:	deff      	udf	#255	; 0xff
 800c3c6:	bf00      	nop
 800c3c8:	20000494 	.word	0x20000494

0800c3cc <__malloc_lock>:
 800c3cc:	4801      	ldr	r0, [pc, #4]	; (800c3d4 <__malloc_lock+0x8>)
 800c3ce:	f000 b8bd 	b.w	800c54c <__retarget_lock_acquire_recursive>
 800c3d2:	bf00      	nop
 800c3d4:	200005d8 	.word	0x200005d8

0800c3d8 <__malloc_unlock>:
 800c3d8:	4801      	ldr	r0, [pc, #4]	; (800c3e0 <__malloc_unlock+0x8>)
 800c3da:	f000 b8b8 	b.w	800c54e <__retarget_lock_release_recursive>
 800c3de:	bf00      	nop
 800c3e0:	200005d8 	.word	0x200005d8

0800c3e4 <__utoa>:
 800c3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3e6:	b08b      	sub	sp, #44	; 0x2c
 800c3e8:	4605      	mov	r5, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	466e      	mov	r6, sp
 800c3ee:	4c1d      	ldr	r4, [pc, #116]	; (800c464 <__utoa+0x80>)
 800c3f0:	f104 0c20 	add.w	ip, r4, #32
 800c3f4:	4637      	mov	r7, r6
 800c3f6:	6820      	ldr	r0, [r4, #0]
 800c3f8:	6861      	ldr	r1, [r4, #4]
 800c3fa:	3408      	adds	r4, #8
 800c3fc:	c703      	stmia	r7!, {r0, r1}
 800c3fe:	4564      	cmp	r4, ip
 800c400:	463e      	mov	r6, r7
 800c402:	d1f7      	bne.n	800c3f4 <__utoa+0x10>
 800c404:	7921      	ldrb	r1, [r4, #4]
 800c406:	6820      	ldr	r0, [r4, #0]
 800c408:	7139      	strb	r1, [r7, #4]
 800c40a:	1e91      	subs	r1, r2, #2
 800c40c:	2922      	cmp	r1, #34	; 0x22
 800c40e:	6038      	str	r0, [r7, #0]
 800c410:	f04f 0100 	mov.w	r1, #0
 800c414:	d904      	bls.n	800c420 <__utoa+0x3c>
 800c416:	7019      	strb	r1, [r3, #0]
 800c418:	460b      	mov	r3, r1
 800c41a:	4618      	mov	r0, r3
 800c41c:	b00b      	add	sp, #44	; 0x2c
 800c41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c420:	1e58      	subs	r0, r3, #1
 800c422:	4684      	mov	ip, r0
 800c424:	fbb5 f7f2 	udiv	r7, r5, r2
 800c428:	fb02 5617 	mls	r6, r2, r7, r5
 800c42c:	3628      	adds	r6, #40	; 0x28
 800c42e:	446e      	add	r6, sp
 800c430:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c434:	460c      	mov	r4, r1
 800c436:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c43a:	462e      	mov	r6, r5
 800c43c:	42b2      	cmp	r2, r6
 800c43e:	463d      	mov	r5, r7
 800c440:	f101 0101 	add.w	r1, r1, #1
 800c444:	d9ee      	bls.n	800c424 <__utoa+0x40>
 800c446:	2200      	movs	r2, #0
 800c448:	545a      	strb	r2, [r3, r1]
 800c44a:	1919      	adds	r1, r3, r4
 800c44c:	1aa5      	subs	r5, r4, r2
 800c44e:	42aa      	cmp	r2, r5
 800c450:	dae3      	bge.n	800c41a <__utoa+0x36>
 800c452:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c456:	780e      	ldrb	r6, [r1, #0]
 800c458:	3201      	adds	r2, #1
 800c45a:	7006      	strb	r6, [r0, #0]
 800c45c:	f801 5901 	strb.w	r5, [r1], #-1
 800c460:	e7f4      	b.n	800c44c <__utoa+0x68>
 800c462:	bf00      	nop
 800c464:	0800dc56 	.word	0x0800dc56

0800c468 <siprintf>:
 800c468:	b40e      	push	{r1, r2, r3}
 800c46a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c46e:	b500      	push	{lr}
 800c470:	b09c      	sub	sp, #112	; 0x70
 800c472:	ab1d      	add	r3, sp, #116	; 0x74
 800c474:	9002      	str	r0, [sp, #8]
 800c476:	9006      	str	r0, [sp, #24]
 800c478:	9107      	str	r1, [sp, #28]
 800c47a:	9104      	str	r1, [sp, #16]
 800c47c:	4808      	ldr	r0, [pc, #32]	; (800c4a0 <siprintf+0x38>)
 800c47e:	4909      	ldr	r1, [pc, #36]	; (800c4a4 <siprintf+0x3c>)
 800c480:	f853 2b04 	ldr.w	r2, [r3], #4
 800c484:	9105      	str	r1, [sp, #20]
 800c486:	6800      	ldr	r0, [r0, #0]
 800c488:	a902      	add	r1, sp, #8
 800c48a:	9301      	str	r3, [sp, #4]
 800c48c:	f000 f90a 	bl	800c6a4 <_svfiprintf_r>
 800c490:	2200      	movs	r2, #0
 800c492:	9b02      	ldr	r3, [sp, #8]
 800c494:	701a      	strb	r2, [r3, #0]
 800c496:	b01c      	add	sp, #112	; 0x70
 800c498:	f85d eb04 	ldr.w	lr, [sp], #4
 800c49c:	b003      	add	sp, #12
 800c49e:	4770      	bx	lr
 800c4a0:	200000f8 	.word	0x200000f8
 800c4a4:	ffff0208 	.word	0xffff0208

0800c4a8 <memset>:
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	4402      	add	r2, r0
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d100      	bne.n	800c4b2 <memset+0xa>
 800c4b0:	4770      	bx	lr
 800c4b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c4b6:	e7f9      	b.n	800c4ac <memset+0x4>

0800c4b8 <strcat>:
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	b510      	push	{r4, lr}
 800c4bc:	7814      	ldrb	r4, [r2, #0]
 800c4be:	4613      	mov	r3, r2
 800c4c0:	3201      	adds	r2, #1
 800c4c2:	2c00      	cmp	r4, #0
 800c4c4:	d1fa      	bne.n	800c4bc <strcat+0x4>
 800c4c6:	3b01      	subs	r3, #1
 800c4c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4d0:	2a00      	cmp	r2, #0
 800c4d2:	d1f9      	bne.n	800c4c8 <strcat+0x10>
 800c4d4:	bd10      	pop	{r4, pc}
	...

0800c4d8 <_sbrk_r>:
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	2300      	movs	r3, #0
 800c4dc:	4d05      	ldr	r5, [pc, #20]	; (800c4f4 <_sbrk_r+0x1c>)
 800c4de:	4604      	mov	r4, r0
 800c4e0:	4608      	mov	r0, r1
 800c4e2:	602b      	str	r3, [r5, #0]
 800c4e4:	f7fc f808 	bl	80084f8 <_sbrk>
 800c4e8:	1c43      	adds	r3, r0, #1
 800c4ea:	d102      	bne.n	800c4f2 <_sbrk_r+0x1a>
 800c4ec:	682b      	ldr	r3, [r5, #0]
 800c4ee:	b103      	cbz	r3, 800c4f2 <_sbrk_r+0x1a>
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	bd38      	pop	{r3, r4, r5, pc}
 800c4f4:	200005d4 	.word	0x200005d4

0800c4f8 <__errno>:
 800c4f8:	4b01      	ldr	r3, [pc, #4]	; (800c500 <__errno+0x8>)
 800c4fa:	6818      	ldr	r0, [r3, #0]
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	200000f8 	.word	0x200000f8

0800c504 <__libc_init_array>:
 800c504:	b570      	push	{r4, r5, r6, lr}
 800c506:	2600      	movs	r6, #0
 800c508:	4d0c      	ldr	r5, [pc, #48]	; (800c53c <__libc_init_array+0x38>)
 800c50a:	4c0d      	ldr	r4, [pc, #52]	; (800c540 <__libc_init_array+0x3c>)
 800c50c:	1b64      	subs	r4, r4, r5
 800c50e:	10a4      	asrs	r4, r4, #2
 800c510:	42a6      	cmp	r6, r4
 800c512:	d109      	bne.n	800c528 <__libc_init_array+0x24>
 800c514:	f000 fbc6 	bl	800cca4 <_init>
 800c518:	2600      	movs	r6, #0
 800c51a:	4d0a      	ldr	r5, [pc, #40]	; (800c544 <__libc_init_array+0x40>)
 800c51c:	4c0a      	ldr	r4, [pc, #40]	; (800c548 <__libc_init_array+0x44>)
 800c51e:	1b64      	subs	r4, r4, r5
 800c520:	10a4      	asrs	r4, r4, #2
 800c522:	42a6      	cmp	r6, r4
 800c524:	d105      	bne.n	800c532 <__libc_init_array+0x2e>
 800c526:	bd70      	pop	{r4, r5, r6, pc}
 800c528:	f855 3b04 	ldr.w	r3, [r5], #4
 800c52c:	4798      	blx	r3
 800c52e:	3601      	adds	r6, #1
 800c530:	e7ee      	b.n	800c510 <__libc_init_array+0xc>
 800c532:	f855 3b04 	ldr.w	r3, [r5], #4
 800c536:	4798      	blx	r3
 800c538:	3601      	adds	r6, #1
 800c53a:	e7f2      	b.n	800c522 <__libc_init_array+0x1e>
 800c53c:	0800dcb0 	.word	0x0800dcb0
 800c540:	0800dcb0 	.word	0x0800dcb0
 800c544:	0800dcb0 	.word	0x0800dcb0
 800c548:	0800dcb4 	.word	0x0800dcb4

0800c54c <__retarget_lock_acquire_recursive>:
 800c54c:	4770      	bx	lr

0800c54e <__retarget_lock_release_recursive>:
 800c54e:	4770      	bx	lr

0800c550 <strcpy>:
 800c550:	4603      	mov	r3, r0
 800c552:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c556:	f803 2b01 	strb.w	r2, [r3], #1
 800c55a:	2a00      	cmp	r2, #0
 800c55c:	d1f9      	bne.n	800c552 <strcpy+0x2>
 800c55e:	4770      	bx	lr

0800c560 <_free_r>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	4605      	mov	r5, r0
 800c564:	2900      	cmp	r1, #0
 800c566:	d040      	beq.n	800c5ea <_free_r+0x8a>
 800c568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c56c:	1f0c      	subs	r4, r1, #4
 800c56e:	2b00      	cmp	r3, #0
 800c570:	bfb8      	it	lt
 800c572:	18e4      	addlt	r4, r4, r3
 800c574:	f7ff ff2a 	bl	800c3cc <__malloc_lock>
 800c578:	4a1c      	ldr	r2, [pc, #112]	; (800c5ec <_free_r+0x8c>)
 800c57a:	6813      	ldr	r3, [r2, #0]
 800c57c:	b933      	cbnz	r3, 800c58c <_free_r+0x2c>
 800c57e:	6063      	str	r3, [r4, #4]
 800c580:	6014      	str	r4, [r2, #0]
 800c582:	4628      	mov	r0, r5
 800c584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c588:	f7ff bf26 	b.w	800c3d8 <__malloc_unlock>
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	d908      	bls.n	800c5a2 <_free_r+0x42>
 800c590:	6820      	ldr	r0, [r4, #0]
 800c592:	1821      	adds	r1, r4, r0
 800c594:	428b      	cmp	r3, r1
 800c596:	bf01      	itttt	eq
 800c598:	6819      	ldreq	r1, [r3, #0]
 800c59a:	685b      	ldreq	r3, [r3, #4]
 800c59c:	1809      	addeq	r1, r1, r0
 800c59e:	6021      	streq	r1, [r4, #0]
 800c5a0:	e7ed      	b.n	800c57e <_free_r+0x1e>
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	b10b      	cbz	r3, 800c5ac <_free_r+0x4c>
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	d9fa      	bls.n	800c5a2 <_free_r+0x42>
 800c5ac:	6811      	ldr	r1, [r2, #0]
 800c5ae:	1850      	adds	r0, r2, r1
 800c5b0:	42a0      	cmp	r0, r4
 800c5b2:	d10b      	bne.n	800c5cc <_free_r+0x6c>
 800c5b4:	6820      	ldr	r0, [r4, #0]
 800c5b6:	4401      	add	r1, r0
 800c5b8:	1850      	adds	r0, r2, r1
 800c5ba:	4283      	cmp	r3, r0
 800c5bc:	6011      	str	r1, [r2, #0]
 800c5be:	d1e0      	bne.n	800c582 <_free_r+0x22>
 800c5c0:	6818      	ldr	r0, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	4408      	add	r0, r1
 800c5c6:	6010      	str	r0, [r2, #0]
 800c5c8:	6053      	str	r3, [r2, #4]
 800c5ca:	e7da      	b.n	800c582 <_free_r+0x22>
 800c5cc:	d902      	bls.n	800c5d4 <_free_r+0x74>
 800c5ce:	230c      	movs	r3, #12
 800c5d0:	602b      	str	r3, [r5, #0]
 800c5d2:	e7d6      	b.n	800c582 <_free_r+0x22>
 800c5d4:	6820      	ldr	r0, [r4, #0]
 800c5d6:	1821      	adds	r1, r4, r0
 800c5d8:	428b      	cmp	r3, r1
 800c5da:	bf01      	itttt	eq
 800c5dc:	6819      	ldreq	r1, [r3, #0]
 800c5de:	685b      	ldreq	r3, [r3, #4]
 800c5e0:	1809      	addeq	r1, r1, r0
 800c5e2:	6021      	streq	r1, [r4, #0]
 800c5e4:	6063      	str	r3, [r4, #4]
 800c5e6:	6054      	str	r4, [r2, #4]
 800c5e8:	e7cb      	b.n	800c582 <_free_r+0x22>
 800c5ea:	bd38      	pop	{r3, r4, r5, pc}
 800c5ec:	20000494 	.word	0x20000494

0800c5f0 <__ssputs_r>:
 800c5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f4:	461f      	mov	r7, r3
 800c5f6:	688e      	ldr	r6, [r1, #8]
 800c5f8:	4682      	mov	sl, r0
 800c5fa:	42be      	cmp	r6, r7
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	4690      	mov	r8, r2
 800c600:	680b      	ldr	r3, [r1, #0]
 800c602:	d82c      	bhi.n	800c65e <__ssputs_r+0x6e>
 800c604:	898a      	ldrh	r2, [r1, #12]
 800c606:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c60a:	d026      	beq.n	800c65a <__ssputs_r+0x6a>
 800c60c:	6965      	ldr	r5, [r4, #20]
 800c60e:	6909      	ldr	r1, [r1, #16]
 800c610:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c614:	eba3 0901 	sub.w	r9, r3, r1
 800c618:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c61c:	1c7b      	adds	r3, r7, #1
 800c61e:	444b      	add	r3, r9
 800c620:	106d      	asrs	r5, r5, #1
 800c622:	429d      	cmp	r5, r3
 800c624:	bf38      	it	cc
 800c626:	461d      	movcc	r5, r3
 800c628:	0553      	lsls	r3, r2, #21
 800c62a:	d527      	bpl.n	800c67c <__ssputs_r+0x8c>
 800c62c:	4629      	mov	r1, r5
 800c62e:	f7ff fe4d 	bl	800c2cc <_malloc_r>
 800c632:	4606      	mov	r6, r0
 800c634:	b360      	cbz	r0, 800c690 <__ssputs_r+0xa0>
 800c636:	464a      	mov	r2, r9
 800c638:	6921      	ldr	r1, [r4, #16]
 800c63a:	f000 faed 	bl	800cc18 <memcpy>
 800c63e:	89a3      	ldrh	r3, [r4, #12]
 800c640:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c648:	81a3      	strh	r3, [r4, #12]
 800c64a:	6126      	str	r6, [r4, #16]
 800c64c:	444e      	add	r6, r9
 800c64e:	6026      	str	r6, [r4, #0]
 800c650:	463e      	mov	r6, r7
 800c652:	6165      	str	r5, [r4, #20]
 800c654:	eba5 0509 	sub.w	r5, r5, r9
 800c658:	60a5      	str	r5, [r4, #8]
 800c65a:	42be      	cmp	r6, r7
 800c65c:	d900      	bls.n	800c660 <__ssputs_r+0x70>
 800c65e:	463e      	mov	r6, r7
 800c660:	4632      	mov	r2, r6
 800c662:	4641      	mov	r1, r8
 800c664:	6820      	ldr	r0, [r4, #0]
 800c666:	f000 faaf 	bl	800cbc8 <memmove>
 800c66a:	2000      	movs	r0, #0
 800c66c:	68a3      	ldr	r3, [r4, #8]
 800c66e:	1b9b      	subs	r3, r3, r6
 800c670:	60a3      	str	r3, [r4, #8]
 800c672:	6823      	ldr	r3, [r4, #0]
 800c674:	4433      	add	r3, r6
 800c676:	6023      	str	r3, [r4, #0]
 800c678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c67c:	462a      	mov	r2, r5
 800c67e:	f000 fad9 	bl	800cc34 <_realloc_r>
 800c682:	4606      	mov	r6, r0
 800c684:	2800      	cmp	r0, #0
 800c686:	d1e0      	bne.n	800c64a <__ssputs_r+0x5a>
 800c688:	4650      	mov	r0, sl
 800c68a:	6921      	ldr	r1, [r4, #16]
 800c68c:	f7ff ff68 	bl	800c560 <_free_r>
 800c690:	230c      	movs	r3, #12
 800c692:	f8ca 3000 	str.w	r3, [sl]
 800c696:	89a3      	ldrh	r3, [r4, #12]
 800c698:	f04f 30ff 	mov.w	r0, #4294967295
 800c69c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a0:	81a3      	strh	r3, [r4, #12]
 800c6a2:	e7e9      	b.n	800c678 <__ssputs_r+0x88>

0800c6a4 <_svfiprintf_r>:
 800c6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a8:	4698      	mov	r8, r3
 800c6aa:	898b      	ldrh	r3, [r1, #12]
 800c6ac:	4607      	mov	r7, r0
 800c6ae:	061b      	lsls	r3, r3, #24
 800c6b0:	460d      	mov	r5, r1
 800c6b2:	4614      	mov	r4, r2
 800c6b4:	b09d      	sub	sp, #116	; 0x74
 800c6b6:	d50e      	bpl.n	800c6d6 <_svfiprintf_r+0x32>
 800c6b8:	690b      	ldr	r3, [r1, #16]
 800c6ba:	b963      	cbnz	r3, 800c6d6 <_svfiprintf_r+0x32>
 800c6bc:	2140      	movs	r1, #64	; 0x40
 800c6be:	f7ff fe05 	bl	800c2cc <_malloc_r>
 800c6c2:	6028      	str	r0, [r5, #0]
 800c6c4:	6128      	str	r0, [r5, #16]
 800c6c6:	b920      	cbnz	r0, 800c6d2 <_svfiprintf_r+0x2e>
 800c6c8:	230c      	movs	r3, #12
 800c6ca:	603b      	str	r3, [r7, #0]
 800c6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d0:	e0d0      	b.n	800c874 <_svfiprintf_r+0x1d0>
 800c6d2:	2340      	movs	r3, #64	; 0x40
 800c6d4:	616b      	str	r3, [r5, #20]
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c6da:	2320      	movs	r3, #32
 800c6dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6e0:	2330      	movs	r3, #48	; 0x30
 800c6e2:	f04f 0901 	mov.w	r9, #1
 800c6e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6ea:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c88c <_svfiprintf_r+0x1e8>
 800c6ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6f2:	4623      	mov	r3, r4
 800c6f4:	469a      	mov	sl, r3
 800c6f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6fa:	b10a      	cbz	r2, 800c700 <_svfiprintf_r+0x5c>
 800c6fc:	2a25      	cmp	r2, #37	; 0x25
 800c6fe:	d1f9      	bne.n	800c6f4 <_svfiprintf_r+0x50>
 800c700:	ebba 0b04 	subs.w	fp, sl, r4
 800c704:	d00b      	beq.n	800c71e <_svfiprintf_r+0x7a>
 800c706:	465b      	mov	r3, fp
 800c708:	4622      	mov	r2, r4
 800c70a:	4629      	mov	r1, r5
 800c70c:	4638      	mov	r0, r7
 800c70e:	f7ff ff6f 	bl	800c5f0 <__ssputs_r>
 800c712:	3001      	adds	r0, #1
 800c714:	f000 80a9 	beq.w	800c86a <_svfiprintf_r+0x1c6>
 800c718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c71a:	445a      	add	r2, fp
 800c71c:	9209      	str	r2, [sp, #36]	; 0x24
 800c71e:	f89a 3000 	ldrb.w	r3, [sl]
 800c722:	2b00      	cmp	r3, #0
 800c724:	f000 80a1 	beq.w	800c86a <_svfiprintf_r+0x1c6>
 800c728:	2300      	movs	r3, #0
 800c72a:	f04f 32ff 	mov.w	r2, #4294967295
 800c72e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c732:	f10a 0a01 	add.w	sl, sl, #1
 800c736:	9304      	str	r3, [sp, #16]
 800c738:	9307      	str	r3, [sp, #28]
 800c73a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c73e:	931a      	str	r3, [sp, #104]	; 0x68
 800c740:	4654      	mov	r4, sl
 800c742:	2205      	movs	r2, #5
 800c744:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c748:	4850      	ldr	r0, [pc, #320]	; (800c88c <_svfiprintf_r+0x1e8>)
 800c74a:	f000 fa57 	bl	800cbfc <memchr>
 800c74e:	9a04      	ldr	r2, [sp, #16]
 800c750:	b9d8      	cbnz	r0, 800c78a <_svfiprintf_r+0xe6>
 800c752:	06d0      	lsls	r0, r2, #27
 800c754:	bf44      	itt	mi
 800c756:	2320      	movmi	r3, #32
 800c758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c75c:	0711      	lsls	r1, r2, #28
 800c75e:	bf44      	itt	mi
 800c760:	232b      	movmi	r3, #43	; 0x2b
 800c762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c766:	f89a 3000 	ldrb.w	r3, [sl]
 800c76a:	2b2a      	cmp	r3, #42	; 0x2a
 800c76c:	d015      	beq.n	800c79a <_svfiprintf_r+0xf6>
 800c76e:	4654      	mov	r4, sl
 800c770:	2000      	movs	r0, #0
 800c772:	f04f 0c0a 	mov.w	ip, #10
 800c776:	9a07      	ldr	r2, [sp, #28]
 800c778:	4621      	mov	r1, r4
 800c77a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c77e:	3b30      	subs	r3, #48	; 0x30
 800c780:	2b09      	cmp	r3, #9
 800c782:	d94d      	bls.n	800c820 <_svfiprintf_r+0x17c>
 800c784:	b1b0      	cbz	r0, 800c7b4 <_svfiprintf_r+0x110>
 800c786:	9207      	str	r2, [sp, #28]
 800c788:	e014      	b.n	800c7b4 <_svfiprintf_r+0x110>
 800c78a:	eba0 0308 	sub.w	r3, r0, r8
 800c78e:	fa09 f303 	lsl.w	r3, r9, r3
 800c792:	4313      	orrs	r3, r2
 800c794:	46a2      	mov	sl, r4
 800c796:	9304      	str	r3, [sp, #16]
 800c798:	e7d2      	b.n	800c740 <_svfiprintf_r+0x9c>
 800c79a:	9b03      	ldr	r3, [sp, #12]
 800c79c:	1d19      	adds	r1, r3, #4
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	9103      	str	r1, [sp, #12]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	bfbb      	ittet	lt
 800c7a6:	425b      	neglt	r3, r3
 800c7a8:	f042 0202 	orrlt.w	r2, r2, #2
 800c7ac:	9307      	strge	r3, [sp, #28]
 800c7ae:	9307      	strlt	r3, [sp, #28]
 800c7b0:	bfb8      	it	lt
 800c7b2:	9204      	strlt	r2, [sp, #16]
 800c7b4:	7823      	ldrb	r3, [r4, #0]
 800c7b6:	2b2e      	cmp	r3, #46	; 0x2e
 800c7b8:	d10c      	bne.n	800c7d4 <_svfiprintf_r+0x130>
 800c7ba:	7863      	ldrb	r3, [r4, #1]
 800c7bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c7be:	d134      	bne.n	800c82a <_svfiprintf_r+0x186>
 800c7c0:	9b03      	ldr	r3, [sp, #12]
 800c7c2:	3402      	adds	r4, #2
 800c7c4:	1d1a      	adds	r2, r3, #4
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	9203      	str	r2, [sp, #12]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	bfb8      	it	lt
 800c7ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7d2:	9305      	str	r3, [sp, #20]
 800c7d4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c890 <_svfiprintf_r+0x1ec>
 800c7d8:	2203      	movs	r2, #3
 800c7da:	4650      	mov	r0, sl
 800c7dc:	7821      	ldrb	r1, [r4, #0]
 800c7de:	f000 fa0d 	bl	800cbfc <memchr>
 800c7e2:	b138      	cbz	r0, 800c7f4 <_svfiprintf_r+0x150>
 800c7e4:	2240      	movs	r2, #64	; 0x40
 800c7e6:	9b04      	ldr	r3, [sp, #16]
 800c7e8:	eba0 000a 	sub.w	r0, r0, sl
 800c7ec:	4082      	lsls	r2, r0
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	3401      	adds	r4, #1
 800c7f2:	9304      	str	r3, [sp, #16]
 800c7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f8:	2206      	movs	r2, #6
 800c7fa:	4826      	ldr	r0, [pc, #152]	; (800c894 <_svfiprintf_r+0x1f0>)
 800c7fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c800:	f000 f9fc 	bl	800cbfc <memchr>
 800c804:	2800      	cmp	r0, #0
 800c806:	d038      	beq.n	800c87a <_svfiprintf_r+0x1d6>
 800c808:	4b23      	ldr	r3, [pc, #140]	; (800c898 <_svfiprintf_r+0x1f4>)
 800c80a:	bb1b      	cbnz	r3, 800c854 <_svfiprintf_r+0x1b0>
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	3307      	adds	r3, #7
 800c810:	f023 0307 	bic.w	r3, r3, #7
 800c814:	3308      	adds	r3, #8
 800c816:	9303      	str	r3, [sp, #12]
 800c818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c81a:	4433      	add	r3, r6
 800c81c:	9309      	str	r3, [sp, #36]	; 0x24
 800c81e:	e768      	b.n	800c6f2 <_svfiprintf_r+0x4e>
 800c820:	460c      	mov	r4, r1
 800c822:	2001      	movs	r0, #1
 800c824:	fb0c 3202 	mla	r2, ip, r2, r3
 800c828:	e7a6      	b.n	800c778 <_svfiprintf_r+0xd4>
 800c82a:	2300      	movs	r3, #0
 800c82c:	f04f 0c0a 	mov.w	ip, #10
 800c830:	4619      	mov	r1, r3
 800c832:	3401      	adds	r4, #1
 800c834:	9305      	str	r3, [sp, #20]
 800c836:	4620      	mov	r0, r4
 800c838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c83c:	3a30      	subs	r2, #48	; 0x30
 800c83e:	2a09      	cmp	r2, #9
 800c840:	d903      	bls.n	800c84a <_svfiprintf_r+0x1a6>
 800c842:	2b00      	cmp	r3, #0
 800c844:	d0c6      	beq.n	800c7d4 <_svfiprintf_r+0x130>
 800c846:	9105      	str	r1, [sp, #20]
 800c848:	e7c4      	b.n	800c7d4 <_svfiprintf_r+0x130>
 800c84a:	4604      	mov	r4, r0
 800c84c:	2301      	movs	r3, #1
 800c84e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c852:	e7f0      	b.n	800c836 <_svfiprintf_r+0x192>
 800c854:	ab03      	add	r3, sp, #12
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	462a      	mov	r2, r5
 800c85a:	4638      	mov	r0, r7
 800c85c:	4b0f      	ldr	r3, [pc, #60]	; (800c89c <_svfiprintf_r+0x1f8>)
 800c85e:	a904      	add	r1, sp, #16
 800c860:	f3af 8000 	nop.w
 800c864:	1c42      	adds	r2, r0, #1
 800c866:	4606      	mov	r6, r0
 800c868:	d1d6      	bne.n	800c818 <_svfiprintf_r+0x174>
 800c86a:	89ab      	ldrh	r3, [r5, #12]
 800c86c:	065b      	lsls	r3, r3, #25
 800c86e:	f53f af2d 	bmi.w	800c6cc <_svfiprintf_r+0x28>
 800c872:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c874:	b01d      	add	sp, #116	; 0x74
 800c876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87a:	ab03      	add	r3, sp, #12
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	462a      	mov	r2, r5
 800c880:	4638      	mov	r0, r7
 800c882:	4b06      	ldr	r3, [pc, #24]	; (800c89c <_svfiprintf_r+0x1f8>)
 800c884:	a904      	add	r1, sp, #16
 800c886:	f000 f87d 	bl	800c984 <_printf_i>
 800c88a:	e7eb      	b.n	800c864 <_svfiprintf_r+0x1c0>
 800c88c:	0800dc7b 	.word	0x0800dc7b
 800c890:	0800dc81 	.word	0x0800dc81
 800c894:	0800dc85 	.word	0x0800dc85
 800c898:	00000000 	.word	0x00000000
 800c89c:	0800c5f1 	.word	0x0800c5f1

0800c8a0 <_printf_common>:
 800c8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a4:	4616      	mov	r6, r2
 800c8a6:	4699      	mov	r9, r3
 800c8a8:	688a      	ldr	r2, [r1, #8]
 800c8aa:	690b      	ldr	r3, [r1, #16]
 800c8ac:	4607      	mov	r7, r0
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	bfb8      	it	lt
 800c8b2:	4613      	movlt	r3, r2
 800c8b4:	6033      	str	r3, [r6, #0]
 800c8b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8c0:	b10a      	cbz	r2, 800c8c6 <_printf_common+0x26>
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	6033      	str	r3, [r6, #0]
 800c8c6:	6823      	ldr	r3, [r4, #0]
 800c8c8:	0699      	lsls	r1, r3, #26
 800c8ca:	bf42      	ittt	mi
 800c8cc:	6833      	ldrmi	r3, [r6, #0]
 800c8ce:	3302      	addmi	r3, #2
 800c8d0:	6033      	strmi	r3, [r6, #0]
 800c8d2:	6825      	ldr	r5, [r4, #0]
 800c8d4:	f015 0506 	ands.w	r5, r5, #6
 800c8d8:	d106      	bne.n	800c8e8 <_printf_common+0x48>
 800c8da:	f104 0a19 	add.w	sl, r4, #25
 800c8de:	68e3      	ldr	r3, [r4, #12]
 800c8e0:	6832      	ldr	r2, [r6, #0]
 800c8e2:	1a9b      	subs	r3, r3, r2
 800c8e4:	42ab      	cmp	r3, r5
 800c8e6:	dc2b      	bgt.n	800c940 <_printf_common+0xa0>
 800c8e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8ec:	1e13      	subs	r3, r2, #0
 800c8ee:	6822      	ldr	r2, [r4, #0]
 800c8f0:	bf18      	it	ne
 800c8f2:	2301      	movne	r3, #1
 800c8f4:	0692      	lsls	r2, r2, #26
 800c8f6:	d430      	bmi.n	800c95a <_printf_common+0xba>
 800c8f8:	4649      	mov	r1, r9
 800c8fa:	4638      	mov	r0, r7
 800c8fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c900:	47c0      	blx	r8
 800c902:	3001      	adds	r0, #1
 800c904:	d023      	beq.n	800c94e <_printf_common+0xae>
 800c906:	6823      	ldr	r3, [r4, #0]
 800c908:	6922      	ldr	r2, [r4, #16]
 800c90a:	f003 0306 	and.w	r3, r3, #6
 800c90e:	2b04      	cmp	r3, #4
 800c910:	bf14      	ite	ne
 800c912:	2500      	movne	r5, #0
 800c914:	6833      	ldreq	r3, [r6, #0]
 800c916:	f04f 0600 	mov.w	r6, #0
 800c91a:	bf08      	it	eq
 800c91c:	68e5      	ldreq	r5, [r4, #12]
 800c91e:	f104 041a 	add.w	r4, r4, #26
 800c922:	bf08      	it	eq
 800c924:	1aed      	subeq	r5, r5, r3
 800c926:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c92a:	bf08      	it	eq
 800c92c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c930:	4293      	cmp	r3, r2
 800c932:	bfc4      	itt	gt
 800c934:	1a9b      	subgt	r3, r3, r2
 800c936:	18ed      	addgt	r5, r5, r3
 800c938:	42b5      	cmp	r5, r6
 800c93a:	d11a      	bne.n	800c972 <_printf_common+0xd2>
 800c93c:	2000      	movs	r0, #0
 800c93e:	e008      	b.n	800c952 <_printf_common+0xb2>
 800c940:	2301      	movs	r3, #1
 800c942:	4652      	mov	r2, sl
 800c944:	4649      	mov	r1, r9
 800c946:	4638      	mov	r0, r7
 800c948:	47c0      	blx	r8
 800c94a:	3001      	adds	r0, #1
 800c94c:	d103      	bne.n	800c956 <_printf_common+0xb6>
 800c94e:	f04f 30ff 	mov.w	r0, #4294967295
 800c952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c956:	3501      	adds	r5, #1
 800c958:	e7c1      	b.n	800c8de <_printf_common+0x3e>
 800c95a:	2030      	movs	r0, #48	; 0x30
 800c95c:	18e1      	adds	r1, r4, r3
 800c95e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c962:	1c5a      	adds	r2, r3, #1
 800c964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c968:	4422      	add	r2, r4
 800c96a:	3302      	adds	r3, #2
 800c96c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c970:	e7c2      	b.n	800c8f8 <_printf_common+0x58>
 800c972:	2301      	movs	r3, #1
 800c974:	4622      	mov	r2, r4
 800c976:	4649      	mov	r1, r9
 800c978:	4638      	mov	r0, r7
 800c97a:	47c0      	blx	r8
 800c97c:	3001      	adds	r0, #1
 800c97e:	d0e6      	beq.n	800c94e <_printf_common+0xae>
 800c980:	3601      	adds	r6, #1
 800c982:	e7d9      	b.n	800c938 <_printf_common+0x98>

0800c984 <_printf_i>:
 800c984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c988:	7e0f      	ldrb	r7, [r1, #24]
 800c98a:	4691      	mov	r9, r2
 800c98c:	2f78      	cmp	r7, #120	; 0x78
 800c98e:	4680      	mov	r8, r0
 800c990:	460c      	mov	r4, r1
 800c992:	469a      	mov	sl, r3
 800c994:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c99a:	d807      	bhi.n	800c9ac <_printf_i+0x28>
 800c99c:	2f62      	cmp	r7, #98	; 0x62
 800c99e:	d80a      	bhi.n	800c9b6 <_printf_i+0x32>
 800c9a0:	2f00      	cmp	r7, #0
 800c9a2:	f000 80d5 	beq.w	800cb50 <_printf_i+0x1cc>
 800c9a6:	2f58      	cmp	r7, #88	; 0x58
 800c9a8:	f000 80c1 	beq.w	800cb2e <_printf_i+0x1aa>
 800c9ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9b4:	e03a      	b.n	800ca2c <_printf_i+0xa8>
 800c9b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9ba:	2b15      	cmp	r3, #21
 800c9bc:	d8f6      	bhi.n	800c9ac <_printf_i+0x28>
 800c9be:	a101      	add	r1, pc, #4	; (adr r1, 800c9c4 <_printf_i+0x40>)
 800c9c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9c4:	0800ca1d 	.word	0x0800ca1d
 800c9c8:	0800ca31 	.word	0x0800ca31
 800c9cc:	0800c9ad 	.word	0x0800c9ad
 800c9d0:	0800c9ad 	.word	0x0800c9ad
 800c9d4:	0800c9ad 	.word	0x0800c9ad
 800c9d8:	0800c9ad 	.word	0x0800c9ad
 800c9dc:	0800ca31 	.word	0x0800ca31
 800c9e0:	0800c9ad 	.word	0x0800c9ad
 800c9e4:	0800c9ad 	.word	0x0800c9ad
 800c9e8:	0800c9ad 	.word	0x0800c9ad
 800c9ec:	0800c9ad 	.word	0x0800c9ad
 800c9f0:	0800cb37 	.word	0x0800cb37
 800c9f4:	0800ca5d 	.word	0x0800ca5d
 800c9f8:	0800caf1 	.word	0x0800caf1
 800c9fc:	0800c9ad 	.word	0x0800c9ad
 800ca00:	0800c9ad 	.word	0x0800c9ad
 800ca04:	0800cb59 	.word	0x0800cb59
 800ca08:	0800c9ad 	.word	0x0800c9ad
 800ca0c:	0800ca5d 	.word	0x0800ca5d
 800ca10:	0800c9ad 	.word	0x0800c9ad
 800ca14:	0800c9ad 	.word	0x0800c9ad
 800ca18:	0800caf9 	.word	0x0800caf9
 800ca1c:	682b      	ldr	r3, [r5, #0]
 800ca1e:	1d1a      	adds	r2, r3, #4
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	602a      	str	r2, [r5, #0]
 800ca24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e0a0      	b.n	800cb72 <_printf_i+0x1ee>
 800ca30:	6820      	ldr	r0, [r4, #0]
 800ca32:	682b      	ldr	r3, [r5, #0]
 800ca34:	0607      	lsls	r7, r0, #24
 800ca36:	f103 0104 	add.w	r1, r3, #4
 800ca3a:	6029      	str	r1, [r5, #0]
 800ca3c:	d501      	bpl.n	800ca42 <_printf_i+0xbe>
 800ca3e:	681e      	ldr	r6, [r3, #0]
 800ca40:	e003      	b.n	800ca4a <_printf_i+0xc6>
 800ca42:	0646      	lsls	r6, r0, #25
 800ca44:	d5fb      	bpl.n	800ca3e <_printf_i+0xba>
 800ca46:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ca4a:	2e00      	cmp	r6, #0
 800ca4c:	da03      	bge.n	800ca56 <_printf_i+0xd2>
 800ca4e:	232d      	movs	r3, #45	; 0x2d
 800ca50:	4276      	negs	r6, r6
 800ca52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca56:	230a      	movs	r3, #10
 800ca58:	4859      	ldr	r0, [pc, #356]	; (800cbc0 <_printf_i+0x23c>)
 800ca5a:	e012      	b.n	800ca82 <_printf_i+0xfe>
 800ca5c:	682b      	ldr	r3, [r5, #0]
 800ca5e:	6820      	ldr	r0, [r4, #0]
 800ca60:	1d19      	adds	r1, r3, #4
 800ca62:	6029      	str	r1, [r5, #0]
 800ca64:	0605      	lsls	r5, r0, #24
 800ca66:	d501      	bpl.n	800ca6c <_printf_i+0xe8>
 800ca68:	681e      	ldr	r6, [r3, #0]
 800ca6a:	e002      	b.n	800ca72 <_printf_i+0xee>
 800ca6c:	0641      	lsls	r1, r0, #25
 800ca6e:	d5fb      	bpl.n	800ca68 <_printf_i+0xe4>
 800ca70:	881e      	ldrh	r6, [r3, #0]
 800ca72:	2f6f      	cmp	r7, #111	; 0x6f
 800ca74:	bf0c      	ite	eq
 800ca76:	2308      	moveq	r3, #8
 800ca78:	230a      	movne	r3, #10
 800ca7a:	4851      	ldr	r0, [pc, #324]	; (800cbc0 <_printf_i+0x23c>)
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca82:	6865      	ldr	r5, [r4, #4]
 800ca84:	2d00      	cmp	r5, #0
 800ca86:	bfa8      	it	ge
 800ca88:	6821      	ldrge	r1, [r4, #0]
 800ca8a:	60a5      	str	r5, [r4, #8]
 800ca8c:	bfa4      	itt	ge
 800ca8e:	f021 0104 	bicge.w	r1, r1, #4
 800ca92:	6021      	strge	r1, [r4, #0]
 800ca94:	b90e      	cbnz	r6, 800ca9a <_printf_i+0x116>
 800ca96:	2d00      	cmp	r5, #0
 800ca98:	d04b      	beq.n	800cb32 <_printf_i+0x1ae>
 800ca9a:	4615      	mov	r5, r2
 800ca9c:	fbb6 f1f3 	udiv	r1, r6, r3
 800caa0:	fb03 6711 	mls	r7, r3, r1, r6
 800caa4:	5dc7      	ldrb	r7, [r0, r7]
 800caa6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800caaa:	4637      	mov	r7, r6
 800caac:	42bb      	cmp	r3, r7
 800caae:	460e      	mov	r6, r1
 800cab0:	d9f4      	bls.n	800ca9c <_printf_i+0x118>
 800cab2:	2b08      	cmp	r3, #8
 800cab4:	d10b      	bne.n	800cace <_printf_i+0x14a>
 800cab6:	6823      	ldr	r3, [r4, #0]
 800cab8:	07de      	lsls	r6, r3, #31
 800caba:	d508      	bpl.n	800cace <_printf_i+0x14a>
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	6861      	ldr	r1, [r4, #4]
 800cac0:	4299      	cmp	r1, r3
 800cac2:	bfde      	ittt	le
 800cac4:	2330      	movle	r3, #48	; 0x30
 800cac6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800caca:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cace:	1b52      	subs	r2, r2, r5
 800cad0:	6122      	str	r2, [r4, #16]
 800cad2:	464b      	mov	r3, r9
 800cad4:	4621      	mov	r1, r4
 800cad6:	4640      	mov	r0, r8
 800cad8:	f8cd a000 	str.w	sl, [sp]
 800cadc:	aa03      	add	r2, sp, #12
 800cade:	f7ff fedf 	bl	800c8a0 <_printf_common>
 800cae2:	3001      	adds	r0, #1
 800cae4:	d14a      	bne.n	800cb7c <_printf_i+0x1f8>
 800cae6:	f04f 30ff 	mov.w	r0, #4294967295
 800caea:	b004      	add	sp, #16
 800caec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf0:	6823      	ldr	r3, [r4, #0]
 800caf2:	f043 0320 	orr.w	r3, r3, #32
 800caf6:	6023      	str	r3, [r4, #0]
 800caf8:	2778      	movs	r7, #120	; 0x78
 800cafa:	4832      	ldr	r0, [pc, #200]	; (800cbc4 <_printf_i+0x240>)
 800cafc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb00:	6823      	ldr	r3, [r4, #0]
 800cb02:	6829      	ldr	r1, [r5, #0]
 800cb04:	061f      	lsls	r7, r3, #24
 800cb06:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb0a:	d402      	bmi.n	800cb12 <_printf_i+0x18e>
 800cb0c:	065f      	lsls	r7, r3, #25
 800cb0e:	bf48      	it	mi
 800cb10:	b2b6      	uxthmi	r6, r6
 800cb12:	07df      	lsls	r7, r3, #31
 800cb14:	bf48      	it	mi
 800cb16:	f043 0320 	orrmi.w	r3, r3, #32
 800cb1a:	6029      	str	r1, [r5, #0]
 800cb1c:	bf48      	it	mi
 800cb1e:	6023      	strmi	r3, [r4, #0]
 800cb20:	b91e      	cbnz	r6, 800cb2a <_printf_i+0x1a6>
 800cb22:	6823      	ldr	r3, [r4, #0]
 800cb24:	f023 0320 	bic.w	r3, r3, #32
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	2310      	movs	r3, #16
 800cb2c:	e7a6      	b.n	800ca7c <_printf_i+0xf8>
 800cb2e:	4824      	ldr	r0, [pc, #144]	; (800cbc0 <_printf_i+0x23c>)
 800cb30:	e7e4      	b.n	800cafc <_printf_i+0x178>
 800cb32:	4615      	mov	r5, r2
 800cb34:	e7bd      	b.n	800cab2 <_printf_i+0x12e>
 800cb36:	682b      	ldr	r3, [r5, #0]
 800cb38:	6826      	ldr	r6, [r4, #0]
 800cb3a:	1d18      	adds	r0, r3, #4
 800cb3c:	6961      	ldr	r1, [r4, #20]
 800cb3e:	6028      	str	r0, [r5, #0]
 800cb40:	0635      	lsls	r5, r6, #24
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	d501      	bpl.n	800cb4a <_printf_i+0x1c6>
 800cb46:	6019      	str	r1, [r3, #0]
 800cb48:	e002      	b.n	800cb50 <_printf_i+0x1cc>
 800cb4a:	0670      	lsls	r0, r6, #25
 800cb4c:	d5fb      	bpl.n	800cb46 <_printf_i+0x1c2>
 800cb4e:	8019      	strh	r1, [r3, #0]
 800cb50:	2300      	movs	r3, #0
 800cb52:	4615      	mov	r5, r2
 800cb54:	6123      	str	r3, [r4, #16]
 800cb56:	e7bc      	b.n	800cad2 <_printf_i+0x14e>
 800cb58:	682b      	ldr	r3, [r5, #0]
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	1d1a      	adds	r2, r3, #4
 800cb5e:	602a      	str	r2, [r5, #0]
 800cb60:	681d      	ldr	r5, [r3, #0]
 800cb62:	6862      	ldr	r2, [r4, #4]
 800cb64:	4628      	mov	r0, r5
 800cb66:	f000 f849 	bl	800cbfc <memchr>
 800cb6a:	b108      	cbz	r0, 800cb70 <_printf_i+0x1ec>
 800cb6c:	1b40      	subs	r0, r0, r5
 800cb6e:	6060      	str	r0, [r4, #4]
 800cb70:	6863      	ldr	r3, [r4, #4]
 800cb72:	6123      	str	r3, [r4, #16]
 800cb74:	2300      	movs	r3, #0
 800cb76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb7a:	e7aa      	b.n	800cad2 <_printf_i+0x14e>
 800cb7c:	462a      	mov	r2, r5
 800cb7e:	4649      	mov	r1, r9
 800cb80:	4640      	mov	r0, r8
 800cb82:	6923      	ldr	r3, [r4, #16]
 800cb84:	47d0      	blx	sl
 800cb86:	3001      	adds	r0, #1
 800cb88:	d0ad      	beq.n	800cae6 <_printf_i+0x162>
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	079b      	lsls	r3, r3, #30
 800cb8e:	d413      	bmi.n	800cbb8 <_printf_i+0x234>
 800cb90:	68e0      	ldr	r0, [r4, #12]
 800cb92:	9b03      	ldr	r3, [sp, #12]
 800cb94:	4298      	cmp	r0, r3
 800cb96:	bfb8      	it	lt
 800cb98:	4618      	movlt	r0, r3
 800cb9a:	e7a6      	b.n	800caea <_printf_i+0x166>
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	4632      	mov	r2, r6
 800cba0:	4649      	mov	r1, r9
 800cba2:	4640      	mov	r0, r8
 800cba4:	47d0      	blx	sl
 800cba6:	3001      	adds	r0, #1
 800cba8:	d09d      	beq.n	800cae6 <_printf_i+0x162>
 800cbaa:	3501      	adds	r5, #1
 800cbac:	68e3      	ldr	r3, [r4, #12]
 800cbae:	9903      	ldr	r1, [sp, #12]
 800cbb0:	1a5b      	subs	r3, r3, r1
 800cbb2:	42ab      	cmp	r3, r5
 800cbb4:	dcf2      	bgt.n	800cb9c <_printf_i+0x218>
 800cbb6:	e7eb      	b.n	800cb90 <_printf_i+0x20c>
 800cbb8:	2500      	movs	r5, #0
 800cbba:	f104 0619 	add.w	r6, r4, #25
 800cbbe:	e7f5      	b.n	800cbac <_printf_i+0x228>
 800cbc0:	0800dc8c 	.word	0x0800dc8c
 800cbc4:	0800dc9d 	.word	0x0800dc9d

0800cbc8 <memmove>:
 800cbc8:	4288      	cmp	r0, r1
 800cbca:	b510      	push	{r4, lr}
 800cbcc:	eb01 0402 	add.w	r4, r1, r2
 800cbd0:	d902      	bls.n	800cbd8 <memmove+0x10>
 800cbd2:	4284      	cmp	r4, r0
 800cbd4:	4623      	mov	r3, r4
 800cbd6:	d807      	bhi.n	800cbe8 <memmove+0x20>
 800cbd8:	1e43      	subs	r3, r0, #1
 800cbda:	42a1      	cmp	r1, r4
 800cbdc:	d008      	beq.n	800cbf0 <memmove+0x28>
 800cbde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbe6:	e7f8      	b.n	800cbda <memmove+0x12>
 800cbe8:	4601      	mov	r1, r0
 800cbea:	4402      	add	r2, r0
 800cbec:	428a      	cmp	r2, r1
 800cbee:	d100      	bne.n	800cbf2 <memmove+0x2a>
 800cbf0:	bd10      	pop	{r4, pc}
 800cbf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbfa:	e7f7      	b.n	800cbec <memmove+0x24>

0800cbfc <memchr>:
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	b510      	push	{r4, lr}
 800cc00:	b2c9      	uxtb	r1, r1
 800cc02:	4402      	add	r2, r0
 800cc04:	4293      	cmp	r3, r2
 800cc06:	4618      	mov	r0, r3
 800cc08:	d101      	bne.n	800cc0e <memchr+0x12>
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	e003      	b.n	800cc16 <memchr+0x1a>
 800cc0e:	7804      	ldrb	r4, [r0, #0]
 800cc10:	3301      	adds	r3, #1
 800cc12:	428c      	cmp	r4, r1
 800cc14:	d1f6      	bne.n	800cc04 <memchr+0x8>
 800cc16:	bd10      	pop	{r4, pc}

0800cc18 <memcpy>:
 800cc18:	440a      	add	r2, r1
 800cc1a:	4291      	cmp	r1, r2
 800cc1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc20:	d100      	bne.n	800cc24 <memcpy+0xc>
 800cc22:	4770      	bx	lr
 800cc24:	b510      	push	{r4, lr}
 800cc26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc2a:	4291      	cmp	r1, r2
 800cc2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc30:	d1f9      	bne.n	800cc26 <memcpy+0xe>
 800cc32:	bd10      	pop	{r4, pc}

0800cc34 <_realloc_r>:
 800cc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc38:	4680      	mov	r8, r0
 800cc3a:	4614      	mov	r4, r2
 800cc3c:	460e      	mov	r6, r1
 800cc3e:	b921      	cbnz	r1, 800cc4a <_realloc_r+0x16>
 800cc40:	4611      	mov	r1, r2
 800cc42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc46:	f7ff bb41 	b.w	800c2cc <_malloc_r>
 800cc4a:	b92a      	cbnz	r2, 800cc58 <_realloc_r+0x24>
 800cc4c:	f7ff fc88 	bl	800c560 <_free_r>
 800cc50:	4625      	mov	r5, r4
 800cc52:	4628      	mov	r0, r5
 800cc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc58:	f000 f81b 	bl	800cc92 <_malloc_usable_size_r>
 800cc5c:	4284      	cmp	r4, r0
 800cc5e:	4607      	mov	r7, r0
 800cc60:	d802      	bhi.n	800cc68 <_realloc_r+0x34>
 800cc62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc66:	d812      	bhi.n	800cc8e <_realloc_r+0x5a>
 800cc68:	4621      	mov	r1, r4
 800cc6a:	4640      	mov	r0, r8
 800cc6c:	f7ff fb2e 	bl	800c2cc <_malloc_r>
 800cc70:	4605      	mov	r5, r0
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d0ed      	beq.n	800cc52 <_realloc_r+0x1e>
 800cc76:	42bc      	cmp	r4, r7
 800cc78:	4622      	mov	r2, r4
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	bf28      	it	cs
 800cc7e:	463a      	movcs	r2, r7
 800cc80:	f7ff ffca 	bl	800cc18 <memcpy>
 800cc84:	4631      	mov	r1, r6
 800cc86:	4640      	mov	r0, r8
 800cc88:	f7ff fc6a 	bl	800c560 <_free_r>
 800cc8c:	e7e1      	b.n	800cc52 <_realloc_r+0x1e>
 800cc8e:	4635      	mov	r5, r6
 800cc90:	e7df      	b.n	800cc52 <_realloc_r+0x1e>

0800cc92 <_malloc_usable_size_r>:
 800cc92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc96:	1f18      	subs	r0, r3, #4
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	bfbc      	itt	lt
 800cc9c:	580b      	ldrlt	r3, [r1, r0]
 800cc9e:	18c0      	addlt	r0, r0, r3
 800cca0:	4770      	bx	lr
	...

0800cca4 <_init>:
 800cca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca6:	bf00      	nop
 800cca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccaa:	bc08      	pop	{r3}
 800ccac:	469e      	mov	lr, r3
 800ccae:	4770      	bx	lr

0800ccb0 <_fini>:
 800ccb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb2:	bf00      	nop
 800ccb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccb6:	bc08      	pop	{r3}
 800ccb8:	469e      	mov	lr, r3
 800ccba:	4770      	bx	lr
